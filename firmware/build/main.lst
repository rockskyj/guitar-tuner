
build/main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 00 03 20 2d 85 01 08 79 85 01 08 79 85 01 08     ... -...y...y...
 8000010:	79 85 01 08 79 85 01 08 79 85 01 08 00 00 00 00     y...y...y.......
	...
 800002c:	c9 7e 01 08 79 85 01 08 00 00 00 00 79 85 01 08     .~..y.......y...
 800003c:	a9 7e 01 08 79 85 01 08 79 85 01 08 79 85 01 08     .~..y...y...y...
 800004c:	79 85 01 08 79 85 01 08 79 85 01 08 79 85 01 08     y...y...y...y...
 800005c:	79 85 01 08 79 85 01 08 79 85 01 08 79 85 01 08     y...y...y...y...
 800006c:	79 85 01 08 79 85 01 08 79 85 01 08 79 85 01 08     y...y...y...y...
 800007c:	79 85 01 08 79 85 01 08 79 85 01 08 79 85 01 08     y...y...y...y...
 800008c:	79 85 01 08 79 85 01 08 79 85 01 08 79 85 01 08     y...y...y...y...
 800009c:	79 85 01 08 79 85 01 08 79 85 01 08 79 85 01 08     y...y...y...y...
 80000ac:	79 85 01 08 79 85 01 08 79 85 01 08 79 85 01 08     y...y...y...y...
 80000bc:	79 85 01 08 79 85 01 08 79 85 01 08 79 85 01 08     y...y...y...y...
 80000cc:	79 85 01 08 79 85 01 08 79 85 01 08 a9 7e 01 08     y...y...y....~..
 80000dc:	79 85 01 08 79 85 01 08 79 85 01 08 79 85 01 08     y...y...y...y...
 80000ec:	79 85 01 08 79 85 01 08 79 85 01 08 79 85 01 08     y...y...y...y...
 80000fc:	79 85 01 08 79 85 01 08 79 85 01 08 79 85 01 08     y...y...y...y...
 800010c:	79 85 01 08 79 85 01 08 79 85 01 08 79 85 01 08     y...y...y...y...
 800011c:	79 85 01 08 79 85 01 08 79 85 01 08 79 85 01 08     y...y...y...y...
 800012c:	79 85 01 08 79 85 01 08 79 85 01 08 79 85 01 08     y...y...y...y...
 800013c:	79 85 01 08 79 85 01 08 79 85 01 08 79 85 01 08     y...y...y...y...
 800014c:	79 85 01 08 79 85 01 08 79 85 01 08 79 85 01 08     y...y...y...y...
 800015c:	79 85 01 08 79 85 01 08 79 85 01 08 79 85 01 08     y...y...y...y...
 800016c:	79 85 01 08 79 85 01 08 79 85 01 08 79 85 01 08     y...y...y...y...
 800017c:	79 85 01 08 79 85 01 08 79 85 01 08 79 85 01 08     y...y...y...y...
 800018c:	79 85 01 08 79 85 01 08 79 85 01 08 79 85 01 08     y...y...y...y...
 800019c:	79 85 01 08 79 85 01 08 79 85 01 08 79 85 01 08     y...y...y...y...

080001ac <main>:
#include "kernel.h"

int main()
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
	rtenv_start_scheduler();
 80001b0:	f002 fa36 	bl	8002620 <rtenv_start_scheduler>
	
	return 0;
 80001b4:	2300      	movs	r3, #0
}
 80001b6:	4618      	mov	r0, r3
 80001b8:	bd80      	pop	{r7, pc}
 80001ba:	bf00      	nop

080001bc <block_driver_readable>:
};


int block_driver_readable (struct block *block, struct file_request *request,
                           struct event_monitor *monitor)
{
 80001bc:	b480      	push	{r7}
 80001be:	b085      	sub	sp, #20
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	60f8      	str	r0, [r7, #12]
 80001c4:	60b9      	str	r1, [r7, #8]
 80001c6:	607a      	str	r2, [r7, #4]
    if (block->buzy)
 80001c8:	68fb      	ldr	r3, [r7, #12]
 80001ca:	699b      	ldr	r3, [r3, #24]
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d001      	beq.n	80001d4 <block_driver_readable+0x18>
        return FILE_ACCESS_ACCEPT;
 80001d0:	2301      	movs	r3, #1
 80001d2:	e001      	b.n	80001d8 <block_driver_readable+0x1c>
    else
        return FILE_ACCESS_ERROR;
 80001d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80001d8:	4618      	mov	r0, r3
 80001da:	3714      	adds	r7, #20
 80001dc:	46bd      	mov	sp, r7
 80001de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e2:	4770      	bx	lr

080001e4 <block_driver_writable>:

int block_driver_writable (struct block *block, struct file_request *request,
                           struct event_monitor *monitor)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b085      	sub	sp, #20
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	60f8      	str	r0, [r7, #12]
 80001ec:	60b9      	str	r1, [r7, #8]
 80001ee:	607a      	str	r2, [r7, #4]
    if (block->buzy)
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	699b      	ldr	r3, [r3, #24]
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d001      	beq.n	80001fc <block_driver_writable+0x18>
        return FILE_ACCESS_ACCEPT;
 80001f8:	2301      	movs	r3, #1
 80001fa:	e001      	b.n	8000200 <block_driver_writable+0x1c>
    else
        return FILE_ACCESS_ERROR;
 80001fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000200:	4618      	mov	r0, r3
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr

0800020c <block_driver_lseekable>:

int block_driver_lseekable (struct block *block, struct file_request *request,
                            struct event_monitor *monitor)
{
 800020c:	b480      	push	{r7}
 800020e:	b085      	sub	sp, #20
 8000210:	af00      	add	r7, sp, #0
 8000212:	60f8      	str	r0, [r7, #12]
 8000214:	60b9      	str	r1, [r7, #8]
 8000216:	607a      	str	r2, [r7, #4]
    if (block->buzy)
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	699b      	ldr	r3, [r3, #24]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d001      	beq.n	8000224 <block_driver_lseekable+0x18>
        return FILE_ACCESS_ACCEPT;
 8000220:	2301      	movs	r3, #1
 8000222:	e001      	b.n	8000228 <block_driver_lseekable+0x1c>
    else
        return FILE_ACCESS_ERROR;
 8000224:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000228:	4618      	mov	r0, r3
 800022a:	3714      	adds	r7, #20
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr

08000234 <block_driver_read>:

int block_driver_read (struct block *block, struct file_request *request,
                       struct event_monitor *monitor)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b086      	sub	sp, #24
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	60b9      	str	r1, [r7, #8]
 800023e:	607a      	str	r2, [r7, #4]
    int size = request->size;
 8000240:	68bb      	ldr	r3, [r7, #8]
 8000242:	689b      	ldr	r3, [r3, #8]
 8000244:	617b      	str	r3, [r7, #20]
    if (size > BLOCK_BUF)
 8000246:	697b      	ldr	r3, [r7, #20]
 8000248:	2b40      	cmp	r3, #64	; 0x40
 800024a:	dd01      	ble.n	8000250 <block_driver_read+0x1c>
        size = BLOCK_BUF;
 800024c:	2340      	movs	r3, #64	; 0x40
 800024e:	617b      	str	r3, [r7, #20]

    memcpy(request->buf, block->buf, size);
 8000250:	68bb      	ldr	r3, [r7, #8]
 8000252:	6859      	ldr	r1, [r3, #4]
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	f103 0220 	add.w	r2, r3, #32
 800025a:	697b      	ldr	r3, [r7, #20]
 800025c:	4608      	mov	r0, r1
 800025e:	4611      	mov	r1, r2
 8000260:	461a      	mov	r2, r3
 8000262:	f017 fe4d 	bl	8017f00 <memcpy>

    /* still buzy until driver write response */
    return size;
 8000266:	697b      	ldr	r3, [r7, #20]
}
 8000268:	4618      	mov	r0, r3
 800026a:	3718      	adds	r7, #24
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}

08000270 <block_driver_write>:

int block_driver_write (struct block *block, struct file_request *request,
                        struct event_monitor *monitor)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b088      	sub	sp, #32
 8000274:	af00      	add	r7, sp, #0
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	607a      	str	r2, [r7, #4]
    struct block_response *response = (void *)request->buf;
 800027c:	68bb      	ldr	r3, [r7, #8]
 800027e:	685b      	ldr	r3, [r3, #4]
 8000280:	61bb      	str	r3, [r7, #24]
    char *data_buf = response->buf;
 8000282:	69bb      	ldr	r3, [r7, #24]
 8000284:	685b      	ldr	r3, [r3, #4]
 8000286:	617b      	str	r3, [r7, #20]
    int len = response->transfer_len;
 8000288:	69bb      	ldr	r3, [r7, #24]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	61fb      	str	r3, [r7, #28]
    if (len > BLOCK_BUF)
 800028e:	69fb      	ldr	r3, [r7, #28]
 8000290:	2b40      	cmp	r3, #64	; 0x40
 8000292:	dd01      	ble.n	8000298 <block_driver_write+0x28>
        len = BLOCK_BUF;
 8000294:	2340      	movs	r3, #64	; 0x40
 8000296:	61fb      	str	r3, [r7, #28]

    if (len > 0) {
 8000298:	69fb      	ldr	r3, [r7, #28]
 800029a:	2b00      	cmp	r3, #0
 800029c:	dd08      	ble.n	80002b0 <block_driver_write+0x40>
        memcpy(block->buf, data_buf, len);
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	f103 0220 	add.w	r2, r3, #32
 80002a4:	69fb      	ldr	r3, [r7, #28]
 80002a6:	4610      	mov	r0, r2
 80002a8:	6979      	ldr	r1, [r7, #20]
 80002aa:	461a      	mov	r2, r3
 80002ac:	f017 fe28 	bl	8017f00 <memcpy>
    }
    block->transfer_len = len;
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	69fa      	ldr	r2, [r7, #28]
 80002b4:	661a      	str	r2, [r3, #96]	; 0x60
    block->buzy = 0;
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	2200      	movs	r2, #0
 80002ba:	619a      	str	r2, [r3, #24]
	event_monitor_release(monitor, block->event);
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	691b      	ldr	r3, [r3, #16]
 80002c0:	6878      	ldr	r0, [r7, #4]
 80002c2:	4619      	mov	r1, r3
 80002c4:	f000 fbd0 	bl	8000a68 <event_monitor_release>
    return len;
 80002c8:	69fb      	ldr	r3, [r7, #28]
}
 80002ca:	4618      	mov	r0, r3
 80002cc:	3720      	adds	r7, #32
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop

080002d4 <block_driver_lseek>:

int block_driver_lseek (struct block *block, struct file_request *request,
                        struct event_monitor *monitor)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
 80002da:	60f8      	str	r0, [r7, #12]
 80002dc:	60b9      	str	r1, [r7, #8]
 80002de:	607a      	str	r2, [r7, #4]
    block->transfer_len = request->size;
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	689a      	ldr	r2, [r3, #8]
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	661a      	str	r2, [r3, #96]	; 0x60
    block->buzy = 0;
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	2200      	movs	r2, #0
 80002ec:	619a      	str	r2, [r3, #24]
	event_monitor_release(monitor, block->event);
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	691b      	ldr	r3, [r3, #16]
 80002f2:	6878      	ldr	r0, [r7, #4]
 80002f4:	4619      	mov	r1, r3
 80002f6:	f000 fbb7 	bl	8000a68 <event_monitor_release>
    return request->size;
 80002fa:	68bb      	ldr	r3, [r7, #8]
 80002fc:	689b      	ldr	r3, [r3, #8]
}
 80002fe:	4618      	mov	r0, r3
 8000300:	3710      	adds	r7, #16
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop

08000308 <block_request_readable>:
 *  5. Get transfer_len
 *  6. Read data from buffer
 */
int block_request_readable (struct block *block, struct file_request *request,
                            struct event_monitor *monitor)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b090      	sub	sp, #64	; 0x40
 800030c:	af00      	add	r7, sp, #0
 800030e:	60f8      	str	r0, [r7, #12]
 8000310:	60b9      	str	r1, [r7, #8]
 8000312:	607a      	str	r2, [r7, #4]
    struct task_control_block *task = request->task;
 8000314:	68bb      	ldr	r3, [r7, #8]
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	63bb      	str	r3, [r7, #56]	; 0x38

    if (block->request_pid == 0) {
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d13d      	bne.n	800039e <block_request_readable+0x96>
        /* try to send request */
        struct file *driver = block->driver_file;
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	68db      	ldr	r3, [r3, #12]
 8000326:	637b      	str	r3, [r7, #52]	; 0x34
        int size = request->size;
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	689b      	ldr	r3, [r3, #8]
 800032c:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (size > BLOCK_BUF)
 800032e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000330:	2b40      	cmp	r3, #64	; 0x40
 8000332:	dd01      	ble.n	8000338 <block_request_readable+0x30>
            size = BLOCK_BUF;
 8000334:	2340      	movs	r3, #64	; 0x40
 8000336:	63fb      	str	r3, [r7, #60]	; 0x3c

        struct block_request block_request = {
 8000338:	2301      	movs	r3, #1
 800033a:	623b      	str	r3, [r7, #32]
            .cmd = BLOCK_CMD_READ,
            .task = task->pid,
 800033c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800033e:	685b      	ldr	r3, [r3, #4]
        struct file *driver = block->driver_file;
        int size = request->size;
        if (size > BLOCK_BUF)
            size = BLOCK_BUF;

        struct block_request block_request = {
 8000340:	627b      	str	r3, [r7, #36]	; 0x24
            .cmd = BLOCK_CMD_READ,
            .task = task->pid,
            .fd = block->file.fd,
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	681b      	ldr	r3, [r3, #0]
        struct file *driver = block->driver_file;
        int size = request->size;
        if (size > BLOCK_BUF)
            size = BLOCK_BUF;

        struct block_request block_request = {
 8000346:	62bb      	str	r3, [r7, #40]	; 0x28
 8000348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800034a:	62fb      	str	r3, [r7, #44]	; 0x2c
            .cmd = BLOCK_CMD_READ,
            .task = task->pid,
            .fd = block->file.fd,
            .size = size,
            .pos = block->pos
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	69db      	ldr	r3, [r3, #28]
        struct file *driver = block->driver_file;
        int size = request->size;
        if (size > BLOCK_BUF)
            size = BLOCK_BUF;

        struct block_request block_request = {
 8000350:	633b      	str	r3, [r7, #48]	; 0x30
            .fd = block->file.fd,
            .size = size,
            .pos = block->pos
        };

        struct file_request file_request = {
 8000352:	f107 0310 	add.w	r3, r7, #16
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	3304      	adds	r3, #4
 800035c:	2200      	movs	r2, #0
 800035e:	601a      	str	r2, [r3, #0]
 8000360:	3304      	adds	r3, #4
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	3304      	adds	r3, #4
 8000368:	2200      	movs	r2, #0
 800036a:	601a      	str	r2, [r3, #0]
 800036c:	3304      	adds	r3, #4
 800036e:	f107 0320 	add.w	r3, r7, #32
 8000372:	617b      	str	r3, [r7, #20]
 8000374:	2314      	movs	r3, #20
 8000376:	61bb      	str	r3, [r7, #24]
            .task = NULL,
            .buf = (char *)&block_request,
            .size = sizeof(block_request),
        };
        if (file_write(driver, &file_request, monitor) == 1) {
 8000378:	f107 0310 	add.w	r3, r7, #16
 800037c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800037e:	4619      	mov	r1, r3
 8000380:	687a      	ldr	r2, [r7, #4]
 8000382:	f000 fe5b 	bl	800103c <file_write>
 8000386:	4603      	mov	r3, r0
 8000388:	2b01      	cmp	r3, #1
 800038a:	d107      	bne.n	800039c <block_request_readable+0x94>
            block->request_pid = task->pid;
 800038c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800038e:	685a      	ldr	r2, [r3, #4]
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	615a      	str	r2, [r3, #20]
            block->buzy = 1;
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	2201      	movs	r2, #1
 8000398:	619a      	str	r2, [r3, #24]
 800039a:	e00c      	b.n	80003b6 <block_request_readable+0xae>
 800039c:	e00b      	b.n	80003b6 <block_request_readable+0xae>
        }
    }
    else if (block->request_pid == task->pid && !block->buzy) {
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	695a      	ldr	r2, [r3, #20]
 80003a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80003a4:	685b      	ldr	r3, [r3, #4]
 80003a6:	429a      	cmp	r2, r3
 80003a8:	d105      	bne.n	80003b6 <block_request_readable+0xae>
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	699b      	ldr	r3, [r3, #24]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d101      	bne.n	80003b6 <block_request_readable+0xae>
        return FILE_ACCESS_ACCEPT;
 80003b2:	2301      	movs	r3, #1
 80003b4:	e007      	b.n	80003c6 <block_request_readable+0xbe>
    }

	event_monitor_block(monitor, block->event, task);
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	691b      	ldr	r3, [r3, #16]
 80003ba:	6878      	ldr	r0, [r7, #4]
 80003bc:	4619      	mov	r1, r3
 80003be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80003c0:	f000 fb34 	bl	8000a2c <event_monitor_block>
    return FILE_ACCESS_BLOCK;
 80003c4:	2300      	movs	r3, #0
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	3740      	adds	r7, #64	; 0x40
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop

080003d0 <block_request_writable>:
 *  6. Driver write empty data to buffer
 *  7. Get transfer_len
 */
int block_request_writable (struct block *block, struct file_request *request,
                            struct event_monitor *monitor)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b090      	sub	sp, #64	; 0x40
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	60f8      	str	r0, [r7, #12]
 80003d8:	60b9      	str	r1, [r7, #8]
 80003da:	607a      	str	r2, [r7, #4]
    struct task_control_block *task = request->task;
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	63bb      	str	r3, [r7, #56]	; 0x38

    if (block->request_pid == 0) {
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d148      	bne.n	800047c <block_request_writable+0xac>
        /* try to send request */
        struct file *driver = block->driver_file;
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	68db      	ldr	r3, [r3, #12]
 80003ee:	637b      	str	r3, [r7, #52]	; 0x34
        int size = request->size;
 80003f0:	68bb      	ldr	r3, [r7, #8]
 80003f2:	689b      	ldr	r3, [r3, #8]
 80003f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (size > BLOCK_BUF)
 80003f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80003f8:	2b40      	cmp	r3, #64	; 0x40
 80003fa:	dd01      	ble.n	8000400 <block_request_writable+0x30>
            size = BLOCK_BUF;
 80003fc:	2340      	movs	r3, #64	; 0x40
 80003fe:	63fb      	str	r3, [r7, #60]	; 0x3c

        struct block_request block_request = {
 8000400:	2302      	movs	r3, #2
 8000402:	623b      	str	r3, [r7, #32]
            .cmd = BLOCK_CMD_WRITE,
            .task = task->pid,
 8000404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000406:	685b      	ldr	r3, [r3, #4]
        struct file *driver = block->driver_file;
        int size = request->size;
        if (size > BLOCK_BUF)
            size = BLOCK_BUF;

        struct block_request block_request = {
 8000408:	627b      	str	r3, [r7, #36]	; 0x24
            .cmd = BLOCK_CMD_WRITE,
            .task = task->pid,
            .fd = block->file.fd,
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	681b      	ldr	r3, [r3, #0]
        struct file *driver = block->driver_file;
        int size = request->size;
        if (size > BLOCK_BUF)
            size = BLOCK_BUF;

        struct block_request block_request = {
 800040e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000412:	62fb      	str	r3, [r7, #44]	; 0x2c
            .cmd = BLOCK_CMD_WRITE,
            .task = task->pid,
            .fd = block->file.fd,
            .size = size,
            .pos = block->pos
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	69db      	ldr	r3, [r3, #28]
        struct file *driver = block->driver_file;
        int size = request->size;
        if (size > BLOCK_BUF)
            size = BLOCK_BUF;

        struct block_request block_request = {
 8000418:	633b      	str	r3, [r7, #48]	; 0x30
            .fd = block->file.fd,
            .size = size,
            .pos = block->pos
        };

        struct file_request file_request = {
 800041a:	f107 0310 	add.w	r3, r7, #16
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	3304      	adds	r3, #4
 8000424:	2200      	movs	r2, #0
 8000426:	601a      	str	r2, [r3, #0]
 8000428:	3304      	adds	r3, #4
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
 800042e:	3304      	adds	r3, #4
 8000430:	2200      	movs	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
 8000434:	3304      	adds	r3, #4
 8000436:	f107 0320 	add.w	r3, r7, #32
 800043a:	617b      	str	r3, [r7, #20]
 800043c:	2314      	movs	r3, #20
 800043e:	61bb      	str	r3, [r7, #24]
            .task = NULL,
            .buf = (char *)&block_request,
            .size = sizeof(block_request),
        };

        if (file_write(driver, &file_request, monitor) == 1) {
 8000440:	f107 0310 	add.w	r3, r7, #16
 8000444:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000446:	4619      	mov	r1, r3
 8000448:	687a      	ldr	r2, [r7, #4]
 800044a:	f000 fdf7 	bl	800103c <file_write>
 800044e:	4603      	mov	r3, r0
 8000450:	2b01      	cmp	r3, #1
 8000452:	d112      	bne.n	800047a <block_request_writable+0xaa>

            memcpy(block->buf, request->buf, size);
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	f103 0120 	add.w	r1, r3, #32
 800045a:	68bb      	ldr	r3, [r7, #8]
 800045c:	685a      	ldr	r2, [r3, #4]
 800045e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000460:	4608      	mov	r0, r1
 8000462:	4611      	mov	r1, r2
 8000464:	461a      	mov	r2, r3
 8000466:	f017 fd4b 	bl	8017f00 <memcpy>

            block->request_pid = task->pid;
 800046a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800046c:	685a      	ldr	r2, [r3, #4]
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	615a      	str	r2, [r3, #20]
            block->buzy = 1;
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	2201      	movs	r2, #1
 8000476:	619a      	str	r2, [r3, #24]
 8000478:	e00c      	b.n	8000494 <block_request_writable+0xc4>
 800047a:	e00b      	b.n	8000494 <block_request_writable+0xc4>
        }
    }
    else if (block->request_pid == task->pid && !block->buzy) {
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	695a      	ldr	r2, [r3, #20]
 8000480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000482:	685b      	ldr	r3, [r3, #4]
 8000484:	429a      	cmp	r2, r3
 8000486:	d105      	bne.n	8000494 <block_request_writable+0xc4>
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d101      	bne.n	8000494 <block_request_writable+0xc4>
        return FILE_ACCESS_ACCEPT;
 8000490:	2301      	movs	r3, #1
 8000492:	e007      	b.n	80004a4 <block_request_writable+0xd4>
    }

	event_monitor_block(monitor, block->event, task);
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	691b      	ldr	r3, [r3, #16]
 8000498:	6878      	ldr	r0, [r7, #4]
 800049a:	4619      	mov	r1, r3
 800049c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800049e:	f000 fac5 	bl	8000a2c <event_monitor_block>
    return FILE_ACCESS_BLOCK;
 80004a2:	2300      	movs	r3, #0
}
 80004a4:	4618      	mov	r0, r3
 80004a6:	3740      	adds	r7, #64	; 0x40
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}

080004ac <block_request_lseekable>:

int block_request_lseekable (struct block *block, struct file_request *request,
                             struct event_monitor *monitor)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b092      	sub	sp, #72	; 0x48
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	60f8      	str	r0, [r7, #12]
 80004b4:	60b9      	str	r1, [r7, #8]
 80004b6:	607a      	str	r2, [r7, #4]
    struct task_control_block *task = request->task;
 80004b8:	68bb      	ldr	r3, [r7, #8]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	643b      	str	r3, [r7, #64]	; 0x40

    if (block->request_pid == 0) {
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d153      	bne.n	800056e <block_request_lseekable+0xc2>
        /* try to send request */
        struct file *driver = block->driver_file;
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	68db      	ldr	r3, [r3, #12]
 80004ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        int size = request->size;
 80004cc:	68bb      	ldr	r3, [r7, #8]
 80004ce:	689b      	ldr	r3, [r3, #8]
 80004d0:	63bb      	str	r3, [r7, #56]	; 0x38
        if (size > BLOCK_BUF)
 80004d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80004d4:	2b40      	cmp	r3, #64	; 0x40
 80004d6:	dd01      	ble.n	80004dc <block_request_lseekable+0x30>
            size = BLOCK_BUF;
 80004d8:	2340      	movs	r3, #64	; 0x40
 80004da:	63bb      	str	r3, [r7, #56]	; 0x38

        int pos;
        switch(request->whence) {
 80004dc:	68bb      	ldr	r3, [r7, #8]
 80004de:	68db      	ldr	r3, [r3, #12]
 80004e0:	2b02      	cmp	r3, #2
 80004e2:	d006      	beq.n	80004f2 <block_request_lseekable+0x46>
 80004e4:	2b03      	cmp	r3, #3
 80004e6:	d008      	beq.n	80004fa <block_request_lseekable+0x4e>
 80004e8:	2b01      	cmp	r3, #1
 80004ea:	d10a      	bne.n	8000502 <block_request_lseekable+0x56>
            case SEEK_SET:
                pos = 0;
 80004ec:	2300      	movs	r3, #0
 80004ee:	647b      	str	r3, [r7, #68]	; 0x44
                break;
 80004f0:	e00a      	b.n	8000508 <block_request_lseekable+0x5c>
            case SEEK_CUR:
                pos = block->pos;
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	69db      	ldr	r3, [r3, #28]
 80004f6:	647b      	str	r3, [r7, #68]	; 0x44
                break;
 80004f8:	e006      	b.n	8000508 <block_request_lseekable+0x5c>
            case SEEK_END:
                pos = -1;
 80004fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004fe:	647b      	str	r3, [r7, #68]	; 0x44
                break;
 8000500:	e002      	b.n	8000508 <block_request_lseekable+0x5c>
            default:
                return FILE_ACCESS_ERROR;
 8000502:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000506:	e046      	b.n	8000596 <block_request_lseekable+0xea>
        }

        struct block_request block_request = {
 8000508:	2303      	movs	r3, #3
 800050a:	627b      	str	r3, [r7, #36]	; 0x24
            .cmd = BLOCK_CMD_SEEK,
            .task = task->pid,
 800050c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800050e:	685b      	ldr	r3, [r3, #4]
                break;
            default:
                return FILE_ACCESS_ERROR;
        }

        struct block_request block_request = {
 8000510:	62bb      	str	r3, [r7, #40]	; 0x28
            .cmd = BLOCK_CMD_SEEK,
            .task = task->pid,
            .fd = block->file.fd,
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	681b      	ldr	r3, [r3, #0]
                break;
            default:
                return FILE_ACCESS_ERROR;
        }

        struct block_request block_request = {
 8000516:	62fb      	str	r3, [r7, #44]	; 0x2c
            .cmd = BLOCK_CMD_SEEK,
            .task = task->pid,
            .fd = block->file.fd,
            .size = request->size,
 8000518:	68bb      	ldr	r3, [r7, #8]
 800051a:	689b      	ldr	r3, [r3, #8]
                break;
            default:
                return FILE_ACCESS_ERROR;
        }

        struct block_request block_request = {
 800051c:	633b      	str	r3, [r7, #48]	; 0x30
 800051e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000520:	637b      	str	r3, [r7, #52]	; 0x34
            .fd = block->file.fd,
            .size = request->size,
            .pos = pos,
        };

        struct file_request file_request = {
 8000522:	f107 0314 	add.w	r3, r7, #20
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	3304      	adds	r3, #4
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	3304      	adds	r3, #4
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	3304      	adds	r3, #4
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	3304      	adds	r3, #4
 800053e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000542:	61bb      	str	r3, [r7, #24]
 8000544:	2314      	movs	r3, #20
 8000546:	61fb      	str	r3, [r7, #28]
            .task = NULL,
            .buf = (char *)&block_request,
            .size = sizeof(block_request),
        };

        if (file_write(driver, &file_request, monitor) == 1) {
 8000548:	f107 0314 	add.w	r3, r7, #20
 800054c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800054e:	4619      	mov	r1, r3
 8000550:	687a      	ldr	r2, [r7, #4]
 8000552:	f000 fd73 	bl	800103c <file_write>
 8000556:	4603      	mov	r3, r0
 8000558:	2b01      	cmp	r3, #1
 800055a:	d107      	bne.n	800056c <block_request_lseekable+0xc0>
            block->request_pid = task->pid;
 800055c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800055e:	685a      	ldr	r2, [r3, #4]
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	615a      	str	r2, [r3, #20]
            block->buzy = 1;
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	2201      	movs	r2, #1
 8000568:	619a      	str	r2, [r3, #24]
 800056a:	e00c      	b.n	8000586 <block_request_lseekable+0xda>
 800056c:	e00b      	b.n	8000586 <block_request_lseekable+0xda>
        }
    }
    else if (block->request_pid == task->pid && !block->buzy) {
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	695a      	ldr	r2, [r3, #20]
 8000572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	429a      	cmp	r2, r3
 8000578:	d105      	bne.n	8000586 <block_request_lseekable+0xda>
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	699b      	ldr	r3, [r3, #24]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d101      	bne.n	8000586 <block_request_lseekable+0xda>
        return FILE_ACCESS_ACCEPT;
 8000582:	2301      	movs	r3, #1
 8000584:	e007      	b.n	8000596 <block_request_lseekable+0xea>
    }

	event_monitor_block(monitor, block->event, task);
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	691b      	ldr	r3, [r3, #16]
 800058a:	6878      	ldr	r0, [r7, #4]
 800058c:	4619      	mov	r1, r3
 800058e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000590:	f000 fa4c 	bl	8000a2c <event_monitor_block>
    return FILE_ACCESS_BLOCK;
 8000594:	2300      	movs	r3, #0
}
 8000596:	4618      	mov	r0, r3
 8000598:	3748      	adds	r7, #72	; 0x48
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop

080005a0 <block_request_read>:

int block_request_read (struct block *block, struct file_request *request,
                        struct event_monitor *monitor)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
    if (block->transfer_len > 0) {
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dd12      	ble.n	80005da <block_request_read+0x3a>
        memcpy(request->buf, block->buf, block->transfer_len);
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	6859      	ldr	r1, [r3, #4]
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	f103 0220 	add.w	r2, r3, #32
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005c2:	4608      	mov	r0, r1
 80005c4:	4611      	mov	r1, r2
 80005c6:	461a      	mov	r2, r3
 80005c8:	f017 fc9a 	bl	8017f00 <memcpy>

        block->pos += block->transfer_len;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	69da      	ldr	r2, [r3, #28]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005d4:	441a      	add	r2, r3
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	61da      	str	r2, [r3, #28]
    }

    block->request_pid = 0;
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	2200      	movs	r2, #0
 80005de:	615a      	str	r2, [r3, #20]
    return block->transfer_len;
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <block_request_write>:

int block_request_write (struct block *block, struct file_request *request,
                         struct event_monitor *monitor)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
    if (block->transfer_len > 0) {
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	dd06      	ble.n	800060e <block_request_write+0x22>
        block->pos += block->transfer_len;
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	69da      	ldr	r2, [r3, #28]
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000608:	441a      	add	r2, r3
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	61da      	str	r2, [r3, #28]
    }

    block->request_pid = 0;
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	2200      	movs	r2, #0
 8000612:	615a      	str	r2, [r3, #20]
    return block->transfer_len;
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 8000618:	4618      	mov	r0, r3
 800061a:	3714      	adds	r7, #20
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <block_request_lseek>:

int block_request_lseek (struct block *block, struct file_request *request,
                         struct event_monitor *monitor)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	60f8      	str	r0, [r7, #12]
 800062c:	60b9      	str	r1, [r7, #8]
 800062e:	607a      	str	r2, [r7, #4]
    if (block->transfer_len >= 0) {
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000634:	2b00      	cmp	r3, #0
 8000636:	db03      	blt.n	8000640 <block_request_lseek+0x1c>
        block->pos = block->transfer_len;
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	61da      	str	r2, [r3, #28]
    }

    block->request_pid = 0;
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	2200      	movs	r2, #0
 8000644:	615a      	str	r2, [r3, #20]
    return block->transfer_len;
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 800064a:	4618      	mov	r0, r3
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop

08000658 <block_event_release>:

int block_event_release(struct event_monitor *monitor, int event,
                        struct task_control_block *task, void *data)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
 8000664:	603b      	str	r3, [r7, #0]
    struct file *file = data;
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	617b      	str	r3, [r7, #20]
    struct file_request *request = (void*)task->stack->r0;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000670:	613b      	str	r3, [r7, #16]

    switch (task->stack->r7) {
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	2b04      	cmp	r3, #4
 800067a:	d004      	beq.n	8000686 <block_event_release+0x2e>
 800067c:	2b0a      	cmp	r3, #10
 800067e:	d010      	beq.n	80006a2 <block_event_release+0x4a>
 8000680:	2b03      	cmp	r3, #3
 8000682:	d007      	beq.n	8000694 <block_event_release+0x3c>
 8000684:	e014      	b.n	80006b0 <block_event_release+0x58>
        case 0x04:
            return file_read(file, request, monitor);
 8000686:	6978      	ldr	r0, [r7, #20]
 8000688:	6939      	ldr	r1, [r7, #16]
 800068a:	68fa      	ldr	r2, [r7, #12]
 800068c:	f000 fc8c 	bl	8000fa8 <file_read>
 8000690:	4603      	mov	r3, r0
 8000692:	e00e      	b.n	80006b2 <block_event_release+0x5a>
        case 0x03:
            return file_write(file, request, monitor);
 8000694:	6978      	ldr	r0, [r7, #20]
 8000696:	6939      	ldr	r1, [r7, #16]
 8000698:	68fa      	ldr	r2, [r7, #12]
 800069a:	f000 fccf 	bl	800103c <file_write>
 800069e:	4603      	mov	r3, r0
 80006a0:	e007      	b.n	80006b2 <block_event_release+0x5a>
        case 0x0a:
            return file_lseek(file, request, monitor);
 80006a2:	6978      	ldr	r0, [r7, #20]
 80006a4:	6939      	ldr	r1, [r7, #16]
 80006a6:	68fa      	ldr	r2, [r7, #12]
 80006a8:	f000 fd6a 	bl	8001180 <file_lseek>
 80006ac:	4603      	mov	r3, r0
 80006ae:	e000      	b.n	80006b2 <block_event_release+0x5a>
        default:
            return 0;
 80006b0:	2300      	movs	r3, #0
    }
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3718      	adds	r7, #24
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop

080006bc <block_init>:

int block_init(int fd, int driver_pid, struct file *files[],
               struct memory_pool *memory_pool, struct event_monitor *monitor)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
 80006c8:	603b      	str	r3, [r7, #0]
    struct block *block;

    block = memory_pool_alloc(memory_pool, sizeof(*block));
 80006ca:	6838      	ldr	r0, [r7, #0]
 80006cc:	2164      	movs	r1, #100	; 0x64
 80006ce:	f002 fd85 	bl	80031dc <memory_pool_alloc>
 80006d2:	6178      	str	r0, [r7, #20]

    if (!block)
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d102      	bne.n	80006e0 <block_init+0x24>
        return -1;
 80006da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006de:	e02f      	b.n	8000740 <block_init+0x84>

    block->driver_pid = driver_pid;
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	68ba      	ldr	r2, [r7, #8]
 80006e4:	609a      	str	r2, [r3, #8]
    block->driver_file = files[driver_pid + 3];
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	3303      	adds	r3, #3
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	4413      	add	r3, r2
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	60da      	str	r2, [r3, #12]
    block->request_pid = 0;
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	2200      	movs	r2, #0
 80006fa:	615a      	str	r2, [r3, #20]
    block->buzy = 0;
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	2200      	movs	r2, #0
 8000700:	619a      	str	r2, [r3, #24]
    block->pos = 0;
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	2200      	movs	r2, #0
 8000706:	61da      	str	r2, [r3, #28]
	block->file.ops = &block_ops;
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	4a0f      	ldr	r2, [pc, #60]	; (8000748 <block_init+0x8c>)
 800070c:	605a      	str	r2, [r3, #4]
    block->event = event_monitor_find_free(monitor);
 800070e:	6a38      	ldr	r0, [r7, #32]
 8000710:	f000 f93c 	bl	800098c <event_monitor_find_free>
 8000714:	4602      	mov	r2, r0
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	611a      	str	r2, [r3, #16]
    files[fd] = &block->file;
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	4413      	add	r3, r2
 8000722:	697a      	ldr	r2, [r7, #20]
 8000724:	601a      	str	r2, [r3, #0]

    event_monitor_register(monitor, block->event, block_event_release, files[fd]);
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	691a      	ldr	r2, [r3, #16]
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	6879      	ldr	r1, [r7, #4]
 8000730:	440b      	add	r3, r1
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	6a38      	ldr	r0, [r7, #32]
 8000736:	4611      	mov	r1, r2
 8000738:	4a04      	ldr	r2, [pc, #16]	; (800074c <block_init+0x90>)
 800073a:	f000 f94d 	bl	80009d8 <event_monitor_register>

    return 0;
 800073e:	2300      	movs	r3, #0
}
 8000740:	4618      	mov	r0, r3
 8000742:	3718      	adds	r7, #24
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000000 	.word	0x20000000
 800074c:	08000659 	.word	0x08000659

08000750 <block_response>:

int block_response(int fd, char *buf, int len)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
    struct block_response response = {
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	617b      	str	r3, [r7, #20]
        .transfer_len = len,
        .buf = buf
    };
    return write(fd, &response, sizeof(response));
 8000764:	f107 0310 	add.w	r3, r7, #16
 8000768:	68f8      	ldr	r0, [r7, #12]
 800076a:	4619      	mov	r1, r3
 800076c:	2208      	movs	r2, #8
 800076e:	f017 fc1d 	bl	8017fac <write>
 8000772:	4603      	mov	r3, r0
}
 8000774:	4618      	mov	r0, r3
 8000776:	3718      	adds	r7, #24
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <block_readable>:

int block_readable (struct file *file, struct file_request *request,
                    struct event_monitor *monitor)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
    struct block *block = container_of(file, struct block, file);
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	617b      	str	r3, [r7, #20]
    if (block->driver_pid == request->task->pid) {
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	689a      	ldr	r2, [r3, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	429a      	cmp	r2, r3
 8000798:	d106      	bne.n	80007a8 <block_readable+0x2c>
        return block_driver_readable(block, request, monitor);
 800079a:	6978      	ldr	r0, [r7, #20]
 800079c:	68b9      	ldr	r1, [r7, #8]
 800079e:	687a      	ldr	r2, [r7, #4]
 80007a0:	f7ff fd0c 	bl	80001bc <block_driver_readable>
 80007a4:	4603      	mov	r3, r0
 80007a6:	e005      	b.n	80007b4 <block_readable+0x38>
    }
    else {
        return block_request_readable(block, request, monitor);
 80007a8:	6978      	ldr	r0, [r7, #20]
 80007aa:	68b9      	ldr	r1, [r7, #8]
 80007ac:	687a      	ldr	r2, [r7, #4]
 80007ae:	f7ff fdab 	bl	8000308 <block_request_readable>
 80007b2:	4603      	mov	r3, r0
    }
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3718      	adds	r7, #24
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <block_writable>:

int block_writable (struct file *file, struct file_request *request,
                    struct event_monitor *monitor)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
    struct block *block = container_of(file, struct block, file);
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	617b      	str	r3, [r7, #20]
    if (block->driver_pid == request->task->pid) {
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	689a      	ldr	r2, [r3, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d106      	bne.n	80007e8 <block_writable+0x2c>
        return block_driver_writable(block, request, monitor);
 80007da:	6978      	ldr	r0, [r7, #20]
 80007dc:	68b9      	ldr	r1, [r7, #8]
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	f7ff fd00 	bl	80001e4 <block_driver_writable>
 80007e4:	4603      	mov	r3, r0
 80007e6:	e005      	b.n	80007f4 <block_writable+0x38>
    }
    else {
        return block_request_writable(block, request, monitor);
 80007e8:	6978      	ldr	r0, [r7, #20]
 80007ea:	68b9      	ldr	r1, [r7, #8]
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	f7ff fdef 	bl	80003d0 <block_request_writable>
 80007f2:	4603      	mov	r3, r0
    }
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3718      	adds	r7, #24
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <block_read>:

int block_read (struct file *file, struct file_request *request,
                struct event_monitor *monitor)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
    struct block *block = container_of(file, struct block, file);
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	617b      	str	r3, [r7, #20]
    if (block->driver_pid == request->task->pid) {
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	689a      	ldr	r2, [r3, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	429a      	cmp	r2, r3
 8000818:	d106      	bne.n	8000828 <block_read+0x2c>
        return block_driver_read(block, request, monitor);
 800081a:	6978      	ldr	r0, [r7, #20]
 800081c:	68b9      	ldr	r1, [r7, #8]
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	f7ff fd08 	bl	8000234 <block_driver_read>
 8000824:	4603      	mov	r3, r0
 8000826:	e005      	b.n	8000834 <block_read+0x38>
    }
    else {
        return block_request_read(block, request, monitor);
 8000828:	6978      	ldr	r0, [r7, #20]
 800082a:	68b9      	ldr	r1, [r7, #8]
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	f7ff feb7 	bl	80005a0 <block_request_read>
 8000832:	4603      	mov	r3, r0
    }
}
 8000834:	4618      	mov	r0, r3
 8000836:	3718      	adds	r7, #24
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <block_write>:

int block_write (struct file *file, struct file_request *request,
                 struct event_monitor *monitor)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	607a      	str	r2, [r7, #4]
    struct block *block = container_of(file, struct block, file);
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	617b      	str	r3, [r7, #20]
    if (block->driver_pid == request->task->pid) {
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	689a      	ldr	r2, [r3, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	429a      	cmp	r2, r3
 8000858:	d106      	bne.n	8000868 <block_write+0x2c>
        return block_driver_write(block, request, monitor);
 800085a:	6978      	ldr	r0, [r7, #20]
 800085c:	68b9      	ldr	r1, [r7, #8]
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	f7ff fd06 	bl	8000270 <block_driver_write>
 8000864:	4603      	mov	r3, r0
 8000866:	e005      	b.n	8000874 <block_write+0x38>
    }
    else {
        return block_request_write(block, request, monitor);
 8000868:	6978      	ldr	r0, [r7, #20]
 800086a:	68b9      	ldr	r1, [r7, #8]
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	f7ff febd 	bl	80005ec <block_request_write>
 8000872:	4603      	mov	r3, r0
    }
}
 8000874:	4618      	mov	r0, r3
 8000876:	3718      	adds	r7, #24
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <block_lseekable>:

int block_lseekable (struct file *file, struct file_request *request,
                     struct event_monitor *monitor)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	60b9      	str	r1, [r7, #8]
 8000886:	607a      	str	r2, [r7, #4]
    struct block *block = container_of(file, struct block, file);
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	617b      	str	r3, [r7, #20]
    if (block->driver_pid == request->task->pid) {
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	689a      	ldr	r2, [r3, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	429a      	cmp	r2, r3
 8000898:	d106      	bne.n	80008a8 <block_lseekable+0x2c>
        return block_driver_lseekable(block, request, monitor);
 800089a:	6978      	ldr	r0, [r7, #20]
 800089c:	68b9      	ldr	r1, [r7, #8]
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	f7ff fcb4 	bl	800020c <block_driver_lseekable>
 80008a4:	4603      	mov	r3, r0
 80008a6:	e005      	b.n	80008b4 <block_lseekable+0x38>
    }
    else {
        return block_request_lseekable(block, request, monitor);
 80008a8:	6978      	ldr	r0, [r7, #20]
 80008aa:	68b9      	ldr	r1, [r7, #8]
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	f7ff fdfd 	bl	80004ac <block_request_lseekable>
 80008b2:	4603      	mov	r3, r0
    }
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3718      	adds	r7, #24
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <block_lseek>:

int block_lseek (struct file *file, struct file_request *request,
                 struct event_monitor *monitor)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
    struct block *block = container_of(file, struct block, file);
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	617b      	str	r3, [r7, #20]
    if (block->driver_pid == request->task->pid) {
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	689a      	ldr	r2, [r3, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	d106      	bne.n	80008e8 <block_lseek+0x2c>
        return block_driver_lseek(block, request, monitor);
 80008da:	6978      	ldr	r0, [r7, #20]
 80008dc:	68b9      	ldr	r1, [r7, #8]
 80008de:	687a      	ldr	r2, [r7, #4]
 80008e0:	f7ff fcf8 	bl	80002d4 <block_driver_lseek>
 80008e4:	4603      	mov	r3, r0
 80008e6:	e005      	b.n	80008f4 <block_lseek+0x38>
    }
    else {
        return block_request_lseek(block, request, monitor);
 80008e8:	6978      	ldr	r0, [r7, #20]
 80008ea:	68b9      	ldr	r1, [r7, #8]
 80008ec:	687a      	ldr	r2, [r7, #4]
 80008ee:	f7ff fe99 	bl	8000624 <block_request_lseek>
 80008f2:	4603      	mov	r3, r0
    }
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3718      	adds	r7, #24
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <event_monitor_init>:


void event_monitor_init(struct event_monitor *monitor,
                        struct event *events,
                        struct list *ready_list)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	607a      	str	r2, [r7, #4]
    int i;

    monitor->events = events;
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	68ba      	ldr	r2, [r7, #8]
 800090c:	601a      	str	r2, [r3, #0]
    monitor->ready_list = ready_list;
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	605a      	str	r2, [r3, #4]

    for (i = 0; i < EVENT_LIMIT; i++) {
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	e031      	b.n	800097e <event_monitor_init+0x82>
        events[i].registerd = 0;
 800091a:	697a      	ldr	r2, [r7, #20]
 800091c:	4613      	mov	r3, r2
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	4413      	add	r3, r2
 8000922:	00db      	lsls	r3, r3, #3
 8000924:	68ba      	ldr	r2, [r7, #8]
 8000926:	4413      	add	r3, r2
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
        events[i].pending = 0;
 800092c:	697a      	ldr	r2, [r7, #20]
 800092e:	4613      	mov	r3, r2
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	4413      	add	r3, r2
 8000934:	00db      	lsls	r3, r3, #3
 8000936:	68ba      	ldr	r2, [r7, #8]
 8000938:	4413      	add	r3, r2
 800093a:	2200      	movs	r2, #0
 800093c:	605a      	str	r2, [r3, #4]
        events[i].handler = 0;
 800093e:	697a      	ldr	r2, [r7, #20]
 8000940:	4613      	mov	r3, r2
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	4413      	add	r3, r2
 8000946:	00db      	lsls	r3, r3, #3
 8000948:	68ba      	ldr	r2, [r7, #8]
 800094a:	4413      	add	r3, r2
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
        events[i].data = 0;
 8000950:	697a      	ldr	r2, [r7, #20]
 8000952:	4613      	mov	r3, r2
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	4413      	add	r3, r2
 8000958:	00db      	lsls	r3, r3, #3
 800095a:	68ba      	ldr	r2, [r7, #8]
 800095c:	4413      	add	r3, r2
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
        list_init(&events[i].list);
 8000962:	697a      	ldr	r2, [r7, #20]
 8000964:	4613      	mov	r3, r2
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	4413      	add	r3, r2
 800096a:	00db      	lsls	r3, r3, #3
 800096c:	68ba      	ldr	r2, [r7, #8]
 800096e:	4413      	add	r3, r2
 8000970:	3310      	adds	r3, #16
 8000972:	4618      	mov	r0, r3
 8000974:	f002 fb80 	bl	8003078 <list_init>
    int i;

    monitor->events = events;
    monitor->ready_list = ready_list;

    for (i = 0; i < EVENT_LIMIT; i++) {
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	3301      	adds	r3, #1
 800097c:	617b      	str	r3, [r7, #20]
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	2baa      	cmp	r3, #170	; 0xaa
 8000982:	ddca      	ble.n	800091a <event_monitor_init+0x1e>
        events[i].pending = 0;
        events[i].handler = 0;
        events[i].data = 0;
        list_init(&events[i].list);
    }
}
 8000984:	3718      	adds	r7, #24
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop

0800098c <event_monitor_find_free>:

int event_monitor_find_free(struct event_monitor *monitor)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
    int i;
    for (i = 0; i < EVENT_LIMIT && monitor->events[i].registerd; i++);
 8000994:	2300      	movs	r3, #0
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	e002      	b.n	80009a0 <event_monitor_find_free+0x14>
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	3301      	adds	r3, #1
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	2baa      	cmp	r3, #170	; 0xaa
 80009a4:	dc0a      	bgt.n	80009bc <event_monitor_find_free+0x30>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6819      	ldr	r1, [r3, #0]
 80009aa:	68fa      	ldr	r2, [r7, #12]
 80009ac:	4613      	mov	r3, r2
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	4413      	add	r3, r2
 80009b2:	00db      	lsls	r3, r3, #3
 80009b4:	440b      	add	r3, r1
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d1ee      	bne.n	800099a <event_monitor_find_free+0xe>

    if (i == EVENT_LIMIT)
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	2bab      	cmp	r3, #171	; 0xab
 80009c0:	d102      	bne.n	80009c8 <event_monitor_find_free+0x3c>
        return -1;
 80009c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009c6:	e000      	b.n	80009ca <event_monitor_find_free+0x3e>

    return i;
 80009c8:	68fb      	ldr	r3, [r7, #12]
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3714      	adds	r7, #20
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop

080009d8 <event_monitor_register>:

void event_monitor_register(struct event_monitor *monitor, int event,
                            event_monitor_handler handler, void *data)
{
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
 80009e4:	603b      	str	r3, [r7, #0]
    monitor->events[event].registerd = 1;
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	6819      	ldr	r1, [r3, #0]
 80009ea:	68ba      	ldr	r2, [r7, #8]
 80009ec:	4613      	mov	r3, r2
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	4413      	add	r3, r2
 80009f2:	00db      	lsls	r3, r3, #3
 80009f4:	440b      	add	r3, r1
 80009f6:	2201      	movs	r2, #1
 80009f8:	601a      	str	r2, [r3, #0]
    monitor->events[event].handler = handler;
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	6819      	ldr	r1, [r3, #0]
 80009fe:	68ba      	ldr	r2, [r7, #8]
 8000a00:	4613      	mov	r3, r2
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	4413      	add	r3, r2
 8000a06:	00db      	lsls	r3, r3, #3
 8000a08:	440b      	add	r3, r1
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
    monitor->events[event].data = data;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	6819      	ldr	r1, [r3, #0]
 8000a12:	68ba      	ldr	r2, [r7, #8]
 8000a14:	4613      	mov	r3, r2
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	4413      	add	r3, r2
 8000a1a:	00db      	lsls	r3, r3, #3
 8000a1c:	440b      	add	r3, r1
 8000a1e:	683a      	ldr	r2, [r7, #0]
 8000a20:	60da      	str	r2, [r3, #12]
}
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <event_monitor_block>:

void event_monitor_block(struct event_monitor *monitor, int event,
                         struct task_control_block *task)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
    if (task->status == TASK_READY)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	689b      	ldr	r3, [r3, #8]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d10f      	bne.n	8000a60 <event_monitor_block+0x34>
        list_push(&monitor->events[event].list, &task->list);
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	6819      	ldr	r1, [r3, #0]
 8000a44:	68ba      	ldr	r2, [r7, #8]
 8000a46:	4613      	mov	r3, r2
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	4413      	add	r3, r2
 8000a4c:	00db      	lsls	r3, r3, #3
 8000a4e:	440b      	add	r3, r1
 8000a50:	f103 0210 	add.w	r2, r3, #16
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3310      	adds	r3, #16
 8000a58:	4610      	mov	r0, r2
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	f002 fb66 	bl	800312c <list_push>
}
 8000a60:	3710      	adds	r7, #16
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop

08000a68 <event_monitor_release>:

void event_monitor_release(struct event_monitor *monitor, int event)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
    monitor->events[event].pending = 1;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6819      	ldr	r1, [r3, #0]
 8000a76:	683a      	ldr	r2, [r7, #0]
 8000a78:	4613      	mov	r3, r2
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	4413      	add	r3, r2
 8000a7e:	00db      	lsls	r3, r3, #3
 8000a80:	440b      	add	r3, r1
 8000a82:	2201      	movs	r2, #1
 8000a84:	605a      	str	r2, [r3, #4]
}
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <event_monitor_serve>:

void event_monitor_serve(struct event_monitor *monitor)
{
 8000a90:	b590      	push	{r4, r7, lr}
 8000a92:	b089      	sub	sp, #36	; 0x24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
    int i;
    for (i = 0; i < EVENT_LIMIT; i++) {
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61fb      	str	r3, [r7, #28]
 8000a9c:	e04e      	b.n	8000b3c <event_monitor_serve+0xac>
        if (monitor->events[i].pending) {
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6819      	ldr	r1, [r3, #0]
 8000aa2:	69fa      	ldr	r2, [r7, #28]
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	4413      	add	r3, r2
 8000aaa:	00db      	lsls	r3, r3, #3
 8000aac:	440b      	add	r3, r1
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d040      	beq.n	8000b36 <event_monitor_serve+0xa6>
            struct event *event = &monitor->events[i];
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6819      	ldr	r1, [r3, #0]
 8000ab8:	69fa      	ldr	r2, [r7, #28]
 8000aba:	4613      	mov	r3, r2
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	4413      	add	r3, r2
 8000ac0:	00db      	lsls	r3, r3, #3
 8000ac2:	440b      	add	r3, r1
 8000ac4:	613b      	str	r3, [r7, #16]
            struct task_control_block *task;
            struct list *curr, *next;

            list_for_each_safe (curr, next, &event->list) {
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	695b      	ldr	r3, [r3, #20]
 8000aca:	61bb      	str	r3, [r7, #24]
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	617b      	str	r3, [r7, #20]
 8000ad2:	e025      	b.n	8000b20 <event_monitor_serve+0x90>
                task = list_entry(curr, struct task_control_block, list);
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	3b10      	subs	r3, #16
 8000ad8:	60fb      	str	r3, [r7, #12]
                if (event->handler
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d019      	beq.n	8000b16 <event_monitor_serve+0x86>
                        && event->handler(monitor, i, task, event->data)) {
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	689c      	ldr	r4, [r3, #8]
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	68db      	ldr	r3, [r3, #12]
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	69f9      	ldr	r1, [r7, #28]
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	47a0      	blx	r4
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d00e      	beq.n	8000b16 <event_monitor_serve+0x86>
                    list_push(&monitor->ready_list[task->priority], &task->list);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	685a      	ldr	r2, [r3, #4]
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	00db      	lsls	r3, r3, #3
 8000b02:	441a      	add	r2, r3
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	3310      	adds	r3, #16
 8000b08:	4610      	mov	r0, r2
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	f002 fb0e 	bl	800312c <list_push>
                    task->status = TASK_READY;
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
        if (monitor->events[i].pending) {
            struct event *event = &monitor->events[i];
            struct task_control_block *task;
            struct list *curr, *next;

            list_for_each_safe (curr, next, &event->list) {
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	61bb      	str	r3, [r7, #24]
 8000b1a:	69bb      	ldr	r3, [r7, #24]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	f103 0210 	add.w	r2, r3, #16
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d1d3      	bne.n	8000ad4 <event_monitor_serve+0x44>
                    list_push(&monitor->ready_list[task->priority], &task->list);
                    task->status = TASK_READY;
                }
            }

            event->pending = 0;
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	605a      	str	r2, [r3, #4]

            /* If someone pending events, rescan events */
            i = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
}

void event_monitor_serve(struct event_monitor *monitor)
{
    int i;
    for (i = 0; i < EVENT_LIMIT; i++) {
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	61fb      	str	r3, [r7, #28]
 8000b3c:	69fb      	ldr	r3, [r7, #28]
 8000b3e:	2baa      	cmp	r3, #170	; 0xaa
 8000b40:	ddad      	ble.n	8000a9e <event_monitor_serve+0xe>

            /* If someone pending events, rescan events */
            i = 0;
        }
    }
}
 8000b42:	3724      	adds	r7, #36	; 0x24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd90      	pop	{r4, r7, pc}

08000b48 <mkfifo>:
	.lseekable = NULL,
	.lseek = NULL,
};

int mkfifo(const char *pathname, int mode)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
	mkfile(pathname, mode, S_IFIFO);
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	6839      	ldr	r1, [r7, #0]
 8000b56:	2201      	movs	r2, #1
 8000b58:	f000 f92a 	bl	8000db0 <mkfile>
	return 0;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop

08000b68 <fifo_init>:

int
fifo_init(int fd, int driver_pid, struct file *files[],
          struct memory_pool *memory_pool, struct event_monitor *monitor)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
 8000b74:	603b      	str	r3, [r7, #0]
    struct pipe_ringbuffer *pipe;

    pipe = memory_pool_alloc(memory_pool, sizeof(struct pipe_ringbuffer));
 8000b76:	6838      	ldr	r0, [r7, #0]
 8000b78:	2158      	movs	r1, #88	; 0x58
 8000b7a:	f002 fb2f 	bl	80031dc <memory_pool_alloc>
 8000b7e:	6178      	str	r0, [r7, #20]

    if (!pipe)
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d102      	bne.n	8000b8c <fifo_init+0x24>
        return -1;
 8000b86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b8a:	e033      	b.n	8000bf4 <fifo_init+0x8c>

    pipe->start = 0;
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
    pipe->end = 0;
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	2200      	movs	r2, #0
 8000b96:	60da      	str	r2, [r3, #12]
	pipe->file.ops = &fifo_ops;
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	4a18      	ldr	r2, [pc, #96]	; (8000bfc <fifo_init+0x94>)
 8000b9c:	605a      	str	r2, [r3, #4]
    files[fd] = &pipe->file;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	697a      	ldr	r2, [r7, #20]
 8000ba8:	601a      	str	r2, [r3, #0]

    pipe->read_event = event_monitor_find_free(monitor);
 8000baa:	6a38      	ldr	r0, [r7, #32]
 8000bac:	f7ff feee 	bl	800098c <event_monitor_find_free>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	611a      	str	r2, [r3, #16]
    event_monitor_register(monitor, pipe->read_event, pipe_read_release, files[fd]);
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	691a      	ldr	r2, [r3, #16]
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	440b      	add	r3, r1
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	6a38      	ldr	r0, [r7, #32]
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	4a0d      	ldr	r2, [pc, #52]	; (8000c00 <fifo_init+0x98>)
 8000bca:	f7ff ff05 	bl	80009d8 <event_monitor_register>

    pipe->write_event = event_monitor_find_free(monitor);
 8000bce:	6a38      	ldr	r0, [r7, #32]
 8000bd0:	f7ff fedc 	bl	800098c <event_monitor_find_free>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	615a      	str	r2, [r3, #20]
    event_monitor_register(monitor, pipe->write_event, pipe_write_release, files[fd]);
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	695a      	ldr	r2, [r3, #20]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	440b      	add	r3, r1
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	6a38      	ldr	r0, [r7, #32]
 8000bea:	4611      	mov	r1, r2
 8000bec:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <fifo_init+0x9c>)
 8000bee:	f7ff fef3 	bl	80009d8 <event_monitor_register>
    return 0;
 8000bf2:	2300      	movs	r3, #0
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000018 	.word	0x20000018
 8000c00:	08003efd 	.word	0x08003efd
 8000c04:	08003f2d 	.word	0x08003f2d

08000c08 <fifo_readable>:

int
fifo_readable (struct file *file, struct file_request *request,
               struct event_monitor *monitor)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
	/* Trying to read too much */
	if (request->size > PIPE_BUF) {
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	2b40      	cmp	r3, #64	; 0x40
 8000c1a:	dd02      	ble.n	8000c22 <fifo_readable+0x1a>
		return FILE_ACCESS_ERROR;
 8000c1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c20:	e021      	b.n	8000c66 <fifo_readable+0x5e>
	}

	struct pipe_ringbuffer *pipe =
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	617b      	str	r3, [r7, #20]
	    container_of(file, struct pipe_ringbuffer, file);

	if ((size_t)PIPE_LEN(*pipe) < request->size) {
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	68da      	ldr	r2, [r3, #12]
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	1ad2      	subs	r2, r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	68d9      	ldr	r1, [r3, #12]
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	4299      	cmp	r1, r3
 8000c3a:	da01      	bge.n	8000c40 <fifo_readable+0x38>
 8000c3c:	2340      	movs	r3, #64	; 0x40
 8000c3e:	e000      	b.n	8000c42 <fifo_readable+0x3a>
 8000c40:	2300      	movs	r3, #0
 8000c42:	4413      	add	r3, r2
 8000c44:	461a      	mov	r2, r3
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d20a      	bcs.n	8000c64 <fifo_readable+0x5c>
		/* Trying to read more than there is: block */
		event_monitor_block(monitor, pipe->read_event, request->task);
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	691a      	ldr	r2, [r3, #16]
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	4611      	mov	r1, r2
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	f7ff fee6 	bl	8000a2c <event_monitor_block>
		return FILE_ACCESS_BLOCK;
 8000c60:	2300      	movs	r3, #0
 8000c62:	e000      	b.n	8000c66 <fifo_readable+0x5e>
	}
	return FILE_ACCESS_ACCEPT;
 8000c64:	2301      	movs	r3, #1
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop

08000c70 <fifo_writable>:

int
fifo_writable (struct file *file, struct file_request *request,
               struct event_monitor *monitor)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
	struct pipe_ringbuffer *pipe =
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	617b      	str	r3, [r7, #20]
	    container_of(file, struct pipe_ringbuffer, file);

	/* If the write would be non-atomic */
	if (request->size > PIPE_BUF) {
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	2b40      	cmp	r3, #64	; 0x40
 8000c86:	dd02      	ble.n	8000c8e <fifo_writable+0x1e>
		return FILE_ACCESS_ERROR;
 8000c88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c8c:	e020      	b.n	8000cd0 <fifo_writable+0x60>
	}
	/* Preserve 1 byte to distiguish empty or full */
	if ((size_t)PIPE_BUF - PIPE_LEN(*pipe) - 1 < request->size) {
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	689a      	ldr	r2, [r3, #8]
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	68db      	ldr	r3, [r3, #12]
 8000c96:	1ad2      	subs	r2, r2, r3
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	68d9      	ldr	r1, [r3, #12]
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	4299      	cmp	r1, r3
 8000ca2:	da01      	bge.n	8000ca8 <fifo_writable+0x38>
 8000ca4:	2340      	movs	r3, #64	; 0x40
 8000ca6:	e000      	b.n	8000caa <fifo_writable+0x3a>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	1ad3      	subs	r3, r2, r3
 8000cac:	f103 023f 	add.w	r2, r3, #63	; 0x3f
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d20a      	bcs.n	8000cce <fifo_writable+0x5e>
		/* Trying to write more than we have space for: block */
	    event_monitor_block(monitor, pipe->write_event, request->task);
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	695a      	ldr	r2, [r3, #20]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	f7ff feb1 	bl	8000a2c <event_monitor_block>
		return FILE_ACCESS_BLOCK;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	e000      	b.n	8000cd0 <fifo_writable+0x60>
	}
	return FILE_ACCESS_ACCEPT;
 8000cce:	2301      	movs	r3, #1
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3718      	adds	r7, #24
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <fifo_read>:

int
fifo_read (struct file *file, struct file_request *request,
               struct event_monitor *monitor)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
	size_t i;
	struct pipe_ringbuffer *pipe =
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	613b      	str	r3, [r7, #16]
	    container_of(file, struct pipe_ringbuffer, file);

	/* Copy data into buf */
	for (i = 0; i < request->size; i++) {
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	e018      	b.n	8000d20 <fifo_read+0x48>
		PIPE_POP(*pipe, request->buf[i]);
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	685a      	ldr	r2, [r3, #4]
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	6892      	ldr	r2, [r2, #8]
 8000cfa:	6939      	ldr	r1, [r7, #16]
 8000cfc:	440a      	add	r2, r1
 8000cfe:	7e12      	ldrb	r2, [r2, #24]
 8000d00:	701a      	strb	r2, [r3, #0]
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	1c5a      	adds	r2, r3, #1
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	2b3f      	cmp	r3, #63	; 0x3f
 8000d12:	dd02      	ble.n	8000d1a <fifo_read+0x42>
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
	size_t i;
	struct pipe_ringbuffer *pipe =
	    container_of(file, struct pipe_ringbuffer, file);

	/* Copy data into buf */
	for (i = 0; i < request->size; i++) {
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	617b      	str	r3, [r7, #20]
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	461a      	mov	r2, r3
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d8e0      	bhi.n	8000cee <fifo_read+0x16>
		PIPE_POP(*pipe, request->buf[i]);
	}

    /* Prepared to write */
	event_monitor_release(monitor, pipe->write_event);
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	695b      	ldr	r3, [r3, #20]
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	4619      	mov	r1, r3
 8000d34:	f7ff fe98 	bl	8000a68 <event_monitor_release>
	return request->size;
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	689b      	ldr	r3, [r3, #8]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3718      	adds	r7, #24
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <fifo_write>:

int
fifo_write (struct file *file, struct file_request *request,
               struct event_monitor *monitor)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
	size_t i;
	struct pipe_ringbuffer *pipe =
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	613b      	str	r3, [r7, #16]
	    container_of(file, struct pipe_ringbuffer, file);

	/* Copy data into pipe */
	for (i = 0; i < request->size; i++)
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	e018      	b.n	8000d8c <fifo_write+0x48>
		PIPE_PUSH(*pipe, request->buf[i]);
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	68db      	ldr	r3, [r3, #12]
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	6851      	ldr	r1, [r2, #4]
 8000d62:	697a      	ldr	r2, [r7, #20]
 8000d64:	440a      	add	r2, r1
 8000d66:	7812      	ldrb	r2, [r2, #0]
 8000d68:	6939      	ldr	r1, [r7, #16]
 8000d6a:	440b      	add	r3, r1
 8000d6c:	761a      	strb	r2, [r3, #24]
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	1c5a      	adds	r2, r3, #1
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	60da      	str	r2, [r3, #12]
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	2b3f      	cmp	r3, #63	; 0x3f
 8000d7e:	dd02      	ble.n	8000d86 <fifo_write+0x42>
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
	size_t i;
	struct pipe_ringbuffer *pipe =
	    container_of(file, struct pipe_ringbuffer, file);

	/* Copy data into pipe */
	for (i = 0; i < request->size; i++)
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	461a      	mov	r2, r3
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d8e0      	bhi.n	8000d5a <fifo_write+0x16>
		PIPE_PUSH(*pipe, request->buf[i]);

    /* Prepared to read */
	event_monitor_release(monitor, pipe->read_event);
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	691b      	ldr	r3, [r3, #16]
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	4619      	mov	r1, r3
 8000da0:	f7ff fe62 	bl	8000a68 <event_monitor_release>
	return request->size;
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	689b      	ldr	r3, [r3, #8]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <mkfile>:
#include "block.h"
#include "regfile.h"
#include "path.h"

int mkfile(const char *pathname, int mode, int dev)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b096      	sub	sp, #88	; 0x58
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
    int cmd = PATH_CMD_MKFILE;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	653b      	str	r3, [r7, #80]	; 0x50
	unsigned int replyfd = getpid() + 3;
 8000dc0:	f017 f8ed 	bl	8017f9e <getpid>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	3303      	adds	r3, #3
 8000dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
	size_t plen = strlen(pathname)+1;
 8000dca:	68f8      	ldr	r0, [r7, #12]
 8000dcc:	f004 f808 	bl	8004de0 <strlen>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	64bb      	str	r3, [r7, #72]	; 0x48
	char buf[4 + 4 + 4 + PATH_MAX + 4];
	(void) mode;
	int pos = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	657b      	str	r3, [r7, #84]	; 0x54
	int status = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]

	path_write_data(buf, &cmd, 4, pos);
 8000dde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000de0:	f107 0218 	add.w	r2, r7, #24
 8000de4:	441a      	add	r2, r3
 8000de6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000dea:	4610      	mov	r0, r2
 8000dec:	4619      	mov	r1, r3
 8000dee:	2204      	movs	r2, #4
 8000df0:	f017 f886 	bl	8017f00 <memcpy>
 8000df4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000df6:	3304      	adds	r3, #4
 8000df8:	657b      	str	r3, [r7, #84]	; 0x54
	path_write_data(buf, &replyfd, 4, pos);
 8000dfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000dfc:	f107 0218 	add.w	r2, r7, #24
 8000e00:	441a      	add	r2, r3
 8000e02:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e06:	4610      	mov	r0, r2
 8000e08:	4619      	mov	r1, r3
 8000e0a:	2204      	movs	r2, #4
 8000e0c:	f017 f878 	bl	8017f00 <memcpy>
 8000e10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e12:	3304      	adds	r3, #4
 8000e14:	657b      	str	r3, [r7, #84]	; 0x54
	path_write_data(buf, &plen, 4, pos);
 8000e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e18:	f107 0218 	add.w	r2, r7, #24
 8000e1c:	441a      	add	r2, r3
 8000e1e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e22:	4610      	mov	r0, r2
 8000e24:	4619      	mov	r1, r3
 8000e26:	2204      	movs	r2, #4
 8000e28:	f017 f86a 	bl	8017f00 <memcpy>
 8000e2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e2e:	3304      	adds	r3, #4
 8000e30:	657b      	str	r3, [r7, #84]	; 0x54
	path_write_data(buf, pathname, plen, pos);
 8000e32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e34:	f107 0218 	add.w	r2, r7, #24
 8000e38:	441a      	add	r2, r3
 8000e3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e3c:	4610      	mov	r0, r2
 8000e3e:	68f9      	ldr	r1, [r7, #12]
 8000e40:	461a      	mov	r2, r3
 8000e42:	f017 f85d 	bl	8017f00 <memcpy>
 8000e46:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000e48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e4a:	4413      	add	r3, r2
 8000e4c:	657b      	str	r3, [r7, #84]	; 0x54
	path_write_data(buf, &dev, 4, pos);
 8000e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e50:	f107 0218 	add.w	r2, r7, #24
 8000e54:	441a      	add	r2, r3
 8000e56:	1d3b      	adds	r3, r7, #4
 8000e58:	4610      	mov	r0, r2
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	2204      	movs	r2, #4
 8000e5e:	f017 f84f 	bl	8017f00 <memcpy>
 8000e62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e64:	3304      	adds	r3, #4
 8000e66:	657b      	str	r3, [r7, #84]	; 0x54

	write(PATHSERVER_FD, buf, pos);
 8000e68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e6a:	f107 0218 	add.w	r2, r7, #24
 8000e6e:	200b      	movs	r0, #11
 8000e70:	4611      	mov	r1, r2
 8000e72:	461a      	mov	r2, r3
 8000e74:	f017 f89a 	bl	8017fac <write>
	read(replyfd, &status, 4);
 8000e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	4610      	mov	r0, r2
 8000e82:	4619      	mov	r1, r3
 8000e84:	2204      	movs	r2, #4
 8000e86:	f017 f898 	bl	8017fba <read>

	return status;
 8000e8a:	697b      	ldr	r3, [r7, #20]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3758      	adds	r7, #88	; 0x58
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <open>:

int open(const char *pathname, int flags)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b092      	sub	sp, #72	; 0x48
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
    int cmd = PATH_CMD_OPEN;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	643b      	str	r3, [r7, #64]	; 0x40
	unsigned int replyfd = getpid() + 3;
 8000ea2:	f017 f87c 	bl	8017f9e <getpid>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	3303      	adds	r3, #3
 8000eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
	size_t plen = strlen(pathname) + 1;
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f003 ff97 	bl	8004de0 <strlen>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	63bb      	str	r3, [r7, #56]	; 0x38
	unsigned int fd = -1;
 8000eb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ebc:	637b      	str	r3, [r7, #52]	; 0x34
	char buf[4 + 4 + 4 + PATH_MAX];
	(void) flags;
	int pos = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	647b      	str	r3, [r7, #68]	; 0x44

	path_write_data(buf, &cmd, 4, pos);
 8000ec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ec4:	f107 0208 	add.w	r2, r7, #8
 8000ec8:	441a      	add	r2, r3
 8000eca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ece:	4610      	mov	r0, r2
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	2204      	movs	r2, #4
 8000ed4:	f017 f814 	bl	8017f00 <memcpy>
 8000ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000eda:	3304      	adds	r3, #4
 8000edc:	647b      	str	r3, [r7, #68]	; 0x44
	path_write_data(buf, &replyfd, 4, pos);
 8000ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ee0:	f107 0208 	add.w	r2, r7, #8
 8000ee4:	441a      	add	r2, r3
 8000ee6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000eea:	4610      	mov	r0, r2
 8000eec:	4619      	mov	r1, r3
 8000eee:	2204      	movs	r2, #4
 8000ef0:	f017 f806 	bl	8017f00 <memcpy>
 8000ef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ef6:	3304      	adds	r3, #4
 8000ef8:	647b      	str	r3, [r7, #68]	; 0x44
	path_write_data(buf, &plen, 4, pos);
 8000efa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000efc:	f107 0208 	add.w	r2, r7, #8
 8000f00:	441a      	add	r2, r3
 8000f02:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f06:	4610      	mov	r0, r2
 8000f08:	4619      	mov	r1, r3
 8000f0a:	2204      	movs	r2, #4
 8000f0c:	f016 fff8 	bl	8017f00 <memcpy>
 8000f10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f12:	3304      	adds	r3, #4
 8000f14:	647b      	str	r3, [r7, #68]	; 0x44
	path_write_data(buf, pathname, plen, pos);
 8000f16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f18:	f107 0208 	add.w	r2, r7, #8
 8000f1c:	441a      	add	r2, r3
 8000f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f20:	4610      	mov	r0, r2
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	461a      	mov	r2, r3
 8000f26:	f016 ffeb 	bl	8017f00 <memcpy>
 8000f2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f2e:	4413      	add	r3, r2
 8000f30:	647b      	str	r3, [r7, #68]	; 0x44

	write(PATHSERVER_FD, buf, pos);
 8000f32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f34:	f107 0208 	add.w	r2, r7, #8
 8000f38:	200b      	movs	r0, #11
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	f017 f835 	bl	8017fac <write>
	read(replyfd, &fd, 4);
 8000f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f44:	461a      	mov	r2, r3
 8000f46:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f4a:	4610      	mov	r0, r2
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	2204      	movs	r2, #4
 8000f50:	f017 f833 	bl	8017fba <read>

	return fd;
 8000f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3748      	adds	r7, #72	; 0x48
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop

08000f60 <file_release>:

int file_release(struct event_monitor *monitor, int event,
                  struct task_control_block *task, void *data)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
 8000f6c:	603b      	str	r3, [r7, #0]
    struct file *file = data;
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	617b      	str	r3, [r7, #20]
    struct file_request *request = (void*)task->stack->r0;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f78:	613b      	str	r3, [r7, #16]

    if (FILE_EVENT_IS_READ(event))
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d106      	bne.n	8000f92 <file_release+0x32>
        return file_read(file, request, monitor);
 8000f84:	6978      	ldr	r0, [r7, #20]
 8000f86:	6939      	ldr	r1, [r7, #16]
 8000f88:	68fa      	ldr	r2, [r7, #12]
 8000f8a:	f000 f80d 	bl	8000fa8 <file_read>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	e005      	b.n	8000f9e <file_release+0x3e>
    else
        return file_write(file, request, monitor);
 8000f92:	6978      	ldr	r0, [r7, #20]
 8000f94:	6939      	ldr	r1, [r7, #16]
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	f000 f850 	bl	800103c <file_write>
 8000f9c:	4603      	mov	r3, r0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop

08000fa8 <file_read>:

int file_read(struct file *file, struct file_request *request,
              struct event_monitor *monitor)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
    struct task_control_block *task = request->task;
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	617b      	str	r3, [r7, #20]

	if (file) {
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d02b      	beq.n	8001018 <file_read+0x70>
	    switch (file->ops->readable(file, request, monitor)) {
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	68f8      	ldr	r0, [r7, #12]
 8000fc8:	68b9      	ldr	r1, [r7, #8]
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	4798      	blx	r3
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d015      	beq.n	8001000 <file_read+0x58>
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d11f      	bne.n	8001018 <file_read+0x70>
		    case FILE_ACCESS_ACCEPT: {
			    int size = file->ops->read(file, request, monitor);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	68f8      	ldr	r0, [r7, #12]
 8000fe0:	68b9      	ldr	r1, [r7, #8]
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	4798      	blx	r3
 8000fe6:	6138      	str	r0, [r7, #16]

			    if (task) {
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d006      	beq.n	8000ffc <file_read+0x54>
			        task->stack->r0 = size;
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	629a      	str	r2, [r3, #40]	; 0x28
	                task->status = TASK_READY;
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
	            }

			    return 1;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e018      	b.n	8001032 <file_read+0x8a>
		    }
		    case FILE_ACCESS_BLOCK:
			    if (task && task->status == TASK_READY) {
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d006      	beq.n	8001014 <file_read+0x6c>
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d102      	bne.n	8001014 <file_read+0x6c>
	                task->status = TASK_WAIT_READ;
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	2201      	movs	r2, #1
 8001012:	609a      	str	r2, [r3, #8]
	            }

	            return 0;
 8001014:	2300      	movs	r3, #0
 8001016:	e00c      	b.n	8001032 <file_read+0x8a>
		    default:
		        ;
		}
	}

    if (task) {
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d007      	beq.n	800102e <file_read+0x86>
        task->stack->r0 = -1;
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001026:	629a      	str	r2, [r3, #40]	; 0x28
        task->status = TASK_READY;
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
    }

    return -1;
 800102e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001032:	4618      	mov	r0, r3
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop

0800103c <file_write>:

int file_write(struct file *file, struct file_request *request,
               struct event_monitor *monitor)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
    struct task_control_block *task = request->task;
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	617b      	str	r3, [r7, #20]

	if (file) {
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d02c      	beq.n	80010ae <file_write+0x72>
	    switch (file->ops->writable(file, request, monitor)) {
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	68f8      	ldr	r0, [r7, #12]
 800105c:	68b9      	ldr	r1, [r7, #8]
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	4798      	blx	r3
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d015      	beq.n	8001094 <file_write+0x58>
 8001068:	2b01      	cmp	r3, #1
 800106a:	d120      	bne.n	80010ae <file_write+0x72>
	        case FILE_ACCESS_ACCEPT: {
	            int size = file->ops->write(file, request, monitor);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	68f8      	ldr	r0, [r7, #12]
 8001074:	68b9      	ldr	r1, [r7, #8]
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	4798      	blx	r3
 800107a:	6138      	str	r0, [r7, #16]

	            if (task) {
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d006      	beq.n	8001090 <file_write+0x54>
	                task->stack->r0 = size;
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	629a      	str	r2, [r3, #40]	; 0x28
	                task->status = TASK_READY;
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
	            }

			    return 1;
 8001090:	2301      	movs	r3, #1
 8001092:	e019      	b.n	80010c8 <file_write+0x8c>
		    }
		    case FILE_ACCESS_BLOCK:
		        if (task && task->status == TASK_READY) {
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d007      	beq.n	80010aa <file_write+0x6e>
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d103      	bne.n	80010aa <file_write+0x6e>
		            request->task->status = TASK_WAIT_WRITE;
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2202      	movs	r2, #2
 80010a8:	609a      	str	r2, [r3, #8]
		        }

		        return 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	e00c      	b.n	80010c8 <file_write+0x8c>
		    default:
		        ;
		}
	}

	if (task) {
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d007      	beq.n	80010c4 <file_write+0x88>
	    task->stack->r0 = -1;
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010bc:	629a      	str	r2, [r3, #40]	; 0x28
	    task->status = TASK_READY;
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
	}

	return -1;
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3718      	adds	r7, #24
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <file_mknod>:

int
file_mknod(int fd, int driver_pid, struct file *files[], int dev,
           struct memory_pool *memory_pool, struct event_monitor *event_monitor)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b088      	sub	sp, #32
 80010d4:	af02      	add	r7, sp, #8
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
 80010dc:	603b      	str	r3, [r7, #0]
    int result;
	switch(dev) {
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	3b01      	subs	r3, #1
 80010e2:	2b07      	cmp	r3, #7
 80010e4:	d83a      	bhi.n	800115c <file_mknod+0x8c>
 80010e6:	a201      	add	r2, pc, #4	; (adr r2, 80010ec <file_mknod+0x1c>)
 80010e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ec:	0800110d 	.word	0x0800110d
 80010f0:	08001121 	.word	0x08001121
 80010f4:	0800115d 	.word	0x0800115d
 80010f8:	0800115d 	.word	0x0800115d
 80010fc:	0800115d 	.word	0x0800115d
 8001100:	08001135 	.word	0x08001135
 8001104:	0800115d 	.word	0x0800115d
 8001108:	08001149 	.word	0x08001149
	case S_IFIFO:
		result = fifo_init(fd, driver_pid, files, memory_pool, event_monitor);
 800110c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	68f8      	ldr	r0, [r7, #12]
 8001112:	68b9      	ldr	r1, [r7, #8]
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	6a3b      	ldr	r3, [r7, #32]
 8001118:	f7ff fd26 	bl	8000b68 <fifo_init>
 800111c:	6178      	str	r0, [r7, #20]
		break;
 800111e:	e020      	b.n	8001162 <file_mknod+0x92>
	case S_IMSGQ:
		result = mq_init(fd, driver_pid, files, memory_pool, event_monitor);
 8001120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	68b9      	ldr	r1, [r7, #8]
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	6a3b      	ldr	r3, [r7, #32]
 800112c:	f002 f894 	bl	8003258 <mq_init>
 8001130:	6178      	str	r0, [r7, #20]
		break;
 8001132:	e016      	b.n	8001162 <file_mknod+0x92>
	case S_IFBLK:
	    result = block_init(fd, driver_pid, files, memory_pool, event_monitor);
 8001134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	68f8      	ldr	r0, [r7, #12]
 800113a:	68b9      	ldr	r1, [r7, #8]
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	6a3b      	ldr	r3, [r7, #32]
 8001140:	f7ff fabc 	bl	80006bc <block_init>
 8001144:	6178      	str	r0, [r7, #20]
	    break;
 8001146:	e00c      	b.n	8001162 <file_mknod+0x92>
	case S_IFREG:
	    result = regfile_init(fd, driver_pid, files, memory_pool, event_monitor);
 8001148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	68b9      	ldr	r1, [r7, #8]
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	6a3b      	ldr	r3, [r7, #32]
 8001154:	f003 fa02 	bl	800455c <regfile_init>
 8001158:	6178      	str	r0, [r7, #20]
	    break;
 800115a:	e002      	b.n	8001162 <file_mknod+0x92>
	default:
		result = -1;
 800115c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001160:	617b      	str	r3, [r7, #20]
	}

	if (result == 0) {
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d106      	bne.n	8001176 <file_mknod+0xa6>
	    files[fd]->fd = fd;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	4413      	add	r3, r2
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	601a      	str	r2, [r3, #0]
    }

	return result;
 8001176:	697b      	ldr	r3, [r7, #20]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <file_lseek>:

int file_lseek(struct file *file, struct file_request *request,
               struct event_monitor *monitor)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
    struct task_control_block *task = request->task;
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	617b      	str	r3, [r7, #20]

    if (file && file->ops->lseekable && file->ops->lseek) {
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d036      	beq.n	8001206 <file_lseek+0x86>
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	691b      	ldr	r3, [r3, #16]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d031      	beq.n	8001206 <file_lseek+0x86>
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	695b      	ldr	r3, [r3, #20]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d02c      	beq.n	8001206 <file_lseek+0x86>
        switch (file->ops->lseekable(file, request, monitor)) {
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	68f8      	ldr	r0, [r7, #12]
 80011b4:	68b9      	ldr	r1, [r7, #8]
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	4798      	blx	r3
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d015      	beq.n	80011ec <file_lseek+0x6c>
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d120      	bne.n	8001206 <file_lseek+0x86>
            case FILE_ACCESS_ACCEPT: {
                int status = file->ops->lseek(file, request, monitor);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	68f8      	ldr	r0, [r7, #12]
 80011cc:	68b9      	ldr	r1, [r7, #8]
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	4798      	blx	r3
 80011d2:	6138      	str	r0, [r7, #16]

	            if (task) {
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d006      	beq.n	80011e8 <file_lseek+0x68>
	                task->stack->r0 = status;
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	629a      	str	r2, [r3, #40]	; 0x28
	                task->status = TASK_READY;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
	            }

			    return 1;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e019      	b.n	8001220 <file_lseek+0xa0>
		    }
		    case FILE_ACCESS_BLOCK:
		        if (task && task->status == TASK_READY) {
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d007      	beq.n	8001202 <file_lseek+0x82>
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d103      	bne.n	8001202 <file_lseek+0x82>
		            request->task->status = TASK_WAIT_WRITE;
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2202      	movs	r2, #2
 8001200:	609a      	str	r2, [r3, #8]
		        }

		        return 0;
 8001202:	2300      	movs	r3, #0
 8001204:	e00c      	b.n	8001220 <file_lseek+0xa0>
		    default:
		        ;
        }
    }

	if (task) {
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d007      	beq.n	800121c <file_lseek+0x9c>
	    task->stack->r0 = -1;
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001214:	629a      	str	r2, [r3, #40]	; 0x28
	    task->status = TASK_READY;
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
	}

	return -1;
 800121c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001220:	4618      	mov	r0, r3
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001232:	4b08      	ldr	r3, [pc, #32]	; (8001254 <NVIC_EnableIRQ+0x2c>)
 8001234:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001238:	0952      	lsrs	r2, r2, #5
 800123a:	79f9      	ldrb	r1, [r7, #7]
 800123c:	f001 011f 	and.w	r1, r1, #31
 8001240:	2001      	movs	r0, #1
 8001242:	fa00 f101 	lsl.w	r1, r0, r1
 8001246:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000e100 	.word	0xe000e100

08001258 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <NVIC_DisableIRQ+0x30>)
 8001264:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001268:	0952      	lsrs	r2, r2, #5
 800126a:	79f9      	ldrb	r1, [r7, #7]
 800126c:	f001 011f 	and.w	r1, r1, #31
 8001270:	2001      	movs	r0, #1
 8001272:	fa00 f101 	lsl.w	r1, r0, r1
 8001276:	3220      	adds	r2, #32
 8001278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000e100 	.word	0xe000e100

0800128c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	6039      	str	r1, [r7, #0]
 8001296:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8001298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129c:	2b00      	cmp	r3, #0
 800129e:	da0b      	bge.n	80012b8 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80012a0:	490d      	ldr	r1, [pc, #52]	; (80012d8 <NVIC_SetPriority+0x4c>)
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	f003 030f 	and.w	r3, r3, #15
 80012a8:	3b04      	subs	r3, #4
 80012aa:	683a      	ldr	r2, [r7, #0]
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	0112      	lsls	r2, r2, #4
 80012b0:	b2d2      	uxtb	r2, r2
 80012b2:	440b      	add	r3, r1
 80012b4:	761a      	strb	r2, [r3, #24]
 80012b6:	e009      	b.n	80012cc <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80012b8:	4908      	ldr	r1, [pc, #32]	; (80012dc <NVIC_SetPriority+0x50>)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	683a      	ldr	r2, [r7, #0]
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	0112      	lsls	r2, r2, #4
 80012c4:	b2d2      	uxtb	r2, r2
 80012c6:	440b      	add	r3, r1
 80012c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000ed00 	.word	0xe000ed00
 80012dc:	e000e100 	.word	0xe000e100

080012e0 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012f0:	d301      	bcc.n	80012f6 <SysTick_Config+0x16>
 80012f2:	2301      	movs	r3, #1
 80012f4:	e00f      	b.n	8001316 <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 80012f6:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <SysTick_Config+0x40>)
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	3a01      	subs	r2, #1
 80012fc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 80012fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001302:	210f      	movs	r1, #15
 8001304:	f7ff ffc2 	bl	800128c <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <SysTick_Config+0x40>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130e:	4b04      	ldr	r3, [pc, #16]	; (8001320 <SysTick_Config+0x40>)
 8001310:	2207      	movs	r2, #7
 8001312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	e000e010 	.word	0xe000e010

08001324 <serialout>:

struct task_control_block tasks[TASK_LIMIT];


void serialout(USART_TypeDef* uart, unsigned int intr)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
	int fd;
	char c;
	mkfifo("/dev/tty0/out", 0);
 800132e:	4817      	ldr	r0, [pc, #92]	; (800138c <serialout+0x68>)
 8001330:	2100      	movs	r1, #0
 8001332:	f7ff fc09 	bl	8000b48 <mkfifo>
	fd = open("/dev/tty0/out", 0);
 8001336:	4815      	ldr	r0, [pc, #84]	; (800138c <serialout+0x68>)
 8001338:	2100      	movs	r1, #0
 800133a:	f7ff fdab 	bl	8000e94 <open>
 800133e:	60f8      	str	r0, [r7, #12]

	while (1) {
		read(fd, &c, 1);
 8001340:	f107 030b 	add.w	r3, r7, #11
 8001344:	68f8      	ldr	r0, [r7, #12]
 8001346:	4619      	mov	r1, r3
 8001348:	2201      	movs	r2, #1
 800134a:	f016 fe36 	bl	8017fba <read>
    	
		USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
 800134e:	4810      	ldr	r0, [pc, #64]	; (8001390 <serialout+0x6c>)
 8001350:	f240 7127 	movw	r1, #1831	; 0x727
 8001354:	2201      	movs	r2, #1
 8001356:	f013 fd5d 	bl	8014e14 <USART_ITConfig>
		while (USART_GetFlagStatus(uart, USART_FLAG_TXE) != SET) {
 800135a:	e003      	b.n	8001364 <serialout+0x40>
    		interrupt_wait(intr);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f016 fe32 	bl	8017fc8 <interrupt_wait>

	while (1) {
		read(fd, &c, 1);
    	
		USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
		while (USART_GetFlagStatus(uart, USART_FLAG_TXE) != SET) {
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	2180      	movs	r1, #128	; 0x80
 8001368:	f013 fd9c 	bl	8014ea4 <USART_GetFlagStatus>
 800136c:	4603      	mov	r3, r0
 800136e:	2b01      	cmp	r3, #1
 8001370:	d1f4      	bne.n	800135c <serialout+0x38>
    		interrupt_wait(intr);
    	}
		USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
 8001372:	4807      	ldr	r0, [pc, #28]	; (8001390 <serialout+0x6c>)
 8001374:	f240 7127 	movw	r1, #1831	; 0x727
 8001378:	2200      	movs	r2, #0
 800137a:	f013 fd4b 	bl	8014e14 <USART_ITConfig>
    	
    	USART_SendData(USART2, c);
 800137e:	7afb      	ldrb	r3, [r7, #11]
 8001380:	4803      	ldr	r0, [pc, #12]	; (8001390 <serialout+0x6c>)
 8001382:	4619      	mov	r1, r3
 8001384:	f013 fba0 	bl	8014ac8 <USART_SendData>
	}
 8001388:	e7da      	b.n	8001340 <serialout+0x1c>
 800138a:	bf00      	nop
 800138c:	0801a3c0 	.word	0x0801a3c0
 8001390:	40004400 	.word	0x40004400

08001394 <serialin>:
}

void serialin(USART_TypeDef* uart, unsigned int intr)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
	int fd;
	char c;
	mkfifo("/dev/tty0/in", 0);
 800139e:	4814      	ldr	r0, [pc, #80]	; (80013f0 <serialin+0x5c>)
 80013a0:	2100      	movs	r1, #0
 80013a2:	f7ff fbd1 	bl	8000b48 <mkfifo>
	fd = open("/dev/tty0/in", 0);
 80013a6:	4812      	ldr	r0, [pc, #72]	; (80013f0 <serialin+0x5c>)
 80013a8:	2100      	movs	r1, #0
 80013aa:	f7ff fd73 	bl	8000e94 <open>
 80013ae:	60f8      	str	r0, [r7, #12]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 80013b0:	4810      	ldr	r0, [pc, #64]	; (80013f4 <serialin+0x60>)
 80013b2:	f240 5125 	movw	r1, #1317	; 0x525
 80013b6:	2201      	movs	r2, #1
 80013b8:	f013 fd2c 	bl	8014e14 <USART_ITConfig>

	while (1) {
		interrupt_wait(intr);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f016 fe02 	bl	8017fc8 <interrupt_wait>
		if (USART_GetFlagStatus(uart, USART_FLAG_RXNE) == SET) {
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	2120      	movs	r1, #32
 80013c8:	f013 fd6c 	bl	8014ea4 <USART_GetFlagStatus>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d10d      	bne.n	80013ee <serialin+0x5a>
			c = USART_ReceiveData(uart);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f013 fb8a 	bl	8014aec <USART_ReceiveData>
 80013d8:	4603      	mov	r3, r0
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	72fb      	strb	r3, [r7, #11]
			write(fd, &c, 1);
 80013de:	f107 030b 	add.w	r3, r7, #11
 80013e2:	68f8      	ldr	r0, [r7, #12]
 80013e4:	4619      	mov	r1, r3
 80013e6:	2201      	movs	r2, #1
 80013e8:	f016 fde0 	bl	8017fac <write>
		}
	}
 80013ec:	e7e6      	b.n	80013bc <serialin+0x28>
 80013ee:	e7e5      	b.n	80013bc <serialin+0x28>
 80013f0:	0801a3d0 	.word	0x0801a3d0
 80013f4:	40004400 	.word	0x40004400

080013f8 <greeting>:
}

void greeting()
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
	int fdout = open("/dev/tty0/out", 0);
 80013fe:	480b      	ldr	r0, [pc, #44]	; (800142c <greeting+0x34>)
 8001400:	2100      	movs	r1, #0
 8001402:	f7ff fd47 	bl	8000e94 <open>
 8001406:	6038      	str	r0, [r7, #0]
	char *string = "Hello, World!\n";
 8001408:	4b09      	ldr	r3, [pc, #36]	; (8001430 <greeting+0x38>)
 800140a:	607b      	str	r3, [r7, #4]
	while (*string) {
 800140c:	e007      	b.n	800141e <greeting+0x26>
		write(fdout, string, 1);
 800140e:	6838      	ldr	r0, [r7, #0]
 8001410:	6879      	ldr	r1, [r7, #4]
 8001412:	2201      	movs	r2, #1
 8001414:	f016 fdca 	bl	8017fac <write>
		string++;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3301      	adds	r3, #1
 800141c:	607b      	str	r3, [r7, #4]

void greeting()
{
	int fdout = open("/dev/tty0/out", 0);
	char *string = "Hello, World!\n";
	while (*string) {
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1f3      	bne.n	800140e <greeting+0x16>
		write(fdout, string, 1);
		string++;
	}
}
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	0801a3c0 	.word	0x0801a3c0
 8001430:	0801a3e0 	.word	0x0801a3e0

08001434 <echo>:

void echo()
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
	int fdout;
	int fdin;
	char c;

	fdout = open("/dev/tty0/out", 0);
 800143a:	480b      	ldr	r0, [pc, #44]	; (8001468 <echo+0x34>)
 800143c:	2100      	movs	r1, #0
 800143e:	f7ff fd29 	bl	8000e94 <open>
 8001442:	60f8      	str	r0, [r7, #12]
	fdin = open("/dev/tty0/in", 0);
 8001444:	4809      	ldr	r0, [pc, #36]	; (800146c <echo+0x38>)
 8001446:	2100      	movs	r1, #0
 8001448:	f7ff fd24 	bl	8000e94 <open>
 800144c:	60b8      	str	r0, [r7, #8]

	while (1) {
		read(fdin, &c, 1);
 800144e:	1dfb      	adds	r3, r7, #7
 8001450:	68b8      	ldr	r0, [r7, #8]
 8001452:	4619      	mov	r1, r3
 8001454:	2201      	movs	r2, #1
 8001456:	f016 fdb0 	bl	8017fba <read>
		write(fdout, &c, 1);
 800145a:	1dfb      	adds	r3, r7, #7
 800145c:	68f8      	ldr	r0, [r7, #12]
 800145e:	4619      	mov	r1, r3
 8001460:	2201      	movs	r2, #1
 8001462:	f016 fda3 	bl	8017fac <write>
	}
 8001466:	e7f2      	b.n	800144e <echo+0x1a>
 8001468:	0801a3c0 	.word	0x0801a3c0
 800146c:	0801a3d0 	.word	0x0801a3d0

08001470 <rs232_xmit_msg_task>:
}

void rs232_xmit_msg_task()
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b09c      	sub	sp, #112	; 0x70
 8001474:	af00      	add	r7, sp, #0
	int fdout;
	int fdin;
	char str[100];
	int curr_char;

	fdout = open("/dev/tty0/out", 0);
 8001476:	4814      	ldr	r0, [pc, #80]	; (80014c8 <rs232_xmit_msg_task+0x58>)
 8001478:	2100      	movs	r1, #0
 800147a:	f7ff fd0b 	bl	8000e94 <open>
 800147e:	66b8      	str	r0, [r7, #104]	; 0x68
	fdin = mq_open("/tmp/mqueue/out", O_CREAT);
 8001480:	4812      	ldr	r0, [pc, #72]	; (80014cc <rs232_xmit_msg_task+0x5c>)
 8001482:	2104      	movs	r1, #4
 8001484:	f001 fed0 	bl	8003228 <mq_open>
 8001488:	6678      	str	r0, [r7, #100]	; 0x64
	setpriority(0, PRIORITY_DEFAULT - 2);
 800148a:	2000      	movs	r0, #0
 800148c:	2112      	movs	r1, #18
 800148e:	f016 fda9 	bl	8017fe4 <setpriority>

	while (1) {
		/* Read from the queue.  Keep trying until a message is
		 * received.  This will block for a period of time (specified
		 * by portMAX_DELAY). */
		read(fdin, str, 100);
 8001492:	463b      	mov	r3, r7
 8001494:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001496:	4619      	mov	r1, r3
 8001498:	2264      	movs	r2, #100	; 0x64
 800149a:	f016 fd8e 	bl	8017fba <read>

		/* Write each character of the message to the RS232 port. */
		curr_char = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	66fb      	str	r3, [r7, #108]	; 0x6c
		while (str[curr_char] != '\0') {
 80014a2:	e00a      	b.n	80014ba <rs232_xmit_msg_task+0x4a>
			write(fdout, &str[curr_char], 1);
 80014a4:	463a      	mov	r2, r7
 80014a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014a8:	4413      	add	r3, r2
 80014aa:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80014ac:	4619      	mov	r1, r3
 80014ae:	2201      	movs	r2, #1
 80014b0:	f016 fd7c 	bl	8017fac <write>
			curr_char++;
 80014b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014b6:	3301      	adds	r3, #1
 80014b8:	66fb      	str	r3, [r7, #108]	; 0x6c
		 * by portMAX_DELAY). */
		read(fdin, str, 100);

		/* Write each character of the message to the RS232 port. */
		curr_char = 0;
		while (str[curr_char] != '\0') {
 80014ba:	463a      	mov	r2, r7
 80014bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014be:	4413      	add	r3, r2
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1ee      	bne.n	80014a4 <rs232_xmit_msg_task+0x34>
			write(fdout, &str[curr_char], 1);
			curr_char++;
		}
	}
 80014c6:	e7e4      	b.n	8001492 <rs232_xmit_msg_task+0x22>
 80014c8:	0801a3c0 	.word	0x0801a3c0
 80014cc:	0801a3f0 	.word	0x0801a3f0

080014d0 <queue_str_task>:
}

void queue_str_task(const char *str, int delay)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
	int fdout = mq_open("/tmp/mqueue/out", 0);
 80014da:	480b      	ldr	r0, [pc, #44]	; (8001508 <queue_str_task+0x38>)
 80014dc:	2100      	movs	r1, #0
 80014de:	f001 fea3 	bl	8003228 <mq_open>
 80014e2:	60f8      	str	r0, [r7, #12]
	int msg_len = strlen(str) + 1;
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f003 fc7b 	bl	8004de0 <strlen>
 80014ea:	4603      	mov	r3, r0
 80014ec:	3301      	adds	r3, #1
 80014ee:	60bb      	str	r3, [r7, #8]

	while (1) {
		/* Post the message.  Keep on trying until it is successful. */
		write(fdout, str, msg_len);
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	68f8      	ldr	r0, [r7, #12]
 80014f4:	6879      	ldr	r1, [r7, #4]
 80014f6:	461a      	mov	r2, r3
 80014f8:	f016 fd58 	bl	8017fac <write>

		/* Wait. */
		sleep(delay);
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f016 fd7e 	bl	8018000 <sleep>
	}
 8001504:	e7f4      	b.n	80014f0 <queue_str_task+0x20>
 8001506:	bf00      	nop
 8001508:	0801a3f0 	.word	0x0801a3f0

0800150c <queue_str_task1>:
}

void queue_str_task1()
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
	queue_str_task("Hello 1\n", 200);
 8001510:	4802      	ldr	r0, [pc, #8]	; (800151c <queue_str_task1+0x10>)
 8001512:	21c8      	movs	r1, #200	; 0xc8
 8001514:	f7ff ffdc 	bl	80014d0 <queue_str_task>
}
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	0801a400 	.word	0x0801a400

08001520 <queue_str_task2>:

void queue_str_task2()
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
	queue_str_task("Hello 2\n", 50);
 8001524:	4802      	ldr	r0, [pc, #8]	; (8001530 <queue_str_task2+0x10>)
 8001526:	2132      	movs	r1, #50	; 0x32
 8001528:	f7ff ffd2 	bl	80014d0 <queue_str_task>
}
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	0801a40c 	.word	0x0801a40c

08001534 <serial_readwrite_task>:

void serial_readwrite_task()
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b09e      	sub	sp, #120	; 0x78
 8001538:	af00      	add	r7, sp, #0
	char str[100];
	char ch;
	int curr_char;
	int done;

	fdout = mq_open("/tmp/mqueue/out", 0);
 800153a:	4824      	ldr	r0, [pc, #144]	; (80015cc <serial_readwrite_task+0x98>)
 800153c:	2100      	movs	r1, #0
 800153e:	f001 fe73 	bl	8003228 <mq_open>
 8001542:	66f8      	str	r0, [r7, #108]	; 0x6c
	fdin = open("/dev/tty0/in", 0);
 8001544:	4822      	ldr	r0, [pc, #136]	; (80015d0 <serial_readwrite_task+0x9c>)
 8001546:	2100      	movs	r1, #0
 8001548:	f7ff fca4 	bl	8000e94 <open>
 800154c:	66b8      	str	r0, [r7, #104]	; 0x68

	/* Prepare the response message to be queued. */
	memcpy(str, "Got:", 4);
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	4618      	mov	r0, r3
 8001552:	4920      	ldr	r1, [pc, #128]	; (80015d4 <serial_readwrite_task+0xa0>)
 8001554:	2204      	movs	r2, #4
 8001556:	f016 fcd3 	bl	8017f00 <memcpy>

	while (1) {
		curr_char = 4;
 800155a:	2304      	movs	r3, #4
 800155c:	677b      	str	r3, [r7, #116]	; 0x74
		done = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	673b      	str	r3, [r7, #112]	; 0x70
		do {
			/* Receive a byte from the RS232 port (this call will
			 * block). */
			read(fdin, &ch, 1);
 8001562:	1cfb      	adds	r3, r7, #3
 8001564:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001566:	4619      	mov	r1, r3
 8001568:	2201      	movs	r2, #1
 800156a:	f016 fd26 	bl	8017fba <read>

			/* If the byte is an end-of-line type character, then
			 * finish the string and inidcate we are done.
			 */
			if (curr_char >= 98 || ch == '\r' || ch == '\n') {
 800156e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001570:	2b61      	cmp	r3, #97	; 0x61
 8001572:	dc05      	bgt.n	8001580 <serial_readwrite_task+0x4c>
 8001574:	78fb      	ldrb	r3, [r7, #3]
 8001576:	2b0d      	cmp	r3, #13
 8001578:	d002      	beq.n	8001580 <serial_readwrite_task+0x4c>
 800157a:	78fb      	ldrb	r3, [r7, #3]
 800157c:	2b0a      	cmp	r3, #10
 800157e:	d110      	bne.n	80015a2 <serial_readwrite_task+0x6e>
				str[curr_char] = '\n';
 8001580:	1d3a      	adds	r2, r7, #4
 8001582:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001584:	4413      	add	r3, r2
 8001586:	220a      	movs	r2, #10
 8001588:	701a      	strb	r2, [r3, #0]
				str[curr_char+1] = '\0';
 800158a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800158c:	3301      	adds	r3, #1
 800158e:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001592:	440b      	add	r3, r1
 8001594:	2200      	movs	r2, #0
 8001596:	f803 2c74 	strb.w	r2, [r3, #-116]
				done = -1;
 800159a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800159e:	673b      	str	r3, [r7, #112]	; 0x70
 80015a0:	e008      	b.n	80015b4 <serial_readwrite_task+0x80>
			}
			/* Otherwise, add the character to the
			 * response string. */
			else
				str[curr_char++] = ch;
 80015a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80015a4:	1c5a      	adds	r2, r3, #1
 80015a6:	677a      	str	r2, [r7, #116]	; 0x74
 80015a8:	78fa      	ldrb	r2, [r7, #3]
 80015aa:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80015ae:	440b      	add	r3, r1
 80015b0:	f803 2c74 	strb.w	r2, [r3, #-116]
		} while (!done);
 80015b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0d3      	beq.n	8001562 <serial_readwrite_task+0x2e>

		/* Once we are done building the response string, queue the
		 * response to be sent to the RS232 port.
		 */
		write(fdout, str, curr_char+1 + 1);
 80015ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80015bc:	3302      	adds	r3, #2
 80015be:	1d3a      	adds	r2, r7, #4
 80015c0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80015c2:	4611      	mov	r1, r2
 80015c4:	461a      	mov	r2, r3
 80015c6:	f016 fcf1 	bl	8017fac <write>
	}
 80015ca:	e7c6      	b.n	800155a <serial_readwrite_task+0x26>
 80015cc:	0801a3f0 	.word	0x0801a3f0
 80015d0:	0801a3d0 	.word	0x0801a3d0
 80015d4:	0801a418 	.word	0x0801a418

080015d8 <serial_test_task>:
}

void serial_test_task()
{
 80015d8:	b5b0      	push	{r4, r5, r7, lr}
 80015da:	b08a      	sub	sp, #40	; 0x28
 80015dc:	af00      	add	r7, sp, #0
	char put_ch[2]={'0','\0'};
 80015de:	2330      	movs	r3, #48	; 0x30
 80015e0:	773b      	strb	r3, [r7, #28]
 80015e2:	2300      	movs	r3, #0
 80015e4:	777b      	strb	r3, [r7, #29]
	char hint[] =  USER_NAME "@" USER_NAME "-STM32:~$ ";
 80015e6:	4b44      	ldr	r3, [pc, #272]	; (80016f8 <serial_test_task+0x120>)
 80015e8:	463c      	mov	r4, r7
 80015ea:	461d      	mov	r5, r3
 80015ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	int hint_length = sizeof(hint);
 80015f8:	231c      	movs	r3, #28
 80015fa:	623b      	str	r3, [r7, #32]
	char *p = NULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24

	fdout = mq_open("/tmp/mqueue/out", 0);
 8001600:	483e      	ldr	r0, [pc, #248]	; (80016fc <serial_test_task+0x124>)
 8001602:	2100      	movs	r1, #0
 8001604:	f001 fe10 	bl	8003228 <mq_open>
 8001608:	4602      	mov	r2, r0
 800160a:	4b3d      	ldr	r3, [pc, #244]	; (8001700 <serial_test_task+0x128>)
 800160c:	601a      	str	r2, [r3, #0]
	fdin = open("/dev/tty0/in", 0);
 800160e:	483d      	ldr	r0, [pc, #244]	; (8001704 <serial_test_task+0x12c>)
 8001610:	2100      	movs	r1, #0
 8001612:	f7ff fc3f 	bl	8000e94 <open>
 8001616:	4602      	mov	r2, r0
 8001618:	4b3b      	ldr	r3, [pc, #236]	; (8001708 <serial_test_task+0x130>)
 800161a:	601a      	str	r2, [r3, #0]

	for (;; cur_his = (cur_his + 1) % HISTORY_COUNT) {
		p = cmd[cur_his];
 800161c:	4b3b      	ldr	r3, [pc, #236]	; (800170c <serial_test_task+0x134>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	019a      	lsls	r2, r3, #6
 8001622:	4b3b      	ldr	r3, [pc, #236]	; (8001710 <serial_test_task+0x138>)
 8001624:	4413      	add	r3, r2
 8001626:	627b      	str	r3, [r7, #36]	; 0x24
		write(fdout, hint, hint_length);
 8001628:	4b35      	ldr	r3, [pc, #212]	; (8001700 <serial_test_task+0x128>)
 800162a:	6819      	ldr	r1, [r3, #0]
 800162c:	6a3b      	ldr	r3, [r7, #32]
 800162e:	463a      	mov	r2, r7
 8001630:	4608      	mov	r0, r1
 8001632:	4611      	mov	r1, r2
 8001634:	461a      	mov	r2, r3
 8001636:	f016 fcb9 	bl	8017fac <write>

		while (1) {
			read(fdin, put_ch, 1);
 800163a:	4b33      	ldr	r3, [pc, #204]	; (8001708 <serial_test_task+0x130>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	f107 031c 	add.w	r3, r7, #28
 8001642:	4610      	mov	r0, r2
 8001644:	4619      	mov	r1, r3
 8001646:	2201      	movs	r2, #1
 8001648:	f016 fcb7 	bl	8017fba <read>

			if (put_ch[0] == '\r' || put_ch[0] == '\n') {
 800164c:	7f3b      	ldrb	r3, [r7, #28]
 800164e:	2b0d      	cmp	r3, #13
 8001650:	d002      	beq.n	8001658 <serial_test_task+0x80>
 8001652:	7f3b      	ldrb	r3, [r7, #28]
 8001654:	2b0a      	cmp	r3, #10
 8001656:	d114      	bne.n	8001682 <serial_test_task+0xaa>
				*p = '\0';
 8001658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
				write(fdout, next_line, 3);
 800165e:	4b28      	ldr	r3, [pc, #160]	; (8001700 <serial_test_task+0x128>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	492b      	ldr	r1, [pc, #172]	; (8001714 <serial_test_task+0x13c>)
 8001666:	2203      	movs	r2, #3
 8001668:	f016 fca0 	bl	8017fac <write>
				break;
 800166c:	bf00      	nop
			else if (p - cmd[cur_his] < CMDBUF_SIZE - 1) {
				*p++ = put_ch[0];
				write(fdout, put_ch, 2);
			}
		}
		check_keyword();	
 800166e:	f000 f8d7 	bl	8001820 <check_keyword>
	char *p = NULL;

	fdout = mq_open("/tmp/mqueue/out", 0);
	fdin = open("/dev/tty0/in", 0);

	for (;; cur_his = (cur_his + 1) % HISTORY_COUNT) {
 8001672:	4b26      	ldr	r3, [pc, #152]	; (800170c <serial_test_task+0x134>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	1c5a      	adds	r2, r3, #1
 8001678:	4b27      	ldr	r3, [pc, #156]	; (8001718 <serial_test_task+0x140>)
 800167a:	4013      	ands	r3, r2
 800167c:	2b00      	cmp	r3, #0
 800167e:	da37      	bge.n	80016f0 <serial_test_task+0x118>
 8001680:	e032      	b.n	80016e8 <serial_test_task+0x110>
			if (put_ch[0] == '\r' || put_ch[0] == '\n') {
				*p = '\0';
				write(fdout, next_line, 3);
				break;
			}
			else if (put_ch[0] == 127 || put_ch[0] == '\b') {
 8001682:	7f3b      	ldrb	r3, [r7, #28]
 8001684:	2b7f      	cmp	r3, #127	; 0x7f
 8001686:	d002      	beq.n	800168e <serial_test_task+0xb6>
 8001688:	7f3b      	ldrb	r3, [r7, #28]
 800168a:	2b08      	cmp	r3, #8
 800168c:	d113      	bne.n	80016b6 <serial_test_task+0xde>
				if (p > cmd[cur_his]) {
 800168e:	4b1f      	ldr	r3, [pc, #124]	; (800170c <serial_test_task+0x134>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	019a      	lsls	r2, r3, #6
 8001694:	4b1e      	ldr	r3, [pc, #120]	; (8001710 <serial_test_task+0x138>)
 8001696:	441a      	add	r2, r3
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169a:	429a      	cmp	r2, r3
 800169c:	d20a      	bcs.n	80016b4 <serial_test_task+0xdc>
					p--;
 800169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a0:	3b01      	subs	r3, #1
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
					write(fdout, "\b \b", 4);
 80016a4:	4b16      	ldr	r3, [pc, #88]	; (8001700 <serial_test_task+0x128>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	491c      	ldr	r1, [pc, #112]	; (800171c <serial_test_task+0x144>)
 80016ac:	2204      	movs	r2, #4
 80016ae:	f016 fc7d 	bl	8017fac <write>
				*p = '\0';
				write(fdout, next_line, 3);
				break;
			}
			else if (put_ch[0] == 127 || put_ch[0] == '\b') {
				if (p > cmd[cur_his]) {
 80016b2:	e018      	b.n	80016e6 <serial_test_task+0x10e>
 80016b4:	e017      	b.n	80016e6 <serial_test_task+0x10e>
					p--;
					write(fdout, "\b \b", 4);
				}
			}
			else if (p - cmd[cur_his] < CMDBUF_SIZE - 1) {
 80016b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016b8:	4b14      	ldr	r3, [pc, #80]	; (800170c <serial_test_task+0x134>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	0199      	lsls	r1, r3, #6
 80016be:	4b14      	ldr	r3, [pc, #80]	; (8001710 <serial_test_task+0x138>)
 80016c0:	440b      	add	r3, r1
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b3e      	cmp	r3, #62	; 0x3e
 80016c6:	dc0e      	bgt.n	80016e6 <serial_test_task+0x10e>
				*p++ = put_ch[0];
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	627a      	str	r2, [r7, #36]	; 0x24
 80016ce:	7f3a      	ldrb	r2, [r7, #28]
 80016d0:	701a      	strb	r2, [r3, #0]
				write(fdout, put_ch, 2);
 80016d2:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <serial_test_task+0x128>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	f107 031c 	add.w	r3, r7, #28
 80016da:	4610      	mov	r0, r2
 80016dc:	4619      	mov	r1, r3
 80016de:	2202      	movs	r2, #2
 80016e0:	f016 fc64 	bl	8017fac <write>
			}
		}
 80016e4:	e7a9      	b.n	800163a <serial_test_task+0x62>
 80016e6:	e7a8      	b.n	800163a <serial_test_task+0x62>
	char *p = NULL;

	fdout = mq_open("/tmp/mqueue/out", 0);
	fdin = open("/dev/tty0/in", 0);

	for (;; cur_his = (cur_his + 1) % HISTORY_COUNT) {
 80016e8:	3b01      	subs	r3, #1
 80016ea:	f063 0307 	orn	r3, r3, #7
 80016ee:	3301      	adds	r3, #1
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <serial_test_task+0x134>)
 80016f4:	601a      	str	r2, [r3, #0]
				*p++ = put_ch[0];
				write(fdout, put_ch, 2);
			}
		}
		check_keyword();	
	}
 80016f6:	e791      	b.n	800161c <serial_test_task+0x44>
 80016f8:	0801a424 	.word	0x0801a424
 80016fc:	0801a3f0 	.word	0x0801a3f0
 8001700:	200002dc 	.word	0x200002dc
 8001704:	0801a3d0 	.word	0x0801a3d0
 8001708:	200002e0 	.word	0x200002e0
 800170c:	200002d8 	.word	0x200002d8
 8001710:	200000d8 	.word	0x200000d8
 8001714:	20000030 	.word	0x20000030
 8001718:	80000007 	.word	0x80000007
 800171c:	0801a420 	.word	0x0801a420

08001720 <UI_task>:
}

void UI_task()
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
    ui_init();
 8001724:	f003 fd16 	bl	8005154 <ui_init>
}
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop

0800172c <cmdtok>:

/* Split command into tokens. */
char *cmdtok(char *cmd)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	static char *cur = NULL;
	static char *end = NULL;
	if (cmd) {
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d045      	beq.n	80017c6 <cmdtok+0x9a>
		char quo = '\0';
 800173a:	2300      	movs	r3, #0
 800173c:	73fb      	strb	r3, [r7, #15]
		cur = cmd;
 800173e:	4b35      	ldr	r3, [pc, #212]	; (8001814 <cmdtok+0xe8>)
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	601a      	str	r2, [r3, #0]
		for (end = cmd; *end; end++) {
 8001744:	4b34      	ldr	r3, [pc, #208]	; (8001818 <cmdtok+0xec>)
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	e036      	b.n	80017ba <cmdtok+0x8e>
			if (*end == '\'' || *end == '\"') {
 800174c:	4b32      	ldr	r3, [pc, #200]	; (8001818 <cmdtok+0xec>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b27      	cmp	r3, #39	; 0x27
 8001754:	d004      	beq.n	8001760 <cmdtok+0x34>
 8001756:	4b30      	ldr	r3, [pc, #192]	; (8001818 <cmdtok+0xec>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b22      	cmp	r3, #34	; 0x22
 800175e:	d114      	bne.n	800178a <cmdtok+0x5e>
				if (quo == *end)
 8001760:	4b2d      	ldr	r3, [pc, #180]	; (8001818 <cmdtok+0xec>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	7bfa      	ldrb	r2, [r7, #15]
 8001768:	429a      	cmp	r2, r3
 800176a:	d102      	bne.n	8001772 <cmdtok+0x46>
					quo = '\0';
 800176c:	2300      	movs	r3, #0
 800176e:	73fb      	strb	r3, [r7, #15]
 8001770:	e006      	b.n	8001780 <cmdtok+0x54>
				else if (quo == '\0')
 8001772:	7bfb      	ldrb	r3, [r7, #15]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d103      	bne.n	8001780 <cmdtok+0x54>
					quo = *end;
 8001778:	4b27      	ldr	r3, [pc, #156]	; (8001818 <cmdtok+0xec>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	73fb      	strb	r3, [r7, #15]
				*end = '\0';
 8001780:	4b25      	ldr	r3, [pc, #148]	; (8001818 <cmdtok+0xec>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2200      	movs	r2, #0
 8001786:	701a      	strb	r2, [r3, #0]
 8001788:	e012      	b.n	80017b0 <cmdtok+0x84>
			}
			else if (isspace((int)*end) && !quo)
 800178a:	4b24      	ldr	r3, [pc, #144]	; (800181c <cmdtok+0xf0>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	4b22      	ldr	r3, [pc, #136]	; (8001818 <cmdtok+0xec>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	3301      	adds	r3, #1
 8001796:	4413      	add	r3, r2
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d006      	beq.n	80017b0 <cmdtok+0x84>
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d103      	bne.n	80017b0 <cmdtok+0x84>
				*end = '\0';
 80017a8:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <cmdtok+0xec>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2200      	movs	r2, #0
 80017ae:	701a      	strb	r2, [r3, #0]
	static char *cur = NULL;
	static char *end = NULL;
	if (cmd) {
		char quo = '\0';
		cur = cmd;
		for (end = cmd; *end; end++) {
 80017b0:	4b19      	ldr	r3, [pc, #100]	; (8001818 <cmdtok+0xec>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	1c5a      	adds	r2, r3, #1
 80017b6:	4b18      	ldr	r3, [pc, #96]	; (8001818 <cmdtok+0xec>)
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	4b17      	ldr	r3, [pc, #92]	; (8001818 <cmdtok+0xec>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1c3      	bne.n	800174c <cmdtok+0x20>
 80017c4:	e00a      	b.n	80017dc <cmdtok+0xb0>
			else if (isspace((int)*end) && !quo)
				*end = '\0';
		}
	}
	else
		for (; *cur; cur++)
 80017c6:	e004      	b.n	80017d2 <cmdtok+0xa6>
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <cmdtok+0xe8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	1c5a      	adds	r2, r3, #1
 80017ce:	4b11      	ldr	r3, [pc, #68]	; (8001814 <cmdtok+0xe8>)
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	4b10      	ldr	r3, [pc, #64]	; (8001814 <cmdtok+0xe8>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1f5      	bne.n	80017c8 <cmdtok+0x9c>
			;

	for (; *cur == '\0'; cur++)
 80017dc:	e00c      	b.n	80017f8 <cmdtok+0xcc>
		if (cur == end) return NULL;
 80017de:	4b0d      	ldr	r3, [pc, #52]	; (8001814 <cmdtok+0xe8>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	4b0d      	ldr	r3, [pc, #52]	; (8001818 <cmdtok+0xec>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d101      	bne.n	80017ee <cmdtok+0xc2>
 80017ea:	2300      	movs	r3, #0
 80017ec:	e00b      	b.n	8001806 <cmdtok+0xda>
	}
	else
		for (; *cur; cur++)
			;

	for (; *cur == '\0'; cur++)
 80017ee:	4b09      	ldr	r3, [pc, #36]	; (8001814 <cmdtok+0xe8>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	1c5a      	adds	r2, r3, #1
 80017f4:	4b07      	ldr	r3, [pc, #28]	; (8001814 <cmdtok+0xe8>)
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <cmdtok+0xe8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d0ed      	beq.n	80017de <cmdtok+0xb2>
		if (cur == end) return NULL;
	return cur;
 8001802:	4b04      	ldr	r3, [pc, #16]	; (8001814 <cmdtok+0xe8>)
 8001804:	681b      	ldr	r3, [r3, #0]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	200052f4 	.word	0x200052f4
 8001818:	200052f8 	.word	0x200052f8
 800181c:	200000d0 	.word	0x200000d0

08001820 <check_keyword>:

void check_keyword()
{
 8001820:	b5b0      	push	{r4, r5, r7, lr}
 8001822:	b0a6      	sub	sp, #152	; 0x98
 8001824:	af00      	add	r7, sp, #0
	char *argv[MAX_ARGC + 1] = {NULL};
 8001826:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800182a:	2350      	movs	r3, #80	; 0x50
 800182c:	4610      	mov	r0, r2
 800182e:	2100      	movs	r1, #0
 8001830:	461a      	mov	r2, r3
 8001832:	f016 fea3 	bl	801857c <memset>
	char cmdstr[CMDBUF_SIZE];
	int argc = 1;
 8001836:	2301      	movs	r3, #1
 8001838:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	int i;

	find_events();
 800183c:	f000 f892 	bl	8001964 <find_events>
	fill_arg(cmdstr, cmd[cur_his]);
 8001840:	4b42      	ldr	r3, [pc, #264]	; (800194c <check_keyword+0x12c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	019a      	lsls	r2, r3, #6
 8001846:	4b42      	ldr	r3, [pc, #264]	; (8001950 <check_keyword+0x130>)
 8001848:	4413      	add	r3, r2
 800184a:	463a      	mov	r2, r7
 800184c:	4610      	mov	r0, r2
 800184e:	4619      	mov	r1, r3
 8001850:	f000 f93a 	bl	8001ac8 <fill_arg>
	argv[0] = cmdtok(cmdstr);
 8001854:	463b      	mov	r3, r7
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff ff68 	bl	800172c <cmdtok>
 800185c:	4603      	mov	r3, r0
 800185e:	643b      	str	r3, [r7, #64]	; 0x40
	if (!argv[0])
 8001860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001862:	2b00      	cmp	r3, #0
 8001864:	d06f      	beq.n	8001946 <check_keyword+0x126>
		return;

	while (1) {
		argv[argc] = cmdtok(NULL);
 8001866:	2000      	movs	r0, #0
 8001868:	f7ff ff60 	bl	800172c <cmdtok>
 800186c:	4602      	mov	r2, r0
 800186e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8001878:	440b      	add	r3, r1
 800187a:	f843 2c58 	str.w	r2, [r3, #-88]
		if (!argv[argc])
 800187e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001888:	4413      	add	r3, r2
 800188a:	f853 3c58 	ldr.w	r3, [r3, #-88]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d100      	bne.n	8001894 <check_keyword+0x74>
			break;
 8001892:	e00a      	b.n	80018aa <check_keyword+0x8a>
		argc++;
 8001894:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001898:	3301      	adds	r3, #1
 800189a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		if (argc >= MAX_ARGC)
 800189e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80018a2:	2b12      	cmp	r3, #18
 80018a4:	dd00      	ble.n	80018a8 <check_keyword+0x88>
			break;
 80018a6:	e000      	b.n	80018aa <check_keyword+0x8a>
	}
 80018a8:	e7dd      	b.n	8001866 <check_keyword+0x46>

	for (i = 0; i < CMD_COUNT; i++) {
 80018aa:	2300      	movs	r3, #0
 80018ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80018b0:	e025      	b.n	80018fe <check_keyword+0xde>
		if (!strcmp(argv[0], cmd_data[i].cmd)) {
 80018b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80018b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018b8:	f44f 6183 	mov.w	r1, #1048	; 0x418
 80018bc:	fb01 f103 	mul.w	r1, r1, r3
 80018c0:	4b24      	ldr	r3, [pc, #144]	; (8001954 <check_keyword+0x134>)
 80018c2:	440b      	add	r3, r1
 80018c4:	4610      	mov	r0, r2
 80018c6:	4619      	mov	r1, r3
 80018c8:	f003 fa50 	bl	8004d6c <strcmp>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d110      	bne.n	80018f4 <check_keyword+0xd4>
			cmd_data[i].func(argc, argv);
 80018d2:	4a20      	ldr	r2, [pc, #128]	; (8001954 <check_keyword+0x134>)
 80018d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018d8:	f44f 6183 	mov.w	r1, #1048	; 0x418
 80018dc:	fb01 f303 	mul.w	r3, r1, r3
 80018e0:	4413      	add	r3, r2
 80018e2:	3314      	adds	r3, #20
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80018ea:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80018ee:	4611      	mov	r1, r2
 80018f0:	4798      	blx	r3
			break;
 80018f2:	e008      	b.n	8001906 <check_keyword+0xe6>
		argc++;
		if (argc >= MAX_ARGC)
			break;
	}

	for (i = 0; i < CMD_COUNT; i++) {
 80018f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018f8:	3301      	adds	r3, #1
 80018fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80018fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001902:	2b06      	cmp	r3, #6
 8001904:	ddd5      	ble.n	80018b2 <check_keyword+0x92>
		if (!strcmp(argv[0], cmd_data[i].cmd)) {
			cmd_data[i].func(argc, argv);
			break;
		}
	}
	if (i == CMD_COUNT) {
 8001906:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800190a:	2b07      	cmp	r3, #7
 800190c:	d11b      	bne.n	8001946 <check_keyword+0x126>
		write(fdout, argv[0], strlen(argv[0]) + 1);
 800190e:	4b12      	ldr	r3, [pc, #72]	; (8001958 <check_keyword+0x138>)
 8001910:	681d      	ldr	r5, [r3, #0]
 8001912:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8001914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001916:	4618      	mov	r0, r3
 8001918:	f003 fa62 	bl	8004de0 <strlen>
 800191c:	4603      	mov	r3, r0
 800191e:	3301      	adds	r3, #1
 8001920:	4628      	mov	r0, r5
 8001922:	4621      	mov	r1, r4
 8001924:	461a      	mov	r2, r3
 8001926:	f016 fb41 	bl	8017fac <write>
		write(fdout, ": command not found", 20);
 800192a:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <check_keyword+0x138>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	490a      	ldr	r1, [pc, #40]	; (800195c <check_keyword+0x13c>)
 8001932:	2214      	movs	r2, #20
 8001934:	f016 fb3a 	bl	8017fac <write>
		write(fdout, next_line, 3);
 8001938:	4b07      	ldr	r3, [pc, #28]	; (8001958 <check_keyword+0x138>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	4908      	ldr	r1, [pc, #32]	; (8001960 <check_keyword+0x140>)
 8001940:	2203      	movs	r2, #3
 8001942:	f016 fb33 	bl	8017fac <write>
	}
}
 8001946:	3798      	adds	r7, #152	; 0x98
 8001948:	46bd      	mov	sp, r7
 800194a:	bdb0      	pop	{r4, r5, r7, pc}
 800194c:	200002d8 	.word	0x200002d8
 8001950:	200000d8 	.word	0x200000d8
 8001954:	08018718 	.word	0x08018718
 8001958:	200002dc 	.word	0x200002dc
 800195c:	0801a440 	.word	0x0801a440
 8001960:	20000030 	.word	0x20000030

08001964 <find_events>:

void find_events()
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b094      	sub	sp, #80	; 0x50
 8001968:	af00      	add	r7, sp, #0
	char buf[CMDBUF_SIZE];
	char *p = cmd[cur_his];
 800196a:	4b3b      	ldr	r3, [pc, #236]	; (8001a58 <find_events+0xf4>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	019a      	lsls	r2, r3, #6
 8001970:	4b3a      	ldr	r3, [pc, #232]	; (8001a5c <find_events+0xf8>)
 8001972:	4413      	add	r3, r2
 8001974:	64fb      	str	r3, [r7, #76]	; 0x4c
	char *q;
	int i;

	for (; *p; p++) {
 8001976:	e067      	b.n	8001a48 <find_events+0xe4>
		if (*p == '!') {
 8001978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b21      	cmp	r3, #33	; 0x21
 800197e:	d160      	bne.n	8001a42 <find_events+0xde>
			q = p;
 8001980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001982:	64bb      	str	r3, [r7, #72]	; 0x48
			while (*q && !isspace((int)*q))
 8001984:	e002      	b.n	800198c <find_events+0x28>
				q++;
 8001986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001988:	3301      	adds	r3, #1
 800198a:	64bb      	str	r3, [r7, #72]	; 0x48
	int i;

	for (; *p; p++) {
		if (*p == '!') {
			q = p;
			while (*q && !isspace((int)*q))
 800198c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d00a      	beq.n	80019aa <find_events+0x46>
 8001994:	4b32      	ldr	r3, [pc, #200]	; (8001a60 <find_events+0xfc>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	3301      	adds	r3, #1
 800199e:	4413      	add	r3, r2
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	f003 0308 	and.w	r3, r3, #8
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0ed      	beq.n	8001986 <find_events+0x22>
				q++;
			for (i = cur_his + HISTORY_COUNT - 1; i > cur_his; i--) {
 80019aa:	4b2b      	ldr	r3, [pc, #172]	; (8001a58 <find_events+0xf4>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	3307      	adds	r3, #7
 80019b0:	647b      	str	r3, [r7, #68]	; 0x44
 80019b2:	e041      	b.n	8001a38 <find_events+0xd4>
				if (!strncmp(cmd[i % HISTORY_COUNT], p + 1, q - p - 1)) {
 80019b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80019b6:	4b2b      	ldr	r3, [pc, #172]	; (8001a64 <find_events+0x100>)
 80019b8:	4013      	ands	r3, r2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	da03      	bge.n	80019c6 <find_events+0x62>
 80019be:	3b01      	subs	r3, #1
 80019c0:	f063 0307 	orn	r3, r3, #7
 80019c4:	3301      	adds	r3, #1
 80019c6:	019a      	lsls	r2, r3, #6
 80019c8:	4b24      	ldr	r3, [pc, #144]	; (8001a5c <find_events+0xf8>)
 80019ca:	18d1      	adds	r1, r2, r3
 80019cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80019d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019d4:	1ac3      	subs	r3, r0, r3
 80019d6:	3b01      	subs	r3, #1
 80019d8:	4608      	mov	r0, r1
 80019da:	4611      	mov	r1, r2
 80019dc:	461a      	mov	r2, r3
 80019de:	f003 f9d3 	bl	8004d88 <strncmp>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d124      	bne.n	8001a32 <find_events+0xce>
					strcpy(buf, q);
 80019e8:	1d3b      	adds	r3, r7, #4
 80019ea:	4618      	mov	r0, r3
 80019ec:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80019ee:	f016 fe35 	bl	801865c <strcpy>
					strcpy(p, cmd[i % HISTORY_COUNT]);
 80019f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80019f4:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <find_events+0x100>)
 80019f6:	4013      	ands	r3, r2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	da03      	bge.n	8001a04 <find_events+0xa0>
 80019fc:	3b01      	subs	r3, #1
 80019fe:	f063 0307 	orn	r3, r3, #7
 8001a02:	3301      	adds	r3, #1
 8001a04:	019a      	lsls	r2, r3, #6
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <find_events+0xf8>)
 8001a08:	4413      	add	r3, r2
 8001a0a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f016 fe25 	bl	801865c <strcpy>
					p += strlen(p);
 8001a12:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001a14:	f003 f9e4 	bl	8004de0 <strlen>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a1c:	4413      	add	r3, r2
 8001a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
					strcpy(p--, buf);
 8001a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a22:	1e5a      	subs	r2, r3, #1
 8001a24:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001a26:	1d3a      	adds	r2, r7, #4
 8001a28:	4618      	mov	r0, r3
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	f016 fe16 	bl	801865c <strcpy>
					break;
 8001a30:	e007      	b.n	8001a42 <find_events+0xde>
	for (; *p; p++) {
		if (*p == '!') {
			q = p;
			while (*q && !isspace((int)*q))
				q++;
			for (i = cur_his + HISTORY_COUNT - 1; i > cur_his; i--) {
 8001a32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a34:	3b01      	subs	r3, #1
 8001a36:	647b      	str	r3, [r7, #68]	; 0x44
 8001a38:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <find_events+0xf4>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	dcb8      	bgt.n	80019b4 <find_events+0x50>
	char buf[CMDBUF_SIZE];
	char *p = cmd[cur_his];
	char *q;
	int i;

	for (; *p; p++) {
 8001a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a44:	3301      	adds	r3, #1
 8001a46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d193      	bne.n	8001978 <find_events+0x14>
					break;
				}
			}
		}
	}
}
 8001a50:	3750      	adds	r7, #80	; 0x50
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	200002d8 	.word	0x200002d8
 8001a5c:	200000d8 	.word	0x200000d8
 8001a60:	200000d0 	.word	0x200000d0
 8001a64:	80000007 	.word	0x80000007

08001a68 <find_envvar>:

char *find_envvar(const char *name)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	int i;

	for (i = 0; i < env_count; i++) {
 8001a70:	2300      	movs	r3, #0
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	e01a      	b.n	8001aac <find_envvar+0x44>
		if (!strcmp(env_var[i].name, name))
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	011b      	lsls	r3, r3, #4
 8001a80:	4a0f      	ldr	r2, [pc, #60]	; (8001ac0 <find_envvar+0x58>)
 8001a82:	4413      	add	r3, r2
 8001a84:	4618      	mov	r0, r3
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	f003 f970 	bl	8004d6c <strcmp>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d109      	bne.n	8001aa6 <find_envvar+0x3e>
			return env_var[i].value;
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	4613      	mov	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	011b      	lsls	r3, r3, #4
 8001a9c:	f103 0210 	add.w	r2, r3, #16
 8001aa0:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <find_envvar+0x58>)
 8001aa2:	4413      	add	r3, r2
 8001aa4:	e008      	b.n	8001ab8 <find_envvar+0x50>

char *find_envvar(const char *name)
{
	int i;

	for (i = 0; i < env_count; i++) {
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <find_envvar+0x5c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	dbdf      	blt.n	8001a76 <find_envvar+0xe>
		if (!strcmp(env_var[i].name, name))
			return env_var[i].value;
	}

	return NULL;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	200002e8 	.word	0x200002e8
 8001ac4:	200007e8 	.word	0x200007e8

08001ac8 <fill_arg>:

/* Fill in entire value of argument. */
int fill_arg(char *const dest, const char *argv)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b088      	sub	sp, #32
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
	char env_name[MAX_ENVNAME + 1];
	char *buf = dest;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	61fb      	str	r3, [r7, #28]
	char *p = NULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61bb      	str	r3, [r7, #24]

	for (; *argv; argv++) {
 8001ada:	e04c      	b.n	8001b76 <fill_arg+0xae>
		if (isalnum((int)*argv) || *argv == '_') {
 8001adc:	4b3a      	ldr	r3, [pc, #232]	; (8001bc8 <fill_arg+0x100>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	4413      	add	r3, r2
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d103      	bne.n	8001afa <fill_arg+0x32>
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b5f      	cmp	r3, #95	; 0x5f
 8001af8:	d110      	bne.n	8001b1c <fill_arg+0x54>
			if (p)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d006      	beq.n	8001b0e <fill_arg+0x46>
				*p++ = *argv;
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	1c5a      	adds	r2, r3, #1
 8001b04:	61ba      	str	r2, [r7, #24]
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	7812      	ldrb	r2, [r2, #0]
 8001b0a:	701a      	strb	r2, [r3, #0]
	char *buf = dest;
	char *p = NULL;

	for (; *argv; argv++) {
		if (isalnum((int)*argv) || *argv == '_') {
			if (p)
 8001b0c:	e030      	b.n	8001b70 <fill_arg+0xa8>
				*p++ = *argv;
			else
				*buf++ = *argv;
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	1c5a      	adds	r2, r3, #1
 8001b12:	61fa      	str	r2, [r7, #28]
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	7812      	ldrb	r2, [r2, #0]
 8001b18:	701a      	strb	r2, [r3, #0]
	char *buf = dest;
	char *p = NULL;

	for (; *argv; argv++) {
		if (isalnum((int)*argv) || *argv == '_') {
			if (p)
 8001b1a:	e029      	b.n	8001b70 <fill_arg+0xa8>
				*p++ = *argv;
			else
				*buf++ = *argv;
		}
		else { /* Symbols. */
			if (p) {
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d018      	beq.n	8001b54 <fill_arg+0x8c>
				*p = '\0';
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]
				p = find_envvar(env_name);
 8001b28:	f107 0308 	add.w	r3, r7, #8
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff ff9b 	bl	8001a68 <find_envvar>
 8001b32:	61b8      	str	r0, [r7, #24]
				if (p) {
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00c      	beq.n	8001b54 <fill_arg+0x8c>
					strcpy(buf, p);
 8001b3a:	69f8      	ldr	r0, [r7, #28]
 8001b3c:	69b9      	ldr	r1, [r7, #24]
 8001b3e:	f016 fd8d 	bl	801865c <strcpy>
					buf += strlen(p);
 8001b42:	69b8      	ldr	r0, [r7, #24]
 8001b44:	f003 f94c 	bl	8004de0 <strlen>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	69fa      	ldr	r2, [r7, #28]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	61fb      	str	r3, [r7, #28]
					p = NULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61bb      	str	r3, [r7, #24]
				}
			}
			if (*argv == '$')
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b24      	cmp	r3, #36	; 0x24
 8001b5a:	d103      	bne.n	8001b64 <fill_arg+0x9c>
				p = env_name;
 8001b5c:	f107 0308 	add.w	r3, r7, #8
 8001b60:	61bb      	str	r3, [r7, #24]
 8001b62:	e005      	b.n	8001b70 <fill_arg+0xa8>
			else
				*buf++ = *argv;
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	1c5a      	adds	r2, r3, #1
 8001b68:	61fa      	str	r2, [r7, #28]
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	7812      	ldrb	r2, [r2, #0]
 8001b6e:	701a      	strb	r2, [r3, #0]
{
	char env_name[MAX_ENVNAME + 1];
	char *buf = dest;
	char *p = NULL;

	for (; *argv; argv++) {
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	3301      	adds	r3, #1
 8001b74:	603b      	str	r3, [r7, #0]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1ae      	bne.n	8001adc <fill_arg+0x14>
				p = env_name;
			else
				*buf++ = *argv;
		}
	}
	if (p) {
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d016      	beq.n	8001bb2 <fill_arg+0xea>
		*p = '\0';
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]
		p = find_envvar(env_name);
 8001b8a:	f107 0308 	add.w	r3, r7, #8
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff ff6a 	bl	8001a68 <find_envvar>
 8001b94:	61b8      	str	r0, [r7, #24]
		if (p) {
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d00a      	beq.n	8001bb2 <fill_arg+0xea>
			strcpy(buf, p);
 8001b9c:	69f8      	ldr	r0, [r7, #28]
 8001b9e:	69b9      	ldr	r1, [r7, #24]
 8001ba0:	f016 fd5c 	bl	801865c <strcpy>
			buf += strlen(p);
 8001ba4:	69b8      	ldr	r0, [r7, #24]
 8001ba6:	f003 f91b 	bl	8004de0 <strlen>
 8001baa:	4603      	mov	r3, r0
 8001bac:	69fa      	ldr	r2, [r7, #28]
 8001bae:	4413      	add	r3, r2
 8001bb0:	61fb      	str	r3, [r7, #28]
		}
	}
	*buf = '\0';
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	701a      	strb	r2, [r3, #0]

	return buf - dest;
 8001bb8:	69fa      	ldr	r2, [r7, #28]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	1ad3      	subs	r3, r2, r3
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3720      	adds	r7, #32
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	200000d0 	.word	0x200000d0

08001bcc <export_envvar>:

//export
void export_envvar(int argc, char *argv[])
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
	char *found;
	char *value;
	int i;

	for (i = 1; i < argc; i++) {
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	e056      	b.n	8001c8a <export_envvar+0xbe>
		value = argv[i];
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	4413      	add	r3, r2
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	617b      	str	r3, [r7, #20]
		while (*value && *value != '=')
 8001be8:	e002      	b.n	8001bf0 <export_envvar+0x24>
			value++;
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	3301      	adds	r3, #1
 8001bee:	617b      	str	r3, [r7, #20]
	char *value;
	int i;

	for (i = 1; i < argc; i++) {
		value = argv[i];
		while (*value && *value != '=')
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <export_envvar+0x34>
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b3d      	cmp	r3, #61	; 0x3d
 8001bfe:	d1f4      	bne.n	8001bea <export_envvar+0x1e>
			value++;
		if (*value)
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d004      	beq.n	8001c12 <export_envvar+0x46>
			*value++ = '\0';
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	1c5a      	adds	r2, r3, #1
 8001c0c:	617a      	str	r2, [r7, #20]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	701a      	strb	r2, [r3, #0]
		found = find_envvar(argv[i]);
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	4413      	add	r3, r2
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff ff23 	bl	8001a68 <find_envvar>
 8001c22:	60f8      	str	r0, [r7, #12]
		if (found)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d004      	beq.n	8001c34 <export_envvar+0x68>
			strcpy(found, value);
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	6979      	ldr	r1, [r7, #20]
 8001c2e:	f016 fd15 	bl	801865c <strcpy>
 8001c32:	e027      	b.n	8001c84 <export_envvar+0xb8>
		else if (env_count < MAX_ENVCOUNT) {
 8001c34:	4b18      	ldr	r3, [pc, #96]	; (8001c98 <export_envvar+0xcc>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2b0f      	cmp	r3, #15
 8001c3a:	dc23      	bgt.n	8001c84 <export_envvar+0xb8>
			strcpy(env_var[env_count].name, argv[i]);
 8001c3c:	4b16      	ldr	r3, [pc, #88]	; (8001c98 <export_envvar+0xcc>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4613      	mov	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	011b      	lsls	r3, r3, #4
 8001c48:	4a14      	ldr	r2, [pc, #80]	; (8001c9c <export_envvar+0xd0>)
 8001c4a:	441a      	add	r2, r3
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	6839      	ldr	r1, [r7, #0]
 8001c52:	440b      	add	r3, r1
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4610      	mov	r0, r2
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f016 fcff 	bl	801865c <strcpy>
			strcpy(env_var[env_count].value, value);
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <export_envvar+0xcc>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	4613      	mov	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	011b      	lsls	r3, r3, #4
 8001c6a:	f103 0210 	add.w	r2, r3, #16
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <export_envvar+0xd0>)
 8001c70:	4413      	add	r3, r2
 8001c72:	4618      	mov	r0, r3
 8001c74:	6979      	ldr	r1, [r7, #20]
 8001c76:	f016 fcf1 	bl	801865c <strcpy>
			env_count++;
 8001c7a:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <export_envvar+0xcc>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <export_envvar+0xcc>)
 8001c82:	601a      	str	r2, [r3, #0]
{
	char *found;
	char *value;
	int i;

	for (i = 1; i < argc; i++) {
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	3301      	adds	r3, #1
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	dba4      	blt.n	8001bdc <export_envvar+0x10>
			strcpy(env_var[env_count].name, argv[i]);
			strcpy(env_var[env_count].value, value);
			env_count++;
		}
	}
}
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	200007e8 	.word	0x200007e8
 8001c9c:	200002e8 	.word	0x200002e8

08001ca0 <show_task_info>:

//ps
void show_task_info(int argc, char* argv[])
{
 8001ca0:	b5b0      	push	{r4, r5, r7, lr}
 8001ca2:	b08c      	sub	sp, #48	; 0x30
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
	char ps_message[]="PID STATUS PRIORITY";
 8001caa:	4b3f      	ldr	r3, [pc, #252]	; (8001da8 <show_task_info+0x108>)
 8001cac:	f107 0414 	add.w	r4, r7, #20
 8001cb0:	461d      	mov	r5, r3
 8001cb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cb6:	682b      	ldr	r3, [r5, #0]
 8001cb8:	6023      	str	r3, [r4, #0]
	int ps_message_length = sizeof(ps_message);
 8001cba:	2314      	movs	r3, #20
 8001cbc:	62bb      	str	r3, [r7, #40]	; 0x28
	int task_i;

	write(fdout, &ps_message , ps_message_length);
 8001cbe:	4b3b      	ldr	r3, [pc, #236]	; (8001dac <show_task_info+0x10c>)
 8001cc0:	6819      	ldr	r1, [r3, #0]
 8001cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc4:	f107 0214 	add.w	r2, r7, #20
 8001cc8:	4608      	mov	r0, r1
 8001cca:	4611      	mov	r1, r2
 8001ccc:	461a      	mov	r2, r3
 8001cce:	f016 f96d 	bl	8017fac <write>
	write(fdout, &next_line , 3);
 8001cd2:	4b36      	ldr	r3, [pc, #216]	; (8001dac <show_task_info+0x10c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	4935      	ldr	r1, [pc, #212]	; (8001db0 <show_task_info+0x110>)
 8001cda:	2203      	movs	r2, #3
 8001cdc:	f016 f966 	bl	8017fac <write>

	for (task_i = 0; task_i < task_count; task_i++) {
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ce4:	e058      	b.n	8001d98 <show_task_info+0xf8>
		char task_info_pid[2];
		char task_info_status[2];
		char task_info_priority[3];

		task_info_pid[0]='0'+tasks[task_i].pid;
 8001ce6:	4933      	ldr	r1, [pc, #204]	; (8001db4 <show_task_info+0x114>)
 8001ce8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cea:	4613      	mov	r3, r2
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	4413      	add	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	440b      	add	r3, r1
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	3330      	adds	r3, #48	; 0x30
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	743b      	strb	r3, [r7, #16]
		task_info_pid[1]='\0';
 8001d00:	2300      	movs	r3, #0
 8001d02:	747b      	strb	r3, [r7, #17]
		task_info_status[0]='0'+tasks[task_i].status;
 8001d04:	492b      	ldr	r1, [pc, #172]	; (8001db4 <show_task_info+0x114>)
 8001d06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d08:	4613      	mov	r3, r2
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	4413      	add	r3, r2
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	440b      	add	r3, r1
 8001d12:	3308      	adds	r3, #8
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	3330      	adds	r3, #48	; 0x30
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	733b      	strb	r3, [r7, #12]
		task_info_status[1]='\0';			
 8001d1e:	2300      	movs	r3, #0
 8001d20:	737b      	strb	r3, [r7, #13]

		itoa(tasks[task_i].priority, task_info_priority, 10);
 8001d22:	4924      	ldr	r1, [pc, #144]	; (8001db4 <show_task_info+0x114>)
 8001d24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d26:	4613      	mov	r3, r2
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	4413      	add	r3, r2
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	440b      	add	r3, r1
 8001d30:	330c      	adds	r3, #12
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	f107 0308 	add.w	r3, r7, #8
 8001d38:	4610      	mov	r0, r2
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	220a      	movs	r2, #10
 8001d3e:	f000 f83d 	bl	8001dbc <itoa>

		write(fdout, &task_info_pid , 2);
 8001d42:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <show_task_info+0x10c>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	f107 0310 	add.w	r3, r7, #16
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	2202      	movs	r2, #2
 8001d50:	f016 f92c 	bl	8017fac <write>
		write_blank(3);
 8001d54:	2003      	movs	r0, #3
 8001d56:	f000 fa55 	bl	8002204 <write_blank>
			write(fdout, &task_info_status , 2);
 8001d5a:	4b14      	ldr	r3, [pc, #80]	; (8001dac <show_task_info+0x10c>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	f107 030c 	add.w	r3, r7, #12
 8001d62:	4610      	mov	r0, r2
 8001d64:	4619      	mov	r1, r3
 8001d66:	2202      	movs	r2, #2
 8001d68:	f016 f920 	bl	8017fac <write>
		write_blank(5);
 8001d6c:	2005      	movs	r0, #5
 8001d6e:	f000 fa49 	bl	8002204 <write_blank>
		write(fdout, &task_info_priority , 3);
 8001d72:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <show_task_info+0x10c>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	f107 0308 	add.w	r3, r7, #8
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	2203      	movs	r2, #3
 8001d80:	f016 f914 	bl	8017fac <write>

		write(fdout, &next_line , 3);
 8001d84:	4b09      	ldr	r3, [pc, #36]	; (8001dac <show_task_info+0x10c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	4909      	ldr	r1, [pc, #36]	; (8001db0 <show_task_info+0x110>)
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	f016 f90d 	bl	8017fac <write>
	int task_i;

	write(fdout, &ps_message , ps_message_length);
	write(fdout, &next_line , 3);

	for (task_i = 0; task_i < task_count; task_i++) {
 8001d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d94:	3301      	adds	r3, #1
 8001d96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d9a:	4b07      	ldr	r3, [pc, #28]	; (8001db8 <show_task_info+0x118>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d3a1      	bcc.n	8001ce6 <show_task_info+0x46>
		write_blank(5);
		write(fdout, &task_info_priority , 3);

		write(fdout, &next_line , 3);
	}
}
 8001da2:	3730      	adds	r7, #48	; 0x30
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bdb0      	pop	{r4, r5, r7, pc}
 8001da8:	0801a454 	.word	0x0801a454
 8001dac:	200002dc 	.word	0x200002dc
 8001db0:	20000030 	.word	0x20000030
 8001db4:	200007ec 	.word	0x200007ec
 8001db8:	200000d4 	.word	0x200000d4

08001dbc <itoa>:

//this function helps to show int

void itoa(int n, char *dst, int base)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b090      	sub	sp, #64	; 0x40
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
	char buf[33] = {0};
 8001dc8:	f107 0314 	add.w	r3, r7, #20
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	3304      	adds	r3, #4
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	3304      	adds	r3, #4
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	3304      	adds	r3, #4
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	3304      	adds	r3, #4
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	3304      	adds	r3, #4
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	3304      	adds	r3, #4
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	701a      	strb	r2, [r3, #0]
 8001e00:	3301      	adds	r3, #1
	char *p = &buf[32];
 8001e02:	f107 0314 	add.w	r3, r7, #20
 8001e06:	3320      	adds	r3, #32
 8001e08:	63fb      	str	r3, [r7, #60]	; 0x3c

	if (n == 0)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d106      	bne.n	8001e1e <itoa+0x62>
		*--p = '0';
 8001e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e12:	3b01      	subs	r3, #1
 8001e14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e18:	2230      	movs	r2, #48	; 0x30
 8001e1a:	701a      	strb	r2, [r3, #0]
 8001e1c:	e024      	b.n	8001e68 <itoa+0xac>
	else {
		unsigned int num = (base == 10 && num < 0) ? -n : n;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	63bb      	str	r3, [r7, #56]	; 0x38

		for (; num; num/=base)
 8001e22:	e012      	b.n	8001e4a <itoa+0x8e>
			*--p = "0123456789ABCDEF" [num % base];
 8001e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e26:	3b01      	subs	r3, #1
 8001e28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e2e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001e32:	fb02 f201 	mul.w	r2, r2, r1
 8001e36:	1a9b      	subs	r3, r3, r2
 8001e38:	4a0f      	ldr	r2, [pc, #60]	; (8001e78 <itoa+0xbc>)
 8001e3a:	5cd2      	ldrb	r2, [r2, r3]
 8001e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e3e:	701a      	strb	r2, [r3, #0]
	if (n == 0)
		*--p = '0';
	else {
		unsigned int num = (base == 10 && num < 0) ? -n : n;

		for (; num; num/=base)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e48:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1e9      	bne.n	8001e24 <itoa+0x68>
			*--p = "0123456789ABCDEF" [num % base];
		if (base == 10 && n < 0)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b0a      	cmp	r3, #10
 8001e54:	d108      	bne.n	8001e68 <itoa+0xac>
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	da05      	bge.n	8001e68 <itoa+0xac>
			*--p = '-';
 8001e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e64:	222d      	movs	r2, #45	; 0x2d
 8001e66:	701a      	strb	r2, [r3, #0]
	}

	strcpy(dst, p);
 8001e68:	68b8      	ldr	r0, [r7, #8]
 8001e6a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001e6c:	f016 fbf6 	bl	801865c <strcpy>
}
 8001e70:	3740      	adds	r7, #64	; 0x40
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	0801a468 	.word	0x0801a468

08001e7c <show_cmd_info>:

//help

void show_cmd_info(int argc, char* argv[])
{
 8001e7c:	b5b0      	push	{r4, r5, r7, lr}
 8001e7e:	b08e      	sub	sp, #56	; 0x38
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
	const char help_desp[] = "This system has commands as follow\n\r\0";
 8001e86:	4b34      	ldr	r3, [pc, #208]	; (8001f58 <show_cmd_info+0xdc>)
 8001e88:	f107 040c 	add.w	r4, r7, #12
 8001e8c:	461d      	mov	r5, r3
 8001e8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e96:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e9a:	6020      	str	r0, [r4, #0]
 8001e9c:	3404      	adds	r4, #4
 8001e9e:	8021      	strh	r1, [r4, #0]
	int i;

	write(fdout, &help_desp, sizeof(help_desp));
 8001ea0:	4b2e      	ldr	r3, [pc, #184]	; (8001f5c <show_cmd_info+0xe0>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	f107 030c 	add.w	r3, r7, #12
 8001ea8:	4610      	mov	r0, r2
 8001eaa:	4619      	mov	r1, r3
 8001eac:	2226      	movs	r2, #38	; 0x26
 8001eae:	f016 f87d 	bl	8017fac <write>
	for (i = 0; i < CMD_COUNT; i++) {
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	637b      	str	r3, [r7, #52]	; 0x34
 8001eb6:	e048      	b.n	8001f4a <show_cmd_info+0xce>
		write(fdout, cmd_data[i].cmd, strlen(cmd_data[i].cmd) + 1);
 8001eb8:	4b28      	ldr	r3, [pc, #160]	; (8001f5c <show_cmd_info+0xe0>)
 8001eba:	681d      	ldr	r5, [r3, #0]
 8001ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ebe:	f44f 6283 	mov.w	r2, #1048	; 0x418
 8001ec2:	fb02 f203 	mul.w	r2, r2, r3
 8001ec6:	4b26      	ldr	r3, [pc, #152]	; (8001f60 <show_cmd_info+0xe4>)
 8001ec8:	18d4      	adds	r4, r2, r3
 8001eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ecc:	f44f 6283 	mov.w	r2, #1048	; 0x418
 8001ed0:	fb02 f203 	mul.w	r2, r2, r3
 8001ed4:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <show_cmd_info+0xe4>)
 8001ed6:	4413      	add	r3, r2
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f002 ff81 	bl	8004de0 <strlen>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	4628      	mov	r0, r5
 8001ee4:	4621      	mov	r1, r4
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	f016 f860 	bl	8017fac <write>
		write(fdout, ": ", 3);
 8001eec:	4b1b      	ldr	r3, [pc, #108]	; (8001f5c <show_cmd_info+0xe0>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	491c      	ldr	r1, [pc, #112]	; (8001f64 <show_cmd_info+0xe8>)
 8001ef4:	2203      	movs	r2, #3
 8001ef6:	f016 f859 	bl	8017fac <write>
		write(fdout, cmd_data[i].description, strlen(cmd_data[i].description) + 1);
 8001efa:	4b18      	ldr	r3, [pc, #96]	; (8001f5c <show_cmd_info+0xe0>)
 8001efc:	681d      	ldr	r5, [r3, #0]
 8001efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f00:	f44f 6283 	mov.w	r2, #1048	; 0x418
 8001f04:	fb02 f303 	mul.w	r3, r2, r3
 8001f08:	f103 0218 	add.w	r2, r3, #24
 8001f0c:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <show_cmd_info+0xe4>)
 8001f0e:	18d4      	adds	r4, r2, r3
 8001f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f12:	f44f 6283 	mov.w	r2, #1048	; 0x418
 8001f16:	fb02 f303 	mul.w	r3, r2, r3
 8001f1a:	f103 0218 	add.w	r2, r3, #24
 8001f1e:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <show_cmd_info+0xe4>)
 8001f20:	4413      	add	r3, r2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f002 ff5c 	bl	8004de0 <strlen>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	4628      	mov	r0, r5
 8001f2e:	4621      	mov	r1, r4
 8001f30:	461a      	mov	r2, r3
 8001f32:	f016 f83b 	bl	8017fac <write>
		write(fdout, next_line, 3);
 8001f36:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <show_cmd_info+0xe0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	490a      	ldr	r1, [pc, #40]	; (8001f68 <show_cmd_info+0xec>)
 8001f3e:	2203      	movs	r2, #3
 8001f40:	f016 f834 	bl	8017fac <write>
{
	const char help_desp[] = "This system has commands as follow\n\r\0";
	int i;

	write(fdout, &help_desp, sizeof(help_desp));
	for (i = 0; i < CMD_COUNT; i++) {
 8001f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f46:	3301      	adds	r3, #1
 8001f48:	637b      	str	r3, [r7, #52]	; 0x34
 8001f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f4c:	2b06      	cmp	r3, #6
 8001f4e:	ddb3      	ble.n	8001eb8 <show_cmd_info+0x3c>
		write(fdout, cmd_data[i].cmd, strlen(cmd_data[i].cmd) + 1);
		write(fdout, ": ", 3);
		write(fdout, cmd_data[i].description, strlen(cmd_data[i].description) + 1);
		write(fdout, next_line, 3);
	}
}
 8001f50:	3738      	adds	r7, #56	; 0x38
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bdb0      	pop	{r4, r5, r7, pc}
 8001f56:	bf00      	nop
 8001f58:	0801a480 	.word	0x0801a480
 8001f5c:	200002dc 	.word	0x200002dc
 8001f60:	08018718 	.word	0x08018718
 8001f64:	0801a47c 	.word	0x0801a47c
 8001f68:	20000030 	.word	0x20000030

08001f6c <show_echo>:

//echo
void show_echo(int argc, char* argv[])
{
 8001f6c:	b5b0      	push	{r4, r5, r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
	const int _n = 1; /* Flag for "-n" option. */
 8001f76:	2301      	movs	r3, #1
 8001f78:	60fb      	str	r3, [r7, #12]
	int flag = 0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	617b      	str	r3, [r7, #20]
	int i;

	for (i = 1; i < argc; i++) {
 8001f7e:	2301      	movs	r3, #1
 8001f80:	613b      	str	r3, [r7, #16]
 8001f82:	e014      	b.n	8001fae <show_echo+0x42>
		if (!strcmp(argv[i], "-n"))
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	4926      	ldr	r1, [pc, #152]	; (800202c <show_echo+0xc0>)
 8001f92:	f002 feeb 	bl	8004d6c <strcmp>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d107      	bne.n	8001fac <show_echo+0x40>
			flag |= _n;
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	617b      	str	r3, [r7, #20]
{
	const int _n = 1; /* Flag for "-n" option. */
	int flag = 0;
	int i;

	for (i = 1; i < argc; i++) {
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	e000      	b.n	8001fae <show_echo+0x42>
		if (!strcmp(argv[i], "-n"))
			flag |= _n;
		else
			break;
 8001fac:	e003      	b.n	8001fb6 <show_echo+0x4a>
{
	const int _n = 1; /* Flag for "-n" option. */
	int flag = 0;
	int i;

	for (i = 1; i < argc; i++) {
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	dbe6      	blt.n	8001f84 <show_echo+0x18>
			flag |= _n;
		else
			break;
	}

	for (; i < argc; i++) {
 8001fb6:	e024      	b.n	8002002 <show_echo+0x96>
		write(fdout, argv[i], strlen(argv[i]) + 1);
 8001fb8:	4b1d      	ldr	r3, [pc, #116]	; (8002030 <show_echo+0xc4>)
 8001fba:	681d      	ldr	r5, [r3, #0]
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	681c      	ldr	r4, [r3, #0]
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	4413      	add	r3, r2
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f002 ff05 	bl	8004de0 <strlen>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	3301      	adds	r3, #1
 8001fda:	4628      	mov	r0, r5
 8001fdc:	4621      	mov	r1, r4
 8001fde:	461a      	mov	r2, r3
 8001fe0:	f015 ffe4 	bl	8017fac <write>
		if (i < argc - 1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	1e5a      	subs	r2, r3, #1
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	dd06      	ble.n	8001ffc <show_echo+0x90>
			write(fdout, " ", 2);
 8001fee:	4b10      	ldr	r3, [pc, #64]	; (8002030 <show_echo+0xc4>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	490f      	ldr	r1, [pc, #60]	; (8002034 <show_echo+0xc8>)
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	f015 ffd8 	bl	8017fac <write>
			flag |= _n;
		else
			break;
	}

	for (; i < argc; i++) {
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	3301      	adds	r3, #1
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	429a      	cmp	r2, r3
 8002008:	dbd6      	blt.n	8001fb8 <show_echo+0x4c>
		write(fdout, argv[i], strlen(argv[i]) + 1);
		if (i < argc - 1)
			write(fdout, " ", 2);
	}

	if (~flag & _n)
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	43da      	mvns	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	4013      	ands	r3, r2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d006      	beq.n	8002024 <show_echo+0xb8>
		write(fdout, next_line, 3);
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <show_echo+0xc4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	4906      	ldr	r1, [pc, #24]	; (8002038 <show_echo+0xcc>)
 800201e:	2203      	movs	r2, #3
 8002020:	f015 ffc4 	bl	8017fac <write>
}
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bdb0      	pop	{r4, r5, r7, pc}
 800202a:	bf00      	nop
 800202c:	0801a4a8 	.word	0x0801a4a8
 8002030:	200002dc 	.word	0x200002dc
 8002034:	0801a4ac 	.word	0x0801a4ac
 8002038:	20000030 	.word	0x20000030

0800203c <show_man_page>:

//man
void show_man_page(int argc, char *argv[])
{
 800203c:	b5b0      	push	{r4, r5, r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
	int i;

	if (argc < 2)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b01      	cmp	r3, #1
 800204a:	dc00      	bgt.n	800204e <show_man_page+0x12>
		return;
 800204c:	e071      	b.n	8002132 <show_man_page+0xf6>

	for (i = 0; i < CMD_COUNT && strcmp(cmd_data[i].cmd, argv[1]); i++)
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	e002      	b.n	800205a <show_man_page+0x1e>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	3301      	adds	r3, #1
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2b06      	cmp	r3, #6
 800205e:	dc10      	bgt.n	8002082 <show_man_page+0x46>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f44f 6283 	mov.w	r2, #1048	; 0x418
 8002066:	fb02 f203 	mul.w	r2, r2, r3
 800206a:	4b33      	ldr	r3, [pc, #204]	; (8002138 <show_man_page+0xfc>)
 800206c:	441a      	add	r2, r3
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	3304      	adds	r3, #4
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4610      	mov	r0, r2
 8002076:	4619      	mov	r1, r3
 8002078:	f002 fe78 	bl	8004d6c <strcmp>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1e8      	bne.n	8002054 <show_man_page+0x18>
		;

	if (i >= CMD_COUNT)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2b06      	cmp	r3, #6
 8002086:	dd00      	ble.n	800208a <show_man_page+0x4e>
		return;
 8002088:	e053      	b.n	8002132 <show_man_page+0xf6>

	write(fdout, "NAME: ", 7);
 800208a:	4b2c      	ldr	r3, [pc, #176]	; (800213c <show_man_page+0x100>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	492b      	ldr	r1, [pc, #172]	; (8002140 <show_man_page+0x104>)
 8002092:	2207      	movs	r2, #7
 8002094:	f015 ff8a 	bl	8017fac <write>
	write(fdout, cmd_data[i].cmd, strlen(cmd_data[i].cmd) + 1);
 8002098:	4b28      	ldr	r3, [pc, #160]	; (800213c <show_man_page+0x100>)
 800209a:	681d      	ldr	r5, [r3, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f44f 6283 	mov.w	r2, #1048	; 0x418
 80020a2:	fb02 f203 	mul.w	r2, r2, r3
 80020a6:	4b24      	ldr	r3, [pc, #144]	; (8002138 <show_man_page+0xfc>)
 80020a8:	18d4      	adds	r4, r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f44f 6283 	mov.w	r2, #1048	; 0x418
 80020b0:	fb02 f203 	mul.w	r2, r2, r3
 80020b4:	4b20      	ldr	r3, [pc, #128]	; (8002138 <show_man_page+0xfc>)
 80020b6:	4413      	add	r3, r2
 80020b8:	4618      	mov	r0, r3
 80020ba:	f002 fe91 	bl	8004de0 <strlen>
 80020be:	4603      	mov	r3, r0
 80020c0:	3301      	adds	r3, #1
 80020c2:	4628      	mov	r0, r5
 80020c4:	4621      	mov	r1, r4
 80020c6:	461a      	mov	r2, r3
 80020c8:	f015 ff70 	bl	8017fac <write>
	write(fdout, next_line, 3);
 80020cc:	4b1b      	ldr	r3, [pc, #108]	; (800213c <show_man_page+0x100>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	491c      	ldr	r1, [pc, #112]	; (8002144 <show_man_page+0x108>)
 80020d4:	2203      	movs	r2, #3
 80020d6:	f015 ff69 	bl	8017fac <write>
	write(fdout, "DESCRIPTION: ", 14);
 80020da:	4b18      	ldr	r3, [pc, #96]	; (800213c <show_man_page+0x100>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	4919      	ldr	r1, [pc, #100]	; (8002148 <show_man_page+0x10c>)
 80020e2:	220e      	movs	r2, #14
 80020e4:	f015 ff62 	bl	8017fac <write>
	write(fdout, cmd_data[i].description, strlen(cmd_data[i].description) + 1);
 80020e8:	4b14      	ldr	r3, [pc, #80]	; (800213c <show_man_page+0x100>)
 80020ea:	681d      	ldr	r5, [r3, #0]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f44f 6283 	mov.w	r2, #1048	; 0x418
 80020f2:	fb02 f303 	mul.w	r3, r2, r3
 80020f6:	f103 0218 	add.w	r2, r3, #24
 80020fa:	4b0f      	ldr	r3, [pc, #60]	; (8002138 <show_man_page+0xfc>)
 80020fc:	18d4      	adds	r4, r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f44f 6283 	mov.w	r2, #1048	; 0x418
 8002104:	fb02 f303 	mul.w	r3, r2, r3
 8002108:	f103 0218 	add.w	r2, r3, #24
 800210c:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <show_man_page+0xfc>)
 800210e:	4413      	add	r3, r2
 8002110:	4618      	mov	r0, r3
 8002112:	f002 fe65 	bl	8004de0 <strlen>
 8002116:	4603      	mov	r3, r0
 8002118:	3301      	adds	r3, #1
 800211a:	4628      	mov	r0, r5
 800211c:	4621      	mov	r1, r4
 800211e:	461a      	mov	r2, r3
 8002120:	f015 ff44 	bl	8017fac <write>
	write(fdout, next_line, 3);
 8002124:	4b05      	ldr	r3, [pc, #20]	; (800213c <show_man_page+0x100>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	4906      	ldr	r1, [pc, #24]	; (8002144 <show_man_page+0x108>)
 800212c:	2203      	movs	r2, #3
 800212e:	f015 ff3d 	bl	8017fac <write>
}
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bdb0      	pop	{r4, r5, r7, pc}
 8002138:	08018718 	.word	0x08018718
 800213c:	200002dc 	.word	0x200002dc
 8002140:	0801a4b0 	.word	0x0801a4b0
 8002144:	20000030 	.word	0x20000030
 8002148:	0801a4b8 	.word	0x0801a4b8

0800214c <show_history>:

void show_history(int argc, char *argv[])
{
 800214c:	b5b0      	push	{r4, r5, r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
	int i;

	for (i = cur_his + 1; i <= cur_his + HISTORY_COUNT; i++) {
 8002156:	4b26      	ldr	r3, [pc, #152]	; (80021f0 <show_history+0xa4>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	3301      	adds	r3, #1
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	e03c      	b.n	80021da <show_history+0x8e>
		if (cmd[i % HISTORY_COUNT][0]) {
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	4b24      	ldr	r3, [pc, #144]	; (80021f4 <show_history+0xa8>)
 8002164:	4013      	ands	r3, r2
 8002166:	2b00      	cmp	r3, #0
 8002168:	da03      	bge.n	8002172 <show_history+0x26>
 800216a:	3b01      	subs	r3, #1
 800216c:	f063 0307 	orn	r3, r3, #7
 8002170:	3301      	adds	r3, #1
 8002172:	4a21      	ldr	r2, [pc, #132]	; (80021f8 <show_history+0xac>)
 8002174:	019b      	lsls	r3, r3, #6
 8002176:	4413      	add	r3, r2
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d02a      	beq.n	80021d4 <show_history+0x88>
			write(fdout, cmd[i % HISTORY_COUNT], strlen(cmd[i % HISTORY_COUNT]) + 1);
 800217e:	4b1f      	ldr	r3, [pc, #124]	; (80021fc <show_history+0xb0>)
 8002180:	681d      	ldr	r5, [r3, #0]
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	4b1b      	ldr	r3, [pc, #108]	; (80021f4 <show_history+0xa8>)
 8002186:	4013      	ands	r3, r2
 8002188:	2b00      	cmp	r3, #0
 800218a:	da03      	bge.n	8002194 <show_history+0x48>
 800218c:	3b01      	subs	r3, #1
 800218e:	f063 0307 	orn	r3, r3, #7
 8002192:	3301      	adds	r3, #1
 8002194:	019a      	lsls	r2, r3, #6
 8002196:	4b18      	ldr	r3, [pc, #96]	; (80021f8 <show_history+0xac>)
 8002198:	18d4      	adds	r4, r2, r3
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <show_history+0xa8>)
 800219e:	4013      	ands	r3, r2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	da03      	bge.n	80021ac <show_history+0x60>
 80021a4:	3b01      	subs	r3, #1
 80021a6:	f063 0307 	orn	r3, r3, #7
 80021aa:	3301      	adds	r3, #1
 80021ac:	019a      	lsls	r2, r3, #6
 80021ae:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <show_history+0xac>)
 80021b0:	4413      	add	r3, r2
 80021b2:	4618      	mov	r0, r3
 80021b4:	f002 fe14 	bl	8004de0 <strlen>
 80021b8:	4603      	mov	r3, r0
 80021ba:	3301      	adds	r3, #1
 80021bc:	4628      	mov	r0, r5
 80021be:	4621      	mov	r1, r4
 80021c0:	461a      	mov	r2, r3
 80021c2:	f015 fef3 	bl	8017fac <write>
			write(fdout, next_line, 3);
 80021c6:	4b0d      	ldr	r3, [pc, #52]	; (80021fc <show_history+0xb0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	490c      	ldr	r1, [pc, #48]	; (8002200 <show_history+0xb4>)
 80021ce:	2203      	movs	r2, #3
 80021d0:	f015 feec 	bl	8017fac <write>

void show_history(int argc, char *argv[])
{
	int i;

	for (i = cur_his + 1; i <= cur_his + HISTORY_COUNT; i++) {
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	3301      	adds	r3, #1
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <show_history+0xa4>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f103 0208 	add.w	r2, r3, #8
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	dabb      	bge.n	8002160 <show_history+0x14>
		if (cmd[i % HISTORY_COUNT][0]) {
			write(fdout, cmd[i % HISTORY_COUNT], strlen(cmd[i % HISTORY_COUNT]) + 1);
			write(fdout, next_line, 3);
		}
	}
}
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bdb0      	pop	{r4, r5, r7, pc}
 80021ee:	bf00      	nop
 80021f0:	200002d8 	.word	0x200002d8
 80021f4:	80000007 	.word	0x80000007
 80021f8:	200000d8 	.word	0x200000d8
 80021fc:	200002dc 	.word	0x200002dc
 8002200:	20000030 	.word	0x20000030

08002204 <write_blank>:

void write_blank(int blank_num)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
	char blank[] = " ";
 800220c:	2320      	movs	r3, #32
 800220e:	813b      	strh	r3, [r7, #8]
	int blank_count = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	60fb      	str	r3, [r7, #12]

	while (blank_count <= blank_num) {
 8002214:	e00b      	b.n	800222e <write_blank+0x2a>
		write(fdout, blank, sizeof(blank));
 8002216:	4b09      	ldr	r3, [pc, #36]	; (800223c <write_blank+0x38>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	f107 0308 	add.w	r3, r7, #8
 800221e:	4610      	mov	r0, r2
 8002220:	4619      	mov	r1, r3
 8002222:	2202      	movs	r2, #2
 8002224:	f015 fec2 	bl	8017fac <write>
		blank_count++;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	3301      	adds	r3, #1
 800222c:	60fb      	str	r3, [r7, #12]
void write_blank(int blank_num)
{
	char blank[] = " ";
	int blank_count = 0;

	while (blank_count <= blank_num) {
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	429a      	cmp	r2, r3
 8002234:	ddef      	ble.n	8002216 <write_blank+0x12>
		write(fdout, blank, sizeof(blank));
		blank_count++;
	}
}
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	200002dc 	.word	0x200002dc

08002240 <hexof>:

char hexof(int dec)
{
 8002240:	b4b0      	push	{r4, r5, r7}
 8002242:	b089      	sub	sp, #36	; 0x24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
    const char hextab[] = "0123456789abcdef";
 8002248:	4b0c      	ldr	r3, [pc, #48]	; (800227c <hexof+0x3c>)
 800224a:	f107 040c 	add.w	r4, r7, #12
 800224e:	461d      	mov	r5, r3
 8002250:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002254:	682b      	ldr	r3, [r5, #0]
 8002256:	7023      	strb	r3, [r4, #0]

    if (dec < 0 || dec > 15)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	db02      	blt.n	8002264 <hexof+0x24>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b0f      	cmp	r3, #15
 8002262:	dd01      	ble.n	8002268 <hexof+0x28>
        return -1;
 8002264:	23ff      	movs	r3, #255	; 0xff
 8002266:	e004      	b.n	8002272 <hexof+0x32>

    return hextab[dec];
 8002268:	f107 020c 	add.w	r2, r7, #12
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4413      	add	r3, r2
 8002270:	781b      	ldrb	r3, [r3, #0]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3724      	adds	r7, #36	; 0x24
 8002276:	46bd      	mov	sp, r7
 8002278:	bcb0      	pop	{r4, r5, r7}
 800227a:	4770      	bx	lr
 800227c:	0801a4c8 	.word	0x0801a4c8

08002280 <char_filter>:

char char_filter(char c, char fallback)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	71fa      	strb	r2, [r7, #7]
 800228c:	71bb      	strb	r3, [r7, #6]
    if (c < 0x20 || c > 0x7E)
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	2b1f      	cmp	r3, #31
 8002292:	d902      	bls.n	800229a <char_filter+0x1a>
 8002294:	79fb      	ldrb	r3, [r7, #7]
 8002296:	2b7e      	cmp	r3, #126	; 0x7e
 8002298:	d901      	bls.n	800229e <char_filter+0x1e>
        return fallback;
 800229a:	79bb      	ldrb	r3, [r7, #6]
 800229c:	e000      	b.n	80022a0 <char_filter+0x20>

    return c;
 800229e:	79fb      	ldrb	r3, [r7, #7]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <show_xxd>:

#define XXD_WIDTH 0x10

//xxd
void show_xxd(int argc, char *argv[])
{
 80022ac:	b5b0      	push	{r4, r5, r7, lr}
 80022ae:	b08c      	sub	sp, #48	; 0x30
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
    int readfd = -1;
 80022b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    char buf[XXD_WIDTH];
    char ch;
    char chout[2] = {0};
 80022bc:	2300      	movs	r3, #0
 80022be:	81bb      	strh	r3, [r7, #12]
    int pos = 0;
 80022c0:	2300      	movs	r3, #0
 80022c2:	62bb      	str	r3, [r7, #40]	; 0x28
    int size;
    int i;

    if (argc == 1) { /* fallback to stdin */
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d103      	bne.n	80022d2 <show_xxd+0x26>
        readfd = fdin;
 80022ca:	4ba3      	ldr	r3, [pc, #652]	; (8002558 <show_xxd+0x2ac>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022d0:	e02b      	b.n	800232a <show_xxd+0x7e>
    }
    else { /* open file of argv[1] */
        readfd = open(argv[1], 0);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	3304      	adds	r3, #4
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	2100      	movs	r1, #0
 80022dc:	f7fe fdda 	bl	8000e94 <open>
 80022e0:	62f8      	str	r0, [r7, #44]	; 0x2c

        if (readfd < 0) { /* Open error */
 80022e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	da20      	bge.n	800232a <show_xxd+0x7e>
            write(fdout, "xxd: ", 6);
 80022e8:	4b9c      	ldr	r3, [pc, #624]	; (800255c <show_xxd+0x2b0>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	499c      	ldr	r1, [pc, #624]	; (8002560 <show_xxd+0x2b4>)
 80022f0:	2206      	movs	r2, #6
 80022f2:	f015 fe5b 	bl	8017fac <write>
            write(fdout, argv[1], strlen(argv[1]) + 1);
 80022f6:	4b99      	ldr	r3, [pc, #612]	; (800255c <show_xxd+0x2b0>)
 80022f8:	681d      	ldr	r5, [r3, #0]
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	3304      	adds	r3, #4
 80022fe:	681c      	ldr	r4, [r3, #0]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	3304      	adds	r3, #4
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f002 fd6a 	bl	8004de0 <strlen>
 800230c:	4603      	mov	r3, r0
 800230e:	3301      	adds	r3, #1
 8002310:	4628      	mov	r0, r5
 8002312:	4621      	mov	r1, r4
 8002314:	461a      	mov	r2, r3
 8002316:	f015 fe49 	bl	8017fac <write>
            write(fdout, ": No such file or directory\r\n", 31);
 800231a:	4b90      	ldr	r3, [pc, #576]	; (800255c <show_xxd+0x2b0>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	4990      	ldr	r1, [pc, #576]	; (8002564 <show_xxd+0x2b8>)
 8002322:	221f      	movs	r2, #31
 8002324:	f015 fe42 	bl	8017fac <write>
 8002328:	e112      	b.n	8002550 <show_xxd+0x2a4>
            return;
        }
    }

    lseek(readfd, 0, SEEK_SET);
 800232a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800232c:	2100      	movs	r1, #0
 800232e:	2201      	movs	r2, #1
 8002330:	f015 fe6d 	bl	801800e <lseek>
    while ((size = read(readfd, &ch, sizeof(ch))) && size != -1) {
 8002334:	e09e      	b.n	8002474 <show_xxd+0x1c8>
        if (ch != -1 && ch != 0x04) { /* has something read */
 8002336:	7bfb      	ldrb	r3, [r7, #15]
 8002338:	2b04      	cmp	r3, #4
 800233a:	f000 809a 	beq.w	8002472 <show_xxd+0x1c6>

            if (pos % XXD_WIDTH == 0) { /* new line, print address */
 800233e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002340:	f003 030f 	and.w	r3, r3, #15
 8002344:	2b00      	cmp	r3, #0
 8002346:	d123      	bne.n	8002390 <show_xxd+0xe4>
                for (i = sizeof(pos) * 8 - 4; i >= 0; i -= 4) {
 8002348:	231c      	movs	r3, #28
 800234a:	627b      	str	r3, [r7, #36]	; 0x24
 800234c:	e016      	b.n	800237c <show_xxd+0xd0>
                    chout[0] = hexof((pos >> i) & 0xF);
 800234e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002352:	fa42 f303 	asr.w	r3, r2, r3
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff ff70 	bl	8002240 <hexof>
 8002360:	4603      	mov	r3, r0
 8002362:	733b      	strb	r3, [r7, #12]
                    write(fdout, chout, 2);
 8002364:	4b7d      	ldr	r3, [pc, #500]	; (800255c <show_xxd+0x2b0>)
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	f107 030c 	add.w	r3, r7, #12
 800236c:	4610      	mov	r0, r2
 800236e:	4619      	mov	r1, r3
 8002370:	2202      	movs	r2, #2
 8002372:	f015 fe1b 	bl	8017fac <write>
    lseek(readfd, 0, SEEK_SET);
    while ((size = read(readfd, &ch, sizeof(ch))) && size != -1) {
        if (ch != -1 && ch != 0x04) { /* has something read */

            if (pos % XXD_WIDTH == 0) { /* new line, print address */
                for (i = sizeof(pos) * 8 - 4; i >= 0; i -= 4) {
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	3b04      	subs	r3, #4
 800237a:	627b      	str	r3, [r7, #36]	; 0x24
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	2b00      	cmp	r3, #0
 8002380:	dae5      	bge.n	800234e <show_xxd+0xa2>
                    chout[0] = hexof((pos >> i) & 0xF);
                    write(fdout, chout, 2);
                }

                write(fdout, ":", 2);
 8002382:	4b76      	ldr	r3, [pc, #472]	; (800255c <show_xxd+0x2b0>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	4977      	ldr	r1, [pc, #476]	; (8002568 <show_xxd+0x2bc>)
 800238a:	2202      	movs	r2, #2
 800238c:	f015 fe0e 	bl	8017fac <write>
            }

            if (pos % 2 == 0) { /* whitespace for each 2 bytes */
 8002390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d106      	bne.n	80023a8 <show_xxd+0xfc>
                write(fdout, " ", 2);
 800239a:	4b70      	ldr	r3, [pc, #448]	; (800255c <show_xxd+0x2b0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	4972      	ldr	r1, [pc, #456]	; (800256c <show_xxd+0x2c0>)
 80023a2:	2202      	movs	r2, #2
 80023a4:	f015 fe02 	bl	8017fac <write>
            }

            /* higher bits */
            chout[0] = hexof(ch >> 4);
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
 80023aa:	091b      	lsrs	r3, r3, #4
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff ff46 	bl	8002240 <hexof>
 80023b4:	4603      	mov	r3, r0
 80023b6:	733b      	strb	r3, [r7, #12]
            write(fdout, chout, 2);
 80023b8:	4b68      	ldr	r3, [pc, #416]	; (800255c <show_xxd+0x2b0>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	f107 030c 	add.w	r3, r7, #12
 80023c0:	4610      	mov	r0, r2
 80023c2:	4619      	mov	r1, r3
 80023c4:	2202      	movs	r2, #2
 80023c6:	f015 fdf1 	bl	8017fac <write>

            /* lower bits*/
            chout[0] = hexof(ch & 0xF);
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
 80023cc:	f003 030f 	and.w	r3, r3, #15
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff ff35 	bl	8002240 <hexof>
 80023d6:	4603      	mov	r3, r0
 80023d8:	733b      	strb	r3, [r7, #12]
            write(fdout, chout, 2);
 80023da:	4b60      	ldr	r3, [pc, #384]	; (800255c <show_xxd+0x2b0>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	f107 030c 	add.w	r3, r7, #12
 80023e2:	4610      	mov	r0, r2
 80023e4:	4619      	mov	r1, r3
 80023e6:	2202      	movs	r2, #2
 80023e8:	f015 fde0 	bl	8017fac <write>

            /* store in buffer */
            buf[pos % XXD_WIDTH] = ch;
 80023ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023ee:	4b60      	ldr	r3, [pc, #384]	; (8002570 <show_xxd+0x2c4>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	da03      	bge.n	80023fe <show_xxd+0x152>
 80023f6:	3b01      	subs	r3, #1
 80023f8:	f063 030f 	orn	r3, r3, #15
 80023fc:	3301      	adds	r3, #1
 80023fe:	7bfa      	ldrb	r2, [r7, #15]
 8002400:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002404:	440b      	add	r3, r1
 8002406:	f803 2c20 	strb.w	r2, [r3, #-32]

            pos++;
 800240a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240c:	3301      	adds	r3, #1
 800240e:	62bb      	str	r3, [r7, #40]	; 0x28

            if (pos % XXD_WIDTH == 0) { /* end of line */
 8002410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	2b00      	cmp	r3, #0
 8002418:	d12c      	bne.n	8002474 <show_xxd+0x1c8>
                write(fdout, "  ", 3);
 800241a:	4b50      	ldr	r3, [pc, #320]	; (800255c <show_xxd+0x2b0>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	4954      	ldr	r1, [pc, #336]	; (8002574 <show_xxd+0x2c8>)
 8002422:	2203      	movs	r2, #3
 8002424:	f015 fdc2 	bl	8017fac <write>

                for (i = 0; i < XXD_WIDTH; i++) {
 8002428:	2300      	movs	r3, #0
 800242a:	627b      	str	r3, [r7, #36]	; 0x24
 800242c:	e016      	b.n	800245c <show_xxd+0x1b0>
                    chout[0] = char_filter(buf[i], '.');
 800242e:	f107 0210 	add.w	r2, r7, #16
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	4413      	add	r3, r2
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	212e      	movs	r1, #46	; 0x2e
 800243c:	f7ff ff20 	bl	8002280 <char_filter>
 8002440:	4603      	mov	r3, r0
 8002442:	733b      	strb	r3, [r7, #12]
                    write(fdout, chout, 2);
 8002444:	4b45      	ldr	r3, [pc, #276]	; (800255c <show_xxd+0x2b0>)
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	f107 030c 	add.w	r3, r7, #12
 800244c:	4610      	mov	r0, r2
 800244e:	4619      	mov	r1, r3
 8002450:	2202      	movs	r2, #2
 8002452:	f015 fdab 	bl	8017fac <write>
            pos++;

            if (pos % XXD_WIDTH == 0) { /* end of line */
                write(fdout, "  ", 3);

                for (i = 0; i < XXD_WIDTH; i++) {
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	3301      	adds	r3, #1
 800245a:	627b      	str	r3, [r7, #36]	; 0x24
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	2b0f      	cmp	r3, #15
 8002460:	dde5      	ble.n	800242e <show_xxd+0x182>
                    chout[0] = char_filter(buf[i], '.');
                    write(fdout, chout, 2);
                }

                write(fdout, "\r\n", 3);
 8002462:	4b3e      	ldr	r3, [pc, #248]	; (800255c <show_xxd+0x2b0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	4943      	ldr	r1, [pc, #268]	; (8002578 <show_xxd+0x2cc>)
 800246a:	2203      	movs	r2, #3
 800246c:	f015 fd9e 	bl	8017fac <write>
 8002470:	e000      	b.n	8002474 <show_xxd+0x1c8>
            }
        }
        else { /* EOF */
            break;
 8002472:	e00f      	b.n	8002494 <show_xxd+0x1e8>
            return;
        }
    }

    lseek(readfd, 0, SEEK_SET);
    while ((size = read(readfd, &ch, sizeof(ch))) && size != -1) {
 8002474:	f107 030f 	add.w	r3, r7, #15
 8002478:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800247a:	4619      	mov	r1, r3
 800247c:	2201      	movs	r2, #1
 800247e:	f015 fd9c 	bl	8017fba <read>
 8002482:	6238      	str	r0, [r7, #32]
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d004      	beq.n	8002494 <show_xxd+0x1e8>
 800248a:	6a3b      	ldr	r3, [r7, #32]
 800248c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002490:	f47f af51 	bne.w	8002336 <show_xxd+0x8a>
        else { /* EOF */
            break;
        }
    }

    if (pos % XXD_WIDTH != 0) { /* rest */
 8002494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	2b00      	cmp	r3, #0
 800249c:	d058      	beq.n	8002550 <show_xxd+0x2a4>
        /* align */
        for (i = pos % XXD_WIDTH; i < XXD_WIDTH; i++) {
 800249e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024a0:	4b33      	ldr	r3, [pc, #204]	; (8002570 <show_xxd+0x2c4>)
 80024a2:	4013      	ands	r3, r2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	da03      	bge.n	80024b0 <show_xxd+0x204>
 80024a8:	3b01      	subs	r3, #1
 80024aa:	f063 030f 	orn	r3, r3, #15
 80024ae:	3301      	adds	r3, #1
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
 80024b2:	e015      	b.n	80024e0 <show_xxd+0x234>
            if (i % 2 == 0) { /* whitespace for each 2 bytes */
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d106      	bne.n	80024cc <show_xxd+0x220>
                write(fdout, " ", 2);
 80024be:	4b27      	ldr	r3, [pc, #156]	; (800255c <show_xxd+0x2b0>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	4929      	ldr	r1, [pc, #164]	; (800256c <show_xxd+0x2c0>)
 80024c6:	2202      	movs	r2, #2
 80024c8:	f015 fd70 	bl	8017fac <write>
            }
            write(fdout, "  ", 3);
 80024cc:	4b23      	ldr	r3, [pc, #140]	; (800255c <show_xxd+0x2b0>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	4928      	ldr	r1, [pc, #160]	; (8002574 <show_xxd+0x2c8>)
 80024d4:	2203      	movs	r2, #3
 80024d6:	f015 fd69 	bl	8017fac <write>
        }
    }

    if (pos % XXD_WIDTH != 0) { /* rest */
        /* align */
        for (i = pos % XXD_WIDTH; i < XXD_WIDTH; i++) {
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	3301      	adds	r3, #1
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	2b0f      	cmp	r3, #15
 80024e4:	dde6      	ble.n	80024b4 <show_xxd+0x208>
                write(fdout, " ", 2);
            }
            write(fdout, "  ", 3);
        }

        write(fdout, "  ", 3);
 80024e6:	4b1d      	ldr	r3, [pc, #116]	; (800255c <show_xxd+0x2b0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	4921      	ldr	r1, [pc, #132]	; (8002574 <show_xxd+0x2c8>)
 80024ee:	2203      	movs	r2, #3
 80024f0:	f015 fd5c 	bl	8017fac <write>

        for (i = 0; i < pos % XXD_WIDTH; i++) {
 80024f4:	2300      	movs	r3, #0
 80024f6:	627b      	str	r3, [r7, #36]	; 0x24
 80024f8:	e016      	b.n	8002528 <show_xxd+0x27c>
            chout[0] = char_filter(buf[i], '.');
 80024fa:	f107 0210 	add.w	r2, r7, #16
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	4413      	add	r3, r2
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	212e      	movs	r1, #46	; 0x2e
 8002508:	f7ff feba 	bl	8002280 <char_filter>
 800250c:	4603      	mov	r3, r0
 800250e:	733b      	strb	r3, [r7, #12]
            write(fdout, chout, 2);
 8002510:	4b12      	ldr	r3, [pc, #72]	; (800255c <show_xxd+0x2b0>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	f107 030c 	add.w	r3, r7, #12
 8002518:	4610      	mov	r0, r2
 800251a:	4619      	mov	r1, r3
 800251c:	2202      	movs	r2, #2
 800251e:	f015 fd45 	bl	8017fac <write>
            write(fdout, "  ", 3);
        }

        write(fdout, "  ", 3);

        for (i = 0; i < pos % XXD_WIDTH; i++) {
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	3301      	adds	r3, #1
 8002526:	627b      	str	r3, [r7, #36]	; 0x24
 8002528:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800252a:	4b11      	ldr	r3, [pc, #68]	; (8002570 <show_xxd+0x2c4>)
 800252c:	4013      	ands	r3, r2
 800252e:	2b00      	cmp	r3, #0
 8002530:	da03      	bge.n	800253a <show_xxd+0x28e>
 8002532:	3b01      	subs	r3, #1
 8002534:	f063 030f 	orn	r3, r3, #15
 8002538:	3301      	adds	r3, #1
 800253a:	461a      	mov	r2, r3
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	429a      	cmp	r2, r3
 8002540:	dcdb      	bgt.n	80024fa <show_xxd+0x24e>
            chout[0] = char_filter(buf[i], '.');
            write(fdout, chout, 2);
        }

        write(fdout, "\r\n", 3);
 8002542:	4b06      	ldr	r3, [pc, #24]	; (800255c <show_xxd+0x2b0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	490b      	ldr	r1, [pc, #44]	; (8002578 <show_xxd+0x2cc>)
 800254a:	2203      	movs	r2, #3
 800254c:	f015 fd2e 	bl	8017fac <write>
    }
}
 8002550:	3730      	adds	r7, #48	; 0x30
 8002552:	46bd      	mov	sp, r7
 8002554:	bdb0      	pop	{r4, r5, r7, pc}
 8002556:	bf00      	nop
 8002558:	200002e0 	.word	0x200002e0
 800255c:	200002dc 	.word	0x200002dc
 8002560:	0801a4dc 	.word	0x0801a4dc
 8002564:	0801a4e4 	.word	0x0801a4e4
 8002568:	0801a504 	.word	0x0801a504
 800256c:	0801a4ac 	.word	0x0801a4ac
 8002570:	8000000f 	.word	0x8000000f
 8002574:	0801a508 	.word	0x0801a508
 8002578:	0801a50c 	.word	0x0801a50c

0800257c <first>:


void first()
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
	if (!fork()) setpriority(0, 0), pathserver();
 8002580:	f015 fd06 	bl	8017f90 <fork>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d105      	bne.n	8002596 <first+0x1a>
 800258a:	2000      	movs	r0, #0
 800258c:	2100      	movs	r1, #0
 800258e:	f015 fd29 	bl	8017fe4 <setpriority>
 8002592:	f000 ffe1 	bl	8003558 <pathserver>
	if (!fork()) setpriority(0, 0), UI_task();
 8002596:	f015 fcfb 	bl	8017f90 <fork>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d105      	bne.n	80025ac <first+0x30>
 80025a0:	2000      	movs	r0, #0
 80025a2:	2100      	movs	r1, #0
 80025a4:	f015 fd1e 	bl	8017fe4 <setpriority>
 80025a8:	f7ff f8ba 	bl	8001720 <UI_task>

	setpriority(0, PRIORITY_LIMIT);
 80025ac:	2000      	movs	r0, #0
 80025ae:	2127      	movs	r1, #39	; 0x27
 80025b0:	f015 fd18 	bl	8017fe4 <setpriority>

	mount("/dev/rom0", "/", ROMFS_TYPE, 0);
 80025b4:	4803      	ldr	r0, [pc, #12]	; (80025c4 <first+0x48>)
 80025b6:	4904      	ldr	r1, [pc, #16]	; (80025c8 <first+0x4c>)
 80025b8:	4a04      	ldr	r2, [pc, #16]	; (80025cc <first+0x50>)
 80025ba:	2300      	movs	r3, #0
 80025bc:	f001 fbda 	bl	8003d74 <mount>

	while(1);
 80025c0:	e7fe      	b.n	80025c0 <first+0x44>
 80025c2:	bf00      	nop
 80025c4:	0801a510 	.word	0x0801a510
 80025c8:	0801a51c 	.word	0x0801a51c
 80025cc:	0801a520 	.word	0x0801a520

080025d0 <intr_release>:
#define INTR_EVENT_REVERSE(event) ((event) - FILE_LIMIT - 15)
#define TIME_EVENT (FILE_LIMIT + INTR_LIMIT)

int intr_release(struct event_monitor *monitor, int event,
                 struct task_control_block *task, void *data)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
 80025dc:	603b      	str	r3, [r7, #0]
    return 1;
 80025de:	2301      	movs	r3, #1
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <time_release>:

int time_release(struct event_monitor *monitor, int event,
                 struct task_control_block *task, void *data)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b087      	sub	sp, #28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
 80025f8:	603b      	str	r3, [r7, #0]
    int *tick_count = data;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	617b      	str	r3, [r7, #20]
    return task->stack->r0 == *tick_count;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	429a      	cmp	r2, r3
 800260a:	bf14      	ite	ne
 800260c:	2300      	movne	r3, #0
 800260e:	2301      	moveq	r3, #1
 8002610:	b2db      	uxtb	r3, r3
}
 8002612:	4618      	mov	r0, r3
 8002614:	371c      	adds	r7, #28
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop

08002620 <rtenv_start_scheduler>:
struct list ready_list[PRIORITY_LIMIT + 1];  /* [0 ... 39] */
struct event events[EVENT_LIMIT];


void rtenv_start_scheduler()
{
 8002620:	b5b0      	push	{r4, r5, r7, lr}
 8002622:	b096      	sub	sp, #88	; 0x58
 8002624:	af02      	add	r7, sp, #8
	//struct task_control_block tasks[TASK_LIMIT];
	struct memory_pool memory_pool;
	struct event_monitor event_monitor;
	//size_t task_count = 0;
	size_t current_task = 0;
 8002626:	2300      	movs	r3, #0
 8002628:	64fb      	str	r3, [r7, #76]	; 0x4c
	int i;
	struct list *list;
	struct task_control_block *task;
	int timeup;
	unsigned int tick_count = 0;
 800262a:	2300      	movs	r3, #0
 800262c:	607b      	str	r3, [r7, #4]

	SysTick_Config(configCPU_CLOCK_HZ / configTICK_RATE_HZ);
 800262e:	4889      	ldr	r0, [pc, #548]	; (8002854 <rtenv_start_scheduler+0x234>)
 8002630:	f7fe fe56 	bl	80012e0 <SysTick_Config>

	init_rs232();
 8002634:	f002 fc74 	bl	8004f20 <init_rs232>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8002638:	b662      	cpsie	i
	__enable_irq();

    /* Initialize memory pool */
    memory_pool_init(&memory_pool, MEM_LIMIT, memory_space);
 800263a:	f107 0310 	add.w	r3, r7, #16
 800263e:	4618      	mov	r0, r3
 8002640:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002644:	4a84      	ldr	r2, [pc, #528]	; (8002858 <rtenv_start_scheduler+0x238>)
 8002646:	f000 fdb5 	bl	80031b4 <memory_pool_init>

	/* Initialize all files */
	for (i = 0; i < FILE_LIMIT; i++)
 800264a:	2300      	movs	r3, #0
 800264c:	64bb      	str	r3, [r7, #72]	; 0x48
 800264e:	e007      	b.n	8002660 <rtenv_start_scheduler+0x40>
		files[i] = NULL;
 8002650:	4b82      	ldr	r3, [pc, #520]	; (800285c <rtenv_start_scheduler+0x23c>)
 8002652:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002654:	2100      	movs	r1, #0
 8002656:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Initialize memory pool */
    memory_pool_init(&memory_pool, MEM_LIMIT, memory_space);

	/* Initialize all files */
	for (i = 0; i < FILE_LIMIT; i++)
 800265a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800265c:	3301      	adds	r3, #1
 800265e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002660:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002662:	2b1f      	cmp	r3, #31
 8002664:	ddf4      	ble.n	8002650 <rtenv_start_scheduler+0x30>
		files[i] = NULL;

	/* Initialize ready lists */
	for (i = 0; i <= PRIORITY_LIMIT; i++)
 8002666:	2300      	movs	r3, #0
 8002668:	64bb      	str	r3, [r7, #72]	; 0x48
 800266a:	e009      	b.n	8002680 <rtenv_start_scheduler+0x60>
		list_init(&ready_list[i]);
 800266c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800266e:	00da      	lsls	r2, r3, #3
 8002670:	4b7b      	ldr	r3, [pc, #492]	; (8002860 <rtenv_start_scheduler+0x240>)
 8002672:	4413      	add	r3, r2
 8002674:	4618      	mov	r0, r3
 8002676:	f000 fcff 	bl	8003078 <list_init>
	/* Initialize all files */
	for (i = 0; i < FILE_LIMIT; i++)
		files[i] = NULL;

	/* Initialize ready lists */
	for (i = 0; i <= PRIORITY_LIMIT; i++)
 800267a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800267c:	3301      	adds	r3, #1
 800267e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002680:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002682:	2b27      	cmp	r3, #39	; 0x27
 8002684:	ddf2      	ble.n	800266c <rtenv_start_scheduler+0x4c>
		list_init(&ready_list[i]);

    /* Initialise event monitor */
    event_monitor_init(&event_monitor, events, ready_list);
 8002686:	f107 0308 	add.w	r3, r7, #8
 800268a:	4618      	mov	r0, r3
 800268c:	4975      	ldr	r1, [pc, #468]	; (8002864 <rtenv_start_scheduler+0x244>)
 800268e:	4a74      	ldr	r2, [pc, #464]	; (8002860 <rtenv_start_scheduler+0x240>)
 8002690:	f7fe f934 	bl	80008fc <event_monitor_init>

	/* Initialize fifos */
	for (i = 0; i <= PATHSERVER_FD; i++)
 8002694:	2300      	movs	r3, #0
 8002696:	64bb      	str	r3, [r7, #72]	; 0x48
 8002698:	e00f      	b.n	80026ba <rtenv_start_scheduler+0x9a>
		file_mknod(i, -1, files, S_IFIFO, &memory_pool, &event_monitor);
 800269a:	f107 0310 	add.w	r3, r7, #16
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	f107 0308 	add.w	r3, r7, #8
 80026a4:	9301      	str	r3, [sp, #4]
 80026a6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80026a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026ac:	4a6b      	ldr	r2, [pc, #428]	; (800285c <rtenv_start_scheduler+0x23c>)
 80026ae:	2301      	movs	r3, #1
 80026b0:	f7fe fd0e 	bl	80010d0 <file_mknod>

    /* Initialise event monitor */
    event_monitor_init(&event_monitor, events, ready_list);

	/* Initialize fifos */
	for (i = 0; i <= PATHSERVER_FD; i++)
 80026b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026b6:	3301      	adds	r3, #1
 80026b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80026ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026bc:	2b0b      	cmp	r3, #11
 80026be:	ddec      	ble.n	800269a <rtenv_start_scheduler+0x7a>
		file_mknod(i, -1, files, S_IFIFO, &memory_pool, &event_monitor);

    /* Register IRQ events, see INTR_LIMIT */
	for (i = -15; i < INTR_LIMIT - 15; i++)
 80026c0:	f06f 030e 	mvn.w	r3, #14
 80026c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80026c6:	e00c      	b.n	80026e2 <rtenv_start_scheduler+0xc2>
	    event_monitor_register(&event_monitor, INTR_EVENT(i), intr_release, 0);
 80026c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026ca:	332f      	adds	r3, #47	; 0x2f
 80026cc:	f107 0208 	add.w	r2, r7, #8
 80026d0:	4610      	mov	r0, r2
 80026d2:	4619      	mov	r1, r3
 80026d4:	4a64      	ldr	r2, [pc, #400]	; (8002868 <rtenv_start_scheduler+0x248>)
 80026d6:	2300      	movs	r3, #0
 80026d8:	f7fe f97e 	bl	80009d8 <event_monitor_register>
	/* Initialize fifos */
	for (i = 0; i <= PATHSERVER_FD; i++)
		file_mknod(i, -1, files, S_IFIFO, &memory_pool, &event_monitor);

    /* Register IRQ events, see INTR_LIMIT */
	for (i = -15; i < INTR_LIMIT - 15; i++)
 80026dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026de:	3301      	adds	r3, #1
 80026e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80026e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026e4:	2b5a      	cmp	r3, #90	; 0x5a
 80026e6:	ddef      	ble.n	80026c8 <rtenv_start_scheduler+0xa8>
	    event_monitor_register(&event_monitor, INTR_EVENT(i), intr_release, 0);

	event_monitor_register(&event_monitor, TIME_EVENT, time_release, &tick_count);
 80026e8:	f107 0208 	add.w	r2, r7, #8
 80026ec:	1d3b      	adds	r3, r7, #4
 80026ee:	4610      	mov	r0, r2
 80026f0:	218a      	movs	r1, #138	; 0x8a
 80026f2:	4a5e      	ldr	r2, [pc, #376]	; (800286c <rtenv_start_scheduler+0x24c>)
 80026f4:	f7fe f970 	bl	80009d8 <event_monitor_register>

    /* Initialize first thread */
	tasks[task_count].stack = (void*)init_task(stacks[task_count], &first);
 80026f8:	4b5d      	ldr	r3, [pc, #372]	; (8002870 <rtenv_start_scheduler+0x250>)
 80026fa:	681c      	ldr	r4, [r3, #0]
 80026fc:	4b5c      	ldr	r3, [pc, #368]	; (8002870 <rtenv_start_scheduler+0x250>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	4613      	mov	r3, r2
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	4413      	add	r3, r2
 8002706:	025b      	lsls	r3, r3, #9
 8002708:	4a5a      	ldr	r2, [pc, #360]	; (8002874 <rtenv_start_scheduler+0x254>)
 800270a:	4413      	add	r3, r2
 800270c:	4618      	mov	r0, r3
 800270e:	495a      	ldr	r1, [pc, #360]	; (8002878 <rtenv_start_scheduler+0x258>)
 8002710:	f002 fb92 	bl	8004e38 <init_task>
 8002714:	4602      	mov	r2, r0
 8002716:	4959      	ldr	r1, [pc, #356]	; (800287c <rtenv_start_scheduler+0x25c>)
 8002718:	4623      	mov	r3, r4
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	4423      	add	r3, r4
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	440b      	add	r3, r1
 8002722:	601a      	str	r2, [r3, #0]
	tasks[task_count].pid = 0;
 8002724:	4b52      	ldr	r3, [pc, #328]	; (8002870 <rtenv_start_scheduler+0x250>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4954      	ldr	r1, [pc, #336]	; (800287c <rtenv_start_scheduler+0x25c>)
 800272a:	4613      	mov	r3, r2
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	4413      	add	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	440b      	add	r3, r1
 8002734:	3304      	adds	r3, #4
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]
	tasks[task_count].priority = PRIORITY_DEFAULT;
 800273a:	4b4d      	ldr	r3, [pc, #308]	; (8002870 <rtenv_start_scheduler+0x250>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	494f      	ldr	r1, [pc, #316]	; (800287c <rtenv_start_scheduler+0x25c>)
 8002740:	4613      	mov	r3, r2
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	4413      	add	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	440b      	add	r3, r1
 800274a:	330c      	adds	r3, #12
 800274c:	2214      	movs	r2, #20
 800274e:	601a      	str	r2, [r3, #0]
	list_init(&tasks[task_count].list);
 8002750:	4b47      	ldr	r3, [pc, #284]	; (8002870 <rtenv_start_scheduler+0x250>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	4613      	mov	r3, r2
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	4413      	add	r3, r2
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	f103 0210 	add.w	r2, r3, #16
 8002760:	4b46      	ldr	r3, [pc, #280]	; (800287c <rtenv_start_scheduler+0x25c>)
 8002762:	4413      	add	r3, r2
 8002764:	4618      	mov	r0, r3
 8002766:	f000 fc87 	bl	8003078 <list_init>
	list_push(&ready_list[tasks[task_count].priority], &tasks[task_count].list);
 800276a:	4b41      	ldr	r3, [pc, #260]	; (8002870 <rtenv_start_scheduler+0x250>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	4943      	ldr	r1, [pc, #268]	; (800287c <rtenv_start_scheduler+0x25c>)
 8002770:	4613      	mov	r3, r2
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	4413      	add	r3, r2
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	440b      	add	r3, r1
 800277a:	330c      	adds	r3, #12
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	00da      	lsls	r2, r3, #3
 8002780:	4b37      	ldr	r3, [pc, #220]	; (8002860 <rtenv_start_scheduler+0x240>)
 8002782:	18d1      	adds	r1, r2, r3
 8002784:	4b3a      	ldr	r3, [pc, #232]	; (8002870 <rtenv_start_scheduler+0x250>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4613      	mov	r3, r2
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	4413      	add	r3, r2
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	f103 0210 	add.w	r2, r3, #16
 8002794:	4b39      	ldr	r3, [pc, #228]	; (800287c <rtenv_start_scheduler+0x25c>)
 8002796:	4413      	add	r3, r2
 8002798:	4608      	mov	r0, r1
 800279a:	4619      	mov	r1, r3
 800279c:	f000 fcc6 	bl	800312c <list_push>
	task_count++;
 80027a0:	4b33      	ldr	r3, [pc, #204]	; (8002870 <rtenv_start_scheduler+0x250>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	1c5a      	adds	r2, r3, #1
 80027a6:	4b32      	ldr	r3, [pc, #200]	; (8002870 <rtenv_start_scheduler+0x250>)
 80027a8:	601a      	str	r2, [r3, #0]

	while (1) {
		tasks[current_task].stack = activate(tasks[current_task].stack);
 80027aa:	4934      	ldr	r1, [pc, #208]	; (800287c <rtenv_start_scheduler+0x25c>)
 80027ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027ae:	4613      	mov	r3, r2
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	4413      	add	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	440b      	add	r3, r1
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f015 fb8f 	bl	8017ede <activate>
 80027c0:	4601      	mov	r1, r0
 80027c2:	482e      	ldr	r0, [pc, #184]	; (800287c <rtenv_start_scheduler+0x25c>)
 80027c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027c6:	4613      	mov	r3, r2
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	4413      	add	r3, r2
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	4403      	add	r3, r0
 80027d0:	6019      	str	r1, [r3, #0]
		tasks[current_task].status = TASK_READY;
 80027d2:	492a      	ldr	r1, [pc, #168]	; (800287c <rtenv_start_scheduler+0x25c>)
 80027d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027d6:	4613      	mov	r3, r2
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	4413      	add	r3, r2
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	440b      	add	r3, r1
 80027e0:	3308      	adds	r3, #8
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
		timeup = 0;
 80027e6:	2300      	movs	r3, #0
 80027e8:	647b      	str	r3, [r7, #68]	; 0x44

		switch (tasks[current_task].stack->r7) {
 80027ea:	4924      	ldr	r1, [pc, #144]	; (800287c <rtenv_start_scheduler+0x25c>)
 80027ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027ee:	4613      	mov	r3, r2
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	4413      	add	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	440b      	add	r3, r1
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	3b01      	subs	r3, #1
 80027fe:	2b09      	cmp	r3, #9
 8002800:	f200 83ae 	bhi.w	8002f60 <rtenv_start_scheduler+0x940>
 8002804:	a201      	add	r2, pc, #4	; (adr r2, 800280c <rtenv_start_scheduler+0x1ec>)
 8002806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800280a:	bf00      	nop
 800280c:	08002835 	.word	0x08002835
 8002810:	080029cd 	.word	0x080029cd
 8002814:	080029e3 	.word	0x080029e3
 8002818:	08002acd 	.word	0x08002acd
 800281c:	08002b9d 	.word	0x08002b9d
 8002820:	08002bff 	.word	0x08002bff
 8002824:	08002c91 	.word	0x08002c91
 8002828:	08002db1 	.word	0x08002db1
 800282c:	08002e11 	.word	0x08002e11
 8002830:	08002e83 	.word	0x08002e83
		case 0x1: /* fork */
			if (task_count == TASK_LIMIT) {
 8002834:	4b0e      	ldr	r3, [pc, #56]	; (8002870 <rtenv_start_scheduler+0x250>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2b08      	cmp	r3, #8
 800283a:	d121      	bne.n	8002880 <rtenv_start_scheduler+0x260>
				/* Cannot create a new task, return error */
				tasks[current_task].stack->r0 = -1;
 800283c:	490f      	ldr	r1, [pc, #60]	; (800287c <rtenv_start_scheduler+0x25c>)
 800283e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002840:	4613      	mov	r3, r2
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	4413      	add	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	440b      	add	r3, r1
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002850:	629a      	str	r2, [r3, #40]	; 0x28
				list_init(&tasks[task_count].list);
				list_push(&ready_list[tasks[task_count].priority], &tasks[task_count].list);
				/* There is now one more task */
				task_count++;
			}
			break;
 8002852:	e3c3      	b.n	8002fdc <rtenv_start_scheduler+0x9bc>
 8002854:	000afc80 	.word	0x000afc80
 8002858:	200038ac 	.word	0x200038ac
 800285c:	200040ac 	.word	0x200040ac
 8002860:	200041ac 	.word	0x200041ac
 8002864:	200042ec 	.word	0x200042ec
 8002868:	080025d1 	.word	0x080025d1
 800286c:	080025ed 	.word	0x080025ed
 8002870:	200000d4 	.word	0x200000d4
 8002874:	200008ac 	.word	0x200008ac
 8002878:	0800257d 	.word	0x0800257d
 800287c:	200007ec 	.word	0x200007ec
				/* Cannot create a new task, return error */
				tasks[current_task].stack->r0 = -1;
			}
			else {
				/* Compute how much of the stack is used */
				size_t used = stacks[current_task] + STACK_SIZE
 8002880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002882:	1c5a      	adds	r2, r3, #1
 8002884:	4613      	mov	r3, r2
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	4413      	add	r3, r2
 800288a:	025b      	lsls	r3, r3, #9
 800288c:	4a89      	ldr	r2, [pc, #548]	; (8002ab4 <rtenv_start_scheduler+0x494>)
 800288e:	4413      	add	r3, r2
					      - (unsigned int*)tasks[current_task].stack;
 8002890:	4619      	mov	r1, r3
 8002892:	4889      	ldr	r0, [pc, #548]	; (8002ab8 <rtenv_start_scheduler+0x498>)
 8002894:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002896:	4613      	mov	r3, r2
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	4413      	add	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	4403      	add	r3, r0
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	1acb      	subs	r3, r1, r3
 80028a4:	109b      	asrs	r3, r3, #2
				/* Cannot create a new task, return error */
				tasks[current_task].stack->r0 = -1;
			}
			else {
				/* Compute how much of the stack is used */
				size_t used = stacks[current_task] + STACK_SIZE
 80028a6:	643b      	str	r3, [r7, #64]	; 0x40
					      - (unsigned int*)tasks[current_task].stack;
				/* New stack is END - used */
				tasks[task_count].stack = (void*)(stacks[task_count] + STACK_SIZE - used);
 80028a8:	4b84      	ldr	r3, [pc, #528]	; (8002abc <rtenv_start_scheduler+0x49c>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	4b83      	ldr	r3, [pc, #524]	; (8002abc <rtenv_start_scheduler+0x49c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	1c59      	adds	r1, r3, #1
 80028b2:	460b      	mov	r3, r1
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	440b      	add	r3, r1
 80028b8:	025b      	lsls	r3, r3, #9
 80028ba:	497e      	ldr	r1, [pc, #504]	; (8002ab4 <rtenv_start_scheduler+0x494>)
 80028bc:	4419      	add	r1, r3
 80028be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	425b      	negs	r3, r3
 80028c4:	4419      	add	r1, r3
 80028c6:	487c      	ldr	r0, [pc, #496]	; (8002ab8 <rtenv_start_scheduler+0x498>)
 80028c8:	4613      	mov	r3, r2
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	4413      	add	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	4403      	add	r3, r0
 80028d2:	6019      	str	r1, [r3, #0]
				/* Copy only the used part of the stack */
				memcpy(tasks[task_count].stack, tasks[current_task].stack,
 80028d4:	4b79      	ldr	r3, [pc, #484]	; (8002abc <rtenv_start_scheduler+0x49c>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	4977      	ldr	r1, [pc, #476]	; (8002ab8 <rtenv_start_scheduler+0x498>)
 80028da:	4613      	mov	r3, r2
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	4413      	add	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	440b      	add	r3, r1
 80028e4:	6819      	ldr	r1, [r3, #0]
 80028e6:	4874      	ldr	r0, [pc, #464]	; (8002ab8 <rtenv_start_scheduler+0x498>)
 80028e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028ea:	4613      	mov	r3, r2
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	4413      	add	r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	4403      	add	r3, r0
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4608      	mov	r0, r1
 80028fc:	4611      	mov	r1, r2
 80028fe:	461a      	mov	r2, r3
 8002900:	f015 fafe 	bl	8017f00 <memcpy>
				       used * sizeof(unsigned int));
				/* Set PID */
				tasks[task_count].pid = task_count;
 8002904:	4b6d      	ldr	r3, [pc, #436]	; (8002abc <rtenv_start_scheduler+0x49c>)
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	4b6c      	ldr	r3, [pc, #432]	; (8002abc <rtenv_start_scheduler+0x49c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4619      	mov	r1, r3
 800290e:	486a      	ldr	r0, [pc, #424]	; (8002ab8 <rtenv_start_scheduler+0x498>)
 8002910:	4613      	mov	r3, r2
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	4413      	add	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	4403      	add	r3, r0
 800291a:	3304      	adds	r3, #4
 800291c:	6019      	str	r1, [r3, #0]
				/* Set priority, inherited from forked task */
				tasks[task_count].priority = tasks[current_task].priority;
 800291e:	4b67      	ldr	r3, [pc, #412]	; (8002abc <rtenv_start_scheduler+0x49c>)
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	4865      	ldr	r0, [pc, #404]	; (8002ab8 <rtenv_start_scheduler+0x498>)
 8002924:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002926:	460b      	mov	r3, r1
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	440b      	add	r3, r1
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	4403      	add	r3, r0
 8002930:	330c      	adds	r3, #12
 8002932:	6819      	ldr	r1, [r3, #0]
 8002934:	4860      	ldr	r0, [pc, #384]	; (8002ab8 <rtenv_start_scheduler+0x498>)
 8002936:	4613      	mov	r3, r2
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	4413      	add	r3, r2
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	4403      	add	r3, r0
 8002940:	330c      	adds	r3, #12
 8002942:	6019      	str	r1, [r3, #0]
				/* Set return values in each process */
				tasks[current_task].stack->r0 = task_count;
 8002944:	495c      	ldr	r1, [pc, #368]	; (8002ab8 <rtenv_start_scheduler+0x498>)
 8002946:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002948:	4613      	mov	r3, r2
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	4413      	add	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	440b      	add	r3, r1
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a59      	ldr	r2, [pc, #356]	; (8002abc <rtenv_start_scheduler+0x49c>)
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	629a      	str	r2, [r3, #40]	; 0x28
				tasks[task_count].stack->r0 = 0;
 800295a:	4b58      	ldr	r3, [pc, #352]	; (8002abc <rtenv_start_scheduler+0x49c>)
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	4956      	ldr	r1, [pc, #344]	; (8002ab8 <rtenv_start_scheduler+0x498>)
 8002960:	4613      	mov	r3, r2
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	4413      	add	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	440b      	add	r3, r1
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2200      	movs	r2, #0
 800296e:	629a      	str	r2, [r3, #40]	; 0x28
				list_init(&tasks[task_count].list);
 8002970:	4b52      	ldr	r3, [pc, #328]	; (8002abc <rtenv_start_scheduler+0x49c>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	4613      	mov	r3, r2
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	4413      	add	r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	f103 0210 	add.w	r2, r3, #16
 8002980:	4b4d      	ldr	r3, [pc, #308]	; (8002ab8 <rtenv_start_scheduler+0x498>)
 8002982:	4413      	add	r3, r2
 8002984:	4618      	mov	r0, r3
 8002986:	f000 fb77 	bl	8003078 <list_init>
				list_push(&ready_list[tasks[task_count].priority], &tasks[task_count].list);
 800298a:	4b4c      	ldr	r3, [pc, #304]	; (8002abc <rtenv_start_scheduler+0x49c>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	494a      	ldr	r1, [pc, #296]	; (8002ab8 <rtenv_start_scheduler+0x498>)
 8002990:	4613      	mov	r3, r2
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	4413      	add	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	440b      	add	r3, r1
 800299a:	330c      	adds	r3, #12
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	00da      	lsls	r2, r3, #3
 80029a0:	4b47      	ldr	r3, [pc, #284]	; (8002ac0 <rtenv_start_scheduler+0x4a0>)
 80029a2:	18d1      	adds	r1, r2, r3
 80029a4:	4b45      	ldr	r3, [pc, #276]	; (8002abc <rtenv_start_scheduler+0x49c>)
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	4613      	mov	r3, r2
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	4413      	add	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	f103 0210 	add.w	r2, r3, #16
 80029b4:	4b40      	ldr	r3, [pc, #256]	; (8002ab8 <rtenv_start_scheduler+0x498>)
 80029b6:	4413      	add	r3, r2
 80029b8:	4608      	mov	r0, r1
 80029ba:	4619      	mov	r1, r3
 80029bc:	f000 fbb6 	bl	800312c <list_push>
				/* There is now one more task */
				task_count++;
 80029c0:	4b3e      	ldr	r3, [pc, #248]	; (8002abc <rtenv_start_scheduler+0x49c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	1c5a      	adds	r2, r3, #1
 80029c6:	4b3d      	ldr	r3, [pc, #244]	; (8002abc <rtenv_start_scheduler+0x49c>)
 80029c8:	601a      	str	r2, [r3, #0]
			}
			break;
 80029ca:	e307      	b.n	8002fdc <rtenv_start_scheduler+0x9bc>
		case 0x2: /* getpid */
			tasks[current_task].stack->r0 = current_task;
 80029cc:	493a      	ldr	r1, [pc, #232]	; (8002ab8 <rtenv_start_scheduler+0x498>)
 80029ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029d0:	4613      	mov	r3, r2
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	4413      	add	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	440b      	add	r3, r1
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029de:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 80029e0:	e2fc      	b.n	8002fdc <rtenv_start_scheduler+0x9bc>
		case 0x3: /* write */
		    {
		        /* Check fd is valid */
		        int fd = tasks[current_task].stack->r0;
 80029e2:	4935      	ldr	r1, [pc, #212]	; (8002ab8 <rtenv_start_scheduler+0x498>)
 80029e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029e6:	4613      	mov	r3, r2
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	4413      	add	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	440b      	add	r3, r1
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f4:	63fb      	str	r3, [r7, #60]	; 0x3c
		        if (fd < FILE_LIMIT && files[fd]) {
 80029f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029f8:	2b1f      	cmp	r3, #31
 80029fa:	dc4e      	bgt.n	8002a9a <rtenv_start_scheduler+0x47a>
 80029fc:	4b31      	ldr	r3, [pc, #196]	; (8002ac4 <rtenv_start_scheduler+0x4a4>)
 80029fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d048      	beq.n	8002a9a <rtenv_start_scheduler+0x47a>
		            /* Prepare file request, store reference in r0 */
		            requests[current_task].task = &tasks[current_task];
 8002a08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	4413      	add	r3, r2
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	4a29      	ldr	r2, [pc, #164]	; (8002ab8 <rtenv_start_scheduler+0x498>)
 8002a14:	441a      	add	r2, r3
 8002a16:	492c      	ldr	r1, [pc, #176]	; (8002ac8 <rtenv_start_scheduler+0x4a8>)
 8002a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a1a:	011b      	lsls	r3, r3, #4
 8002a1c:	440b      	add	r3, r1
 8002a1e:	601a      	str	r2, [r3, #0]
		            requests[current_task].buf =
		                (void*)tasks[current_task].stack->r1;
 8002a20:	4925      	ldr	r1, [pc, #148]	; (8002ab8 <rtenv_start_scheduler+0x498>)
 8002a22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a24:	4613      	mov	r3, r2
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	4413      	add	r3, r2
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	440b      	add	r3, r1
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a32:	461a      	mov	r2, r3
		        /* Check fd is valid */
		        int fd = tasks[current_task].stack->r0;
		        if (fd < FILE_LIMIT && files[fd]) {
		            /* Prepare file request, store reference in r0 */
		            requests[current_task].task = &tasks[current_task];
		            requests[current_task].buf =
 8002a34:	4924      	ldr	r1, [pc, #144]	; (8002ac8 <rtenv_start_scheduler+0x4a8>)
 8002a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	440b      	add	r3, r1
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	601a      	str	r2, [r3, #0]
		                (void*)tasks[current_task].stack->r1;
		            requests[current_task].size = tasks[current_task].stack->r2;
 8002a40:	491d      	ldr	r1, [pc, #116]	; (8002ab8 <rtenv_start_scheduler+0x498>)
 8002a42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a44:	4613      	mov	r3, r2
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	4413      	add	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	440b      	add	r3, r1
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	461a      	mov	r2, r3
 8002a54:	491c      	ldr	r1, [pc, #112]	; (8002ac8 <rtenv_start_scheduler+0x4a8>)
 8002a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a58:	011b      	lsls	r3, r3, #4
 8002a5a:	440b      	add	r3, r1
 8002a5c:	3308      	adds	r3, #8
 8002a5e:	601a      	str	r2, [r3, #0]
		            tasks[current_task].stack->r0 =
 8002a60:	4915      	ldr	r1, [pc, #84]	; (8002ab8 <rtenv_start_scheduler+0x498>)
 8002a62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a64:	4613      	mov	r3, r2
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	4413      	add	r3, r2
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	440b      	add	r3, r1
 8002a6e:	681b      	ldr	r3, [r3, #0]
		                (int)&requests[current_task];
 8002a70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a72:	0111      	lsls	r1, r2, #4
 8002a74:	4a14      	ldr	r2, [pc, #80]	; (8002ac8 <rtenv_start_scheduler+0x4a8>)
 8002a76:	440a      	add	r2, r1
		            /* Prepare file request, store reference in r0 */
		            requests[current_task].task = &tasks[current_task];
		            requests[current_task].buf =
		                (void*)tasks[current_task].stack->r1;
		            requests[current_task].size = tasks[current_task].stack->r2;
		            tasks[current_task].stack->r0 =
 8002a78:	629a      	str	r2, [r3, #40]	; 0x28
		                (int)&requests[current_task];

                    /* Write */
			        file_write(files[fd], &requests[current_task],
 8002a7a:	4b12      	ldr	r3, [pc, #72]	; (8002ac4 <rtenv_start_scheduler+0x4a4>)
 8002a7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a7e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a84:	011a      	lsls	r2, r3, #4
 8002a86:	4b10      	ldr	r3, [pc, #64]	; (8002ac8 <rtenv_start_scheduler+0x4a8>)
 8002a88:	441a      	add	r2, r3
 8002a8a:	f107 0308 	add.w	r3, r7, #8
 8002a8e:	4608      	mov	r0, r1
 8002a90:	4611      	mov	r1, r2
 8002a92:	461a      	mov	r2, r3
 8002a94:	f7fe fad2 	bl	800103c <file_write>
			                   &event_monitor);
			    }
			    else {
			        tasks[current_task].stack->r0 = -1;
			    }
			} break;
 8002a98:	e2a0      	b.n	8002fdc <rtenv_start_scheduler+0x9bc>
                    /* Write */
			        file_write(files[fd], &requests[current_task],
			                   &event_monitor);
			    }
			    else {
			        tasks[current_task].stack->r0 = -1;
 8002a9a:	4907      	ldr	r1, [pc, #28]	; (8002ab8 <rtenv_start_scheduler+0x498>)
 8002a9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	4413      	add	r3, r2
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	440b      	add	r3, r1
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002aae:	629a      	str	r2, [r3, #40]	; 0x28
			    }
			} break;
 8002ab0:	e294      	b.n	8002fdc <rtenv_start_scheduler+0x9bc>
 8002ab2:	bf00      	nop
 8002ab4:	200008ac 	.word	0x200008ac
 8002ab8:	200007ec 	.word	0x200007ec
 8002abc:	200000d4 	.word	0x200000d4
 8002ac0:	200041ac 	.word	0x200041ac
 8002ac4:	200040ac 	.word	0x200040ac
 8002ac8:	2000412c 	.word	0x2000412c
		case 0x4: /* read */
            {
		        /* Check fd is valid */
		        int fd = tasks[current_task].stack->r0;
 8002acc:	4998      	ldr	r1, [pc, #608]	; (8002d30 <rtenv_start_scheduler+0x710>)
 8002ace:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	4413      	add	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	440b      	add	r3, r1
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ade:	63bb      	str	r3, [r7, #56]	; 0x38
		        if (fd < FILE_LIMIT && files[fd]) {
 8002ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae2:	2b1f      	cmp	r3, #31
 8002ae4:	dc4e      	bgt.n	8002b84 <rtenv_start_scheduler+0x564>
 8002ae6:	4b93      	ldr	r3, [pc, #588]	; (8002d34 <rtenv_start_scheduler+0x714>)
 8002ae8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d048      	beq.n	8002b84 <rtenv_start_scheduler+0x564>
		            /* Prepare file request, store reference in r0 */
		            requests[current_task].task = &tasks[current_task];
 8002af2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002af4:	4613      	mov	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	4413      	add	r3, r2
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	4a8c      	ldr	r2, [pc, #560]	; (8002d30 <rtenv_start_scheduler+0x710>)
 8002afe:	441a      	add	r2, r3
 8002b00:	498d      	ldr	r1, [pc, #564]	; (8002d38 <rtenv_start_scheduler+0x718>)
 8002b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b04:	011b      	lsls	r3, r3, #4
 8002b06:	440b      	add	r3, r1
 8002b08:	601a      	str	r2, [r3, #0]
		            requests[current_task].buf =
		                (void*)tasks[current_task].stack->r1;
 8002b0a:	4989      	ldr	r1, [pc, #548]	; (8002d30 <rtenv_start_scheduler+0x710>)
 8002b0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b0e:	4613      	mov	r3, r2
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	4413      	add	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	440b      	add	r3, r1
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1c:	461a      	mov	r2, r3
		        /* Check fd is valid */
		        int fd = tasks[current_task].stack->r0;
		        if (fd < FILE_LIMIT && files[fd]) {
		            /* Prepare file request, store reference in r0 */
		            requests[current_task].task = &tasks[current_task];
		            requests[current_task].buf =
 8002b1e:	4986      	ldr	r1, [pc, #536]	; (8002d38 <rtenv_start_scheduler+0x718>)
 8002b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b22:	011b      	lsls	r3, r3, #4
 8002b24:	440b      	add	r3, r1
 8002b26:	3304      	adds	r3, #4
 8002b28:	601a      	str	r2, [r3, #0]
		                (void*)tasks[current_task].stack->r1;
		            requests[current_task].size = tasks[current_task].stack->r2;
 8002b2a:	4981      	ldr	r1, [pc, #516]	; (8002d30 <rtenv_start_scheduler+0x710>)
 8002b2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b2e:	4613      	mov	r3, r2
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	4413      	add	r3, r2
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	440b      	add	r3, r1
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	497e      	ldr	r1, [pc, #504]	; (8002d38 <rtenv_start_scheduler+0x718>)
 8002b40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b42:	011b      	lsls	r3, r3, #4
 8002b44:	440b      	add	r3, r1
 8002b46:	3308      	adds	r3, #8
 8002b48:	601a      	str	r2, [r3, #0]
		            tasks[current_task].stack->r0 =
 8002b4a:	4979      	ldr	r1, [pc, #484]	; (8002d30 <rtenv_start_scheduler+0x710>)
 8002b4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b4e:	4613      	mov	r3, r2
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	4413      	add	r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	440b      	add	r3, r1
 8002b58:	681b      	ldr	r3, [r3, #0]
		                (int)&requests[current_task];
 8002b5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b5c:	0111      	lsls	r1, r2, #4
 8002b5e:	4a76      	ldr	r2, [pc, #472]	; (8002d38 <rtenv_start_scheduler+0x718>)
 8002b60:	440a      	add	r2, r1
		            /* Prepare file request, store reference in r0 */
		            requests[current_task].task = &tasks[current_task];
		            requests[current_task].buf =
		                (void*)tasks[current_task].stack->r1;
		            requests[current_task].size = tasks[current_task].stack->r2;
		            tasks[current_task].stack->r0 =
 8002b62:	629a      	str	r2, [r3, #40]	; 0x28
		                (int)&requests[current_task];

                    /* Read */
			        file_read(files[fd], &requests[current_task],
 8002b64:	4b73      	ldr	r3, [pc, #460]	; (8002d34 <rtenv_start_scheduler+0x714>)
 8002b66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b6e:	011a      	lsls	r2, r3, #4
 8002b70:	4b71      	ldr	r3, [pc, #452]	; (8002d38 <rtenv_start_scheduler+0x718>)
 8002b72:	441a      	add	r2, r3
 8002b74:	f107 0308 	add.w	r3, r7, #8
 8002b78:	4608      	mov	r0, r1
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	f7fe fa13 	bl	8000fa8 <file_read>
			                  &event_monitor);
			    }
			    else {
			        tasks[current_task].stack->r0 = -1;
			    }
			} break;
 8002b82:	e22b      	b.n	8002fdc <rtenv_start_scheduler+0x9bc>
                    /* Read */
			        file_read(files[fd], &requests[current_task],
			                  &event_monitor);
			    }
			    else {
			        tasks[current_task].stack->r0 = -1;
 8002b84:	496a      	ldr	r1, [pc, #424]	; (8002d30 <rtenv_start_scheduler+0x710>)
 8002b86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b88:	4613      	mov	r3, r2
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	4413      	add	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	440b      	add	r3, r1
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b98:	629a      	str	r2, [r3, #40]	; 0x28
			    }
			} break;
 8002b9a:	e21f      	b.n	8002fdc <rtenv_start_scheduler+0x9bc>
		case 0x5: /* interrupt_wait */
			/* Enable interrupt */
			NVIC_EnableIRQ(tasks[current_task].stack->r0);
 8002b9c:	4964      	ldr	r1, [pc, #400]	; (8002d30 <rtenv_start_scheduler+0x710>)
 8002b9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	4413      	add	r3, r2
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	440b      	add	r3, r1
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	b25b      	sxtb	r3, r3
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fe fb38 	bl	8001228 <NVIC_EnableIRQ>
			/* Block task waiting for interrupt to happen */
			event_monitor_block(&event_monitor,
			                    INTR_EVENT(tasks[current_task].stack->r0),
 8002bb8:	495d      	ldr	r1, [pc, #372]	; (8002d30 <rtenv_start_scheduler+0x710>)
 8002bba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	4413      	add	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	440b      	add	r3, r1
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bca:	332f      	adds	r3, #47	; 0x2f
			} break;
		case 0x5: /* interrupt_wait */
			/* Enable interrupt */
			NVIC_EnableIRQ(tasks[current_task].stack->r0);
			/* Block task waiting for interrupt to happen */
			event_monitor_block(&event_monitor,
 8002bcc:	4619      	mov	r1, r3
 8002bce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	4413      	add	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	4a55      	ldr	r2, [pc, #340]	; (8002d30 <rtenv_start_scheduler+0x710>)
 8002bda:	4413      	add	r3, r2
 8002bdc:	f107 0208 	add.w	r2, r7, #8
 8002be0:	4610      	mov	r0, r2
 8002be2:	461a      	mov	r2, r3
 8002be4:	f7fd ff22 	bl	8000a2c <event_monitor_block>
			                    INTR_EVENT(tasks[current_task].stack->r0),
			                    &tasks[current_task]);
			tasks[current_task].status = TASK_WAIT_INTR;
 8002be8:	4951      	ldr	r1, [pc, #324]	; (8002d30 <rtenv_start_scheduler+0x710>)
 8002bea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bec:	4613      	mov	r3, r2
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	4413      	add	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	440b      	add	r3, r1
 8002bf6:	3308      	adds	r3, #8
 8002bf8:	2203      	movs	r2, #3
 8002bfa:	601a      	str	r2, [r3, #0]
			break;
 8002bfc:	e1ee      	b.n	8002fdc <rtenv_start_scheduler+0x9bc>
		case 0x6: /* getpriority */
			{
				int who = tasks[current_task].stack->r0;
 8002bfe:	494c      	ldr	r1, [pc, #304]	; (8002d30 <rtenv_start_scheduler+0x710>)
 8002c00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c02:	4613      	mov	r3, r2
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	4413      	add	r3, r2
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	440b      	add	r3, r1
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c10:	637b      	str	r3, [r7, #52]	; 0x34
				if (who > 0 && who < (int)task_count)
 8002c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	dd18      	ble.n	8002c4a <rtenv_start_scheduler+0x62a>
 8002c18:	4b48      	ldr	r3, [pc, #288]	; (8002d3c <rtenv_start_scheduler+0x71c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c20:	429a      	cmp	r2, r3
 8002c22:	dd12      	ble.n	8002c4a <rtenv_start_scheduler+0x62a>
					tasks[current_task].stack->r0 = tasks[who].priority;
 8002c24:	4942      	ldr	r1, [pc, #264]	; (8002d30 <rtenv_start_scheduler+0x710>)
 8002c26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c28:	4613      	mov	r3, r2
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	4413      	add	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	440b      	add	r3, r1
 8002c32:	6819      	ldr	r1, [r3, #0]
 8002c34:	483e      	ldr	r0, [pc, #248]	; (8002d30 <rtenv_start_scheduler+0x710>)
 8002c36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c38:	4613      	mov	r3, r2
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	4413      	add	r3, r2
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	4403      	add	r3, r0
 8002c42:	330c      	adds	r3, #12
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	628b      	str	r3, [r1, #40]	; 0x28
 8002c48:	e021      	b.n	8002c8e <rtenv_start_scheduler+0x66e>
				else if (who == 0)
 8002c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d112      	bne.n	8002c76 <rtenv_start_scheduler+0x656>
					tasks[current_task].stack->r0 = tasks[current_task].priority;
 8002c50:	4937      	ldr	r1, [pc, #220]	; (8002d30 <rtenv_start_scheduler+0x710>)
 8002c52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c54:	4613      	mov	r3, r2
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	4413      	add	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	440b      	add	r3, r1
 8002c5e:	6819      	ldr	r1, [r3, #0]
 8002c60:	4833      	ldr	r0, [pc, #204]	; (8002d30 <rtenv_start_scheduler+0x710>)
 8002c62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c64:	4613      	mov	r3, r2
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	4413      	add	r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	4403      	add	r3, r0
 8002c6e:	330c      	adds	r3, #12
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	628b      	str	r3, [r1, #40]	; 0x28
 8002c74:	e00b      	b.n	8002c8e <rtenv_start_scheduler+0x66e>
				else
					tasks[current_task].stack->r0 = -1;
 8002c76:	492e      	ldr	r1, [pc, #184]	; (8002d30 <rtenv_start_scheduler+0x710>)
 8002c78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	4413      	add	r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	440b      	add	r3, r1
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c8a:	629a      	str	r2, [r3, #40]	; 0x28
			} break;
 8002c8c:	e1a6      	b.n	8002fdc <rtenv_start_scheduler+0x9bc>
 8002c8e:	e1a5      	b.n	8002fdc <rtenv_start_scheduler+0x9bc>
		case 0x7: /* setpriority */
			{
				int who = tasks[current_task].stack->r0;
 8002c90:	4927      	ldr	r1, [pc, #156]	; (8002d30 <rtenv_start_scheduler+0x710>)
 8002c92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c94:	4613      	mov	r3, r2
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	4413      	add	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	440b      	add	r3, r1
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca2:	633b      	str	r3, [r7, #48]	; 0x30
				int value = tasks[current_task].stack->r1;
 8002ca4:	4922      	ldr	r1, [pc, #136]	; (8002d30 <rtenv_start_scheduler+0x710>)
 8002ca6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ca8:	4613      	mov	r3, r2
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	4413      	add	r3, r2
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	440b      	add	r3, r1
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
				value = (value < 0) ? 0 : ((value > PRIORITY_LIMIT) ? PRIORITY_LIMIT : value);
 8002cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	db04      	blt.n	8002cc8 <rtenv_start_scheduler+0x6a8>
 8002cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc0:	2b27      	cmp	r3, #39	; 0x27
 8002cc2:	bfa8      	it	ge
 8002cc4:	2327      	movge	r3, #39	; 0x27
 8002cc6:	e000      	b.n	8002cca <rtenv_start_scheduler+0x6aa>
 8002cc8:	2300      	movs	r3, #0
 8002cca:	62fb      	str	r3, [r7, #44]	; 0x2c
				if (who > 0 && who < (int)task_count) {
 8002ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	dd38      	ble.n	8002d44 <rtenv_start_scheduler+0x724>
 8002cd2:	4b1a      	ldr	r3, [pc, #104]	; (8002d3c <rtenv_start_scheduler+0x71c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	dd32      	ble.n	8002d44 <rtenv_start_scheduler+0x724>
					tasks[who].priority = value;
 8002cde:	4914      	ldr	r1, [pc, #80]	; (8002d30 <rtenv_start_scheduler+0x710>)
 8002ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	4413      	add	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	440b      	add	r3, r1
 8002cec:	330c      	adds	r3, #12
 8002cee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cf0:	601a      	str	r2, [r3, #0]
					if (tasks[who].status == TASK_READY)
 8002cf2:	490f      	ldr	r1, [pc, #60]	; (8002d30 <rtenv_start_scheduler+0x710>)
 8002cf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	4413      	add	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	440b      	add	r3, r1
 8002d00:	3308      	adds	r3, #8
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d111      	bne.n	8002d2c <rtenv_start_scheduler+0x70c>
					    list_push(&ready_list[value], &tasks[who].list);
 8002d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0a:	00da      	lsls	r2, r3, #3
 8002d0c:	4b0c      	ldr	r3, [pc, #48]	; (8002d40 <rtenv_start_scheduler+0x720>)
 8002d0e:	18d1      	adds	r1, r2, r3
 8002d10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d12:	4613      	mov	r3, r2
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	4413      	add	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	f103 0210 	add.w	r2, r3, #16
 8002d1e:	4b04      	ldr	r3, [pc, #16]	; (8002d30 <rtenv_start_scheduler+0x710>)
 8002d20:	4413      	add	r3, r2
 8002d22:	4608      	mov	r0, r1
 8002d24:	4619      	mov	r1, r3
 8002d26:	f000 fa01 	bl	800312c <list_push>
				int who = tasks[current_task].stack->r0;
				int value = tasks[current_task].stack->r1;
				value = (value < 0) ? 0 : ((value > PRIORITY_LIMIT) ? PRIORITY_LIMIT : value);
				if (who > 0 && who < (int)task_count) {
					tasks[who].priority = value;
					if (tasks[who].status == TASK_READY)
 8002d2a:	e036      	b.n	8002d9a <rtenv_start_scheduler+0x77a>
 8002d2c:	e035      	b.n	8002d9a <rtenv_start_scheduler+0x77a>
 8002d2e:	bf00      	nop
 8002d30:	200007ec 	.word	0x200007ec
 8002d34:	200040ac 	.word	0x200040ac
 8002d38:	2000412c 	.word	0x2000412c
 8002d3c:	200000d4 	.word	0x200000d4
 8002d40:	200041ac 	.word	0x200041ac
					    list_push(&ready_list[value], &tasks[who].list);
				}
				else if (who == 0) {
 8002d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d11b      	bne.n	8002d82 <rtenv_start_scheduler+0x762>
					tasks[current_task].priority = value;
 8002d4a:	4999      	ldr	r1, [pc, #612]	; (8002fb0 <rtenv_start_scheduler+0x990>)
 8002d4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d4e:	4613      	mov	r3, r2
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	4413      	add	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	440b      	add	r3, r1
 8002d58:	330c      	adds	r3, #12
 8002d5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d5c:	601a      	str	r2, [r3, #0]
				    list_unshift(&ready_list[value], &tasks[current_task].list);
 8002d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d60:	00da      	lsls	r2, r3, #3
 8002d62:	4b94      	ldr	r3, [pc, #592]	; (8002fb4 <rtenv_start_scheduler+0x994>)
 8002d64:	18d1      	adds	r1, r2, r3
 8002d66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d68:	4613      	mov	r3, r2
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	4413      	add	r3, r2
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	f103 0210 	add.w	r2, r3, #16
 8002d74:	4b8e      	ldr	r3, [pc, #568]	; (8002fb0 <rtenv_start_scheduler+0x990>)
 8002d76:	4413      	add	r3, r2
 8002d78:	4608      	mov	r0, r1
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	f000 f9b6 	bl	80030ec <list_unshift>
 8002d80:	e00b      	b.n	8002d9a <rtenv_start_scheduler+0x77a>
				}
				else {
					tasks[current_task].stack->r0 = -1;
 8002d82:	498b      	ldr	r1, [pc, #556]	; (8002fb0 <rtenv_start_scheduler+0x990>)
 8002d84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d86:	4613      	mov	r3, r2
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	4413      	add	r3, r2
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	440b      	add	r3, r1
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d96:	629a      	str	r2, [r3, #40]	; 0x28
					break;
 8002d98:	e120      	b.n	8002fdc <rtenv_start_scheduler+0x9bc>
				}
				tasks[current_task].stack->r0 = 0;
 8002d9a:	4985      	ldr	r1, [pc, #532]	; (8002fb0 <rtenv_start_scheduler+0x990>)
 8002d9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d9e:	4613      	mov	r3, r2
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	4413      	add	r3, r2
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	440b      	add	r3, r1
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2200      	movs	r2, #0
 8002dac:	629a      	str	r2, [r3, #40]	; 0x28
			} break;
 8002dae:	e115      	b.n	8002fdc <rtenv_start_scheduler+0x9bc>
		case 0x8: /* mknod */
			tasks[current_task].stack->r0 =
 8002db0:	497f      	ldr	r1, [pc, #508]	; (8002fb0 <rtenv_start_scheduler+0x990>)
 8002db2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002db4:	4613      	mov	r3, r2
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	4413      	add	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	440b      	add	r3, r1
 8002dbe:	681c      	ldr	r4, [r3, #0]
				file_mknod(tasks[current_task].stack->r0,
 8002dc0:	497b      	ldr	r1, [pc, #492]	; (8002fb0 <rtenv_start_scheduler+0x990>)
 8002dc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	4413      	add	r3, r2
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	440b      	add	r3, r1
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	4976      	ldr	r1, [pc, #472]	; (8002fb0 <rtenv_start_scheduler+0x990>)
 8002dd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dd8:	4613      	mov	r3, r2
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	4413      	add	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	440b      	add	r3, r1
 8002de2:	3304      	adds	r3, #4
 8002de4:	6819      	ldr	r1, [r3, #0]
				           tasks[current_task].pid,
				           files,
					       tasks[current_task].stack->r2,
 8002de6:	4d72      	ldr	r5, [pc, #456]	; (8002fb0 <rtenv_start_scheduler+0x990>)
 8002de8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dea:	4613      	mov	r3, r2
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	4413      	add	r3, r2
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	442b      	add	r3, r5
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				}
				tasks[current_task].stack->r0 = 0;
			} break;
		case 0x8: /* mknod */
			tasks[current_task].stack->r0 =
				file_mknod(tasks[current_task].stack->r0,
 8002df8:	f107 0210 	add.w	r2, r7, #16
 8002dfc:	9200      	str	r2, [sp, #0]
 8002dfe:	f107 0208 	add.w	r2, r7, #8
 8002e02:	9201      	str	r2, [sp, #4]
 8002e04:	4a6c      	ldr	r2, [pc, #432]	; (8002fb8 <rtenv_start_scheduler+0x998>)
 8002e06:	f7fe f963 	bl	80010d0 <file_mknod>
 8002e0a:	4603      	mov	r3, r0
					break;
				}
				tasks[current_task].stack->r0 = 0;
			} break;
		case 0x8: /* mknod */
			tasks[current_task].stack->r0 =
 8002e0c:	62a3      	str	r3, [r4, #40]	; 0x28
				           tasks[current_task].pid,
				           files,
					       tasks[current_task].stack->r2,
					       &memory_pool,
					       &event_monitor);
			break;
 8002e0e:	e0e5      	b.n	8002fdc <rtenv_start_scheduler+0x9bc>
		case 0x9: /* sleep */
			if (tasks[current_task].stack->r0 != 0) {
 8002e10:	4967      	ldr	r1, [pc, #412]	; (8002fb0 <rtenv_start_scheduler+0x990>)
 8002e12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e14:	4613      	mov	r3, r2
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	4413      	add	r3, r2
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	440b      	add	r3, r1
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d02c      	beq.n	8002e80 <rtenv_start_scheduler+0x860>
				tasks[current_task].stack->r0 += tick_count;
 8002e26:	4962      	ldr	r1, [pc, #392]	; (8002fb0 <rtenv_start_scheduler+0x990>)
 8002e28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	4413      	add	r3, r2
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	440b      	add	r3, r1
 8002e34:	6819      	ldr	r1, [r3, #0]
 8002e36:	485e      	ldr	r0, [pc, #376]	; (8002fb0 <rtenv_start_scheduler+0x990>)
 8002e38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	4413      	add	r3, r2
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	4403      	add	r3, r0
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	628b      	str	r3, [r1, #40]	; 0x28
			    event_monitor_block(&event_monitor, TIME_EVENT,
 8002e4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e50:	4613      	mov	r3, r2
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	4413      	add	r3, r2
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	4a55      	ldr	r2, [pc, #340]	; (8002fb0 <rtenv_start_scheduler+0x990>)
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f107 0208 	add.w	r2, r7, #8
 8002e60:	4610      	mov	r0, r2
 8002e62:	218a      	movs	r1, #138	; 0x8a
 8002e64:	461a      	mov	r2, r3
 8002e66:	f7fd fde1 	bl	8000a2c <event_monitor_block>
			                        &tasks[current_task]);
				tasks[current_task].status = TASK_WAIT_TIME;
 8002e6a:	4951      	ldr	r1, [pc, #324]	; (8002fb0 <rtenv_start_scheduler+0x990>)
 8002e6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e6e:	4613      	mov	r3, r2
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	4413      	add	r3, r2
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	440b      	add	r3, r1
 8002e78:	3308      	adds	r3, #8
 8002e7a:	2204      	movs	r2, #4
 8002e7c:	601a      	str	r2, [r3, #0]
			}
			break;
 8002e7e:	e0ad      	b.n	8002fdc <rtenv_start_scheduler+0x9bc>
 8002e80:	e0ac      	b.n	8002fdc <rtenv_start_scheduler+0x9bc>
		case 0xa: /* lseek */
            {
		        /* Check fd is valid */
		        int fd = tasks[current_task].stack->r0;
 8002e82:	494b      	ldr	r1, [pc, #300]	; (8002fb0 <rtenv_start_scheduler+0x990>)
 8002e84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e86:	4613      	mov	r3, r2
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	4413      	add	r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	440b      	add	r3, r1
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e94:	62bb      	str	r3, [r7, #40]	; 0x28
		        if (fd < FILE_LIMIT && files[fd]) {
 8002e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e98:	2b1f      	cmp	r3, #31
 8002e9a:	dc55      	bgt.n	8002f48 <rtenv_start_scheduler+0x928>
 8002e9c:	4b46      	ldr	r3, [pc, #280]	; (8002fb8 <rtenv_start_scheduler+0x998>)
 8002e9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d04f      	beq.n	8002f48 <rtenv_start_scheduler+0x928>
		            /* Prepare file request, store reference in r0 */
		            requests[current_task].task = &tasks[current_task];
 8002ea8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002eaa:	4613      	mov	r3, r2
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	4413      	add	r3, r2
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	4a3f      	ldr	r2, [pc, #252]	; (8002fb0 <rtenv_start_scheduler+0x990>)
 8002eb4:	441a      	add	r2, r3
 8002eb6:	4941      	ldr	r1, [pc, #260]	; (8002fbc <rtenv_start_scheduler+0x99c>)
 8002eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eba:	011b      	lsls	r3, r3, #4
 8002ebc:	440b      	add	r3, r1
 8002ebe:	601a      	str	r2, [r3, #0]
		            requests[current_task].buf = NULL;
 8002ec0:	4a3e      	ldr	r2, [pc, #248]	; (8002fbc <rtenv_start_scheduler+0x99c>)
 8002ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ec4:	011b      	lsls	r3, r3, #4
 8002ec6:	4413      	add	r3, r2
 8002ec8:	3304      	adds	r3, #4
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]
		            requests[current_task].size = tasks[current_task].stack->r1;
 8002ece:	4938      	ldr	r1, [pc, #224]	; (8002fb0 <rtenv_start_scheduler+0x990>)
 8002ed0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	4413      	add	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	440b      	add	r3, r1
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	4936      	ldr	r1, [pc, #216]	; (8002fbc <rtenv_start_scheduler+0x99c>)
 8002ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ee6:	011b      	lsls	r3, r3, #4
 8002ee8:	440b      	add	r3, r1
 8002eea:	3308      	adds	r3, #8
 8002eec:	601a      	str	r2, [r3, #0]
		            requests[current_task].whence = tasks[current_task].stack->r2;
 8002eee:	4930      	ldr	r1, [pc, #192]	; (8002fb0 <rtenv_start_scheduler+0x990>)
 8002ef0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	4413      	add	r3, r2
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	440b      	add	r3, r1
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f00:	461a      	mov	r2, r3
 8002f02:	492e      	ldr	r1, [pc, #184]	; (8002fbc <rtenv_start_scheduler+0x99c>)
 8002f04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	440b      	add	r3, r1
 8002f0a:	330c      	adds	r3, #12
 8002f0c:	601a      	str	r2, [r3, #0]
		            tasks[current_task].stack->r0 =
 8002f0e:	4928      	ldr	r1, [pc, #160]	; (8002fb0 <rtenv_start_scheduler+0x990>)
 8002f10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f12:	4613      	mov	r3, r2
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	4413      	add	r3, r2
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	440b      	add	r3, r1
 8002f1c:	681b      	ldr	r3, [r3, #0]
		                (int)&requests[current_task];
 8002f1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f20:	0111      	lsls	r1, r2, #4
 8002f22:	4a26      	ldr	r2, [pc, #152]	; (8002fbc <rtenv_start_scheduler+0x99c>)
 8002f24:	440a      	add	r2, r1
		            /* Prepare file request, store reference in r0 */
		            requests[current_task].task = &tasks[current_task];
		            requests[current_task].buf = NULL;
		            requests[current_task].size = tasks[current_task].stack->r1;
		            requests[current_task].whence = tasks[current_task].stack->r2;
		            tasks[current_task].stack->r0 =
 8002f26:	629a      	str	r2, [r3, #40]	; 0x28
		                (int)&requests[current_task];

                    /* Read */
			        file_lseek(files[fd], &requests[current_task],
 8002f28:	4b23      	ldr	r3, [pc, #140]	; (8002fb8 <rtenv_start_scheduler+0x998>)
 8002f2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f32:	011a      	lsls	r2, r3, #4
 8002f34:	4b21      	ldr	r3, [pc, #132]	; (8002fbc <rtenv_start_scheduler+0x99c>)
 8002f36:	441a      	add	r2, r3
 8002f38:	f107 0308 	add.w	r3, r7, #8
 8002f3c:	4608      	mov	r0, r1
 8002f3e:	4611      	mov	r1, r2
 8002f40:	461a      	mov	r2, r3
 8002f42:	f7fe f91d 	bl	8001180 <file_lseek>
			                   &event_monitor);
			    }
			    else {
			        tasks[current_task].stack->r0 = -1;
			    }
			} break;
 8002f46:	e049      	b.n	8002fdc <rtenv_start_scheduler+0x9bc>
                    /* Read */
			        file_lseek(files[fd], &requests[current_task],
			                   &event_monitor);
			    }
			    else {
			        tasks[current_task].stack->r0 = -1;
 8002f48:	4919      	ldr	r1, [pc, #100]	; (8002fb0 <rtenv_start_scheduler+0x990>)
 8002f4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	4413      	add	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	440b      	add	r3, r1
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f5c:	629a      	str	r2, [r3, #40]	; 0x28
			    }
			} break;
 8002f5e:	e03d      	b.n	8002fdc <rtenv_start_scheduler+0x9bc>
		default: /* Catch all interrupts */
			if ((int)tasks[current_task].stack->r7 < 0) {
 8002f60:	4913      	ldr	r1, [pc, #76]	; (8002fb0 <rtenv_start_scheduler+0x990>)
 8002f62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f64:	4613      	mov	r3, r2
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	4413      	add	r3, r2
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	440b      	add	r3, r1
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	da32      	bge.n	8002fdc <rtenv_start_scheduler+0x9bc>
				unsigned int intr = -tasks[current_task].stack->r7 - 16;
 8002f76:	490e      	ldr	r1, [pc, #56]	; (8002fb0 <rtenv_start_scheduler+0x990>)
 8002f78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	4413      	add	r3, r2
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	440b      	add	r3, r1
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68da      	ldr	r2, [r3, #12]
 8002f88:	f06f 030f 	mvn.w	r3, #15
 8002f8c:	1a9b      	subs	r3, r3, r2
 8002f8e:	627b      	str	r3, [r7, #36]	; 0x24

				if (intr == SysTick_IRQn) {
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f96:	d113      	bne.n	8002fc0 <rtenv_start_scheduler+0x9a0>
					/* Never disable timer. We need it for pre-emption */
					timeup = 1;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	647b      	str	r3, [r7, #68]	; 0x44
					tick_count++;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	607b      	str	r3, [r7, #4]
					event_monitor_release(&event_monitor, TIME_EVENT);
 8002fa2:	f107 0308 	add.w	r3, r7, #8
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	218a      	movs	r1, #138	; 0x8a
 8002faa:	f7fd fd5d 	bl	8000a68 <event_monitor_release>
 8002fae:	e00d      	b.n	8002fcc <rtenv_start_scheduler+0x9ac>
 8002fb0:	200007ec 	.word	0x200007ec
 8002fb4:	200041ac 	.word	0x200041ac
 8002fb8:	200040ac 	.word	0x200040ac
 8002fbc:	2000412c 	.word	0x2000412c
				}
				else {
					/* Disable interrupt, interrupt_wait re-enables */
					NVIC_DisableIRQ(intr);
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	b25b      	sxtb	r3, r3
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fe f946 	bl	8001258 <NVIC_DisableIRQ>
				}
				event_monitor_release(&event_monitor, INTR_EVENT(intr));
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	332f      	adds	r3, #47	; 0x2f
 8002fd0:	f107 0208 	add.w	r2, r7, #8
 8002fd4:	4610      	mov	r0, r2
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	f7fd fd46 	bl	8000a68 <event_monitor_release>
			}
		}

        /* Rearrange ready list and event list */
		event_monitor_serve(&event_monitor);
 8002fdc:	f107 0308 	add.w	r3, r7, #8
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7fd fd55 	bl	8000a90 <event_monitor_serve>

		/* Check whether to context switch */
		task = &tasks[current_task];
 8002fe6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fe8:	4613      	mov	r3, r2
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	4413      	add	r3, r2
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	4a1f      	ldr	r2, [pc, #124]	; (8003070 <rtenv_start_scheduler+0xa50>)
 8002ff2:	4413      	add	r3, r2
 8002ff4:	623b      	str	r3, [r7, #32]
		if (timeup && ready_list[task->priority].next == &task->list)
 8002ff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d01b      	beq.n	8003034 <rtenv_start_scheduler+0xa14>
 8002ffc:	6a3b      	ldr	r3, [r7, #32]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	4a1c      	ldr	r2, [pc, #112]	; (8003074 <rtenv_start_scheduler+0xa54>)
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	4413      	add	r3, r2
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	3310      	adds	r3, #16
 800300c:	429a      	cmp	r2, r3
 800300e:	d111      	bne.n	8003034 <rtenv_start_scheduler+0xa14>
		    list_push(&ready_list[task->priority], &tasks[current_task].list);
 8003010:	6a3b      	ldr	r3, [r7, #32]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	00da      	lsls	r2, r3, #3
 8003016:	4b17      	ldr	r3, [pc, #92]	; (8003074 <rtenv_start_scheduler+0xa54>)
 8003018:	18d1      	adds	r1, r2, r3
 800301a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800301c:	4613      	mov	r3, r2
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	4413      	add	r3, r2
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	f103 0210 	add.w	r2, r3, #16
 8003028:	4b11      	ldr	r3, [pc, #68]	; (8003070 <rtenv_start_scheduler+0xa50>)
 800302a:	4413      	add	r3, r2
 800302c:	4608      	mov	r0, r1
 800302e:	4619      	mov	r1, r3
 8003030:	f000 f87c 	bl	800312c <list_push>

		/* Select next TASK_READY task */
		for (i = 0; list_empty(&ready_list[i]); i++);
 8003034:	2300      	movs	r3, #0
 8003036:	64bb      	str	r3, [r7, #72]	; 0x48
 8003038:	e002      	b.n	8003040 <rtenv_start_scheduler+0xa20>
 800303a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800303c:	3301      	adds	r3, #1
 800303e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003042:	00da      	lsls	r2, r3, #3
 8003044:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <rtenv_start_scheduler+0xa54>)
 8003046:	4413      	add	r3, r2
 8003048:	4618      	mov	r0, r3
 800304a:	f000 f827 	bl	800309c <list_empty>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1f2      	bne.n	800303a <rtenv_start_scheduler+0xa1a>

		list = ready_list[i].next;
 8003054:	4a07      	ldr	r2, [pc, #28]	; (8003074 <rtenv_start_scheduler+0xa54>)
 8003056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	4413      	add	r3, r2
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	61fb      	str	r3, [r7, #28]
		task = list_entry(list, struct task_control_block, list);
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	3b10      	subs	r3, #16
 8003064:	623b      	str	r3, [r7, #32]
		current_task = task->pid;
 8003066:	6a3b      	ldr	r3, [r7, #32]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	64fb      	str	r3, [r7, #76]	; 0x4c
	}
 800306c:	f7ff bb9d 	b.w	80027aa <rtenv_start_scheduler+0x18a>
 8003070:	200007ec 	.word	0x200007ec
 8003074:	200041ac 	.word	0x200041ac

08003078 <list_init>:
#include "list.h"

void list_init(struct list* list)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
    if (list) {
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d005      	beq.n	8003092 <list_init+0x1a>
        list->prev = list;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	601a      	str	r2, [r3, #0]
        list->next = list;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	605a      	str	r2, [r3, #4]
    }
}
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <list_empty>:

int list_empty(struct list *list)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
    return list->next == list;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	bf14      	ite	ne
 80030ae:	2300      	movne	r3, #0
 80030b0:	2301      	moveq	r3, #1
 80030b2:	b2db      	uxtb	r3, r3
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <list_remove>:

void list_remove(struct list *list)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
    if (list) {
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d009      	beq.n	80030e2 <list_remove+0x22>
        list->next->prev = list->prev;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6812      	ldr	r2, [r2, #0]
 80030d6:	601a      	str	r2, [r3, #0]
        list->prev->next = list->next;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	6852      	ldr	r2, [r2, #4]
 80030e0:	605a      	str	r2, [r3, #4]
    }
}
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <list_unshift>:

void list_unshift(struct list *list, struct list *new)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
    if (list && new) {
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d013      	beq.n	8003124 <list_unshift+0x38>
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d010      	beq.n	8003124 <list_unshift+0x38>
        list_remove(new);
 8003102:	6838      	ldr	r0, [r7, #0]
 8003104:	f7ff ffdc 	bl	80030c0 <list_remove>

        list->next->prev = new;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	601a      	str	r2, [r3, #0]
        new->next = list->next;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	605a      	str	r2, [r3, #4]
        new->prev = list;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	601a      	str	r2, [r3, #0]
        list->next = new;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	605a      	str	r2, [r3, #4]
    }
}
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop

0800312c <list_push>:

void list_push(struct list *list, struct list *new)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
    if (list && new) {
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d01a      	beq.n	8003172 <list_push+0x46>
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d017      	beq.n	8003172 <list_push+0x46>
        /* Remove new from origin list */
        new->prev->next = new->next;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	6852      	ldr	r2, [r2, #4]
 800314a:	605a      	str	r2, [r3, #4]
        new->next->prev = new->prev;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	6812      	ldr	r2, [r2, #0]
 8003154:	601a      	str	r2, [r3, #0]

        list->prev->next = new;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	605a      	str	r2, [r3, #4]
        new->next = list;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	605a      	str	r2, [r3, #4]
        new->prev = list->prev;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	601a      	str	r2, [r3, #0]
        list->prev = new;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	601a      	str	r2, [r3, #0]
    }
}
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <list_shift>:

struct list* list_shift(struct list *list)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
    struct list *first = list->next;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	60fb      	str	r3, [r7, #12]

    if (first == list)
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	429a      	cmp	r2, r3
 8003190:	d101      	bne.n	8003196 <list_shift+0x1a>
        return 0;
 8003192:	2300      	movs	r3, #0
 8003194:	e008      	b.n	80031a8 <list_shift+0x2c>

    list->next = first->next;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	685a      	ldr	r2, [r3, #4]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	605a      	str	r2, [r3, #4]
    list->next->prev = list;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	601a      	str	r2, [r3, #0]

    return first;
 80031a6:	68fb      	ldr	r3, [r7, #12]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3714      	adds	r7, #20
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <memory_pool_init>:
#include "memory-pool.h"



void memory_pool_init(struct memory_pool *pool, size_t size, char *memory)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
    pool->offset = 0;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]
    pool->size = size;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	605a      	str	r2, [r3, #4]
    pool->memory = memory;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	609a      	str	r2, [r3, #8]
}
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <memory_pool_alloc>:

void *memory_pool_alloc(struct memory_pool *pool, size_t size)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
    if (pool->offset + size <= pool->size) {
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	461a      	mov	r2, r3
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	441a      	add	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d80f      	bhi.n	8003218 <memory_pool_alloc+0x3c>
        char *alloc = pool->memory + pool->offset;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4413      	add	r3, r2
 8003202:	60fb      	str	r3, [r7, #12]
        pool->offset += size;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	461a      	mov	r2, r3
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	4413      	add	r3, r2
 800320e:	461a      	mov	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	601a      	str	r2, [r3, #0]
        return alloc;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	e000      	b.n	800321a <memory_pool_alloc+0x3e>
    }

    return NULL;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3714      	adds	r7, #20
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop

08003228 <mq_open>:
	.lseekable = NULL,
	.lseek = NULL,
};

int mq_open(const char *name, int oflag)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
	if (oflag & O_CREAT)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b00      	cmp	r3, #0
 800323a:	d004      	beq.n	8003246 <mq_open+0x1e>
		mkfile(name, 0, S_IMSGQ);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	2100      	movs	r1, #0
 8003240:	2202      	movs	r2, #2
 8003242:	f7fd fdb5 	bl	8000db0 <mkfile>
	return open(name, 0);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	2100      	movs	r1, #0
 800324a:	f7fd fe23 	bl	8000e94 <open>
 800324e:	4603      	mov	r3, r0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <mq_init>:

int
mq_init(int fd, int driver_pid, struct file *files[],
        struct memory_pool *memory_pool, struct event_monitor *monitor)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
 8003264:	603b      	str	r3, [r7, #0]
    struct pipe_ringbuffer *pipe;

    pipe = memory_pool_alloc(memory_pool, sizeof(struct pipe_ringbuffer));
 8003266:	6838      	ldr	r0, [r7, #0]
 8003268:	2158      	movs	r1, #88	; 0x58
 800326a:	f7ff ffb7 	bl	80031dc <memory_pool_alloc>
 800326e:	6178      	str	r0, [r7, #20]

    if (!pipe)
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d102      	bne.n	800327c <mq_init+0x24>
        return -1;
 8003276:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800327a:	e033      	b.n	80032e4 <mq_init+0x8c>

    pipe->start = 0;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	2200      	movs	r2, #0
 8003280:	609a      	str	r2, [r3, #8]
    pipe->end = 0;
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	2200      	movs	r2, #0
 8003286:	60da      	str	r2, [r3, #12]
	pipe->file.ops = &mq_ops;
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	4a18      	ldr	r2, [pc, #96]	; (80032ec <mq_init+0x94>)
 800328c:	605a      	str	r2, [r3, #4]
    files[fd] = &pipe->file;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	4413      	add	r3, r2
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	601a      	str	r2, [r3, #0]

    pipe->read_event = event_monitor_find_free(monitor);
 800329a:	6a38      	ldr	r0, [r7, #32]
 800329c:	f7fd fb76 	bl	800098c <event_monitor_find_free>
 80032a0:	4602      	mov	r2, r0
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	611a      	str	r2, [r3, #16]
    event_monitor_register(monitor, pipe->read_event, pipe_read_release, files[fd]);
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	691a      	ldr	r2, [r3, #16]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	440b      	add	r3, r1
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6a38      	ldr	r0, [r7, #32]
 80032b6:	4611      	mov	r1, r2
 80032b8:	4a0d      	ldr	r2, [pc, #52]	; (80032f0 <mq_init+0x98>)
 80032ba:	f7fd fb8d 	bl	80009d8 <event_monitor_register>

    pipe->write_event = event_monitor_find_free(monitor);
 80032be:	6a38      	ldr	r0, [r7, #32]
 80032c0:	f7fd fb64 	bl	800098c <event_monitor_find_free>
 80032c4:	4602      	mov	r2, r0
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	615a      	str	r2, [r3, #20]
    event_monitor_register(monitor, pipe->write_event, pipe_write_release, files[fd]);
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	695a      	ldr	r2, [r3, #20]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	440b      	add	r3, r1
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6a38      	ldr	r0, [r7, #32]
 80032da:	4611      	mov	r1, r2
 80032dc:	4a05      	ldr	r2, [pc, #20]	; (80032f4 <mq_init+0x9c>)
 80032de:	f7fd fb7b 	bl	80009d8 <event_monitor_register>
    return 0;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3718      	adds	r7, #24
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	20000034 	.word	0x20000034
 80032f0:	08003efd 	.word	0x08003efd
 80032f4:	08003f2d 	.word	0x08003f2d

080032f8 <mq_readable>:

int
mq_readable (struct file *file, struct file_request *request,
             struct event_monitor *monitor)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08a      	sub	sp, #40	; 0x28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
	size_t msg_len;

	struct pipe_ringbuffer *pipe =
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	61bb      	str	r3, [r7, #24]
	    container_of(file, struct pipe_ringbuffer, file);

	/* Trying to read too much */
	if ((size_t)PIPE_LEN(*pipe) < sizeof(size_t)) {
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	1ad2      	subs	r2, r2, r3
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	68d9      	ldr	r1, [r3, #12]
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	4299      	cmp	r1, r3
 800331c:	da01      	bge.n	8003322 <mq_readable+0x2a>
 800331e:	2340      	movs	r3, #64	; 0x40
 8003320:	e000      	b.n	8003324 <mq_readable+0x2c>
 8003322:	2300      	movs	r3, #0
 8003324:	4413      	add	r3, r2
 8003326:	2b03      	cmp	r3, #3
 8003328:	d80a      	bhi.n	8003340 <mq_readable+0x48>
		/* Nothing to read */
	    event_monitor_block(monitor, pipe->read_event, request->task);
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	691a      	ldr	r2, [r3, #16]
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	4611      	mov	r1, r2
 8003336:	461a      	mov	r2, r3
 8003338:	f7fd fb78 	bl	8000a2c <event_monitor_block>
		return FILE_ACCESS_BLOCK;
 800333c:	2300      	movs	r3, #0
 800333e:	e028      	b.n	8003392 <mq_readable+0x9a>
	}

	PIPE_PEEK(*pipe, msg_len, 4);
 8003340:	2304      	movs	r3, #4
 8003342:	627b      	str	r3, [r7, #36]	; 0x24
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	623b      	str	r3, [r7, #32]
 800334a:	2300      	movs	r3, #0
 800334c:	61fb      	str	r3, [r7, #28]
 800334e:	e011      	b.n	8003374 <mq_readable+0x7c>
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	1c5a      	adds	r2, r3, #1
 8003354:	61fa      	str	r2, [r7, #28]
 8003356:	f107 0214 	add.w	r2, r7, #20
 800335a:	441a      	add	r2, r3
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	1c59      	adds	r1, r3, #1
 8003360:	6239      	str	r1, [r7, #32]
 8003362:	69b9      	ldr	r1, [r7, #24]
 8003364:	440b      	add	r3, r1
 8003366:	7e1b      	ldrb	r3, [r3, #24]
 8003368:	7013      	strb	r3, [r2, #0]
 800336a:	6a3b      	ldr	r3, [r7, #32]
 800336c:	2b3f      	cmp	r3, #63	; 0x3f
 800336e:	dd01      	ble.n	8003374 <mq_readable+0x7c>
 8003370:	2300      	movs	r3, #0
 8003372:	623b      	str	r3, [r7, #32]
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	1e5a      	subs	r2, r3, #1
 8003378:	627a      	str	r2, [r7, #36]	; 0x24
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1e8      	bne.n	8003350 <mq_readable+0x58>

	if (msg_len > request->size) {
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	461a      	mov	r2, r3
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	429a      	cmp	r2, r3
 8003388:	d202      	bcs.n	8003390 <mq_readable+0x98>
		/* Trying to read more than buffer size */
		return FILE_ACCESS_ERROR;
 800338a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800338e:	e000      	b.n	8003392 <mq_readable+0x9a>
	}
	return FILE_ACCESS_ACCEPT;
 8003390:	2301      	movs	r3, #1
}
 8003392:	4618      	mov	r0, r3
 8003394:	3728      	adds	r7, #40	; 0x28
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop

0800339c <mq_writable>:

int
mq_writable (struct file *file, struct file_request *request,
             struct event_monitor *monitor)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
	size_t total_len = sizeof(size_t) + request->size;
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	3304      	adds	r3, #4
 80033ae:	617b      	str	r3, [r7, #20]
	struct pipe_ringbuffer *pipe =
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	613b      	str	r3, [r7, #16]
	    container_of(file, struct pipe_ringbuffer, file);

	/* If the write would be non-atomic */
	if (total_len > PIPE_BUF) {
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	2b40      	cmp	r3, #64	; 0x40
 80033b8:	d902      	bls.n	80033c0 <mq_writable+0x24>
		return FILE_ACCESS_ERROR;
 80033ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033be:	e01f      	b.n	8003400 <mq_writable+0x64>
	}
	/* Preserve 1 byte to distiguish empty or full */
	if ((size_t)PIPE_BUF - PIPE_LEN(*pipe) - 1 < total_len) {
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	1ad2      	subs	r2, r2, r3
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	68d9      	ldr	r1, [r3, #12]
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	4299      	cmp	r1, r3
 80033d4:	da01      	bge.n	80033da <mq_writable+0x3e>
 80033d6:	2340      	movs	r3, #64	; 0x40
 80033d8:	e000      	b.n	80033dc <mq_writable+0x40>
 80033da:	2300      	movs	r3, #0
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	f103 023f 	add.w	r2, r3, #63	; 0x3f
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d20a      	bcs.n	80033fe <mq_writable+0x62>
		/* Trying to write more than we have space for: block */
	    event_monitor_block(monitor, pipe->write_event, request->task);
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	695a      	ldr	r2, [r3, #20]
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	4611      	mov	r1, r2
 80033f4:	461a      	mov	r2, r3
 80033f6:	f7fd fb19 	bl	8000a2c <event_monitor_block>
		return FILE_ACCESS_BLOCK;
 80033fa:	2300      	movs	r3, #0
 80033fc:	e000      	b.n	8003400 <mq_writable+0x64>
	}
	return FILE_ACCESS_ACCEPT;
 80033fe:	2301      	movs	r3, #1
}
 8003400:	4618      	mov	r0, r3
 8003402:	3718      	adds	r7, #24
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <mq_read>:

int
mq_read (struct file *file, struct file_request *request,
         struct event_monitor *monitor)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b088      	sub	sp, #32
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
	size_t msg_len;
	size_t i;
	struct pipe_ringbuffer *pipe =
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	61bb      	str	r3, [r7, #24]
	    container_of(file, struct pipe_ringbuffer, file);

	/* Get length */
	for (i = 0; i < 4; i++) {
 8003418:	2300      	movs	r3, #0
 800341a:	61fb      	str	r3, [r7, #28]
 800341c:	e018      	b.n	8003450 <mq_read+0x48>
		PIPE_POP(*pipe, *(((char*)&msg_len)+i));
 800341e:	f107 0214 	add.w	r2, r7, #20
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	4413      	add	r3, r2
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	6892      	ldr	r2, [r2, #8]
 800342a:	69b9      	ldr	r1, [r7, #24]
 800342c:	440a      	add	r2, r1
 800342e:	7e12      	ldrb	r2, [r2, #24]
 8003430:	701a      	strb	r2, [r3, #0]
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	1c5a      	adds	r2, r3, #1
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	609a      	str	r2, [r3, #8]
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	2b3f      	cmp	r3, #63	; 0x3f
 8003442:	dd02      	ble.n	800344a <mq_read+0x42>
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	2200      	movs	r2, #0
 8003448:	609a      	str	r2, [r3, #8]
	size_t i;
	struct pipe_ringbuffer *pipe =
	    container_of(file, struct pipe_ringbuffer, file);

	/* Get length */
	for (i = 0; i < 4; i++) {
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	3301      	adds	r3, #1
 800344e:	61fb      	str	r3, [r7, #28]
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	2b03      	cmp	r3, #3
 8003454:	d9e3      	bls.n	800341e <mq_read+0x16>
		PIPE_POP(*pipe, *(((char*)&msg_len)+i));
	}
	/* Copy data into buf */
	for (i = 0; i < msg_len; i++) {
 8003456:	2300      	movs	r3, #0
 8003458:	61fb      	str	r3, [r7, #28]
 800345a:	e018      	b.n	800348e <mq_read+0x86>
		PIPE_POP(*pipe, request->buf[i]);
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	4413      	add	r3, r2
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	6892      	ldr	r2, [r2, #8]
 8003468:	69b9      	ldr	r1, [r7, #24]
 800346a:	440a      	add	r2, r1
 800346c:	7e12      	ldrb	r2, [r2, #24]
 800346e:	701a      	strb	r2, [r3, #0]
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	609a      	str	r2, [r3, #8]
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	2b3f      	cmp	r3, #63	; 0x3f
 8003480:	dd02      	ble.n	8003488 <mq_read+0x80>
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	2200      	movs	r2, #0
 8003486:	609a      	str	r2, [r3, #8]
	/* Get length */
	for (i = 0; i < 4; i++) {
		PIPE_POP(*pipe, *(((char*)&msg_len)+i));
	}
	/* Copy data into buf */
	for (i = 0; i < msg_len; i++) {
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	3301      	adds	r3, #1
 800348c:	61fb      	str	r3, [r7, #28]
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	69fa      	ldr	r2, [r7, #28]
 8003492:	429a      	cmp	r2, r3
 8003494:	d3e2      	bcc.n	800345c <mq_read+0x54>
		PIPE_POP(*pipe, request->buf[i]);
	}

    /* Prepared to write */
	event_monitor_release(monitor, pipe->write_event);
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	4619      	mov	r1, r3
 800349e:	f7fd fae3 	bl	8000a68 <event_monitor_release>
	return msg_len;
 80034a2:	697b      	ldr	r3, [r7, #20]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3720      	adds	r7, #32
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <mq_write>:

int
mq_write (struct file *file, struct file_request *request,
          struct event_monitor *monitor)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
	size_t i;
	struct pipe_ringbuffer *pipe =
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	613b      	str	r3, [r7, #16]
	    container_of(file, struct pipe_ringbuffer, file);

	/* Copy count into pipe */
	for (i = 0; i < sizeof(size_t); i++)
 80034bc:	2300      	movs	r3, #0
 80034be:	617b      	str	r3, [r7, #20]
 80034c0:	e019      	b.n	80034f6 <mq_write+0x4a>
		PIPE_PUSH(*pipe,*(((char*)&request->size)+i));
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	f102 0108 	add.w	r1, r2, #8
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	440a      	add	r2, r1
 80034d0:	7812      	ldrb	r2, [r2, #0]
 80034d2:	6939      	ldr	r1, [r7, #16]
 80034d4:	440b      	add	r3, r1
 80034d6:	761a      	strb	r2, [r3, #24]
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	1c5a      	adds	r2, r3, #1
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	60da      	str	r2, [r3, #12]
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	2b3f      	cmp	r3, #63	; 0x3f
 80034e8:	dd02      	ble.n	80034f0 <mq_write+0x44>
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	2200      	movs	r2, #0
 80034ee:	60da      	str	r2, [r3, #12]
	size_t i;
	struct pipe_ringbuffer *pipe =
	    container_of(file, struct pipe_ringbuffer, file);

	/* Copy count into pipe */
	for (i = 0; i < sizeof(size_t); i++)
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	3301      	adds	r3, #1
 80034f4:	617b      	str	r3, [r7, #20]
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2b03      	cmp	r3, #3
 80034fa:	d9e2      	bls.n	80034c2 <mq_write+0x16>
		PIPE_PUSH(*pipe,*(((char*)&request->size)+i));
	/* Copy data into pipe */
	for (i = 0; i < request->size; i++)
 80034fc:	2300      	movs	r3, #0
 80034fe:	617b      	str	r3, [r7, #20]
 8003500:	e018      	b.n	8003534 <mq_write+0x88>
		PIPE_PUSH(*pipe,request->buf[i]);
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	6851      	ldr	r1, [r2, #4]
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	440a      	add	r2, r1
 800350e:	7812      	ldrb	r2, [r2, #0]
 8003510:	6939      	ldr	r1, [r7, #16]
 8003512:	440b      	add	r3, r1
 8003514:	761a      	strb	r2, [r3, #24]
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	1c5a      	adds	r2, r3, #1
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	60da      	str	r2, [r3, #12]
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	2b3f      	cmp	r3, #63	; 0x3f
 8003526:	dd02      	ble.n	800352e <mq_write+0x82>
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	2200      	movs	r2, #0
 800352c:	60da      	str	r2, [r3, #12]

	/* Copy count into pipe */
	for (i = 0; i < sizeof(size_t); i++)
		PIPE_PUSH(*pipe,*(((char*)&request->size)+i));
	/* Copy data into pipe */
	for (i = 0; i < request->size; i++)
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	3301      	adds	r3, #1
 8003532:	617b      	str	r3, [r7, #20]
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	461a      	mov	r2, r3
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	429a      	cmp	r2, r3
 800353e:	d8e0      	bhi.n	8003502 <mq_write+0x56>
		PIPE_PUSH(*pipe,request->buf[i]);

    /* Prepared to read */
	event_monitor_release(monitor, pipe->read_event);
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	4619      	mov	r1, r3
 8003548:	f7fd fa8e 	bl	8000a68 <event_monitor_release>
	return request->size;
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	689b      	ldr	r3, [r3, #8]
}
 8003550:	4618      	mov	r0, r3
 8003552:	3718      	adds	r7, #24
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <pathserver>:
 * The first TASK_LIMIT FDs are reserved for use by their respective tasks.
 * 0-2 are reserved FDs and are skipped.
 * The server registers itself at /sys/pathserver
 */
void pathserver()
{
 8003558:	b590      	push	{r4, r7, lr}
 800355a:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464
 800355e:	af00      	add	r7, sp, #0
	char paths[FILE_LIMIT - TASK_LIMIT - 3][PATH_MAX];
	int npaths = 0;
 8003560:	2300      	movs	r3, #0
 8003562:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
	int fs_fds[FS_LIMIT];
	char fs_types[FS_LIMIT][FS_TYPE_MAX];
	int nfs_types = 0;
 8003566:	2300      	movs	r3, #0
 8003568:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
	struct mount mounts[MOUNT_LIMIT];
	int nmounts = 0;
 800356c:	2300      	movs	r3, #0
 800356e:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
	int i = 0;
 8003572:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003576:	2200      	movs	r2, #0
 8003578:	601a      	str	r2, [r3, #0]
	int cmd = 0;
 800357a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800357e:	2200      	movs	r2, #0
 8003580:	601a      	str	r2, [r3, #0]
	unsigned int plen = 0;
 8003582:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]
	unsigned int replyfd = 0;
 800358a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
	char path[PATH_MAX];
	int dev = 0;
 8003592:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003596:	2200      	movs	r2, #0
 8003598:	601a      	str	r2, [r3, #0]
	int newfd = 0;
 800359a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]
	char fs_type[FS_TYPE_MAX];
	int status;

	memcpy(paths[npaths++], PATH_SERVER_NAME, sizeof(PATH_SERVER_NAME));
 80035a2:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 80035a6:	1c5a      	adds	r2, r3, #1
 80035a8:	f8c7 245c 	str.w	r2, [r7, #1116]	; 0x45c
 80035ac:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 80035b0:	015b      	lsls	r3, r3, #5
 80035b2:	4413      	add	r3, r2
 80035b4:	4618      	mov	r0, r3
 80035b6:	49b6      	ldr	r1, [pc, #728]	; (8003890 <pathserver+0x338>)
 80035b8:	2210      	movs	r2, #16
 80035ba:	f014 fca1 	bl	8017f00 <memcpy>
 80035be:	e000      	b.n	80035c2 <pathserver+0x6a>
		    }   break;

		    default:
		        ;
		}
	}
 80035c0:	bf00      	nop
	int status;

	memcpy(paths[npaths++], PATH_SERVER_NAME, sizeof(PATH_SERVER_NAME));

	while (1) {
		read(PATHSERVER_FD, &cmd, 4);
 80035c2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80035c6:	200b      	movs	r0, #11
 80035c8:	4619      	mov	r1, r3
 80035ca:	2204      	movs	r2, #4
 80035cc:	f014 fcf5 	bl	8017fba <read>
		read(PATHSERVER_FD, &replyfd, 4);
 80035d0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80035d4:	200b      	movs	r0, #11
 80035d6:	4619      	mov	r1, r3
 80035d8:	2204      	movs	r2, #4
 80035da:	f014 fcee 	bl	8017fba <read>

		switch (cmd) {
 80035de:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	3b01      	subs	r3, #1
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	d8ea      	bhi.n	80035c0 <pathserver+0x68>
 80035ea:	a201      	add	r2, pc, #4	; (adr r2, 80035f0 <pathserver+0x98>)
 80035ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f0:	08003605 	.word	0x08003605
 80035f4:	080036ad 	.word	0x080036ad
 80035f8:	080038e5 	.word	0x080038e5
 80035fc:	08003957 	.word	0x08003957
 8003600:	080039d7 	.word	0x080039d7
		    case PATH_CMD_MKFILE:
		        read(PATHSERVER_FD, &plen, 4);
 8003604:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003608:	200b      	movs	r0, #11
 800360a:	4619      	mov	r1, r3
 800360c:	2204      	movs	r2, #4
 800360e:	f014 fcd4 	bl	8017fba <read>
		        read(PATHSERVER_FD, path, plen);
 8003612:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800361c:	200b      	movs	r0, #11
 800361e:	4611      	mov	r1, r2
 8003620:	461a      	mov	r2, r3
 8003622:	f014 fcca 	bl	8017fba <read>
			    read(PATHSERVER_FD, &dev, 4);
 8003626:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800362a:	200b      	movs	r0, #11
 800362c:	4619      	mov	r1, r3
 800362e:	2204      	movs	r2, #4
 8003630:	f014 fcc3 	bl	8017fba <read>
			    newfd = npaths + 3 + TASK_LIMIT;
 8003634:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8003638:	f103 020b 	add.w	r2, r3, #11
 800363c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003640:	601a      	str	r2, [r3, #0]
			    if (mknod(newfd, 0, dev) == 0) {
 8003642:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4610      	mov	r0, r2
 8003650:	2100      	movs	r1, #0
 8003652:	461a      	mov	r2, r3
 8003654:	f014 fccd 	bl	8017ff2 <mknod>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d115      	bne.n	800368a <pathserver+0x132>
			        memcpy(paths[npaths], path, plen);
 800365e:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8003662:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8003666:	015b      	lsls	r3, r3, #5
 8003668:	18d1      	adds	r1, r2, r3
 800366a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8003674:	4608      	mov	r0, r1
 8003676:	4611      	mov	r1, r2
 8003678:	461a      	mov	r2, r3
 800367a:	f014 fc41 	bl	8017f00 <memcpy>
			        npaths++;
 800367e:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8003682:	3301      	adds	r3, #1
 8003684:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 8003688:	e004      	b.n	8003694 <pathserver+0x13c>
			    }
			    else {
			        newfd = -1;
 800368a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800368e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003692:	601a      	str	r2, [r3, #0]
			    }
			    write(replyfd, &newfd, 4);
 8003694:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	461a      	mov	r2, r3
 800369c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80036a0:	4610      	mov	r0, r2
 80036a2:	4619      	mov	r1, r3
 80036a4:	2204      	movs	r2, #4
 80036a6:	f014 fc81 	bl	8017fac <write>
		        break;
 80036aa:	e299      	b.n	8003be0 <pathserver+0x688>

		    case PATH_CMD_OPEN:
		        read(PATHSERVER_FD, &plen, 4);
 80036ac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80036b0:	200b      	movs	r0, #11
 80036b2:	4619      	mov	r1, r3
 80036b4:	2204      	movs	r2, #4
 80036b6:	f014 fc80 	bl	8017fba <read>
		        read(PATHSERVER_FD, path, plen);
 80036ba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80036c4:	200b      	movs	r0, #11
 80036c6:	4611      	mov	r1, r2
 80036c8:	461a      	mov	r2, r3
 80036ca:	f014 fc76 	bl	8017fba <read>
		        /* Search for path */
			    for (i = 0; i < npaths; i++) {
 80036ce:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80036d2:	2200      	movs	r2, #0
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	e03f      	b.n	8003758 <pathserver+0x200>
				    if (*paths[i] && strcmp(path, paths[i]) == 0) {
 80036d8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 80036e2:	015b      	lsls	r3, r3, #5
 80036e4:	4413      	add	r3, r2
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d02e      	beq.n	800374a <pathserver+0x1f2>
 80036ec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 80036f6:	015b      	lsls	r3, r3, #5
 80036f8:	4413      	add	r3, r2
 80036fa:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80036fe:	4610      	mov	r0, r2
 8003700:	4619      	mov	r1, r3
 8003702:	f001 fb33 	bl	8004d6c <strcmp>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d11e      	bne.n	800374a <pathserver+0x1f2>
					    i += 3; /* 0-2 are reserved */
 800370c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	1cda      	adds	r2, r3, #3
 8003714:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003718:	601a      	str	r2, [r3, #0]
					    i += TASK_LIMIT; /* FDs reserved for tasks */
 800371a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f103 0208 	add.w	r2, r3, #8
 8003724:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003728:	601a      	str	r2, [r3, #0]
					    write(replyfd, &i, 4);
 800372a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	461a      	mov	r2, r3
 8003732:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003736:	4610      	mov	r0, r2
 8003738:	4619      	mov	r1, r3
 800373a:	2204      	movs	r2, #4
 800373c:	f014 fc36 	bl	8017fac <write>
					    i = 0;
 8003740:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003744:	2200      	movs	r2, #0
 8003746:	601a      	str	r2, [r3, #0]
					    break;
 8003748:	e00d      	b.n	8003766 <pathserver+0x20e>

		    case PATH_CMD_OPEN:
		        read(PATHSERVER_FD, &plen, 4);
		        read(PATHSERVER_FD, path, plen);
		        /* Search for path */
			    for (i = 0; i < npaths; i++) {
 800374a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	1c5a      	adds	r2, r3, #1
 8003752:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8003762:	429a      	cmp	r2, r3
 8003764:	dbb8      	blt.n	80036d8 <pathserver+0x180>
					    i = 0;
					    break;
				    }
			    }

			    if (i < npaths) {
 8003766:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8003770:	429a      	cmp	r2, r3
 8003772:	da00      	bge.n	8003776 <pathserver+0x21e>
				    break;
 8003774:	e234      	b.n	8003be0 <pathserver+0x688>
			    }

		        /* Search for mount point */
			    for (i = 0; i < nmounts; i++) {
 8003776:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800377a:	2200      	movs	r2, #0
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	e090      	b.n	80038a2 <pathserver+0x34a>
				    if (*mounts[i].path
 8003780:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 800378a:	4613      	mov	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	440b      	add	r3, r1
 8003794:	3308      	adds	r3, #8
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d07b      	beq.n	8003894 <pathserver+0x33c>
				            && strncmp(path, mounts[i].path,
 800379c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80037a6:	4613      	mov	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4413      	add	r3, r2
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	3308      	adds	r3, #8
 80037b0:	18cc      	adds	r4, r1, r3
				                       strlen(mounts[i].path)) == 0) {
 80037b2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80037bc:	4613      	mov	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	3308      	adds	r3, #8
 80037c6:	440b      	add	r3, r1
			    }

		        /* Search for mount point */
			    for (i = 0; i < nmounts; i++) {
				    if (*mounts[i].path
				            && strncmp(path, mounts[i].path,
 80037c8:	4618      	mov	r0, r3
 80037ca:	f001 fb09 	bl	8004de0 <strlen>
 80037ce:	4603      	mov	r3, r0
 80037d0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80037d4:	4610      	mov	r0, r2
 80037d6:	4621      	mov	r1, r4
 80037d8:	461a      	mov	r2, r3
 80037da:	f001 fad5 	bl	8004d88 <strncmp>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d157      	bne.n	8003894 <pathserver+0x33c>
				                       strlen(mounts[i].path)) == 0) {
				        int mlen = strlen(mounts[i].path);
 80037e4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80037ee:	4613      	mov	r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4413      	add	r3, r2
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	3308      	adds	r3, #8
 80037f8:	440b      	add	r3, r1
 80037fa:	4618      	mov	r0, r3
 80037fc:	f001 faf0 	bl	8004de0 <strlen>
 8003800:	4603      	mov	r3, r0
 8003802:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
					    struct fs_request request;
					    request.cmd = FS_CMD_OPEN;
 8003806:	f107 0320 	add.w	r3, r7, #32
 800380a:	2201      	movs	r2, #1
 800380c:	601a      	str	r2, [r3, #0]
					    request.from = replyfd;
 800380e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	461a      	mov	r2, r3
 8003816:	f107 0320 	add.w	r3, r7, #32
 800381a:	605a      	str	r2, [r3, #4]
					    request.device = mounts[i].dev;
 800381c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003826:	4613      	mov	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	440b      	add	r3, r1
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	f107 0320 	add.w	r3, r7, #32
 8003836:	609a      	str	r2, [r3, #8]
					    request.pos = mlen; /* search starting position */
 8003838:	f107 0320 	add.w	r3, r7, #32
 800383c:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 8003840:	635a      	str	r2, [r3, #52]	; 0x34
					    memcpy(request.path, &path, plen);
 8003842:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f107 0220 	add.w	r2, r7, #32
 800384c:	f102 0110 	add.w	r1, r2, #16
 8003850:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8003854:	4608      	mov	r0, r1
 8003856:	4611      	mov	r1, r2
 8003858:	461a      	mov	r2, r3
 800385a:	f014 fb51 	bl	8017f00 <memcpy>
					    write(mounts[i].fs, &request, sizeof(request));
 800385e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003868:	4613      	mov	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4413      	add	r3, r2
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	440b      	add	r3, r1
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	f107 0320 	add.w	r3, r7, #32
 8003878:	4610      	mov	r0, r2
 800387a:	4619      	mov	r1, r3
 800387c:	2238      	movs	r2, #56	; 0x38
 800387e:	f014 fb95 	bl	8017fac <write>
					    i = 0;
 8003882:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003886:	2200      	movs	r2, #0
 8003888:	601a      	str	r2, [r3, #0]
					    break;
 800388a:	bf00      	nop
 800388c:	e011      	b.n	80038b2 <pathserver+0x35a>
 800388e:	bf00      	nop
 8003890:	0801a528 	.word	0x0801a528
			    if (i < npaths) {
				    break;
			    }

		        /* Search for mount point */
			    for (i = 0; i < nmounts; i++) {
 8003894:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	1c5a      	adds	r2, r3, #1
 800389c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 80038ac:	429a      	cmp	r2, r3
 80038ae:	f6ff af67 	blt.w	8003780 <pathserver+0x228>
					    i = 0;
					    break;
				    }
			    }

			    if (i >= nmounts) {
 80038b2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 80038bc:	429a      	cmp	r2, r3
 80038be:	db10      	blt.n	80038e2 <pathserver+0x38a>
				    i = -1; /* Error: not found */
 80038c0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038c8:	601a      	str	r2, [r3, #0]
				    write(replyfd, &i, 4);
 80038ca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	461a      	mov	r2, r3
 80038d2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038d6:	4610      	mov	r0, r2
 80038d8:	4619      	mov	r1, r3
 80038da:	2204      	movs	r2, #4
 80038dc:	f014 fb66 	bl	8017fac <write>
			    }
		        break;
 80038e0:	e17e      	b.n	8003be0 <pathserver+0x688>
 80038e2:	e17d      	b.n	8003be0 <pathserver+0x688>

		    case PATH_CMD_REGISTER_PATH:
		        read(PATHSERVER_FD, &plen, 4);
 80038e4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80038e8:	200b      	movs	r0, #11
 80038ea:	4619      	mov	r1, r3
 80038ec:	2204      	movs	r2, #4
 80038ee:	f014 fb64 	bl	8017fba <read>
		        read(PATHSERVER_FD, path, plen);
 80038f2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80038fc:	200b      	movs	r0, #11
 80038fe:	4611      	mov	r1, r2
 8003900:	461a      	mov	r2, r3
 8003902:	f014 fb5a 	bl	8017fba <read>
			    newfd = npaths + 3 + TASK_LIMIT;
 8003906:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 800390a:	f103 020b 	add.w	r2, r3, #11
 800390e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003912:	601a      	str	r2, [r3, #0]
			    memcpy(paths[npaths], path, plen);
 8003914:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8003918:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 800391c:	015b      	lsls	r3, r3, #5
 800391e:	18d1      	adds	r1, r2, r3
 8003920:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800392a:	4608      	mov	r0, r1
 800392c:	4611      	mov	r1, r2
 800392e:	461a      	mov	r2, r3
 8003930:	f014 fae6 	bl	8017f00 <memcpy>
		        npaths++;
 8003934:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8003938:	3301      	adds	r3, #1
 800393a:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
				write(replyfd, &newfd, 4);
 800393e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	461a      	mov	r2, r3
 8003946:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800394a:	4610      	mov	r0, r2
 800394c:	4619      	mov	r1, r3
 800394e:	2204      	movs	r2, #4
 8003950:	f014 fb2c 	bl	8017fac <write>
		        break;
 8003954:	e144      	b.n	8003be0 <pathserver+0x688>

		    case PATH_CMD_REGISTER_FS:
		        read(PATHSERVER_FD, &plen, 4);
 8003956:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800395a:	200b      	movs	r0, #11
 800395c:	4619      	mov	r1, r3
 800395e:	2204      	movs	r2, #4
 8003960:	f014 fb2b 	bl	8017fba <read>
		        read(PATHSERVER_FD, fs_type, plen);
 8003964:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800396e:	200b      	movs	r0, #11
 8003970:	4611      	mov	r1, r2
 8003972:	461a      	mov	r2, r3
 8003974:	f014 fb21 	bl	8017fba <read>
		        fs_fds[nfs_types] = replyfd;
 8003978:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4619      	mov	r1, r3
 8003980:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8003984:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 8003988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			    memcpy(fs_types[nfs_types], fs_type, plen);
 800398c:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8003990:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	18d1      	adds	r1, r2, r3
 8003998:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80039a2:	4608      	mov	r0, r1
 80039a4:	4611      	mov	r1, r2
 80039a6:	461a      	mov	r2, r3
 80039a8:	f014 faaa 	bl	8017f00 <memcpy>
		        nfs_types++;
 80039ac:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80039b0:	3301      	adds	r3, #1
 80039b2:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
		        i = 0;
 80039b6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80039ba:	2200      	movs	r2, #0
 80039bc:	601a      	str	r2, [r3, #0]
				write(replyfd, &i, 4);
 80039be:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	461a      	mov	r2, r3
 80039c6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80039ca:	4610      	mov	r0, r2
 80039cc:	4619      	mov	r1, r3
 80039ce:	2204      	movs	r2, #4
 80039d0:	f014 faec 	bl	8017fac <write>
				break;
 80039d4:	e104      	b.n	8003be0 <pathserver+0x688>
			    int dlen;
			    int tlen;
			    char src[PATH_MAX];
			    char dst[PATH_MAX];
			    char type[FS_TYPE_MAX];
		        read(PATHSERVER_FD, &slen, 4);
 80039d6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80039da:	200b      	movs	r0, #11
 80039dc:	4619      	mov	r1, r3
 80039de:	2204      	movs	r2, #4
 80039e0:	f014 faeb 	bl	8017fba <read>
		        read(PATHSERVER_FD, src, slen);
 80039e4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	463a      	mov	r2, r7
 80039ec:	200b      	movs	r0, #11
 80039ee:	4611      	mov	r1, r2
 80039f0:	461a      	mov	r2, r3
 80039f2:	f014 fae2 	bl	8017fba <read>
		        read(PATHSERVER_FD, &dlen, 4);
 80039f6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80039fa:	200b      	movs	r0, #11
 80039fc:	4619      	mov	r1, r3
 80039fe:	2204      	movs	r2, #4
 8003a00:	f014 fadb 	bl	8017fba <read>
		        read(PATHSERVER_FD, dst, dlen);
 8003a04:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f107 0220 	add.w	r2, r7, #32
 8003a0e:	200b      	movs	r0, #11
 8003a10:	4611      	mov	r1, r2
 8003a12:	461a      	mov	r2, r3
 8003a14:	f014 fad1 	bl	8017fba <read>
		        read(PATHSERVER_FD, &tlen, 4);
 8003a18:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003a1c:	200b      	movs	r0, #11
 8003a1e:	4619      	mov	r1, r3
 8003a20:	2204      	movs	r2, #4
 8003a22:	f014 faca 	bl	8017fba <read>
		        read(PATHSERVER_FD, type, tlen);
 8003a26:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003a30:	200b      	movs	r0, #11
 8003a32:	4611      	mov	r1, r2
 8003a34:	461a      	mov	r2, r3
 8003a36:	f014 fac0 	bl	8017fba <read>

		        /* Search for filesystem types */
			    for (i = 0; i < nfs_types; i++) {
 8003a3a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003a3e:	2200      	movs	r2, #0
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	e020      	b.n	8003a86 <pathserver+0x52e>
				    if (*fs_types[i] && strcmp(type, fs_types[i]) == 0) {
 8003a44:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8003a4e:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d010      	beq.n	8003a78 <pathserver+0x520>
 8003a56:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8003a60:	00db      	lsls	r3, r3, #3
 8003a62:	4413      	add	r3, r2
 8003a64:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003a68:	4610      	mov	r0, r2
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	f001 f97e 	bl	8004d6c <strcmp>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d100      	bne.n	8003a78 <pathserver+0x520>
					    break;
 8003a76:	e00d      	b.n	8003a94 <pathserver+0x53c>
		        read(PATHSERVER_FD, dst, dlen);
		        read(PATHSERVER_FD, &tlen, 4);
		        read(PATHSERVER_FD, type, tlen);

		        /* Search for filesystem types */
			    for (i = 0; i < nfs_types; i++) {
 8003a78:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	1c5a      	adds	r2, r3, #1
 8003a80:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8003a90:	429a      	cmp	r2, r3
 8003a92:	dbd7      	blt.n	8003a44 <pathserver+0x4ec>
				    if (*fs_types[i] && strcmp(type, fs_types[i]) == 0) {
					    break;
				    }
			    }

			    if (i >= nfs_types) {
 8003a94:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	db10      	blt.n	8003ac4 <pathserver+0x56c>
				    status = -1; /* Error: not found */
 8003aa2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003aa6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003aaa:	601a      	str	r2, [r3, #0]
				    write(replyfd, &status, 4);
 8003aac:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003ab8:	4610      	mov	r0, r2
 8003aba:	4619      	mov	r1, r3
 8003abc:	2204      	movs	r2, #4
 8003abe:	f014 fa75 	bl	8017fac <write>
				    break;
 8003ac2:	e08d      	b.n	8003be0 <pathserver+0x688>
			    }

                mounts[nmounts].fs = fs_fds[i];
 8003ac4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8003ace:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ad2:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8003ad6:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 8003ada:	4613      	mov	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	4403      	add	r3, r0
 8003ae4:	6019      	str	r1, [r3, #0]

		        /* Search for device */
			    for (i = 0; i < npaths; i++) {
 8003ae6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003aea:	2200      	movs	r2, #0
 8003aec:	601a      	str	r2, [r3, #0]
 8003aee:	e020      	b.n	8003b32 <pathserver+0x5da>
				    if (*paths[i] && strcmp(src, paths[i]) == 0) {
 8003af0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8003afa:	015b      	lsls	r3, r3, #5
 8003afc:	4413      	add	r3, r2
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00f      	beq.n	8003b24 <pathserver+0x5cc>
 8003b04:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8003b0e:	015b      	lsls	r3, r3, #5
 8003b10:	4413      	add	r3, r2
 8003b12:	463a      	mov	r2, r7
 8003b14:	4610      	mov	r0, r2
 8003b16:	4619      	mov	r1, r3
 8003b18:	f001 f928 	bl	8004d6c <strcmp>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d100      	bne.n	8003b24 <pathserver+0x5cc>
					    break;
 8003b22:	e00d      	b.n	8003b40 <pathserver+0x5e8>
			    }

                mounts[nmounts].fs = fs_fds[i];

		        /* Search for device */
			    for (i = 0; i < npaths; i++) {
 8003b24:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	1c5a      	adds	r2, r3, #1
 8003b2c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	dbd7      	blt.n	8003af0 <pathserver+0x598>
				    if (*paths[i] && strcmp(src, paths[i]) == 0) {
					    break;
				    }
			    }

			    if (i >= npaths) {
 8003b40:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	db10      	blt.n	8003b70 <pathserver+0x618>
				    status = -1; /* Error: not found */
 8003b4e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003b52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b56:	601a      	str	r2, [r3, #0]
				    write(replyfd, &status, 4);
 8003b58:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003b64:	4610      	mov	r0, r2
 8003b66:	4619      	mov	r1, r3
 8003b68:	2204      	movs	r2, #4
 8003b6a:	f014 fa1f 	bl	8017fac <write>
				    break;
 8003b6e:	e037      	b.n	8003be0 <pathserver+0x688>
			    }

                /* Store mount point */
                mounts[nmounts].dev = i + 3 + TASK_LIMIT;
 8003b70:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f103 010b 	add.w	r1, r3, #11
 8003b7a:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8003b7e:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 8003b82:	4613      	mov	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4413      	add	r3, r2
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	4403      	add	r3, r0
 8003b8c:	6059      	str	r1, [r3, #4]
			    memcpy(mounts[nmounts].path, dst, dlen);
 8003b8e:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003b92:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 8003b96:	4613      	mov	r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	4413      	add	r3, r2
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	3308      	adds	r3, #8
 8003ba0:	4419      	add	r1, r3
 8003ba2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f107 0220 	add.w	r2, r7, #32
 8003bac:	4608      	mov	r0, r1
 8003bae:	4611      	mov	r1, r2
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	f014 f9a5 	bl	8017f00 <memcpy>
			    nmounts++;
 8003bb6:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8003bba:	3301      	adds	r3, #1
 8003bbc:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454

                status = 0;
 8003bc0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	601a      	str	r2, [r3, #0]
                write(replyfd, &status, 4);
 8003bc8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003bd4:	4610      	mov	r0, r2
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	2204      	movs	r2, #4
 8003bda:	f014 f9e7 	bl	8017fac <write>
		    }   break;
 8003bde:	bf00      	nop

		    default:
		        ;
		}
	}
 8003be0:	e4ee      	b.n	80035c0 <pathserver+0x68>
 8003be2:	bf00      	nop

08003be4 <path_register>:
}

int path_register(const char *pathname)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b092      	sub	sp, #72	; 0x48
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
    int cmd = PATH_CMD_REGISTER_PATH;
 8003bec:	2303      	movs	r3, #3
 8003bee:	643b      	str	r3, [r7, #64]	; 0x40
	unsigned int replyfd = getpid() + 3;
 8003bf0:	f014 f9d5 	bl	8017f9e <getpid>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	3303      	adds	r3, #3
 8003bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
	size_t plen = strlen(pathname)+1;
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f001 f8f0 	bl	8004de0 <strlen>
 8003c00:	4603      	mov	r3, r0
 8003c02:	3301      	adds	r3, #1
 8003c04:	63bb      	str	r3, [r7, #56]	; 0x38
	int fd = -1;
 8003c06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c0a:	637b      	str	r3, [r7, #52]	; 0x34
	char buf[4+4+4+PATH_MAX];
	int pos = 0;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	647b      	str	r3, [r7, #68]	; 0x44

	path_write_data(buf, &cmd, 4, pos);
 8003c10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c12:	f107 0208 	add.w	r2, r7, #8
 8003c16:	441a      	add	r2, r3
 8003c18:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c1c:	4610      	mov	r0, r2
 8003c1e:	4619      	mov	r1, r3
 8003c20:	2204      	movs	r2, #4
 8003c22:	f014 f96d 	bl	8017f00 <memcpy>
 8003c26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c28:	3304      	adds	r3, #4
 8003c2a:	647b      	str	r3, [r7, #68]	; 0x44
	path_write_data(buf, &replyfd, 4, pos);
 8003c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c2e:	f107 0208 	add.w	r2, r7, #8
 8003c32:	441a      	add	r2, r3
 8003c34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003c38:	4610      	mov	r0, r2
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	2204      	movs	r2, #4
 8003c3e:	f014 f95f 	bl	8017f00 <memcpy>
 8003c42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c44:	3304      	adds	r3, #4
 8003c46:	647b      	str	r3, [r7, #68]	; 0x44
	path_write_data(buf, &plen, 4, pos);
 8003c48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c4a:	f107 0208 	add.w	r2, r7, #8
 8003c4e:	441a      	add	r2, r3
 8003c50:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003c54:	4610      	mov	r0, r2
 8003c56:	4619      	mov	r1, r3
 8003c58:	2204      	movs	r2, #4
 8003c5a:	f014 f951 	bl	8017f00 <memcpy>
 8003c5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c60:	3304      	adds	r3, #4
 8003c62:	647b      	str	r3, [r7, #68]	; 0x44
	path_write_data(buf, pathname, plen, pos);
 8003c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c66:	f107 0208 	add.w	r2, r7, #8
 8003c6a:	441a      	add	r2, r3
 8003c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6e:	4610      	mov	r0, r2
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	461a      	mov	r2, r3
 8003c74:	f014 f944 	bl	8017f00 <memcpy>
 8003c78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7c:	4413      	add	r3, r2
 8003c7e:	647b      	str	r3, [r7, #68]	; 0x44

	write(PATHSERVER_FD, buf, pos);
 8003c80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c82:	f107 0208 	add.w	r2, r7, #8
 8003c86:	200b      	movs	r0, #11
 8003c88:	4611      	mov	r1, r2
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	f014 f98e 	bl	8017fac <write>
	read(replyfd, &fd, 4);
 8003c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c92:	461a      	mov	r2, r3
 8003c94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003c98:	4610      	mov	r0, r2
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	2204      	movs	r2, #4
 8003c9e:	f014 f98c 	bl	8017fba <read>

	return fd;
 8003ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3748      	adds	r7, #72	; 0x48
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <path_register_fs>:

int path_register_fs(const char *type)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b092      	sub	sp, #72	; 0x48
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
    int cmd = PATH_CMD_REGISTER_FS;
 8003cb4:	2304      	movs	r3, #4
 8003cb6:	643b      	str	r3, [r7, #64]	; 0x40
	unsigned int replyfd = getpid() + 3;
 8003cb8:	f014 f971 	bl	8017f9e <getpid>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	3303      	adds	r3, #3
 8003cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
	size_t plen = strlen(type)+1;
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f001 f88c 	bl	8004de0 <strlen>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	3301      	adds	r3, #1
 8003ccc:	63bb      	str	r3, [r7, #56]	; 0x38
	int fd = -1;
 8003cce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cd2:	637b      	str	r3, [r7, #52]	; 0x34
	char buf[4+4+4+PATH_MAX];
	int pos = 0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	647b      	str	r3, [r7, #68]	; 0x44

	path_write_data(buf, &cmd, 4, pos);
 8003cd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cda:	f107 0208 	add.w	r2, r7, #8
 8003cde:	441a      	add	r2, r3
 8003ce0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003ce4:	4610      	mov	r0, r2
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	2204      	movs	r2, #4
 8003cea:	f014 f909 	bl	8017f00 <memcpy>
 8003cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	647b      	str	r3, [r7, #68]	; 0x44
	path_write_data(buf, &replyfd, 4, pos);
 8003cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cf6:	f107 0208 	add.w	r2, r7, #8
 8003cfa:	441a      	add	r2, r3
 8003cfc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003d00:	4610      	mov	r0, r2
 8003d02:	4619      	mov	r1, r3
 8003d04:	2204      	movs	r2, #4
 8003d06:	f014 f8fb 	bl	8017f00 <memcpy>
 8003d0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d0c:	3304      	adds	r3, #4
 8003d0e:	647b      	str	r3, [r7, #68]	; 0x44
	path_write_data(buf, &plen, 4, pos);
 8003d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d12:	f107 0208 	add.w	r2, r7, #8
 8003d16:	441a      	add	r2, r3
 8003d18:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003d1c:	4610      	mov	r0, r2
 8003d1e:	4619      	mov	r1, r3
 8003d20:	2204      	movs	r2, #4
 8003d22:	f014 f8ed 	bl	8017f00 <memcpy>
 8003d26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d28:	3304      	adds	r3, #4
 8003d2a:	647b      	str	r3, [r7, #68]	; 0x44
	path_write_data(buf, type, plen, pos);
 8003d2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d2e:	f107 0208 	add.w	r2, r7, #8
 8003d32:	441a      	add	r2, r3
 8003d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d36:	4610      	mov	r0, r2
 8003d38:	6879      	ldr	r1, [r7, #4]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	f014 f8e0 	bl	8017f00 <memcpy>
 8003d40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d44:	4413      	add	r3, r2
 8003d46:	647b      	str	r3, [r7, #68]	; 0x44

	write(PATHSERVER_FD, buf, pos);
 8003d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d4a:	f107 0208 	add.w	r2, r7, #8
 8003d4e:	200b      	movs	r0, #11
 8003d50:	4611      	mov	r1, r2
 8003d52:	461a      	mov	r2, r3
 8003d54:	f014 f92a 	bl	8017fac <write>
	read(replyfd, &fd, 4);
 8003d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003d60:	4610      	mov	r0, r2
 8003d62:	4619      	mov	r1, r3
 8003d64:	2204      	movs	r2, #4
 8003d66:	f014 f928 	bl	8017fba <read>

	return fd;
 8003d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3748      	adds	r7, #72	; 0x48
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <mount>:

int mount(const char *src, const char *dst, const char *type, int flags)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b0a2      	sub	sp, #136	; 0x88
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
 8003d80:	603b      	str	r3, [r7, #0]
    int cmd = PATH_CMD_MOUNT;
 8003d82:	2305      	movs	r3, #5
 8003d84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	unsigned int replyfd = getpid() + 3;
 8003d88:	f014 f909 	bl	8017f9e <getpid>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	3303      	adds	r3, #3
 8003d90:	67fb      	str	r3, [r7, #124]	; 0x7c
	size_t slen = strlen(src)+1;
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f001 f824 	bl	8004de0 <strlen>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	67bb      	str	r3, [r7, #120]	; 0x78
	size_t dlen = strlen(dst) + 1;
 8003d9e:	68b8      	ldr	r0, [r7, #8]
 8003da0:	f001 f81e 	bl	8004de0 <strlen>
 8003da4:	4603      	mov	r3, r0
 8003da6:	3301      	adds	r3, #1
 8003da8:	677b      	str	r3, [r7, #116]	; 0x74
	size_t tlen = strlen(type) + 1;
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f001 f818 	bl	8004de0 <strlen>
 8003db0:	4603      	mov	r3, r0
 8003db2:	3301      	adds	r3, #1
 8003db4:	673b      	str	r3, [r7, #112]	; 0x70
	int status;
	char buf[4 + 4 + 4 + PATH_MAX + 4 + PATH_MAX + 4 + FS_TYPE_MAX];
	int pos = 0;
 8003db6:	2300      	movs	r3, #0
 8003db8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	path_write_data(buf, &cmd, 4, pos);
 8003dbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003dc0:	f107 0210 	add.w	r2, r7, #16
 8003dc4:	441a      	add	r2, r3
 8003dc6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003dca:	4610      	mov	r0, r2
 8003dcc:	4619      	mov	r1, r3
 8003dce:	2204      	movs	r2, #4
 8003dd0:	f014 f896 	bl	8017f00 <memcpy>
 8003dd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003dd8:	3304      	adds	r3, #4
 8003dda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	path_write_data(buf, &replyfd, 4, pos);
 8003dde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003de2:	f107 0210 	add.w	r2, r7, #16
 8003de6:	441a      	add	r2, r3
 8003de8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003dec:	4610      	mov	r0, r2
 8003dee:	4619      	mov	r1, r3
 8003df0:	2204      	movs	r2, #4
 8003df2:	f014 f885 	bl	8017f00 <memcpy>
 8003df6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003dfa:	3304      	adds	r3, #4
 8003dfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	path_write_data(buf, &slen, 4, pos);
 8003e00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e04:	f107 0210 	add.w	r2, r7, #16
 8003e08:	441a      	add	r2, r3
 8003e0a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003e0e:	4610      	mov	r0, r2
 8003e10:	4619      	mov	r1, r3
 8003e12:	2204      	movs	r2, #4
 8003e14:	f014 f874 	bl	8017f00 <memcpy>
 8003e18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e1c:	3304      	adds	r3, #4
 8003e1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	path_write_data(buf, src, slen, pos);
 8003e22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e26:	f107 0210 	add.w	r2, r7, #16
 8003e2a:	441a      	add	r2, r3
 8003e2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e2e:	4610      	mov	r0, r2
 8003e30:	68f9      	ldr	r1, [r7, #12]
 8003e32:	461a      	mov	r2, r3
 8003e34:	f014 f864 	bl	8017f00 <memcpy>
 8003e38:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003e3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e3e:	4413      	add	r3, r2
 8003e40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	path_write_data(buf, &dlen, 4, pos);
 8003e44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e48:	f107 0210 	add.w	r2, r7, #16
 8003e4c:	441a      	add	r2, r3
 8003e4e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003e52:	4610      	mov	r0, r2
 8003e54:	4619      	mov	r1, r3
 8003e56:	2204      	movs	r2, #4
 8003e58:	f014 f852 	bl	8017f00 <memcpy>
 8003e5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e60:	3304      	adds	r3, #4
 8003e62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	path_write_data(buf, dst, dlen, pos);
 8003e66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e6a:	f107 0210 	add.w	r2, r7, #16
 8003e6e:	441a      	add	r2, r3
 8003e70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e72:	4610      	mov	r0, r2
 8003e74:	68b9      	ldr	r1, [r7, #8]
 8003e76:	461a      	mov	r2, r3
 8003e78:	f014 f842 	bl	8017f00 <memcpy>
 8003e7c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003e80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e82:	4413      	add	r3, r2
 8003e84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	path_write_data(buf, &tlen, 4, pos);
 8003e88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e8c:	f107 0210 	add.w	r2, r7, #16
 8003e90:	441a      	add	r2, r3
 8003e92:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003e96:	4610      	mov	r0, r2
 8003e98:	4619      	mov	r1, r3
 8003e9a:	2204      	movs	r2, #4
 8003e9c:	f014 f830 	bl	8017f00 <memcpy>
 8003ea0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	path_write_data(buf, type, tlen, pos);
 8003eaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003eae:	f107 0210 	add.w	r2, r7, #16
 8003eb2:	441a      	add	r2, r3
 8003eb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003eb6:	4610      	mov	r0, r2
 8003eb8:	6879      	ldr	r1, [r7, #4]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	f014 f820 	bl	8017f00 <memcpy>
 8003ec0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003ec4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	write(PATHSERVER_FD, buf, pos);
 8003ecc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ed0:	f107 0210 	add.w	r2, r7, #16
 8003ed4:	200b      	movs	r0, #11
 8003ed6:	4611      	mov	r1, r2
 8003ed8:	461a      	mov	r2, r3
 8003eda:	f014 f867 	bl	8017fac <write>
	read(replyfd, &status, 4);
 8003ede:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003ee6:	4610      	mov	r0, r2
 8003ee8:	4619      	mov	r1, r3
 8003eea:	2204      	movs	r2, #4
 8003eec:	f014 f865 	bl	8017fba <read>

	return status;
 8003ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3788      	adds	r7, #136	; 0x88
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop

08003efc <pipe_read_release>:



int pipe_read_release(struct event_monitor *monitor, int event,
                      struct task_control_block *task, void *data)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
 8003f08:	603b      	str	r3, [r7, #0]
    struct file *file = data;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	617b      	str	r3, [r7, #20]
    struct file_request *request = (void*)task->stack->r0;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f14:	613b      	str	r3, [r7, #16]

    return file_read(file, request, monitor);
 8003f16:	6978      	ldr	r0, [r7, #20]
 8003f18:	6939      	ldr	r1, [r7, #16]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	f7fd f844 	bl	8000fa8 <file_read>
 8003f20:	4603      	mov	r3, r0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3718      	adds	r7, #24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop

08003f2c <pipe_write_release>:

int pipe_write_release(struct event_monitor *monitor, int event,
                       struct task_control_block *task, void *data)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
 8003f38:	603b      	str	r3, [r7, #0]
    struct file *file = data;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	617b      	str	r3, [r7, #20]
    struct file_request *request = (void*)task->stack->r0;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f44:	613b      	str	r3, [r7, #16]

    return file_write(file, request, monitor);
 8003f46:	6978      	ldr	r0, [r7, #20]
 8003f48:	6939      	ldr	r1, [r7, #16]
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	f7fd f876 	bl	800103c <file_write>
 8003f50:	4603      	mov	r3, r0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3718      	adds	r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop

08003f5c <regfile_driver_readable>:
};


int regfile_driver_readable (struct regfile *regfile, struct file_request *request,
                           struct event_monitor *monitor)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
    if (regfile->buzy)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <regfile_driver_readable+0x18>
        return FILE_ACCESS_ACCEPT;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e001      	b.n	8003f78 <regfile_driver_readable+0x1c>
    else
        return FILE_ACCESS_ERROR;
 8003f74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3714      	adds	r7, #20
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <regfile_driver_writable>:

int regfile_driver_writable (struct regfile *regfile, struct file_request *request,
                           struct event_monitor *monitor)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
    if (regfile->buzy)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <regfile_driver_writable+0x18>
        return FILE_ACCESS_ACCEPT;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e001      	b.n	8003fa0 <regfile_driver_writable+0x1c>
    else
        return FILE_ACCESS_ERROR;
 8003f9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <regfile_driver_lseekable>:

int regfile_driver_lseekable (struct regfile *regfile, struct file_request *request,
                            struct event_monitor *monitor)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
    if (regfile->buzy)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <regfile_driver_lseekable+0x18>
        return FILE_ACCESS_ACCEPT;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e001      	b.n	8003fc8 <regfile_driver_lseekable+0x1c>
    else
        return FILE_ACCESS_ERROR;
 8003fc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3714      	adds	r7, #20
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <regfile_driver_read>:

int regfile_driver_read (struct regfile *regfile, struct file_request *request,
                       struct event_monitor *monitor)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
    int size = request->size;
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	617b      	str	r3, [r7, #20]
    if (size > REGFILE_BUF)
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2b40      	cmp	r3, #64	; 0x40
 8003fea:	dd01      	ble.n	8003ff0 <regfile_driver_read+0x1c>
        size = REGFILE_BUF;
 8003fec:	2340      	movs	r3, #64	; 0x40
 8003fee:	617b      	str	r3, [r7, #20]

    memcpy(request->buf, regfile->buf, size);
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	6859      	ldr	r1, [r3, #4]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f103 0220 	add.w	r2, r3, #32
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	4608      	mov	r0, r1
 8003ffe:	4611      	mov	r1, r2
 8004000:	461a      	mov	r2, r3
 8004002:	f013 ff7d 	bl	8017f00 <memcpy>

    /* still buzy until driver write response */
    return size;
 8004006:	697b      	ldr	r3, [r7, #20]
}
 8004008:	4618      	mov	r0, r3
 800400a:	3718      	adds	r7, #24
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <regfile_driver_write>:

int regfile_driver_write (struct regfile *regfile, struct file_request *request,
                        struct event_monitor *monitor)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
    char *data_buf = request->buf;
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	613b      	str	r3, [r7, #16]
    int len = request->size;
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	617b      	str	r3, [r7, #20]
    if (len > REGFILE_BUF)
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	2b40      	cmp	r3, #64	; 0x40
 800402c:	dd01      	ble.n	8004032 <regfile_driver_write+0x22>
        len = REGFILE_BUF;
 800402e:	2340      	movs	r3, #64	; 0x40
 8004030:	617b      	str	r3, [r7, #20]

    if (len > 0) {
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2b00      	cmp	r3, #0
 8004036:	dd08      	ble.n	800404a <regfile_driver_write+0x3a>
        memcpy(regfile->buf, data_buf, len);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f103 0220 	add.w	r2, r3, #32
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	4610      	mov	r0, r2
 8004042:	6939      	ldr	r1, [r7, #16]
 8004044:	461a      	mov	r2, r3
 8004046:	f013 ff5b 	bl	8017f00 <memcpy>
    }
    regfile->transfer_len = len;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	661a      	str	r2, [r3, #96]	; 0x60
    regfile->buzy = 0;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	619a      	str	r2, [r3, #24]
	event_monitor_release(monitor, regfile->event);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	4619      	mov	r1, r3
 800405e:	f7fc fd03 	bl	8000a68 <event_monitor_release>
    return len;
 8004062:	697b      	ldr	r3, [r7, #20]
}
 8004064:	4618      	mov	r0, r3
 8004066:	3718      	adds	r7, #24
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <regfile_driver_lseek>:

int regfile_driver_lseek (struct regfile *regfile, struct file_request *request,
                        struct event_monitor *monitor)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
    regfile->transfer_len = request->size;
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	689a      	ldr	r2, [r3, #8]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	661a      	str	r2, [r3, #96]	; 0x60
    regfile->buzy = 0;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	619a      	str	r2, [r3, #24]
	event_monitor_release(monitor, regfile->event);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	4619      	mov	r1, r3
 800408e:	f7fc fceb 	bl	8000a68 <event_monitor_release>
    return request->size;
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	689b      	ldr	r3, [r3, #8]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop

080040a0 <regfile_request_readable>:
 *  5. Get transfer_len
 *  6. Read data from buffer
 */
int regfile_request_readable (struct regfile *regfile, struct file_request *request,
                            struct event_monitor *monitor)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b09a      	sub	sp, #104	; 0x68
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
    struct task_control_block *task = request->task;
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	663b      	str	r3, [r7, #96]	; 0x60

    if (regfile->request_pid == 0) {
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d169      	bne.n	800418e <regfile_request_readable+0xee>
        /* try to send request */
        struct file *driver = regfile->driver_file;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	65fb      	str	r3, [r7, #92]	; 0x5c
        int size = request->size;
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	667b      	str	r3, [r7, #100]	; 0x64
        if (size > REGFILE_BUF)
 80040c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040c8:	2b40      	cmp	r3, #64	; 0x40
 80040ca:	dd01      	ble.n	80040d0 <regfile_request_readable+0x30>
            size = REGFILE_BUF;
 80040cc:	2340      	movs	r3, #64	; 0x40
 80040ce:	667b      	str	r3, [r7, #100]	; 0x64

        struct fs_request fs_request = {
 80040d0:	f107 0314 	add.w	r3, r7, #20
 80040d4:	2200      	movs	r2, #0
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	3304      	adds	r3, #4
 80040da:	2200      	movs	r2, #0
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	3304      	adds	r3, #4
 80040e0:	2200      	movs	r2, #0
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	3304      	adds	r3, #4
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	3304      	adds	r3, #4
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]
 80040f0:	3304      	adds	r3, #4
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	3304      	adds	r3, #4
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]
 80040fc:	3304      	adds	r3, #4
 80040fe:	2200      	movs	r2, #0
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	3304      	adds	r3, #4
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	3304      	adds	r3, #4
 800410a:	2200      	movs	r2, #0
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	3304      	adds	r3, #4
 8004110:	2200      	movs	r2, #0
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	3304      	adds	r3, #4
 8004116:	2200      	movs	r2, #0
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	3304      	adds	r3, #4
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	3304      	adds	r3, #4
 8004122:	2200      	movs	r2, #0
 8004124:	601a      	str	r2, [r3, #0]
 8004126:	3304      	adds	r3, #4
 8004128:	2302      	movs	r3, #2
 800412a:	617b      	str	r3, [r7, #20]
            .cmd = FS_CMD_READ,
            .from = task->pid,
 800412c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800412e:	685b      	ldr	r3, [r3, #4]
        struct file *driver = regfile->driver_file;
        int size = request->size;
        if (size > REGFILE_BUF)
            size = REGFILE_BUF;

        struct fs_request fs_request = {
 8004130:	61bb      	str	r3, [r7, #24]
            .cmd = FS_CMD_READ,
            .from = task->pid,
            .target = regfile->file.fd,
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
        struct file *driver = regfile->driver_file;
        int size = request->size;
        if (size > REGFILE_BUF)
            size = REGFILE_BUF;

        struct fs_request fs_request = {
 8004136:	623b      	str	r3, [r7, #32]
 8004138:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800413a:	647b      	str	r3, [r7, #68]	; 0x44
            .cmd = FS_CMD_READ,
            .from = task->pid,
            .target = regfile->file.fd,
            .size = size,
            .pos = regfile->pos
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	69db      	ldr	r3, [r3, #28]
        struct file *driver = regfile->driver_file;
        int size = request->size;
        if (size > REGFILE_BUF)
            size = REGFILE_BUF;

        struct fs_request fs_request = {
 8004140:	64bb      	str	r3, [r7, #72]	; 0x48
            .target = regfile->file.fd,
            .size = size,
            .pos = regfile->pos
        };

        struct file_request file_request = {
 8004142:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004146:	2200      	movs	r2, #0
 8004148:	601a      	str	r2, [r3, #0]
 800414a:	3304      	adds	r3, #4
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	3304      	adds	r3, #4
 8004152:	2200      	movs	r2, #0
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	3304      	adds	r3, #4
 8004158:	2200      	movs	r2, #0
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	3304      	adds	r3, #4
 800415e:	f107 0314 	add.w	r3, r7, #20
 8004162:	653b      	str	r3, [r7, #80]	; 0x50
 8004164:	2338      	movs	r3, #56	; 0x38
 8004166:	657b      	str	r3, [r7, #84]	; 0x54
            .task = NULL,
            .buf = (char *)&fs_request,
            .size = sizeof(fs_request),
        };
        if (file_write(driver, &file_request, monitor) == 1) {
 8004168:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800416c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800416e:	4619      	mov	r1, r3
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	f7fc ff63 	bl	800103c <file_write>
 8004176:	4603      	mov	r3, r0
 8004178:	2b01      	cmp	r3, #1
 800417a:	d107      	bne.n	800418c <regfile_request_readable+0xec>
            regfile->request_pid = task->pid;
 800417c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	615a      	str	r2, [r3, #20]
            regfile->buzy = 1;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2201      	movs	r2, #1
 8004188:	619a      	str	r2, [r3, #24]
 800418a:	e00c      	b.n	80041a6 <regfile_request_readable+0x106>
 800418c:	e00b      	b.n	80041a6 <regfile_request_readable+0x106>
        }
    }
    else if (regfile->request_pid == task->pid && !regfile->buzy) {
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	695a      	ldr	r2, [r3, #20]
 8004192:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	429a      	cmp	r2, r3
 8004198:	d105      	bne.n	80041a6 <regfile_request_readable+0x106>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <regfile_request_readable+0x106>
        return FILE_ACCESS_ACCEPT;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e007      	b.n	80041b6 <regfile_request_readable+0x116>
    }

	event_monitor_block(monitor, regfile->event, task);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	4619      	mov	r1, r3
 80041ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041b0:	f7fc fc3c 	bl	8000a2c <event_monitor_block>
    return FILE_ACCESS_BLOCK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3768      	adds	r7, #104	; 0x68
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop

080041c0 <regfile_request_writable>:
 *  6. Driver write empty data to buffer
 *  7. Get transfer_len
 */
int regfile_request_writable (struct regfile *regfile, struct file_request *request,
                            struct event_monitor *monitor)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b09a      	sub	sp, #104	; 0x68
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
    struct task_control_block *task = request->task;
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	663b      	str	r3, [r7, #96]	; 0x60

    if (regfile->request_pid == 0) {
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d174      	bne.n	80042c4 <regfile_request_writable+0x104>
        /* try to send request */
        struct file *driver = regfile->driver_file;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	65fb      	str	r3, [r7, #92]	; 0x5c
        int size = request->size;
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	667b      	str	r3, [r7, #100]	; 0x64
        if (size > REGFILE_BUF)
 80041e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041e8:	2b40      	cmp	r3, #64	; 0x40
 80041ea:	dd01      	ble.n	80041f0 <regfile_request_writable+0x30>
            size = REGFILE_BUF;
 80041ec:	2340      	movs	r3, #64	; 0x40
 80041ee:	667b      	str	r3, [r7, #100]	; 0x64

        struct fs_request fs_request = {
 80041f0:	f107 0314 	add.w	r3, r7, #20
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	3304      	adds	r3, #4
 80041fa:	2200      	movs	r2, #0
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	3304      	adds	r3, #4
 8004200:	2200      	movs	r2, #0
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	3304      	adds	r3, #4
 8004206:	2200      	movs	r2, #0
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	3304      	adds	r3, #4
 800420c:	2200      	movs	r2, #0
 800420e:	601a      	str	r2, [r3, #0]
 8004210:	3304      	adds	r3, #4
 8004212:	2200      	movs	r2, #0
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	3304      	adds	r3, #4
 8004218:	2200      	movs	r2, #0
 800421a:	601a      	str	r2, [r3, #0]
 800421c:	3304      	adds	r3, #4
 800421e:	2200      	movs	r2, #0
 8004220:	601a      	str	r2, [r3, #0]
 8004222:	3304      	adds	r3, #4
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	3304      	adds	r3, #4
 800422a:	2200      	movs	r2, #0
 800422c:	601a      	str	r2, [r3, #0]
 800422e:	3304      	adds	r3, #4
 8004230:	2200      	movs	r2, #0
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	3304      	adds	r3, #4
 8004236:	2200      	movs	r2, #0
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	3304      	adds	r3, #4
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	3304      	adds	r3, #4
 8004242:	2200      	movs	r2, #0
 8004244:	601a      	str	r2, [r3, #0]
 8004246:	3304      	adds	r3, #4
 8004248:	2303      	movs	r3, #3
 800424a:	617b      	str	r3, [r7, #20]
            .cmd = FS_CMD_WRITE,
            .from = task->pid,
 800424c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800424e:	685b      	ldr	r3, [r3, #4]
        struct file *driver = regfile->driver_file;
        int size = request->size;
        if (size > REGFILE_BUF)
            size = REGFILE_BUF;

        struct fs_request fs_request = {
 8004250:	61bb      	str	r3, [r7, #24]
            .cmd = FS_CMD_WRITE,
            .from = task->pid,
            .target = regfile->file.fd,
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
        struct file *driver = regfile->driver_file;
        int size = request->size;
        if (size > REGFILE_BUF)
            size = REGFILE_BUF;

        struct fs_request fs_request = {
 8004256:	623b      	str	r3, [r7, #32]
 8004258:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800425a:	647b      	str	r3, [r7, #68]	; 0x44
            .cmd = FS_CMD_WRITE,
            .from = task->pid,
            .target = regfile->file.fd,
            .size = size,
            .pos = regfile->pos
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	69db      	ldr	r3, [r3, #28]
        struct file *driver = regfile->driver_file;
        int size = request->size;
        if (size > REGFILE_BUF)
            size = REGFILE_BUF;

        struct fs_request fs_request = {
 8004260:	64bb      	str	r3, [r7, #72]	; 0x48
            .target = regfile->file.fd,
            .size = size,
            .pos = regfile->pos
        };

        struct file_request file_request = {
 8004262:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004266:	2200      	movs	r2, #0
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	3304      	adds	r3, #4
 800426c:	2200      	movs	r2, #0
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	3304      	adds	r3, #4
 8004272:	2200      	movs	r2, #0
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	3304      	adds	r3, #4
 8004278:	2200      	movs	r2, #0
 800427a:	601a      	str	r2, [r3, #0]
 800427c:	3304      	adds	r3, #4
 800427e:	f107 0314 	add.w	r3, r7, #20
 8004282:	653b      	str	r3, [r7, #80]	; 0x50
 8004284:	2338      	movs	r3, #56	; 0x38
 8004286:	657b      	str	r3, [r7, #84]	; 0x54
            .task = NULL,
            .buf = (char *)&fs_request,
            .size = sizeof(fs_request),
        };

        if (file_write(driver, &file_request, monitor) == 1) {
 8004288:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800428c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800428e:	4619      	mov	r1, r3
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	f7fc fed3 	bl	800103c <file_write>
 8004296:	4603      	mov	r3, r0
 8004298:	2b01      	cmp	r3, #1
 800429a:	d112      	bne.n	80042c2 <regfile_request_writable+0x102>

            memcpy(regfile->buf, request->buf, size);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f103 0120 	add.w	r1, r3, #32
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042a8:	4608      	mov	r0, r1
 80042aa:	4611      	mov	r1, r2
 80042ac:	461a      	mov	r2, r3
 80042ae:	f013 fe27 	bl	8017f00 <memcpy>

            regfile->request_pid = task->pid;
 80042b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	615a      	str	r2, [r3, #20]
            regfile->buzy = 1;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2201      	movs	r2, #1
 80042be:	619a      	str	r2, [r3, #24]
 80042c0:	e00c      	b.n	80042dc <regfile_request_writable+0x11c>
 80042c2:	e00b      	b.n	80042dc <regfile_request_writable+0x11c>
        }
    }
    else if (regfile->request_pid == task->pid && !regfile->buzy) {
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	695a      	ldr	r2, [r3, #20]
 80042c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d105      	bne.n	80042dc <regfile_request_writable+0x11c>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d101      	bne.n	80042dc <regfile_request_writable+0x11c>
        return FILE_ACCESS_ACCEPT;
 80042d8:	2301      	movs	r3, #1
 80042da:	e007      	b.n	80042ec <regfile_request_writable+0x12c>
    }

	event_monitor_block(monitor, regfile->event, task);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	4619      	mov	r1, r3
 80042e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042e6:	f7fc fba1 	bl	8000a2c <event_monitor_block>
    return FILE_ACCESS_BLOCK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3768      	adds	r7, #104	; 0x68
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <regfile_request_lseekable>:

int regfile_request_lseekable (struct regfile *regfile, struct file_request *request,
                             struct event_monitor *monitor)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b09a      	sub	sp, #104	; 0x68
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
    struct task_control_block *task = request->task;
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	663b      	str	r3, [r7, #96]	; 0x60

    if (regfile->request_pid == 0) {
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d17f      	bne.n	800440e <regfile_request_lseekable+0x11a>
        /* try to send request */
        struct file *driver = regfile->driver_file;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	65fb      	str	r3, [r7, #92]	; 0x5c
        int size = request->size;
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	65bb      	str	r3, [r7, #88]	; 0x58
        if (size > REGFILE_BUF)
 800431a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800431c:	2b40      	cmp	r3, #64	; 0x40
 800431e:	dd01      	ble.n	8004324 <regfile_request_lseekable+0x30>
            size = REGFILE_BUF;
 8004320:	2340      	movs	r3, #64	; 0x40
 8004322:	65bb      	str	r3, [r7, #88]	; 0x58

        int pos;
        switch(request->whence) {
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	2b02      	cmp	r3, #2
 800432a:	d006      	beq.n	800433a <regfile_request_lseekable+0x46>
 800432c:	2b03      	cmp	r3, #3
 800432e:	d008      	beq.n	8004342 <regfile_request_lseekable+0x4e>
 8004330:	2b01      	cmp	r3, #1
 8004332:	d10a      	bne.n	800434a <regfile_request_lseekable+0x56>
            case SEEK_SET:
                pos = 0;
 8004334:	2300      	movs	r3, #0
 8004336:	667b      	str	r3, [r7, #100]	; 0x64
                break;
 8004338:	e00a      	b.n	8004350 <regfile_request_lseekable+0x5c>
            case SEEK_CUR:
                pos = regfile->pos;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	667b      	str	r3, [r7, #100]	; 0x64
                break;
 8004340:	e006      	b.n	8004350 <regfile_request_lseekable+0x5c>
            case SEEK_END:
                pos = -1;
 8004342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004346:	667b      	str	r3, [r7, #100]	; 0x64
                break;
 8004348:	e002      	b.n	8004350 <regfile_request_lseekable+0x5c>
            default:
                return FILE_ACCESS_ERROR;
 800434a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800434e:	e072      	b.n	8004436 <regfile_request_lseekable+0x142>
        }

        struct fs_request fs_request = {
 8004350:	f107 0310 	add.w	r3, r7, #16
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	3304      	adds	r3, #4
 800435a:	2200      	movs	r2, #0
 800435c:	601a      	str	r2, [r3, #0]
 800435e:	3304      	adds	r3, #4
 8004360:	2200      	movs	r2, #0
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	3304      	adds	r3, #4
 8004366:	2200      	movs	r2, #0
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	3304      	adds	r3, #4
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	3304      	adds	r3, #4
 8004372:	2200      	movs	r2, #0
 8004374:	601a      	str	r2, [r3, #0]
 8004376:	3304      	adds	r3, #4
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]
 800437c:	3304      	adds	r3, #4
 800437e:	2200      	movs	r2, #0
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	3304      	adds	r3, #4
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	3304      	adds	r3, #4
 800438a:	2200      	movs	r2, #0
 800438c:	601a      	str	r2, [r3, #0]
 800438e:	3304      	adds	r3, #4
 8004390:	2200      	movs	r2, #0
 8004392:	601a      	str	r2, [r3, #0]
 8004394:	3304      	adds	r3, #4
 8004396:	2200      	movs	r2, #0
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	3304      	adds	r3, #4
 800439c:	2200      	movs	r2, #0
 800439e:	601a      	str	r2, [r3, #0]
 80043a0:	3304      	adds	r3, #4
 80043a2:	2200      	movs	r2, #0
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	3304      	adds	r3, #4
 80043a8:	2304      	movs	r3, #4
 80043aa:	613b      	str	r3, [r7, #16]
            .cmd = FS_CMD_SEEK,
            .from = task->pid,
 80043ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043ae:	685b      	ldr	r3, [r3, #4]
                break;
            default:
                return FILE_ACCESS_ERROR;
        }

        struct fs_request fs_request = {
 80043b0:	617b      	str	r3, [r7, #20]
            .cmd = FS_CMD_SEEK,
            .from = task->pid,
            .target = regfile->file.fd,
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
                break;
            default:
                return FILE_ACCESS_ERROR;
        }

        struct fs_request fs_request = {
 80043b6:	61fb      	str	r3, [r7, #28]
            .cmd = FS_CMD_SEEK,
            .from = task->pid,
            .target = regfile->file.fd,
            .size = request->size,
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	689b      	ldr	r3, [r3, #8]
                break;
            default:
                return FILE_ACCESS_ERROR;
        }

        struct fs_request fs_request = {
 80043bc:	643b      	str	r3, [r7, #64]	; 0x40
 80043be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043c0:	647b      	str	r3, [r7, #68]	; 0x44
            .target = regfile->file.fd,
            .size = request->size,
            .pos = pos,
        };

        struct file_request file_request = {
 80043c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80043c6:	2200      	movs	r2, #0
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	3304      	adds	r3, #4
 80043cc:	2200      	movs	r2, #0
 80043ce:	601a      	str	r2, [r3, #0]
 80043d0:	3304      	adds	r3, #4
 80043d2:	2200      	movs	r2, #0
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	3304      	adds	r3, #4
 80043d8:	2200      	movs	r2, #0
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	3304      	adds	r3, #4
 80043de:	f107 0310 	add.w	r3, r7, #16
 80043e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043e4:	2338      	movs	r3, #56	; 0x38
 80043e6:	653b      	str	r3, [r7, #80]	; 0x50
            .task = NULL,
            .buf = (char *)&fs_request,
            .size = sizeof(fs_request),
        };

        if (file_write(driver, &file_request, monitor) == 1) {
 80043e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80043ec:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80043ee:	4619      	mov	r1, r3
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	f7fc fe23 	bl	800103c <file_write>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d107      	bne.n	800440c <regfile_request_lseekable+0x118>
            regfile->request_pid = task->pid;
 80043fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	615a      	str	r2, [r3, #20]
            regfile->buzy = 1;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2201      	movs	r2, #1
 8004408:	619a      	str	r2, [r3, #24]
 800440a:	e00c      	b.n	8004426 <regfile_request_lseekable+0x132>
 800440c:	e00b      	b.n	8004426 <regfile_request_lseekable+0x132>
        }
    }
    else if (regfile->request_pid == task->pid && !regfile->buzy) {
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	695a      	ldr	r2, [r3, #20]
 8004412:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	429a      	cmp	r2, r3
 8004418:	d105      	bne.n	8004426 <regfile_request_lseekable+0x132>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <regfile_request_lseekable+0x132>
        return FILE_ACCESS_ACCEPT;
 8004422:	2301      	movs	r3, #1
 8004424:	e007      	b.n	8004436 <regfile_request_lseekable+0x142>
    }

	event_monitor_block(monitor, regfile->event, task);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	4619      	mov	r1, r3
 800442e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004430:	f7fc fafc 	bl	8000a2c <event_monitor_block>
    return FILE_ACCESS_BLOCK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3768      	adds	r7, #104	; 0x68
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop

08004440 <regfile_request_read>:

int regfile_request_read (struct regfile *regfile, struct file_request *request,
                        struct event_monitor *monitor)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
    if (regfile->transfer_len > 0) {
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004450:	2b00      	cmp	r3, #0
 8004452:	dd12      	ble.n	800447a <regfile_request_read+0x3a>
        memcpy(request->buf, regfile->buf, regfile->transfer_len);
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	6859      	ldr	r1, [r3, #4]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f103 0220 	add.w	r2, r3, #32
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004462:	4608      	mov	r0, r1
 8004464:	4611      	mov	r1, r2
 8004466:	461a      	mov	r2, r3
 8004468:	f013 fd4a 	bl	8017f00 <memcpy>

        regfile->pos += regfile->transfer_len;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	69da      	ldr	r2, [r3, #28]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004474:	441a      	add	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	61da      	str	r2, [r3, #28]
    }

    regfile->request_pid = 0;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	615a      	str	r2, [r3, #20]
    return regfile->transfer_len;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 8004484:	4618      	mov	r0, r3
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <regfile_request_write>:

int regfile_request_write (struct regfile *regfile, struct file_request *request,
                         struct event_monitor *monitor)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
    if (regfile->transfer_len > 0) {
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800449c:	2b00      	cmp	r3, #0
 800449e:	dd06      	ble.n	80044ae <regfile_request_write+0x22>
        regfile->pos += regfile->transfer_len;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	69da      	ldr	r2, [r3, #28]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a8:	441a      	add	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	61da      	str	r2, [r3, #28]
    }

    regfile->request_pid = 0;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	615a      	str	r2, [r3, #20]
    return regfile->transfer_len;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3714      	adds	r7, #20
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <regfile_request_lseek>:

int regfile_request_lseek (struct regfile *regfile, struct file_request *request,
                         struct event_monitor *monitor)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
    if (regfile->transfer_len >= 0) {
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	db03      	blt.n	80044e0 <regfile_request_lseek+0x1c>
        regfile->pos = regfile->transfer_len;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	61da      	str	r2, [r3, #28]
    }

    regfile->request_pid = 0;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	615a      	str	r2, [r3, #20]
    return regfile->transfer_len;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3714      	adds	r7, #20
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop

080044f8 <regfile_event_release>:

int regfile_event_release(struct event_monitor *monitor, int event,
                        struct task_control_block *task, void *data)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
 8004504:	603b      	str	r3, [r7, #0]
    struct file *file = data;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	617b      	str	r3, [r7, #20]
    struct file_request *request = (void*)task->stack->r0;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004510:	613b      	str	r3, [r7, #16]

    switch (task->stack->r7) {
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	2b04      	cmp	r3, #4
 800451a:	d004      	beq.n	8004526 <regfile_event_release+0x2e>
 800451c:	2b0a      	cmp	r3, #10
 800451e:	d010      	beq.n	8004542 <regfile_event_release+0x4a>
 8004520:	2b03      	cmp	r3, #3
 8004522:	d007      	beq.n	8004534 <regfile_event_release+0x3c>
 8004524:	e014      	b.n	8004550 <regfile_event_release+0x58>
        case 0x04:
            return file_read(file, request, monitor);
 8004526:	6978      	ldr	r0, [r7, #20]
 8004528:	6939      	ldr	r1, [r7, #16]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	f7fc fd3c 	bl	8000fa8 <file_read>
 8004530:	4603      	mov	r3, r0
 8004532:	e00e      	b.n	8004552 <regfile_event_release+0x5a>
        case 0x03:
            return file_write(file, request, monitor);
 8004534:	6978      	ldr	r0, [r7, #20]
 8004536:	6939      	ldr	r1, [r7, #16]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	f7fc fd7f 	bl	800103c <file_write>
 800453e:	4603      	mov	r3, r0
 8004540:	e007      	b.n	8004552 <regfile_event_release+0x5a>
        case 0x0a:
            return file_lseek(file, request, monitor);
 8004542:	6978      	ldr	r0, [r7, #20]
 8004544:	6939      	ldr	r1, [r7, #16]
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	f7fc fe1a 	bl	8001180 <file_lseek>
 800454c:	4603      	mov	r3, r0
 800454e:	e000      	b.n	8004552 <regfile_event_release+0x5a>
        default:
            return 0;
 8004550:	2300      	movs	r3, #0
    }
}
 8004552:	4618      	mov	r0, r3
 8004554:	3718      	adds	r7, #24
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop

0800455c <regfile_init>:

int regfile_init(int fd, int driver_pid, struct file *files[],
               struct memory_pool *memory_pool, struct event_monitor *monitor)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
 8004568:	603b      	str	r3, [r7, #0]
    struct regfile *regfile;

    regfile = memory_pool_alloc(memory_pool, sizeof(*regfile));
 800456a:	6838      	ldr	r0, [r7, #0]
 800456c:	2164      	movs	r1, #100	; 0x64
 800456e:	f7fe fe35 	bl	80031dc <memory_pool_alloc>
 8004572:	6178      	str	r0, [r7, #20]

    if (!regfile)
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d102      	bne.n	8004580 <regfile_init+0x24>
        return -1;
 800457a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800457e:	e02f      	b.n	80045e0 <regfile_init+0x84>

    regfile->driver_pid = driver_pid;
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	609a      	str	r2, [r3, #8]
    regfile->driver_file = files[driver_pid + 3];
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	3303      	adds	r3, #3
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	4413      	add	r3, r2
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	60da      	str	r2, [r3, #12]
    regfile->request_pid = 0;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	2200      	movs	r2, #0
 800459a:	615a      	str	r2, [r3, #20]
    regfile->buzy = 0;
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	2200      	movs	r2, #0
 80045a0:	619a      	str	r2, [r3, #24]
    regfile->pos = 0;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2200      	movs	r2, #0
 80045a6:	61da      	str	r2, [r3, #28]
	regfile->file.ops = &regfile_ops;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	4a0f      	ldr	r2, [pc, #60]	; (80045e8 <regfile_init+0x8c>)
 80045ac:	605a      	str	r2, [r3, #4]
    regfile->event = event_monitor_find_free(monitor);
 80045ae:	6a38      	ldr	r0, [r7, #32]
 80045b0:	f7fc f9ec 	bl	800098c <event_monitor_find_free>
 80045b4:	4602      	mov	r2, r0
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	611a      	str	r2, [r3, #16]
    files[fd] = &regfile->file;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	4413      	add	r3, r2
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	601a      	str	r2, [r3, #0]

    event_monitor_register(monitor, regfile->event, regfile_event_release, files[fd]);
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	691a      	ldr	r2, [r3, #16]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	6879      	ldr	r1, [r7, #4]
 80045d0:	440b      	add	r3, r1
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6a38      	ldr	r0, [r7, #32]
 80045d6:	4611      	mov	r1, r2
 80045d8:	4a04      	ldr	r2, [pc, #16]	; (80045ec <regfile_init+0x90>)
 80045da:	f7fc f9fd 	bl	80009d8 <event_monitor_register>

    return 0;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3718      	adds	r7, #24
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	2000004c 	.word	0x2000004c
 80045ec:	080044f9 	.word	0x080044f9

080045f0 <regfile_response>:

int regfile_response(int fd, char *buf, int len)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
    struct regfile_response response = {
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	613b      	str	r3, [r7, #16]
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	617b      	str	r3, [r7, #20]
        .transfer_len = len,
        .buf = buf
    };
    return write(fd, &response, sizeof(response));
 8004604:	f107 0310 	add.w	r3, r7, #16
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	4619      	mov	r1, r3
 800460c:	2208      	movs	r2, #8
 800460e:	f013 fccd 	bl	8017fac <write>
 8004612:	4603      	mov	r3, r0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3718      	adds	r7, #24
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <regfile_readable>:

int regfile_readable (struct file *file, struct file_request *request,
                    struct event_monitor *monitor)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
    struct regfile *regfile = container_of(file, struct regfile, file);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	617b      	str	r3, [r7, #20]
    if (regfile->driver_pid == request->task->pid) {
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	429a      	cmp	r2, r3
 8004638:	d106      	bne.n	8004648 <regfile_readable+0x2c>
        return regfile_driver_readable(regfile, request, monitor);
 800463a:	6978      	ldr	r0, [r7, #20]
 800463c:	68b9      	ldr	r1, [r7, #8]
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	f7ff fc8c 	bl	8003f5c <regfile_driver_readable>
 8004644:	4603      	mov	r3, r0
 8004646:	e005      	b.n	8004654 <regfile_readable+0x38>
    }
    else {
        return regfile_request_readable(regfile, request, monitor);
 8004648:	6978      	ldr	r0, [r7, #20]
 800464a:	68b9      	ldr	r1, [r7, #8]
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	f7ff fd27 	bl	80040a0 <regfile_request_readable>
 8004652:	4603      	mov	r3, r0
    }
}
 8004654:	4618      	mov	r0, r3
 8004656:	3718      	adds	r7, #24
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <regfile_writable>:

int regfile_writable (struct file *file, struct file_request *request,
                    struct event_monitor *monitor)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
    struct regfile *regfile = container_of(file, struct regfile, file);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	617b      	str	r3, [r7, #20]
    if (regfile->driver_pid == request->task->pid) {
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	689a      	ldr	r2, [r3, #8]
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	429a      	cmp	r2, r3
 8004678:	d106      	bne.n	8004688 <regfile_writable+0x2c>
        return regfile_driver_writable(regfile, request, monitor);
 800467a:	6978      	ldr	r0, [r7, #20]
 800467c:	68b9      	ldr	r1, [r7, #8]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	f7ff fc80 	bl	8003f84 <regfile_driver_writable>
 8004684:	4603      	mov	r3, r0
 8004686:	e005      	b.n	8004694 <regfile_writable+0x38>
    }
    else {
        return regfile_request_writable(regfile, request, monitor);
 8004688:	6978      	ldr	r0, [r7, #20]
 800468a:	68b9      	ldr	r1, [r7, #8]
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	f7ff fd97 	bl	80041c0 <regfile_request_writable>
 8004692:	4603      	mov	r3, r0
    }
}
 8004694:	4618      	mov	r0, r3
 8004696:	3718      	adds	r7, #24
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <regfile_read>:

int regfile_read (struct file *file, struct file_request *request,
                struct event_monitor *monitor)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
    struct regfile *regfile = container_of(file, struct regfile, file);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	617b      	str	r3, [r7, #20]
    if (regfile->driver_pid == request->task->pid) {
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d106      	bne.n	80046c8 <regfile_read+0x2c>
        return regfile_driver_read(regfile, request, monitor);
 80046ba:	6978      	ldr	r0, [r7, #20]
 80046bc:	68b9      	ldr	r1, [r7, #8]
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	f7ff fc88 	bl	8003fd4 <regfile_driver_read>
 80046c4:	4603      	mov	r3, r0
 80046c6:	e005      	b.n	80046d4 <regfile_read+0x38>
    }
    else {
        return regfile_request_read(regfile, request, monitor);
 80046c8:	6978      	ldr	r0, [r7, #20]
 80046ca:	68b9      	ldr	r1, [r7, #8]
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	f7ff feb7 	bl	8004440 <regfile_request_read>
 80046d2:	4603      	mov	r3, r0
    }
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3718      	adds	r7, #24
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <regfile_write>:

int regfile_write (struct file *file, struct file_request *request,
                 struct event_monitor *monitor)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
    struct regfile *regfile = container_of(file, struct regfile, file);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	617b      	str	r3, [r7, #20]
    if (regfile->driver_pid == request->task->pid) {
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	689a      	ldr	r2, [r3, #8]
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d106      	bne.n	8004708 <regfile_write+0x2c>
        return regfile_driver_write(regfile, request, monitor);
 80046fa:	6978      	ldr	r0, [r7, #20]
 80046fc:	68b9      	ldr	r1, [r7, #8]
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	f7ff fc86 	bl	8004010 <regfile_driver_write>
 8004704:	4603      	mov	r3, r0
 8004706:	e005      	b.n	8004714 <regfile_write+0x38>
    }
    else {
        return regfile_request_write(regfile, request, monitor);
 8004708:	6978      	ldr	r0, [r7, #20]
 800470a:	68b9      	ldr	r1, [r7, #8]
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	f7ff febd 	bl	800448c <regfile_request_write>
 8004712:	4603      	mov	r3, r0
    }
}
 8004714:	4618      	mov	r0, r3
 8004716:	3718      	adds	r7, #24
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <regfile_lseekable>:

int regfile_lseekable (struct file *file, struct file_request *request,
                     struct event_monitor *monitor)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
    struct regfile *regfile = container_of(file, struct regfile, file);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	617b      	str	r3, [r7, #20]

    if (regfile->driver_pid == request->task->pid) {
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	429a      	cmp	r2, r3
 8004738:	d106      	bne.n	8004748 <regfile_lseekable+0x2c>
        return regfile_driver_lseekable(regfile, request, monitor);
 800473a:	6978      	ldr	r0, [r7, #20]
 800473c:	68b9      	ldr	r1, [r7, #8]
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	f7ff fc34 	bl	8003fac <regfile_driver_lseekable>
 8004744:	4603      	mov	r3, r0
 8004746:	e005      	b.n	8004754 <regfile_lseekable+0x38>
    }
    else {
        return regfile_request_lseekable(regfile, request, monitor);
 8004748:	6978      	ldr	r0, [r7, #20]
 800474a:	68b9      	ldr	r1, [r7, #8]
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	f7ff fdd1 	bl	80042f4 <regfile_request_lseekable>
 8004752:	4603      	mov	r3, r0
    }
}
 8004754:	4618      	mov	r0, r3
 8004756:	3718      	adds	r7, #24
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <regfile_lseek>:

int regfile_lseek (struct file *file, struct file_request *request,
                 struct event_monitor *monitor)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
    struct regfile *regfile = container_of(file, struct regfile, file);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	617b      	str	r3, [r7, #20]

    if (regfile->driver_pid == request->task->pid) {
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	429a      	cmp	r2, r3
 8004778:	d106      	bne.n	8004788 <regfile_lseek+0x2c>
        return regfile_driver_lseek(regfile, request, monitor);
 800477a:	6978      	ldr	r0, [r7, #20]
 800477c:	68b9      	ldr	r1, [r7, #8]
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	f7ff fc74 	bl	800406c <regfile_driver_lseek>
 8004784:	4603      	mov	r3, r0
 8004786:	e005      	b.n	8004794 <regfile_lseek+0x38>
    }
    else {
        return regfile_request_lseek(regfile, request, monitor);
 8004788:	6978      	ldr	r0, [r7, #20]
 800478a:	68b9      	ldr	r1, [r7, #8]
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	f7ff fe99 	bl	80044c4 <regfile_request_lseek>
 8004792:	4603      	mov	r3, r0
    }
}
 8004794:	4618      	mov	r0, r3
 8004796:	3718      	adds	r7, #24
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <romdev_driver>:
#include "block.h"
#include "path.h"


void romdev_driver()
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b08e      	sub	sp, #56	; 0x38
 80047a0:	af00      	add	r7, sp, #0
    const char *request_start;
    const char *request_end;
    size_t request_len;

    /* Register path for device */
    self = getpid() + 3;
 80047a2:	f013 fbfc 	bl	8017f9e <getpid>
 80047a6:	4603      	mov	r3, r0
 80047a8:	3303      	adds	r3, #3
 80047aa:	627b      	str	r3, [r7, #36]	; 0x24
	fd = path_register(ROMDEV_PATH);
 80047ac:	4838      	ldr	r0, [pc, #224]	; (8004890 <romdev_driver+0xf4>)
 80047ae:	f7ff fa19 	bl	8003be4 <path_register>
 80047b2:	6378      	str	r0, [r7, #52]	; 0x34
	mknod(fd, 0, S_IFBLK);
 80047b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80047b6:	2100      	movs	r1, #0
 80047b8:	2206      	movs	r2, #6
 80047ba:	f013 fc1a 	bl	8017ff2 <mknod>

    /* Service routine */
	while (1) {
	    if (read(self, &request, sizeof(request)) == sizeof(request)) {
 80047be:	1d3b      	adds	r3, r7, #4
 80047c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047c2:	4619      	mov	r1, r3
 80047c4:	2214      	movs	r2, #20
 80047c6:	f013 fbf8 	bl	8017fba <read>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b14      	cmp	r3, #20
 80047ce:	d15e      	bne.n	800488e <romdev_driver+0xf2>
	        cmd = request.cmd;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	623b      	str	r3, [r7, #32]

	        switch (cmd) {
 80047d4:	6a3b      	ldr	r3, [r7, #32]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d002      	beq.n	80047e0 <romdev_driver+0x44>
 80047da:	2b03      	cmp	r3, #3
 80047dc:	d02f      	beq.n	800483e <romdev_driver+0xa2>
 80047de:	e04f      	b.n	8004880 <romdev_driver+0xe4>
	            case BLOCK_CMD_READ:
	                fd = request.fd;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	637b      	str	r3, [r7, #52]	; 0x34
	                size = request.size;
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	61fb      	str	r3, [r7, #28]
	                pos = request.pos;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	61bb      	str	r3, [r7, #24]

                    /* Check boundary */
                    request_start = &_sromdev + pos;
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	4b29      	ldr	r3, [pc, #164]	; (8004894 <romdev_driver+0xf8>)
 80047f0:	4413      	add	r3, r2
 80047f2:	633b      	str	r3, [r7, #48]	; 0x30
                    if (request_start < &_sromdev)
 80047f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047f6:	4b27      	ldr	r3, [pc, #156]	; (8004894 <romdev_driver+0xf8>)
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d205      	bcs.n	8004808 <romdev_driver+0x6c>
	                    block_response(fd, NULL, -1);
 80047fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80047fe:	2100      	movs	r1, #0
 8004800:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004804:	f7fb ffa4 	bl	8000750 <block_response>
                    if (request_start > &_eromdev)
 8004808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800480a:	4b23      	ldr	r3, [pc, #140]	; (8004898 <romdev_driver+0xfc>)
 800480c:	429a      	cmp	r2, r3
 800480e:	d901      	bls.n	8004814 <romdev_driver+0x78>
                        request_start = &_eromdev;
 8004810:	4b21      	ldr	r3, [pc, #132]	; (8004898 <romdev_driver+0xfc>)
 8004812:	633b      	str	r3, [r7, #48]	; 0x30

                    request_end = request_start + size;
 8004814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	4413      	add	r3, r2
 800481a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (request_end > &_eromdev)
 800481c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800481e:	4b1e      	ldr	r3, [pc, #120]	; (8004898 <romdev_driver+0xfc>)
 8004820:	429a      	cmp	r2, r3
 8004822:	d901      	bls.n	8004828 <romdev_driver+0x8c>
                        request_end = &_eromdev;
 8004824:	4b1c      	ldr	r3, [pc, #112]	; (8004898 <romdev_driver+0xfc>)
 8004826:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Response */
                    request_len = request_end - request_start;
 8004828:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800482a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	62bb      	str	r3, [r7, #40]	; 0x28
	                block_response(fd, (char *)request_start, request_len);
 8004830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004832:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004834:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004836:	461a      	mov	r2, r3
 8004838:	f7fb ff8a 	bl	8000750 <block_response>
	                break;
 800483c:	e027      	b.n	800488e <romdev_driver+0xf2>

	            case BLOCK_CMD_SEEK:
	                fd = request.fd;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	637b      	str	r3, [r7, #52]	; 0x34
	                size = request.size;
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	61fb      	str	r3, [r7, #28]
	                pos = request.pos;
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	61bb      	str	r3, [r7, #24]

	                if (pos == 0) { /* SEEK_SET */
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d102      	bne.n	8004856 <romdev_driver+0xba>
	                    request_len = size;
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	62bb      	str	r3, [r7, #40]	; 0x28
 8004854:	e00d      	b.n	8004872 <romdev_driver+0xd6>
	                }
	                else if (pos < 0) { /* SEEK_END */
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	2b00      	cmp	r3, #0
 800485a:	da06      	bge.n	800486a <romdev_driver+0xce>
	                    request_len = (&_eromdev - &_sromdev) + size;
 800485c:	4b0d      	ldr	r3, [pc, #52]	; (8004894 <romdev_driver+0xf8>)
 800485e:	69fa      	ldr	r2, [r7, #28]
 8004860:	1ad2      	subs	r2, r2, r3
 8004862:	4b0d      	ldr	r3, [pc, #52]	; (8004898 <romdev_driver+0xfc>)
 8004864:	4413      	add	r3, r2
 8004866:	62bb      	str	r3, [r7, #40]	; 0x28
 8004868:	e003      	b.n	8004872 <romdev_driver+0xd6>
	                }
	                else { /* SEEK_CUR */
	                    request_len = pos + size;
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	4413      	add	r3, r2
 8004870:	62bb      	str	r3, [r7, #40]	; 0x28
	                }
	                lseek(fd, request_len, SEEK_SET);
 8004872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004874:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004876:	4619      	mov	r1, r3
 8004878:	2201      	movs	r2, #1
 800487a:	f013 fbc8 	bl	801800e <lseek>
	                break;
 800487e:	e006      	b.n	800488e <romdev_driver+0xf2>

	            case BLOCK_CMD_WRITE: /* readonly */
	            default:
	                block_response(fd, NULL, -1);
 8004880:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004882:	2100      	movs	r1, #0
 8004884:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004888:	f7fb ff62 	bl	8000750 <block_response>
	        }
	    }
	}
 800488c:	e797      	b.n	80047be <romdev_driver+0x22>
 800488e:	e796      	b.n	80047be <romdev_driver+0x22>
 8004890:	0801a538 	.word	0x0801a538
 8004894:	0801d08c 	.word	0x0801d08c
 8004898:	0801d0c0 	.word	0x0801d0c0

0800489c <romfs_open_recur>:
    uint32_t len;
    uint8_t name[PATH_MAX];
};

int romfs_open_recur(int device, char *path, int this, struct romfs_entry *entry)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
 80048a8:	603b      	str	r3, [r7, #0]
    if (entry->isdir) {
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d040      	beq.n	8004934 <romfs_open_recur+0x98>
        /* Iterate through children */
        int pos = this + sizeof(*entry);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	3334      	adds	r3, #52	; 0x34
 80048b6:	617b      	str	r3, [r7, #20]
        while (pos) {
 80048b8:	e039      	b.n	800492e <romfs_open_recur+0x92>
            /* Get entry */
            lseek(device, pos, SEEK_SET);
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	6979      	ldr	r1, [r7, #20]
 80048be:	2201      	movs	r2, #1
 80048c0:	f013 fba5 	bl	801800e <lseek>
            read(device, entry, sizeof(*entry));
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	6839      	ldr	r1, [r7, #0]
 80048c8:	2234      	movs	r2, #52	; 0x34
 80048ca:	f013 fb76 	bl	8017fba <read>

            /* Compare path */
            int len = strlen((char *)entry->name);
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	3314      	adds	r3, #20
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 fa84 	bl	8004de0 <strlen>
 80048d8:	4603      	mov	r3, r0
 80048da:	613b      	str	r3, [r7, #16]
            if (strncmp((char *)entry->name, path, len) == 0) {
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	f103 0214 	add.w	r2, r3, #20
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	4610      	mov	r0, r2
 80048e6:	68b9      	ldr	r1, [r7, #8]
 80048e8:	461a      	mov	r2, r3
 80048ea:	f000 fa4d 	bl	8004d88 <strncmp>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d119      	bne.n	8004928 <romfs_open_recur+0x8c>
                if (path[len] == '/') { /* Match directory */
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	4413      	add	r3, r2
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	2b2f      	cmp	r3, #47	; 0x2f
 80048fe:	d10b      	bne.n	8004918 <romfs_open_recur+0x7c>
                    return romfs_open_recur(device, path + len + 1, pos, entry);
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	3301      	adds	r3, #1
 8004904:	68ba      	ldr	r2, [r7, #8]
 8004906:	4413      	add	r3, r2
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	4619      	mov	r1, r3
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	f7ff ffc4 	bl	800489c <romfs_open_recur>
 8004914:	4603      	mov	r3, r0
 8004916:	e00f      	b.n	8004938 <romfs_open_recur+0x9c>
                }
                else if (path[len] == 0) { /* Match file */
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	4413      	add	r3, r2
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <romfs_open_recur+0x8c>
                    return pos;
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	e007      	b.n	8004938 <romfs_open_recur+0x9c>
                }
            }

            /* Next entry */
            pos = entry->next;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	617b      	str	r3, [r7, #20]
int romfs_open_recur(int device, char *path, int this, struct romfs_entry *entry)
{
    if (entry->isdir) {
        /* Iterate through children */
        int pos = this + sizeof(*entry);
        while (pos) {
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1c2      	bne.n	80048ba <romfs_open_recur+0x1e>
            /* Next entry */
            pos = entry->next;
        }
    }

    return -1;
 8004934:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004938:	4618      	mov	r0, r3
 800493a:	3718      	adds	r7, #24
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <romfs_open>:

/*
 * return entry position
 */
int romfs_open(int device, char *path, struct romfs_entry *entry)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
    /* Get root entry */
    lseek(device, 0, SEEK_SET);
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	2100      	movs	r1, #0
 8004950:	2201      	movs	r2, #1
 8004952:	f013 fb5c 	bl	801800e <lseek>
    read(device, entry, sizeof(*entry));
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	6879      	ldr	r1, [r7, #4]
 800495a:	2234      	movs	r2, #52	; 0x34
 800495c:	f013 fb2d 	bl	8017fba <read>

    return romfs_open_recur(device, path, 0, entry);
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	68b9      	ldr	r1, [r7, #8]
 8004964:	2200      	movs	r2, #0
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f7ff ff98 	bl	800489c <romfs_open_recur>
 800496c:	4603      	mov	r3, r0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop

08004978 <romfs_server>:

void romfs_server()
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b0d8      	sub	sp, #352	; 0x160
 800497c:	af00      	add	r7, sp, #0
    struct romfs_file files[ROMFS_FILE_LIMIT];
    int nfiles = 0;
 800497e:	2300      	movs	r3, #0
 8004980:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    int self = getpid() + 3;
 8004984:	f013 fb0b 	bl	8017f9e <getpid>
 8004988:	4603      	mov	r3, r0
 800498a:	3303      	adds	r3, #3
 800498c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    int i;
    int data_start;
    int data_end;
    char data[REGFILE_BUF];

    path_register_fs(ROMFS_TYPE);
 8004990:	48d1      	ldr	r0, [pc, #836]	; (8004cd8 <romfs_server+0x360>)
 8004992:	f7ff f98b 	bl	8003cac <path_register_fs>

    while (1) {
        if (read(self, &request, sizeof(request)) == sizeof(request)) {
 8004996:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800499a:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 800499e:	4619      	mov	r1, r3
 80049a0:	2238      	movs	r2, #56	; 0x38
 80049a2:	f013 fb0a 	bl	8017fba <read>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b38      	cmp	r3, #56	; 0x38
 80049aa:	f040 81dd 	bne.w	8004d68 <romfs_server+0x3f0>
            cmd = request.cmd;
 80049ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	        switch (cmd) {
 80049b8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80049bc:	2b02      	cmp	r3, #2
 80049be:	f000 8083 	beq.w	8004ac8 <romfs_server+0x150>
 80049c2:	2b04      	cmp	r3, #4
 80049c4:	f000 8167 	beq.w	8004c96 <romfs_server+0x31e>
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	f040 81c5 	bne.w	8004d58 <romfs_server+0x3e0>
	            case FS_CMD_OPEN:
	                device = request.device;
 80049ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	                from = request.from;
 80049d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	                pos = request.pos; /* searching starting position */
 80049e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80049e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	                pos = romfs_open(request.device, request.path + pos, &entry);
 80049ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80049f0:	6899      	ldr	r1, [r3, #8]
 80049f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80049f6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80049fa:	3310      	adds	r3, #16
 80049fc:	441a      	add	r2, r3
 80049fe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004a02:	4608      	mov	r0, r1
 8004a04:	4611      	mov	r1, r2
 8004a06:	461a      	mov	r2, r3
 8004a08:	f7ff ff9a 	bl	8004940 <romfs_open>
 8004a0c:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134

	                if (pos >= 0) { /* Found */
 8004a10:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	db49      	blt.n	8004aac <romfs_server+0x134>
	                    /* Register */
	                    status = path_register(request.path);
 8004a18:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004a1c:	3310      	adds	r3, #16
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7ff f8e0 	bl	8003be4 <path_register>
 8004a24:	4602      	mov	r2, r0
 8004a26:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004a2a:	601a      	str	r2, [r3, #0]

                        if (status != -1) {
 8004a2c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a36:	d03e      	beq.n	8004ab6 <romfs_server+0x13e>
                            mknod(status, 0, S_IFREG);
 8004a38:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	2100      	movs	r1, #0
 8004a42:	2208      	movs	r2, #8
 8004a44:	f013 fad5 	bl	8017ff2 <mknod>
	                        files[nfiles].fd = status;
 8004a48:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004a52:	011b      	lsls	r3, r3, #4
 8004a54:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8004a58:	4403      	add	r3, r0
 8004a5a:	3bac      	subs	r3, #172	; 0xac
 8004a5c:	601a      	str	r2, [r3, #0]
	                        files[nfiles].device = request.device;
 8004a5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004a68:	011b      	lsls	r3, r3, #4
 8004a6a:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8004a6e:	440b      	add	r3, r1
 8004a70:	3ba8      	subs	r3, #168	; 0xa8
 8004a72:	601a      	str	r2, [r3, #0]
	                        files[nfiles].start = pos + sizeof(entry);
 8004a74:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004a78:	3334      	adds	r3, #52	; 0x34
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004a80:	011b      	lsls	r3, r3, #4
 8004a82:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8004a86:	4403      	add	r3, r0
 8004a88:	3ba4      	subs	r3, #164	; 0xa4
 8004a8a:	601a      	str	r2, [r3, #0]
	                        files[nfiles].len = entry.len;
 8004a8c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004a90:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004a94:	011b      	lsls	r3, r3, #4
 8004a96:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8004a9a:	440b      	add	r3, r1
 8004a9c:	3ba0      	subs	r3, #160	; 0xa0
 8004a9e:	601a      	str	r2, [r3, #0]
	                        nfiles++;
 8004aa0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8004aaa:	e004      	b.n	8004ab6 <romfs_server+0x13e>
	                    }
	                }
	                else {
	                    status = -1;
 8004aac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004ab0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ab4:	601a      	str	r2, [r3, #0]
	                }

                    /* Response */
	                write(from, &status, sizeof(status));
 8004ab6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004aba:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8004abe:	4619      	mov	r1, r3
 8004ac0:	2204      	movs	r2, #4
 8004ac2:	f013 fa73 	bl	8017fac <write>
	                break;
 8004ac6:	e14f      	b.n	8004d68 <romfs_server+0x3f0>
	            case FS_CMD_READ:
	                from = request.from;
 8004ac8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	                target = request.target;
 8004ad2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	                size = request.size;
 8004adc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	                pos = request.pos;
 8004ae6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aec:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

                    /* Find fd */
                    for (i = 0; i < nfiles; i++) {
 8004af0:	2300      	movs	r3, #0
 8004af2:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004af6:	e096      	b.n	8004c26 <romfs_server+0x2ae>
                        if (files[i].fd == target) {
 8004af8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004b02:	4413      	add	r3, r2
 8004b04:	3bac      	subs	r3, #172	; 0xac
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	f040 8085 	bne.w	8004c1c <romfs_server+0x2a4>
                            device = files[i].device;
 8004b12:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b16:	011b      	lsls	r3, r3, #4
 8004b18:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8004b1c:	4403      	add	r3, r0
 8004b1e:	3ba8      	subs	r3, #168	; 0xa8
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

                            /* Check boundary */
                            data_start = files[i].start + pos;
 8004b26:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b2a:	011b      	lsls	r3, r3, #4
 8004b2c:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8004b30:	440b      	add	r3, r1
 8004b32:	3ba4      	subs	r3, #164	; 0xa4
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
                            if (data_start < files[i].start) {
 8004b40:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b44:	011b      	lsls	r3, r3, #4
 8004b46:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004b4a:	4413      	add	r3, r2
 8004b4c:	3ba4      	subs	r3, #164	; 0xa4
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004b54:	429a      	cmp	r2, r3
 8004b56:	dd04      	ble.n	8004b62 <romfs_server+0x1ea>
                                i = nfiles;
 8004b58:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004b5c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	                            break;
 8004b60:	e068      	b.n	8004c34 <romfs_server+0x2bc>
	                        }
                            if (data_start > files[i].start + files[i].len)
 8004b62:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004b66:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b6a:	011b      	lsls	r3, r3, #4
 8004b6c:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8004b70:	4403      	add	r3, r0
 8004b72:	3ba4      	subs	r3, #164	; 0xa4
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4619      	mov	r1, r3
 8004b78:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b7c:	011b      	lsls	r3, r3, #4
 8004b7e:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8004b82:	4403      	add	r3, r0
 8004b84:	3ba0      	subs	r3, #160	; 0xa0
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	440b      	add	r3, r1
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d913      	bls.n	8004bb6 <romfs_server+0x23e>
                                data_start = files[i].start + files[i].len;
 8004b8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b92:	011b      	lsls	r3, r3, #4
 8004b94:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8004b98:	440b      	add	r3, r1
 8004b9a:	3ba4      	subs	r3, #164	; 0xa4
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ba4:	011b      	lsls	r3, r3, #4
 8004ba6:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8004baa:	4403      	add	r3, r0
 8004bac:	3ba0      	subs	r3, #160	; 0xa0
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148

                            data_end = data_start + size;
 8004bb6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004bba:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004bbe:	4413      	add	r3, r2
 8004bc0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
                            if (data_end > files[i].start + files[i].len)
 8004bc4:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004bc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bcc:	011b      	lsls	r3, r3, #4
 8004bce:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8004bd2:	440b      	add	r3, r1
 8004bd4:	3ba4      	subs	r3, #164	; 0xa4
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4619      	mov	r1, r3
 8004bda:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bde:	011b      	lsls	r3, r3, #4
 8004be0:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8004be4:	4403      	add	r3, r0
 8004be6:	3ba0      	subs	r3, #160	; 0xa0
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	440b      	add	r3, r1
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d914      	bls.n	8004c1a <romfs_server+0x2a2>
                                data_end = files[i].start + files[i].len;
 8004bf0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bf4:	011b      	lsls	r3, r3, #4
 8004bf6:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8004bfa:	440b      	add	r3, r1
 8004bfc:	3ba4      	subs	r3, #164	; 0xa4
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	461a      	mov	r2, r3
 8004c02:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c06:	011b      	lsls	r3, r3, #4
 8004c08:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8004c0c:	4403      	add	r3, r0
 8004c0e:	3ba0      	subs	r3, #160	; 0xa0
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4413      	add	r3, r2
 8004c14:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
                            break;
 8004c18:	e00c      	b.n	8004c34 <romfs_server+0x2bc>
 8004c1a:	e00b      	b.n	8004c34 <romfs_server+0x2bc>
	                target = request.target;
	                size = request.size;
	                pos = request.pos;

                    /* Find fd */
                    for (i = 0; i < nfiles; i++) {
 8004c1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c20:	3301      	adds	r3, #1
 8004c22:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004c26:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004c2a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	f6ff af62 	blt.w	8004af8 <romfs_server+0x180>
                            if (data_end > files[i].start + files[i].len)
                                data_end = files[i].start + files[i].len;
                            break;
                        }
                    }
                    if (i >= nfiles) {
 8004c34:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004c38:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	db07      	blt.n	8004c50 <romfs_server+0x2d8>
                        write(target, NULL, -1);
 8004c40:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8004c44:	2100      	movs	r1, #0
 8004c46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c4a:	f013 f9af 	bl	8017fac <write>
                        break;
 8004c4e:	e08b      	b.n	8004d68 <romfs_server+0x3f0>
                    }

                    /* Get data from device */
                    lseek(device, data_start, SEEK_SET);
 8004c50:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 8004c54:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f013 f9d8 	bl	801800e <lseek>
                    size = data_end - data_start;
 8004c5e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004c62:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
                    size = read(device, data, size);
 8004c6c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004c70:	1d3a      	adds	r2, r7, #4
 8004c72:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 8004c76:	4611      	mov	r1, r2
 8004c78:	461a      	mov	r2, r3
 8004c7a:	f013 f99e 	bl	8017fba <read>
 8004c7e:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150

                    /* Response */
	                write(target, data, size);
 8004c82:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004c86:	1d3a      	adds	r2, r7, #4
 8004c88:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8004c8c:	4611      	mov	r1, r2
 8004c8e:	461a      	mov	r2, r3
 8004c90:	f013 f98c 	bl	8017fac <write>
	                break;
 8004c94:	e068      	b.n	8004d68 <romfs_server+0x3f0>

	            case FS_CMD_SEEK:
	                target = request.target;
 8004c96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	                size = request.size;
 8004ca0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	                pos = request.pos;
 8004caa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

                    /* Find fd */
                    for (i = 0; i < nfiles; i++) {
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004cba:	e014      	b.n	8004ce6 <romfs_server+0x36e>
                        if (files[i].fd == target) {
 8004cbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004cc0:	011b      	lsls	r3, r3, #4
 8004cc2:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8004cc6:	440b      	add	r3, r1
 8004cc8:	3bac      	subs	r3, #172	; 0xac
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d103      	bne.n	8004cdc <romfs_server+0x364>
                            break;
 8004cd4:	e00d      	b.n	8004cf2 <romfs_server+0x37a>
 8004cd6:	bf00      	nop
 8004cd8:	0801a544 	.word	0x0801a544
	                target = request.target;
	                size = request.size;
	                pos = request.pos;

                    /* Find fd */
                    for (i = 0; i < nfiles; i++) {
 8004cdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004ce6:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004cea:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	dbe4      	blt.n	8004cbc <romfs_server+0x344>
                        if (files[i].fd == target) {
                            break;
                        }
                    }
                    if (i >= nfiles) {
 8004cf2:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004cf6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	db07      	blt.n	8004d0e <romfs_server+0x396>
                        lseek(target, -1, SEEK_SET);
 8004cfe:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8004d02:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004d06:	2201      	movs	r2, #1
 8004d08:	f013 f981 	bl	801800e <lseek>
                        break;
 8004d0c:	e02c      	b.n	8004d68 <romfs_server+0x3f0>
                    }

	                if (pos == 0) { /* SEEK_SET */
 8004d0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d018      	beq.n	8004d48 <romfs_server+0x3d0>
	                }
	                else if (pos < 0) { /* SEEK_END */
 8004d16:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	da0d      	bge.n	8004d3a <romfs_server+0x3c2>
	                    size = (files[i].len) + size;
 8004d1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d22:	011b      	lsls	r3, r3, #4
 8004d24:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004d28:	4413      	add	r3, r2
 8004d2a:	3ba0      	subs	r3, #160	; 0xa0
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004d32:	4413      	add	r3, r2
 8004d34:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004d38:	e006      	b.n	8004d48 <romfs_server+0x3d0>
	                }
	                else { /* SEEK_CUR */
	                    size = pos + size;
 8004d3a:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8004d3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d42:	4413      	add	r3, r2
 8004d44:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	                }
	                lseek(target, size, SEEK_SET);
 8004d48:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8004d4c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8004d50:	2201      	movs	r2, #1
 8004d52:	f013 f95c 	bl	801800e <lseek>
	                break;
 8004d56:	e007      	b.n	8004d68 <romfs_server+0x3f0>

	            case FS_CMD_WRITE: /* readonly */
	            default:
	                write(target, NULL, -1);
 8004d58:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d62:	f013 f923 	bl	8017fac <write>
	        }
        }
    }
 8004d66:	e616      	b.n	8004996 <romfs_server+0x1e>
 8004d68:	e615      	b.n	8004996 <romfs_server+0x1e>
 8004d6a:	bf00      	nop

08004d6c <strcmp>:
#include "string.h"
#include "stm32f4xx.h"
int strcmp(const char *a, const char *b)
{
	asm(
 8004d6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d74:	2a01      	cmp	r2, #1
 8004d76:	bf88      	it	hi
 8004d78:	429a      	cmphi	r2, r3
 8004d7a:	f43f aff7 	beq.w	8004d6c <strcmp>
 8004d7e:	eba2 0003 	sub.w	r0, r2, r3
 8004d82:	4770      	bx	lr
        "   beq     strcmp_lop      \n"
		"	sub     r0, r2, r3  	\n"
        "   bx      lr              \n"
		:::
	);
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	bf00      	nop

08004d88 <strncmp>:

int strncmp(const char *a, const char *b, size_t n)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b087      	sub	sp, #28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
	size_t i;

	for (i = 0; i < n; i++)
 8004d94:	2300      	movs	r3, #0
 8004d96:	617b      	str	r3, [r7, #20]
 8004d98:	e017      	b.n	8004dca <strncmp+0x42>
		if (a[i] != b[i])
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	4413      	add	r3, r2
 8004da0:	781a      	ldrb	r2, [r3, #0]
 8004da2:	68b9      	ldr	r1, [r7, #8]
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	440b      	add	r3, r1
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d00a      	beq.n	8004dc4 <strncmp+0x3c>
			return a[i] - b[i];
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	4413      	add	r3, r2
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	461a      	mov	r2, r3
 8004db8:	68b9      	ldr	r1, [r7, #8]
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	440b      	add	r3, r1
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	e007      	b.n	8004dd4 <strncmp+0x4c>

int strncmp(const char *a, const char *b, size_t n)
{
	size_t i;

	for (i = 0; i < n; i++)
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	617b      	str	r3, [r7, #20]
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d3e3      	bcc.n	8004d9a <strncmp+0x12>
		if (a[i] != b[i])
			return a[i] - b[i];

	return 0;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	371c      	adds	r7, #28
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <strlen>:

size_t strlen(const char *s)
{
	asm(
 8004de0:	f1a0 0301 	sub.w	r3, r0, #1

08004de4 <strlen_loop>:
 8004de4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8004de8:	2a00      	cmp	r2, #0
 8004dea:	f47f affb 	bne.w	8004de4 <strlen_loop>
 8004dee:	eba3 0000 	sub.w	r0, r3, r0
 8004df2:	4770      	bx	lr
        "   bne  strlen_loop        \n"
		"	sub  r0, r3, r0			\n"
		"	bx   lr					\n"
		:::
	);
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	bf00      	nop

08004df8 <puts>:

void puts(char *s)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
	while (*s) {
 8004e00:	e010      	b.n	8004e24 <puts+0x2c>
		while (USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET)
 8004e02:	bf00      	nop
 8004e04:	480b      	ldr	r0, [pc, #44]	; (8004e34 <puts+0x3c>)
 8004e06:	2180      	movs	r1, #128	; 0x80
 8004e08:	f010 f84c 	bl	8014ea4 <USART_GetFlagStatus>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0f8      	beq.n	8004e04 <puts+0xc>
			/* wait */ ;
		USART_SendData(USART2, *s);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	4807      	ldr	r0, [pc, #28]	; (8004e34 <puts+0x3c>)
 8004e18:	4619      	mov	r1, r3
 8004e1a:	f00f fe55 	bl	8014ac8 <USART_SendData>
		s++;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	3301      	adds	r3, #1
 8004e22:	607b      	str	r3, [r7, #4]
	);
}

void puts(char *s)
{
	while (*s) {
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1ea      	bne.n	8004e02 <puts+0xa>
		while (USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET)
			/* wait */ ;
		USART_SendData(USART2, *s);
		s++;
	}
}
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	40004400 	.word	0x40004400

08004e38 <init_task>:
#include "task.h"

#include <stddef.h>

unsigned int *init_task(unsigned int *stack, void (*start)())
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
	stack += STACK_SIZE - 9; /* End of stack, minus what we're about to push */
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8004e48:	607b      	str	r3, [r7, #4]
	stack[8] = (unsigned int)start;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	3320      	adds	r3, #32
 8004e4e:	683a      	ldr	r2, [r7, #0]
 8004e50:	601a      	str	r2, [r3, #0]
	return stack;
 8004e52:	687b      	ldr	r3, [r7, #4]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <init_led>:
#include "stm32f4xx_exti.h"
#include "stm32f4xx_syscfg.h"
#include "misc.h"

void init_led(void)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8004e66:	2004      	movs	r0, #4
 8004e68:	2101      	movs	r1, #1
 8004e6a:	f00a fee5 	bl	800fc38 <RCC_AHB1PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
 8004e6e:	480b      	ldr	r0, [pc, #44]	; (8004e9c <init_led+0x3c>)
 8004e70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004e74:	2201      	movs	r2, #1
 8004e76:	f008 f96d 	bl	800d154 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
 8004e7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e7e:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8004e80:	2301      	movs	r3, #1
 8004e82:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8004e84:	2300      	movs	r3, #0
 8004e86:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004e88:	2302      	movs	r3, #2
 8004e8a:	717b      	strb	r3, [r7, #5]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004e8c:	463b      	mov	r3, r7
 8004e8e:	4803      	ldr	r0, [pc, #12]	; (8004e9c <init_led+0x3c>)
 8004e90:	4619      	mov	r1, r3
 8004e92:	f008 f829 	bl	800cee8 <GPIO_Init>
}
 8004e96:	3708      	adds	r7, #8
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	40020800 	.word	0x40020800

08004ea0 <init_button>:

void init_button(void)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8004ea6:	2001      	movs	r0, #1
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	f00a fec5 	bl	800fc38 <RCC_AHB1PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	717b      	strb	r3, [r7, #5]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004eba:	463b      	mov	r3, r7
 8004ebc:	4803      	ldr	r0, [pc, #12]	; (8004ecc <init_button+0x2c>)
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	f008 f812 	bl	800cee8 <GPIO_Init>
}
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	40020800 	.word	0x40020800

08004ed0 <enable_button_interrupts>:

void enable_button_interrupts(void)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8004ed6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004eda:	2101      	movs	r1, #1
 8004edc:	f00a ff24 	bl	800fd28 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource0);
 8004ee0:	2000      	movs	r0, #0
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	f00d fd9c 	bl	8012a20 <SYSCFG_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8004eec:	2300      	movs	r3, #0
 8004eee:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8004ef0:	2308      	movs	r3, #8
 8004ef2:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
 8004ef8:	f107 0308 	add.w	r3, r7, #8
 8004efc:	4618      	mov	r0, r3
 8004efe:	f006 fa3b 	bl	800b378 <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
 8004f02:	2306      	movs	r3, #6
 8004f04:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8004f06:	230f      	movs	r3, #15
 8004f08:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 8004f0a:	230f      	movs	r3, #15
 8004f0c:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
 8004f12:	1d3b      	adds	r3, r7, #4
 8004f14:	4618      	mov	r0, r3
 8004f16:	f000 f941 	bl	800519c <NVIC_Init>
}
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <init_rs232>:

void init_rs232(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
    /* --------------------------- System Clocks Configuration -----------------*/
    /* USART2 clock enable */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8004f26:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	f00a fede 	bl	800fcec <RCC_APB1PeriphClockCmd>
    /* GPIOA clock enable */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8004f30:	2008      	movs	r0, #8
 8004f32:	2101      	movs	r1, #1
 8004f34:	f00a fe80 	bl	800fc38 <RCC_AHB1PeriphClockCmd>
    GPIO_InitTypeDef GPIO_InitStructure;

    /*-------------------------- GPIO Configuration ----------------------------*/
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6;
 8004f38:	2360      	movs	r3, #96	; 0x60
 8004f3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	753b      	strb	r3, [r7, #20]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8004f40:	2300      	movs	r3, #0
 8004f42:	75bb      	strb	r3, [r7, #22]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8004f44:	2300      	movs	r3, #0
 8004f46:	75fb      	strb	r3, [r7, #23]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004f48:	2302      	movs	r3, #2
 8004f4a:	757b      	strb	r3, [r7, #21]
    GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004f4c:	f107 0310 	add.w	r3, r7, #16
 8004f50:	4813      	ldr	r0, [pc, #76]	; (8004fa0 <init_rs232+0x80>)
 8004f52:	4619      	mov	r1, r3
 8004f54:	f007 ffc8 	bl	800cee8 <GPIO_Init>
    
    /* Connect USART pins to AF */
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource5, GPIO_AF_USART2);   // USART2_TX
 8004f58:	4811      	ldr	r0, [pc, #68]	; (8004fa0 <init_rs232+0x80>)
 8004f5a:	2105      	movs	r1, #5
 8004f5c:	2207      	movs	r2, #7
 8004f5e:	f008 f931 	bl	800d1c4 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource6, GPIO_AF_USART2);   // USART2_RX
 8004f62:	480f      	ldr	r0, [pc, #60]	; (8004fa0 <init_rs232+0x80>)
 8004f64:	2106      	movs	r1, #6
 8004f66:	2207      	movs	r2, #7
 8004f68:	f008 f92c 	bl	800d1c4 <GPIO_PinAFConfig>
     *  - One Stop Bit
     *  - No parity
     *  - Hardware flow control disabled (RTS and CTS signals)
     *  - Receive and transmit enabled
     */
    USART_InitStructure.USART_BaudRate = 9600;
 8004f6c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8004f70:	603b      	str	r3, [r7, #0]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8004f72:	2300      	movs	r3, #0
 8004f74:	80bb      	strh	r3, [r7, #4]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8004f76:	2300      	movs	r3, #0
 8004f78:	80fb      	strh	r3, [r7, #6]
    USART_InitStructure.USART_Parity = USART_Parity_No;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	813b      	strh	r3, [r7, #8]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8004f82:	230c      	movs	r3, #12
 8004f84:	817b      	strh	r3, [r7, #10]
    USART_Init(USART2, &USART_InitStructure);
 8004f86:	463b      	mov	r3, r7
 8004f88:	4806      	ldr	r0, [pc, #24]	; (8004fa4 <init_rs232+0x84>)
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	f00f fc08 	bl	80147a0 <USART_Init>
    USART_Cmd(USART2, ENABLE);
 8004f90:	4804      	ldr	r0, [pc, #16]	; (8004fa4 <init_rs232+0x84>)
 8004f92:	2101      	movs	r1, #1
 8004f94:	f00f fd1a 	bl	80149cc <USART_Cmd>
}
 8004f98:	3718      	adds	r7, #24
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	40020c00 	.word	0x40020c00
 8004fa4:	40004400 	.word	0x40004400

08004fa8 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
 8004fae:	480c      	ldr	r0, [pc, #48]	; (8004fe0 <enable_rs232_interrupts+0x38>)
 8004fb0:	f240 7127 	movw	r1, #1831	; 0x727
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f00f ff2d 	bl	8014e14 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8004fba:	4809      	ldr	r0, [pc, #36]	; (8004fe0 <enable_rs232_interrupts+0x38>)
 8004fbc:	f240 5125 	movw	r1, #1317	; 0x525
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f00f ff27 	bl	8014e14 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 8004fc6:	2326      	movs	r3, #38	; 0x26
 8004fc8:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
 8004fd2:	1d3b      	adds	r3, r7, #4
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f000 f8e1 	bl	800519c <NVIC_Init>
}
 8004fda:	3708      	adds	r7, #8
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	40004400 	.word	0x40004400

08004fe4 <enable_rs232>:

void enable_rs232(void)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
 8004fe8:	4802      	ldr	r0, [pc, #8]	; (8004ff4 <enable_rs232+0x10>)
 8004fea:	2101      	movs	r1, #1
 8004fec:	f00f fcee 	bl	80149cc <USART_Cmd>
}
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	40004400 	.word	0x40004400

08004ff8 <itoa>:
static uint8_t hz_str[3] = "Hz";
static uint8_t frequency_str[10];


static uint8_t* itoa(int value, uint8_t* result, int base)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b089      	sub	sp, #36	; 0x24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
	if (base < 2 || base > 36) {
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b01      	cmp	r3, #1
 8005008:	dd02      	ble.n	8005010 <itoa+0x18>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2b24      	cmp	r3, #36	; 0x24
 800500e:	dd04      	ble.n	800501a <itoa+0x22>
		*result = '\0';
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	2200      	movs	r2, #0
 8005014:	701a      	strb	r2, [r3, #0]
		return result;
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	e03b      	b.n	8005092 <itoa+0x9a>
	}
	uint8_t *ptr = result, *ptr1 = result, tmp_char;
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	61fb      	str	r3, [r7, #28]
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	61bb      	str	r3, [r7, #24]
	int tmp_value;

	do {
		tmp_value = value;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	617b      	str	r3, [r7, #20]
		value /= base;
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	fb92 f3f3 	sdiv	r3, r2, r3
 800502e:	60fb      	str	r3, [r7, #12]
		*ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * base)];
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	1c5a      	adds	r2, r3, #1
 8005034:	61fa      	str	r2, [r7, #28]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	6879      	ldr	r1, [r7, #4]
 800503a:	fb01 f202 	mul.w	r2, r1, r2
 800503e:	6979      	ldr	r1, [r7, #20]
 8005040:	1a8a      	subs	r2, r1, r2
 8005042:	3223      	adds	r2, #35	; 0x23
 8005044:	4916      	ldr	r1, [pc, #88]	; (80050a0 <itoa+0xa8>)
 8005046:	5c8a      	ldrb	r2, [r1, r2]
 8005048:	701a      	strb	r2, [r3, #0]
	} while (value);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1e8      	bne.n	8005022 <itoa+0x2a>

	if (tmp_value < 0) *ptr++ = '-';
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	2b00      	cmp	r3, #0
 8005054:	da04      	bge.n	8005060 <itoa+0x68>
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	61fa      	str	r2, [r7, #28]
 800505c:	222d      	movs	r2, #45	; 0x2d
 800505e:	701a      	strb	r2, [r3, #0]
	*ptr-- = '\0';
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	1e5a      	subs	r2, r3, #1
 8005064:	61fa      	str	r2, [r7, #28]
 8005066:	2200      	movs	r2, #0
 8005068:	701a      	strb	r2, [r3, #0]
	while (ptr1 < ptr) {
 800506a:	e00d      	b.n	8005088 <itoa+0x90>
		tmp_char = *ptr;
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	74fb      	strb	r3, [r7, #19]
		*ptr-- = *ptr1;
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	1e5a      	subs	r2, r3, #1
 8005076:	61fa      	str	r2, [r7, #28]
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	7812      	ldrb	r2, [r2, #0]
 800507c:	701a      	strb	r2, [r3, #0]
		*ptr1++ = tmp_char;
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	1c5a      	adds	r2, r3, #1
 8005082:	61ba      	str	r2, [r7, #24]
 8005084:	7cfa      	ldrb	r2, [r7, #19]
 8005086:	701a      	strb	r2, [r3, #0]
		*ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * base)];
	} while (value);

	if (tmp_value < 0) *ptr++ = '-';
	*ptr-- = '\0';
	while (ptr1 < ptr) {
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	429a      	cmp	r2, r3
 800508e:	d3ed      	bcc.n	800506c <itoa+0x74>
		tmp_char = *ptr;
		*ptr-- = *ptr1;
		*ptr1++ = tmp_char;
	}
	return result;
 8005090:	68bb      	ldr	r3, [r7, #8]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3724      	adds	r7, #36	; 0x24
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	0801a54c 	.word	0x0801a54c

080050a4 <ui_bfclear>:

void ui_bfclear()
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	af00      	add	r7, sp, #0
	memset((void *) LCD_FRAME_BUFFER + BUFFER_OFFSET, 0xff, BUFFER_OFFSET);
 80050a8:	4803      	ldr	r0, [pc, #12]	; (80050b8 <ui_bfclear+0x14>)
 80050aa:	21ff      	movs	r1, #255	; 0xff
 80050ac:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80050b0:	f013 fa64 	bl	801857c <memset>
	//memset((void *) LCD_FRAME_BUFFER, 0xff, BUFFER_OFFSET);
}
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	d0050000 	.word	0xd0050000

080050bc <ui_start_tuner>:


void ui_start_tuner()
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
    int hz = 332;
 80050c2:	f44f 73a6 	mov.w	r3, #332	; 0x14c
 80050c6:	607b      	str	r3, [r7, #4]

    itoa(hz, frequency_str, 10);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	491f      	ldr	r1, [pc, #124]	; (8005148 <ui_start_tuner+0x8c>)
 80050cc:	220a      	movs	r2, #10
 80050ce:	f7ff ff93 	bl	8004ff8 <itoa>
    strcat((char *)frequency_str, (char *)hz_str);
 80050d2:	481d      	ldr	r0, [pc, #116]	; (8005148 <ui_start_tuner+0x8c>)
 80050d4:	491d      	ldr	r1, [pc, #116]	; (800514c <ui_start_tuner+0x90>)
 80050d6:	f013 fa9b 	bl	8018610 <strcat>

    LCD_SetColors(LCD_COLOR_MAGENTA , LCD_COLOR_WHITE);
 80050da:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80050de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80050e2:	f010 fc45 	bl	8015970 <LCD_SetColors>

    while(1){

        ui_bfclear();
 80050e6:	f7ff ffdd 	bl	80050a4 <ui_bfclear>
    
        LCD_DisplayStringLine(LCD_LINE_3, sound[3]);
 80050ea:	f010 fcbb 	bl	8015a64 <LCD_GetFont>
 80050ee:	4603      	mov	r3, r0
 80050f0:	88db      	ldrh	r3, [r3, #6]
 80050f2:	461a      	mov	r2, r3
 80050f4:	0052      	lsls	r2, r2, #1
 80050f6:	4413      	add	r3, r2
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	4618      	mov	r0, r3
 80050fc:	4914      	ldr	r1, [pc, #80]	; (8005150 <ui_start_tuner+0x94>)
 80050fe:	f010 fe2d 	bl	8015d5c <LCD_DisplayStringLine>
        LCD_DisplayStringLine(LCD_LINE_5, frequency_str);
 8005102:	f010 fcaf 	bl	8015a64 <LCD_GetFont>
 8005106:	4603      	mov	r3, r0
 8005108:	88db      	ldrh	r3, [r3, #6]
 800510a:	461a      	mov	r2, r3
 800510c:	0092      	lsls	r2, r2, #2
 800510e:	4413      	add	r3, r2
 8005110:	b29b      	uxth	r3, r3
 8005112:	4618      	mov	r0, r3
 8005114:	490c      	ldr	r1, [pc, #48]	; (8005148 <ui_start_tuner+0x8c>)
 8005116:	f010 fe21 	bl	8015d5c <LCD_DisplayStringLine>

        LCD_DrawLine(20, 200, 200, LCD_DIR_HORIZONTAL);
 800511a:	2014      	movs	r0, #20
 800511c:	21c8      	movs	r1, #200	; 0xc8
 800511e:	22c8      	movs	r2, #200	; 0xc8
 8005120:	2300      	movs	r3, #0
 8005122:	f010 fe9f 	bl	8015e64 <LCD_DrawLine>
        LCD_DrawLine(20, 180, 40, LCD_DIR_VERTICAL);
 8005126:	2014      	movs	r0, #20
 8005128:	21b4      	movs	r1, #180	; 0xb4
 800512a:	2228      	movs	r2, #40	; 0x28
 800512c:	2301      	movs	r3, #1
 800512e:	f010 fe99 	bl	8015e64 <LCD_DrawLine>
        LCD_DrawLine(220, 180, 40, LCD_DIR_VERTICAL);
 8005132:	20dc      	movs	r0, #220	; 0xdc
 8005134:	21b4      	movs	r1, #180	; 0xb4
 8005136:	2228      	movs	r2, #40	; 0x28
 8005138:	2301      	movs	r3, #1
 800513a:	f010 fe93 	bl	8015e64 <LCD_DrawLine>

        sleep(1220);
 800513e:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8005142:	f012 ff5d 	bl	8018000 <sleep>
    }
 8005146:	e7ce      	b.n	80050e6 <ui_start_tuner+0x2a>
 8005148:	200052fc 	.word	0x200052fc
 800514c:	20000074 	.word	0x20000074
 8005150:	2000006a 	.word	0x2000006a

08005154 <ui_init>:
}

void ui_init()
{
 8005154:	b580      	push	{r7, lr}
 8005156:	af00      	add	r7, sp, #0

    LCD_Init();
 8005158:	f010 fb20 	bl	801579c <LCD_Init>

    LCD_LayerInit();
 800515c:	f010 fb78 	bl	8015850 <LCD_LayerInit>

    LTDC_Cmd(ENABLE);
 8005160:	2001      	movs	r0, #1
 8005162:	f009 fbd1 	bl	800e908 <LTDC_Cmd>

    LCD_DisplayOn();
 8005166:	f012 f999 	bl	801749c <LCD_DisplayOn>

    LCD_SetLayer(LCD_FOREGROUND_LAYER);
 800516a:	2001      	movs	r0, #1
 800516c:	f010 fbe0 	bl	8015930 <LCD_SetLayer>

    ui_start_tuner();
 8005170:	f7ff ffa4 	bl	80050bc <ui_start_tuner>
}
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop

08005178 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8005180:	4a05      	ldr	r2, [pc, #20]	; (8005198 <NVIC_PriorityGroupConfig+0x20>)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800518c:	60d3      	str	r3, [r2, #12]
}
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr
 8005198:	e000ed00 	.word	0xe000ed00

0800519c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80051a4:	2300      	movs	r3, #0
 80051a6:	73fb      	strb	r3, [r7, #15]
 80051a8:	2300      	movs	r3, #0
 80051aa:	73bb      	strb	r3, [r7, #14]
 80051ac:	230f      	movs	r3, #15
 80051ae:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	78db      	ldrb	r3, [r3, #3]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d037      	beq.n	8005228 <NVIC_Init+0x8c>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80051b8:	4b25      	ldr	r3, [pc, #148]	; (8005250 <NVIC_Init+0xb4>)
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	43db      	mvns	r3, r3
 80051be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051c2:	0a1b      	lsrs	r3, r3, #8
 80051c4:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80051c6:	7bfb      	ldrb	r3, [r7, #15]
 80051c8:	f1c3 0304 	rsb	r3, r3, #4
 80051cc:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80051ce:	7b7a      	ldrb	r2, [r7, #13]
 80051d0:	7bfb      	ldrb	r3, [r7, #15]
 80051d2:	fa42 f303 	asr.w	r3, r2, r3
 80051d6:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	785b      	ldrb	r3, [r3, #1]
 80051dc:	461a      	mov	r2, r3
 80051de:	7bbb      	ldrb	r3, [r7, #14]
 80051e0:	fa02 f303 	lsl.w	r3, r2, r3
 80051e4:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	789a      	ldrb	r2, [r3, #2]
 80051ea:	7b7b      	ldrb	r3, [r7, #13]
 80051ec:	4013      	ands	r3, r2
 80051ee:	b2da      	uxtb	r2, r3
 80051f0:	7bfb      	ldrb	r3, [r7, #15]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 80051f6:	7bfb      	ldrb	r3, [r7, #15]
 80051f8:	011b      	lsls	r3, r3, #4
 80051fa:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80051fc:	4a15      	ldr	r2, [pc, #84]	; (8005254 <NVIC_Init+0xb8>)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	4413      	add	r3, r2
 8005204:	7bfa      	ldrb	r2, [r7, #15]
 8005206:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800520a:	4b12      	ldr	r3, [pc, #72]	; (8005254 <NVIC_Init+0xb8>)
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	7812      	ldrb	r2, [r2, #0]
 8005210:	0952      	lsrs	r2, r2, #5
 8005212:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8005214:	6879      	ldr	r1, [r7, #4]
 8005216:	7809      	ldrb	r1, [r1, #0]
 8005218:	f001 011f 	and.w	r1, r1, #31
 800521c:	2001      	movs	r0, #1
 800521e:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005222:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005226:	e00e      	b.n	8005246 <NVIC_Init+0xaa>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005228:	4b0a      	ldr	r3, [pc, #40]	; (8005254 <NVIC_Init+0xb8>)
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	7812      	ldrb	r2, [r2, #0]
 800522e:	0952      	lsrs	r2, r2, #5
 8005230:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8005232:	6879      	ldr	r1, [r7, #4]
 8005234:	7809      	ldrb	r1, [r1, #0]
 8005236:	f001 011f 	and.w	r1, r1, #31
 800523a:	2001      	movs	r0, #1
 800523c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005240:	3220      	adds	r2, #32
 8005242:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8005246:	3714      	adds	r7, #20
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr
 8005250:	e000ed00 	.word	0xe000ed00
 8005254:	e000e100 	.word	0xe000e100

08005258 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8005262:	4a07      	ldr	r2, [pc, #28]	; (8005280 <NVIC_SetVectorTable+0x28>)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800526a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800526e:	6879      	ldr	r1, [r7, #4]
 8005270:	430b      	orrs	r3, r1
 8005272:	6093      	str	r3, [r2, #8]
}
 8005274:	370c      	adds	r7, #12
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	e000ed00 	.word	0xe000ed00

08005284 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	4602      	mov	r2, r0
 800528c:	460b      	mov	r3, r1
 800528e:	71fa      	strb	r2, [r7, #7]
 8005290:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8005292:	79bb      	ldrb	r3, [r7, #6]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d006      	beq.n	80052a6 <NVIC_SystemLPConfig+0x22>
  {
    SCB->SCR |= LowPowerMode;
 8005298:	4b09      	ldr	r3, [pc, #36]	; (80052c0 <NVIC_SystemLPConfig+0x3c>)
 800529a:	4a09      	ldr	r2, [pc, #36]	; (80052c0 <NVIC_SystemLPConfig+0x3c>)
 800529c:	6911      	ldr	r1, [r2, #16]
 800529e:	79fa      	ldrb	r2, [r7, #7]
 80052a0:	430a      	orrs	r2, r1
 80052a2:	611a      	str	r2, [r3, #16]
 80052a4:	e006      	b.n	80052b4 <NVIC_SystemLPConfig+0x30>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 80052a6:	4b06      	ldr	r3, [pc, #24]	; (80052c0 <NVIC_SystemLPConfig+0x3c>)
 80052a8:	4a05      	ldr	r2, [pc, #20]	; (80052c0 <NVIC_SystemLPConfig+0x3c>)
 80052aa:	6911      	ldr	r1, [r2, #16]
 80052ac:	79fa      	ldrb	r2, [r7, #7]
 80052ae:	43d2      	mvns	r2, r2
 80052b0:	400a      	ands	r2, r1
 80052b2:	611a      	str	r2, [r3, #16]
  }
}
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	e000ed00 	.word	0xe000ed00

080052c4 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b04      	cmp	r3, #4
 80052d0:	d106      	bne.n	80052e0 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80052d2:	4b09      	ldr	r3, [pc, #36]	; (80052f8 <SysTick_CLKSourceConfig+0x34>)
 80052d4:	4a08      	ldr	r2, [pc, #32]	; (80052f8 <SysTick_CLKSourceConfig+0x34>)
 80052d6:	6812      	ldr	r2, [r2, #0]
 80052d8:	f042 0204 	orr.w	r2, r2, #4
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	e005      	b.n	80052ec <SysTick_CLKSourceConfig+0x28>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 80052e0:	4b05      	ldr	r3, [pc, #20]	; (80052f8 <SysTick_CLKSourceConfig+0x34>)
 80052e2:	4a05      	ldr	r2, [pc, #20]	; (80052f8 <SysTick_CLKSourceConfig+0x34>)
 80052e4:	6812      	ldr	r2, [r2, #0]
 80052e6:	f022 0204 	bic.w	r2, r2, #4
 80052ea:	601a      	str	r2, [r3, #0]
  }
}
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	e000e010 	.word	0xe000e010

080052fc <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 8005300:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005304:	2101      	movs	r1, #1
 8005306:	f00a fda5 	bl	800fe54 <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 800530a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800530e:	2100      	movs	r1, #0
 8005310:	f00a fda0 	bl	800fe54 <RCC_APB2PeriphResetCmd>
}
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop

08005318 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8005322:	2300      	movs	r3, #0
 8005324:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8005326:	2300      	movs	r3, #0
 8005328:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8005336:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800533a:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	791b      	ldrb	r3, [r3, #4]
 8005340:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8005346:	4313      	orrs	r3, r2
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	4313      	orrs	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	4b17      	ldr	r3, [pc, #92]	; (80053bc <ADC_Init+0xa4>)
 800535e:	4013      	ands	r3, r2
 8005360:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800536a:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8005370:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	795b      	ldrb	r3, [r3, #5]
 8005376:	005b      	lsls	r3, r3, #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8005378:	4313      	orrs	r3, r2
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	4313      	orrs	r3, r2
 800537e:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538a:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005392:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	7d1b      	ldrb	r3, [r3, #20]
 8005398:	3b01      	subs	r3, #1
 800539a:	b2da      	uxtb	r2, r3
 800539c:	7afb      	ldrb	r3, [r7, #11]
 800539e:	4313      	orrs	r3, r2
 80053a0:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 80053a2:	7afb      	ldrb	r3, [r7, #11]
 80053a4:	051b      	lsls	r3, r3, #20
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80053b2:	3714      	adds	r7, #20
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	c0fff7fd 	.word	0xc0fff7fd

080053c0 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	751a      	strb	r2, [r3, #20]
}
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8005404:	2300      	movs	r3, #0
 8005406:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8005408:	4b0e      	ldr	r3, [pc, #56]	; (8005444 <ADC_CommonInit+0x48>)
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	4b0d      	ldr	r3, [pc, #52]	; (8005448 <ADC_CommonInit+0x4c>)
 8005412:	4013      	ands	r3, r2
 8005414:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800541e:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8005424:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	68db      	ldr	r3, [r3, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800542a:	4313      	orrs	r3, r2
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	4313      	orrs	r3, r2
 8005430:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8005432:	4b04      	ldr	r3, [pc, #16]	; (8005444 <ADC_CommonInit+0x48>)
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	605a      	str	r2, [r3, #4]
}
 8005438:	3714      	adds	r7, #20
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	40012300 	.word	0x40012300
 8005448:	fffc30e0 	.word	0xfffc30e0

0800544c <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	60da      	str	r2, [r3, #12]
}
 800546c:	370c      	adds	r7, #12
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop

08005478 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	460b      	mov	r3, r1
 8005482:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005484:	78fb      	ldrb	r3, [r7, #3]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d006      	beq.n	8005498 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f043 0201 	orr.w	r2, r3, #1
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	609a      	str	r2, [r3, #8]
 8005496:	e005      	b.n	80054a4 <ADC_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f023 0201 	bic.w	r2, r3, #1
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	609a      	str	r2, [r3, #8]
  }
}
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop

080054b0 <ADC_AnalogWatchdogCmd>:
  *            @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected channels
  *            @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
  * @retval None	  
  */
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80054ba:	2300      	movs	r3, #0
 80054bc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  tmpreg &= CR1_AWDMode_RESET;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80054ca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	605a      	str	r2, [r3, #4]
}
 80054de:	3714      	adds	r7, #20
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <ADC_AnalogWatchdogThresholdsConfig>:
  *          This parameter must be a 12-bit value.
  * @retval None
  */
void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
                                        uint16_t LowThreshold)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	4613      	mov	r3, r2
 80054f2:	460a      	mov	r2, r1
 80054f4:	807a      	strh	r2, [r7, #2]
 80054f6:	803b      	strh	r3, [r7, #0]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
 80054f8:	887a      	ldrh	r2, [r7, #2]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
 80054fe:	883a      	ldrh	r2, [r7, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005504:	370c      	adds	r7, #12
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop

08005510 <ADC_AnalogWatchdogSingleChannelConfig>:
  *            @arg ADC_Channel_17: ADC Channel17 selected
  *            @arg ADC_Channel_18: ADC Channel18 selected
  * @retval None
  */
void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	460b      	mov	r3, r1
 800551a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 800551c:	2300      	movs	r3, #0
 800551e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	60fb      	str	r3, [r7, #12]
  
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_RESET;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f023 031f 	bic.w	r3, r3, #31
 800552c:	60fb      	str	r3, [r7, #12]
  
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
 800552e:	78fb      	ldrb	r3, [r7, #3]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	4313      	orrs	r3, r2
 8005534:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	605a      	str	r2, [r3, #4]
}
 800553c:	3714      	adds	r7, #20
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop

08005548 <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor and Vrefint channels.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	4603      	mov	r3, r0
 8005550:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005552:	79fb      	ldrb	r3, [r7, #7]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d006      	beq.n	8005566 <ADC_TempSensorVrefintCmd+0x1e>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 8005558:	4b08      	ldr	r3, [pc, #32]	; (800557c <ADC_TempSensorVrefintCmd+0x34>)
 800555a:	4a08      	ldr	r2, [pc, #32]	; (800557c <ADC_TempSensorVrefintCmd+0x34>)
 800555c:	6852      	ldr	r2, [r2, #4]
 800555e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005562:	605a      	str	r2, [r3, #4]
 8005564:	e005      	b.n	8005572 <ADC_TempSensorVrefintCmd+0x2a>
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 8005566:	4b05      	ldr	r3, [pc, #20]	; (800557c <ADC_TempSensorVrefintCmd+0x34>)
 8005568:	4a04      	ldr	r2, [pc, #16]	; (800557c <ADC_TempSensorVrefintCmd+0x34>)
 800556a:	6852      	ldr	r2, [r2, #4]
 800556c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8005570:	605a      	str	r2, [r3, #4]
  }
}
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	40012300 	.word	0x40012300

08005580 <ADC_VBATCmd>:
  * @param  NewState: new state of the VBAT channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VBATCmd(FunctionalState NewState)                             
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	4603      	mov	r3, r0
 8005588:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800558a:	79fb      	ldrb	r3, [r7, #7]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d006      	beq.n	800559e <ADC_VBATCmd+0x1e>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 8005590:	4b08      	ldr	r3, [pc, #32]	; (80055b4 <ADC_VBATCmd+0x34>)
 8005592:	4a08      	ldr	r2, [pc, #32]	; (80055b4 <ADC_VBATCmd+0x34>)
 8005594:	6852      	ldr	r2, [r2, #4]
 8005596:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800559a:	605a      	str	r2, [r3, #4]
 800559c:	e005      	b.n	80055aa <ADC_VBATCmd+0x2a>
  }
  else
  {
    /* Disable the VBAT channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 800559e:	4b05      	ldr	r3, [pc, #20]	; (80055b4 <ADC_VBATCmd+0x34>)
 80055a0:	4a04      	ldr	r2, [pc, #16]	; (80055b4 <ADC_VBATCmd+0x34>)
 80055a2:	6852      	ldr	r2, [r2, #4]
 80055a4:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80055a8:	605a      	str	r2, [r3, #4]
  }
}
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr
 80055b4:	40012300 	.word	0x40012300

080055b8 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	70f9      	strb	r1, [r7, #3]
 80055c2:	70ba      	strb	r2, [r7, #2]
 80055c4:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80055c6:	2300      	movs	r3, #0
 80055c8:	60fb      	str	r3, [r7, #12]
 80055ca:	2300      	movs	r3, #0
 80055cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80055ce:	78fb      	ldrb	r3, [r7, #3]
 80055d0:	2b09      	cmp	r3, #9
 80055d2:	d923      	bls.n	800561c <ADC_RegularChannelConfig+0x64>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 80055da:	78fb      	ldrb	r3, [r7, #3]
 80055dc:	f1a3 020a 	sub.w	r2, r3, #10
 80055e0:	4613      	mov	r3, r2
 80055e2:	005b      	lsls	r3, r3, #1
 80055e4:	4413      	add	r3, r2
 80055e6:	2207      	movs	r2, #7
 80055e8:	fa02 f303 	lsl.w	r3, r2, r3
 80055ec:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	43db      	mvns	r3, r3
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	4013      	ands	r3, r2
 80055f6:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 80055f8:	7879      	ldrb	r1, [r7, #1]
 80055fa:	78fb      	ldrb	r3, [r7, #3]
 80055fc:	f1a3 020a 	sub.w	r2, r3, #10
 8005600:	4613      	mov	r3, r2
 8005602:	005b      	lsls	r3, r3, #1
 8005604:	4413      	add	r3, r2
 8005606:	fa01 f303 	lsl.w	r3, r1, r3
 800560a:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	4313      	orrs	r3, r2
 8005612:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	60da      	str	r2, [r3, #12]
 800561a:	e01e      	b.n	800565a <ADC_RegularChannelConfig+0xa2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8005622:	78fa      	ldrb	r2, [r7, #3]
 8005624:	4613      	mov	r3, r2
 8005626:	005b      	lsls	r3, r3, #1
 8005628:	4413      	add	r3, r2
 800562a:	2207      	movs	r2, #7
 800562c:	fa02 f303 	lsl.w	r3, r2, r3
 8005630:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	43db      	mvns	r3, r3
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	4013      	ands	r3, r2
 800563a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 800563c:	7879      	ldrb	r1, [r7, #1]
 800563e:	78fa      	ldrb	r2, [r7, #3]
 8005640:	4613      	mov	r3, r2
 8005642:	005b      	lsls	r3, r3, #1
 8005644:	4413      	add	r3, r2
 8005646:	fa01 f303 	lsl.w	r3, r1, r3
 800564a:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	4313      	orrs	r3, r2
 8005652:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 800565a:	78bb      	ldrb	r3, [r7, #2]
 800565c:	2b06      	cmp	r3, #6
 800565e:	d821      	bhi.n	80056a4 <ADC_RegularChannelConfig+0xec>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005664:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8005666:	78bb      	ldrb	r3, [r7, #2]
 8005668:	1e5a      	subs	r2, r3, #1
 800566a:	4613      	mov	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4413      	add	r3, r2
 8005670:	221f      	movs	r2, #31
 8005672:	fa02 f303 	lsl.w	r3, r2, r3
 8005676:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	43db      	mvns	r3, r3
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	4013      	ands	r3, r2
 8005680:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8005682:	78f9      	ldrb	r1, [r7, #3]
 8005684:	78bb      	ldrb	r3, [r7, #2]
 8005686:	1e5a      	subs	r2, r3, #1
 8005688:	4613      	mov	r3, r2
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	4413      	add	r3, r2
 800568e:	fa01 f303 	lsl.w	r3, r1, r3
 8005692:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	4313      	orrs	r3, r2
 800569a:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	635a      	str	r2, [r3, #52]	; 0x34
 80056a2:	e047      	b.n	8005734 <ADC_RegularChannelConfig+0x17c>
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 80056a4:	78bb      	ldrb	r3, [r7, #2]
 80056a6:	2b0c      	cmp	r3, #12
 80056a8:	d821      	bhi.n	80056ee <ADC_RegularChannelConfig+0x136>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ae:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 80056b0:	78bb      	ldrb	r3, [r7, #2]
 80056b2:	1fda      	subs	r2, r3, #7
 80056b4:	4613      	mov	r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	4413      	add	r3, r2
 80056ba:	221f      	movs	r2, #31
 80056bc:	fa02 f303 	lsl.w	r3, r2, r3
 80056c0:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	43db      	mvns	r3, r3
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	4013      	ands	r3, r2
 80056ca:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 80056cc:	78f9      	ldrb	r1, [r7, #3]
 80056ce:	78bb      	ldrb	r3, [r7, #2]
 80056d0:	1fda      	subs	r2, r3, #7
 80056d2:	4613      	mov	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4413      	add	r3, r2
 80056d8:	fa01 f303 	lsl.w	r3, r1, r3
 80056dc:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	631a      	str	r2, [r3, #48]	; 0x30
 80056ec:	e022      	b.n	8005734 <ADC_RegularChannelConfig+0x17c>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f2:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 80056f4:	78bb      	ldrb	r3, [r7, #2]
 80056f6:	f1a3 020d 	sub.w	r2, r3, #13
 80056fa:	4613      	mov	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4413      	add	r3, r2
 8005700:	221f      	movs	r2, #31
 8005702:	fa02 f303 	lsl.w	r3, r2, r3
 8005706:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	43db      	mvns	r3, r3
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	4013      	ands	r3, r2
 8005710:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8005712:	78f9      	ldrb	r1, [r7, #3]
 8005714:	78bb      	ldrb	r3, [r7, #2]
 8005716:	f1a3 020d 	sub.w	r2, r3, #13
 800571a:	4613      	mov	r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4413      	add	r3, r2
 8005720:	fa01 f303 	lsl.w	r3, r1, r3
 8005724:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	4313      	orrs	r3, r2
 800572c:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop

08005740 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	609a      	str	r2, [r3, #8]
}
 8005754:	370c      	adds	r7, #12
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop

08005760 <ADC_GetSoftwareStartConvStatus>:
  * @brief  Gets the selected ADC Software start regular conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8005768:	2300      	movs	r3, #0
 800576a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_SWSTART) != (uint32_t)RESET)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d002      	beq.n	800577e <ADC_GetSoftwareStartConvStatus+0x1e>
  {
    /* SWSTART bit is set */
    bitstatus = SET;
 8005778:	2301      	movs	r3, #1
 800577a:	73fb      	strb	r3, [r7, #15]
 800577c:	e001      	b.n	8005782 <ADC_GetSoftwareStartConvStatus+0x22>
  }
  else
  {
    /* SWSTART bit is reset */
    bitstatus = RESET;
 800577e:	2300      	movs	r3, #0
 8005780:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the SWSTART bit status */
  return  bitstatus;
 8005782:	7bfb      	ldrb	r3, [r7, #15]
}
 8005784:	4618      	mov	r0, r3
 8005786:	3714      	adds	r7, #20
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <ADC_EOCOnEachRegularChannelCmd>:
  * @param  NewState: new state of the selected ADC EOC flag rising
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	460b      	mov	r3, r1
 800579a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800579c:	78fb      	ldrb	r3, [r7, #3]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d006      	beq.n	80057b0 <ADC_EOCOnEachRegularChannelCmd+0x20>
  {
    /* Enable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	609a      	str	r2, [r3, #8]
 80057ae:	e005      	b.n	80057bc <ADC_EOCOnEachRegularChannelCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	609a      	str	r2, [r3, #8]
  }
}
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop

080057c8 <ADC_ContinuousModeCmd>:
  * @param  NewState: new state of the selected ADC continuous conversion mode
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	460b      	mov	r3, r1
 80057d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80057d4:	78fb      	ldrb	r3, [r7, #3]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d006      	beq.n	80057e8 <ADC_ContinuousModeCmd+0x20>
  {
    /* Enable the selected ADC continuous conversion mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f043 0202 	orr.w	r2, r3, #2
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	609a      	str	r2, [r3, #8]
 80057e6:	e005      	b.n	80057f4 <ADC_ContinuousModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC continuous conversion mode */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f023 0202 	bic.w	r2, r3, #2
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	609a      	str	r2, [r3, #8]
  }
}
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop

08005800 <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel count value.
  *          This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	460b      	mov	r3, r1
 800580a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 800580c:	2300      	movs	r3, #0
 800580e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 8005810:	2300      	movs	r3, #0
 8005812:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_RESET;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005820:	60fb      	str	r3, [r7, #12]
  
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
 8005822:	78fb      	ldrb	r3, [r7, #3]
 8005824:	3b01      	subs	r3, #1
 8005826:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 13;
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	035b      	lsls	r3, r3, #13
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	4313      	orrs	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	605a      	str	r2, [r3, #4]
}
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop

08005844 <ADC_DiscModeCmd>:
  *         regular group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	460b      	mov	r3, r1
 800584e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005850:	78fb      	ldrb	r3, [r7, #3]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d006      	beq.n	8005864 <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	605a      	str	r2, [r3, #4]
 8005862:	e005      	b.n	8005870 <ADC_DiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	605a      	str	r2, [r3, #4]
  }
}
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop

0800587c <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005888:	b29b      	uxth	r3, r3
}
 800588a:	4618      	mov	r0, r3
 800588c:	370c      	adds	r7, #12
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop

08005898 <ADC_GetMultiModeConversionValue>:
  * @note   In triple mode, the value returned by this function is as following
  *           Data[15:0] : these bits contain alternatively the regular data of ADC1, ADC3 and ADC2.
  *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3.           
  */
uint32_t ADC_GetMultiModeConversionValue(void)
{
 8005898:	b480      	push	{r7}
 800589a:	af00      	add	r7, sp, #0
  /* Return the multi mode conversion value */
  return (*(__IO uint32_t *) CDR_ADDRESS);
 800589c:	4b03      	ldr	r3, [pc, #12]	; (80058ac <ADC_GetMultiModeConversionValue+0x14>)
 800589e:	681b      	ldr	r3, [r3, #0]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	40012308 	.word	0x40012308

080058b0 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	460b      	mov	r3, r1
 80058ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80058bc:	78fb      	ldrb	r3, [r7, #3]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d006      	beq.n	80058d0 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	609a      	str	r2, [r3, #8]
 80058ce:	e005      	b.n	80058dc <ADC_DMACmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	609a      	str	r2, [r3, #8]
  }
}
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop

080058e8 <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	460b      	mov	r3, r1
 80058f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80058f4:	78fb      	ldrb	r3, [r7, #3]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d006      	beq.n	8005908 <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	609a      	str	r2, [r3, #8]
 8005906:	e005      	b.n	8005914 <ADC_DMARequestAfterLastTransferCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	609a      	str	r2, [r3, #8]
  }
}
 8005914:	370c      	adds	r7, #12
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop

08005920 <ADC_MultiModeDMARequestAfterLastTransferCmd>:
  *         by ADC_CommonInitStruct.ADC_DMAAccessMode structure member) is 
  *          ADC_DMAAccessMode_1, ADC_DMAAccessMode_2 or ADC_DMAAccessMode_3.     
  * @retval None
  */
void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	4603      	mov	r3, r0
 8005928:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800592a:	79fb      	ldrb	r3, [r7, #7]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d006      	beq.n	800593e <ADC_MultiModeDMARequestAfterLastTransferCmd+0x1e>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 8005930:	4b08      	ldr	r3, [pc, #32]	; (8005954 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x34>)
 8005932:	4a08      	ldr	r2, [pc, #32]	; (8005954 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x34>)
 8005934:	6852      	ldr	r2, [r2, #4]
 8005936:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800593a:	605a      	str	r2, [r3, #4]
 800593c:	e005      	b.n	800594a <ADC_MultiModeDMARequestAfterLastTransferCmd+0x2a>
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 800593e:	4b05      	ldr	r3, [pc, #20]	; (8005954 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x34>)
 8005940:	4a04      	ldr	r2, [pc, #16]	; (8005954 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x34>)
 8005942:	6852      	ldr	r2, [r2, #4]
 8005944:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005948:	605a      	str	r2, [r3, #4]
  }
}
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr
 8005954:	40012300 	.word	0x40012300

08005958 <ADC_InjectedChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8005958:	b480      	push	{r7}
 800595a:	b087      	sub	sp, #28
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	70f9      	strb	r1, [r7, #3]
 8005962:	70ba      	strb	r2, [r7, #2]
 8005964:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
 8005966:	2300      	movs	r3, #0
 8005968:	617b      	str	r3, [r7, #20]
 800596a:	2300      	movs	r3, #0
 800596c:	613b      	str	r3, [r7, #16]
 800596e:	2300      	movs	r3, #0
 8005970:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8005972:	78fb      	ldrb	r3, [r7, #3]
 8005974:	2b09      	cmp	r3, #9
 8005976:	d923      	bls.n	80059c0 <ADC_InjectedChannelConfig+0x68>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 800597e:	78fb      	ldrb	r3, [r7, #3]
 8005980:	f1a3 020a 	sub.w	r2, r3, #10
 8005984:	4613      	mov	r3, r2
 8005986:	005b      	lsls	r3, r3, #1
 8005988:	4413      	add	r3, r2
 800598a:	2207      	movs	r2, #7
 800598c:	fa02 f303 	lsl.w	r3, r2, r3
 8005990:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	43db      	mvns	r3, r3
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	4013      	ands	r3, r2
 800599a:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 800599c:	7879      	ldrb	r1, [r7, #1]
 800599e:	78fb      	ldrb	r3, [r7, #3]
 80059a0:	f1a3 020a 	sub.w	r2, r3, #10
 80059a4:	4613      	mov	r3, r2
 80059a6:	005b      	lsls	r3, r3, #1
 80059a8:	4413      	add	r3, r2
 80059aa:	fa01 f303 	lsl.w	r3, r1, r3
 80059ae:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	60da      	str	r2, [r3, #12]
 80059be:	e01e      	b.n	80059fe <ADC_InjectedChannelConfig+0xa6>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 80059c6:	78fa      	ldrb	r2, [r7, #3]
 80059c8:	4613      	mov	r3, r2
 80059ca:	005b      	lsls	r3, r3, #1
 80059cc:	4413      	add	r3, r2
 80059ce:	2207      	movs	r2, #7
 80059d0:	fa02 f303 	lsl.w	r3, r2, r3
 80059d4:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	43db      	mvns	r3, r3
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	4013      	ands	r3, r2
 80059de:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80059e0:	7879      	ldrb	r1, [r7, #1]
 80059e2:	78fa      	ldrb	r2, [r7, #3]
 80059e4:	4613      	mov	r3, r2
 80059e6:	005b      	lsls	r3, r3, #1
 80059e8:	4413      	add	r3, r2
 80059ea:	fa01 f303 	lsl.w	r3, r1, r3
 80059ee:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	611a      	str	r2, [r3, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a02:	617b      	str	r3, [r7, #20]
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005a0a:	0d1b      	lsrs	r3, r3, #20
 8005a0c:	60fb      	str	r3, [r7, #12]
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	78ba      	ldrb	r2, [r7, #2]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	3302      	adds	r3, #2
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	4613      	mov	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	4413      	add	r3, r2
 8005a24:	221f      	movs	r2, #31
 8005a26:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2a:	613b      	str	r3, [r7, #16]
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	43db      	mvns	r3, r3
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	4013      	ands	r3, r2
 8005a34:	617b      	str	r3, [r7, #20]
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8005a36:	78f9      	ldrb	r1, [r7, #3]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	78ba      	ldrb	r2, [r7, #2]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	3302      	adds	r3, #2
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	461a      	mov	r2, r3
 8005a48:	4613      	mov	r3, r2
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	4413      	add	r3, r2
 8005a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a52:	613b      	str	r3, [r7, #16]
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	617b      	str	r3, [r7, #20]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005a62:	371c      	adds	r7, #28
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <ADC_InjectedSequencerLengthConfig>:
  * @param  Length: The sequencer length. 
  *          This parameter must be a number between 1 to 4.
  * @retval None
  */
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	460b      	mov	r3, r1
 8005a76:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a84:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old injected sequence length JL bits */
  tmpreg1 &= JSQR_JL_RESET;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005a8c:	60fb      	str	r3, [r7, #12]
  
  /* Set the injected sequence length JL bits */
  tmpreg2 = Length - 1; 
 8005a8e:	78fb      	ldrb	r3, [r7, #3]
 8005a90:	3b01      	subs	r3, #1
 8005a92:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 20;
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	051b      	lsls	r3, r3, #20
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005aa4:	3714      	adds	r7, #20
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop

08005ab0 <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *          This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	4613      	mov	r3, r2
 8005aba:	460a      	mov	r2, r1
 8005abc:	70fa      	strb	r2, [r7, #3]
 8005abe:	803b      	strh	r3, [r7, #0]
    __IO uint32_t tmp = 0;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));
  
  tmp = (uint32_t)ADCx;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel;
 8005ac8:	78fa      	ldrb	r2, [r7, #3]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	4413      	add	r3, r2
 8005ace:	60fb      	str	r3, [r7, #12]
  
  /* Set the selected injected channel data offset */
 *(__IO uint32_t *) tmp = (uint32_t)Offset;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	883a      	ldrh	r2, [r7, #0]
 8005ad4:	601a      	str	r2, [r3, #0]
}
 8005ad6:	3714      	adds	r7, #20
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <ADC_ExternalTrigInjectedConvConfig>:
  *            @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected 
  *            @arg ADC_ExternalTrigInjecConv_Ext_IT15: External interrupt line 15 event selected                          
  * @retval None
  */
void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005aea:	2300      	movs	r3, #0
 8005aec:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_RESET;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8005afa:	60fb      	str	r3, [r7, #12]
  
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	609a      	str	r2, [r3, #8]
}
 8005b0a:	3714      	adds	r7, #20
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <ADC_ExternalTrigInjectedConvEdgeConfig>:
  *            @arg ADC_ExternalTrigInjecConvEdge_RisingFalling: detection on both rising 
  *                                                               and falling edge
  * @retval None
  */
void ADC_ExternalTrigInjectedConvEdgeConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConvEdge)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	60fb      	str	r3, [r7, #12]
  /* Clear the old external trigger edge for injected group */
  tmpreg &= CR2_JEXTEN_RESET;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005b2e:	60fb      	str	r3, [r7, #12]
  /* Set the new external trigger edge for injected group */
  tmpreg |= ADC_ExternalTrigInjecConvEdge;
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	609a      	str	r2, [r3, #8]
}
 8005b3e:	3714      	adds	r7, #20
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <ADC_SoftwareStartInjectedConv>:
  * @brief  Enables the selected ADC software start conversion of the injected channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC conversion for injected group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	609a      	str	r2, [r3, #8]
}
 8005b5c:	370c      	adds	r7, #12
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop

08005b68 <ADC_GetSoftwareStartInjectedConvCmdStatus>:
  * @brief  Gets the selected ADC Software start injected conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start injected conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8005b70:	2300      	movs	r3, #0
 8005b72:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d002      	beq.n	8005b86 <ADC_GetSoftwareStartInjectedConvCmdStatus+0x1e>
  {
    /* JSWSTART bit is set */
    bitstatus = SET;
 8005b80:	2301      	movs	r3, #1
 8005b82:	73fb      	strb	r3, [r7, #15]
 8005b84:	e001      	b.n	8005b8a <ADC_GetSoftwareStartInjectedConvCmdStatus+0x22>
  }
  else
  {
    /* JSWSTART bit is reset */
    bitstatus = RESET;
 8005b86:	2300      	movs	r3, #0
 8005b88:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
 8005b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3714      	adds	r7, #20
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <ADC_AutoInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC auto injected conversion
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005ba4:	78fb      	ldrb	r3, [r7, #3]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d006      	beq.n	8005bb8 <ADC_AutoInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	605a      	str	r2, [r3, #4]
 8005bb6:	e005      	b.n	8005bc4 <ADC_AutoInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	605a      	str	r2, [r3, #4]
  }
}
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop

08005bd0 <ADC_InjectedDiscModeCmd>:
  *         group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	460b      	mov	r3, r1
 8005bda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005bdc:	78fb      	ldrb	r3, [r7, #3]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d006      	beq.n	8005bf0 <ADC_InjectedDiscModeCmd+0x20>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	605a      	str	r2, [r3, #4]
 8005bee:	e005      	b.n	8005bfc <ADC_InjectedDiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	605a      	str	r2, [r3, #4]
  }
}
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop

08005c08 <ADC_GetInjectedConversionValue>:
  *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	460b      	mov	r3, r1
 8005c12:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 8005c14:	2300      	movs	r3, #0
 8005c16:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel + JDR_OFFSET;
 8005c1c:	78fa      	ldrb	r2, [r7, #3]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	4413      	add	r3, r2
 8005c22:	3328      	adds	r3, #40	; 0x28
 8005c24:	60fb      	str	r3, [r7, #12]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp); 
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	b29b      	uxth	r3, r3
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	4613      	mov	r3, r2
 8005c42:	460a      	mov	r2, r1
 8005c44:	807a      	strh	r2, [r7, #2]
 8005c46:	707b      	strb	r3, [r7, #1]
  uint32_t itmask = 0;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 8005c4c:	887b      	ldrh	r3, [r7, #2]
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	60fb      	str	r3, [r7, #12]
  itmask = (uint32_t)0x01 << itmask;    
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2201      	movs	r2, #1
 8005c56:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5a:	60fb      	str	r3, [r7, #12]

  if (NewState != DISABLE)
 8005c5c:	787b      	ldrb	r3, [r7, #1]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d006      	beq.n	8005c70 <ADC_ITConfig+0x38>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685a      	ldr	r2, [r3, #4]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	431a      	orrs	r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	605a      	str	r2, [r3, #4]
 8005c6e:	e006      	b.n	8005c7e <ADC_ITConfig+0x46>
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	43db      	mvns	r3, r3
 8005c78:	401a      	ands	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	605a      	str	r2, [r3, #4]
  }
}
 8005c7e:	3714      	adds	r7, #20
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	460b      	mov	r3, r1
 8005c92:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 8005c94:	2300      	movs	r3, #0
 8005c96:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	78fb      	ldrb	r3, [r7, #3]
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d002      	beq.n	8005caa <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	73fb      	strb	r3, [r7, #15]
 8005ca8:	e001      	b.n	8005cae <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8005caa:	2300      	movs	r3, #0
 8005cac:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8005cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3714      	adds	r7, #20
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <ADC_ClearFlag>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                          
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));

  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
 8005cc8:	78fb      	ldrb	r3, [r7, #3]
 8005cca:	43da      	mvns	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	601a      	str	r2, [r3, #0]
}
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop

08005cdc <ADC_GetITStatus>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                        
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b087      	sub	sp, #28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	75fb      	strb	r3, [r7, #23]
  uint32_t itmask = 0, enablestatus = 0;
 8005cec:	2300      	movs	r3, #0
 8005cee:	613b      	str	r3, [r7, #16]
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));

  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;
 8005cf4:	887b      	ldrh	r3, [r7, #2]
 8005cf6:	0a1b      	lsrs	r3, r3, #8
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	613b      	str	r3, [r7, #16]

  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685a      	ldr	r2, [r3, #4]
 8005d00:	887b      	ldrh	r3, [r7, #2]
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	2101      	movs	r1, #1
 8005d06:	fa01 f303 	lsl.w	r3, r1, r3
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	4013      	ands	r3, r2
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d005      	beq.n	8005d26 <ADC_GetITStatus+0x4a>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d002      	beq.n	8005d26 <ADC_GetITStatus+0x4a>
  {
    /* ADC_IT is set */
    bitstatus = SET;
 8005d20:	2301      	movs	r3, #1
 8005d22:	75fb      	strb	r3, [r7, #23]
 8005d24:	e001      	b.n	8005d2a <ADC_GetITStatus+0x4e>
  }
  else
  {
    /* ADC_IT is reset */
    bitstatus = RESET;
 8005d26:	2300      	movs	r3, #0
 8005d28:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the ADC_IT status */
  return  bitstatus;
 8005d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	371c      	adds	r7, #28
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <ADC_ClearITPendingBit>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                         
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	460b      	mov	r3, r1
 8005d42:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
 8005d44:	2300      	movs	r3, #0
 8005d46:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT)); 
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
 8005d48:	887b      	ldrh	r3, [r7, #2]
 8005d4a:	0a1b      	lsrs	r3, r3, #8
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
 8005d52:	43da      	mvns	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	601a      	str	r2, [r3, #0]
}                    
 8005d58:	3714      	adds	r7, #20
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop

08005d64 <CAN_DeInit>:
  * @brief  Deinitializes the CAN peripheral registers to their default reset values.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval None.
  */
void CAN_DeInit(CAN_TypeDef* CANx)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
 
  if (CANx == CAN1)
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	4b0d      	ldr	r3, [pc, #52]	; (8005da4 <CAN_DeInit+0x40>)
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d10a      	bne.n	8005d8a <CAN_DeInit+0x26>
  {
    /* Enable CAN1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 8005d74:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8005d78:	2101      	movs	r1, #1
 8005d7a:	f00a f84d 	bl	800fe18 <RCC_APB1PeriphResetCmd>
    /* Release CAN1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 8005d7e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8005d82:	2100      	movs	r1, #0
 8005d84:	f00a f848 	bl	800fe18 <RCC_APB1PeriphResetCmd>
 8005d88:	e009      	b.n	8005d9e <CAN_DeInit+0x3a>
  }
  else
  {  
    /* Enable CAN2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 8005d8a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005d8e:	2101      	movs	r1, #1
 8005d90:	f00a f842 	bl	800fe18 <RCC_APB1PeriphResetCmd>
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 8005d94:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005d98:	2100      	movs	r1, #0
 8005d9a:	f00a f83d 	bl	800fe18 <RCC_APB1PeriphResetCmd>
  }
}
 8005d9e:	3708      	adds	r7, #8
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	40006400 	.word	0x40006400

08005da8 <CAN_Init>:
  *         the configuration information for the CAN peripheral.
  * @retval Constant indicates initialization succeed which will be 
  *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
  */
uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b085      	sub	sp, #20
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  uint8_t InitStatus = CAN_InitStatus_Failed;
 8005db2:	2300      	movs	r3, #0
 8005db4:	73fb      	strb	r3, [r7, #15]
  uint32_t wait_ack = 0x00000000;
 8005db6:	2300      	movs	r3, #0
 8005db8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Exit from sleep mode */
  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f023 0202 	bic.w	r2, r3, #2
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f043 0201 	orr.w	r2, r3, #1
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	601a      	str	r2, [r3, #0]

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8005dd2:	e002      	b.n	8005dda <CAN_Init+0x32>
  {
    wait_ack++;
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	60bb      	str	r3, [r7, #8]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d104      	bne.n	8005df0 <CAN_Init+0x48>
 8005de6:	68ba      	ldr	r2, [r7, #8]
 8005de8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d1f1      	bne.n	8005dd4 <CAN_Init+0x2c>
  {
    wait_ack++;
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d102      	bne.n	8005e02 <CAN_Init+0x5a>
  {
    InitStatus = CAN_InitStatus_Failed;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	73fb      	strb	r3, [r7, #15]
 8005e00:	e09c      	b.n	8005f3c <CAN_Init+0x194>
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (CAN_InitStruct->CAN_TTCM == ENABLE)
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	799b      	ldrb	r3, [r3, #6]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d106      	bne.n	8005e18 <CAN_Init+0x70>
    {
      CANx->MCR |= CAN_MCR_TTCM;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	e005      	b.n	8005e24 <CAN_Init+0x7c>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (CAN_InitStruct->CAN_ABOM == ENABLE)
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	79db      	ldrb	r3, [r3, #7]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d106      	bne.n	8005e3a <CAN_Init+0x92>
    {
      CANx->MCR |= CAN_MCR_ABOM;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	601a      	str	r2, [r3, #0]
 8005e38:	e005      	b.n	8005e46 <CAN_Init+0x9e>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (CAN_InitStruct->CAN_AWUM == ENABLE)
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	7a1b      	ldrb	r3, [r3, #8]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d106      	bne.n	8005e5c <CAN_Init+0xb4>
    {
      CANx->MCR |= CAN_MCR_AWUM;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f043 0220 	orr.w	r2, r3, #32
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	601a      	str	r2, [r3, #0]
 8005e5a:	e005      	b.n	8005e68 <CAN_Init+0xc0>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f023 0220 	bic.w	r2, r3, #32
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (CAN_InitStruct->CAN_NART == ENABLE)
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	7a5b      	ldrb	r3, [r3, #9]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d106      	bne.n	8005e7e <CAN_Init+0xd6>
    {
      CANx->MCR |= CAN_MCR_NART;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f043 0210 	orr.w	r2, r3, #16
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	601a      	str	r2, [r3, #0]
 8005e7c:	e005      	b.n	8005e8a <CAN_Init+0xe2>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f023 0210 	bic.w	r2, r3, #16
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (CAN_InitStruct->CAN_RFLM == ENABLE)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	7a9b      	ldrb	r3, [r3, #10]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d106      	bne.n	8005ea0 <CAN_Init+0xf8>
    {
      CANx->MCR |= CAN_MCR_RFLM;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f043 0208 	orr.w	r2, r3, #8
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	601a      	str	r2, [r3, #0]
 8005e9e:	e005      	b.n	8005eac <CAN_Init+0x104>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f023 0208 	bic.w	r2, r3, #8
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (CAN_InitStruct->CAN_TXFP == ENABLE)
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	7adb      	ldrb	r3, [r3, #11]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d106      	bne.n	8005ec2 <CAN_Init+0x11a>
    {
      CANx->MCR |= CAN_MCR_TXFP;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f043 0204 	orr.w	r2, r3, #4
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	601a      	str	r2, [r3, #0]
 8005ec0:	e005      	b.n	8005ece <CAN_Init+0x126>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f023 0204 	bic.w	r2, r3, #4
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	789b      	ldrb	r3, [r3, #2]
 8005ed2:	079a      	lsls	r2, r3, #30
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	78db      	ldrb	r3, [r3, #3]
 8005ed8:	061b      	lsls	r3, r3, #24
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8005eda:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	791b      	ldrb	r3, [r3, #4]
 8005ee0:	041b      	lsls	r3, r3, #16
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 8005ee2:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	795b      	ldrb	r3, [r3, #5]
 8005ee8:	051b      	lsls	r3, r3, #20
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 8005eea:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	881b      	ldrh	r3, [r3, #0]
 8005ef0:	3b01      	subs	r3, #1

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 8005ef2:	431a      	orrs	r2, r3
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	61da      	str	r2, [r3, #28]
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);

    /* Request leave initialisation */
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f023 0201 	bic.w	r2, r3, #1
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	601a      	str	r2, [r3, #0]

   /* Wait the acknowledge */
   wait_ack = 0;
 8005f04:	2300      	movs	r3, #0
 8005f06:	60bb      	str	r3, [r7, #8]

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8005f08:	e002      	b.n	8005f10 <CAN_Init+0x168>
   {
     wait_ack++;
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	60bb      	str	r3, [r7, #8]
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;

   /* Wait the acknowledge */
   wait_ack = 0;

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d004      	beq.n	8005f26 <CAN_Init+0x17e>
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d1f1      	bne.n	8005f0a <CAN_Init+0x162>
   {
     wait_ack++;
   }

    /* ...and check acknowledged */
    if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	f003 0301 	and.w	r3, r3, #1
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d002      	beq.n	8005f38 <CAN_Init+0x190>
    {
      InitStatus = CAN_InitStatus_Failed;
 8005f32:	2300      	movs	r3, #0
 8005f34:	73fb      	strb	r3, [r7, #15]
 8005f36:	e001      	b.n	8005f3c <CAN_Init+0x194>
    }
    else
    {
      InitStatus = CAN_InitStatus_Success ;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* At this step, return the status of initialization */
  return InitStatus;
 8005f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop

08005f4c <CAN_FilterInit>:
  * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
  *         contains the configuration information.
  * @retval None
  */
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  uint32_t filter_number_bit_pos = 0;
 8005f54:	2300      	movs	r3, #0
 8005f56:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	7a9b      	ldrb	r3, [r3, #10]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f62:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 8005f64:	4b51      	ldr	r3, [pc, #324]	; (80060ac <CAN_FilterInit+0x160>)
 8005f66:	4a51      	ldr	r2, [pc, #324]	; (80060ac <CAN_FilterInit+0x160>)
 8005f68:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8005f6c:	f042 0201 	orr.w	r2, r2, #1
 8005f70:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 8005f74:	4b4d      	ldr	r3, [pc, #308]	; (80060ac <CAN_FilterInit+0x160>)
 8005f76:	4a4d      	ldr	r2, [pc, #308]	; (80060ac <CAN_FilterInit+0x160>)
 8005f78:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	43d2      	mvns	r2, r2
 8005f80:	400a      	ands	r2, r1
 8005f82:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	7b1b      	ldrb	r3, [r3, #12]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d121      	bne.n	8005fd2 <CAN_FilterInit+0x86>
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 8005f8e:	4b47      	ldr	r3, [pc, #284]	; (80060ac <CAN_FilterInit+0x160>)
 8005f90:	4a46      	ldr	r2, [pc, #280]	; (80060ac <CAN_FilterInit+0x160>)
 8005f92:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	43d2      	mvns	r2, r2
 8005f9a:	400a      	ands	r2, r1
 8005f9c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8005fa0:	4b42      	ldr	r3, [pc, #264]	; (80060ac <CAN_FilterInit+0x160>)
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	7a92      	ldrb	r2, [r2, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8005fa6:	6879      	ldr	r1, [r7, #4]
 8005fa8:	88c9      	ldrh	r1, [r1, #6]
 8005faa:	0408      	lsls	r0, r1, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8005fac:	6879      	ldr	r1, [r7, #4]
 8005fae:	8849      	ldrh	r1, [r1, #2]
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8005fb0:	4301      	orrs	r1, r0
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8005fb2:	3248      	adds	r2, #72	; 0x48
 8005fb4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8005fb8:	493c      	ldr	r1, [pc, #240]	; (80060ac <CAN_FilterInit+0x160>)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	7a9b      	ldrb	r3, [r3, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	8892      	ldrh	r2, [r2, #4]
 8005fc2:	0410      	lsls	r0, r2, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	8812      	ldrh	r2, [r2, #0]
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8005fc8:	4302      	orrs	r2, r0
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8005fca:	3348      	adds	r3, #72	; 0x48
 8005fcc:	00db      	lsls	r3, r3, #3
 8005fce:	440b      	add	r3, r1
 8005fd0:	605a      	str	r2, [r3, #4]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	7b1b      	ldrb	r3, [r3, #12]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d120      	bne.n	800601c <CAN_FilterInit+0xd0>
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 8005fda:	4b34      	ldr	r3, [pc, #208]	; (80060ac <CAN_FilterInit+0x160>)
 8005fdc:	4a33      	ldr	r2, [pc, #204]	; (80060ac <CAN_FilterInit+0x160>)
 8005fde:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8005fea:	4b30      	ldr	r3, [pc, #192]	; (80060ac <CAN_FilterInit+0x160>)
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	7a92      	ldrb	r2, [r2, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8005ff0:	6879      	ldr	r1, [r7, #4]
 8005ff2:	8809      	ldrh	r1, [r1, #0]
 8005ff4:	0408      	lsls	r0, r1, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8005ff6:	6879      	ldr	r1, [r7, #4]
 8005ff8:	8849      	ldrh	r1, [r1, #2]
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8005ffa:	4301      	orrs	r1, r0
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8005ffc:	3248      	adds	r2, #72	; 0x48
 8005ffe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8006002:	492a      	ldr	r1, [pc, #168]	; (80060ac <CAN_FilterInit+0x160>)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	7a9b      	ldrb	r3, [r3, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	8892      	ldrh	r2, [r2, #4]
 800600c:	0410      	lsls	r0, r2, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	88d2      	ldrh	r2, [r2, #6]
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8006012:	4302      	orrs	r2, r0
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8006014:	3348      	adds	r3, #72	; 0x48
 8006016:	00db      	lsls	r3, r3, #3
 8006018:	440b      	add	r3, r1
 800601a:	605a      	str	r2, [r3, #4]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
  }

  /* Filter Mode */
  if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	7adb      	ldrb	r3, [r3, #11]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d109      	bne.n	8006038 <CAN_FilterInit+0xec>
  {
    /*Id/Mask mode for the filter*/
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 8006024:	4b21      	ldr	r3, [pc, #132]	; (80060ac <CAN_FilterInit+0x160>)
 8006026:	4a21      	ldr	r2, [pc, #132]	; (80060ac <CAN_FilterInit+0x160>)
 8006028:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	43d2      	mvns	r2, r2
 8006030:	400a      	ands	r2, r1
 8006032:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8006036:	e007      	b.n	8006048 <CAN_FilterInit+0xfc>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 8006038:	4b1c      	ldr	r3, [pc, #112]	; (80060ac <CAN_FilterInit+0x160>)
 800603a:	4a1c      	ldr	r2, [pc, #112]	; (80060ac <CAN_FilterInit+0x160>)
 800603c:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	430a      	orrs	r2, r1
 8006044:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	891b      	ldrh	r3, [r3, #8]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d108      	bne.n	8006062 <CAN_FilterInit+0x116>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 8006050:	4b16      	ldr	r3, [pc, #88]	; (80060ac <CAN_FilterInit+0x160>)
 8006052:	4a16      	ldr	r2, [pc, #88]	; (80060ac <CAN_FilterInit+0x160>)
 8006054:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	43d2      	mvns	r2, r2
 800605c:	400a      	ands	r2, r1
 800605e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }

  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	891b      	ldrh	r3, [r3, #8]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d107      	bne.n	800607a <CAN_FilterInit+0x12e>
  {
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 800606a:	4b10      	ldr	r3, [pc, #64]	; (80060ac <CAN_FilterInit+0x160>)
 800606c:	4a0f      	ldr	r2, [pc, #60]	; (80060ac <CAN_FilterInit+0x160>)
 800606e:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	430a      	orrs	r2, r1
 8006076:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Filter activation */
  if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	7b5b      	ldrb	r3, [r3, #13]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d107      	bne.n	8006092 <CAN_FilterInit+0x146>
  {
    CAN1->FA1R |= filter_number_bit_pos;
 8006082:	4b0a      	ldr	r3, [pc, #40]	; (80060ac <CAN_FilterInit+0x160>)
 8006084:	4a09      	ldr	r2, [pc, #36]	; (80060ac <CAN_FilterInit+0x160>)
 8006086:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	430a      	orrs	r2, r1
 800608e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 8006092:	4b06      	ldr	r3, [pc, #24]	; (80060ac <CAN_FilterInit+0x160>)
 8006094:	4a05      	ldr	r2, [pc, #20]	; (80060ac <CAN_FilterInit+0x160>)
 8006096:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800609a:	f022 0201 	bic.w	r2, r2, #1
 800609e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80060a2:	3714      	adds	r7, #20
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr
 80060ac:	40006400 	.word	0x40006400

080060b0 <CAN_StructInit>:
  * @brief  Fills each CAN_InitStruct member with its default value.
  * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which ill be initialized.
  * @retval None
  */
void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  /* Reset CAN init structure parameters values */
  
  /* Initialize the time triggered communication mode */
  CAN_InitStruct->CAN_TTCM = DISABLE;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	719a      	strb	r2, [r3, #6]
  
  /* Initialize the automatic bus-off management */
  CAN_InitStruct->CAN_ABOM = DISABLE;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	71da      	strb	r2, [r3, #7]
  
  /* Initialize the automatic wake-up mode */
  CAN_InitStruct->CAN_AWUM = DISABLE;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	721a      	strb	r2, [r3, #8]
  
  /* Initialize the no automatic retransmission */
  CAN_InitStruct->CAN_NART = DISABLE;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	725a      	strb	r2, [r3, #9]
  
  /* Initialize the receive FIFO locked mode */
  CAN_InitStruct->CAN_RFLM = DISABLE;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	729a      	strb	r2, [r3, #10]
  
  /* Initialize the transmit FIFO priority */
  CAN_InitStruct->CAN_TXFP = DISABLE;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	72da      	strb	r2, [r3, #11]
  
  /* Initialize the CAN_Mode member */
  CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	709a      	strb	r2, [r3, #2]
  
  /* Initialize the CAN_SJW member */
  CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	70da      	strb	r2, [r3, #3]
  
  /* Initialize the CAN_BS1 member */
  CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2203      	movs	r2, #3
 80060ec:	711a      	strb	r2, [r3, #4]
  
  /* Initialize the CAN_BS2 member */
  CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2202      	movs	r2, #2
 80060f2:	715a      	strb	r2, [r3, #5]
  
  /* Initialize the CAN_Prescaler member */
  CAN_InitStruct->CAN_Prescaler = 1;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	801a      	strh	r2, [r3, #0]
}
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <CAN_SlaveStartBank>:
  * @brief  Select the start bank filter for slave CAN.
  * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
  * @retval None
  */
void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	4603      	mov	r3, r0
 800610c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
  
  /* Enter Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 800610e:	4b14      	ldr	r3, [pc, #80]	; (8006160 <CAN_SlaveStartBank+0x5c>)
 8006110:	4a13      	ldr	r2, [pc, #76]	; (8006160 <CAN_SlaveStartBank+0x5c>)
 8006112:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8006116:	f042 0201 	orr.w	r2, r2, #1
 800611a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Select the start slave bank */
  CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
 800611e:	4a10      	ldr	r2, [pc, #64]	; (8006160 <CAN_SlaveStartBank+0x5c>)
 8006120:	4b0f      	ldr	r3, [pc, #60]	; (8006160 <CAN_SlaveStartBank+0x5c>)
 8006122:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006126:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800612a:	f023 030e 	bic.w	r3, r3, #14
 800612e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 8006132:	4b0b      	ldr	r3, [pc, #44]	; (8006160 <CAN_SlaveStartBank+0x5c>)
 8006134:	4a0a      	ldr	r2, [pc, #40]	; (8006160 <CAN_SlaveStartBank+0x5c>)
 8006136:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 800613a:	79fa      	ldrb	r2, [r7, #7]
 800613c:	0212      	lsls	r2, r2, #8
 800613e:	430a      	orrs	r2, r1
 8006140:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Leave Initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 8006144:	4b06      	ldr	r3, [pc, #24]	; (8006160 <CAN_SlaveStartBank+0x5c>)
 8006146:	4a06      	ldr	r2, [pc, #24]	; (8006160 <CAN_SlaveStartBank+0x5c>)
 8006148:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800614c:	f022 0201 	bic.w	r2, r2, #1
 8006150:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8006154:	370c      	adds	r7, #12
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	40006400 	.word	0x40006400

08006164 <CAN_DBGFreeze>:
  *          during debug. Reception FIFOs can still be accessed/controlled normally) 
  *          or DISABLE (CAN is working during debug).
  * @retval None
  */
void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	460b      	mov	r3, r1
 800616e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006170:	78fb      	ldrb	r3, [r7, #3]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d006      	beq.n	8006184 <CAN_DBGFreeze+0x20>
  {
    /* Enable Debug Freeze  */
    CANx->MCR |= MCR_DBF;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	601a      	str	r2, [r3, #0]
 8006182:	e005      	b.n	8006190 <CAN_DBGFreeze+0x2c>
  }
  else
  {
    /* Disable Debug Freeze */
    CANx->MCR &= ~MCR_DBF;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	601a      	str	r2, [r3, #0]
  }
}
 8006190:	370c      	adds	r7, #12
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop

0800619c <CAN_TTComModeCmd>:
  *         data bytes of the 8-byte message: TIME[7:0] in data byte 6 and TIME[15:8] 
  *         in data byte 7. 
  * @retval None
  */
void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	460b      	mov	r3, r1
 80061a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80061a8:	78fb      	ldrb	r3, [r7, #3]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d01e      	beq.n	80061ec <CAN_TTComModeCmd+0x50>
  {
    /* Enable the TTCM mode */
    CANx->MCR |= CAN_MCR_TTCM;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	601a      	str	r2, [r3, #0]

    /* Set TGT bits */
    CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80061c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80061d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80061e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
 80061ea:	e01d      	b.n	8006228 <CAN_TTComModeCmd+0x8c>
  }
  else
  {
    /* Disable the TTCM mode */
    CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	601a      	str	r2, [r3, #0]

    /* Reset TGT bits */
    CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80061fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800620e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800621e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
  }
}
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop

08006234 <CAN_Transmit>:
  * @param  TxMessage: pointer to a structure which contains CAN Id, CAN DLC and CAN data.
  * @retval The number of the mailbox that is used for transmission or
  *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
  */
uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  uint8_t transmit_mailbox = 0;
 800623e:	2300      	movs	r3, #0
 8006240:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d002      	beq.n	8006254 <CAN_Transmit+0x20>
  {
    transmit_mailbox = 0;
 800624e:	2300      	movs	r3, #0
 8006250:	73fb      	strb	r3, [r7, #15]
 8006252:	e013      	b.n	800627c <CAN_Transmit+0x48>
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d002      	beq.n	8006266 <CAN_Transmit+0x32>
  {
    transmit_mailbox = 1;
 8006260:	2301      	movs	r3, #1
 8006262:	73fb      	strb	r3, [r7, #15]
 8006264:	e00a      	b.n	800627c <CAN_Transmit+0x48>
  }
  else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800626e:	2b00      	cmp	r3, #0
 8006270:	d002      	beq.n	8006278 <CAN_Transmit+0x44>
  {
    transmit_mailbox = 2;
 8006272:	2302      	movs	r3, #2
 8006274:	73fb      	strb	r3, [r7, #15]
 8006276:	e001      	b.n	800627c <CAN_Transmit+0x48>
  }
  else
  {
    transmit_mailbox = CAN_TxStatus_NoMailBox;
 8006278:	2304      	movs	r3, #4
 800627a:	73fb      	strb	r3, [r7, #15]
  }

  if (transmit_mailbox != CAN_TxStatus_NoMailBox)
 800627c:	7bfb      	ldrb	r3, [r7, #15]
 800627e:	2b04      	cmp	r3, #4
 8006280:	f000 8098 	beq.w	80063b4 <CAN_Transmit+0x180>
  {
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 8006284:	7bfb      	ldrb	r3, [r7, #15]
 8006286:	7bfa      	ldrb	r2, [r7, #15]
 8006288:	6879      	ldr	r1, [r7, #4]
 800628a:	3218      	adds	r2, #24
 800628c:	0112      	lsls	r2, r2, #4
 800628e:	440a      	add	r2, r1
 8006290:	6812      	ldr	r2, [r2, #0]
 8006292:	f002 0201 	and.w	r2, r2, #1
 8006296:	6879      	ldr	r1, [r7, #4]
 8006298:	3318      	adds	r3, #24
 800629a:	011b      	lsls	r3, r3, #4
 800629c:	440b      	add	r3, r1
 800629e:	601a      	str	r2, [r3, #0]
    if (TxMessage->IDE == CAN_Id_Standard)
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	7a1b      	ldrb	r3, [r3, #8]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d113      	bne.n	80062d0 <CAN_Transmit+0x9c>
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 80062a8:	7bfb      	ldrb	r3, [r7, #15]
 80062aa:	7bfa      	ldrb	r2, [r7, #15]
 80062ac:	6879      	ldr	r1, [r7, #4]
 80062ae:	3218      	adds	r2, #24
 80062b0:	0112      	lsls	r2, r2, #4
 80062b2:	440a      	add	r2, r1
 80062b4:	6811      	ldr	r1, [r2, #0]
 80062b6:	683a      	ldr	r2, [r7, #0]
 80062b8:	6812      	ldr	r2, [r2, #0]
 80062ba:	0550      	lsls	r0, r2, #21
                                                  TxMessage->RTR);
 80062bc:	683a      	ldr	r2, [r7, #0]
 80062be:	7a52      	ldrb	r2, [r2, #9]
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
    if (TxMessage->IDE == CAN_Id_Standard)
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 80062c0:	4302      	orrs	r2, r0
 80062c2:	430a      	orrs	r2, r1
 80062c4:	6879      	ldr	r1, [r7, #4]
 80062c6:	3318      	adds	r3, #24
 80062c8:	011b      	lsls	r3, r3, #4
 80062ca:	440b      	add	r3, r1
 80062cc:	601a      	str	r2, [r3, #0]
 80062ce:	e015      	b.n	80062fc <CAN_Transmit+0xc8>
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 80062d0:	7bfb      	ldrb	r3, [r7, #15]
 80062d2:	7bfa      	ldrb	r2, [r7, #15]
 80062d4:	6879      	ldr	r1, [r7, #4]
 80062d6:	3218      	adds	r2, #24
 80062d8:	0112      	lsls	r2, r2, #4
 80062da:	440a      	add	r2, r1
 80062dc:	6811      	ldr	r1, [r2, #0]
 80062de:	683a      	ldr	r2, [r7, #0]
 80062e0:	6852      	ldr	r2, [r2, #4]
 80062e2:	00d0      	lsls	r0, r2, #3
                                                  TxMessage->IDE | \
 80062e4:	683a      	ldr	r2, [r7, #0]
 80062e6:	7a12      	ldrb	r2, [r2, #8]
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 80062e8:	4310      	orrs	r0, r2
                                                  TxMessage->IDE | \
                                                  TxMessage->RTR);
 80062ea:	683a      	ldr	r2, [r7, #0]
 80062ec:	7a52      	ldrb	r2, [r2, #9]
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
                                                  TxMessage->IDE | \
 80062ee:	4302      	orrs	r2, r0
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 80062f0:	430a      	orrs	r2, r1
 80062f2:	6879      	ldr	r1, [r7, #4]
 80062f4:	3318      	adds	r3, #24
 80062f6:	011b      	lsls	r3, r3, #4
 80062f8:	440b      	add	r3, r1
 80062fa:	601a      	str	r2, [r3, #0]
                                                  TxMessage->IDE | \
                                                  TxMessage->RTR);
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	7a9b      	ldrb	r3, [r3, #10]
 8006300:	f003 030f 	and.w	r3, r3, #15
 8006304:	b2da      	uxtb	r2, r3
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	729a      	strb	r2, [r3, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 800630a:	7bfb      	ldrb	r3, [r7, #15]
 800630c:	7bfa      	ldrb	r2, [r7, #15]
 800630e:	6879      	ldr	r1, [r7, #4]
 8006310:	3218      	adds	r2, #24
 8006312:	0112      	lsls	r2, r2, #4
 8006314:	440a      	add	r2, r1
 8006316:	6852      	ldr	r2, [r2, #4]
 8006318:	f022 020f 	bic.w	r2, r2, #15
 800631c:	6879      	ldr	r1, [r7, #4]
 800631e:	3318      	adds	r3, #24
 8006320:	011b      	lsls	r3, r3, #4
 8006322:	440b      	add	r3, r1
 8006324:	605a      	str	r2, [r3, #4]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 8006326:	7bfb      	ldrb	r3, [r7, #15]
 8006328:	7bfa      	ldrb	r2, [r7, #15]
 800632a:	6879      	ldr	r1, [r7, #4]
 800632c:	3218      	adds	r2, #24
 800632e:	0112      	lsls	r2, r2, #4
 8006330:	440a      	add	r2, r1
 8006332:	6851      	ldr	r1, [r2, #4]
 8006334:	683a      	ldr	r2, [r7, #0]
 8006336:	7a92      	ldrb	r2, [r2, #10]
 8006338:	430a      	orrs	r2, r1
 800633a:	6879      	ldr	r1, [r7, #4]
 800633c:	3318      	adds	r3, #24
 800633e:	011b      	lsls	r3, r3, #4
 8006340:	440b      	add	r3, r1
 8006342:	605a      	str	r2, [r3, #4]

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8006344:	7bfb      	ldrb	r3, [r7, #15]
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	7b92      	ldrb	r2, [r2, #14]
 800634a:	0611      	lsls	r1, r2, #24
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 800634c:	683a      	ldr	r2, [r7, #0]
 800634e:	7b52      	ldrb	r2, [r2, #13]
 8006350:	0412      	lsls	r2, r2, #16
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8006352:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 8006354:	683a      	ldr	r2, [r7, #0]
 8006356:	7b12      	ldrb	r2, [r2, #12]
 8006358:	0212      	lsls	r2, r2, #8
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 800635a:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
 800635c:	683a      	ldr	r2, [r7, #0]
 800635e:	7ad2      	ldrb	r2, [r2, #11]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 8006360:	430a      	orrs	r2, r1
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8006362:	6879      	ldr	r1, [r7, #4]
 8006364:	011b      	lsls	r3, r3, #4
 8006366:	440b      	add	r3, r1
 8006368:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800636c:	601a      	str	r2, [r3, #0]
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 800636e:	7bfb      	ldrb	r3, [r7, #15]
 8006370:	683a      	ldr	r2, [r7, #0]
 8006372:	7c92      	ldrb	r2, [r2, #18]
 8006374:	0611      	lsls	r1, r2, #24
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 8006376:	683a      	ldr	r2, [r7, #0]
 8006378:	7c52      	ldrb	r2, [r2, #17]
 800637a:	0412      	lsls	r2, r2, #16
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 800637c:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 800637e:	683a      	ldr	r2, [r7, #0]
 8006380:	7c12      	ldrb	r2, [r2, #16]
 8006382:	0212      	lsls	r2, r2, #8
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 8006384:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[5] << 8) |
                                             ((uint32_t)TxMessage->Data[4]));
 8006386:	683a      	ldr	r2, [r7, #0]
 8006388:	7bd2      	ldrb	r2, [r2, #15]
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 800638a:	430a      	orrs	r2, r1
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 800638c:	6879      	ldr	r1, [r7, #4]
 800638e:	011b      	lsls	r3, r3, #4
 8006390:	440b      	add	r3, r1
 8006392:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8006396:	605a      	str	r2, [r3, #4]
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
                                             ((uint32_t)TxMessage->Data[4]));
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 8006398:	7bfb      	ldrb	r3, [r7, #15]
 800639a:	7bfa      	ldrb	r2, [r7, #15]
 800639c:	6879      	ldr	r1, [r7, #4]
 800639e:	3218      	adds	r2, #24
 80063a0:	0112      	lsls	r2, r2, #4
 80063a2:	440a      	add	r2, r1
 80063a4:	6812      	ldr	r2, [r2, #0]
 80063a6:	f042 0201 	orr.w	r2, r2, #1
 80063aa:	6879      	ldr	r1, [r7, #4]
 80063ac:	3318      	adds	r3, #24
 80063ae:	011b      	lsls	r3, r3, #4
 80063b0:	440b      	add	r3, r1
 80063b2:	601a      	str	r2, [r3, #0]
  }
  return transmit_mailbox;
 80063b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3714      	adds	r7, #20
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop

080063c4 <CAN_TransmitStatus>:
  * @param  TransmitMailbox: the number of the mailbox that is used for transmission.
  * @retval CAN_TxStatus_Ok if the CAN driver transmits the message, 
  *         CAN_TxStatus_Failed in an other case.
  */
uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	460b      	mov	r3, r1
 80063ce:	70fb      	strb	r3, [r7, #3]
  uint32_t state = 0;
 80063d0:	2300      	movs	r3, #0
 80063d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 
  switch (TransmitMailbox)
 80063d4:	78fb      	ldrb	r3, [r7, #3]
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d009      	beq.n	80063ee <CAN_TransmitStatus+0x2a>
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d00d      	beq.n	80063fa <CAN_TransmitStatus+0x36>
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d111      	bne.n	8006406 <CAN_TransmitStatus+0x42>
  {
    case (CAN_TXMAILBOX_0): 
      state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	689a      	ldr	r2, [r3, #8]
 80063e6:	4b26      	ldr	r3, [pc, #152]	; (8006480 <CAN_TransmitStatus+0xbc>)
 80063e8:	4013      	ands	r3, r2
 80063ea:	60fb      	str	r3, [r7, #12]
      break;
 80063ec:	e00e      	b.n	800640c <CAN_TransmitStatus+0x48>
    case (CAN_TXMAILBOX_1): 
      state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	689a      	ldr	r2, [r3, #8]
 80063f2:	4b24      	ldr	r3, [pc, #144]	; (8006484 <CAN_TransmitStatus+0xc0>)
 80063f4:	4013      	ands	r3, r2
 80063f6:	60fb      	str	r3, [r7, #12]
      break;
 80063f8:	e008      	b.n	800640c <CAN_TransmitStatus+0x48>
    case (CAN_TXMAILBOX_2): 
      state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	689a      	ldr	r2, [r3, #8]
 80063fe:	4b22      	ldr	r3, [pc, #136]	; (8006488 <CAN_TransmitStatus+0xc4>)
 8006400:	4013      	ands	r3, r2
 8006402:	60fb      	str	r3, [r7, #12]
      break;
 8006404:	e002      	b.n	800640c <CAN_TransmitStatus+0x48>
    default:
      state = CAN_TxStatus_Failed;
 8006406:	2300      	movs	r3, #0
 8006408:	60fb      	str	r3, [r7, #12]
      break;
 800640a:	bf00      	nop
  }
  switch (state)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	4a1f      	ldr	r2, [pc, #124]	; (800648c <CAN_TransmitStatus+0xc8>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d01b      	beq.n	800644c <CAN_TransmitStatus+0x88>
 8006414:	4a1d      	ldr	r2, [pc, #116]	; (800648c <CAN_TransmitStatus+0xc8>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d808      	bhi.n	800642c <CAN_TransmitStatus+0x68>
 800641a:	4a1d      	ldr	r2, [pc, #116]	; (8006490 <CAN_TransmitStatus+0xcc>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d012      	beq.n	8006446 <CAN_TransmitStatus+0x82>
 8006420:	4a17      	ldr	r2, [pc, #92]	; (8006480 <CAN_TransmitStatus+0xbc>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d018      	beq.n	8006458 <CAN_TransmitStatus+0x94>
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00a      	beq.n	8006440 <CAN_TransmitStatus+0x7c>
 800642a:	e01e      	b.n	800646a <CAN_TransmitStatus+0xa6>
 800642c:	4a19      	ldr	r2, [pc, #100]	; (8006494 <CAN_TransmitStatus+0xd0>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d00f      	beq.n	8006452 <CAN_TransmitStatus+0x8e>
 8006432:	4a15      	ldr	r2, [pc, #84]	; (8006488 <CAN_TransmitStatus+0xc4>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d015      	beq.n	8006464 <CAN_TransmitStatus+0xa0>
 8006438:	4a12      	ldr	r2, [pc, #72]	; (8006484 <CAN_TransmitStatus+0xc0>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d00f      	beq.n	800645e <CAN_TransmitStatus+0x9a>
 800643e:	e014      	b.n	800646a <CAN_TransmitStatus+0xa6>
  {
      /* transmit pending  */
    case (0x0): state = CAN_TxStatus_Pending;
 8006440:	2302      	movs	r3, #2
 8006442:	60fb      	str	r3, [r7, #12]
      break;
 8006444:	e014      	b.n	8006470 <CAN_TransmitStatus+0xac>
      /* transmit failed  */
     case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
 8006446:	2300      	movs	r3, #0
 8006448:	60fb      	str	r3, [r7, #12]
      break;
 800644a:	e011      	b.n	8006470 <CAN_TransmitStatus+0xac>
     case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
 800644c:	2300      	movs	r3, #0
 800644e:	60fb      	str	r3, [r7, #12]
      break;
 8006450:	e00e      	b.n	8006470 <CAN_TransmitStatus+0xac>
     case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
 8006452:	2300      	movs	r3, #0
 8006454:	60fb      	str	r3, [r7, #12]
      break;
 8006456:	e00b      	b.n	8006470 <CAN_TransmitStatus+0xac>
      /* transmit succeeded  */
    case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
 8006458:	2301      	movs	r3, #1
 800645a:	60fb      	str	r3, [r7, #12]
      break;
 800645c:	e008      	b.n	8006470 <CAN_TransmitStatus+0xac>
    case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
 800645e:	2301      	movs	r3, #1
 8006460:	60fb      	str	r3, [r7, #12]
      break;
 8006462:	e005      	b.n	8006470 <CAN_TransmitStatus+0xac>
    case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 8006464:	2301      	movs	r3, #1
 8006466:	60fb      	str	r3, [r7, #12]
      break;
 8006468:	e002      	b.n	8006470 <CAN_TransmitStatus+0xac>
    default: state = CAN_TxStatus_Failed;
 800646a:	2300      	movs	r3, #0
 800646c:	60fb      	str	r3, [r7, #12]
      break;
 800646e:	bf00      	nop
  }
  return (uint8_t) state;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	b2db      	uxtb	r3, r3
}
 8006474:	4618      	mov	r0, r3
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	04000003 	.word	0x04000003
 8006484:	08000300 	.word	0x08000300
 8006488:	10030000 	.word	0x10030000
 800648c:	08000100 	.word	0x08000100
 8006490:	04000001 	.word	0x04000001
 8006494:	10010000 	.word	0x10010000

08006498 <CAN_CancelTransmit>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  Mailbox: Mailbox number.
  * @retval None
  */
void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	460b      	mov	r3, r1
 80064a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
  /* abort transmission */
  switch (Mailbox)
 80064a4:	78fb      	ldrb	r3, [r7, #3]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d00b      	beq.n	80064c2 <CAN_CancelTransmit+0x2a>
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d010      	beq.n	80064d0 <CAN_CancelTransmit+0x38>
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d000      	beq.n	80064b4 <CAN_CancelTransmit+0x1c>
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
      break;
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
      break;
    default:
      break;
 80064b2:	e014      	b.n	80064de <CAN_CancelTransmit+0x46>
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
  /* abort transmission */
  switch (Mailbox)
  {
    case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	609a      	str	r2, [r3, #8]
      break;
 80064c0:	e00d      	b.n	80064de <CAN_CancelTransmit+0x46>
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	609a      	str	r2, [r3, #8]
      break;
 80064ce:	e006      	b.n	80064de <CAN_CancelTransmit+0x46>
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	609a      	str	r2, [r3, #8]
      break;
 80064dc:	bf00      	nop
    default:
      break;
  }
}
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <CAN_Receive>:
  * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
  *         CAN DLC, CAN data and FMI number.
  * @retval None
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	460b      	mov	r3, r1
 80064f2:	607a      	str	r2, [r7, #4]
 80064f4:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 80064f6:	7afb      	ldrb	r3, [r7, #11]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	331b      	adds	r3, #27
 80064fc:	011b      	lsls	r3, r3, #4
 80064fe:	4413      	add	r3, r2
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	b2db      	uxtb	r3, r3
 8006504:	f003 0304 	and.w	r3, r3, #4
 8006508:	b2da      	uxtb	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	721a      	strb	r2, [r3, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	7a1b      	ldrb	r3, [r3, #8]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d109      	bne.n	800652a <CAN_Receive+0x42>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 8006516:	7afb      	ldrb	r3, [r7, #11]
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	331b      	adds	r3, #27
 800651c:	011b      	lsls	r3, r3, #4
 800651e:	4413      	add	r3, r2
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	0d5a      	lsrs	r2, r3, #21
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	601a      	str	r2, [r3, #0]
 8006528:	e008      	b.n	800653c <CAN_Receive+0x54>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 800652a:	7afb      	ldrb	r3, [r7, #11]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	331b      	adds	r3, #27
 8006530:	011b      	lsls	r3, r3, #4
 8006532:	4413      	add	r3, r2
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	08da      	lsrs	r2, r3, #3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	605a      	str	r2, [r3, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 800653c:	7afb      	ldrb	r3, [r7, #11]
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	331b      	adds	r3, #27
 8006542:	011b      	lsls	r3, r3, #4
 8006544:	4413      	add	r3, r2
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	b2db      	uxtb	r3, r3
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	b2da      	uxtb	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	725a      	strb	r2, [r3, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 8006554:	7afb      	ldrb	r3, [r7, #11]
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	331b      	adds	r3, #27
 800655a:	011b      	lsls	r3, r3, #4
 800655c:	4413      	add	r3, r2
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	b2db      	uxtb	r3, r3
 8006562:	f003 030f 	and.w	r3, r3, #15
 8006566:	b2da      	uxtb	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	729a      	strb	r2, [r3, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 800656c:	7afb      	ldrb	r3, [r7, #11]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	331b      	adds	r3, #27
 8006572:	011b      	lsls	r3, r3, #4
 8006574:	4413      	add	r3, r2
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	0a1b      	lsrs	r3, r3, #8
 800657a:	b2da      	uxtb	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	74da      	strb	r2, [r3, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 8006580:	7afb      	ldrb	r3, [r7, #11]
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	011b      	lsls	r3, r3, #4
 8006586:	4413      	add	r3, r2
 8006588:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	b2da      	uxtb	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	72da      	strb	r2, [r3, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 8006594:	7afb      	ldrb	r3, [r7, #11]
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	011b      	lsls	r3, r3, #4
 800659a:	4413      	add	r3, r2
 800659c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	0a1b      	lsrs	r3, r3, #8
 80065a4:	b2da      	uxtb	r2, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	731a      	strb	r2, [r3, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 80065aa:	7afb      	ldrb	r3, [r7, #11]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	011b      	lsls	r3, r3, #4
 80065b0:	4413      	add	r3, r2
 80065b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	0c1b      	lsrs	r3, r3, #16
 80065ba:	b2da      	uxtb	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	735a      	strb	r2, [r3, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 80065c0:	7afb      	ldrb	r3, [r7, #11]
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	011b      	lsls	r3, r3, #4
 80065c6:	4413      	add	r3, r2
 80065c8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	0e1b      	lsrs	r3, r3, #24
 80065d0:	b2da      	uxtb	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	739a      	strb	r2, [r3, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 80065d6:	7afb      	ldrb	r3, [r7, #11]
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	011b      	lsls	r3, r3, #4
 80065dc:	4413      	add	r3, r2
 80065de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	b2da      	uxtb	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	73da      	strb	r2, [r3, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 80065ea:	7afb      	ldrb	r3, [r7, #11]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	011b      	lsls	r3, r3, #4
 80065f0:	4413      	add	r3, r2
 80065f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	0a1b      	lsrs	r3, r3, #8
 80065fa:	b2da      	uxtb	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	741a      	strb	r2, [r3, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 8006600:	7afb      	ldrb	r3, [r7, #11]
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	011b      	lsls	r3, r3, #4
 8006606:	4413      	add	r3, r2
 8006608:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	0c1b      	lsrs	r3, r3, #16
 8006610:	b2da      	uxtb	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	745a      	strb	r2, [r3, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 8006616:	7afb      	ldrb	r3, [r7, #11]
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	011b      	lsls	r3, r3, #4
 800661c:	4413      	add	r3, r2
 800661e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	0e1b      	lsrs	r3, r3, #24
 8006626:	b2da      	uxtb	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	749a      	strb	r2, [r3, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 800662c:	7afb      	ldrb	r3, [r7, #11]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d106      	bne.n	8006640 <CAN_Receive+0x158>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	f043 0220 	orr.w	r2, r3, #32
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	60da      	str	r2, [r3, #12]
 800663e:	e005      	b.n	800664c <CAN_Receive+0x164>
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	f043 0220 	orr.w	r2, r3, #32
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	611a      	str	r2, [r3, #16]
  }
}
 800664c:	3714      	adds	r7, #20
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop

08006658 <CAN_FIFORelease>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  FIFONumber: FIFO to release, CAN_FIFO0 or CAN_FIFO1.
  * @retval None
  */
void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	460b      	mov	r3, r1
 8006662:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8006664:	78fb      	ldrb	r3, [r7, #3]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d106      	bne.n	8006678 <CAN_FIFORelease+0x20>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	f043 0220 	orr.w	r2, r3, #32
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	60da      	str	r2, [r3, #12]
 8006676:	e005      	b.n	8006684 <CAN_FIFORelease+0x2c>
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	f043 0220 	orr.w	r2, r3, #32
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	611a      	str	r2, [r3, #16]
  }
}
 8006684:	370c      	adds	r7, #12
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop

08006690 <CAN_MessagePending>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
  * @retval NbMessage : which is the number of pending message.
  */
uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	460b      	mov	r3, r1
 800669a:	70fb      	strb	r3, [r7, #3]
  uint8_t message_pending=0;
 800669c:	2300      	movs	r3, #0
 800669e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  if (FIFONumber == CAN_FIFO0)
 80066a0:	78fb      	ldrb	r3, [r7, #3]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d106      	bne.n	80066b4 <CAN_MessagePending+0x24>
  {
    message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	f003 0303 	and.w	r3, r3, #3
 80066b0:	73fb      	strb	r3, [r7, #15]
 80066b2:	e00b      	b.n	80066cc <CAN_MessagePending+0x3c>
  }
  else if (FIFONumber == CAN_FIFO1)
 80066b4:	78fb      	ldrb	r3, [r7, #3]
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d106      	bne.n	80066c8 <CAN_MessagePending+0x38>
  {
    message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	f003 0303 	and.w	r3, r3, #3
 80066c4:	73fb      	strb	r3, [r7, #15]
 80066c6:	e001      	b.n	80066cc <CAN_MessagePending+0x3c>
  }
  else
  {
    message_pending = 0;
 80066c8:	2300      	movs	r3, #0
 80066ca:	73fb      	strb	r3, [r7, #15]
  }
  return message_pending;
 80066cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3714      	adds	r7, #20
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop

080066dc <CAN_OperatingModeRequest>:
  * @retval status of the requested mode which can be 
  *         - CAN_ModeStatus_Failed:  CAN failed entering the specific mode 
  *         - CAN_ModeStatus_Success: CAN Succeed entering the specific mode 
  */
uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
{
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	460b      	mov	r3, r1
 80066e6:	70fb      	strb	r3, [r7, #3]
  uint8_t status = CAN_ModeStatus_Failed;
 80066e8:	2300      	movs	r3, #0
 80066ea:	73fb      	strb	r3, [r7, #15]
  
  /* Timeout for INAK or also for SLAK bits*/
  uint32_t timeout = INAK_TIMEOUT; 
 80066ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80066f0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));

  if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
 80066f2:	78fb      	ldrb	r3, [r7, #3]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d120      	bne.n	800673a <CAN_OperatingModeRequest+0x5e>
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f023 0303 	bic.w	r3, r3, #3
 8006700:	f043 0201 	orr.w	r2, r3, #1
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 8006708:	e002      	b.n	8006710 <CAN_OperatingModeRequest+0x34>
    {
      timeout--;
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	3b01      	subs	r3, #1
 800670e:	60bb      	str	r3, [r7, #8]
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f003 0303 	and.w	r3, r3, #3
 8006718:	2b01      	cmp	r3, #1
 800671a:	d002      	beq.n	8006722 <CAN_OperatingModeRequest+0x46>
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1f3      	bne.n	800670a <CAN_OperatingModeRequest+0x2e>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	f003 0303 	and.w	r3, r3, #3
 800672a:	2b01      	cmp	r3, #1
 800672c:	d002      	beq.n	8006734 <CAN_OperatingModeRequest+0x58>
    {
      status = CAN_ModeStatus_Failed;
 800672e:	2300      	movs	r3, #0
 8006730:	73fb      	strb	r3, [r7, #15]
 8006732:	e04a      	b.n	80067ca <CAN_OperatingModeRequest+0xee>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8006734:	2301      	movs	r3, #1
 8006736:	73fb      	strb	r3, [r7, #15]
 8006738:	e047      	b.n	80067ca <CAN_OperatingModeRequest+0xee>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
 800673a:	78fb      	ldrb	r3, [r7, #3]
 800673c:	2b01      	cmp	r3, #1
 800673e:	d11e      	bne.n	800677e <CAN_OperatingModeRequest+0xa2>
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f023 0203 	bic.w	r2, r3, #3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 800674c:	e002      	b.n	8006754 <CAN_OperatingModeRequest+0x78>
    {
      timeout--;
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	3b01      	subs	r3, #1
 8006752:	60bb      	str	r3, [r7, #8]
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	f003 0303 	and.w	r3, r3, #3
 800675c:	2b00      	cmp	r3, #0
 800675e:	d002      	beq.n	8006766 <CAN_OperatingModeRequest+0x8a>
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1f3      	bne.n	800674e <CAN_OperatingModeRequest+0x72>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != 0)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f003 0303 	and.w	r3, r3, #3
 800676e:	2b00      	cmp	r3, #0
 8006770:	d002      	beq.n	8006778 <CAN_OperatingModeRequest+0x9c>
    {
      status = CAN_ModeStatus_Failed;
 8006772:	2300      	movs	r3, #0
 8006774:	73fb      	strb	r3, [r7, #15]
 8006776:	e028      	b.n	80067ca <CAN_OperatingModeRequest+0xee>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8006778:	2301      	movs	r3, #1
 800677a:	73fb      	strb	r3, [r7, #15]
 800677c:	e025      	b.n	80067ca <CAN_OperatingModeRequest+0xee>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
 800677e:	78fb      	ldrb	r3, [r7, #3]
 8006780:	2b02      	cmp	r3, #2
 8006782:	d120      	bne.n	80067c6 <CAN_OperatingModeRequest+0xea>
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f023 0303 	bic.w	r3, r3, #3
 800678c:	f043 0202 	orr.w	r2, r3, #2
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 8006794:	e002      	b.n	800679c <CAN_OperatingModeRequest+0xc0>
    {
      timeout--;
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	3b01      	subs	r3, #1
 800679a:	60bb      	str	r3, [r7, #8]
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	f003 0303 	and.w	r3, r3, #3
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d002      	beq.n	80067ae <CAN_OperatingModeRequest+0xd2>
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1f3      	bne.n	8006796 <CAN_OperatingModeRequest+0xba>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f003 0303 	and.w	r3, r3, #3
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d002      	beq.n	80067c0 <CAN_OperatingModeRequest+0xe4>
    {
      status = CAN_ModeStatus_Failed;
 80067ba:	2300      	movs	r3, #0
 80067bc:	73fb      	strb	r3, [r7, #15]
 80067be:	e004      	b.n	80067ca <CAN_OperatingModeRequest+0xee>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 80067c0:	2301      	movs	r3, #1
 80067c2:	73fb      	strb	r3, [r7, #15]
 80067c4:	e001      	b.n	80067ca <CAN_OperatingModeRequest+0xee>
    }
  }
  else
  {
    status = CAN_ModeStatus_Failed;
 80067c6:	2300      	movs	r3, #0
 80067c8:	73fb      	strb	r3, [r7, #15]
  }

  return  (uint8_t) status;
 80067ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3714      	adds	r7, #20
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <CAN_Sleep>:
  * @brief  Enters the Sleep (low power) mode.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval CAN_Sleep_Ok if sleep entered, CAN_Sleep_Failed otherwise.
  */
uint8_t CAN_Sleep(CAN_TypeDef* CANx)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  uint8_t sleepstatus = CAN_Sleep_Failed;
 80067e0:	2300      	movs	r3, #0
 80067e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Request Sleep mode */
   CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f023 0303 	bic.w	r3, r3, #3
 80067ec:	f043 0202 	orr.w	r2, r3, #2
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	601a      	str	r2, [r3, #0]
   
  /* Sleep mode status */
  if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	f003 0303 	and.w	r3, r3, #3
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d101      	bne.n	8006804 <CAN_Sleep+0x2c>
  {
    /* Sleep mode not entered */
    sleepstatus =  CAN_Sleep_Ok;
 8006800:	2301      	movs	r3, #1
 8006802:	73fb      	strb	r3, [r7, #15]
  }
  /* return sleep mode status */
   return (uint8_t)sleepstatus;
 8006804:	7bfb      	ldrb	r3, [r7, #15]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop

08006814 <CAN_WakeUp>:
  * @brief  Wakes up the CAN peripheral from sleep mode .
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed otherwise.
  */
uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  uint32_t wait_slak = SLAK_TIMEOUT;
 800681c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006820:	60fb      	str	r3, [r7, #12]
  uint8_t wakeupstatus = CAN_WakeUp_Failed;
 8006822:	2300      	movs	r3, #0
 8006824:	72fb      	strb	r3, [r7, #11]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f023 0202 	bic.w	r2, r3, #2
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	601a      	str	r2, [r3, #0]
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 8006832:	e002      	b.n	800683a <CAN_WakeUp+0x26>
  {
   wait_slak--;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	3b01      	subs	r3, #1
 8006838:	60fb      	str	r3, [r7, #12]
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	f003 0302 	and.w	r3, r3, #2
 8006842:	2b00      	cmp	r3, #0
 8006844:	d002      	beq.n	800684c <CAN_WakeUp+0x38>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1f3      	bne.n	8006834 <CAN_WakeUp+0x20>
  {
   wait_slak--;
  }
  if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	f003 0302 	and.w	r3, r3, #2
 8006854:	2b00      	cmp	r3, #0
 8006856:	d101      	bne.n	800685c <CAN_WakeUp+0x48>
  {
   /* wake up done : Sleep mode exited */
    wakeupstatus = CAN_WakeUp_Ok;
 8006858:	2301      	movs	r3, #1
 800685a:	72fb      	strb	r3, [r7, #11]
  }
  /* return wakeup status */
  return (uint8_t)wakeupstatus;
 800685c:	7afb      	ldrb	r3, [r7, #11]
}
 800685e:	4618      	mov	r0, r3
 8006860:	3714      	adds	r7, #20
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop

0800686c <CAN_GetLastErrorCode>:
  *          - CAN_ERRORCODE_BitDominantErr: Bit Dominant Error
  *          - CAN_ERRORCODE_CRCErr: CRC Error
  *          - CAN_ERRORCODE_SoftwareSetErr: Software Set Error  
  */
uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  uint8_t errorcode=0;
 8006874:	2300      	movs	r3, #0
 8006876:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the error code*/
  errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	b2db      	uxtb	r3, r3
 800687e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006882:	73fb      	strb	r3, [r7, #15]
  
  /* Return the error code*/
  return errorcode;
 8006884:	7bfb      	ldrb	r3, [r7, #15]
}
 8006886:	4618      	mov	r0, r3
 8006888:	3714      	adds	r7, #20
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop

08006894 <CAN_GetReceiveErrorCounter>:
  *         error passive state.  
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.  
  * @retval CAN Receive Error Counter. 
  */
uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
 800689c:	2300      	movs	r3, #0
 800689e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the Receive Error Counter*/
  counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	699b      	ldr	r3, [r3, #24]
 80068a4:	0e1b      	lsrs	r3, r3, #24
 80068a6:	73fb      	strb	r3, [r7, #15]
  
  /* Return the Receive Error Counter*/
  return counter;
 80068a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3714      	adds	r7, #20
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop

080068b8 <CAN_GetLSBTransmitErrorCounter>:
  * @brief  Returns the LSB of the 9-bit CANx Transmit Error Counter(TEC).
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
  * @retval LSB of the 9-bit CAN Transmit Error Counter. 
  */
uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
 80068c0:	2300      	movs	r3, #0
 80068c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	699b      	ldr	r3, [r3, #24]
 80068c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80068cc:	0c1b      	lsrs	r3, r3, #16
 80068ce:	73fb      	strb	r3, [r7, #15]
  
  /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  return counter;
 80068d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3714      	adds	r7, #20
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop

080068e0 <CAN_ITConfig>:
  * @param  NewState: new state of the CAN interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b085      	sub	sp, #20
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	4613      	mov	r3, r2
 80068ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80068ee:	79fb      	ldrb	r3, [r7, #7]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d006      	beq.n	8006902 <CAN_ITConfig+0x22>
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	695a      	ldr	r2, [r3, #20]
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	431a      	orrs	r2, r3
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	615a      	str	r2, [r3, #20]
 8006900:	e006      	b.n	8006910 <CAN_ITConfig+0x30>
  }
  else
  {
    /* Disable the selected CANx interrupt */
    CANx->IER &= ~CAN_IT;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	695a      	ldr	r2, [r3, #20]
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	43db      	mvns	r3, r3
 800690a:	401a      	ands	r2, r3
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	615a      	str	r2, [r3, #20]
  }
}
 8006910:	3714      	adds	r7, #20
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop

0800691c <CAN_GetFlagStatus>:
  *            @arg CAN_FLAG_BOF: Bus-Off Flag    
  *            @arg CAN_FLAG_LEC: Last error code Flag      
  * @retval The new state of CAN_FLAG (SET or RESET).
  */
FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8006926:	2300      	movs	r3, #0
 8006928:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
  

  if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d00d      	beq.n	8006950 <CAN_GetFlagStatus+0x34>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	699a      	ldr	r2, [r3, #24]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	4013      	ands	r3, r2
 800693c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006940:	2b00      	cmp	r3, #0
 8006942:	d002      	beq.n	800694a <CAN_GetFlagStatus+0x2e>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8006944:	2301      	movs	r3, #1
 8006946:	73fb      	strb	r3, [r7, #15]
 8006948:	e048      	b.n	80069dc <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 800694a:	2300      	movs	r3, #0
 800694c:	73fb      	strb	r3, [r7, #15]
 800694e:	e045      	b.n	80069dc <CAN_GetFlagStatus+0xc0>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00d      	beq.n	8006976 <CAN_GetFlagStatus+0x5a>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	685a      	ldr	r2, [r3, #4]
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	4013      	ands	r3, r2
 8006962:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006966:	2b00      	cmp	r3, #0
 8006968:	d002      	beq.n	8006970 <CAN_GetFlagStatus+0x54>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 800696a:	2301      	movs	r3, #1
 800696c:	73fb      	strb	r3, [r7, #15]
 800696e:	e035      	b.n	80069dc <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8006970:	2300      	movs	r3, #0
 8006972:	73fb      	strb	r3, [r7, #15]
 8006974:	e032      	b.n	80069dc <CAN_GetFlagStatus+0xc0>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00d      	beq.n	800699c <CAN_GetFlagStatus+0x80>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	689a      	ldr	r2, [r3, #8]
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	4013      	ands	r3, r2
 8006988:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800698c:	2b00      	cmp	r3, #0
 800698e:	d002      	beq.n	8006996 <CAN_GetFlagStatus+0x7a>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8006990:	2301      	movs	r3, #1
 8006992:	73fb      	strb	r3, [r7, #15]
 8006994:	e022      	b.n	80069dc <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8006996:	2300      	movs	r3, #0
 8006998:	73fb      	strb	r3, [r7, #15]
 800699a:	e01f      	b.n	80069dc <CAN_GetFlagStatus+0xc0>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00d      	beq.n	80069c2 <CAN_GetFlagStatus+0xa6>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	68da      	ldr	r2, [r3, #12]
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	4013      	ands	r3, r2
 80069ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d002      	beq.n	80069bc <CAN_GetFlagStatus+0xa0>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 80069b6:	2301      	movs	r3, #1
 80069b8:	73fb      	strb	r3, [r7, #15]
 80069ba:	e00f      	b.n	80069dc <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 80069bc:	2300      	movs	r3, #0
 80069be:	73fb      	strb	r3, [r7, #15]
 80069c0:	e00c      	b.n	80069dc <CAN_GetFlagStatus+0xc0>
    }
  }
  else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
  { 
    /* Check the status of the specified CAN flag */
    if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	691a      	ldr	r2, [r3, #16]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	4013      	ands	r3, r2
 80069ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d002      	beq.n	80069d8 <CAN_GetFlagStatus+0xbc>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 80069d2:	2301      	movs	r3, #1
 80069d4:	73fb      	strb	r3, [r7, #15]
 80069d6:	e001      	b.n	80069dc <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 80069d8:	2300      	movs	r3, #0
 80069da:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Return the CAN_FLAG status */
  return  bitstatus;
 80069dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3714      	adds	r7, #20
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop

080069ec <CAN_ClearFlag>:
  *            @arg CAN_FLAG_SLAK: Sleep acknowledge Flag    
  *            @arg CAN_FLAG_LEC: Last error code Flag        
  * @retval None
  */
void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  uint32_t flagtmp=0;
 80069f6:	2300      	movs	r3, #0
 80069f8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
  
  if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
 80069fa:	683a      	ldr	r2, [r7, #0]
 80069fc:	4b16      	ldr	r3, [pc, #88]	; (8006a58 <CAN_ClearFlag+0x6c>)
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d103      	bne.n	8006a0a <CAN_ClearFlag+0x1e>
  {
    /* Clear the selected CAN flags */
    CANx->ESR = (uint32_t)RESET;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	619a      	str	r2, [r3, #24]
 8006a08:	e021      	b.n	8006a4e <CAN_ClearFlag+0x62>
  }
  else /* MSR or TSR or RF0R or RF1R */
  {
    flagtmp = CAN_FLAG & 0x000FFFFF;
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a10:	60fb      	str	r3, [r7, #12]

    if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d003      	beq.n	8006a24 <CAN_ClearFlag+0x38>
    {
      /* Receive Flags */
      CANx->RF0R = (uint32_t)(flagtmp);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	60da      	str	r2, [r3, #12]
 8006a22:	e014      	b.n	8006a4e <CAN_ClearFlag+0x62>
    }
    else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d003      	beq.n	8006a36 <CAN_ClearFlag+0x4a>
    {
      /* Receive Flags */
      CANx->RF1R = (uint32_t)(flagtmp);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	611a      	str	r2, [r3, #16]
 8006a34:	e00b      	b.n	8006a4e <CAN_ClearFlag+0x62>
    }
    else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d003      	beq.n	8006a48 <CAN_ClearFlag+0x5c>
    {
      /* Transmit Flags */
      CANx->TSR = (uint32_t)(flagtmp);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	609a      	str	r2, [r3, #8]
 8006a46:	e002      	b.n	8006a4e <CAN_ClearFlag+0x62>
    }
    else /* If((CAN_FLAG & CAN_FLAGS_MSR)!=(uint32_t)RESET) */
    {
      /* Operating mode Flags */
      CANx->MSR = (uint32_t)(flagtmp);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	605a      	str	r2, [r3, #4]
    }
  }
}
 8006a4e:	3714      	adds	r7, #20
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr
 8006a58:	30f00070 	.word	0x30f00070

08006a5c <CAN_GetITStatus>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt
  * @retval The current state of CAN_IT (SET or RESET).
  */
ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  ITStatus itstatus = RESET;
 8006a66:	2300      	movs	r3, #0
 8006a68:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  
  /* check the interrupt enable bit */
 if((CANx->IER & CAN_IT) != RESET)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	695a      	ldr	r2, [r3, #20]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	4013      	ands	r3, r2
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f000 80b2 	beq.w	8006bdc <CAN_GetITStatus+0x180>
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	2b40      	cmp	r3, #64	; 0x40
 8006a7c:	d062      	beq.n	8006b44 <CAN_GetITStatus+0xe8>
 8006a7e:	2b40      	cmp	r3, #64	; 0x40
 8006a80:	d80f      	bhi.n	8006aa2 <CAN_GetITStatus+0x46>
 8006a82:	2b04      	cmp	r3, #4
 8006a84:	d03a      	beq.n	8006afc <CAN_GetITStatus+0xa0>
 8006a86:	2b04      	cmp	r3, #4
 8006a88:	d804      	bhi.n	8006a94 <CAN_GetITStatus+0x38>
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d024      	beq.n	8006ad8 <CAN_GetITStatus+0x7c>
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d02b      	beq.n	8006aea <CAN_GetITStatus+0x8e>
 8006a92:	e09f      	b.n	8006bd4 <CAN_GetITStatus+0x178>
 8006a94:	2b10      	cmp	r3, #16
 8006a96:	d043      	beq.n	8006b20 <CAN_GetITStatus+0xc4>
 8006a98:	2b20      	cmp	r3, #32
 8006a9a:	d04a      	beq.n	8006b32 <CAN_GetITStatus+0xd6>
 8006a9c:	2b08      	cmp	r3, #8
 8006a9e:	d036      	beq.n	8006b0e <CAN_GetITStatus+0xb2>
 8006aa0:	e098      	b.n	8006bd4 <CAN_GetITStatus+0x178>
 8006aa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006aa6:	f000 8083 	beq.w	8006bb0 <CAN_GetITStatus+0x154>
 8006aaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006aae:	d809      	bhi.n	8006ac4 <CAN_GetITStatus+0x68>
 8006ab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ab4:	d06a      	beq.n	8006b8c <CAN_GetITStatus+0x130>
 8006ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006aba:	d070      	beq.n	8006b9e <CAN_GetITStatus+0x142>
 8006abc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ac0:	d05b      	beq.n	8006b7a <CAN_GetITStatus+0x11e>
 8006ac2:	e087      	b.n	8006bd4 <CAN_GetITStatus+0x178>
 8006ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ac8:	d045      	beq.n	8006b56 <CAN_GetITStatus+0xfa>
 8006aca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ace:	d04b      	beq.n	8006b68 <CAN_GetITStatus+0x10c>
 8006ad0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ad4:	d075      	beq.n	8006bc2 <CAN_GetITStatus+0x166>
 8006ad6:	e07d      	b.n	8006bd4 <CAN_GetITStatus+0x178>
    {
      case CAN_IT_TME:
        /* Check CAN_TSR_RQCPx bits */
        itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	4618      	mov	r0, r3
 8006ade:	4943      	ldr	r1, [pc, #268]	; (8006bec <CAN_GetITStatus+0x190>)
 8006ae0:	f000 f8f4 	bl	8006ccc <CheckITStatus>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	73fb      	strb	r3, [r7, #15]
        break;
 8006ae8:	e077      	b.n	8006bda <CAN_GetITStatus+0x17e>
      case CAN_IT_FMP0:
        /* Check CAN_RF0R_FMP0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	4618      	mov	r0, r3
 8006af0:	2103      	movs	r1, #3
 8006af2:	f000 f8eb 	bl	8006ccc <CheckITStatus>
 8006af6:	4603      	mov	r3, r0
 8006af8:	73fb      	strb	r3, [r7, #15]
        break;
 8006afa:	e06e      	b.n	8006bda <CAN_GetITStatus+0x17e>
      case CAN_IT_FF0:
        /* Check CAN_RF0R_FULL0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	4618      	mov	r0, r3
 8006b02:	2108      	movs	r1, #8
 8006b04:	f000 f8e2 	bl	8006ccc <CheckITStatus>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	73fb      	strb	r3, [r7, #15]
        break;
 8006b0c:	e065      	b.n	8006bda <CAN_GetITStatus+0x17e>
      case CAN_IT_FOV0:
        /* Check CAN_RF0R_FOVR0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	4618      	mov	r0, r3
 8006b14:	2110      	movs	r1, #16
 8006b16:	f000 f8d9 	bl	8006ccc <CheckITStatus>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	73fb      	strb	r3, [r7, #15]
        break;
 8006b1e:	e05c      	b.n	8006bda <CAN_GetITStatus+0x17e>
      case CAN_IT_FMP1:
        /* Check CAN_RF1R_FMP1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	4618      	mov	r0, r3
 8006b26:	2103      	movs	r1, #3
 8006b28:	f000 f8d0 	bl	8006ccc <CheckITStatus>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	73fb      	strb	r3, [r7, #15]
        break;
 8006b30:	e053      	b.n	8006bda <CAN_GetITStatus+0x17e>
      case CAN_IT_FF1:
        /* Check CAN_RF1R_FULL1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	4618      	mov	r0, r3
 8006b38:	2108      	movs	r1, #8
 8006b3a:	f000 f8c7 	bl	8006ccc <CheckITStatus>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	73fb      	strb	r3, [r7, #15]
        break;
 8006b42:	e04a      	b.n	8006bda <CAN_GetITStatus+0x17e>
      case CAN_IT_FOV1:
        /* Check CAN_RF1R_FOVR1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	4618      	mov	r0, r3
 8006b4a:	2110      	movs	r1, #16
 8006b4c:	f000 f8be 	bl	8006ccc <CheckITStatus>
 8006b50:	4603      	mov	r3, r0
 8006b52:	73fb      	strb	r3, [r7, #15]
        break;
 8006b54:	e041      	b.n	8006bda <CAN_GetITStatus+0x17e>
      case CAN_IT_WKU:
        /* Check CAN_MSR_WKUI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	2108      	movs	r1, #8
 8006b5e:	f000 f8b5 	bl	8006ccc <CheckITStatus>
 8006b62:	4603      	mov	r3, r0
 8006b64:	73fb      	strb	r3, [r7, #15]
        break;
 8006b66:	e038      	b.n	8006bda <CAN_GetITStatus+0x17e>
      case CAN_IT_SLK:
        /* Check CAN_MSR_SLAKI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	2110      	movs	r1, #16
 8006b70:	f000 f8ac 	bl	8006ccc <CheckITStatus>
 8006b74:	4603      	mov	r3, r0
 8006b76:	73fb      	strb	r3, [r7, #15]
        break;
 8006b78:	e02f      	b.n	8006bda <CAN_GetITStatus+0x17e>
      case CAN_IT_EWG:
        /* Check CAN_ESR_EWGF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	4618      	mov	r0, r3
 8006b80:	2101      	movs	r1, #1
 8006b82:	f000 f8a3 	bl	8006ccc <CheckITStatus>
 8006b86:	4603      	mov	r3, r0
 8006b88:	73fb      	strb	r3, [r7, #15]
        break;
 8006b8a:	e026      	b.n	8006bda <CAN_GetITStatus+0x17e>
      case CAN_IT_EPV:
        /* Check CAN_ESR_EPVF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	4618      	mov	r0, r3
 8006b92:	2102      	movs	r1, #2
 8006b94:	f000 f89a 	bl	8006ccc <CheckITStatus>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	73fb      	strb	r3, [r7, #15]
        break;
 8006b9c:	e01d      	b.n	8006bda <CAN_GetITStatus+0x17e>
      case CAN_IT_BOF:
        /* Check CAN_ESR_BOFF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	2104      	movs	r1, #4
 8006ba6:	f000 f891 	bl	8006ccc <CheckITStatus>
 8006baa:	4603      	mov	r3, r0
 8006bac:	73fb      	strb	r3, [r7, #15]
        break;
 8006bae:	e014      	b.n	8006bda <CAN_GetITStatus+0x17e>
      case CAN_IT_LEC:
        /* Check CAN_ESR_LEC bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	2170      	movs	r1, #112	; 0x70
 8006bb8:	f000 f888 	bl	8006ccc <CheckITStatus>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	73fb      	strb	r3, [r7, #15]
        break;
 8006bc0:	e00b      	b.n	8006bda <CAN_GetITStatus+0x17e>
      case CAN_IT_ERR:
        /* Check CAN_MSR_ERRI bit */ 
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	2104      	movs	r1, #4
 8006bca:	f000 f87f 	bl	8006ccc <CheckITStatus>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	73fb      	strb	r3, [r7, #15]
        break;
 8006bd2:	e002      	b.n	8006bda <CAN_GetITStatus+0x17e>
      default:
        /* in case of error, return RESET */
        itstatus = RESET;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	73fb      	strb	r3, [r7, #15]
        break;
 8006bd8:	bf00      	nop
 8006bda:	e001      	b.n	8006be0 <CAN_GetITStatus+0x184>
    }
  }
  else
  {
   /* in case the Interrupt is not enabled, return RESET */
    itstatus  = RESET;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the CAN_IT status */
  return  itstatus;
 8006be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	00010101 	.word	0x00010101

08006bf0 <CAN_ClearITPendingBit>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt 
  * @retval None
  */
void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c00:	d043      	beq.n	8006c8a <CAN_ClearITPendingBit+0x9a>
 8006c02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c06:	d80d      	bhi.n	8006c24 <CAN_ClearITPendingBit+0x34>
 8006c08:	2b08      	cmp	r3, #8
 8006c0a:	d02a      	beq.n	8006c62 <CAN_ClearITPendingBit+0x72>
 8006c0c:	2b08      	cmp	r3, #8
 8006c0e:	d804      	bhi.n	8006c1a <CAN_ClearITPendingBit+0x2a>
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d01e      	beq.n	8006c52 <CAN_ClearITPendingBit+0x62>
 8006c14:	2b04      	cmp	r3, #4
 8006c16:	d020      	beq.n	8006c5a <CAN_ClearITPendingBit+0x6a>
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
    default:
       break;
 8006c18:	e051      	b.n	8006cbe <CAN_ClearITPendingBit+0xce>
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 8006c1a:	2b20      	cmp	r3, #32
 8006c1c:	d025      	beq.n	8006c6a <CAN_ClearITPendingBit+0x7a>
 8006c1e:	2b40      	cmp	r3, #64	; 0x40
 8006c20:	d027      	beq.n	8006c72 <CAN_ClearITPendingBit+0x82>
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
    default:
       break;
 8006c22:	e04c      	b.n	8006cbe <CAN_ClearITPendingBit+0xce>
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 8006c24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c28:	d03b      	beq.n	8006ca2 <CAN_ClearITPendingBit+0xb2>
 8006c2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c2e:	d806      	bhi.n	8006c3e <CAN_ClearITPendingBit+0x4e>
 8006c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c34:	d02d      	beq.n	8006c92 <CAN_ClearITPendingBit+0xa2>
 8006c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c3a:	d02e      	beq.n	8006c9a <CAN_ClearITPendingBit+0xaa>
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
    default:
       break;
 8006c3c:	e03f      	b.n	8006cbe <CAN_ClearITPendingBit+0xce>
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 8006c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c42:	d01a      	beq.n	8006c7a <CAN_ClearITPendingBit+0x8a>
 8006c44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c48:	d01b      	beq.n	8006c82 <CAN_ClearITPendingBit+0x92>
 8006c4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c4e:	d02f      	beq.n	8006cb0 <CAN_ClearITPendingBit+0xc0>
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
    default:
       break;
 8006c50:	e035      	b.n	8006cbe <CAN_ClearITPendingBit+0xce>

  switch (CAN_IT)
  {
    case CAN_IT_TME:
      /* Clear CAN_TSR_RQCPx (rc_w1)*/
      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a1c      	ldr	r2, [pc, #112]	; (8006cc8 <CAN_ClearITPendingBit+0xd8>)
 8006c56:	609a      	str	r2, [r3, #8]
      break;
 8006c58:	e031      	b.n	8006cbe <CAN_ClearITPendingBit+0xce>
    case CAN_IT_FF0:
      /* Clear CAN_RF0R_FULL0 (rc_w1)*/
      CANx->RF0R = CAN_RF0R_FULL0; 
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2208      	movs	r2, #8
 8006c5e:	60da      	str	r2, [r3, #12]
      break;
 8006c60:	e02d      	b.n	8006cbe <CAN_ClearITPendingBit+0xce>
    case CAN_IT_FOV0:
      /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
      CANx->RF0R = CAN_RF0R_FOVR0; 
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2210      	movs	r2, #16
 8006c66:	60da      	str	r2, [r3, #12]
      break;
 8006c68:	e029      	b.n	8006cbe <CAN_ClearITPendingBit+0xce>
    case CAN_IT_FF1:
      /* Clear CAN_RF1R_FULL1 (rc_w1)*/
      CANx->RF1R = CAN_RF1R_FULL1;  
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2208      	movs	r2, #8
 8006c6e:	611a      	str	r2, [r3, #16]
      break;
 8006c70:	e025      	b.n	8006cbe <CAN_ClearITPendingBit+0xce>
    case CAN_IT_FOV1:
      /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
      CANx->RF1R = CAN_RF1R_FOVR1; 
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2210      	movs	r2, #16
 8006c76:	611a      	str	r2, [r3, #16]
      break;
 8006c78:	e021      	b.n	8006cbe <CAN_ClearITPendingBit+0xce>
    case CAN_IT_WKU:
      /* Clear CAN_MSR_WKUI (rc_w1)*/
      CANx->MSR = CAN_MSR_WKUI;  
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2208      	movs	r2, #8
 8006c7e:	605a      	str	r2, [r3, #4]
      break;
 8006c80:	e01d      	b.n	8006cbe <CAN_ClearITPendingBit+0xce>
    case CAN_IT_SLK:
      /* Clear CAN_MSR_SLAKI (rc_w1)*/ 
      CANx->MSR = CAN_MSR_SLAKI;   
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2210      	movs	r2, #16
 8006c86:	605a      	str	r2, [r3, #4]
      break;
 8006c88:	e019      	b.n	8006cbe <CAN_ClearITPendingBit+0xce>
    case CAN_IT_EWG:
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2204      	movs	r2, #4
 8006c8e:	605a      	str	r2, [r3, #4]
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/ 
      break;
 8006c90:	e015      	b.n	8006cbe <CAN_ClearITPendingBit+0xce>
    case CAN_IT_EPV:
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2204      	movs	r2, #4
 8006c96:	605a      	str	r2, [r3, #4]
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
      break;
 8006c98:	e011      	b.n	8006cbe <CAN_ClearITPendingBit+0xce>
    case CAN_IT_BOF:
      /* Clear CAN_MSR_ERRI (rc_w1) */ 
      CANx->MSR = CAN_MSR_ERRI; 
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2204      	movs	r2, #4
 8006c9e:	605a      	str	r2, [r3, #4]
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
       break;
 8006ca0:	e00d      	b.n	8006cbe <CAN_ClearITPendingBit+0xce>
    case CAN_IT_LEC:
      /*  Clear LEC bits */
      CANx->ESR = RESET; 
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	619a      	str	r2, [r3, #24]
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2204      	movs	r2, #4
 8006cac:	605a      	str	r2, [r3, #4]
      break;
 8006cae:	e006      	b.n	8006cbe <CAN_ClearITPendingBit+0xce>
    case CAN_IT_ERR:
      /*Clear LEC bits */
      CANx->ESR = RESET; 
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	619a      	str	r2, [r3, #24]
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2204      	movs	r2, #4
 8006cba:	605a      	str	r2, [r3, #4]
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
 8006cbc:	bf00      	nop
    default:
       break;
   }
}
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr
 8006cc8:	00010101 	.word	0x00010101

08006ccc <CheckITStatus>:
  * @param  CAN_Reg: specifies the CAN interrupt register to check.
  * @param  It_Bit: specifies the interrupt source bit to check.
  * @retval The new state of the CAN Interrupt (SET or RESET).
  */
static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b085      	sub	sp, #20
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  ITStatus pendingbitstatus = RESET;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	73fb      	strb	r3, [r7, #15]
  
  if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	4013      	ands	r3, r2
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d002      	beq.n	8006cea <CheckITStatus+0x1e>
  {
    /* CAN_IT is set */
    pendingbitstatus = SET;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	73fb      	strb	r3, [r7, #15]
 8006ce8:	e001      	b.n	8006cee <CheckITStatus+0x22>
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8006cea:	2300      	movs	r3, #0
 8006cec:	73fb      	strb	r3, [r7, #15]
  }
  return pendingbitstatus;
 8006cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3714      	adds	r7, #20
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <CRC_ResetDR>:
  * @brief  Resets the CRC Data register (DR).
  * @param  None
  * @retval None
  */
void CRC_ResetDR(void)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	af00      	add	r7, sp, #0
  /* Reset CRC generator */
  CRC->CR = CRC_CR_RESET;
 8006d00:	4b03      	ldr	r3, [pc, #12]	; (8006d10 <CRC_ResetDR+0x14>)
 8006d02:	2201      	movs	r2, #1
 8006d04:	609a      	str	r2, [r3, #8]
}
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	40023000 	.word	0x40023000

08006d14 <CRC_CalcCRC>:
  * @brief  Computes the 32-bit CRC of a given data word(32-bit).
  * @param  Data: data word(32-bit) to compute its CRC
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcCRC(uint32_t Data)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  CRC->DR = Data;
 8006d1c:	4b05      	ldr	r3, [pc, #20]	; (8006d34 <CRC_CalcCRC+0x20>)
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	601a      	str	r2, [r3, #0]
  
  return (CRC->DR);
 8006d22:	4b04      	ldr	r3, [pc, #16]	; (8006d34 <CRC_CalcCRC+0x20>)
 8006d24:	681b      	ldr	r3, [r3, #0]
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	370c      	adds	r7, #12
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	40023000 	.word	0x40023000

08006d38 <CRC_CalcBlockCRC>:
  * @param  pBuffer: pointer to the buffer containing the data to be computed
  * @param  BufferLength: length of the buffer to be computed					
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  uint32_t index = 0;
 8006d42:	2300      	movs	r3, #0
 8006d44:	60fb      	str	r3, [r7, #12]
  
  for(index = 0; index < BufferLength; index++)
 8006d46:	2300      	movs	r3, #0
 8006d48:	60fb      	str	r3, [r7, #12]
 8006d4a:	e009      	b.n	8006d60 <CRC_CalcBlockCRC+0x28>
  {
    CRC->DR = pBuffer[index];
 8006d4c:	4b0a      	ldr	r3, [pc, #40]	; (8006d78 <CRC_CalcBlockCRC+0x40>)
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	0092      	lsls	r2, r2, #2
 8006d52:	6879      	ldr	r1, [r7, #4]
 8006d54:	440a      	add	r2, r1
 8006d56:	6812      	ldr	r2, [r2, #0]
 8006d58:	601a      	str	r2, [r3, #0]
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
  uint32_t index = 0;
  
  for(index = 0; index < BufferLength; index++)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	60fb      	str	r3, [r7, #12]
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d3f1      	bcc.n	8006d4c <CRC_CalcBlockCRC+0x14>
  {
    CRC->DR = pBuffer[index];
  }
  return (CRC->DR);
 8006d68:	4b03      	ldr	r3, [pc, #12]	; (8006d78 <CRC_CalcBlockCRC+0x40>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3714      	adds	r7, #20
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr
 8006d78:	40023000 	.word	0x40023000

08006d7c <CRC_GetCRC>:
  * @brief  Returns the current CRC value.
  * @param  None
  * @retval 32-bit CRC
  */
uint32_t CRC_GetCRC(void)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	af00      	add	r7, sp, #0
  return (CRC->DR);
 8006d80:	4b03      	ldr	r3, [pc, #12]	; (8006d90 <CRC_GetCRC+0x14>)
 8006d82:	681b      	ldr	r3, [r3, #0]
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	40023000 	.word	0x40023000

08006d94 <CRC_SetIDRegister>:
  * @brief  Stores a 8-bit data in the Independent Data(ID) register.
  * @param  IDValue: 8-bit value to be stored in the ID register 					
  * @retval None
  */
void CRC_SetIDRegister(uint8_t IDValue)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	71fb      	strb	r3, [r7, #7]
  CRC->IDR = IDValue;
 8006d9e:	4b04      	ldr	r3, [pc, #16]	; (8006db0 <CRC_SetIDRegister+0x1c>)
 8006da0:	79fa      	ldrb	r2, [r7, #7]
 8006da2:	711a      	strb	r2, [r3, #4]
}
 8006da4:	370c      	adds	r7, #12
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	40023000 	.word	0x40023000

08006db4 <CRC_GetIDRegister>:
  * @brief  Returns the 8-bit data stored in the Independent Data(ID) register
  * @param  None
  * @retval 8-bit value of the ID register 
  */
uint8_t CRC_GetIDRegister(void)
{
 8006db4:	b480      	push	{r7}
 8006db6:	af00      	add	r7, sp, #0
  return (CRC->IDR);
 8006db8:	4b03      	ldr	r3, [pc, #12]	; (8006dc8 <CRC_GetIDRegister+0x14>)
 8006dba:	791b      	ldrb	r3, [r3, #4]
 8006dbc:	b2db      	uxtb	r3, r3
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr
 8006dc8:	40023000 	.word	0x40023000

08006dcc <CRYP_AES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_ECB(uint8_t Mode, uint8_t* Key, uint16_t Keysize,
                         uint8_t* Input, uint32_t Ilength, uint8_t* Output)
{
 8006dcc:	b590      	push	{r4, r7, lr}
 8006dce:	b0ab      	sub	sp, #172	; 0xac
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60b9      	str	r1, [r7, #8]
 8006dd4:	607b      	str	r3, [r7, #4]
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	73fb      	strb	r3, [r7, #15]
 8006dda:	4613      	mov	r3, r2
 8006ddc:	81bb      	strh	r3, [r7, #12]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 8006dde:	2300      	movs	r3, #0
 8006de0:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 8006de2:	2300      	movs	r3, #0
 8006de4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  ErrorStatus status = SUCCESS;
 8006de8:	2301      	movs	r3, #1
 8006dea:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  uint32_t keyaddr    = (uint32_t)Key;
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  uint32_t inputaddr  = (uint32_t)Input;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  uint32_t outputaddr = (uint32_t)Output;
 8006dfa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006dfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t i = 0;
 8006e02:	2300      	movs	r3, #0
 8006e04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8006e08:	f107 0318 	add.w	r3, r7, #24
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f002 f9e5 	bl	80091dc <CRYP_KeyStructInit>

  switch(Keysize)
 8006e12:	89bb      	ldrh	r3, [r7, #12]
 8006e14:	2bc0      	cmp	r3, #192	; 0xc0
 8006e16:	d03b      	beq.n	8006e90 <CRYP_AES_ECB+0xc4>
 8006e18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e1c:	d07f      	beq.n	8006f1e <CRYP_AES_ECB+0x152>
 8006e1e:	2b80      	cmp	r3, #128	; 0x80
 8006e20:	d000      	beq.n	8006e24 <CRYP_AES_ECB+0x58>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    default:
    break;
 8006e22:	e0db      	b.n	8006fdc <CRYP_AES_ECB+0x210>
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);

  switch(Keysize)
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8006e24:	2300      	movs	r3, #0
 8006e26:	647b      	str	r3, [r7, #68]	; 0x44
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8006e28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    \return               Reversed value
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
  return __builtin_bswap32(value);
 8006e32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e36:	ba1b      	rev	r3, r3
 8006e38:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8006e3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e3e:	3304      	adds	r3, #4
 8006e40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8006e44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e52:	ba1b      	rev	r3, r3
 8006e54:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8006e56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e5a:	3304      	adds	r3, #4
 8006e5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8006e60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e6e:	ba1b      	rev	r3, r3
 8006e70:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8006e72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e76:	3304      	adds	r3, #4
 8006e78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8006e7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e8a:	ba1b      	rev	r3, r3
 8006e8c:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8006e8e:	e0a5      	b.n	8006fdc <CRYP_AES_ECB+0x210>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 8006e90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e94:	647b      	str	r3, [r7, #68]	; 0x44
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8006e96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006e9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ea0:	ba1b      	rev	r3, r3
 8006ea2:	623b      	str	r3, [r7, #32]
    keyaddr+=4;
 8006ea4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ea8:	3304      	adds	r3, #4
 8006eaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8006eae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8006eb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006eb8:	ba1b      	rev	r3, r3
 8006eba:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 8006ebc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ec0:	3304      	adds	r3, #4
 8006ec2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8006ec6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	677b      	str	r3, [r7, #116]	; 0x74
 8006ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ed0:	ba1b      	rev	r3, r3
 8006ed2:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8006ed4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ed8:	3304      	adds	r3, #4
 8006eda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8006ede:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	673b      	str	r3, [r7, #112]	; 0x70
 8006ee6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ee8:	ba1b      	rev	r3, r3
 8006eea:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8006eec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ef0:	3304      	adds	r3, #4
 8006ef2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8006ef6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f00:	ba1b      	rev	r3, r3
 8006f02:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8006f04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f08:	3304      	adds	r3, #4
 8006f0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8006f0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f18:	ba1b      	rev	r3, r3
 8006f1a:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8006f1c:	e05e      	b.n	8006fdc <CRYP_AES_ECB+0x210>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 8006f1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f22:	647b      	str	r3, [r7, #68]	; 0x44
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8006f24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	667b      	str	r3, [r7, #100]	; 0x64
 8006f2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f2e:	ba1b      	rev	r3, r3
 8006f30:	61bb      	str	r3, [r7, #24]
    keyaddr+=4;
 8006f32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f36:	3304      	adds	r3, #4
 8006f38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8006f3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	663b      	str	r3, [r7, #96]	; 0x60
 8006f44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f46:	ba1b      	rev	r3, r3
 8006f48:	61fb      	str	r3, [r7, #28]
    keyaddr+=4;
 8006f4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f4e:	3304      	adds	r3, #4
 8006f50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8006f54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f5e:	ba1b      	rev	r3, r3
 8006f60:	623b      	str	r3, [r7, #32]
    keyaddr+=4;
 8006f62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f66:	3304      	adds	r3, #4
 8006f68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8006f6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f76:	ba1b      	rev	r3, r3
 8006f78:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 8006f7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f7e:	3304      	adds	r3, #4
 8006f80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8006f84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	657b      	str	r3, [r7, #84]	; 0x54
 8006f8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f8e:	ba1b      	rev	r3, r3
 8006f90:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8006f92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f96:	3304      	adds	r3, #4
 8006f98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8006f9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	653b      	str	r3, [r7, #80]	; 0x50
 8006fa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fa6:	ba1b      	rev	r3, r3
 8006fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8006faa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fae:	3304      	adds	r3, #4
 8006fb0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8006fb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fbe:	ba1b      	rev	r3, r3
 8006fc0:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8006fc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fc6:	3304      	adds	r3, #4
 8006fc8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8006fcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fd6:	ba1b      	rev	r3, r3
 8006fd8:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8006fda:	bf00      	nop
    default:
    break;
  }

  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 8006fdc:	7bfb      	ldrb	r3, [r7, #15]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d130      	bne.n	8007044 <CRYP_AES_ECB+0x278>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 8006fe2:	f002 f96b 	bl	80092bc <CRYP_FIFOFlush>

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8006fe6:	2304      	movs	r3, #4
 8006fe8:	63bb      	str	r3, [r7, #56]	; 0x38
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 8006fea:	2338      	movs	r3, #56	; 0x38
 8006fec:	63fb      	str	r3, [r7, #60]	; 0x3c
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	643b      	str	r3, [r7, #64]	; 0x40
    CRYP_Init(&AES_CRYP_InitStructure);
 8006ff2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f002 f85c 	bl	80090b4 <CRYP_Init>

    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8006ffc:	f107 0318 	add.w	r3, r7, #24
 8007000:	4618      	mov	r0, r3
 8007002:	f002 f8bf 	bl	8009184 <CRYP_KeyInit>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8007006:	2001      	movs	r0, #1
 8007008:	f002 f966 	bl	80092d8 <CRYP_Cmd>

    /* wait until the Busy flag is RESET */
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 800700c:	2010      	movs	r0, #16
 800700e:	f002 fb61 	bl	80096d4 <CRYP_GetFlagStatus>
 8007012:	4603      	mov	r3, r0
 8007014:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      counter++;
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	3301      	adds	r3, #1
 800701c:	617b      	str	r3, [r7, #20]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007024:	d003      	beq.n	800702e <CRYP_AES_ECB+0x262>
 8007026:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800702a:	2b00      	cmp	r3, #0
 800702c:	d1ee      	bne.n	800700c <CRYP_AES_ECB+0x240>

    if (busystatus != RESET)
 800702e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007032:	2b00      	cmp	r3, #0
 8007034:	d003      	beq.n	800703e <CRYP_AES_ECB+0x272>
   {
       status = ERROR;
 8007036:	2300      	movs	r3, #0
 8007038:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800703c:	e009      	b.n	8007052 <CRYP_AES_ECB+0x286>
    }
    else
    {
      /* Crypto Init for decryption process */  
      AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 800703e:	2304      	movs	r3, #4
 8007040:	63bb      	str	r3, [r7, #56]	; 0x38
 8007042:	e006      	b.n	8007052 <CRYP_AES_ECB+0x286>
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {

    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8007044:	f107 0318 	add.w	r3, r7, #24
 8007048:	4618      	mov	r0, r3
 800704a:	f002 f89b 	bl	8009184 <CRYP_KeyInit>

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 800704e:	2300      	movs	r3, #0
 8007050:	63bb      	str	r3, [r7, #56]	; 0x38
  }

  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
 8007052:	2320      	movs	r3, #32
 8007054:	63fb      	str	r3, [r7, #60]	; 0x3c
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8007056:	2380      	movs	r3, #128	; 0x80
 8007058:	643b      	str	r3, [r7, #64]	; 0x40
  CRYP_Init(&AES_CRYP_InitStructure);
 800705a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800705e:	4618      	mov	r0, r3
 8007060:	f002 f828 	bl	80090b4 <CRYP_Init>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 8007064:	f002 f92a 	bl	80092bc <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8007068:	2001      	movs	r0, #1
 800706a:	f002 f935 	bl	80092d8 <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 800706e:	f002 fb17 	bl	80096a0 <CRYP_GetCmdStatus>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d101      	bne.n	800707c <CRYP_AES_ECB+0x2b0>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 8007078:	2300      	movs	r3, #0
 800707a:	e08b      	b.n	8007194 <CRYP_AES_ECB+0x3c8>
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 800707c:	2300      	movs	r3, #0
 800707e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007082:	e077      	b.n	8007174 <CRYP_AES_ECB+0x3a8>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8007084:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4618      	mov	r0, r3
 800708c:	f002 f940 	bl	8009310 <CRYP_DataIn>
    inputaddr+=4;
 8007090:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007094:	3304      	adds	r3, #4
 8007096:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800709a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4618      	mov	r0, r3
 80070a2:	f002 f935 	bl	8009310 <CRYP_DataIn>
    inputaddr+=4;
 80070a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070aa:	3304      	adds	r3, #4
 80070ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80070b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4618      	mov	r0, r3
 80070b8:	f002 f92a 	bl	8009310 <CRYP_DataIn>
    inputaddr+=4;
 80070bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070c0:	3304      	adds	r3, #4
 80070c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80070c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4618      	mov	r0, r3
 80070ce:	f002 f91f 	bl	8009310 <CRYP_DataIn>
    inputaddr+=4;
 80070d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070d6:	3304      	adds	r3, #4
 80070d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    /* Wait until the complete message has been processed */
    counter = 0;
 80070dc:	2300      	movs	r3, #0
 80070de:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80070e0:	2010      	movs	r0, #16
 80070e2:	f002 faf7 	bl	80096d4 <CRYP_GetFlagStatus>
 80070e6:	4603      	mov	r3, r0
 80070e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      counter++;
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	3301      	adds	r3, #1
 80070f0:	617b      	str	r3, [r7, #20]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070f8:	d003      	beq.n	8007102 <CRYP_AES_ECB+0x336>
 80070fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1ee      	bne.n	80070e0 <CRYP_AES_ECB+0x314>

    if (busystatus != RESET)
 8007102:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007106:	2b00      	cmp	r3, #0
 8007108:	d003      	beq.n	8007112 <CRYP_AES_ECB+0x346>
   {
       status = ERROR;
 800710a:	2300      	movs	r3, #0
 800710c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8007110:	e02b      	b.n	800716a <CRYP_AES_ECB+0x39e>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8007112:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8007116:	f002 f909 	bl	800932c <CRYP_DataOut>
 800711a:	4603      	mov	r3, r0
 800711c:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800711e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007122:	3304      	adds	r3, #4
 8007124:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8007128:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 800712c:	f002 f8fe 	bl	800932c <CRYP_DataOut>
 8007130:	4603      	mov	r3, r0
 8007132:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8007134:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007138:	3304      	adds	r3, #4
 800713a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800713e:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8007142:	f002 f8f3 	bl	800932c <CRYP_DataOut>
 8007146:	4603      	mov	r3, r0
 8007148:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800714a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800714e:	3304      	adds	r3, #4
 8007150:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      *(uint32_t*)(outputaddr) = CRYP_DataOut(); 
 8007154:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8007158:	f002 f8e8 	bl	800932c <CRYP_DataOut>
 800715c:	4603      	mov	r3, r0
 800715e:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8007160:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007164:	3304      	adds	r3, #4
 8007166:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 800716a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800716e:	3310      	adds	r3, #16
 8007170:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007174:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007178:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800717c:	429a      	cmp	r2, r3
 800717e:	d204      	bcs.n	800718a <CRYP_AES_ECB+0x3be>
 8007180:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8007184:	2b00      	cmp	r3, #0
 8007186:	f47f af7d 	bne.w	8007084 <CRYP_AES_ECB+0x2b8>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 800718a:	2000      	movs	r0, #0
 800718c:	f002 f8a4 	bl	80092d8 <CRYP_Cmd>

  return status; 
 8007190:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 8007194:	4618      	mov	r0, r3
 8007196:	37ac      	adds	r7, #172	; 0xac
 8007198:	46bd      	mov	sp, r7
 800719a:	bd90      	pop	{r4, r7, pc}

0800719c <CRYP_AES_CBC>:
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CBC(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key,
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 800719c:	b590      	push	{r4, r7, lr}
 800719e:	b0b3      	sub	sp, #204	; 0xcc
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60b9      	str	r1, [r7, #8]
 80071a4:	607a      	str	r2, [r7, #4]
 80071a6:	4602      	mov	r2, r0
 80071a8:	73fa      	strb	r2, [r7, #15]
 80071aa:	81bb      	strh	r3, [r7, #12]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 80071ac:	2300      	movs	r3, #0
 80071ae:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 80071b0:	2300      	movs	r3, #0
 80071b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  ErrorStatus status = SUCCESS;
 80071b6:	2301      	movs	r3, #1
 80071b8:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
  uint32_t keyaddr    = (uint32_t)Key;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t inputaddr  = (uint32_t)Input;
 80071c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  uint32_t outputaddr = (uint32_t)Output;
 80071ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t ivaddr = (uint32_t)InitVectors;
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t i = 0;
 80071d8:	2300      	movs	r3, #0
 80071da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 80071de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071e2:	4618      	mov	r0, r3
 80071e4:	f001 fffa 	bl	80091dc <CRYP_KeyStructInit>

  switch(Keysize)
 80071e8:	89bb      	ldrh	r3, [r7, #12]
 80071ea:	2bc0      	cmp	r3, #192	; 0xc0
 80071ec:	d03c      	beq.n	8007268 <CRYP_AES_CBC+0xcc>
 80071ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071f2:	f000 808c 	beq.w	800730e <CRYP_AES_CBC+0x172>
 80071f6:	2b80      	cmp	r3, #128	; 0x80
 80071f8:	d000      	beq.n	80071fc <CRYP_AES_CBC+0x60>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    default:
    break;
 80071fa:	e0e9      	b.n	80073d0 <CRYP_AES_CBC+0x234>
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);

  switch(Keysize)
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 80071fc:	2300      	movs	r3, #0
 80071fe:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8007200:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800720a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800720e:	ba1b      	rev	r3, r3
 8007210:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8007212:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007216:	3304      	adds	r3, #4
 8007218:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 800721c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007226:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800722a:	ba1b      	rev	r3, r3
 800722c:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 800722e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007232:	3304      	adds	r3, #4
 8007234:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8007238:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007242:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007246:	ba1b      	rev	r3, r3
 8007248:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 800724a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800724e:	3304      	adds	r3, #4
 8007250:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8007254:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800725e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007262:	ba1b      	rev	r3, r3
 8007264:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8007266:	e0b3      	b.n	80073d0 <CRYP_AES_CBC+0x234>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 8007268:	f44f 7380 	mov.w	r3, #256	; 0x100
 800726c:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 800726e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007278:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800727c:	ba1b      	rev	r3, r3
 800727e:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8007280:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007284:	3304      	adds	r3, #4
 8007286:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800728a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007294:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007298:	ba1b      	rev	r3, r3
 800729a:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 800729c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80072a0:	3304      	adds	r3, #4
 80072a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80072a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80072b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072b4:	ba1b      	rev	r3, r3
 80072b6:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 80072b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80072bc:	3304      	adds	r3, #4
 80072be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80072c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80072cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072d0:	ba1b      	rev	r3, r3
 80072d2:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 80072d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80072d8:	3304      	adds	r3, #4
 80072da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80072de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80072e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80072ec:	ba1b      	rev	r3, r3
 80072ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 80072f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80072f4:	3304      	adds	r3, #4
 80072f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80072fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007304:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007308:	ba1b      	rev	r3, r3
 800730a:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 800730c:	e060      	b.n	80073d0 <CRYP_AES_CBC+0x234>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 800730e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007312:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8007314:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800731e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007322:	ba1b      	rev	r3, r3
 8007324:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 8007326:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800732a:	3304      	adds	r3, #4
 800732c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8007330:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007338:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800733a:	ba1b      	rev	r3, r3
 800733c:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 800733e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007342:	3304      	adds	r3, #4
 8007344:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8007348:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007350:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007352:	ba1b      	rev	r3, r3
 8007354:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8007356:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800735a:	3304      	adds	r3, #4
 800735c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8007360:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	677b      	str	r3, [r7, #116]	; 0x74
 8007368:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800736a:	ba1b      	rev	r3, r3
 800736c:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 800736e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007372:	3304      	adds	r3, #4
 8007374:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8007378:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	673b      	str	r3, [r7, #112]	; 0x70
 8007380:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007382:	ba1b      	rev	r3, r3
 8007384:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8007386:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800738a:	3304      	adds	r3, #4
 800738c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8007390:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800739a:	ba1b      	rev	r3, r3
 800739c:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 800739e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80073a2:	3304      	adds	r3, #4
 80073a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80073a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80073b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073b2:	ba1b      	rev	r3, r3
 80073b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 80073b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80073ba:	3304      	adds	r3, #4
 80073bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80073c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	667b      	str	r3, [r7, #100]	; 0x64
 80073c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073ca:	ba1b      	rev	r3, r3
 80073cc:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 80073ce:	bf00      	nop
    default:
    break;
  }

  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 80073d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	663b      	str	r3, [r7, #96]	; 0x60
 80073d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073da:	ba1b      	rev	r3, r3
 80073dc:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 80073de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073e2:	3304      	adds	r3, #4
 80073e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 80073e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073f2:	ba1b      	rev	r3, r3
 80073f4:	61bb      	str	r3, [r7, #24]
  ivaddr+=4;
 80073f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073fa:	3304      	adds	r3, #4
 80073fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 8007400:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	65bb      	str	r3, [r7, #88]	; 0x58
 8007408:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800740a:	ba1b      	rev	r3, r3
 800740c:	61fb      	str	r3, [r7, #28]
  ivaddr+=4;
 800740e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007412:	3304      	adds	r3, #4
 8007414:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 8007418:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	657b      	str	r3, [r7, #84]	; 0x54
 8007420:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007422:	ba1b      	rev	r3, r3
 8007424:	623b      	str	r3, [r7, #32]


  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 8007426:	7bfb      	ldrb	r3, [r7, #15]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d130      	bne.n	800748e <CRYP_AES_CBC+0x2f2>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 800742c:	f001 ff46 	bl	80092bc <CRYP_FIFOFlush>

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8007430:	2304      	movs	r3, #4
 8007432:	647b      	str	r3, [r7, #68]	; 0x44
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 8007434:	2338      	movs	r3, #56	; 0x38
 8007436:	64bb      	str	r3, [r7, #72]	; 0x48
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 8007438:	2300      	movs	r3, #0
 800743a:	64fb      	str	r3, [r7, #76]	; 0x4c

    CRYP_Init(&AES_CRYP_InitStructure);
 800743c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007440:	4618      	mov	r0, r3
 8007442:	f001 fe37 	bl	80090b4 <CRYP_Init>

    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8007446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800744a:	4618      	mov	r0, r3
 800744c:	f001 fe9a 	bl	8009184 <CRYP_KeyInit>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8007450:	2001      	movs	r0, #1
 8007452:	f001 ff41 	bl	80092d8 <CRYP_Cmd>

    /* wait until the Busy flag is RESET */
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8007456:	2010      	movs	r0, #16
 8007458:	f002 f93c 	bl	80096d4 <CRYP_GetFlagStatus>
 800745c:	4603      	mov	r3, r0
 800745e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      counter++;
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	3301      	adds	r3, #1
 8007466:	613b      	str	r3, [r7, #16]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800746e:	d003      	beq.n	8007478 <CRYP_AES_CBC+0x2dc>
 8007470:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007474:	2b00      	cmp	r3, #0
 8007476:	d1ee      	bne.n	8007456 <CRYP_AES_CBC+0x2ba>

    if (busystatus != RESET)
 8007478:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800747c:	2b00      	cmp	r3, #0
 800747e:	d003      	beq.n	8007488 <CRYP_AES_CBC+0x2ec>
   {
       status = ERROR;
 8007480:	2300      	movs	r3, #0
 8007482:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 8007486:	e009      	b.n	800749c <CRYP_AES_CBC+0x300>
    }
    else
    {
      /* Crypto Init for decryption process */  
      AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8007488:	2304      	movs	r3, #4
 800748a:	647b      	str	r3, [r7, #68]	; 0x44
 800748c:	e006      	b.n	800749c <CRYP_AES_CBC+0x300>
    }
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 800748e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007492:	4618      	mov	r0, r3
 8007494:	f001 fe76 	bl	8009184 <CRYP_KeyInit>

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 8007498:	2300      	movs	r3, #0
 800749a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CBC;
 800749c:	2328      	movs	r3, #40	; 0x28
 800749e:	64bb      	str	r3, [r7, #72]	; 0x48
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 80074a0:	2380      	movs	r3, #128	; 0x80
 80074a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  CRYP_Init(&AES_CRYP_InitStructure);
 80074a4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80074a8:	4618      	mov	r0, r3
 80074aa:	f001 fe03 	bl	80090b4 <CRYP_Init>

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);
 80074ae:	f107 0314 	add.w	r3, r7, #20
 80074b2:	4618      	mov	r0, r3
 80074b4:	f001 feb4 	bl	8009220 <CRYP_IVInit>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 80074b8:	f001 ff00 	bl	80092bc <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 80074bc:	2001      	movs	r0, #1
 80074be:	f001 ff0b 	bl	80092d8 <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 80074c2:	f002 f8ed 	bl	80096a0 <CRYP_GetCmdStatus>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d101      	bne.n	80074d0 <CRYP_AES_CBC+0x334>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 80074cc:	2300      	movs	r3, #0
 80074ce:	e08b      	b.n	80075e8 <CRYP_AES_CBC+0x44c>
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80074d0:	2300      	movs	r3, #0
 80074d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80074d6:	e077      	b.n	80075c8 <CRYP_AES_CBC+0x42c>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80074d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4618      	mov	r0, r3
 80074e0:	f001 ff16 	bl	8009310 <CRYP_DataIn>
    inputaddr+=4;
 80074e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80074e8:	3304      	adds	r3, #4
 80074ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80074ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4618      	mov	r0, r3
 80074f6:	f001 ff0b 	bl	8009310 <CRYP_DataIn>
    inputaddr+=4;
 80074fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80074fe:	3304      	adds	r3, #4
 8007500:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8007504:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4618      	mov	r0, r3
 800750c:	f001 ff00 	bl	8009310 <CRYP_DataIn>
    inputaddr+=4;
 8007510:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007514:	3304      	adds	r3, #4
 8007516:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800751a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4618      	mov	r0, r3
 8007522:	f001 fef5 	bl	8009310 <CRYP_DataIn>
    inputaddr+=4;
 8007526:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800752a:	3304      	adds	r3, #4
 800752c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    /* Wait until the complete message has been processed */
    counter = 0;
 8007530:	2300      	movs	r3, #0
 8007532:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8007534:	2010      	movs	r0, #16
 8007536:	f002 f8cd 	bl	80096d4 <CRYP_GetFlagStatus>
 800753a:	4603      	mov	r3, r0
 800753c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      counter++;
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	3301      	adds	r3, #1
 8007544:	613b      	str	r3, [r7, #16]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800754c:	d003      	beq.n	8007556 <CRYP_AES_CBC+0x3ba>
 800754e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1ee      	bne.n	8007534 <CRYP_AES_CBC+0x398>

    if (busystatus != RESET)
 8007556:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800755a:	2b00      	cmp	r3, #0
 800755c:	d003      	beq.n	8007566 <CRYP_AES_CBC+0x3ca>
   {
       status = ERROR;
 800755e:	2300      	movs	r3, #0
 8007560:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 8007564:	e02b      	b.n	80075be <CRYP_AES_CBC+0x422>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8007566:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 800756a:	f001 fedf 	bl	800932c <CRYP_DataOut>
 800756e:	4603      	mov	r3, r0
 8007570:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8007572:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007576:	3304      	adds	r3, #4
 8007578:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800757c:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 8007580:	f001 fed4 	bl	800932c <CRYP_DataOut>
 8007584:	4603      	mov	r3, r0
 8007586:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8007588:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800758c:	3304      	adds	r3, #4
 800758e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8007592:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 8007596:	f001 fec9 	bl	800932c <CRYP_DataOut>
 800759a:	4603      	mov	r3, r0
 800759c:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800759e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80075a2:	3304      	adds	r3, #4
 80075a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80075a8:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 80075ac:	f001 febe 	bl	800932c <CRYP_DataOut>
 80075b0:	4603      	mov	r3, r0
 80075b2:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80075b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80075b8:	3304      	adds	r3, #4
 80075ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80075be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80075c2:	3310      	adds	r3, #16
 80075c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80075c8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80075cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d204      	bcs.n	80075de <CRYP_AES_CBC+0x442>
 80075d4:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f47f af7d 	bne.w	80074d8 <CRYP_AES_CBC+0x33c>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80075de:	2000      	movs	r0, #0
 80075e0:	f001 fe7a 	bl	80092d8 <CRYP_Cmd>

  return status;
 80075e4:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	37cc      	adds	r7, #204	; 0xcc
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd90      	pop	{r4, r7, pc}

080075f0 <CRYP_AES_CTR>:
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CTR(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key, 
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 80075f0:	b590      	push	{r4, r7, lr}
 80075f2:	b0b3      	sub	sp, #204	; 0xcc
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	60b9      	str	r1, [r7, #8]
 80075f8:	607a      	str	r2, [r7, #4]
 80075fa:	4602      	mov	r2, r0
 80075fc:	73fa      	strb	r2, [r7, #15]
 80075fe:	81bb      	strh	r3, [r7, #12]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8007600:	2300      	movs	r3, #0
 8007602:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 8007604:	2300      	movs	r3, #0
 8007606:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  ErrorStatus status = SUCCESS;
 800760a:	2301      	movs	r3, #1
 800760c:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
  uint32_t keyaddr    = (uint32_t)Key;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t inputaddr  = (uint32_t)Input;
 8007616:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800761a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  uint32_t outputaddr = (uint32_t)Output;
 800761e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007622:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t ivaddr     = (uint32_t)InitVectors;
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t i = 0;
 800762c:	2300      	movs	r3, #0
 800762e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8007632:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007636:	4618      	mov	r0, r3
 8007638:	f001 fdd0 	bl	80091dc <CRYP_KeyStructInit>

  switch(Keysize)
 800763c:	89bb      	ldrh	r3, [r7, #12]
 800763e:	2bc0      	cmp	r3, #192	; 0xc0
 8007640:	d03c      	beq.n	80076bc <CRYP_AES_CTR+0xcc>
 8007642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007646:	f000 808c 	beq.w	8007762 <CRYP_AES_CTR+0x172>
 800764a:	2b80      	cmp	r3, #128	; 0x80
 800764c:	d000      	beq.n	8007650 <CRYP_AES_CTR+0x60>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    default:
    break;
 800764e:	e0e9      	b.n	8007824 <CRYP_AES_CTR+0x234>
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);

  switch(Keysize)
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8007650:	2300      	movs	r3, #0
 8007652:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8007654:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800765e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007662:	ba1b      	rev	r3, r3
 8007664:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8007666:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800766a:	3304      	adds	r3, #4
 800766c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8007670:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800767a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800767e:	ba1b      	rev	r3, r3
 8007680:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8007682:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007686:	3304      	adds	r3, #4
 8007688:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 800768c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007696:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800769a:	ba1b      	rev	r3, r3
 800769c:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 800769e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80076a2:	3304      	adds	r3, #4
 80076a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80076a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80076b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076b6:	ba1b      	rev	r3, r3
 80076b8:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 80076ba:	e0b3      	b.n	8007824 <CRYP_AES_CTR+0x234>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 80076bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076c0:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80076c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80076cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076d0:	ba1b      	rev	r3, r3
 80076d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 80076d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80076d8:	3304      	adds	r3, #4
 80076da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80076de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80076e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80076ec:	ba1b      	rev	r3, r3
 80076ee:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 80076f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80076f4:	3304      	adds	r3, #4
 80076f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80076fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007704:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007708:	ba1b      	rev	r3, r3
 800770a:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 800770c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007710:	3304      	adds	r3, #4
 8007712:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8007716:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007720:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007724:	ba1b      	rev	r3, r3
 8007726:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8007728:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800772c:	3304      	adds	r3, #4
 800772e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8007732:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800773c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007740:	ba1b      	rev	r3, r3
 8007742:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8007744:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007748:	3304      	adds	r3, #4
 800774a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 800774e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007758:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800775c:	ba1b      	rev	r3, r3
 800775e:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8007760:	e060      	b.n	8007824 <CRYP_AES_CTR+0x234>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 8007762:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007766:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8007768:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007772:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007776:	ba1b      	rev	r3, r3
 8007778:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 800777a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800777e:	3304      	adds	r3, #4
 8007780:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8007784:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800778c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800778e:	ba1b      	rev	r3, r3
 8007790:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8007792:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007796:	3304      	adds	r3, #4
 8007798:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 800779c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80077a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077a6:	ba1b      	rev	r3, r3
 80077a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 80077aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80077ae:	3304      	adds	r3, #4
 80077b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80077b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	677b      	str	r3, [r7, #116]	; 0x74
 80077bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077be:	ba1b      	rev	r3, r3
 80077c0:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 80077c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80077c6:	3304      	adds	r3, #4
 80077c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80077cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	673b      	str	r3, [r7, #112]	; 0x70
 80077d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077d6:	ba1b      	rev	r3, r3
 80077d8:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 80077da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80077de:	3304      	adds	r3, #4
 80077e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80077e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077ee:	ba1b      	rev	r3, r3
 80077f0:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 80077f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80077f6:	3304      	adds	r3, #4
 80077f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80077fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	66bb      	str	r3, [r7, #104]	; 0x68
 8007804:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007806:	ba1b      	rev	r3, r3
 8007808:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 800780a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800780e:	3304      	adds	r3, #4
 8007810:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8007814:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	667b      	str	r3, [r7, #100]	; 0x64
 800781c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800781e:	ba1b      	rev	r3, r3
 8007820:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8007822:	bf00      	nop
    default:
    break;
  }
  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8007824:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	663b      	str	r3, [r7, #96]	; 0x60
 800782c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800782e:	ba1b      	rev	r3, r3
 8007830:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 8007832:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007836:	3304      	adds	r3, #4
 8007838:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 800783c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007844:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007846:	ba1b      	rev	r3, r3
 8007848:	61bb      	str	r3, [r7, #24]
  ivaddr+=4;
 800784a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800784e:	3304      	adds	r3, #4
 8007850:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 8007854:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	65bb      	str	r3, [r7, #88]	; 0x58
 800785c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800785e:	ba1b      	rev	r3, r3
 8007860:	61fb      	str	r3, [r7, #28]
  ivaddr+=4;
 8007862:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007866:	3304      	adds	r3, #4
 8007868:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 800786c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	657b      	str	r3, [r7, #84]	; 0x54
 8007874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007876:	ba1b      	rev	r3, r3
 8007878:	623b      	str	r3, [r7, #32]

  /* Key Initialisation */
  CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 800787a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800787e:	4618      	mov	r0, r3
 8007880:	f001 fc80 	bl	8009184 <CRYP_KeyInit>

  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 8007884:	7bfb      	ldrb	r3, [r7, #15]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d102      	bne.n	8007890 <CRYP_AES_CTR+0x2a0>
  {
    /* Crypto Init for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 800788a:	2304      	movs	r3, #4
 800788c:	647b      	str	r3, [r7, #68]	; 0x44
 800788e:	e001      	b.n	8007894 <CRYP_AES_CTR+0x2a4>
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {
    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8007890:	2300      	movs	r3, #0
 8007892:	647b      	str	r3, [r7, #68]	; 0x44
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CTR;
 8007894:	2330      	movs	r3, #48	; 0x30
 8007896:	64bb      	str	r3, [r7, #72]	; 0x48
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8007898:	2380      	movs	r3, #128	; 0x80
 800789a:	64fb      	str	r3, [r7, #76]	; 0x4c
  CRYP_Init(&AES_CRYP_InitStructure);
 800789c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80078a0:	4618      	mov	r0, r3
 80078a2:	f001 fc07 	bl	80090b4 <CRYP_Init>

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);
 80078a6:	f107 0314 	add.w	r3, r7, #20
 80078aa:	4618      	mov	r0, r3
 80078ac:	f001 fcb8 	bl	8009220 <CRYP_IVInit>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 80078b0:	f001 fd04 	bl	80092bc <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 80078b4:	2001      	movs	r0, #1
 80078b6:	f001 fd0f 	bl	80092d8 <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 80078ba:	f001 fef1 	bl	80096a0 <CRYP_GetCmdStatus>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d101      	bne.n	80078c8 <CRYP_AES_CTR+0x2d8>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 80078c4:	2300      	movs	r3, #0
 80078c6:	e08b      	b.n	80079e0 <CRYP_AES_CTR+0x3f0>
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80078c8:	2300      	movs	r3, #0
 80078ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80078ce:	e077      	b.n	80079c0 <CRYP_AES_CTR+0x3d0>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80078d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4618      	mov	r0, r3
 80078d8:	f001 fd1a 	bl	8009310 <CRYP_DataIn>
    inputaddr+=4;
 80078dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80078e0:	3304      	adds	r3, #4
 80078e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80078e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4618      	mov	r0, r3
 80078ee:	f001 fd0f 	bl	8009310 <CRYP_DataIn>
    inputaddr+=4;
 80078f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80078f6:	3304      	adds	r3, #4
 80078f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80078fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4618      	mov	r0, r3
 8007904:	f001 fd04 	bl	8009310 <CRYP_DataIn>
    inputaddr+=4;
 8007908:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800790c:	3304      	adds	r3, #4
 800790e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8007912:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4618      	mov	r0, r3
 800791a:	f001 fcf9 	bl	8009310 <CRYP_DataIn>
    inputaddr+=4;
 800791e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007922:	3304      	adds	r3, #4
 8007924:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    /* Wait until the complete message has been processed */
    counter = 0;
 8007928:	2300      	movs	r3, #0
 800792a:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 800792c:	2010      	movs	r0, #16
 800792e:	f001 fed1 	bl	80096d4 <CRYP_GetFlagStatus>
 8007932:	4603      	mov	r3, r0
 8007934:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      counter++;
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	3301      	adds	r3, #1
 800793c:	613b      	str	r3, [r7, #16]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007944:	d003      	beq.n	800794e <CRYP_AES_CTR+0x35e>
 8007946:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1ee      	bne.n	800792c <CRYP_AES_CTR+0x33c>

    if (busystatus != RESET)
 800794e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007952:	2b00      	cmp	r3, #0
 8007954:	d003      	beq.n	800795e <CRYP_AES_CTR+0x36e>
   {
       status = ERROR;
 8007956:	2300      	movs	r3, #0
 8007958:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 800795c:	e02b      	b.n	80079b6 <CRYP_AES_CTR+0x3c6>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800795e:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 8007962:	f001 fce3 	bl	800932c <CRYP_DataOut>
 8007966:	4603      	mov	r3, r0
 8007968:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800796a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800796e:	3304      	adds	r3, #4
 8007970:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8007974:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 8007978:	f001 fcd8 	bl	800932c <CRYP_DataOut>
 800797c:	4603      	mov	r3, r0
 800797e:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8007980:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007984:	3304      	adds	r3, #4
 8007986:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800798a:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 800798e:	f001 fccd 	bl	800932c <CRYP_DataOut>
 8007992:	4603      	mov	r3, r0
 8007994:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8007996:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800799a:	3304      	adds	r3, #4
 800799c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80079a0:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 80079a4:	f001 fcc2 	bl	800932c <CRYP_DataOut>
 80079a8:	4603      	mov	r3, r0
 80079aa:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80079ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80079b0:	3304      	adds	r3, #4
 80079b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80079b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80079ba:	3310      	adds	r3, #16
 80079bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80079c0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80079c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d204      	bcs.n	80079d6 <CRYP_AES_CTR+0x3e6>
 80079cc:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f47f af7d 	bne.w	80078d0 <CRYP_AES_CTR+0x2e0>
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
    }
  }
  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80079d6:	2000      	movs	r0, #0
 80079d8:	f001 fc7e 	bl	80092d8 <CRYP_Cmd>

  return status;
 80079dc:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	37cc      	adds	r7, #204	; 0xcc
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd90      	pop	{r4, r7, pc}

080079e8 <CRYP_AES_GCM>:
ErrorStatus CRYP_AES_GCM(uint8_t Mode, uint8_t InitVectors[16],
                         uint8_t *Key, uint16_t Keysize,
                         uint8_t *Input, uint32_t ILength,
                         uint8_t *Header, uint32_t HLength,
                         uint8_t *Output, uint8_t *AuthTAG)
{
 80079e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ec:	b0c5      	sub	sp, #276	; 0x114
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	f107 0610 	add.w	r6, r7, #16
 80079f4:	6031      	str	r1, [r6, #0]
 80079f6:	f107 010c 	add.w	r1, r7, #12
 80079fa:	600a      	str	r2, [r1, #0]
 80079fc:	4602      	mov	r2, r0
 80079fe:	75fa      	strb	r2, [r7, #23]
 8007a00:	82bb      	strh	r3, [r7, #20]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8007a02:	2300      	movs	r3, #0
 8007a04:	61fb      	str	r3, [r7, #28]
  uint32_t busystatus = 0;
 8007a06:	2300      	movs	r3, #0
 8007a08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  ErrorStatus status = SUCCESS;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  uint32_t keyaddr    = (uint32_t)Key;
 8007a12:	f107 030c 	add.w	r3, r7, #12
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  uint32_t inputaddr  = (uint32_t)Input;
 8007a1c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007a20:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  uint32_t outputaddr = (uint32_t)Output;
 8007a24:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8007a28:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  uint32_t ivaddr     = (uint32_t)InitVectors;
 8007a2c:	f107 0310 	add.w	r3, r7, #16
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  uint32_t headeraddr = (uint32_t)Header;
 8007a36:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007a3a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  uint32_t tagaddr = (uint32_t)AuthTAG;
 8007a3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007a42:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  uint64_t headerlength = HLength * 8;/* header length in bits */
 8007a46:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8007a4a:	00db      	lsls	r3, r3, #3
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	f04f 0300 	mov.w	r3, #0
 8007a52:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
  uint64_t inputlength = ILength * 8;/* input length in bits */
 8007a56:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8007a5a:	00db      	lsls	r3, r3, #3
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	f04f 0300 	mov.w	r3, #0
 8007a62:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
  uint32_t loopcounter = 0;
 8007a66:	2300      	movs	r3, #0
 8007a68:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8007a6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007a70:	4618      	mov	r0, r3
 8007a72:	f001 fbb3 	bl	80091dc <CRYP_KeyStructInit>

  switch(Keysize)
 8007a76:	8abb      	ldrh	r3, [r7, #20]
 8007a78:	2bc0      	cmp	r3, #192	; 0xc0
 8007a7a:	d03c      	beq.n	8007af6 <CRYP_AES_GCM+0x10e>
 8007a7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a80:	f000 808c 	beq.w	8007b9c <CRYP_AES_GCM+0x1b4>
 8007a84:	2b80      	cmp	r3, #128	; 0x80
 8007a86:	d000      	beq.n	8007a8a <CRYP_AES_GCM+0xa2>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    default:
    break;
 8007a88:	e0f7      	b.n	8007c7a <CRYP_AES_GCM+0x292>
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);

  switch(Keysize)
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	65fb      	str	r3, [r7, #92]	; 0x5c
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8007a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007a98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a9c:	ba1b      	rev	r3, r3
 8007a9e:	643b      	str	r3, [r7, #64]	; 0x40
    keyaddr+=4;
 8007aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aa4:	3304      	adds	r3, #4
 8007aa6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8007aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ab4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007ab8:	ba1b      	rev	r3, r3
 8007aba:	647b      	str	r3, [r7, #68]	; 0x44
    keyaddr+=4;
 8007abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ac0:	3304      	adds	r3, #4
 8007ac2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8007ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007ad0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007ad4:	ba1b      	rev	r3, r3
 8007ad6:	64bb      	str	r3, [r7, #72]	; 0x48
    keyaddr+=4;
 8007ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007adc:	3304      	adds	r3, #4
 8007ade:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8007ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007aec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007af0:	ba1b      	rev	r3, r3
 8007af2:	64fb      	str	r3, [r7, #76]	; 0x4c
    break;
 8007af4:	e0c1      	b.n	8007c7a <CRYP_AES_GCM+0x292>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 8007af6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007afa:	65fb      	str	r3, [r7, #92]	; 0x5c
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8007afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007b0a:	ba1b      	rev	r3, r3
 8007b0c:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8007b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b12:	3304      	adds	r3, #4
 8007b14:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8007b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007b26:	ba1b      	rev	r3, r3
 8007b28:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8007b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b2e:	3304      	adds	r3, #4
 8007b30:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8007b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007b3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007b42:	ba1b      	rev	r3, r3
 8007b44:	643b      	str	r3, [r7, #64]	; 0x40
    keyaddr+=4;
 8007b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b4a:	3304      	adds	r3, #4
 8007b4c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8007b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b5e:	ba1b      	rev	r3, r3
 8007b60:	647b      	str	r3, [r7, #68]	; 0x44
    keyaddr+=4;
 8007b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b66:	3304      	adds	r3, #4
 8007b68:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8007b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007b7a:	ba1b      	rev	r3, r3
 8007b7c:	64bb      	str	r3, [r7, #72]	; 0x48
    keyaddr+=4;
 8007b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b82:	3304      	adds	r3, #4
 8007b84:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8007b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007b96:	ba1b      	rev	r3, r3
 8007b98:	64fb      	str	r3, [r7, #76]	; 0x4c
    break;
 8007b9a:	e06e      	b.n	8007c7a <CRYP_AES_GCM+0x292>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 8007b9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ba0:	65fb      	str	r3, [r7, #92]	; 0x5c
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8007ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007bac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007bb0:	ba1b      	rev	r3, r3
 8007bb2:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8007bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bb8:	3304      	adds	r3, #4
 8007bba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8007bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007bc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007bcc:	ba1b      	rev	r3, r3
 8007bce:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8007bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bd4:	3304      	adds	r3, #4
 8007bd6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8007bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007be4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007be8:	ba1b      	rev	r3, r3
 8007bea:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8007bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bf0:	3304      	adds	r3, #4
 8007bf2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8007bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007c00:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c04:	ba1b      	rev	r3, r3
 8007c06:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8007c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c0c:	3304      	adds	r3, #4
 8007c0e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8007c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007c1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c20:	ba1b      	rev	r3, r3
 8007c22:	643b      	str	r3, [r7, #64]	; 0x40
    keyaddr+=4;
 8007c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c28:	3304      	adds	r3, #4
 8007c2a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8007c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007c38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c3c:	ba1b      	rev	r3, r3
 8007c3e:	647b      	str	r3, [r7, #68]	; 0x44
    keyaddr+=4;
 8007c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c44:	3304      	adds	r3, #4
 8007c46:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8007c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007c54:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c58:	ba1b      	rev	r3, r3
 8007c5a:	64bb      	str	r3, [r7, #72]	; 0x48
    keyaddr+=4;
 8007c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c60:	3304      	adds	r3, #4
 8007c62:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8007c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c74:	ba1b      	rev	r3, r3
 8007c76:	64fb      	str	r3, [r7, #76]	; 0x4c
    break;
 8007c78:	bf00      	nop
    default:
    break;
  }
  
  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8007c7a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007c84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c88:	ba1b      	rev	r3, r3
 8007c8a:	623b      	str	r3, [r7, #32]
  ivaddr+=4;
 8007c8c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007c90:	3304      	adds	r3, #4
 8007c92:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8007c96:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007ca0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ca4:	ba1b      	rev	r3, r3
 8007ca6:	627b      	str	r3, [r7, #36]	; 0x24
  ivaddr+=4;
 8007ca8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007cac:	3304      	adds	r3, #4
 8007cae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 8007cb2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007cbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007cc0:	ba1b      	rev	r3, r3
 8007cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  ivaddr+=4;
 8007cc4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007cc8:	3304      	adds	r3, #4
 8007cca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 8007cce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007cd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007cdc:	ba1b      	rev	r3, r3
 8007cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /*------------------ AES Encryption ------------------*/
  if(Mode == MODE_ENCRYPT) /* AES encryption */
 8007ce0:	7dfb      	ldrb	r3, [r7, #23]
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	f040 81a9 	bne.w	800803a <CRYP_AES_GCM+0x652>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 8007ce8:	f001 fae8 	bl	80092bc <CRYP_FIFOFlush>
    
    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8007cec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f001 fa47 	bl	8009184 <CRYP_KeyInit>
    
    /* CRYP Initialization Vectors */
    CRYP_IVInit(&AES_CRYP_IVInitStructure);
 8007cf6:	f107 0320 	add.w	r3, r7, #32
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f001 fa90 	bl	8009220 <CRYP_IVInit>
    
    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8007d00:	2300      	movs	r3, #0
 8007d02:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_GCM;
 8007d04:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007d08:	657b      	str	r3, [r7, #84]	; 0x54
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8007d0a:	2380      	movs	r3, #128	; 0x80
 8007d0c:	65bb      	str	r3, [r7, #88]	; 0x58
    CRYP_Init(&AES_CRYP_InitStructure);
 8007d0e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007d12:	4618      	mov	r0, r3
 8007d14:	f001 f9ce 	bl	80090b4 <CRYP_Init>
    
    /***************************** Init phase *********************************/
    /* Select init phase */
    CRYP_PhaseConfig(CRYP_Phase_Init);
 8007d18:	2000      	movs	r0, #0
 8007d1a:	f001 fab3 	bl	8009284 <CRYP_PhaseConfig>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8007d1e:	2001      	movs	r0, #1
 8007d20:	f001 fada 	bl	80092d8 <CRYP_Cmd>
    
    /* Wait for CRYPEN bit to be 0 */
    while(CRYP_GetCmdStatus() == ENABLE)
 8007d24:	bf00      	nop
 8007d26:	f001 fcbb 	bl	80096a0 <CRYP_GetCmdStatus>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d0fa      	beq.n	8007d26 <CRYP_AES_GCM+0x33e>
    {
    }
    
    /***************************** header phase *******************************/
    if(HLength != 0)
 8007d30:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d069      	beq.n	8007e0c <CRYP_AES_GCM+0x424>
    {
      /* Select header phase */
      CRYP_PhaseConfig(CRYP_Phase_Header);
 8007d38:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007d3c:	f001 faa2 	bl	8009284 <CRYP_PhaseConfig>
      
      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 8007d40:	2001      	movs	r0, #1
 8007d42:	f001 fac9 	bl	80092d8 <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 8007d46:	f001 fcab 	bl	80096a0 <CRYP_GetCmdStatus>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d101      	bne.n	8007d54 <CRYP_AES_GCM+0x36c>
      {
         /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
            the CRYP peripheral (please check the device sales type. */
         return(ERROR);
 8007d50:	2300      	movs	r3, #0
 8007d52:	e31d      	b.n	8008390 <CRYP_AES_GCM+0x9a8>
      }
      
      for(loopcounter = 0; (loopcounter < HLength); loopcounter+=16)
 8007d54:	2300      	movs	r3, #0
 8007d56:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007d5a:	e037      	b.n	8007dcc <CRYP_AES_GCM+0x3e4>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 8007d5c:	bf00      	nop
 8007d5e:	2001      	movs	r0, #1
 8007d60:	f001 fcb8 	bl	80096d4 <CRYP_GetFlagStatus>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d0f9      	beq.n	8007d5e <CRYP_AES_GCM+0x376>
        {
        }
        
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8007d6a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4618      	mov	r0, r3
 8007d72:	f001 facd 	bl	8009310 <CRYP_DataIn>
        headeraddr+=4;
 8007d76:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d7a:	3304      	adds	r3, #4
 8007d7c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8007d80:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4618      	mov	r0, r3
 8007d88:	f001 fac2 	bl	8009310 <CRYP_DataIn>
        headeraddr+=4;
 8007d8c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d90:	3304      	adds	r3, #4
 8007d92:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8007d96:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f001 fab7 	bl	8009310 <CRYP_DataIn>
        headeraddr+=4;
 8007da2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007da6:	3304      	adds	r3, #4
 8007da8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8007dac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4618      	mov	r0, r3
 8007db4:	f001 faac 	bl	8009310 <CRYP_DataIn>
        headeraddr+=4;
 8007db8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007dbc:	3304      	adds	r3, #4
 8007dbe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
         /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
            the CRYP peripheral (please check the device sales type. */
         return(ERROR);
      }
      
      for(loopcounter = 0; (loopcounter < HLength); loopcounter+=16)
 8007dc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007dc6:	3310      	adds	r3, #16
 8007dc8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007dcc:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8007dd0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d3c1      	bcc.n	8007d5c <CRYP_AES_GCM+0x374>
        CRYP_DataIn(*(uint32_t*)(headeraddr));
        headeraddr+=4;
      }
      
      /* Wait until the complete message has been processed */
      counter = 0;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	61fb      	str	r3, [r7, #28]
      do
      {
        busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8007ddc:	2010      	movs	r0, #16
 8007dde:	f001 fc79 	bl	80096d4 <CRYP_GetFlagStatus>
 8007de2:	4603      	mov	r3, r0
 8007de4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
        counter++;
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	3301      	adds	r3, #1
 8007dec:	61fb      	str	r3, [r7, #28]
      }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007df4:	d003      	beq.n	8007dfe <CRYP_AES_GCM+0x416>
 8007df6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1ee      	bne.n	8007ddc <CRYP_AES_GCM+0x3f4>

      if (busystatus != RESET)
 8007dfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d002      	beq.n	8007e0c <CRYP_AES_GCM+0x424>
      {
        status = ERROR;
 8007e06:	2300      	movs	r3, #0
 8007e08:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
      }
    }
    
    /**************************** payload phase *******************************/
    if(ILength != 0)
 8007e0c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	f000 80a3 	beq.w	8007f5c <CRYP_AES_GCM+0x574>
    {
      /* Select payload phase */
      CRYP_PhaseConfig(CRYP_Phase_Payload);
 8007e16:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8007e1a:	f001 fa33 	bl	8009284 <CRYP_PhaseConfig>
      
      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 8007e1e:	2001      	movs	r0, #1
 8007e20:	f001 fa5a 	bl	80092d8 <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 8007e24:	f001 fc3c 	bl	80096a0 <CRYP_GetCmdStatus>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d101      	bne.n	8007e32 <CRYP_AES_GCM+0x44a>
      {
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
 8007e2e:	2300      	movs	r3, #0
 8007e30:	e2ae      	b.n	8008390 <CRYP_AES_GCM+0x9a8>
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 8007e32:	2300      	movs	r3, #0
 8007e34:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007e38:	e085      	b.n	8007f46 <CRYP_AES_GCM+0x55e>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 8007e3a:	bf00      	nop
 8007e3c:	2001      	movs	r0, #1
 8007e3e:	f001 fc49 	bl	80096d4 <CRYP_GetFlagStatus>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d0f9      	beq.n	8007e3c <CRYP_AES_GCM+0x454>
        {
        }
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8007e48:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f001 fa5e 	bl	8009310 <CRYP_DataIn>
        inputaddr+=4;
 8007e54:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e58:	3304      	adds	r3, #4
 8007e5a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8007e5e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4618      	mov	r0, r3
 8007e66:	f001 fa53 	bl	8009310 <CRYP_DataIn>
        inputaddr+=4;
 8007e6a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e6e:	3304      	adds	r3, #4
 8007e70:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8007e74:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f001 fa48 	bl	8009310 <CRYP_DataIn>
        inputaddr+=4;
 8007e80:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e84:	3304      	adds	r3, #4
 8007e86:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8007e8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4618      	mov	r0, r3
 8007e92:	f001 fa3d 	bl	8009310 <CRYP_DataIn>
        inputaddr+=4;
 8007e96:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e9a:	3304      	adds	r3, #4
 8007e9c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        
        /* Wait until the complete message has been processed */
        counter = 0;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	61fb      	str	r3, [r7, #28]
        do
        {
          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8007ea4:	2010      	movs	r0, #16
 8007ea6:	f001 fc15 	bl	80096d4 <CRYP_GetFlagStatus>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
          counter++;
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	61fb      	str	r3, [r7, #28]
        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ebc:	d003      	beq.n	8007ec6 <CRYP_AES_GCM+0x4de>
 8007ebe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d1ee      	bne.n	8007ea4 <CRYP_AES_GCM+0x4bc>

        if (busystatus != RESET)
 8007ec6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d003      	beq.n	8007ed6 <CRYP_AES_GCM+0x4ee>
        {
          status = ERROR;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8007ed4:	e032      	b.n	8007f3c <CRYP_AES_GCM+0x554>
        }
        else
        {
          /* Wait until the OFNE flag is reset */
          while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 8007ed6:	bf00      	nop
 8007ed8:	2004      	movs	r0, #4
 8007eda:	f001 fbfb 	bl	80096d4 <CRYP_GetFlagStatus>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d0f9      	beq.n	8007ed8 <CRYP_AES_GCM+0x4f0>
          {
          }
          
          /* Read the Output block from the Output FIFO */
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8007ee4:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8007ee8:	f001 fa20 	bl	800932c <CRYP_DataOut>
 8007eec:	4603      	mov	r3, r0
 8007eee:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8007ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ef4:	3304      	adds	r3, #4
 8007ef6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8007efa:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8007efe:	f001 fa15 	bl	800932c <CRYP_DataOut>
 8007f02:	4603      	mov	r3, r0
 8007f04:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8007f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f0a:	3304      	adds	r3, #4
 8007f0c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8007f10:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8007f14:	f001 fa0a 	bl	800932c <CRYP_DataOut>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8007f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f20:	3304      	adds	r3, #4
 8007f22:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8007f26:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8007f2a:	f001 f9ff 	bl	800932c <CRYP_DataOut>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8007f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f36:	3304      	adds	r3, #4
 8007f38:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 8007f3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f40:	3310      	adds	r3, #16
 8007f42:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007f46:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8007f4a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d204      	bcs.n	8007f5c <CRYP_AES_GCM+0x574>
 8007f52:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	f47f af6f 	bne.w	8007e3a <CRYP_AES_GCM+0x452>
      }
    }
    
    /***************************** final phase ********************************/
    /* Select final phase */
    CRYP_PhaseConfig(CRYP_Phase_Final);
 8007f5c:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8007f60:	f001 f990 	bl	8009284 <CRYP_PhaseConfig>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8007f64:	2001      	movs	r0, #1
 8007f66:	f001 f9b7 	bl	80092d8 <CRYP_Cmd>
    
    if(CRYP_GetCmdStatus() == DISABLE)
 8007f6a:	f001 fb99 	bl	80096a0 <CRYP_GetCmdStatus>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d101      	bne.n	8007f78 <CRYP_AES_GCM+0x590>
    {
      /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
         the CRYP peripheral (please check the device sales type. */
      return(ERROR);
 8007f74:	2300      	movs	r3, #0
 8007f76:	e20b      	b.n	8008390 <CRYP_AES_GCM+0x9a8>
    }
    
    /* Write number of bits concatenated with header in the IN FIFO */
    CRYP_DataIn(__REV(headerlength>>32));
 8007f78:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8007f7c:	0019      	movs	r1, r3
 8007f7e:	6039      	str	r1, [r7, #0]
 8007f80:	2300      	movs	r3, #0
 8007f82:	607b      	str	r3, [r7, #4]
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007f88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007f8a:	ba1b      	rev	r3, r3
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f001 f9bf 	bl	8009310 <CRYP_DataIn>
    CRYP_DataIn(__REV(headerlength));
 8007f92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f96:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f9a:	ba1b      	rev	r3, r3
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f001 f9b7 	bl	8009310 <CRYP_DataIn>
    CRYP_DataIn(__REV(inputlength>>32));
 8007fa2:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8007fa6:	469a      	mov	sl, r3
 8007fa8:	f04f 0b00 	mov.w	fp, #0
 8007fac:	4653      	mov	r3, sl
 8007fae:	677b      	str	r3, [r7, #116]	; 0x74
 8007fb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fb2:	ba1b      	rev	r3, r3
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f001 f9ab 	bl	8009310 <CRYP_DataIn>
    CRYP_DataIn(__REV(inputlength));
 8007fba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007fbe:	673b      	str	r3, [r7, #112]	; 0x70
 8007fc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fc2:	ba1b      	rev	r3, r3
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f001 f9a3 	bl	8009310 <CRYP_DataIn>
    /* Wait until the OFNE flag is reset */
    while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 8007fca:	bf00      	nop
 8007fcc:	2004      	movs	r0, #4
 8007fce:	f001 fb81 	bl	80096d4 <CRYP_GetFlagStatus>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d0f9      	beq.n	8007fcc <CRYP_AES_GCM+0x5e4>
    {
    }
    
    tagaddr = (uint32_t)AuthTAG;
 8007fd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007fdc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    /* Read the Auth TAG in the IN FIFO */
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8007fe0:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8007fe4:	f001 f9a2 	bl	800932c <CRYP_DataOut>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 8007fec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007ff0:	3304      	adds	r3, #4
 8007ff2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8007ff6:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8007ffa:	f001 f997 	bl	800932c <CRYP_DataOut>
 8007ffe:	4603      	mov	r3, r0
 8008000:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 8008002:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008006:	3304      	adds	r3, #4
 8008008:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 800800c:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8008010:	f001 f98c 	bl	800932c <CRYP_DataOut>
 8008014:	4603      	mov	r3, r0
 8008016:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 8008018:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800801c:	3304      	adds	r3, #4
 800801e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8008022:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8008026:	f001 f981 	bl	800932c <CRYP_DataOut>
 800802a:	4603      	mov	r3, r0
 800802c:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 800802e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008032:	3304      	adds	r3, #4
 8008034:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008038:	e1a5      	b.n	8008386 <CRYP_AES_GCM+0x99e>
  }
  /*------------------ AES Decryption ------------------*/
  else /* AES decryption */
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 800803a:	f001 f93f 	bl	80092bc <CRYP_FIFOFlush>
    
    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 800803e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008042:	4618      	mov	r0, r3
 8008044:	f001 f89e 	bl	8009184 <CRYP_KeyInit>
    
    /* CRYP Initialization Vectors */
    CRYP_IVInit(&AES_CRYP_IVInitStructure);
 8008048:	f107 0320 	add.w	r3, r7, #32
 800804c:	4618      	mov	r0, r3
 800804e:	f001 f8e7 	bl	8009220 <CRYP_IVInit>
    
    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8008052:	2304      	movs	r3, #4
 8008054:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_GCM;
 8008056:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800805a:	657b      	str	r3, [r7, #84]	; 0x54
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 800805c:	2380      	movs	r3, #128	; 0x80
 800805e:	65bb      	str	r3, [r7, #88]	; 0x58
    CRYP_Init(&AES_CRYP_InitStructure);
 8008060:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008064:	4618      	mov	r0, r3
 8008066:	f001 f825 	bl	80090b4 <CRYP_Init>
    
    /***************************** Init phase *********************************/
    /* Select init phase */
    CRYP_PhaseConfig(CRYP_Phase_Init);
 800806a:	2000      	movs	r0, #0
 800806c:	f001 f90a 	bl	8009284 <CRYP_PhaseConfig>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8008070:	2001      	movs	r0, #1
 8008072:	f001 f931 	bl	80092d8 <CRYP_Cmd>
    
    /* Wait for CRYPEN bit to be 0 */
    while(CRYP_GetCmdStatus() == ENABLE)
 8008076:	bf00      	nop
 8008078:	f001 fb12 	bl	80096a0 <CRYP_GetCmdStatus>
 800807c:	4603      	mov	r3, r0
 800807e:	2b01      	cmp	r3, #1
 8008080:	d0fa      	beq.n	8008078 <CRYP_AES_GCM+0x690>
    {
    }
    
    /***************************** header phase *******************************/
    if(HLength != 0)
 8008082:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008086:	2b00      	cmp	r3, #0
 8008088:	d069      	beq.n	800815e <CRYP_AES_GCM+0x776>
    {
      /* Select header phase */
      CRYP_PhaseConfig(CRYP_Phase_Header);
 800808a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800808e:	f001 f8f9 	bl	8009284 <CRYP_PhaseConfig>
      
      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 8008092:	2001      	movs	r0, #1
 8008094:	f001 f920 	bl	80092d8 <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 8008098:	f001 fb02 	bl	80096a0 <CRYP_GetCmdStatus>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d101      	bne.n	80080a6 <CRYP_AES_GCM+0x6be>
      {
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
 80080a2:	2300      	movs	r3, #0
 80080a4:	e174      	b.n	8008390 <CRYP_AES_GCM+0x9a8>
      }
      
      for(loopcounter = 0; (loopcounter < HLength); loopcounter+=16)
 80080a6:	2300      	movs	r3, #0
 80080a8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80080ac:	e037      	b.n	800811e <CRYP_AES_GCM+0x736>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 80080ae:	bf00      	nop
 80080b0:	2001      	movs	r0, #1
 80080b2:	f001 fb0f 	bl	80096d4 <CRYP_GetFlagStatus>
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d0f9      	beq.n	80080b0 <CRYP_AES_GCM+0x6c8>
        {
        }
        
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 80080bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4618      	mov	r0, r3
 80080c4:	f001 f924 	bl	8009310 <CRYP_DataIn>
        headeraddr+=4;
 80080c8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80080cc:	3304      	adds	r3, #4
 80080ce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 80080d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4618      	mov	r0, r3
 80080da:	f001 f919 	bl	8009310 <CRYP_DataIn>
        headeraddr+=4;
 80080de:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80080e2:	3304      	adds	r3, #4
 80080e4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 80080e8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4618      	mov	r0, r3
 80080f0:	f001 f90e 	bl	8009310 <CRYP_DataIn>
        headeraddr+=4;
 80080f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80080f8:	3304      	adds	r3, #4
 80080fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 80080fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4618      	mov	r0, r3
 8008106:	f001 f903 	bl	8009310 <CRYP_DataIn>
        headeraddr+=4;
 800810a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800810e:	3304      	adds	r3, #4
 8008110:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
      }
      
      for(loopcounter = 0; (loopcounter < HLength); loopcounter+=16)
 8008114:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008118:	3310      	adds	r3, #16
 800811a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800811e:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8008122:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008126:	429a      	cmp	r2, r3
 8008128:	d3c1      	bcc.n	80080ae <CRYP_AES_GCM+0x6c6>
        CRYP_DataIn(*(uint32_t*)(headeraddr));
        headeraddr+=4;
      }
      
      /* Wait until the complete message has been processed */
      counter = 0;
 800812a:	2300      	movs	r3, #0
 800812c:	61fb      	str	r3, [r7, #28]
      do
      {
        busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 800812e:	2010      	movs	r0, #16
 8008130:	f001 fad0 	bl	80096d4 <CRYP_GetFlagStatus>
 8008134:	4603      	mov	r3, r0
 8008136:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
        counter++;
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	3301      	adds	r3, #1
 800813e:	61fb      	str	r3, [r7, #28]
      }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008146:	d003      	beq.n	8008150 <CRYP_AES_GCM+0x768>
 8008148:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800814c:	2b00      	cmp	r3, #0
 800814e:	d1ee      	bne.n	800812e <CRYP_AES_GCM+0x746>

      if (busystatus != RESET)
 8008150:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008154:	2b00      	cmp	r3, #0
 8008156:	d002      	beq.n	800815e <CRYP_AES_GCM+0x776>
      {
        status = ERROR;
 8008158:	2300      	movs	r3, #0
 800815a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
      }
    }
    
    /**************************** payload phase *******************************/
    if(ILength != 0)
 800815e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8008162:	2b00      	cmp	r3, #0
 8008164:	f000 80a3 	beq.w	80082ae <CRYP_AES_GCM+0x8c6>
    {
      /* Select payload phase */
      CRYP_PhaseConfig(CRYP_Phase_Payload);
 8008168:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800816c:	f001 f88a 	bl	8009284 <CRYP_PhaseConfig>

      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 8008170:	2001      	movs	r0, #1
 8008172:	f001 f8b1 	bl	80092d8 <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 8008176:	f001 fa93 	bl	80096a0 <CRYP_GetCmdStatus>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d101      	bne.n	8008184 <CRYP_AES_GCM+0x79c>
      {
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
 8008180:	2300      	movs	r3, #0
 8008182:	e105      	b.n	8008390 <CRYP_AES_GCM+0x9a8>
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 8008184:	2300      	movs	r3, #0
 8008186:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800818a:	e085      	b.n	8008298 <CRYP_AES_GCM+0x8b0>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 800818c:	bf00      	nop
 800818e:	2001      	movs	r0, #1
 8008190:	f001 faa0 	bl	80096d4 <CRYP_GetFlagStatus>
 8008194:	4603      	mov	r3, r0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d0f9      	beq.n	800818e <CRYP_AES_GCM+0x7a6>
        {
        }
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 800819a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4618      	mov	r0, r3
 80081a2:	f001 f8b5 	bl	8009310 <CRYP_DataIn>
        inputaddr+=4;
 80081a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80081aa:	3304      	adds	r3, #4
 80081ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 80081b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4618      	mov	r0, r3
 80081b8:	f001 f8aa 	bl	8009310 <CRYP_DataIn>
        inputaddr+=4;
 80081bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80081c0:	3304      	adds	r3, #4
 80081c2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 80081c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4618      	mov	r0, r3
 80081ce:	f001 f89f 	bl	8009310 <CRYP_DataIn>
        inputaddr+=4;
 80081d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80081d6:	3304      	adds	r3, #4
 80081d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 80081dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4618      	mov	r0, r3
 80081e4:	f001 f894 	bl	8009310 <CRYP_DataIn>
        inputaddr+=4;
 80081e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80081ec:	3304      	adds	r3, #4
 80081ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        
        /* Wait until the complete message has been processed */
        counter = 0;
 80081f2:	2300      	movs	r3, #0
 80081f4:	61fb      	str	r3, [r7, #28]
        do
        {
          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80081f6:	2010      	movs	r0, #16
 80081f8:	f001 fa6c 	bl	80096d4 <CRYP_GetFlagStatus>
 80081fc:	4603      	mov	r3, r0
 80081fe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
          counter++;
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	3301      	adds	r3, #1
 8008206:	61fb      	str	r3, [r7, #28]
        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800820e:	d003      	beq.n	8008218 <CRYP_AES_GCM+0x830>
 8008210:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008214:	2b00      	cmp	r3, #0
 8008216:	d1ee      	bne.n	80081f6 <CRYP_AES_GCM+0x80e>

        if (busystatus != RESET)
 8008218:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800821c:	2b00      	cmp	r3, #0
 800821e:	d003      	beq.n	8008228 <CRYP_AES_GCM+0x840>
        {
          status = ERROR;
 8008220:	2300      	movs	r3, #0
 8008222:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8008226:	e032      	b.n	800828e <CRYP_AES_GCM+0x8a6>
        }
        else
        {
          /* Wait until the OFNE flag is reset */
          while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 8008228:	bf00      	nop
 800822a:	2004      	movs	r0, #4
 800822c:	f001 fa52 	bl	80096d4 <CRYP_GetFlagStatus>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d0f9      	beq.n	800822a <CRYP_AES_GCM+0x842>
          {
          }
          
          /* Read the Output block from the Output FIFO */
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008236:	f8d7 6104 	ldr.w	r6, [r7, #260]	; 0x104
 800823a:	f001 f877 	bl	800932c <CRYP_DataOut>
 800823e:	4603      	mov	r3, r0
 8008240:	6033      	str	r3, [r6, #0]
          outputaddr+=4;
 8008242:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008246:	3304      	adds	r3, #4
 8008248:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800824c:	f8d7 6104 	ldr.w	r6, [r7, #260]	; 0x104
 8008250:	f001 f86c 	bl	800932c <CRYP_DataOut>
 8008254:	4603      	mov	r3, r0
 8008256:	6033      	str	r3, [r6, #0]
          outputaddr+=4;
 8008258:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800825c:	3304      	adds	r3, #4
 800825e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008262:	f8d7 6104 	ldr.w	r6, [r7, #260]	; 0x104
 8008266:	f001 f861 	bl	800932c <CRYP_DataOut>
 800826a:	4603      	mov	r3, r0
 800826c:	6033      	str	r3, [r6, #0]
          outputaddr+=4;
 800826e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008272:	3304      	adds	r3, #4
 8008274:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008278:	f8d7 6104 	ldr.w	r6, [r7, #260]	; 0x104
 800827c:	f001 f856 	bl	800932c <CRYP_DataOut>
 8008280:	4603      	mov	r3, r0
 8008282:	6033      	str	r3, [r6, #0]
          outputaddr+=4;
 8008284:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008288:	3304      	adds	r3, #4
 800828a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 800828e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008292:	3310      	adds	r3, #16
 8008294:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008298:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800829c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d204      	bcs.n	80082ae <CRYP_AES_GCM+0x8c6>
 80082a4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f47f af6f 	bne.w	800818c <CRYP_AES_GCM+0x7a4>
      }
    }
    
    /***************************** final phase ********************************/
    /* Select final phase */
    CRYP_PhaseConfig(CRYP_Phase_Final);
 80082ae:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80082b2:	f000 ffe7 	bl	8009284 <CRYP_PhaseConfig>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 80082b6:	2001      	movs	r0, #1
 80082b8:	f001 f80e 	bl	80092d8 <CRYP_Cmd>
    
    if(CRYP_GetCmdStatus() == DISABLE)
 80082bc:	f001 f9f0 	bl	80096a0 <CRYP_GetCmdStatus>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d101      	bne.n	80082ca <CRYP_AES_GCM+0x8e2>
    {
      /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
         the CRYP peripheral (please check the device sales type. */
      return(ERROR);
 80082c6:	2300      	movs	r3, #0
 80082c8:	e062      	b.n	8008390 <CRYP_AES_GCM+0x9a8>
    }
    
    /* Write number of bits concatenated with header in the IN FIFO */
    CRYP_DataIn(__REV(headerlength>>32));
 80082ca:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80082ce:	4698      	mov	r8, r3
 80082d0:	f04f 0900 	mov.w	r9, #0
 80082d4:	4643      	mov	r3, r8
 80082d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082da:	ba1b      	rev	r3, r3
 80082dc:	4618      	mov	r0, r3
 80082de:	f001 f817 	bl	8009310 <CRYP_DataIn>
    CRYP_DataIn(__REV(headerlength));
 80082e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80082e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80082ea:	ba1b      	rev	r3, r3
 80082ec:	4618      	mov	r0, r3
 80082ee:	f001 f80f 	bl	8009310 <CRYP_DataIn>
    CRYP_DataIn(__REV(inputlength>>32));
 80082f2:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80082f6:	001c      	movs	r4, r3
 80082f8:	2500      	movs	r5, #0
 80082fa:	4623      	mov	r3, r4
 80082fc:	667b      	str	r3, [r7, #100]	; 0x64
 80082fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008300:	ba1b      	rev	r3, r3
 8008302:	4618      	mov	r0, r3
 8008304:	f001 f804 	bl	8009310 <CRYP_DataIn>
    CRYP_DataIn(__REV(inputlength));
 8008308:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800830c:	663b      	str	r3, [r7, #96]	; 0x60
 800830e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008310:	ba1b      	rev	r3, r3
 8008312:	4618      	mov	r0, r3
 8008314:	f000 fffc 	bl	8009310 <CRYP_DataIn>
    /* Wait until the OFNE flag is reset */
    while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 8008318:	bf00      	nop
 800831a:	2004      	movs	r0, #4
 800831c:	f001 f9da 	bl	80096d4 <CRYP_GetFlagStatus>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d0f9      	beq.n	800831a <CRYP_AES_GCM+0x932>
    {
    }
    
    tagaddr = (uint32_t)AuthTAG;
 8008326:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800832a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    /* Read the Auth TAG in the IN FIFO */
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 800832e:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8008332:	f000 fffb 	bl	800932c <CRYP_DataOut>
 8008336:	4603      	mov	r3, r0
 8008338:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 800833a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800833e:	3304      	adds	r3, #4
 8008340:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8008344:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8008348:	f000 fff0 	bl	800932c <CRYP_DataOut>
 800834c:	4603      	mov	r3, r0
 800834e:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 8008350:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008354:	3304      	adds	r3, #4
 8008356:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 800835a:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 800835e:	f000 ffe5 	bl	800932c <CRYP_DataOut>
 8008362:	4603      	mov	r3, r0
 8008364:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 8008366:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800836a:	3304      	adds	r3, #4
 800836c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8008370:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8008374:	f000 ffda 	bl	800932c <CRYP_DataOut>
 8008378:	4603      	mov	r3, r0
 800837a:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 800837c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008380:	3304      	adds	r3, #4
 8008382:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  }
  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8008386:	2000      	movs	r0, #0
 8008388:	f000 ffa6 	bl	80092d8 <CRYP_Cmd>

  return status;
 800838c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
}
 8008390:	4618      	mov	r0, r3
 8008392:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8008396:	46bd      	mov	sp, r7
 8008398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800839c <CRYP_AES_CCM>:
                         uint8_t *Key, uint16_t Keysize,
                         uint8_t *Input, uint32_t ILength,
                         uint8_t *Header, uint32_t HLength, uint8_t *HBuffer,
                         uint8_t *Output,
                         uint8_t *AuthTAG, uint32_t TAGSize)
{
 800839c:	b590      	push	{r4, r7, lr}
 800839e:	b0c5      	sub	sp, #276	; 0x114
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	f107 0408 	add.w	r4, r7, #8
 80083a6:	6021      	str	r1, [r4, #0]
 80083a8:	1d39      	adds	r1, r7, #4
 80083aa:	600a      	str	r2, [r1, #0]
 80083ac:	463a      	mov	r2, r7
 80083ae:	6013      	str	r3, [r2, #0]
 80083b0:	f107 030f 	add.w	r3, r7, #15
 80083b4:	4602      	mov	r2, r0
 80083b6:	701a      	strb	r2, [r3, #0]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 80083b8:	2300      	movs	r3, #0
 80083ba:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t busystatus = 0;
 80083bc:	2300      	movs	r3, #0
 80083be:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  ErrorStatus status = SUCCESS;
 80083c2:	2301      	movs	r3, #1
 80083c4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  uint32_t keyaddr    = (uint32_t)Key;
 80083c8:	463b      	mov	r3, r7
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  uint32_t inputaddr  = (uint32_t)Input;
 80083d0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80083d4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  uint32_t outputaddr = (uint32_t)Output;
 80083d8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80083dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  uint32_t headeraddr = (uint32_t)Header;
 80083e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083e4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  uint32_t tagaddr = (uint32_t)AuthTAG;
 80083e8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80083ec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  uint32_t headersize = HLength;
 80083f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80083f4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  uint32_t loopcounter = 0;
 80083f8:	2300      	movs	r3, #0
 80083fa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  uint32_t bufferidx = 0;
 80083fe:	2300      	movs	r3, #0
 8008400:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  uint8_t blockb0[16] = {0};/* Block B0 */
 8008404:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008408:	2200      	movs	r2, #0
 800840a:	601a      	str	r2, [r3, #0]
 800840c:	3304      	adds	r3, #4
 800840e:	2200      	movs	r2, #0
 8008410:	601a      	str	r2, [r3, #0]
 8008412:	3304      	adds	r3, #4
 8008414:	2200      	movs	r2, #0
 8008416:	601a      	str	r2, [r3, #0]
 8008418:	3304      	adds	r3, #4
 800841a:	2200      	movs	r2, #0
 800841c:	601a      	str	r2, [r3, #0]
 800841e:	3304      	adds	r3, #4
  uint8_t ctr[16] = {0}; /* Counter */
 8008420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008424:	2200      	movs	r2, #0
 8008426:	601a      	str	r2, [r3, #0]
 8008428:	3304      	adds	r3, #4
 800842a:	2200      	movs	r2, #0
 800842c:	601a      	str	r2, [r3, #0]
 800842e:	3304      	adds	r3, #4
 8008430:	2200      	movs	r2, #0
 8008432:	601a      	str	r2, [r3, #0]
 8008434:	3304      	adds	r3, #4
 8008436:	2200      	movs	r2, #0
 8008438:	601a      	str	r2, [r3, #0]
 800843a:	3304      	adds	r3, #4
  uint32_t temptag[4] = {0}; /* temporary TAG (MAC) */
 800843c:	f107 0314 	add.w	r3, r7, #20
 8008440:	2200      	movs	r2, #0
 8008442:	601a      	str	r2, [r3, #0]
 8008444:	3304      	adds	r3, #4
 8008446:	2200      	movs	r2, #0
 8008448:	601a      	str	r2, [r3, #0]
 800844a:	3304      	adds	r3, #4
 800844c:	2200      	movs	r2, #0
 800844e:	601a      	str	r2, [r3, #0]
 8008450:	3304      	adds	r3, #4
 8008452:	2200      	movs	r2, #0
 8008454:	601a      	str	r2, [r3, #0]
 8008456:	3304      	adds	r3, #4
  uint32_t ctraddr = (uint32_t)ctr;
 8008458:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800845c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t b0addr = (uint32_t)blockb0;
 8008460:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008464:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  
  /************************ Formatting the header block ***********************/
  if(headersize != 0)
 8008468:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800846c:	2b00      	cmp	r3, #0
 800846e:	f000 80b0 	beq.w	80085d2 <CRYP_AES_CCM+0x236>
  {
    /* Check that the associated data (or header) length is lower than 2^16 - 2^8 = 65536 - 256 = 65280 */
    if(headersize < 65280)
 8008472:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008476:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800847a:	d21e      	bcs.n	80084ba <CRYP_AES_CCM+0x11e>
    {
      HBuffer[bufferidx++] = (uint8_t) ((headersize >> 8) & 0xFF);
 800847c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008480:	1c5a      	adds	r2, r3, #1
 8008482:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8008486:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800848a:	4413      	add	r3, r2
 800848c:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8008490:	0a12      	lsrs	r2, r2, #8
 8008492:	b2d2      	uxtb	r2, r2
 8008494:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = (uint8_t) ((headersize) & 0xFF);
 8008496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800849a:	1c5a      	adds	r2, r3, #1
 800849c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80084a0:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80084a4:	4413      	add	r3, r2
 80084a6:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80084aa:	b2d2      	uxtb	r2, r2
 80084ac:	701a      	strb	r2, [r3, #0]
      headersize += 2;
 80084ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084b2:	3302      	adds	r3, #2
 80084b4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80084b8:	e042      	b.n	8008540 <CRYP_AES_CCM+0x1a4>
    }
    else
    {
      /* header is encoded as 0xff || 0xfe || [headersize]32, i.e., six octets */
      HBuffer[bufferidx++] = 0xFF;
 80084ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084be:	1c5a      	adds	r2, r3, #1
 80084c0:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80084c4:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80084c8:	4413      	add	r3, r2
 80084ca:	22ff      	movs	r2, #255	; 0xff
 80084cc:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = 0xFE;
 80084ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084d2:	1c5a      	adds	r2, r3, #1
 80084d4:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80084d8:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80084dc:	4413      	add	r3, r2
 80084de:	22fe      	movs	r2, #254	; 0xfe
 80084e0:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = headersize & 0xff000000;
 80084e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084e6:	1c5a      	adds	r2, r3, #1
 80084e8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80084ec:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80084f0:	4413      	add	r3, r2
 80084f2:	2200      	movs	r2, #0
 80084f4:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = headersize & 0x00ff0000;
 80084f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084fa:	1c5a      	adds	r2, r3, #1
 80084fc:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8008500:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8008504:	4413      	add	r3, r2
 8008506:	2200      	movs	r2, #0
 8008508:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = headersize & 0x0000ff00;
 800850a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800850e:	1c5a      	adds	r2, r3, #1
 8008510:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8008514:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8008518:	4413      	add	r3, r2
 800851a:	2200      	movs	r2, #0
 800851c:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = headersize & 0x000000ff;
 800851e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008522:	1c5a      	adds	r2, r3, #1
 8008524:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8008528:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800852c:	4413      	add	r3, r2
 800852e:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8008532:	b2d2      	uxtb	r2, r2
 8008534:	701a      	strb	r2, [r3, #0]
      headersize += 6;
 8008536:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800853a:	3306      	adds	r3, #6
 800853c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    }
    /* Copy the header buffer in internal buffer "HBuffer" */
    for(loopcounter = 0; loopcounter < headersize; loopcounter++)
 8008540:	2300      	movs	r3, #0
 8008542:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008546:	e013      	b.n	8008570 <CRYP_AES_CCM+0x1d4>
    {
      HBuffer[bufferidx++] = Header[loopcounter];
 8008548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800854c:	1c5a      	adds	r2, r3, #1
 800854e:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8008552:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8008556:	4413      	add	r3, r2
 8008558:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800855c:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8008560:	440a      	add	r2, r1
 8008562:	7812      	ldrb	r2, [r2, #0]
 8008564:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = headersize & 0x0000ff00;
      HBuffer[bufferidx++] = headersize & 0x000000ff;
      headersize += 6;
    }
    /* Copy the header buffer in internal buffer "HBuffer" */
    for(loopcounter = 0; loopcounter < headersize; loopcounter++)
 8008566:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800856a:	3301      	adds	r3, #1
 800856c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008570:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8008574:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008578:	429a      	cmp	r2, r3
 800857a:	d3e5      	bcc.n	8008548 <CRYP_AES_CCM+0x1ac>
    {
      HBuffer[bufferidx++] = Header[loopcounter];
    }
    /* Check if the header size is modulo 16 */
    if ((headersize % 16) != 0)
 800857c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008580:	f003 030f 	and.w	r3, r3, #15
 8008584:	2b00      	cmp	r3, #0
 8008586:	d020      	beq.n	80085ca <CRYP_AES_CCM+0x22e>
    {
      /* Padd the header buffer with 0s till the HBuffer length is modulo 16 */
      for(loopcounter = headersize; loopcounter <= ((headersize/16) + 1) * 16; loopcounter++)
 8008588:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800858c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008590:	e00b      	b.n	80085aa <CRYP_AES_CCM+0x20e>
      {
        HBuffer[loopcounter] = 0;
 8008592:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8008596:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800859a:	4413      	add	r3, r2
 800859c:	2200      	movs	r2, #0
 800859e:	701a      	strb	r2, [r3, #0]
    }
    /* Check if the header size is modulo 16 */
    if ((headersize % 16) != 0)
    {
      /* Padd the header buffer with 0s till the HBuffer length is modulo 16 */
      for(loopcounter = headersize; loopcounter <= ((headersize/16) + 1) * 16; loopcounter++)
 80085a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80085a4:	3301      	adds	r3, #1
 80085a6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80085aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085ae:	091b      	lsrs	r3, r3, #4
 80085b0:	3301      	adds	r3, #1
 80085b2:	011a      	lsls	r2, r3, #4
 80085b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d2ea      	bcs.n	8008592 <CRYP_AES_CCM+0x1f6>
      {
        HBuffer[loopcounter] = 0;
      }
      /* Set the header size to modulo 16 */
      headersize = ((headersize/16) + 1) * 16;
 80085bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085c0:	091b      	lsrs	r3, r3, #4
 80085c2:	3301      	adds	r3, #1
 80085c4:	011b      	lsls	r3, r3, #4
 80085c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    }
    /* set the pointer headeraddr to HBuffer */
    headeraddr = (uint32_t)HBuffer;
 80085ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80085ce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  }
  /************************* Formatting the block B0 **************************/
  if(headersize != 0)
 80085d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d002      	beq.n	80085e0 <CRYP_AES_CCM+0x244>
  {
    blockb0[0] = 0x40;
 80085da:	2340      	movs	r3, #64	; 0x40
 80085dc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  }
  /* Flags byte */
  blockb0[0] |= 0u | (((( (uint8_t) TAGSize - 2) / 2) & 0x07 ) << 3 ) | ( ( (uint8_t) (15 - NonceSize) - 1) & 0x07);
 80085e0:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80085e4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	3b02      	subs	r3, #2
 80085ec:	0fd9      	lsrs	r1, r3, #31
 80085ee:	440b      	add	r3, r1
 80085f0:	105b      	asrs	r3, r3, #1
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	f003 0307 	and.w	r3, r3, #7
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	00db      	lsls	r3, r3, #3
 80085fc:	b2d9      	uxtb	r1, r3
 80085fe:	1d3b      	adds	r3, r7, #4
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	b2db      	uxtb	r3, r3
 8008604:	f1c3 030e 	rsb	r3, r3, #14
 8008608:	b2db      	uxtb	r3, r3
 800860a:	f003 0307 	and.w	r3, r3, #7
 800860e:	b2db      	uxtb	r3, r3
 8008610:	430b      	orrs	r3, r1
 8008612:	b2db      	uxtb	r3, r3
 8008614:	4313      	orrs	r3, r2
 8008616:	b2db      	uxtb	r3, r3
 8008618:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  
  for (loopcounter = 0; loopcounter < NonceSize; loopcounter++)
 800861c:	2300      	movs	r3, #0
 800861e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008622:	e013      	b.n	800864c <CRYP_AES_CCM+0x2b0>
  {
    blockb0[loopcounter+1] = Nonce[loopcounter];
 8008624:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008628:	3301      	adds	r3, #1
 800862a:	f107 0208 	add.w	r2, r7, #8
 800862e:	6811      	ldr	r1, [r2, #0]
 8008630:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8008634:	440a      	add	r2, r1
 8008636:	7812      	ldrb	r2, [r2, #0]
 8008638:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800863c:	440b      	add	r3, r1
 800863e:	f803 2cdc 	strb.w	r2, [r3, #-220]
    blockb0[0] = 0x40;
  }
  /* Flags byte */
  blockb0[0] |= 0u | (((( (uint8_t) TAGSize - 2) / 2) & 0x07 ) << 3 ) | ( ( (uint8_t) (15 - NonceSize) - 1) & 0x07);
  
  for (loopcounter = 0; loopcounter < NonceSize; loopcounter++)
 8008642:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008646:	3301      	adds	r3, #1
 8008648:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800864c:	1d3b      	adds	r3, r7, #4
 800864e:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	429a      	cmp	r2, r3
 8008656:	d3e5      	bcc.n	8008624 <CRYP_AES_CCM+0x288>
  {
    blockb0[loopcounter+1] = Nonce[loopcounter];
  }
  for ( ; loopcounter < 13; loopcounter++)
 8008658:	e00d      	b.n	8008676 <CRYP_AES_CCM+0x2da>
  {
    blockb0[loopcounter+1] = 0;
 800865a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800865e:	3301      	adds	r3, #1
 8008660:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8008664:	4413      	add	r3, r2
 8008666:	2200      	movs	r2, #0
 8008668:	f803 2cdc 	strb.w	r2, [r3, #-220]
  
  for (loopcounter = 0; loopcounter < NonceSize; loopcounter++)
  {
    blockb0[loopcounter+1] = Nonce[loopcounter];
  }
  for ( ; loopcounter < 13; loopcounter++)
 800866c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008670:	3301      	adds	r3, #1
 8008672:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008676:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800867a:	2b0c      	cmp	r3, #12
 800867c:	d9ed      	bls.n	800865a <CRYP_AES_CCM+0x2be>
  {
    blockb0[loopcounter+1] = 0;
  }
  
  blockb0[14] = ((ILength >> 8) & 0xFF);
 800867e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008682:	0a1b      	lsrs	r3, r3, #8
 8008684:	b2db      	uxtb	r3, r3
 8008686:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  blockb0[15] = (ILength & 0xFF);
 800868a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800868e:	b2db      	uxtb	r3, r3
 8008690:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
     Bits 7 and 6 are reserved and shall be set to 0
     Bits 3, 4, and 5 shall also be set to 0, to ensure that all the counter blocks
     are distinct from B0
     Bits 0, 1, and 2 contain the same encoding of q as in B0
  */
  ctr[0] = blockb0[0] & 0x07;
 8008694:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008698:	f003 0307 	and.w	r3, r3, #7
 800869c:	b2db      	uxtb	r3, r3
 800869e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  /* byte 1 to NonceSize is the IV (Nonce) */
  for(loopcounter = 1; loopcounter < NonceSize + 1; loopcounter++)
 80086a2:	2301      	movs	r3, #1
 80086a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80086a8:	e010      	b.n	80086cc <CRYP_AES_CCM+0x330>
  {
    ctr[loopcounter] = blockb0[loopcounter];
 80086aa:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80086ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80086b2:	4413      	add	r3, r2
 80086b4:	781a      	ldrb	r2, [r3, #0]
 80086b6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80086ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80086be:	440b      	add	r3, r1
 80086c0:	701a      	strb	r2, [r3, #0]
     are distinct from B0
     Bits 0, 1, and 2 contain the same encoding of q as in B0
  */
  ctr[0] = blockb0[0] & 0x07;
  /* byte 1 to NonceSize is the IV (Nonce) */
  for(loopcounter = 1; loopcounter < NonceSize + 1; loopcounter++)
 80086c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80086c6:	3301      	adds	r3, #1
 80086c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80086cc:	1d3b      	adds	r3, r7, #4
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	1c5a      	adds	r2, r3, #1
 80086d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d8e7      	bhi.n	80086aa <CRYP_AES_CCM+0x30e>
  {
    ctr[loopcounter] = blockb0[loopcounter];
  }
  /* Set the LSB to 1 */
  ctr[15] |= 0x01;
 80086da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80086de:	f043 0301 	orr.w	r3, r3, #1
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  
  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 80086e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80086ec:	4618      	mov	r0, r3
 80086ee:	f000 fd75 	bl	80091dc <CRYP_KeyStructInit>
  
  switch(Keysize)
 80086f2:	f8b7 3120 	ldrh.w	r3, [r7, #288]	; 0x120
 80086f6:	2bc0      	cmp	r3, #192	; 0xc0
 80086f8:	d03d      	beq.n	8008776 <CRYP_AES_CCM+0x3da>
 80086fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086fe:	f000 808e 	beq.w	800881e <CRYP_AES_CCM+0x482>
 8008702:	2b80      	cmp	r3, #128	; 0x80
 8008704:	d000      	beq.n	8008708 <CRYP_AES_CCM+0x36c>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    default:
    break;
 8008706:	e0fa      	b.n	80088fe <CRYP_AES_CCM+0x562>
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
  
  switch(Keysize)
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8008708:	2300      	movs	r3, #0
 800870a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800870e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008718:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800871c:	ba1b      	rev	r3, r3
 800871e:	66bb      	str	r3, [r7, #104]	; 0x68
    keyaddr+=4;
 8008720:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008724:	3304      	adds	r3, #4
 8008726:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 800872a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008734:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008738:	ba1b      	rev	r3, r3
 800873a:	66fb      	str	r3, [r7, #108]	; 0x6c
    keyaddr+=4;
 800873c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008740:	3304      	adds	r3, #4
 8008742:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8008746:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008750:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008754:	ba1b      	rev	r3, r3
 8008756:	673b      	str	r3, [r7, #112]	; 0x70
    keyaddr+=4;
 8008758:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800875c:	3304      	adds	r3, #4
 800875e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8008762:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800876c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008770:	ba1b      	rev	r3, r3
 8008772:	677b      	str	r3, [r7, #116]	; 0x74
    break;
 8008774:	e0c3      	b.n	80088fe <CRYP_AES_CCM+0x562>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 8008776:	f44f 7380 	mov.w	r3, #256	; 0x100
 800877a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 800877e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008788:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800878c:	ba1b      	rev	r3, r3
 800878e:	663b      	str	r3, [r7, #96]	; 0x60
    keyaddr+=4;
 8008790:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008794:	3304      	adds	r3, #4
 8008796:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800879a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80087a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80087a8:	ba1b      	rev	r3, r3
 80087aa:	667b      	str	r3, [r7, #100]	; 0x64
    keyaddr+=4;
 80087ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087b0:	3304      	adds	r3, #4
 80087b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80087b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80087c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80087c4:	ba1b      	rev	r3, r3
 80087c6:	66bb      	str	r3, [r7, #104]	; 0x68
    keyaddr+=4;
 80087c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087cc:	3304      	adds	r3, #4
 80087ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80087d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80087dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80087e0:	ba1b      	rev	r3, r3
 80087e2:	66fb      	str	r3, [r7, #108]	; 0x6c
    keyaddr+=4;
 80087e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087e8:	3304      	adds	r3, #4
 80087ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80087ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80087f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80087fc:	ba1b      	rev	r3, r3
 80087fe:	673b      	str	r3, [r7, #112]	; 0x70
    keyaddr+=4;
 8008800:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008804:	3304      	adds	r3, #4
 8008806:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 800880a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008814:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008818:	ba1b      	rev	r3, r3
 800881a:	677b      	str	r3, [r7, #116]	; 0x74
    break;
 800881c:	e06f      	b.n	80088fe <CRYP_AES_CCM+0x562>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 800881e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008822:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8008826:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008830:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008834:	ba1b      	rev	r3, r3
 8008836:	65bb      	str	r3, [r7, #88]	; 0x58
    keyaddr+=4;
 8008838:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800883c:	3304      	adds	r3, #4
 800883e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8008842:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800884c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008850:	ba1b      	rev	r3, r3
 8008852:	65fb      	str	r3, [r7, #92]	; 0x5c
    keyaddr+=4;
 8008854:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008858:	3304      	adds	r3, #4
 800885a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 800885e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008868:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800886c:	ba1b      	rev	r3, r3
 800886e:	663b      	str	r3, [r7, #96]	; 0x60
    keyaddr+=4;
 8008870:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008874:	3304      	adds	r3, #4
 8008876:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800887a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008884:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008888:	ba1b      	rev	r3, r3
 800888a:	667b      	str	r3, [r7, #100]	; 0x64
    keyaddr+=4;
 800888c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008890:	3304      	adds	r3, #4
 8008892:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8008896:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80088a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80088a4:	ba1b      	rev	r3, r3
 80088a6:	66bb      	str	r3, [r7, #104]	; 0x68
    keyaddr+=4;
 80088a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80088ac:	3304      	adds	r3, #4
 80088ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80088b2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80088bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80088c0:	ba1b      	rev	r3, r3
 80088c2:	66fb      	str	r3, [r7, #108]	; 0x6c
    keyaddr+=4;
 80088c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80088c8:	3304      	adds	r3, #4
 80088ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80088ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80088d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088dc:	ba1b      	rev	r3, r3
 80088de:	673b      	str	r3, [r7, #112]	; 0x70
    keyaddr+=4;
 80088e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80088e4:	3304      	adds	r3, #4
 80088e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80088ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80088f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80088f8:	ba1b      	rev	r3, r3
 80088fa:	677b      	str	r3, [r7, #116]	; 0x74
    break;
 80088fc:	bf00      	nop
    default:
    break;
  }
  
  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = (__REV(*(uint32_t*)(ctraddr)));
 80088fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008908:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800890c:	ba1b      	rev	r3, r3
 800890e:	64bb      	str	r3, [r7, #72]	; 0x48
  ctraddr+=4;
 8008910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008914:	3304      	adds	r3, #4
 8008916:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  AES_CRYP_IVInitStructure.CRYP_IV0Right= (__REV(*(uint32_t*)(ctraddr)));
 800891a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008924:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008928:	ba1b      	rev	r3, r3
 800892a:	64fb      	str	r3, [r7, #76]	; 0x4c
  ctraddr+=4;
 800892c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008930:	3304      	adds	r3, #4
 8008932:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  AES_CRYP_IVInitStructure.CRYP_IV1Left = (__REV(*(uint32_t*)(ctraddr)));
 8008936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008940:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008944:	ba1b      	rev	r3, r3
 8008946:	653b      	str	r3, [r7, #80]	; 0x50
  ctraddr+=4;
 8008948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800894c:	3304      	adds	r3, #4
 800894e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  AES_CRYP_IVInitStructure.CRYP_IV1Right= (__REV(*(uint32_t*)(ctraddr)));
 8008952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800895c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008960:	ba1b      	rev	r3, r3
 8008962:	657b      	str	r3, [r7, #84]	; 0x54
  
  /*------------------ AES Encryption ------------------*/
  if(Mode == MODE_ENCRYPT) /* AES encryption */
 8008964:	f107 030f 	add.w	r3, r7, #15
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	2b01      	cmp	r3, #1
 800896c:	f040 81b9 	bne.w	8008ce2 <CRYP_AES_CCM+0x946>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 8008970:	f000 fca4 	bl	80092bc <CRYP_FIFOFlush>
    
    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8008974:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008978:	4618      	mov	r0, r3
 800897a:	f000 fc03 	bl	8009184 <CRYP_KeyInit>
    
    /* CRYP Initialization Vectors */
    CRYP_IVInit(&AES_CRYP_IVInitStructure);
 800897e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008982:	4618      	mov	r0, r3
 8008984:	f000 fc4c 	bl	8009220 <CRYP_IVInit>
    
    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8008988:	2300      	movs	r3, #0
 800898a:	67bb      	str	r3, [r7, #120]	; 0x78
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CCM;
 800898c:	f04f 1308 	mov.w	r3, #524296	; 0x80008
 8008990:	67fb      	str	r3, [r7, #124]	; 0x7c
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8008992:	2380      	movs	r3, #128	; 0x80
 8008994:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    CRYP_Init(&AES_CRYP_InitStructure);
 8008998:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800899c:	4618      	mov	r0, r3
 800899e:	f000 fb89 	bl	80090b4 <CRYP_Init>
    
    /***************************** Init phase *********************************/
    /* Select init phase */
    CRYP_PhaseConfig(CRYP_Phase_Init);
 80089a2:	2000      	movs	r0, #0
 80089a4:	f000 fc6e 	bl	8009284 <CRYP_PhaseConfig>
    
    b0addr = (uint32_t)blockb0;
 80089a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80089ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    /* Write the blockb0 block in the IN FIFO */
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 80089b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4618      	mov	r0, r3
 80089b8:	f000 fcaa 	bl	8009310 <CRYP_DataIn>
    b0addr+=4;
 80089bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089c0:	3304      	adds	r3, #4
 80089c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 80089c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4618      	mov	r0, r3
 80089ce:	f000 fc9f 	bl	8009310 <CRYP_DataIn>
    b0addr+=4;
 80089d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089d6:	3304      	adds	r3, #4
 80089d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 80089dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4618      	mov	r0, r3
 80089e4:	f000 fc94 	bl	8009310 <CRYP_DataIn>
    b0addr+=4;
 80089e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089ec:	3304      	adds	r3, #4
 80089ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 80089f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4618      	mov	r0, r3
 80089fa:	f000 fc89 	bl	8009310 <CRYP_DataIn>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 80089fe:	2001      	movs	r0, #1
 8008a00:	f000 fc6a 	bl	80092d8 <CRYP_Cmd>
    
    /* Wait for CRYPEN bit to be 0 */
    while(CRYP_GetCmdStatus() == ENABLE)
 8008a04:	bf00      	nop
 8008a06:	f000 fe4b 	bl	80096a0 <CRYP_GetCmdStatus>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d0fa      	beq.n	8008a06 <CRYP_AES_CCM+0x66a>
    {
    }
    /***************************** header phase *******************************/
    if(headersize != 0)
 8008a10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d069      	beq.n	8008aec <CRYP_AES_CCM+0x750>
    {
      /* Select header phase */
      CRYP_PhaseConfig(CRYP_Phase_Header);
 8008a18:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008a1c:	f000 fc32 	bl	8009284 <CRYP_PhaseConfig>
      
      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 8008a20:	2001      	movs	r0, #1
 8008a22:	f000 fc59 	bl	80092d8 <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 8008a26:	f000 fe3b 	bl	80096a0 <CRYP_GetCmdStatus>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d101      	bne.n	8008a34 <CRYP_AES_CCM+0x698>
      {
         /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
            the CRYP peripheral (please check the device sales type. */
         return(ERROR);
 8008a30:	2300      	movs	r3, #0
 8008a32:	e32e      	b.n	8009092 <CRYP_AES_CCM+0xcf6>
      }
      
      for(loopcounter = 0; (loopcounter < headersize); loopcounter+=16)
 8008a34:	2300      	movs	r3, #0
 8008a36:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008a3a:	e037      	b.n	8008aac <CRYP_AES_CCM+0x710>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 8008a3c:	bf00      	nop
 8008a3e:	2001      	movs	r0, #1
 8008a40:	f000 fe48 	bl	80096d4 <CRYP_GetFlagStatus>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d0f9      	beq.n	8008a3e <CRYP_AES_CCM+0x6a2>
        {
        }
        
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8008a4a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4618      	mov	r0, r3
 8008a52:	f000 fc5d 	bl	8009310 <CRYP_DataIn>
        headeraddr+=4;
 8008a56:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008a5a:	3304      	adds	r3, #4
 8008a5c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8008a60:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4618      	mov	r0, r3
 8008a68:	f000 fc52 	bl	8009310 <CRYP_DataIn>
        headeraddr+=4;
 8008a6c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008a70:	3304      	adds	r3, #4
 8008a72:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8008a76:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f000 fc47 	bl	8009310 <CRYP_DataIn>
        headeraddr+=4;
 8008a82:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008a86:	3304      	adds	r3, #4
 8008a88:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8008a8c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4618      	mov	r0, r3
 8008a94:	f000 fc3c 	bl	8009310 <CRYP_DataIn>
        headeraddr+=4;
 8008a98:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008a9c:	3304      	adds	r3, #4
 8008a9e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
         /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
            the CRYP peripheral (please check the device sales type. */
         return(ERROR);
      }
      
      for(loopcounter = 0; (loopcounter < headersize); loopcounter+=16)
 8008aa2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008aa6:	3310      	adds	r3, #16
 8008aa8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008aac:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8008ab0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d3c1      	bcc.n	8008a3c <CRYP_AES_CCM+0x6a0>
        CRYP_DataIn(*(uint32_t*)(headeraddr));
        headeraddr+=4;
      }
      
      /* Wait until the complete message has been processed */
      counter = 0;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	647b      	str	r3, [r7, #68]	; 0x44
      do
      {
        busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8008abc:	2010      	movs	r0, #16
 8008abe:	f000 fe09 	bl	80096d4 <CRYP_GetFlagStatus>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
        counter++;
 8008ac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008aca:	3301      	adds	r3, #1
 8008acc:	647b      	str	r3, [r7, #68]	; 0x44
      }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8008ace:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ad4:	d003      	beq.n	8008ade <CRYP_AES_CCM+0x742>
 8008ad6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d1ee      	bne.n	8008abc <CRYP_AES_CCM+0x720>

      if (busystatus != RESET)
 8008ade:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d002      	beq.n	8008aec <CRYP_AES_CCM+0x750>
      {
        status = ERROR;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
      }
    }
    
    /**************************** payload phase *******************************/
    if(ILength != 0)
 8008aec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	f000 80a3 	beq.w	8008c3c <CRYP_AES_CCM+0x8a0>
    {
      /* Select payload phase */
      CRYP_PhaseConfig(CRYP_Phase_Payload);
 8008af6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8008afa:	f000 fbc3 	bl	8009284 <CRYP_PhaseConfig>
      
      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 8008afe:	2001      	movs	r0, #1
 8008b00:	f000 fbea 	bl	80092d8 <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 8008b04:	f000 fdcc 	bl	80096a0 <CRYP_GetCmdStatus>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d101      	bne.n	8008b12 <CRYP_AES_CCM+0x776>
      {
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
 8008b0e:	2300      	movs	r3, #0
 8008b10:	e2bf      	b.n	8009092 <CRYP_AES_CCM+0xcf6>
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 8008b12:	2300      	movs	r3, #0
 8008b14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008b18:	e085      	b.n	8008c26 <CRYP_AES_CCM+0x88a>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 8008b1a:	bf00      	nop
 8008b1c:	2001      	movs	r0, #1
 8008b1e:	f000 fdd9 	bl	80096d4 <CRYP_GetFlagStatus>
 8008b22:	4603      	mov	r3, r0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d0f9      	beq.n	8008b1c <CRYP_AES_CCM+0x780>
        {
        }
        
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8008b28:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f000 fbee 	bl	8009310 <CRYP_DataIn>
        inputaddr+=4;
 8008b34:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b38:	3304      	adds	r3, #4
 8008b3a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8008b3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4618      	mov	r0, r3
 8008b46:	f000 fbe3 	bl	8009310 <CRYP_DataIn>
        inputaddr+=4;
 8008b4a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b4e:	3304      	adds	r3, #4
 8008b50:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8008b54:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f000 fbd8 	bl	8009310 <CRYP_DataIn>
        inputaddr+=4;
 8008b60:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b64:	3304      	adds	r3, #4
 8008b66:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8008b6a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4618      	mov	r0, r3
 8008b72:	f000 fbcd 	bl	8009310 <CRYP_DataIn>
        inputaddr+=4;
 8008b76:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b7a:	3304      	adds	r3, #4
 8008b7c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        
        /* Wait until the complete message has been processed */
        counter = 0;
 8008b80:	2300      	movs	r3, #0
 8008b82:	647b      	str	r3, [r7, #68]	; 0x44
        do
        {
          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8008b84:	2010      	movs	r0, #16
 8008b86:	f000 fda5 	bl	80096d4 <CRYP_GetFlagStatus>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
          counter++;
 8008b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b92:	3301      	adds	r3, #1
 8008b94:	647b      	str	r3, [r7, #68]	; 0x44
        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8008b96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b9c:	d003      	beq.n	8008ba6 <CRYP_AES_CCM+0x80a>
 8008b9e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d1ee      	bne.n	8008b84 <CRYP_AES_CCM+0x7e8>

        if (busystatus != RESET)
 8008ba6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d003      	beq.n	8008bb6 <CRYP_AES_CCM+0x81a>
        {
          status = ERROR;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8008bb4:	e032      	b.n	8008c1c <CRYP_AES_CCM+0x880>
        }
        else
        {
          /* Wait until the OFNE flag is reset */
          while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 8008bb6:	bf00      	nop
 8008bb8:	2004      	movs	r0, #4
 8008bba:	f000 fd8b 	bl	80096d4 <CRYP_GetFlagStatus>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d0f9      	beq.n	8008bb8 <CRYP_AES_CCM+0x81c>
          {
          }
          
          /* Read the Output block from the Output FIFO */
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008bc4:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8008bc8:	f000 fbb0 	bl	800932c <CRYP_DataOut>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8008bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bd4:	3304      	adds	r3, #4
 8008bd6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008bda:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8008bde:	f000 fba5 	bl	800932c <CRYP_DataOut>
 8008be2:	4603      	mov	r3, r0
 8008be4:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8008be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bea:	3304      	adds	r3, #4
 8008bec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008bf0:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8008bf4:	f000 fb9a 	bl	800932c <CRYP_DataOut>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8008bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c00:	3304      	adds	r3, #4
 8008c02:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008c06:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8008c0a:	f000 fb8f 	bl	800932c <CRYP_DataOut>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8008c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c16:	3304      	adds	r3, #4
 8008c18:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 8008c1c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008c20:	3310      	adds	r3, #16
 8008c22:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008c26:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8008c2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d204      	bcs.n	8008c3c <CRYP_AES_CCM+0x8a0>
 8008c32:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	f47f af6f 	bne.w	8008b1a <CRYP_AES_CCM+0x77e>
      }
    }
    
    /***************************** final phase ********************************/
    /* Select final phase */
    CRYP_PhaseConfig(CRYP_Phase_Final);
 8008c3c:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8008c40:	f000 fb20 	bl	8009284 <CRYP_PhaseConfig>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8008c44:	2001      	movs	r0, #1
 8008c46:	f000 fb47 	bl	80092d8 <CRYP_Cmd>
    
    if(CRYP_GetCmdStatus() == DISABLE)
 8008c4a:	f000 fd29 	bl	80096a0 <CRYP_GetCmdStatus>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d101      	bne.n	8008c58 <CRYP_AES_CCM+0x8bc>
    {
      /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
         the CRYP peripheral (please check the device sales type. */
      return(ERROR);
 8008c54:	2300      	movs	r3, #0
 8008c56:	e21c      	b.n	8009092 <CRYP_AES_CCM+0xcf6>
    }
    
    ctraddr = (uint32_t)ctr;
 8008c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c5c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    /* Write the counter block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(ctraddr));
 8008c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4618      	mov	r0, r3
 8008c68:	f000 fb52 	bl	8009310 <CRYP_DataIn>
    ctraddr+=4;
 8008c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c70:	3304      	adds	r3, #4
 8008c72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    CRYP_DataIn(*(uint32_t*)(ctraddr));
 8008c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f000 fb47 	bl	8009310 <CRYP_DataIn>
    ctraddr+=4;
 8008c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c86:	3304      	adds	r3, #4
 8008c88:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    CRYP_DataIn(*(uint32_t*)(ctraddr));
 8008c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4618      	mov	r0, r3
 8008c94:	f000 fb3c 	bl	8009310 <CRYP_DataIn>
    ctraddr+=4;
 8008c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c9c:	3304      	adds	r3, #4
 8008c9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    /* Reset bit 0 (after 8-bit swap) is equivalent to reset bit 24 (before 8-bit swap) */
    CRYP_DataIn(*(uint32_t*)(ctraddr) & 0xfeffffff);
 8008ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008cac:	4618      	mov	r0, r3
 8008cae:	f000 fb2f 	bl	8009310 <CRYP_DataIn>
    
    /* Wait until the OFNE flag is reset */
    while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 8008cb2:	bf00      	nop
 8008cb4:	2004      	movs	r0, #4
 8008cb6:	f000 fd0d 	bl	80096d4 <CRYP_GetFlagStatus>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d0f9      	beq.n	8008cb4 <CRYP_AES_CCM+0x918>
    {
    }
    
    /* Read the Auth TAG in the IN FIFO */
    temptag[0] = CRYP_DataOut();
 8008cc0:	f000 fb34 	bl	800932c <CRYP_DataOut>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	617b      	str	r3, [r7, #20]
    temptag[1] = CRYP_DataOut();
 8008cc8:	f000 fb30 	bl	800932c <CRYP_DataOut>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	61bb      	str	r3, [r7, #24]
    temptag[2] = CRYP_DataOut();
 8008cd0:	f000 fb2c 	bl	800932c <CRYP_DataOut>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	61fb      	str	r3, [r7, #28]
    temptag[3] = CRYP_DataOut();
 8008cd8:	f000 fb28 	bl	800932c <CRYP_DataOut>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	623b      	str	r3, [r7, #32]
 8008ce0:	e1b7      	b.n	8009052 <CRYP_AES_CCM+0xcb6>
  }
  /*------------------ AES Decryption ------------------*/
  else /* AES decryption */
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 8008ce2:	f000 faeb 	bl	80092bc <CRYP_FIFOFlush>
    
    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8008ce6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008cea:	4618      	mov	r0, r3
 8008cec:	f000 fa4a 	bl	8009184 <CRYP_KeyInit>
    
    /* CRYP Initialization Vectors */
    CRYP_IVInit(&AES_CRYP_IVInitStructure);
 8008cf0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f000 fa93 	bl	8009220 <CRYP_IVInit>
    
    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8008cfa:	2304      	movs	r3, #4
 8008cfc:	67bb      	str	r3, [r7, #120]	; 0x78
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CCM;
 8008cfe:	f04f 1308 	mov.w	r3, #524296	; 0x80008
 8008d02:	67fb      	str	r3, [r7, #124]	; 0x7c
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8008d04:	2380      	movs	r3, #128	; 0x80
 8008d06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    CRYP_Init(&AES_CRYP_InitStructure);
 8008d0a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f000 f9d0 	bl	80090b4 <CRYP_Init>
    
    /***************************** Init phase *********************************/
    /* Select init phase */
    CRYP_PhaseConfig(CRYP_Phase_Init);
 8008d14:	2000      	movs	r0, #0
 8008d16:	f000 fab5 	bl	8009284 <CRYP_PhaseConfig>
    
    b0addr = (uint32_t)blockb0;
 8008d1a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008d1e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    /* Write the blockb0 block in the IN FIFO */
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 8008d22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f000 faf1 	bl	8009310 <CRYP_DataIn>
    b0addr+=4;
 8008d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d32:	3304      	adds	r3, #4
 8008d34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 8008d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f000 fae6 	bl	8009310 <CRYP_DataIn>
    b0addr+=4;
 8008d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d48:	3304      	adds	r3, #4
 8008d4a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 8008d4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4618      	mov	r0, r3
 8008d56:	f000 fadb 	bl	8009310 <CRYP_DataIn>
    b0addr+=4;
 8008d5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d5e:	3304      	adds	r3, #4
 8008d60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 8008d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f000 fad0 	bl	8009310 <CRYP_DataIn>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8008d70:	2001      	movs	r0, #1
 8008d72:	f000 fab1 	bl	80092d8 <CRYP_Cmd>
    
    /* Wait for CRYPEN bit to be 0 */
    while(CRYP_GetCmdStatus() == ENABLE)
 8008d76:	bf00      	nop
 8008d78:	f000 fc92 	bl	80096a0 <CRYP_GetCmdStatus>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d0fa      	beq.n	8008d78 <CRYP_AES_CCM+0x9dc>
    {
    }
    
    /***************************** header phase *******************************/
    if(headersize != 0)
 8008d82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d069      	beq.n	8008e5e <CRYP_AES_CCM+0xac2>
    {
      /* Select header phase */
      CRYP_PhaseConfig(CRYP_Phase_Header);
 8008d8a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008d8e:	f000 fa79 	bl	8009284 <CRYP_PhaseConfig>
      
      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 8008d92:	2001      	movs	r0, #1
 8008d94:	f000 faa0 	bl	80092d8 <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 8008d98:	f000 fc82 	bl	80096a0 <CRYP_GetCmdStatus>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d101      	bne.n	8008da6 <CRYP_AES_CCM+0xa0a>
      {
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
 8008da2:	2300      	movs	r3, #0
 8008da4:	e175      	b.n	8009092 <CRYP_AES_CCM+0xcf6>
      }
      
      for(loopcounter = 0; (loopcounter < headersize); loopcounter+=16)
 8008da6:	2300      	movs	r3, #0
 8008da8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008dac:	e037      	b.n	8008e1e <CRYP_AES_CCM+0xa82>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 8008dae:	bf00      	nop
 8008db0:	2001      	movs	r0, #1
 8008db2:	f000 fc8f 	bl	80096d4 <CRYP_GetFlagStatus>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d0f9      	beq.n	8008db0 <CRYP_AES_CCM+0xa14>
        {
        }
        
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8008dbc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f000 faa4 	bl	8009310 <CRYP_DataIn>
        headeraddr+=4;
 8008dc8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008dcc:	3304      	adds	r3, #4
 8008dce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8008dd2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f000 fa99 	bl	8009310 <CRYP_DataIn>
        headeraddr+=4;
 8008dde:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008de2:	3304      	adds	r3, #4
 8008de4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8008de8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4618      	mov	r0, r3
 8008df0:	f000 fa8e 	bl	8009310 <CRYP_DataIn>
        headeraddr+=4;
 8008df4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008df8:	3304      	adds	r3, #4
 8008dfa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8008dfe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4618      	mov	r0, r3
 8008e06:	f000 fa83 	bl	8009310 <CRYP_DataIn>
        headeraddr+=4;
 8008e0a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008e0e:	3304      	adds	r3, #4
 8008e10:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
      }
      
      for(loopcounter = 0; (loopcounter < headersize); loopcounter+=16)
 8008e14:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008e18:	3310      	adds	r3, #16
 8008e1a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008e1e:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8008e22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d3c1      	bcc.n	8008dae <CRYP_AES_CCM+0xa12>
        CRYP_DataIn(*(uint32_t*)(headeraddr));
        headeraddr+=4;
      }
      
      /* Wait until the complete message has been processed */
      counter = 0;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	647b      	str	r3, [r7, #68]	; 0x44
      do
      {
        busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8008e2e:	2010      	movs	r0, #16
 8008e30:	f000 fc50 	bl	80096d4 <CRYP_GetFlagStatus>
 8008e34:	4603      	mov	r3, r0
 8008e36:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
        counter++;
 8008e3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	647b      	str	r3, [r7, #68]	; 0x44
      }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8008e40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e46:	d003      	beq.n	8008e50 <CRYP_AES_CCM+0xab4>
 8008e48:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d1ee      	bne.n	8008e2e <CRYP_AES_CCM+0xa92>

      if (busystatus != RESET)
 8008e50:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d002      	beq.n	8008e5e <CRYP_AES_CCM+0xac2>
      {
        status = ERROR;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
      }
    }
    
    /**************************** payload phase *******************************/
    if(ILength != 0)
 8008e5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	f000 80a3 	beq.w	8008fae <CRYP_AES_CCM+0xc12>
    {
      /* Select payload phase */
      CRYP_PhaseConfig(CRYP_Phase_Payload);
 8008e68:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8008e6c:	f000 fa0a 	bl	8009284 <CRYP_PhaseConfig>

      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 8008e70:	2001      	movs	r0, #1
 8008e72:	f000 fa31 	bl	80092d8 <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 8008e76:	f000 fc13 	bl	80096a0 <CRYP_GetCmdStatus>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d101      	bne.n	8008e84 <CRYP_AES_CCM+0xae8>
      {
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
 8008e80:	2300      	movs	r3, #0
 8008e82:	e106      	b.n	8009092 <CRYP_AES_CCM+0xcf6>
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 8008e84:	2300      	movs	r3, #0
 8008e86:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008e8a:	e085      	b.n	8008f98 <CRYP_AES_CCM+0xbfc>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 8008e8c:	bf00      	nop
 8008e8e:	2001      	movs	r0, #1
 8008e90:	f000 fc20 	bl	80096d4 <CRYP_GetFlagStatus>
 8008e94:	4603      	mov	r3, r0
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d0f9      	beq.n	8008e8e <CRYP_AES_CCM+0xaf2>
        {
        }
        
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8008e9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f000 fa35 	bl	8009310 <CRYP_DataIn>
        inputaddr+=4;
 8008ea6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008eaa:	3304      	adds	r3, #4
 8008eac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8008eb0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f000 fa2a 	bl	8009310 <CRYP_DataIn>
        inputaddr+=4;
 8008ebc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008ec0:	3304      	adds	r3, #4
 8008ec2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8008ec6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f000 fa1f 	bl	8009310 <CRYP_DataIn>
        inputaddr+=4;
 8008ed2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008ed6:	3304      	adds	r3, #4
 8008ed8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8008edc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f000 fa14 	bl	8009310 <CRYP_DataIn>
        inputaddr+=4;
 8008ee8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008eec:	3304      	adds	r3, #4
 8008eee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        
        /* Wait until the complete message has been processed */
        counter = 0;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	647b      	str	r3, [r7, #68]	; 0x44
        do
        {
          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8008ef6:	2010      	movs	r0, #16
 8008ef8:	f000 fbec 	bl	80096d4 <CRYP_GetFlagStatus>
 8008efc:	4603      	mov	r3, r0
 8008efe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
          counter++;
 8008f02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f04:	3301      	adds	r3, #1
 8008f06:	647b      	str	r3, [r7, #68]	; 0x44
        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8008f08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f0e:	d003      	beq.n	8008f18 <CRYP_AES_CCM+0xb7c>
 8008f10:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d1ee      	bne.n	8008ef6 <CRYP_AES_CCM+0xb5a>

        if (busystatus != RESET)
 8008f18:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d003      	beq.n	8008f28 <CRYP_AES_CCM+0xb8c>
        {
          status = ERROR;
 8008f20:	2300      	movs	r3, #0
 8008f22:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8008f26:	e032      	b.n	8008f8e <CRYP_AES_CCM+0xbf2>
        }
        else
        {
          /* Wait until the OFNE flag is reset */
          while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 8008f28:	bf00      	nop
 8008f2a:	2004      	movs	r0, #4
 8008f2c:	f000 fbd2 	bl	80096d4 <CRYP_GetFlagStatus>
 8008f30:	4603      	mov	r3, r0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d0f9      	beq.n	8008f2a <CRYP_AES_CCM+0xb8e>
          {
          }
          
          /* Read the Output block from the Output FIFO */
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008f36:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8008f3a:	f000 f9f7 	bl	800932c <CRYP_DataOut>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8008f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f46:	3304      	adds	r3, #4
 8008f48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008f4c:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8008f50:	f000 f9ec 	bl	800932c <CRYP_DataOut>
 8008f54:	4603      	mov	r3, r0
 8008f56:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8008f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f5c:	3304      	adds	r3, #4
 8008f5e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008f62:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8008f66:	f000 f9e1 	bl	800932c <CRYP_DataOut>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8008f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f72:	3304      	adds	r3, #4
 8008f74:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008f78:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8008f7c:	f000 f9d6 	bl	800932c <CRYP_DataOut>
 8008f80:	4603      	mov	r3, r0
 8008f82:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8008f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f88:	3304      	adds	r3, #4
 8008f8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 8008f8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008f92:	3310      	adds	r3, #16
 8008f94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008f98:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8008f9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d204      	bcs.n	8008fae <CRYP_AES_CCM+0xc12>
 8008fa4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	f47f af6f 	bne.w	8008e8c <CRYP_AES_CCM+0xaf0>
      }
    }
    
    /***************************** final phase ********************************/
    /* Select final phase */
    CRYP_PhaseConfig(CRYP_Phase_Final);
 8008fae:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8008fb2:	f000 f967 	bl	8009284 <CRYP_PhaseConfig>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8008fb6:	2001      	movs	r0, #1
 8008fb8:	f000 f98e 	bl	80092d8 <CRYP_Cmd>
    
    if(CRYP_GetCmdStatus() == DISABLE)
 8008fbc:	f000 fb70 	bl	80096a0 <CRYP_GetCmdStatus>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d101      	bne.n	8008fca <CRYP_AES_CCM+0xc2e>
    {
      /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
         the CRYP peripheral (please check the device sales type. */
      return(ERROR);
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	e063      	b.n	8009092 <CRYP_AES_CCM+0xcf6>
    }
    
    ctraddr = (uint32_t)ctr;
 8008fca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    /* Write the counter block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(ctraddr));
 8008fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f000 f999 	bl	8009310 <CRYP_DataIn>
    ctraddr+=4;
 8008fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fe2:	3304      	adds	r3, #4
 8008fe4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    CRYP_DataIn(*(uint32_t*)(ctraddr));
 8008fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f000 f98e 	bl	8009310 <CRYP_DataIn>
    ctraddr+=4;
 8008ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ff8:	3304      	adds	r3, #4
 8008ffa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    CRYP_DataIn(*(uint32_t*)(ctraddr));
 8008ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4618      	mov	r0, r3
 8009006:	f000 f983 	bl	8009310 <CRYP_DataIn>
    ctraddr+=4;
 800900a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800900e:	3304      	adds	r3, #4
 8009010:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    /* Reset bit 0 (after 8-bit swap) is equivalent to reset bit 24 (before 8-bit swap) */
    CRYP_DataIn(*(uint32_t*)(ctraddr) & 0xfeffffff);
 8009014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800901e:	4618      	mov	r0, r3
 8009020:	f000 f976 	bl	8009310 <CRYP_DataIn>
    
    /* Wait until the OFNE flag is reset */
    while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 8009024:	bf00      	nop
 8009026:	2004      	movs	r0, #4
 8009028:	f000 fb54 	bl	80096d4 <CRYP_GetFlagStatus>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d0f9      	beq.n	8009026 <CRYP_AES_CCM+0xc8a>
    {
    }
    
    /* Read the Authentaication TAG (MAC) in the IN FIFO */
    temptag[0] = CRYP_DataOut();
 8009032:	f000 f97b 	bl	800932c <CRYP_DataOut>
 8009036:	4603      	mov	r3, r0
 8009038:	617b      	str	r3, [r7, #20]
    temptag[1] = CRYP_DataOut();
 800903a:	f000 f977 	bl	800932c <CRYP_DataOut>
 800903e:	4603      	mov	r3, r0
 8009040:	61bb      	str	r3, [r7, #24]
    temptag[2] = CRYP_DataOut();
 8009042:	f000 f973 	bl	800932c <CRYP_DataOut>
 8009046:	4603      	mov	r3, r0
 8009048:	61fb      	str	r3, [r7, #28]
    temptag[3] = CRYP_DataOut();
 800904a:	f000 f96f 	bl	800932c <CRYP_DataOut>
 800904e:	4603      	mov	r3, r0
 8009050:	623b      	str	r3, [r7, #32]
  }
  
  /* Copy temporary authentication TAG in user TAG buffer */
  for(loopcounter = 0; (loopcounter < TAGSize); loopcounter++)
 8009052:	2300      	movs	r3, #0
 8009054:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009058:	e010      	b.n	800907c <CRYP_AES_CCM+0xce0>
  {
    /* Set the authentication TAG buffer */
    *((uint8_t*)tagaddr+loopcounter) = *((uint8_t*)temptag+loopcounter);
 800905a:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800905e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009062:	4413      	add	r3, r2
 8009064:	f107 0114 	add.w	r1, r7, #20
 8009068:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800906c:	440a      	add	r2, r1
 800906e:	7812      	ldrb	r2, [r2, #0]
 8009070:	701a      	strb	r2, [r3, #0]
    temptag[2] = CRYP_DataOut();
    temptag[3] = CRYP_DataOut();
  }
  
  /* Copy temporary authentication TAG in user TAG buffer */
  for(loopcounter = 0; (loopcounter < TAGSize); loopcounter++)
 8009072:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009076:	3301      	adds	r3, #1
 8009078:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800907c:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8009080:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009084:	429a      	cmp	r2, r3
 8009086:	d3e8      	bcc.n	800905a <CRYP_AES_CCM+0xcbe>
    /* Set the authentication TAG buffer */
    *((uint8_t*)tagaddr+loopcounter) = *((uint8_t*)temptag+loopcounter);
  }
  
  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8009088:	2000      	movs	r0, #0
 800908a:	f000 f925 	bl	80092d8 <CRYP_Cmd>

  return status;
 800908e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
}
 8009092:	4618      	mov	r0, r3
 8009094:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8009098:	46bd      	mov	sp, r7
 800909a:	bd90      	pop	{r4, r7, pc}

0800909c <CRYP_DeInit>:
  * @brief  Deinitializes the CRYP peripheral registers to their default reset values
  * @param  None
  * @retval None
  */
void CRYP_DeInit(void)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	af00      	add	r7, sp, #0
  /* Enable CRYP reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, ENABLE);
 80090a0:	2010      	movs	r0, #16
 80090a2:	2101      	movs	r1, #1
 80090a4:	f006 fe7c 	bl	800fda0 <RCC_AHB2PeriphResetCmd>

  /* Release CRYP from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, DISABLE);
 80090a8:	2010      	movs	r0, #16
 80090aa:	2100      	movs	r1, #0
 80090ac:	f006 fe78 	bl	800fda0 <RCC_AHB2PeriphResetCmd>
}
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop

080090b4 <CRYP_Init>:
  * @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure that contains
  *         the configuration information for the CRYP peripheral.
  * @retval None
  */
void CRYP_Init(CRYP_InitTypeDef* CRYP_InitStruct)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b083      	sub	sp, #12
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_CRYP_ALGOMODE(CRYP_InitStruct->CRYP_AlgoMode));
  assert_param(IS_CRYP_DATATYPE(CRYP_InitStruct->CRYP_DataType));
  assert_param(IS_CRYP_ALGODIR(CRYP_InitStruct->CRYP_AlgoDir));

  /* Select Algorithm mode*/  
  CRYP->CR &= ~CRYP_CR_ALGOMODE;
 80090bc:	4a25      	ldr	r2, [pc, #148]	; (8009154 <CRYP_Init+0xa0>)
 80090be:	4b25      	ldr	r3, [pc, #148]	; (8009154 <CRYP_Init+0xa0>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80090c6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80090ca:	6013      	str	r3, [r2, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoMode;
 80090cc:	4b21      	ldr	r3, [pc, #132]	; (8009154 <CRYP_Init+0xa0>)
 80090ce:	4a21      	ldr	r2, [pc, #132]	; (8009154 <CRYP_Init+0xa0>)
 80090d0:	6811      	ldr	r1, [r2, #0]
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	6852      	ldr	r2, [r2, #4]
 80090d6:	430a      	orrs	r2, r1
 80090d8:	601a      	str	r2, [r3, #0]

  /* Select dataType */ 
  CRYP->CR &= ~CRYP_CR_DATATYPE;
 80090da:	4b1e      	ldr	r3, [pc, #120]	; (8009154 <CRYP_Init+0xa0>)
 80090dc:	4a1d      	ldr	r2, [pc, #116]	; (8009154 <CRYP_Init+0xa0>)
 80090de:	6812      	ldr	r2, [r2, #0]
 80090e0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80090e4:	601a      	str	r2, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;
 80090e6:	4b1b      	ldr	r3, [pc, #108]	; (8009154 <CRYP_Init+0xa0>)
 80090e8:	4a1a      	ldr	r2, [pc, #104]	; (8009154 <CRYP_Init+0xa0>)
 80090ea:	6811      	ldr	r1, [r2, #0]
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	6892      	ldr	r2, [r2, #8]
 80090f0:	430a      	orrs	r2, r1
 80090f2:	601a      	str	r2, [r3, #0]

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_ECB) &&
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d018      	beq.n	800912e <CRYP_Init+0x7a>
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_CBC) &&
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	685b      	ldr	r3, [r3, #4]
  /* Select dataType */ 
  CRYP->CR &= ~CRYP_CR_DATATYPE;
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_ECB) &&
 8009100:	2b08      	cmp	r3, #8
 8009102:	d014      	beq.n	800912e <CRYP_Init+0x7a>
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_CBC) &&
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_DES_ECB) &&
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	685b      	ldr	r3, [r3, #4]
  CRYP->CR &= ~CRYP_CR_DATATYPE;
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_ECB) &&
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_CBC) &&
 8009108:	2b10      	cmp	r3, #16
 800910a:	d010      	beq.n	800912e <CRYP_Init+0x7a>
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_DES_ECB) &&
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_DES_CBC))
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	685b      	ldr	r3, [r3, #4]
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_ECB) &&
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_CBC) &&
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_DES_ECB) &&
 8009110:	2b18      	cmp	r3, #24
 8009112:	d00c      	beq.n	800912e <CRYP_Init+0x7a>
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_DES_CBC))
  {
    assert_param(IS_CRYP_KEYSIZE(CRYP_InitStruct->CRYP_KeySize));
    CRYP->CR &= ~CRYP_CR_KEYSIZE;
 8009114:	4b0f      	ldr	r3, [pc, #60]	; (8009154 <CRYP_Init+0xa0>)
 8009116:	4a0f      	ldr	r2, [pc, #60]	; (8009154 <CRYP_Init+0xa0>)
 8009118:	6812      	ldr	r2, [r2, #0]
 800911a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800911e:	601a      	str	r2, [r3, #0]
    CRYP->CR |= CRYP_InitStruct->CRYP_KeySize; /* Key size and value must be 
 8009120:	4b0c      	ldr	r3, [pc, #48]	; (8009154 <CRYP_Init+0xa0>)
 8009122:	4a0c      	ldr	r2, [pc, #48]	; (8009154 <CRYP_Init+0xa0>)
 8009124:	6811      	ldr	r1, [r2, #0]
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	68d2      	ldr	r2, [r2, #12]
 800912a:	430a      	orrs	r2, r1
 800912c:	601a      	str	r2, [r3, #0]
                                                  configured once the key has 
                                                  been prepared */
  }

  /* Select data Direction */ 
  CRYP->CR &= ~CRYP_CR_ALGODIR;
 800912e:	4b09      	ldr	r3, [pc, #36]	; (8009154 <CRYP_Init+0xa0>)
 8009130:	4a08      	ldr	r2, [pc, #32]	; (8009154 <CRYP_Init+0xa0>)
 8009132:	6812      	ldr	r2, [r2, #0]
 8009134:	f022 0204 	bic.w	r2, r2, #4
 8009138:	601a      	str	r2, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoDir;
 800913a:	4b06      	ldr	r3, [pc, #24]	; (8009154 <CRYP_Init+0xa0>)
 800913c:	4a05      	ldr	r2, [pc, #20]	; (8009154 <CRYP_Init+0xa0>)
 800913e:	6811      	ldr	r1, [r2, #0]
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	6812      	ldr	r2, [r2, #0]
 8009144:	430a      	orrs	r2, r1
 8009146:	601a      	str	r2, [r3, #0]
}
 8009148:	370c      	adds	r7, #12
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr
 8009152:	bf00      	nop
 8009154:	50060000 	.word	0x50060000

08009158 <CRYP_StructInit>:
  * @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void CRYP_StructInit(CRYP_InitTypeDef* CRYP_InitStruct)
{
 8009158:	b480      	push	{r7}
 800915a:	b083      	sub	sp, #12
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  /* Initialize the CRYP_AlgoDir member */
  CRYP_InitStruct->CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	601a      	str	r2, [r3, #0]

  /* initialize the CRYP_AlgoMode member */
  CRYP_InitStruct->CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	605a      	str	r2, [r3, #4]

  /* initialize the CRYP_DataType member */
  CRYP_InitStruct->CRYP_DataType = CRYP_DataType_32b;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	609a      	str	r2, [r3, #8]
  
  /* Initialize the CRYP_KeySize member */
  CRYP_InitStruct->CRYP_KeySize = CRYP_KeySize_128b;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	60da      	str	r2, [r3, #12]
}
 8009178:	370c      	adds	r7, #12
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr
 8009182:	bf00      	nop

08009184 <CRYP_KeyInit>:
  * @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure that
  *         contains the configuration information for the CRYP Keys.
  * @retval None
  */
void CRYP_KeyInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 8009184:	b480      	push	{r7}
 8009186:	b083      	sub	sp, #12
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  /* Key Initialisation */
  CRYP->K0LR = CRYP_KeyInitStruct->CRYP_Key0Left;
 800918c:	4b12      	ldr	r3, [pc, #72]	; (80091d8 <CRYP_KeyInit+0x54>)
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	6812      	ldr	r2, [r2, #0]
 8009192:	621a      	str	r2, [r3, #32]
  CRYP->K0RR = CRYP_KeyInitStruct->CRYP_Key0Right;
 8009194:	4b10      	ldr	r3, [pc, #64]	; (80091d8 <CRYP_KeyInit+0x54>)
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	6852      	ldr	r2, [r2, #4]
 800919a:	625a      	str	r2, [r3, #36]	; 0x24
  CRYP->K1LR = CRYP_KeyInitStruct->CRYP_Key1Left;
 800919c:	4b0e      	ldr	r3, [pc, #56]	; (80091d8 <CRYP_KeyInit+0x54>)
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	6892      	ldr	r2, [r2, #8]
 80091a2:	629a      	str	r2, [r3, #40]	; 0x28
  CRYP->K1RR = CRYP_KeyInitStruct->CRYP_Key1Right;
 80091a4:	4b0c      	ldr	r3, [pc, #48]	; (80091d8 <CRYP_KeyInit+0x54>)
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	68d2      	ldr	r2, [r2, #12]
 80091aa:	62da      	str	r2, [r3, #44]	; 0x2c
  CRYP->K2LR = CRYP_KeyInitStruct->CRYP_Key2Left;
 80091ac:	4b0a      	ldr	r3, [pc, #40]	; (80091d8 <CRYP_KeyInit+0x54>)
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	6912      	ldr	r2, [r2, #16]
 80091b2:	631a      	str	r2, [r3, #48]	; 0x30
  CRYP->K2RR = CRYP_KeyInitStruct->CRYP_Key2Right;
 80091b4:	4b08      	ldr	r3, [pc, #32]	; (80091d8 <CRYP_KeyInit+0x54>)
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	6952      	ldr	r2, [r2, #20]
 80091ba:	635a      	str	r2, [r3, #52]	; 0x34
  CRYP->K3LR = CRYP_KeyInitStruct->CRYP_Key3Left;
 80091bc:	4b06      	ldr	r3, [pc, #24]	; (80091d8 <CRYP_KeyInit+0x54>)
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	6992      	ldr	r2, [r2, #24]
 80091c2:	639a      	str	r2, [r3, #56]	; 0x38
  CRYP->K3RR = CRYP_KeyInitStruct->CRYP_Key3Right;
 80091c4:	4b04      	ldr	r3, [pc, #16]	; (80091d8 <CRYP_KeyInit+0x54>)
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	69d2      	ldr	r2, [r2, #28]
 80091ca:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80091cc:	370c      	adds	r7, #12
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr
 80091d6:	bf00      	nop
 80091d8:	50060000 	.word	0x50060000

080091dc <CRYP_KeyStructInit>:
  * @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void CRYP_KeyStructInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  CRYP_KeyInitStruct->CRYP_Key0Left  = 0;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2200      	movs	r2, #0
 80091e8:	601a      	str	r2, [r3, #0]
  CRYP_KeyInitStruct->CRYP_Key0Right = 0;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	605a      	str	r2, [r3, #4]
  CRYP_KeyInitStruct->CRYP_Key1Left  = 0;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	609a      	str	r2, [r3, #8]
  CRYP_KeyInitStruct->CRYP_Key1Right = 0;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	60da      	str	r2, [r3, #12]
  CRYP_KeyInitStruct->CRYP_Key2Left  = 0;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	611a      	str	r2, [r3, #16]
  CRYP_KeyInitStruct->CRYP_Key2Right = 0;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	615a      	str	r2, [r3, #20]
  CRYP_KeyInitStruct->CRYP_Key3Left  = 0;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	619a      	str	r2, [r3, #24]
  CRYP_KeyInitStruct->CRYP_Key3Right = 0;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2200      	movs	r2, #0
 8009212:	61da      	str	r2, [r3, #28]
}
 8009214:	370c      	adds	r7, #12
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop

08009220 <CRYP_IVInit>:
  * @param  CRYP_IVInitStruct: pointer to a CRYP_IVInitTypeDef structure that contains
  *         the configuration information for the CRYP Initialization Vectors(IV).
  * @retval None
  */
void CRYP_IVInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
{
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  CRYP->IV0LR = CRYP_IVInitStruct->CRYP_IV0Left;
 8009228:	4b0a      	ldr	r3, [pc, #40]	; (8009254 <CRYP_IVInit+0x34>)
 800922a:	687a      	ldr	r2, [r7, #4]
 800922c:	6812      	ldr	r2, [r2, #0]
 800922e:	641a      	str	r2, [r3, #64]	; 0x40
  CRYP->IV0RR = CRYP_IVInitStruct->CRYP_IV0Right;
 8009230:	4b08      	ldr	r3, [pc, #32]	; (8009254 <CRYP_IVInit+0x34>)
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	6852      	ldr	r2, [r2, #4]
 8009236:	645a      	str	r2, [r3, #68]	; 0x44
  CRYP->IV1LR = CRYP_IVInitStruct->CRYP_IV1Left;
 8009238:	4b06      	ldr	r3, [pc, #24]	; (8009254 <CRYP_IVInit+0x34>)
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	6892      	ldr	r2, [r2, #8]
 800923e:	649a      	str	r2, [r3, #72]	; 0x48
  CRYP->IV1RR = CRYP_IVInitStruct->CRYP_IV1Right;
 8009240:	4b04      	ldr	r3, [pc, #16]	; (8009254 <CRYP_IVInit+0x34>)
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	68d2      	ldr	r2, [r2, #12]
 8009246:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8009248:	370c      	adds	r7, #12
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr
 8009252:	bf00      	nop
 8009254:	50060000 	.word	0x50060000

08009258 <CRYP_IVStructInit>:
  * @param  CRYP_IVInitStruct: pointer to a CRYP_IVInitTypeDef Initialization 
  *         Vectors(IV) structure which will be initialized.
  * @retval None
  */
void CRYP_IVStructInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  CRYP_IVInitStruct->CRYP_IV0Left  = 0;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	601a      	str	r2, [r3, #0]
  CRYP_IVInitStruct->CRYP_IV0Right = 0;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2200      	movs	r2, #0
 800926a:	605a      	str	r2, [r3, #4]
  CRYP_IVInitStruct->CRYP_IV1Left  = 0;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2200      	movs	r2, #0
 8009270:	609a      	str	r2, [r3, #8]
  CRYP_IVInitStruct->CRYP_IV1Right = 0;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2200      	movs	r2, #0
 8009276:	60da      	str	r2, [r3, #12]
}
 8009278:	370c      	adds	r7, #12
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr
 8009282:	bf00      	nop

08009284 <CRYP_PhaseConfig>:
  *            @arg CRYP_Phase_Payload: Payload phase
  *            @arg CRYP_Phase_Final: Final phase 
  * @retval None
  */
void CRYP_PhaseConfig(uint32_t CRYP_Phase)
{ uint32_t tempcr = 0;
 8009284:	b480      	push	{r7}
 8009286:	b085      	sub	sp, #20
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	2300      	movs	r3, #0
 800928e:	60fb      	str	r3, [r7, #12]

  /* Check the parameter */
  assert_param(IS_CRYP_PHASE(CRYP_Phase));

  /* Get the CR register */
  tempcr = CRYP->CR;
 8009290:	4b09      	ldr	r3, [pc, #36]	; (80092b8 <CRYP_PhaseConfig+0x34>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	60fb      	str	r3, [r7, #12]
  
  /* Reset the phase configuration bits: GCMP_CCMPH */
  tempcr &= (uint32_t)(~CRYP_CR_GCM_CCMPH);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800929c:	60fb      	str	r3, [r7, #12]
  /* Set the selected phase */
  tempcr |= (uint32_t)CRYP_Phase;
 800929e:	68fa      	ldr	r2, [r7, #12]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	4313      	orrs	r3, r2
 80092a4:	60fb      	str	r3, [r7, #12]

  /* Set the CR register */ 
  CRYP->CR = tempcr;    
 80092a6:	4b04      	ldr	r3, [pc, #16]	; (80092b8 <CRYP_PhaseConfig+0x34>)
 80092a8:	68fa      	ldr	r2, [r7, #12]
 80092aa:	601a      	str	r2, [r3, #0]
}
 80092ac:	3714      	adds	r7, #20
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr
 80092b6:	bf00      	nop
 80092b8:	50060000 	.word	0x50060000

080092bc <CRYP_FIFOFlush>:
  * @note   The FIFOs must be flushed only when BUSY flag is reset.  
  * @param  None
  * @retval None
  */
void CRYP_FIFOFlush(void)
{
 80092bc:	b480      	push	{r7}
 80092be:	af00      	add	r7, sp, #0
  /* Reset the read and write pointers of the FIFOs */
  CRYP->CR |= CRYP_CR_FFLUSH;
 80092c0:	4b04      	ldr	r3, [pc, #16]	; (80092d4 <CRYP_FIFOFlush+0x18>)
 80092c2:	4a04      	ldr	r2, [pc, #16]	; (80092d4 <CRYP_FIFOFlush+0x18>)
 80092c4:	6812      	ldr	r2, [r2, #0]
 80092c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80092ca:	601a      	str	r2, [r3, #0]
}
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr
 80092d4:	50060000 	.word	0x50060000

080092d8 <CRYP_Cmd>:
  * @param  NewState: new state of the CRYP peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_Cmd(FunctionalState NewState)
{
 80092d8:	b480      	push	{r7}
 80092da:	b083      	sub	sp, #12
 80092dc:	af00      	add	r7, sp, #0
 80092de:	4603      	mov	r3, r0
 80092e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80092e2:	79fb      	ldrb	r3, [r7, #7]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d006      	beq.n	80092f6 <CRYP_Cmd+0x1e>
  {
    /* Enable the Cryptographic processor */
    CRYP->CR |= CRYP_CR_CRYPEN;
 80092e8:	4b08      	ldr	r3, [pc, #32]	; (800930c <CRYP_Cmd+0x34>)
 80092ea:	4a08      	ldr	r2, [pc, #32]	; (800930c <CRYP_Cmd+0x34>)
 80092ec:	6812      	ldr	r2, [r2, #0]
 80092ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80092f2:	601a      	str	r2, [r3, #0]
 80092f4:	e005      	b.n	8009302 <CRYP_Cmd+0x2a>
  }
  else
  {
    /* Disable the Cryptographic processor */
    CRYP->CR &= ~CRYP_CR_CRYPEN;
 80092f6:	4b05      	ldr	r3, [pc, #20]	; (800930c <CRYP_Cmd+0x34>)
 80092f8:	4a04      	ldr	r2, [pc, #16]	; (800930c <CRYP_Cmd+0x34>)
 80092fa:	6812      	ldr	r2, [r2, #0]
 80092fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009300:	601a      	str	r2, [r3, #0]
  }
}
 8009302:	370c      	adds	r7, #12
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr
 800930c:	50060000 	.word	0x50060000

08009310 <CRYP_DataIn>:
  *         the FIFO must be flushed (using CRYP_FIFOFlush() function).  
  * @param  Data: data to write in Data Input register
  * @retval None
  */
void CRYP_DataIn(uint32_t Data)
{
 8009310:	b480      	push	{r7}
 8009312:	b083      	sub	sp, #12
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  CRYP->DR = Data;
 8009318:	4b03      	ldr	r3, [pc, #12]	; (8009328 <CRYP_DataIn+0x18>)
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	609a      	str	r2, [r3, #8]
}
 800931e:	370c      	adds	r7, #12
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr
 8009328:	50060000 	.word	0x50060000

0800932c <CRYP_DataOut>:
  * @brief  Returns the last data entered into the output FIFO.
  * @param  None
  * @retval Last data entered into the output FIFO.
  */
uint32_t CRYP_DataOut(void)
{
 800932c:	b480      	push	{r7}
 800932e:	af00      	add	r7, sp, #0
  return CRYP->DOUT;
 8009330:	4b03      	ldr	r3, [pc, #12]	; (8009340 <CRYP_DataOut+0x14>)
 8009332:	68db      	ldr	r3, [r3, #12]
}
 8009334:	4618      	mov	r0, r3
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr
 800933e:	bf00      	nop
 8009340:	50060000 	.word	0x50060000

08009344 <CRYP_SaveContext>:
  *         contains the configuration information for the CRYP Keys.  
  * @retval None
  */
ErrorStatus CRYP_SaveContext(CRYP_Context* CRYP_ContextSave,
                             CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 8009344:	b480      	push	{r7}
 8009346:	b087      	sub	sp, #28
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
  __IO uint32_t timeout = 0;
 800934e:	2300      	movs	r3, #0
 8009350:	60bb      	str	r3, [r7, #8]
  uint32_t ckeckmask = 0, bitstatus;    
 8009352:	2300      	movs	r3, #0
 8009354:	617b      	str	r3, [r7, #20]
  ErrorStatus status = ERROR;
 8009356:	2300      	movs	r3, #0
 8009358:	74fb      	strb	r3, [r7, #19]

  /* Stop DMA transfers on the IN FIFO by clearing the DIEN bit in the CRYP_DMACR */
  CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DIEN;
 800935a:	4b5c      	ldr	r3, [pc, #368]	; (80094cc <CRYP_SaveContext+0x188>)
 800935c:	4a5b      	ldr	r2, [pc, #364]	; (80094cc <CRYP_SaveContext+0x188>)
 800935e:	6912      	ldr	r2, [r2, #16]
 8009360:	f022 0201 	bic.w	r2, r2, #1
 8009364:	611a      	str	r2, [r3, #16]
    
  /* Wait until both the IN and OUT FIFOs are empty  
    (IFEM=1 and OFNE=0 in the CRYP_SR register) and the 
     BUSY bit is cleared. */

  if ((CRYP->CR & (uint32_t)(CRYP_CR_ALGOMODE_TDES_ECB | CRYP_CR_ALGOMODE_TDES_CBC)) != (uint32_t)0 )/* TDES */
 8009366:	4b59      	ldr	r3, [pc, #356]	; (80094cc <CRYP_SaveContext+0x188>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f003 0308 	and.w	r3, r3, #8
 800936e:	2b00      	cmp	r3, #0
 8009370:	d002      	beq.n	8009378 <CRYP_SaveContext+0x34>
  { 
    ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY ;
 8009372:	2311      	movs	r3, #17
 8009374:	617b      	str	r3, [r7, #20]
 8009376:	e001      	b.n	800937c <CRYP_SaveContext+0x38>
  }
  else /* AES or DES */
  {
    ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY | CRYP_SR_OFNE;
 8009378:	2315      	movs	r3, #21
 800937a:	617b      	str	r3, [r7, #20]
  }           
   
  do 
  {
    bitstatus = CRYP->SR & ckeckmask;
 800937c:	4b53      	ldr	r3, [pc, #332]	; (80094cc <CRYP_SaveContext+0x188>)
 800937e:	685a      	ldr	r2, [r3, #4]
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	4013      	ands	r3, r2
 8009384:	60fb      	str	r3, [r7, #12]
    timeout++;
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	3301      	adds	r3, #1
 800938a:	60bb      	str	r3, [r7, #8]
  }
  while ((timeout != MAX_TIMEOUT) && (bitstatus != CRYP_SR_IFEM));
 800938c:	68ba      	ldr	r2, [r7, #8]
 800938e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009392:	429a      	cmp	r2, r3
 8009394:	d002      	beq.n	800939c <CRYP_SaveContext+0x58>
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2b01      	cmp	r3, #1
 800939a:	d1ef      	bne.n	800937c <CRYP_SaveContext+0x38>
     
  if ((CRYP->SR & ckeckmask) != CRYP_SR_IFEM)
 800939c:	4b4b      	ldr	r3, [pc, #300]	; (80094cc <CRYP_SaveContext+0x188>)
 800939e:	685a      	ldr	r2, [r3, #4]
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	4013      	ands	r3, r2
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d002      	beq.n	80093ae <CRYP_SaveContext+0x6a>
  {
    status = ERROR;
 80093a8:	2300      	movs	r3, #0
 80093aa:	74fb      	strb	r3, [r7, #19]
 80093ac:	e087      	b.n	80094be <CRYP_SaveContext+0x17a>
  {      
    /* Stop DMA transfers on the OUT FIFO by 
       - writing the DOEN bit to 0 in the CRYP_DMACR register 
       - and clear the CRYPEN bit. */

    CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DOEN;
 80093ae:	4b47      	ldr	r3, [pc, #284]	; (80094cc <CRYP_SaveContext+0x188>)
 80093b0:	4a46      	ldr	r2, [pc, #280]	; (80094cc <CRYP_SaveContext+0x188>)
 80093b2:	6912      	ldr	r2, [r2, #16]
 80093b4:	f022 0202 	bic.w	r2, r2, #2
 80093b8:	611a      	str	r2, [r3, #16]
    CRYP->CR &= ~(uint32_t)CRYP_CR_CRYPEN;
 80093ba:	4b44      	ldr	r3, [pc, #272]	; (80094cc <CRYP_SaveContext+0x188>)
 80093bc:	4a43      	ldr	r2, [pc, #268]	; (80094cc <CRYP_SaveContext+0x188>)
 80093be:	6812      	ldr	r2, [r2, #0]
 80093c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80093c4:	601a      	str	r2, [r3, #0]

    /* Save the current configuration (bit 19, bit[17:16] and bits [9:2] in the CRYP_CR register) */
    CRYP_ContextSave->CR_CurrentConfig  = CRYP->CR & (CRYP_CR_GCM_CCMPH |
 80093c6:	4b41      	ldr	r3, [pc, #260]	; (80094cc <CRYP_SaveContext+0x188>)
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	4b41      	ldr	r3, [pc, #260]	; (80094d0 <CRYP_SaveContext+0x18c>)
 80093cc:	4013      	ands	r3, r2
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	6013      	str	r3, [r2, #0]
                                                      CRYP_CR_DATATYPE |
                                                      CRYP_CR_ALGOMODE |
                                                      CRYP_CR_ALGODIR);

    /* and, if not in ECB mode, the initialization vectors. */
    CRYP_ContextSave->CRYP_IV0LR = CRYP->IV0LR;
 80093d2:	4b3e      	ldr	r3, [pc, #248]	; (80094cc <CRYP_SaveContext+0x188>)
 80093d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	605a      	str	r2, [r3, #4]
    CRYP_ContextSave->CRYP_IV0RR = CRYP->IV0RR;
 80093da:	4b3c      	ldr	r3, [pc, #240]	; (80094cc <CRYP_SaveContext+0x188>)
 80093dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	609a      	str	r2, [r3, #8]
    CRYP_ContextSave->CRYP_IV1LR = CRYP->IV1LR;
 80093e2:	4b3a      	ldr	r3, [pc, #232]	; (80094cc <CRYP_SaveContext+0x188>)
 80093e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	60da      	str	r2, [r3, #12]
    CRYP_ContextSave->CRYP_IV1RR = CRYP->IV1RR;
 80093ea:	4b38      	ldr	r3, [pc, #224]	; (80094cc <CRYP_SaveContext+0x188>)
 80093ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	611a      	str	r2, [r3, #16]

    /* save The key value */
    CRYP_ContextSave->CRYP_K0LR = CRYP_KeyInitStruct->CRYP_Key0Left; 
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	615a      	str	r2, [r3, #20]
    CRYP_ContextSave->CRYP_K0RR = CRYP_KeyInitStruct->CRYP_Key0Right; 
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	685a      	ldr	r2, [r3, #4]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	619a      	str	r2, [r3, #24]
    CRYP_ContextSave->CRYP_K1LR = CRYP_KeyInitStruct->CRYP_Key1Left; 
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	689a      	ldr	r2, [r3, #8]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	61da      	str	r2, [r3, #28]
    CRYP_ContextSave->CRYP_K1RR = CRYP_KeyInitStruct->CRYP_Key1Right; 
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	68da      	ldr	r2, [r3, #12]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	621a      	str	r2, [r3, #32]
    CRYP_ContextSave->CRYP_K2LR = CRYP_KeyInitStruct->CRYP_Key2Left; 
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	691a      	ldr	r2, [r3, #16]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	625a      	str	r2, [r3, #36]	; 0x24
    CRYP_ContextSave->CRYP_K2RR = CRYP_KeyInitStruct->CRYP_Key2Right; 
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	695a      	ldr	r2, [r3, #20]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	629a      	str	r2, [r3, #40]	; 0x28
    CRYP_ContextSave->CRYP_K3LR = CRYP_KeyInitStruct->CRYP_Key3Left; 
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	699a      	ldr	r2, [r3, #24]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	62da      	str	r2, [r3, #44]	; 0x2c
    CRYP_ContextSave->CRYP_K3RR = CRYP_KeyInitStruct->CRYP_Key3Right; 
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	69da      	ldr	r2, [r3, #28]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	631a      	str	r2, [r3, #48]	; 0x30

    /* Save the content of context swap registers */
    CRYP_ContextSave->CRYP_CSGCMCCMR[0] = CRYP->CSGCMCCM0R;
 8009432:	4b26      	ldr	r3, [pc, #152]	; (80094cc <CRYP_SaveContext+0x188>)
 8009434:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	635a      	str	r2, [r3, #52]	; 0x34
    CRYP_ContextSave->CRYP_CSGCMCCMR[1] = CRYP->CSGCMCCM1R;
 800943a:	4b24      	ldr	r3, [pc, #144]	; (80094cc <CRYP_SaveContext+0x188>)
 800943c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	639a      	str	r2, [r3, #56]	; 0x38
    CRYP_ContextSave->CRYP_CSGCMCCMR[2] = CRYP->CSGCMCCM2R;
 8009442:	4b22      	ldr	r3, [pc, #136]	; (80094cc <CRYP_SaveContext+0x188>)
 8009444:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	63da      	str	r2, [r3, #60]	; 0x3c
    CRYP_ContextSave->CRYP_CSGCMCCMR[3] = CRYP->CSGCMCCM3R;
 800944a:	4b20      	ldr	r3, [pc, #128]	; (80094cc <CRYP_SaveContext+0x188>)
 800944c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	641a      	str	r2, [r3, #64]	; 0x40
    CRYP_ContextSave->CRYP_CSGCMCCMR[4] = CRYP->CSGCMCCM4R;
 8009452:	4b1e      	ldr	r3, [pc, #120]	; (80094cc <CRYP_SaveContext+0x188>)
 8009454:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	645a      	str	r2, [r3, #68]	; 0x44
    CRYP_ContextSave->CRYP_CSGCMCCMR[5] = CRYP->CSGCMCCM5R;
 800945a:	4b1c      	ldr	r3, [pc, #112]	; (80094cc <CRYP_SaveContext+0x188>)
 800945c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	649a      	str	r2, [r3, #72]	; 0x48
    CRYP_ContextSave->CRYP_CSGCMCCMR[6] = CRYP->CSGCMCCM6R;
 8009462:	4b1a      	ldr	r3, [pc, #104]	; (80094cc <CRYP_SaveContext+0x188>)
 8009464:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	64da      	str	r2, [r3, #76]	; 0x4c
    CRYP_ContextSave->CRYP_CSGCMCCMR[7] = CRYP->CSGCMCCM7R;
 800946a:	4b18      	ldr	r3, [pc, #96]	; (80094cc <CRYP_SaveContext+0x188>)
 800946c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	651a      	str	r2, [r3, #80]	; 0x50
    
    CRYP_ContextSave->CRYP_CSGCMR[0] = CRYP->CSGCM0R;
 8009472:	4b16      	ldr	r3, [pc, #88]	; (80094cc <CRYP_SaveContext+0x188>)
 8009474:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	655a      	str	r2, [r3, #84]	; 0x54
    CRYP_ContextSave->CRYP_CSGCMR[1] = CRYP->CSGCM1R;
 800947a:	4b14      	ldr	r3, [pc, #80]	; (80094cc <CRYP_SaveContext+0x188>)
 800947c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	659a      	str	r2, [r3, #88]	; 0x58
    CRYP_ContextSave->CRYP_CSGCMR[2] = CRYP->CSGCM2R;
 8009482:	4b12      	ldr	r3, [pc, #72]	; (80094cc <CRYP_SaveContext+0x188>)
 8009484:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	65da      	str	r2, [r3, #92]	; 0x5c
    CRYP_ContextSave->CRYP_CSGCMR[3] = CRYP->CSGCM3R;
 800948a:	4b10      	ldr	r3, [pc, #64]	; (80094cc <CRYP_SaveContext+0x188>)
 800948c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	661a      	str	r2, [r3, #96]	; 0x60
    CRYP_ContextSave->CRYP_CSGCMR[4] = CRYP->CSGCM4R;
 8009492:	4b0e      	ldr	r3, [pc, #56]	; (80094cc <CRYP_SaveContext+0x188>)
 8009494:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	665a      	str	r2, [r3, #100]	; 0x64
    CRYP_ContextSave->CRYP_CSGCMR[5] = CRYP->CSGCM5R;
 800949c:	4b0b      	ldr	r3, [pc, #44]	; (80094cc <CRYP_SaveContext+0x188>)
 800949e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	669a      	str	r2, [r3, #104]	; 0x68
    CRYP_ContextSave->CRYP_CSGCMR[6] = CRYP->CSGCM6R;
 80094a6:	4b09      	ldr	r3, [pc, #36]	; (80094cc <CRYP_SaveContext+0x188>)
 80094a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	66da      	str	r2, [r3, #108]	; 0x6c
    CRYP_ContextSave->CRYP_CSGCMR[7] = CRYP->CSGCM7R;
 80094b0:	4b06      	ldr	r3, [pc, #24]	; (80094cc <CRYP_SaveContext+0x188>)
 80094b2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	671a      	str	r2, [r3, #112]	; 0x70
    
   /* When needed, save the DMA status (pointers for IN and OUT messages, 
      number of remaining bytes, etc.) */
     
    status = SUCCESS;
 80094ba:	2301      	movs	r3, #1
 80094bc:	74fb      	strb	r3, [r7, #19]
  }

   return status;
 80094be:	7cfb      	ldrb	r3, [r7, #19]
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	371c      	adds	r7, #28
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr
 80094cc:	50060000 	.word	0x50060000
 80094d0:	000b03fc 	.word	0x000b03fc

080094d4 <CRYP_RestoreContext>:
  * @note   The data that were saved during context saving must be rewrited into
  *         the IN FIFO.
  * @retval None
  */
void CRYP_RestoreContext(CRYP_Context* CRYP_ContextRestore)  
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]

  /* Configure the processor with the saved configuration */
  CRYP->CR = CRYP_ContextRestore->CR_CurrentConfig;
 80094dc:	4b41      	ldr	r3, [pc, #260]	; (80095e4 <CRYP_RestoreContext+0x110>)
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	6812      	ldr	r2, [r2, #0]
 80094e2:	601a      	str	r2, [r3, #0]

  /* restore The key value */
  CRYP->K0LR = CRYP_ContextRestore->CRYP_K0LR; 
 80094e4:	4b3f      	ldr	r3, [pc, #252]	; (80095e4 <CRYP_RestoreContext+0x110>)
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	6952      	ldr	r2, [r2, #20]
 80094ea:	621a      	str	r2, [r3, #32]
  CRYP->K0RR = CRYP_ContextRestore->CRYP_K0RR;
 80094ec:	4b3d      	ldr	r3, [pc, #244]	; (80095e4 <CRYP_RestoreContext+0x110>)
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	6992      	ldr	r2, [r2, #24]
 80094f2:	625a      	str	r2, [r3, #36]	; 0x24
  CRYP->K1LR = CRYP_ContextRestore->CRYP_K1LR;
 80094f4:	4b3b      	ldr	r3, [pc, #236]	; (80095e4 <CRYP_RestoreContext+0x110>)
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	69d2      	ldr	r2, [r2, #28]
 80094fa:	629a      	str	r2, [r3, #40]	; 0x28
  CRYP->K1RR = CRYP_ContextRestore->CRYP_K1RR;
 80094fc:	4b39      	ldr	r3, [pc, #228]	; (80095e4 <CRYP_RestoreContext+0x110>)
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	6a12      	ldr	r2, [r2, #32]
 8009502:	62da      	str	r2, [r3, #44]	; 0x2c
  CRYP->K2LR = CRYP_ContextRestore->CRYP_K2LR;
 8009504:	4b37      	ldr	r3, [pc, #220]	; (80095e4 <CRYP_RestoreContext+0x110>)
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800950a:	631a      	str	r2, [r3, #48]	; 0x30
  CRYP->K2RR = CRYP_ContextRestore->CRYP_K2RR;
 800950c:	4b35      	ldr	r3, [pc, #212]	; (80095e4 <CRYP_RestoreContext+0x110>)
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009512:	635a      	str	r2, [r3, #52]	; 0x34
  CRYP->K3LR = CRYP_ContextRestore->CRYP_K3LR;
 8009514:	4b33      	ldr	r3, [pc, #204]	; (80095e4 <CRYP_RestoreContext+0x110>)
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800951a:	639a      	str	r2, [r3, #56]	; 0x38
  CRYP->K3RR = CRYP_ContextRestore->CRYP_K3RR;
 800951c:	4b31      	ldr	r3, [pc, #196]	; (80095e4 <CRYP_RestoreContext+0x110>)
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009522:	63da      	str	r2, [r3, #60]	; 0x3c

  /* and the initialization vectors. */
  CRYP->IV0LR = CRYP_ContextRestore->CRYP_IV0LR;
 8009524:	4b2f      	ldr	r3, [pc, #188]	; (80095e4 <CRYP_RestoreContext+0x110>)
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	6852      	ldr	r2, [r2, #4]
 800952a:	641a      	str	r2, [r3, #64]	; 0x40
  CRYP->IV0RR = CRYP_ContextRestore->CRYP_IV0RR;
 800952c:	4b2d      	ldr	r3, [pc, #180]	; (80095e4 <CRYP_RestoreContext+0x110>)
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	6892      	ldr	r2, [r2, #8]
 8009532:	645a      	str	r2, [r3, #68]	; 0x44
  CRYP->IV1LR = CRYP_ContextRestore->CRYP_IV1LR;
 8009534:	4b2b      	ldr	r3, [pc, #172]	; (80095e4 <CRYP_RestoreContext+0x110>)
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	68d2      	ldr	r2, [r2, #12]
 800953a:	649a      	str	r2, [r3, #72]	; 0x48
  CRYP->IV1RR = CRYP_ContextRestore->CRYP_IV1RR;
 800953c:	4b29      	ldr	r3, [pc, #164]	; (80095e4 <CRYP_RestoreContext+0x110>)
 800953e:	687a      	ldr	r2, [r7, #4]
 8009540:	6912      	ldr	r2, [r2, #16]
 8009542:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Restore the content of context swap registers */
  CRYP->CSGCMCCM0R = CRYP_ContextRestore->CRYP_CSGCMCCMR[0];
 8009544:	4b27      	ldr	r3, [pc, #156]	; (80095e4 <CRYP_RestoreContext+0x110>)
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800954a:	651a      	str	r2, [r3, #80]	; 0x50
  CRYP->CSGCMCCM1R = CRYP_ContextRestore->CRYP_CSGCMCCMR[1];
 800954c:	4b25      	ldr	r3, [pc, #148]	; (80095e4 <CRYP_RestoreContext+0x110>)
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009552:	655a      	str	r2, [r3, #84]	; 0x54
  CRYP->CSGCMCCM2R = CRYP_ContextRestore->CRYP_CSGCMCCMR[2];
 8009554:	4b23      	ldr	r3, [pc, #140]	; (80095e4 <CRYP_RestoreContext+0x110>)
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800955a:	659a      	str	r2, [r3, #88]	; 0x58
  CRYP->CSGCMCCM3R = CRYP_ContextRestore->CRYP_CSGCMCCMR[3];
 800955c:	4b21      	ldr	r3, [pc, #132]	; (80095e4 <CRYP_RestoreContext+0x110>)
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009562:	65da      	str	r2, [r3, #92]	; 0x5c
  CRYP->CSGCMCCM4R = CRYP_ContextRestore->CRYP_CSGCMCCMR[4];
 8009564:	4b1f      	ldr	r3, [pc, #124]	; (80095e4 <CRYP_RestoreContext+0x110>)
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800956a:	661a      	str	r2, [r3, #96]	; 0x60
  CRYP->CSGCMCCM5R = CRYP_ContextRestore->CRYP_CSGCMCCMR[5];
 800956c:	4b1d      	ldr	r3, [pc, #116]	; (80095e4 <CRYP_RestoreContext+0x110>)
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009572:	665a      	str	r2, [r3, #100]	; 0x64
  CRYP->CSGCMCCM6R = CRYP_ContextRestore->CRYP_CSGCMCCMR[6];
 8009574:	4b1b      	ldr	r3, [pc, #108]	; (80095e4 <CRYP_RestoreContext+0x110>)
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800957a:	669a      	str	r2, [r3, #104]	; 0x68
  CRYP->CSGCMCCM7R = CRYP_ContextRestore->CRYP_CSGCMCCMR[7];
 800957c:	4b19      	ldr	r3, [pc, #100]	; (80095e4 <CRYP_RestoreContext+0x110>)
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009582:	66da      	str	r2, [r3, #108]	; 0x6c
  
  CRYP->CSGCM0R = CRYP_ContextRestore->CRYP_CSGCMR[0];
 8009584:	4b17      	ldr	r3, [pc, #92]	; (80095e4 <CRYP_RestoreContext+0x110>)
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800958a:	671a      	str	r2, [r3, #112]	; 0x70
  CRYP->CSGCM1R = CRYP_ContextRestore->CRYP_CSGCMR[1];
 800958c:	4b15      	ldr	r3, [pc, #84]	; (80095e4 <CRYP_RestoreContext+0x110>)
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009592:	675a      	str	r2, [r3, #116]	; 0x74
  CRYP->CSGCM2R = CRYP_ContextRestore->CRYP_CSGCMR[2];
 8009594:	4b13      	ldr	r3, [pc, #76]	; (80095e4 <CRYP_RestoreContext+0x110>)
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800959a:	679a      	str	r2, [r3, #120]	; 0x78
  CRYP->CSGCM3R = CRYP_ContextRestore->CRYP_CSGCMR[3];
 800959c:	4b11      	ldr	r3, [pc, #68]	; (80095e4 <CRYP_RestoreContext+0x110>)
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80095a2:	67da      	str	r2, [r3, #124]	; 0x7c
  CRYP->CSGCM4R = CRYP_ContextRestore->CRYP_CSGCMR[4];
 80095a4:	4b0f      	ldr	r3, [pc, #60]	; (80095e4 <CRYP_RestoreContext+0x110>)
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80095aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  CRYP->CSGCM5R = CRYP_ContextRestore->CRYP_CSGCMR[5];
 80095ae:	4b0d      	ldr	r3, [pc, #52]	; (80095e4 <CRYP_RestoreContext+0x110>)
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80095b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  CRYP->CSGCM6R = CRYP_ContextRestore->CRYP_CSGCMR[6];
 80095b8:	4b0a      	ldr	r3, [pc, #40]	; (80095e4 <CRYP_RestoreContext+0x110>)
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80095be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  CRYP->CSGCM7R = CRYP_ContextRestore->CRYP_CSGCMR[7];
 80095c2:	4b08      	ldr	r3, [pc, #32]	; (80095e4 <CRYP_RestoreContext+0x110>)
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80095c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  
  /* Enable the cryptographic processor */
  CRYP->CR |= CRYP_CR_CRYPEN;
 80095cc:	4b05      	ldr	r3, [pc, #20]	; (80095e4 <CRYP_RestoreContext+0x110>)
 80095ce:	4a05      	ldr	r2, [pc, #20]	; (80095e4 <CRYP_RestoreContext+0x110>)
 80095d0:	6812      	ldr	r2, [r2, #0]
 80095d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80095d6:	601a      	str	r2, [r3, #0]
}
 80095d8:	370c      	adds	r7, #12
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr
 80095e2:	bf00      	nop
 80095e4:	50060000 	.word	0x50060000

080095e8 <CRYP_DMACmd>:
  * @param  NewState: new state of the selected CRYP DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_DMACmd(uint8_t CRYP_DMAReq, FunctionalState NewState)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	4602      	mov	r2, r0
 80095f0:	460b      	mov	r3, r1
 80095f2:	71fa      	strb	r2, [r7, #7]
 80095f4:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_CRYP_DMAREQ(CRYP_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80095f6:	79bb      	ldrb	r3, [r7, #6]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d006      	beq.n	800960a <CRYP_DMACmd+0x22>
  {
    /* Enable the selected CRYP DMA request */
    CRYP->DMACR |= CRYP_DMAReq;
 80095fc:	4b09      	ldr	r3, [pc, #36]	; (8009624 <CRYP_DMACmd+0x3c>)
 80095fe:	4a09      	ldr	r2, [pc, #36]	; (8009624 <CRYP_DMACmd+0x3c>)
 8009600:	6911      	ldr	r1, [r2, #16]
 8009602:	79fa      	ldrb	r2, [r7, #7]
 8009604:	430a      	orrs	r2, r1
 8009606:	611a      	str	r2, [r3, #16]
 8009608:	e007      	b.n	800961a <CRYP_DMACmd+0x32>
  }
  else
  {
    /* Disable the selected CRYP DMA request */
    CRYP->DMACR &= (uint8_t)~CRYP_DMAReq;
 800960a:	4b06      	ldr	r3, [pc, #24]	; (8009624 <CRYP_DMACmd+0x3c>)
 800960c:	4a05      	ldr	r2, [pc, #20]	; (8009624 <CRYP_DMACmd+0x3c>)
 800960e:	6911      	ldr	r1, [r2, #16]
 8009610:	79fa      	ldrb	r2, [r7, #7]
 8009612:	43d2      	mvns	r2, r2
 8009614:	b2d2      	uxtb	r2, r2
 8009616:	400a      	ands	r2, r1
 8009618:	611a      	str	r2, [r3, #16]
  }
}
 800961a:	370c      	adds	r7, #12
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr
 8009624:	50060000 	.word	0x50060000

08009628 <CRYP_ITConfig>:
  * @param  NewState: new state of the specified CRYP interrupt.
  *           This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_ITConfig(uint8_t CRYP_IT, FunctionalState NewState)
{
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	4602      	mov	r2, r0
 8009630:	460b      	mov	r3, r1
 8009632:	71fa      	strb	r2, [r7, #7]
 8009634:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_CRYP_CONFIG_IT(CRYP_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009636:	79bb      	ldrb	r3, [r7, #6]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d006      	beq.n	800964a <CRYP_ITConfig+0x22>
  {
    /* Enable the selected CRYP interrupt */
    CRYP->IMSCR |= CRYP_IT;
 800963c:	4b09      	ldr	r3, [pc, #36]	; (8009664 <CRYP_ITConfig+0x3c>)
 800963e:	4a09      	ldr	r2, [pc, #36]	; (8009664 <CRYP_ITConfig+0x3c>)
 8009640:	6951      	ldr	r1, [r2, #20]
 8009642:	79fa      	ldrb	r2, [r7, #7]
 8009644:	430a      	orrs	r2, r1
 8009646:	615a      	str	r2, [r3, #20]
 8009648:	e007      	b.n	800965a <CRYP_ITConfig+0x32>
  }
  else
  {
    /* Disable the selected CRYP interrupt */
    CRYP->IMSCR &= (uint8_t)~CRYP_IT;
 800964a:	4b06      	ldr	r3, [pc, #24]	; (8009664 <CRYP_ITConfig+0x3c>)
 800964c:	4a05      	ldr	r2, [pc, #20]	; (8009664 <CRYP_ITConfig+0x3c>)
 800964e:	6951      	ldr	r1, [r2, #20]
 8009650:	79fa      	ldrb	r2, [r7, #7]
 8009652:	43d2      	mvns	r2, r2
 8009654:	b2d2      	uxtb	r2, r2
 8009656:	400a      	ands	r2, r1
 8009658:	615a      	str	r2, [r3, #20]
  }
}
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr
 8009664:	50060000 	.word	0x50060000

08009668 <CRYP_GetITStatus>:
  *            @arg CRYP_IT_INI: Input FIFO interrupt
  *            @arg CRYP_IT_OUTI: Output FIFO interrupt
  * @retval The new state of CRYP_IT (SET or RESET).
  */
ITStatus CRYP_GetITStatus(uint8_t CRYP_IT)
{
 8009668:	b480      	push	{r7}
 800966a:	b085      	sub	sp, #20
 800966c:	af00      	add	r7, sp, #0
 800966e:	4603      	mov	r3, r0
 8009670:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8009672:	2300      	movs	r3, #0
 8009674:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CRYP_GET_IT(CRYP_IT));

  /* Check the status of the specified CRYP interrupt */
  if ((CRYP->MISR &  CRYP_IT) != (uint8_t)RESET)
 8009676:	4b09      	ldr	r3, [pc, #36]	; (800969c <CRYP_GetITStatus+0x34>)
 8009678:	69da      	ldr	r2, [r3, #28]
 800967a:	79fb      	ldrb	r3, [r7, #7]
 800967c:	4013      	ands	r3, r2
 800967e:	2b00      	cmp	r3, #0
 8009680:	d002      	beq.n	8009688 <CRYP_GetITStatus+0x20>
  {
    /* CRYP_IT is set */
    bitstatus = SET;
 8009682:	2301      	movs	r3, #1
 8009684:	73fb      	strb	r3, [r7, #15]
 8009686:	e001      	b.n	800968c <CRYP_GetITStatus+0x24>
  }
  else
  {
    /* CRYP_IT is reset */
    bitstatus = RESET;
 8009688:	2300      	movs	r3, #0
 800968a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CRYP_IT status */
  return bitstatus;
 800968c:	7bfb      	ldrb	r3, [r7, #15]
}
 800968e:	4618      	mov	r0, r3
 8009690:	3714      	adds	r7, #20
 8009692:	46bd      	mov	sp, r7
 8009694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009698:	4770      	bx	lr
 800969a:	bf00      	nop
 800969c:	50060000 	.word	0x50060000

080096a0 <CRYP_GetCmdStatus>:
  * @brief  Returns whether CRYP peripheral is enabled or disabled.
  * @param  none.
  * @retval Current state of the CRYP peripheral (ENABLE or DISABLE).
  */
FunctionalState CRYP_GetCmdStatus(void)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
  FunctionalState state = DISABLE;
 80096a6:	2300      	movs	r3, #0
 80096a8:	71fb      	strb	r3, [r7, #7]

  if ((CRYP->CR & CRYP_CR_CRYPEN) != 0)
 80096aa:	4b09      	ldr	r3, [pc, #36]	; (80096d0 <CRYP_GetCmdStatus+0x30>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d002      	beq.n	80096bc <CRYP_GetCmdStatus+0x1c>
  {
    /* CRYPEN bit is set */
    state = ENABLE;
 80096b6:	2301      	movs	r3, #1
 80096b8:	71fb      	strb	r3, [r7, #7]
 80096ba:	e001      	b.n	80096c0 <CRYP_GetCmdStatus+0x20>
  }
  else
  {
    /* CRYPEN bit is reset */
    state = DISABLE;
 80096bc:	2300      	movs	r3, #0
 80096be:	71fb      	strb	r3, [r7, #7]
  }
  return state;
 80096c0:	79fb      	ldrb	r3, [r7, #7]
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	370c      	adds	r7, #12
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop
 80096d0:	50060000 	.word	0x50060000

080096d4 <CRYP_GetFlagStatus>:
  *            @arg CRYP_FLAG_OUTRIS: Output FIFO raw interrupt flag.
  *            @arg CRYP_FLAG_INRIS: Input FIFO raw interrupt flag.
  * @retval The new state of CRYP_FLAG (SET or RESET).
  */
FlagStatus CRYP_GetFlagStatus(uint8_t CRYP_FLAG)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b085      	sub	sp, #20
 80096d8:	af00      	add	r7, sp, #0
 80096da:	4603      	mov	r3, r0
 80096dc:	71fb      	strb	r3, [r7, #7]
  FlagStatus bitstatus = RESET;
 80096de:	2300      	movs	r3, #0
 80096e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tempreg = 0;
 80096e2:	2300      	movs	r3, #0
 80096e4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_CRYP_GET_FLAG(CRYP_FLAG));

  /* check if the FLAG is in RISR register */
  if ((CRYP_FLAG & FLAG_MASK) != 0x00) 
 80096e6:	79fb      	ldrb	r3, [r7, #7]
 80096e8:	f003 0320 	and.w	r3, r3, #32
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d003      	beq.n	80096f8 <CRYP_GetFlagStatus+0x24>
  {
    tempreg = CRYP->RISR;
 80096f0:	4b0b      	ldr	r3, [pc, #44]	; (8009720 <CRYP_GetFlagStatus+0x4c>)
 80096f2:	699b      	ldr	r3, [r3, #24]
 80096f4:	60bb      	str	r3, [r7, #8]
 80096f6:	e002      	b.n	80096fe <CRYP_GetFlagStatus+0x2a>
  }
  else  /* The FLAG is in SR register */
  {
    tempreg = CRYP->SR;
 80096f8:	4b09      	ldr	r3, [pc, #36]	; (8009720 <CRYP_GetFlagStatus+0x4c>)
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	60bb      	str	r3, [r7, #8]
  }


  /* Check the status of the specified CRYP flag */
  if ((tempreg & CRYP_FLAG ) != (uint8_t)RESET)
 80096fe:	79fa      	ldrb	r2, [r7, #7]
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	4013      	ands	r3, r2
 8009704:	2b00      	cmp	r3, #0
 8009706:	d002      	beq.n	800970e <CRYP_GetFlagStatus+0x3a>
  {
    /* CRYP_FLAG is set */
    bitstatus = SET;
 8009708:	2301      	movs	r3, #1
 800970a:	73fb      	strb	r3, [r7, #15]
 800970c:	e001      	b.n	8009712 <CRYP_GetFlagStatus+0x3e>
  }
  else
  {
    /* CRYP_FLAG is reset */
    bitstatus = RESET;
 800970e:	2300      	movs	r3, #0
 8009710:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the CRYP_FLAG status */
  return  bitstatus;
 8009712:	7bfb      	ldrb	r3, [r7, #15]
}
 8009714:	4618      	mov	r0, r3
 8009716:	3714      	adds	r7, #20
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr
 8009720:	50060000 	.word	0x50060000

08009724 <CRYP_DES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
                         uint32_t Ilength, uint8_t *Output)
{
 8009724:	b590      	push	{r4, r7, lr}
 8009726:	b09b      	sub	sp, #108	; 0x6c
 8009728:	af00      	add	r7, sp, #0
 800972a:	60b9      	str	r1, [r7, #8]
 800972c:	607a      	str	r2, [r7, #4]
 800972e:	603b      	str	r3, [r7, #0]
 8009730:	4603      	mov	r3, r0
 8009732:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 8009734:	2300      	movs	r3, #0
 8009736:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 8009738:	2300      	movs	r3, #0
 800973a:	657b      	str	r3, [r7, #84]	; 0x54
  ErrorStatus status = SUCCESS;
 800973c:	2301      	movs	r3, #1
 800973e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t keyaddr    = (uint32_t)Key;
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t inputaddr  = (uint32_t)Input;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t outputaddr = (uint32_t)Output;
 800974a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800974c:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t i = 0;
 800974e:	2300      	movs	r3, #0
 8009750:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 8009752:	f107 0318 	add.w	r3, r7, #24
 8009756:	4618      	mov	r0, r3
 8009758:	f7ff fd40 	bl	80091dc <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if( Mode == MODE_ENCRYPT ) /* DES encryption */
 800975c:	7bfb      	ldrb	r3, [r7, #15]
 800975e:	2b01      	cmp	r3, #1
 8009760:	d102      	bne.n	8009768 <CRYP_DES_ECB+0x44>
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 8009762:	2300      	movs	r3, #0
 8009764:	63bb      	str	r3, [r7, #56]	; 0x38
 8009766:	e001      	b.n	800976c <CRYP_DES_ECB+0x48>
  }
  else/* if( Mode == MODE_DECRYPT )*/ /* DES decryption */
  {      
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 8009768:	2304      	movs	r3, #4
 800976a:	63bb      	str	r3, [r7, #56]	; 0x38
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_ECB;
 800976c:	2310      	movs	r3, #16
 800976e:	63fb      	str	r3, [r7, #60]	; 0x3c
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8009770:	2380      	movs	r3, #128	; 0x80
 8009772:	643b      	str	r3, [r7, #64]	; 0x40
  CRYP_Init(&DES_CRYP_InitStructure);
 8009774:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009778:	4618      	mov	r0, r3
 800977a:	f7ff fc9b 	bl	80090b4 <CRYP_Init>

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 800977e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009786:	ba1b      	rev	r3, r3
 8009788:	623b      	str	r3, [r7, #32]
  keyaddr+=4;
 800978a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800978c:	3304      	adds	r3, #4
 800978e:	653b      	str	r3, [r7, #80]	; 0x50
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8009790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	64bb      	str	r3, [r7, #72]	; 0x48
 8009796:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009798:	ba1b      	rev	r3, r3
 800979a:	627b      	str	r3, [r7, #36]	; 0x24
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 800979c:	f107 0318 	add.w	r3, r7, #24
 80097a0:	4618      	mov	r0, r3
 80097a2:	f7ff fcef 	bl	8009184 <CRYP_KeyInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 80097a6:	f7ff fd89 	bl	80092bc <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 80097aa:	2001      	movs	r0, #1
 80097ac:	f7ff fd94 	bl	80092d8 <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 80097b0:	f7ff ff76 	bl	80096a0 <CRYP_GetCmdStatus>
 80097b4:	4603      	mov	r3, r0
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d101      	bne.n	80097be <CRYP_DES_ECB+0x9a>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 80097ba:	2300      	movs	r3, #0
 80097bc:	e04a      	b.n	8009854 <CRYP_DES_ECB+0x130>
  }
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 80097be:	2300      	movs	r3, #0
 80097c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80097c2:	e03a      	b.n	800983a <CRYP_DES_ECB+0x116>
  {

    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80097c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4618      	mov	r0, r3
 80097ca:	f7ff fda1 	bl	8009310 <CRYP_DataIn>
    inputaddr+=4;
 80097ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097d0:	3304      	adds	r3, #4
 80097d2:	663b      	str	r3, [r7, #96]	; 0x60
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80097d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4618      	mov	r0, r3
 80097da:	f7ff fd99 	bl	8009310 <CRYP_DataIn>
    inputaddr+=4;
 80097de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097e0:	3304      	adds	r3, #4
 80097e2:	663b      	str	r3, [r7, #96]	; 0x60

/* Wait until the complete message has been processed */
    counter = 0;
 80097e4:	2300      	movs	r3, #0
 80097e6:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80097e8:	2010      	movs	r0, #16
 80097ea:	f7ff ff73 	bl	80096d4 <CRYP_GetFlagStatus>
 80097ee:	4603      	mov	r3, r0
 80097f0:	657b      	str	r3, [r7, #84]	; 0x54
      counter++;
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	3301      	adds	r3, #1
 80097f6:	617b      	str	r3, [r7, #20]
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097fe:	d002      	beq.n	8009806 <CRYP_DES_ECB+0xe2>
 8009800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009802:	2b00      	cmp	r3, #0
 8009804:	d1f0      	bne.n	80097e8 <CRYP_DES_ECB+0xc4>

    if (busystatus != RESET)
 8009806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009808:	2b00      	cmp	r3, #0
 800980a:	d003      	beq.n	8009814 <CRYP_DES_ECB+0xf0>
   {
       status = ERROR;
 800980c:	2300      	movs	r3, #0
 800980e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009812:	e00f      	b.n	8009834 <CRYP_DES_ECB+0x110>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8009814:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8009816:	f7ff fd89 	bl	800932c <CRYP_DataOut>
 800981a:	4603      	mov	r3, r0
 800981c:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800981e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009820:	3304      	adds	r3, #4
 8009822:	65fb      	str	r3, [r7, #92]	; 0x5c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8009824:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8009826:	f7ff fd81 	bl	800932c <CRYP_DataOut>
 800982a:	4603      	mov	r3, r0
 800982c:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800982e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009830:	3304      	adds	r3, #4
 8009832:	65fb      	str	r3, [r7, #92]	; 0x5c
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
  }
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8009834:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009836:	3308      	adds	r3, #8
 8009838:	65bb      	str	r3, [r7, #88]	; 0x58
 800983a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	429a      	cmp	r2, r3
 8009840:	d203      	bcs.n	800984a <CRYP_DES_ECB+0x126>
 8009842:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009846:	2b00      	cmp	r3, #0
 8009848:	d1bc      	bne.n	80097c4 <CRYP_DES_ECB+0xa0>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 800984a:	2000      	movs	r0, #0
 800984c:	f7ff fd44 	bl	80092d8 <CRYP_Cmd>

  return status; 
 8009850:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8009854:	4618      	mov	r0, r3
 8009856:	376c      	adds	r7, #108	; 0x6c
 8009858:	46bd      	mov	sp, r7
 800985a:	bd90      	pop	{r4, r7, pc}

0800985c <CRYP_DES_CBC>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
                         uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 800985c:	b590      	push	{r4, r7, lr}
 800985e:	b0a1      	sub	sp, #132	; 0x84
 8009860:	af00      	add	r7, sp, #0
 8009862:	60b9      	str	r1, [r7, #8]
 8009864:	607a      	str	r2, [r7, #4]
 8009866:	603b      	str	r3, [r7, #0]
 8009868:	4603      	mov	r3, r0
 800986a:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 800986c:	2300      	movs	r3, #0
 800986e:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 8009870:	2300      	movs	r3, #0
 8009872:	66fb      	str	r3, [r7, #108]	; 0x6c
  ErrorStatus status = SUCCESS;
 8009874:	2301      	movs	r3, #1
 8009876:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t keyaddr    = (uint32_t)Key;
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	66bb      	str	r3, [r7, #104]	; 0x68
  uint32_t inputaddr  = (uint32_t)Input;
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	67bb      	str	r3, [r7, #120]	; 0x78
  uint32_t outputaddr = (uint32_t)Output;
 8009882:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009886:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t ivaddr     = (uint32_t)InitVectors;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t i = 0;
 800988c:	2300      	movs	r3, #0
 800988e:	673b      	str	r3, [r7, #112]	; 0x70

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 8009890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009894:	4618      	mov	r0, r3
 8009896:	f7ff fca1 	bl	80091dc <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* DES encryption */
 800989a:	7bfb      	ldrb	r3, [r7, #15]
 800989c:	2b01      	cmp	r3, #1
 800989e:	d102      	bne.n	80098a6 <CRYP_DES_CBC+0x4a>
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 80098a0:	2300      	movs	r3, #0
 80098a2:	647b      	str	r3, [r7, #68]	; 0x44
 80098a4:	e001      	b.n	80098aa <CRYP_DES_CBC+0x4e>
  }
  else /*if(Mode == MODE_DECRYPT)*/ /* DES decryption */
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 80098a6:	2304      	movs	r3, #4
 80098a8:	647b      	str	r3, [r7, #68]	; 0x44
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_CBC;
 80098aa:	2318      	movs	r3, #24
 80098ac:	64bb      	str	r3, [r7, #72]	; 0x48
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 80098ae:	2380      	movs	r3, #128	; 0x80
 80098b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  CRYP_Init(&DES_CRYP_InitStructure);
 80098b2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80098b6:	4618      	mov	r0, r3
 80098b8:	f7ff fbfc 	bl	80090b4 <CRYP_Init>

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80098bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	663b      	str	r3, [r7, #96]	; 0x60
 80098c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098c4:	ba1b      	rev	r3, r3
 80098c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 80098c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098ca:	3304      	adds	r3, #4
 80098cc:	66bb      	str	r3, [r7, #104]	; 0x68
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80098ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80098d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098d6:	ba1b      	rev	r3, r3
 80098d8:	633b      	str	r3, [r7, #48]	; 0x30
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 80098da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098de:	4618      	mov	r0, r3
 80098e0:	f7ff fc50 	bl	8009184 <CRYP_KeyInit>

  /* Initialization Vectors */
  DES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 80098e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80098ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80098ec:	ba1b      	rev	r3, r3
 80098ee:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 80098f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098f2:	3304      	adds	r3, #4
 80098f4:	667b      	str	r3, [r7, #100]	; 0x64
  DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 80098f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	657b      	str	r3, [r7, #84]	; 0x54
 80098fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098fe:	ba1b      	rev	r3, r3
 8009900:	61bb      	str	r3, [r7, #24]
  CRYP_IVInit(&DES_CRYP_IVInitStructure);
 8009902:	f107 0314 	add.w	r3, r7, #20
 8009906:	4618      	mov	r0, r3
 8009908:	f7ff fc8a 	bl	8009220 <CRYP_IVInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 800990c:	f7ff fcd6 	bl	80092bc <CRYP_FIFOFlush>
  
  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8009910:	2001      	movs	r0, #1
 8009912:	f7ff fce1 	bl	80092d8 <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 8009916:	f7ff fec3 	bl	80096a0 <CRYP_GetCmdStatus>
 800991a:	4603      	mov	r3, r0
 800991c:	2b00      	cmp	r3, #0
 800991e:	d101      	bne.n	8009924 <CRYP_DES_CBC+0xc8>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 8009920:	2300      	movs	r3, #0
 8009922:	e04b      	b.n	80099bc <CRYP_DES_CBC+0x160>
  }
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8009924:	2300      	movs	r3, #0
 8009926:	673b      	str	r3, [r7, #112]	; 0x70
 8009928:	e03a      	b.n	80099a0 <CRYP_DES_CBC+0x144>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800992a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4618      	mov	r0, r3
 8009930:	f7ff fcee 	bl	8009310 <CRYP_DataIn>
    inputaddr+=4;
 8009934:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009936:	3304      	adds	r3, #4
 8009938:	67bb      	str	r3, [r7, #120]	; 0x78
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800993a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4618      	mov	r0, r3
 8009940:	f7ff fce6 	bl	8009310 <CRYP_DataIn>
    inputaddr+=4;
 8009944:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009946:	3304      	adds	r3, #4
 8009948:	67bb      	str	r3, [r7, #120]	; 0x78

    /* Wait until the complete message has been processed */
    counter = 0;
 800994a:	2300      	movs	r3, #0
 800994c:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 800994e:	2010      	movs	r0, #16
 8009950:	f7ff fec0 	bl	80096d4 <CRYP_GetFlagStatus>
 8009954:	4603      	mov	r3, r0
 8009956:	66fb      	str	r3, [r7, #108]	; 0x6c
      counter++;
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	3301      	adds	r3, #1
 800995c:	613b      	str	r3, [r7, #16]
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009964:	d002      	beq.n	800996c <CRYP_DES_CBC+0x110>
 8009966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009968:	2b00      	cmp	r3, #0
 800996a:	d1f0      	bne.n	800994e <CRYP_DES_CBC+0xf2>

    if (busystatus != RESET)
 800996c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800996e:	2b00      	cmp	r3, #0
 8009970:	d003      	beq.n	800997a <CRYP_DES_CBC+0x11e>
   {
       status = ERROR;
 8009972:	2300      	movs	r3, #0
 8009974:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8009978:	e00f      	b.n	800999a <CRYP_DES_CBC+0x13e>
    }
    else
    {
      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800997a:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 800997c:	f7ff fcd6 	bl	800932c <CRYP_DataOut>
 8009980:	4603      	mov	r3, r0
 8009982:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8009984:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009986:	3304      	adds	r3, #4
 8009988:	677b      	str	r3, [r7, #116]	; 0x74
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800998a:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 800998c:	f7ff fcce 	bl	800932c <CRYP_DataOut>
 8009990:	4603      	mov	r3, r0
 8009992:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8009994:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009996:	3304      	adds	r3, #4
 8009998:	677b      	str	r3, [r7, #116]	; 0x74
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
  }
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 800999a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800999c:	3308      	adds	r3, #8
 800999e:	673b      	str	r3, [r7, #112]	; 0x70
 80099a0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80099a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d203      	bcs.n	80099b2 <CRYP_DES_CBC+0x156>
 80099aa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d1bb      	bne.n	800992a <CRYP_DES_CBC+0xce>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80099b2:	2000      	movs	r0, #0
 80099b4:	f7ff fc90 	bl	80092d8 <CRYP_Cmd>

  return status; 
 80099b8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3784      	adds	r7, #132	; 0x84
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd90      	pop	{r4, r7, pc}

080099c4 <CRYP_TDES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
                          uint32_t Ilength, uint8_t *Output)
{
 80099c4:	b590      	push	{r4, r7, lr}
 80099c6:	b09f      	sub	sp, #124	; 0x7c
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60b9      	str	r1, [r7, #8]
 80099cc:	607a      	str	r2, [r7, #4]
 80099ce:	603b      	str	r3, [r7, #0]
 80099d0:	4603      	mov	r3, r0
 80099d2:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 80099d4:	2300      	movs	r3, #0
 80099d6:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 80099d8:	2300      	movs	r3, #0
 80099da:	667b      	str	r3, [r7, #100]	; 0x64
  ErrorStatus status = SUCCESS;
 80099dc:	2301      	movs	r3, #1
 80099de:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  uint32_t keyaddr    = (uint32_t)Key;
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t inputaddr  = (uint32_t)Input;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t outputaddr = (uint32_t)Output;
 80099ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80099ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t i = 0;
 80099f0:	2300      	movs	r3, #0
 80099f2:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 80099f4:	f107 0318 	add.w	r3, r7, #24
 80099f8:	4618      	mov	r0, r3
 80099fa:	f7ff fbef 	bl	80091dc <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* TDES encryption */
 80099fe:	7bfb      	ldrb	r3, [r7, #15]
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d102      	bne.n	8009a0a <CRYP_TDES_ECB+0x46>
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8009a04:	2300      	movs	r3, #0
 8009a06:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a08:	e001      	b.n	8009a0e <CRYP_TDES_ECB+0x4a>
  }
  else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8009a0a:	2304      	movs	r3, #4
 8009a0c:	63bb      	str	r3, [r7, #56]	; 0x38
  }

  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	63fb      	str	r3, [r7, #60]	; 0x3c
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8009a12:	2380      	movs	r3, #128	; 0x80
 8009a14:	643b      	str	r3, [r7, #64]	; 0x40
  CRYP_Init(&TDES_CRYP_InitStructure);
 8009a16:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7ff fb4a 	bl	80090b4 <CRYP_Init>

  /* Key Initialisation */
  TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8009a20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a28:	ba1b      	rev	r3, r3
 8009a2a:	623b      	str	r3, [r7, #32]
  keyaddr+=4;
 8009a2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a2e:	3304      	adds	r3, #4
 8009a30:	663b      	str	r3, [r7, #96]	; 0x60
  TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8009a32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a3a:	ba1b      	rev	r3, r3
 8009a3c:	627b      	str	r3, [r7, #36]	; 0x24
  keyaddr+=4;
 8009a3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a40:	3304      	adds	r3, #4
 8009a42:	663b      	str	r3, [r7, #96]	; 0x60
  TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8009a44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	657b      	str	r3, [r7, #84]	; 0x54
 8009a4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a4c:	ba1b      	rev	r3, r3
 8009a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  keyaddr+=4;
 8009a50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a52:	3304      	adds	r3, #4
 8009a54:	663b      	str	r3, [r7, #96]	; 0x60
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8009a56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	653b      	str	r3, [r7, #80]	; 0x50
 8009a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a5e:	ba1b      	rev	r3, r3
 8009a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 8009a62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a64:	3304      	adds	r3, #4
 8009a66:	663b      	str	r3, [r7, #96]	; 0x60
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8009a68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a70:	ba1b      	rev	r3, r3
 8009a72:	633b      	str	r3, [r7, #48]	; 0x30
  keyaddr+=4;
 8009a74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a76:	3304      	adds	r3, #4
 8009a78:	663b      	str	r3, [r7, #96]	; 0x60
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8009a7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a82:	ba1b      	rev	r3, r3
 8009a84:	637b      	str	r3, [r7, #52]	; 0x34
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 8009a86:	f107 0318 	add.w	r3, r7, #24
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f7ff fb7a 	bl	8009184 <CRYP_KeyInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8009a90:	f7ff fc14 	bl	80092bc <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8009a94:	2001      	movs	r0, #1
 8009a96:	f7ff fc1f 	bl	80092d8 <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 8009a9a:	f7ff fe01 	bl	80096a0 <CRYP_GetCmdStatus>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d101      	bne.n	8009aa8 <CRYP_TDES_ECB+0xe4>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	e04a      	b.n	8009b3e <CRYP_TDES_ECB+0x17a>
  }
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	66bb      	str	r3, [r7, #104]	; 0x68
 8009aac:	e03a      	b.n	8009b24 <CRYP_TDES_ECB+0x160>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8009aae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7ff fc2c 	bl	8009310 <CRYP_DataIn>
    inputaddr+=4;
 8009ab8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009aba:	3304      	adds	r3, #4
 8009abc:	673b      	str	r3, [r7, #112]	; 0x70
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8009abe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7ff fc24 	bl	8009310 <CRYP_DataIn>
    inputaddr+=4;
 8009ac8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009aca:	3304      	adds	r3, #4
 8009acc:	673b      	str	r3, [r7, #112]	; 0x70

    /* Wait until the complete message has been processed */
    counter = 0;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8009ad2:	2010      	movs	r0, #16
 8009ad4:	f7ff fdfe 	bl	80096d4 <CRYP_GetFlagStatus>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	667b      	str	r3, [r7, #100]	; 0x64
      counter++;
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	3301      	adds	r3, #1
 8009ae0:	617b      	str	r3, [r7, #20]
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ae8:	d002      	beq.n	8009af0 <CRYP_TDES_ECB+0x12c>
 8009aea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d1f0      	bne.n	8009ad2 <CRYP_TDES_ECB+0x10e>

    if (busystatus != RESET)
 8009af0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d003      	beq.n	8009afe <CRYP_TDES_ECB+0x13a>
    {
       status = ERROR;
 8009af6:	2300      	movs	r3, #0
 8009af8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8009afc:	e00f      	b.n	8009b1e <CRYP_TDES_ECB+0x15a>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8009afe:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8009b00:	f7ff fc14 	bl	800932c <CRYP_DataOut>
 8009b04:	4603      	mov	r3, r0
 8009b06:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8009b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b0a:	3304      	adds	r3, #4
 8009b0c:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8009b0e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8009b10:	f7ff fc0c 	bl	800932c <CRYP_DataOut>
 8009b14:	4603      	mov	r3, r0
 8009b16:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8009b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b1a:	3304      	adds	r3, #4
 8009b1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
  }
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8009b1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b20:	3308      	adds	r3, #8
 8009b22:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b24:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d203      	bcs.n	8009b34 <CRYP_TDES_ECB+0x170>
 8009b2c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d1bc      	bne.n	8009aae <CRYP_TDES_ECB+0xea>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8009b34:	2000      	movs	r0, #0
 8009b36:	f7ff fbcf 	bl	80092d8 <CRYP_Cmd>

  return status; 
 8009b3a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	377c      	adds	r7, #124	; 0x7c
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd90      	pop	{r4, r7, pc}
 8009b46:	bf00      	nop

08009b48 <CRYP_TDES_CBC>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
                          uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 8009b48:	b590      	push	{r4, r7, lr}
 8009b4a:	b0a5      	sub	sp, #148	; 0x94
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	60b9      	str	r1, [r7, #8]
 8009b50:	607a      	str	r2, [r7, #4]
 8009b52:	603b      	str	r3, [r7, #0]
 8009b54:	4603      	mov	r3, r0
 8009b56:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	67fb      	str	r3, [r7, #124]	; 0x7c
  ErrorStatus status = SUCCESS;
 8009b60:	2301      	movs	r3, #1
 8009b62:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  uint32_t keyaddr    = (uint32_t)Key;
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	67bb      	str	r3, [r7, #120]	; 0x78
  uint32_t inputaddr  = (uint32_t)Input;
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t outputaddr = (uint32_t)Output;
 8009b70:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009b74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t ivaddr     = (uint32_t)InitVectors;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t i = 0;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 8009b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7ff fb28 	bl	80091dc <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* TDES encryption */
 8009b8c:	7bfb      	ldrb	r3, [r7, #15]
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	d102      	bne.n	8009b98 <CRYP_TDES_CBC+0x50>
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8009b92:	2300      	movs	r3, #0
 8009b94:	647b      	str	r3, [r7, #68]	; 0x44
 8009b96:	e001      	b.n	8009b9c <CRYP_TDES_CBC+0x54>
  }
  else
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8009b98:	2304      	movs	r3, #4
 8009b9a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
 8009b9c:	2308      	movs	r3, #8
 8009b9e:	64bb      	str	r3, [r7, #72]	; 0x48
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8009ba0:	2380      	movs	r3, #128	; 0x80
 8009ba2:	64fb      	str	r3, [r7, #76]	; 0x4c

  CRYP_Init(&TDES_CRYP_InitStructure);
 8009ba4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f7ff fa83 	bl	80090b4 <CRYP_Init>

  /* Key Initialisation */
  TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8009bae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	673b      	str	r3, [r7, #112]	; 0x70
 8009bb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009bb6:	ba1b      	rev	r3, r3
 8009bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 8009bba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bbc:	3304      	adds	r3, #4
 8009bbe:	67bb      	str	r3, [r7, #120]	; 0x78
  TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8009bc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bc8:	ba1b      	rev	r3, r3
 8009bca:	633b      	str	r3, [r7, #48]	; 0x30
  keyaddr+=4;
 8009bcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bce:	3304      	adds	r3, #4
 8009bd0:	67bb      	str	r3, [r7, #120]	; 0x78
  TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8009bd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8009bd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009bda:	ba1b      	rev	r3, r3
 8009bdc:	637b      	str	r3, [r7, #52]	; 0x34
  keyaddr+=4;
 8009bde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009be0:	3304      	adds	r3, #4
 8009be2:	67bb      	str	r3, [r7, #120]	; 0x78
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8009be4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	667b      	str	r3, [r7, #100]	; 0x64
 8009bea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009bec:	ba1b      	rev	r3, r3
 8009bee:	63bb      	str	r3, [r7, #56]	; 0x38
  keyaddr+=4;
 8009bf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bf2:	3304      	adds	r3, #4
 8009bf4:	67bb      	str	r3, [r7, #120]	; 0x78
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8009bf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	663b      	str	r3, [r7, #96]	; 0x60
 8009bfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009bfe:	ba1b      	rev	r3, r3
 8009c00:	63fb      	str	r3, [r7, #60]	; 0x3c
  keyaddr+=4;
 8009c02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c04:	3304      	adds	r3, #4
 8009c06:	67bb      	str	r3, [r7, #120]	; 0x78
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8009c08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c10:	ba1b      	rev	r3, r3
 8009c12:	643b      	str	r3, [r7, #64]	; 0x40
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 8009c14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f7ff fab3 	bl	8009184 <CRYP_KeyInit>

  /* Initialization Vectors */
  TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8009c1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	65bb      	str	r3, [r7, #88]	; 0x58
 8009c24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c26:	ba1b      	rev	r3, r3
 8009c28:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 8009c2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c2c:	3304      	adds	r3, #4
 8009c2e:	677b      	str	r3, [r7, #116]	; 0x74
  TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8009c30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	657b      	str	r3, [r7, #84]	; 0x54
 8009c36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c38:	ba1b      	rev	r3, r3
 8009c3a:	61bb      	str	r3, [r7, #24]
  CRYP_IVInit(&TDES_CRYP_IVInitStructure);
 8009c3c:	f107 0314 	add.w	r3, r7, #20
 8009c40:	4618      	mov	r0, r3
 8009c42:	f7ff faed 	bl	8009220 <CRYP_IVInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8009c46:	f7ff fb39 	bl	80092bc <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8009c4a:	2001      	movs	r0, #1
 8009c4c:	f7ff fb44 	bl	80092d8 <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 8009c50:	f7ff fd26 	bl	80096a0 <CRYP_GetCmdStatus>
 8009c54:	4603      	mov	r3, r0
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d101      	bne.n	8009c5e <CRYP_TDES_CBC+0x116>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	e05b      	b.n	8009d16 <CRYP_TDES_CBC+0x1ce>
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8009c5e:	2300      	movs	r3, #0
 8009c60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009c64:	e048      	b.n	8009cf8 <CRYP_TDES_CBC+0x1b0>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8009c66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f7ff fb4f 	bl	8009310 <CRYP_DataIn>
    inputaddr+=4;
 8009c72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c76:	3304      	adds	r3, #4
 8009c78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8009c7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4618      	mov	r0, r3
 8009c84:	f7ff fb44 	bl	8009310 <CRYP_DataIn>
    inputaddr+=4;
 8009c88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c8c:	3304      	adds	r3, #4
 8009c8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    /* Wait until the complete message has been processed */
    counter = 0;
 8009c92:	2300      	movs	r3, #0
 8009c94:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8009c96:	2010      	movs	r0, #16
 8009c98:	f7ff fd1c 	bl	80096d4 <CRYP_GetFlagStatus>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	67fb      	str	r3, [r7, #124]	; 0x7c
      counter++;
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	613b      	str	r3, [r7, #16]
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cac:	d002      	beq.n	8009cb4 <CRYP_TDES_CBC+0x16c>
 8009cae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d1f0      	bne.n	8009c96 <CRYP_TDES_CBC+0x14e>

    if (busystatus != RESET)
 8009cb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d003      	beq.n	8009cc2 <CRYP_TDES_CBC+0x17a>
   {
       status = ERROR;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8009cc0:	e015      	b.n	8009cee <CRYP_TDES_CBC+0x1a6>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8009cc2:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8009cc6:	f7ff fb31 	bl	800932c <CRYP_DataOut>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8009cce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009cd2:	3304      	adds	r3, #4
 8009cd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8009cd8:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8009cdc:	f7ff fb26 	bl	800932c <CRYP_DataOut>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8009ce4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009ce8:	3304      	adds	r3, #4
 8009cea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8009cee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009cf2:	3308      	adds	r3, #8
 8009cf4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009cf8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009cfc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d203      	bcs.n	8009d0c <CRYP_TDES_CBC+0x1c4>
 8009d04:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d1ac      	bne.n	8009c66 <CRYP_TDES_CBC+0x11e>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8009d0c:	2000      	movs	r0, #0
 8009d0e:	f7ff fae3 	bl	80092d8 <CRYP_Cmd>

  return status; 
 8009d12:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3794      	adds	r7, #148	; 0x94
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd90      	pop	{r4, r7, pc}
 8009d1e:	bf00      	nop

08009d20 <DAC_DeInit>:
  * @brief  Deinitializes the DAC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void DAC_DeInit(void)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	af00      	add	r7, sp, #0
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
 8009d24:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8009d28:	2101      	movs	r1, #1
 8009d2a:	f006 f875 	bl	800fe18 <RCC_APB1PeriphResetCmd>
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
 8009d2e:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8009d32:	2100      	movs	r1, #0
 8009d34:	f006 f870 	bl	800fe18 <RCC_APB1PeriphResetCmd>
}
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop

08009d3c <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b085      	sub	sp, #20
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8009d46:	2300      	movs	r3, #0
 8009d48:	60fb      	str	r3, [r7, #12]
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8009d4e:	4b13      	ldr	r3, [pc, #76]	; (8009d9c <DAC_Init+0x60>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f640 72fe 	movw	r2, #4094	; 0xffe
 8009d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d5e:	43db      	mvns	r3, r3
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	4013      	ands	r3, r2
 8009d64:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	689b      	ldr	r3, [r3, #8]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8009d74:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	68db      	ldr	r3, [r3, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	60bb      	str	r3, [r7, #8]
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	68ba      	ldr	r2, [r7, #8]
 8009d82:	fa02 f303 	lsl.w	r3, r2, r3
 8009d86:	68fa      	ldr	r2, [r7, #12]
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8009d8c:	4b03      	ldr	r3, [pc, #12]	; (8009d9c <DAC_Init+0x60>)
 8009d8e:	68fa      	ldr	r2, [r7, #12]
 8009d90:	601a      	str	r2, [r3, #0]
}
 8009d92:	3714      	adds	r7, #20
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr
 8009d9c:	40007400 	.word	0x40007400

08009da0 <DAC_StructInit>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
/*--------------- Reset DAC init structure parameters values -----------------*/
  /* Initialize the DAC_Trigger member */
  DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	601a      	str	r2, [r3, #0]
  /* Initialize the DAC_WaveGeneration member */
  DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2200      	movs	r2, #0
 8009db2:	605a      	str	r2, [r3, #4]
  /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
  DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2200      	movs	r2, #0
 8009db8:	609a      	str	r2, [r3, #8]
  /* Initialize the DAC_OutputBuffer member */
  DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	60da      	str	r2, [r3, #12]
}
 8009dc0:	370c      	adds	r7, #12
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc8:	4770      	bx	lr
 8009dca:	bf00      	nop

08009dcc <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b083      	sub	sp, #12
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	460b      	mov	r3, r1
 8009dd6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009dd8:	78fb      	ldrb	r3, [r7, #3]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d009      	beq.n	8009df2 <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 8009dde:	4b0c      	ldr	r3, [pc, #48]	; (8009e10 <DAC_Cmd+0x44>)
 8009de0:	4a0b      	ldr	r2, [pc, #44]	; (8009e10 <DAC_Cmd+0x44>)
 8009de2:	6811      	ldr	r1, [r2, #0]
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	2001      	movs	r0, #1
 8009de8:	fa00 f202 	lsl.w	r2, r0, r2
 8009dec:	430a      	orrs	r2, r1
 8009dee:	601a      	str	r2, [r3, #0]
 8009df0:	e009      	b.n	8009e06 <DAC_Cmd+0x3a>
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 8009df2:	4b07      	ldr	r3, [pc, #28]	; (8009e10 <DAC_Cmd+0x44>)
 8009df4:	4a06      	ldr	r2, [pc, #24]	; (8009e10 <DAC_Cmd+0x44>)
 8009df6:	6811      	ldr	r1, [r2, #0]
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	2001      	movs	r0, #1
 8009dfc:	fa00 f202 	lsl.w	r2, r0, r2
 8009e00:	43d2      	mvns	r2, r2
 8009e02:	400a      	ands	r2, r1
 8009e04:	601a      	str	r2, [r3, #0]
  }
}
 8009e06:	370c      	adds	r7, #12
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr
 8009e10:	40007400 	.word	0x40007400

08009e14 <DAC_SoftwareTriggerCmd>:
  * @param  NewState: new state of the selected DAC channel software trigger.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b083      	sub	sp, #12
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	460b      	mov	r3, r1
 8009e1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009e20:	78fb      	ldrb	r3, [r7, #3]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d00a      	beq.n	8009e3c <DAC_SoftwareTriggerCmd+0x28>
  {
    /* Enable software trigger for the selected DAC channel */
    DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
 8009e26:	4b0d      	ldr	r3, [pc, #52]	; (8009e5c <DAC_SoftwareTriggerCmd+0x48>)
 8009e28:	4a0c      	ldr	r2, [pc, #48]	; (8009e5c <DAC_SoftwareTriggerCmd+0x48>)
 8009e2a:	6851      	ldr	r1, [r2, #4]
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	0912      	lsrs	r2, r2, #4
 8009e30:	2001      	movs	r0, #1
 8009e32:	fa00 f202 	lsl.w	r2, r0, r2
 8009e36:	430a      	orrs	r2, r1
 8009e38:	605a      	str	r2, [r3, #4]
 8009e3a:	e00a      	b.n	8009e52 <DAC_SoftwareTriggerCmd+0x3e>
  }
  else
  {
    /* Disable software trigger for the selected DAC channel */
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
 8009e3c:	4b07      	ldr	r3, [pc, #28]	; (8009e5c <DAC_SoftwareTriggerCmd+0x48>)
 8009e3e:	4a07      	ldr	r2, [pc, #28]	; (8009e5c <DAC_SoftwareTriggerCmd+0x48>)
 8009e40:	6851      	ldr	r1, [r2, #4]
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	0912      	lsrs	r2, r2, #4
 8009e46:	2001      	movs	r0, #1
 8009e48:	fa00 f202 	lsl.w	r2, r0, r2
 8009e4c:	43d2      	mvns	r2, r2
 8009e4e:	400a      	ands	r2, r1
 8009e50:	605a      	str	r2, [r3, #4]
  }
}
 8009e52:	370c      	adds	r7, #12
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr
 8009e5c:	40007400 	.word	0x40007400

08009e60 <DAC_DualSoftwareTriggerCmd>:
  * @param  NewState: new state of the DAC channels software triggers.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	4603      	mov	r3, r0
 8009e68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009e6a:	79fb      	ldrb	r3, [r7, #7]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d006      	beq.n	8009e7e <DAC_DualSoftwareTriggerCmd+0x1e>
  {
    /* Enable software trigger for both DAC channels */
    DAC->SWTRIGR |= DUAL_SWTRIG_SET;
 8009e70:	4b08      	ldr	r3, [pc, #32]	; (8009e94 <DAC_DualSoftwareTriggerCmd+0x34>)
 8009e72:	4a08      	ldr	r2, [pc, #32]	; (8009e94 <DAC_DualSoftwareTriggerCmd+0x34>)
 8009e74:	6852      	ldr	r2, [r2, #4]
 8009e76:	f042 0203 	orr.w	r2, r2, #3
 8009e7a:	605a      	str	r2, [r3, #4]
 8009e7c:	e005      	b.n	8009e8a <DAC_DualSoftwareTriggerCmd+0x2a>
  }
  else
  {
    /* Disable software trigger for both DAC channels */
    DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
 8009e7e:	4b05      	ldr	r3, [pc, #20]	; (8009e94 <DAC_DualSoftwareTriggerCmd+0x34>)
 8009e80:	4a04      	ldr	r2, [pc, #16]	; (8009e94 <DAC_DualSoftwareTriggerCmd+0x34>)
 8009e82:	6852      	ldr	r2, [r2, #4]
 8009e84:	f022 0203 	bic.w	r2, r2, #3
 8009e88:	605a      	str	r2, [r3, #4]
  }
}
 8009e8a:	370c      	adds	r7, #12
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr
 8009e94:	40007400 	.word	0x40007400

08009e98 <DAC_WaveGenerationCmd>:
  * @param  NewState: new state of the selected DAC channel wave generation.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b085      	sub	sp, #20
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	60f8      	str	r0, [r7, #12]
 8009ea0:	60b9      	str	r1, [r7, #8]
 8009ea2:	4613      	mov	r3, r2
 8009ea4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_WAVE(DAC_Wave)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009ea6:	79fb      	ldrb	r3, [r7, #7]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d009      	beq.n	8009ec0 <DAC_WaveGenerationCmd+0x28>
  {
    /* Enable the selected wave generation for the selected DAC channel */
    DAC->CR |= DAC_Wave << DAC_Channel;
 8009eac:	4b0c      	ldr	r3, [pc, #48]	; (8009ee0 <DAC_WaveGenerationCmd+0x48>)
 8009eae:	4a0c      	ldr	r2, [pc, #48]	; (8009ee0 <DAC_WaveGenerationCmd+0x48>)
 8009eb0:	6811      	ldr	r1, [r2, #0]
 8009eb2:	68fa      	ldr	r2, [r7, #12]
 8009eb4:	68b8      	ldr	r0, [r7, #8]
 8009eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8009eba:	430a      	orrs	r2, r1
 8009ebc:	601a      	str	r2, [r3, #0]
 8009ebe:	e009      	b.n	8009ed4 <DAC_WaveGenerationCmd+0x3c>
  }
  else
  {
    /* Disable the selected wave generation for the selected DAC channel */
    DAC->CR &= ~(DAC_Wave << DAC_Channel);
 8009ec0:	4b07      	ldr	r3, [pc, #28]	; (8009ee0 <DAC_WaveGenerationCmd+0x48>)
 8009ec2:	4a07      	ldr	r2, [pc, #28]	; (8009ee0 <DAC_WaveGenerationCmd+0x48>)
 8009ec4:	6811      	ldr	r1, [r2, #0]
 8009ec6:	68fa      	ldr	r2, [r7, #12]
 8009ec8:	68b8      	ldr	r0, [r7, #8]
 8009eca:	fa00 f202 	lsl.w	r2, r0, r2
 8009ece:	43d2      	mvns	r2, r2
 8009ed0:	400a      	ands	r2, r1
 8009ed2:	601a      	str	r2, [r3, #0]
  }
}
 8009ed4:	3714      	adds	r7, #20
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr
 8009ede:	bf00      	nop
 8009ee0:	40007400 	.word	0x40007400

08009ee4 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8009ee4:	b480      	push	{r7}
 8009ee6:	b085      	sub	sp, #20
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	460b      	mov	r3, r1
 8009eee:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8009ef4:	4b07      	ldr	r3, [pc, #28]	; (8009f14 <DAC_SetChannel1Data+0x30>)
 8009ef6:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8009ef8:	68fa      	ldr	r2, [r7, #12]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	4413      	add	r3, r2
 8009efe:	3308      	adds	r3, #8
 8009f00:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	887a      	ldrh	r2, [r7, #2]
 8009f06:	601a      	str	r2, [r3, #0]
}
 8009f08:	3714      	adds	r7, #20
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr
 8009f12:	bf00      	nop
 8009f14:	40007400 	.word	0x40007400

08009f18 <DAC_SetChannel2Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b085      	sub	sp, #20
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	460b      	mov	r3, r1
 8009f22:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8009f24:	2300      	movs	r3, #0
 8009f26:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE;
 8009f28:	4b07      	ldr	r3, [pc, #28]	; (8009f48 <DAC_SetChannel2Data+0x30>)
 8009f2a:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R2_OFFSET + DAC_Align;
 8009f2c:	68fa      	ldr	r2, [r7, #12]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	4413      	add	r3, r2
 8009f32:	3314      	adds	r3, #20
 8009f34:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel2 selected data holding register */
  *(__IO uint32_t *)tmp = Data;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	887a      	ldrh	r2, [r7, #2]
 8009f3a:	601a      	str	r2, [r3, #0]
}
 8009f3c:	3714      	adds	r7, #20
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr
 8009f46:	bf00      	nop
 8009f48:	40007400 	.word	0x40007400

08009f4c <DAC_SetDualChannelData>:
  * @note   In dual mode, a unique register access is required to write in both
  *          DAC channels at the same time.
  * @retval None
  */
void DAC_SetDualChannelData(uint32_t DAC_Align, uint16_t Data2, uint16_t Data1)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b085      	sub	sp, #20
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	4613      	mov	r3, r2
 8009f56:	460a      	mov	r2, r1
 8009f58:	807a      	strh	r2, [r7, #2]
 8009f5a:	803b      	strh	r3, [r7, #0]
  uint32_t data = 0, tmp = 0;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	60fb      	str	r3, [r7, #12]
 8009f60:	2300      	movs	r3, #0
 8009f62:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));
  
  /* Calculate and set dual DAC data holding register value */
  if (DAC_Align == DAC_Align_8b_R)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2b08      	cmp	r3, #8
 8009f68:	d105      	bne.n	8009f76 <DAC_SetDualChannelData+0x2a>
  {
    data = ((uint32_t)Data2 << 8) | Data1; 
 8009f6a:	887b      	ldrh	r3, [r7, #2]
 8009f6c:	021a      	lsls	r2, r3, #8
 8009f6e:	883b      	ldrh	r3, [r7, #0]
 8009f70:	4313      	orrs	r3, r2
 8009f72:	60fb      	str	r3, [r7, #12]
 8009f74:	e004      	b.n	8009f80 <DAC_SetDualChannelData+0x34>
  }
  else
  {
    data = ((uint32_t)Data2 << 16) | Data1;
 8009f76:	887b      	ldrh	r3, [r7, #2]
 8009f78:	041a      	lsls	r2, r3, #16
 8009f7a:	883b      	ldrh	r3, [r7, #0]
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	60fb      	str	r3, [r7, #12]
  }
  
  tmp = (uint32_t)DAC_BASE;
 8009f80:	4b07      	ldr	r3, [pc, #28]	; (8009fa0 <DAC_SetDualChannelData+0x54>)
 8009f82:	60bb      	str	r3, [r7, #8]
  tmp += DHR12RD_OFFSET + DAC_Align;
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	4413      	add	r3, r2
 8009f8a:	3320      	adds	r3, #32
 8009f8c:	60bb      	str	r3, [r7, #8]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	68fa      	ldr	r2, [r7, #12]
 8009f92:	601a      	str	r2, [r3, #0]
}
 8009f94:	3714      	adds	r7, #20
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr
 8009f9e:	bf00      	nop
 8009fa0:	40007400 	.word	0x40007400

08009fa4 <DAC_GetDataOutputValue>:
  *            @arg DAC_Channel_1: DAC Channel1 selected
  *            @arg DAC_Channel_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b085      	sub	sp, #20
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 8009fac:	2300      	movs	r3, #0
 8009fae:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  
  tmp = (uint32_t) DAC_BASE ;
 8009fb0:	4b08      	ldr	r3, [pc, #32]	; (8009fd4 <DAC_GetDataOutputValue+0x30>)
 8009fb2:	60fb      	str	r3, [r7, #12]
  tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	089a      	lsrs	r2, r3, #2
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	4413      	add	r3, r2
 8009fbc:	332c      	adds	r3, #44	; 0x2c
 8009fbe:	60fb      	str	r3, [r7, #12]
  
  /* Returns the DAC channel data output register value */
  return (uint16_t) (*(__IO uint32_t*) tmp);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	b29b      	uxth	r3, r3
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3714      	adds	r7, #20
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr
 8009fd2:	bf00      	nop
 8009fd4:	40007400 	.word	0x40007400

08009fd8 <DAC_DMACmd>:
  * @note   The DAC channel2 is mapped on DMA1 Stream 6 channel7 which must be
  *          already configured.    
  * @retval None
  */
void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b083      	sub	sp, #12
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009fe4:	78fb      	ldrb	r3, [r7, #3]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d00a      	beq.n	800a000 <DAC_DMACmd+0x28>
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 8009fea:	4b0d      	ldr	r3, [pc, #52]	; (800a020 <DAC_DMACmd+0x48>)
 8009fec:	4a0c      	ldr	r2, [pc, #48]	; (800a020 <DAC_DMACmd+0x48>)
 8009fee:	6811      	ldr	r1, [r2, #0]
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8009ffa:	430a      	orrs	r2, r1
 8009ffc:	601a      	str	r2, [r3, #0]
 8009ffe:	e00a      	b.n	800a016 <DAC_DMACmd+0x3e>
  }
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
 800a000:	4b07      	ldr	r3, [pc, #28]	; (800a020 <DAC_DMACmd+0x48>)
 800a002:	4a07      	ldr	r2, [pc, #28]	; (800a020 <DAC_DMACmd+0x48>)
 800a004:	6811      	ldr	r1, [r2, #0]
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a00c:	fa00 f202 	lsl.w	r2, r0, r2
 800a010:	43d2      	mvns	r2, r2
 800a012:	400a      	ands	r2, r1
 800a014:	601a      	str	r2, [r3, #0]
  }
}
 800a016:	370c      	adds	r7, #12
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr
 800a020:	40007400 	.word	0x40007400

0800a024 <DAC_ITConfig>:
  * @param  NewState: new state of the specified DAC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */ 
void DAC_ITConfig(uint32_t DAC_Channel, uint32_t DAC_IT, FunctionalState NewState)  
{
 800a024:	b480      	push	{r7}
 800a026:	b085      	sub	sp, #20
 800a028:	af00      	add	r7, sp, #0
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	60b9      	str	r1, [r7, #8]
 800a02e:	4613      	mov	r3, r2
 800a030:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_DAC_IT(DAC_IT)); 

  if (NewState != DISABLE)
 800a032:	79fb      	ldrb	r3, [r7, #7]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d009      	beq.n	800a04c <DAC_ITConfig+0x28>
  {
    /* Enable the selected DAC interrupts */
    DAC->CR |=  (DAC_IT << DAC_Channel);
 800a038:	4b0c      	ldr	r3, [pc, #48]	; (800a06c <DAC_ITConfig+0x48>)
 800a03a:	4a0c      	ldr	r2, [pc, #48]	; (800a06c <DAC_ITConfig+0x48>)
 800a03c:	6811      	ldr	r1, [r2, #0]
 800a03e:	68fa      	ldr	r2, [r7, #12]
 800a040:	68b8      	ldr	r0, [r7, #8]
 800a042:	fa00 f202 	lsl.w	r2, r0, r2
 800a046:	430a      	orrs	r2, r1
 800a048:	601a      	str	r2, [r3, #0]
 800a04a:	e009      	b.n	800a060 <DAC_ITConfig+0x3c>
  }
  else
  {
    /* Disable the selected DAC interrupts */
    DAC->CR &= (~(uint32_t)(DAC_IT << DAC_Channel));
 800a04c:	4b07      	ldr	r3, [pc, #28]	; (800a06c <DAC_ITConfig+0x48>)
 800a04e:	4a07      	ldr	r2, [pc, #28]	; (800a06c <DAC_ITConfig+0x48>)
 800a050:	6811      	ldr	r1, [r2, #0]
 800a052:	68fa      	ldr	r2, [r7, #12]
 800a054:	68b8      	ldr	r0, [r7, #8]
 800a056:	fa00 f202 	lsl.w	r2, r0, r2
 800a05a:	43d2      	mvns	r2, r2
 800a05c:	400a      	ands	r2, r1
 800a05e:	601a      	str	r2, [r3, #0]
  }
}
 800a060:	3714      	adds	r7, #20
 800a062:	46bd      	mov	sp, r7
 800a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a068:	4770      	bx	lr
 800a06a:	bf00      	nop
 800a06c:	40007400 	.word	0x40007400

0800a070 <DAC_GetFlagStatus>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).
  * @retval The new state of DAC_FLAG (SET or RESET).
  */
FlagStatus DAC_GetFlagStatus(uint32_t DAC_Channel, uint32_t DAC_FLAG)
{
 800a070:	b480      	push	{r7}
 800a072:	b085      	sub	sp, #20
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800a07a:	2300      	movs	r3, #0
 800a07c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Check the status of the specified DAC flag */
  if ((DAC->SR & (DAC_FLAG << DAC_Channel)) != (uint8_t)RESET)
 800a07e:	4b0a      	ldr	r3, [pc, #40]	; (800a0a8 <DAC_GetFlagStatus+0x38>)
 800a080:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6839      	ldr	r1, [r7, #0]
 800a086:	fa01 f303 	lsl.w	r3, r1, r3
 800a08a:	4013      	ands	r3, r2
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d002      	beq.n	800a096 <DAC_GetFlagStatus+0x26>
  {
    /* DAC_FLAG is set */
    bitstatus = SET;
 800a090:	2301      	movs	r3, #1
 800a092:	73fb      	strb	r3, [r7, #15]
 800a094:	e001      	b.n	800a09a <DAC_GetFlagStatus+0x2a>
  }
  else
  {
    /* DAC_FLAG is reset */
    bitstatus = RESET;
 800a096:	2300      	movs	r3, #0
 800a098:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DAC_FLAG status */
  return  bitstatus;
 800a09a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3714      	adds	r7, #20
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr
 800a0a8:	40007400 	.word	0x40007400

0800a0ac <DAC_ClearFlag>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).                           
  * @retval None
  */
void DAC_ClearFlag(uint32_t DAC_Channel, uint32_t DAC_FLAG)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b083      	sub	sp, #12
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Clear the selected DAC flags */
  DAC->SR = (DAC_FLAG << DAC_Channel);
 800a0b6:	4b05      	ldr	r3, [pc, #20]	; (800a0cc <DAC_ClearFlag+0x20>)
 800a0b8:	687a      	ldr	r2, [r7, #4]
 800a0ba:	6839      	ldr	r1, [r7, #0]
 800a0bc:	fa01 f202 	lsl.w	r2, r1, r2
 800a0c0:	635a      	str	r2, [r3, #52]	; 0x34
}
 800a0c2:	370c      	adds	r7, #12
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr
 800a0cc:	40007400 	.word	0x40007400

0800a0d0 <DAC_GetITStatus>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).
  * @retval The new state of DAC_IT (SET or RESET).
  */
ITStatus DAC_GetITStatus(uint32_t DAC_Channel, uint32_t DAC_IT)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b085      	sub	sp, #20
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT));

  /* Get the DAC_IT enable bit status */
  enablestatus = (DAC->CR & (DAC_IT << DAC_Channel)) ;
 800a0e2:	4b10      	ldr	r3, [pc, #64]	; (800a124 <DAC_GetITStatus+0x54>)
 800a0e4:	681a      	ldr	r2, [r3, #0]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6839      	ldr	r1, [r7, #0]
 800a0ea:	fa01 f303 	lsl.w	r3, r1, r3
 800a0ee:	4013      	ands	r3, r2
 800a0f0:	60bb      	str	r3, [r7, #8]
  
  /* Check the status of the specified DAC interrupt */
  if (((DAC->SR & (DAC_IT << DAC_Channel)) != (uint32_t)RESET) && enablestatus)
 800a0f2:	4b0c      	ldr	r3, [pc, #48]	; (800a124 <DAC_GetITStatus+0x54>)
 800a0f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6839      	ldr	r1, [r7, #0]
 800a0fa:	fa01 f303 	lsl.w	r3, r1, r3
 800a0fe:	4013      	ands	r3, r2
 800a100:	2b00      	cmp	r3, #0
 800a102:	d005      	beq.n	800a110 <DAC_GetITStatus+0x40>
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d002      	beq.n	800a110 <DAC_GetITStatus+0x40>
  {
    /* DAC_IT is set */
    bitstatus = SET;
 800a10a:	2301      	movs	r3, #1
 800a10c:	73fb      	strb	r3, [r7, #15]
 800a10e:	e001      	b.n	800a114 <DAC_GetITStatus+0x44>
  }
  else
  {
    /* DAC_IT is reset */
    bitstatus = RESET;
 800a110:	2300      	movs	r3, #0
 800a112:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DAC_IT status */
  return  bitstatus;
 800a114:	7bfb      	ldrb	r3, [r7, #15]
}
 800a116:	4618      	mov	r0, r3
 800a118:	3714      	adds	r7, #20
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr
 800a122:	bf00      	nop
 800a124:	40007400 	.word	0x40007400

0800a128 <DAC_ClearITPendingBit>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).                           
  * @retval None
  */
void DAC_ClearITPendingBit(uint32_t DAC_Channel, uint32_t DAC_IT)
{
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT)); 

  /* Clear the selected DAC interrupt pending bits */
  DAC->SR = (DAC_IT << DAC_Channel);
 800a132:	4b05      	ldr	r3, [pc, #20]	; (800a148 <DAC_ClearITPendingBit+0x20>)
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	6839      	ldr	r1, [r7, #0]
 800a138:	fa01 f202 	lsl.w	r2, r1, r2
 800a13c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800a13e:	370c      	adds	r7, #12
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr
 800a148:	40007400 	.word	0x40007400

0800a14c <DBGMCU_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @param  None
  * @retval Device revision identifier
  */
uint32_t DBGMCU_GetREVID(void)
{
 800a14c:	b480      	push	{r7}
 800a14e:	af00      	add	r7, sp, #0
   return(DBGMCU->IDCODE >> 16);
 800a150:	4b03      	ldr	r3, [pc, #12]	; (800a160 <DBGMCU_GetREVID+0x14>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	0c1b      	lsrs	r3, r3, #16
}
 800a156:	4618      	mov	r0, r3
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr
 800a160:	e0042000 	.word	0xe0042000

0800a164 <DBGMCU_GetDEVID>:
  * @brief  Returns the device identifier.
  * @param  None
  * @retval Device identifier
  */
uint32_t DBGMCU_GetDEVID(void)
{
 800a164:	b480      	push	{r7}
 800a166:	af00      	add	r7, sp, #0
   return(DBGMCU->IDCODE & IDCODE_DEVID_MASK);
 800a168:	4b04      	ldr	r3, [pc, #16]	; (800a17c <DBGMCU_GetDEVID+0x18>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800a170:	4618      	mov	r0, r3
 800a172:	46bd      	mov	sp, r7
 800a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a178:	4770      	bx	lr
 800a17a:	bf00      	nop
 800a17c:	e0042000 	.word	0xe0042000

0800a180 <DBGMCU_Config>:
  * @param  NewState: new state of the specified low power mode in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 800a180:	b480      	push	{r7}
 800a182:	b083      	sub	sp, #12
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	460b      	mov	r3, r1
 800a18a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800a18c:	78fb      	ldrb	r3, [r7, #3]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d006      	beq.n	800a1a0 <DBGMCU_Config+0x20>
  {
    DBGMCU->CR |= DBGMCU_Periph;
 800a192:	4b09      	ldr	r3, [pc, #36]	; (800a1b8 <DBGMCU_Config+0x38>)
 800a194:	4a08      	ldr	r2, [pc, #32]	; (800a1b8 <DBGMCU_Config+0x38>)
 800a196:	6851      	ldr	r1, [r2, #4]
 800a198:	687a      	ldr	r2, [r7, #4]
 800a19a:	430a      	orrs	r2, r1
 800a19c:	605a      	str	r2, [r3, #4]
 800a19e:	e006      	b.n	800a1ae <DBGMCU_Config+0x2e>
  }
  else
  {
    DBGMCU->CR &= ~DBGMCU_Periph;
 800a1a0:	4b05      	ldr	r3, [pc, #20]	; (800a1b8 <DBGMCU_Config+0x38>)
 800a1a2:	4a05      	ldr	r2, [pc, #20]	; (800a1b8 <DBGMCU_Config+0x38>)
 800a1a4:	6851      	ldr	r1, [r2, #4]
 800a1a6:	687a      	ldr	r2, [r7, #4]
 800a1a8:	43d2      	mvns	r2, r2
 800a1aa:	400a      	ands	r2, r1
 800a1ac:	605a      	str	r2, [r3, #4]
  }
}
 800a1ae:	370c      	adds	r7, #12
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr
 800a1b8:	e0042000 	.word	0xe0042000

0800a1bc <DBGMCU_APB1PeriphConfig>:
  *     @arg DBGMCU_CAN1_STOP: Debug CAN2 stopped when Core is halted        
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_APB1PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	460b      	mov	r3, r1
 800a1c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB1PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a1c8:	78fb      	ldrb	r3, [r7, #3]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d006      	beq.n	800a1dc <DBGMCU_APB1PeriphConfig+0x20>
  {
    DBGMCU->APB1FZ |= DBGMCU_Periph;
 800a1ce:	4b09      	ldr	r3, [pc, #36]	; (800a1f4 <DBGMCU_APB1PeriphConfig+0x38>)
 800a1d0:	4a08      	ldr	r2, [pc, #32]	; (800a1f4 <DBGMCU_APB1PeriphConfig+0x38>)
 800a1d2:	6891      	ldr	r1, [r2, #8]
 800a1d4:	687a      	ldr	r2, [r7, #4]
 800a1d6:	430a      	orrs	r2, r1
 800a1d8:	609a      	str	r2, [r3, #8]
 800a1da:	e006      	b.n	800a1ea <DBGMCU_APB1PeriphConfig+0x2e>
  }
  else
  {
    DBGMCU->APB1FZ &= ~DBGMCU_Periph;
 800a1dc:	4b05      	ldr	r3, [pc, #20]	; (800a1f4 <DBGMCU_APB1PeriphConfig+0x38>)
 800a1de:	4a05      	ldr	r2, [pc, #20]	; (800a1f4 <DBGMCU_APB1PeriphConfig+0x38>)
 800a1e0:	6891      	ldr	r1, [r2, #8]
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	43d2      	mvns	r2, r2
 800a1e6:	400a      	ands	r2, r1
 800a1e8:	609a      	str	r2, [r3, #8]
  }
}
 800a1ea:	370c      	adds	r7, #12
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr
 800a1f4:	e0042000 	.word	0xe0042000

0800a1f8 <DBGMCU_APB2PeriphConfig>:
  * @param  NewState: new state of the specified peripheral in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_APB2PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	460b      	mov	r3, r1
 800a202:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB2PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a204:	78fb      	ldrb	r3, [r7, #3]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d006      	beq.n	800a218 <DBGMCU_APB2PeriphConfig+0x20>
  {
    DBGMCU->APB2FZ |= DBGMCU_Periph;
 800a20a:	4b09      	ldr	r3, [pc, #36]	; (800a230 <DBGMCU_APB2PeriphConfig+0x38>)
 800a20c:	4a08      	ldr	r2, [pc, #32]	; (800a230 <DBGMCU_APB2PeriphConfig+0x38>)
 800a20e:	68d1      	ldr	r1, [r2, #12]
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	430a      	orrs	r2, r1
 800a214:	60da      	str	r2, [r3, #12]
 800a216:	e006      	b.n	800a226 <DBGMCU_APB2PeriphConfig+0x2e>
  }
  else
  {
    DBGMCU->APB2FZ &= ~DBGMCU_Periph;
 800a218:	4b05      	ldr	r3, [pc, #20]	; (800a230 <DBGMCU_APB2PeriphConfig+0x38>)
 800a21a:	4a05      	ldr	r2, [pc, #20]	; (800a230 <DBGMCU_APB2PeriphConfig+0x38>)
 800a21c:	68d1      	ldr	r1, [r2, #12]
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	43d2      	mvns	r2, r2
 800a222:	400a      	ands	r2, r1
 800a224:	60da      	str	r2, [r3, #12]
  }
}
 800a226:	370c      	adds	r7, #12
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr
 800a230:	e0042000 	.word	0xe0042000

0800a234 <DCMI_DeInit>:
  * @brief  Deinitializes the DCMI registers to their default reset values.
  * @param  None
  * @retval None
  */
void DCMI_DeInit(void)
{
 800a234:	b480      	push	{r7}
 800a236:	af00      	add	r7, sp, #0
  DCMI->CR = 0x0;
 800a238:	4b0c      	ldr	r3, [pc, #48]	; (800a26c <DCMI_DeInit+0x38>)
 800a23a:	2200      	movs	r2, #0
 800a23c:	601a      	str	r2, [r3, #0]
  DCMI->IER = 0x0;
 800a23e:	4b0b      	ldr	r3, [pc, #44]	; (800a26c <DCMI_DeInit+0x38>)
 800a240:	2200      	movs	r2, #0
 800a242:	60da      	str	r2, [r3, #12]
  DCMI->ICR = 0x1F;
 800a244:	4b09      	ldr	r3, [pc, #36]	; (800a26c <DCMI_DeInit+0x38>)
 800a246:	221f      	movs	r2, #31
 800a248:	615a      	str	r2, [r3, #20]
  DCMI->ESCR = 0x0;
 800a24a:	4b08      	ldr	r3, [pc, #32]	; (800a26c <DCMI_DeInit+0x38>)
 800a24c:	2200      	movs	r2, #0
 800a24e:	619a      	str	r2, [r3, #24]
  DCMI->ESUR = 0x0;
 800a250:	4b06      	ldr	r3, [pc, #24]	; (800a26c <DCMI_DeInit+0x38>)
 800a252:	2200      	movs	r2, #0
 800a254:	61da      	str	r2, [r3, #28]
  DCMI->CWSTRTR = 0x0;
 800a256:	4b05      	ldr	r3, [pc, #20]	; (800a26c <DCMI_DeInit+0x38>)
 800a258:	2200      	movs	r2, #0
 800a25a:	621a      	str	r2, [r3, #32]
  DCMI->CWSIZER = 0x0;
 800a25c:	4b03      	ldr	r3, [pc, #12]	; (800a26c <DCMI_DeInit+0x38>)
 800a25e:	2200      	movs	r2, #0
 800a260:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a262:	46bd      	mov	sp, r7
 800a264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a268:	4770      	bx	lr
 800a26a:	bf00      	nop
 800a26c:	50050000 	.word	0x50050000

0800a270 <DCMI_Init>:
  * @param  DCMI_InitStruct: pointer to a DCMI_InitTypeDef structure that contains 
  *         the configuration information for the DCMI.
  * @retval None
  */
void DCMI_Init(DCMI_InitTypeDef* DCMI_InitStruct)
{
 800a270:	b480      	push	{r7}
 800a272:	b085      	sub	sp, #20
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  uint32_t temp = 0x0;
 800a278:	2300      	movs	r3, #0
 800a27a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DCMI_CAPTURE_RATE(DCMI_InitStruct->DCMI_CaptureRate));
  assert_param(IS_DCMI_EXTENDED_DATA(DCMI_InitStruct->DCMI_ExtendedDataMode));

  /* The DCMI configuration registers should be programmed correctly before 
  enabling the CR_ENABLE Bit and the CR_CAPTURE Bit */
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
 800a27c:	4a1a      	ldr	r2, [pc, #104]	; (800a2e8 <DCMI_Init+0x78>)
 800a27e:	4b1a      	ldr	r3, [pc, #104]	; (800a2e8 <DCMI_Init+0x78>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a286:	f023 0301 	bic.w	r3, r3, #1
 800a28a:	6013      	str	r3, [r2, #0]
   
  /* Reset the old DCMI configuration */
  temp = DCMI->CR;
 800a28c:	4b16      	ldr	r3, [pc, #88]	; (800a2e8 <DCMI_Init+0x78>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	60fb      	str	r3, [r7, #12]
  
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a298:	f023 0302 	bic.w	r3, r3, #2
 800a29c:	60fb      	str	r3, [r7, #12]
                      DCMI_CR_HSPOL  | DCMI_CR_VSPOL | DCMI_CR_FCRC_0 | 
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	881a      	ldrh	r2, [r3, #0]
                     DCMI_InitStruct->DCMI_SynchroMode |
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	885b      	ldrh	r3, [r3, #2]
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	b29a      	uxth	r2, r3
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	889b      	ldrh	r3, [r3, #4]
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	b29a      	uxth	r2, r3
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	88db      	ldrh	r3, [r3, #6]
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	b29a      	uxth	r2, r3
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	891b      	ldrh	r3, [r3, #8]
                     DCMI_InitStruct->DCMI_CaptureRate |
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	b29a      	uxth	r2, r3
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	895b      	ldrh	r3, [r3, #10]
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	b29a      	uxth	r2, r3
                     DCMI_InitStruct->DCMI_ExtendedDataMode);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	899b      	ldrh	r3, [r3, #12]
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	b29b      	uxth	r3, r3
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
                      DCMI_CR_HSPOL  | DCMI_CR_VSPOL | DCMI_CR_FCRC_0 | 
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
 800a2d2:	68fa      	ldr	r2, [r7, #12]
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	60fb      	str	r3, [r7, #12]
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
                     DCMI_InitStruct->DCMI_ExtendedDataMode);

  DCMI->CR = temp;                              
 800a2d8:	4b03      	ldr	r3, [pc, #12]	; (800a2e8 <DCMI_Init+0x78>)
 800a2da:	68fa      	ldr	r2, [r7, #12]
 800a2dc:	601a      	str	r2, [r3, #0]
}
 800a2de:	3714      	adds	r7, #20
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr
 800a2e8:	50050000 	.word	0x50050000

0800a2ec <DCMI_StructInit>:
  * @param  DCMI_InitStruct : pointer to a DCMI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DCMI_StructInit(DCMI_InitTypeDef* DCMI_InitStruct)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  DCMI_InitStruct->DCMI_CaptureMode = DCMI_CaptureMode_Continuous;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	801a      	strh	r2, [r3, #0]
  DCMI_InitStruct->DCMI_SynchroMode = DCMI_SynchroMode_Hardware;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	805a      	strh	r2, [r3, #2]
  DCMI_InitStruct->DCMI_PCKPolarity = DCMI_PCKPolarity_Falling;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2200      	movs	r2, #0
 800a304:	809a      	strh	r2, [r3, #4]
  DCMI_InitStruct->DCMI_VSPolarity = DCMI_VSPolarity_Low;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2200      	movs	r2, #0
 800a30a:	80da      	strh	r2, [r3, #6]
  DCMI_InitStruct->DCMI_HSPolarity = DCMI_HSPolarity_Low;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2200      	movs	r2, #0
 800a310:	811a      	strh	r2, [r3, #8]
  DCMI_InitStruct->DCMI_CaptureRate = DCMI_CaptureRate_All_Frame;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2200      	movs	r2, #0
 800a316:	815a      	strh	r2, [r3, #10]
  DCMI_InitStruct->DCMI_ExtendedDataMode = DCMI_ExtendedDataMode_8b;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2200      	movs	r2, #0
 800a31c:	819a      	strh	r2, [r3, #12]
}
 800a31e:	370c      	adds	r7, #12
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr

0800a328 <DCMI_CROPConfig>:
  * @param  DCMI_CROPInitStruct:  pointer to a DCMI_CROPInitTypeDef structure that 
  *         contains the configuration information for the DCMI peripheral CROP mode.
  * @retval None
  */
void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
{  
 800a328:	b480      	push	{r7}
 800a32a:	b083      	sub	sp, #12
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 800a330:	4b0b      	ldr	r3, [pc, #44]	; (800a360 <DCMI_CROPConfig+0x38>)
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	8852      	ldrh	r2, [r2, #2]
 800a336:	4611      	mov	r1, r2
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));
 800a338:	687a      	ldr	r2, [r7, #4]
 800a33a:	8812      	ldrh	r2, [r2, #0]
 800a33c:	0412      	lsls	r2, r2, #16
  * @retval None
  */
void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
{  
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 800a33e:	430a      	orrs	r2, r1
 800a340:	621a      	str	r2, [r3, #32]
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));

  /* Sets the CROP window size */
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 800a342:	4b07      	ldr	r3, [pc, #28]	; (800a360 <DCMI_CROPConfig+0x38>)
 800a344:	687a      	ldr	r2, [r7, #4]
 800a346:	88d2      	ldrh	r2, [r2, #6]
 800a348:	4611      	mov	r1, r2
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	8892      	ldrh	r2, [r2, #4]
 800a34e:	0412      	lsls	r2, r2, #16
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));

  /* Sets the CROP window size */
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 800a350:	430a      	orrs	r2, r1
 800a352:	625a      	str	r2, [r3, #36]	; 0x24
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
}
 800a354:	370c      	adds	r7, #12
 800a356:	46bd      	mov	sp, r7
 800a358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35c:	4770      	bx	lr
 800a35e:	bf00      	nop
 800a360:	50050000 	.word	0x50050000

0800a364 <DCMI_CROPCmd>:
  * @param  NewState: new state of the DCMI Crop feature. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_CROPCmd(FunctionalState NewState)
{
 800a364:	b480      	push	{r7}
 800a366:	b083      	sub	sp, #12
 800a368:	af00      	add	r7, sp, #0
 800a36a:	4603      	mov	r3, r0
 800a36c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800a36e:	79fb      	ldrb	r3, [r7, #7]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d006      	beq.n	800a382 <DCMI_CROPCmd+0x1e>
  {
    /* Enable the DCMI Crop feature */
    DCMI->CR |= (uint32_t)DCMI_CR_CROP;
 800a374:	4b08      	ldr	r3, [pc, #32]	; (800a398 <DCMI_CROPCmd+0x34>)
 800a376:	4a08      	ldr	r2, [pc, #32]	; (800a398 <DCMI_CROPCmd+0x34>)
 800a378:	6812      	ldr	r2, [r2, #0]
 800a37a:	f042 0204 	orr.w	r2, r2, #4
 800a37e:	601a      	str	r2, [r3, #0]
 800a380:	e005      	b.n	800a38e <DCMI_CROPCmd+0x2a>
  }
  else
  {
    /* Disable the DCMI Crop feature */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CROP;
 800a382:	4b05      	ldr	r3, [pc, #20]	; (800a398 <DCMI_CROPCmd+0x34>)
 800a384:	4a04      	ldr	r2, [pc, #16]	; (800a398 <DCMI_CROPCmd+0x34>)
 800a386:	6812      	ldr	r2, [r2, #0]
 800a388:	f022 0204 	bic.w	r2, r2, #4
 800a38c:	601a      	str	r2, [r3, #0]
  }
}
 800a38e:	370c      	adds	r7, #12
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr
 800a398:	50050000 	.word	0x50050000

0800a39c <DCMI_SetEmbeddedSynchroCodes>:
  * @param  DCMI_CodesInitTypeDef: pointer to a DCMI_CodesInitTypeDef structure that
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b083      	sub	sp, #12
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 800a3a4:	4b0a      	ldr	r3, [pc, #40]	; (800a3d0 <DCMI_SetEmbeddedSynchroCodes+0x34>)
 800a3a6:	687a      	ldr	r2, [r7, #4]
 800a3a8:	7812      	ldrb	r2, [r2, #0]
 800a3aa:	4611      	mov	r1, r2
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	7852      	ldrb	r2, [r2, #1]
 800a3b0:	0212      	lsls	r2, r2, #8
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 800a3b2:	4311      	orrs	r1, r2
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
 800a3b4:	687a      	ldr	r2, [r7, #4]
 800a3b6:	7892      	ldrb	r2, [r2, #2]
 800a3b8:	0412      	lsls	r2, r2, #16
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 800a3ba:	4311      	orrs	r1, r2
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
 800a3bc:	687a      	ldr	r2, [r7, #4]
 800a3be:	78d2      	ldrb	r2, [r2, #3]
 800a3c0:	0612      	lsls	r2, r2, #24
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 800a3c2:	430a      	orrs	r2, r1
 800a3c4:	619a      	str	r2, [r3, #24]
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
}
 800a3c6:	370c      	adds	r7, #12
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr
 800a3d0:	50050000 	.word	0x50050000

0800a3d4 <DCMI_JPEGCmd>:
  * @param  NewState: new state of the DCMI JPEG format. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_JPEGCmd(FunctionalState NewState)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b083      	sub	sp, #12
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	4603      	mov	r3, r0
 800a3dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 
  if (NewState != DISABLE)
 800a3de:	79fb      	ldrb	r3, [r7, #7]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d006      	beq.n	800a3f2 <DCMI_JPEGCmd+0x1e>
  {
    /* Enable the DCMI JPEG format */
    DCMI->CR |= (uint32_t)DCMI_CR_JPEG;
 800a3e4:	4b08      	ldr	r3, [pc, #32]	; (800a408 <DCMI_JPEGCmd+0x34>)
 800a3e6:	4a08      	ldr	r2, [pc, #32]	; (800a408 <DCMI_JPEGCmd+0x34>)
 800a3e8:	6812      	ldr	r2, [r2, #0]
 800a3ea:	f042 0208 	orr.w	r2, r2, #8
 800a3ee:	601a      	str	r2, [r3, #0]
 800a3f0:	e005      	b.n	800a3fe <DCMI_JPEGCmd+0x2a>
  }
  else
  {
    /* Disable the DCMI JPEG format */
    DCMI->CR &= ~(uint32_t)DCMI_CR_JPEG;
 800a3f2:	4b05      	ldr	r3, [pc, #20]	; (800a408 <DCMI_JPEGCmd+0x34>)
 800a3f4:	4a04      	ldr	r2, [pc, #16]	; (800a408 <DCMI_JPEGCmd+0x34>)
 800a3f6:	6812      	ldr	r2, [r2, #0]
 800a3f8:	f022 0208 	bic.w	r2, r2, #8
 800a3fc:	601a      	str	r2, [r3, #0]
  }
}
 800a3fe:	370c      	adds	r7, #12
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr
 800a408:	50050000 	.word	0x50050000

0800a40c <DCMI_Cmd>:
  * @param  NewState: new state of the DCMI interface. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_Cmd(FunctionalState NewState)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b083      	sub	sp, #12
 800a410:	af00      	add	r7, sp, #0
 800a412:	4603      	mov	r3, r0
 800a414:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800a416:	79fb      	ldrb	r3, [r7, #7]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d006      	beq.n	800a42a <DCMI_Cmd+0x1e>
  {
    /* Enable the DCMI by setting ENABLE bit */
    DCMI->CR |= (uint32_t)DCMI_CR_ENABLE;
 800a41c:	4b08      	ldr	r3, [pc, #32]	; (800a440 <DCMI_Cmd+0x34>)
 800a41e:	4a08      	ldr	r2, [pc, #32]	; (800a440 <DCMI_Cmd+0x34>)
 800a420:	6812      	ldr	r2, [r2, #0]
 800a422:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a426:	601a      	str	r2, [r3, #0]
 800a428:	e005      	b.n	800a436 <DCMI_Cmd+0x2a>
  }
  else
  {
    /* Disable the DCMI by clearing ENABLE bit */
    DCMI->CR &= ~(uint32_t)DCMI_CR_ENABLE;
 800a42a:	4b05      	ldr	r3, [pc, #20]	; (800a440 <DCMI_Cmd+0x34>)
 800a42c:	4a04      	ldr	r2, [pc, #16]	; (800a440 <DCMI_Cmd+0x34>)
 800a42e:	6812      	ldr	r2, [r2, #0]
 800a430:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a434:	601a      	str	r2, [r3, #0]
  }
}
 800a436:	370c      	adds	r7, #12
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr
 800a440:	50050000 	.word	0x50050000

0800a444 <DCMI_CaptureCmd>:
  * @param  NewState: new state of the DCMI capture. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_CaptureCmd(FunctionalState NewState)
{
 800a444:	b480      	push	{r7}
 800a446:	b083      	sub	sp, #12
 800a448:	af00      	add	r7, sp, #0
 800a44a:	4603      	mov	r3, r0
 800a44c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800a44e:	79fb      	ldrb	r3, [r7, #7]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d006      	beq.n	800a462 <DCMI_CaptureCmd+0x1e>
  {
    /* Enable the DCMI Capture */
    DCMI->CR |= (uint32_t)DCMI_CR_CAPTURE;
 800a454:	4b08      	ldr	r3, [pc, #32]	; (800a478 <DCMI_CaptureCmd+0x34>)
 800a456:	4a08      	ldr	r2, [pc, #32]	; (800a478 <DCMI_CaptureCmd+0x34>)
 800a458:	6812      	ldr	r2, [r2, #0]
 800a45a:	f042 0201 	orr.w	r2, r2, #1
 800a45e:	601a      	str	r2, [r3, #0]
 800a460:	e005      	b.n	800a46e <DCMI_CaptureCmd+0x2a>
  }
  else
  {
    /* Disable the DCMI Capture */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CAPTURE;
 800a462:	4b05      	ldr	r3, [pc, #20]	; (800a478 <DCMI_CaptureCmd+0x34>)
 800a464:	4a04      	ldr	r2, [pc, #16]	; (800a478 <DCMI_CaptureCmd+0x34>)
 800a466:	6812      	ldr	r2, [r2, #0]
 800a468:	f022 0201 	bic.w	r2, r2, #1
 800a46c:	601a      	str	r2, [r3, #0]
  }
}
 800a46e:	370c      	adds	r7, #12
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr
 800a478:	50050000 	.word	0x50050000

0800a47c <DCMI_ReadData>:
  * @brief  Reads the data stored in the DR register.
  * @param  None 
  * @retval Data register value
  */
uint32_t DCMI_ReadData(void)
{
 800a47c:	b480      	push	{r7}
 800a47e:	af00      	add	r7, sp, #0
  return DCMI->DR;
 800a480:	4b03      	ldr	r3, [pc, #12]	; (800a490 <DCMI_ReadData+0x14>)
 800a482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800a484:	4618      	mov	r0, r3
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr
 800a48e:	bf00      	nop
 800a490:	50050000 	.word	0x50050000

0800a494 <DCMI_ITConfig>:
  * @param  NewState: new state of the specified DCMI interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_ITConfig(uint16_t DCMI_IT, FunctionalState NewState)
{
 800a494:	b480      	push	{r7}
 800a496:	b083      	sub	sp, #12
 800a498:	af00      	add	r7, sp, #0
 800a49a:	4602      	mov	r2, r0
 800a49c:	460b      	mov	r3, r1
 800a49e:	80fa      	strh	r2, [r7, #6]
 800a4a0:	717b      	strb	r3, [r7, #5]
  /* Check the parameters */
  assert_param(IS_DCMI_CONFIG_IT(DCMI_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800a4a2:	797b      	ldrb	r3, [r7, #5]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d006      	beq.n	800a4b6 <DCMI_ITConfig+0x22>
  {
    /* Enable the Interrupt sources */
    DCMI->IER |= DCMI_IT;
 800a4a8:	4b09      	ldr	r3, [pc, #36]	; (800a4d0 <DCMI_ITConfig+0x3c>)
 800a4aa:	4a09      	ldr	r2, [pc, #36]	; (800a4d0 <DCMI_ITConfig+0x3c>)
 800a4ac:	68d1      	ldr	r1, [r2, #12]
 800a4ae:	88fa      	ldrh	r2, [r7, #6]
 800a4b0:	430a      	orrs	r2, r1
 800a4b2:	60da      	str	r2, [r3, #12]
 800a4b4:	e007      	b.n	800a4c6 <DCMI_ITConfig+0x32>
  }
  else
  {
    /* Disable the Interrupt sources */
    DCMI->IER &= (uint16_t)(~DCMI_IT);
 800a4b6:	4b06      	ldr	r3, [pc, #24]	; (800a4d0 <DCMI_ITConfig+0x3c>)
 800a4b8:	4a05      	ldr	r2, [pc, #20]	; (800a4d0 <DCMI_ITConfig+0x3c>)
 800a4ba:	68d1      	ldr	r1, [r2, #12]
 800a4bc:	88fa      	ldrh	r2, [r7, #6]
 800a4be:	43d2      	mvns	r2, r2
 800a4c0:	b292      	uxth	r2, r2
 800a4c2:	400a      	ands	r2, r1
 800a4c4:	60da      	str	r2, [r3, #12]
  }  
}
 800a4c6:	370c      	adds	r7, #12
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr
 800a4d0:	50050000 	.word	0x50050000

0800a4d4 <DCMI_GetFlagStatus>:
  *            @arg DCMI_FLAG_VSYNC: VSYNC flag mask
  *            @arg DCMI_FLAG_FNE: Fifo not empty flag mask
  * @retval The new state of DCMI_FLAG (SET or RESET).
  */
FlagStatus DCMI_GetFlagStatus(uint16_t DCMI_FLAG)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b087      	sub	sp, #28
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	4603      	mov	r3, r0
 800a4dc:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	75fb      	strb	r3, [r7, #23]
  uint32_t dcmireg, tempreg = 0;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_DCMI_GET_FLAG(DCMI_FLAG));
  
  /* Get the DCMI register index */
  dcmireg = (((uint16_t)DCMI_FLAG) >> 12);
 800a4e6:	88fb      	ldrh	r3, [r7, #6]
 800a4e8:	0b1b      	lsrs	r3, r3, #12
 800a4ea:	b29b      	uxth	r3, r3
 800a4ec:	60fb      	str	r3, [r7, #12]
  
  if (dcmireg == 0x00) /* The FLAG is in RISR register */
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d103      	bne.n	800a4fc <DCMI_GetFlagStatus+0x28>
  {
    tempreg= DCMI->RISR;
 800a4f4:	4b0f      	ldr	r3, [pc, #60]	; (800a534 <DCMI_GetFlagStatus+0x60>)
 800a4f6:	689b      	ldr	r3, [r3, #8]
 800a4f8:	613b      	str	r3, [r7, #16]
 800a4fa:	e009      	b.n	800a510 <DCMI_GetFlagStatus+0x3c>
  }
  else if (dcmireg == 0x02) /* The FLAG is in SR register */
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2b02      	cmp	r3, #2
 800a500:	d103      	bne.n	800a50a <DCMI_GetFlagStatus+0x36>
  {
    tempreg = DCMI->SR;
 800a502:	4b0c      	ldr	r3, [pc, #48]	; (800a534 <DCMI_GetFlagStatus+0x60>)
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	613b      	str	r3, [r7, #16]
 800a508:	e002      	b.n	800a510 <DCMI_GetFlagStatus+0x3c>
  }
  else /* The FLAG is in MISR register */
  {
    tempreg = DCMI->MISR;
 800a50a:	4b0a      	ldr	r3, [pc, #40]	; (800a534 <DCMI_GetFlagStatus+0x60>)
 800a50c:	691b      	ldr	r3, [r3, #16]
 800a50e:	613b      	str	r3, [r7, #16]
  }
  
  if ((tempreg & DCMI_FLAG) != (uint16_t)RESET )
 800a510:	88fa      	ldrh	r2, [r7, #6]
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	4013      	ands	r3, r2
 800a516:	2b00      	cmp	r3, #0
 800a518:	d002      	beq.n	800a520 <DCMI_GetFlagStatus+0x4c>
  {
    bitstatus = SET;
 800a51a:	2301      	movs	r3, #1
 800a51c:	75fb      	strb	r3, [r7, #23]
 800a51e:	e001      	b.n	800a524 <DCMI_GetFlagStatus+0x50>
  }
  else
  {
    bitstatus = RESET;
 800a520:	2300      	movs	r3, #0
 800a522:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the DCMI_FLAG status */
  return  bitstatus;
 800a524:	7dfb      	ldrb	r3, [r7, #23]
}
 800a526:	4618      	mov	r0, r3
 800a528:	371c      	adds	r7, #28
 800a52a:	46bd      	mov	sp, r7
 800a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a530:	4770      	bx	lr
 800a532:	bf00      	nop
 800a534:	50050000 	.word	0x50050000

0800a538 <DCMI_ClearFlag>:
  *            @arg DCMI_FLAG_VSYNCRI: VSYNC Raw flag mask
  *            @arg DCMI_FLAG_LINERI: Line Raw flag mask
  * @retval None
  */
void DCMI_ClearFlag(uint16_t DCMI_FLAG)
{
 800a538:	b480      	push	{r7}
 800a53a:	b083      	sub	sp, #12
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	4603      	mov	r3, r0
 800a540:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_DCMI_CLEAR_FLAG(DCMI_FLAG));
  
  /* Clear the flag by writing in the ICR register 1 in the corresponding 
  Flag position*/
  
  DCMI->ICR = DCMI_FLAG;
 800a542:	4b04      	ldr	r3, [pc, #16]	; (800a554 <DCMI_ClearFlag+0x1c>)
 800a544:	88fa      	ldrh	r2, [r7, #6]
 800a546:	615a      	str	r2, [r3, #20]
}
 800a548:	370c      	adds	r7, #12
 800a54a:	46bd      	mov	sp, r7
 800a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a550:	4770      	bx	lr
 800a552:	bf00      	nop
 800a554:	50050000 	.word	0x50050000

0800a558 <DCMI_GetITStatus>:
  *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
  *            @arg DCMI_IT_LINE: Line interrupt mask
  * @retval The new state of DCMI_IT (SET or RESET).
  */
ITStatus DCMI_GetITStatus(uint16_t DCMI_IT)
{
 800a558:	b480      	push	{r7}
 800a55a:	b085      	sub	sp, #20
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	4603      	mov	r3, r0
 800a560:	80fb      	strh	r3, [r7, #6]
  ITStatus bitstatus = RESET;
 800a562:	2300      	movs	r3, #0
 800a564:	73fb      	strb	r3, [r7, #15]
  uint32_t itstatus = 0;
 800a566:	2300      	movs	r3, #0
 800a568:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DCMI_GET_IT(DCMI_IT));
  
  itstatus = DCMI->MISR & DCMI_IT; /* Only masked interrupts are checked */
 800a56a:	4b0a      	ldr	r3, [pc, #40]	; (800a594 <DCMI_GetITStatus+0x3c>)
 800a56c:	691a      	ldr	r2, [r3, #16]
 800a56e:	88fb      	ldrh	r3, [r7, #6]
 800a570:	4013      	ands	r3, r2
 800a572:	60bb      	str	r3, [r7, #8]
  
  if ((itstatus != (uint16_t)RESET))
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d002      	beq.n	800a580 <DCMI_GetITStatus+0x28>
  {
    bitstatus = SET;
 800a57a:	2301      	movs	r3, #1
 800a57c:	73fb      	strb	r3, [r7, #15]
 800a57e:	e001      	b.n	800a584 <DCMI_GetITStatus+0x2c>
  }
  else
  {
    bitstatus = RESET;
 800a580:	2300      	movs	r3, #0
 800a582:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a584:	7bfb      	ldrb	r3, [r7, #15]
}
 800a586:	4618      	mov	r0, r3
 800a588:	3714      	adds	r7, #20
 800a58a:	46bd      	mov	sp, r7
 800a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a590:	4770      	bx	lr
 800a592:	bf00      	nop
 800a594:	50050000 	.word	0x50050000

0800a598 <DCMI_ClearITPendingBit>:
  *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
  *            @arg DCMI_IT_LINE: Line interrupt mask
  * @retval None
  */
void DCMI_ClearITPendingBit(uint16_t DCMI_IT)
{
 800a598:	b480      	push	{r7}
 800a59a:	b083      	sub	sp, #12
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	4603      	mov	r3, r0
 800a5a0:	80fb      	strh	r3, [r7, #6]
  /* Clear the interrupt pending Bit by writing in the ICR register 1 in the 
  corresponding pending Bit position*/
  
  DCMI->ICR = DCMI_IT;
 800a5a2:	4b04      	ldr	r3, [pc, #16]	; (800a5b4 <DCMI_ClearITPendingBit+0x1c>)
 800a5a4:	88fa      	ldrh	r2, [r7, #6]
 800a5a6:	615a      	str	r2, [r3, #20]
}
 800a5a8:	370c      	adds	r7, #12
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr
 800a5b2:	bf00      	nop
 800a5b4:	50050000 	.word	0x50050000

0800a5b8 <DMA2D_DeInit>:
  * @param  None
  * @retval None
  */

void DMA2D_DeInit(void)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	af00      	add	r7, sp, #0
  /* Enable DMA2D reset state */
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2D, ENABLE);
 800a5bc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800a5c0:	2101      	movs	r1, #1
 800a5c2:	f005 fbcf 	bl	800fd64 <RCC_AHB1PeriphResetCmd>
  /* Release DMA2D from reset state */
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2D, DISABLE);
 800a5c6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800a5ca:	2100      	movs	r1, #0
 800a5cc:	f005 fbca 	bl	800fd64 <RCC_AHB1PeriphResetCmd>
}
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	bf00      	nop

0800a5d4 <DMA2D_Init>:
  * @param  DMA2D_InitStruct: pointer to a DMA2D_InitTypeDef structure that contains
  *         the configuration information for the specified DMA2D peripheral.
  * @retval None
  */
void DMA2D_Init(DMA2D_InitTypeDef* DMA2D_InitStruct)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b087      	sub	sp, #28
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]

  uint32_t outgreen = 0;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	617b      	str	r3, [r7, #20]
  uint32_t outred   = 0;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	613b      	str	r3, [r7, #16]
  uint32_t outalpha = 0;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	60fb      	str	r3, [r7, #12]
  uint32_t pixline  = 0;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA2D_OUTPUT_OFFSET(DMA2D_InitStruct->DMA2D_OutputOffset));
  assert_param(IS_DMA2D_LINE(DMA2D_InitStruct->DMA2D_NumberOfLine));
  assert_param(IS_DMA2D_PIXEL(DMA2D_InitStruct->DMA2D_PixelPerLine));

  /* Configures the DMA2D operation mode */
  DMA2D->CR &= (uint32_t)CR_MASK;
 800a5ec:	4a4f      	ldr	r2, [pc, #316]	; (800a72c <DMA2D_Init+0x158>)
 800a5ee:	4b4f      	ldr	r3, [pc, #316]	; (800a72c <DMA2D_Init+0x158>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f023 1303 	bic.w	r3, r3, #196611	; 0x30003
 800a5f6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800a5fa:	6013      	str	r3, [r2, #0]
  DMA2D->CR |= (DMA2D_InitStruct->DMA2D_Mode);
 800a5fc:	4b4b      	ldr	r3, [pc, #300]	; (800a72c <DMA2D_Init+0x158>)
 800a5fe:	4a4b      	ldr	r2, [pc, #300]	; (800a72c <DMA2D_Init+0x158>)
 800a600:	6811      	ldr	r1, [r2, #0]
 800a602:	687a      	ldr	r2, [r7, #4]
 800a604:	6812      	ldr	r2, [r2, #0]
 800a606:	430a      	orrs	r2, r1
 800a608:	601a      	str	r2, [r3, #0]

  /* Configures the color mode of the output image */
  DMA2D->OPFCCR &= ~(uint32_t)DMA2D_OPFCCR_CM;
 800a60a:	4b48      	ldr	r3, [pc, #288]	; (800a72c <DMA2D_Init+0x158>)
 800a60c:	4a47      	ldr	r2, [pc, #284]	; (800a72c <DMA2D_Init+0x158>)
 800a60e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a610:	f022 0207 	bic.w	r2, r2, #7
 800a614:	635a      	str	r2, [r3, #52]	; 0x34
  DMA2D->OPFCCR |= (DMA2D_InitStruct->DMA2D_CMode);
 800a616:	4b45      	ldr	r3, [pc, #276]	; (800a72c <DMA2D_Init+0x158>)
 800a618:	4a44      	ldr	r2, [pc, #272]	; (800a72c <DMA2D_Init+0x158>)
 800a61a:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800a61c:	687a      	ldr	r2, [r7, #4]
 800a61e:	6852      	ldr	r2, [r2, #4]
 800a620:	430a      	orrs	r2, r1
 800a622:	635a      	str	r2, [r3, #52]	; 0x34

  /* Configures the output color */

  if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_ARGB8888)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d10c      	bne.n	800a646 <DMA2D_Init+0x72>
  {
    outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 8;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	021b      	lsls	r3, r3, #8
 800a632:	617b      	str	r3, [r7, #20]
    outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	691b      	ldr	r3, [r3, #16]
 800a638:	041b      	lsls	r3, r3, #16
 800a63a:	613b      	str	r3, [r7, #16]
    outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 24;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	695b      	ldr	r3, [r3, #20]
 800a640:	061b      	lsls	r3, r3, #24
 800a642:	60fb      	str	r3, [r7, #12]
 800a644:	e03a      	b.n	800a6bc <DMA2D_Init+0xe8>
  }
  else
  
    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_RGB888)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d10a      	bne.n	800a664 <DMA2D_Init+0x90>
    {
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 8;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	68db      	ldr	r3, [r3, #12]
 800a652:	021b      	lsls	r3, r3, #8
 800a654:	617b      	str	r3, [r7, #20]
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	691b      	ldr	r3, [r3, #16]
 800a65a:	041b      	lsls	r3, r3, #16
 800a65c:	613b      	str	r3, [r7, #16]
      outalpha = (uint32_t)0x00000000;
 800a65e:	2300      	movs	r3, #0
 800a660:	60fb      	str	r3, [r7, #12]
 800a662:	e02b      	b.n	800a6bc <DMA2D_Init+0xe8>
    }
     
  else

    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_RGB565)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	685b      	ldr	r3, [r3, #4]
 800a668:	2b02      	cmp	r3, #2
 800a66a:	d10a      	bne.n	800a682 <DMA2D_Init+0xae>
    {
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 5;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	68db      	ldr	r3, [r3, #12]
 800a670:	015b      	lsls	r3, r3, #5
 800a672:	617b      	str	r3, [r7, #20]
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 11;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	691b      	ldr	r3, [r3, #16]
 800a678:	02db      	lsls	r3, r3, #11
 800a67a:	613b      	str	r3, [r7, #16]
      outalpha = (uint32_t)0x00000000;
 800a67c:	2300      	movs	r3, #0
 800a67e:	60fb      	str	r3, [r7, #12]
 800a680:	e01c      	b.n	800a6bc <DMA2D_Init+0xe8>
    }

  else

    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_ARGB1555)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	2b03      	cmp	r3, #3
 800a688:	d10c      	bne.n	800a6a4 <DMA2D_Init+0xd0>
    {  
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 5;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	68db      	ldr	r3, [r3, #12]
 800a68e:	015b      	lsls	r3, r3, #5
 800a690:	617b      	str	r3, [r7, #20]
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 10;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	691b      	ldr	r3, [r3, #16]
 800a696:	029b      	lsls	r3, r3, #10
 800a698:	613b      	str	r3, [r7, #16]
      outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 15;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	695b      	ldr	r3, [r3, #20]
 800a69e:	03db      	lsls	r3, r3, #15
 800a6a0:	60fb      	str	r3, [r7, #12]
 800a6a2:	e00b      	b.n	800a6bc <DMA2D_Init+0xe8>
    }

  else /* DMA2D_CMode = DMA2D_ARGB4444 */
  {
    outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 4;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	011b      	lsls	r3, r3, #4
 800a6aa:	617b      	str	r3, [r7, #20]
    outred = DMA2D_InitStruct->DMA2D_OutputRed << 8;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	691b      	ldr	r3, [r3, #16]
 800a6b0:	021b      	lsls	r3, r3, #8
 800a6b2:	613b      	str	r3, [r7, #16]
    outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 12;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	695b      	ldr	r3, [r3, #20]
 800a6b8:	031b      	lsls	r3, r3, #12
 800a6ba:	60fb      	str	r3, [r7, #12]
  }  
  DMA2D->OCOLR |= ((outgreen) | (outred) | (DMA2D_InitStruct->DMA2D_OutputBlue) | (outalpha));
 800a6bc:	4b1b      	ldr	r3, [pc, #108]	; (800a72c <DMA2D_Init+0x158>)
 800a6be:	4a1b      	ldr	r2, [pc, #108]	; (800a72c <DMA2D_Init+0x158>)
 800a6c0:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800a6c2:	6978      	ldr	r0, [r7, #20]
 800a6c4:	693a      	ldr	r2, [r7, #16]
 800a6c6:	4310      	orrs	r0, r2
 800a6c8:	687a      	ldr	r2, [r7, #4]
 800a6ca:	6892      	ldr	r2, [r2, #8]
 800a6cc:	4310      	orrs	r0, r2
 800a6ce:	68fa      	ldr	r2, [r7, #12]
 800a6d0:	4302      	orrs	r2, r0
 800a6d2:	430a      	orrs	r2, r1
 800a6d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configures the output memory address */
  DMA2D->OMAR = (DMA2D_InitStruct->DMA2D_OutputMemoryAdd);
 800a6d6:	4b15      	ldr	r3, [pc, #84]	; (800a72c <DMA2D_Init+0x158>)
 800a6d8:	687a      	ldr	r2, [r7, #4]
 800a6da:	6992      	ldr	r2, [r2, #24]
 800a6dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Configure  the line Offset */
  DMA2D->OOR &= ~(uint32_t)DMA2D_OOR_LO;
 800a6de:	4a13      	ldr	r2, [pc, #76]	; (800a72c <DMA2D_Init+0x158>)
 800a6e0:	4b12      	ldr	r3, [pc, #72]	; (800a72c <DMA2D_Init+0x158>)
 800a6e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6e4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800a6e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a6ec:	6413      	str	r3, [r2, #64]	; 0x40
  DMA2D->OOR |= (DMA2D_InitStruct->DMA2D_OutputOffset);
 800a6ee:	4b0f      	ldr	r3, [pc, #60]	; (800a72c <DMA2D_Init+0x158>)
 800a6f0:	4a0e      	ldr	r2, [pc, #56]	; (800a72c <DMA2D_Init+0x158>)
 800a6f2:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800a6f4:	687a      	ldr	r2, [r7, #4]
 800a6f6:	69d2      	ldr	r2, [r2, #28]
 800a6f8:	430a      	orrs	r2, r1
 800a6fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the number of line and pixel per line */
  pixline = DMA2D_InitStruct->DMA2D_PixelPerLine << 16; 
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a700:	041b      	lsls	r3, r3, #16
 800a702:	60bb      	str	r3, [r7, #8]
  DMA2D->NLR &= ~(DMA2D_NLR_NL | DMA2D_NLR_PL);
 800a704:	4b09      	ldr	r3, [pc, #36]	; (800a72c <DMA2D_Init+0x158>)
 800a706:	4a09      	ldr	r2, [pc, #36]	; (800a72c <DMA2D_Init+0x158>)
 800a708:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800a70a:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 800a70e:	645a      	str	r2, [r3, #68]	; 0x44
  DMA2D->NLR |= ((DMA2D_InitStruct->DMA2D_NumberOfLine) | (pixline));
 800a710:	4b06      	ldr	r3, [pc, #24]	; (800a72c <DMA2D_Init+0x158>)
 800a712:	4a06      	ldr	r2, [pc, #24]	; (800a72c <DMA2D_Init+0x158>)
 800a714:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800a716:	687a      	ldr	r2, [r7, #4]
 800a718:	6a10      	ldr	r0, [r2, #32]
 800a71a:	68ba      	ldr	r2, [r7, #8]
 800a71c:	4302      	orrs	r2, r0
 800a71e:	430a      	orrs	r2, r1
 800a720:	645a      	str	r2, [r3, #68]	; 0x44
  * @brief  Fills each DMA2D_InitStruct member with its default value.
  * @param  DMA2D_InitStruct: pointer to a DMA2D_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
}
 800a722:	371c      	adds	r7, #28
 800a724:	46bd      	mov	sp, r7
 800a726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72a:	4770      	bx	lr
 800a72c:	4002b000 	.word	0x4002b000

0800a730 <DMA2D_StructInit>:
void DMA2D_StructInit(DMA2D_InitTypeDef* DMA2D_InitStruct)
{
 800a730:	b480      	push	{r7}
 800a732:	b083      	sub	sp, #12
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  /* Initialize the transfer mode member */
  DMA2D_InitStruct->DMA2D_Mode = DMA2D_M2M;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2200      	movs	r2, #0
 800a73c:	601a      	str	r2, [r3, #0]

  /* Initialize the output color mode members */
  DMA2D_InitStruct->DMA2D_CMode = DMA2D_ARGB8888;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2200      	movs	r2, #0
 800a742:	605a      	str	r2, [r3, #4]

  /* Initialize the alpha and RGB values */
  DMA2D_InitStruct->DMA2D_OutputGreen = 0x00;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2200      	movs	r2, #0
 800a748:	60da      	str	r2, [r3, #12]
  DMA2D_InitStruct->DMA2D_OutputBlue = 0x00;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2200      	movs	r2, #0
 800a74e:	609a      	str	r2, [r3, #8]
  DMA2D_InitStruct->DMA2D_OutputRed = 0x00;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2200      	movs	r2, #0
 800a754:	611a      	str	r2, [r3, #16]
  DMA2D_InitStruct->DMA2D_OutputAlpha = 0x00;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2200      	movs	r2, #0
 800a75a:	615a      	str	r2, [r3, #20]

  /* Initialize the output memory address */
  DMA2D_InitStruct->DMA2D_OutputMemoryAdd = 0x00;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2200      	movs	r2, #0
 800a760:	619a      	str	r2, [r3, #24]

  /* Initialize the output offset */
  DMA2D_InitStruct->DMA2D_OutputOffset = 0x00;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2200      	movs	r2, #0
 800a766:	61da      	str	r2, [r3, #28]

  /* Initialize the number of line and the number of pixel per line */
  DMA2D_InitStruct->DMA2D_NumberOfLine = 0x00;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2200      	movs	r2, #0
 800a76c:	621a      	str	r2, [r3, #32]
  DMA2D_InitStruct->DMA2D_PixelPerLine = 0x00;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2200      	movs	r2, #0
 800a772:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a774:	370c      	adds	r7, #12
 800a776:	46bd      	mov	sp, r7
 800a778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77c:	4770      	bx	lr
 800a77e:	bf00      	nop

0800a780 <DMA2D_StartTransfer>:
  * @param 
  * @retval None
  */

void DMA2D_StartTransfer(void)
{
 800a780:	b480      	push	{r7}
 800a782:	af00      	add	r7, sp, #0
    /* Start DMA2D transfer by setting START bit */
    DMA2D->CR |= (uint32_t)DMA2D_CR_START;
 800a784:	4b04      	ldr	r3, [pc, #16]	; (800a798 <DMA2D_StartTransfer+0x18>)
 800a786:	4a04      	ldr	r2, [pc, #16]	; (800a798 <DMA2D_StartTransfer+0x18>)
 800a788:	6812      	ldr	r2, [r2, #0]
 800a78a:	f042 0201 	orr.w	r2, r2, #1
 800a78e:	601a      	str	r2, [r3, #0]
}
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr
 800a798:	4002b000 	.word	0x4002b000

0800a79c <DMA2D_AbortTransfer>:
  * @param
  * @retval None
  */

void DMA2D_AbortTransfer(void)
{
 800a79c:	b480      	push	{r7}
 800a79e:	af00      	add	r7, sp, #0
    /* Start DMA2D transfer by setting START bit */
    DMA2D->CR |= (uint32_t)DMA2D_CR_ABORT;
 800a7a0:	4b04      	ldr	r3, [pc, #16]	; (800a7b4 <DMA2D_AbortTransfer+0x18>)
 800a7a2:	4a04      	ldr	r2, [pc, #16]	; (800a7b4 <DMA2D_AbortTransfer+0x18>)
 800a7a4:	6812      	ldr	r2, [r2, #0]
 800a7a6:	f042 0204 	orr.w	r2, r2, #4
 800a7aa:	601a      	str	r2, [r3, #0]

}
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr
 800a7b4:	4002b000 	.word	0x4002b000

0800a7b8 <DMA2D_Suspend>:
  * @param  NewState: new state of the DMA2D peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA2D_Suspend(FunctionalState NewState)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b083      	sub	sp, #12
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	4603      	mov	r3, r0
 800a7c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a7c2:	79fb      	ldrb	r3, [r7, #7]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d006      	beq.n	800a7d6 <DMA2D_Suspend+0x1e>
  {
    /* Suspend DMA2D transfer by setting STOP bit */
    DMA2D->CR |= (uint32_t)DMA2D_CR_SUSP;
 800a7c8:	4b08      	ldr	r3, [pc, #32]	; (800a7ec <DMA2D_Suspend+0x34>)
 800a7ca:	4a08      	ldr	r2, [pc, #32]	; (800a7ec <DMA2D_Suspend+0x34>)
 800a7cc:	6812      	ldr	r2, [r2, #0]
 800a7ce:	f042 0202 	orr.w	r2, r2, #2
 800a7d2:	601a      	str	r2, [r3, #0]
 800a7d4:	e005      	b.n	800a7e2 <DMA2D_Suspend+0x2a>
  }
  else
  {
    /* Continue DMA2D transfer by clearing STOP bit */
    DMA2D->CR &= ~(uint32_t)DMA2D_CR_SUSP;
 800a7d6:	4b05      	ldr	r3, [pc, #20]	; (800a7ec <DMA2D_Suspend+0x34>)
 800a7d8:	4a04      	ldr	r2, [pc, #16]	; (800a7ec <DMA2D_Suspend+0x34>)
 800a7da:	6812      	ldr	r2, [r2, #0]
 800a7dc:	f022 0202 	bic.w	r2, r2, #2
 800a7e0:	601a      	str	r2, [r3, #0]
  }
}
 800a7e2:	370c      	adds	r7, #12
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr
 800a7ec:	4002b000 	.word	0x4002b000

0800a7f0 <DMA2D_FGConfig>:
  * @param  DMA2D_FGStruct: pointer to a DMA2D_FGTypeDef structure that contains
  *         the configuration information for the specified Background.
  * @retval None
  */
void DMA2D_FGConfig(DMA2D_FG_InitTypeDef* DMA2D_FG_InitStruct)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b089      	sub	sp, #36	; 0x24
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]

  uint32_t fg_clutcolormode = 0;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	61fb      	str	r3, [r7, #28]
  uint32_t fg_clutsize = 0;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	61bb      	str	r3, [r7, #24]
  uint32_t fg_alpha_mode = 0;
 800a800:	2300      	movs	r3, #0
 800a802:	617b      	str	r3, [r7, #20]
  uint32_t fg_alphavalue = 0;
 800a804:	2300      	movs	r3, #0
 800a806:	613b      	str	r3, [r7, #16]
  uint32_t fg_colorgreen = 0;
 800a808:	2300      	movs	r3, #0
 800a80a:	60fb      	str	r3, [r7, #12]
  uint32_t fg_colorred = 0;
 800a80c:	2300      	movs	r3, #0
 800a80e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA2D_FGC_BLUE(DMA2D_FG_InitStruct->DMA2D_FGC_BLUE));
  assert_param(IS_DMA2D_FGC_GREEN(DMA2D_FG_InitStruct->DMA2D_FGC_GREEN));
  assert_param(IS_DMA2D_FGC_RED(DMA2D_FG_InitStruct->DMA2D_FGC_RED));

  /* Configures the FG memory address */
  DMA2D->FGMAR = (DMA2D_FG_InitStruct->DMA2D_FGMA);
 800a810:	4b2c      	ldr	r3, [pc, #176]	; (800a8c4 <DMA2D_FGConfig+0xd4>)
 800a812:	687a      	ldr	r2, [r7, #4]
 800a814:	6812      	ldr	r2, [r2, #0]
 800a816:	60da      	str	r2, [r3, #12]

  /* Configures the FG offset */
  DMA2D->FGOR &= ~(uint32_t)DMA2D_FGOR_LO;
 800a818:	4a2a      	ldr	r2, [pc, #168]	; (800a8c4 <DMA2D_FGConfig+0xd4>)
 800a81a:	4b2a      	ldr	r3, [pc, #168]	; (800a8c4 <DMA2D_FGConfig+0xd4>)
 800a81c:	691b      	ldr	r3, [r3, #16]
 800a81e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800a822:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a826:	6113      	str	r3, [r2, #16]
  DMA2D->FGOR |= (DMA2D_FG_InitStruct->DMA2D_FGO);
 800a828:	4b26      	ldr	r3, [pc, #152]	; (800a8c4 <DMA2D_FGConfig+0xd4>)
 800a82a:	4a26      	ldr	r2, [pc, #152]	; (800a8c4 <DMA2D_FGConfig+0xd4>)
 800a82c:	6911      	ldr	r1, [r2, #16]
 800a82e:	687a      	ldr	r2, [r7, #4]
 800a830:	6852      	ldr	r2, [r2, #4]
 800a832:	430a      	orrs	r2, r1
 800a834:	611a      	str	r2, [r3, #16]

  /* Configures foreground Pixel Format Convertor */
  DMA2D->FGPFCCR &= (uint32_t)PFCCR_MASK;
 800a836:	4a23      	ldr	r2, [pc, #140]	; (800a8c4 <DMA2D_FGConfig+0xd4>)
 800a838:	4b22      	ldr	r3, [pc, #136]	; (800a8c4 <DMA2D_FGConfig+0xd4>)
 800a83a:	69d9      	ldr	r1, [r3, #28]
 800a83c:	4b22      	ldr	r3, [pc, #136]	; (800a8c8 <DMA2D_FGConfig+0xd8>)
 800a83e:	400b      	ands	r3, r1
 800a840:	61d3      	str	r3, [r2, #28]
  fg_clutcolormode = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_CM << 4;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	011b      	lsls	r3, r3, #4
 800a848:	61fb      	str	r3, [r7, #28]
  fg_clutsize = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_SIZE << 8;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	691b      	ldr	r3, [r3, #16]
 800a84e:	021b      	lsls	r3, r3, #8
 800a850:	61bb      	str	r3, [r7, #24]
  fg_alpha_mode = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_MODE << 16;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	695b      	ldr	r3, [r3, #20]
 800a856:	041b      	lsls	r3, r3, #16
 800a858:	617b      	str	r3, [r7, #20]
  fg_alphavalue = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_VALUE << 24;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	699b      	ldr	r3, [r3, #24]
 800a85e:	061b      	lsls	r3, r3, #24
 800a860:	613b      	str	r3, [r7, #16]
  DMA2D->FGPFCCR |= (DMA2D_FG_InitStruct->DMA2D_FGCM | fg_clutcolormode | fg_clutsize | \
 800a862:	4b18      	ldr	r3, [pc, #96]	; (800a8c4 <DMA2D_FGConfig+0xd4>)
 800a864:	4a17      	ldr	r2, [pc, #92]	; (800a8c4 <DMA2D_FGConfig+0xd4>)
 800a866:	69d1      	ldr	r1, [r2, #28]
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	6890      	ldr	r0, [r2, #8]
 800a86c:	69fa      	ldr	r2, [r7, #28]
 800a86e:	4310      	orrs	r0, r2
 800a870:	69ba      	ldr	r2, [r7, #24]
 800a872:	4310      	orrs	r0, r2
 800a874:	697a      	ldr	r2, [r7, #20]
 800a876:	4310      	orrs	r0, r2
                    fg_alpha_mode | fg_alphavalue);
 800a878:	693a      	ldr	r2, [r7, #16]
 800a87a:	4302      	orrs	r2, r0
  DMA2D->FGPFCCR &= (uint32_t)PFCCR_MASK;
  fg_clutcolormode = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_CM << 4;
  fg_clutsize = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_SIZE << 8;
  fg_alpha_mode = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_MODE << 16;
  fg_alphavalue = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_VALUE << 24;
  DMA2D->FGPFCCR |= (DMA2D_FG_InitStruct->DMA2D_FGCM | fg_clutcolormode | fg_clutsize | \
 800a87c:	430a      	orrs	r2, r1
 800a87e:	61da      	str	r2, [r3, #28]
                    fg_alpha_mode | fg_alphavalue);

  /* Configures foreground color */
  DMA2D->FGCOLR &= ~(DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED);
 800a880:	4b10      	ldr	r3, [pc, #64]	; (800a8c4 <DMA2D_FGConfig+0xd4>)
 800a882:	4a10      	ldr	r2, [pc, #64]	; (800a8c4 <DMA2D_FGConfig+0xd4>)
 800a884:	6a12      	ldr	r2, [r2, #32]
 800a886:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800a88a:	621a      	str	r2, [r3, #32]
  fg_colorgreen = DMA2D_FG_InitStruct->DMA2D_FGC_GREEN << 8;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6a1b      	ldr	r3, [r3, #32]
 800a890:	021b      	lsls	r3, r3, #8
 800a892:	60fb      	str	r3, [r7, #12]
  fg_colorred = DMA2D_FG_InitStruct->DMA2D_FGC_RED << 16;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a898:	041b      	lsls	r3, r3, #16
 800a89a:	60bb      	str	r3, [r7, #8]
  DMA2D->FGCOLR |= (DMA2D_FG_InitStruct->DMA2D_FGC_BLUE | fg_colorgreen | fg_colorred);
 800a89c:	4b09      	ldr	r3, [pc, #36]	; (800a8c4 <DMA2D_FGConfig+0xd4>)
 800a89e:	4a09      	ldr	r2, [pc, #36]	; (800a8c4 <DMA2D_FGConfig+0xd4>)
 800a8a0:	6a11      	ldr	r1, [r2, #32]
 800a8a2:	687a      	ldr	r2, [r7, #4]
 800a8a4:	69d0      	ldr	r0, [r2, #28]
 800a8a6:	68fa      	ldr	r2, [r7, #12]
 800a8a8:	4310      	orrs	r0, r2
 800a8aa:	68ba      	ldr	r2, [r7, #8]
 800a8ac:	4302      	orrs	r2, r0
 800a8ae:	430a      	orrs	r2, r1
 800a8b0:	621a      	str	r2, [r3, #32]

  /* Configures foreground CLUT memory address */
  DMA2D->FGCMAR = DMA2D_FG_InitStruct->DMA2D_FGCMAR;
 800a8b2:	4b04      	ldr	r3, [pc, #16]	; (800a8c4 <DMA2D_FGConfig+0xd4>)
 800a8b4:	687a      	ldr	r2, [r7, #4]
 800a8b6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a8b8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800a8ba:	3724      	adds	r7, #36	; 0x24
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr
 800a8c4:	4002b000 	.word	0x4002b000
 800a8c8:	00fc00c0 	.word	0x00fc00c0

0800a8cc <DMA2D_FG_StructInit>:
  * @param  DMA2D_FGStruct: pointer to a DMA2D_FGTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DMA2D_FG_StructInit(DMA2D_FG_InitTypeDef* DMA2D_FG_InitStruct)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b083      	sub	sp, #12
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  /*!< Initialize the DMA2D foreground memory address */
  DMA2D_FG_InitStruct->DMA2D_FGMA = 0x00;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	601a      	str	r2, [r3, #0]

  /*!< Initialize the DMA2D foreground offset */
  DMA2D_FG_InitStruct->DMA2D_FGO = 0x00;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	605a      	str	r2, [r3, #4]

  /*!< Initialize the DMA2D foreground color mode */
  DMA2D_FG_InitStruct->DMA2D_FGCM = CM_ARGB8888;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	609a      	str	r2, [r3, #8]

  /*!< Initialize the DMA2D foreground CLUT color mode */
  DMA2D_FG_InitStruct->DMA2D_FG_CLUT_CM = CLUT_CM_ARGB8888;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	60da      	str	r2, [r3, #12]

  /*!< Initialize the DMA2D foreground CLUT size */
  DMA2D_FG_InitStruct->DMA2D_FG_CLUT_SIZE = 0x00;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	611a      	str	r2, [r3, #16]

  /*!< Initialize the DMA2D foreground alpha mode */
  DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_MODE = NO_MODIF_ALPHA_VALUE;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	615a      	str	r2, [r3, #20]

  /*!< Initialize the DMA2D foreground alpha value */
  DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_VALUE = 0x00;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	619a      	str	r2, [r3, #24]

  /*!< Initialize the DMA2D foreground blue value */
  DMA2D_FG_InitStruct->DMA2D_FGC_BLUE = 0x00;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2200      	movs	r2, #0
 800a902:	61da      	str	r2, [r3, #28]

  /*!< Initialize the DMA2D foreground green value */
  DMA2D_FG_InitStruct->DMA2D_FGC_GREEN = 0x00;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2200      	movs	r2, #0
 800a908:	621a      	str	r2, [r3, #32]

  /*!< Initialize the DMA2D foreground red value */
  DMA2D_FG_InitStruct->DMA2D_FGC_RED = 0x00;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2200      	movs	r2, #0
 800a90e:	625a      	str	r2, [r3, #36]	; 0x24

  /*!< Initialize the DMA2D foreground CLUT memory address */
  DMA2D_FG_InitStruct->DMA2D_FGCMAR = 0x00;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2200      	movs	r2, #0
 800a914:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a916:	370c      	adds	r7, #12
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr

0800a920 <DMA2D_BGConfig>:
  * @param  DMA2D_BGStruct: pointer to a DMA2D_BGTypeDef structure that contains
  *         the configuration information for the specified Background.
  * @retval None
  */
void DMA2D_BGConfig(DMA2D_BG_InitTypeDef* DMA2D_BG_InitStruct)
{
 800a920:	b480      	push	{r7}
 800a922:	b089      	sub	sp, #36	; 0x24
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]

  uint32_t bg_clutcolormode = 0;
 800a928:	2300      	movs	r3, #0
 800a92a:	61fb      	str	r3, [r7, #28]
  uint32_t bg_clutsize = 0;
 800a92c:	2300      	movs	r3, #0
 800a92e:	61bb      	str	r3, [r7, #24]
  uint32_t bg_alpha_mode = 0;
 800a930:	2300      	movs	r3, #0
 800a932:	617b      	str	r3, [r7, #20]
  uint32_t bg_alphavalue = 0;
 800a934:	2300      	movs	r3, #0
 800a936:	613b      	str	r3, [r7, #16]
  uint32_t bg_colorgreen = 0;
 800a938:	2300      	movs	r3, #0
 800a93a:	60fb      	str	r3, [r7, #12]
  uint32_t bg_colorred = 0;
 800a93c:	2300      	movs	r3, #0
 800a93e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA2D_BGC_BLUE(DMA2D_BG_InitStruct->DMA2D_BGC_BLUE));
  assert_param(IS_DMA2D_BGC_GREEN(DMA2D_BG_InitStruct->DMA2D_BGC_GREEN));
  assert_param(IS_DMA2D_BGC_RED(DMA2D_BG_InitStruct->DMA2D_BGC_RED));

  /* Configures the BG memory address */
  DMA2D->BGMAR = (DMA2D_BG_InitStruct->DMA2D_BGMA);
 800a940:	4b2c      	ldr	r3, [pc, #176]	; (800a9f4 <DMA2D_BGConfig+0xd4>)
 800a942:	687a      	ldr	r2, [r7, #4]
 800a944:	6812      	ldr	r2, [r2, #0]
 800a946:	615a      	str	r2, [r3, #20]

  /* Configures the BG offset */
  DMA2D->BGOR &= ~(uint32_t)DMA2D_BGOR_LO;
 800a948:	4a2a      	ldr	r2, [pc, #168]	; (800a9f4 <DMA2D_BGConfig+0xd4>)
 800a94a:	4b2a      	ldr	r3, [pc, #168]	; (800a9f4 <DMA2D_BGConfig+0xd4>)
 800a94c:	699b      	ldr	r3, [r3, #24]
 800a94e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800a952:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a956:	6193      	str	r3, [r2, #24]
  DMA2D->BGOR |= (DMA2D_BG_InitStruct->DMA2D_BGO);
 800a958:	4b26      	ldr	r3, [pc, #152]	; (800a9f4 <DMA2D_BGConfig+0xd4>)
 800a95a:	4a26      	ldr	r2, [pc, #152]	; (800a9f4 <DMA2D_BGConfig+0xd4>)
 800a95c:	6991      	ldr	r1, [r2, #24]
 800a95e:	687a      	ldr	r2, [r7, #4]
 800a960:	6852      	ldr	r2, [r2, #4]
 800a962:	430a      	orrs	r2, r1
 800a964:	619a      	str	r2, [r3, #24]

  /* Configures background Pixel Format Convertor */
  DMA2D->BGPFCCR &= (uint32_t)PFCCR_MASK;
 800a966:	4a23      	ldr	r2, [pc, #140]	; (800a9f4 <DMA2D_BGConfig+0xd4>)
 800a968:	4b22      	ldr	r3, [pc, #136]	; (800a9f4 <DMA2D_BGConfig+0xd4>)
 800a96a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a96c:	4b22      	ldr	r3, [pc, #136]	; (800a9f8 <DMA2D_BGConfig+0xd8>)
 800a96e:	400b      	ands	r3, r1
 800a970:	6253      	str	r3, [r2, #36]	; 0x24
  bg_clutcolormode = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_CM << 4;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	68db      	ldr	r3, [r3, #12]
 800a976:	011b      	lsls	r3, r3, #4
 800a978:	61fb      	str	r3, [r7, #28]
  bg_clutsize = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_SIZE << 8;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	691b      	ldr	r3, [r3, #16]
 800a97e:	021b      	lsls	r3, r3, #8
 800a980:	61bb      	str	r3, [r7, #24]
  bg_alpha_mode = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_MODE << 16;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	695b      	ldr	r3, [r3, #20]
 800a986:	041b      	lsls	r3, r3, #16
 800a988:	617b      	str	r3, [r7, #20]
  bg_alphavalue = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_VALUE << 24;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	699b      	ldr	r3, [r3, #24]
 800a98e:	061b      	lsls	r3, r3, #24
 800a990:	613b      	str	r3, [r7, #16]
  DMA2D->BGPFCCR |= (DMA2D_BG_InitStruct->DMA2D_BGCM | bg_clutcolormode | bg_clutsize | \
 800a992:	4b18      	ldr	r3, [pc, #96]	; (800a9f4 <DMA2D_BGConfig+0xd4>)
 800a994:	4a17      	ldr	r2, [pc, #92]	; (800a9f4 <DMA2D_BGConfig+0xd4>)
 800a996:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800a998:	687a      	ldr	r2, [r7, #4]
 800a99a:	6890      	ldr	r0, [r2, #8]
 800a99c:	69fa      	ldr	r2, [r7, #28]
 800a99e:	4310      	orrs	r0, r2
 800a9a0:	69ba      	ldr	r2, [r7, #24]
 800a9a2:	4310      	orrs	r0, r2
 800a9a4:	697a      	ldr	r2, [r7, #20]
 800a9a6:	4310      	orrs	r0, r2
                    bg_alpha_mode | bg_alphavalue);
 800a9a8:	693a      	ldr	r2, [r7, #16]
 800a9aa:	4302      	orrs	r2, r0
  DMA2D->BGPFCCR &= (uint32_t)PFCCR_MASK;
  bg_clutcolormode = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_CM << 4;
  bg_clutsize = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_SIZE << 8;
  bg_alpha_mode = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_MODE << 16;
  bg_alphavalue = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_VALUE << 24;
  DMA2D->BGPFCCR |= (DMA2D_BG_InitStruct->DMA2D_BGCM | bg_clutcolormode | bg_clutsize | \
 800a9ac:	430a      	orrs	r2, r1
 800a9ae:	625a      	str	r2, [r3, #36]	; 0x24
                    bg_alpha_mode | bg_alphavalue);

  /* Configures background color */
  DMA2D->BGCOLR &= ~(DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | DMA2D_BGCOLR_RED);
 800a9b0:	4b10      	ldr	r3, [pc, #64]	; (800a9f4 <DMA2D_BGConfig+0xd4>)
 800a9b2:	4a10      	ldr	r2, [pc, #64]	; (800a9f4 <DMA2D_BGConfig+0xd4>)
 800a9b4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a9b6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800a9ba:	629a      	str	r2, [r3, #40]	; 0x28
  bg_colorgreen = DMA2D_BG_InitStruct->DMA2D_BGC_GREEN << 8;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6a1b      	ldr	r3, [r3, #32]
 800a9c0:	021b      	lsls	r3, r3, #8
 800a9c2:	60fb      	str	r3, [r7, #12]
  bg_colorred = DMA2D_BG_InitStruct->DMA2D_BGC_RED << 16;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c8:	041b      	lsls	r3, r3, #16
 800a9ca:	60bb      	str	r3, [r7, #8]
  DMA2D->BGCOLR |= (DMA2D_BG_InitStruct->DMA2D_BGC_BLUE | bg_colorgreen | bg_colorred);
 800a9cc:	4b09      	ldr	r3, [pc, #36]	; (800a9f4 <DMA2D_BGConfig+0xd4>)
 800a9ce:	4a09      	ldr	r2, [pc, #36]	; (800a9f4 <DMA2D_BGConfig+0xd4>)
 800a9d0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a9d2:	687a      	ldr	r2, [r7, #4]
 800a9d4:	69d0      	ldr	r0, [r2, #28]
 800a9d6:	68fa      	ldr	r2, [r7, #12]
 800a9d8:	4310      	orrs	r0, r2
 800a9da:	68ba      	ldr	r2, [r7, #8]
 800a9dc:	4302      	orrs	r2, r0
 800a9de:	430a      	orrs	r2, r1
 800a9e0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Configures background CLUT memory address */
  DMA2D->BGCMAR = DMA2D_BG_InitStruct->DMA2D_BGCMAR;
 800a9e2:	4b04      	ldr	r3, [pc, #16]	; (800a9f4 <DMA2D_BGConfig+0xd4>)
 800a9e4:	687a      	ldr	r2, [r7, #4]
 800a9e6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a9e8:	631a      	str	r2, [r3, #48]	; 0x30

}
 800a9ea:	3724      	adds	r7, #36	; 0x24
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr
 800a9f4:	4002b000 	.word	0x4002b000
 800a9f8:	00fc00c0 	.word	0x00fc00c0

0800a9fc <DMA2D_BG_StructInit>:
  * @param  DMA2D_BGStruct: pointer to a DMA2D_BGTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DMA2D_BG_StructInit(DMA2D_BG_InitTypeDef* DMA2D_BG_InitStruct)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b083      	sub	sp, #12
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  /*!< Initialize the DMA2D background memory address */
  DMA2D_BG_InitStruct->DMA2D_BGMA = 0x00;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2200      	movs	r2, #0
 800aa08:	601a      	str	r2, [r3, #0]

  /*!< Initialize the DMA2D background offset */
  DMA2D_BG_InitStruct->DMA2D_BGO = 0x00;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	605a      	str	r2, [r3, #4]

  /*!< Initialize the DMA2D background color mode */
  DMA2D_BG_InitStruct->DMA2D_BGCM = CM_ARGB8888;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2200      	movs	r2, #0
 800aa14:	609a      	str	r2, [r3, #8]

  /*!< Initialize the DMA2D background CLUT color mode */
  DMA2D_BG_InitStruct->DMA2D_BG_CLUT_CM = CLUT_CM_ARGB8888;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	60da      	str	r2, [r3, #12]

  /*!< Initialize the DMA2D background CLUT size */
  DMA2D_BG_InitStruct->DMA2D_BG_CLUT_SIZE = 0x00;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	611a      	str	r2, [r3, #16]

  /*!< Initialize the DMA2D background alpha mode */
  DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_MODE = NO_MODIF_ALPHA_VALUE;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2200      	movs	r2, #0
 800aa26:	615a      	str	r2, [r3, #20]

  /*!< Initialize the DMA2D background alpha value */
  DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_VALUE = 0x00;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	619a      	str	r2, [r3, #24]

  /*!< Initialize the DMA2D background blue value */
  DMA2D_BG_InitStruct->DMA2D_BGC_BLUE = 0x00;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2200      	movs	r2, #0
 800aa32:	61da      	str	r2, [r3, #28]

  /*!< Initialize the DMA2D background green value */
  DMA2D_BG_InitStruct->DMA2D_BGC_GREEN = 0x00;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2200      	movs	r2, #0
 800aa38:	621a      	str	r2, [r3, #32]

  /*!< Initialize the DMA2D background red value */
  DMA2D_BG_InitStruct->DMA2D_BGC_RED = 0x00;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	625a      	str	r2, [r3, #36]	; 0x24

  /*!< Initialize the DMA2D background CLUT memory address */
  DMA2D_BG_InitStruct->DMA2D_BGCMAR = 0x00;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2200      	movs	r2, #0
 800aa44:	629a      	str	r2, [r3, #40]	; 0x28
}
 800aa46:	370c      	adds	r7, #12
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr

0800aa50 <DMA2D_FGStart>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void DMA2D_FGStart(FunctionalState NewState) 
{
 800aa50:	b480      	push	{r7}
 800aa52:	b083      	sub	sp, #12
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	4603      	mov	r3, r0
 800aa58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800aa5a:	79fb      	ldrb	r3, [r7, #7]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d006      	beq.n	800aa6e <DMA2D_FGStart+0x1e>
  {
    /* Start the automatic loading of the CLUT */
    DMA2D->FGPFCCR |= DMA2D_FGPFCCR_START;
 800aa60:	4b08      	ldr	r3, [pc, #32]	; (800aa84 <DMA2D_FGStart+0x34>)
 800aa62:	4a08      	ldr	r2, [pc, #32]	; (800aa84 <DMA2D_FGStart+0x34>)
 800aa64:	69d2      	ldr	r2, [r2, #28]
 800aa66:	f042 0220 	orr.w	r2, r2, #32
 800aa6a:	61da      	str	r2, [r3, #28]
 800aa6c:	e005      	b.n	800aa7a <DMA2D_FGStart+0x2a>
  }
  else
  {
    /* abort the transfer */
    DMA2D->FGPFCCR &= (uint32_t)~DMA2D_FGPFCCR_START;
 800aa6e:	4b05      	ldr	r3, [pc, #20]	; (800aa84 <DMA2D_FGStart+0x34>)
 800aa70:	4a04      	ldr	r2, [pc, #16]	; (800aa84 <DMA2D_FGStart+0x34>)
 800aa72:	69d2      	ldr	r2, [r2, #28]
 800aa74:	f022 0220 	bic.w	r2, r2, #32
 800aa78:	61da      	str	r2, [r3, #28]
  }
}
 800aa7a:	370c      	adds	r7, #12
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa82:	4770      	bx	lr
 800aa84:	4002b000 	.word	0x4002b000

0800aa88 <DMA2D_BGStart>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
  
void DMA2D_BGStart(FunctionalState NewState) 
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b083      	sub	sp, #12
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	4603      	mov	r3, r0
 800aa90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800aa92:	79fb      	ldrb	r3, [r7, #7]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d006      	beq.n	800aaa6 <DMA2D_BGStart+0x1e>
  {
    /* Start the automatic loading of the CLUT */
    DMA2D->BGPFCCR |= DMA2D_BGPFCCR_START;
 800aa98:	4b08      	ldr	r3, [pc, #32]	; (800aabc <DMA2D_BGStart+0x34>)
 800aa9a:	4a08      	ldr	r2, [pc, #32]	; (800aabc <DMA2D_BGStart+0x34>)
 800aa9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800aa9e:	f042 0220 	orr.w	r2, r2, #32
 800aaa2:	625a      	str	r2, [r3, #36]	; 0x24
 800aaa4:	e005      	b.n	800aab2 <DMA2D_BGStart+0x2a>
  }
  else
  {
    /* abort the transfer */
    DMA2D->BGPFCCR &= (uint32_t)~DMA2D_BGPFCCR_START;
 800aaa6:	4b05      	ldr	r3, [pc, #20]	; (800aabc <DMA2D_BGStart+0x34>)
 800aaa8:	4a04      	ldr	r2, [pc, #16]	; (800aabc <DMA2D_BGStart+0x34>)
 800aaaa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800aaac:	f022 0220 	bic.w	r2, r2, #32
 800aab0:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800aab2:	370c      	adds	r7, #12
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr
 800aabc:	4002b000 	.word	0x4002b000

0800aac0 <DMA2D_DeadTimeConfig>:
  * @param  DMA2D_DeadTime: specifies the DMA2D dead time.
  *   This parameter can be one of the following values:
  * @retval None
  */
void DMA2D_DeadTimeConfig(uint32_t DMA2D_DeadTime, FunctionalState NewState)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b085      	sub	sp, #20
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	460b      	mov	r3, r1
 800aaca:	70fb      	strb	r3, [r7, #3]

  /* Check the parameters */
  assert_param(IS_DMA2D_DEAD_TIME(DMA2D_DeadTime));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800aacc:	78fb      	ldrb	r3, [r7, #3]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d013      	beq.n	800aafa <DMA2D_DeadTimeConfig+0x3a>
  {
    /* Enable and Configures the dead time */
    DMA2D->AMTCR &= (uint32_t)DEAD_MASK;
 800aad2:	4a0f      	ldr	r2, [pc, #60]	; (800ab10 <DMA2D_DeadTimeConfig+0x50>)
 800aad4:	4b0e      	ldr	r3, [pc, #56]	; (800ab10 <DMA2D_DeadTimeConfig+0x50>)
 800aad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aad8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aadc:	f023 0301 	bic.w	r3, r3, #1
 800aae0:	64d3      	str	r3, [r2, #76]	; 0x4c
    DeadTime = DMA2D_DeadTime << 8;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	021b      	lsls	r3, r3, #8
 800aae6:	60fb      	str	r3, [r7, #12]
    DMA2D->AMTCR |= (DeadTime | DMA2D_AMTCR_EN);
 800aae8:	4b09      	ldr	r3, [pc, #36]	; (800ab10 <DMA2D_DeadTimeConfig+0x50>)
 800aaea:	4a09      	ldr	r2, [pc, #36]	; (800ab10 <DMA2D_DeadTimeConfig+0x50>)
 800aaec:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 800aaee:	68fa      	ldr	r2, [r7, #12]
 800aaf0:	430a      	orrs	r2, r1
 800aaf2:	f042 0201 	orr.w	r2, r2, #1
 800aaf6:	64da      	str	r2, [r3, #76]	; 0x4c
 800aaf8:	e005      	b.n	800ab06 <DMA2D_DeadTimeConfig+0x46>
  }
  else
  {
     DMA2D->AMTCR &= ~(uint32_t)DMA2D_AMTCR_EN;
 800aafa:	4b05      	ldr	r3, [pc, #20]	; (800ab10 <DMA2D_DeadTimeConfig+0x50>)
 800aafc:	4a04      	ldr	r2, [pc, #16]	; (800ab10 <DMA2D_DeadTimeConfig+0x50>)
 800aafe:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800ab00:	f022 0201 	bic.w	r2, r2, #1
 800ab04:	64da      	str	r2, [r3, #76]	; 0x4c
  }
}
 800ab06:	3714      	adds	r7, #20
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0e:	4770      	bx	lr
 800ab10:	4002b000 	.word	0x4002b000

0800ab14 <DMA2D_LineWatermarkConfig>:
  * @param  DMA2D_LWatermarkConfig: Line Watermark configuration.
  * @retval None
  */

void DMA2D_LineWatermarkConfig(uint32_t DMA2D_LWatermarkConfig)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b083      	sub	sp, #12
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA2D_LineWatermark(DMA2D_LWatermarkConfig));

  /* Sets the Line watermark configuration */
  DMA2D->LWR = (uint32_t)DMA2D_LWatermarkConfig;
 800ab1c:	4b03      	ldr	r3, [pc, #12]	; (800ab2c <DMA2D_LineWatermarkConfig+0x18>)
 800ab1e:	687a      	ldr	r2, [r7, #4]
 800ab20:	649a      	str	r2, [r3, #72]	; 0x48
}
 800ab22:	370c      	adds	r7, #12
 800ab24:	46bd      	mov	sp, r7
 800ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2a:	4770      	bx	lr
 800ab2c:	4002b000 	.word	0x4002b000

0800ab30 <DMA2D_ITConfig>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void DMA2D_ITConfig(uint32_t DMA2D_IT, FunctionalState NewState)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b083      	sub	sp, #12
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	460b      	mov	r3, r1
 800ab3a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA2D_IT(DMA2D_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800ab3c:	78fb      	ldrb	r3, [r7, #3]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d006      	beq.n	800ab50 <DMA2D_ITConfig+0x20>
  {
    /* Enable the selected DMA2D interrupts */
    DMA2D->CR |= DMA2D_IT;
 800ab42:	4b09      	ldr	r3, [pc, #36]	; (800ab68 <DMA2D_ITConfig+0x38>)
 800ab44:	4a08      	ldr	r2, [pc, #32]	; (800ab68 <DMA2D_ITConfig+0x38>)
 800ab46:	6811      	ldr	r1, [r2, #0]
 800ab48:	687a      	ldr	r2, [r7, #4]
 800ab4a:	430a      	orrs	r2, r1
 800ab4c:	601a      	str	r2, [r3, #0]
 800ab4e:	e006      	b.n	800ab5e <DMA2D_ITConfig+0x2e>
  }
  else
  {
    /* Disable the selected DMA2D interrupts */
    DMA2D->CR &= (uint32_t)~DMA2D_IT;
 800ab50:	4b05      	ldr	r3, [pc, #20]	; (800ab68 <DMA2D_ITConfig+0x38>)
 800ab52:	4a05      	ldr	r2, [pc, #20]	; (800ab68 <DMA2D_ITConfig+0x38>)
 800ab54:	6811      	ldr	r1, [r2, #0]
 800ab56:	687a      	ldr	r2, [r7, #4]
 800ab58:	43d2      	mvns	r2, r2
 800ab5a:	400a      	ands	r2, r1
 800ab5c:	601a      	str	r2, [r3, #0]
  }
}
 800ab5e:	370c      	adds	r7, #12
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr
 800ab68:	4002b000 	.word	0x4002b000

0800ab6c <DMA2D_GetFlagStatus>:
  *     @arg DMA2D_FLAG_TE:   Transfer Error interrupt flag.
  * @retval The new state of DMA2D_FLAG (SET or RESET).
  */

FlagStatus DMA2D_GetFlagStatus(uint32_t DMA2D_FLAG)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b085      	sub	sp, #20
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800ab74:	2300      	movs	r3, #0
 800ab76:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_DMA2D_GET_FLAG(DMA2D_FLAG));
  
  /* Check the status of the specified DMA2D flag */
  if (((DMA2D->ISR) & DMA2D_FLAG) != (uint32_t)RESET)
 800ab78:	4b08      	ldr	r3, [pc, #32]	; (800ab9c <DMA2D_GetFlagStatus+0x30>)
 800ab7a:	685a      	ldr	r2, [r3, #4]
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	4013      	ands	r3, r2
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d002      	beq.n	800ab8a <DMA2D_GetFlagStatus+0x1e>
  {
    /* DMA2D_FLAG is set */
    bitstatus = SET;
 800ab84:	2301      	movs	r3, #1
 800ab86:	73fb      	strb	r3, [r7, #15]
 800ab88:	e001      	b.n	800ab8e <DMA2D_GetFlagStatus+0x22>
  }
  else
  {
    /* DMA2D_FLAG is reset */
    bitstatus = RESET;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DMA2D_FLAG status */
  return bitstatus;
 800ab8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3714      	adds	r7, #20
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr
 800ab9c:	4002b000 	.word	0x4002b000

0800aba0 <DMA2D_ClearFlag>:
  *     @arg DMA2D_FLAG_TC:   Transfer Complete interrupt flag.
  *     @arg DMA2D_FLAG_TE:   Transfer Error interrupt flag.
  * @retval None
  */
void DMA2D_ClearFlag(uint32_t DMA2D_FLAG)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA2D_GET_FLAG(DMA2D_FLAG));
    
  /* Clear the corresponding DMA2D flag */
  DMA2D->IFCR = (uint32_t)DMA2D_FLAG;
 800aba8:	4b03      	ldr	r3, [pc, #12]	; (800abb8 <DMA2D_ClearFlag+0x18>)
 800abaa:	687a      	ldr	r2, [r7, #4]
 800abac:	609a      	str	r2, [r3, #8]
}
 800abae:	370c      	adds	r7, #12
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr
 800abb8:	4002b000 	.word	0x4002b000

0800abbc <DMA2D_GetITStatus>:
  *     @arg DMA2D_IT_TC:   Transfer Complete interrupt enable.
  *     @arg DMA2D_IT_TE:   Transfer Error interrupt enable.
  * @retval The new state of the DMA2D_IT (SET or RESET).
  */
ITStatus DMA2D_GetITStatus(uint32_t DMA2D_IT)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b085      	sub	sp, #20
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800abc4:	2300      	movs	r3, #0
 800abc6:	73fb      	strb	r3, [r7, #15]
  uint32_t DMA2D_IT_FLAG = DMA2D_IT >> 8;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	0a1b      	lsrs	r3, r3, #8
 800abcc:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DMA2D_IT(DMA2D_IT));

  if ((DMA2D->ISR & DMA2D_IT_FLAG) != (uint32_t)RESET)
 800abce:	4b10      	ldr	r3, [pc, #64]	; (800ac10 <DMA2D_GetITStatus+0x54>)
 800abd0:	685a      	ldr	r2, [r3, #4]
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	4013      	ands	r3, r2
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d002      	beq.n	800abe0 <DMA2D_GetITStatus+0x24>
  {
    bitstatus = SET;
 800abda:	2301      	movs	r3, #1
 800abdc:	73fb      	strb	r3, [r7, #15]
 800abde:	e001      	b.n	800abe4 <DMA2D_GetITStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
 800abe0:	2300      	movs	r3, #0
 800abe2:	73fb      	strb	r3, [r7, #15]
  }
  
  if (((DMA2D->CR & DMA2D_IT) != (uint32_t)RESET) && (bitstatus != (uint32_t)RESET))
 800abe4:	4b0a      	ldr	r3, [pc, #40]	; (800ac10 <DMA2D_GetITStatus+0x54>)
 800abe6:	681a      	ldr	r2, [r3, #0]
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	4013      	ands	r3, r2
 800abec:	2b00      	cmp	r3, #0
 800abee:	d005      	beq.n	800abfc <DMA2D_GetITStatus+0x40>
 800abf0:	7bfb      	ldrb	r3, [r7, #15]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d002      	beq.n	800abfc <DMA2D_GetITStatus+0x40>
  {
    bitstatus = SET;
 800abf6:	2301      	movs	r3, #1
 800abf8:	73fb      	strb	r3, [r7, #15]
 800abfa:	e001      	b.n	800ac00 <DMA2D_GetITStatus+0x44>
  }
  else
  {
    bitstatus = RESET;
 800abfc:	2300      	movs	r3, #0
 800abfe:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ac00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3714      	adds	r7, #20
 800ac06:	46bd      	mov	sp, r7
 800ac08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0c:	4770      	bx	lr
 800ac0e:	bf00      	nop
 800ac10:	4002b000 	.word	0x4002b000

0800ac14 <DMA2D_ClearITPendingBit>:
  *     @arg DMA2D_IT_TC:   Transfer Complete interrupt.
  *     @arg DMA2D_IT_TE:   Transfer Error interrupt.
  * @retval None
  */
void DMA2D_ClearITPendingBit(uint32_t DMA2D_IT)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b083      	sub	sp, #12
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA2D_IT(DMA2D_IT));
  DMA2D_IT = DMA2D_IT >> 8;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	0a1b      	lsrs	r3, r3, #8
 800ac20:	607b      	str	r3, [r7, #4]
    
  /* Clear the corresponding DMA2D Interrupt */
  DMA2D->IFCR = (uint32_t)DMA2D_IT;
 800ac22:	4b04      	ldr	r3, [pc, #16]	; (800ac34 <DMA2D_ClearITPendingBit+0x20>)
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	609a      	str	r2, [r3, #8]
}
 800ac28:	370c      	adds	r7, #12
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac30:	4770      	bx	lr
 800ac32:	bf00      	nop
 800ac34:	4002b000 	.word	0x4002b000

0800ac38 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b083      	sub	sp, #12
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f023 0201 	bic.w	r2, r3, #1
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2200      	movs	r2, #0
 800ac56:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2200      	movs	r2, #0
 800ac62:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2200      	movs	r2, #0
 800ac68:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2221      	movs	r2, #33	; 0x21
 800ac6e:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	4b45      	ldr	r3, [pc, #276]	; (800ad88 <DMA_DeInit+0x150>)
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d103      	bne.n	800ac80 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 800ac78:	4b44      	ldr	r3, [pc, #272]	; (800ad8c <DMA_DeInit+0x154>)
 800ac7a:	223d      	movs	r2, #61	; 0x3d
 800ac7c:	609a      	str	r2, [r3, #8]
 800ac7e:	e07e      	b.n	800ad7e <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 800ac80:	687a      	ldr	r2, [r7, #4]
 800ac82:	4b43      	ldr	r3, [pc, #268]	; (800ad90 <DMA_DeInit+0x158>)
 800ac84:	429a      	cmp	r2, r3
 800ac86:	d104      	bne.n	800ac92 <DMA_DeInit+0x5a>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 800ac88:	4b40      	ldr	r3, [pc, #256]	; (800ad8c <DMA_DeInit+0x154>)
 800ac8a:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800ac8e:	609a      	str	r2, [r3, #8]
 800ac90:	e075      	b.n	800ad7e <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 800ac92:	687a      	ldr	r2, [r7, #4]
 800ac94:	4b3f      	ldr	r3, [pc, #252]	; (800ad94 <DMA_DeInit+0x15c>)
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d104      	bne.n	800aca4 <DMA_DeInit+0x6c>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 800ac9a:	4b3c      	ldr	r3, [pc, #240]	; (800ad8c <DMA_DeInit+0x154>)
 800ac9c:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 800aca0:	609a      	str	r2, [r3, #8]
 800aca2:	e06c      	b.n	800ad7e <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 800aca4:	687a      	ldr	r2, [r7, #4]
 800aca6:	4b3c      	ldr	r3, [pc, #240]	; (800ad98 <DMA_DeInit+0x160>)
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d104      	bne.n	800acb6 <DMA_DeInit+0x7e>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 800acac:	4b37      	ldr	r3, [pc, #220]	; (800ad8c <DMA_DeInit+0x154>)
 800acae:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800acb2:	609a      	str	r2, [r3, #8]
 800acb4:	e063      	b.n	800ad7e <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 800acb6:	687a      	ldr	r2, [r7, #4]
 800acb8:	4b38      	ldr	r3, [pc, #224]	; (800ad9c <DMA_DeInit+0x164>)
 800acba:	429a      	cmp	r2, r3
 800acbc:	d103      	bne.n	800acc6 <DMA_DeInit+0x8e>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 800acbe:	4b33      	ldr	r3, [pc, #204]	; (800ad8c <DMA_DeInit+0x154>)
 800acc0:	4a37      	ldr	r2, [pc, #220]	; (800ada0 <DMA_DeInit+0x168>)
 800acc2:	60da      	str	r2, [r3, #12]
 800acc4:	e05b      	b.n	800ad7e <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 800acc6:	687a      	ldr	r2, [r7, #4]
 800acc8:	4b36      	ldr	r3, [pc, #216]	; (800ada4 <DMA_DeInit+0x16c>)
 800acca:	429a      	cmp	r2, r3
 800accc:	d103      	bne.n	800acd6 <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 800acce:	4b2f      	ldr	r3, [pc, #188]	; (800ad8c <DMA_DeInit+0x154>)
 800acd0:	4a35      	ldr	r2, [pc, #212]	; (800ada8 <DMA_DeInit+0x170>)
 800acd2:	60da      	str	r2, [r3, #12]
 800acd4:	e053      	b.n	800ad7e <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 800acd6:	687a      	ldr	r2, [r7, #4]
 800acd8:	4b34      	ldr	r3, [pc, #208]	; (800adac <DMA_DeInit+0x174>)
 800acda:	429a      	cmp	r2, r3
 800acdc:	d103      	bne.n	800ace6 <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 800acde:	4b2b      	ldr	r3, [pc, #172]	; (800ad8c <DMA_DeInit+0x154>)
 800ace0:	4a33      	ldr	r2, [pc, #204]	; (800adb0 <DMA_DeInit+0x178>)
 800ace2:	60da      	str	r2, [r3, #12]
 800ace4:	e04b      	b.n	800ad7e <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 800ace6:	687a      	ldr	r2, [r7, #4]
 800ace8:	4b32      	ldr	r3, [pc, #200]	; (800adb4 <DMA_DeInit+0x17c>)
 800acea:	429a      	cmp	r2, r3
 800acec:	d104      	bne.n	800acf8 <DMA_DeInit+0xc0>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 800acee:	4b27      	ldr	r3, [pc, #156]	; (800ad8c <DMA_DeInit+0x154>)
 800acf0:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 800acf4:	60da      	str	r2, [r3, #12]
 800acf6:	e042      	b.n	800ad7e <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 800acf8:	687a      	ldr	r2, [r7, #4]
 800acfa:	4b2f      	ldr	r3, [pc, #188]	; (800adb8 <DMA_DeInit+0x180>)
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d103      	bne.n	800ad08 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 800ad00:	4b2e      	ldr	r3, [pc, #184]	; (800adbc <DMA_DeInit+0x184>)
 800ad02:	223d      	movs	r2, #61	; 0x3d
 800ad04:	609a      	str	r2, [r3, #8]
 800ad06:	e03a      	b.n	800ad7e <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 800ad08:	687a      	ldr	r2, [r7, #4]
 800ad0a:	4b2d      	ldr	r3, [pc, #180]	; (800adc0 <DMA_DeInit+0x188>)
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d104      	bne.n	800ad1a <DMA_DeInit+0xe2>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 800ad10:	4b2a      	ldr	r3, [pc, #168]	; (800adbc <DMA_DeInit+0x184>)
 800ad12:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800ad16:	609a      	str	r2, [r3, #8]
 800ad18:	e031      	b.n	800ad7e <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 800ad1a:	687a      	ldr	r2, [r7, #4]
 800ad1c:	4b29      	ldr	r3, [pc, #164]	; (800adc4 <DMA_DeInit+0x18c>)
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d104      	bne.n	800ad2c <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 800ad22:	4b26      	ldr	r3, [pc, #152]	; (800adbc <DMA_DeInit+0x184>)
 800ad24:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 800ad28:	609a      	str	r2, [r3, #8]
 800ad2a:	e028      	b.n	800ad7e <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 800ad2c:	687a      	ldr	r2, [r7, #4]
 800ad2e:	4b26      	ldr	r3, [pc, #152]	; (800adc8 <DMA_DeInit+0x190>)
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d104      	bne.n	800ad3e <DMA_DeInit+0x106>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 800ad34:	4b21      	ldr	r3, [pc, #132]	; (800adbc <DMA_DeInit+0x184>)
 800ad36:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800ad3a:	609a      	str	r2, [r3, #8]
 800ad3c:	e01f      	b.n	800ad7e <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 800ad3e:	687a      	ldr	r2, [r7, #4]
 800ad40:	4b22      	ldr	r3, [pc, #136]	; (800adcc <DMA_DeInit+0x194>)
 800ad42:	429a      	cmp	r2, r3
 800ad44:	d103      	bne.n	800ad4e <DMA_DeInit+0x116>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 800ad46:	4b1d      	ldr	r3, [pc, #116]	; (800adbc <DMA_DeInit+0x184>)
 800ad48:	4a15      	ldr	r2, [pc, #84]	; (800ada0 <DMA_DeInit+0x168>)
 800ad4a:	60da      	str	r2, [r3, #12]
 800ad4c:	e017      	b.n	800ad7e <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 800ad4e:	687a      	ldr	r2, [r7, #4]
 800ad50:	4b1f      	ldr	r3, [pc, #124]	; (800add0 <DMA_DeInit+0x198>)
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d103      	bne.n	800ad5e <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 800ad56:	4b19      	ldr	r3, [pc, #100]	; (800adbc <DMA_DeInit+0x184>)
 800ad58:	4a13      	ldr	r2, [pc, #76]	; (800ada8 <DMA_DeInit+0x170>)
 800ad5a:	60da      	str	r2, [r3, #12]
 800ad5c:	e00f      	b.n	800ad7e <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 800ad5e:	687a      	ldr	r2, [r7, #4]
 800ad60:	4b1c      	ldr	r3, [pc, #112]	; (800add4 <DMA_DeInit+0x19c>)
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d103      	bne.n	800ad6e <DMA_DeInit+0x136>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 800ad66:	4b15      	ldr	r3, [pc, #84]	; (800adbc <DMA_DeInit+0x184>)
 800ad68:	4a11      	ldr	r2, [pc, #68]	; (800adb0 <DMA_DeInit+0x178>)
 800ad6a:	60da      	str	r2, [r3, #12]
 800ad6c:	e007      	b.n	800ad7e <DMA_DeInit+0x146>
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 800ad6e:	687a      	ldr	r2, [r7, #4]
 800ad70:	4b19      	ldr	r3, [pc, #100]	; (800add8 <DMA_DeInit+0x1a0>)
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d103      	bne.n	800ad7e <DMA_DeInit+0x146>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 800ad76:	4b11      	ldr	r3, [pc, #68]	; (800adbc <DMA_DeInit+0x184>)
 800ad78:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 800ad7c:	60da      	str	r2, [r3, #12]
    }
  }
}
 800ad7e:	370c      	adds	r7, #12
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr
 800ad88:	40026010 	.word	0x40026010
 800ad8c:	40026000 	.word	0x40026000
 800ad90:	40026028 	.word	0x40026028
 800ad94:	40026040 	.word	0x40026040
 800ad98:	40026058 	.word	0x40026058
 800ad9c:	40026070 	.word	0x40026070
 800ada0:	2000003d 	.word	0x2000003d
 800ada4:	40026088 	.word	0x40026088
 800ada8:	20000f40 	.word	0x20000f40
 800adac:	400260a0 	.word	0x400260a0
 800adb0:	203d0000 	.word	0x203d0000
 800adb4:	400260b8 	.word	0x400260b8
 800adb8:	40026410 	.word	0x40026410
 800adbc:	40026400 	.word	0x40026400
 800adc0:	40026428 	.word	0x40026428
 800adc4:	40026440 	.word	0x40026440
 800adc8:	40026458 	.word	0x40026458
 800adcc:	40026470 	.word	0x40026470
 800add0:	40026488 	.word	0x40026488
 800add4:	400264a0 	.word	0x400264a0
 800add8:	400264b8 	.word	0x400264b8

0800addc <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 800addc:	b480      	push	{r7}
 800adde:	b085      	sub	sp, #20
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ade6:	2300      	movs	r3, #0
 800ade8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800adf0:	68fa      	ldr	r2, [r7, #12]
 800adf2:	4b24      	ldr	r3, [pc, #144]	; (800ae84 <DMA_Init+0xa8>)
 800adf4:	4013      	ands	r3, r2
 800adf6:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	681a      	ldr	r2, [r3, #0]
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	68db      	ldr	r3, [r3, #12]
 800ae00:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800ae06:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	699b      	ldr	r3, [r3, #24]
 800ae0c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800ae12:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	6a1b      	ldr	r3, [r3, #32]
 800ae18:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800ae1e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae24:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800ae2a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae30:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800ae32:	68fa      	ldr	r2, [r7, #12]
 800ae34:	4313      	orrs	r3, r2
 800ae36:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	68fa      	ldr	r2, [r7, #12]
 800ae3c:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	695b      	ldr	r3, [r3, #20]
 800ae42:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f023 0307 	bic.w	r3, r3, #7
 800ae4a:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae54:	4313      	orrs	r3, r2
 800ae56:	68fa      	ldr	r2, [r7, #12]
 800ae58:	4313      	orrs	r3, r2
 800ae5a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	68fa      	ldr	r2, [r7, #12]
 800ae60:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	691a      	ldr	r2, [r3, #16]
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	685a      	ldr	r2, [r3, #4]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	689a      	ldr	r2, [r3, #8]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	60da      	str	r2, [r3, #12]
}
 800ae7a:	3714      	adds	r7, #20
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr
 800ae84:	f01c803f 	.word	0xf01c803f

0800ae88 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b083      	sub	sp, #12
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2200      	movs	r2, #0
 800ae94:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2200      	movs	r2, #0
 800aea6:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2200      	movs	r2, #0
 800aebe:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2200      	movs	r2, #0
 800aec4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2200      	movs	r2, #0
 800aeca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2200      	movs	r2, #0
 800aed0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2200      	movs	r2, #0
 800aed6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2200      	movs	r2, #0
 800aedc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2200      	movs	r2, #0
 800aee2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2200      	movs	r2, #0
 800aee8:	639a      	str	r2, [r3, #56]	; 0x38
}
 800aeea:	370c      	adds	r7, #12
 800aeec:	46bd      	mov	sp, r7
 800aeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef2:	4770      	bx	lr

0800aef4 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b083      	sub	sp, #12
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	460b      	mov	r3, r1
 800aefe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800af00:	78fb      	ldrb	r3, [r7, #3]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d006      	beq.n	800af14 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f043 0201 	orr.w	r2, r3, #1
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	601a      	str	r2, [r3, #0]
 800af12:	e005      	b.n	800af20 <DMA_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f023 0201 	bic.w	r2, r3, #1
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	601a      	str	r2, [r3, #0]
  }
}
 800af20:	370c      	adds	r7, #12
 800af22:	46bd      	mov	sp, r7
 800af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af28:	4770      	bx	lr
 800af2a:	bf00      	nop

0800af2c <DMA_PeriphIncOffsetSizeConfig>:
  *            @arg DMA_PINCOS_WordAligned: Peripheral address increment offset is 
  *                                         fixed to 4 (32-bit aligned addresses). 
  * @retval None
  */
void DMA_PeriphIncOffsetSizeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_Pincos)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b083      	sub	sp, #12
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d006      	beq.n	800af4a <DMA_PeriphIncOffsetSizeConfig+0x1e>
  {
    /* Configure DMA_SxCR_PINCOS bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	601a      	str	r2, [r3, #0]
 800af48:	e005      	b.n	800af56 <DMA_PeriphIncOffsetSizeConfig+0x2a>
  }
  else
  {
    /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	601a      	str	r2, [r3, #0]
  }
}
 800af56:	370c      	adds	r7, #12
 800af58:	46bd      	mov	sp, r7
 800af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5e:	4770      	bx	lr

0800af60 <DMA_FlowControllerConfig>:
  *            @arg DMA_FlowCtrl_Peripheral: DMAy_Streamx transactions flow controller 
  *                                          is the peripheral.    
  * @retval None
  */
void DMA_FlowControllerConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FlowCtrl)
{
 800af60:	b480      	push	{r7}
 800af62:	b083      	sub	sp, #12
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d006      	beq.n	800af7e <DMA_FlowControllerConfig+0x1e>
  {
    /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f043 0220 	orr.w	r2, r3, #32
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	601a      	str	r2, [r3, #0]
 800af7c:	e005      	b.n	800af8a <DMA_FlowControllerConfig+0x2a>
  }
  else
  {
    /* Clear the PFCTRL bit: Memory is the flow controller */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f023 0220 	bic.w	r2, r3, #32
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	601a      	str	r2, [r3, #0]
  }
}
 800af8a:	370c      	adds	r7, #12
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr

0800af94 <DMA_SetCurrDataCounter>:
  *         DMAy_SxPAR register is considered as Peripheral.
  *      
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
{
 800af94:	b480      	push	{r7}
 800af96:	b083      	sub	sp, #12
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
 800af9c:	460b      	mov	r3, r1
 800af9e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Write the number of data units to be transferred */
  DMAy_Streamx->NDTR = (uint16_t)Counter;
 800afa0:	887a      	ldrh	r2, [r7, #2]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	605a      	str	r2, [r3, #4]
}
 800afa6:	370c      	adds	r7, #12
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr

0800afb0 <DMA_GetCurrDataCounter>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b083      	sub	sp, #12
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	b29b      	uxth	r3, r3
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	370c      	adds	r7, #12
 800afc2:	46bd      	mov	sp, r7
 800afc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc8:	4770      	bx	lr
 800afca:	bf00      	nop

0800afcc <DMA_DoubleBufferModeConfig>:
  *   
  * @retval None
  */
void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
                                uint32_t DMA_CurrentMemory)
{  
 800afcc:	b480      	push	{r7}
 800afce:	b085      	sub	sp, #20
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	60f8      	str	r0, [r7, #12]
 800afd4:	60b9      	str	r1, [r7, #8]
 800afd6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d006      	beq.n	800afec <DMA_DoubleBufferModeConfig+0x20>
  {
    /* Set Memory 1 as current memory address */
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	601a      	str	r2, [r3, #0]
 800afea:	e005      	b.n	800aff8 <DMA_DoubleBufferModeConfig+0x2c>
  }
  else
  {
    /* Set Memory 0 as current memory address */
    DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	601a      	str	r2, [r3, #0]
  }

  /* Write to DMAy Streamx M1AR */
  DMAy_Streamx->M1AR = Memory1BaseAddr;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	68ba      	ldr	r2, [r7, #8]
 800affc:	611a      	str	r2, [r3, #16]
}
 800affe:	3714      	adds	r7, #20
 800b000:	46bd      	mov	sp, r7
 800b002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b006:	4770      	bx	lr

0800b008 <DMA_DoubleBufferModeCmd>:
  * @param  NewState: new state of the DMAy Streamx double buffer mode. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{  
 800b008:	b480      	push	{r7}
 800b00a:	b083      	sub	sp, #12
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	460b      	mov	r3, r1
 800b012:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
 800b014:	78fb      	ldrb	r3, [r7, #3]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d006      	beq.n	800b028 <DMA_DoubleBufferModeCmd+0x20>
  {
    /* Enable the Double buffer mode */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	601a      	str	r2, [r3, #0]
 800b026:	e005      	b.n	800b034 <DMA_DoubleBufferModeCmd+0x2c>
  }
  else
  {
    /* Disable the Double buffer mode */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	601a      	str	r2, [r3, #0]
  }
}
 800b034:	370c      	adds	r7, #12
 800b036:	46bd      	mov	sp, r7
 800b038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03c:	4770      	bx	lr
 800b03e:	bf00      	nop

0800b040 <DMA_MemoryTargetConfig>:
  *  
  * @retval None
  */
void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
                           uint32_t DMA_MemoryTarget)
{
 800b040:	b480      	push	{r7}
 800b042:	b085      	sub	sp, #20
 800b044:	af00      	add	r7, sp, #0
 800b046:	60f8      	str	r0, [r7, #12]
 800b048:	60b9      	str	r1, [r7, #8]
 800b04a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
    
  /* Check the Memory target to be configured */
  if (DMA_MemoryTarget != DMA_Memory_0)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d003      	beq.n	800b05a <DMA_MemoryTargetConfig+0x1a>
  {
    /* Write to DMAy Streamx M1AR */
    DMAy_Streamx->M1AR = MemoryBaseAddr;    
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	68ba      	ldr	r2, [r7, #8]
 800b056:	611a      	str	r2, [r3, #16]
 800b058:	e002      	b.n	800b060 <DMA_MemoryTargetConfig+0x20>
  }  
  else
  {
    /* Write to DMAy Streamx M0AR */
    DMAy_Streamx->M0AR = MemoryBaseAddr;  
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	68ba      	ldr	r2, [r7, #8]
 800b05e:	60da      	str	r2, [r3, #12]
  }
}
 800b060:	3714      	adds	r7, #20
 800b062:	46bd      	mov	sp, r7
 800b064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b068:	4770      	bx	lr
 800b06a:	bf00      	nop

0800b06c <DMA_GetCurrentMemoryTarget>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The memory target number: 0 for Memory0 or 1 for Memory1. 
  */
uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b085      	sub	sp, #20
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 800b074:	2300      	movs	r3, #0
 800b076:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Get the current memory target */
  if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b080:	2b00      	cmp	r3, #0
 800b082:	d002      	beq.n	800b08a <DMA_GetCurrentMemoryTarget+0x1e>
  {
    /* Current memory buffer used is Memory 1 */
    tmp = 1;
 800b084:	2301      	movs	r3, #1
 800b086:	60fb      	str	r3, [r7, #12]
 800b088:	e001      	b.n	800b08e <DMA_GetCurrentMemoryTarget+0x22>
  }  
  else
  {
    /* Current memory buffer used is Memory 0 */
    tmp = 0;    
 800b08a:	2300      	movs	r3, #0
 800b08c:	60fb      	str	r3, [r7, #12]
  }
  return tmp;
 800b08e:	68fb      	ldr	r3, [r7, #12]
}
 800b090:	4618      	mov	r0, r3
 800b092:	3714      	adds	r7, #20
 800b094:	46bd      	mov	sp, r7
 800b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09a:	4770      	bx	lr

0800b09c <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800b09c:	b480      	push	{r7}
 800b09e:	b085      	sub	sp, #20
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f003 0301 	and.w	r3, r3, #1
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d002      	beq.n	800b0ba <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	73fb      	strb	r3, [r7, #15]
 800b0b8:	e001      	b.n	800b0be <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800b0be:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3714      	adds	r7, #20
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ca:	4770      	bx	lr

0800b0cc <DMA_GetFIFOStatus>:
  *           - DMA_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
  *           - DMA_FIFOStatus_Empty: when FIFO is empty
  *           - DMA_FIFOStatus_Full: when FIFO is full
  */
uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b085      	sub	sp, #20
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  
  /* Get the FIFO level bits */
  tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	695b      	ldr	r3, [r3, #20]
 800b0dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b0e0:	60fb      	str	r3, [r7, #12]
  
  return tmpreg;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3714      	adds	r7, #20
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ee:	4770      	bx	lr

0800b0f0 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	b087      	sub	sp, #28
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 800b0fe:	2300      	movs	r3, #0
 800b100:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800b102:	687a      	ldr	r2, [r7, #4]
 800b104:	4b15      	ldr	r3, [pc, #84]	; (800b15c <DMA_GetFlagStatus+0x6c>)
 800b106:	429a      	cmp	r2, r3
 800b108:	d802      	bhi.n	800b110 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800b10a:	4b15      	ldr	r3, [pc, #84]	; (800b160 <DMA_GetFlagStatus+0x70>)
 800b10c:	613b      	str	r3, [r7, #16]
 800b10e:	e001      	b.n	800b114 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800b110:	4b14      	ldr	r3, [pc, #80]	; (800b164 <DMA_GetFlagStatus+0x74>)
 800b112:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d003      	beq.n	800b126 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	685b      	ldr	r3, [r3, #4]
 800b122:	60fb      	str	r3, [r7, #12]
 800b124:	e002      	b.n	800b12c <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800b132:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800b136:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 800b138:	68fa      	ldr	r2, [r7, #12]
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	4013      	ands	r3, r2
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d002      	beq.n	800b148 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800b142:	2301      	movs	r3, #1
 800b144:	75fb      	strb	r3, [r7, #23]
 800b146:	e001      	b.n	800b14c <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 800b148:	2300      	movs	r3, #0
 800b14a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 800b14c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b14e:	4618      	mov	r0, r3
 800b150:	371c      	adds	r7, #28
 800b152:	46bd      	mov	sp, r7
 800b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b158:	4770      	bx	lr
 800b15a:	bf00      	nop
 800b15c:	4002640f 	.word	0x4002640f
 800b160:	40026000 	.word	0x40026000
 800b164:	40026400 	.word	0x40026400

0800b168 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 800b168:	b480      	push	{r7}
 800b16a:	b085      	sub	sp, #20
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
 800b170:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800b172:	687a      	ldr	r2, [r7, #4]
 800b174:	4b10      	ldr	r3, [pc, #64]	; (800b1b8 <DMA_ClearFlag+0x50>)
 800b176:	429a      	cmp	r2, r3
 800b178:	d802      	bhi.n	800b180 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800b17a:	4b10      	ldr	r3, [pc, #64]	; (800b1bc <DMA_ClearFlag+0x54>)
 800b17c:	60fb      	str	r3, [r7, #12]
 800b17e:	e001      	b.n	800b184 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800b180:	4b0f      	ldr	r3, [pc, #60]	; (800b1c0 <DMA_ClearFlag+0x58>)
 800b182:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d007      	beq.n	800b19e <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800b194:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800b198:	68fa      	ldr	r2, [r7, #12]
 800b19a:	60d3      	str	r3, [r2, #12]
 800b19c:	e006      	b.n	800b1ac <DMA_ClearFlag+0x44>
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800b1a4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800b1a8:	68fa      	ldr	r2, [r7, #12]
 800b1aa:	6093      	str	r3, [r2, #8]
  }    
}
 800b1ac:	3714      	adds	r7, #20
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr
 800b1b6:	bf00      	nop
 800b1b8:	4002640f 	.word	0x4002640f
 800b1bc:	40026000 	.word	0x40026000
 800b1c0:	40026400 	.word	0x40026400

0800b1c4 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b085      	sub	sp, #20
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	60f8      	str	r0, [r7, #12]
 800b1cc:	60b9      	str	r1, [r7, #8]
 800b1ce:	4613      	mov	r3, r2
 800b1d0:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d00f      	beq.n	800b1fc <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 800b1dc:	79fb      	ldrb	r3, [r7, #7]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d006      	beq.n	800b1f0 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	695b      	ldr	r3, [r3, #20]
 800b1e6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	615a      	str	r2, [r3, #20]
 800b1ee:	e005      	b.n	800b1fc <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	695b      	ldr	r3, [r3, #20]
 800b1f4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	2b80      	cmp	r3, #128	; 0x80
 800b200:	d014      	beq.n	800b22c <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 800b202:	79fb      	ldrb	r3, [r7, #7]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d008      	beq.n	800b21a <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681a      	ldr	r2, [r3, #0]
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	f003 031e 	and.w	r3, r3, #30
 800b212:	431a      	orrs	r2, r3
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	601a      	str	r2, [r3, #0]
 800b218:	e008      	b.n	800b22c <DMA_ITConfig+0x68>
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	681a      	ldr	r2, [r3, #0]
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	f003 031e 	and.w	r3, r3, #30
 800b224:	43db      	mvns	r3, r3
 800b226:	401a      	ands	r2, r3
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	601a      	str	r2, [r3, #0]
    }    
  }
}
 800b22c:	3714      	adds	r7, #20
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr
 800b236:	bf00      	nop

0800b238 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 800b238:	b480      	push	{r7}
 800b23a:	b087      	sub	sp, #28
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800b242:	2300      	movs	r3, #0
 800b244:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 800b246:	2300      	movs	r3, #0
 800b248:	60fb      	str	r3, [r7, #12]
 800b24a:	2300      	movs	r3, #0
 800b24c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800b24e:	687a      	ldr	r2, [r7, #4]
 800b250:	4b22      	ldr	r3, [pc, #136]	; (800b2dc <DMA_GetITStatus+0xa4>)
 800b252:	429a      	cmp	r2, r3
 800b254:	d802      	bhi.n	800b25c <DMA_GetITStatus+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800b256:	4b22      	ldr	r3, [pc, #136]	; (800b2e0 <DMA_GetITStatus+0xa8>)
 800b258:	613b      	str	r3, [r7, #16]
 800b25a:	e001      	b.n	800b260 <DMA_GetITStatus+0x28>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800b25c:	4b21      	ldr	r3, [pc, #132]	; (800b2e4 <DMA_GetITStatus+0xac>)
 800b25e:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800b266:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d00a      	beq.n	800b284 <DMA_GetITStatus+0x4c>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	0adb      	lsrs	r3, r3, #11
 800b272:	f003 031e 	and.w	r3, r3, #30
 800b276:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681a      	ldr	r2, [r3, #0]
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	4013      	ands	r3, r2
 800b280:	60bb      	str	r3, [r7, #8]
 800b282:	e004      	b.n	800b28e <DMA_GetITStatus+0x56>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	695b      	ldr	r3, [r3, #20]
 800b288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b28c:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b294:	2b00      	cmp	r3, #0
 800b296:	d003      	beq.n	800b2a0 <DMA_GetITStatus+0x68>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	60fb      	str	r3, [r7, #12]
 800b29e:	e002      	b.n	800b2a6 <DMA_GetITStatus+0x6e>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800b2ac:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800b2b0:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800b2b2:	68fa      	ldr	r2, [r7, #12]
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	4013      	ands	r3, r2
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d005      	beq.n	800b2c8 <DMA_GetITStatus+0x90>
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d002      	beq.n	800b2c8 <DMA_GetITStatus+0x90>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	75fb      	strb	r3, [r7, #23]
 800b2c6:	e001      	b.n	800b2cc <DMA_GetITStatus+0x94>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 800b2cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	371c      	adds	r7, #28
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d8:	4770      	bx	lr
 800b2da:	bf00      	nop
 800b2dc:	4002640f 	.word	0x4002640f
 800b2e0:	40026000 	.word	0x40026000
 800b2e4:	40026400 	.word	0x40026400

0800b2e8 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b085      	sub	sp, #20
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800b2f2:	687a      	ldr	r2, [r7, #4]
 800b2f4:	4b10      	ldr	r3, [pc, #64]	; (800b338 <DMA_ClearITPendingBit+0x50>)
 800b2f6:	429a      	cmp	r2, r3
 800b2f8:	d802      	bhi.n	800b300 <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800b2fa:	4b10      	ldr	r3, [pc, #64]	; (800b33c <DMA_ClearITPendingBit+0x54>)
 800b2fc:	60fb      	str	r3, [r7, #12]
 800b2fe:	e001      	b.n	800b304 <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800b300:	4b0f      	ldr	r3, [pc, #60]	; (800b340 <DMA_ClearITPendingBit+0x58>)
 800b302:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d007      	beq.n	800b31e <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800b314:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800b318:	68fa      	ldr	r2, [r7, #12]
 800b31a:	60d3      	str	r3, [r2, #12]
 800b31c:	e006      	b.n	800b32c <DMA_ClearITPendingBit+0x44>
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800b324:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800b328:	68fa      	ldr	r2, [r7, #12]
 800b32a:	6093      	str	r3, [r2, #8]
  }   
}
 800b32c:	3714      	adds	r7, #20
 800b32e:	46bd      	mov	sp, r7
 800b330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b334:	4770      	bx	lr
 800b336:	bf00      	nop
 800b338:	4002640f 	.word	0x4002640f
 800b33c:	40026000 	.word	0x40026000
 800b340:	40026400 	.word	0x40026400

0800b344 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
 800b344:	b480      	push	{r7}
 800b346:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
 800b348:	4b09      	ldr	r3, [pc, #36]	; (800b370 <EXTI_DeInit+0x2c>)
 800b34a:	2200      	movs	r2, #0
 800b34c:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 800b34e:	4b08      	ldr	r3, [pc, #32]	; (800b370 <EXTI_DeInit+0x2c>)
 800b350:	2200      	movs	r2, #0
 800b352:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 800b354:	4b06      	ldr	r3, [pc, #24]	; (800b370 <EXTI_DeInit+0x2c>)
 800b356:	2200      	movs	r2, #0
 800b358:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 800b35a:	4b05      	ldr	r3, [pc, #20]	; (800b370 <EXTI_DeInit+0x2c>)
 800b35c:	2200      	movs	r2, #0
 800b35e:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 800b360:	4b03      	ldr	r3, [pc, #12]	; (800b370 <EXTI_DeInit+0x2c>)
 800b362:	4a04      	ldr	r2, [pc, #16]	; (800b374 <EXTI_DeInit+0x30>)
 800b364:	615a      	str	r2, [r3, #20]
}
 800b366:	46bd      	mov	sp, r7
 800b368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36c:	4770      	bx	lr
 800b36e:	bf00      	nop
 800b370:	40013c00 	.word	0x40013c00
 800b374:	007fffff 	.word	0x007fffff

0800b378 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800b378:	b480      	push	{r7}
 800b37a:	b085      	sub	sp, #20
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 800b380:	2300      	movs	r3, #0
 800b382:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 800b384:	4b32      	ldr	r3, [pc, #200]	; (800b450 <EXTI_Init+0xd8>)
 800b386:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	799b      	ldrb	r3, [r3, #6]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d04d      	beq.n	800b42c <EXTI_Init+0xb4>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 800b390:	4b2f      	ldr	r3, [pc, #188]	; (800b450 <EXTI_Init+0xd8>)
 800b392:	4a2f      	ldr	r2, [pc, #188]	; (800b450 <EXTI_Init+0xd8>)
 800b394:	6811      	ldr	r1, [r2, #0]
 800b396:	687a      	ldr	r2, [r7, #4]
 800b398:	6812      	ldr	r2, [r2, #0]
 800b39a:	43d2      	mvns	r2, r2
 800b39c:	400a      	ands	r2, r1
 800b39e:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 800b3a0:	4b2b      	ldr	r3, [pc, #172]	; (800b450 <EXTI_Init+0xd8>)
 800b3a2:	4a2b      	ldr	r2, [pc, #172]	; (800b450 <EXTI_Init+0xd8>)
 800b3a4:	6851      	ldr	r1, [r2, #4]
 800b3a6:	687a      	ldr	r2, [r7, #4]
 800b3a8:	6812      	ldr	r2, [r2, #0]
 800b3aa:	43d2      	mvns	r2, r2
 800b3ac:	400a      	ands	r2, r1
 800b3ae:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	791b      	ldrb	r3, [r3, #4]
 800b3b4:	68fa      	ldr	r2, [r7, #12]
 800b3b6:	4413      	add	r3, r2
 800b3b8:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	68fa      	ldr	r2, [r7, #12]
 800b3be:	6811      	ldr	r1, [r2, #0]
 800b3c0:	687a      	ldr	r2, [r7, #4]
 800b3c2:	6812      	ldr	r2, [r2, #0]
 800b3c4:	430a      	orrs	r2, r1
 800b3c6:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800b3c8:	4b21      	ldr	r3, [pc, #132]	; (800b450 <EXTI_Init+0xd8>)
 800b3ca:	4a21      	ldr	r2, [pc, #132]	; (800b450 <EXTI_Init+0xd8>)
 800b3cc:	6891      	ldr	r1, [r2, #8]
 800b3ce:	687a      	ldr	r2, [r7, #4]
 800b3d0:	6812      	ldr	r2, [r2, #0]
 800b3d2:	43d2      	mvns	r2, r2
 800b3d4:	400a      	ands	r2, r1
 800b3d6:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800b3d8:	4b1d      	ldr	r3, [pc, #116]	; (800b450 <EXTI_Init+0xd8>)
 800b3da:	4a1d      	ldr	r2, [pc, #116]	; (800b450 <EXTI_Init+0xd8>)
 800b3dc:	68d1      	ldr	r1, [r2, #12]
 800b3de:	687a      	ldr	r2, [r7, #4]
 800b3e0:	6812      	ldr	r2, [r2, #0]
 800b3e2:	43d2      	mvns	r2, r2
 800b3e4:	400a      	ands	r2, r1
 800b3e6:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	795b      	ldrb	r3, [r3, #5]
 800b3ec:	2b10      	cmp	r3, #16
 800b3ee:	d10e      	bne.n	800b40e <EXTI_Init+0x96>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 800b3f0:	4b17      	ldr	r3, [pc, #92]	; (800b450 <EXTI_Init+0xd8>)
 800b3f2:	4a17      	ldr	r2, [pc, #92]	; (800b450 <EXTI_Init+0xd8>)
 800b3f4:	6891      	ldr	r1, [r2, #8]
 800b3f6:	687a      	ldr	r2, [r7, #4]
 800b3f8:	6812      	ldr	r2, [r2, #0]
 800b3fa:	430a      	orrs	r2, r1
 800b3fc:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 800b3fe:	4b14      	ldr	r3, [pc, #80]	; (800b450 <EXTI_Init+0xd8>)
 800b400:	4a13      	ldr	r2, [pc, #76]	; (800b450 <EXTI_Init+0xd8>)
 800b402:	68d1      	ldr	r1, [r2, #12]
 800b404:	687a      	ldr	r2, [r7, #4]
 800b406:	6812      	ldr	r2, [r2, #0]
 800b408:	430a      	orrs	r2, r1
 800b40a:	60da      	str	r2, [r3, #12]
 800b40c:	e01b      	b.n	800b446 <EXTI_Init+0xce>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 800b40e:	4b10      	ldr	r3, [pc, #64]	; (800b450 <EXTI_Init+0xd8>)
 800b410:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	795b      	ldrb	r3, [r3, #5]
 800b416:	68fa      	ldr	r2, [r7, #12]
 800b418:	4413      	add	r3, r2
 800b41a:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	68fa      	ldr	r2, [r7, #12]
 800b420:	6811      	ldr	r1, [r2, #0]
 800b422:	687a      	ldr	r2, [r7, #4]
 800b424:	6812      	ldr	r2, [r2, #0]
 800b426:	430a      	orrs	r2, r1
 800b428:	601a      	str	r2, [r3, #0]
 800b42a:	e00c      	b.n	800b446 <EXTI_Init+0xce>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	791b      	ldrb	r3, [r3, #4]
 800b430:	68fa      	ldr	r2, [r7, #12]
 800b432:	4413      	add	r3, r2
 800b434:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	68fa      	ldr	r2, [r7, #12]
 800b43a:	6811      	ldr	r1, [r2, #0]
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	6812      	ldr	r2, [r2, #0]
 800b440:	43d2      	mvns	r2, r2
 800b442:	400a      	ands	r2, r1
 800b444:	601a      	str	r2, [r3, #0]
  }
}
 800b446:	3714      	adds	r7, #20
 800b448:	46bd      	mov	sp, r7
 800b44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44e:	4770      	bx	lr
 800b450:	40013c00 	.word	0x40013c00

0800b454 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800b454:	b480      	push	{r7}
 800b456:	b083      	sub	sp, #12
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2200      	movs	r2, #0
 800b460:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2200      	movs	r2, #0
 800b466:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	220c      	movs	r2, #12
 800b46c:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2200      	movs	r2, #0
 800b472:	719a      	strb	r2, [r3, #6]
}
 800b474:	370c      	adds	r7, #12
 800b476:	46bd      	mov	sp, r7
 800b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47c:	4770      	bx	lr
 800b47e:	bf00      	nop

0800b480 <EXTI_GenerateSWInterrupt>:
  *         will be generated.
  *         This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
 800b480:	b480      	push	{r7}
 800b482:	b083      	sub	sp, #12
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 800b488:	4b05      	ldr	r3, [pc, #20]	; (800b4a0 <EXTI_GenerateSWInterrupt+0x20>)
 800b48a:	4a05      	ldr	r2, [pc, #20]	; (800b4a0 <EXTI_GenerateSWInterrupt+0x20>)
 800b48c:	6911      	ldr	r1, [r2, #16]
 800b48e:	687a      	ldr	r2, [r7, #4]
 800b490:	430a      	orrs	r2, r1
 800b492:	611a      	str	r2, [r3, #16]
}
 800b494:	370c      	adds	r7, #12
 800b496:	46bd      	mov	sp, r7
 800b498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49c:	4770      	bx	lr
 800b49e:	bf00      	nop
 800b4a0:	40013c00 	.word	0x40013c00

0800b4a4 <EXTI_GetFlagStatus>:
  * @param  EXTI_Line: specifies the EXTI line flag to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b085      	sub	sp, #20
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 800b4b0:	4b08      	ldr	r3, [pc, #32]	; (800b4d4 <EXTI_GetFlagStatus+0x30>)
 800b4b2:	695a      	ldr	r2, [r3, #20]
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	4013      	ands	r3, r2
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d002      	beq.n	800b4c2 <EXTI_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	73fb      	strb	r3, [r7, #15]
 800b4c0:	e001      	b.n	800b4c6 <EXTI_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b4c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3714      	adds	r7, #20
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d2:	4770      	bx	lr
 800b4d4:	40013c00 	.word	0x40013c00

0800b4d8 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b083      	sub	sp, #12
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 800b4e0:	4b03      	ldr	r3, [pc, #12]	; (800b4f0 <EXTI_ClearFlag+0x18>)
 800b4e2:	687a      	ldr	r2, [r7, #4]
 800b4e4:	615a      	str	r2, [r3, #20]
}
 800b4e6:	370c      	adds	r7, #12
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr
 800b4f0:	40013c00 	.word	0x40013c00

0800b4f4 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b085      	sub	sp, #20
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 800b500:	4b08      	ldr	r3, [pc, #32]	; (800b524 <EXTI_GetITStatus+0x30>)
 800b502:	695a      	ldr	r2, [r3, #20]
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	4013      	ands	r3, r2
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d002      	beq.n	800b512 <EXTI_GetITStatus+0x1e>
  {
    bitstatus = SET;
 800b50c:	2301      	movs	r3, #1
 800b50e:	73fb      	strb	r3, [r7, #15]
 800b510:	e001      	b.n	800b516 <EXTI_GetITStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800b512:	2300      	movs	r3, #0
 800b514:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b516:	7bfb      	ldrb	r3, [r7, #15]
  
}
 800b518:	4618      	mov	r0, r3
 800b51a:	3714      	adds	r7, #20
 800b51c:	46bd      	mov	sp, r7
 800b51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b522:	4770      	bx	lr
 800b524:	40013c00 	.word	0x40013c00

0800b528 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 800b528:	b480      	push	{r7}
 800b52a:	b083      	sub	sp, #12
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 800b530:	4b03      	ldr	r3, [pc, #12]	; (800b540 <EXTI_ClearITPendingBit+0x18>)
 800b532:	687a      	ldr	r2, [r7, #4]
 800b534:	615a      	str	r2, [r3, #20]
}
 800b536:	370c      	adds	r7, #12
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr
 800b540:	40013c00 	.word	0x40013c00

0800b544 <FLASH_SetLatency>:
  *       FLASH_Latency_0 and FLASH_Latency_15. 
  *         
  * @retval None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
 800b544:	b480      	push	{r7}
 800b546:	b083      	sub	sp, #12
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
  *(__IO uint8_t *)ACR_BYTE0_ADDRESS = (uint8_t)FLASH_Latency;
 800b54c:	4b04      	ldr	r3, [pc, #16]	; (800b560 <FLASH_SetLatency+0x1c>)
 800b54e:	687a      	ldr	r2, [r7, #4]
 800b550:	b2d2      	uxtb	r2, r2
 800b552:	701a      	strb	r2, [r3, #0]
}
 800b554:	370c      	adds	r7, #12
 800b556:	46bd      	mov	sp, r7
 800b558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55c:	4770      	bx	lr
 800b55e:	bf00      	nop
 800b560:	40023c00 	.word	0x40023c00

0800b564 <FLASH_PrefetchBufferCmd>:
  * @param  NewState: new state of the Prefetch Buffer.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_PrefetchBufferCmd(FunctionalState NewState)
{
 800b564:	b480      	push	{r7}
 800b566:	b083      	sub	sp, #12
 800b568:	af00      	add	r7, sp, #0
 800b56a:	4603      	mov	r3, r0
 800b56c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Enable or disable the Prefetch Buffer */
  if(NewState != DISABLE)
 800b56e:	79fb      	ldrb	r3, [r7, #7]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d006      	beq.n	800b582 <FLASH_PrefetchBufferCmd+0x1e>
  {
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 800b574:	4b08      	ldr	r3, [pc, #32]	; (800b598 <FLASH_PrefetchBufferCmd+0x34>)
 800b576:	4a08      	ldr	r2, [pc, #32]	; (800b598 <FLASH_PrefetchBufferCmd+0x34>)
 800b578:	6812      	ldr	r2, [r2, #0]
 800b57a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b57e:	601a      	str	r2, [r3, #0]
 800b580:	e005      	b.n	800b58e <FLASH_PrefetchBufferCmd+0x2a>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_PRFTEN);
 800b582:	4b05      	ldr	r3, [pc, #20]	; (800b598 <FLASH_PrefetchBufferCmd+0x34>)
 800b584:	4a04      	ldr	r2, [pc, #16]	; (800b598 <FLASH_PrefetchBufferCmd+0x34>)
 800b586:	6812      	ldr	r2, [r2, #0]
 800b588:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b58c:	601a      	str	r2, [r3, #0]
  }
}
 800b58e:	370c      	adds	r7, #12
 800b590:	46bd      	mov	sp, r7
 800b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b596:	4770      	bx	lr
 800b598:	40023c00 	.word	0x40023c00

0800b59c <FLASH_InstructionCacheCmd>:
  * @param  NewState: new state of the Instruction Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_InstructionCacheCmd(FunctionalState NewState)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b083      	sub	sp, #12
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 800b5a6:	79fb      	ldrb	r3, [r7, #7]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d006      	beq.n	800b5ba <FLASH_InstructionCacheCmd+0x1e>
  {
    FLASH->ACR |= FLASH_ACR_ICEN;
 800b5ac:	4b08      	ldr	r3, [pc, #32]	; (800b5d0 <FLASH_InstructionCacheCmd+0x34>)
 800b5ae:	4a08      	ldr	r2, [pc, #32]	; (800b5d0 <FLASH_InstructionCacheCmd+0x34>)
 800b5b0:	6812      	ldr	r2, [r2, #0]
 800b5b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b5b6:	601a      	str	r2, [r3, #0]
 800b5b8:	e005      	b.n	800b5c6 <FLASH_InstructionCacheCmd+0x2a>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_ICEN);
 800b5ba:	4b05      	ldr	r3, [pc, #20]	; (800b5d0 <FLASH_InstructionCacheCmd+0x34>)
 800b5bc:	4a04      	ldr	r2, [pc, #16]	; (800b5d0 <FLASH_InstructionCacheCmd+0x34>)
 800b5be:	6812      	ldr	r2, [r2, #0]
 800b5c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b5c4:	601a      	str	r2, [r3, #0]
  }
}
 800b5c6:	370c      	adds	r7, #12
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr
 800b5d0:	40023c00 	.word	0x40023c00

0800b5d4 <FLASH_DataCacheCmd>:
  * @param  NewState: new state of the Data Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_DataCacheCmd(FunctionalState NewState)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b083      	sub	sp, #12
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	4603      	mov	r3, r0
 800b5dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 800b5de:	79fb      	ldrb	r3, [r7, #7]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d006      	beq.n	800b5f2 <FLASH_DataCacheCmd+0x1e>
  {
    FLASH->ACR |= FLASH_ACR_DCEN;
 800b5e4:	4b08      	ldr	r3, [pc, #32]	; (800b608 <FLASH_DataCacheCmd+0x34>)
 800b5e6:	4a08      	ldr	r2, [pc, #32]	; (800b608 <FLASH_DataCacheCmd+0x34>)
 800b5e8:	6812      	ldr	r2, [r2, #0]
 800b5ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b5ee:	601a      	str	r2, [r3, #0]
 800b5f0:	e005      	b.n	800b5fe <FLASH_DataCacheCmd+0x2a>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_DCEN);
 800b5f2:	4b05      	ldr	r3, [pc, #20]	; (800b608 <FLASH_DataCacheCmd+0x34>)
 800b5f4:	4a04      	ldr	r2, [pc, #16]	; (800b608 <FLASH_DataCacheCmd+0x34>)
 800b5f6:	6812      	ldr	r2, [r2, #0]
 800b5f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b5fc:	601a      	str	r2, [r3, #0]
  }
}
 800b5fe:	370c      	adds	r7, #12
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr
 800b608:	40023c00 	.word	0x40023c00

0800b60c <FLASH_InstructionCacheReset>:
  * @note   This function must be used only when the Instruction Cache is disabled.  
  * @param  None
  * @retval None
  */
void FLASH_InstructionCacheReset(void)
{
 800b60c:	b480      	push	{r7}
 800b60e:	af00      	add	r7, sp, #0
  FLASH->ACR |= FLASH_ACR_ICRST;
 800b610:	4b04      	ldr	r3, [pc, #16]	; (800b624 <FLASH_InstructionCacheReset+0x18>)
 800b612:	4a04      	ldr	r2, [pc, #16]	; (800b624 <FLASH_InstructionCacheReset+0x18>)
 800b614:	6812      	ldr	r2, [r2, #0]
 800b616:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b61a:	601a      	str	r2, [r3, #0]
}
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr
 800b624:	40023c00 	.word	0x40023c00

0800b628 <FLASH_DataCacheReset>:
  * @note   This function must be used only when the Data Cache is disabled.  
  * @param  None
  * @retval None
  */
void FLASH_DataCacheReset(void)
{
 800b628:	b480      	push	{r7}
 800b62a:	af00      	add	r7, sp, #0
  FLASH->ACR |= FLASH_ACR_DCRST;
 800b62c:	4b04      	ldr	r3, [pc, #16]	; (800b640 <FLASH_DataCacheReset+0x18>)
 800b62e:	4a04      	ldr	r2, [pc, #16]	; (800b640 <FLASH_DataCacheReset+0x18>)
 800b630:	6812      	ldr	r2, [r2, #0]
 800b632:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b636:	601a      	str	r2, [r3, #0]
}
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr
 800b640:	40023c00 	.word	0x40023c00

0800b644 <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 800b644:	b480      	push	{r7}
 800b646:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 800b648:	4b06      	ldr	r3, [pc, #24]	; (800b664 <FLASH_Unlock+0x20>)
 800b64a:	691b      	ldr	r3, [r3, #16]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	da05      	bge.n	800b65c <FLASH_Unlock+0x18>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 800b650:	4b04      	ldr	r3, [pc, #16]	; (800b664 <FLASH_Unlock+0x20>)
 800b652:	4a05      	ldr	r2, [pc, #20]	; (800b668 <FLASH_Unlock+0x24>)
 800b654:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 800b656:	4b03      	ldr	r3, [pc, #12]	; (800b664 <FLASH_Unlock+0x20>)
 800b658:	4a04      	ldr	r2, [pc, #16]	; (800b66c <FLASH_Unlock+0x28>)
 800b65a:	605a      	str	r2, [r3, #4]
  }  
}
 800b65c:	46bd      	mov	sp, r7
 800b65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b662:	4770      	bx	lr
 800b664:	40023c00 	.word	0x40023c00
 800b668:	45670123 	.word	0x45670123
 800b66c:	cdef89ab 	.word	0xcdef89ab

0800b670 <FLASH_Lock>:
  * @brief  Locks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 800b670:	b480      	push	{r7}
 800b672:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800b674:	4b04      	ldr	r3, [pc, #16]	; (800b688 <FLASH_Lock+0x18>)
 800b676:	4a04      	ldr	r2, [pc, #16]	; (800b688 <FLASH_Lock+0x18>)
 800b678:	6912      	ldr	r2, [r2, #16]
 800b67a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800b67e:	611a      	str	r2, [r3, #16]
}
 800b680:	46bd      	mov	sp, r7
 800b682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b686:	4770      	bx	lr
 800b688:	40023c00 	.word	0x40023c00

0800b68c <FLASH_EraseSector>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b084      	sub	sp, #16
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
 800b694:	460b      	mov	r3, r1
 800b696:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0x0;
 800b698:	2300      	movs	r3, #0
 800b69a:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 800b69c:	2309      	movs	r3, #9
 800b69e:	72fb      	strb	r3, [r7, #11]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 800b6a0:	78fb      	ldrb	r3, [r7, #3]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d102      	bne.n	800b6ac <FLASH_EraseSector+0x20>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	60fb      	str	r3, [r7, #12]
 800b6aa:	e010      	b.n	800b6ce <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_2)
 800b6ac:	78fb      	ldrb	r3, [r7, #3]
 800b6ae:	2b01      	cmp	r3, #1
 800b6b0:	d103      	bne.n	800b6ba <FLASH_EraseSector+0x2e>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800b6b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6b6:	60fb      	str	r3, [r7, #12]
 800b6b8:	e009      	b.n	800b6ce <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_3)
 800b6ba:	78fb      	ldrb	r3, [r7, #3]
 800b6bc:	2b02      	cmp	r3, #2
 800b6be:	d103      	bne.n	800b6c8 <FLASH_EraseSector+0x3c>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800b6c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6c4:	60fb      	str	r3, [r7, #12]
 800b6c6:	e002      	b.n	800b6ce <FLASH_EraseSector+0x42>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800b6c8:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b6cc:	60fb      	str	r3, [r7, #12]
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800b6ce:	f000 fc73 	bl	800bfb8 <FLASH_WaitForLastOperation>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	72fb      	strb	r3, [r7, #11]
  
  if(status == FLASH_COMPLETE)
 800b6d6:	7afb      	ldrb	r3, [r7, #11]
 800b6d8:	2b09      	cmp	r3, #9
 800b6da:	d12f      	bne.n	800b73c <FLASH_EraseSector+0xb0>
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 800b6dc:	4b1a      	ldr	r3, [pc, #104]	; (800b748 <FLASH_EraseSector+0xbc>)
 800b6de:	4a1a      	ldr	r2, [pc, #104]	; (800b748 <FLASH_EraseSector+0xbc>)
 800b6e0:	6912      	ldr	r2, [r2, #16]
 800b6e2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b6e6:	611a      	str	r2, [r3, #16]
    FLASH->CR |= tmp_psize;
 800b6e8:	4b17      	ldr	r3, [pc, #92]	; (800b748 <FLASH_EraseSector+0xbc>)
 800b6ea:	4a17      	ldr	r2, [pc, #92]	; (800b748 <FLASH_EraseSector+0xbc>)
 800b6ec:	6911      	ldr	r1, [r2, #16]
 800b6ee:	68fa      	ldr	r2, [r7, #12]
 800b6f0:	430a      	orrs	r2, r1
 800b6f2:	611a      	str	r2, [r3, #16]
    FLASH->CR &= SECTOR_MASK;
 800b6f4:	4b14      	ldr	r3, [pc, #80]	; (800b748 <FLASH_EraseSector+0xbc>)
 800b6f6:	4a14      	ldr	r2, [pc, #80]	; (800b748 <FLASH_EraseSector+0xbc>)
 800b6f8:	6912      	ldr	r2, [r2, #16]
 800b6fa:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800b6fe:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 800b700:	4b11      	ldr	r3, [pc, #68]	; (800b748 <FLASH_EraseSector+0xbc>)
 800b702:	4a11      	ldr	r2, [pc, #68]	; (800b748 <FLASH_EraseSector+0xbc>)
 800b704:	6911      	ldr	r1, [r2, #16]
 800b706:	687a      	ldr	r2, [r7, #4]
 800b708:	430a      	orrs	r2, r1
 800b70a:	f042 0202 	orr.w	r2, r2, #2
 800b70e:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_STRT;
 800b710:	4b0d      	ldr	r3, [pc, #52]	; (800b748 <FLASH_EraseSector+0xbc>)
 800b712:	4a0d      	ldr	r2, [pc, #52]	; (800b748 <FLASH_EraseSector+0xbc>)
 800b714:	6912      	ldr	r2, [r2, #16]
 800b716:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b71a:	611a      	str	r2, [r3, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800b71c:	f000 fc4c 	bl	800bfb8 <FLASH_WaitForLastOperation>
 800b720:	4603      	mov	r3, r0
 800b722:	72fb      	strb	r3, [r7, #11]
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 800b724:	4b08      	ldr	r3, [pc, #32]	; (800b748 <FLASH_EraseSector+0xbc>)
 800b726:	4a08      	ldr	r2, [pc, #32]	; (800b748 <FLASH_EraseSector+0xbc>)
 800b728:	6912      	ldr	r2, [r2, #16]
 800b72a:	f022 0202 	bic.w	r2, r2, #2
 800b72e:	611a      	str	r2, [r3, #16]
    FLASH->CR &= SECTOR_MASK; 
 800b730:	4b05      	ldr	r3, [pc, #20]	; (800b748 <FLASH_EraseSector+0xbc>)
 800b732:	4a05      	ldr	r2, [pc, #20]	; (800b748 <FLASH_EraseSector+0xbc>)
 800b734:	6912      	ldr	r2, [r2, #16]
 800b736:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800b73a:	611a      	str	r2, [r3, #16]
  }
  /* Return the Erase Status */
  return status;
 800b73c:	7afb      	ldrb	r3, [r7, #11]
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3710      	adds	r7, #16
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}
 800b746:	bf00      	nop
 800b748:	40023c00 	.word	0x40023c00

0800b74c <FLASH_EraseAllSectors>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseAllSectors(uint8_t VoltageRange)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b084      	sub	sp, #16
 800b750:	af00      	add	r7, sp, #0
 800b752:	4603      	mov	r3, r0
 800b754:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp_psize = 0x0;
 800b756:	2300      	movs	r3, #0
 800b758:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 800b75a:	2309      	movs	r3, #9
 800b75c:	72fb      	strb	r3, [r7, #11]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800b75e:	f000 fc2b 	bl	800bfb8 <FLASH_WaitForLastOperation>
 800b762:	4603      	mov	r3, r0
 800b764:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 800b766:	79fb      	ldrb	r3, [r7, #7]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d102      	bne.n	800b772 <FLASH_EraseAllSectors+0x26>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800b76c:	2300      	movs	r3, #0
 800b76e:	60fb      	str	r3, [r7, #12]
 800b770:	e010      	b.n	800b794 <FLASH_EraseAllSectors+0x48>
  }
  else if(VoltageRange == VoltageRange_2)
 800b772:	79fb      	ldrb	r3, [r7, #7]
 800b774:	2b01      	cmp	r3, #1
 800b776:	d103      	bne.n	800b780 <FLASH_EraseAllSectors+0x34>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800b778:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b77c:	60fb      	str	r3, [r7, #12]
 800b77e:	e009      	b.n	800b794 <FLASH_EraseAllSectors+0x48>
  }
  else if(VoltageRange == VoltageRange_3)
 800b780:	79fb      	ldrb	r3, [r7, #7]
 800b782:	2b02      	cmp	r3, #2
 800b784:	d103      	bne.n	800b78e <FLASH_EraseAllSectors+0x42>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800b786:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b78a:	60fb      	str	r3, [r7, #12]
 800b78c:	e002      	b.n	800b794 <FLASH_EraseAllSectors+0x48>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800b78e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b792:	60fb      	str	r3, [r7, #12]
  }  
  if(status == FLASH_COMPLETE)
 800b794:	7afb      	ldrb	r3, [r7, #11]
 800b796:	2b09      	cmp	r3, #9
 800b798:	d125      	bne.n	800b7e6 <FLASH_EraseAllSectors+0x9a>
  {
    /* if the previous operation is completed, proceed to erase all sectors */
#if defined (STM32F427_437xx) || defined (STM32F429_439xx)    
    FLASH->CR &= CR_PSIZE_MASK;
 800b79a:	4b15      	ldr	r3, [pc, #84]	; (800b7f0 <FLASH_EraseAllSectors+0xa4>)
 800b79c:	4a14      	ldr	r2, [pc, #80]	; (800b7f0 <FLASH_EraseAllSectors+0xa4>)
 800b79e:	6912      	ldr	r2, [r2, #16]
 800b7a0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b7a4:	611a      	str	r2, [r3, #16]
    FLASH->CR |= tmp_psize;
 800b7a6:	4b12      	ldr	r3, [pc, #72]	; (800b7f0 <FLASH_EraseAllSectors+0xa4>)
 800b7a8:	4a11      	ldr	r2, [pc, #68]	; (800b7f0 <FLASH_EraseAllSectors+0xa4>)
 800b7aa:	6911      	ldr	r1, [r2, #16]
 800b7ac:	68fa      	ldr	r2, [r7, #12]
 800b7ae:	430a      	orrs	r2, r1
 800b7b0:	611a      	str	r2, [r3, #16]
    FLASH->CR |= (FLASH_CR_MER1 | FLASH_CR_MER2);
 800b7b2:	4a0f      	ldr	r2, [pc, #60]	; (800b7f0 <FLASH_EraseAllSectors+0xa4>)
 800b7b4:	4b0e      	ldr	r3, [pc, #56]	; (800b7f0 <FLASH_EraseAllSectors+0xa4>)
 800b7b6:	691b      	ldr	r3, [r3, #16]
 800b7b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7bc:	f043 0304 	orr.w	r3, r3, #4
 800b7c0:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_STRT;
 800b7c2:	4b0b      	ldr	r3, [pc, #44]	; (800b7f0 <FLASH_EraseAllSectors+0xa4>)
 800b7c4:	4a0a      	ldr	r2, [pc, #40]	; (800b7f0 <FLASH_EraseAllSectors+0xa4>)
 800b7c6:	6912      	ldr	r2, [r2, #16]
 800b7c8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b7cc:	611a      	str	r2, [r3, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800b7ce:	f000 fbf3 	bl	800bfb8 <FLASH_WaitForLastOperation>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	72fb      	strb	r3, [r7, #11]

    /* if the erase operation is completed, disable the MER Bit */
    FLASH->CR &= ~(FLASH_CR_MER1 | FLASH_CR_MER2);
 800b7d6:	4a06      	ldr	r2, [pc, #24]	; (800b7f0 <FLASH_EraseAllSectors+0xa4>)
 800b7d8:	4b05      	ldr	r3, [pc, #20]	; (800b7f0 <FLASH_EraseAllSectors+0xa4>)
 800b7da:	691b      	ldr	r3, [r3, #16]
 800b7dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b7e0:	f023 0304 	bic.w	r3, r3, #4
 800b7e4:	6113      	str	r3, [r2, #16]
    FLASH->CR &= (~FLASH_CR_MER);
#endif /* STM32F40_41xxx || STM32F401xx */

  }   
  /* Return the Erase Status */
  return status;
 800b7e6:	7afb      	ldrb	r3, [r7, #11]
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3710      	adds	r7, #16
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}
 800b7f0:	40023c00 	.word	0x40023c00

0800b7f4 <FLASH_EraseAllBank1Sectors>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseAllBank1Sectors(uint8_t VoltageRange)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b084      	sub	sp, #16
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp_psize = 0x0;
 800b7fe:	2300      	movs	r3, #0
 800b800:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 800b802:	2309      	movs	r3, #9
 800b804:	72fb      	strb	r3, [r7, #11]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800b806:	f000 fbd7 	bl	800bfb8 <FLASH_WaitForLastOperation>
 800b80a:	4603      	mov	r3, r0
 800b80c:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 800b80e:	79fb      	ldrb	r3, [r7, #7]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d102      	bne.n	800b81a <FLASH_EraseAllBank1Sectors+0x26>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800b814:	2300      	movs	r3, #0
 800b816:	60fb      	str	r3, [r7, #12]
 800b818:	e010      	b.n	800b83c <FLASH_EraseAllBank1Sectors+0x48>
  }
  else if(VoltageRange == VoltageRange_2)
 800b81a:	79fb      	ldrb	r3, [r7, #7]
 800b81c:	2b01      	cmp	r3, #1
 800b81e:	d103      	bne.n	800b828 <FLASH_EraseAllBank1Sectors+0x34>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800b820:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b824:	60fb      	str	r3, [r7, #12]
 800b826:	e009      	b.n	800b83c <FLASH_EraseAllBank1Sectors+0x48>
  }
  else if(VoltageRange == VoltageRange_3)
 800b828:	79fb      	ldrb	r3, [r7, #7]
 800b82a:	2b02      	cmp	r3, #2
 800b82c:	d103      	bne.n	800b836 <FLASH_EraseAllBank1Sectors+0x42>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800b82e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b832:	60fb      	str	r3, [r7, #12]
 800b834:	e002      	b.n	800b83c <FLASH_EraseAllBank1Sectors+0x48>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800b836:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b83a:	60fb      	str	r3, [r7, #12]
  }  
  if(status == FLASH_COMPLETE)
 800b83c:	7afb      	ldrb	r3, [r7, #11]
 800b83e:	2b09      	cmp	r3, #9
 800b840:	d121      	bne.n	800b886 <FLASH_EraseAllBank1Sectors+0x92>
  {
    /* if the previous operation is completed, proceed to erase all sectors */
     FLASH->CR &= CR_PSIZE_MASK;
 800b842:	4b13      	ldr	r3, [pc, #76]	; (800b890 <FLASH_EraseAllBank1Sectors+0x9c>)
 800b844:	4a12      	ldr	r2, [pc, #72]	; (800b890 <FLASH_EraseAllBank1Sectors+0x9c>)
 800b846:	6912      	ldr	r2, [r2, #16]
 800b848:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b84c:	611a      	str	r2, [r3, #16]
     FLASH->CR |= tmp_psize;
 800b84e:	4b10      	ldr	r3, [pc, #64]	; (800b890 <FLASH_EraseAllBank1Sectors+0x9c>)
 800b850:	4a0f      	ldr	r2, [pc, #60]	; (800b890 <FLASH_EraseAllBank1Sectors+0x9c>)
 800b852:	6911      	ldr	r1, [r2, #16]
 800b854:	68fa      	ldr	r2, [r7, #12]
 800b856:	430a      	orrs	r2, r1
 800b858:	611a      	str	r2, [r3, #16]
     FLASH->CR |= FLASH_CR_MER1;
 800b85a:	4b0d      	ldr	r3, [pc, #52]	; (800b890 <FLASH_EraseAllBank1Sectors+0x9c>)
 800b85c:	4a0c      	ldr	r2, [pc, #48]	; (800b890 <FLASH_EraseAllBank1Sectors+0x9c>)
 800b85e:	6912      	ldr	r2, [r2, #16]
 800b860:	f042 0204 	orr.w	r2, r2, #4
 800b864:	611a      	str	r2, [r3, #16]
     FLASH->CR |= FLASH_CR_STRT;
 800b866:	4b0a      	ldr	r3, [pc, #40]	; (800b890 <FLASH_EraseAllBank1Sectors+0x9c>)
 800b868:	4a09      	ldr	r2, [pc, #36]	; (800b890 <FLASH_EraseAllBank1Sectors+0x9c>)
 800b86a:	6912      	ldr	r2, [r2, #16]
 800b86c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b870:	611a      	str	r2, [r3, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800b872:	f000 fba1 	bl	800bfb8 <FLASH_WaitForLastOperation>
 800b876:	4603      	mov	r3, r0
 800b878:	72fb      	strb	r3, [r7, #11]

    /* if the erase operation is completed, disable the MER Bit */
    FLASH->CR &= (~FLASH_CR_MER1);
 800b87a:	4b05      	ldr	r3, [pc, #20]	; (800b890 <FLASH_EraseAllBank1Sectors+0x9c>)
 800b87c:	4a04      	ldr	r2, [pc, #16]	; (800b890 <FLASH_EraseAllBank1Sectors+0x9c>)
 800b87e:	6912      	ldr	r2, [r2, #16]
 800b880:	f022 0204 	bic.w	r2, r2, #4
 800b884:	611a      	str	r2, [r3, #16]

  }   
  /* Return the Erase Status */
  return status;
 800b886:	7afb      	ldrb	r3, [r7, #11]
}
 800b888:	4618      	mov	r0, r3
 800b88a:	3710      	adds	r7, #16
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}
 800b890:	40023c00 	.word	0x40023c00

0800b894 <FLASH_EraseAllBank2Sectors>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseAllBank2Sectors(uint8_t VoltageRange)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b084      	sub	sp, #16
 800b898:	af00      	add	r7, sp, #0
 800b89a:	4603      	mov	r3, r0
 800b89c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp_psize = 0x0;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 800b8a2:	2309      	movs	r3, #9
 800b8a4:	72fb      	strb	r3, [r7, #11]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800b8a6:	f000 fb87 	bl	800bfb8 <FLASH_WaitForLastOperation>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 800b8ae:	79fb      	ldrb	r3, [r7, #7]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d102      	bne.n	800b8ba <FLASH_EraseAllBank2Sectors+0x26>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	60fb      	str	r3, [r7, #12]
 800b8b8:	e010      	b.n	800b8dc <FLASH_EraseAllBank2Sectors+0x48>
  }
  else if(VoltageRange == VoltageRange_2)
 800b8ba:	79fb      	ldrb	r3, [r7, #7]
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	d103      	bne.n	800b8c8 <FLASH_EraseAllBank2Sectors+0x34>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800b8c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8c4:	60fb      	str	r3, [r7, #12]
 800b8c6:	e009      	b.n	800b8dc <FLASH_EraseAllBank2Sectors+0x48>
  }
  else if(VoltageRange == VoltageRange_3)
 800b8c8:	79fb      	ldrb	r3, [r7, #7]
 800b8ca:	2b02      	cmp	r3, #2
 800b8cc:	d103      	bne.n	800b8d6 <FLASH_EraseAllBank2Sectors+0x42>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800b8ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b8d2:	60fb      	str	r3, [r7, #12]
 800b8d4:	e002      	b.n	800b8dc <FLASH_EraseAllBank2Sectors+0x48>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800b8d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b8da:	60fb      	str	r3, [r7, #12]
  }  
  if(status == FLASH_COMPLETE)
 800b8dc:	7afb      	ldrb	r3, [r7, #11]
 800b8de:	2b09      	cmp	r3, #9
 800b8e0:	d121      	bne.n	800b926 <FLASH_EraseAllBank2Sectors+0x92>
  {
    /* if the previous operation is completed, proceed to erase all sectors */
     FLASH->CR &= CR_PSIZE_MASK;
 800b8e2:	4b13      	ldr	r3, [pc, #76]	; (800b930 <FLASH_EraseAllBank2Sectors+0x9c>)
 800b8e4:	4a12      	ldr	r2, [pc, #72]	; (800b930 <FLASH_EraseAllBank2Sectors+0x9c>)
 800b8e6:	6912      	ldr	r2, [r2, #16]
 800b8e8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b8ec:	611a      	str	r2, [r3, #16]
     FLASH->CR |= tmp_psize;
 800b8ee:	4b10      	ldr	r3, [pc, #64]	; (800b930 <FLASH_EraseAllBank2Sectors+0x9c>)
 800b8f0:	4a0f      	ldr	r2, [pc, #60]	; (800b930 <FLASH_EraseAllBank2Sectors+0x9c>)
 800b8f2:	6911      	ldr	r1, [r2, #16]
 800b8f4:	68fa      	ldr	r2, [r7, #12]
 800b8f6:	430a      	orrs	r2, r1
 800b8f8:	611a      	str	r2, [r3, #16]
     FLASH->CR |= FLASH_CR_MER2;
 800b8fa:	4b0d      	ldr	r3, [pc, #52]	; (800b930 <FLASH_EraseAllBank2Sectors+0x9c>)
 800b8fc:	4a0c      	ldr	r2, [pc, #48]	; (800b930 <FLASH_EraseAllBank2Sectors+0x9c>)
 800b8fe:	6912      	ldr	r2, [r2, #16]
 800b900:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b904:	611a      	str	r2, [r3, #16]
     FLASH->CR |= FLASH_CR_STRT;
 800b906:	4b0a      	ldr	r3, [pc, #40]	; (800b930 <FLASH_EraseAllBank2Sectors+0x9c>)
 800b908:	4a09      	ldr	r2, [pc, #36]	; (800b930 <FLASH_EraseAllBank2Sectors+0x9c>)
 800b90a:	6912      	ldr	r2, [r2, #16]
 800b90c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b910:	611a      	str	r2, [r3, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800b912:	f000 fb51 	bl	800bfb8 <FLASH_WaitForLastOperation>
 800b916:	4603      	mov	r3, r0
 800b918:	72fb      	strb	r3, [r7, #11]

    /* if the erase operation is completed, disable the MER Bit */
    FLASH->CR &= (~FLASH_CR_MER2);
 800b91a:	4b05      	ldr	r3, [pc, #20]	; (800b930 <FLASH_EraseAllBank2Sectors+0x9c>)
 800b91c:	4a04      	ldr	r2, [pc, #16]	; (800b930 <FLASH_EraseAllBank2Sectors+0x9c>)
 800b91e:	6912      	ldr	r2, [r2, #16]
 800b920:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b924:	611a      	str	r2, [r3, #16]

  }   
  /* Return the Erase Status */
  return status;
 800b926:	7afb      	ldrb	r3, [r7, #11]
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3710      	adds	r7, #16
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}
 800b930:	40023c00 	.word	0x40023c00

0800b934 <FLASH_ProgramDoubleWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b086      	sub	sp, #24
 800b938:	af00      	add	r7, sp, #0
 800b93a:	60f8      	str	r0, [r7, #12]
 800b93c:	e9c7 2300 	strd	r2, r3, [r7]
  FLASH_Status status = FLASH_COMPLETE;
 800b940:	2309      	movs	r3, #9
 800b942:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800b944:	f000 fb38 	bl	800bfb8 <FLASH_WaitForLastOperation>
 800b948:	4603      	mov	r3, r0
 800b94a:	75fb      	strb	r3, [r7, #23]
  
  if(status == FLASH_COMPLETE)
 800b94c:	7dfb      	ldrb	r3, [r7, #23]
 800b94e:	2b09      	cmp	r3, #9
 800b950:	d120      	bne.n	800b994 <FLASH_ProgramDoubleWord+0x60>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 800b952:	4b13      	ldr	r3, [pc, #76]	; (800b9a0 <FLASH_ProgramDoubleWord+0x6c>)
 800b954:	4a12      	ldr	r2, [pc, #72]	; (800b9a0 <FLASH_ProgramDoubleWord+0x6c>)
 800b956:	6912      	ldr	r2, [r2, #16]
 800b958:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b95c:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800b95e:	4b10      	ldr	r3, [pc, #64]	; (800b9a0 <FLASH_ProgramDoubleWord+0x6c>)
 800b960:	4a0f      	ldr	r2, [pc, #60]	; (800b9a0 <FLASH_ProgramDoubleWord+0x6c>)
 800b962:	6912      	ldr	r2, [r2, #16]
 800b964:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800b968:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 800b96a:	4b0d      	ldr	r3, [pc, #52]	; (800b9a0 <FLASH_ProgramDoubleWord+0x6c>)
 800b96c:	4a0c      	ldr	r2, [pc, #48]	; (800b9a0 <FLASH_ProgramDoubleWord+0x6c>)
 800b96e:	6912      	ldr	r2, [r2, #16]
 800b970:	f042 0201 	orr.w	r2, r2, #1
 800b974:	611a      	str	r2, [r3, #16]
  
    *(__IO uint64_t*)Address = Data;
 800b976:	68f9      	ldr	r1, [r7, #12]
 800b978:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b97c:	e9c1 2300 	strd	r2, r3, [r1]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800b980:	f000 fb1a 	bl	800bfb8 <FLASH_WaitForLastOperation>
 800b984:	4603      	mov	r3, r0
 800b986:	75fb      	strb	r3, [r7, #23]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800b988:	4b05      	ldr	r3, [pc, #20]	; (800b9a0 <FLASH_ProgramDoubleWord+0x6c>)
 800b98a:	4a05      	ldr	r2, [pc, #20]	; (800b9a0 <FLASH_ProgramDoubleWord+0x6c>)
 800b98c:	6912      	ldr	r2, [r2, #16]
 800b98e:	f022 0201 	bic.w	r2, r2, #1
 800b992:	611a      	str	r2, [r3, #16]
  } 
  /* Return the Program Status */
  return status;
 800b994:	7dfb      	ldrb	r3, [r7, #23]
}
 800b996:	4618      	mov	r0, r3
 800b998:	3718      	adds	r7, #24
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
 800b99e:	bf00      	nop
 800b9a0:	40023c00 	.word	0x40023c00

0800b9a4 <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b084      	sub	sp, #16
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
 800b9ac:	6039      	str	r1, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE;
 800b9ae:	2309      	movs	r3, #9
 800b9b0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800b9b2:	f000 fb01 	bl	800bfb8 <FLASH_WaitForLastOperation>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 800b9ba:	7bfb      	ldrb	r3, [r7, #15]
 800b9bc:	2b09      	cmp	r3, #9
 800b9be:	d11e      	bne.n	800b9fe <FLASH_ProgramWord+0x5a>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 800b9c0:	4b11      	ldr	r3, [pc, #68]	; (800ba08 <FLASH_ProgramWord+0x64>)
 800b9c2:	4a11      	ldr	r2, [pc, #68]	; (800ba08 <FLASH_ProgramWord+0x64>)
 800b9c4:	6912      	ldr	r2, [r2, #16]
 800b9c6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b9ca:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_WORD;
 800b9cc:	4b0e      	ldr	r3, [pc, #56]	; (800ba08 <FLASH_ProgramWord+0x64>)
 800b9ce:	4a0e      	ldr	r2, [pc, #56]	; (800ba08 <FLASH_ProgramWord+0x64>)
 800b9d0:	6912      	ldr	r2, [r2, #16]
 800b9d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b9d6:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 800b9d8:	4b0b      	ldr	r3, [pc, #44]	; (800ba08 <FLASH_ProgramWord+0x64>)
 800b9da:	4a0b      	ldr	r2, [pc, #44]	; (800ba08 <FLASH_ProgramWord+0x64>)
 800b9dc:	6912      	ldr	r2, [r2, #16]
 800b9de:	f042 0201 	orr.w	r2, r2, #1
 800b9e2:	611a      	str	r2, [r3, #16]
  
    *(__IO uint32_t*)Address = Data;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	683a      	ldr	r2, [r7, #0]
 800b9e8:	601a      	str	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800b9ea:	f000 fae5 	bl	800bfb8 <FLASH_WaitForLastOperation>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800b9f2:	4b05      	ldr	r3, [pc, #20]	; (800ba08 <FLASH_ProgramWord+0x64>)
 800b9f4:	4a04      	ldr	r2, [pc, #16]	; (800ba08 <FLASH_ProgramWord+0x64>)
 800b9f6:	6912      	ldr	r2, [r2, #16]
 800b9f8:	f022 0201 	bic.w	r2, r2, #1
 800b9fc:	611a      	str	r2, [r3, #16]
  } 
  /* Return the Program Status */
  return status;
 800b9fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3710      	adds	r7, #16
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}
 800ba08:	40023c00 	.word	0x40023c00

0800ba0c <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b084      	sub	sp, #16
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
 800ba14:	460b      	mov	r3, r1
 800ba16:	807b      	strh	r3, [r7, #2]
  FLASH_Status status = FLASH_COMPLETE;
 800ba18:	2309      	movs	r3, #9
 800ba1a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800ba1c:	f000 facc 	bl	800bfb8 <FLASH_WaitForLastOperation>
 800ba20:	4603      	mov	r3, r0
 800ba22:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 800ba24:	7bfb      	ldrb	r3, [r7, #15]
 800ba26:	2b09      	cmp	r3, #9
 800ba28:	d11e      	bne.n	800ba68 <FLASH_ProgramHalfWord+0x5c>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 800ba2a:	4b12      	ldr	r3, [pc, #72]	; (800ba74 <FLASH_ProgramHalfWord+0x68>)
 800ba2c:	4a11      	ldr	r2, [pc, #68]	; (800ba74 <FLASH_ProgramHalfWord+0x68>)
 800ba2e:	6912      	ldr	r2, [r2, #16]
 800ba30:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ba34:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800ba36:	4b0f      	ldr	r3, [pc, #60]	; (800ba74 <FLASH_ProgramHalfWord+0x68>)
 800ba38:	4a0e      	ldr	r2, [pc, #56]	; (800ba74 <FLASH_ProgramHalfWord+0x68>)
 800ba3a:	6912      	ldr	r2, [r2, #16]
 800ba3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ba40:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 800ba42:	4b0c      	ldr	r3, [pc, #48]	; (800ba74 <FLASH_ProgramHalfWord+0x68>)
 800ba44:	4a0b      	ldr	r2, [pc, #44]	; (800ba74 <FLASH_ProgramHalfWord+0x68>)
 800ba46:	6912      	ldr	r2, [r2, #16]
 800ba48:	f042 0201 	orr.w	r2, r2, #1
 800ba4c:	611a      	str	r2, [r3, #16]
  
    *(__IO uint16_t*)Address = Data;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	887a      	ldrh	r2, [r7, #2]
 800ba52:	801a      	strh	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800ba54:	f000 fab0 	bl	800bfb8 <FLASH_WaitForLastOperation>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800ba5c:	4b05      	ldr	r3, [pc, #20]	; (800ba74 <FLASH_ProgramHalfWord+0x68>)
 800ba5e:	4a05      	ldr	r2, [pc, #20]	; (800ba74 <FLASH_ProgramHalfWord+0x68>)
 800ba60:	6912      	ldr	r2, [r2, #16]
 800ba62:	f022 0201 	bic.w	r2, r2, #1
 800ba66:	611a      	str	r2, [r3, #16]
  } 
  /* Return the Program Status */
  return status;
 800ba68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3710      	adds	r7, #16
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}
 800ba72:	bf00      	nop
 800ba74:	40023c00 	.word	0x40023c00

0800ba78 <FLASH_ProgramByte>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b084      	sub	sp, #16
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
 800ba80:	460b      	mov	r3, r1
 800ba82:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 800ba84:	2309      	movs	r3, #9
 800ba86:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800ba88:	f000 fa96 	bl	800bfb8 <FLASH_WaitForLastOperation>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 800ba90:	7bfb      	ldrb	r3, [r7, #15]
 800ba92:	2b09      	cmp	r3, #9
 800ba94:	d11c      	bne.n	800bad0 <FLASH_ProgramByte+0x58>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 800ba96:	4b11      	ldr	r3, [pc, #68]	; (800badc <FLASH_ProgramByte+0x64>)
 800ba98:	4a10      	ldr	r2, [pc, #64]	; (800badc <FLASH_ProgramByte+0x64>)
 800ba9a:	6912      	ldr	r2, [r2, #16]
 800ba9c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800baa0:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_BYTE;
 800baa2:	4b0e      	ldr	r3, [pc, #56]	; (800badc <FLASH_ProgramByte+0x64>)
 800baa4:	4a0d      	ldr	r2, [pc, #52]	; (800badc <FLASH_ProgramByte+0x64>)
 800baa6:	6912      	ldr	r2, [r2, #16]
 800baa8:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 800baaa:	4b0c      	ldr	r3, [pc, #48]	; (800badc <FLASH_ProgramByte+0x64>)
 800baac:	4a0b      	ldr	r2, [pc, #44]	; (800badc <FLASH_ProgramByte+0x64>)
 800baae:	6912      	ldr	r2, [r2, #16]
 800bab0:	f042 0201 	orr.w	r2, r2, #1
 800bab4:	611a      	str	r2, [r3, #16]
  
    *(__IO uint8_t*)Address = Data;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	78fa      	ldrb	r2, [r7, #3]
 800baba:	701a      	strb	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800babc:	f000 fa7c 	bl	800bfb8 <FLASH_WaitForLastOperation>
 800bac0:	4603      	mov	r3, r0
 800bac2:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800bac4:	4b05      	ldr	r3, [pc, #20]	; (800badc <FLASH_ProgramByte+0x64>)
 800bac6:	4a05      	ldr	r2, [pc, #20]	; (800badc <FLASH_ProgramByte+0x64>)
 800bac8:	6912      	ldr	r2, [r2, #16]
 800baca:	f022 0201 	bic.w	r2, r2, #1
 800bace:	611a      	str	r2, [r3, #16]
  } 

  /* Return the Program Status */
  return status;
 800bad0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3710      	adds	r7, #16
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}
 800bada:	bf00      	nop
 800badc:	40023c00 	.word	0x40023c00

0800bae0 <FLASH_OB_Unlock>:
  * @brief  Unlocks the FLASH Option Control Registers access.
  * @param  None
  * @retval None
  */
void FLASH_OB_Unlock(void)
{
 800bae0:	b480      	push	{r7}
 800bae2:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 800bae4:	4b07      	ldr	r3, [pc, #28]	; (800bb04 <FLASH_OB_Unlock+0x24>)
 800bae6:	695b      	ldr	r3, [r3, #20]
 800bae8:	f003 0301 	and.w	r3, r3, #1
 800baec:	2b00      	cmp	r3, #0
 800baee:	d005      	beq.n	800bafc <FLASH_OB_Unlock+0x1c>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800baf0:	4b04      	ldr	r3, [pc, #16]	; (800bb04 <FLASH_OB_Unlock+0x24>)
 800baf2:	4a05      	ldr	r2, [pc, #20]	; (800bb08 <FLASH_OB_Unlock+0x28>)
 800baf4:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800baf6:	4b03      	ldr	r3, [pc, #12]	; (800bb04 <FLASH_OB_Unlock+0x24>)
 800baf8:	4a04      	ldr	r2, [pc, #16]	; (800bb0c <FLASH_OB_Unlock+0x2c>)
 800bafa:	609a      	str	r2, [r3, #8]
  }  
}
 800bafc:	46bd      	mov	sp, r7
 800bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb02:	4770      	bx	lr
 800bb04:	40023c00 	.word	0x40023c00
 800bb08:	08192a3b 	.word	0x08192a3b
 800bb0c:	4c5d6e7f 	.word	0x4c5d6e7f

0800bb10 <FLASH_OB_Lock>:
  * @brief  Locks the FLASH Option Control Registers access.
  * @param  None
  * @retval None
  */
void FLASH_OB_Lock(void)
{
 800bb10:	b480      	push	{r7}
 800bb12:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800bb14:	4b04      	ldr	r3, [pc, #16]	; (800bb28 <FLASH_OB_Lock+0x18>)
 800bb16:	4a04      	ldr	r2, [pc, #16]	; (800bb28 <FLASH_OB_Lock+0x18>)
 800bb18:	6952      	ldr	r2, [r2, #20]
 800bb1a:	f042 0201 	orr.w	r2, r2, #1
 800bb1e:	615a      	str	r2, [r3, #20]
}
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr
 800bb28:	40023c00 	.word	0x40023c00

0800bb2c <FLASH_OB_WRPConfig>:
  * @param  Newstate: new state of the Write Protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None  
  */
void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState)
{ 
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b084      	sub	sp, #16
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
 800bb34:	460b      	mov	r3, r1
 800bb36:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 800bb38:	2309      	movs	r3, #9
 800bb3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(OB_WRP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  status = FLASH_WaitForLastOperation();
 800bb3c:	f000 fa3c 	bl	800bfb8 <FLASH_WaitForLastOperation>
 800bb40:	4603      	mov	r3, r0
 800bb42:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 800bb44:	7bfb      	ldrb	r3, [r7, #15]
 800bb46:	2b09      	cmp	r3, #9
 800bb48:	d117      	bne.n	800bb7a <FLASH_OB_WRPConfig+0x4e>
  { 
    if(NewState != DISABLE)
 800bb4a:	78fb      	ldrb	r3, [r7, #3]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d00b      	beq.n	800bb68 <FLASH_OB_WRPConfig+0x3c>
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_WRP);
 800bb50:	4b0b      	ldr	r3, [pc, #44]	; (800bb80 <FLASH_OB_WRPConfig+0x54>)
 800bb52:	4a0b      	ldr	r2, [pc, #44]	; (800bb80 <FLASH_OB_WRPConfig+0x54>)
 800bb54:	8812      	ldrh	r2, [r2, #0]
 800bb56:	b291      	uxth	r1, r2
 800bb58:	687a      	ldr	r2, [r7, #4]
 800bb5a:	b292      	uxth	r2, r2
 800bb5c:	43d2      	mvns	r2, r2
 800bb5e:	b292      	uxth	r2, r2
 800bb60:	400a      	ands	r2, r1
 800bb62:	b292      	uxth	r2, r2
 800bb64:	801a      	strh	r2, [r3, #0]
 800bb66:	e008      	b.n	800bb7a <FLASH_OB_WRPConfig+0x4e>
    }
    else
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
 800bb68:	4b05      	ldr	r3, [pc, #20]	; (800bb80 <FLASH_OB_WRPConfig+0x54>)
 800bb6a:	4a05      	ldr	r2, [pc, #20]	; (800bb80 <FLASH_OB_WRPConfig+0x54>)
 800bb6c:	8812      	ldrh	r2, [r2, #0]
 800bb6e:	b291      	uxth	r1, r2
 800bb70:	687a      	ldr	r2, [r7, #4]
 800bb72:	b292      	uxth	r2, r2
 800bb74:	430a      	orrs	r2, r1
 800bb76:	b292      	uxth	r2, r2
 800bb78:	801a      	strh	r2, [r3, #0]
    }
  }
}
 800bb7a:	3710      	adds	r7, #16
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}
 800bb80:	40023c16 	.word	0x40023c16

0800bb84 <FLASH_OB_WRP1Config>:
  * @param  Newstate: new state of the Write Protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None  
  */
void FLASH_OB_WRP1Config(uint32_t OB_WRP, FunctionalState NewState)
{ 
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b084      	sub	sp, #16
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	460b      	mov	r3, r1
 800bb8e:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 800bb90:	2309      	movs	r3, #9
 800bb92:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(OB_WRP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  status = FLASH_WaitForLastOperation();
 800bb94:	f000 fa10 	bl	800bfb8 <FLASH_WaitForLastOperation>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 800bb9c:	7bfb      	ldrb	r3, [r7, #15]
 800bb9e:	2b09      	cmp	r3, #9
 800bba0:	d117      	bne.n	800bbd2 <FLASH_OB_WRP1Config+0x4e>
  { 
    if(NewState != DISABLE)
 800bba2:	78fb      	ldrb	r3, [r7, #3]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d00b      	beq.n	800bbc0 <FLASH_OB_WRP1Config+0x3c>
    {
      *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~OB_WRP);
 800bba8:	4b0b      	ldr	r3, [pc, #44]	; (800bbd8 <FLASH_OB_WRP1Config+0x54>)
 800bbaa:	4a0b      	ldr	r2, [pc, #44]	; (800bbd8 <FLASH_OB_WRP1Config+0x54>)
 800bbac:	8812      	ldrh	r2, [r2, #0]
 800bbae:	b291      	uxth	r1, r2
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	b292      	uxth	r2, r2
 800bbb4:	43d2      	mvns	r2, r2
 800bbb6:	b292      	uxth	r2, r2
 800bbb8:	400a      	ands	r2, r1
 800bbba:	b292      	uxth	r2, r2
 800bbbc:	801a      	strh	r2, [r3, #0]
 800bbbe:	e008      	b.n	800bbd2 <FLASH_OB_WRP1Config+0x4e>
    }
    else
    {
      *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
 800bbc0:	4b05      	ldr	r3, [pc, #20]	; (800bbd8 <FLASH_OB_WRP1Config+0x54>)
 800bbc2:	4a05      	ldr	r2, [pc, #20]	; (800bbd8 <FLASH_OB_WRP1Config+0x54>)
 800bbc4:	8812      	ldrh	r2, [r2, #0]
 800bbc6:	b291      	uxth	r1, r2
 800bbc8:	687a      	ldr	r2, [r7, #4]
 800bbca:	b292      	uxth	r2, r2
 800bbcc:	430a      	orrs	r2, r1
 800bbce:	b292      	uxth	r2, r2
 800bbd0:	801a      	strh	r2, [r3, #0]
    }
  }
}
 800bbd2:	3710      	adds	r7, #16
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}
 800bbd8:	40023c1a 	.word	0x40023c1a

0800bbdc <FLASH_OB_PCROPSelectionConfig>:
  *            @arg OB_PcROP_Disable: nWRPi control the write protection of respective user sectors.
  *            @arg OB_PcROP_Enable: nWRPi control the  read&write protection (PCROP) of respective user sectors.
  * @retval None
  */
void FLASH_OB_PCROPSelectionConfig(uint8_t OB_PcROP)
{  
 800bbdc:	b480      	push	{r7}
 800bbde:	b085      	sub	sp, #20
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	71fb      	strb	r3, [r7, #7]
  uint8_t optiontmp = 0xFF;
 800bbe6:	23ff      	movs	r3, #255	; 0xff
 800bbe8:	73fb      	strb	r3, [r7, #15]
      
  /* Check the parameters */
  assert_param(IS_OB_PCROP_SELECT(OB_PcROP));
  
  /* Mask SPRMOD bit */
  optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE3_ADDRESS) & (uint8_t)0x7F); 
 800bbea:	4b08      	ldr	r3, [pc, #32]	; (800bc0c <FLASH_OB_PCROPSelectionConfig+0x30>)
 800bbec:	781b      	ldrb	r3, [r3, #0]
 800bbee:	b2db      	uxtb	r3, r3
 800bbf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbf4:	73fb      	strb	r3, [r7, #15]
  /* Update Option Byte */
  *(__IO uint8_t *)OPTCR_BYTE3_ADDRESS = (uint8_t)(OB_PcROP | optiontmp); 
 800bbf6:	4b05      	ldr	r3, [pc, #20]	; (800bc0c <FLASH_OB_PCROPSelectionConfig+0x30>)
 800bbf8:	79f9      	ldrb	r1, [r7, #7]
 800bbfa:	7bfa      	ldrb	r2, [r7, #15]
 800bbfc:	430a      	orrs	r2, r1
 800bbfe:	b2d2      	uxtb	r2, r2
 800bc00:	701a      	strb	r2, [r3, #0]
    
}
 800bc02:	3714      	adds	r7, #20
 800bc04:	46bd      	mov	sp, r7
 800bc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0a:	4770      	bx	lr
 800bc0c:	40023c17 	.word	0x40023c17

0800bc10 <FLASH_OB_PCROPConfig>:
  * @param  Newstate: new state of the Write Protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None  
  */
void FLASH_OB_PCROPConfig(uint32_t OB_PCROP, FunctionalState NewState)
{ 
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b084      	sub	sp, #16
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	460b      	mov	r3, r1
 800bc1a:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 800bc1c:	2309      	movs	r3, #9
 800bc1e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_PCROP(OB_PCROP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  status = FLASH_WaitForLastOperation();
 800bc20:	f000 f9ca 	bl	800bfb8 <FLASH_WaitForLastOperation>
 800bc24:	4603      	mov	r3, r0
 800bc26:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 800bc28:	7bfb      	ldrb	r3, [r7, #15]
 800bc2a:	2b09      	cmp	r3, #9
 800bc2c:	d117      	bne.n	800bc5e <FLASH_OB_PCROPConfig+0x4e>
  { 
    if(NewState != DISABLE)
 800bc2e:	78fb      	ldrb	r3, [r7, #3]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d009      	beq.n	800bc48 <FLASH_OB_PCROPConfig+0x38>
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_PCROP;    
 800bc34:	4b0b      	ldr	r3, [pc, #44]	; (800bc64 <FLASH_OB_PCROPConfig+0x54>)
 800bc36:	4a0b      	ldr	r2, [pc, #44]	; (800bc64 <FLASH_OB_PCROPConfig+0x54>)
 800bc38:	8812      	ldrh	r2, [r2, #0]
 800bc3a:	b291      	uxth	r1, r2
 800bc3c:	687a      	ldr	r2, [r7, #4]
 800bc3e:	b292      	uxth	r2, r2
 800bc40:	430a      	orrs	r2, r1
 800bc42:	b292      	uxth	r2, r2
 800bc44:	801a      	strh	r2, [r3, #0]
 800bc46:	e00a      	b.n	800bc5e <FLASH_OB_PCROPConfig+0x4e>
    }
    else
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_PCROP);
 800bc48:	4b06      	ldr	r3, [pc, #24]	; (800bc64 <FLASH_OB_PCROPConfig+0x54>)
 800bc4a:	4a06      	ldr	r2, [pc, #24]	; (800bc64 <FLASH_OB_PCROPConfig+0x54>)
 800bc4c:	8812      	ldrh	r2, [r2, #0]
 800bc4e:	b291      	uxth	r1, r2
 800bc50:	687a      	ldr	r2, [r7, #4]
 800bc52:	b292      	uxth	r2, r2
 800bc54:	43d2      	mvns	r2, r2
 800bc56:	b292      	uxth	r2, r2
 800bc58:	400a      	ands	r2, r1
 800bc5a:	b292      	uxth	r2, r2
 800bc5c:	801a      	strh	r2, [r3, #0]
    }
  }
}
 800bc5e:	3710      	adds	r7, #16
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}
 800bc64:	40023c16 	.word	0x40023c16

0800bc68 <FLASH_OB_PCROP1Config>:
  * @param  Newstate: new state of the Write Protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None  
  */
void FLASH_OB_PCROP1Config(uint32_t OB_PCROP, FunctionalState NewState)
{ 
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b084      	sub	sp, #16
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	460b      	mov	r3, r1
 800bc72:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 800bc74:	2309      	movs	r3, #9
 800bc76:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_PCROP(OB_PCROP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  status = FLASH_WaitForLastOperation();
 800bc78:	f000 f99e 	bl	800bfb8 <FLASH_WaitForLastOperation>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 800bc80:	7bfb      	ldrb	r3, [r7, #15]
 800bc82:	2b09      	cmp	r3, #9
 800bc84:	d117      	bne.n	800bcb6 <FLASH_OB_PCROP1Config+0x4e>
  { 
    if(NewState != DISABLE)
 800bc86:	78fb      	ldrb	r3, [r7, #3]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d009      	beq.n	800bca0 <FLASH_OB_PCROP1Config+0x38>
    {
      *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)OB_PCROP;
 800bc8c:	4b0b      	ldr	r3, [pc, #44]	; (800bcbc <FLASH_OB_PCROP1Config+0x54>)
 800bc8e:	4a0b      	ldr	r2, [pc, #44]	; (800bcbc <FLASH_OB_PCROP1Config+0x54>)
 800bc90:	8812      	ldrh	r2, [r2, #0]
 800bc92:	b291      	uxth	r1, r2
 800bc94:	687a      	ldr	r2, [r7, #4]
 800bc96:	b292      	uxth	r2, r2
 800bc98:	430a      	orrs	r2, r1
 800bc9a:	b292      	uxth	r2, r2
 800bc9c:	801a      	strh	r2, [r3, #0]
 800bc9e:	e00a      	b.n	800bcb6 <FLASH_OB_PCROP1Config+0x4e>
    }
    else
    {
      *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~OB_PCROP);
 800bca0:	4b06      	ldr	r3, [pc, #24]	; (800bcbc <FLASH_OB_PCROP1Config+0x54>)
 800bca2:	4a06      	ldr	r2, [pc, #24]	; (800bcbc <FLASH_OB_PCROP1Config+0x54>)
 800bca4:	8812      	ldrh	r2, [r2, #0]
 800bca6:	b291      	uxth	r1, r2
 800bca8:	687a      	ldr	r2, [r7, #4]
 800bcaa:	b292      	uxth	r2, r2
 800bcac:	43d2      	mvns	r2, r2
 800bcae:	b292      	uxth	r2, r2
 800bcb0:	400a      	ands	r2, r1
 800bcb2:	b292      	uxth	r2, r2
 800bcb4:	801a      	strh	r2, [r3, #0]
    }
  }
}
 800bcb6:	3710      	adds	r7, #16
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}
 800bcbc:	40023c1a 	.word	0x40023c1a

0800bcc0 <FLASH_OB_RDPConfig>:
  * /!\ Warning /!\ When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *    
  * @retval None
  */
void FLASH_OB_RDPConfig(uint8_t OB_RDP)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b084      	sub	sp, #16
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	71fb      	strb	r3, [r7, #7]
  FLASH_Status status = FLASH_COMPLETE;
 800bcca:	2309      	movs	r3, #9
 800bccc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP(OB_RDP));

  status = FLASH_WaitForLastOperation();
 800bcce:	f000 f973 	bl	800bfb8 <FLASH_WaitForLastOperation>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 800bcd6:	7bfb      	ldrb	r3, [r7, #15]
 800bcd8:	2b09      	cmp	r3, #9
 800bcda:	d102      	bne.n	800bce2 <FLASH_OB_RDPConfig+0x22>
  {
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = OB_RDP;
 800bcdc:	4b02      	ldr	r3, [pc, #8]	; (800bce8 <FLASH_OB_RDPConfig+0x28>)
 800bcde:	79fa      	ldrb	r2, [r7, #7]
 800bce0:	701a      	strb	r2, [r3, #0]

  }
}
 800bce2:	3710      	adds	r7, #16
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}
 800bce8:	40023c15 	.word	0x40023c15

0800bcec <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NoRST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval None
  */
void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b084      	sub	sp, #16
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	4613      	mov	r3, r2
 800bcf4:	4602      	mov	r2, r0
 800bcf6:	71fa      	strb	r2, [r7, #7]
 800bcf8:	460a      	mov	r2, r1
 800bcfa:	71ba      	strb	r2, [r7, #6]
 800bcfc:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 800bcfe:	23ff      	movs	r3, #255	; 0xff
 800bd00:	73fb      	strb	r3, [r7, #15]
  FLASH_Status status = FLASH_COMPLETE; 
 800bd02:	2309      	movs	r3, #9
 800bd04:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800bd06:	f000 f957 	bl	800bfb8 <FLASH_WaitForLastOperation>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	73bb      	strb	r3, [r7, #14]
  
  if(status == FLASH_COMPLETE)
 800bd0e:	7bbb      	ldrb	r3, [r7, #14]
 800bd10:	2b09      	cmp	r3, #9
 800bd12:	d111      	bne.n	800bd38 <FLASH_OB_UserConfig+0x4c>
  { 
#if defined (STM32F427_437xx) || defined (STM32F429_439xx)     
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 800bd14:	4b0a      	ldr	r3, [pc, #40]	; (800bd40 <FLASH_OB_UserConfig+0x54>)
 800bd16:	781b      	ldrb	r3, [r3, #0]
 800bd18:	b2db      	uxtb	r3, r3
 800bd1a:	f003 031f 	and.w	r3, r3, #31
 800bd1e:	73fb      	strb	r3, [r7, #15]
    /* Mask OPTLOCK, OPTSTRT and BOR_LEV bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0F); 
#endif /* STM32F40_41xxx || STM32F401xx */ 

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = OB_IWDG | (uint8_t)(OB_STDBY | (uint8_t)(OB_STOP | ((uint8_t)optiontmp))); 
 800bd20:	4b07      	ldr	r3, [pc, #28]	; (800bd40 <FLASH_OB_UserConfig+0x54>)
 800bd22:	79b9      	ldrb	r1, [r7, #6]
 800bd24:	7bfa      	ldrb	r2, [r7, #15]
 800bd26:	430a      	orrs	r2, r1
 800bd28:	b2d1      	uxtb	r1, r2
 800bd2a:	797a      	ldrb	r2, [r7, #5]
 800bd2c:	430a      	orrs	r2, r1
 800bd2e:	b2d1      	uxtb	r1, r2
 800bd30:	79fa      	ldrb	r2, [r7, #7]
 800bd32:	430a      	orrs	r2, r1
 800bd34:	b2d2      	uxtb	r2, r2
 800bd36:	701a      	strb	r2, [r3, #0]
  }  
}
 800bd38:	3710      	adds	r7, #16
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}
 800bd3e:	bf00      	nop
 800bd40:	40023c14 	.word	0x40023c14

0800bd44 <FLASH_OB_BootConfig>:
  *            @arg OB_Dual_BootEnabled: Dual Bank Boot Enable
  *            @arg OB_Dual_BootDisabled: Dual Bank Boot Disabled
  * @retval None
  */
void FLASH_OB_BootConfig(uint8_t OB_BOOT)
{
 800bd44:	b480      	push	{r7}
 800bd46:	b083      	sub	sp, #12
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOOT(OB_BOOT));

  /* Set Dual Bank Boot */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BFB2);
 800bd4e:	4b0a      	ldr	r3, [pc, #40]	; (800bd78 <FLASH_OB_BootConfig+0x34>)
 800bd50:	4a09      	ldr	r2, [pc, #36]	; (800bd78 <FLASH_OB_BootConfig+0x34>)
 800bd52:	7812      	ldrb	r2, [r2, #0]
 800bd54:	b2d2      	uxtb	r2, r2
 800bd56:	f022 0210 	bic.w	r2, r2, #16
 800bd5a:	b2d2      	uxtb	r2, r2
 800bd5c:	701a      	strb	r2, [r3, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOOT;
 800bd5e:	4b06      	ldr	r3, [pc, #24]	; (800bd78 <FLASH_OB_BootConfig+0x34>)
 800bd60:	4a05      	ldr	r2, [pc, #20]	; (800bd78 <FLASH_OB_BootConfig+0x34>)
 800bd62:	7812      	ldrb	r2, [r2, #0]
 800bd64:	b2d1      	uxtb	r1, r2
 800bd66:	79fa      	ldrb	r2, [r7, #7]
 800bd68:	430a      	orrs	r2, r1
 800bd6a:	b2d2      	uxtb	r2, r2
 800bd6c:	701a      	strb	r2, [r3, #0]

}
 800bd6e:	370c      	adds	r7, #12
 800bd70:	46bd      	mov	sp, r7
 800bd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd76:	4770      	bx	lr
 800bd78:	40023c14 	.word	0x40023c14

0800bd7c <FLASH_OB_BORConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval None
  */
void FLASH_OB_BORConfig(uint8_t OB_BOR)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b083      	sub	sp, #12
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	4603      	mov	r3, r0
 800bd84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR(OB_BOR));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 800bd86:	4b0a      	ldr	r3, [pc, #40]	; (800bdb0 <FLASH_OB_BORConfig+0x34>)
 800bd88:	4a09      	ldr	r2, [pc, #36]	; (800bdb0 <FLASH_OB_BORConfig+0x34>)
 800bd8a:	7812      	ldrb	r2, [r2, #0]
 800bd8c:	b2d2      	uxtb	r2, r2
 800bd8e:	f022 020c 	bic.w	r2, r2, #12
 800bd92:	b2d2      	uxtb	r2, r2
 800bd94:	701a      	strb	r2, [r3, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOR;
 800bd96:	4b06      	ldr	r3, [pc, #24]	; (800bdb0 <FLASH_OB_BORConfig+0x34>)
 800bd98:	4a05      	ldr	r2, [pc, #20]	; (800bdb0 <FLASH_OB_BORConfig+0x34>)
 800bd9a:	7812      	ldrb	r2, [r2, #0]
 800bd9c:	b2d1      	uxtb	r1, r2
 800bd9e:	79fa      	ldrb	r2, [r7, #7]
 800bda0:	430a      	orrs	r2, r1
 800bda2:	b2d2      	uxtb	r2, r2
 800bda4:	701a      	strb	r2, [r3, #0]

}
 800bda6:	370c      	adds	r7, #12
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdae:	4770      	bx	lr
 800bdb0:	40023c14 	.word	0x40023c14

0800bdb4 <FLASH_OB_Launch>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_OB_Launch(void)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b082      	sub	sp, #8
 800bdb8:	af00      	add	r7, sp, #0
  FLASH_Status status = FLASH_COMPLETE;
 800bdba:	2309      	movs	r3, #9
 800bdbc:	71fb      	strb	r3, [r7, #7]

  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 800bdbe:	4b08      	ldr	r3, [pc, #32]	; (800bde0 <FLASH_OB_Launch+0x2c>)
 800bdc0:	4a07      	ldr	r2, [pc, #28]	; (800bde0 <FLASH_OB_Launch+0x2c>)
 800bdc2:	7812      	ldrb	r2, [r2, #0]
 800bdc4:	b2d2      	uxtb	r2, r2
 800bdc6:	f042 0202 	orr.w	r2, r2, #2
 800bdca:	b2d2      	uxtb	r2, r2
 800bdcc:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800bdce:	f000 f8f3 	bl	800bfb8 <FLASH_WaitForLastOperation>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	71fb      	strb	r3, [r7, #7]

  return status;
 800bdd6:	79fb      	ldrb	r3, [r7, #7]
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3708      	adds	r7, #8
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}
 800bde0:	40023c14 	.word	0x40023c14

0800bde4 <FLASH_OB_GetUser>:
  * @param  None
  * @retval The FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
uint8_t FLASH_OB_GetUser(void)
{
 800bde4:	b480      	push	{r7}
 800bde6:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return (uint8_t)(FLASH->OPTCR >> 5);
 800bde8:	4b04      	ldr	r3, [pc, #16]	; (800bdfc <FLASH_OB_GetUser+0x18>)
 800bdea:	695b      	ldr	r3, [r3, #20]
 800bdec:	095b      	lsrs	r3, r3, #5
 800bdee:	b2db      	uxtb	r3, r3
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf8:	4770      	bx	lr
 800bdfa:	bf00      	nop
 800bdfc:	40023c00 	.word	0x40023c00

0800be00 <FLASH_OB_GetWRP>:
  * @brief  Returns the FLASH Write Protection Option Bytes value.
  * @param  None
  * @retval The FLASH Write Protection  Option Bytes value
  */
uint16_t FLASH_OB_GetWRP(void)
{
 800be00:	b480      	push	{r7}
 800be02:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 800be04:	4b03      	ldr	r3, [pc, #12]	; (800be14 <FLASH_OB_GetWRP+0x14>)
 800be06:	881b      	ldrh	r3, [r3, #0]
 800be08:	b29b      	uxth	r3, r3
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	46bd      	mov	sp, r7
 800be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be12:	4770      	bx	lr
 800be14:	40023c16 	.word	0x40023c16

0800be18 <FLASH_OB_GetWRP1>:
  *   
  * @param  None
  * @retval The FLASH Write Protection  Option Bytes value
  */
uint16_t FLASH_OB_GetWRP1(void)
{
 800be18:	b480      	push	{r7}
 800be1a:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
 800be1c:	4b03      	ldr	r3, [pc, #12]	; (800be2c <FLASH_OB_GetWRP1+0x14>)
 800be1e:	881b      	ldrh	r3, [r3, #0]
 800be20:	b29b      	uxth	r3, r3
}
 800be22:	4618      	mov	r0, r3
 800be24:	46bd      	mov	sp, r7
 800be26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2a:	4770      	bx	lr
 800be2c:	40023c1a 	.word	0x40023c1a

0800be30 <FLASH_OB_GetPCROP>:
  *   
  * @param  None
  * @retval The FLASH PC Read/Write Protection Option Bytes value
  */
uint16_t FLASH_OB_GetPCROP(void)
{
 800be30:	b480      	push	{r7}
 800be32:	af00      	add	r7, sp, #0
  /* Return the FLASH PC Read/write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 800be34:	4b03      	ldr	r3, [pc, #12]	; (800be44 <FLASH_OB_GetPCROP+0x14>)
 800be36:	881b      	ldrh	r3, [r3, #0]
 800be38:	b29b      	uxth	r3, r3
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	46bd      	mov	sp, r7
 800be3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be42:	4770      	bx	lr
 800be44:	40023c16 	.word	0x40023c16

0800be48 <FLASH_OB_GetPCROP1>:
  *     
  * @param  None
  * @retval The FLASH PC Read/Write Protection Option Bytes value
  */
uint16_t FLASH_OB_GetPCROP1(void)
{
 800be48:	b480      	push	{r7}
 800be4a:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
 800be4c:	4b03      	ldr	r3, [pc, #12]	; (800be5c <FLASH_OB_GetPCROP1+0x14>)
 800be4e:	881b      	ldrh	r3, [r3, #0]
 800be50:	b29b      	uxth	r3, r3
}
 800be52:	4618      	mov	r0, r3
 800be54:	46bd      	mov	sp, r7
 800be56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5a:	4770      	bx	lr
 800be5c:	40023c1a 	.word	0x40023c1a

0800be60 <FLASH_OB_GetRDP>:
  * @retval FLASH ReadOut Protection Status:
  *           - SET, when OB_RDP_Level_1 or OB_RDP_Level_2 is set
  *           - RESET, when OB_RDP_Level_0 is set
  */
FlagStatus FLASH_OB_GetRDP(void)
{
 800be60:	b480      	push	{r7}
 800be62:	b083      	sub	sp, #12
 800be64:	af00      	add	r7, sp, #0
  FlagStatus readstatus = RESET;
 800be66:	2300      	movs	r3, #0
 800be68:	71fb      	strb	r3, [r7, #7]

  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) != (uint8_t)OB_RDP_Level_0))
 800be6a:	4b08      	ldr	r3, [pc, #32]	; (800be8c <FLASH_OB_GetRDP+0x2c>)
 800be6c:	781b      	ldrb	r3, [r3, #0]
 800be6e:	b2db      	uxtb	r3, r3
 800be70:	2baa      	cmp	r3, #170	; 0xaa
 800be72:	d002      	beq.n	800be7a <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = SET;
 800be74:	2301      	movs	r3, #1
 800be76:	71fb      	strb	r3, [r7, #7]
 800be78:	e001      	b.n	800be7e <FLASH_OB_GetRDP+0x1e>
  }
  else
  {
    readstatus = RESET;
 800be7a:	2300      	movs	r3, #0
 800be7c:	71fb      	strb	r3, [r7, #7]
  }
  return readstatus;
 800be7e:	79fb      	ldrb	r3, [r7, #7]
}
 800be80:	4618      	mov	r0, r3
 800be82:	370c      	adds	r7, #12
 800be84:	46bd      	mov	sp, r7
 800be86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8a:	4770      	bx	lr
 800be8c:	40023c15 	.word	0x40023c15

0800be90 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
uint8_t FLASH_OB_GetBOR(void)
{
 800be90:	b480      	push	{r7}
 800be92:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 800be94:	4b05      	ldr	r3, [pc, #20]	; (800beac <FLASH_OB_GetBOR+0x1c>)
 800be96:	781b      	ldrb	r3, [r3, #0]
 800be98:	b2db      	uxtb	r3, r3
 800be9a:	f003 030c 	and.w	r3, r3, #12
 800be9e:	b2db      	uxtb	r3, r3
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	46bd      	mov	sp, r7
 800bea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea8:	4770      	bx	lr
 800beaa:	bf00      	nop
 800beac:	40023c14 	.word	0x40023c14

0800beb0 <FLASH_ITConfig>:
  *            @arg FLASH_IT_ERR: FLASH Error Interrupt
  *            @arg FLASH_IT_EOP: FLASH end of operation Interrupt
  * @retval None 
  */
void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b083      	sub	sp, #12
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	460b      	mov	r3, r1
 800beba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
 800bebc:	78fb      	ldrb	r3, [r7, #3]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d006      	beq.n	800bed0 <FLASH_ITConfig+0x20>
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 800bec2:	4b09      	ldr	r3, [pc, #36]	; (800bee8 <FLASH_ITConfig+0x38>)
 800bec4:	4a08      	ldr	r2, [pc, #32]	; (800bee8 <FLASH_ITConfig+0x38>)
 800bec6:	6911      	ldr	r1, [r2, #16]
 800bec8:	687a      	ldr	r2, [r7, #4]
 800beca:	430a      	orrs	r2, r1
 800becc:	611a      	str	r2, [r3, #16]
 800bece:	e006      	b.n	800bede <FLASH_ITConfig+0x2e>
  }
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(uint32_t)FLASH_IT;
 800bed0:	4b05      	ldr	r3, [pc, #20]	; (800bee8 <FLASH_ITConfig+0x38>)
 800bed2:	4a05      	ldr	r2, [pc, #20]	; (800bee8 <FLASH_ITConfig+0x38>)
 800bed4:	6911      	ldr	r1, [r2, #16]
 800bed6:	687a      	ldr	r2, [r7, #4]
 800bed8:	43d2      	mvns	r2, r2
 800beda:	400a      	ands	r2, r1
 800bedc:	611a      	str	r2, [r3, #16]
  }
}
 800bede:	370c      	adds	r7, #12
 800bee0:	46bd      	mov	sp, r7
 800bee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee6:	4770      	bx	lr
 800bee8:	40023c00 	.word	0x40023c00

0800beec <FLASH_GetFlagStatus>:
  *            @arg FLASH_FLAG_RDERR: FLASH (PCROP) Read Protection error flag (STM32F42/43xxx and STM32F401xx devices) 
  *            @arg FLASH_FLAG_BSY: FLASH Busy flag
  * @retval The new state of FLASH_FLAG (SET or RESET).
  */
FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
{
 800beec:	b480      	push	{r7}
 800beee:	b085      	sub	sp, #20
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800bef4:	2300      	movs	r3, #0
 800bef6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));

  if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 800bef8:	4b08      	ldr	r3, [pc, #32]	; (800bf1c <FLASH_GetFlagStatus+0x30>)
 800befa:	68da      	ldr	r2, [r3, #12]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	4013      	ands	r3, r2
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d002      	beq.n	800bf0a <FLASH_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 800bf04:	2301      	movs	r3, #1
 800bf06:	73fb      	strb	r3, [r7, #15]
 800bf08:	e001      	b.n	800bf0e <FLASH_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus; 
 800bf0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	3714      	adds	r7, #20
 800bf14:	46bd      	mov	sp, r7
 800bf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1a:	4770      	bx	lr
 800bf1c:	40023c00 	.word	0x40023c00

0800bf20 <FLASH_ClearFlag>:
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
  *            @arg FLASH_FLAG_RDERR: FLASH Read Protection error flag (STM32F42/43xxx and STM32F401xx devices)   
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 800bf20:	b480      	push	{r7}
 800bf22:	b083      	sub	sp, #12
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 800bf28:	4b03      	ldr	r3, [pc, #12]	; (800bf38 <FLASH_ClearFlag+0x18>)
 800bf2a:	687a      	ldr	r2, [r7, #4]
 800bf2c:	60da      	str	r2, [r3, #12]
}
 800bf2e:	370c      	adds	r7, #12
 800bf30:	46bd      	mov	sp, r7
 800bf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf36:	4770      	bx	lr
 800bf38:	40023c00 	.word	0x40023c00

0800bf3c <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_RD, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_GetStatus(void)
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b083      	sub	sp, #12
 800bf40:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE;
 800bf42:	2309      	movs	r3, #9
 800bf44:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 800bf46:	4b1b      	ldr	r3, [pc, #108]	; (800bfb4 <FLASH_GetStatus+0x78>)
 800bf48:	68db      	ldr	r3, [r3, #12]
 800bf4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d002      	beq.n	800bf58 <FLASH_GetStatus+0x1c>
  {
    flashstatus = FLASH_BUSY;
 800bf52:	2301      	movs	r3, #1
 800bf54:	71fb      	strb	r3, [r7, #7]
 800bf56:	e025      	b.n	800bfa4 <FLASH_GetStatus+0x68>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 800bf58:	4b16      	ldr	r3, [pc, #88]	; (800bfb4 <FLASH_GetStatus+0x78>)
 800bf5a:	68db      	ldr	r3, [r3, #12]
 800bf5c:	f003 0310 	and.w	r3, r3, #16
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d002      	beq.n	800bf6a <FLASH_GetStatus+0x2e>
    { 
      flashstatus = FLASH_ERROR_WRP;
 800bf64:	2306      	movs	r3, #6
 800bf66:	71fb      	strb	r3, [r7, #7]
 800bf68:	e01c      	b.n	800bfa4 <FLASH_GetStatus+0x68>
    }
    else
    {
      if((FLASH->SR & FLASH_FLAG_RDERR) != (uint32_t)0x00)
 800bf6a:	4b12      	ldr	r3, [pc, #72]	; (800bfb4 <FLASH_GetStatus+0x78>)
 800bf6c:	68db      	ldr	r3, [r3, #12]
 800bf6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d002      	beq.n	800bf7c <FLASH_GetStatus+0x40>
      { 
        flashstatus = FLASH_ERROR_RD;
 800bf76:	2302      	movs	r3, #2
 800bf78:	71fb      	strb	r3, [r7, #7]
 800bf7a:	e013      	b.n	800bfa4 <FLASH_GetStatus+0x68>
      } 
      else 
      {
        if((FLASH->SR & (uint32_t)0xEF) != (uint32_t)0x00)
 800bf7c:	4b0d      	ldr	r3, [pc, #52]	; (800bfb4 <FLASH_GetStatus+0x78>)
 800bf7e:	68db      	ldr	r3, [r3, #12]
 800bf80:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d002      	beq.n	800bf8e <FLASH_GetStatus+0x52>
        {
          flashstatus = FLASH_ERROR_PROGRAM; 
 800bf88:	2307      	movs	r3, #7
 800bf8a:	71fb      	strb	r3, [r7, #7]
 800bf8c:	e00a      	b.n	800bfa4 <FLASH_GetStatus+0x68>
        }
        else
        {
          if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 800bf8e:	4b09      	ldr	r3, [pc, #36]	; (800bfb4 <FLASH_GetStatus+0x78>)
 800bf90:	68db      	ldr	r3, [r3, #12]
 800bf92:	f003 0302 	and.w	r3, r3, #2
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d002      	beq.n	800bfa0 <FLASH_GetStatus+0x64>
          {
            flashstatus = FLASH_ERROR_OPERATION;
 800bf9a:	2308      	movs	r3, #8
 800bf9c:	71fb      	strb	r3, [r7, #7]
 800bf9e:	e001      	b.n	800bfa4 <FLASH_GetStatus+0x68>
          }
          else
          {
            flashstatus = FLASH_COMPLETE;
 800bfa0:	2309      	movs	r3, #9
 800bfa2:	71fb      	strb	r3, [r7, #7]
        }
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
 800bfa4:	79fb      	ldrb	r3, [r7, #7]
}
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	370c      	adds	r7, #12
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb0:	4770      	bx	lr
 800bfb2:	bf00      	nop
 800bfb4:	40023c00 	.word	0x40023c00

0800bfb8 <FLASH_WaitForLastOperation>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_WaitForLastOperation(void)
{ 
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b082      	sub	sp, #8
 800bfbc:	af00      	add	r7, sp, #0
  __IO FLASH_Status status = FLASH_COMPLETE;
 800bfbe:	2309      	movs	r3, #9
 800bfc0:	71fb      	strb	r3, [r7, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 800bfc2:	f7ff ffbb 	bl	800bf3c <FLASH_GetStatus>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	71fb      	strb	r3, [r7, #7]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 800bfca:	e003      	b.n	800bfd4 <FLASH_WaitForLastOperation+0x1c>
  {
    status = FLASH_GetStatus();
 800bfcc:	f7ff ffb6 	bl	800bf3c <FLASH_GetStatus>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	71fb      	strb	r3, [r7, #7]
  status = FLASH_GetStatus();

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 800bfd4:	79fb      	ldrb	r3, [r7, #7]
 800bfd6:	b2db      	uxtb	r3, r3
 800bfd8:	2b01      	cmp	r3, #1
 800bfda:	d0f7      	beq.n	800bfcc <FLASH_WaitForLastOperation+0x14>
  {
    status = FLASH_GetStatus();
  }
  /* Return the operation status */
  return status;
 800bfdc:	79fb      	ldrb	r3, [r7, #7]
 800bfde:	b2db      	uxtb	r3, r3
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3708      	adds	r7, #8
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}

0800bfe8 <FMC_NORSRAMDeInit>:
  *            @arg FMC_Bank1_NORSRAM3: FMC Bank1 NOR/SRAM3 
  *            @arg FMC_Bank1_NORSRAM4: FMC Bank1 NOR/SRAM4 
  * @retval None
  */
void FMC_NORSRAMDeInit(uint32_t FMC_Bank)
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b083      	sub	sp, #12
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_NORSRAM_BANK(FMC_Bank));
  
  /* FMC_Bank1_NORSRAM1 */
  if(FMC_Bank == FMC_Bank1_NORSRAM1)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d107      	bne.n	800c006 <FMC_NORSRAMDeInit+0x1e>
  {
    FMC_Bank1->BTCR[FMC_Bank] = 0x000030DB;    
 800bff6:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800bffa:	687a      	ldr	r2, [r7, #4]
 800bffc:	f243 01db 	movw	r1, #12507	; 0x30db
 800c000:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c004:	e006      	b.n	800c014 <FMC_NORSRAMDeInit+0x2c>
  }
  /* FMC_Bank1_NORSRAM2,  FMC_Bank1_NORSRAM3 or FMC_Bank1_NORSRAM4 */
  else
  {   
    FMC_Bank1->BTCR[FMC_Bank] = 0x000030D2; 
 800c006:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800c00a:	687a      	ldr	r2, [r7, #4]
 800c00c:	f243 01d2 	movw	r1, #12498	; 0x30d2
 800c010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  FMC_Bank1->BTCR[FMC_Bank + 1] = 0x0FFFFFFF;
 800c014:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800c018:	687a      	ldr	r2, [r7, #4]
 800c01a:	3201      	adds	r2, #1
 800c01c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800c020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  FMC_Bank1E->BWTR[FMC_Bank] = 0x0FFFFFFF;  
 800c024:	4b05      	ldr	r3, [pc, #20]	; (800c03c <FMC_NORSRAMDeInit+0x54>)
 800c026:	687a      	ldr	r2, [r7, #4]
 800c028:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800c02c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800c030:	370c      	adds	r7, #12
 800c032:	46bd      	mov	sp, r7
 800c034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c038:	4770      	bx	lr
 800c03a:	bf00      	nop
 800c03c:	a0000104 	.word	0xa0000104

0800c040 <FMC_NORSRAMInit>:
  *         that contains the configuration information for the FMC NOR/SRAM 
  *         specified Banks.                       
  * @retval None
  */
void FMC_NORSRAMInit(FMC_NORSRAMInitTypeDef* FMC_NORSRAMInitStruct)
{
 800c040:	b480      	push	{r7}
 800c042:	b085      	sub	sp, #20
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
  uint32_t tmpr = 0;
 800c048:	2300      	movs	r3, #0
 800c04a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision));
  assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode)); 
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 800c04c:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800c050:	687a      	ldr	r2, [r7, #4]
 800c052:	6812      	ldr	r2, [r2, #0]
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
 800c054:	6879      	ldr	r1, [r7, #4]
 800c056:	6848      	ldr	r0, [r1, #4]
            FMC_NORSRAMInitStruct->FMC_MemoryType |
 800c058:	6879      	ldr	r1, [r7, #4]
 800c05a:	6889      	ldr	r1, [r1, #8]
  assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode)); 
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
 800c05c:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_MemoryType |
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
 800c05e:	6879      	ldr	r1, [r7, #4]
 800c060:	68c9      	ldr	r1, [r1, #12]
  assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode)); 
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
            FMC_NORSRAMInitStruct->FMC_MemoryType |
 800c062:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
 800c064:	6879      	ldr	r1, [r7, #4]
 800c066:	6909      	ldr	r1, [r1, #16]
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
            FMC_NORSRAMInitStruct->FMC_MemoryType |
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
 800c068:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
 800c06a:	6879      	ldr	r1, [r7, #4]
 800c06c:	6949      	ldr	r1, [r1, #20]
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
            FMC_NORSRAMInitStruct->FMC_MemoryType |
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
 800c06e:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
 800c070:	6879      	ldr	r1, [r7, #4]
 800c072:	6989      	ldr	r1, [r1, #24]
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
            FMC_NORSRAMInitStruct->FMC_MemoryType |
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
 800c074:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
 800c076:	6879      	ldr	r1, [r7, #4]
 800c078:	69c9      	ldr	r1, [r1, #28]
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
            FMC_NORSRAMInitStruct->FMC_MemoryType |
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
 800c07a:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
 800c07c:	6879      	ldr	r1, [r7, #4]
 800c07e:	6a09      	ldr	r1, [r1, #32]
            FMC_NORSRAMInitStruct->FMC_MemoryType |
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
 800c080:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
 800c082:	6879      	ldr	r1, [r7, #4]
 800c084:	6a49      	ldr	r1, [r1, #36]	; 0x24
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
 800c086:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
 800c088:	6879      	ldr	r1, [r7, #4]
 800c08a:	6a89      	ldr	r1, [r1, #40]	; 0x28
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
 800c08c:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
 800c08e:	6879      	ldr	r1, [r7, #4]
 800c090:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
 800c092:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
            FMC_NORSRAMInitStruct->FMC_WriteBurst |
 800c094:	6879      	ldr	r1, [r7, #4]
 800c096:	6b09      	ldr	r1, [r1, #48]	; 0x30
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
 800c098:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_WriteBurst |
            FMC_NORSRAMInitStruct->FMC_ContinousClock;
 800c09a:	6879      	ldr	r1, [r7, #4]
 800c09c:	6b49      	ldr	r1, [r1, #52]	; 0x34
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
            FMC_NORSRAMInitStruct->FMC_WriteBurst |
 800c09e:	4301      	orrs	r1, r0
  assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision));
  assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode)); 
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 800c0a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
            FMC_NORSRAMInitStruct->FMC_WriteBurst |
            FMC_NORSRAMInitStruct->FMC_ContinousClock;

            
  if(FMC_NORSRAMInitStruct->FMC_MemoryType == FMC_MemoryType_NOR)
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	689b      	ldr	r3, [r3, #8]
 800c0a8:	2b08      	cmp	r3, #8
 800c0aa:	d10d      	bne.n	800c0c8 <FMC_NORSRAMInit+0x88>
  {
    FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
 800c0ac:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800c0b0:	687a      	ldr	r2, [r7, #4]
 800c0b2:	6812      	ldr	r2, [r2, #0]
 800c0b4:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	6800      	ldr	r0, [r0, #0]
 800c0bc:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800c0c0:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800c0c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Configure Continuous clock feature when bank2..4 is used */
  if((FMC_NORSRAMInitStruct->FMC_ContinousClock == FMC_CClock_SyncAsync) && (FMC_NORSRAMInitStruct->FMC_Bank != FMC_Bank1_NORSRAM1))
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c0d0:	d124      	bne.n	800c11c <FMC_NORSRAMInit+0xdc>
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d020      	beq.n	800c11c <FMC_NORSRAMInit+0xdc>
  {
    tmpr = (uint32_t)((FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1]) & ~(((uint32_t)0x0F) << 20));    
 800c0da:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c0e4:	60fb      	str	r3, [r7, #12]
    
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_NORSRAMInitStruct->FMC_ContinousClock;
 800c0e6:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800c0ea:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800c0ee:	6811      	ldr	r1, [r2, #0]
 800c0f0:	687a      	ldr	r2, [r7, #4]
 800c0f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c0f4:	430a      	orrs	r2, r1
 800c0f6:	601a      	str	r2, [r3, #0]
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_BurstAccessMode_Enable;
 800c0f8:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800c0fc:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800c100:	6812      	ldr	r2, [r2, #0]
 800c102:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c106:	601a      	str	r2, [r3, #0]
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1] = (uint32_t)(tmpr | (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision)-1) << 20));
 800c108:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800c10c:	687a      	ldr	r2, [r7, #4]
 800c10e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c110:	6912      	ldr	r2, [r2, #16]
 800c112:	3a01      	subs	r2, #1
 800c114:	0511      	lsls	r1, r2, #20
 800c116:	68fa      	ldr	r2, [r7, #12]
 800c118:	430a      	orrs	r2, r1
 800c11a:	605a      	str	r2, [r3, #4]
  }
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
 800c11c:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800c120:	687a      	ldr	r2, [r7, #4]
 800c122:	6812      	ldr	r2, [r2, #0]
 800c124:	3201      	adds	r2, #1
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
 800c126:	6879      	ldr	r1, [r7, #4]
 800c128:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800c12a:	6808      	ldr	r0, [r1, #0]
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
 800c12c:	6879      	ldr	r1, [r7, #4]
 800c12e:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800c130:	6849      	ldr	r1, [r1, #4]
 800c132:	0109      	lsls	r1, r1, #4
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1] = (uint32_t)(tmpr | (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision)-1) << 20));
  }
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
 800c134:	4308      	orrs	r0, r1
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
 800c136:	6879      	ldr	r1, [r7, #4]
 800c138:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800c13a:	6889      	ldr	r1, [r1, #8]
 800c13c:	0209      	lsls	r1, r1, #8
  }
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
 800c13e:	4308      	orrs	r0, r1
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
 800c140:	6879      	ldr	r1, [r7, #4]
 800c142:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800c144:	68c9      	ldr	r1, [r1, #12]
 800c146:	0409      	lsls	r1, r1, #16
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
 800c148:	4308      	orrs	r0, r1
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
 800c14a:	6879      	ldr	r1, [r7, #4]
 800c14c:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800c14e:	6909      	ldr	r1, [r1, #16]
 800c150:	0509      	lsls	r1, r1, #20
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
 800c152:	4308      	orrs	r0, r1
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency) << 24) |
 800c154:	6879      	ldr	r1, [r7, #4]
 800c156:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800c158:	6949      	ldr	r1, [r1, #20]
 800c15a:	0609      	lsls	r1, r1, #24
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
 800c15c:	4308      	orrs	r0, r1
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency) << 24) |
             FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode;
 800c15e:	6879      	ldr	r1, [r7, #4]
 800c160:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800c162:	6989      	ldr	r1, [r1, #24]
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency) << 24) |
 800c164:	4301      	orrs	r1, r0
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_BurstAccessMode_Enable;
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1] = (uint32_t)(tmpr | (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision)-1) << 20));
  }
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
 800c166:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency) << 24) |
             FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode;
     
  /* NOR/SRAM Bank timing register for write configuration, if extended mode is used */
  if(FMC_NORSRAMInitStruct->FMC_ExtendedMode == FMC_ExtendedMode_Enable)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c16e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c172:	d120      	bne.n	800c1b6 <FMC_NORSRAMInit+0x176>
    assert_param(IS_FMC_DATASETUP_TIME(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime));
    assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision));
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 800c174:	4b16      	ldr	r3, [pc, #88]	; (800c1d0 <FMC_NORSRAMInit+0x190>)
 800c176:	687a      	ldr	r2, [r7, #4]
 800c178:	6812      	ldr	r2, [r2, #0]
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
 800c17a:	6879      	ldr	r1, [r7, #4]
 800c17c:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800c17e:	6808      	ldr	r0, [r1, #0]
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
 800c180:	6879      	ldr	r1, [r7, #4]
 800c182:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800c184:	6849      	ldr	r1, [r1, #4]
 800c186:	0109      	lsls	r1, r1, #4
    assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision));
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
 800c188:	4308      	orrs	r0, r1
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
 800c18a:	6879      	ldr	r1, [r7, #4]
 800c18c:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800c18e:	6889      	ldr	r1, [r1, #8]
 800c190:	0209      	lsls	r1, r1, #8
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
 800c192:	4308      	orrs	r0, r1
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision) << 20) |
 800c194:	6879      	ldr	r1, [r7, #4]
 800c196:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800c198:	6909      	ldr	r1, [r1, #16]
 800c19a:	0509      	lsls	r1, r1, #20
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
 800c19c:	4308      	orrs	r0, r1
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision) << 20) |
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency) << 24) |
 800c19e:	6879      	ldr	r1, [r7, #4]
 800c1a0:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800c1a2:	6949      	ldr	r1, [r1, #20]
 800c1a4:	0609      	lsls	r1, r1, #24
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision) << 20) |
 800c1a6:	4308      	orrs	r0, r1
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency) << 24) |
               FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode;
 800c1a8:	6879      	ldr	r1, [r7, #4]
 800c1aa:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800c1ac:	6989      	ldr	r1, [r1, #24]
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision) << 20) |
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency) << 24) |
 800c1ae:	4301      	orrs	r1, r0
    assert_param(IS_FMC_DATASETUP_TIME(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime));
    assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision));
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 800c1b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c1b4:	e006      	b.n	800c1c4 <FMC_NORSRAMInit+0x184>
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency) << 24) |
               FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode;
  }
  else
  {
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] = 0x0FFFFFFF;
 800c1b6:	4b06      	ldr	r3, [pc, #24]	; (800c1d0 <FMC_NORSRAMInit+0x190>)
 800c1b8:	687a      	ldr	r2, [r7, #4]
 800c1ba:	6812      	ldr	r2, [r2, #0]
 800c1bc:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800c1c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  
}
 800c1c4:	3714      	adds	r7, #20
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1cc:	4770      	bx	lr
 800c1ce:	bf00      	nop
 800c1d0:	a0000104 	.word	0xa0000104

0800c1d4 <FMC_NORSRAMStructInit>:
  * @param  FMC_NORSRAMInitStruct: pointer to a FMC_NORSRAMInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void FMC_NORSRAMStructInit(FMC_NORSRAMInitTypeDef* FMC_NORSRAMInitStruct)
{  
 800c1d4:	b480      	push	{r7}
 800c1d6:	b083      	sub	sp, #12
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
  /* Reset NOR/SRAM Init structure parameters values */
  FMC_NORSRAMInitStruct->FMC_Bank = FMC_Bank1_NORSRAM1;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	601a      	str	r2, [r3, #0]
  FMC_NORSRAMInitStruct->FMC_DataAddressMux = FMC_DataAddressMux_Enable;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2202      	movs	r2, #2
 800c1e6:	605a      	str	r2, [r3, #4]
  FMC_NORSRAMInitStruct->FMC_MemoryType = FMC_MemoryType_SRAM;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	609a      	str	r2, [r3, #8]
  FMC_NORSRAMInitStruct->FMC_MemoryDataWidth = FMC_NORSRAM_MemoryDataWidth_16b;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2210      	movs	r2, #16
 800c1f2:	60da      	str	r2, [r3, #12]
  FMC_NORSRAMInitStruct->FMC_BurstAccessMode = FMC_BurstAccessMode_Disable;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	611a      	str	r2, [r3, #16]
  FMC_NORSRAMInitStruct->FMC_AsynchronousWait = FMC_AsynchronousWait_Disable;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	62da      	str	r2, [r3, #44]	; 0x2c
  FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity = FMC_WaitSignalPolarity_Low;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2200      	movs	r2, #0
 800c204:	615a      	str	r2, [r3, #20]
  FMC_NORSRAMInitStruct->FMC_WrapMode = FMC_WrapMode_Disable;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2200      	movs	r2, #0
 800c20a:	619a      	str	r2, [r3, #24]
  FMC_NORSRAMInitStruct->FMC_WaitSignalActive = FMC_WaitSignalActive_BeforeWaitState;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2200      	movs	r2, #0
 800c210:	61da      	str	r2, [r3, #28]
  FMC_NORSRAMInitStruct->FMC_WriteOperation = FMC_WriteOperation_Enable;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c218:	621a      	str	r2, [r3, #32]
  FMC_NORSRAMInitStruct->FMC_WaitSignal = FMC_WaitSignal_Enable;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c220:	625a      	str	r2, [r3, #36]	; 0x24
  FMC_NORSRAMInitStruct->FMC_ExtendedMode = FMC_ExtendedMode_Disable;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2200      	movs	r2, #0
 800c226:	629a      	str	r2, [r3, #40]	; 0x28
  FMC_NORSRAMInitStruct->FMC_WriteBurst = FMC_WriteBurst_Disable;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2200      	movs	r2, #0
 800c22c:	631a      	str	r2, [r3, #48]	; 0x30
  FMC_NORSRAMInitStruct->FMC_ContinousClock = FMC_CClock_SyncOnly;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2200      	movs	r2, #0
 800c232:	635a      	str	r2, [r3, #52]	; 0x34
  
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime = 15;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c238:	220f      	movs	r2, #15
 800c23a:	601a      	str	r2, [r3, #0]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime = 15;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c240:	220f      	movs	r2, #15
 800c242:	605a      	str	r2, [r3, #4]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime = 255;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c248:	22ff      	movs	r2, #255	; 0xff
 800c24a:	609a      	str	r2, [r3, #8]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration = 15;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c250:	220f      	movs	r2, #15
 800c252:	60da      	str	r2, [r3, #12]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision = 15;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c258:	220f      	movs	r2, #15
 800c25a:	611a      	str	r2, [r3, #16]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency = 15;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c260:	220f      	movs	r2, #15
 800c262:	615a      	str	r2, [r3, #20]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode = FMC_AccessMode_A; 
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c268:	2200      	movs	r2, #0
 800c26a:	619a      	str	r2, [r3, #24]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime = 15;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c270:	220f      	movs	r2, #15
 800c272:	601a      	str	r2, [r3, #0]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime = 15;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c278:	220f      	movs	r2, #15
 800c27a:	605a      	str	r2, [r3, #4]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime = 255;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c280:	22ff      	movs	r2, #255	; 0xff
 800c282:	609a      	str	r2, [r3, #8]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_BusTurnAroundDuration = 15;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c288:	220f      	movs	r2, #15
 800c28a:	60da      	str	r2, [r3, #12]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision = 15;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c290:	220f      	movs	r2, #15
 800c292:	611a      	str	r2, [r3, #16]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency = 15;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c298:	220f      	movs	r2, #15
 800c29a:	615a      	str	r2, [r3, #20]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode = FMC_AccessMode_A;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	619a      	str	r2, [r3, #24]
}
 800c2a4:	370c      	adds	r7, #12
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ac:	4770      	bx	lr
 800c2ae:	bf00      	nop

0800c2b0 <FMC_NORSRAMCmd>:
  *            @arg FMC_Bank1_NORSRAM4: FMC Bank1 NOR/SRAM4 
  * @param  NewState: new state of the FMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_NORSRAMCmd(uint32_t FMC_Bank, FunctionalState NewState)
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b083      	sub	sp, #12
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FMC_NORSRAM_BANK(FMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800c2bc:	78fb      	ldrb	r3, [r7, #3]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d00c      	beq.n	800c2dc <FMC_NORSRAMCmd+0x2c>
  {
    /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
    FMC_Bank1->BTCR[FMC_Bank] |= BCR_MBKEN_SET;
 800c2c2:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800c2c6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800c2ca:	6879      	ldr	r1, [r7, #4]
 800c2cc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c2d0:	f042 0101 	orr.w	r1, r2, #1
 800c2d4:	687a      	ldr	r2, [r7, #4]
 800c2d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c2da:	e00b      	b.n	800c2f4 <FMC_NORSRAMCmd+0x44>
  }
  else
  {
    /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
    FMC_Bank1->BTCR[FMC_Bank] &= BCR_MBKEN_RESET;
 800c2dc:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800c2e0:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800c2e4:	6879      	ldr	r1, [r7, #4]
 800c2e6:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800c2ea:	4b05      	ldr	r3, [pc, #20]	; (800c300 <FMC_NORSRAMCmd+0x50>)
 800c2ec:	400b      	ands	r3, r1
 800c2ee:	6879      	ldr	r1, [r7, #4]
 800c2f0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  }
}
 800c2f4:	370c      	adds	r7, #12
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fc:	4770      	bx	lr
 800c2fe:	bf00      	nop
 800c300:	000ffffe 	.word	0x000ffffe

0800c304 <FMC_NANDDeInit>:
  *            @arg FMC_Bank2_NAND: FMC Bank2 NAND 
  *            @arg FMC_Bank3_NAND: FMC Bank3 NAND 
  * @retval None
  */
void FMC_NANDDeInit(uint32_t FMC_Bank)
{
 800c304:	b480      	push	{r7}
 800c306:	b083      	sub	sp, #12
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_NAND_BANK(FMC_Bank));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2b10      	cmp	r3, #16
 800c310:	d10e      	bne.n	800c330 <FMC_NANDDeInit+0x2c>
  {
    /* Set the FMC_Bank2 registers to their reset values */
    FMC_Bank2->PCR2 = 0x00000018;
 800c312:	4b11      	ldr	r3, [pc, #68]	; (800c358 <FMC_NANDDeInit+0x54>)
 800c314:	2218      	movs	r2, #24
 800c316:	601a      	str	r2, [r3, #0]
    FMC_Bank2->SR2 = 0x00000040;
 800c318:	4b0f      	ldr	r3, [pc, #60]	; (800c358 <FMC_NANDDeInit+0x54>)
 800c31a:	2240      	movs	r2, #64	; 0x40
 800c31c:	605a      	str	r2, [r3, #4]
    FMC_Bank2->PMEM2 = 0xFCFCFCFC;
 800c31e:	4b0e      	ldr	r3, [pc, #56]	; (800c358 <FMC_NANDDeInit+0x54>)
 800c320:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800c324:	609a      	str	r2, [r3, #8]
    FMC_Bank2->PATT2 = 0xFCFCFCFC;  
 800c326:	4b0c      	ldr	r3, [pc, #48]	; (800c358 <FMC_NANDDeInit+0x54>)
 800c328:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800c32c:	60da      	str	r2, [r3, #12]
 800c32e:	e00d      	b.n	800c34c <FMC_NANDDeInit+0x48>
  }
  /* FMC_Bank3_NAND */  
  else
  {
    /* Set the FMC_Bank3 registers to their reset values */
    FMC_Bank3->PCR3 = 0x00000018;
 800c330:	4b0a      	ldr	r3, [pc, #40]	; (800c35c <FMC_NANDDeInit+0x58>)
 800c332:	2218      	movs	r2, #24
 800c334:	601a      	str	r2, [r3, #0]
    FMC_Bank3->SR3 = 0x00000040;
 800c336:	4b09      	ldr	r3, [pc, #36]	; (800c35c <FMC_NANDDeInit+0x58>)
 800c338:	2240      	movs	r2, #64	; 0x40
 800c33a:	605a      	str	r2, [r3, #4]
    FMC_Bank3->PMEM3 = 0xFCFCFCFC;
 800c33c:	4b07      	ldr	r3, [pc, #28]	; (800c35c <FMC_NANDDeInit+0x58>)
 800c33e:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800c342:	609a      	str	r2, [r3, #8]
    FMC_Bank3->PATT3 = 0xFCFCFCFC; 
 800c344:	4b05      	ldr	r3, [pc, #20]	; (800c35c <FMC_NANDDeInit+0x58>)
 800c346:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800c34a:	60da      	str	r2, [r3, #12]
  }  
}
 800c34c:	370c      	adds	r7, #12
 800c34e:	46bd      	mov	sp, r7
 800c350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c354:	4770      	bx	lr
 800c356:	bf00      	nop
 800c358:	a0000060 	.word	0xa0000060
 800c35c:	a0000080 	.word	0xa0000080

0800c360 <FMC_NANDInit>:
  * @param  FMC_NANDInitStruct : pointer to a FMC_NANDInitTypeDef structure that
  *         contains the configuration information for the FMC NAND specified Banks.                       
  * @retval None
  */
void FMC_NANDInit(FMC_NANDInitTypeDef* FMC_NANDInitStruct)
{
 800c360:	b480      	push	{r7}
 800c362:	b087      	sub	sp, #28
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  uint32_t tmppcr = 0x00000000, tmppmem = 0x00000000, tmppatt = 0x00000000; 
 800c368:	2300      	movs	r3, #0
 800c36a:	617b      	str	r3, [r7, #20]
 800c36c:	2300      	movs	r3, #0
 800c36e:	613b      	str	r3, [r7, #16]
 800c370:	2300      	movs	r3, #0
 800c372:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FMC_WAIT_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	685a      	ldr	r2, [r3, #4]
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	689b      	ldr	r3, [r3, #8]
  assert_param(IS_FMC_HOLD_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
 800c37c:	431a      	orrs	r2, r3
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
            FMC_NANDInitStruct->FMC_ECC |
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	68db      	ldr	r3, [r3, #12]
  assert_param(IS_FMC_HIZ_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
 800c382:	431a      	orrs	r2, r3
            FMC_NANDInitStruct->FMC_ECC |
            FMC_NANDInitStruct->FMC_ECCPageSize |
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	691b      	ldr	r3, [r3, #16]
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
            FMC_NANDInitStruct->FMC_ECC |
 800c388:	431a      	orrs	r2, r3
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	695b      	ldr	r3, [r3, #20]
 800c38e:	025b      	lsls	r3, r3, #9
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
            FMC_NANDInitStruct->FMC_ECC |
            FMC_NANDInitStruct->FMC_ECCPageSize |
 800c390:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	699b      	ldr	r3, [r3, #24]
 800c396:	035b      	lsls	r3, r3, #13
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
            FMC_NANDInitStruct->FMC_ECC |
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
 800c398:	4313      	orrs	r3, r2
  assert_param(IS_FMC_WAIT_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
 800c39a:	f043 0308 	orr.w	r3, r3, #8
 800c39e:	617b      	str	r3, [r7, #20]
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	69db      	ldr	r3, [r3, #28]
 800c3a4:	681a      	ldr	r2, [r3, #0]
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	69db      	ldr	r3, [r3, #28]
 800c3aa:	685b      	ldr	r3, [r3, #4]
 800c3ac:	021b      	lsls	r3, r3, #8
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 800c3ae:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	69db      	ldr	r3, [r3, #28]
 800c3b4:	689b      	ldr	r3, [r3, #8]
 800c3b6:	041b      	lsls	r3, r3, #16
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800c3b8:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	69db      	ldr	r3, [r3, #28]
 800c3be:	68db      	ldr	r3, [r3, #12]
 800c3c0:	061b      	lsls	r3, r3, #24
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 800c3c2:	4313      	orrs	r3, r2
 800c3c4:	613b      	str	r3, [r7, #16]
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6a1b      	ldr	r3, [r3, #32]
 800c3ca:	681a      	ldr	r2, [r3, #0]
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	6a1b      	ldr	r3, [r3, #32]
 800c3d0:	685b      	ldr	r3, [r3, #4]
 800c3d2:	021b      	lsls	r3, r3, #8
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 800c3d4:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6a1b      	ldr	r3, [r3, #32]
 800c3da:	689b      	ldr	r3, [r3, #8]
 800c3dc:	041b      	lsls	r3, r3, #16
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800c3de:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	6a1b      	ldr	r3, [r3, #32]
 800c3e4:	68db      	ldr	r3, [r3, #12]
 800c3e6:	061b      	lsls	r3, r3, #24
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 800c3e8:	4313      	orrs	r3, r2
 800c3ea:	60fb      	str	r3, [r7, #12]
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);
  
  if(FMC_NANDInitStruct->FMC_Bank == FMC_Bank2_NAND)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	2b10      	cmp	r3, #16
 800c3f2:	d109      	bne.n	800c408 <FMC_NANDInit+0xa8>
  {
    /* FMC_Bank2_NAND registers configuration */
    FMC_Bank2->PCR2 = tmppcr;
 800c3f4:	4b0b      	ldr	r3, [pc, #44]	; (800c424 <FMC_NANDInit+0xc4>)
 800c3f6:	697a      	ldr	r2, [r7, #20]
 800c3f8:	601a      	str	r2, [r3, #0]
    FMC_Bank2->PMEM2 = tmppmem;
 800c3fa:	4b0a      	ldr	r3, [pc, #40]	; (800c424 <FMC_NANDInit+0xc4>)
 800c3fc:	693a      	ldr	r2, [r7, #16]
 800c3fe:	609a      	str	r2, [r3, #8]
    FMC_Bank2->PATT2 = tmppatt;
 800c400:	4b08      	ldr	r3, [pc, #32]	; (800c424 <FMC_NANDInit+0xc4>)
 800c402:	68fa      	ldr	r2, [r7, #12]
 800c404:	60da      	str	r2, [r3, #12]
 800c406:	e008      	b.n	800c41a <FMC_NANDInit+0xba>
  }
  else
  {
    /* FMC_Bank3_NAND registers configuration */
    FMC_Bank3->PCR3 = tmppcr;
 800c408:	4b07      	ldr	r3, [pc, #28]	; (800c428 <FMC_NANDInit+0xc8>)
 800c40a:	697a      	ldr	r2, [r7, #20]
 800c40c:	601a      	str	r2, [r3, #0]
    FMC_Bank3->PMEM3 = tmppmem;
 800c40e:	4b06      	ldr	r3, [pc, #24]	; (800c428 <FMC_NANDInit+0xc8>)
 800c410:	693a      	ldr	r2, [r7, #16]
 800c412:	609a      	str	r2, [r3, #8]
    FMC_Bank3->PATT3 = tmppatt;
 800c414:	4b04      	ldr	r3, [pc, #16]	; (800c428 <FMC_NANDInit+0xc8>)
 800c416:	68fa      	ldr	r2, [r7, #12]
 800c418:	60da      	str	r2, [r3, #12]
  }
}
 800c41a:	371c      	adds	r7, #28
 800c41c:	46bd      	mov	sp, r7
 800c41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c422:	4770      	bx	lr
 800c424:	a0000060 	.word	0xa0000060
 800c428:	a0000080 	.word	0xa0000080

0800c42c <FMC_NANDStructInit>:
  * @param  FMC_NANDInitStruct: pointer to a FMC_NANDInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void FMC_NANDStructInit(FMC_NANDInitTypeDef* FMC_NANDInitStruct)
{ 
 800c42c:	b480      	push	{r7}
 800c42e:	b083      	sub	sp, #12
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
  /* Reset NAND Init structure parameters values */
  FMC_NANDInitStruct->FMC_Bank = FMC_Bank2_NAND;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2210      	movs	r2, #16
 800c438:	601a      	str	r2, [r3, #0]
  FMC_NANDInitStruct->FMC_Waitfeature = FMC_Waitfeature_Disable;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2200      	movs	r2, #0
 800c43e:	605a      	str	r2, [r3, #4]
  FMC_NANDInitStruct->FMC_MemoryDataWidth = FMC_NAND_MemoryDataWidth_16b;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2210      	movs	r2, #16
 800c444:	609a      	str	r2, [r3, #8]
  FMC_NANDInitStruct->FMC_ECC = FMC_ECC_Disable;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2200      	movs	r2, #0
 800c44a:	60da      	str	r2, [r3, #12]
  FMC_NANDInitStruct->FMC_ECCPageSize = FMC_ECCPageSize_256Bytes;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2200      	movs	r2, #0
 800c450:	611a      	str	r2, [r3, #16]
  FMC_NANDInitStruct->FMC_TCLRSetupTime = 0x0;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	2200      	movs	r2, #0
 800c456:	615a      	str	r2, [r3, #20]
  FMC_NANDInitStruct->FMC_TARSetupTime = 0x0;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2200      	movs	r2, #0
 800c45c:	619a      	str	r2, [r3, #24]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime = 252;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	69db      	ldr	r3, [r3, #28]
 800c462:	22fc      	movs	r2, #252	; 0xfc
 800c464:	601a      	str	r2, [r3, #0]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime = 252;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	69db      	ldr	r3, [r3, #28]
 800c46a:	22fc      	movs	r2, #252	; 0xfc
 800c46c:	605a      	str	r2, [r3, #4]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime = 252;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	69db      	ldr	r3, [r3, #28]
 800c472:	22fc      	movs	r2, #252	; 0xfc
 800c474:	609a      	str	r2, [r3, #8]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime = 252;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	69db      	ldr	r3, [r3, #28]
 800c47a:	22fc      	movs	r2, #252	; 0xfc
 800c47c:	60da      	str	r2, [r3, #12]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime = 252;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	6a1b      	ldr	r3, [r3, #32]
 800c482:	22fc      	movs	r2, #252	; 0xfc
 800c484:	601a      	str	r2, [r3, #0]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime = 252;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6a1b      	ldr	r3, [r3, #32]
 800c48a:	22fc      	movs	r2, #252	; 0xfc
 800c48c:	605a      	str	r2, [r3, #4]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime = 252;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6a1b      	ldr	r3, [r3, #32]
 800c492:	22fc      	movs	r2, #252	; 0xfc
 800c494:	609a      	str	r2, [r3, #8]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime = 252;	  
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6a1b      	ldr	r3, [r3, #32]
 800c49a:	22fc      	movs	r2, #252	; 0xfc
 800c49c:	60da      	str	r2, [r3, #12]
}
 800c49e:	370c      	adds	r7, #12
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a6:	4770      	bx	lr

0800c4a8 <FMC_NANDCmd>:
  *            @arg FMC_Bank3_NAND: FMC Bank3 NAND
  * @param  NewState: new state of the FMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_NANDCmd(uint32_t FMC_Bank, FunctionalState NewState)
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b083      	sub	sp, #12
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
 800c4b0:	460b      	mov	r3, r1
 800c4b2:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FMC_NAND_BANK(FMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800c4b4:	78fb      	ldrb	r3, [r7, #3]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d010      	beq.n	800c4dc <FMC_NANDCmd+0x34>
  {
    /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
    if(FMC_Bank == FMC_Bank2_NAND)
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2b10      	cmp	r3, #16
 800c4be:	d106      	bne.n	800c4ce <FMC_NANDCmd+0x26>
    {
      FMC_Bank2->PCR2 |= PCR_PBKEN_SET;
 800c4c0:	4b11      	ldr	r3, [pc, #68]	; (800c508 <FMC_NANDCmd+0x60>)
 800c4c2:	4a11      	ldr	r2, [pc, #68]	; (800c508 <FMC_NANDCmd+0x60>)
 800c4c4:	6812      	ldr	r2, [r2, #0]
 800c4c6:	f042 0204 	orr.w	r2, r2, #4
 800c4ca:	601a      	str	r2, [r3, #0]
 800c4cc:	e016      	b.n	800c4fc <FMC_NANDCmd+0x54>
    }
    else
    {
      FMC_Bank3->PCR3 |= PCR_PBKEN_SET;
 800c4ce:	4b0f      	ldr	r3, [pc, #60]	; (800c50c <FMC_NANDCmd+0x64>)
 800c4d0:	4a0e      	ldr	r2, [pc, #56]	; (800c50c <FMC_NANDCmd+0x64>)
 800c4d2:	6812      	ldr	r2, [r2, #0]
 800c4d4:	f042 0204 	orr.w	r2, r2, #4
 800c4d8:	601a      	str	r2, [r3, #0]
 800c4da:	e00f      	b.n	800c4fc <FMC_NANDCmd+0x54>
    }
  }
  else
  {
    /* Disable the selected NAND Bank by clearing the PBKEN bit in the PCRx register */
    if(FMC_Bank == FMC_Bank2_NAND)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2b10      	cmp	r3, #16
 800c4e0:	d106      	bne.n	800c4f0 <FMC_NANDCmd+0x48>
    {
      FMC_Bank2->PCR2 &= PCR_PBKEN_RESET;
 800c4e2:	4a09      	ldr	r2, [pc, #36]	; (800c508 <FMC_NANDCmd+0x60>)
 800c4e4:	4b08      	ldr	r3, [pc, #32]	; (800c508 <FMC_NANDCmd+0x60>)
 800c4e6:	6819      	ldr	r1, [r3, #0]
 800c4e8:	4b09      	ldr	r3, [pc, #36]	; (800c510 <FMC_NANDCmd+0x68>)
 800c4ea:	400b      	ands	r3, r1
 800c4ec:	6013      	str	r3, [r2, #0]
 800c4ee:	e005      	b.n	800c4fc <FMC_NANDCmd+0x54>
    }
    else
    {
      FMC_Bank3->PCR3 &= PCR_PBKEN_RESET;
 800c4f0:	4a06      	ldr	r2, [pc, #24]	; (800c50c <FMC_NANDCmd+0x64>)
 800c4f2:	4b06      	ldr	r3, [pc, #24]	; (800c50c <FMC_NANDCmd+0x64>)
 800c4f4:	6819      	ldr	r1, [r3, #0]
 800c4f6:	4b06      	ldr	r3, [pc, #24]	; (800c510 <FMC_NANDCmd+0x68>)
 800c4f8:	400b      	ands	r3, r1
 800c4fa:	6013      	str	r3, [r2, #0]
    }
  }
}
 800c4fc:	370c      	adds	r7, #12
 800c4fe:	46bd      	mov	sp, r7
 800c500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c504:	4770      	bx	lr
 800c506:	bf00      	nop
 800c508:	a0000060 	.word	0xa0000060
 800c50c:	a0000080 	.word	0xa0000080
 800c510:	000ffffb 	.word	0x000ffffb

0800c514 <FMC_NANDECCCmd>:
  * @param  NewState: new state of the FMC NAND ECC feature.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_NANDECCCmd(uint32_t FMC_Bank, FunctionalState NewState)
{
 800c514:	b480      	push	{r7}
 800c516:	b083      	sub	sp, #12
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
 800c51c:	460b      	mov	r3, r1
 800c51e:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FMC_NAND_BANK(FMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800c520:	78fb      	ldrb	r3, [r7, #3]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d010      	beq.n	800c548 <FMC_NANDECCCmd+0x34>
  {
    /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
    if(FMC_Bank == FMC_Bank2_NAND)
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2b10      	cmp	r3, #16
 800c52a:	d106      	bne.n	800c53a <FMC_NANDECCCmd+0x26>
    {
      FMC_Bank2->PCR2 |= PCR_ECCEN_SET;
 800c52c:	4b11      	ldr	r3, [pc, #68]	; (800c574 <FMC_NANDECCCmd+0x60>)
 800c52e:	4a11      	ldr	r2, [pc, #68]	; (800c574 <FMC_NANDECCCmd+0x60>)
 800c530:	6812      	ldr	r2, [r2, #0]
 800c532:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c536:	601a      	str	r2, [r3, #0]
 800c538:	e016      	b.n	800c568 <FMC_NANDECCCmd+0x54>
    }
    else
    {
      FMC_Bank3->PCR3 |= PCR_ECCEN_SET;
 800c53a:	4b0f      	ldr	r3, [pc, #60]	; (800c578 <FMC_NANDECCCmd+0x64>)
 800c53c:	4a0e      	ldr	r2, [pc, #56]	; (800c578 <FMC_NANDECCCmd+0x64>)
 800c53e:	6812      	ldr	r2, [r2, #0]
 800c540:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c544:	601a      	str	r2, [r3, #0]
 800c546:	e00f      	b.n	800c568 <FMC_NANDECCCmd+0x54>
    }
  }
  else
  {
    /* Disable the selected NAND Bank ECC function by clearing the ECCEN bit in the PCRx register */
    if(FMC_Bank == FMC_Bank2_NAND)
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2b10      	cmp	r3, #16
 800c54c:	d106      	bne.n	800c55c <FMC_NANDECCCmd+0x48>
    {
      FMC_Bank2->PCR2 &= PCR_ECCEN_RESET;
 800c54e:	4a09      	ldr	r2, [pc, #36]	; (800c574 <FMC_NANDECCCmd+0x60>)
 800c550:	4b08      	ldr	r3, [pc, #32]	; (800c574 <FMC_NANDECCCmd+0x60>)
 800c552:	6819      	ldr	r1, [r3, #0]
 800c554:	4b09      	ldr	r3, [pc, #36]	; (800c57c <FMC_NANDECCCmd+0x68>)
 800c556:	400b      	ands	r3, r1
 800c558:	6013      	str	r3, [r2, #0]
 800c55a:	e005      	b.n	800c568 <FMC_NANDECCCmd+0x54>
    }
    else
    {
      FMC_Bank3->PCR3 &= PCR_ECCEN_RESET;
 800c55c:	4a06      	ldr	r2, [pc, #24]	; (800c578 <FMC_NANDECCCmd+0x64>)
 800c55e:	4b06      	ldr	r3, [pc, #24]	; (800c578 <FMC_NANDECCCmd+0x64>)
 800c560:	6819      	ldr	r1, [r3, #0]
 800c562:	4b06      	ldr	r3, [pc, #24]	; (800c57c <FMC_NANDECCCmd+0x68>)
 800c564:	400b      	ands	r3, r1
 800c566:	6013      	str	r3, [r2, #0]
    }
  }
}
 800c568:	370c      	adds	r7, #12
 800c56a:	46bd      	mov	sp, r7
 800c56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c570:	4770      	bx	lr
 800c572:	bf00      	nop
 800c574:	a0000060 	.word	0xa0000060
 800c578:	a0000080 	.word	0xa0000080
 800c57c:	000fffbf 	.word	0x000fffbf

0800c580 <FMC_GetECC>:
  *            @arg FMC_Bank2_NAND: FMC Bank2 NAND 
  *            @arg FMC_Bank3_NAND: FMC Bank3 NAND
  * @retval The Error Correction Code (ECC) value.
  */
uint32_t FMC_GetECC(uint32_t FMC_Bank)
{
 800c580:	b480      	push	{r7}
 800c582:	b085      	sub	sp, #20
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
  uint32_t eccval = 0x00000000;
 800c588:	2300      	movs	r3, #0
 800c58a:	60fb      	str	r3, [r7, #12]
  
  if(FMC_Bank == FMC_Bank2_NAND)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2b10      	cmp	r3, #16
 800c590:	d103      	bne.n	800c59a <FMC_GetECC+0x1a>
  {
    /* Get the ECCR2 register value */
    eccval = FMC_Bank2->ECCR2;
 800c592:	4b07      	ldr	r3, [pc, #28]	; (800c5b0 <FMC_GetECC+0x30>)
 800c594:	695b      	ldr	r3, [r3, #20]
 800c596:	60fb      	str	r3, [r7, #12]
 800c598:	e002      	b.n	800c5a0 <FMC_GetECC+0x20>
  }
  else
  {
    /* Get the ECCR3 register value */
    eccval = FMC_Bank3->ECCR3;
 800c59a:	4b06      	ldr	r3, [pc, #24]	; (800c5b4 <FMC_GetECC+0x34>)
 800c59c:	695b      	ldr	r3, [r3, #20]
 800c59e:	60fb      	str	r3, [r7, #12]
  }
  /* Return the error correction code value */
  return(eccval);
 800c5a0:	68fb      	ldr	r3, [r7, #12]
}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	3714      	adds	r7, #20
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ac:	4770      	bx	lr
 800c5ae:	bf00      	nop
 800c5b0:	a0000060 	.word	0xa0000060
 800c5b4:	a0000080 	.word	0xa0000080

0800c5b8 <FMC_PCCARDDeInit>:
  * @brief  De-initializes the FMC PCCARD Bank registers to their default reset values.
  * @param  None                       
  * @retval None
  */
void FMC_PCCARDDeInit(void)
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	af00      	add	r7, sp, #0
  /* Set the FMC_Bank4 registers to their reset values */
  FMC_Bank4->PCR4 = 0x00000018; 
 800c5bc:	4b0a      	ldr	r3, [pc, #40]	; (800c5e8 <FMC_PCCARDDeInit+0x30>)
 800c5be:	2218      	movs	r2, #24
 800c5c0:	601a      	str	r2, [r3, #0]
  FMC_Bank4->SR4 = 0x00000000;	
 800c5c2:	4b09      	ldr	r3, [pc, #36]	; (800c5e8 <FMC_PCCARDDeInit+0x30>)
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	605a      	str	r2, [r3, #4]
  FMC_Bank4->PMEM4 = 0xFCFCFCFC;
 800c5c8:	4b07      	ldr	r3, [pc, #28]	; (800c5e8 <FMC_PCCARDDeInit+0x30>)
 800c5ca:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800c5ce:	609a      	str	r2, [r3, #8]
  FMC_Bank4->PATT4 = 0xFCFCFCFC;
 800c5d0:	4b05      	ldr	r3, [pc, #20]	; (800c5e8 <FMC_PCCARDDeInit+0x30>)
 800c5d2:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800c5d6:	60da      	str	r2, [r3, #12]
  FMC_Bank4->PIO4 = 0xFCFCFCFC;
 800c5d8:	4b03      	ldr	r3, [pc, #12]	; (800c5e8 <FMC_PCCARDDeInit+0x30>)
 800c5da:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800c5de:	611a      	str	r2, [r3, #16]
}
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e6:	4770      	bx	lr
 800c5e8:	a00000a0 	.word	0xa00000a0

0800c5ec <FMC_PCCARDInit>:
  * @param  FMC_PCCARDInitStruct : pointer to a FMC_PCCARDInitTypeDef structure
  *         that contains the configuration information for the FMC PCCARD Bank.                       
  * @retval None
  */
void FMC_PCCARDInit(FMC_PCCARDInitTypeDef* FMC_PCCARDInitStruct)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b083      	sub	sp, #12
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_FMC_WAIT_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FMC_PCCARDInitStruct parameters */
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
 800c5f4:	4b27      	ldr	r3, [pc, #156]	; (800c694 <FMC_PCCARDInit+0xa8>)
 800c5f6:	687a      	ldr	r2, [r7, #4]
 800c5f8:	6811      	ldr	r1, [r2, #0]
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
 800c5fa:	687a      	ldr	r2, [r7, #4]
 800c5fc:	6852      	ldr	r2, [r2, #4]
 800c5fe:	0252      	lsls	r2, r2, #9
  assert_param(IS_FMC_HOLD_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FMC_PCCARDInitStruct parameters */
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
                     FMC_NAND_MemoryDataWidth_16b |  
 800c600:	4311      	orrs	r1, r2
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
 800c602:	687a      	ldr	r2, [r7, #4]
 800c604:	6892      	ldr	r2, [r2, #8]
 800c606:	0352      	lsls	r2, r2, #13
  assert_param(IS_FMC_HIZ_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FMC_PCCARDInitStruct parameters */
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
 800c608:	430a      	orrs	r2, r1
 800c60a:	f042 0210 	orr.w	r2, r2, #16
  assert_param(IS_FMC_WAIT_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FMC_PCCARDInitStruct parameters */
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
 800c60e:	601a      	str	r2, [r3, #0]
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 800c610:	4b20      	ldr	r3, [pc, #128]	; (800c694 <FMC_PCCARDInit+0xa8>)
 800c612:	687a      	ldr	r2, [r7, #4]
 800c614:	68d2      	ldr	r2, [r2, #12]
 800c616:	6811      	ldr	r1, [r2, #0]
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800c618:	687a      	ldr	r2, [r7, #4]
 800c61a:	68d2      	ldr	r2, [r2, #12]
 800c61c:	6852      	ldr	r2, [r2, #4]
 800c61e:	0212      	lsls	r2, r2, #8
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 800c620:	4311      	orrs	r1, r2
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 800c622:	687a      	ldr	r2, [r7, #4]
 800c624:	68d2      	ldr	r2, [r2, #12]
 800c626:	6892      	ldr	r2, [r2, #8]
 800c628:	0412      	lsls	r2, r2, #16
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800c62a:	4311      	orrs	r1, r2
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
 800c62c:	687a      	ldr	r2, [r7, #4]
 800c62e:	68d2      	ldr	r2, [r2, #12]
 800c630:	68d2      	ldr	r2, [r2, #12]
 800c632:	0612      	lsls	r2, r2, #24
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 800c634:	430a      	orrs	r2, r1
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 800c636:	609a      	str	r2, [r3, #8]
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 800c638:	4b16      	ldr	r3, [pc, #88]	; (800c694 <FMC_PCCARDInit+0xa8>)
 800c63a:	687a      	ldr	r2, [r7, #4]
 800c63c:	6912      	ldr	r2, [r2, #16]
 800c63e:	6811      	ldr	r1, [r2, #0]
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800c640:	687a      	ldr	r2, [r7, #4]
 800c642:	6912      	ldr	r2, [r2, #16]
 800c644:	6852      	ldr	r2, [r2, #4]
 800c646:	0212      	lsls	r2, r2, #8
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 800c648:	4311      	orrs	r1, r2
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 800c64a:	687a      	ldr	r2, [r7, #4]
 800c64c:	6912      	ldr	r2, [r2, #16]
 800c64e:	6892      	ldr	r2, [r2, #8]
 800c650:	0412      	lsls	r2, r2, #16
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800c652:	4311      	orrs	r1, r2
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
 800c654:	687a      	ldr	r2, [r7, #4]
 800c656:	6912      	ldr	r2, [r2, #16]
 800c658:	68d2      	ldr	r2, [r2, #12]
 800c65a:	0612      	lsls	r2, r2, #24
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 800c65c:	430a      	orrs	r2, r1
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 800c65e:	60da      	str	r2, [r3, #12]
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
 800c660:	4b0c      	ldr	r3, [pc, #48]	; (800c694 <FMC_PCCARDInit+0xa8>)
 800c662:	687a      	ldr	r2, [r7, #4]
 800c664:	6952      	ldr	r2, [r2, #20]
 800c666:	6811      	ldr	r1, [r2, #0]
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800c668:	687a      	ldr	r2, [r7, #4]
 800c66a:	6952      	ldr	r2, [r2, #20]
 800c66c:	6852      	ldr	r2, [r2, #4]
 800c66e:	0212      	lsls	r2, r2, #8
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
 800c670:	4311      	orrs	r1, r2
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 800c672:	687a      	ldr	r2, [r7, #4]
 800c674:	6952      	ldr	r2, [r2, #20]
 800c676:	6892      	ldr	r2, [r2, #8]
 800c678:	0412      	lsls	r2, r2, #16
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800c67a:	4311      	orrs	r1, r2
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime << 24);             
 800c67c:	687a      	ldr	r2, [r7, #4]
 800c67e:	6952      	ldr	r2, [r2, #20]
 800c680:	68d2      	ldr	r2, [r2, #12]
 800c682:	0612      	lsls	r2, r2, #24
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 800c684:	430a      	orrs	r2, r1
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
 800c686:	611a      	str	r2, [r3, #16]
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime << 24);             
}
 800c688:	370c      	adds	r7, #12
 800c68a:	46bd      	mov	sp, r7
 800c68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c690:	4770      	bx	lr
 800c692:	bf00      	nop
 800c694:	a00000a0 	.word	0xa00000a0

0800c698 <FMC_PCCARDStructInit>:
  * @param  FMC_PCCARDInitStruct: pointer to a FMC_PCCARDInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void FMC_PCCARDStructInit(FMC_PCCARDInitTypeDef* FMC_PCCARDInitStruct)
{
 800c698:	b480      	push	{r7}
 800c69a:	b083      	sub	sp, #12
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
  /* Reset PCCARD Init structure parameters values */
  FMC_PCCARDInitStruct->FMC_Waitfeature = FMC_Waitfeature_Disable;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	601a      	str	r2, [r3, #0]
  FMC_PCCARDInitStruct->FMC_TCLRSetupTime = 0;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	605a      	str	r2, [r3, #4]
  FMC_PCCARDInitStruct->FMC_TARSetupTime = 0;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	609a      	str	r2, [r3, #8]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime = 252;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	68db      	ldr	r3, [r3, #12]
 800c6b6:	22fc      	movs	r2, #252	; 0xfc
 800c6b8:	601a      	str	r2, [r3, #0]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime = 252;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	68db      	ldr	r3, [r3, #12]
 800c6be:	22fc      	movs	r2, #252	; 0xfc
 800c6c0:	605a      	str	r2, [r3, #4]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime = 252;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	68db      	ldr	r3, [r3, #12]
 800c6c6:	22fc      	movs	r2, #252	; 0xfc
 800c6c8:	609a      	str	r2, [r3, #8]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime = 252;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	68db      	ldr	r3, [r3, #12]
 800c6ce:	22fc      	movs	r2, #252	; 0xfc
 800c6d0:	60da      	str	r2, [r3, #12]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime = 252;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	691b      	ldr	r3, [r3, #16]
 800c6d6:	22fc      	movs	r2, #252	; 0xfc
 800c6d8:	601a      	str	r2, [r3, #0]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime = 252;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	691b      	ldr	r3, [r3, #16]
 800c6de:	22fc      	movs	r2, #252	; 0xfc
 800c6e0:	605a      	str	r2, [r3, #4]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime = 252;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	691b      	ldr	r3, [r3, #16]
 800c6e6:	22fc      	movs	r2, #252	; 0xfc
 800c6e8:	609a      	str	r2, [r3, #8]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime = 252;	
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	691b      	ldr	r3, [r3, #16]
 800c6ee:	22fc      	movs	r2, #252	; 0xfc
 800c6f0:	60da      	str	r2, [r3, #12]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime = 252;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	695b      	ldr	r3, [r3, #20]
 800c6f6:	22fc      	movs	r2, #252	; 0xfc
 800c6f8:	601a      	str	r2, [r3, #0]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime = 252;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	695b      	ldr	r3, [r3, #20]
 800c6fe:	22fc      	movs	r2, #252	; 0xfc
 800c700:	605a      	str	r2, [r3, #4]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime = 252;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	695b      	ldr	r3, [r3, #20]
 800c706:	22fc      	movs	r2, #252	; 0xfc
 800c708:	609a      	str	r2, [r3, #8]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime = 252;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	695b      	ldr	r3, [r3, #20]
 800c70e:	22fc      	movs	r2, #252	; 0xfc
 800c710:	60da      	str	r2, [r3, #12]
}
 800c712:	370c      	adds	r7, #12
 800c714:	46bd      	mov	sp, r7
 800c716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71a:	4770      	bx	lr

0800c71c <FMC_PCCARDCmd>:
  * @param  NewState: new state of the PCCARD Memory Bank.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_PCCARDCmd(FunctionalState NewState)
{
 800c71c:	b480      	push	{r7}
 800c71e:	b083      	sub	sp, #12
 800c720:	af00      	add	r7, sp, #0
 800c722:	4603      	mov	r3, r0
 800c724:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800c726:	79fb      	ldrb	r3, [r7, #7]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d006      	beq.n	800c73a <FMC_PCCARDCmd+0x1e>
  {
    /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
    FMC_Bank4->PCR4 |= PCR_PBKEN_SET;
 800c72c:	4b08      	ldr	r3, [pc, #32]	; (800c750 <FMC_PCCARDCmd+0x34>)
 800c72e:	4a08      	ldr	r2, [pc, #32]	; (800c750 <FMC_PCCARDCmd+0x34>)
 800c730:	6812      	ldr	r2, [r2, #0]
 800c732:	f042 0204 	orr.w	r2, r2, #4
 800c736:	601a      	str	r2, [r3, #0]
 800c738:	e005      	b.n	800c746 <FMC_PCCARDCmd+0x2a>
  }
  else
  {
    /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
    FMC_Bank4->PCR4 &= PCR_PBKEN_RESET;
 800c73a:	4a05      	ldr	r2, [pc, #20]	; (800c750 <FMC_PCCARDCmd+0x34>)
 800c73c:	4b04      	ldr	r3, [pc, #16]	; (800c750 <FMC_PCCARDCmd+0x34>)
 800c73e:	6819      	ldr	r1, [r3, #0]
 800c740:	4b04      	ldr	r3, [pc, #16]	; (800c754 <FMC_PCCARDCmd+0x38>)
 800c742:	400b      	ands	r3, r1
 800c744:	6013      	str	r3, [r2, #0]
  }
}
 800c746:	370c      	adds	r7, #12
 800c748:	46bd      	mov	sp, r7
 800c74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74e:	4770      	bx	lr
 800c750:	a00000a0 	.word	0xa00000a0
 800c754:	000ffffb 	.word	0x000ffffb

0800c758 <FMC_SDRAMDeInit>:
  *            @arg FMC_Bank1_SDRAM: FMC Bank1 SDRAM 
  *            @arg FMC_Bank2_SDRAM: FMC Bank2 SDRAM 
  * @retval None
  */
void FMC_SDRAMDeInit(uint32_t FMC_Bank)
{
 800c758:	b480      	push	{r7}
 800c75a:	b083      	sub	sp, #12
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_SDRAM_BANK(FMC_Bank));
  
  FMC_Bank5_6->SDCR[FMC_Bank] = 0x000002D0;
 800c760:	4b0d      	ldr	r3, [pc, #52]	; (800c798 <FMC_SDRAMDeInit+0x40>)
 800c762:	687a      	ldr	r2, [r7, #4]
 800c764:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 800c768:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  FMC_Bank5_6->SDTR[FMC_Bank] = 0x0FFFFFFF;    
 800c76c:	4b0a      	ldr	r3, [pc, #40]	; (800c798 <FMC_SDRAMDeInit+0x40>)
 800c76e:	687a      	ldr	r2, [r7, #4]
 800c770:	3202      	adds	r2, #2
 800c772:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800c776:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  FMC_Bank5_6->SDCMR = 0x00000000;
 800c77a:	4b07      	ldr	r3, [pc, #28]	; (800c798 <FMC_SDRAMDeInit+0x40>)
 800c77c:	2200      	movs	r2, #0
 800c77e:	611a      	str	r2, [r3, #16]
  FMC_Bank5_6->SDRTR = 0x00000000;
 800c780:	4b05      	ldr	r3, [pc, #20]	; (800c798 <FMC_SDRAMDeInit+0x40>)
 800c782:	2200      	movs	r2, #0
 800c784:	615a      	str	r2, [r3, #20]
  FMC_Bank5_6->SDSR = 0x00000000; 
 800c786:	4b04      	ldr	r3, [pc, #16]	; (800c798 <FMC_SDRAMDeInit+0x40>)
 800c788:	2200      	movs	r2, #0
 800c78a:	619a      	str	r2, [r3, #24]
}  
 800c78c:	370c      	adds	r7, #12
 800c78e:	46bd      	mov	sp, r7
 800c790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c794:	4770      	bx	lr
 800c796:	bf00      	nop
 800c798:	a0000140 	.word	0xa0000140

0800c79c <FMC_SDRAMInit>:
  *         that contains the configuration information for the FMC SDRAM 
  *         specified Banks.                       
  * @retval None
  */
void FMC_SDRAMInit(FMC_SDRAMInitTypeDef* FMC_SDRAMInitStruct)
{ 
 800c79c:	b480      	push	{r7}
 800c79e:	b087      	sub	sp, #28
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
  /* temporary registers */
  uint32_t tmpr1 = 0;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	613b      	str	r3, [r7, #16]
  uint32_t tmpr3 = 0;
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr4 = 0;
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)); 
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	685a      	ldr	r2, [r3, #4]
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	689b      	ldr	r3, [r3, #8]
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)); 
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 800c7bc:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	68db      	ldr	r3, [r3, #12]
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
 800c7c2:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	691b      	ldr	r3, [r3, #16]
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
 800c7c8:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
             FMC_SDRAMInitStruct->FMC_CASLatency |
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	695b      	ldr	r3, [r3, #20]
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
 800c7ce:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_CASLatency |
             FMC_SDRAMInitStruct->FMC_WriteProtection |
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	699b      	ldr	r3, [r3, #24]
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
             FMC_SDRAMInitStruct->FMC_CASLatency |
 800c7d4:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_WriteProtection |
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	69db      	ldr	r3, [r3, #28]
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
             FMC_SDRAMInitStruct->FMC_CASLatency |
             FMC_SDRAMInitStruct->FMC_WriteProtection |
 800c7da:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	6a1b      	ldr	r3, [r3, #32]
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
             FMC_SDRAMInitStruct->FMC_CASLatency |
             FMC_SDRAMInitStruct->FMC_WriteProtection |
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 800c7e0:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)); 
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 800c7e6:	4313      	orrs	r3, r2
 800c7e8:	617b      	str	r3, [r7, #20]
             FMC_SDRAMInitStruct->FMC_WriteProtection |
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
            
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d106      	bne.n	800c800 <FMC_SDRAMInit+0x64>
  {
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
 800c7f2:	4b40      	ldr	r3, [pc, #256]	; (800c8f4 <FMC_SDRAMInit+0x158>)
 800c7f4:	687a      	ldr	r2, [r7, #4]
 800c7f6:	6812      	ldr	r2, [r2, #0]
 800c7f8:	6979      	ldr	r1, [r7, #20]
 800c7fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c7fe:	e011      	b.n	800c824 <FMC_SDRAMInit+0x88>
  }
  else   /* SDCR2 "don't care" bits configuration */
  {
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	69da      	ldr	r2, [r3, #28]
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6a1b      	ldr	r3, [r3, #32]
  {
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  else   /* SDCR2 "don't care" bits configuration */
  {
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 800c808:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  {
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  else   /* SDCR2 "don't care" bits configuration */
  {
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 800c80e:	4313      	orrs	r3, r2
 800c810:	60fb      	str	r3, [r7, #12]
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
    
    FMC_Bank5_6->SDCR[FMC_Bank1_SDRAM] = tmpr3;
 800c812:	4b38      	ldr	r3, [pc, #224]	; (800c8f4 <FMC_SDRAMInit+0x158>)
 800c814:	68fa      	ldr	r2, [r7, #12]
 800c816:	601a      	str	r2, [r3, #0]
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
 800c818:	4b36      	ldr	r3, [pc, #216]	; (800c8f4 <FMC_SDRAMInit+0x158>)
 800c81a:	687a      	ldr	r2, [r7, #4]
 800c81c:	6812      	ldr	r2, [r2, #0]
 800c81e:	6979      	ldr	r1, [r7, #20]
 800c820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d130      	bne.n	800c88e <FMC_SDRAMInit+0xf2>
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	1e5a      	subs	r2, r3, #1
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c838:	685b      	ldr	r3, [r3, #4]
 800c83a:	3b01      	subs	r3, #1
 800c83c:	011b      	lsls	r3, r3, #4
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 800c83e:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c844:	689b      	ldr	r3, [r3, #8]
 800c846:	3b01      	subs	r3, #1
 800c848:	021b      	lsls	r3, r3, #8
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 800c84a:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c850:	68db      	ldr	r3, [r3, #12]
 800c852:	3b01      	subs	r3, #1
 800c854:	031b      	lsls	r3, r3, #12
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 800c856:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c85c:	691b      	ldr	r3, [r3, #16]
 800c85e:	3b01      	subs	r3, #1
 800c860:	041b      	lsls	r3, r3, #16
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 800c862:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20) |
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c868:	695b      	ldr	r3, [r3, #20]
 800c86a:	3b01      	subs	r3, #1
 800c86c:	051b      	lsls	r3, r3, #20
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
 800c86e:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay)-1) << 24);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c874:	699b      	ldr	r3, [r3, #24]
 800c876:	3b01      	subs	r3, #1
 800c878:	061b      	lsls	r3, r3, #24
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 800c87a:	4313      	orrs	r3, r2
 800c87c:	613b      	str	r3, [r7, #16]
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay)-1) << 24);
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
 800c87e:	4b1d      	ldr	r3, [pc, #116]	; (800c8f4 <FMC_SDRAMInit+0x158>)
 800c880:	687a      	ldr	r2, [r7, #4]
 800c882:	6812      	ldr	r2, [r2, #0]
 800c884:	3202      	adds	r2, #2
 800c886:	6939      	ldr	r1, [r7, #16]
 800c888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c88c:	e02c      	b.n	800c8e8 <FMC_SDRAMInit+0x14c>
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	1e5a      	subs	r2, r3, #1
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c89a:	685b      	ldr	r3, [r3, #4]
 800c89c:	3b01      	subs	r3, #1
 800c89e:	011b      	lsls	r3, r3, #4
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 800c8a0:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8a6:	689b      	ldr	r3, [r3, #8]
 800c8a8:	3b01      	subs	r3, #1
 800c8aa:	021b      	lsls	r3, r3, #8
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 800c8ac:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8b2:	691b      	ldr	r3, [r3, #16]
 800c8b4:	3b01      	subs	r3, #1
 800c8b6:	041b      	lsls	r3, r3, #16
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 800c8b8:	4313      	orrs	r3, r2
 800c8ba:	613b      	str	r3, [r7, #16]
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
            
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8c0:	68db      	ldr	r3, [r3, #12]
 800c8c2:	3b01      	subs	r3, #1
 800c8c4:	031a      	lsls	r2, r3, #12
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8ca:	695b      	ldr	r3, [r3, #20]
 800c8cc:	3b01      	subs	r3, #1
 800c8ce:	051b      	lsls	r3, r3, #20
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
            
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 800c8d0:	4313      	orrs	r3, r2
 800c8d2:	60bb      	str	r3, [r7, #8]
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20);
            
            FMC_Bank5_6->SDTR[FMC_Bank1_SDRAM] = tmpr4;
 800c8d4:	4b07      	ldr	r3, [pc, #28]	; (800c8f4 <FMC_SDRAMInit+0x158>)
 800c8d6:	68ba      	ldr	r2, [r7, #8]
 800c8d8:	609a      	str	r2, [r3, #8]
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
 800c8da:	4b06      	ldr	r3, [pc, #24]	; (800c8f4 <FMC_SDRAMInit+0x158>)
 800c8dc:	687a      	ldr	r2, [r7, #4]
 800c8de:	6812      	ldr	r2, [r2, #0]
 800c8e0:	3202      	adds	r2, #2
 800c8e2:	6939      	ldr	r1, [r7, #16]
 800c8e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  
}
 800c8e8:	371c      	adds	r7, #28
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f0:	4770      	bx	lr
 800c8f2:	bf00      	nop
 800c8f4:	a0000140 	.word	0xa0000140

0800c8f8 <FMC_SDRAMStructInit>:
  * @param  FMC_SDRAMInitStruct: pointer to a FMC_SDRAMInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void FMC_SDRAMStructInit(FMC_SDRAMInitTypeDef* FMC_SDRAMInitStruct)  
{  
 800c8f8:	b480      	push	{r7}
 800c8fa:	b083      	sub	sp, #12
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
  /* Reset SDRAM Init structure parameters values */
  FMC_SDRAMInitStruct->FMC_Bank = FMC_Bank1_SDRAM;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2200      	movs	r2, #0
 800c904:	601a      	str	r2, [r3, #0]
  FMC_SDRAMInitStruct->FMC_ColumnBitsNumber = FMC_ColumnBits_Number_8b;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2200      	movs	r2, #0
 800c90a:	605a      	str	r2, [r3, #4]
  FMC_SDRAMInitStruct->FMC_RowBitsNumber = FMC_RowBits_Number_11b; 
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2200      	movs	r2, #0
 800c910:	609a      	str	r2, [r3, #8]
  FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth = FMC_SDMemory_Width_16b;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2210      	movs	r2, #16
 800c916:	60da      	str	r2, [r3, #12]
  FMC_SDRAMInitStruct->FMC_InternalBankNumber = FMC_InternalBank_Number_4; 
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2240      	movs	r2, #64	; 0x40
 800c91c:	611a      	str	r2, [r3, #16]
  FMC_SDRAMInitStruct->FMC_CASLatency = FMC_CAS_Latency_1;  
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2280      	movs	r2, #128	; 0x80
 800c922:	615a      	str	r2, [r3, #20]
  FMC_SDRAMInitStruct->FMC_WriteProtection = FMC_Write_Protection_Enable;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c92a:	619a      	str	r2, [r3, #24]
  FMC_SDRAMInitStruct->FMC_SDClockPeriod = FMC_SDClock_Disable;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2200      	movs	r2, #0
 800c930:	61da      	str	r2, [r3, #28]
  FMC_SDRAMInitStruct->FMC_ReadBurst = FMC_Read_Burst_Disable;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2200      	movs	r2, #0
 800c936:	621a      	str	r2, [r3, #32]
  FMC_SDRAMInitStruct->FMC_ReadPipeDelay = FMC_ReadPipe_Delay_0; 
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2200      	movs	r2, #0
 800c93c:	625a      	str	r2, [r3, #36]	; 0x24
   
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay = 16;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c942:	2210      	movs	r2, #16
 800c944:	601a      	str	r2, [r3, #0]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay = 16;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c94a:	2210      	movs	r2, #16
 800c94c:	605a      	str	r2, [r3, #4]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime = 16;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c952:	2210      	movs	r2, #16
 800c954:	609a      	str	r2, [r3, #8]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay = 16;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c95a:	2210      	movs	r2, #16
 800c95c:	60da      	str	r2, [r3, #12]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime = 16;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c962:	2210      	movs	r2, #16
 800c964:	611a      	str	r2, [r3, #16]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay = 16;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c96a:	2210      	movs	r2, #16
 800c96c:	615a      	str	r2, [r3, #20]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay = 16;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c972:	2210      	movs	r2, #16
 800c974:	619a      	str	r2, [r3, #24]
  
}
 800c976:	370c      	adds	r7, #12
 800c978:	46bd      	mov	sp, r7
 800c97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97e:	4770      	bx	lr

0800c980 <FMC_SDRAMCmdConfig>:
  * @param  FMC_SDRAMCommandStruct: pointer to a FMC_SDRAMCommandTypeDef structure 
  *         which will be configured.
  * @retval None
  */
void FMC_SDRAMCmdConfig(FMC_SDRAMCommandTypeDef* FMC_SDRAMCommandStruct)
{
 800c980:	b480      	push	{r7}
 800c982:	b085      	sub	sp, #20
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
  uint32_t tmpr = 0x0;
 800c988:	2300      	movs	r3, #0
 800c98a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FMC_COMMAND_MODE(FMC_SDRAMCommandStruct->FMC_CommandMode));
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681a      	ldr	r2, [r3, #0]
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	685b      	ldr	r3, [r3, #4]
  assert_param(IS_FMC_COMMAND_MODE(FMC_SDRAMCommandStruct->FMC_CommandMode));
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 800c994:	431a      	orrs	r2, r3
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	689b      	ldr	r3, [r3, #8]
 800c99a:	3b01      	subs	r3, #1
 800c99c:	015b      	lsls	r3, r3, #5
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
 800c99e:	431a      	orrs	r2, r3
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
                     ((FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition)<<9));
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	68db      	ldr	r3, [r3, #12]
 800c9a4:	025b      	lsls	r3, r3, #9
  assert_param(IS_FMC_COMMAND_MODE(FMC_SDRAMCommandStruct->FMC_CommandMode));
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 800c9a6:	4313      	orrs	r3, r2
 800c9a8:	60fb      	str	r3, [r7, #12]
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
                     ((FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition)<<9));
  
  FMC_Bank5_6->SDCMR = tmpr;
 800c9aa:	4b04      	ldr	r3, [pc, #16]	; (800c9bc <FMC_SDRAMCmdConfig+0x3c>)
 800c9ac:	68fa      	ldr	r2, [r7, #12]
 800c9ae:	611a      	str	r2, [r3, #16]

}
 800c9b0:	3714      	adds	r7, #20
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b8:	4770      	bx	lr
 800c9ba:	bf00      	nop
 800c9bc:	a0000140 	.word	0xa0000140

0800c9c0 <FMC_GetModeStatus>:
  * @param  SDRAM_Bank: Defines the FMC SDRAM bank. This parameter can be 
  *                     FMC_Bank1_SDRAM or FMC_Bank2_SDRAM. 
  * @retval The FMC SDRAM bank mode status         
  */
uint32_t FMC_GetModeStatus(uint32_t SDRAM_Bank)
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	b085      	sub	sp, #20
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameter */
  assert_param(IS_FMC_SDRAM_BANK(SDRAM_Bank));

  /* Get the busy flag status */
  if(SDRAM_Bank == FMC_Bank1_SDRAM)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d105      	bne.n	800c9de <FMC_GetModeStatus+0x1e>
  {
    tmpreg = (uint32_t)(FMC_Bank5_6->SDSR & FMC_SDSR_MODES1); 
 800c9d2:	4b09      	ldr	r3, [pc, #36]	; (800c9f8 <FMC_GetModeStatus+0x38>)
 800c9d4:	699b      	ldr	r3, [r3, #24]
 800c9d6:	f003 0306 	and.w	r3, r3, #6
 800c9da:	60fb      	str	r3, [r7, #12]
 800c9dc:	e005      	b.n	800c9ea <FMC_GetModeStatus+0x2a>
  }
  else
  {
    tmpreg = ((uint32_t)(FMC_Bank5_6->SDSR & FMC_SDSR_MODES2) >> 2);
 800c9de:	4b06      	ldr	r3, [pc, #24]	; (800c9f8 <FMC_GetModeStatus+0x38>)
 800c9e0:	699b      	ldr	r3, [r3, #24]
 800c9e2:	f003 0318 	and.w	r3, r3, #24
 800c9e6:	089b      	lsrs	r3, r3, #2
 800c9e8:	60fb      	str	r3, [r7, #12]
  }
  
  /* Return the mode status */
  return tmpreg;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
}
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	3714      	adds	r7, #20
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f6:	4770      	bx	lr
 800c9f8:	a0000140 	.word	0xa0000140

0800c9fc <FMC_SetRefreshCount>:
  * @brief  defines the SDRAM Memory Refresh rate.
  * @param  FMC_Count: specifies the Refresh timer count.       
  * @retval None
  */
void FMC_SetRefreshCount(uint32_t FMC_Count)
{
 800c9fc:	b480      	push	{r7}
 800c9fe:	b083      	sub	sp, #12
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
  /* check the parameters */
  assert_param(IS_FMC_REFRESH_COUNT(FMC_Count));
  
  FMC_Bank5_6->SDRTR |= (FMC_Count<<1);
 800ca04:	4b05      	ldr	r3, [pc, #20]	; (800ca1c <FMC_SetRefreshCount+0x20>)
 800ca06:	4a05      	ldr	r2, [pc, #20]	; (800ca1c <FMC_SetRefreshCount+0x20>)
 800ca08:	6951      	ldr	r1, [r2, #20]
 800ca0a:	687a      	ldr	r2, [r7, #4]
 800ca0c:	0052      	lsls	r2, r2, #1
 800ca0e:	430a      	orrs	r2, r1
 800ca10:	615a      	str	r2, [r3, #20]
   
}
 800ca12:	370c      	adds	r7, #12
 800ca14:	46bd      	mov	sp, r7
 800ca16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1a:	4770      	bx	lr
 800ca1c:	a0000140 	.word	0xa0000140

0800ca20 <FMC_SetAutoRefresh_Number>:
  * @brief  Sets the Number of consecutive SDRAM Memory auto Refresh commands.
  * @param  FMC_Number: specifies the auto Refresh number.       
  * @retval None
  */
void FMC_SetAutoRefresh_Number(uint32_t FMC_Number)
{
 800ca20:	b480      	push	{r7}
 800ca22:	b083      	sub	sp, #12
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
  /* check the parameters */
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_Number));
  
  FMC_Bank5_6->SDCMR |= (FMC_Number << 5);   
 800ca28:	4b05      	ldr	r3, [pc, #20]	; (800ca40 <FMC_SetAutoRefresh_Number+0x20>)
 800ca2a:	4a05      	ldr	r2, [pc, #20]	; (800ca40 <FMC_SetAutoRefresh_Number+0x20>)
 800ca2c:	6911      	ldr	r1, [r2, #16]
 800ca2e:	687a      	ldr	r2, [r7, #4]
 800ca30:	0152      	lsls	r2, r2, #5
 800ca32:	430a      	orrs	r2, r1
 800ca34:	611a      	str	r2, [r3, #16]
}
 800ca36:	370c      	adds	r7, #12
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3e:	4770      	bx	lr
 800ca40:	a0000140 	.word	0xa0000140

0800ca44 <FMC_SDRAMWriteProtectionConfig>:
  * @param  NewState: new state of the write protection flag.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_SDRAMWriteProtectionConfig(uint32_t SDRAM_Bank, FunctionalState NewState)
{
 800ca44:	b480      	push	{r7}
 800ca46:	b083      	sub	sp, #12
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	460b      	mov	r3, r1
 800ca4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameter */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_FMC_SDRAM_BANK(SDRAM_Bank));
  
  if (NewState != DISABLE)
 800ca50:	78fb      	ldrb	r3, [r7, #3]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d00a      	beq.n	800ca6c <FMC_SDRAMWriteProtectionConfig+0x28>
  {
    FMC_Bank5_6->SDCR[SDRAM_Bank] |= FMC_Write_Protection_Enable;    
 800ca56:	4b0d      	ldr	r3, [pc, #52]	; (800ca8c <FMC_SDRAMWriteProtectionConfig+0x48>)
 800ca58:	4a0c      	ldr	r2, [pc, #48]	; (800ca8c <FMC_SDRAMWriteProtectionConfig+0x48>)
 800ca5a:	6879      	ldr	r1, [r7, #4]
 800ca5c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ca60:	f442 7100 	orr.w	r1, r2, #512	; 0x200
 800ca64:	687a      	ldr	r2, [r7, #4]
 800ca66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ca6a:	e00a      	b.n	800ca82 <FMC_SDRAMWriteProtectionConfig+0x3e>
  }
  else
  {
    FMC_Bank5_6->SDCR[SDRAM_Bank] &= SDCR_WriteProtection_RESET;
 800ca6c:	4a07      	ldr	r2, [pc, #28]	; (800ca8c <FMC_SDRAMWriteProtectionConfig+0x48>)
 800ca6e:	4b07      	ldr	r3, [pc, #28]	; (800ca8c <FMC_SDRAMWriteProtectionConfig+0x48>)
 800ca70:	6879      	ldr	r1, [r7, #4]
 800ca72:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800ca76:	f647 53ff 	movw	r3, #32255	; 0x7dff
 800ca7a:	400b      	ands	r3, r1
 800ca7c:	6879      	ldr	r1, [r7, #4]
 800ca7e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  } 
  
}
 800ca82:	370c      	adds	r7, #12
 800ca84:	46bd      	mov	sp, r7
 800ca86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8a:	4770      	bx	lr
 800ca8c:	a0000140 	.word	0xa0000140

0800ca90 <FMC_ITConfig>:
  * @param  NewState: new state of the specified FMC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_ITConfig(uint32_t FMC_Bank, uint32_t FMC_IT, FunctionalState NewState)
{
 800ca90:	b480      	push	{r7}
 800ca92:	b085      	sub	sp, #20
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	60f8      	str	r0, [r7, #12]
 800ca98:	60b9      	str	r1, [r7, #8]
 800ca9a:	4613      	mov	r3, r2
 800ca9c:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FMC_IT_BANK(FMC_Bank));
  assert_param(IS_FMC_IT(FMC_IT));	
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800ca9e:	79fb      	ldrb	r3, [r7, #7]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d026      	beq.n	800caf2 <FMC_ITConfig+0x62>
  {
    /* Enable the selected FMC_Bank2 interrupts */
    if(FMC_Bank == FMC_Bank2_NAND)
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	2b10      	cmp	r3, #16
 800caa8:	d106      	bne.n	800cab8 <FMC_ITConfig+0x28>
    {
      FMC_Bank2->SR2 |= FMC_IT;
 800caaa:	4b29      	ldr	r3, [pc, #164]	; (800cb50 <FMC_ITConfig+0xc0>)
 800caac:	4a28      	ldr	r2, [pc, #160]	; (800cb50 <FMC_ITConfig+0xc0>)
 800caae:	6851      	ldr	r1, [r2, #4]
 800cab0:	68ba      	ldr	r2, [r7, #8]
 800cab2:	430a      	orrs	r2, r1
 800cab4:	605a      	str	r2, [r3, #4]
 800cab6:	e046      	b.n	800cb46 <FMC_ITConfig+0xb6>
    }
    /* Enable the selected FMC_Bank3 interrupts */
    else if (FMC_Bank == FMC_Bank3_NAND)
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cabe:	d106      	bne.n	800cace <FMC_ITConfig+0x3e>
    {
      FMC_Bank3->SR3 |= FMC_IT;
 800cac0:	4b24      	ldr	r3, [pc, #144]	; (800cb54 <FMC_ITConfig+0xc4>)
 800cac2:	4a24      	ldr	r2, [pc, #144]	; (800cb54 <FMC_ITConfig+0xc4>)
 800cac4:	6851      	ldr	r1, [r2, #4]
 800cac6:	68ba      	ldr	r2, [r7, #8]
 800cac8:	430a      	orrs	r2, r1
 800caca:	605a      	str	r2, [r3, #4]
 800cacc:	e03b      	b.n	800cb46 <FMC_ITConfig+0xb6>
    }
    /* Enable the selected FMC_Bank4 interrupts */
    else if (FMC_Bank == FMC_Bank4_PCCARD)
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cad4:	d106      	bne.n	800cae4 <FMC_ITConfig+0x54>
    {
      FMC_Bank4->SR4 |= FMC_IT;    
 800cad6:	4b20      	ldr	r3, [pc, #128]	; (800cb58 <FMC_ITConfig+0xc8>)
 800cad8:	4a1f      	ldr	r2, [pc, #124]	; (800cb58 <FMC_ITConfig+0xc8>)
 800cada:	6851      	ldr	r1, [r2, #4]
 800cadc:	68ba      	ldr	r2, [r7, #8]
 800cade:	430a      	orrs	r2, r1
 800cae0:	605a      	str	r2, [r3, #4]
 800cae2:	e030      	b.n	800cb46 <FMC_ITConfig+0xb6>
    }
    /* Enable the selected FMC_Bank5_6 interrupt */
    else
    {
      /* Enables the interrupt if the refresh error flag is set */
      FMC_Bank5_6->SDRTR |= FMC_IT; 
 800cae4:	4b1d      	ldr	r3, [pc, #116]	; (800cb5c <FMC_ITConfig+0xcc>)
 800cae6:	4a1d      	ldr	r2, [pc, #116]	; (800cb5c <FMC_ITConfig+0xcc>)
 800cae8:	6951      	ldr	r1, [r2, #20]
 800caea:	68ba      	ldr	r2, [r7, #8]
 800caec:	430a      	orrs	r2, r1
 800caee:	615a      	str	r2, [r3, #20]
 800caf0:	e029      	b.n	800cb46 <FMC_ITConfig+0xb6>
    }
  }
  else
  {
    /* Disable the selected FMC_Bank2 interrupts */
    if(FMC_Bank == FMC_Bank2_NAND)
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	2b10      	cmp	r3, #16
 800caf6:	d107      	bne.n	800cb08 <FMC_ITConfig+0x78>
    {
      
      FMC_Bank2->SR2 &= (uint32_t)~FMC_IT;
 800caf8:	4b15      	ldr	r3, [pc, #84]	; (800cb50 <FMC_ITConfig+0xc0>)
 800cafa:	4a15      	ldr	r2, [pc, #84]	; (800cb50 <FMC_ITConfig+0xc0>)
 800cafc:	6851      	ldr	r1, [r2, #4]
 800cafe:	68ba      	ldr	r2, [r7, #8]
 800cb00:	43d2      	mvns	r2, r2
 800cb02:	400a      	ands	r2, r1
 800cb04:	605a      	str	r2, [r3, #4]
 800cb06:	e01e      	b.n	800cb46 <FMC_ITConfig+0xb6>
    }
    /* Disable the selected FMC_Bank3 interrupts */
    else if (FMC_Bank == FMC_Bank3_NAND)
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb0e:	d107      	bne.n	800cb20 <FMC_ITConfig+0x90>
    {
      FMC_Bank3->SR3 &= (uint32_t)~FMC_IT;
 800cb10:	4b10      	ldr	r3, [pc, #64]	; (800cb54 <FMC_ITConfig+0xc4>)
 800cb12:	4a10      	ldr	r2, [pc, #64]	; (800cb54 <FMC_ITConfig+0xc4>)
 800cb14:	6851      	ldr	r1, [r2, #4]
 800cb16:	68ba      	ldr	r2, [r7, #8]
 800cb18:	43d2      	mvns	r2, r2
 800cb1a:	400a      	ands	r2, r1
 800cb1c:	605a      	str	r2, [r3, #4]
 800cb1e:	e012      	b.n	800cb46 <FMC_ITConfig+0xb6>
    }
    /* Disable the selected FMC_Bank4 interrupts */
    else if(FMC_Bank == FMC_Bank4_PCCARD)
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb26:	d107      	bne.n	800cb38 <FMC_ITConfig+0xa8>
    {
      FMC_Bank4->SR4 &= (uint32_t)~FMC_IT;    
 800cb28:	4b0b      	ldr	r3, [pc, #44]	; (800cb58 <FMC_ITConfig+0xc8>)
 800cb2a:	4a0b      	ldr	r2, [pc, #44]	; (800cb58 <FMC_ITConfig+0xc8>)
 800cb2c:	6851      	ldr	r1, [r2, #4]
 800cb2e:	68ba      	ldr	r2, [r7, #8]
 800cb30:	43d2      	mvns	r2, r2
 800cb32:	400a      	ands	r2, r1
 800cb34:	605a      	str	r2, [r3, #4]
 800cb36:	e006      	b.n	800cb46 <FMC_ITConfig+0xb6>
    }
    /* Disable the selected FMC_Bank5_6 interrupt */
    else
    {
      /* Disables the interrupt if the refresh error flag is not set */
      FMC_Bank5_6->SDRTR &= (uint32_t)~FMC_IT; 
 800cb38:	4b08      	ldr	r3, [pc, #32]	; (800cb5c <FMC_ITConfig+0xcc>)
 800cb3a:	4a08      	ldr	r2, [pc, #32]	; (800cb5c <FMC_ITConfig+0xcc>)
 800cb3c:	6951      	ldr	r1, [r2, #20]
 800cb3e:	68ba      	ldr	r2, [r7, #8]
 800cb40:	43d2      	mvns	r2, r2
 800cb42:	400a      	ands	r2, r1
 800cb44:	615a      	str	r2, [r3, #20]
    }
  }
}
 800cb46:	3714      	adds	r7, #20
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4e:	4770      	bx	lr
 800cb50:	a0000060 	.word	0xa0000060
 800cb54:	a0000080 	.word	0xa0000080
 800cb58:	a00000a0 	.word	0xa00000a0
 800cb5c:	a0000140 	.word	0xa0000140

0800cb60 <FMC_GetFlagStatus>:
  *            @arg FMC_FLAG_Refresh: Refresh error Flag.
  *            @arg FMC_FLAG_Busy: Busy status Flag.     
  * @retval The new state of FMC_FLAG (SET or RESET).
  */
FlagStatus FMC_GetFlagStatus(uint32_t FMC_Bank, uint32_t FMC_FLAG)
{
 800cb60:	b480      	push	{r7}
 800cb62:	b085      	sub	sp, #20
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
 800cb68:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsr = 0x00000000;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FMC_GETFLAG_BANK(FMC_Bank));
  assert_param(IS_FMC_GET_FLAG(FMC_FLAG));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2b10      	cmp	r3, #16
 800cb76:	d103      	bne.n	800cb80 <FMC_GetFlagStatus+0x20>
  {
    tmpsr = FMC_Bank2->SR2;
 800cb78:	4b14      	ldr	r3, [pc, #80]	; (800cbcc <FMC_GetFlagStatus+0x6c>)
 800cb7a:	685b      	ldr	r3, [r3, #4]
 800cb7c:	60bb      	str	r3, [r7, #8]
 800cb7e:	e012      	b.n	800cba6 <FMC_GetFlagStatus+0x46>
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb86:	d103      	bne.n	800cb90 <FMC_GetFlagStatus+0x30>
  {
    tmpsr = FMC_Bank3->SR3;
 800cb88:	4b11      	ldr	r3, [pc, #68]	; (800cbd0 <FMC_GetFlagStatus+0x70>)
 800cb8a:	685b      	ldr	r3, [r3, #4]
 800cb8c:	60bb      	str	r3, [r7, #8]
 800cb8e:	e00a      	b.n	800cba6 <FMC_GetFlagStatus+0x46>
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb96:	d103      	bne.n	800cba0 <FMC_GetFlagStatus+0x40>
  {
    tmpsr = FMC_Bank4->SR4;
 800cb98:	4b0e      	ldr	r3, [pc, #56]	; (800cbd4 <FMC_GetFlagStatus+0x74>)
 800cb9a:	685b      	ldr	r3, [r3, #4]
 800cb9c:	60bb      	str	r3, [r7, #8]
 800cb9e:	e002      	b.n	800cba6 <FMC_GetFlagStatus+0x46>
  }
  else 
  {
    tmpsr = FMC_Bank5_6->SDSR;
 800cba0:	4b0d      	ldr	r3, [pc, #52]	; (800cbd8 <FMC_GetFlagStatus+0x78>)
 800cba2:	699b      	ldr	r3, [r3, #24]
 800cba4:	60bb      	str	r3, [r7, #8]
  }
  
  /* Get the flag status */
  if ((tmpsr & FMC_FLAG) != FMC_FLAG )
 800cba6:	68ba      	ldr	r2, [r7, #8]
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	401a      	ands	r2, r3
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	429a      	cmp	r2, r3
 800cbb0:	d002      	beq.n	800cbb8 <FMC_GetFlagStatus+0x58>
  {
    bitstatus = RESET;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	73fb      	strb	r3, [r7, #15]
 800cbb6:	e001      	b.n	800cbbc <FMC_GetFlagStatus+0x5c>
  }
  else
  {
    bitstatus = SET;
 800cbb8:	2301      	movs	r3, #1
 800cbba:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 800cbbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	3714      	adds	r7, #20
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc8:	4770      	bx	lr
 800cbca:	bf00      	nop
 800cbcc:	a0000060 	.word	0xa0000060
 800cbd0:	a0000080 	.word	0xa0000080
 800cbd4:	a00000a0 	.word	0xa00000a0
 800cbd8:	a0000140 	.word	0xa0000140

0800cbdc <FMC_ClearFlag>:
  *            @arg FMC_FLAG_FallingEdge: Falling edge detection Flag.
  *            @arg FMC_FLAG_Refresh: Refresh error Flag.  
  * @retval None
  */
void FMC_ClearFlag(uint32_t FMC_Bank, uint32_t FMC_FLAG)
{
 800cbdc:	b480      	push	{r7}
 800cbde:	b083      	sub	sp, #12
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
 800cbe4:	6039      	str	r1, [r7, #0]
 /* Check the parameters */
  assert_param(IS_FMC_GETFLAG_BANK(FMC_Bank));
  assert_param(IS_FMC_CLEAR_FLAG(FMC_FLAG)) ;
    
  if(FMC_Bank == FMC_Bank2_NAND)
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2b10      	cmp	r3, #16
 800cbea:	d107      	bne.n	800cbfc <FMC_ClearFlag+0x20>
  {
    FMC_Bank2->SR2 &= (~FMC_FLAG); 
 800cbec:	4b15      	ldr	r3, [pc, #84]	; (800cc44 <FMC_ClearFlag+0x68>)
 800cbee:	4a15      	ldr	r2, [pc, #84]	; (800cc44 <FMC_ClearFlag+0x68>)
 800cbf0:	6851      	ldr	r1, [r2, #4]
 800cbf2:	683a      	ldr	r2, [r7, #0]
 800cbf4:	43d2      	mvns	r2, r2
 800cbf6:	400a      	ands	r2, r1
 800cbf8:	605a      	str	r2, [r3, #4]
 800cbfa:	e01e      	b.n	800cc3a <FMC_ClearFlag+0x5e>
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc02:	d107      	bne.n	800cc14 <FMC_ClearFlag+0x38>
  {
    FMC_Bank3->SR3 &= (~FMC_FLAG);
 800cc04:	4b10      	ldr	r3, [pc, #64]	; (800cc48 <FMC_ClearFlag+0x6c>)
 800cc06:	4a10      	ldr	r2, [pc, #64]	; (800cc48 <FMC_ClearFlag+0x6c>)
 800cc08:	6851      	ldr	r1, [r2, #4]
 800cc0a:	683a      	ldr	r2, [r7, #0]
 800cc0c:	43d2      	mvns	r2, r2
 800cc0e:	400a      	ands	r2, r1
 800cc10:	605a      	str	r2, [r3, #4]
 800cc12:	e012      	b.n	800cc3a <FMC_ClearFlag+0x5e>
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc1a:	d107      	bne.n	800cc2c <FMC_ClearFlag+0x50>
  {
    FMC_Bank4->SR4 &= (~FMC_FLAG);
 800cc1c:	4b0b      	ldr	r3, [pc, #44]	; (800cc4c <FMC_ClearFlag+0x70>)
 800cc1e:	4a0b      	ldr	r2, [pc, #44]	; (800cc4c <FMC_ClearFlag+0x70>)
 800cc20:	6851      	ldr	r1, [r2, #4]
 800cc22:	683a      	ldr	r2, [r7, #0]
 800cc24:	43d2      	mvns	r2, r2
 800cc26:	400a      	ands	r2, r1
 800cc28:	605a      	str	r2, [r3, #4]
 800cc2a:	e006      	b.n	800cc3a <FMC_ClearFlag+0x5e>
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    FMC_Bank5_6->SDRTR &= (~FMC_FLAG);
 800cc2c:	4b08      	ldr	r3, [pc, #32]	; (800cc50 <FMC_ClearFlag+0x74>)
 800cc2e:	4a08      	ldr	r2, [pc, #32]	; (800cc50 <FMC_ClearFlag+0x74>)
 800cc30:	6951      	ldr	r1, [r2, #20]
 800cc32:	683a      	ldr	r2, [r7, #0]
 800cc34:	43d2      	mvns	r2, r2
 800cc36:	400a      	ands	r2, r1
 800cc38:	615a      	str	r2, [r3, #20]
  }
  
}
 800cc3a:	370c      	adds	r7, #12
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc42:	4770      	bx	lr
 800cc44:	a0000060 	.word	0xa0000060
 800cc48:	a0000080 	.word	0xa0000080
 800cc4c:	a00000a0 	.word	0xa00000a0
 800cc50:	a0000140 	.word	0xa0000140

0800cc54 <FMC_GetITStatus>:
  *            @arg FMC_IT_FallingEdge: Falling edge detection interrupt.
  *            @arg FMC_IT_Refresh: Refresh error detection interrupt.    
  * @retval The new state of FMC_IT (SET or RESET).
  */
ITStatus FMC_GetITStatus(uint32_t FMC_Bank, uint32_t FMC_IT)
{
 800cc54:	b480      	push	{r7}
 800cc56:	b089      	sub	sp, #36	; 0x24
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
 800cc5c:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpsr = 0x0;
 800cc62:	2300      	movs	r3, #0
 800cc64:	61bb      	str	r3, [r7, #24]
  uint32_t tmpsr2 = 0x0;
 800cc66:	2300      	movs	r3, #0
 800cc68:	617b      	str	r3, [r7, #20]
  uint32_t itstatus = 0x0;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	613b      	str	r3, [r7, #16]
  uint32_t itenable = 0x0; 
 800cc6e:	2300      	movs	r3, #0
 800cc70:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_FMC_IT_BANK(FMC_Bank));
  assert_param(IS_FMC_GET_IT(FMC_IT));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2b10      	cmp	r3, #16
 800cc76:	d103      	bne.n	800cc80 <FMC_GetITStatus+0x2c>
  {
    tmpsr = FMC_Bank2->SR2;
 800cc78:	4b1f      	ldr	r3, [pc, #124]	; (800ccf8 <FMC_GetITStatus+0xa4>)
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	61bb      	str	r3, [r7, #24]
 800cc7e:	e015      	b.n	800ccac <FMC_GetITStatus+0x58>
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc86:	d103      	bne.n	800cc90 <FMC_GetITStatus+0x3c>
  {
    tmpsr = FMC_Bank3->SR3;
 800cc88:	4b1c      	ldr	r3, [pc, #112]	; (800ccfc <FMC_GetITStatus+0xa8>)
 800cc8a:	685b      	ldr	r3, [r3, #4]
 800cc8c:	61bb      	str	r3, [r7, #24]
 800cc8e:	e00d      	b.n	800ccac <FMC_GetITStatus+0x58>
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc96:	d103      	bne.n	800cca0 <FMC_GetITStatus+0x4c>
  {
    tmpsr = FMC_Bank4->SR4;
 800cc98:	4b19      	ldr	r3, [pc, #100]	; (800cd00 <FMC_GetITStatus+0xac>)
 800cc9a:	685b      	ldr	r3, [r3, #4]
 800cc9c:	61bb      	str	r3, [r7, #24]
 800cc9e:	e005      	b.n	800ccac <FMC_GetITStatus+0x58>
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    tmpsr = FMC_Bank5_6->SDRTR;
 800cca0:	4b18      	ldr	r3, [pc, #96]	; (800cd04 <FMC_GetITStatus+0xb0>)
 800cca2:	695b      	ldr	r3, [r3, #20]
 800cca4:	61bb      	str	r3, [r7, #24]
    tmpsr2 = FMC_Bank5_6->SDSR;
 800cca6:	4b17      	ldr	r3, [pc, #92]	; (800cd04 <FMC_GetITStatus+0xb0>)
 800cca8:	699b      	ldr	r3, [r3, #24]
 800ccaa:	617b      	str	r3, [r7, #20]
  } 
  
  /* get the IT enable bit status*/
  itenable = tmpsr & FMC_IT;
 800ccac:	69ba      	ldr	r2, [r7, #24]
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	4013      	ands	r3, r2
 800ccb2:	60fb      	str	r3, [r7, #12]
  
  /* get the corresponding IT Flag status*/
  if((FMC_Bank == FMC_Bank1_SDRAM) || (FMC_Bank == FMC_Bank2_SDRAM))
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d002      	beq.n	800ccc0 <FMC_GetITStatus+0x6c>
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2b01      	cmp	r3, #1
 800ccbe:	d104      	bne.n	800ccca <FMC_GetITStatus+0x76>
  {
    itstatus = tmpsr2 & FMC_SDSR_RE;  
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	f003 0301 	and.w	r3, r3, #1
 800ccc6:	613b      	str	r3, [r7, #16]
 800ccc8:	e004      	b.n	800ccd4 <FMC_GetITStatus+0x80>
  }           
  else
  {
    itstatus = tmpsr & (FMC_IT >> 3);  
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	08da      	lsrs	r2, r3, #3
 800ccce:	69bb      	ldr	r3, [r7, #24]
 800ccd0:	4013      	ands	r3, r2
 800ccd2:	613b      	str	r3, [r7, #16]
  }  
  
  if ((itstatus != (uint32_t)RESET)  && (itenable != (uint32_t)RESET))
 800ccd4:	693b      	ldr	r3, [r7, #16]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d005      	beq.n	800cce6 <FMC_GetITStatus+0x92>
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d002      	beq.n	800cce6 <FMC_GetITStatus+0x92>
  {
    bitstatus = SET;
 800cce0:	2301      	movs	r3, #1
 800cce2:	77fb      	strb	r3, [r7, #31]
 800cce4:	e001      	b.n	800ccea <FMC_GetITStatus+0x96>
  }
  else
  {
    bitstatus = RESET;
 800cce6:	2300      	movs	r3, #0
 800cce8:	77fb      	strb	r3, [r7, #31]
  }
  return bitstatus; 
 800ccea:	7ffb      	ldrb	r3, [r7, #31]
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	3724      	adds	r7, #36	; 0x24
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf6:	4770      	bx	lr
 800ccf8:	a0000060 	.word	0xa0000060
 800ccfc:	a0000080 	.word	0xa0000080
 800cd00:	a00000a0 	.word	0xa00000a0
 800cd04:	a0000140 	.word	0xa0000140

0800cd08 <FMC_ClearITPendingBit>:
  *            @arg FMC_IT_FallingEdge: Falling edge detection interrupt.
  *            @arg FMC_IT_Refresh: Refresh error detection interrupt.  
  * @retval None
  */
void FMC_ClearITPendingBit(uint32_t FMC_Bank, uint32_t FMC_IT)
{
 800cd08:	b480      	push	{r7}
 800cd0a:	b083      	sub	sp, #12
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
 800cd10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_IT_BANK(FMC_Bank));
  assert_param(IS_FMC_IT(FMC_IT));
    
  if(FMC_Bank == FMC_Bank2_NAND)
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2b10      	cmp	r3, #16
 800cd16:	d108      	bne.n	800cd2a <FMC_ClearITPendingBit+0x22>
  {
    FMC_Bank2->SR2 &= ~(FMC_IT >> 3); 
 800cd18:	4b16      	ldr	r3, [pc, #88]	; (800cd74 <FMC_ClearITPendingBit+0x6c>)
 800cd1a:	4a16      	ldr	r2, [pc, #88]	; (800cd74 <FMC_ClearITPendingBit+0x6c>)
 800cd1c:	6851      	ldr	r1, [r2, #4]
 800cd1e:	683a      	ldr	r2, [r7, #0]
 800cd20:	08d2      	lsrs	r2, r2, #3
 800cd22:	43d2      	mvns	r2, r2
 800cd24:	400a      	ands	r2, r1
 800cd26:	605a      	str	r2, [r3, #4]
 800cd28:	e01f      	b.n	800cd6a <FMC_ClearITPendingBit+0x62>
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd30:	d108      	bne.n	800cd44 <FMC_ClearITPendingBit+0x3c>
  {
    FMC_Bank3->SR3 &= ~(FMC_IT >> 3);
 800cd32:	4b11      	ldr	r3, [pc, #68]	; (800cd78 <FMC_ClearITPendingBit+0x70>)
 800cd34:	4a10      	ldr	r2, [pc, #64]	; (800cd78 <FMC_ClearITPendingBit+0x70>)
 800cd36:	6851      	ldr	r1, [r2, #4]
 800cd38:	683a      	ldr	r2, [r7, #0]
 800cd3a:	08d2      	lsrs	r2, r2, #3
 800cd3c:	43d2      	mvns	r2, r2
 800cd3e:	400a      	ands	r2, r1
 800cd40:	605a      	str	r2, [r3, #4]
 800cd42:	e012      	b.n	800cd6a <FMC_ClearITPendingBit+0x62>
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd4a:	d108      	bne.n	800cd5e <FMC_ClearITPendingBit+0x56>
  {
    FMC_Bank4->SR4 &= ~(FMC_IT >> 3);
 800cd4c:	4b0b      	ldr	r3, [pc, #44]	; (800cd7c <FMC_ClearITPendingBit+0x74>)
 800cd4e:	4a0b      	ldr	r2, [pc, #44]	; (800cd7c <FMC_ClearITPendingBit+0x74>)
 800cd50:	6851      	ldr	r1, [r2, #4]
 800cd52:	683a      	ldr	r2, [r7, #0]
 800cd54:	08d2      	lsrs	r2, r2, #3
 800cd56:	43d2      	mvns	r2, r2
 800cd58:	400a      	ands	r2, r1
 800cd5a:	605a      	str	r2, [r3, #4]
 800cd5c:	e005      	b.n	800cd6a <FMC_ClearITPendingBit+0x62>
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    FMC_Bank5_6->SDRTR |= FMC_SDRTR_CRE;
 800cd5e:	4b08      	ldr	r3, [pc, #32]	; (800cd80 <FMC_ClearITPendingBit+0x78>)
 800cd60:	4a07      	ldr	r2, [pc, #28]	; (800cd80 <FMC_ClearITPendingBit+0x78>)
 800cd62:	6952      	ldr	r2, [r2, #20]
 800cd64:	f042 0201 	orr.w	r2, r2, #1
 800cd68:	615a      	str	r2, [r3, #20]
  }
}
 800cd6a:	370c      	adds	r7, #12
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd72:	4770      	bx	lr
 800cd74:	a0000060 	.word	0xa0000060
 800cd78:	a0000080 	.word	0xa0000080
 800cd7c:	a00000a0 	.word	0xa00000a0
 800cd80:	a0000140 	.word	0xa0000140

0800cd84 <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b082      	sub	sp, #8
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 800cd8c:	687a      	ldr	r2, [r7, #4]
 800cd8e:	4b4b      	ldr	r3, [pc, #300]	; (800cebc <GPIO_DeInit+0x138>)
 800cd90:	429a      	cmp	r2, r3
 800cd92:	d108      	bne.n	800cda6 <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800cd94:	2001      	movs	r0, #1
 800cd96:	2101      	movs	r1, #1
 800cd98:	f002 ffe4 	bl	800fd64 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 800cd9c:	2001      	movs	r0, #1
 800cd9e:	2100      	movs	r1, #0
 800cda0:	f002 ffe0 	bl	800fd64 <RCC_AHB1PeriphResetCmd>
 800cda4:	e086      	b.n	800ceb4 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOB)
 800cda6:	687a      	ldr	r2, [r7, #4]
 800cda8:	4b45      	ldr	r3, [pc, #276]	; (800cec0 <GPIO_DeInit+0x13c>)
 800cdaa:	429a      	cmp	r2, r3
 800cdac:	d108      	bne.n	800cdc0 <GPIO_DeInit+0x3c>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800cdae:	2002      	movs	r0, #2
 800cdb0:	2101      	movs	r1, #1
 800cdb2:	f002 ffd7 	bl	800fd64 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 800cdb6:	2002      	movs	r0, #2
 800cdb8:	2100      	movs	r1, #0
 800cdba:	f002 ffd3 	bl	800fd64 <RCC_AHB1PeriphResetCmd>
 800cdbe:	e079      	b.n	800ceb4 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOC)
 800cdc0:	687a      	ldr	r2, [r7, #4]
 800cdc2:	4b40      	ldr	r3, [pc, #256]	; (800cec4 <GPIO_DeInit+0x140>)
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	d108      	bne.n	800cdda <GPIO_DeInit+0x56>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 800cdc8:	2004      	movs	r0, #4
 800cdca:	2101      	movs	r1, #1
 800cdcc:	f002 ffca 	bl	800fd64 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 800cdd0:	2004      	movs	r0, #4
 800cdd2:	2100      	movs	r1, #0
 800cdd4:	f002 ffc6 	bl	800fd64 <RCC_AHB1PeriphResetCmd>
 800cdd8:	e06c      	b.n	800ceb4 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOD)
 800cdda:	687a      	ldr	r2, [r7, #4]
 800cddc:	4b3a      	ldr	r3, [pc, #232]	; (800cec8 <GPIO_DeInit+0x144>)
 800cdde:	429a      	cmp	r2, r3
 800cde0:	d108      	bne.n	800cdf4 <GPIO_DeInit+0x70>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 800cde2:	2008      	movs	r0, #8
 800cde4:	2101      	movs	r1, #1
 800cde6:	f002 ffbd 	bl	800fd64 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 800cdea:	2008      	movs	r0, #8
 800cdec:	2100      	movs	r1, #0
 800cdee:	f002 ffb9 	bl	800fd64 <RCC_AHB1PeriphResetCmd>
 800cdf2:	e05f      	b.n	800ceb4 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOE)
 800cdf4:	687a      	ldr	r2, [r7, #4]
 800cdf6:	4b35      	ldr	r3, [pc, #212]	; (800cecc <GPIO_DeInit+0x148>)
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	d108      	bne.n	800ce0e <GPIO_DeInit+0x8a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 800cdfc:	2010      	movs	r0, #16
 800cdfe:	2101      	movs	r1, #1
 800ce00:	f002 ffb0 	bl	800fd64 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 800ce04:	2010      	movs	r0, #16
 800ce06:	2100      	movs	r1, #0
 800ce08:	f002 ffac 	bl	800fd64 <RCC_AHB1PeriphResetCmd>
 800ce0c:	e052      	b.n	800ceb4 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOF)
 800ce0e:	687a      	ldr	r2, [r7, #4]
 800ce10:	4b2f      	ldr	r3, [pc, #188]	; (800ced0 <GPIO_DeInit+0x14c>)
 800ce12:	429a      	cmp	r2, r3
 800ce14:	d108      	bne.n	800ce28 <GPIO_DeInit+0xa4>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 800ce16:	2020      	movs	r0, #32
 800ce18:	2101      	movs	r1, #1
 800ce1a:	f002 ffa3 	bl	800fd64 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 800ce1e:	2020      	movs	r0, #32
 800ce20:	2100      	movs	r1, #0
 800ce22:	f002 ff9f 	bl	800fd64 <RCC_AHB1PeriphResetCmd>
 800ce26:	e045      	b.n	800ceb4 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOG)
 800ce28:	687a      	ldr	r2, [r7, #4]
 800ce2a:	4b2a      	ldr	r3, [pc, #168]	; (800ced4 <GPIO_DeInit+0x150>)
 800ce2c:	429a      	cmp	r2, r3
 800ce2e:	d108      	bne.n	800ce42 <GPIO_DeInit+0xbe>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 800ce30:	2040      	movs	r0, #64	; 0x40
 800ce32:	2101      	movs	r1, #1
 800ce34:	f002 ff96 	bl	800fd64 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 800ce38:	2040      	movs	r0, #64	; 0x40
 800ce3a:	2100      	movs	r1, #0
 800ce3c:	f002 ff92 	bl	800fd64 <RCC_AHB1PeriphResetCmd>
 800ce40:	e038      	b.n	800ceb4 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOH)
 800ce42:	687a      	ldr	r2, [r7, #4]
 800ce44:	4b24      	ldr	r3, [pc, #144]	; (800ced8 <GPIO_DeInit+0x154>)
 800ce46:	429a      	cmp	r2, r3
 800ce48:	d108      	bne.n	800ce5c <GPIO_DeInit+0xd8>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 800ce4a:	2080      	movs	r0, #128	; 0x80
 800ce4c:	2101      	movs	r1, #1
 800ce4e:	f002 ff89 	bl	800fd64 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 800ce52:	2080      	movs	r0, #128	; 0x80
 800ce54:	2100      	movs	r1, #0
 800ce56:	f002 ff85 	bl	800fd64 <RCC_AHB1PeriphResetCmd>
 800ce5a:	e02b      	b.n	800ceb4 <GPIO_DeInit+0x130>
  }

  else if (GPIOx == GPIOI)
 800ce5c:	687a      	ldr	r2, [r7, #4]
 800ce5e:	4b1f      	ldr	r3, [pc, #124]	; (800cedc <GPIO_DeInit+0x158>)
 800ce60:	429a      	cmp	r2, r3
 800ce62:	d10a      	bne.n	800ce7a <GPIO_DeInit+0xf6>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 800ce64:	f44f 7080 	mov.w	r0, #256	; 0x100
 800ce68:	2101      	movs	r1, #1
 800ce6a:	f002 ff7b 	bl	800fd64 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 800ce6e:	f44f 7080 	mov.w	r0, #256	; 0x100
 800ce72:	2100      	movs	r1, #0
 800ce74:	f002 ff76 	bl	800fd64 <RCC_AHB1PeriphResetCmd>
 800ce78:	e01c      	b.n	800ceb4 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOJ)
 800ce7a:	687a      	ldr	r2, [r7, #4]
 800ce7c:	4b18      	ldr	r3, [pc, #96]	; (800cee0 <GPIO_DeInit+0x15c>)
 800ce7e:	429a      	cmp	r2, r3
 800ce80:	d10a      	bne.n	800ce98 <GPIO_DeInit+0x114>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
 800ce82:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ce86:	2101      	movs	r1, #1
 800ce88:	f002 ff6c 	bl	800fd64 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
 800ce8c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ce90:	2100      	movs	r1, #0
 800ce92:	f002 ff67 	bl	800fd64 <RCC_AHB1PeriphResetCmd>
 800ce96:	e00d      	b.n	800ceb4 <GPIO_DeInit+0x130>
  }
  else
  {
    if (GPIOx == GPIOK)
 800ce98:	687a      	ldr	r2, [r7, #4]
 800ce9a:	4b12      	ldr	r3, [pc, #72]	; (800cee4 <GPIO_DeInit+0x160>)
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	d109      	bne.n	800ceb4 <GPIO_DeInit+0x130>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
 800cea0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800cea4:	2101      	movs	r1, #1
 800cea6:	f002 ff5d 	bl	800fd64 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
 800ceaa:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800ceae:	2100      	movs	r1, #0
 800ceb0:	f002 ff58 	bl	800fd64 <RCC_AHB1PeriphResetCmd>
    }
  }
}
 800ceb4:	3708      	adds	r7, #8
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}
 800ceba:	bf00      	nop
 800cebc:	40020000 	.word	0x40020000
 800cec0:	40020400 	.word	0x40020400
 800cec4:	40020800 	.word	0x40020800
 800cec8:	40020c00 	.word	0x40020c00
 800cecc:	40021000 	.word	0x40021000
 800ced0:	40021400 	.word	0x40021400
 800ced4:	40021800 	.word	0x40021800
 800ced8:	40021c00 	.word	0x40021c00
 800cedc:	40022000 	.word	0x40022000
 800cee0:	40022400 	.word	0x40022400
 800cee4:	40022800 	.word	0x40022800

0800cee8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800cee8:	b480      	push	{r7}
 800ceea:	b087      	sub	sp, #28
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
 800cef0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800cef2:	2300      	movs	r3, #0
 800cef4:	617b      	str	r3, [r7, #20]
 800cef6:	2300      	movs	r3, #0
 800cef8:	613b      	str	r3, [r7, #16]
 800cefa:	2300      	movs	r3, #0
 800cefc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800cefe:	2300      	movs	r3, #0
 800cf00:	617b      	str	r3, [r7, #20]
 800cf02:	e076      	b.n	800cff2 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800cf04:	697b      	ldr	r3, [r7, #20]
 800cf06:	2201      	movs	r2, #1
 800cf08:	fa02 f303 	lsl.w	r3, r2, r3
 800cf0c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	681a      	ldr	r2, [r3, #0]
 800cf12:	693b      	ldr	r3, [r7, #16]
 800cf14:	4013      	ands	r3, r2
 800cf16:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800cf18:	68fa      	ldr	r2, [r7, #12]
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	429a      	cmp	r2, r3
 800cf1e:	d165      	bne.n	800cfec <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681a      	ldr	r2, [r3, #0]
 800cf24:	697b      	ldr	r3, [r7, #20]
 800cf26:	005b      	lsls	r3, r3, #1
 800cf28:	2103      	movs	r1, #3
 800cf2a:	fa01 f303 	lsl.w	r3, r1, r3
 800cf2e:	43db      	mvns	r3, r3
 800cf30:	401a      	ands	r2, r3
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681a      	ldr	r2, [r3, #0]
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	791b      	ldrb	r3, [r3, #4]
 800cf3e:	4619      	mov	r1, r3
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	005b      	lsls	r3, r3, #1
 800cf44:	fa01 f303 	lsl.w	r3, r1, r3
 800cf48:	431a      	orrs	r2, r3
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	791b      	ldrb	r3, [r3, #4]
 800cf52:	2b01      	cmp	r3, #1
 800cf54:	d003      	beq.n	800cf5e <GPIO_Init+0x76>
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	791b      	ldrb	r3, [r3, #4]
 800cf5a:	2b02      	cmp	r3, #2
 800cf5c:	d12e      	bne.n	800cfbc <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	689a      	ldr	r2, [r3, #8]
 800cf62:	697b      	ldr	r3, [r7, #20]
 800cf64:	005b      	lsls	r3, r3, #1
 800cf66:	2103      	movs	r1, #3
 800cf68:	fa01 f303 	lsl.w	r3, r1, r3
 800cf6c:	43db      	mvns	r3, r3
 800cf6e:	401a      	ands	r2, r3
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	689a      	ldr	r2, [r3, #8]
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	795b      	ldrb	r3, [r3, #5]
 800cf7c:	4619      	mov	r1, r3
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	005b      	lsls	r3, r3, #1
 800cf82:	fa01 f303 	lsl.w	r3, r1, r3
 800cf86:	431a      	orrs	r2, r3
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	685a      	ldr	r2, [r3, #4]
 800cf90:	697b      	ldr	r3, [r7, #20]
 800cf92:	b29b      	uxth	r3, r3
 800cf94:	2101      	movs	r1, #1
 800cf96:	fa01 f303 	lsl.w	r3, r1, r3
 800cf9a:	43db      	mvns	r3, r3
 800cf9c:	401a      	ands	r2, r3
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	685a      	ldr	r2, [r3, #4]
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	799b      	ldrb	r3, [r3, #6]
 800cfaa:	4619      	mov	r1, r3
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	b29b      	uxth	r3, r3
 800cfb0:	fa01 f303 	lsl.w	r3, r1, r3
 800cfb4:	b29b      	uxth	r3, r3
 800cfb6:	431a      	orrs	r2, r3
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	68da      	ldr	r2, [r3, #12]
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	b29b      	uxth	r3, r3
 800cfc4:	005b      	lsls	r3, r3, #1
 800cfc6:	2103      	movs	r1, #3
 800cfc8:	fa01 f303 	lsl.w	r3, r1, r3
 800cfcc:	43db      	mvns	r3, r3
 800cfce:	401a      	ands	r2, r3
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	68da      	ldr	r2, [r3, #12]
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	79db      	ldrb	r3, [r3, #7]
 800cfdc:	4619      	mov	r1, r3
 800cfde:	697b      	ldr	r3, [r7, #20]
 800cfe0:	005b      	lsls	r3, r3, #1
 800cfe2:	fa01 f303 	lsl.w	r3, r1, r3
 800cfe6:	431a      	orrs	r2, r3
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800cfec:	697b      	ldr	r3, [r7, #20]
 800cfee:	3301      	adds	r3, #1
 800cff0:	617b      	str	r3, [r7, #20]
 800cff2:	697b      	ldr	r3, [r7, #20]
 800cff4:	2b0f      	cmp	r3, #15
 800cff6:	d985      	bls.n	800cf04 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800cff8:	371c      	adds	r7, #28
 800cffa:	46bd      	mov	sp, r7
 800cffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d000:	4770      	bx	lr
 800d002:	bf00      	nop

0800d004 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 800d004:	b480      	push	{r7}
 800d006:	b083      	sub	sp, #12
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d012:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2200      	movs	r2, #0
 800d018:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2200      	movs	r2, #0
 800d01e:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2200      	movs	r2, #0
 800d024:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2200      	movs	r2, #0
 800d02a:	71da      	strb	r2, [r3, #7]
}
 800d02c:	370c      	adds	r7, #12
 800d02e:	46bd      	mov	sp, r7
 800d030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d034:	4770      	bx	lr
 800d036:	bf00      	nop

0800d038 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d038:	b480      	push	{r7}
 800d03a:	b085      	sub	sp, #20
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
 800d040:	460b      	mov	r3, r1
 800d042:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0x00010000;
 800d044:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d048:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 800d04a:	887a      	ldrh	r2, [r7, #2]
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	4313      	orrs	r3, r2
 800d050:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800d052:	68fa      	ldr	r2, [r7, #12]
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 800d058:	887a      	ldrh	r2, [r7, #2]
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800d05e:	68fa      	ldr	r2, [r7, #12]
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	69db      	ldr	r3, [r3, #28]
 800d068:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	69db      	ldr	r3, [r3, #28]
 800d06e:	60fb      	str	r3, [r7, #12]
}
 800d070:	3714      	adds	r7, #20
 800d072:	46bd      	mov	sp, r7
 800d074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d078:	4770      	bx	lr
 800d07a:	bf00      	nop

0800d07c <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d07c:	b480      	push	{r7}
 800d07e:	b085      	sub	sp, #20
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	460b      	mov	r3, r1
 800d086:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800d088:	2300      	movs	r3, #0
 800d08a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	691a      	ldr	r2, [r3, #16]
 800d090:	887b      	ldrh	r3, [r7, #2]
 800d092:	4013      	ands	r3, r2
 800d094:	2b00      	cmp	r3, #0
 800d096:	d002      	beq.n	800d09e <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 800d098:	2301      	movs	r3, #1
 800d09a:	73fb      	strb	r3, [r7, #15]
 800d09c:	e001      	b.n	800d0a2 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d0a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	3714      	adds	r7, #20
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ae:	4770      	bx	lr

0800d0b0 <GPIO_ReadInputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 800d0b0:	b480      	push	{r7}
 800d0b2:	b083      	sub	sp, #12
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	691b      	ldr	r3, [r3, #16]
 800d0bc:	b29b      	uxth	r3, r3
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	370c      	adds	r7, #12
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c8:	4770      	bx	lr
 800d0ca:	bf00      	nop

0800d0cc <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d0cc:	b480      	push	{r7}
 800d0ce:	b085      	sub	sp, #20
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
 800d0d4:	460b      	mov	r3, r1
 800d0d6:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	695a      	ldr	r2, [r3, #20]
 800d0e0:	887b      	ldrh	r3, [r7, #2]
 800d0e2:	4013      	ands	r3, r2
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d002      	beq.n	800d0ee <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	73fb      	strb	r3, [r7, #15]
 800d0ec:	e001      	b.n	800d0f2 <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d0f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3714      	adds	r7, #20
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fe:	4770      	bx	lr

0800d100 <GPIO_ReadOutputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 800d100:	b480      	push	{r7}
 800d102:	b083      	sub	sp, #12
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	695b      	ldr	r3, [r3, #20]
 800d10c:	b29b      	uxth	r3, r3
}
 800d10e:	4618      	mov	r0, r3
 800d110:	370c      	adds	r7, #12
 800d112:	46bd      	mov	sp, r7
 800d114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d118:	4770      	bx	lr
 800d11a:	bf00      	nop

0800d11c <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d11c:	b480      	push	{r7}
 800d11e:	b083      	sub	sp, #12
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
 800d124:	460b      	mov	r3, r1
 800d126:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	887a      	ldrh	r2, [r7, #2]
 800d12c:	831a      	strh	r2, [r3, #24]
}
 800d12e:	370c      	adds	r7, #12
 800d130:	46bd      	mov	sp, r7
 800d132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d136:	4770      	bx	lr

0800d138 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d138:	b480      	push	{r7}
 800d13a:	b083      	sub	sp, #12
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
 800d140:	460b      	mov	r3, r1
 800d142:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	887a      	ldrh	r2, [r7, #2]
 800d148:	835a      	strh	r2, [r3, #26]
}
 800d14a:	370c      	adds	r7, #12
 800d14c:	46bd      	mov	sp, r7
 800d14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d152:	4770      	bx	lr

0800d154 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 800d154:	b480      	push	{r7}
 800d156:	b083      	sub	sp, #12
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
 800d15c:	4613      	mov	r3, r2
 800d15e:	460a      	mov	r2, r1
 800d160:	807a      	strh	r2, [r7, #2]
 800d162:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 800d164:	787b      	ldrb	r3, [r7, #1]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d003      	beq.n	800d172 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	887a      	ldrh	r2, [r7, #2]
 800d16e:	831a      	strh	r2, [r3, #24]
 800d170:	e002      	b.n	800d178 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	887a      	ldrh	r2, [r7, #2]
 800d176:	835a      	strh	r2, [r3, #26]
  }
}
 800d178:	370c      	adds	r7, #12
 800d17a:	46bd      	mov	sp, r7
 800d17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d180:	4770      	bx	lr
 800d182:	bf00      	nop

0800d184 <GPIO_Write>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 800d184:	b480      	push	{r7}
 800d186:	b083      	sub	sp, #12
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
 800d18c:	460b      	mov	r3, r1
 800d18e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 800d190:	887a      	ldrh	r2, [r7, #2]
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	615a      	str	r2, [r3, #20]
}
 800d196:	370c      	adds	r7, #12
 800d198:	46bd      	mov	sp, r7
 800d19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19e:	4770      	bx	lr

0800d1a0 <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d1a0:	b480      	push	{r7}
 800d1a2:	b083      	sub	sp, #12
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
 800d1a8:	460b      	mov	r3, r1
 800d1aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	695a      	ldr	r2, [r3, #20]
 800d1b0:	887b      	ldrh	r3, [r7, #2]
 800d1b2:	405a      	eors	r2, r3
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	615a      	str	r2, [r3, #20]
}
 800d1b8:	370c      	adds	r7, #12
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c0:	4770      	bx	lr
 800d1c2:	bf00      	nop

0800d1c4 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800d1c4:	b480      	push	{r7}
 800d1c6:	b085      	sub	sp, #20
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
 800d1cc:	4613      	mov	r3, r2
 800d1ce:	460a      	mov	r2, r1
 800d1d0:	807a      	strh	r2, [r7, #2]
 800d1d2:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800d1d8:	2300      	movs	r3, #0
 800d1da:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800d1dc:	787a      	ldrb	r2, [r7, #1]
 800d1de:	887b      	ldrh	r3, [r7, #2]
 800d1e0:	f003 0307 	and.w	r3, r3, #7
 800d1e4:	009b      	lsls	r3, r3, #2
 800d1e6:	fa02 f303 	lsl.w	r3, r2, r3
 800d1ea:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800d1ec:	887b      	ldrh	r3, [r7, #2]
 800d1ee:	08db      	lsrs	r3, r3, #3
 800d1f0:	b29b      	uxth	r3, r3
 800d1f2:	461a      	mov	r2, r3
 800d1f4:	887b      	ldrh	r3, [r7, #2]
 800d1f6:	08db      	lsrs	r3, r3, #3
 800d1f8:	b29b      	uxth	r3, r3
 800d1fa:	4619      	mov	r1, r3
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	3108      	adds	r1, #8
 800d200:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800d204:	887b      	ldrh	r3, [r7, #2]
 800d206:	f003 0307 	and.w	r3, r3, #7
 800d20a:	009b      	lsls	r3, r3, #2
 800d20c:	200f      	movs	r0, #15
 800d20e:	fa00 f303 	lsl.w	r3, r0, r3
 800d212:	43db      	mvns	r3, r3
 800d214:	4019      	ands	r1, r3
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	3208      	adds	r2, #8
 800d21a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800d21e:	887b      	ldrh	r3, [r7, #2]
 800d220:	08db      	lsrs	r3, r3, #3
 800d222:	b29b      	uxth	r3, r3
 800d224:	461a      	mov	r2, r3
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	3208      	adds	r2, #8
 800d22a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	4313      	orrs	r3, r2
 800d232:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800d234:	887b      	ldrh	r3, [r7, #2]
 800d236:	08db      	lsrs	r3, r3, #3
 800d238:	b29b      	uxth	r3, r3
 800d23a:	461a      	mov	r2, r3
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	3208      	adds	r2, #8
 800d240:	68b9      	ldr	r1, [r7, #8]
 800d242:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800d246:	3714      	adds	r7, #20
 800d248:	46bd      	mov	sp, r7
 800d24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24e:	4770      	bx	lr

0800d250 <HASH_DeInit>:
  * @brief  De-initializes the HASH peripheral registers to their default reset values
  * @param  None
  * @retval None
  */
void HASH_DeInit(void)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	af00      	add	r7, sp, #0
  /* Enable HASH reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, ENABLE);
 800d254:	2020      	movs	r0, #32
 800d256:	2101      	movs	r1, #1
 800d258:	f002 fda2 	bl	800fda0 <RCC_AHB2PeriphResetCmd>
  /* Release HASH from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, DISABLE);
 800d25c:	2020      	movs	r0, #32
 800d25e:	2100      	movs	r1, #0
 800d260:	f002 fd9e 	bl	800fda0 <RCC_AHB2PeriphResetCmd>
}
 800d264:	bd80      	pop	{r7, pc}
 800d266:	bf00      	nop

0800d268 <HASH_Init>:
  * @note   The field HASH_HMACKeyType in HASH_InitTypeDef must be filled only 
  *          if the algorithm mode is HMAC.       
  * @retval None
  */
void HASH_Init(HASH_InitTypeDef* HASH_InitStruct)
{
 800d268:	b480      	push	{r7}
 800d26a:	b083      	sub	sp, #12
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
  assert_param(IS_HASH_ALGOSELECTION(HASH_InitStruct->HASH_AlgoSelection));
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
 800d270:	4a18      	ldr	r2, [pc, #96]	; (800d2d4 <HASH_Init+0x6c>)
 800d272:	4b18      	ldr	r3, [pc, #96]	; (800d2d4 <HASH_Init+0x6c>)
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d27a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d27e:	6013      	str	r3, [r2, #0]
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 800d280:	4b14      	ldr	r3, [pc, #80]	; (800d2d4 <HASH_Init+0x6c>)
 800d282:	4a14      	ldr	r2, [pc, #80]	; (800d2d4 <HASH_Init+0x6c>)
 800d284:	6811      	ldr	r1, [r2, #0]
 800d286:	687a      	ldr	r2, [r7, #4]
 800d288:	6810      	ldr	r0, [r2, #0]
               HASH_InitStruct->HASH_DataType | \
 800d28a:	687a      	ldr	r2, [r7, #4]
 800d28c:	6892      	ldr	r2, [r2, #8]
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 800d28e:	4310      	orrs	r0, r2
               HASH_InitStruct->HASH_DataType | \
               HASH_InitStruct->HASH_AlgoMode);
 800d290:	687a      	ldr	r2, [r7, #4]
 800d292:	6852      	ldr	r2, [r2, #4]
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
               HASH_InitStruct->HASH_DataType | \
 800d294:	4302      	orrs	r2, r0
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 800d296:	430a      	orrs	r2, r1
 800d298:	601a      	str	r2, [r3, #0]
               HASH_InitStruct->HASH_DataType | \
               HASH_InitStruct->HASH_AlgoMode);
  
  /* if algorithm mode is HMAC, set the Key */  
  if(HASH_InitStruct->HASH_AlgoMode == HASH_AlgoMode_HMAC) 
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	685b      	ldr	r3, [r3, #4]
 800d29e:	2b40      	cmp	r3, #64	; 0x40
 800d2a0:	d10c      	bne.n	800d2bc <HASH_Init+0x54>
  {
    assert_param(IS_HASH_HMAC_KEYTYPE(HASH_InitStruct->HASH_HMACKeyType));
    HASH->CR &= ~HASH_CR_LKEY;
 800d2a2:	4b0c      	ldr	r3, [pc, #48]	; (800d2d4 <HASH_Init+0x6c>)
 800d2a4:	4a0b      	ldr	r2, [pc, #44]	; (800d2d4 <HASH_Init+0x6c>)
 800d2a6:	6812      	ldr	r2, [r2, #0]
 800d2a8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d2ac:	601a      	str	r2, [r3, #0]
    HASH->CR |= HASH_InitStruct->HASH_HMACKeyType;
 800d2ae:	4b09      	ldr	r3, [pc, #36]	; (800d2d4 <HASH_Init+0x6c>)
 800d2b0:	4a08      	ldr	r2, [pc, #32]	; (800d2d4 <HASH_Init+0x6c>)
 800d2b2:	6811      	ldr	r1, [r2, #0]
 800d2b4:	687a      	ldr	r2, [r7, #4]
 800d2b6:	68d2      	ldr	r2, [r2, #12]
 800d2b8:	430a      	orrs	r2, r1
 800d2ba:	601a      	str	r2, [r3, #0]
  }

  /* Reset the HASH processor core, so that the HASH will be ready to compute 
     the message digest of a new message */
  HASH->CR |= HASH_CR_INIT;  
 800d2bc:	4b05      	ldr	r3, [pc, #20]	; (800d2d4 <HASH_Init+0x6c>)
 800d2be:	4a05      	ldr	r2, [pc, #20]	; (800d2d4 <HASH_Init+0x6c>)
 800d2c0:	6812      	ldr	r2, [r2, #0]
 800d2c2:	f042 0204 	orr.w	r2, r2, #4
 800d2c6:	601a      	str	r2, [r3, #0]
}
 800d2c8:	370c      	adds	r7, #12
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d0:	4770      	bx	lr
 800d2d2:	bf00      	nop
 800d2d4:	50060400 	.word	0x50060400

0800d2d8 <HASH_StructInit>:
  *  @note  The default values set are : Processor mode is HASH, Algorithm selected is SHA1,
  *          Data type selected is 32b and HMAC Key Type is short key.  
  * @retval None
  */
void HASH_StructInit(HASH_InitTypeDef* HASH_InitStruct)
{
 800d2d8:	b480      	push	{r7}
 800d2da:	b083      	sub	sp, #12
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
  /* Initialize the HASH_AlgoSelection member */
  HASH_InitStruct->HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	601a      	str	r2, [r3, #0]

  /* Initialize the HASH_AlgoMode member */
  HASH_InitStruct->HASH_AlgoMode = HASH_AlgoMode_HASH;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	605a      	str	r2, [r3, #4]

  /* Initialize the HASH_DataType member */
  HASH_InitStruct->HASH_DataType = HASH_DataType_32b;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	609a      	str	r2, [r3, #8]

  /* Initialize the HASH_HMACKeyType member */
  HASH_InitStruct->HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	60da      	str	r2, [r3, #12]
}
 800d2f8:	370c      	adds	r7, #12
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d300:	4770      	bx	lr
 800d302:	bf00      	nop

0800d304 <HASH_Reset>:
  *         interrupt and HASH_FLAG_DCIS flag. 
  * @param  None
  * @retval None
  */
void HASH_Reset(void)
{
 800d304:	b480      	push	{r7}
 800d306:	af00      	add	r7, sp, #0
  /* Reset the HASH processor core */
  HASH->CR |= HASH_CR_INIT;
 800d308:	4b04      	ldr	r3, [pc, #16]	; (800d31c <HASH_Reset+0x18>)
 800d30a:	4a04      	ldr	r2, [pc, #16]	; (800d31c <HASH_Reset+0x18>)
 800d30c:	6812      	ldr	r2, [r2, #0]
 800d30e:	f042 0204 	orr.w	r2, r2, #4
 800d312:	601a      	str	r2, [r3, #0]
}
 800d314:	46bd      	mov	sp, r7
 800d316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31a:	4770      	bx	lr
 800d31c:	50060400 	.word	0x50060400

0800d320 <HASH_SetLastWordValidBitsNbr>:
  * @note   The Number of valid bits must be set before to start the message 
  *         digest competition (in Hash and HMAC) and key treatment(in HMAC).    
  * @retval None
  */
void HASH_SetLastWordValidBitsNbr(uint16_t ValidNumber)
{
 800d320:	b480      	push	{r7}
 800d322:	b083      	sub	sp, #12
 800d324:	af00      	add	r7, sp, #0
 800d326:	4603      	mov	r3, r0
 800d328:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_HASH_VALIDBITSNUMBER(ValidNumber));
  
  /* Configure the Number of valid bits in last word of the message */
  HASH->STR &= ~(HASH_STR_NBW);
 800d32a:	4b08      	ldr	r3, [pc, #32]	; (800d34c <HASH_SetLastWordValidBitsNbr+0x2c>)
 800d32c:	4a07      	ldr	r2, [pc, #28]	; (800d34c <HASH_SetLastWordValidBitsNbr+0x2c>)
 800d32e:	6892      	ldr	r2, [r2, #8]
 800d330:	f022 021f 	bic.w	r2, r2, #31
 800d334:	609a      	str	r2, [r3, #8]
  HASH->STR |= ValidNumber;
 800d336:	4b05      	ldr	r3, [pc, #20]	; (800d34c <HASH_SetLastWordValidBitsNbr+0x2c>)
 800d338:	4a04      	ldr	r2, [pc, #16]	; (800d34c <HASH_SetLastWordValidBitsNbr+0x2c>)
 800d33a:	6891      	ldr	r1, [r2, #8]
 800d33c:	88fa      	ldrh	r2, [r7, #6]
 800d33e:	430a      	orrs	r2, r1
 800d340:	609a      	str	r2, [r3, #8]
}
 800d342:	370c      	adds	r7, #12
 800d344:	46bd      	mov	sp, r7
 800d346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34a:	4770      	bx	lr
 800d34c:	50060400 	.word	0x50060400

0800d350 <HASH_DataIn>:
  * @brief  Writes data in the Data Input FIFO
  * @param  Data: new data of the message to be processed.
  * @retval None
  */
void HASH_DataIn(uint32_t Data)
{
 800d350:	b480      	push	{r7}
 800d352:	b083      	sub	sp, #12
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
  /* Write in the DIN register a new data */
  HASH->DIN = Data;
 800d358:	4b03      	ldr	r3, [pc, #12]	; (800d368 <HASH_DataIn+0x18>)
 800d35a:	687a      	ldr	r2, [r7, #4]
 800d35c:	605a      	str	r2, [r3, #4]
}
 800d35e:	370c      	adds	r7, #12
 800d360:	46bd      	mov	sp, r7
 800d362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d366:	4770      	bx	lr
 800d368:	50060400 	.word	0x50060400

0800d36c <HASH_GetInFIFOWordsNbr>:
  * @brief  Returns the number of words already pushed into the IN FIFO.
  * @param  None
  * @retval The value of words already pushed into the IN FIFO.
  */
uint8_t HASH_GetInFIFOWordsNbr(void)
{
 800d36c:	b480      	push	{r7}
 800d36e:	af00      	add	r7, sp, #0
  /* Return the value of NBW bits */
  return ((HASH->CR & HASH_CR_NBW) >> 8);
 800d370:	4b05      	ldr	r3, [pc, #20]	; (800d388 <HASH_GetInFIFOWordsNbr+0x1c>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800d378:	0a1b      	lsrs	r3, r3, #8
 800d37a:	b2db      	uxtb	r3, r3
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	46bd      	mov	sp, r7
 800d380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d384:	4770      	bx	lr
 800d386:	bf00      	nop
 800d388:	50060400 	.word	0x50060400

0800d38c <HASH_GetDigest>:
  * @param  HASH_MessageDigest: pointer to a HASH_MsgDigest structure which will 
  *         hold the message digest result 
  * @retval None
  */
void HASH_GetDigest(HASH_MsgDigest* HASH_MessageDigest)
{
 800d38c:	b480      	push	{r7}
 800d38e:	b083      	sub	sp, #12
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
  /* Get the data field */
  HASH_MessageDigest->Data[0] = HASH->HR[0];
 800d394:	4b12      	ldr	r3, [pc, #72]	; (800d3e0 <HASH_GetDigest+0x54>)
 800d396:	68da      	ldr	r2, [r3, #12]
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	601a      	str	r2, [r3, #0]
  HASH_MessageDigest->Data[1] = HASH->HR[1];
 800d39c:	4b10      	ldr	r3, [pc, #64]	; (800d3e0 <HASH_GetDigest+0x54>)
 800d39e:	691a      	ldr	r2, [r3, #16]
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	605a      	str	r2, [r3, #4]
  HASH_MessageDigest->Data[2] = HASH->HR[2];
 800d3a4:	4b0e      	ldr	r3, [pc, #56]	; (800d3e0 <HASH_GetDigest+0x54>)
 800d3a6:	695a      	ldr	r2, [r3, #20]
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	609a      	str	r2, [r3, #8]
  HASH_MessageDigest->Data[3] = HASH->HR[3];
 800d3ac:	4b0c      	ldr	r3, [pc, #48]	; (800d3e0 <HASH_GetDigest+0x54>)
 800d3ae:	699a      	ldr	r2, [r3, #24]
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	60da      	str	r2, [r3, #12]
  HASH_MessageDigest->Data[4] = HASH->HR[4];
 800d3b4:	4b0a      	ldr	r3, [pc, #40]	; (800d3e0 <HASH_GetDigest+0x54>)
 800d3b6:	69da      	ldr	r2, [r3, #28]
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	611a      	str	r2, [r3, #16]
  HASH_MessageDigest->Data[5] = HASH_DIGEST->HR[5];
 800d3bc:	4b09      	ldr	r3, [pc, #36]	; (800d3e4 <HASH_GetDigest+0x58>)
 800d3be:	695a      	ldr	r2, [r3, #20]
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	615a      	str	r2, [r3, #20]
  HASH_MessageDigest->Data[6] = HASH_DIGEST->HR[6];
 800d3c4:	4b07      	ldr	r3, [pc, #28]	; (800d3e4 <HASH_GetDigest+0x58>)
 800d3c6:	699a      	ldr	r2, [r3, #24]
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	619a      	str	r2, [r3, #24]
  HASH_MessageDigest->Data[7] = HASH_DIGEST->HR[7];
 800d3cc:	4b05      	ldr	r3, [pc, #20]	; (800d3e4 <HASH_GetDigest+0x58>)
 800d3ce:	69da      	ldr	r2, [r3, #28]
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	61da      	str	r2, [r3, #28]
}
 800d3d4:	370c      	adds	r7, #12
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3dc:	4770      	bx	lr
 800d3de:	bf00      	nop
 800d3e0:	50060400 	.word	0x50060400
 800d3e4:	50060710 	.word	0x50060710

0800d3e8 <HASH_StartDigest>:
  * @brief  Starts the message padding and calculation of the final message     
  * @param  None
  * @retval None
  */
void HASH_StartDigest(void)
{
 800d3e8:	b480      	push	{r7}
 800d3ea:	af00      	add	r7, sp, #0
  /* Start the Digest calculation */
  HASH->STR |= HASH_STR_DCAL;
 800d3ec:	4b04      	ldr	r3, [pc, #16]	; (800d400 <HASH_StartDigest+0x18>)
 800d3ee:	4a04      	ldr	r2, [pc, #16]	; (800d400 <HASH_StartDigest+0x18>)
 800d3f0:	6892      	ldr	r2, [r2, #8]
 800d3f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d3f6:	609a      	str	r2, [r3, #8]
}
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fe:	4770      	bx	lr
 800d400:	50060400 	.word	0x50060400

0800d404 <HASH_SaveContext>:
  * @param  HASH_ContextSave: pointer to a HASH_Context structure that contains
  *         the repository for current context.
  * @retval None
  */
void HASH_SaveContext(HASH_Context* HASH_ContextSave)
{
 800d404:	b480      	push	{r7}
 800d406:	b085      	sub	sp, #20
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 800d40c:	2300      	movs	r3, #0
 800d40e:	73fb      	strb	r3, [r7, #15]
  
  /* save context registers */
  HASH_ContextSave->HASH_IMR = HASH->IMR;  
 800d410:	4b12      	ldr	r3, [pc, #72]	; (800d45c <HASH_SaveContext+0x58>)
 800d412:	6a1a      	ldr	r2, [r3, #32]
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	601a      	str	r2, [r3, #0]
  HASH_ContextSave->HASH_STR = HASH->STR;      
 800d418:	4b10      	ldr	r3, [pc, #64]	; (800d45c <HASH_SaveContext+0x58>)
 800d41a:	689a      	ldr	r2, [r3, #8]
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	605a      	str	r2, [r3, #4]
  HASH_ContextSave->HASH_CR  = HASH->CR;     
 800d420:	4b0e      	ldr	r3, [pc, #56]	; (800d45c <HASH_SaveContext+0x58>)
 800d422:	681a      	ldr	r2, [r3, #0]
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	609a      	str	r2, [r3, #8]
  for(i=0; i<=53;i++)
 800d428:	2300      	movs	r3, #0
 800d42a:	73fb      	strb	r3, [r7, #15]
 800d42c:	e00d      	b.n	800d44a <HASH_SaveContext+0x46>
  {
     HASH_ContextSave->HASH_CSR[i] = HASH->CSR[i];
 800d42e:	7bfb      	ldrb	r3, [r7, #15]
 800d430:	4a0a      	ldr	r2, [pc, #40]	; (800d45c <HASH_SaveContext+0x58>)
 800d432:	7bf9      	ldrb	r1, [r7, #15]
 800d434:	313e      	adds	r1, #62	; 0x3e
 800d436:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800d43a:	6879      	ldr	r1, [r7, #4]
 800d43c:	3302      	adds	r3, #2
 800d43e:	009b      	lsls	r3, r3, #2
 800d440:	440b      	add	r3, r1
 800d442:	605a      	str	r2, [r3, #4]
  
  /* save context registers */
  HASH_ContextSave->HASH_IMR = HASH->IMR;  
  HASH_ContextSave->HASH_STR = HASH->STR;      
  HASH_ContextSave->HASH_CR  = HASH->CR;     
  for(i=0; i<=53;i++)
 800d444:	7bfb      	ldrb	r3, [r7, #15]
 800d446:	3301      	adds	r3, #1
 800d448:	73fb      	strb	r3, [r7, #15]
 800d44a:	7bfb      	ldrb	r3, [r7, #15]
 800d44c:	2b35      	cmp	r3, #53	; 0x35
 800d44e:	d9ee      	bls.n	800d42e <HASH_SaveContext+0x2a>
  {
     HASH_ContextSave->HASH_CSR[i] = HASH->CSR[i];
  }   
}
 800d450:	3714      	adds	r7, #20
 800d452:	46bd      	mov	sp, r7
 800d454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d458:	4770      	bx	lr
 800d45a:	bf00      	nop
 800d45c:	50060400 	.word	0x50060400

0800d460 <HASH_RestoreContext>:
  * @param  HASH_ContextRestore: pointer to a HASH_Context structure that contains
  *         the repository for saved context.
  * @retval None
  */
void HASH_RestoreContext(HASH_Context* HASH_ContextRestore)  
{
 800d460:	b480      	push	{r7}
 800d462:	b085      	sub	sp, #20
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 800d468:	2300      	movs	r3, #0
 800d46a:	73fb      	strb	r3, [r7, #15]
  
  /* restore context registers */
  HASH->IMR = HASH_ContextRestore->HASH_IMR;   
 800d46c:	4b15      	ldr	r3, [pc, #84]	; (800d4c4 <HASH_RestoreContext+0x64>)
 800d46e:	687a      	ldr	r2, [r7, #4]
 800d470:	6812      	ldr	r2, [r2, #0]
 800d472:	621a      	str	r2, [r3, #32]
  HASH->STR = HASH_ContextRestore->HASH_STR;     
 800d474:	4b13      	ldr	r3, [pc, #76]	; (800d4c4 <HASH_RestoreContext+0x64>)
 800d476:	687a      	ldr	r2, [r7, #4]
 800d478:	6852      	ldr	r2, [r2, #4]
 800d47a:	609a      	str	r2, [r3, #8]
  HASH->CR = HASH_ContextRestore->HASH_CR;
 800d47c:	4b11      	ldr	r3, [pc, #68]	; (800d4c4 <HASH_RestoreContext+0x64>)
 800d47e:	687a      	ldr	r2, [r7, #4]
 800d480:	6892      	ldr	r2, [r2, #8]
 800d482:	601a      	str	r2, [r3, #0]
  
  /* Initialize the hash processor */
  HASH->CR |= HASH_CR_INIT; 
 800d484:	4b0f      	ldr	r3, [pc, #60]	; (800d4c4 <HASH_RestoreContext+0x64>)
 800d486:	4a0f      	ldr	r2, [pc, #60]	; (800d4c4 <HASH_RestoreContext+0x64>)
 800d488:	6812      	ldr	r2, [r2, #0]
 800d48a:	f042 0204 	orr.w	r2, r2, #4
 800d48e:	601a      	str	r2, [r3, #0]
  
   /* continue restoring context registers */     
  for(i=0; i<=53;i++)
 800d490:	2300      	movs	r3, #0
 800d492:	73fb      	strb	r3, [r7, #15]
 800d494:	e00e      	b.n	800d4b4 <HASH_RestoreContext+0x54>
  {
     HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
 800d496:	4a0b      	ldr	r2, [pc, #44]	; (800d4c4 <HASH_RestoreContext+0x64>)
 800d498:	7bf8      	ldrb	r0, [r7, #15]
 800d49a:	7bfb      	ldrb	r3, [r7, #15]
 800d49c:	6879      	ldr	r1, [r7, #4]
 800d49e:	3302      	adds	r3, #2
 800d4a0:	009b      	lsls	r3, r3, #2
 800d4a2:	440b      	add	r3, r1
 800d4a4:	6859      	ldr	r1, [r3, #4]
 800d4a6:	f100 033e 	add.w	r3, r0, #62	; 0x3e
 800d4aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  
  /* Initialize the hash processor */
  HASH->CR |= HASH_CR_INIT; 
  
   /* continue restoring context registers */     
  for(i=0; i<=53;i++)
 800d4ae:	7bfb      	ldrb	r3, [r7, #15]
 800d4b0:	3301      	adds	r3, #1
 800d4b2:	73fb      	strb	r3, [r7, #15]
 800d4b4:	7bfb      	ldrb	r3, [r7, #15]
 800d4b6:	2b35      	cmp	r3, #53	; 0x35
 800d4b8:	d9ed      	bls.n	800d496 <HASH_RestoreContext+0x36>
  {
     HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
  }   
}
 800d4ba:	3714      	adds	r7, #20
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c2:	4770      	bx	lr
 800d4c4:	50060400 	.word	0x50060400

0800d4c8 <HASH_AutoStartDigest>:
  * @param  NewState: new state of the selected HASH DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HASH_AutoStartDigest(FunctionalState NewState)
{
 800d4c8:	b480      	push	{r7}
 800d4ca:	b083      	sub	sp, #12
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800d4d2:	79fb      	ldrb	r3, [r7, #7]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d006      	beq.n	800d4e6 <HASH_AutoStartDigest+0x1e>
  {
    /* Enable the auto start of the final message digest at the end of DMA transfer */
    HASH->CR &= ~HASH_CR_MDMAT;
 800d4d8:	4b08      	ldr	r3, [pc, #32]	; (800d4fc <HASH_AutoStartDigest+0x34>)
 800d4da:	4a08      	ldr	r2, [pc, #32]	; (800d4fc <HASH_AutoStartDigest+0x34>)
 800d4dc:	6812      	ldr	r2, [r2, #0]
 800d4de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d4e2:	601a      	str	r2, [r3, #0]
 800d4e4:	e005      	b.n	800d4f2 <HASH_AutoStartDigest+0x2a>
  }
  else
  {
    /* Disable the auto start of the final message digest at the end of DMA transfer */
    HASH->CR |= HASH_CR_MDMAT;
 800d4e6:	4b05      	ldr	r3, [pc, #20]	; (800d4fc <HASH_AutoStartDigest+0x34>)
 800d4e8:	4a04      	ldr	r2, [pc, #16]	; (800d4fc <HASH_AutoStartDigest+0x34>)
 800d4ea:	6812      	ldr	r2, [r2, #0]
 800d4ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d4f0:	601a      	str	r2, [r3, #0]
  }
}
 800d4f2:	370c      	adds	r7, #12
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fa:	4770      	bx	lr
 800d4fc:	50060400 	.word	0x50060400

0800d500 <HASH_DMACmd>:
  * @param  NewState: new state of the selected HASH DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HASH_DMACmd(FunctionalState NewState)
{
 800d500:	b480      	push	{r7}
 800d502:	b083      	sub	sp, #12
 800d504:	af00      	add	r7, sp, #0
 800d506:	4603      	mov	r3, r0
 800d508:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800d50a:	79fb      	ldrb	r3, [r7, #7]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d006      	beq.n	800d51e <HASH_DMACmd+0x1e>
  {
    /* Enable the HASH DMA request */
    HASH->CR |= HASH_CR_DMAE;
 800d510:	4b08      	ldr	r3, [pc, #32]	; (800d534 <HASH_DMACmd+0x34>)
 800d512:	4a08      	ldr	r2, [pc, #32]	; (800d534 <HASH_DMACmd+0x34>)
 800d514:	6812      	ldr	r2, [r2, #0]
 800d516:	f042 0208 	orr.w	r2, r2, #8
 800d51a:	601a      	str	r2, [r3, #0]
 800d51c:	e005      	b.n	800d52a <HASH_DMACmd+0x2a>
  }
  else
  {
    /* Disable the HASH DMA request */
    HASH->CR &= ~HASH_CR_DMAE;
 800d51e:	4b05      	ldr	r3, [pc, #20]	; (800d534 <HASH_DMACmd+0x34>)
 800d520:	4a04      	ldr	r2, [pc, #16]	; (800d534 <HASH_DMACmd+0x34>)
 800d522:	6812      	ldr	r2, [r2, #0]
 800d524:	f022 0208 	bic.w	r2, r2, #8
 800d528:	601a      	str	r2, [r3, #0]
  }
}
 800d52a:	370c      	adds	r7, #12
 800d52c:	46bd      	mov	sp, r7
 800d52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d532:	4770      	bx	lr
 800d534:	50060400 	.word	0x50060400

0800d538 <HASH_ITConfig>:
  * @param  NewState: new state of the specified HASH interrupt.
  *           This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HASH_ITConfig(uint32_t HASH_IT, FunctionalState NewState)
{
 800d538:	b480      	push	{r7}
 800d53a:	b083      	sub	sp, #12
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
 800d540:	460b      	mov	r3, r1
 800d542:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_HASH_IT(HASH_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800d544:	78fb      	ldrb	r3, [r7, #3]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d006      	beq.n	800d558 <HASH_ITConfig+0x20>
  {
    /* Enable the selected HASH interrupt */
    HASH->IMR |= HASH_IT;
 800d54a:	4b09      	ldr	r3, [pc, #36]	; (800d570 <HASH_ITConfig+0x38>)
 800d54c:	4a08      	ldr	r2, [pc, #32]	; (800d570 <HASH_ITConfig+0x38>)
 800d54e:	6a11      	ldr	r1, [r2, #32]
 800d550:	687a      	ldr	r2, [r7, #4]
 800d552:	430a      	orrs	r2, r1
 800d554:	621a      	str	r2, [r3, #32]
 800d556:	e006      	b.n	800d566 <HASH_ITConfig+0x2e>
  }
  else
  {
    /* Disable the selected HASH interrupt */
    HASH->IMR &= (uint32_t)(~HASH_IT);
 800d558:	4b05      	ldr	r3, [pc, #20]	; (800d570 <HASH_ITConfig+0x38>)
 800d55a:	4a05      	ldr	r2, [pc, #20]	; (800d570 <HASH_ITConfig+0x38>)
 800d55c:	6a11      	ldr	r1, [r2, #32]
 800d55e:	687a      	ldr	r2, [r7, #4]
 800d560:	43d2      	mvns	r2, r2
 800d562:	400a      	ands	r2, r1
 800d564:	621a      	str	r2, [r3, #32]
  }
}
 800d566:	370c      	adds	r7, #12
 800d568:	46bd      	mov	sp, r7
 800d56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56e:	4770      	bx	lr
 800d570:	50060400 	.word	0x50060400

0800d574 <HASH_GetFlagStatus>:
  *            @arg HASH_FLAG_DMAS: DMAS Status flag
  *            @arg HASH_FLAG_DINNE: Data Input register (DIN) not empty status flag
  * @retval The new state of HASH_FLAG (SET or RESET)
  */
FlagStatus HASH_GetFlagStatus(uint32_t HASH_FLAG)
{
 800d574:	b480      	push	{r7}
 800d576:	b085      	sub	sp, #20
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800d57c:	2300      	movs	r3, #0
 800d57e:	73fb      	strb	r3, [r7, #15]
  uint32_t tempreg = 0;
 800d580:	2300      	movs	r3, #0
 800d582:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HASH_GET_FLAG(HASH_FLAG));

  /* check if the FLAG is in CR register */
  if ((HASH_FLAG & HASH_FLAG_DINNE) != (uint32_t)RESET ) 
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d003      	beq.n	800d596 <HASH_GetFlagStatus+0x22>
  {
    tempreg = HASH->CR;
 800d58e:	4b0c      	ldr	r3, [pc, #48]	; (800d5c0 <HASH_GetFlagStatus+0x4c>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	60bb      	str	r3, [r7, #8]
 800d594:	e002      	b.n	800d59c <HASH_GetFlagStatus+0x28>
  }
  else /* The FLAG is in SR register */
  {
    tempreg = HASH->SR;
 800d596:	4b0a      	ldr	r3, [pc, #40]	; (800d5c0 <HASH_GetFlagStatus+0x4c>)
 800d598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d59a:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified HASH flag */
  if ((tempreg & HASH_FLAG) != (uint32_t)RESET)
 800d59c:	68ba      	ldr	r2, [r7, #8]
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	4013      	ands	r3, r2
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d002      	beq.n	800d5ac <HASH_GetFlagStatus+0x38>
  {
    /* HASH is set */
    bitstatus = SET;
 800d5a6:	2301      	movs	r3, #1
 800d5a8:	73fb      	strb	r3, [r7, #15]
 800d5aa:	e001      	b.n	800d5b0 <HASH_GetFlagStatus+0x3c>
  }
  else
  {
    /* HASH_FLAG is reset */
    bitstatus = RESET;
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the HASH_FLAG status */
  return  bitstatus;
 800d5b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	3714      	adds	r7, #20
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5bc:	4770      	bx	lr
 800d5be:	bf00      	nop
 800d5c0:	50060400 	.word	0x50060400

0800d5c4 <HASH_ClearFlag>:
  *            @arg HASH_FLAG_DINIS: Data Input Flag
  *            @arg HASH_FLAG_DCIS: Digest Calculation Completion Flag                       
  * @retval None
  */
void HASH_ClearFlag(uint32_t HASH_FLAG)
{
 800d5c4:	b480      	push	{r7}
 800d5c6:	b083      	sub	sp, #12
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HASH_CLEAR_FLAG(HASH_FLAG));
  
  /* Clear the selected HASH flags */
  HASH->SR = ~(uint32_t)HASH_FLAG;
 800d5cc:	4b04      	ldr	r3, [pc, #16]	; (800d5e0 <HASH_ClearFlag+0x1c>)
 800d5ce:	687a      	ldr	r2, [r7, #4]
 800d5d0:	43d2      	mvns	r2, r2
 800d5d2:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d5d4:	370c      	adds	r7, #12
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5dc:	4770      	bx	lr
 800d5de:	bf00      	nop
 800d5e0:	50060400 	.word	0x50060400

0800d5e4 <HASH_GetITStatus>:
  *            @arg HASH_IT_DINI: Data Input interrupt
  *            @arg HASH_IT_DCI: Digest Calculation Completion Interrupt
  * @retval The new state of HASH_IT (SET or RESET).
  */
ITStatus HASH_GetITStatus(uint32_t HASH_IT)
{
 800d5e4:	b480      	push	{r7}
 800d5e6:	b085      	sub	sp, #20
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_HASH_GET_IT(HASH_IT));  


  /* Check the status of the specified HASH interrupt */
  tmpreg =  HASH->SR;
 800d5f4:	4b0b      	ldr	r3, [pc, #44]	; (800d624 <HASH_GetITStatus+0x40>)
 800d5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5f8:	60bb      	str	r3, [r7, #8]

  if (((HASH->IMR & tmpreg) & HASH_IT) != RESET)
 800d5fa:	4b0a      	ldr	r3, [pc, #40]	; (800d624 <HASH_GetITStatus+0x40>)
 800d5fc:	6a1a      	ldr	r2, [r3, #32]
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	401a      	ands	r2, r3
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	4013      	ands	r3, r2
 800d606:	2b00      	cmp	r3, #0
 800d608:	d002      	beq.n	800d610 <HASH_GetITStatus+0x2c>
  {
    /* HASH_IT is set */
    bitstatus = SET;
 800d60a:	2301      	movs	r3, #1
 800d60c:	73fb      	strb	r3, [r7, #15]
 800d60e:	e001      	b.n	800d614 <HASH_GetITStatus+0x30>
  }
  else
  {
    /* HASH_IT is reset */
    bitstatus = RESET;
 800d610:	2300      	movs	r3, #0
 800d612:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the HASH_IT status */
  return bitstatus;
 800d614:	7bfb      	ldrb	r3, [r7, #15]
}
 800d616:	4618      	mov	r0, r3
 800d618:	3714      	adds	r7, #20
 800d61a:	46bd      	mov	sp, r7
 800d61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d620:	4770      	bx	lr
 800d622:	bf00      	nop
 800d624:	50060400 	.word	0x50060400

0800d628 <HASH_ClearITPendingBit>:
  *            @arg HASH_IT_DINI: Data Input interrupt
  *            @arg HASH_IT_DCI: Digest Calculation Completion Interrupt
  * @retval None
  */
void HASH_ClearITPendingBit(uint32_t HASH_IT)
{
 800d628:	b480      	push	{r7}
 800d62a:	b083      	sub	sp, #12
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HASH_IT(HASH_IT));

  /* Clear the selected HASH interrupt pending bit */
  HASH->SR = (uint32_t)(~HASH_IT);
 800d630:	4b04      	ldr	r3, [pc, #16]	; (800d644 <HASH_ClearITPendingBit+0x1c>)
 800d632:	687a      	ldr	r2, [r7, #4]
 800d634:	43d2      	mvns	r2, r2
 800d636:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d638:	370c      	adds	r7, #12
 800d63a:	46bd      	mov	sp, r7
 800d63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d640:	4770      	bx	lr
 800d642:	bf00      	nop
 800d644:	50060400 	.word	0x50060400

0800d648 <HASH_MD5>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b09c      	sub	sp, #112	; 0x70
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	60f8      	str	r0, [r7, #12]
 800d650:	60b9      	str	r1, [r7, #8]
 800d652:	607a      	str	r2, [r7, #4]
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 800d654:	2300      	movs	r3, #0
 800d656:	837b      	strh	r3, [r7, #26]
  uint32_t i = 0;
 800d658:	2300      	movs	r3, #0
 800d65a:	66fb      	str	r3, [r7, #108]	; 0x6c
  __IO uint32_t counter = 0;
 800d65c:	2300      	movs	r3, #0
 800d65e:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 800d660:	2300      	movs	r3, #0
 800d662:	663b      	str	r3, [r7, #96]	; 0x60
  ErrorStatus status = SUCCESS;
 800d664:	2301      	movs	r3, #1
 800d666:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  uint32_t inputaddr  = (uint32_t)Input;
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t outputaddr = (uint32_t)Output;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	65fb      	str	r3, [r7, #92]	; 0x5c


  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	b29b      	uxth	r3, r3
 800d676:	f003 0303 	and.w	r3, r3, #3
 800d67a:	b29b      	uxth	r3, r3
 800d67c:	00db      	lsls	r3, r3, #3
 800d67e:	b29b      	uxth	r3, r3
 800d680:	837b      	strh	r3, [r7, #26]

  /* HASH peripheral initialization */
  HASH_DeInit();
 800d682:	f7ff fde5 	bl	800d250 <HASH_DeInit>

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 800d686:	2380      	movs	r3, #128	; 0x80
 800d688:	63fb      	str	r3, [r7, #60]	; 0x3c
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
 800d68a:	2300      	movs	r3, #0
 800d68c:	643b      	str	r3, [r7, #64]	; 0x40
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 800d68e:	2320      	movs	r3, #32
 800d690:	647b      	str	r3, [r7, #68]	; 0x44
  HASH_Init(&MD5_HASH_InitStructure);
 800d692:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d696:	4618      	mov	r0, r3
 800d698:	f7ff fde6 	bl	800d268 <HASH_Init>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 800d69c:	8b7b      	ldrh	r3, [r7, #26]
 800d69e:	b29b      	uxth	r3, r3
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	f7ff fe3d 	bl	800d320 <HASH_SetLastWordValidBitsNbr>

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d6aa:	e00a      	b.n	800d6c2 <HASH_MD5+0x7a>
  {
    HASH_DataIn(*(uint32_t*)inputaddr);
 800d6ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f7ff fe4d 	bl	800d350 <HASH_DataIn>
    inputaddr+=4;
 800d6b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d6b8:	3304      	adds	r3, #4
 800d6ba:	667b      	str	r3, [r7, #100]	; 0x64

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 800d6bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6be:	3304      	adds	r3, #4
 800d6c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d6c2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	429a      	cmp	r2, r3
 800d6c8:	d3f0      	bcc.n	800d6ac <HASH_MD5+0x64>
    HASH_DataIn(*(uint32_t*)inputaddr);
    inputaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 800d6ca:	f7ff fe8d 	bl	800d3e8 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800d6ce:	2008      	movs	r0, #8
 800d6d0:	f7ff ff50 	bl	800d574 <HASH_GetFlagStatus>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	663b      	str	r3, [r7, #96]	; 0x60
    counter++;
 800d6d8:	697b      	ldr	r3, [r7, #20]
 800d6da:	3301      	adds	r3, #1
 800d6dc:	617b      	str	r3, [r7, #20]
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 800d6de:	697b      	ldr	r3, [r7, #20]
 800d6e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d6e4:	d002      	beq.n	800d6ec <HASH_MD5+0xa4>
 800d6e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d1f0      	bne.n	800d6ce <HASH_MD5+0x86>

  if (busystatus != RESET)
 800d6ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d003      	beq.n	800d6fa <HASH_MD5+0xb2>
  {
     status = ERROR;
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800d6f8:	e025      	b.n	800d746 <HASH_MD5+0xfe>
  }
  else
  {
    /* Read the message digest */
    HASH_GetDigest(&MD5_MessageDigest);
 800d6fa:	f107 031c 	add.w	r3, r7, #28
 800d6fe:	4618      	mov	r0, r3
 800d700:	f7ff fe44 	bl	800d38c <HASH_GetDigest>
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 800d704:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d706:	69fa      	ldr	r2, [r7, #28]
 800d708:	65ba      	str	r2, [r7, #88]	; 0x58
 800d70a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d70c:	ba12      	rev	r2, r2
 800d70e:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800d710:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d712:	3304      	adds	r3, #4
 800d714:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 800d716:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d718:	6a3a      	ldr	r2, [r7, #32]
 800d71a:	657a      	str	r2, [r7, #84]	; 0x54
 800d71c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d71e:	ba12      	rev	r2, r2
 800d720:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800d722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d724:	3304      	adds	r3, #4
 800d726:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 800d728:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d72a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d72c:	653a      	str	r2, [r7, #80]	; 0x50
 800d72e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d730:	ba12      	rev	r2, r2
 800d732:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800d734:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d736:	3304      	adds	r3, #4
 800d738:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 800d73a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d73c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d73e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d740:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d742:	ba12      	rev	r2, r2
 800d744:	601a      	str	r2, [r3, #0]
  }
  return status; 
 800d746:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	3770      	adds	r7, #112	; 0x70
 800d74e:	46bd      	mov	sp, r7
 800d750:	bd80      	pop	{r7, pc}
 800d752:	bf00      	nop

0800d754 <HMAC_MD5>:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
                     uint32_t Ilen, uint8_t Output[16])
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b09c      	sub	sp, #112	; 0x70
 800d758:	af00      	add	r7, sp, #0
 800d75a:	60f8      	str	r0, [r7, #12]
 800d75c:	60b9      	str	r1, [r7, #8]
 800d75e:	607a      	str	r2, [r7, #4]
 800d760:	603b      	str	r3, [r7, #0]
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 800d762:	2300      	movs	r3, #0
 800d764:	82fb      	strh	r3, [r7, #22]
  __IO uint16_t nbvalidbitskey = 0;
 800d766:	2300      	movs	r3, #0
 800d768:	82bb      	strh	r3, [r7, #20]
  uint32_t i = 0;
 800d76a:	2300      	movs	r3, #0
 800d76c:	66fb      	str	r3, [r7, #108]	; 0x6c
  __IO uint32_t counter = 0;
 800d76e:	2300      	movs	r3, #0
 800d770:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 800d772:	2300      	movs	r3, #0
 800d774:	65fb      	str	r3, [r7, #92]	; 0x5c
  ErrorStatus status = SUCCESS;
 800d776:	2301      	movs	r3, #1
 800d778:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  uint32_t keyaddr    = (uint32_t)Key;
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t inputaddr  = (uint32_t)Input;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t outputaddr = (uint32_t)Output;
 800d784:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d786:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	b29b      	uxth	r3, r3
 800d78c:	f003 0303 	and.w	r3, r3, #3
 800d790:	b29b      	uxth	r3, r3
 800d792:	00db      	lsls	r3, r3, #3
 800d794:	b29b      	uxth	r3, r3
 800d796:	82fb      	strh	r3, [r7, #22]

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 800d798:	68bb      	ldr	r3, [r7, #8]
 800d79a:	b29b      	uxth	r3, r3
 800d79c:	f003 0303 	and.w	r3, r3, #3
 800d7a0:	b29b      	uxth	r3, r3
 800d7a2:	00db      	lsls	r3, r3, #3
 800d7a4:	b29b      	uxth	r3, r3
 800d7a6:	82bb      	strh	r3, [r7, #20]
   
  /* HASH peripheral initialization */
  HASH_DeInit();
 800d7a8:	f7ff fd52 	bl	800d250 <HASH_DeInit>

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 800d7ac:	2380      	movs	r3, #128	; 0x80
 800d7ae:	63bb      	str	r3, [r7, #56]	; 0x38
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 800d7b0:	2340      	movs	r3, #64	; 0x40
 800d7b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 800d7b4:	2320      	movs	r3, #32
 800d7b6:	643b      	str	r3, [r7, #64]	; 0x40
  if(Keylen > 64)
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	2b40      	cmp	r3, #64	; 0x40
 800d7bc:	d903      	bls.n	800d7c6 <HMAC_MD5+0x72>
  {
    /* HMAC long Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 800d7be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d7c2:	647b      	str	r3, [r7, #68]	; 0x44
 800d7c4:	e001      	b.n	800d7ca <HMAC_MD5+0x76>
  }
  else
  {
    /* HMAC short Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	647b      	str	r3, [r7, #68]	; 0x44
  }
  HASH_Init(&MD5_HASH_InitStructure);
 800d7ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f7ff fd4a 	bl	800d268 <HASH_Init>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 800d7d4:	8abb      	ldrh	r3, [r7, #20]
 800d7d6:	b29b      	uxth	r3, r3
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f7ff fda1 	bl	800d320 <HASH_SetLastWordValidBitsNbr>

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 800d7de:	2300      	movs	r3, #0
 800d7e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d7e2:	e00a      	b.n	800d7fa <HMAC_MD5+0xa6>
  {
    HASH_DataIn(*(uint32_t*)keyaddr);
 800d7e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f7ff fdb1 	bl	800d350 <HASH_DataIn>
    keyaddr+=4;
 800d7ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d7f0:	3304      	adds	r3, #4
 800d7f2:	667b      	str	r3, [r7, #100]	; 0x64

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 800d7f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d7f6:	3304      	adds	r3, #4
 800d7f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d7fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d7fc:	68bb      	ldr	r3, [r7, #8]
 800d7fe:	429a      	cmp	r2, r3
 800d800:	d3f0      	bcc.n	800d7e4 <HMAC_MD5+0x90>
    HASH_DataIn(*(uint32_t*)keyaddr);
    keyaddr+=4;
  }
  
  /* Start the HASH processor */
  HASH_StartDigest();
 800d802:	f7ff fdf1 	bl	800d3e8 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800d806:	2008      	movs	r0, #8
 800d808:	f7ff feb4 	bl	800d574 <HASH_GetFlagStatus>
 800d80c:	4603      	mov	r3, r0
 800d80e:	65fb      	str	r3, [r7, #92]	; 0x5c
    counter++;
 800d810:	693b      	ldr	r3, [r7, #16]
 800d812:	3301      	adds	r3, #1
 800d814:	613b      	str	r3, [r7, #16]
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 800d816:	693b      	ldr	r3, [r7, #16]
 800d818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d81c:	d002      	beq.n	800d824 <HMAC_MD5+0xd0>
 800d81e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d820:	2b00      	cmp	r3, #0
 800d822:	d1f0      	bne.n	800d806 <HMAC_MD5+0xb2>

  if (busystatus != RESET)
 800d824:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d826:	2b00      	cmp	r3, #0
 800d828:	d003      	beq.n	800d832 <HMAC_MD5+0xde>
  {
     status = ERROR;
 800d82a:	2300      	movs	r3, #0
 800d82c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800d830:	e089      	b.n	800d946 <HMAC_MD5+0x1f2>
  }
  else
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 800d832:	8afb      	ldrh	r3, [r7, #22]
 800d834:	b29b      	uxth	r3, r3
 800d836:	4618      	mov	r0, r3
 800d838:	f7ff fd72 	bl	800d320 <HASH_SetLastWordValidBitsNbr>

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 800d83c:	2300      	movs	r3, #0
 800d83e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d840:	e00a      	b.n	800d858 <HMAC_MD5+0x104>
    {
      HASH_DataIn(*(uint32_t*)inputaddr);
 800d842:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	4618      	mov	r0, r3
 800d848:	f7ff fd82 	bl	800d350 <HASH_DataIn>
      inputaddr+=4;
 800d84c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d84e:	3304      	adds	r3, #4
 800d850:	663b      	str	r3, [r7, #96]	; 0x60
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 800d852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d854:	3304      	adds	r3, #4
 800d856:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d858:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d3f0      	bcc.n	800d842 <HMAC_MD5+0xee>
      HASH_DataIn(*(uint32_t*)inputaddr);
      inputaddr+=4;
    }

    /* Start the HASH processor */
    HASH_StartDigest();
 800d860:	f7ff fdc2 	bl	800d3e8 <HASH_StartDigest>

    /* wait until the Busy flag is RESET */
    counter =0;
 800d864:	2300      	movs	r3, #0
 800d866:	613b      	str	r3, [r7, #16]
    do
    {
       busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800d868:	2008      	movs	r0, #8
 800d86a:	f7ff fe83 	bl	800d574 <HASH_GetFlagStatus>
 800d86e:	4603      	mov	r3, r0
 800d870:	65fb      	str	r3, [r7, #92]	; 0x5c
       counter++;
 800d872:	693b      	ldr	r3, [r7, #16]
 800d874:	3301      	adds	r3, #1
 800d876:	613b      	str	r3, [r7, #16]
    }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 800d878:	693b      	ldr	r3, [r7, #16]
 800d87a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d87e:	d002      	beq.n	800d886 <HMAC_MD5+0x132>
 800d880:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d882:	2b00      	cmp	r3, #0
 800d884:	d1f0      	bne.n	800d868 <HMAC_MD5+0x114>

    if (busystatus != RESET)
 800d886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d003      	beq.n	800d894 <HMAC_MD5+0x140>
    {
      status = ERROR;
 800d88c:	2300      	movs	r3, #0
 800d88e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800d892:	e058      	b.n	800d946 <HMAC_MD5+0x1f2>
    }
    else
    {  
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 800d894:	8abb      	ldrh	r3, [r7, #20]
 800d896:	b29b      	uxth	r3, r3
 800d898:	4618      	mov	r0, r3
 800d89a:	f7ff fd41 	bl	800d320 <HASH_SetLastWordValidBitsNbr>

      /* Write the Key */
      keyaddr = (uint32_t)Key;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	667b      	str	r3, [r7, #100]	; 0x64
      for(i=0; i<Keylen; i+=4)
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d8a6:	e00a      	b.n	800d8be <HMAC_MD5+0x16a>
      {
        HASH_DataIn(*(uint32_t*)keyaddr);
 800d8a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f7ff fd4f 	bl	800d350 <HASH_DataIn>
        keyaddr+=4;
 800d8b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d8b4:	3304      	adds	r3, #4
 800d8b6:	667b      	str	r3, [r7, #100]	; 0x64
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 800d8b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8ba:	3304      	adds	r3, #4
 800d8bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d8be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d8c0:	68bb      	ldr	r3, [r7, #8]
 800d8c2:	429a      	cmp	r2, r3
 800d8c4:	d3f0      	bcc.n	800d8a8 <HMAC_MD5+0x154>
        HASH_DataIn(*(uint32_t*)keyaddr);
        keyaddr+=4;
      }
  
       /* Start the HASH processor */
       HASH_StartDigest();
 800d8c6:	f7ff fd8f 	bl	800d3e8 <HASH_StartDigest>

       /* wait until the Busy flag is RESET */
       counter =0;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	613b      	str	r3, [r7, #16]
       do
       {
          busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800d8ce:	2008      	movs	r0, #8
 800d8d0:	f7ff fe50 	bl	800d574 <HASH_GetFlagStatus>
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	65fb      	str	r3, [r7, #92]	; 0x5c
          counter++;
 800d8d8:	693b      	ldr	r3, [r7, #16]
 800d8da:	3301      	adds	r3, #1
 800d8dc:	613b      	str	r3, [r7, #16]
      }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 800d8de:	693b      	ldr	r3, [r7, #16]
 800d8e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d8e4:	d002      	beq.n	800d8ec <HMAC_MD5+0x198>
 800d8e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d1f0      	bne.n	800d8ce <HMAC_MD5+0x17a>

      if (busystatus != RESET)
 800d8ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d003      	beq.n	800d8fa <HMAC_MD5+0x1a6>
      {
         status = ERROR;
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800d8f8:	e025      	b.n	800d946 <HMAC_MD5+0x1f2>
      }
      else
      {
         /* Read the message digest */
         HASH_GetDigest(&MD5_MessageDigest);
 800d8fa:	f107 0318 	add.w	r3, r7, #24
 800d8fe:	4618      	mov	r0, r3
 800d900:	f7ff fd44 	bl	800d38c <HASH_GetDigest>
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 800d904:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d906:	69ba      	ldr	r2, [r7, #24]
 800d908:	657a      	str	r2, [r7, #84]	; 0x54
 800d90a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d90c:	ba12      	rev	r2, r2
 800d90e:	601a      	str	r2, [r3, #0]
         outputaddr+=4;
 800d910:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d912:	3304      	adds	r3, #4
 800d914:	65bb      	str	r3, [r7, #88]	; 0x58
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 800d916:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d918:	69fa      	ldr	r2, [r7, #28]
 800d91a:	653a      	str	r2, [r7, #80]	; 0x50
 800d91c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d91e:	ba12      	rev	r2, r2
 800d920:	601a      	str	r2, [r3, #0]
         outputaddr+=4;
 800d922:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d924:	3304      	adds	r3, #4
 800d926:	65bb      	str	r3, [r7, #88]	; 0x58
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 800d928:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d92a:	6a3a      	ldr	r2, [r7, #32]
 800d92c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d92e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d930:	ba12      	rev	r2, r2
 800d932:	601a      	str	r2, [r3, #0]
         outputaddr+=4;
 800d934:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d936:	3304      	adds	r3, #4
 800d938:	65bb      	str	r3, [r7, #88]	; 0x58
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 800d93a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d93c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d93e:	64ba      	str	r2, [r7, #72]	; 0x48
 800d940:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d942:	ba12      	rev	r2, r2
 800d944:	601a      	str	r2, [r3, #0]
      }
    }
  }
  return status;  
 800d946:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
}
 800d94a:	4618      	mov	r0, r3
 800d94c:	3770      	adds	r7, #112	; 0x70
 800d94e:	46bd      	mov	sp, r7
 800d950:	bd80      	pop	{r7, pc}
 800d952:	bf00      	nop

0800d954 <HASH_SHA1>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_SHA1(uint8_t *Input, uint32_t Ilen, uint8_t Output[20])
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b09c      	sub	sp, #112	; 0x70
 800d958:	af00      	add	r7, sp, #0
 800d95a:	60f8      	str	r0, [r7, #12]
 800d95c:	60b9      	str	r1, [r7, #8]
 800d95e:	607a      	str	r2, [r7, #4]
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 800d960:	2300      	movs	r3, #0
 800d962:	82fb      	strh	r3, [r7, #22]
  uint32_t i = 0;
 800d964:	2300      	movs	r3, #0
 800d966:	66fb      	str	r3, [r7, #108]	; 0x6c
  __IO uint32_t counter = 0;
 800d968:	2300      	movs	r3, #0
 800d96a:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 800d96c:	2300      	movs	r3, #0
 800d96e:	663b      	str	r3, [r7, #96]	; 0x60
  ErrorStatus status = SUCCESS;
 800d970:	2301      	movs	r3, #1
 800d972:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  uint32_t inputaddr  = (uint32_t)Input;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t outputaddr = (uint32_t)Output;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	b29b      	uxth	r3, r3
 800d982:	f003 0303 	and.w	r3, r3, #3
 800d986:	b29b      	uxth	r3, r3
 800d988:	00db      	lsls	r3, r3, #3
 800d98a:	b29b      	uxth	r3, r3
 800d98c:	82fb      	strh	r3, [r7, #22]

  /* HASH peripheral initialization */
  HASH_DeInit();
 800d98e:	f7ff fc5f 	bl	800d250 <HASH_DeInit>

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 800d992:	2300      	movs	r3, #0
 800d994:	63bb      	str	r3, [r7, #56]	; 0x38
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
 800d996:	2300      	movs	r3, #0
 800d998:	63fb      	str	r3, [r7, #60]	; 0x3c
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 800d99a:	2320      	movs	r3, #32
 800d99c:	643b      	str	r3, [r7, #64]	; 0x40
  HASH_Init(&SHA1_HASH_InitStructure);
 800d99e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f7ff fc60 	bl	800d268 <HASH_Init>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 800d9a8:	8afb      	ldrh	r3, [r7, #22]
 800d9aa:	b29b      	uxth	r3, r3
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f7ff fcb7 	bl	800d320 <HASH_SetLastWordValidBitsNbr>

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d9b6:	e00a      	b.n	800d9ce <HASH_SHA1+0x7a>
  {
    HASH_DataIn(*(uint32_t*)inputaddr);
 800d9b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f7ff fcc7 	bl	800d350 <HASH_DataIn>
    inputaddr+=4;
 800d9c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d9c4:	3304      	adds	r3, #4
 800d9c6:	667b      	str	r3, [r7, #100]	; 0x64

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 800d9c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9ca:	3304      	adds	r3, #4
 800d9cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d9ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	429a      	cmp	r2, r3
 800d9d4:	d3f0      	bcc.n	800d9b8 <HASH_SHA1+0x64>
    HASH_DataIn(*(uint32_t*)inputaddr);
    inputaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 800d9d6:	f7ff fd07 	bl	800d3e8 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800d9da:	2008      	movs	r0, #8
 800d9dc:	f7ff fdca 	bl	800d574 <HASH_GetFlagStatus>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	663b      	str	r3, [r7, #96]	; 0x60
    counter++;
 800d9e4:	693b      	ldr	r3, [r7, #16]
 800d9e6:	3301      	adds	r3, #1
 800d9e8:	613b      	str	r3, [r7, #16]
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 800d9ea:	693b      	ldr	r3, [r7, #16]
 800d9ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d9f0:	d002      	beq.n	800d9f8 <HASH_SHA1+0xa4>
 800d9f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d1f0      	bne.n	800d9da <HASH_SHA1+0x86>

  if (busystatus != RESET)
 800d9f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d003      	beq.n	800da06 <HASH_SHA1+0xb2>
  {
     status = ERROR;
 800d9fe:	2300      	movs	r3, #0
 800da00:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800da04:	e02e      	b.n	800da64 <HASH_SHA1+0x110>
  }
  else
  {
    /* Read the message digest */
    HASH_GetDigest(&SHA1_MessageDigest);
 800da06:	f107 0318 	add.w	r3, r7, #24
 800da0a:	4618      	mov	r0, r3
 800da0c:	f7ff fcbe 	bl	800d38c <HASH_GetDigest>
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 800da10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da12:	69ba      	ldr	r2, [r7, #24]
 800da14:	65ba      	str	r2, [r7, #88]	; 0x58
 800da16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800da18:	ba12      	rev	r2, r2
 800da1a:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800da1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da1e:	3304      	adds	r3, #4
 800da20:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 800da22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da24:	69fa      	ldr	r2, [r7, #28]
 800da26:	657a      	str	r2, [r7, #84]	; 0x54
 800da28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800da2a:	ba12      	rev	r2, r2
 800da2c:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800da2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da30:	3304      	adds	r3, #4
 800da32:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 800da34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da36:	6a3a      	ldr	r2, [r7, #32]
 800da38:	653a      	str	r2, [r7, #80]	; 0x50
 800da3a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800da3c:	ba12      	rev	r2, r2
 800da3e:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800da40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da42:	3304      	adds	r3, #4
 800da44:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 800da46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da4a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800da4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800da4e:	ba12      	rev	r2, r2
 800da50:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800da52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da54:	3304      	adds	r3, #4
 800da56:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 800da58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da5c:	64ba      	str	r2, [r7, #72]	; 0x48
 800da5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800da60:	ba12      	rev	r2, r2
 800da62:	601a      	str	r2, [r3, #0]
  }
  return status;
 800da64:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
}
 800da68:	4618      	mov	r0, r3
 800da6a:	3770      	adds	r7, #112	; 0x70
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}

0800da70 <HMAC_SHA1>:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
                      uint32_t Ilen, uint8_t Output[20])
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b09e      	sub	sp, #120	; 0x78
 800da74:	af00      	add	r7, sp, #0
 800da76:	60f8      	str	r0, [r7, #12]
 800da78:	60b9      	str	r1, [r7, #8]
 800da7a:	607a      	str	r2, [r7, #4]
 800da7c:	603b      	str	r3, [r7, #0]
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 800da7e:	2300      	movs	r3, #0
 800da80:	837b      	strh	r3, [r7, #26]
  __IO uint16_t nbvalidbitskey = 0;
 800da82:	2300      	movs	r3, #0
 800da84:	833b      	strh	r3, [r7, #24]
  uint32_t i = 0;
 800da86:	2300      	movs	r3, #0
 800da88:	677b      	str	r3, [r7, #116]	; 0x74
  __IO uint32_t counter = 0;
 800da8a:	2300      	movs	r3, #0
 800da8c:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 800da8e:	2300      	movs	r3, #0
 800da90:	667b      	str	r3, [r7, #100]	; 0x64
  ErrorStatus status = SUCCESS;
 800da92:	2301      	movs	r3, #1
 800da94:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  uint32_t keyaddr    = (uint32_t)Key;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t inputaddr  = (uint32_t)Input;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	66bb      	str	r3, [r7, #104]	; 0x68
  uint32_t outputaddr = (uint32_t)Output;
 800daa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800daa4:	663b      	str	r3, [r7, #96]	; 0x60

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	b29b      	uxth	r3, r3
 800daaa:	f003 0303 	and.w	r3, r3, #3
 800daae:	b29b      	uxth	r3, r3
 800dab0:	00db      	lsls	r3, r3, #3
 800dab2:	b29b      	uxth	r3, r3
 800dab4:	837b      	strh	r3, [r7, #26]

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 800dab6:	68bb      	ldr	r3, [r7, #8]
 800dab8:	b29b      	uxth	r3, r3
 800daba:	f003 0303 	and.w	r3, r3, #3
 800dabe:	b29b      	uxth	r3, r3
 800dac0:	00db      	lsls	r3, r3, #3
 800dac2:	b29b      	uxth	r3, r3
 800dac4:	833b      	strh	r3, [r7, #24]

  /* HASH peripheral initialization */
  HASH_DeInit();
 800dac6:	f7ff fbc3 	bl	800d250 <HASH_DeInit>

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 800daca:	2300      	movs	r3, #0
 800dacc:	63fb      	str	r3, [r7, #60]	; 0x3c
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 800dace:	2340      	movs	r3, #64	; 0x40
 800dad0:	643b      	str	r3, [r7, #64]	; 0x40
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 800dad2:	2320      	movs	r3, #32
 800dad4:	647b      	str	r3, [r7, #68]	; 0x44
  if(Keylen > 64)
 800dad6:	68bb      	ldr	r3, [r7, #8]
 800dad8:	2b40      	cmp	r3, #64	; 0x40
 800dada:	d903      	bls.n	800dae4 <HMAC_SHA1+0x74>
  {
    /* HMAC long Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 800dadc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800dae0:	64bb      	str	r3, [r7, #72]	; 0x48
 800dae2:	e001      	b.n	800dae8 <HMAC_SHA1+0x78>
  }
  else
  {
    /* HMAC short Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 800dae4:	2300      	movs	r3, #0
 800dae6:	64bb      	str	r3, [r7, #72]	; 0x48
  }
  HASH_Init(&SHA1_HASH_InitStructure);
 800dae8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800daec:	4618      	mov	r0, r3
 800daee:	f7ff fbbb 	bl	800d268 <HASH_Init>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 800daf2:	8b3b      	ldrh	r3, [r7, #24]
 800daf4:	b29b      	uxth	r3, r3
 800daf6:	4618      	mov	r0, r3
 800daf8:	f7ff fc12 	bl	800d320 <HASH_SetLastWordValidBitsNbr>

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 800dafc:	2300      	movs	r3, #0
 800dafe:	677b      	str	r3, [r7, #116]	; 0x74
 800db00:	e00a      	b.n	800db18 <HMAC_SHA1+0xa8>
  {
    HASH_DataIn(*(uint32_t*)keyaddr);
 800db02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	4618      	mov	r0, r3
 800db08:	f7ff fc22 	bl	800d350 <HASH_DataIn>
    keyaddr+=4;
 800db0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db0e:	3304      	adds	r3, #4
 800db10:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 800db12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800db14:	3304      	adds	r3, #4
 800db16:	677b      	str	r3, [r7, #116]	; 0x74
 800db18:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	429a      	cmp	r2, r3
 800db1e:	d3f0      	bcc.n	800db02 <HMAC_SHA1+0x92>
    HASH_DataIn(*(uint32_t*)keyaddr);
    keyaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 800db20:	f7ff fc62 	bl	800d3e8 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800db24:	2008      	movs	r0, #8
 800db26:	f7ff fd25 	bl	800d574 <HASH_GetFlagStatus>
 800db2a:	4603      	mov	r3, r0
 800db2c:	667b      	str	r3, [r7, #100]	; 0x64
    counter++;
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	3301      	adds	r3, #1
 800db32:	617b      	str	r3, [r7, #20]
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 800db34:	697b      	ldr	r3, [r7, #20]
 800db36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db3a:	d002      	beq.n	800db42 <HMAC_SHA1+0xd2>
 800db3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d1f0      	bne.n	800db24 <HMAC_SHA1+0xb4>

  if (busystatus != RESET)
 800db42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800db44:	2b00      	cmp	r3, #0
 800db46:	d003      	beq.n	800db50 <HMAC_SHA1+0xe0>
  {
     status = ERROR;
 800db48:	2300      	movs	r3, #0
 800db4a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800db4e:	e092      	b.n	800dc76 <HMAC_SHA1+0x206>
  }
  else
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 800db50:	8b7b      	ldrh	r3, [r7, #26]
 800db52:	b29b      	uxth	r3, r3
 800db54:	4618      	mov	r0, r3
 800db56:	f7ff fbe3 	bl	800d320 <HASH_SetLastWordValidBitsNbr>

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 800db5a:	2300      	movs	r3, #0
 800db5c:	677b      	str	r3, [r7, #116]	; 0x74
 800db5e:	e00a      	b.n	800db76 <HMAC_SHA1+0x106>
    {
      HASH_DataIn(*(uint32_t*)inputaddr);
 800db60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	4618      	mov	r0, r3
 800db66:	f7ff fbf3 	bl	800d350 <HASH_DataIn>
      inputaddr+=4;
 800db6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800db6c:	3304      	adds	r3, #4
 800db6e:	66bb      	str	r3, [r7, #104]	; 0x68
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 800db70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800db72:	3304      	adds	r3, #4
 800db74:	677b      	str	r3, [r7, #116]	; 0x74
 800db76:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	429a      	cmp	r2, r3
 800db7c:	d3f0      	bcc.n	800db60 <HMAC_SHA1+0xf0>
      HASH_DataIn(*(uint32_t*)inputaddr);
      inputaddr+=4;
    }

    /* Start the HASH processor */
    HASH_StartDigest();
 800db7e:	f7ff fc33 	bl	800d3e8 <HASH_StartDigest>


    /* wait until the Busy flag is RESET */
    counter =0;
 800db82:	2300      	movs	r3, #0
 800db84:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800db86:	2008      	movs	r0, #8
 800db88:	f7ff fcf4 	bl	800d574 <HASH_GetFlagStatus>
 800db8c:	4603      	mov	r3, r0
 800db8e:	667b      	str	r3, [r7, #100]	; 0x64
      counter++;
 800db90:	697b      	ldr	r3, [r7, #20]
 800db92:	3301      	adds	r3, #1
 800db94:	617b      	str	r3, [r7, #20]
    }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db9c:	d002      	beq.n	800dba4 <HMAC_SHA1+0x134>
 800db9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d1f0      	bne.n	800db86 <HMAC_SHA1+0x116>

    if (busystatus != RESET)
 800dba4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d003      	beq.n	800dbb2 <HMAC_SHA1+0x142>
    {
      status = ERROR;
 800dbaa:	2300      	movs	r3, #0
 800dbac:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800dbb0:	e061      	b.n	800dc76 <HMAC_SHA1+0x206>
    }
    else
    {  
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 800dbb2:	8b3b      	ldrh	r3, [r7, #24]
 800dbb4:	b29b      	uxth	r3, r3
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f7ff fbb2 	bl	800d320 <HASH_SetLastWordValidBitsNbr>

      /* Write the Key */
      keyaddr = (uint32_t)Key;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	66fb      	str	r3, [r7, #108]	; 0x6c
      for(i=0; i<Keylen; i+=4)
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	677b      	str	r3, [r7, #116]	; 0x74
 800dbc4:	e00a      	b.n	800dbdc <HMAC_SHA1+0x16c>
      {
        HASH_DataIn(*(uint32_t*)keyaddr);
 800dbc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f7ff fbc0 	bl	800d350 <HASH_DataIn>
        keyaddr+=4;
 800dbd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbd2:	3304      	adds	r3, #4
 800dbd4:	66fb      	str	r3, [r7, #108]	; 0x6c
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 800dbd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dbd8:	3304      	adds	r3, #4
 800dbda:	677b      	str	r3, [r7, #116]	; 0x74
 800dbdc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	d3f0      	bcc.n	800dbc6 <HMAC_SHA1+0x156>
        HASH_DataIn(*(uint32_t*)keyaddr);
        keyaddr+=4;
      }

      /* Start the HASH processor */
      HASH_StartDigest();
 800dbe4:	f7ff fc00 	bl	800d3e8 <HASH_StartDigest>

      /* wait until the Busy flag is RESET */
      counter =0;
 800dbe8:	2300      	movs	r3, #0
 800dbea:	617b      	str	r3, [r7, #20]
      do
      {
        busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800dbec:	2008      	movs	r0, #8
 800dbee:	f7ff fcc1 	bl	800d574 <HASH_GetFlagStatus>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	667b      	str	r3, [r7, #100]	; 0x64
        counter++;
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	3301      	adds	r3, #1
 800dbfa:	617b      	str	r3, [r7, #20]
      }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 800dbfc:	697b      	ldr	r3, [r7, #20]
 800dbfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc02:	d002      	beq.n	800dc0a <HMAC_SHA1+0x19a>
 800dc04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d1f0      	bne.n	800dbec <HMAC_SHA1+0x17c>

      if (busystatus != RESET)
 800dc0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d003      	beq.n	800dc18 <HMAC_SHA1+0x1a8>
      {
        status = ERROR;
 800dc10:	2300      	movs	r3, #0
 800dc12:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800dc16:	e02e      	b.n	800dc76 <HMAC_SHA1+0x206>
      }
      else
      {
        /* Read the message digest */
        HASH_GetDigest(&SHA1_MessageDigest);
 800dc18:	f107 031c 	add.w	r3, r7, #28
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	f7ff fbb5 	bl	800d38c <HASH_GetDigest>
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 800dc22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc24:	69fa      	ldr	r2, [r7, #28]
 800dc26:	65fa      	str	r2, [r7, #92]	; 0x5c
 800dc28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dc2a:	ba12      	rev	r2, r2
 800dc2c:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 800dc2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc30:	3304      	adds	r3, #4
 800dc32:	663b      	str	r3, [r7, #96]	; 0x60
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 800dc34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc36:	6a3a      	ldr	r2, [r7, #32]
 800dc38:	65ba      	str	r2, [r7, #88]	; 0x58
 800dc3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dc3c:	ba12      	rev	r2, r2
 800dc3e:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 800dc40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc42:	3304      	adds	r3, #4
 800dc44:	663b      	str	r3, [r7, #96]	; 0x60
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 800dc46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc4a:	657a      	str	r2, [r7, #84]	; 0x54
 800dc4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dc4e:	ba12      	rev	r2, r2
 800dc50:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 800dc52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc54:	3304      	adds	r3, #4
 800dc56:	663b      	str	r3, [r7, #96]	; 0x60
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 800dc58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc5c:	653a      	str	r2, [r7, #80]	; 0x50
 800dc5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dc60:	ba12      	rev	r2, r2
 800dc62:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 800dc64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc66:	3304      	adds	r3, #4
 800dc68:	663b      	str	r3, [r7, #96]	; 0x60
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 800dc6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc6e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800dc70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dc72:	ba12      	rev	r2, r2
 800dc74:	601a      	str	r2, [r3, #0]
      }
    }  
  }
  return status;  
 800dc76:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	3778      	adds	r7, #120	; 0x78
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}
 800dc82:	bf00      	nop

0800dc84 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b082      	sub	sp, #8
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 800dc8c:	687a      	ldr	r2, [r7, #4]
 800dc8e:	4b17      	ldr	r3, [pc, #92]	; (800dcec <I2C_DeInit+0x68>)
 800dc90:	429a      	cmp	r2, r3
 800dc92:	d10a      	bne.n	800dcaa <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 800dc94:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800dc98:	2101      	movs	r1, #1
 800dc9a:	f002 f8bd 	bl	800fe18 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 800dc9e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800dca2:	2100      	movs	r1, #0
 800dca4:	f002 f8b8 	bl	800fe18 <RCC_APB1PeriphResetCmd>
 800dca8:	e01c      	b.n	800dce4 <I2C_DeInit+0x60>
  }
  else if (I2Cx == I2C2)
 800dcaa:	687a      	ldr	r2, [r7, #4]
 800dcac:	4b10      	ldr	r3, [pc, #64]	; (800dcf0 <I2C_DeInit+0x6c>)
 800dcae:	429a      	cmp	r2, r3
 800dcb0:	d10a      	bne.n	800dcc8 <I2C_DeInit+0x44>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 800dcb2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800dcb6:	2101      	movs	r1, #1
 800dcb8:	f002 f8ae 	bl	800fe18 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 800dcbc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800dcc0:	2100      	movs	r1, #0
 800dcc2:	f002 f8a9 	bl	800fe18 <RCC_APB1PeriphResetCmd>
 800dcc6:	e00d      	b.n	800dce4 <I2C_DeInit+0x60>
  }
  else 
  {
    if (I2Cx == I2C3)
 800dcc8:	687a      	ldr	r2, [r7, #4]
 800dcca:	4b0a      	ldr	r3, [pc, #40]	; (800dcf4 <I2C_DeInit+0x70>)
 800dccc:	429a      	cmp	r2, r3
 800dcce:	d109      	bne.n	800dce4 <I2C_DeInit+0x60>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 800dcd0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800dcd4:	2101      	movs	r1, #1
 800dcd6:	f002 f89f 	bl	800fe18 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 800dcda:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800dcde:	2100      	movs	r1, #0
 800dce0:	f002 f89a 	bl	800fe18 <RCC_APB1PeriphResetCmd>
    }
  }
}
 800dce4:	3708      	adds	r7, #8
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd80      	pop	{r7, pc}
 800dcea:	bf00      	nop
 800dcec:	40005400 	.word	0x40005400
 800dcf0:	40005800 	.word	0x40005800
 800dcf4:	40005c00 	.word	0x40005c00

0800dcf8 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b08a      	sub	sp, #40	; 0x28
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
 800dd00:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 800dd02:	2300      	movs	r3, #0
 800dd04:	84fb      	strh	r3, [r7, #38]	; 0x26
 800dd06:	2300      	movs	r3, #0
 800dd08:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 800dd0a:	2304      	movs	r3, #4
 800dd0c:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 800dd0e:	4b57      	ldr	r3, [pc, #348]	; (800de6c <I2C_Init+0x174>)
 800dd10:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	889b      	ldrh	r3, [r3, #4]
 800dd16:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 800dd18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dd1a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800dd1e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 800dd20:	f107 030c 	add.w	r3, r7, #12
 800dd24:	4618      	mov	r0, r3
 800dd26:	f001 fddb 	bl	800f8e0 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800dd2e:	69fa      	ldr	r2, [r7, #28]
 800dd30:	4b4f      	ldr	r3, [pc, #316]	; (800de70 <I2C_Init+0x178>)
 800dd32:	fba3 1302 	umull	r1, r3, r3, r2
 800dd36:	0c9b      	lsrs	r3, r3, #18
 800dd38:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 800dd3a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dd3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dd3e:	4313      	orrs	r3, r2
 800dd40:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dd46:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	881b      	ldrh	r3, [r3, #0]
 800dd4c:	b29b      	uxth	r3, r3
 800dd4e:	f023 0301 	bic.w	r3, r3, #1
 800dd52:	b29a      	uxth	r2, r3
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 800dd58:	2300      	movs	r3, #0
 800dd5a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	681a      	ldr	r2, [r3, #0]
 800dd60:	4b44      	ldr	r3, [pc, #272]	; (800de74 <I2C_Init+0x17c>)
 800dd62:	429a      	cmp	r2, r3
 800dd64:	d815      	bhi.n	800dd92 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	005b      	lsls	r3, r3, #1
 800dd6c:	69fa      	ldr	r2, [r7, #28]
 800dd6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd72:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 800dd74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd76:	2b03      	cmp	r3, #3
 800dd78:	d801      	bhi.n	800dd7e <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 800dd7a:	2304      	movs	r3, #4
 800dd7c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 800dd7e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dd80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd82:	4313      	orrs	r3, r2
 800dd84:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 800dd86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dd88:	3301      	adds	r3, #1
 800dd8a:	b29a      	uxth	r2, r3
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	841a      	strh	r2, [r3, #32]
 800dd90:	e040      	b.n	800de14 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	88da      	ldrh	r2, [r3, #6]
 800dd96:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 800dd9a:	429a      	cmp	r2, r3
 800dd9c:	d109      	bne.n	800ddb2 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	681a      	ldr	r2, [r3, #0]
 800dda2:	4613      	mov	r3, r2
 800dda4:	005b      	lsls	r3, r3, #1
 800dda6:	4413      	add	r3, r2
 800dda8:	69fa      	ldr	r2, [r7, #28]
 800ddaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddae:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ddb0:	e00e      	b.n	800ddd0 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	681a      	ldr	r2, [r3, #0]
 800ddb6:	4613      	mov	r3, r2
 800ddb8:	009b      	lsls	r3, r3, #2
 800ddba:	4413      	add	r3, r2
 800ddbc:	009a      	lsls	r2, r3, #2
 800ddbe:	4413      	add	r3, r2
 800ddc0:	69fa      	ldr	r2, [r7, #28]
 800ddc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddc6:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 800ddc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ddca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ddce:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 800ddd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ddd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d103      	bne.n	800dde2 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 800ddda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dddc:	f043 0301 	orr.w	r3, r3, #1
 800dde0:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 800dde2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dde4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dde6:	4313      	orrs	r3, r2
 800dde8:	b29b      	uxth	r3, r3
 800ddea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ddee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ddf2:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 800ddf4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ddf6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ddfa:	fb02 f303 	mul.w	r3, r2, r3
 800ddfe:	4a1e      	ldr	r2, [pc, #120]	; (800de78 <I2C_Init+0x180>)
 800de00:	fb82 1203 	smull	r1, r2, r2, r3
 800de04:	1192      	asrs	r2, r2, #6
 800de06:	17db      	asrs	r3, r3, #31
 800de08:	1ad3      	subs	r3, r2, r3
 800de0a:	b29b      	uxth	r3, r3
 800de0c:	3301      	adds	r3, #1
 800de0e:	b29a      	uxth	r2, r3
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800de18:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	881b      	ldrh	r3, [r3, #0]
 800de1e:	b29b      	uxth	r3, r3
 800de20:	f043 0301 	orr.w	r3, r3, #1
 800de24:	b29a      	uxth	r2, r3
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	881b      	ldrh	r3, [r3, #0]
 800de2e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 800de30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800de32:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 800de36:	f023 0302 	bic.w	r3, r3, #2
 800de3a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	889a      	ldrh	r2, [r3, #4]
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	895b      	ldrh	r3, [r3, #10]
 800de44:	4313      	orrs	r3, r2
 800de46:	b29a      	uxth	r2, r3
 800de48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800de4a:	4313      	orrs	r3, r2
 800de4c:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800de52:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	899a      	ldrh	r2, [r3, #12]
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	891b      	ldrh	r3, [r3, #8]
 800de5c:	4313      	orrs	r3, r2
 800de5e:	b29a      	uxth	r2, r3
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	811a      	strh	r2, [r3, #8]
}
 800de64:	3728      	adds	r7, #40	; 0x28
 800de66:	46bd      	mov	sp, r7
 800de68:	bd80      	pop	{r7, pc}
 800de6a:	bf00      	nop
 800de6c:	007a1200 	.word	0x007a1200
 800de70:	431bde83 	.word	0x431bde83
 800de74:	000186a0 	.word	0x000186a0
 800de78:	10624dd3 	.word	0x10624dd3

0800de7c <I2C_StructInit>:
  * @brief  Fills each I2C_InitStruct member with its default value.
  * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
 800de7c:	b480      	push	{r7}
 800de7e:	b083      	sub	sp, #12
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f241 3288 	movw	r2, #5000	; 0x1388
 800de8a:	601a      	str	r2, [r3, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2200      	movs	r2, #0
 800de90:	809a      	strh	r2, [r3, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 800de98:	80da      	strh	r2, [r3, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	2200      	movs	r2, #0
 800de9e:	811a      	strh	r2, [r3, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2200      	movs	r2, #0
 800dea4:	815a      	strh	r2, [r3, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800deac:	819a      	strh	r2, [r3, #12]
}
 800deae:	370c      	adds	r7, #12
 800deb0:	46bd      	mov	sp, r7
 800deb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb6:	4770      	bx	lr

0800deb8 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800deb8:	b480      	push	{r7}
 800deba:	b083      	sub	sp, #12
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
 800dec0:	460b      	mov	r3, r1
 800dec2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800dec4:	78fb      	ldrb	r3, [r7, #3]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d008      	beq.n	800dedc <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	881b      	ldrh	r3, [r3, #0]
 800dece:	b29b      	uxth	r3, r3
 800ded0:	f043 0301 	orr.w	r3, r3, #1
 800ded4:	b29a      	uxth	r2, r3
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	801a      	strh	r2, [r3, #0]
 800deda:	e007      	b.n	800deec <I2C_Cmd+0x34>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	881b      	ldrh	r3, [r3, #0]
 800dee0:	b29b      	uxth	r3, r3
 800dee2:	f023 0301 	bic.w	r3, r3, #1
 800dee6:	b29a      	uxth	r2, r3
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	801a      	strh	r2, [r3, #0]
  }
}
 800deec:	370c      	adds	r7, #12
 800deee:	46bd      	mov	sp, r7
 800def0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def4:	4770      	bx	lr
 800def6:	bf00      	nop

0800def8 <I2C_AnalogFilterCmd>:
  * @note   This function should be called before initializing and enabling
            the I2C Peripheral.
  * @retval None
  */
void I2C_AnalogFilterCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800def8:	b480      	push	{r7}
 800defa:	b083      	sub	sp, #12
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
 800df00:	460b      	mov	r3, r1
 800df02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800df04:	78fb      	ldrb	r3, [r7, #3]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d008      	beq.n	800df1c <I2C_AnalogFilterCmd+0x24>
  {
    /* Enable the analog filter */
    I2Cx->FLTR &= (uint16_t)~((uint16_t)I2C_FLTR_ANOFF);    
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800df0e:	b29b      	uxth	r3, r3
 800df10:	f023 0310 	bic.w	r3, r3, #16
 800df14:	b29a      	uxth	r2, r3
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	849a      	strh	r2, [r3, #36]	; 0x24
 800df1a:	e007      	b.n	800df2c <I2C_AnalogFilterCmd+0x34>
  }
  else
  {
    /* Disable the analog filter */
    I2Cx->FLTR |= I2C_FLTR_ANOFF;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800df20:	b29b      	uxth	r3, r3
 800df22:	f043 0310 	orr.w	r3, r3, #16
 800df26:	b29a      	uxth	r2, r3
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	849a      	strh	r2, [r3, #36]	; 0x24
  }
}
 800df2c:	370c      	adds	r7, #12
 800df2e:	46bd      	mov	sp, r7
 800df30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df34:	4770      	bx	lr
 800df36:	bf00      	nop

0800df38 <I2C_DigitalFilterConfig>:
  * @note   This function should be called before initializing and enabling
            the I2C Peripheral.
  * @retval None
  */
void I2C_DigitalFilterConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DigitalFilter)
{
 800df38:	b480      	push	{r7}
 800df3a:	b085      	sub	sp, #20
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
 800df40:	460b      	mov	r3, r1
 800df42:	807b      	strh	r3, [r7, #2]
  uint16_t tmpreg = 0;
 800df44:	2300      	movs	r3, #0
 800df46:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIGITAL_FILTER(I2C_DigitalFilter));
  
  /* Get the old register value */
  tmpreg = I2Cx->FLTR;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800df4c:	81fb      	strh	r3, [r7, #14]
  
  /* Reset I2Cx DNF bit [3:0] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_FLTR_DNF);
 800df4e:	89fb      	ldrh	r3, [r7, #14]
 800df50:	f023 030f 	bic.w	r3, r3, #15
 800df54:	81fb      	strh	r3, [r7, #14]
  
  /* Set I2Cx DNF coefficient */
  tmpreg |= (uint16_t)((uint16_t)I2C_DigitalFilter & I2C_FLTR_DNF);
 800df56:	887b      	ldrh	r3, [r7, #2]
 800df58:	f003 030f 	and.w	r3, r3, #15
 800df5c:	b29a      	uxth	r2, r3
 800df5e:	89fb      	ldrh	r3, [r7, #14]
 800df60:	4313      	orrs	r3, r2
 800df62:	b29b      	uxth	r3, r3
 800df64:	81fb      	strh	r3, [r7, #14]
  
  /* Store the new register value */
  I2Cx->FLTR = tmpreg;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	89fa      	ldrh	r2, [r7, #14]
 800df6a:	849a      	strh	r2, [r3, #36]	; 0x24
}
 800df6c:	3714      	adds	r7, #20
 800df6e:	46bd      	mov	sp, r7
 800df70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df74:	4770      	bx	lr
 800df76:	bf00      	nop

0800df78 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800df78:	b480      	push	{r7}
 800df7a:	b083      	sub	sp, #12
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
 800df80:	460b      	mov	r3, r1
 800df82:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800df84:	78fb      	ldrb	r3, [r7, #3]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d008      	beq.n	800df9c <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	881b      	ldrh	r3, [r3, #0]
 800df8e:	b29b      	uxth	r3, r3
 800df90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800df94:	b29a      	uxth	r2, r3
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	801a      	strh	r2, [r3, #0]
 800df9a:	e007      	b.n	800dfac <I2C_GenerateSTART+0x34>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	881b      	ldrh	r3, [r3, #0]
 800dfa0:	b29b      	uxth	r3, r3
 800dfa2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dfa6:	b29a      	uxth	r2, r3
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	801a      	strh	r2, [r3, #0]
  }
}
 800dfac:	370c      	adds	r7, #12
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb4:	4770      	bx	lr
 800dfb6:	bf00      	nop

0800dfb8 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800dfb8:	b480      	push	{r7}
 800dfba:	b083      	sub	sp, #12
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
 800dfc0:	460b      	mov	r3, r1
 800dfc2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800dfc4:	78fb      	ldrb	r3, [r7, #3]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d008      	beq.n	800dfdc <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	881b      	ldrh	r3, [r3, #0]
 800dfce:	b29b      	uxth	r3, r3
 800dfd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dfd4:	b29a      	uxth	r2, r3
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	801a      	strh	r2, [r3, #0]
 800dfda:	e007      	b.n	800dfec <I2C_GenerateSTOP+0x34>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	881b      	ldrh	r3, [r3, #0]
 800dfe0:	b29b      	uxth	r3, r3
 800dfe2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dfe6:	b29a      	uxth	r2, r3
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	801a      	strh	r2, [r3, #0]
  }
}
 800dfec:	370c      	adds	r7, #12
 800dfee:	46bd      	mov	sp, r7
 800dff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff4:	4770      	bx	lr
 800dff6:	bf00      	nop

0800dff8 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 800dff8:	b480      	push	{r7}
 800dffa:	b083      	sub	sp, #12
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
 800e000:	4613      	mov	r3, r2
 800e002:	460a      	mov	r2, r1
 800e004:	70fa      	strb	r2, [r7, #3]
 800e006:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 800e008:	78bb      	ldrb	r3, [r7, #2]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d004      	beq.n	800e018 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 800e00e:	78fb      	ldrb	r3, [r7, #3]
 800e010:	f043 0301 	orr.w	r3, r3, #1
 800e014:	70fb      	strb	r3, [r7, #3]
 800e016:	e003      	b.n	800e020 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 800e018:	78fb      	ldrb	r3, [r7, #3]
 800e01a:	f023 0301 	bic.w	r3, r3, #1
 800e01e:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 800e020:	78fb      	ldrb	r3, [r7, #3]
 800e022:	b29a      	uxth	r2, r3
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	821a      	strh	r2, [r3, #16]
}
 800e028:	370c      	adds	r7, #12
 800e02a:	46bd      	mov	sp, r7
 800e02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e030:	4770      	bx	lr
 800e032:	bf00      	nop

0800e034 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e034:	b480      	push	{r7}
 800e036:	b083      	sub	sp, #12
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
 800e03c:	460b      	mov	r3, r1
 800e03e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e040:	78fb      	ldrb	r3, [r7, #3]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d008      	beq.n	800e058 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	881b      	ldrh	r3, [r3, #0]
 800e04a:	b29b      	uxth	r3, r3
 800e04c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e050:	b29a      	uxth	r2, r3
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	801a      	strh	r2, [r3, #0]
 800e056:	e007      	b.n	800e068 <I2C_AcknowledgeConfig+0x34>
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	881b      	ldrh	r3, [r3, #0]
 800e05c:	b29b      	uxth	r3, r3
 800e05e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e062:	b29a      	uxth	r2, r3
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	801a      	strh	r2, [r3, #0]
  }
}
 800e068:	370c      	adds	r7, #12
 800e06a:	46bd      	mov	sp, r7
 800e06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e070:	4770      	bx	lr
 800e072:	bf00      	nop

0800e074 <I2C_OwnAddress2Config>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Address: specifies the 7bit I2C own address2.
  * @retval None.
  */
void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address)
{
 800e074:	b480      	push	{r7}
 800e076:	b085      	sub	sp, #20
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
 800e07c:	460b      	mov	r3, r1
 800e07e:	70fb      	strb	r3, [r7, #3]
  uint16_t tmpreg = 0;
 800e080:	2300      	movs	r3, #0
 800e082:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	899b      	ldrh	r3, [r3, #12]
 800e088:	81fb      	strh	r3, [r7, #14]

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 800e08a:	89fb      	ldrh	r3, [r7, #14]
 800e08c:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800e090:	81fb      	strh	r3, [r7, #14]

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 800e092:	78fb      	ldrb	r3, [r7, #3]
 800e094:	b29b      	uxth	r3, r3
 800e096:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800e09a:	b29a      	uxth	r2, r3
 800e09c:	89fb      	ldrh	r3, [r7, #14]
 800e09e:	4313      	orrs	r3, r2
 800e0a0:	b29b      	uxth	r3, r3
 800e0a2:	81fb      	strh	r3, [r7, #14]

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	89fa      	ldrh	r2, [r7, #14]
 800e0a8:	819a      	strh	r2, [r3, #12]
}
 800e0aa:	3714      	adds	r7, #20
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b2:	4770      	bx	lr

0800e0b4 <I2C_DualAddressCmd>:
  * @param  NewState: new state of the I2C dual addressing mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e0b4:	b480      	push	{r7}
 800e0b6:	b083      	sub	sp, #12
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
 800e0bc:	460b      	mov	r3, r1
 800e0be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e0c0:	78fb      	ldrb	r3, [r7, #3]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d008      	beq.n	800e0d8 <I2C_DualAddressCmd+0x24>
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	899b      	ldrh	r3, [r3, #12]
 800e0ca:	b29b      	uxth	r3, r3
 800e0cc:	f043 0301 	orr.w	r3, r3, #1
 800e0d0:	b29a      	uxth	r2, r3
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	819a      	strh	r2, [r3, #12]
 800e0d6:	e007      	b.n	800e0e8 <I2C_DualAddressCmd+0x34>
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	899b      	ldrh	r3, [r3, #12]
 800e0dc:	b29b      	uxth	r3, r3
 800e0de:	f023 0301 	bic.w	r3, r3, #1
 800e0e2:	b29a      	uxth	r2, r3
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	819a      	strh	r2, [r3, #12]
  }
}
 800e0e8:	370c      	adds	r7, #12
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f0:	4770      	bx	lr
 800e0f2:	bf00      	nop

0800e0f4 <I2C_GeneralCallCmd>:
  * @param  NewState: new state of the I2C General call.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e0f4:	b480      	push	{r7}
 800e0f6:	b083      	sub	sp, #12
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
 800e0fc:	460b      	mov	r3, r1
 800e0fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e100:	78fb      	ldrb	r3, [r7, #3]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d008      	beq.n	800e118 <I2C_GeneralCallCmd+0x24>
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	881b      	ldrh	r3, [r3, #0]
 800e10a:	b29b      	uxth	r3, r3
 800e10c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e110:	b29a      	uxth	r2, r3
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	801a      	strh	r2, [r3, #0]
 800e116:	e007      	b.n	800e128 <I2C_GeneralCallCmd+0x34>
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	881b      	ldrh	r3, [r3, #0]
 800e11c:	b29b      	uxth	r3, r3
 800e11e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e122:	b29a      	uxth	r2, r3
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	801a      	strh	r2, [r3, #0]
  }
}
 800e128:	370c      	adds	r7, #12
 800e12a:	46bd      	mov	sp, r7
 800e12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e130:	4770      	bx	lr
 800e132:	bf00      	nop

0800e134 <I2C_SoftwareResetCmd>:
  * @param  NewState: new state of the I2C software reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e134:	b480      	push	{r7}
 800e136:	b083      	sub	sp, #12
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
 800e13c:	460b      	mov	r3, r1
 800e13e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e140:	78fb      	ldrb	r3, [r7, #3]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d00a      	beq.n	800e15c <I2C_SoftwareResetCmd+0x28>
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	881b      	ldrh	r3, [r3, #0]
 800e14a:	b29b      	uxth	r3, r3
 800e14c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e150:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e154:	b29a      	uxth	r2, r3
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	801a      	strh	r2, [r3, #0]
 800e15a:	e007      	b.n	800e16c <I2C_SoftwareResetCmd+0x38>
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	881b      	ldrh	r3, [r3, #0]
 800e160:	b29b      	uxth	r3, r3
 800e162:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800e166:	b29a      	uxth	r2, r3
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	801a      	strh	r2, [r3, #0]
  }
}
 800e16c:	370c      	adds	r7, #12
 800e16e:	46bd      	mov	sp, r7
 800e170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e174:	4770      	bx	lr
 800e176:	bf00      	nop

0800e178 <I2C_StretchClockCmd>:
  * @param  NewState: new state of the I2Cx Clock stretching.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e178:	b480      	push	{r7}
 800e17a:	b083      	sub	sp, #12
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
 800e180:	460b      	mov	r3, r1
 800e182:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 800e184:	78fb      	ldrb	r3, [r7, #3]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d108      	bne.n	800e19c <I2C_StretchClockCmd+0x24>
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	881b      	ldrh	r3, [r3, #0]
 800e18e:	b29b      	uxth	r3, r3
 800e190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e194:	b29a      	uxth	r2, r3
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	801a      	strh	r2, [r3, #0]
 800e19a:	e007      	b.n	800e1ac <I2C_StretchClockCmd+0x34>
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	881b      	ldrh	r3, [r3, #0]
 800e1a0:	b29b      	uxth	r3, r3
 800e1a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e1a6:	b29a      	uxth	r2, r3
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	801a      	strh	r2, [r3, #0]
  }
}
 800e1ac:	370c      	adds	r7, #12
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b4:	4770      	bx	lr
 800e1b6:	bf00      	nop

0800e1b8 <I2C_FastModeDutyCycleConfig>:
  *            @arg I2C_DutyCycle_2: I2C fast mode Tlow/Thigh = 2
  *            @arg I2C_DutyCycle_16_9: I2C fast mode Tlow/Thigh = 16/9
  * @retval None
  */
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
 800e1b8:	b480      	push	{r7}
 800e1ba:	b083      	sub	sp, #12
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
 800e1c0:	460b      	mov	r3, r1
 800e1c2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 800e1c4:	887b      	ldrh	r3, [r7, #2]
 800e1c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e1ca:	d008      	beq.n	800e1de <I2C_FastModeDutyCycleConfig+0x26>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	8b9b      	ldrh	r3, [r3, #28]
 800e1d0:	b29b      	uxth	r3, r3
 800e1d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e1d6:	b29a      	uxth	r2, r3
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	839a      	strh	r2, [r3, #28]
 800e1dc:	e007      	b.n	800e1ee <I2C_FastModeDutyCycleConfig+0x36>
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	8b9b      	ldrh	r3, [r3, #28]
 800e1e2:	b29b      	uxth	r3, r3
 800e1e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e1e8:	b29a      	uxth	r2, r3
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	839a      	strh	r2, [r3, #28]
  }
}
 800e1ee:	370c      	adds	r7, #12
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f6:	4770      	bx	lr

0800e1f8 <I2C_NACKPositionConfig>:
  *          is intended to used in SMBUS mode. 
  *            
  * @retval None
  */
void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
{
 800e1f8:	b480      	push	{r7}
 800e1fa:	b083      	sub	sp, #12
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
 800e200:	460b      	mov	r3, r1
 800e202:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 800e204:	887b      	ldrh	r3, [r7, #2]
 800e206:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e20a:	d108      	bne.n	800e21e <I2C_NACKPositionConfig+0x26>
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	881b      	ldrh	r3, [r3, #0]
 800e210:	b29b      	uxth	r3, r3
 800e212:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e216:	b29a      	uxth	r2, r3
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	801a      	strh	r2, [r3, #0]
 800e21c:	e007      	b.n	800e22e <I2C_NACKPositionConfig+0x36>
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	881b      	ldrh	r3, [r3, #0]
 800e222:	b29b      	uxth	r3, r3
 800e224:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e228:	b29a      	uxth	r2, r3
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	801a      	strh	r2, [r3, #0]
  }
}
 800e22e:	370c      	adds	r7, #12
 800e230:	46bd      	mov	sp, r7
 800e232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e236:	4770      	bx	lr

0800e238 <I2C_SMBusAlertConfig>:
  *            @arg I2C_SMBusAlert_Low: SMBAlert pin driven low
  *            @arg I2C_SMBusAlert_High: SMBAlert pin driven high
  * @retval None
  */
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
 800e238:	b480      	push	{r7}
 800e23a:	b083      	sub	sp, #12
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
 800e240:	460b      	mov	r3, r1
 800e242:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 800e244:	887b      	ldrh	r3, [r7, #2]
 800e246:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e24a:	d108      	bne.n	800e25e <I2C_SMBusAlertConfig+0x26>
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	881b      	ldrh	r3, [r3, #0]
 800e250:	b29b      	uxth	r3, r3
 800e252:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e256:	b29a      	uxth	r2, r3
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	801a      	strh	r2, [r3, #0]
 800e25c:	e007      	b.n	800e26e <I2C_SMBusAlertConfig+0x36>
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	881b      	ldrh	r3, [r3, #0]
 800e262:	b29b      	uxth	r3, r3
 800e264:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e268:	b29a      	uxth	r2, r3
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	801a      	strh	r2, [r3, #0]
  }
}
 800e26e:	370c      	adds	r7, #12
 800e270:	46bd      	mov	sp, r7
 800e272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e276:	4770      	bx	lr

0800e278 <I2C_ARPCmd>:
  * @param  NewState: new state of the I2Cx ARP. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e278:	b480      	push	{r7}
 800e27a:	b083      	sub	sp, #12
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
 800e280:	460b      	mov	r3, r1
 800e282:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e284:	78fb      	ldrb	r3, [r7, #3]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d008      	beq.n	800e29c <I2C_ARPCmd+0x24>
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	881b      	ldrh	r3, [r3, #0]
 800e28e:	b29b      	uxth	r3, r3
 800e290:	f043 0310 	orr.w	r3, r3, #16
 800e294:	b29a      	uxth	r2, r3
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	801a      	strh	r2, [r3, #0]
 800e29a:	e007      	b.n	800e2ac <I2C_ARPCmd+0x34>
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	881b      	ldrh	r3, [r3, #0]
 800e2a0:	b29b      	uxth	r3, r3
 800e2a2:	f023 0310 	bic.w	r3, r3, #16
 800e2a6:	b29a      	uxth	r2, r3
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	801a      	strh	r2, [r3, #0]
  }
}
 800e2ac:	370c      	adds	r7, #12
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b4:	4770      	bx	lr
 800e2b6:	bf00      	nop

0800e2b8 <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 800e2b8:	b480      	push	{r7}
 800e2ba:	b083      	sub	sp, #12
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
 800e2c0:	460b      	mov	r3, r1
 800e2c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 800e2c4:	78fb      	ldrb	r3, [r7, #3]
 800e2c6:	b29a      	uxth	r2, r3
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	821a      	strh	r2, [r3, #16]
}
 800e2cc:	370c      	adds	r7, #12
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d4:	4770      	bx	lr
 800e2d6:	bf00      	nop

0800e2d8 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 800e2d8:	b480      	push	{r7}
 800e2da:	b083      	sub	sp, #12
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	8a1b      	ldrh	r3, [r3, #16]
 800e2e4:	b29b      	uxth	r3, r3
 800e2e6:	b2db      	uxtb	r3, r3
}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	370c      	adds	r7, #12
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f2:	4770      	bx	lr

0800e2f4 <I2C_TransmitPEC>:
  * @param  NewState: new state of the I2C PEC transmission.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e2f4:	b480      	push	{r7}
 800e2f6:	b083      	sub	sp, #12
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
 800e2fc:	460b      	mov	r3, r1
 800e2fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e300:	78fb      	ldrb	r3, [r7, #3]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d008      	beq.n	800e318 <I2C_TransmitPEC+0x24>
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	881b      	ldrh	r3, [r3, #0]
 800e30a:	b29b      	uxth	r3, r3
 800e30c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e310:	b29a      	uxth	r2, r3
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	801a      	strh	r2, [r3, #0]
 800e316:	e007      	b.n	800e328 <I2C_TransmitPEC+0x34>
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	881b      	ldrh	r3, [r3, #0]
 800e31c:	b29b      	uxth	r3, r3
 800e31e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e322:	b29a      	uxth	r2, r3
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	801a      	strh	r2, [r3, #0]
  }
}
 800e328:	370c      	adds	r7, #12
 800e32a:	46bd      	mov	sp, r7
 800e32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e330:	4770      	bx	lr
 800e332:	bf00      	nop

0800e334 <I2C_PECPositionConfig>:
  *          is intended to used in I2C mode.
  *                
  * @retval None
  */
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
 800e334:	b480      	push	{r7}
 800e336:	b083      	sub	sp, #12
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
 800e33c:	460b      	mov	r3, r1
 800e33e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 800e340:	887b      	ldrh	r3, [r7, #2]
 800e342:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e346:	d108      	bne.n	800e35a <I2C_PECPositionConfig+0x26>
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	881b      	ldrh	r3, [r3, #0]
 800e34c:	b29b      	uxth	r3, r3
 800e34e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e352:	b29a      	uxth	r2, r3
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	801a      	strh	r2, [r3, #0]
 800e358:	e007      	b.n	800e36a <I2C_PECPositionConfig+0x36>
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	881b      	ldrh	r3, [r3, #0]
 800e35e:	b29b      	uxth	r3, r3
 800e360:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e364:	b29a      	uxth	r2, r3
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	801a      	strh	r2, [r3, #0]
  }
}
 800e36a:	370c      	adds	r7, #12
 800e36c:	46bd      	mov	sp, r7
 800e36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e372:	4770      	bx	lr

0800e374 <I2C_CalculatePEC>:
  * @param  NewState: new state of the I2Cx PEC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e374:	b480      	push	{r7}
 800e376:	b083      	sub	sp, #12
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
 800e37c:	460b      	mov	r3, r1
 800e37e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e380:	78fb      	ldrb	r3, [r7, #3]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d008      	beq.n	800e398 <I2C_CalculatePEC+0x24>
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	881b      	ldrh	r3, [r3, #0]
 800e38a:	b29b      	uxth	r3, r3
 800e38c:	f043 0320 	orr.w	r3, r3, #32
 800e390:	b29a      	uxth	r2, r3
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	801a      	strh	r2, [r3, #0]
 800e396:	e007      	b.n	800e3a8 <I2C_CalculatePEC+0x34>
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	881b      	ldrh	r3, [r3, #0]
 800e39c:	b29b      	uxth	r3, r3
 800e39e:	f023 0320 	bic.w	r3, r3, #32
 800e3a2:	b29a      	uxth	r2, r3
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	801a      	strh	r2, [r3, #0]
  }
}
 800e3a8:	370c      	adds	r7, #12
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b0:	4770      	bx	lr
 800e3b2:	bf00      	nop

0800e3b4 <I2C_GetPEC>:
  * @brief  Returns the PEC value for the specified I2C.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The PEC value.
  */
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
 800e3b4:	b480      	push	{r7}
 800e3b6:	b083      	sub	sp, #12
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	8b1b      	ldrh	r3, [r3, #24]
 800e3c0:	b29b      	uxth	r3, r3
 800e3c2:	0a1b      	lsrs	r3, r3, #8
 800e3c4:	b29b      	uxth	r3, r3
 800e3c6:	b2db      	uxtb	r3, r3
}
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	370c      	adds	r7, #12
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d2:	4770      	bx	lr

0800e3d4 <I2C_DMACmd>:
  * @param  NewState: new state of the I2C DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e3d4:	b480      	push	{r7}
 800e3d6:	b083      	sub	sp, #12
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
 800e3dc:	460b      	mov	r3, r1
 800e3de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e3e0:	78fb      	ldrb	r3, [r7, #3]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d008      	beq.n	800e3f8 <I2C_DMACmd+0x24>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	889b      	ldrh	r3, [r3, #4]
 800e3ea:	b29b      	uxth	r3, r3
 800e3ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e3f0:	b29a      	uxth	r2, r3
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	809a      	strh	r2, [r3, #4]
 800e3f6:	e007      	b.n	800e408 <I2C_DMACmd+0x34>
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	889b      	ldrh	r3, [r3, #4]
 800e3fc:	b29b      	uxth	r3, r3
 800e3fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e402:	b29a      	uxth	r2, r3
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	809a      	strh	r2, [r3, #4]
  }
}
 800e408:	370c      	adds	r7, #12
 800e40a:	46bd      	mov	sp, r7
 800e40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e410:	4770      	bx	lr
 800e412:	bf00      	nop

0800e414 <I2C_DMALastTransferCmd>:
  * @param  NewState: new state of the I2C DMA last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e414:	b480      	push	{r7}
 800e416:	b083      	sub	sp, #12
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
 800e41c:	460b      	mov	r3, r1
 800e41e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e420:	78fb      	ldrb	r3, [r7, #3]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d008      	beq.n	800e438 <I2C_DMALastTransferCmd+0x24>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	889b      	ldrh	r3, [r3, #4]
 800e42a:	b29b      	uxth	r3, r3
 800e42c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e430:	b29a      	uxth	r2, r3
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	809a      	strh	r2, [r3, #4]
 800e436:	e007      	b.n	800e448 <I2C_DMALastTransferCmd+0x34>
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	889b      	ldrh	r3, [r3, #4]
 800e43c:	b29b      	uxth	r3, r3
 800e43e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e442:	b29a      	uxth	r2, r3
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	809a      	strh	r2, [r3, #4]
  }
}
 800e448:	370c      	adds	r7, #12
 800e44a:	46bd      	mov	sp, r7
 800e44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e450:	4770      	bx	lr
 800e452:	bf00      	nop

0800e454 <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 800e454:	b480      	push	{r7}
 800e456:	b085      	sub	sp, #20
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
 800e45c:	460b      	mov	r3, r1
 800e45e:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 800e460:	2300      	movs	r3, #0
 800e462:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	60fb      	str	r3, [r7, #12]
  tmp += I2C_Register;
 800e468:	78fa      	ldrb	r2, [r7, #3]
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	4413      	add	r3, r2
 800e46e:	60fb      	str	r3, [r7, #12]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	881b      	ldrh	r3, [r3, #0]
 800e474:	b29b      	uxth	r3, r3
}
 800e476:	4618      	mov	r0, r3
 800e478:	3714      	adds	r7, #20
 800e47a:	46bd      	mov	sp, r7
 800e47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e480:	4770      	bx	lr
 800e482:	bf00      	nop

0800e484 <I2C_ITConfig>:
  * @param  NewState: new state of the specified I2C interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
{
 800e484:	b480      	push	{r7}
 800e486:	b083      	sub	sp, #12
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
 800e48c:	4613      	mov	r3, r2
 800e48e:	460a      	mov	r2, r1
 800e490:	807a      	strh	r2, [r7, #2]
 800e492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 800e494:	787b      	ldrb	r3, [r7, #1]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d008      	beq.n	800e4ac <I2C_ITConfig+0x28>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	889b      	ldrh	r3, [r3, #4]
 800e49e:	b29a      	uxth	r2, r3
 800e4a0:	887b      	ldrh	r3, [r7, #2]
 800e4a2:	4313      	orrs	r3, r2
 800e4a4:	b29a      	uxth	r2, r3
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	809a      	strh	r2, [r3, #4]
 800e4aa:	e009      	b.n	800e4c0 <I2C_ITConfig+0x3c>
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	889b      	ldrh	r3, [r3, #4]
 800e4b0:	b29a      	uxth	r2, r3
 800e4b2:	887b      	ldrh	r3, [r7, #2]
 800e4b4:	43db      	mvns	r3, r3
 800e4b6:	b29b      	uxth	r3, r3
 800e4b8:	4013      	ands	r3, r2
 800e4ba:	b29a      	uxth	r2, r3
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	809a      	strh	r2, [r3, #4]
  }
}
 800e4c0:	370c      	adds	r7, #12
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c8:	4770      	bx	lr
 800e4ca:	bf00      	nop

0800e4cc <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 800e4cc:	b480      	push	{r7}
 800e4ce:	b087      	sub	sp, #28
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
 800e4d4:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	60fb      	str	r3, [r7, #12]
 800e4de:	2300      	movs	r3, #0
 800e4e0:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	8a9b      	ldrh	r3, [r3, #20]
 800e4ea:	b29b      	uxth	r3, r3
 800e4ec:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	8b1b      	ldrh	r3, [r3, #24]
 800e4f2:	b29b      	uxth	r3, r3
 800e4f4:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 800e4f6:	68bb      	ldr	r3, [r7, #8]
 800e4f8:	041b      	lsls	r3, r3, #16
 800e4fa:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 800e4fc:	68fa      	ldr	r2, [r7, #12]
 800e4fe:	68bb      	ldr	r3, [r7, #8]
 800e500:	4313      	orrs	r3, r2
 800e502:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e506:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 800e508:	693a      	ldr	r2, [r7, #16]
 800e50a:	683b      	ldr	r3, [r7, #0]
 800e50c:	401a      	ands	r2, r3
 800e50e:	683b      	ldr	r3, [r7, #0]
 800e510:	429a      	cmp	r2, r3
 800e512:	d102      	bne.n	800e51a <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 800e514:	2301      	movs	r3, #1
 800e516:	75fb      	strb	r3, [r7, #23]
 800e518:	e001      	b.n	800e51e <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 800e51a:	2300      	movs	r3, #0
 800e51c:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 800e51e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e520:	4618      	mov	r0, r3
 800e522:	371c      	adds	r7, #28
 800e524:	46bd      	mov	sp, r7
 800e526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52a:	4770      	bx	lr

0800e52c <I2C_GetLastEvent>:
  *         in stm32f4xx_i2c.h file.
  *    
  * @retval The last event
  */
uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
{
 800e52c:	b480      	push	{r7}
 800e52e:	b087      	sub	sp, #28
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
  uint32_t lastevent = 0;
 800e534:	2300      	movs	r3, #0
 800e536:	617b      	str	r3, [r7, #20]
  uint32_t flag1 = 0, flag2 = 0;
 800e538:	2300      	movs	r3, #0
 800e53a:	613b      	str	r3, [r7, #16]
 800e53c:	2300      	movs	r3, #0
 800e53e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	8a9b      	ldrh	r3, [r3, #20]
 800e544:	b29b      	uxth	r3, r3
 800e546:	613b      	str	r3, [r7, #16]
  flag2 = I2Cx->SR2;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	8b1b      	ldrh	r3, [r3, #24]
 800e54c:	b29b      	uxth	r3, r3
 800e54e:	60fb      	str	r3, [r7, #12]
  flag2 = flag2 << 16;
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	041b      	lsls	r3, r3, #16
 800e554:	60fb      	str	r3, [r7, #12]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 800e556:	693a      	ldr	r2, [r7, #16]
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	4313      	orrs	r3, r2
 800e55c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e560:	617b      	str	r3, [r7, #20]

  /* Return status */
  return lastevent;
 800e562:	697b      	ldr	r3, [r7, #20]
}
 800e564:	4618      	mov	r0, r3
 800e566:	371c      	adds	r7, #28
 800e568:	46bd      	mov	sp, r7
 800e56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56e:	4770      	bx	lr

0800e570 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 800e570:	b480      	push	{r7}
 800e572:	b087      	sub	sp, #28
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
 800e578:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800e57a:	2300      	movs	r3, #0
 800e57c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 800e57e:	2300      	movs	r3, #0
 800e580:	613b      	str	r3, [r7, #16]
 800e582:	2300      	movs	r3, #0
 800e584:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 800e58a:	683b      	ldr	r3, [r7, #0]
 800e58c:	0f1b      	lsrs	r3, r3, #28
 800e58e:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e596:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 800e598:	693b      	ldr	r3, [r7, #16]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d003      	beq.n	800e5a6 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	3314      	adds	r3, #20
 800e5a2:	60fb      	str	r3, [r7, #12]
 800e5a4:	e005      	b.n	800e5b2 <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	0c1b      	lsrs	r3, r3, #16
 800e5aa:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	3318      	adds	r3, #24
 800e5b0:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	681a      	ldr	r2, [r3, #0]
 800e5b6:	683b      	ldr	r3, [r7, #0]
 800e5b8:	4013      	ands	r3, r2
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d002      	beq.n	800e5c4 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 800e5be:	2301      	movs	r3, #1
 800e5c0:	75fb      	strb	r3, [r7, #23]
 800e5c2:	e001      	b.n	800e5c8 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 800e5c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	371c      	adds	r7, #28
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d4:	4770      	bx	lr
 800e5d6:	bf00      	nop

0800e5d8 <I2C_ClearFlag>:
  *          register (I2C_SendData()).
  *  
  * @retval None
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b085      	sub	sp, #20
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
 800e5e0:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
 800e5e6:	683b      	ldr	r3, [r7, #0]
 800e5e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e5ec:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	b29b      	uxth	r3, r3
 800e5f2:	43db      	mvns	r3, r3
 800e5f4:	b29a      	uxth	r2, r3
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	829a      	strh	r2, [r3, #20]
}
 800e5fa:	3714      	adds	r7, #20
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e602:	4770      	bx	lr

0800e604 <I2C_GetITStatus>:
  *                              Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 800e604:	b480      	push	{r7}
 800e606:	b085      	sub	sp, #20
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
 800e60c:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800e60e:	2300      	movs	r3, #0
 800e610:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 800e612:	2300      	movs	r3, #0
 800e614:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800e61c:	0c1a      	lsrs	r2, r3, #16
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	889b      	ldrh	r3, [r3, #4]
 800e622:	b29b      	uxth	r3, r3
 800e624:	4013      	ands	r3, r2
 800e626:	60bb      	str	r3, [r7, #8]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e62e:	603b      	str	r3, [r7, #0]

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	8a9b      	ldrh	r3, [r3, #20]
 800e634:	b29b      	uxth	r3, r3
 800e636:	461a      	mov	r2, r3
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	4013      	ands	r3, r2
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d005      	beq.n	800e64c <I2C_GetITStatus+0x48>
 800e640:	68bb      	ldr	r3, [r7, #8]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d002      	beq.n	800e64c <I2C_GetITStatus+0x48>
  {
    /* I2C_IT is set */
    bitstatus = SET;
 800e646:	2301      	movs	r3, #1
 800e648:	73fb      	strb	r3, [r7, #15]
 800e64a:	e001      	b.n	800e650 <I2C_GetITStatus+0x4c>
  }
  else
  {
    /* I2C_IT is reset */
    bitstatus = RESET;
 800e64c:	2300      	movs	r3, #0
 800e64e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the I2C_IT status */
  return  bitstatus;
 800e650:	7bfb      	ldrb	r3, [r7, #15]
}
 800e652:	4618      	mov	r0, r3
 800e654:	3714      	adds	r7, #20
 800e656:	46bd      	mov	sp, r7
 800e658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65c:	4770      	bx	lr
 800e65e:	bf00      	nop

0800e660 <I2C_ClearITPendingBit>:
  *          I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
  *          I2C_DR register (I2C_SendData()).
  * @retval None
  */
void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 800e660:	b480      	push	{r7}
 800e662:	b085      	sub	sp, #20
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
 800e668:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 800e66a:	2300      	movs	r3, #0
 800e66c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e674:	60fb      	str	r3, [r7, #12]

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	b29b      	uxth	r3, r3
 800e67a:	43db      	mvns	r3, r3
 800e67c:	b29a      	uxth	r2, r3
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	829a      	strh	r2, [r3, #20]
}
 800e682:	3714      	adds	r7, #20
 800e684:	46bd      	mov	sp, r7
 800e686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68a:	4770      	bx	lr

0800e68c <IWDG_WriteAccessCmd>:
  *            @arg IWDG_WriteAccess_Enable: Enable write access to IWDG_PR and IWDG_RLR registers
  *            @arg IWDG_WriteAccess_Disable: Disable write access to IWDG_PR and IWDG_RLR registers
  * @retval None
  */
void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
{
 800e68c:	b480      	push	{r7}
 800e68e:	b083      	sub	sp, #12
 800e690:	af00      	add	r7, sp, #0
 800e692:	4603      	mov	r3, r0
 800e694:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
  IWDG->KR = IWDG_WriteAccess;
 800e696:	4b04      	ldr	r3, [pc, #16]	; (800e6a8 <IWDG_WriteAccessCmd+0x1c>)
 800e698:	88fa      	ldrh	r2, [r7, #6]
 800e69a:	601a      	str	r2, [r3, #0]
}
 800e69c:	370c      	adds	r7, #12
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a4:	4770      	bx	lr
 800e6a6:	bf00      	nop
 800e6a8:	40003000 	.word	0x40003000

0800e6ac <IWDG_SetPrescaler>:
  *            @arg IWDG_Prescaler_128: IWDG prescaler set to 128
  *            @arg IWDG_Prescaler_256: IWDG prescaler set to 256
  * @retval None
  */
void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
{
 800e6ac:	b480      	push	{r7}
 800e6ae:	b083      	sub	sp, #12
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
  IWDG->PR = IWDG_Prescaler;
 800e6b6:	4b04      	ldr	r3, [pc, #16]	; (800e6c8 <IWDG_SetPrescaler+0x1c>)
 800e6b8:	79fa      	ldrb	r2, [r7, #7]
 800e6ba:	605a      	str	r2, [r3, #4]
}
 800e6bc:	370c      	adds	r7, #12
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c4:	4770      	bx	lr
 800e6c6:	bf00      	nop
 800e6c8:	40003000 	.word	0x40003000

0800e6cc <IWDG_SetReload>:
  * @param  Reload: specifies the IWDG Reload value.
  *          This parameter must be a number between 0 and 0x0FFF.
  * @retval None
  */
void IWDG_SetReload(uint16_t Reload)
{
 800e6cc:	b480      	push	{r7}
 800e6ce:	b083      	sub	sp, #12
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_RELOAD(Reload));
  IWDG->RLR = Reload;
 800e6d6:	4b04      	ldr	r3, [pc, #16]	; (800e6e8 <IWDG_SetReload+0x1c>)
 800e6d8:	88fa      	ldrh	r2, [r7, #6]
 800e6da:	609a      	str	r2, [r3, #8]
}
 800e6dc:	370c      	adds	r7, #12
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e4:	4770      	bx	lr
 800e6e6:	bf00      	nop
 800e6e8:	40003000 	.word	0x40003000

0800e6ec <IWDG_ReloadCounter>:
  *         (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_ReloadCounter(void)
{
 800e6ec:	b480      	push	{r7}
 800e6ee:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_RELOAD;
 800e6f0:	4b03      	ldr	r3, [pc, #12]	; (800e700 <IWDG_ReloadCounter+0x14>)
 800e6f2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800e6f6:	601a      	str	r2, [r3, #0]
}
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fe:	4770      	bx	lr
 800e700:	40003000 	.word	0x40003000

0800e704 <IWDG_Enable>:
  * @brief  Enables IWDG (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_Enable(void)
{
 800e704:	b480      	push	{r7}
 800e706:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_ENABLE;
 800e708:	4b03      	ldr	r3, [pc, #12]	; (800e718 <IWDG_Enable+0x14>)
 800e70a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800e70e:	601a      	str	r2, [r3, #0]
}
 800e710:	46bd      	mov	sp, r7
 800e712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e716:	4770      	bx	lr
 800e718:	40003000 	.word	0x40003000

0800e71c <IWDG_GetFlagStatus>:
  *            @arg IWDG_FLAG_PVU: Prescaler Value Update on going
  *            @arg IWDG_FLAG_RVU: Reload Value Update on going
  * @retval The new state of IWDG_FLAG (SET or RESET).
  */
FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
{
 800e71c:	b480      	push	{r7}
 800e71e:	b085      	sub	sp, #20
 800e720:	af00      	add	r7, sp, #0
 800e722:	4603      	mov	r3, r0
 800e724:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 800e726:	2300      	movs	r3, #0
 800e728:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_IWDG_FLAG(IWDG_FLAG));
  if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
 800e72a:	4b09      	ldr	r3, [pc, #36]	; (800e750 <IWDG_GetFlagStatus+0x34>)
 800e72c:	68da      	ldr	r2, [r3, #12]
 800e72e:	88fb      	ldrh	r3, [r7, #6]
 800e730:	4013      	ands	r3, r2
 800e732:	2b00      	cmp	r3, #0
 800e734:	d002      	beq.n	800e73c <IWDG_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 800e736:	2301      	movs	r3, #1
 800e738:	73fb      	strb	r3, [r7, #15]
 800e73a:	e001      	b.n	800e740 <IWDG_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 800e73c:	2300      	movs	r3, #0
 800e73e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 800e740:	7bfb      	ldrb	r3, [r7, #15]
}
 800e742:	4618      	mov	r0, r3
 800e744:	3714      	adds	r7, #20
 800e746:	46bd      	mov	sp, r7
 800e748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74c:	4770      	bx	lr
 800e74e:	bf00      	nop
 800e750:	40003000 	.word	0x40003000

0800e754 <LTDC_DeInit>:
  * @param  None
  * @retval None
  */

void LTDC_DeInit(void)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	af00      	add	r7, sp, #0
  /* Enable LTDC reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_LTDC, ENABLE);
 800e758:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800e75c:	2101      	movs	r1, #1
 800e75e:	f001 fb79 	bl	800fe54 <RCC_APB2PeriphResetCmd>
  /* Release LTDC from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_LTDC, DISABLE);
 800e762:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800e766:	2100      	movs	r1, #0
 800e768:	f001 fb74 	bl	800fe54 <RCC_APB2PeriphResetCmd>
}
 800e76c:	bd80      	pop	{r7, pc}
 800e76e:	bf00      	nop

0800e770 <LTDC_Init>:
  *         the configuration information for the specified LTDC peripheral.
  * @retval None
  */

void LTDC_Init(LTDC_InitTypeDef* LTDC_InitStruct)
{
 800e770:	b480      	push	{r7}
 800e772:	b089      	sub	sp, #36	; 0x24
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
  uint32_t horizontalsync = 0;
 800e778:	2300      	movs	r3, #0
 800e77a:	61fb      	str	r3, [r7, #28]
  uint32_t accumulatedHBP = 0;
 800e77c:	2300      	movs	r3, #0
 800e77e:	61bb      	str	r3, [r7, #24]
  uint32_t accumulatedactiveW = 0;
 800e780:	2300      	movs	r3, #0
 800e782:	617b      	str	r3, [r7, #20]
  uint32_t totalwidth = 0;
 800e784:	2300      	movs	r3, #0
 800e786:	613b      	str	r3, [r7, #16]
  uint32_t backgreen = 0;
 800e788:	2300      	movs	r3, #0
 800e78a:	60fb      	str	r3, [r7, #12]
  uint32_t backred = 0;
 800e78c:	2300      	movs	r3, #0
 800e78e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LTDC_BackBlueValue(LTDC_InitStruct->LTDC_BackgroundBlueValue));
  assert_param(IS_LTDC_BackGreenValue(LTDC_InitStruct->LTDC_BackgroundGreenValue));
  assert_param(IS_LTDC_BackRedValue(LTDC_InitStruct->LTDC_BackgroundRedValue));

  /* Sets Synchronization size */
  LTDC->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800e790:	4a3f      	ldr	r2, [pc, #252]	; (800e890 <LTDC_Init+0x120>)
 800e792:	4b3f      	ldr	r3, [pc, #252]	; (800e890 <LTDC_Init+0x120>)
 800e794:	6899      	ldr	r1, [r3, #8]
 800e796:	4b3f      	ldr	r3, [pc, #252]	; (800e894 <LTDC_Init+0x124>)
 800e798:	400b      	ands	r3, r1
 800e79a:	6093      	str	r3, [r2, #8]
  horizontalsync = (LTDC_InitStruct->LTDC_HorizontalSync << 16);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	691b      	ldr	r3, [r3, #16]
 800e7a0:	041b      	lsls	r3, r3, #16
 800e7a2:	61fb      	str	r3, [r7, #28]
  LTDC->SSCR |= (horizontalsync | LTDC_InitStruct->LTDC_VerticalSync);
 800e7a4:	4b3a      	ldr	r3, [pc, #232]	; (800e890 <LTDC_Init+0x120>)
 800e7a6:	4a3a      	ldr	r2, [pc, #232]	; (800e890 <LTDC_Init+0x120>)
 800e7a8:	6891      	ldr	r1, [r2, #8]
 800e7aa:	687a      	ldr	r2, [r7, #4]
 800e7ac:	6950      	ldr	r0, [r2, #20]
 800e7ae:	69fa      	ldr	r2, [r7, #28]
 800e7b0:	4302      	orrs	r2, r0
 800e7b2:	430a      	orrs	r2, r1
 800e7b4:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  LTDC->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800e7b6:	4a36      	ldr	r2, [pc, #216]	; (800e890 <LTDC_Init+0x120>)
 800e7b8:	4b35      	ldr	r3, [pc, #212]	; (800e890 <LTDC_Init+0x120>)
 800e7ba:	68d9      	ldr	r1, [r3, #12]
 800e7bc:	4b35      	ldr	r3, [pc, #212]	; (800e894 <LTDC_Init+0x124>)
 800e7be:	400b      	ands	r3, r1
 800e7c0:	60d3      	str	r3, [r2, #12]
  accumulatedHBP = (LTDC_InitStruct->LTDC_AccumulatedHBP << 16);
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	699b      	ldr	r3, [r3, #24]
 800e7c6:	041b      	lsls	r3, r3, #16
 800e7c8:	61bb      	str	r3, [r7, #24]
  LTDC->BPCR |= (accumulatedHBP | LTDC_InitStruct->LTDC_AccumulatedVBP);
 800e7ca:	4b31      	ldr	r3, [pc, #196]	; (800e890 <LTDC_Init+0x120>)
 800e7cc:	4a30      	ldr	r2, [pc, #192]	; (800e890 <LTDC_Init+0x120>)
 800e7ce:	68d1      	ldr	r1, [r2, #12]
 800e7d0:	687a      	ldr	r2, [r7, #4]
 800e7d2:	69d0      	ldr	r0, [r2, #28]
 800e7d4:	69ba      	ldr	r2, [r7, #24]
 800e7d6:	4302      	orrs	r2, r0
 800e7d8:	430a      	orrs	r2, r1
 800e7da:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  LTDC->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800e7dc:	4a2c      	ldr	r2, [pc, #176]	; (800e890 <LTDC_Init+0x120>)
 800e7de:	4b2c      	ldr	r3, [pc, #176]	; (800e890 <LTDC_Init+0x120>)
 800e7e0:	6919      	ldr	r1, [r3, #16]
 800e7e2:	4b2c      	ldr	r3, [pc, #176]	; (800e894 <LTDC_Init+0x124>)
 800e7e4:	400b      	ands	r3, r1
 800e7e6:	6113      	str	r3, [r2, #16]
  accumulatedactiveW = (LTDC_InitStruct->LTDC_AccumulatedActiveW << 16);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	6a1b      	ldr	r3, [r3, #32]
 800e7ec:	041b      	lsls	r3, r3, #16
 800e7ee:	617b      	str	r3, [r7, #20]
  LTDC->AWCR |= (accumulatedactiveW | LTDC_InitStruct->LTDC_AccumulatedActiveH);
 800e7f0:	4b27      	ldr	r3, [pc, #156]	; (800e890 <LTDC_Init+0x120>)
 800e7f2:	4a27      	ldr	r2, [pc, #156]	; (800e890 <LTDC_Init+0x120>)
 800e7f4:	6911      	ldr	r1, [r2, #16]
 800e7f6:	687a      	ldr	r2, [r7, #4]
 800e7f8:	6a50      	ldr	r0, [r2, #36]	; 0x24
 800e7fa:	697a      	ldr	r2, [r7, #20]
 800e7fc:	4302      	orrs	r2, r0
 800e7fe:	430a      	orrs	r2, r1
 800e800:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  LTDC->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800e802:	4a23      	ldr	r2, [pc, #140]	; (800e890 <LTDC_Init+0x120>)
 800e804:	4b22      	ldr	r3, [pc, #136]	; (800e890 <LTDC_Init+0x120>)
 800e806:	6959      	ldr	r1, [r3, #20]
 800e808:	4b22      	ldr	r3, [pc, #136]	; (800e894 <LTDC_Init+0x124>)
 800e80a:	400b      	ands	r3, r1
 800e80c:	6153      	str	r3, [r2, #20]
  totalwidth = (LTDC_InitStruct->LTDC_TotalWidth << 16);
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e812:	041b      	lsls	r3, r3, #16
 800e814:	613b      	str	r3, [r7, #16]
  LTDC->TWCR |= (totalwidth | LTDC_InitStruct->LTDC_TotalHeigh);
 800e816:	4b1e      	ldr	r3, [pc, #120]	; (800e890 <LTDC_Init+0x120>)
 800e818:	4a1d      	ldr	r2, [pc, #116]	; (800e890 <LTDC_Init+0x120>)
 800e81a:	6951      	ldr	r1, [r2, #20]
 800e81c:	687a      	ldr	r2, [r7, #4]
 800e81e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800e820:	693a      	ldr	r2, [r7, #16]
 800e822:	4302      	orrs	r2, r0
 800e824:	430a      	orrs	r2, r1
 800e826:	615a      	str	r2, [r3, #20]

  LTDC->GCR &= (uint32_t)GCR_MASK;
 800e828:	4a19      	ldr	r2, [pc, #100]	; (800e890 <LTDC_Init+0x120>)
 800e82a:	4b19      	ldr	r3, [pc, #100]	; (800e890 <LTDC_Init+0x120>)
 800e82c:	6999      	ldr	r1, [r3, #24]
 800e82e:	4b1a      	ldr	r3, [pc, #104]	; (800e898 <LTDC_Init+0x128>)
 800e830:	400b      	ands	r3, r1
 800e832:	6193      	str	r3, [r2, #24]
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 800e834:	4b16      	ldr	r3, [pc, #88]	; (800e890 <LTDC_Init+0x120>)
 800e836:	4a16      	ldr	r2, [pc, #88]	; (800e890 <LTDC_Init+0x120>)
 800e838:	6991      	ldr	r1, [r2, #24]
 800e83a:	687a      	ldr	r2, [r7, #4]
 800e83c:	6810      	ldr	r0, [r2, #0]
 800e83e:	687a      	ldr	r2, [r7, #4]
 800e840:	6852      	ldr	r2, [r2, #4]
 800e842:	4310      	orrs	r0, r2
                           LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);
 800e844:	687a      	ldr	r2, [r7, #4]
 800e846:	6892      	ldr	r2, [r2, #8]
  LTDC->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
  totalwidth = (LTDC_InitStruct->LTDC_TotalWidth << 16);
  LTDC->TWCR |= (totalwidth | LTDC_InitStruct->LTDC_TotalHeigh);

  LTDC->GCR &= (uint32_t)GCR_MASK;
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 800e848:	4310      	orrs	r0, r2
                           LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);
 800e84a:	687a      	ldr	r2, [r7, #4]
 800e84c:	68d2      	ldr	r2, [r2, #12]
  LTDC->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
  totalwidth = (LTDC_InitStruct->LTDC_TotalWidth << 16);
  LTDC->TWCR |= (totalwidth | LTDC_InitStruct->LTDC_TotalHeigh);

  LTDC->GCR &= (uint32_t)GCR_MASK;
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 800e84e:	4302      	orrs	r2, r0
 800e850:	430a      	orrs	r2, r1
 800e852:	619a      	str	r2, [r3, #24]
                           LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);

  /* sets the background color value */
  backgreen = (LTDC_InitStruct->LTDC_BackgroundGreenValue << 8);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e858:	021b      	lsls	r3, r3, #8
 800e85a:	60fb      	str	r3, [r7, #12]
  backred = (LTDC_InitStruct->LTDC_BackgroundRedValue << 16);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e860:	041b      	lsls	r3, r3, #16
 800e862:	60bb      	str	r3, [r7, #8]

  LTDC->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800e864:	4b0a      	ldr	r3, [pc, #40]	; (800e890 <LTDC_Init+0x120>)
 800e866:	4a0a      	ldr	r2, [pc, #40]	; (800e890 <LTDC_Init+0x120>)
 800e868:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e86a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800e86e:	62da      	str	r2, [r3, #44]	; 0x2c
  LTDC->BCCR |= (backred | backgreen | LTDC_InitStruct->LTDC_BackgroundBlueValue);
 800e870:	4b07      	ldr	r3, [pc, #28]	; (800e890 <LTDC_Init+0x120>)
 800e872:	4a07      	ldr	r2, [pc, #28]	; (800e890 <LTDC_Init+0x120>)
 800e874:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800e876:	68b8      	ldr	r0, [r7, #8]
 800e878:	68fa      	ldr	r2, [r7, #12]
 800e87a:	4310      	orrs	r0, r2
 800e87c:	687a      	ldr	r2, [r7, #4]
 800e87e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e880:	4302      	orrs	r2, r0
 800e882:	430a      	orrs	r2, r1
 800e884:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800e886:	3724      	adds	r7, #36	; 0x24
 800e888:	46bd      	mov	sp, r7
 800e88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88e:	4770      	bx	lr
 800e890:	40016800 	.word	0x40016800
 800e894:	f000f800 	.word	0xf000f800
 800e898:	0ffe888f 	.word	0x0ffe888f

0800e89c <LTDC_StructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_StructInit(LTDC_InitTypeDef* LTDC_InitStruct)
{
 800e89c:	b480      	push	{r7}
 800e89e:	b083      	sub	sp, #12
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
  /*--------------- Reset LTDC init structure parameters values ----------------*/
  LTDC_InitStruct->LTDC_HSPolarity = LTDC_HSPolarity_AL;      /*!< Initialize the LTDC_HSPolarity member */ 
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	601a      	str	r2, [r3, #0]
  LTDC_InitStruct->LTDC_VSPolarity = LTDC_VSPolarity_AL;      /*!< Initialize the LTDC_VSPolarity member */
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	605a      	str	r2, [r3, #4]
  LTDC_InitStruct->LTDC_DEPolarity = LTDC_DEPolarity_AL;      /*!< Initialize the LTDC_DEPolarity member */
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	609a      	str	r2, [r3, #8]
  LTDC_InitStruct->LTDC_PCPolarity = LTDC_PCPolarity_IPC;     /*!< Initialize the LTDC_PCPolarity member */
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	60da      	str	r2, [r3, #12]
  LTDC_InitStruct->LTDC_HorizontalSync = 0x00;                /*!< Initialize the LTDC_HorizontalSync member */
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	2200      	movs	r2, #0
 800e8c0:	611a      	str	r2, [r3, #16]
  LTDC_InitStruct->LTDC_VerticalSync = 0x00;                  /*!< Initialize the LTDC_VerticalSync member */
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	615a      	str	r2, [r3, #20]
  LTDC_InitStruct->LTDC_AccumulatedHBP = 0x00;                /*!< Initialize the LTDC_AccumulatedHBP member */
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	619a      	str	r2, [r3, #24]
  LTDC_InitStruct->LTDC_AccumulatedVBP = 0x00;                /*!< Initialize the LTDC_AccumulatedVBP member */
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	61da      	str	r2, [r3, #28]
  LTDC_InitStruct->LTDC_AccumulatedActiveW = 0x00;            /*!< Initialize the LTDC_AccumulatedActiveW member */
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	621a      	str	r2, [r3, #32]
  LTDC_InitStruct->LTDC_AccumulatedActiveH = 0x00;            /*!< Initialize the LTDC_AccumulatedActiveH member */
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	2200      	movs	r2, #0
 800e8de:	625a      	str	r2, [r3, #36]	; 0x24
  LTDC_InitStruct->LTDC_TotalWidth = 0x00;                    /*!< Initialize the LTDC_TotalWidth member */
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	629a      	str	r2, [r3, #40]	; 0x28
  LTDC_InitStruct->LTDC_TotalHeigh = 0x00;                    /*!< Initialize the LTDC_TotalHeigh member */
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	62da      	str	r2, [r3, #44]	; 0x2c
  LTDC_InitStruct->LTDC_BackgroundRedValue = 0x00;            /*!< Initialize the LTDC_BackgroundRedValue member */
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	631a      	str	r2, [r3, #48]	; 0x30
  LTDC_InitStruct->LTDC_BackgroundGreenValue = 0x00;          /*!< Initialize the LTDC_BackgroundGreenValue member */
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC_InitStruct->LTDC_BackgroundBlueValue = 0x00;           /*!< Initialize the LTDC_BackgroundBlueValue member */
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	639a      	str	r2, [r3, #56]	; 0x38
}
 800e8fe:	370c      	adds	r7, #12
 800e900:	46bd      	mov	sp, r7
 800e902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e906:	4770      	bx	lr

0800e908 <LTDC_Cmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_Cmd(FunctionalState NewState)
{
 800e908:	b480      	push	{r7}
 800e90a:	b083      	sub	sp, #12
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	4603      	mov	r3, r0
 800e910:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800e912:	79fb      	ldrb	r3, [r7, #7]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d006      	beq.n	800e926 <LTDC_Cmd+0x1e>
  {
    /* Enable LTDC by setting LTDCEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_LTDCEN;
 800e918:	4b08      	ldr	r3, [pc, #32]	; (800e93c <LTDC_Cmd+0x34>)
 800e91a:	4a08      	ldr	r2, [pc, #32]	; (800e93c <LTDC_Cmd+0x34>)
 800e91c:	6992      	ldr	r2, [r2, #24]
 800e91e:	f042 0201 	orr.w	r2, r2, #1
 800e922:	619a      	str	r2, [r3, #24]
 800e924:	e005      	b.n	800e932 <LTDC_Cmd+0x2a>
  }
  else
  {
    /* Disable LTDC by clearing LTDCEN bit */
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_LTDCEN;
 800e926:	4b05      	ldr	r3, [pc, #20]	; (800e93c <LTDC_Cmd+0x34>)
 800e928:	4a04      	ldr	r2, [pc, #16]	; (800e93c <LTDC_Cmd+0x34>)
 800e92a:	6992      	ldr	r2, [r2, #24]
 800e92c:	f022 0201 	bic.w	r2, r2, #1
 800e930:	619a      	str	r2, [r3, #24]
  }
}
 800e932:	370c      	adds	r7, #12
 800e934:	46bd      	mov	sp, r7
 800e936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93a:	4770      	bx	lr
 800e93c:	40016800 	.word	0x40016800

0800e940 <LTDC_DitherCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_DitherCmd(FunctionalState NewState)
{
 800e940:	b480      	push	{r7}
 800e942:	b083      	sub	sp, #12
 800e944:	af00      	add	r7, sp, #0
 800e946:	4603      	mov	r3, r0
 800e948:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800e94a:	79fb      	ldrb	r3, [r7, #7]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d006      	beq.n	800e95e <LTDC_DitherCmd+0x1e>
  {
    /* Enable Dither by setting DTEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_DTEN;
 800e950:	4b08      	ldr	r3, [pc, #32]	; (800e974 <LTDC_DitherCmd+0x34>)
 800e952:	4a08      	ldr	r2, [pc, #32]	; (800e974 <LTDC_DitherCmd+0x34>)
 800e954:	6992      	ldr	r2, [r2, #24]
 800e956:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800e95a:	619a      	str	r2, [r3, #24]
 800e95c:	e005      	b.n	800e96a <LTDC_DitherCmd+0x2a>
  }
  else
  {
    /* Disable Dither by clearing DTEN bit */
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_DTEN;
 800e95e:	4b05      	ldr	r3, [pc, #20]	; (800e974 <LTDC_DitherCmd+0x34>)
 800e960:	4a04      	ldr	r2, [pc, #16]	; (800e974 <LTDC_DitherCmd+0x34>)
 800e962:	6992      	ldr	r2, [r2, #24]
 800e964:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800e968:	619a      	str	r2, [r3, #24]
  }
}
 800e96a:	370c      	adds	r7, #12
 800e96c:	46bd      	mov	sp, r7
 800e96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e972:	4770      	bx	lr
 800e974:	40016800 	.word	0x40016800

0800e978 <LTDC_GetRGBWidth>:
  *         the Dither RGB width.
  * @retval None
  */

LTDC_RGBTypeDef LTDC_GetRGBWidth(void)
{
 800e978:	b480      	push	{r7}
 800e97a:	b087      	sub	sp, #28
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
  LTDC_RGBTypeDef LTDC_RGB_InitStruct;

  LTDC->GCR &= (uint32_t)GCR_MASK;
 800e980:	4a11      	ldr	r2, [pc, #68]	; (800e9c8 <LTDC_GetRGBWidth+0x50>)
 800e982:	4b11      	ldr	r3, [pc, #68]	; (800e9c8 <LTDC_GetRGBWidth+0x50>)
 800e984:	6999      	ldr	r1, [r3, #24]
 800e986:	4b11      	ldr	r3, [pc, #68]	; (800e9cc <LTDC_GetRGBWidth+0x54>)
 800e988:	400b      	ands	r3, r1
 800e98a:	6193      	str	r3, [r2, #24]

  LTDC_RGB_InitStruct.LTDC_BlueWidth = (uint32_t)((LTDC->GCR >> 4) & 0x7);
 800e98c:	4b0e      	ldr	r3, [pc, #56]	; (800e9c8 <LTDC_GetRGBWidth+0x50>)
 800e98e:	699b      	ldr	r3, [r3, #24]
 800e990:	091b      	lsrs	r3, r3, #4
 800e992:	f003 0307 	and.w	r3, r3, #7
 800e996:	60fb      	str	r3, [r7, #12]
  LTDC_RGB_InitStruct.LTDC_GreenWidth = (uint32_t)((LTDC->GCR >> 8) & 0x7);
 800e998:	4b0b      	ldr	r3, [pc, #44]	; (800e9c8 <LTDC_GetRGBWidth+0x50>)
 800e99a:	699b      	ldr	r3, [r3, #24]
 800e99c:	0a1b      	lsrs	r3, r3, #8
 800e99e:	f003 0307 	and.w	r3, r3, #7
 800e9a2:	613b      	str	r3, [r7, #16]
  LTDC_RGB_InitStruct.LTDC_RedWidth = (uint32_t)((LTDC->GCR >> 12) & 0x7);
 800e9a4:	4b08      	ldr	r3, [pc, #32]	; (800e9c8 <LTDC_GetRGBWidth+0x50>)
 800e9a6:	699b      	ldr	r3, [r3, #24]
 800e9a8:	0b1b      	lsrs	r3, r3, #12
 800e9aa:	f003 0307 	and.w	r3, r3, #7
 800e9ae:	617b      	str	r3, [r7, #20]

  return LTDC_RGB_InitStruct;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	f107 020c 	add.w	r2, r7, #12
 800e9b6:	ca07      	ldmia	r2, {r0, r1, r2}
 800e9b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800e9bc:	6878      	ldr	r0, [r7, #4]
 800e9be:	371c      	adds	r7, #28
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c6:	4770      	bx	lr
 800e9c8:	40016800 	.word	0x40016800
 800e9cc:	0ffe888f 	.word	0x0ffe888f

0800e9d0 <LTDC_RGBStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_RGBStructInit(LTDC_RGBTypeDef* LTDC_RGB_InitStruct)
{
 800e9d0:	b480      	push	{r7}
 800e9d2:	b083      	sub	sp, #12
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
  LTDC_RGB_InitStruct->LTDC_BlueWidth = 0x02;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2202      	movs	r2, #2
 800e9dc:	601a      	str	r2, [r3, #0]
  LTDC_RGB_InitStruct->LTDC_GreenWidth = 0x02;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	2202      	movs	r2, #2
 800e9e2:	605a      	str	r2, [r3, #4]
  LTDC_RGB_InitStruct->LTDC_RedWidth = 0x02;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2202      	movs	r2, #2
 800e9e8:	609a      	str	r2, [r3, #8]
}
 800e9ea:	370c      	adds	r7, #12
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f2:	4770      	bx	lr

0800e9f4 <LTDC_LIPConfig>:
  * @param  LTDC_LIPositionConfig: Line Interrupt Position.
  * @retval None
  */

void LTDC_LIPConfig(uint32_t LTDC_LIPositionConfig)
{
 800e9f4:	b480      	push	{r7}
 800e9f6:	b083      	sub	sp, #12
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(LTDC_LIPositionConfig));

  /* Sets the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)LTDC_LIPositionConfig;
 800e9fc:	4b03      	ldr	r3, [pc, #12]	; (800ea0c <LTDC_LIPConfig+0x18>)
 800e9fe:	687a      	ldr	r2, [r7, #4]
 800ea00:	641a      	str	r2, [r3, #64]	; 0x40
}
 800ea02:	370c      	adds	r7, #12
 800ea04:	46bd      	mov	sp, r7
 800ea06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0a:	4770      	bx	lr
 800ea0c:	40016800 	.word	0x40016800

0800ea10 <LTDC_ReloadConfig>:
  *     @arg LTDC_VBReload: Immediate reload.  
  * @retval None
  */

void LTDC_ReloadConfig(uint32_t LTDC_Reload)
{
 800ea10:	b480      	push	{r7}
 800ea12:	b083      	sub	sp, #12
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(LTDC_Reload));

  /* Sets the Reload type */
  LTDC->SRCR = (uint32_t)LTDC_Reload;
 800ea18:	4b03      	ldr	r3, [pc, #12]	; (800ea28 <LTDC_ReloadConfig+0x18>)
 800ea1a:	687a      	ldr	r2, [r7, #4]
 800ea1c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ea1e:	370c      	adds	r7, #12
 800ea20:	46bd      	mov	sp, r7
 800ea22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea26:	4770      	bx	lr
 800ea28:	40016800 	.word	0x40016800

0800ea2c <LTDC_LayerInit>:
  *         the configuration information for the specified LTDC peripheral.
  * @retval None
  */

void LTDC_LayerInit(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_Layer_InitTypeDef* LTDC_Layer_InitStruct)
{
 800ea2c:	b480      	push	{r7}
 800ea2e:	b089      	sub	sp, #36	; 0x24
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
 800ea34:	6039      	str	r1, [r7, #0]

  uint32_t whsppos = 0;
 800ea36:	2300      	movs	r3, #0
 800ea38:	61fb      	str	r3, [r7, #28]
  uint32_t wvsppos = 0;
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	61bb      	str	r3, [r7, #24]
  uint32_t dcgreen = 0;
 800ea3e:	2300      	movs	r3, #0
 800ea40:	617b      	str	r3, [r7, #20]
  uint32_t dcred = 0;
 800ea42:	2300      	movs	r3, #0
 800ea44:	613b      	str	r3, [r7, #16]
  uint32_t dcalpha = 0;
 800ea46:	2300      	movs	r3, #0
 800ea48:	60fb      	str	r3, [r7, #12]
  uint32_t cfbp = 0;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LTDC_CFBP(LTDC_Layer_InitStruct->LTDC_CFBPitch));
  assert_param(IS_LTDC_CFBLL(LTDC_Layer_InitStruct->LTDC_CFBLineLength));
  assert_param(IS_LTDC_CFBLNBR(LTDC_Layer_InitStruct->LTDC_CFBLineNumber));

  /* Configures the horizontal start and stop position */
  whsppos = LTDC_Layer_InitStruct->LTDC_HorizontalStop << 16;
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	685b      	ldr	r3, [r3, #4]
 800ea52:	041b      	lsls	r3, r3, #16
 800ea54:	61fb      	str	r3, [r7, #28]
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	685b      	ldr	r3, [r3, #4]
 800ea5a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WHPCR = (LTDC_Layer_InitStruct->LTDC_HorizontalStart | whsppos);
 800ea62:	683b      	ldr	r3, [r7, #0]
 800ea64:	681a      	ldr	r2, [r3, #0]
 800ea66:	69fb      	ldr	r3, [r7, #28]
 800ea68:	431a      	orrs	r2, r3
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	605a      	str	r2, [r3, #4]

  /* Configures the vertical start and stop position */
  wvsppos = LTDC_Layer_InitStruct->LTDC_VerticalStop << 16;
 800ea6e:	683b      	ldr	r3, [r7, #0]
 800ea70:	68db      	ldr	r3, [r3, #12]
 800ea72:	041b      	lsls	r3, r3, #16
 800ea74:	61bb      	str	r3, [r7, #24]
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	689b      	ldr	r3, [r3, #8]
 800ea7a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	609a      	str	r2, [r3, #8]
  LTDC_Layerx->WVPCR  = (LTDC_Layer_InitStruct->LTDC_VerticalStart | wvsppos);
 800ea82:	683b      	ldr	r3, [r7, #0]
 800ea84:	689a      	ldr	r2, [r3, #8]
 800ea86:	69bb      	ldr	r3, [r7, #24]
 800ea88:	431a      	orrs	r2, r3
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	609a      	str	r2, [r3, #8]

  /* Specifies the pixel format */
  LTDC_Layerx->PFCR &= ~(LTDC_LxPFCR_PF);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	691b      	ldr	r3, [r3, #16]
 800ea92:	f023 0207 	bic.w	r2, r3, #7
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	611a      	str	r2, [r3, #16]
  LTDC_Layerx->PFCR = (LTDC_Layer_InitStruct->LTDC_PixelFormat);
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	691a      	ldr	r2, [r3, #16]
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	611a      	str	r2, [r3, #16]

  /* Configures the default color values */
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
 800eaa2:	683b      	ldr	r3, [r7, #0]
 800eaa4:	69db      	ldr	r3, [r3, #28]
 800eaa6:	021b      	lsls	r3, r3, #8
 800eaa8:	617b      	str	r3, [r7, #20]
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
 800eaaa:	683b      	ldr	r3, [r7, #0]
 800eaac:	6a1b      	ldr	r3, [r3, #32]
 800eaae:	041b      	lsls	r3, r3, #16
 800eab0:	613b      	str	r3, [r7, #16]
  dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eab6:	061b      	lsls	r3, r3, #24
 800eab8:	60fb      	str	r3, [r7, #12]
  LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	699b      	ldr	r3, [r3, #24]
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	2200      	movs	r2, #0
 800eac2:	619a      	str	r2, [r3, #24]
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	699a      	ldr	r2, [r3, #24]
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	431a      	orrs	r2, r3
 800eacc:	693b      	ldr	r3, [r7, #16]
 800eace:	431a      	orrs	r2, r3
                        dcred | dcalpha);
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	431a      	orrs	r2, r3
  /* Configures the default color values */
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
  dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
  LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	619a      	str	r2, [r3, #24]
                        dcred | dcalpha);

  /* Specifies the constant alpha value */      
  LTDC_Layerx->CACR &= ~(LTDC_LxCACR_CONSTA);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	695b      	ldr	r3, [r3, #20]
 800eadc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	615a      	str	r2, [r3, #20]
  LTDC_Layerx->CACR = (LTDC_Layer_InitStruct->LTDC_ConstantAlpha);
 800eae4:	683b      	ldr	r3, [r7, #0]
 800eae6:	695a      	ldr	r2, [r3, #20]
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	615a      	str	r2, [r3, #20]

  /* Specifies the blending factors */
  LTDC_Layerx->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	69db      	ldr	r3, [r3, #28]
 800eaf0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800eaf4:	f023 0307 	bic.w	r3, r3, #7
 800eaf8:	687a      	ldr	r2, [r7, #4]
 800eafa:	61d3      	str	r3, [r2, #28]
  LTDC_Layerx->BFCR = (LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 | LTDC_Layer_InitStruct->LTDC_BlendingFactor_2);
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eb00:	683b      	ldr	r3, [r7, #0]
 800eb02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb04:	431a      	orrs	r2, r3
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	61da      	str	r2, [r3, #28]

  /* Configures the color frame buffer start address */
  LTDC_Layerx->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	2200      	movs	r2, #0
 800eb12:	629a      	str	r2, [r3, #40]	; 0x28
  LTDC_Layerx->CFBAR = (LTDC_Layer_InitStruct->LTDC_CFBStartAdress);
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Configures the color frame buffer pitch in byte */
  cfbp = (LTDC_Layer_InitStruct->LTDC_CFBPitch << 16);
 800eb1c:	683b      	ldr	r3, [r7, #0]
 800eb1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb20:	041b      	lsls	r3, r3, #16
 800eb22:	60bb      	str	r3, [r7, #8]
  LTDC_Layerx->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb28:	f003 22e0 	and.w	r2, r3, #3758153728	; 0xe000e000
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	62da      	str	r2, [r3, #44]	; 0x2c
  LTDC_Layerx->CFBLR  = (LTDC_Layer_InitStruct->LTDC_CFBLineLength | cfbp);
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	431a      	orrs	r2, r3
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_Layerx->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb40:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800eb44:	f023 0307 	bic.w	r3, r3, #7
 800eb48:	687a      	ldr	r2, [r7, #4]
 800eb4a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_Layerx->CFBLNR  = (LTDC_Layer_InitStruct->LTDC_CFBLineNumber);
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	631a      	str	r2, [r3, #48]	; 0x30

}
 800eb54:	3724      	adds	r7, #36	; 0x24
 800eb56:	46bd      	mov	sp, r7
 800eb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5c:	4770      	bx	lr
 800eb5e:	bf00      	nop

0800eb60 <LTDC_LayerStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_LayerStructInit(LTDC_Layer_InitTypeDef * LTDC_Layer_InitStruct)
{
 800eb60:	b480      	push	{r7}
 800eb62:	b083      	sub	sp, #12
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
  /*--------------- Reset Layer structure parameters values -------------------*/

  /*!< Initialize the horizontal limit member */
  LTDC_Layer_InitStruct->LTDC_HorizontalStart = 0x00;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	601a      	str	r2, [r3, #0]
  LTDC_Layer_InitStruct->LTDC_HorizontalStop = 0x00;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2200      	movs	r2, #0
 800eb72:	605a      	str	r2, [r3, #4]

  /*!< Initialize the vertical limit member */
  LTDC_Layer_InitStruct->LTDC_VerticalStart = 0x00;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2200      	movs	r2, #0
 800eb78:	609a      	str	r2, [r3, #8]
  LTDC_Layer_InitStruct->LTDC_VerticalStop = 0x00;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	60da      	str	r2, [r3, #12]

  /*!< Initialize the pixel format member */
  LTDC_Layer_InitStruct->LTDC_PixelFormat = LTDC_Pixelformat_ARGB8888;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2200      	movs	r2, #0
 800eb84:	611a      	str	r2, [r3, #16]

  /*!< Initialize the constant alpha value */
  LTDC_Layer_InitStruct->LTDC_ConstantAlpha = 0xFF;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	22ff      	movs	r2, #255	; 0xff
 800eb8a:	615a      	str	r2, [r3, #20]

  /*!< Initialize the default color values */
  LTDC_Layer_InitStruct->LTDC_DefaultColorBlue = 0x00;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2200      	movs	r2, #0
 800eb90:	619a      	str	r2, [r3, #24]
  LTDC_Layer_InitStruct->LTDC_DefaultColorGreen = 0x00;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	2200      	movs	r2, #0
 800eb96:	61da      	str	r2, [r3, #28]
  LTDC_Layer_InitStruct->LTDC_DefaultColorRed = 0x00;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	621a      	str	r2, [r3, #32]
  LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha = 0x00;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	2200      	movs	r2, #0
 800eba2:	625a      	str	r2, [r3, #36]	; 0x24

  /*!< Initialize the blending factors */
  LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_PAxCA;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800ebaa:	629a      	str	r2, [r3, #40]	; 0x28
  LTDC_Layer_InitStruct->LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_PAxCA;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2207      	movs	r2, #7
 800ebb0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*!< Initialize the frame buffer start address */
  LTDC_Layer_InitStruct->LTDC_CFBStartAdress = 0x00;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	631a      	str	r2, [r3, #48]	; 0x30

  /*!< Initialize the frame buffer pitch and line length */
  LTDC_Layer_InitStruct->LTDC_CFBLineLength = 0x00;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2200      	movs	r2, #0
 800ebbc:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC_Layer_InitStruct->LTDC_CFBPitch = 0x00;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	639a      	str	r2, [r3, #56]	; 0x38

  /*!< Initialize the frame buffer line number */
  LTDC_Layer_InitStruct->LTDC_CFBLineNumber = 0x00;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800ebca:	370c      	adds	r7, #12
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd2:	4770      	bx	lr

0800ebd4 <LTDC_LayerCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_LayerCmd(LTDC_Layer_TypeDef* LTDC_Layerx, FunctionalState NewState)
{
 800ebd4:	b480      	push	{r7}
 800ebd6:	b083      	sub	sp, #12
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
 800ebdc:	460b      	mov	r3, r1
 800ebde:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800ebe0:	78fb      	ldrb	r3, [r7, #3]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d006      	beq.n	800ebf4 <LTDC_LayerCmd+0x20>
  {
    /* Enable LTDC_Layer by setting LEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_LEN;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	f043 0201 	orr.w	r2, r3, #1
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	601a      	str	r2, [r3, #0]
 800ebf2:	e005      	b.n	800ec00 <LTDC_LayerCmd+0x2c>
  }
  else
  {
    /* Disable LTDC_Layer by clearing LEN bit */
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_LEN;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	f023 0201 	bic.w	r2, r3, #1
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	601a      	str	r2, [r3, #0]
  }
}
 800ec00:	370c      	adds	r7, #12
 800ec02:	46bd      	mov	sp, r7
 800ec04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec08:	4770      	bx	lr
 800ec0a:	bf00      	nop

0800ec0c <LTDC_GetPosStatus>:
  *         the current position.
  * @retval None
  */

LTDC_PosTypeDef LTDC_GetPosStatus(void)
{
 800ec0c:	b480      	push	{r7}
 800ec0e:	b085      	sub	sp, #20
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
  LTDC_PosTypeDef LTDC_Pos_InitStruct;

  LTDC->CPSR &= ~(LTDC_CPSR_CYPOS | LTDC_CPSR_CXPOS);
 800ec14:	4b0c      	ldr	r3, [pc, #48]	; (800ec48 <LTDC_GetPosStatus+0x3c>)
 800ec16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec18:	4b0b      	ldr	r3, [pc, #44]	; (800ec48 <LTDC_GetPosStatus+0x3c>)
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	645a      	str	r2, [r3, #68]	; 0x44

  LTDC_Pos_InitStruct.LTDC_POSX = (uint32_t)(LTDC->CPSR >> 16);
 800ec1e:	4b0a      	ldr	r3, [pc, #40]	; (800ec48 <LTDC_GetPosStatus+0x3c>)
 800ec20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec22:	0c1b      	lsrs	r3, r3, #16
 800ec24:	60bb      	str	r3, [r7, #8]
  LTDC_Pos_InitStruct.LTDC_POSY = (uint32_t)(LTDC->CPSR & 0xFFFF);
 800ec26:	4b08      	ldr	r3, [pc, #32]	; (800ec48 <LTDC_GetPosStatus+0x3c>)
 800ec28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec2a:	b29b      	uxth	r3, r3
 800ec2c:	60fb      	str	r3, [r7, #12]

  return LTDC_Pos_InitStruct;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	f107 0208 	add.w	r2, r7, #8
 800ec34:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ec38:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800ec3c:	6878      	ldr	r0, [r7, #4]
 800ec3e:	3714      	adds	r7, #20
 800ec40:	46bd      	mov	sp, r7
 800ec42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec46:	4770      	bx	lr
 800ec48:	40016800 	.word	0x40016800

0800ec4c <LTDC_PosStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_PosStructInit(LTDC_PosTypeDef* LTDC_Pos_InitStruct)
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	b083      	sub	sp, #12
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
  LTDC_Pos_InitStruct->LTDC_POSX = 0x00;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	2200      	movs	r2, #0
 800ec58:	601a      	str	r2, [r3, #0]
  LTDC_Pos_InitStruct->LTDC_POSY = 0x00;
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	605a      	str	r2, [r3, #4]
}
 800ec60:	370c      	adds	r7, #12
 800ec62:	46bd      	mov	sp, r7
 800ec64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec68:	4770      	bx	lr
 800ec6a:	bf00      	nop

0800ec6c <LTDC_GetCDStatus>:
  *     @arg LTDC_CD_HSYNC:  Horizontal Synchronization current status.
  * @retval The new state of LTDC_CD (SET or RESET).
  */

FlagStatus LTDC_GetCDStatus(uint32_t LTDC_CD)
{
 800ec6c:	b480      	push	{r7}
 800ec6e:	b085      	sub	sp, #20
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus;

  /* Check the parameters */
  assert_param(IS_LTDC_GET_CD(LTDC_CD));

  if ((LTDC->CDSR & LTDC_CD) != (uint32_t)RESET)
 800ec74:	4b08      	ldr	r3, [pc, #32]	; (800ec98 <LTDC_GetCDStatus+0x2c>)
 800ec76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	4013      	ands	r3, r2
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d002      	beq.n	800ec86 <LTDC_GetCDStatus+0x1a>
  {
    bitstatus = SET;
 800ec80:	2301      	movs	r3, #1
 800ec82:	73fb      	strb	r3, [r7, #15]
 800ec84:	e001      	b.n	800ec8a <LTDC_GetCDStatus+0x1e>
  }
  else
  {
    bitstatus = RESET;
 800ec86:	2300      	movs	r3, #0
 800ec88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ec8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	3714      	adds	r7, #20
 800ec90:	46bd      	mov	sp, r7
 800ec92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec96:	4770      	bx	lr
 800ec98:	40016800 	.word	0x40016800

0800ec9c <LTDC_ColorKeyingConfig>:
  *         one of the following values: LTDC_Layer1, LTDC_Layer2   
  * @retval None
  */

void LTDC_ColorKeyingConfig(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_ColorKeying_InitTypeDef* LTDC_colorkeying_InitStruct, FunctionalState NewState)
{ 
 800ec9c:	b480      	push	{r7}
 800ec9e:	b087      	sub	sp, #28
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	60f8      	str	r0, [r7, #12]
 800eca4:	60b9      	str	r1, [r7, #8]
 800eca6:	4613      	mov	r3, r2
 800eca8:	71fb      	strb	r3, [r7, #7]
  uint32_t ckgreen = 0;
 800ecaa:	2300      	movs	r3, #0
 800ecac:	617b      	str	r3, [r7, #20]
  uint32_t ckred = 0;
 800ecae:	2300      	movs	r3, #0
 800ecb0:	613b      	str	r3, [r7, #16]
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue));
  assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyGreen));
  assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed));
  
  if (NewState != DISABLE)
 800ecb2:	79fb      	ldrb	r3, [r7, #7]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d01f      	beq.n	800ecf8 <LTDC_ColorKeyingConfig+0x5c>
  {
    /* Enable LTDC color keying by setting COLKEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	f043 0202 	orr.w	r2, r3, #2
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	601a      	str	r2, [r3, #0]
    
    /* Sets the color keying values */
    ckgreen = (LTDC_colorkeying_InitStruct->LTDC_ColorKeyGreen << 8);
 800ecc4:	68bb      	ldr	r3, [r7, #8]
 800ecc6:	685b      	ldr	r3, [r3, #4]
 800ecc8:	021b      	lsls	r3, r3, #8
 800ecca:	617b      	str	r3, [r7, #20]
    ckred = (LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed << 16);
 800eccc:	68bb      	ldr	r3, [r7, #8]
 800ecce:	689b      	ldr	r3, [r3, #8]
 800ecd0:	041b      	lsls	r3, r3, #16
 800ecd2:	613b      	str	r3, [r7, #16]
    LTDC_Layerx->CKCR  &= ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	68db      	ldr	r3, [r3, #12]
 800ecd8:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	60da      	str	r2, [r3, #12]
    LTDC_Layerx->CKCR |= (LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue | ckgreen | ckred);
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	68da      	ldr	r2, [r3, #12]
 800ece4:	68bb      	ldr	r3, [r7, #8]
 800ece6:	6819      	ldr	r1, [r3, #0]
 800ece8:	697b      	ldr	r3, [r7, #20]
 800ecea:	4319      	orrs	r1, r3
 800ecec:	693b      	ldr	r3, [r7, #16]
 800ecee:	430b      	orrs	r3, r1
 800ecf0:	431a      	orrs	r2, r3
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	60da      	str	r2, [r3, #12]
 800ecf6:	e005      	b.n	800ed04 <LTDC_ColorKeyingConfig+0x68>
  }
  else
  {
    /* Disable LTDC color keying by clearing COLKEN bit */
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	f023 0202 	bic.w	r2, r3, #2
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	601a      	str	r2, [r3, #0]
  }
  
  /* Reload shadow register */
  LTDC->SRCR = LTDC_IMReload;
 800ed04:	4b03      	ldr	r3, [pc, #12]	; (800ed14 <LTDC_ColorKeyingConfig+0x78>)
 800ed06:	2201      	movs	r2, #1
 800ed08:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ed0a:	371c      	adds	r7, #28
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed12:	4770      	bx	lr
 800ed14:	40016800 	.word	0x40016800

0800ed18 <LTDC_ColorKeyingStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_ColorKeyingStructInit(LTDC_ColorKeying_InitTypeDef* LTDC_colorkeying_InitStruct)
{
 800ed18:	b480      	push	{r7}
 800ed1a:	b083      	sub	sp, #12
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
  /*!< Initialize the color keying values */
  LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue = 0x00;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	2200      	movs	r2, #0
 800ed24:	601a      	str	r2, [r3, #0]
  LTDC_colorkeying_InitStruct->LTDC_ColorKeyGreen = 0x00;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	2200      	movs	r2, #0
 800ed2a:	605a      	str	r2, [r3, #4]
  LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed = 0x00;
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	2200      	movs	r2, #0
 800ed30:	609a      	str	r2, [r3, #8]
}
 800ed32:	370c      	adds	r7, #12
 800ed34:	46bd      	mov	sp, r7
 800ed36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3a:	4770      	bx	lr

0800ed3c <LTDC_CLUTCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_CLUTCmd(LTDC_Layer_TypeDef* LTDC_Layerx, FunctionalState NewState)
{
 800ed3c:	b480      	push	{r7}
 800ed3e:	b083      	sub	sp, #12
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
 800ed44:	460b      	mov	r3, r1
 800ed46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800ed48:	78fb      	ldrb	r3, [r7, #3]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d006      	beq.n	800ed5c <LTDC_CLUTCmd+0x20>
  {
    /* Enable CLUT by setting CLUTEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	f043 0210 	orr.w	r2, r3, #16
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	601a      	str	r2, [r3, #0]
 800ed5a:	e005      	b.n	800ed68 <LTDC_CLUTCmd+0x2c>
  }
  else
  {
    /* Disable CLUT by clearing CLUTEN bit */
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_CLUTEN;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	f023 0210 	bic.w	r2, r3, #16
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	601a      	str	r2, [r3, #0]
  }
  
  /* Reload shadow register */
  LTDC->SRCR = LTDC_IMReload;
 800ed68:	4b03      	ldr	r3, [pc, #12]	; (800ed78 <LTDC_CLUTCmd+0x3c>)
 800ed6a:	2201      	movs	r2, #1
 800ed6c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ed6e:	370c      	adds	r7, #12
 800ed70:	46bd      	mov	sp, r7
 800ed72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed76:	4770      	bx	lr
 800ed78:	40016800 	.word	0x40016800

0800ed7c <LTDC_CLUTInit>:
  *         one of the following values: LTDC_Layer1, LTDC_Layer2   
  * @retval None
  */

void LTDC_CLUTInit(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_CLUT_InitTypeDef* LTDC_CLUT_InitStruct)
{  
 800ed7c:	b480      	push	{r7}
 800ed7e:	b087      	sub	sp, #28
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
 800ed84:	6039      	str	r1, [r7, #0]
  uint32_t green = 0;
 800ed86:	2300      	movs	r3, #0
 800ed88:	617b      	str	r3, [r7, #20]
  uint32_t red = 0;
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	613b      	str	r3, [r7, #16]
  uint32_t clutadd = 0;
 800ed8e:	2300      	movs	r3, #0
 800ed90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LTDC_CLUTWR(LTDC_CLUT_InitStruct->LTDC_RedValue));
  assert_param(IS_LTDC_CLUTWR(LTDC_CLUT_InitStruct->LTDC_GreenValue));
  assert_param(IS_LTDC_CLUTWR(LTDC_CLUT_InitStruct->LTDC_BlueValue));
    
  /* Specifies the CLUT address and RGB value */
  green = (LTDC_CLUT_InitStruct->LTDC_GreenValue << 8);
 800ed92:	683b      	ldr	r3, [r7, #0]
 800ed94:	689b      	ldr	r3, [r3, #8]
 800ed96:	021b      	lsls	r3, r3, #8
 800ed98:	617b      	str	r3, [r7, #20]
  red = (LTDC_CLUT_InitStruct->LTDC_RedValue << 16);
 800ed9a:	683b      	ldr	r3, [r7, #0]
 800ed9c:	68db      	ldr	r3, [r3, #12]
 800ed9e:	041b      	lsls	r3, r3, #16
 800eda0:	613b      	str	r3, [r7, #16]
  clutadd = (LTDC_CLUT_InitStruct->LTDC_CLUTAdress << 24);
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	061b      	lsls	r3, r3, #24
 800eda8:	60fb      	str	r3, [r7, #12]
  LTDC_Layerx->CLUTWR  = (clutadd | LTDC_CLUT_InitStruct->LTDC_BlueValue | \
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	685a      	ldr	r2, [r3, #4]
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	431a      	orrs	r2, r3
 800edb2:	697b      	ldr	r3, [r7, #20]
 800edb4:	431a      	orrs	r2, r3
                              green | red);
 800edb6:	693b      	ldr	r3, [r7, #16]
 800edb8:	431a      	orrs	r2, r3
    
  /* Specifies the CLUT address and RGB value */
  green = (LTDC_CLUT_InitStruct->LTDC_GreenValue << 8);
  red = (LTDC_CLUT_InitStruct->LTDC_RedValue << 16);
  clutadd = (LTDC_CLUT_InitStruct->LTDC_CLUTAdress << 24);
  LTDC_Layerx->CLUTWR  = (clutadd | LTDC_CLUT_InitStruct->LTDC_BlueValue | \
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	641a      	str	r2, [r3, #64]	; 0x40
                              green | red);
}
 800edbe:	371c      	adds	r7, #28
 800edc0:	46bd      	mov	sp, r7
 800edc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc6:	4770      	bx	lr

0800edc8 <LTDC_CLUTStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_CLUTStructInit(LTDC_CLUT_InitTypeDef* LTDC_CLUT_InitStruct)
{
 800edc8:	b480      	push	{r7}
 800edca:	b083      	sub	sp, #12
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
  /*!< Initialize the CLUT adress and RGB values */
  LTDC_CLUT_InitStruct->LTDC_CLUTAdress = 0x00;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2200      	movs	r2, #0
 800edd4:	601a      	str	r2, [r3, #0]
  LTDC_CLUT_InitStruct->LTDC_BlueValue = 0x00;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	2200      	movs	r2, #0
 800edda:	605a      	str	r2, [r3, #4]
  LTDC_CLUT_InitStruct->LTDC_GreenValue = 0x00;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2200      	movs	r2, #0
 800ede0:	609a      	str	r2, [r3, #8]
  LTDC_CLUT_InitStruct->LTDC_RedValue = 0x00;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	2200      	movs	r2, #0
 800ede6:	60da      	str	r2, [r3, #12]
}
 800ede8:	370c      	adds	r7, #12
 800edea:	46bd      	mov	sp, r7
 800edec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf0:	4770      	bx	lr
 800edf2:	bf00      	nop

0800edf4 <LTDC_LayerPosition>:
  * @retval Reload of the shadow registers values must be applied after layer 
  *         position reconfiguration.
  */

void LTDC_LayerPosition(LTDC_Layer_TypeDef* LTDC_Layerx, uint16_t OffsetX, uint16_t OffsetY)
{
 800edf4:	b480      	push	{r7}
 800edf6:	b089      	sub	sp, #36	; 0x24
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
 800edfc:	4613      	mov	r3, r2
 800edfe:	460a      	mov	r2, r1
 800ee00:	807a      	strh	r2, [r7, #2]
 800ee02:	803b      	strh	r3, [r7, #0]
  uint32_t horizontal_start;
  uint32_t horizontal_stop;
  uint32_t vertical_start;
  uint32_t vertical_stop;
  
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	685b      	ldr	r3, [r3, #4]
 800ee08:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	689b      	ldr	r3, [r3, #8]
 800ee14:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	609a      	str	r2, [r3, #8]
  
  /* Reconfigures the horizontal and vertical start position */
  tempreg = LTDC->BPCR;
 800ee1c:	4b2b      	ldr	r3, [pc, #172]	; (800eecc <LTDC_LayerPosition+0xd8>)
 800ee1e:	68db      	ldr	r3, [r3, #12]
 800ee20:	61bb      	str	r3, [r7, #24]
  horizontal_start = (tempreg >> 16) + 1 + OffsetX;
 800ee22:	69bb      	ldr	r3, [r7, #24]
 800ee24:	0c1a      	lsrs	r2, r3, #16
 800ee26:	887b      	ldrh	r3, [r7, #2]
 800ee28:	4413      	add	r3, r2
 800ee2a:	3301      	adds	r3, #1
 800ee2c:	617b      	str	r3, [r7, #20]
  vertical_start = (tempreg & 0xFFFF) + 1 + OffsetY;
 800ee2e:	69bb      	ldr	r3, [r7, #24]
 800ee30:	b29a      	uxth	r2, r3
 800ee32:	883b      	ldrh	r3, [r7, #0]
 800ee34:	4413      	add	r3, r2
 800ee36:	3301      	adds	r3, #1
 800ee38:	613b      	str	r3, [r7, #16]
  
  /* Reconfigures the horizontal and vertical stop position */
  /* Get the number of byte per pixel */
  
  tempreg = LTDC_Layerx->PFCR;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	691b      	ldr	r3, [r3, #16]
 800ee3e:	61bb      	str	r3, [r7, #24]
  
  if (tempreg == LTDC_Pixelformat_ARGB8888)
 800ee40:	69bb      	ldr	r3, [r7, #24]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d102      	bne.n	800ee4c <LTDC_LayerPosition+0x58>
  {
    temp = 4;
 800ee46:	2304      	movs	r3, #4
 800ee48:	61fb      	str	r3, [r7, #28]
 800ee4a:	e016      	b.n	800ee7a <LTDC_LayerPosition+0x86>
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
 800ee4c:	69bb      	ldr	r3, [r7, #24]
 800ee4e:	2b01      	cmp	r3, #1
 800ee50:	d102      	bne.n	800ee58 <LTDC_LayerPosition+0x64>
  {
    temp = 3;
 800ee52:	2303      	movs	r3, #3
 800ee54:	61fb      	str	r3, [r7, #28]
 800ee56:	e010      	b.n	800ee7a <LTDC_LayerPosition+0x86>
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || 
 800ee58:	69bb      	ldr	r3, [r7, #24]
 800ee5a:	2b04      	cmp	r3, #4
 800ee5c:	d008      	beq.n	800ee70 <LTDC_LayerPosition+0x7c>
 800ee5e:	69bb      	ldr	r3, [r7, #24]
 800ee60:	2b02      	cmp	r3, #2
 800ee62:	d005      	beq.n	800ee70 <LTDC_LayerPosition+0x7c>
          (tempreg == LTDC_Pixelformat_RGB565)    ||  
 800ee64:	69bb      	ldr	r3, [r7, #24]
 800ee66:	2b03      	cmp	r3, #3
 800ee68:	d002      	beq.n	800ee70 <LTDC_LayerPosition+0x7c>
          (tempreg == LTDC_Pixelformat_ARGB1555)  ||
 800ee6a:	69bb      	ldr	r3, [r7, #24]
 800ee6c:	2b07      	cmp	r3, #7
 800ee6e:	d102      	bne.n	800ee76 <LTDC_LayerPosition+0x82>
          (tempreg == LTDC_Pixelformat_AL88))
  {
    temp = 2;  
 800ee70:	2302      	movs	r3, #2
 800ee72:	61fb      	str	r3, [r7, #28]
 800ee74:	e001      	b.n	800ee7a <LTDC_LayerPosition+0x86>
  }
  else
  {
    temp = 1;
 800ee76:	2301      	movs	r3, #1
 800ee78:	61fb      	str	r3, [r7, #28]
  }  
    
  tempreg = LTDC_Layerx->CFBLR;
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee7e:	61bb      	str	r3, [r7, #24]
  horizontal_stop = (((tempreg & 0x1FFF) - 3)/temp) + horizontal_start - 1;
 800ee80:	69bb      	ldr	r3, [r7, #24]
 800ee82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ee86:	1eda      	subs	r2, r3, #3
 800ee88:	69fb      	ldr	r3, [r7, #28]
 800ee8a:	fbb2 f2f3 	udiv	r2, r2, r3
 800ee8e:	697b      	ldr	r3, [r7, #20]
 800ee90:	4413      	add	r3, r2
 800ee92:	3b01      	subs	r3, #1
 800ee94:	60fb      	str	r3, [r7, #12]
  
  tempreg = LTDC_Layerx->CFBLNR;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee9a:	61bb      	str	r3, [r7, #24]
  vertical_stop = (tempreg & 0x7FF) + vertical_start - 1;  
 800ee9c:	69bb      	ldr	r3, [r7, #24]
 800ee9e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800eea2:	693b      	ldr	r3, [r7, #16]
 800eea4:	4413      	add	r3, r2
 800eea6:	3b01      	subs	r3, #1
 800eea8:	60bb      	str	r3, [r7, #8]
  
  LTDC_Layerx->WHPCR = horizontal_start | (horizontal_stop << 16);
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	041a      	lsls	r2, r3, #16
 800eeae:	697b      	ldr	r3, [r7, #20]
 800eeb0:	431a      	orrs	r2, r3
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WVPCR = vertical_start | (vertical_stop << 16);  
 800eeb6:	68bb      	ldr	r3, [r7, #8]
 800eeb8:	041a      	lsls	r2, r3, #16
 800eeba:	693b      	ldr	r3, [r7, #16]
 800eebc:	431a      	orrs	r2, r3
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	609a      	str	r2, [r3, #8]
}
 800eec2:	3724      	adds	r7, #36	; 0x24
 800eec4:	46bd      	mov	sp, r7
 800eec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeca:	4770      	bx	lr
 800eecc:	40016800 	.word	0x40016800

0800eed0 <LTDC_LayerAlpha>:
  * @retval Reload of the shadow registers values must be applied after constant 
  *         alpha reconfiguration.         
  */

void LTDC_LayerAlpha(LTDC_Layer_TypeDef* LTDC_Layerx, uint8_t ConstantAlpha)
{  
 800eed0:	b480      	push	{r7}
 800eed2:	b083      	sub	sp, #12
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
 800eed8:	460b      	mov	r3, r1
 800eeda:	70fb      	strb	r3, [r7, #3]
  /* reconfigure the constant alpha value */      
  LTDC_Layerx->CACR = ConstantAlpha;
 800eedc:	78fa      	ldrb	r2, [r7, #3]
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	615a      	str	r2, [r3, #20]
}
 800eee2:	370c      	adds	r7, #12
 800eee4:	46bd      	mov	sp, r7
 800eee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeea:	4770      	bx	lr

0800eeec <LTDC_LayerAddress>:
  * @retval Reload of the shadow registers values must be applied after layer 
  *         address reconfiguration.
  */

void LTDC_LayerAddress(LTDC_Layer_TypeDef* LTDC_Layerx, uint32_t Address)
{
 800eeec:	b480      	push	{r7}
 800eeee:	b083      	sub	sp, #12
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
 800eef4:	6039      	str	r1, [r7, #0]
  /* Reconfigures the color frame buffer start address */
  LTDC_Layerx->CFBAR = Address;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	683a      	ldr	r2, [r7, #0]
 800eefa:	629a      	str	r2, [r3, #40]	; 0x28
}
 800eefc:	370c      	adds	r7, #12
 800eefe:	46bd      	mov	sp, r7
 800ef00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef04:	4770      	bx	lr
 800ef06:	bf00      	nop

0800ef08 <LTDC_LayerSize>:
  * @retval Reload of the shadow registers values must be applied after layer 
  *         size reconfiguration.
  */

void LTDC_LayerSize(LTDC_Layer_TypeDef* LTDC_Layerx, uint32_t Width, uint32_t Height)
{
 800ef08:	b480      	push	{r7}
 800ef0a:	b08b      	sub	sp, #44	; 0x2c
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	60f8      	str	r0, [r7, #12]
 800ef10:	60b9      	str	r1, [r7, #8]
 800ef12:	607a      	str	r2, [r7, #4]
  uint32_t horizontal_start;
  uint32_t horizontal_stop;
  uint32_t vertical_start;
  uint32_t vertical_stop;  
  
  tempreg = LTDC_Layerx->PFCR;
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	691b      	ldr	r3, [r3, #16]
 800ef18:	623b      	str	r3, [r7, #32]
  
  if (tempreg == LTDC_Pixelformat_ARGB8888)
 800ef1a:	6a3b      	ldr	r3, [r7, #32]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d103      	bne.n	800ef28 <LTDC_LayerSize+0x20>
  {
    temp = 4;
 800ef20:	2304      	movs	r3, #4
 800ef22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ef26:	e019      	b.n	800ef5c <LTDC_LayerSize+0x54>
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
 800ef28:	6a3b      	ldr	r3, [r7, #32]
 800ef2a:	2b01      	cmp	r3, #1
 800ef2c:	d103      	bne.n	800ef36 <LTDC_LayerSize+0x2e>
  {
    temp = 3;
 800ef2e:	2303      	movs	r3, #3
 800ef30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ef34:	e012      	b.n	800ef5c <LTDC_LayerSize+0x54>
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || \
 800ef36:	6a3b      	ldr	r3, [r7, #32]
 800ef38:	2b04      	cmp	r3, #4
 800ef3a:	d008      	beq.n	800ef4e <LTDC_LayerSize+0x46>
 800ef3c:	6a3b      	ldr	r3, [r7, #32]
 800ef3e:	2b02      	cmp	r3, #2
 800ef40:	d005      	beq.n	800ef4e <LTDC_LayerSize+0x46>
          (tempreg == LTDC_Pixelformat_RGB565)    || \
 800ef42:	6a3b      	ldr	r3, [r7, #32]
 800ef44:	2b03      	cmp	r3, #3
 800ef46:	d002      	beq.n	800ef4e <LTDC_LayerSize+0x46>
          (tempreg == LTDC_Pixelformat_ARGB1555)  || \
 800ef48:	6a3b      	ldr	r3, [r7, #32]
 800ef4a:	2b07      	cmp	r3, #7
 800ef4c:	d103      	bne.n	800ef56 <LTDC_LayerSize+0x4e>
          (tempreg == LTDC_Pixelformat_AL88))
  {
    temp = 2;  
 800ef4e:	2302      	movs	r3, #2
 800ef50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ef54:	e002      	b.n	800ef5c <LTDC_LayerSize+0x54>
  }
  else
  {
    temp = 1;
 800ef56:	2301      	movs	r3, #1
 800ef58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* update horizontal and vertical stop */
  tempreg = LTDC_Layerx->WHPCR;
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	685b      	ldr	r3, [r3, #4]
 800ef60:	623b      	str	r3, [r7, #32]
  horizontal_start = (tempreg & 0x1FFF);
 800ef62:	6a3b      	ldr	r3, [r7, #32]
 800ef64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ef68:	61fb      	str	r3, [r7, #28]
  horizontal_stop = Width + horizontal_start - 1;  
 800ef6a:	68ba      	ldr	r2, [r7, #8]
 800ef6c:	69fb      	ldr	r3, [r7, #28]
 800ef6e:	4413      	add	r3, r2
 800ef70:	3b01      	subs	r3, #1
 800ef72:	61bb      	str	r3, [r7, #24]

  tempreg = LTDC_Layerx->WVPCR;
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	689b      	ldr	r3, [r3, #8]
 800ef78:	623b      	str	r3, [r7, #32]
  vertical_start = (tempreg & 0x1FFF);
 800ef7a:	6a3b      	ldr	r3, [r7, #32]
 800ef7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ef80:	617b      	str	r3, [r7, #20]
  vertical_stop = Height + vertical_start - 1;  
 800ef82:	687a      	ldr	r2, [r7, #4]
 800ef84:	697b      	ldr	r3, [r7, #20]
 800ef86:	4413      	add	r3, r2
 800ef88:	3b01      	subs	r3, #1
 800ef8a:	613b      	str	r3, [r7, #16]
  
  LTDC_Layerx->WHPCR = horizontal_start | (horizontal_stop << 16);
 800ef8c:	69bb      	ldr	r3, [r7, #24]
 800ef8e:	041a      	lsls	r2, r3, #16
 800ef90:	69fb      	ldr	r3, [r7, #28]
 800ef92:	431a      	orrs	r2, r3
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WVPCR = vertical_start | (vertical_stop << 16);  
 800ef98:	693b      	ldr	r3, [r7, #16]
 800ef9a:	041a      	lsls	r2, r3, #16
 800ef9c:	697b      	ldr	r3, [r7, #20]
 800ef9e:	431a      	orrs	r2, r3
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	609a      	str	r2, [r3, #8]

  /* Reconfigures the color frame buffer pitch in byte */
  LTDC_Layerx->CFBLR  = ((Width * temp) << 16) | ((Width * temp) + 3);  
 800efa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efa8:	68ba      	ldr	r2, [r7, #8]
 800efaa:	fb02 f303 	mul.w	r3, r2, r3
 800efae:	041a      	lsls	r2, r3, #16
 800efb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efb4:	68b9      	ldr	r1, [r7, #8]
 800efb6:	fb01 f303 	mul.w	r3, r1, r3
 800efba:	3303      	adds	r3, #3
 800efbc:	431a      	orrs	r2, r3
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reconfigures the frame buffer line number */
  LTDC_Layerx->CFBLNR  = Height;  
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	687a      	ldr	r2, [r7, #4]
 800efc6:	631a      	str	r2, [r3, #48]	; 0x30
  
}
 800efc8:	372c      	adds	r7, #44	; 0x2c
 800efca:	46bd      	mov	sp, r7
 800efcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd0:	4770      	bx	lr
 800efd2:	bf00      	nop

0800efd4 <LTDC_LayerPixelFormat>:
  * @retval Reload of the shadow registers values must be applied after layer 
  *         pixel format reconfiguration.
  */

void LTDC_LayerPixelFormat(LTDC_Layer_TypeDef* LTDC_Layerx, uint32_t PixelFormat)
{
 800efd4:	b480      	push	{r7}
 800efd6:	b085      	sub	sp, #20
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
 800efdc:	6039      	str	r1, [r7, #0]

  uint8_t temp;
  uint32_t tempreg;
  
  tempreg = LTDC_Layerx->PFCR;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	691b      	ldr	r3, [r3, #16]
 800efe2:	60bb      	str	r3, [r7, #8]
  
  if (tempreg == LTDC_Pixelformat_ARGB8888)
 800efe4:	68bb      	ldr	r3, [r7, #8]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d102      	bne.n	800eff0 <LTDC_LayerPixelFormat+0x1c>
  {
    temp = 4;
 800efea:	2304      	movs	r3, #4
 800efec:	73fb      	strb	r3, [r7, #15]
 800efee:	e016      	b.n	800f01e <LTDC_LayerPixelFormat+0x4a>
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
 800eff0:	68bb      	ldr	r3, [r7, #8]
 800eff2:	2b01      	cmp	r3, #1
 800eff4:	d102      	bne.n	800effc <LTDC_LayerPixelFormat+0x28>
  {
    temp = 3;
 800eff6:	2303      	movs	r3, #3
 800eff8:	73fb      	strb	r3, [r7, #15]
 800effa:	e010      	b.n	800f01e <LTDC_LayerPixelFormat+0x4a>
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || \
 800effc:	68bb      	ldr	r3, [r7, #8]
 800effe:	2b04      	cmp	r3, #4
 800f000:	d008      	beq.n	800f014 <LTDC_LayerPixelFormat+0x40>
 800f002:	68bb      	ldr	r3, [r7, #8]
 800f004:	2b02      	cmp	r3, #2
 800f006:	d005      	beq.n	800f014 <LTDC_LayerPixelFormat+0x40>
          (tempreg == LTDC_Pixelformat_RGB565)    || \
 800f008:	68bb      	ldr	r3, [r7, #8]
 800f00a:	2b03      	cmp	r3, #3
 800f00c:	d002      	beq.n	800f014 <LTDC_LayerPixelFormat+0x40>
          (tempreg == LTDC_Pixelformat_ARGB1555)  || \
 800f00e:	68bb      	ldr	r3, [r7, #8]
 800f010:	2b07      	cmp	r3, #7
 800f012:	d102      	bne.n	800f01a <LTDC_LayerPixelFormat+0x46>
          (tempreg == LTDC_Pixelformat_AL88))  
  {
    temp = 2;  
 800f014:	2302      	movs	r3, #2
 800f016:	73fb      	strb	r3, [r7, #15]
 800f018:	e001      	b.n	800f01e <LTDC_LayerPixelFormat+0x4a>
  }
  else
  {
    temp = 1;
 800f01a:	2301      	movs	r3, #1
 800f01c:	73fb      	strb	r3, [r7, #15]
  }
  
  tempreg = (LTDC_Layerx->CFBLR >> 16);
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f022:	0c1b      	lsrs	r3, r3, #16
 800f024:	60bb      	str	r3, [r7, #8]
  tempreg = (tempreg / temp); 
 800f026:	7bfb      	ldrb	r3, [r7, #15]
 800f028:	68ba      	ldr	r2, [r7, #8]
 800f02a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f02e:	60bb      	str	r3, [r7, #8]
  
  if (PixelFormat == LTDC_Pixelformat_ARGB8888)
 800f030:	683b      	ldr	r3, [r7, #0]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d102      	bne.n	800f03c <LTDC_LayerPixelFormat+0x68>
  {
    temp = 4;
 800f036:	2304      	movs	r3, #4
 800f038:	73fb      	strb	r3, [r7, #15]
 800f03a:	e016      	b.n	800f06a <LTDC_LayerPixelFormat+0x96>
  }
  else if (PixelFormat == LTDC_Pixelformat_RGB888)
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	2b01      	cmp	r3, #1
 800f040:	d102      	bne.n	800f048 <LTDC_LayerPixelFormat+0x74>
  {
    temp = 3;
 800f042:	2303      	movs	r3, #3
 800f044:	73fb      	strb	r3, [r7, #15]
 800f046:	e010      	b.n	800f06a <LTDC_LayerPixelFormat+0x96>
  }
  else if ((PixelFormat == LTDC_Pixelformat_ARGB4444) || \
 800f048:	683b      	ldr	r3, [r7, #0]
 800f04a:	2b04      	cmp	r3, #4
 800f04c:	d008      	beq.n	800f060 <LTDC_LayerPixelFormat+0x8c>
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	2b02      	cmp	r3, #2
 800f052:	d005      	beq.n	800f060 <LTDC_LayerPixelFormat+0x8c>
          (PixelFormat == LTDC_Pixelformat_RGB565)    || \
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	2b03      	cmp	r3, #3
 800f058:	d002      	beq.n	800f060 <LTDC_LayerPixelFormat+0x8c>
          (PixelFormat == LTDC_Pixelformat_ARGB1555)  || \
 800f05a:	683b      	ldr	r3, [r7, #0]
 800f05c:	2b07      	cmp	r3, #7
 800f05e:	d102      	bne.n	800f066 <LTDC_LayerPixelFormat+0x92>
          (PixelFormat == LTDC_Pixelformat_AL88))
  {
    temp = 2;  
 800f060:	2302      	movs	r3, #2
 800f062:	73fb      	strb	r3, [r7, #15]
 800f064:	e001      	b.n	800f06a <LTDC_LayerPixelFormat+0x96>
  }
  else
  {
    temp = 1;
 800f066:	2301      	movs	r3, #1
 800f068:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Reconfigures the color frame buffer pitch in byte */
  LTDC_Layerx->CFBLR  = ((tempreg * temp) << 16) | ((tempreg * temp) + 3);  
 800f06a:	7bfb      	ldrb	r3, [r7, #15]
 800f06c:	68ba      	ldr	r2, [r7, #8]
 800f06e:	fb02 f303 	mul.w	r3, r2, r3
 800f072:	041a      	lsls	r2, r3, #16
 800f074:	7bfb      	ldrb	r3, [r7, #15]
 800f076:	68b9      	ldr	r1, [r7, #8]
 800f078:	fb01 f303 	mul.w	r3, r1, r3
 800f07c:	3303      	adds	r3, #3
 800f07e:	431a      	orrs	r2, r3
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reconfigures the color frame buffer start address */
  LTDC_Layerx->PFCR = PixelFormat;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	683a      	ldr	r2, [r7, #0]
 800f088:	611a      	str	r2, [r3, #16]
    
}
 800f08a:	3714      	adds	r7, #20
 800f08c:	46bd      	mov	sp, r7
 800f08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f092:	4770      	bx	lr

0800f094 <LTDC_ITConfig>:
  * @param NewState: new state of the specified LTDC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void LTDC_ITConfig(uint32_t LTDC_IT, FunctionalState NewState)
{
 800f094:	b480      	push	{r7}
 800f096:	b083      	sub	sp, #12
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
 800f09c:	460b      	mov	r3, r1
 800f09e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_LTDC_IT(LTDC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800f0a0:	78fb      	ldrb	r3, [r7, #3]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d006      	beq.n	800f0b4 <LTDC_ITConfig+0x20>
  {
    LTDC->IER |= LTDC_IT;
 800f0a6:	4b09      	ldr	r3, [pc, #36]	; (800f0cc <LTDC_ITConfig+0x38>)
 800f0a8:	4a08      	ldr	r2, [pc, #32]	; (800f0cc <LTDC_ITConfig+0x38>)
 800f0aa:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800f0ac:	687a      	ldr	r2, [r7, #4]
 800f0ae:	430a      	orrs	r2, r1
 800f0b0:	635a      	str	r2, [r3, #52]	; 0x34
 800f0b2:	e006      	b.n	800f0c2 <LTDC_ITConfig+0x2e>
  }
  else
  {
    LTDC->IER &= (uint32_t)~LTDC_IT;
 800f0b4:	4b05      	ldr	r3, [pc, #20]	; (800f0cc <LTDC_ITConfig+0x38>)
 800f0b6:	4a05      	ldr	r2, [pc, #20]	; (800f0cc <LTDC_ITConfig+0x38>)
 800f0b8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800f0ba:	687a      	ldr	r2, [r7, #4]
 800f0bc:	43d2      	mvns	r2, r2
 800f0be:	400a      	ands	r2, r1
 800f0c0:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 800f0c2:	370c      	adds	r7, #12
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ca:	4770      	bx	lr
 800f0cc:	40016800 	.word	0x40016800

0800f0d0 <LTDC_GetFlagStatus>:
  *     @arg LTDC_FLAG_TERR: Transfer Error Interrupt flag.
  *     @arg LTDC_FLAG_RR:   Register Reload interrupt flag.
  * @retval The new state of LTDC_FLAG (SET or RESET).
  */
FlagStatus LTDC_GetFlagStatus(uint32_t LTDC_FLAG)
{
 800f0d0:	b480      	push	{r7}
 800f0d2:	b085      	sub	sp, #20
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800f0d8:	2300      	movs	r3, #0
 800f0da:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_LTDC_FLAG(LTDC_FLAG));

  if ((LTDC->ISR & LTDC_FLAG) != (uint32_t)RESET)
 800f0dc:	4b08      	ldr	r3, [pc, #32]	; (800f100 <LTDC_GetFlagStatus+0x30>)
 800f0de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	4013      	ands	r3, r2
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d002      	beq.n	800f0ee <LTDC_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 800f0e8:	2301      	movs	r3, #1
 800f0ea:	73fb      	strb	r3, [r7, #15]
 800f0ec:	e001      	b.n	800f0f2 <LTDC_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800f0f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	3714      	adds	r7, #20
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fe:	4770      	bx	lr
 800f100:	40016800 	.word	0x40016800

0800f104 <LTDC_ClearFlag>:
  *     @arg LTDC_FLAG_TERR: Transfer Error Interrupt flag.
  *     @arg LTDC_FLAG_RR:   Register Reload interrupt flag.  
  * @retval None
  */
void LTDC_ClearFlag(uint32_t LTDC_FLAG)
{
 800f104:	b480      	push	{r7}
 800f106:	b083      	sub	sp, #12
 800f108:	af00      	add	r7, sp, #0
 800f10a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_FLAG(LTDC_FLAG));

  /* Clear the corresponding LTDC flag */
  LTDC->ICR = (uint32_t)LTDC_FLAG;
 800f10c:	4b03      	ldr	r3, [pc, #12]	; (800f11c <LTDC_ClearFlag+0x18>)
 800f10e:	687a      	ldr	r2, [r7, #4]
 800f110:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800f112:	370c      	adds	r7, #12
 800f114:	46bd      	mov	sp, r7
 800f116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f11a:	4770      	bx	lr
 800f11c:	40016800 	.word	0x40016800

0800f120 <LTDC_GetITStatus>:
  *     @arg LTDC_IT_TERR: Transfer Error Interrupt Enable.
  *     @arg LTDC_IT_RR:   Register Reload interrupt Enable.
  * @retval The new state of the LTDC_IT (SET or RESET).
  */
ITStatus LTDC_GetITStatus(uint32_t LTDC_IT)
{
 800f120:	b480      	push	{r7}
 800f122:	b085      	sub	sp, #20
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800f128:	2300      	movs	r3, #0
 800f12a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_LTDC_IT(LTDC_IT));

  if ((LTDC->ISR & LTDC_IT) != (uint32_t)RESET)
 800f12c:	4b0f      	ldr	r3, [pc, #60]	; (800f16c <LTDC_GetITStatus+0x4c>)
 800f12e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	4013      	ands	r3, r2
 800f134:	2b00      	cmp	r3, #0
 800f136:	d002      	beq.n	800f13e <LTDC_GetITStatus+0x1e>
  {
    bitstatus = SET;
 800f138:	2301      	movs	r3, #1
 800f13a:	73fb      	strb	r3, [r7, #15]
 800f13c:	e001      	b.n	800f142 <LTDC_GetITStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800f13e:	2300      	movs	r3, #0
 800f140:	73fb      	strb	r3, [r7, #15]
  }

  if (((LTDC->IER & LTDC_IT) != (uint32_t)RESET) && (bitstatus != (uint32_t)RESET))
 800f142:	4b0a      	ldr	r3, [pc, #40]	; (800f16c <LTDC_GetITStatus+0x4c>)
 800f144:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	4013      	ands	r3, r2
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d005      	beq.n	800f15a <LTDC_GetITStatus+0x3a>
 800f14e:	7bfb      	ldrb	r3, [r7, #15]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d002      	beq.n	800f15a <LTDC_GetITStatus+0x3a>
  {
    bitstatus = SET;
 800f154:	2301      	movs	r3, #1
 800f156:	73fb      	strb	r3, [r7, #15]
 800f158:	e001      	b.n	800f15e <LTDC_GetITStatus+0x3e>
  }
  else
  {
    bitstatus = RESET;
 800f15a:	2300      	movs	r3, #0
 800f15c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800f15e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f160:	4618      	mov	r0, r3
 800f162:	3714      	adds	r7, #20
 800f164:	46bd      	mov	sp, r7
 800f166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16a:	4770      	bx	lr
 800f16c:	40016800 	.word	0x40016800

0800f170 <LTDC_ClearITPendingBit>:
  *     @arg LTDC_IT_TERRIE: Transfer Error Interrupt.
  *     @arg LTDC_IT_RRIE:   Register Reload interrupt.
  * @retval None
  */
void LTDC_ClearITPendingBit(uint32_t LTDC_IT)
{
 800f170:	b480      	push	{r7}
 800f172:	b083      	sub	sp, #12
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_IT(LTDC_IT));

  /* Clear the corresponding LTDC Interrupt */
  LTDC->ICR = (uint32_t)LTDC_IT;
 800f178:	4b03      	ldr	r3, [pc, #12]	; (800f188 <LTDC_ClearITPendingBit+0x18>)
 800f17a:	687a      	ldr	r2, [r7, #4]
 800f17c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800f17e:	370c      	adds	r7, #12
 800f180:	46bd      	mov	sp, r7
 800f182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f186:	4770      	bx	lr
 800f188:	40016800 	.word	0x40016800

0800f18c <PWR_DeInit>:
  * @brief  Deinitializes the PWR peripheral registers to their default reset values.     
  * @param  None
  * @retval None
  */
void PWR_DeInit(void)
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	af00      	add	r7, sp, #0
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 800f190:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800f194:	2101      	movs	r1, #1
 800f196:	f000 fe3f 	bl	800fe18 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 800f19a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800f19e:	2100      	movs	r1, #0
 800f1a0:	f000 fe3a 	bl	800fe18 <RCC_APB1PeriphResetCmd>
}
 800f1a4:	bd80      	pop	{r7, pc}
 800f1a6:	bf00      	nop

0800f1a8 <PWR_BackupAccessCmd>:
  * @param  NewState: new state of the access to the backup domain.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupAccessCmd(FunctionalState NewState)
{
 800f1a8:	b480      	push	{r7}
 800f1aa:	b083      	sub	sp, #12
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 800f1b2:	4b04      	ldr	r3, [pc, #16]	; (800f1c4 <PWR_BackupAccessCmd+0x1c>)
 800f1b4:	79fa      	ldrb	r2, [r7, #7]
 800f1b6:	601a      	str	r2, [r3, #0]
}
 800f1b8:	370c      	adds	r7, #12
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c0:	4770      	bx	lr
 800f1c2:	bf00      	nop
 800f1c4:	420e0020 	.word	0x420e0020

0800f1c8 <PWR_PVDLevelConfig>:
  *         more details about the voltage threshold corresponding to each 
  *         detection level.
  * @retval None
  */
void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
{
 800f1c8:	b480      	push	{r7}
 800f1ca:	b085      	sub	sp, #20
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
  
  tmpreg = PWR->CR;
 800f1d4:	4b09      	ldr	r3, [pc, #36]	; (800f1fc <PWR_PVDLevelConfig+0x34>)
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PLS[7:5] bits */
  tmpreg &= CR_PLS_MASK;
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800f1e0:	60fb      	str	r3, [r7, #12]
  
  /* Set PLS[7:5] bits according to PWR_PVDLevel value */
  tmpreg |= PWR_PVDLevel;
 800f1e2:	68fa      	ldr	r2, [r7, #12]
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	4313      	orrs	r3, r2
 800f1e8:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 800f1ea:	4b04      	ldr	r3, [pc, #16]	; (800f1fc <PWR_PVDLevelConfig+0x34>)
 800f1ec:	68fa      	ldr	r2, [r7, #12]
 800f1ee:	601a      	str	r2, [r3, #0]
}
 800f1f0:	3714      	adds	r7, #20
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f8:	4770      	bx	lr
 800f1fa:	bf00      	nop
 800f1fc:	40007000 	.word	0x40007000

0800f200 <PWR_PVDCmd>:
  * @param  NewState: new state of the PVD.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_PVDCmd(FunctionalState NewState)
{
 800f200:	b480      	push	{r7}
 800f202:	b083      	sub	sp, #12
 800f204:	af00      	add	r7, sp, #0
 800f206:	4603      	mov	r3, r0
 800f208:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 800f20a:	4b04      	ldr	r3, [pc, #16]	; (800f21c <PWR_PVDCmd+0x1c>)
 800f20c:	79fa      	ldrb	r2, [r7, #7]
 800f20e:	601a      	str	r2, [r3, #0]
}
 800f210:	370c      	adds	r7, #12
 800f212:	46bd      	mov	sp, r7
 800f214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f218:	4770      	bx	lr
 800f21a:	bf00      	nop
 800f21c:	420e0010 	.word	0x420e0010

0800f220 <PWR_WakeUpPinCmd>:
  * @param  NewState: new state of the WakeUp Pin functionality.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_WakeUpPinCmd(FunctionalState NewState)
{
 800f220:	b480      	push	{r7}
 800f222:	b083      	sub	sp, #12
 800f224:	af00      	add	r7, sp, #0
 800f226:	4603      	mov	r3, r0
 800f228:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 800f22a:	4b04      	ldr	r3, [pc, #16]	; (800f23c <PWR_WakeUpPinCmd+0x1c>)
 800f22c:	79fa      	ldrb	r2, [r7, #7]
 800f22e:	601a      	str	r2, [r3, #0]
}
 800f230:	370c      	adds	r7, #12
 800f232:	46bd      	mov	sp, r7
 800f234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f238:	4770      	bx	lr
 800f23a:	bf00      	nop
 800f23c:	420e00a0 	.word	0x420e00a0

0800f240 <PWR_BackupRegulatorCmd>:
  * @param  NewState: new state of the Backup Regulator.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupRegulatorCmd(FunctionalState NewState)
{
 800f240:	b480      	push	{r7}
 800f242:	b083      	sub	sp, #12
 800f244:	af00      	add	r7, sp, #0
 800f246:	4603      	mov	r3, r0
 800f248:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)NewState;
 800f24a:	4b04      	ldr	r3, [pc, #16]	; (800f25c <PWR_BackupRegulatorCmd+0x1c>)
 800f24c:	79fa      	ldrb	r2, [r7, #7]
 800f24e:	601a      	str	r2, [r3, #0]
}
 800f250:	370c      	adds	r7, #12
 800f252:	46bd      	mov	sp, r7
 800f254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f258:	4770      	bx	lr
 800f25a:	bf00      	nop
 800f25c:	420e00a4 	.word	0x420e00a4

0800f260 <PWR_MainRegulatorModeConfig>:
  *            @arg PWR_Regulator_Voltage_Scale3: Regulator voltage output Scale 3 mode, 
  *                                                System frequency up to 120 MHz (only for STM32F42xxx/43xxx devices)
  * @retval None
  */
void PWR_MainRegulatorModeConfig(uint32_t PWR_Regulator_Voltage)
{
 800f260:	b480      	push	{r7}
 800f262:	b085      	sub	sp, #20
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800f268:	2300      	movs	r3, #0
 800f26a:	60fb      	str	r3, [r7, #12]
	
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_VOLTAGE(PWR_Regulator_Voltage));

  tmpreg = PWR->CR;
 800f26c:	4b09      	ldr	r3, [pc, #36]	; (800f294 <PWR_MainRegulatorModeConfig+0x34>)
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	60fb      	str	r3, [r7, #12]
  
  /* Clear VOS[15:14] bits */
  tmpreg &= CR_VOS_MASK;
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800f278:	60fb      	str	r3, [r7, #12]
  
  /* Set VOS[15:14] bits according to PWR_Regulator_Voltage value */
  tmpreg |= PWR_Regulator_Voltage;
 800f27a:	68fa      	ldr	r2, [r7, #12]
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	4313      	orrs	r3, r2
 800f280:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 800f282:	4b04      	ldr	r3, [pc, #16]	; (800f294 <PWR_MainRegulatorModeConfig+0x34>)
 800f284:	68fa      	ldr	r2, [r7, #12]
 800f286:	601a      	str	r2, [r3, #0]
}
 800f288:	3714      	adds	r7, #20
 800f28a:	46bd      	mov	sp, r7
 800f28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f290:	4770      	bx	lr
 800f292:	bf00      	nop
 800f294:	40007000 	.word	0x40007000

0800f298 <PWR_OverDriveCmd>:
  * @param  NewState: new state of the Over Drive mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_OverDriveCmd(FunctionalState NewState)
{
 800f298:	b480      	push	{r7}
 800f29a:	b083      	sub	sp, #12
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	4603      	mov	r3, r0
 800f2a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Set/Reset the ODEN bit to enable/disable the Over Drive mode */
  *(__IO uint32_t *) CR_ODEN_BB = (uint32_t)NewState;
 800f2a2:	4b04      	ldr	r3, [pc, #16]	; (800f2b4 <PWR_OverDriveCmd+0x1c>)
 800f2a4:	79fa      	ldrb	r2, [r7, #7]
 800f2a6:	601a      	str	r2, [r3, #0]
}
 800f2a8:	370c      	adds	r7, #12
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b0:	4770      	bx	lr
 800f2b2:	bf00      	nop
 800f2b4:	420e0040 	.word	0x420e0040

0800f2b8 <PWR_OverDriveSWCmd>:
  * @param  NewState: new state of the Over Drive switching mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_OverDriveSWCmd(FunctionalState NewState)
{
 800f2b8:	b480      	push	{r7}
 800f2ba:	b083      	sub	sp, #12
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	4603      	mov	r3, r0
 800f2c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Set/Reset the ODSWEN bit to enable/disable the Over Drive switching mode */
  *(__IO uint32_t *) CR_ODSWEN_BB = (uint32_t)NewState;
 800f2c2:	4b04      	ldr	r3, [pc, #16]	; (800f2d4 <PWR_OverDriveSWCmd+0x1c>)
 800f2c4:	79fa      	ldrb	r2, [r7, #7]
 800f2c6:	601a      	str	r2, [r3, #0]
}
 800f2c8:	370c      	adds	r7, #12
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d0:	4770      	bx	lr
 800f2d2:	bf00      	nop
 800f2d4:	420e0044 	.word	0x420e0044

0800f2d8 <PWR_UnderDriveCmd>:
  * @param  NewState: new state of the Under Drive mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_UnderDriveCmd(FunctionalState NewState)
{
 800f2d8:	b480      	push	{r7}
 800f2da:	b083      	sub	sp, #12
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	4603      	mov	r3, r0
 800f2e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800f2e2:	79fb      	ldrb	r3, [r7, #7]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d006      	beq.n	800f2f6 <PWR_UnderDriveCmd+0x1e>
  {
    /* Set the UDEN[1:0] bits to enable the Under Drive mode */
    PWR->CR |= (uint32_t)PWR_CR_UDEN;
 800f2e8:	4b08      	ldr	r3, [pc, #32]	; (800f30c <PWR_UnderDriveCmd+0x34>)
 800f2ea:	4a08      	ldr	r2, [pc, #32]	; (800f30c <PWR_UnderDriveCmd+0x34>)
 800f2ec:	6812      	ldr	r2, [r2, #0]
 800f2ee:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 800f2f2:	601a      	str	r2, [r3, #0]
 800f2f4:	e005      	b.n	800f302 <PWR_UnderDriveCmd+0x2a>
  }
  else
  {
    /* Reset the UDEN[1:0] bits to disable the Under Drive mode */
    PWR->CR &= (uint32_t)(~PWR_CR_UDEN);
 800f2f6:	4b05      	ldr	r3, [pc, #20]	; (800f30c <PWR_UnderDriveCmd+0x34>)
 800f2f8:	4a04      	ldr	r2, [pc, #16]	; (800f30c <PWR_UnderDriveCmd+0x34>)
 800f2fa:	6812      	ldr	r2, [r2, #0]
 800f2fc:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800f300:	601a      	str	r2, [r3, #0]
  }
}
 800f302:	370c      	adds	r7, #12
 800f304:	46bd      	mov	sp, r7
 800f306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30a:	4770      	bx	lr
 800f30c:	40007000 	.word	0x40007000

0800f310 <PWR_FlashPowerDownCmd>:
  * @param  NewState: new state of the Flash power mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_FlashPowerDownCmd(FunctionalState NewState)
{
 800f310:	b480      	push	{r7}
 800f312:	b083      	sub	sp, #12
 800f314:	af00      	add	r7, sp, #0
 800f316:	4603      	mov	r3, r0
 800f318:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)NewState;
 800f31a:	4b04      	ldr	r3, [pc, #16]	; (800f32c <PWR_FlashPowerDownCmd+0x1c>)
 800f31c:	79fa      	ldrb	r2, [r7, #7]
 800f31e:	601a      	str	r2, [r3, #0]
}
 800f320:	370c      	adds	r7, #12
 800f322:	46bd      	mov	sp, r7
 800f324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f328:	4770      	bx	lr
 800f32a:	bf00      	nop
 800f32c:	420e0024 	.word	0x420e0024

0800f330 <PWR_EnterSTOPMode>:
  *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
  *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
  * @retval None
  */
void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
{
 800f330:	b480      	push	{r7}
 800f332:	b085      	sub	sp, #20
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
 800f338:	460b      	mov	r3, r1
 800f33a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 800f33c:	2300      	movs	r3, #0
 800f33e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 800f340:	4b13      	ldr	r3, [pc, #76]	; (800f390 <PWR_EnterSTOPMode+0x60>)
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	60fb      	str	r3, [r7, #12]
  /* Clear PDDS and LPDS bits */
  tmpreg &= CR_DS_MASK;
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f34c:	f023 0303 	bic.w	r3, r3, #3
 800f350:	60fb      	str	r3, [r7, #12]
  
  /* Set LPDS, MRLVDS and LPLVDS bits according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 800f352:	68fa      	ldr	r2, [r7, #12]
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	4313      	orrs	r3, r2
 800f358:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 800f35a:	4b0d      	ldr	r3, [pc, #52]	; (800f390 <PWR_EnterSTOPMode+0x60>)
 800f35c:	68fa      	ldr	r2, [r7, #12]
 800f35e:	601a      	str	r2, [r3, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 800f360:	4b0c      	ldr	r3, [pc, #48]	; (800f394 <PWR_EnterSTOPMode+0x64>)
 800f362:	4a0c      	ldr	r2, [pc, #48]	; (800f394 <PWR_EnterSTOPMode+0x64>)
 800f364:	6912      	ldr	r2, [r2, #16]
 800f366:	f042 0204 	orr.w	r2, r2, #4
 800f36a:	611a      	str	r2, [r3, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 800f36c:	78fb      	ldrb	r3, [r7, #3]
 800f36e:	2b01      	cmp	r3, #1
 800f370:	d101      	bne.n	800f376 <PWR_EnterSTOPMode+0x46>
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 800f372:	bf30      	wfi
 800f374:	e000      	b.n	800f378 <PWR_EnterSTOPMode+0x48>
    Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
 800f376:	bf20      	wfe
  {
    /* Request Wait For Event */
    __WFE();
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 800f378:	4b06      	ldr	r3, [pc, #24]	; (800f394 <PWR_EnterSTOPMode+0x64>)
 800f37a:	4a06      	ldr	r2, [pc, #24]	; (800f394 <PWR_EnterSTOPMode+0x64>)
 800f37c:	6912      	ldr	r2, [r2, #16]
 800f37e:	f022 0204 	bic.w	r2, r2, #4
 800f382:	611a      	str	r2, [r3, #16]
}
 800f384:	3714      	adds	r7, #20
 800f386:	46bd      	mov	sp, r7
 800f388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38c:	4770      	bx	lr
 800f38e:	bf00      	nop
 800f390:	40007000 	.word	0x40007000
 800f394:	e000ed00 	.word	0xe000ed00

0800f398 <PWR_EnterUnderDriveSTOPMode>:
  *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
  *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
  * @retval None
  */
void PWR_EnterUnderDriveSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
{
 800f398:	b480      	push	{r7}
 800f39a:	b085      	sub	sp, #20
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
 800f3a0:	460b      	mov	r3, r1
 800f3a2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_UNDERDRIVE(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 800f3a8:	4b13      	ldr	r3, [pc, #76]	; (800f3f8 <PWR_EnterUnderDriveSTOPMode+0x60>)
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	60fb      	str	r3, [r7, #12]
  /* Clear PDDS and LPDS bits */
  tmpreg &= CR_DS_MASK;
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f3b4:	f023 0303 	bic.w	r3, r3, #3
 800f3b8:	60fb      	str	r3, [r7, #12]
  
  /* Set LPDS, MRLUDS and LPLUDS bits according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 800f3ba:	68fa      	ldr	r2, [r7, #12]
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	4313      	orrs	r3, r2
 800f3c0:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 800f3c2:	4b0d      	ldr	r3, [pc, #52]	; (800f3f8 <PWR_EnterUnderDriveSTOPMode+0x60>)
 800f3c4:	68fa      	ldr	r2, [r7, #12]
 800f3c6:	601a      	str	r2, [r3, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 800f3c8:	4b0c      	ldr	r3, [pc, #48]	; (800f3fc <PWR_EnterUnderDriveSTOPMode+0x64>)
 800f3ca:	4a0c      	ldr	r2, [pc, #48]	; (800f3fc <PWR_EnterUnderDriveSTOPMode+0x64>)
 800f3cc:	6912      	ldr	r2, [r2, #16]
 800f3ce:	f042 0204 	orr.w	r2, r2, #4
 800f3d2:	611a      	str	r2, [r3, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 800f3d4:	78fb      	ldrb	r3, [r7, #3]
 800f3d6:	2b01      	cmp	r3, #1
 800f3d8:	d101      	bne.n	800f3de <PWR_EnterUnderDriveSTOPMode+0x46>
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 800f3da:	bf30      	wfi
 800f3dc:	e000      	b.n	800f3e0 <PWR_EnterUnderDriveSTOPMode+0x48>
    Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
 800f3de:	bf20      	wfe
  {
    /* Request Wait For Event */
    __WFE();
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 800f3e0:	4b06      	ldr	r3, [pc, #24]	; (800f3fc <PWR_EnterUnderDriveSTOPMode+0x64>)
 800f3e2:	4a06      	ldr	r2, [pc, #24]	; (800f3fc <PWR_EnterUnderDriveSTOPMode+0x64>)
 800f3e4:	6912      	ldr	r2, [r2, #16]
 800f3e6:	f022 0204 	bic.w	r2, r2, #4
 800f3ea:	611a      	str	r2, [r3, #16]
}
 800f3ec:	3714      	adds	r7, #20
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f4:	4770      	bx	lr
 800f3f6:	bf00      	nop
 800f3f8:	40007000 	.word	0x40007000
 800f3fc:	e000ed00 	.word	0xe000ed00

0800f400 <PWR_EnterSTANDBYMode>:
  *          - WKUP pin 1 (PA0) if enabled.       
  * @param  None
  * @retval None
  */
void PWR_EnterSTANDBYMode(void)
{
 800f400:	b480      	push	{r7}
 800f402:	af00      	add	r7, sp, #0
  /* Clear Wakeup flag */
  PWR->CR |= PWR_CR_CWUF;
 800f404:	4b0b      	ldr	r3, [pc, #44]	; (800f434 <PWR_EnterSTANDBYMode+0x34>)
 800f406:	4a0b      	ldr	r2, [pc, #44]	; (800f434 <PWR_EnterSTANDBYMode+0x34>)
 800f408:	6812      	ldr	r2, [r2, #0]
 800f40a:	f042 0204 	orr.w	r2, r2, #4
 800f40e:	601a      	str	r2, [r3, #0]
  
  /* Select STANDBY mode */
  PWR->CR |= PWR_CR_PDDS;
 800f410:	4b08      	ldr	r3, [pc, #32]	; (800f434 <PWR_EnterSTANDBYMode+0x34>)
 800f412:	4a08      	ldr	r2, [pc, #32]	; (800f434 <PWR_EnterSTANDBYMode+0x34>)
 800f414:	6812      	ldr	r2, [r2, #0]
 800f416:	f042 0202 	orr.w	r2, r2, #2
 800f41a:	601a      	str	r2, [r3, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 800f41c:	4b06      	ldr	r3, [pc, #24]	; (800f438 <PWR_EnterSTANDBYMode+0x38>)
 800f41e:	4a06      	ldr	r2, [pc, #24]	; (800f438 <PWR_EnterSTANDBYMode+0x38>)
 800f420:	6912      	ldr	r2, [r2, #16]
 800f422:	f042 0204 	orr.w	r2, r2, #4
 800f426:	611a      	str	r2, [r3, #16]
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 800f428:	bf30      	wfi
#if defined ( __CC_ARM   )
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
}
 800f42a:	46bd      	mov	sp, r7
 800f42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f430:	4770      	bx	lr
 800f432:	bf00      	nop
 800f434:	40007000 	.word	0x40007000
 800f438:	e000ed00 	.word	0xe000ed00

0800f43c <PWR_GetFlagStatus>:
  *            @arg PWR_FLAG_UDRDY: This flag indicates that the Under-drive mode
  *                 is enabled in Stop mode (STM32F42xxx/43xxx devices)
  * @retval The new state of PWR_FLAG (SET or RESET).
  */
FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
{
 800f43c:	b480      	push	{r7}
 800f43e:	b085      	sub	sp, #20
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800f444:	2300      	movs	r3, #0
 800f446:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 800f448:	4b08      	ldr	r3, [pc, #32]	; (800f46c <PWR_GetFlagStatus+0x30>)
 800f44a:	685a      	ldr	r2, [r3, #4]
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	4013      	ands	r3, r2
 800f450:	2b00      	cmp	r3, #0
 800f452:	d002      	beq.n	800f45a <PWR_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 800f454:	2301      	movs	r3, #1
 800f456:	73fb      	strb	r3, [r7, #15]
 800f458:	e001      	b.n	800f45e <PWR_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800f45a:	2300      	movs	r3, #0
 800f45c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 800f45e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f460:	4618      	mov	r0, r3
 800f462:	3714      	adds	r7, #20
 800f464:	46bd      	mov	sp, r7
 800f466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46a:	4770      	bx	lr
 800f46c:	40007000 	.word	0x40007000

0800f470 <PWR_ClearFlag>:
  *            @arg PWR_FLAG_SB: StandBy flag
  *            @arg PWR_FLAG_UDRDY: Under-drive ready flag (STM32F42xxx/43xxx devices)
  * @retval None
  */
void PWR_ClearFlag(uint32_t PWR_FLAG)
{
 800f470:	b480      	push	{r7}
 800f472:	b083      	sub	sp, #12
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
  
#if defined (STM32F427_437xx) || defined (STM32F429_439xx)
  if (PWR_FLAG != PWR_FLAG_UDRDY)
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800f47e:	d007      	beq.n	800f490 <PWR_ClearFlag+0x20>
  {
    PWR->CR |=  PWR_FLAG << 2;
 800f480:	4b09      	ldr	r3, [pc, #36]	; (800f4a8 <PWR_ClearFlag+0x38>)
 800f482:	4a09      	ldr	r2, [pc, #36]	; (800f4a8 <PWR_ClearFlag+0x38>)
 800f484:	6811      	ldr	r1, [r2, #0]
 800f486:	687a      	ldr	r2, [r7, #4]
 800f488:	0092      	lsls	r2, r2, #2
 800f48a:	430a      	orrs	r2, r1
 800f48c:	601a      	str	r2, [r3, #0]
 800f48e:	e005      	b.n	800f49c <PWR_ClearFlag+0x2c>
  }
  else
  {
    PWR->CSR |= PWR_FLAG_UDRDY;
 800f490:	4b05      	ldr	r3, [pc, #20]	; (800f4a8 <PWR_ClearFlag+0x38>)
 800f492:	4a05      	ldr	r2, [pc, #20]	; (800f4a8 <PWR_ClearFlag+0x38>)
 800f494:	6852      	ldr	r2, [r2, #4]
 800f496:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 800f49a:	605a      	str	r2, [r3, #4]
#endif /* STM32F427_437xx ||  STM32F429_439xx */

#if defined (STM32F40_41xxx) || defined (STM32F401xx) 
  PWR->CR |=  PWR_FLAG << 2;
#endif /* STM32F40_41xxx */
}
 800f49c:	370c      	adds	r7, #12
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a4:	4770      	bx	lr
 800f4a6:	bf00      	nop
 800f4a8:	40007000 	.word	0x40007000

0800f4ac <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 800f4ac:	b480      	push	{r7}
 800f4ae:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800f4b0:	4b16      	ldr	r3, [pc, #88]	; (800f50c <RCC_DeInit+0x60>)
 800f4b2:	4a16      	ldr	r2, [pc, #88]	; (800f50c <RCC_DeInit+0x60>)
 800f4b4:	6812      	ldr	r2, [r2, #0]
 800f4b6:	f042 0201 	orr.w	r2, r2, #1
 800f4ba:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800f4bc:	4b13      	ldr	r3, [pc, #76]	; (800f50c <RCC_DeInit+0x60>)
 800f4be:	2200      	movs	r2, #0
 800f4c0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 800f4c2:	4a12      	ldr	r2, [pc, #72]	; (800f50c <RCC_DeInit+0x60>)
 800f4c4:	4b11      	ldr	r3, [pc, #68]	; (800f50c <RCC_DeInit+0x60>)
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800f4cc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800f4d0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800f4d2:	4b0e      	ldr	r3, [pc, #56]	; (800f50c <RCC_DeInit+0x60>)
 800f4d4:	4a0e      	ldr	r2, [pc, #56]	; (800f510 <RCC_DeInit+0x64>)
 800f4d6:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 800f4d8:	4b0c      	ldr	r3, [pc, #48]	; (800f50c <RCC_DeInit+0x60>)
 800f4da:	4a0e      	ldr	r2, [pc, #56]	; (800f514 <RCC_DeInit+0x68>)
 800f4dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register, only available for STM32F42/43xxx devices */
  RCC->PLLSAICFGR = 0x24003000;
 800f4e0:	4b0a      	ldr	r3, [pc, #40]	; (800f50c <RCC_DeInit+0x60>)
 800f4e2:	4a0d      	ldr	r2, [pc, #52]	; (800f518 <RCC_DeInit+0x6c>)
 800f4e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800f4e8:	4b08      	ldr	r3, [pc, #32]	; (800f50c <RCC_DeInit+0x60>)
 800f4ea:	4a08      	ldr	r2, [pc, #32]	; (800f50c <RCC_DeInit+0x60>)
 800f4ec:	6812      	ldr	r2, [r2, #0]
 800f4ee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f4f2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800f4f4:	4b05      	ldr	r3, [pc, #20]	; (800f50c <RCC_DeInit+0x60>)
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx devices */
  RCC->DCKCFGR = 0x00000000; 
 800f4fa:	4b04      	ldr	r3, [pc, #16]	; (800f50c <RCC_DeInit+0x60>)
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

}
 800f502:	46bd      	mov	sp, r7
 800f504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f508:	4770      	bx	lr
 800f50a:	bf00      	nop
 800f50c:	40023800 	.word	0x40023800
 800f510:	24003010 	.word	0x24003010
 800f514:	20003000 	.word	0x20003000
 800f518:	24003000 	.word	0x24003000

0800f51c <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 800f51c:	b480      	push	{r7}
 800f51e:	b083      	sub	sp, #12
 800f520:	af00      	add	r7, sp, #0
 800f522:	4603      	mov	r3, r0
 800f524:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 800f526:	4b05      	ldr	r3, [pc, #20]	; (800f53c <RCC_HSEConfig+0x20>)
 800f528:	2200      	movs	r2, #0
 800f52a:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 800f52c:	4b03      	ldr	r3, [pc, #12]	; (800f53c <RCC_HSEConfig+0x20>)
 800f52e:	79fa      	ldrb	r2, [r7, #7]
 800f530:	701a      	strb	r2, [r3, #0]
}
 800f532:	370c      	adds	r7, #12
 800f534:	46bd      	mov	sp, r7
 800f536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53a:	4770      	bx	lr
 800f53c:	40023802 	.word	0x40023802

0800f540 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 800f540:	b580      	push	{r7, lr}
 800f542:	b082      	sub	sp, #8
 800f544:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 800f546:	2300      	movs	r3, #0
 800f548:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 800f54a:	2300      	movs	r3, #0
 800f54c:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 800f54e:	2300      	movs	r3, #0
 800f550:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 800f552:	2031      	movs	r0, #49	; 0x31
 800f554:	f000 fd56 	bl	8010004 <RCC_GetFlagStatus>
 800f558:	4603      	mov	r3, r0
 800f55a:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 800f55c:	683b      	ldr	r3, [r7, #0]
 800f55e:	3301      	adds	r3, #1
 800f560:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 800f562:	683b      	ldr	r3, [r7, #0]
 800f564:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800f568:	d002      	beq.n	800f570 <RCC_WaitForHSEStartUp+0x30>
 800f56a:	79bb      	ldrb	r3, [r7, #6]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d0f0      	beq.n	800f552 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 800f570:	2031      	movs	r0, #49	; 0x31
 800f572:	f000 fd47 	bl	8010004 <RCC_GetFlagStatus>
 800f576:	4603      	mov	r3, r0
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d002      	beq.n	800f582 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 800f57c:	2301      	movs	r3, #1
 800f57e:	71fb      	strb	r3, [r7, #7]
 800f580:	e001      	b.n	800f586 <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 800f582:	2300      	movs	r3, #0
 800f584:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 800f586:	79fb      	ldrb	r3, [r7, #7]
}
 800f588:	4618      	mov	r0, r3
 800f58a:	3708      	adds	r7, #8
 800f58c:	46bd      	mov	sp, r7
 800f58e:	bd80      	pop	{r7, pc}

0800f590 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 800f590:	b480      	push	{r7}
 800f592:	b085      	sub	sp, #20
 800f594:	af00      	add	r7, sp, #0
 800f596:	4603      	mov	r3, r0
 800f598:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 800f59a:	2300      	movs	r3, #0
 800f59c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 800f59e:	4b0a      	ldr	r3, [pc, #40]	; (800f5c8 <RCC_AdjustHSICalibrationValue+0x38>)
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800f5aa:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 800f5ac:	79fb      	ldrb	r3, [r7, #7]
 800f5ae:	00db      	lsls	r3, r3, #3
 800f5b0:	68fa      	ldr	r2, [r7, #12]
 800f5b2:	4313      	orrs	r3, r2
 800f5b4:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
 800f5b6:	4b04      	ldr	r3, [pc, #16]	; (800f5c8 <RCC_AdjustHSICalibrationValue+0x38>)
 800f5b8:	68fa      	ldr	r2, [r7, #12]
 800f5ba:	601a      	str	r2, [r3, #0]
}
 800f5bc:	3714      	adds	r7, #20
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c4:	4770      	bx	lr
 800f5c6:	bf00      	nop
 800f5c8:	40023800 	.word	0x40023800

0800f5cc <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 800f5cc:	b480      	push	{r7}
 800f5ce:	b083      	sub	sp, #12
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 800f5d6:	4b04      	ldr	r3, [pc, #16]	; (800f5e8 <RCC_HSICmd+0x1c>)
 800f5d8:	79fa      	ldrb	r2, [r7, #7]
 800f5da:	601a      	str	r2, [r3, #0]
}
 800f5dc:	370c      	adds	r7, #12
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e4:	4770      	bx	lr
 800f5e6:	bf00      	nop
 800f5e8:	42470000 	.word	0x42470000

0800f5ec <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 800f5ec:	b480      	push	{r7}
 800f5ee:	b083      	sub	sp, #12
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800f5f6:	4b0c      	ldr	r3, [pc, #48]	; (800f628 <RCC_LSEConfig+0x3c>)
 800f5f8:	2200      	movs	r2, #0
 800f5fa:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800f5fc:	4b0a      	ldr	r3, [pc, #40]	; (800f628 <RCC_LSEConfig+0x3c>)
 800f5fe:	2200      	movs	r2, #0
 800f600:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 800f602:	79fb      	ldrb	r3, [r7, #7]
 800f604:	2b01      	cmp	r3, #1
 800f606:	d002      	beq.n	800f60e <RCC_LSEConfig+0x22>
 800f608:	2b04      	cmp	r3, #4
 800f60a:	d004      	beq.n	800f616 <RCC_LSEConfig+0x2a>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
 800f60c:	e007      	b.n	800f61e <RCC_LSEConfig+0x32>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 800f60e:	4b06      	ldr	r3, [pc, #24]	; (800f628 <RCC_LSEConfig+0x3c>)
 800f610:	2201      	movs	r2, #1
 800f612:	701a      	strb	r2, [r3, #0]
      break;
 800f614:	e003      	b.n	800f61e <RCC_LSEConfig+0x32>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 800f616:	4b04      	ldr	r3, [pc, #16]	; (800f628 <RCC_LSEConfig+0x3c>)
 800f618:	2205      	movs	r2, #5
 800f61a:	701a      	strb	r2, [r3, #0]
      break;
 800f61c:	bf00      	nop
    default:
      break;
  }
}
 800f61e:	370c      	adds	r7, #12
 800f620:	46bd      	mov	sp, r7
 800f622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f626:	4770      	bx	lr
 800f628:	40023870 	.word	0x40023870

0800f62c <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 800f62c:	b480      	push	{r7}
 800f62e:	b083      	sub	sp, #12
 800f630:	af00      	add	r7, sp, #0
 800f632:	4603      	mov	r3, r0
 800f634:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 800f636:	4b04      	ldr	r3, [pc, #16]	; (800f648 <RCC_LSICmd+0x1c>)
 800f638:	79fa      	ldrb	r2, [r7, #7]
 800f63a:	601a      	str	r2, [r3, #0]
}
 800f63c:	370c      	adds	r7, #12
 800f63e:	46bd      	mov	sp, r7
 800f640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f644:	4770      	bx	lr
 800f646:	bf00      	nop
 800f648:	42470e80 	.word	0x42470e80

0800f64c <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 800f64c:	b480      	push	{r7}
 800f64e:	b085      	sub	sp, #20
 800f650:	af00      	add	r7, sp, #0
 800f652:	60f8      	str	r0, [r7, #12]
 800f654:	60b9      	str	r1, [r7, #8]
 800f656:	607a      	str	r2, [r7, #4]
 800f658:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 800f65a:	4b0a      	ldr	r3, [pc, #40]	; (800f684 <RCC_PLLConfig+0x38>)
 800f65c:	687a      	ldr	r2, [r7, #4]
 800f65e:	0191      	lsls	r1, r2, #6
 800f660:	68ba      	ldr	r2, [r7, #8]
 800f662:	4311      	orrs	r1, r2
 800f664:	683a      	ldr	r2, [r7, #0]
 800f666:	0852      	lsrs	r2, r2, #1
 800f668:	3a01      	subs	r2, #1
 800f66a:	0412      	lsls	r2, r2, #16
 800f66c:	4311      	orrs	r1, r2
 800f66e:	68fa      	ldr	r2, [r7, #12]
 800f670:	4311      	orrs	r1, r2
                 (PLLQ << 24);
 800f672:	69ba      	ldr	r2, [r7, #24]
 800f674:	0612      	lsls	r2, r2, #24
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 800f676:	430a      	orrs	r2, r1
 800f678:	605a      	str	r2, [r3, #4]
                 (PLLQ << 24);
}
 800f67a:	3714      	adds	r7, #20
 800f67c:	46bd      	mov	sp, r7
 800f67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f682:	4770      	bx	lr
 800f684:	40023800 	.word	0x40023800

0800f688 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 800f688:	b480      	push	{r7}
 800f68a:	b083      	sub	sp, #12
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	4603      	mov	r3, r0
 800f690:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 800f692:	4b04      	ldr	r3, [pc, #16]	; (800f6a4 <RCC_PLLCmd+0x1c>)
 800f694:	79fa      	ldrb	r2, [r7, #7]
 800f696:	601a      	str	r2, [r3, #0]
}
 800f698:	370c      	adds	r7, #12
 800f69a:	46bd      	mov	sp, r7
 800f69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a0:	4770      	bx	lr
 800f6a2:	bf00      	nop
 800f6a4:	42470060 	.word	0x42470060

0800f6a8 <RCC_PLLI2SConfig>:
  * @note   the PLLI2SR parameter is only available with STM32F42xxx/43xxx devices.  
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SQ, uint32_t PLLI2SR)
{
 800f6a8:	b480      	push	{r7}
 800f6aa:	b085      	sub	sp, #20
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	60f8      	str	r0, [r7, #12]
 800f6b0:	60b9      	str	r1, [r7, #8]
 800f6b2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SQ));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SQ << 24) | (PLLI2SR << 28);
 800f6b4:	4b07      	ldr	r3, [pc, #28]	; (800f6d4 <RCC_PLLI2SConfig+0x2c>)
 800f6b6:	68fa      	ldr	r2, [r7, #12]
 800f6b8:	0191      	lsls	r1, r2, #6
 800f6ba:	68ba      	ldr	r2, [r7, #8]
 800f6bc:	0612      	lsls	r2, r2, #24
 800f6be:	4311      	orrs	r1, r2
 800f6c0:	687a      	ldr	r2, [r7, #4]
 800f6c2:	0712      	lsls	r2, r2, #28
 800f6c4:	430a      	orrs	r2, r1
 800f6c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800f6ca:	3714      	adds	r7, #20
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d2:	4770      	bx	lr
 800f6d4:	40023800 	.word	0x40023800

0800f6d8 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
 800f6d8:	b480      	push	{r7}
 800f6da:	b083      	sub	sp, #12
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	4603      	mov	r3, r0
 800f6e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 800f6e2:	4b04      	ldr	r3, [pc, #16]	; (800f6f4 <RCC_PLLI2SCmd+0x1c>)
 800f6e4:	79fa      	ldrb	r2, [r7, #7]
 800f6e6:	601a      	str	r2, [r3, #0]
}
 800f6e8:	370c      	adds	r7, #12
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f0:	4770      	bx	lr
 800f6f2:	bf00      	nop
 800f6f4:	42470068 	.word	0x42470068

0800f6f8 <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
 800f6f8:	b480      	push	{r7}
 800f6fa:	b085      	sub	sp, #20
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	60f8      	str	r0, [r7, #12]
 800f700:	60b9      	str	r1, [r7, #8]
 800f702:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));

  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
 800f704:	4b07      	ldr	r3, [pc, #28]	; (800f724 <RCC_PLLSAIConfig+0x2c>)
 800f706:	68fa      	ldr	r2, [r7, #12]
 800f708:	0191      	lsls	r1, r2, #6
 800f70a:	68ba      	ldr	r2, [r7, #8]
 800f70c:	0612      	lsls	r2, r2, #24
 800f70e:	4311      	orrs	r1, r2
 800f710:	687a      	ldr	r2, [r7, #4]
 800f712:	0712      	lsls	r2, r2, #28
 800f714:	430a      	orrs	r2, r1
 800f716:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800f71a:	3714      	adds	r7, #20
 800f71c:	46bd      	mov	sp, r7
 800f71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f722:	4770      	bx	lr
 800f724:	40023800 	.word	0x40023800

0800f728 <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
 800f728:	b480      	push	{r7}
 800f72a:	b083      	sub	sp, #12
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	4603      	mov	r3, r0
 800f730:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 800f732:	4b04      	ldr	r3, [pc, #16]	; (800f744 <RCC_PLLSAICmd+0x1c>)
 800f734:	79fa      	ldrb	r2, [r7, #7]
 800f736:	601a      	str	r2, [r3, #0]
}
 800f738:	370c      	adds	r7, #12
 800f73a:	46bd      	mov	sp, r7
 800f73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f740:	4770      	bx	lr
 800f742:	bf00      	nop
 800f744:	42470070 	.word	0x42470070

0800f748 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 800f748:	b480      	push	{r7}
 800f74a:	b083      	sub	sp, #12
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	4603      	mov	r3, r0
 800f750:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 800f752:	4b04      	ldr	r3, [pc, #16]	; (800f764 <RCC_ClockSecuritySystemCmd+0x1c>)
 800f754:	79fa      	ldrb	r2, [r7, #7]
 800f756:	601a      	str	r2, [r3, #0]
}
 800f758:	370c      	adds	r7, #12
 800f75a:	46bd      	mov	sp, r7
 800f75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f760:	4770      	bx	lr
 800f762:	bf00      	nop
 800f764:	4247004c 	.word	0x4247004c

0800f768 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
 800f768:	b480      	push	{r7}
 800f76a:	b085      	sub	sp, #20
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
 800f770:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f772:	2300      	movs	r3, #0
 800f774:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 800f776:	4b0a      	ldr	r3, [pc, #40]	; (800f7a0 <RCC_MCO1Config+0x38>)
 800f778:	689b      	ldr	r3, [r3, #8]
 800f77a:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 800f782:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 800f784:	687a      	ldr	r2, [r7, #4]
 800f786:	683b      	ldr	r3, [r7, #0]
 800f788:	4313      	orrs	r3, r2
 800f78a:	68fa      	ldr	r2, [r7, #12]
 800f78c:	4313      	orrs	r3, r2
 800f78e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 800f790:	4b03      	ldr	r3, [pc, #12]	; (800f7a0 <RCC_MCO1Config+0x38>)
 800f792:	68fa      	ldr	r2, [r7, #12]
 800f794:	609a      	str	r2, [r3, #8]
}
 800f796:	3714      	adds	r7, #20
 800f798:	46bd      	mov	sp, r7
 800f79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79e:	4770      	bx	lr
 800f7a0:	40023800 	.word	0x40023800

0800f7a4 <RCC_MCO2Config>:
  *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
  *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
 800f7a4:	b480      	push	{r7}
 800f7a6:	b085      	sub	sp, #20
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
 800f7ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 800f7b2:	4b0a      	ldr	r3, [pc, #40]	; (800f7dc <RCC_MCO2Config+0x38>)
 800f7b4:	689b      	ldr	r3, [r3, #8]
 800f7b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800f7be:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 800f7c0:	687a      	ldr	r2, [r7, #4]
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	4313      	orrs	r3, r2
 800f7c6:	68fa      	ldr	r2, [r7, #12]
 800f7c8:	4313      	orrs	r3, r2
 800f7ca:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 800f7cc:	4b03      	ldr	r3, [pc, #12]	; (800f7dc <RCC_MCO2Config+0x38>)
 800f7ce:	68fa      	ldr	r2, [r7, #12]
 800f7d0:	609a      	str	r2, [r3, #8]
}
 800f7d2:	3714      	adds	r7, #20
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7da:	4770      	bx	lr
 800f7dc:	40023800 	.word	0x40023800

0800f7e0 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 800f7e0:	b480      	push	{r7}
 800f7e2:	b085      	sub	sp, #20
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 800f7ec:	4b09      	ldr	r3, [pc, #36]	; (800f814 <RCC_SYSCLKConfig+0x34>)
 800f7ee:	689b      	ldr	r3, [r3, #8]
 800f7f0:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	f023 0303 	bic.w	r3, r3, #3
 800f7f8:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 800f7fa:	68fa      	ldr	r2, [r7, #12]
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	4313      	orrs	r3, r2
 800f800:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800f802:	4b04      	ldr	r3, [pc, #16]	; (800f814 <RCC_SYSCLKConfig+0x34>)
 800f804:	68fa      	ldr	r2, [r7, #12]
 800f806:	609a      	str	r2, [r3, #8]
}
 800f808:	3714      	adds	r7, #20
 800f80a:	46bd      	mov	sp, r7
 800f80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f810:	4770      	bx	lr
 800f812:	bf00      	nop
 800f814:	40023800 	.word	0x40023800

0800f818 <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 800f818:	b480      	push	{r7}
 800f81a:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 800f81c:	4b05      	ldr	r3, [pc, #20]	; (800f834 <RCC_GetSYSCLKSource+0x1c>)
 800f81e:	689b      	ldr	r3, [r3, #8]
 800f820:	b2db      	uxtb	r3, r3
 800f822:	f003 030c 	and.w	r3, r3, #12
 800f826:	b2db      	uxtb	r3, r3
}
 800f828:	4618      	mov	r0, r3
 800f82a:	46bd      	mov	sp, r7
 800f82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f830:	4770      	bx	lr
 800f832:	bf00      	nop
 800f834:	40023800 	.word	0x40023800

0800f838 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 800f838:	b480      	push	{r7}
 800f83a:	b085      	sub	sp, #20
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800f840:	2300      	movs	r3, #0
 800f842:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 800f844:	4b09      	ldr	r3, [pc, #36]	; (800f86c <RCC_HCLKConfig+0x34>)
 800f846:	689b      	ldr	r3, [r3, #8]
 800f848:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f850:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 800f852:	68fa      	ldr	r2, [r7, #12]
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	4313      	orrs	r3, r2
 800f858:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800f85a:	4b04      	ldr	r3, [pc, #16]	; (800f86c <RCC_HCLKConfig+0x34>)
 800f85c:	68fa      	ldr	r2, [r7, #12]
 800f85e:	609a      	str	r2, [r3, #8]
}
 800f860:	3714      	adds	r7, #20
 800f862:	46bd      	mov	sp, r7
 800f864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f868:	4770      	bx	lr
 800f86a:	bf00      	nop
 800f86c:	40023800 	.word	0x40023800

0800f870 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 800f870:	b480      	push	{r7}
 800f872:	b085      	sub	sp, #20
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800f878:	2300      	movs	r3, #0
 800f87a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 800f87c:	4b09      	ldr	r3, [pc, #36]	; (800f8a4 <RCC_PCLK1Config+0x34>)
 800f87e:	689b      	ldr	r3, [r3, #8]
 800f880:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800f888:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 800f88a:	68fa      	ldr	r2, [r7, #12]
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	4313      	orrs	r3, r2
 800f890:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800f892:	4b04      	ldr	r3, [pc, #16]	; (800f8a4 <RCC_PCLK1Config+0x34>)
 800f894:	68fa      	ldr	r2, [r7, #12]
 800f896:	609a      	str	r2, [r3, #8]
}
 800f898:	3714      	adds	r7, #20
 800f89a:	46bd      	mov	sp, r7
 800f89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a0:	4770      	bx	lr
 800f8a2:	bf00      	nop
 800f8a4:	40023800 	.word	0x40023800

0800f8a8 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 800f8a8:	b480      	push	{r7}
 800f8aa:	b085      	sub	sp, #20
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 800f8b4:	4b09      	ldr	r3, [pc, #36]	; (800f8dc <RCC_PCLK2Config+0x34>)
 800f8b6:	689b      	ldr	r3, [r3, #8]
 800f8b8:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800f8c0:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	00db      	lsls	r3, r3, #3
 800f8c6:	68fa      	ldr	r2, [r7, #12]
 800f8c8:	4313      	orrs	r3, r2
 800f8ca:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800f8cc:	4b03      	ldr	r3, [pc, #12]	; (800f8dc <RCC_PCLK2Config+0x34>)
 800f8ce:	68fa      	ldr	r2, [r7, #12]
 800f8d0:	609a      	str	r2, [r3, #8]
}
 800f8d2:	3714      	adds	r7, #20
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8da:	4770      	bx	lr
 800f8dc:	40023800 	.word	0x40023800

0800f8e0 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800f8e0:	b480      	push	{r7}
 800f8e2:	b089      	sub	sp, #36	; 0x24
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	61bb      	str	r3, [r7, #24]
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	617b      	str	r3, [r7, #20]
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	61fb      	str	r3, [r7, #28]
 800f8f4:	2302      	movs	r3, #2
 800f8f6:	613b      	str	r3, [r7, #16]
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	60fb      	str	r3, [r7, #12]
 800f8fc:	2302      	movs	r3, #2
 800f8fe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800f900:	4b48      	ldr	r3, [pc, #288]	; (800fa24 <RCC_GetClocksFreq+0x144>)
 800f902:	689b      	ldr	r3, [r3, #8]
 800f904:	f003 030c 	and.w	r3, r3, #12
 800f908:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 800f90a:	69bb      	ldr	r3, [r7, #24]
 800f90c:	2b04      	cmp	r3, #4
 800f90e:	d007      	beq.n	800f920 <RCC_GetClocksFreq+0x40>
 800f910:	2b08      	cmp	r3, #8
 800f912:	d009      	beq.n	800f928 <RCC_GetClocksFreq+0x48>
 800f914:	2b00      	cmp	r3, #0
 800f916:	d13f      	bne.n	800f998 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	4a43      	ldr	r2, [pc, #268]	; (800fa28 <RCC_GetClocksFreq+0x148>)
 800f91c:	601a      	str	r2, [r3, #0]
      break;
 800f91e:	e03f      	b.n	800f9a0 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	4a42      	ldr	r2, [pc, #264]	; (800fa2c <RCC_GetClocksFreq+0x14c>)
 800f924:	601a      	str	r2, [r3, #0]
      break;
 800f926:	e03b      	b.n	800f9a0 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800f928:	4b3e      	ldr	r3, [pc, #248]	; (800fa24 <RCC_GetClocksFreq+0x144>)
 800f92a:	685b      	ldr	r3, [r3, #4]
 800f92c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f930:	0d9b      	lsrs	r3, r3, #22
 800f932:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f934:	4b3b      	ldr	r3, [pc, #236]	; (800fa24 <RCC_GetClocksFreq+0x144>)
 800f936:	685b      	ldr	r3, [r3, #4]
 800f938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f93c:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	2b00      	cmp	r3, #0
 800f942:	d00d      	beq.n	800f960 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800f944:	4a39      	ldr	r2, [pc, #228]	; (800fa2c <RCC_GetClocksFreq+0x14c>)
 800f946:	68bb      	ldr	r3, [r7, #8]
 800f948:	fbb2 f2f3 	udiv	r2, r2, r3
 800f94c:	4b35      	ldr	r3, [pc, #212]	; (800fa24 <RCC_GetClocksFreq+0x144>)
 800f94e:	6859      	ldr	r1, [r3, #4]
 800f950:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800f954:	400b      	ands	r3, r1
 800f956:	099b      	lsrs	r3, r3, #6
 800f958:	fb03 f302 	mul.w	r3, r3, r2
 800f95c:	61fb      	str	r3, [r7, #28]
 800f95e:	e00c      	b.n	800f97a <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800f960:	4a31      	ldr	r2, [pc, #196]	; (800fa28 <RCC_GetClocksFreq+0x148>)
 800f962:	68bb      	ldr	r3, [r7, #8]
 800f964:	fbb2 f2f3 	udiv	r2, r2, r3
 800f968:	4b2e      	ldr	r3, [pc, #184]	; (800fa24 <RCC_GetClocksFreq+0x144>)
 800f96a:	6859      	ldr	r1, [r3, #4]
 800f96c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800f970:	400b      	ands	r3, r1
 800f972:	099b      	lsrs	r3, r3, #6
 800f974:	fb03 f302 	mul.w	r3, r3, r2
 800f978:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800f97a:	4b2a      	ldr	r3, [pc, #168]	; (800fa24 <RCC_GetClocksFreq+0x144>)
 800f97c:	685b      	ldr	r3, [r3, #4]
 800f97e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f982:	0c1b      	lsrs	r3, r3, #16
 800f984:	3301      	adds	r3, #1
 800f986:	005b      	lsls	r3, r3, #1
 800f988:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800f98a:	69fa      	ldr	r2, [r7, #28]
 800f98c:	693b      	ldr	r3, [r7, #16]
 800f98e:	fbb2 f2f3 	udiv	r2, r2, r3
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	601a      	str	r2, [r3, #0]
      break;
 800f996:	e003      	b.n	800f9a0 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	4a23      	ldr	r2, [pc, #140]	; (800fa28 <RCC_GetClocksFreq+0x148>)
 800f99c:	601a      	str	r2, [r3, #0]
      break;
 800f99e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800f9a0:	4b20      	ldr	r3, [pc, #128]	; (800fa24 <RCC_GetClocksFreq+0x144>)
 800f9a2:	689b      	ldr	r3, [r3, #8]
 800f9a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f9a8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800f9aa:	69bb      	ldr	r3, [r7, #24]
 800f9ac:	091b      	lsrs	r3, r3, #4
 800f9ae:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800f9b0:	4a1f      	ldr	r2, [pc, #124]	; (800fa30 <RCC_GetClocksFreq+0x150>)
 800f9b2:	69bb      	ldr	r3, [r7, #24]
 800f9b4:	4413      	add	r3, r2
 800f9b6:	781b      	ldrb	r3, [r3, #0]
 800f9b8:	b2db      	uxtb	r3, r3
 800f9ba:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	681a      	ldr	r2, [r3, #0]
 800f9c0:	697b      	ldr	r3, [r7, #20]
 800f9c2:	40da      	lsrs	r2, r3
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800f9c8:	4b16      	ldr	r3, [pc, #88]	; (800fa24 <RCC_GetClocksFreq+0x144>)
 800f9ca:	689b      	ldr	r3, [r3, #8]
 800f9cc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800f9d0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800f9d2:	69bb      	ldr	r3, [r7, #24]
 800f9d4:	0a9b      	lsrs	r3, r3, #10
 800f9d6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800f9d8:	4a15      	ldr	r2, [pc, #84]	; (800fa30 <RCC_GetClocksFreq+0x150>)
 800f9da:	69bb      	ldr	r3, [r7, #24]
 800f9dc:	4413      	add	r3, r2
 800f9de:	781b      	ldrb	r3, [r3, #0]
 800f9e0:	b2db      	uxtb	r3, r3
 800f9e2:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	685a      	ldr	r2, [r3, #4]
 800f9e8:	697b      	ldr	r3, [r7, #20]
 800f9ea:	40da      	lsrs	r2, r3
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800f9f0:	4b0c      	ldr	r3, [pc, #48]	; (800fa24 <RCC_GetClocksFreq+0x144>)
 800f9f2:	689b      	ldr	r3, [r3, #8]
 800f9f4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f9f8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800f9fa:	69bb      	ldr	r3, [r7, #24]
 800f9fc:	0b5b      	lsrs	r3, r3, #13
 800f9fe:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800fa00:	4a0b      	ldr	r2, [pc, #44]	; (800fa30 <RCC_GetClocksFreq+0x150>)
 800fa02:	69bb      	ldr	r3, [r7, #24]
 800fa04:	4413      	add	r3, r2
 800fa06:	781b      	ldrb	r3, [r3, #0]
 800fa08:	b2db      	uxtb	r3, r3
 800fa0a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	685a      	ldr	r2, [r3, #4]
 800fa10:	697b      	ldr	r3, [r7, #20]
 800fa12:	40da      	lsrs	r2, r3
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	60da      	str	r2, [r3, #12]
}
 800fa18:	3724      	adds	r7, #36	; 0x24
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa20:	4770      	bx	lr
 800fa22:	bf00      	nop
 800fa24:	40023800 	.word	0x40023800
 800fa28:	00f42400 	.word	0x00f42400
 800fa2c:	007a1200 	.word	0x007a1200
 800fa30:	20000078 	.word	0x20000078

0800fa34 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 800fa34:	b480      	push	{r7}
 800fa36:	b085      	sub	sp, #20
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fa46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fa4a:	d111      	bne.n	800fa70 <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 800fa4c:	4b0f      	ldr	r3, [pc, #60]	; (800fa8c <RCC_RTCCLKConfig+0x58>)
 800fa4e:	689b      	ldr	r3, [r3, #8]
 800fa50:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800fa58:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800fa60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fa64:	68fa      	ldr	r2, [r7, #12]
 800fa66:	4313      	orrs	r3, r2
 800fa68:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
 800fa6a:	4b08      	ldr	r3, [pc, #32]	; (800fa8c <RCC_RTCCLKConfig+0x58>)
 800fa6c:	68fa      	ldr	r2, [r7, #12]
 800fa6e:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 800fa70:	4b06      	ldr	r3, [pc, #24]	; (800fa8c <RCC_RTCCLKConfig+0x58>)
 800fa72:	4a06      	ldr	r2, [pc, #24]	; (800fa8c <RCC_RTCCLKConfig+0x58>)
 800fa74:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800fa76:	687a      	ldr	r2, [r7, #4]
 800fa78:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800fa7c:	430a      	orrs	r2, r1
 800fa7e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800fa80:	3714      	adds	r7, #20
 800fa82:	46bd      	mov	sp, r7
 800fa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa88:	4770      	bx	lr
 800fa8a:	bf00      	nop
 800fa8c:	40023800 	.word	0x40023800

0800fa90 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 800fa90:	b480      	push	{r7}
 800fa92:	b083      	sub	sp, #12
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	4603      	mov	r3, r0
 800fa98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 800fa9a:	4b04      	ldr	r3, [pc, #16]	; (800faac <RCC_RTCCLKCmd+0x1c>)
 800fa9c:	79fa      	ldrb	r2, [r7, #7]
 800fa9e:	601a      	str	r2, [r3, #0]
}
 800faa0:	370c      	adds	r7, #12
 800faa2:	46bd      	mov	sp, r7
 800faa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa8:	4770      	bx	lr
 800faaa:	bf00      	nop
 800faac:	42470e3c 	.word	0x42470e3c

0800fab0 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 800fab0:	b480      	push	{r7}
 800fab2:	b083      	sub	sp, #12
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	4603      	mov	r3, r0
 800fab8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 800faba:	4b04      	ldr	r3, [pc, #16]	; (800facc <RCC_BackupResetCmd+0x1c>)
 800fabc:	79fa      	ldrb	r2, [r7, #7]
 800fabe:	601a      	str	r2, [r3, #0]
}
 800fac0:	370c      	adds	r7, #12
 800fac2:	46bd      	mov	sp, r7
 800fac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac8:	4770      	bx	lr
 800faca:	bf00      	nop
 800facc:	42470e40 	.word	0x42470e40

0800fad0 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
 800fad0:	b480      	push	{r7}
 800fad2:	b083      	sub	sp, #12
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 800fad8:	4b03      	ldr	r3, [pc, #12]	; (800fae8 <RCC_I2SCLKConfig+0x18>)
 800fada:	687a      	ldr	r2, [r7, #4]
 800fadc:	601a      	str	r2, [r3, #0]
}
 800fade:	370c      	adds	r7, #12
 800fae0:	46bd      	mov	sp, r7
 800fae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae6:	4770      	bx	lr
 800fae8:	4247015c 	.word	0x4247015c

0800faec <RCC_SAIPLLI2SClkDivConfig>:
  *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
  *              
  * @retval None
  */
void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
{
 800faec:	b480      	push	{r7}
 800faee:	b085      	sub	sp, #20
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800faf4:	2300      	movs	r3, #0
 800faf6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
 800faf8:	4b0a      	ldr	r3, [pc, #40]	; (800fb24 <RCC_SAIPLLI2SClkDivConfig+0x38>)
 800fafa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fafe:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	f023 031f 	bic.w	r3, r3, #31
 800fb06:	60fb      	str	r3, [r7, #12]

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	3b01      	subs	r3, #1
 800fb0c:	68fa      	ldr	r2, [r7, #12]
 800fb0e:	4313      	orrs	r3, r2
 800fb10:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 800fb12:	4b04      	ldr	r3, [pc, #16]	; (800fb24 <RCC_SAIPLLI2SClkDivConfig+0x38>)
 800fb14:	68fa      	ldr	r2, [r7, #12]
 800fb16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 800fb1a:	3714      	adds	r7, #20
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb22:	4770      	bx	lr
 800fb24:	40023800 	.word	0x40023800

0800fb28 <RCC_SAIPLLSAIClkDivConfig>:
  *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
  *              
  * @retval None
  */
void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
{
 800fb28:	b480      	push	{r7}
 800fb2a:	b085      	sub	sp, #20
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800fb30:	2300      	movs	r3, #0
 800fb32:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
 800fb34:	4b0b      	ldr	r3, [pc, #44]	; (800fb64 <RCC_SAIPLLSAIClkDivConfig+0x3c>)
 800fb36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb3a:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800fb42:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	3b01      	subs	r3, #1
 800fb48:	021b      	lsls	r3, r3, #8
 800fb4a:	68fa      	ldr	r2, [r7, #12]
 800fb4c:	4313      	orrs	r3, r2
 800fb4e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 800fb50:	4b04      	ldr	r3, [pc, #16]	; (800fb64 <RCC_SAIPLLSAIClkDivConfig+0x3c>)
 800fb52:	68fa      	ldr	r2, [r7, #12]
 800fb54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 800fb58:	3714      	adds	r7, #20
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb60:	4770      	bx	lr
 800fb62:	bf00      	nop
 800fb64:	40023800 	.word	0x40023800

0800fb68 <RCC_SAIBlockACLKConfig>:
  *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block A clock
  * @retval None
  */
void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
{
 800fb68:	b480      	push	{r7}
 800fb6a:	b085      	sub	sp, #20
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800fb70:	2300      	movs	r3, #0
 800fb72:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
 800fb74:	4b0a      	ldr	r3, [pc, #40]	; (800fba0 <RCC_SAIBlockACLKConfig+0x38>)
 800fb76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb7a:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800fb82:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
 800fb84:	68fa      	ldr	r2, [r7, #12]
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	4313      	orrs	r3, r2
 800fb8a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 800fb8c:	4b04      	ldr	r3, [pc, #16]	; (800fba0 <RCC_SAIBlockACLKConfig+0x38>)
 800fb8e:	68fa      	ldr	r2, [r7, #12]
 800fb90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 800fb94:	3714      	adds	r7, #20
 800fb96:	46bd      	mov	sp, r7
 800fb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9c:	4770      	bx	lr
 800fb9e:	bf00      	nop
 800fba0:	40023800 	.word	0x40023800

0800fba4 <RCC_SAIBlockBCLKConfig>:
  *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block B clock
  * @retval None
  */
void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
{
 800fba4:	b480      	push	{r7}
 800fba6:	b085      	sub	sp, #20
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800fbac:	2300      	movs	r3, #0
 800fbae:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
 800fbb0:	4b0a      	ldr	r3, [pc, #40]	; (800fbdc <RCC_SAIBlockBCLKConfig+0x38>)
 800fbb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fbb6:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800fbbe:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
 800fbc0:	68fa      	ldr	r2, [r7, #12]
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	4313      	orrs	r3, r2
 800fbc6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 800fbc8:	4b04      	ldr	r3, [pc, #16]	; (800fbdc <RCC_SAIBlockBCLKConfig+0x38>)
 800fbca:	68fa      	ldr	r2, [r7, #12]
 800fbcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 800fbd0:	3714      	adds	r7, #20
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd8:	4770      	bx	lr
 800fbda:	bf00      	nop
 800fbdc:	40023800 	.word	0x40023800

0800fbe0 <RCC_LTDCCLKDivConfig>:
  *          LTDC clock frequency = f(PLLSAI_R) / RCC_PLLSAIDivR  
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
 800fbe0:	b480      	push	{r7}
 800fbe2:	b085      	sub	sp, #20
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800fbe8:	2300      	movs	r3, #0
 800fbea:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
 800fbec:	4b0a      	ldr	r3, [pc, #40]	; (800fc18 <RCC_LTDCCLKDivConfig+0x38>)
 800fbee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fbf2:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800fbfa:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
 800fbfc:	68fa      	ldr	r2, [r7, #12]
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	4313      	orrs	r3, r2
 800fc02:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 800fc04:	4b04      	ldr	r3, [pc, #16]	; (800fc18 <RCC_LTDCCLKDivConfig+0x38>)
 800fc06:	68fa      	ldr	r2, [r7, #12]
 800fc08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 800fc0c:	3714      	adds	r7, #20
 800fc0e:	46bd      	mov	sp, r7
 800fc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc14:	4770      	bx	lr
 800fc16:	bf00      	nop
 800fc18:	40023800 	.word	0x40023800

0800fc1c <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
 800fc1c:	b480      	push	{r7}
 800fc1e:	b083      	sub	sp, #12
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
 800fc24:	4b03      	ldr	r3, [pc, #12]	; (800fc34 <RCC_TIMCLKPresConfig+0x18>)
 800fc26:	687a      	ldr	r2, [r7, #4]
 800fc28:	601a      	str	r2, [r3, #0]
  
}
 800fc2a:	370c      	adds	r7, #12
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc32:	4770      	bx	lr
 800fc34:	424711e0 	.word	0x424711e0

0800fc38 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800fc38:	b480      	push	{r7}
 800fc3a:	b083      	sub	sp, #12
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
 800fc40:	460b      	mov	r3, r1
 800fc42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800fc44:	78fb      	ldrb	r3, [r7, #3]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d006      	beq.n	800fc58 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800fc4a:	4b09      	ldr	r3, [pc, #36]	; (800fc70 <RCC_AHB1PeriphClockCmd+0x38>)
 800fc4c:	4a08      	ldr	r2, [pc, #32]	; (800fc70 <RCC_AHB1PeriphClockCmd+0x38>)
 800fc4e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800fc50:	687a      	ldr	r2, [r7, #4]
 800fc52:	430a      	orrs	r2, r1
 800fc54:	631a      	str	r2, [r3, #48]	; 0x30
 800fc56:	e006      	b.n	800fc66 <RCC_AHB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800fc58:	4b05      	ldr	r3, [pc, #20]	; (800fc70 <RCC_AHB1PeriphClockCmd+0x38>)
 800fc5a:	4a05      	ldr	r2, [pc, #20]	; (800fc70 <RCC_AHB1PeriphClockCmd+0x38>)
 800fc5c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800fc5e:	687a      	ldr	r2, [r7, #4]
 800fc60:	43d2      	mvns	r2, r2
 800fc62:	400a      	ands	r2, r1
 800fc64:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 800fc66:	370c      	adds	r7, #12
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6e:	4770      	bx	lr
 800fc70:	40023800 	.word	0x40023800

0800fc74 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 800fc74:	b480      	push	{r7}
 800fc76:	b083      	sub	sp, #12
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
 800fc7c:	460b      	mov	r3, r1
 800fc7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800fc80:	78fb      	ldrb	r3, [r7, #3]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d006      	beq.n	800fc94 <RCC_AHB2PeriphClockCmd+0x20>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 800fc86:	4b09      	ldr	r3, [pc, #36]	; (800fcac <RCC_AHB2PeriphClockCmd+0x38>)
 800fc88:	4a08      	ldr	r2, [pc, #32]	; (800fcac <RCC_AHB2PeriphClockCmd+0x38>)
 800fc8a:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800fc8c:	687a      	ldr	r2, [r7, #4]
 800fc8e:	430a      	orrs	r2, r1
 800fc90:	635a      	str	r2, [r3, #52]	; 0x34
 800fc92:	e006      	b.n	800fca2 <RCC_AHB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 800fc94:	4b05      	ldr	r3, [pc, #20]	; (800fcac <RCC_AHB2PeriphClockCmd+0x38>)
 800fc96:	4a05      	ldr	r2, [pc, #20]	; (800fcac <RCC_AHB2PeriphClockCmd+0x38>)
 800fc98:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800fc9a:	687a      	ldr	r2, [r7, #4]
 800fc9c:	43d2      	mvns	r2, r2
 800fc9e:	400a      	ands	r2, r1
 800fca0:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 800fca2:	370c      	adds	r7, #12
 800fca4:	46bd      	mov	sp, r7
 800fca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcaa:	4770      	bx	lr
 800fcac:	40023800 	.word	0x40023800

0800fcb0 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 800fcb0:	b480      	push	{r7}
 800fcb2:	b083      	sub	sp, #12
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
 800fcb8:	460b      	mov	r3, r1
 800fcba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800fcbc:	78fb      	ldrb	r3, [r7, #3]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d006      	beq.n	800fcd0 <RCC_AHB3PeriphClockCmd+0x20>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 800fcc2:	4b09      	ldr	r3, [pc, #36]	; (800fce8 <RCC_AHB3PeriphClockCmd+0x38>)
 800fcc4:	4a08      	ldr	r2, [pc, #32]	; (800fce8 <RCC_AHB3PeriphClockCmd+0x38>)
 800fcc6:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800fcc8:	687a      	ldr	r2, [r7, #4]
 800fcca:	430a      	orrs	r2, r1
 800fccc:	639a      	str	r2, [r3, #56]	; 0x38
 800fcce:	e006      	b.n	800fcde <RCC_AHB3PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 800fcd0:	4b05      	ldr	r3, [pc, #20]	; (800fce8 <RCC_AHB3PeriphClockCmd+0x38>)
 800fcd2:	4a05      	ldr	r2, [pc, #20]	; (800fce8 <RCC_AHB3PeriphClockCmd+0x38>)
 800fcd4:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800fcd6:	687a      	ldr	r2, [r7, #4]
 800fcd8:	43d2      	mvns	r2, r2
 800fcda:	400a      	ands	r2, r1
 800fcdc:	639a      	str	r2, [r3, #56]	; 0x38
  }
}
 800fcde:	370c      	adds	r7, #12
 800fce0:	46bd      	mov	sp, r7
 800fce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce6:	4770      	bx	lr
 800fce8:	40023800 	.word	0x40023800

0800fcec <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800fcec:	b480      	push	{r7}
 800fcee:	b083      	sub	sp, #12
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
 800fcf4:	460b      	mov	r3, r1
 800fcf6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800fcf8:	78fb      	ldrb	r3, [r7, #3]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d006      	beq.n	800fd0c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800fcfe:	4b09      	ldr	r3, [pc, #36]	; (800fd24 <RCC_APB1PeriphClockCmd+0x38>)
 800fd00:	4a08      	ldr	r2, [pc, #32]	; (800fd24 <RCC_APB1PeriphClockCmd+0x38>)
 800fd02:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800fd04:	687a      	ldr	r2, [r7, #4]
 800fd06:	430a      	orrs	r2, r1
 800fd08:	641a      	str	r2, [r3, #64]	; 0x40
 800fd0a:	e006      	b.n	800fd1a <RCC_APB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800fd0c:	4b05      	ldr	r3, [pc, #20]	; (800fd24 <RCC_APB1PeriphClockCmd+0x38>)
 800fd0e:	4a05      	ldr	r2, [pc, #20]	; (800fd24 <RCC_APB1PeriphClockCmd+0x38>)
 800fd10:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800fd12:	687a      	ldr	r2, [r7, #4]
 800fd14:	43d2      	mvns	r2, r2
 800fd16:	400a      	ands	r2, r1
 800fd18:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 800fd1a:	370c      	adds	r7, #12
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd22:	4770      	bx	lr
 800fd24:	40023800 	.word	0x40023800

0800fd28 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800fd28:	b480      	push	{r7}
 800fd2a:	b083      	sub	sp, #12
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
 800fd30:	460b      	mov	r3, r1
 800fd32:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800fd34:	78fb      	ldrb	r3, [r7, #3]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d006      	beq.n	800fd48 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800fd3a:	4b09      	ldr	r3, [pc, #36]	; (800fd60 <RCC_APB2PeriphClockCmd+0x38>)
 800fd3c:	4a08      	ldr	r2, [pc, #32]	; (800fd60 <RCC_APB2PeriphClockCmd+0x38>)
 800fd3e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800fd40:	687a      	ldr	r2, [r7, #4]
 800fd42:	430a      	orrs	r2, r1
 800fd44:	645a      	str	r2, [r3, #68]	; 0x44
 800fd46:	e006      	b.n	800fd56 <RCC_APB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800fd48:	4b05      	ldr	r3, [pc, #20]	; (800fd60 <RCC_APB2PeriphClockCmd+0x38>)
 800fd4a:	4a05      	ldr	r2, [pc, #20]	; (800fd60 <RCC_APB2PeriphClockCmd+0x38>)
 800fd4c:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800fd4e:	687a      	ldr	r2, [r7, #4]
 800fd50:	43d2      	mvns	r2, r2
 800fd52:	400a      	ands	r2, r1
 800fd54:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 800fd56:	370c      	adds	r7, #12
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5e:	4770      	bx	lr
 800fd60:	40023800 	.word	0x40023800

0800fd64 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800fd64:	b480      	push	{r7}
 800fd66:	b083      	sub	sp, #12
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
 800fd6c:	460b      	mov	r3, r1
 800fd6e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800fd70:	78fb      	ldrb	r3, [r7, #3]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d006      	beq.n	800fd84 <RCC_AHB1PeriphResetCmd+0x20>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 800fd76:	4b09      	ldr	r3, [pc, #36]	; (800fd9c <RCC_AHB1PeriphResetCmd+0x38>)
 800fd78:	4a08      	ldr	r2, [pc, #32]	; (800fd9c <RCC_AHB1PeriphResetCmd+0x38>)
 800fd7a:	6911      	ldr	r1, [r2, #16]
 800fd7c:	687a      	ldr	r2, [r7, #4]
 800fd7e:	430a      	orrs	r2, r1
 800fd80:	611a      	str	r2, [r3, #16]
 800fd82:	e006      	b.n	800fd92 <RCC_AHB1PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 800fd84:	4b05      	ldr	r3, [pc, #20]	; (800fd9c <RCC_AHB1PeriphResetCmd+0x38>)
 800fd86:	4a05      	ldr	r2, [pc, #20]	; (800fd9c <RCC_AHB1PeriphResetCmd+0x38>)
 800fd88:	6911      	ldr	r1, [r2, #16]
 800fd8a:	687a      	ldr	r2, [r7, #4]
 800fd8c:	43d2      	mvns	r2, r2
 800fd8e:	400a      	ands	r2, r1
 800fd90:	611a      	str	r2, [r3, #16]
  }
}
 800fd92:	370c      	adds	r7, #12
 800fd94:	46bd      	mov	sp, r7
 800fd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9a:	4770      	bx	lr
 800fd9c:	40023800 	.word	0x40023800

0800fda0 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 800fda0:	b480      	push	{r7}
 800fda2:	b083      	sub	sp, #12
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
 800fda8:	460b      	mov	r3, r1
 800fdaa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800fdac:	78fb      	ldrb	r3, [r7, #3]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d006      	beq.n	800fdc0 <RCC_AHB2PeriphResetCmd+0x20>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 800fdb2:	4b09      	ldr	r3, [pc, #36]	; (800fdd8 <RCC_AHB2PeriphResetCmd+0x38>)
 800fdb4:	4a08      	ldr	r2, [pc, #32]	; (800fdd8 <RCC_AHB2PeriphResetCmd+0x38>)
 800fdb6:	6951      	ldr	r1, [r2, #20]
 800fdb8:	687a      	ldr	r2, [r7, #4]
 800fdba:	430a      	orrs	r2, r1
 800fdbc:	615a      	str	r2, [r3, #20]
 800fdbe:	e006      	b.n	800fdce <RCC_AHB2PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 800fdc0:	4b05      	ldr	r3, [pc, #20]	; (800fdd8 <RCC_AHB2PeriphResetCmd+0x38>)
 800fdc2:	4a05      	ldr	r2, [pc, #20]	; (800fdd8 <RCC_AHB2PeriphResetCmd+0x38>)
 800fdc4:	6951      	ldr	r1, [r2, #20]
 800fdc6:	687a      	ldr	r2, [r7, #4]
 800fdc8:	43d2      	mvns	r2, r2
 800fdca:	400a      	ands	r2, r1
 800fdcc:	615a      	str	r2, [r3, #20]
  }
}
 800fdce:	370c      	adds	r7, #12
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd6:	4770      	bx	lr
 800fdd8:	40023800 	.word	0x40023800

0800fddc <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 800fddc:	b480      	push	{r7}
 800fdde:	b083      	sub	sp, #12
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
 800fde4:	460b      	mov	r3, r1
 800fde6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800fde8:	78fb      	ldrb	r3, [r7, #3]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d006      	beq.n	800fdfc <RCC_AHB3PeriphResetCmd+0x20>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 800fdee:	4b09      	ldr	r3, [pc, #36]	; (800fe14 <RCC_AHB3PeriphResetCmd+0x38>)
 800fdf0:	4a08      	ldr	r2, [pc, #32]	; (800fe14 <RCC_AHB3PeriphResetCmd+0x38>)
 800fdf2:	6991      	ldr	r1, [r2, #24]
 800fdf4:	687a      	ldr	r2, [r7, #4]
 800fdf6:	430a      	orrs	r2, r1
 800fdf8:	619a      	str	r2, [r3, #24]
 800fdfa:	e006      	b.n	800fe0a <RCC_AHB3PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 800fdfc:	4b05      	ldr	r3, [pc, #20]	; (800fe14 <RCC_AHB3PeriphResetCmd+0x38>)
 800fdfe:	4a05      	ldr	r2, [pc, #20]	; (800fe14 <RCC_AHB3PeriphResetCmd+0x38>)
 800fe00:	6991      	ldr	r1, [r2, #24]
 800fe02:	687a      	ldr	r2, [r7, #4]
 800fe04:	43d2      	mvns	r2, r2
 800fe06:	400a      	ands	r2, r1
 800fe08:	619a      	str	r2, [r3, #24]
  }
}
 800fe0a:	370c      	adds	r7, #12
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe12:	4770      	bx	lr
 800fe14:	40023800 	.word	0x40023800

0800fe18 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800fe18:	b480      	push	{r7}
 800fe1a:	b083      	sub	sp, #12
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
 800fe20:	460b      	mov	r3, r1
 800fe22:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800fe24:	78fb      	ldrb	r3, [r7, #3]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d006      	beq.n	800fe38 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800fe2a:	4b09      	ldr	r3, [pc, #36]	; (800fe50 <RCC_APB1PeriphResetCmd+0x38>)
 800fe2c:	4a08      	ldr	r2, [pc, #32]	; (800fe50 <RCC_APB1PeriphResetCmd+0x38>)
 800fe2e:	6a11      	ldr	r1, [r2, #32]
 800fe30:	687a      	ldr	r2, [r7, #4]
 800fe32:	430a      	orrs	r2, r1
 800fe34:	621a      	str	r2, [r3, #32]
 800fe36:	e006      	b.n	800fe46 <RCC_APB1PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 800fe38:	4b05      	ldr	r3, [pc, #20]	; (800fe50 <RCC_APB1PeriphResetCmd+0x38>)
 800fe3a:	4a05      	ldr	r2, [pc, #20]	; (800fe50 <RCC_APB1PeriphResetCmd+0x38>)
 800fe3c:	6a11      	ldr	r1, [r2, #32]
 800fe3e:	687a      	ldr	r2, [r7, #4]
 800fe40:	43d2      	mvns	r2, r2
 800fe42:	400a      	ands	r2, r1
 800fe44:	621a      	str	r2, [r3, #32]
  }
}
 800fe46:	370c      	adds	r7, #12
 800fe48:	46bd      	mov	sp, r7
 800fe4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4e:	4770      	bx	lr
 800fe50:	40023800 	.word	0x40023800

0800fe54 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800fe54:	b480      	push	{r7}
 800fe56:	b083      	sub	sp, #12
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
 800fe5c:	460b      	mov	r3, r1
 800fe5e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800fe60:	78fb      	ldrb	r3, [r7, #3]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d006      	beq.n	800fe74 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800fe66:	4b09      	ldr	r3, [pc, #36]	; (800fe8c <RCC_APB2PeriphResetCmd+0x38>)
 800fe68:	4a08      	ldr	r2, [pc, #32]	; (800fe8c <RCC_APB2PeriphResetCmd+0x38>)
 800fe6a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800fe6c:	687a      	ldr	r2, [r7, #4]
 800fe6e:	430a      	orrs	r2, r1
 800fe70:	625a      	str	r2, [r3, #36]	; 0x24
 800fe72:	e006      	b.n	800fe82 <RCC_APB2PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800fe74:	4b05      	ldr	r3, [pc, #20]	; (800fe8c <RCC_APB2PeriphResetCmd+0x38>)
 800fe76:	4a05      	ldr	r2, [pc, #20]	; (800fe8c <RCC_APB2PeriphResetCmd+0x38>)
 800fe78:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800fe7a:	687a      	ldr	r2, [r7, #4]
 800fe7c:	43d2      	mvns	r2, r2
 800fe7e:	400a      	ands	r2, r1
 800fe80:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800fe82:	370c      	adds	r7, #12
 800fe84:	46bd      	mov	sp, r7
 800fe86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8a:	4770      	bx	lr
 800fe8c:	40023800 	.word	0x40023800

0800fe90 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800fe90:	b480      	push	{r7}
 800fe92:	b083      	sub	sp, #12
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
 800fe98:	460b      	mov	r3, r1
 800fe9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800fe9c:	78fb      	ldrb	r3, [r7, #3]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d006      	beq.n	800feb0 <RCC_AHB1PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 800fea2:	4b09      	ldr	r3, [pc, #36]	; (800fec8 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 800fea4:	4a08      	ldr	r2, [pc, #32]	; (800fec8 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 800fea6:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800fea8:	687a      	ldr	r2, [r7, #4]
 800feaa:	430a      	orrs	r2, r1
 800feac:	651a      	str	r2, [r3, #80]	; 0x50
 800feae:	e006      	b.n	800febe <RCC_AHB1PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 800feb0:	4b05      	ldr	r3, [pc, #20]	; (800fec8 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 800feb2:	4a05      	ldr	r2, [pc, #20]	; (800fec8 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 800feb4:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800feb6:	687a      	ldr	r2, [r7, #4]
 800feb8:	43d2      	mvns	r2, r2
 800feba:	400a      	ands	r2, r1
 800febc:	651a      	str	r2, [r3, #80]	; 0x50
  }
}
 800febe:	370c      	adds	r7, #12
 800fec0:	46bd      	mov	sp, r7
 800fec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec6:	4770      	bx	lr
 800fec8:	40023800 	.word	0x40023800

0800fecc <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 800fecc:	b480      	push	{r7}
 800fece:	b083      	sub	sp, #12
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
 800fed4:	460b      	mov	r3, r1
 800fed6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800fed8:	78fb      	ldrb	r3, [r7, #3]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d006      	beq.n	800feec <RCC_AHB2PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 800fede:	4b09      	ldr	r3, [pc, #36]	; (800ff04 <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 800fee0:	4a08      	ldr	r2, [pc, #32]	; (800ff04 <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 800fee2:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800fee4:	687a      	ldr	r2, [r7, #4]
 800fee6:	430a      	orrs	r2, r1
 800fee8:	655a      	str	r2, [r3, #84]	; 0x54
 800feea:	e006      	b.n	800fefa <RCC_AHB2PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 800feec:	4b05      	ldr	r3, [pc, #20]	; (800ff04 <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 800feee:	4a05      	ldr	r2, [pc, #20]	; (800ff04 <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 800fef0:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800fef2:	687a      	ldr	r2, [r7, #4]
 800fef4:	43d2      	mvns	r2, r2
 800fef6:	400a      	ands	r2, r1
 800fef8:	655a      	str	r2, [r3, #84]	; 0x54
  }
}
 800fefa:	370c      	adds	r7, #12
 800fefc:	46bd      	mov	sp, r7
 800fefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff02:	4770      	bx	lr
 800ff04:	40023800 	.word	0x40023800

0800ff08 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 800ff08:	b480      	push	{r7}
 800ff0a:	b083      	sub	sp, #12
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
 800ff10:	460b      	mov	r3, r1
 800ff12:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800ff14:	78fb      	ldrb	r3, [r7, #3]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d006      	beq.n	800ff28 <RCC_AHB3PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 800ff1a:	4b09      	ldr	r3, [pc, #36]	; (800ff40 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 800ff1c:	4a08      	ldr	r2, [pc, #32]	; (800ff40 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 800ff1e:	6d91      	ldr	r1, [r2, #88]	; 0x58
 800ff20:	687a      	ldr	r2, [r7, #4]
 800ff22:	430a      	orrs	r2, r1
 800ff24:	659a      	str	r2, [r3, #88]	; 0x58
 800ff26:	e006      	b.n	800ff36 <RCC_AHB3PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 800ff28:	4b05      	ldr	r3, [pc, #20]	; (800ff40 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 800ff2a:	4a05      	ldr	r2, [pc, #20]	; (800ff40 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 800ff2c:	6d91      	ldr	r1, [r2, #88]	; 0x58
 800ff2e:	687a      	ldr	r2, [r7, #4]
 800ff30:	43d2      	mvns	r2, r2
 800ff32:	400a      	ands	r2, r1
 800ff34:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 800ff36:	370c      	adds	r7, #12
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3e:	4770      	bx	lr
 800ff40:	40023800 	.word	0x40023800

0800ff44 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800ff44:	b480      	push	{r7}
 800ff46:	b083      	sub	sp, #12
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
 800ff4c:	460b      	mov	r3, r1
 800ff4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800ff50:	78fb      	ldrb	r3, [r7, #3]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d006      	beq.n	800ff64 <RCC_APB1PeriphClockLPModeCmd+0x20>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 800ff56:	4b09      	ldr	r3, [pc, #36]	; (800ff7c <RCC_APB1PeriphClockLPModeCmd+0x38>)
 800ff58:	4a08      	ldr	r2, [pc, #32]	; (800ff7c <RCC_APB1PeriphClockLPModeCmd+0x38>)
 800ff5a:	6e11      	ldr	r1, [r2, #96]	; 0x60
 800ff5c:	687a      	ldr	r2, [r7, #4]
 800ff5e:	430a      	orrs	r2, r1
 800ff60:	661a      	str	r2, [r3, #96]	; 0x60
 800ff62:	e006      	b.n	800ff72 <RCC_APB1PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 800ff64:	4b05      	ldr	r3, [pc, #20]	; (800ff7c <RCC_APB1PeriphClockLPModeCmd+0x38>)
 800ff66:	4a05      	ldr	r2, [pc, #20]	; (800ff7c <RCC_APB1PeriphClockLPModeCmd+0x38>)
 800ff68:	6e11      	ldr	r1, [r2, #96]	; 0x60
 800ff6a:	687a      	ldr	r2, [r7, #4]
 800ff6c:	43d2      	mvns	r2, r2
 800ff6e:	400a      	ands	r2, r1
 800ff70:	661a      	str	r2, [r3, #96]	; 0x60
  }
}
 800ff72:	370c      	adds	r7, #12
 800ff74:	46bd      	mov	sp, r7
 800ff76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7a:	4770      	bx	lr
 800ff7c:	40023800 	.word	0x40023800

0800ff80 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800ff80:	b480      	push	{r7}
 800ff82:	b083      	sub	sp, #12
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
 800ff88:	460b      	mov	r3, r1
 800ff8a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800ff8c:	78fb      	ldrb	r3, [r7, #3]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d006      	beq.n	800ffa0 <RCC_APB2PeriphClockLPModeCmd+0x20>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 800ff92:	4b09      	ldr	r3, [pc, #36]	; (800ffb8 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 800ff94:	4a08      	ldr	r2, [pc, #32]	; (800ffb8 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 800ff96:	6e51      	ldr	r1, [r2, #100]	; 0x64
 800ff98:	687a      	ldr	r2, [r7, #4]
 800ff9a:	430a      	orrs	r2, r1
 800ff9c:	665a      	str	r2, [r3, #100]	; 0x64
 800ff9e:	e006      	b.n	800ffae <RCC_APB2PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 800ffa0:	4b05      	ldr	r3, [pc, #20]	; (800ffb8 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 800ffa2:	4a05      	ldr	r2, [pc, #20]	; (800ffb8 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 800ffa4:	6e51      	ldr	r1, [r2, #100]	; 0x64
 800ffa6:	687a      	ldr	r2, [r7, #4]
 800ffa8:	43d2      	mvns	r2, r2
 800ffaa:	400a      	ands	r2, r1
 800ffac:	665a      	str	r2, [r3, #100]	; 0x64
  }
}
 800ffae:	370c      	adds	r7, #12
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb6:	4770      	bx	lr
 800ffb8:	40023800 	.word	0x40023800

0800ffbc <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 800ffbc:	b480      	push	{r7}
 800ffbe:	b083      	sub	sp, #12
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	4602      	mov	r2, r0
 800ffc4:	460b      	mov	r3, r1
 800ffc6:	71fa      	strb	r2, [r7, #7]
 800ffc8:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800ffca:	79bb      	ldrb	r3, [r7, #6]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d008      	beq.n	800ffe2 <RCC_ITConfig+0x26>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 800ffd0:	4b0b      	ldr	r3, [pc, #44]	; (8010000 <RCC_ITConfig+0x44>)
 800ffd2:	4a0b      	ldr	r2, [pc, #44]	; (8010000 <RCC_ITConfig+0x44>)
 800ffd4:	7812      	ldrb	r2, [r2, #0]
 800ffd6:	b2d1      	uxtb	r1, r2
 800ffd8:	79fa      	ldrb	r2, [r7, #7]
 800ffda:	430a      	orrs	r2, r1
 800ffdc:	b2d2      	uxtb	r2, r2
 800ffde:	701a      	strb	r2, [r3, #0]
 800ffe0:	e009      	b.n	800fff6 <RCC_ITConfig+0x3a>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 800ffe2:	4b07      	ldr	r3, [pc, #28]	; (8010000 <RCC_ITConfig+0x44>)
 800ffe4:	4a06      	ldr	r2, [pc, #24]	; (8010000 <RCC_ITConfig+0x44>)
 800ffe6:	7812      	ldrb	r2, [r2, #0]
 800ffe8:	b2d1      	uxtb	r1, r2
 800ffea:	79fa      	ldrb	r2, [r7, #7]
 800ffec:	43d2      	mvns	r2, r2
 800ffee:	b2d2      	uxtb	r2, r2
 800fff0:	400a      	ands	r2, r1
 800fff2:	b2d2      	uxtb	r2, r2
 800fff4:	701a      	strb	r2, [r3, #0]
  }
}
 800fff6:	370c      	adds	r7, #12
 800fff8:	46bd      	mov	sp, r7
 800fffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffe:	4770      	bx	lr
 8010000:	4002380d 	.word	0x4002380d

08010004 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8010004:	b480      	push	{r7}
 8010006:	b087      	sub	sp, #28
 8010008:	af00      	add	r7, sp, #0
 801000a:	4603      	mov	r3, r0
 801000c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 801000e:	2300      	movs	r3, #0
 8010010:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8010012:	2300      	movs	r3, #0
 8010014:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8010016:	2300      	movs	r3, #0
 8010018:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 801001a:	79fb      	ldrb	r3, [r7, #7]
 801001c:	095b      	lsrs	r3, r3, #5
 801001e:	b2db      	uxtb	r3, r3
 8010020:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	2b01      	cmp	r3, #1
 8010026:	d103      	bne.n	8010030 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8010028:	4b12      	ldr	r3, [pc, #72]	; (8010074 <RCC_GetFlagStatus+0x70>)
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	617b      	str	r3, [r7, #20]
 801002e:	e009      	b.n	8010044 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	2b02      	cmp	r3, #2
 8010034:	d103      	bne.n	801003e <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 8010036:	4b0f      	ldr	r3, [pc, #60]	; (8010074 <RCC_GetFlagStatus+0x70>)
 8010038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801003a:	617b      	str	r3, [r7, #20]
 801003c:	e002      	b.n	8010044 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 801003e:	4b0d      	ldr	r3, [pc, #52]	; (8010074 <RCC_GetFlagStatus+0x70>)
 8010040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010042:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8010044:	79fb      	ldrb	r3, [r7, #7]
 8010046:	f003 031f 	and.w	r3, r3, #31
 801004a:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	697a      	ldr	r2, [r7, #20]
 8010050:	fa22 f303 	lsr.w	r3, r2, r3
 8010054:	f003 0301 	and.w	r3, r3, #1
 8010058:	2b00      	cmp	r3, #0
 801005a:	d002      	beq.n	8010062 <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 801005c:	2301      	movs	r3, #1
 801005e:	74fb      	strb	r3, [r7, #19]
 8010060:	e001      	b.n	8010066 <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 8010062:	2300      	movs	r3, #0
 8010064:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8010066:	7cfb      	ldrb	r3, [r7, #19]
}
 8010068:	4618      	mov	r0, r3
 801006a:	371c      	adds	r7, #28
 801006c:	46bd      	mov	sp, r7
 801006e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010072:	4770      	bx	lr
 8010074:	40023800 	.word	0x40023800

08010078 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 8010078:	b480      	push	{r7}
 801007a:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 801007c:	4b04      	ldr	r3, [pc, #16]	; (8010090 <RCC_ClearFlag+0x18>)
 801007e:	4a04      	ldr	r2, [pc, #16]	; (8010090 <RCC_ClearFlag+0x18>)
 8010080:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8010082:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8010086:	675a      	str	r2, [r3, #116]	; 0x74
}
 8010088:	46bd      	mov	sp, r7
 801008a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801008e:	4770      	bx	lr
 8010090:	40023800 	.word	0x40023800

08010094 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx devices)    
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 8010094:	b480      	push	{r7}
 8010096:	b085      	sub	sp, #20
 8010098:	af00      	add	r7, sp, #0
 801009a:	4603      	mov	r3, r0
 801009c:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 801009e:	2300      	movs	r3, #0
 80100a0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 80100a2:	4b09      	ldr	r3, [pc, #36]	; (80100c8 <RCC_GetITStatus+0x34>)
 80100a4:	68da      	ldr	r2, [r3, #12]
 80100a6:	79fb      	ldrb	r3, [r7, #7]
 80100a8:	4013      	ands	r3, r2
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d002      	beq.n	80100b4 <RCC_GetITStatus+0x20>
  {
    bitstatus = SET;
 80100ae:	2301      	movs	r3, #1
 80100b0:	73fb      	strb	r3, [r7, #15]
 80100b2:	e001      	b.n	80100b8 <RCC_GetITStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 80100b4:	2300      	movs	r3, #0
 80100b6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 80100b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80100ba:	4618      	mov	r0, r3
 80100bc:	3714      	adds	r7, #20
 80100be:	46bd      	mov	sp, r7
 80100c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c4:	4770      	bx	lr
 80100c6:	bf00      	nop
 80100c8:	40023800 	.word	0x40023800

080100cc <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx devices)   
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 80100cc:	b480      	push	{r7}
 80100ce:	b083      	sub	sp, #12
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	4603      	mov	r3, r0
 80100d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 80100d6:	4b04      	ldr	r3, [pc, #16]	; (80100e8 <RCC_ClearITPendingBit+0x1c>)
 80100d8:	79fa      	ldrb	r2, [r7, #7]
 80100da:	701a      	strb	r2, [r3, #0]
}
 80100dc:	370c      	adds	r7, #12
 80100de:	46bd      	mov	sp, r7
 80100e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e4:	4770      	bx	lr
 80100e6:	bf00      	nop
 80100e8:	4002380e 	.word	0x4002380e

080100ec <RNG_DeInit>:
  * @brief  De-initializes the RNG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void RNG_DeInit(void)
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	af00      	add	r7, sp, #0
  /* Enable RNG reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
 80100f0:	2040      	movs	r0, #64	; 0x40
 80100f2:	2101      	movs	r1, #1
 80100f4:	f7ff fe54 	bl	800fda0 <RCC_AHB2PeriphResetCmd>

  /* Release RNG from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
 80100f8:	2040      	movs	r0, #64	; 0x40
 80100fa:	2100      	movs	r1, #0
 80100fc:	f7ff fe50 	bl	800fda0 <RCC_AHB2PeriphResetCmd>
}
 8010100:	bd80      	pop	{r7, pc}
 8010102:	bf00      	nop

08010104 <RNG_Cmd>:
  * @param  NewState: new state of the RNG peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_Cmd(FunctionalState NewState)
{
 8010104:	b480      	push	{r7}
 8010106:	b083      	sub	sp, #12
 8010108:	af00      	add	r7, sp, #0
 801010a:	4603      	mov	r3, r0
 801010c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801010e:	79fb      	ldrb	r3, [r7, #7]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d006      	beq.n	8010122 <RNG_Cmd+0x1e>
  {
    /* Enable the RNG */
    RNG->CR |= RNG_CR_RNGEN;
 8010114:	4b08      	ldr	r3, [pc, #32]	; (8010138 <RNG_Cmd+0x34>)
 8010116:	4a08      	ldr	r2, [pc, #32]	; (8010138 <RNG_Cmd+0x34>)
 8010118:	6812      	ldr	r2, [r2, #0]
 801011a:	f042 0204 	orr.w	r2, r2, #4
 801011e:	601a      	str	r2, [r3, #0]
 8010120:	e005      	b.n	801012e <RNG_Cmd+0x2a>
  }
  else
  {
    /* Disable the RNG */
    RNG->CR &= ~RNG_CR_RNGEN;
 8010122:	4b05      	ldr	r3, [pc, #20]	; (8010138 <RNG_Cmd+0x34>)
 8010124:	4a04      	ldr	r2, [pc, #16]	; (8010138 <RNG_Cmd+0x34>)
 8010126:	6812      	ldr	r2, [r2, #0]
 8010128:	f022 0204 	bic.w	r2, r2, #4
 801012c:	601a      	str	r2, [r3, #0]
  }
}
 801012e:	370c      	adds	r7, #12
 8010130:	46bd      	mov	sp, r7
 8010132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010136:	4770      	bx	lr
 8010138:	50060800 	.word	0x50060800

0801013c <RNG_GetRandomNumber>:
  *         
  * @param  None
  * @retval 32-bit random number.
  */
uint32_t RNG_GetRandomNumber(void)
{
 801013c:	b480      	push	{r7}
 801013e:	af00      	add	r7, sp, #0
  /* Return the 32 bit random number from the DR register */
  return RNG->DR;
 8010140:	4b03      	ldr	r3, [pc, #12]	; (8010150 <RNG_GetRandomNumber+0x14>)
 8010142:	689b      	ldr	r3, [r3, #8]
}
 8010144:	4618      	mov	r0, r3
 8010146:	46bd      	mov	sp, r7
 8010148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014c:	4770      	bx	lr
 801014e:	bf00      	nop
 8010150:	50060800 	.word	0x50060800

08010154 <RNG_ITConfig>:
  * @param  NewState: new state of the RNG interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_ITConfig(FunctionalState NewState)
{
 8010154:	b480      	push	{r7}
 8010156:	b083      	sub	sp, #12
 8010158:	af00      	add	r7, sp, #0
 801015a:	4603      	mov	r3, r0
 801015c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801015e:	79fb      	ldrb	r3, [r7, #7]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d006      	beq.n	8010172 <RNG_ITConfig+0x1e>
  {
    /* Enable the RNG interrupt */
    RNG->CR |= RNG_CR_IE;
 8010164:	4b08      	ldr	r3, [pc, #32]	; (8010188 <RNG_ITConfig+0x34>)
 8010166:	4a08      	ldr	r2, [pc, #32]	; (8010188 <RNG_ITConfig+0x34>)
 8010168:	6812      	ldr	r2, [r2, #0]
 801016a:	f042 0208 	orr.w	r2, r2, #8
 801016e:	601a      	str	r2, [r3, #0]
 8010170:	e005      	b.n	801017e <RNG_ITConfig+0x2a>
  }
  else
  {
    /* Disable the RNG interrupt */
    RNG->CR &= ~RNG_CR_IE;
 8010172:	4b05      	ldr	r3, [pc, #20]	; (8010188 <RNG_ITConfig+0x34>)
 8010174:	4a04      	ldr	r2, [pc, #16]	; (8010188 <RNG_ITConfig+0x34>)
 8010176:	6812      	ldr	r2, [r2, #0]
 8010178:	f022 0208 	bic.w	r2, r2, #8
 801017c:	601a      	str	r2, [r3, #0]
  }
}
 801017e:	370c      	adds	r7, #12
 8010180:	46bd      	mov	sp, r7
 8010182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010186:	4770      	bx	lr
 8010188:	50060800 	.word	0x50060800

0801018c <RNG_GetFlagStatus>:
  *            @arg RNG_FLAG_CECS: Clock Error Current flag.
  *            @arg RNG_FLAG_SECS: Seed Error Current flag.
  * @retval The new state of RNG_FLAG (SET or RESET).
  */
FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
{
 801018c:	b480      	push	{r7}
 801018e:	b085      	sub	sp, #20
 8010190:	af00      	add	r7, sp, #0
 8010192:	4603      	mov	r3, r0
 8010194:	71fb      	strb	r3, [r7, #7]
  FlagStatus bitstatus = RESET;
 8010196:	2300      	movs	r3, #0
 8010198:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RNG_GET_FLAG(RNG_FLAG));

  /* Check the status of the specified RNG flag */
  if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
 801019a:	4b09      	ldr	r3, [pc, #36]	; (80101c0 <RNG_GetFlagStatus+0x34>)
 801019c:	685a      	ldr	r2, [r3, #4]
 801019e:	79fb      	ldrb	r3, [r7, #7]
 80101a0:	4013      	ands	r3, r2
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d002      	beq.n	80101ac <RNG_GetFlagStatus+0x20>
  {
    /* RNG_FLAG is set */
    bitstatus = SET;
 80101a6:	2301      	movs	r3, #1
 80101a8:	73fb      	strb	r3, [r7, #15]
 80101aa:	e001      	b.n	80101b0 <RNG_GetFlagStatus+0x24>
  }
  else
  {
    /* RNG_FLAG is reset */
    bitstatus = RESET;
 80101ac:	2300      	movs	r3, #0
 80101ae:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RNG_FLAG status */
  return  bitstatus;
 80101b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80101b2:	4618      	mov	r0, r3
 80101b4:	3714      	adds	r7, #20
 80101b6:	46bd      	mov	sp, r7
 80101b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101bc:	4770      	bx	lr
 80101be:	bf00      	nop
 80101c0:	50060800 	.word	0x50060800

080101c4 <RNG_ClearFlag>:
  *         This flag is cleared only by reading the Random number data (using 
  *         RNG_GetRandomNumber() function).                           
  * @retval None
  */
void RNG_ClearFlag(uint8_t RNG_FLAG)
{
 80101c4:	b480      	push	{r7}
 80101c6:	b083      	sub	sp, #12
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	4603      	mov	r3, r0
 80101cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
  /* Clear the selected RNG flags */
  RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
 80101ce:	4b05      	ldr	r3, [pc, #20]	; (80101e4 <RNG_ClearFlag+0x20>)
 80101d0:	79fa      	ldrb	r2, [r7, #7]
 80101d2:	0112      	lsls	r2, r2, #4
 80101d4:	43d2      	mvns	r2, r2
 80101d6:	605a      	str	r2, [r3, #4]
}
 80101d8:	370c      	adds	r7, #12
 80101da:	46bd      	mov	sp, r7
 80101dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e0:	4770      	bx	lr
 80101e2:	bf00      	nop
 80101e4:	50060800 	.word	0x50060800

080101e8 <RNG_GetITStatus>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.                   
  * @retval The new state of RNG_IT (SET or RESET).
  */
ITStatus RNG_GetITStatus(uint8_t RNG_IT)
{
 80101e8:	b480      	push	{r7}
 80101ea:	b085      	sub	sp, #20
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	4603      	mov	r3, r0
 80101f0:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 80101f2:	2300      	movs	r3, #0
 80101f4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RNG_GET_IT(RNG_IT));

  /* Check the status of the specified RNG interrupt */
  if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
 80101f6:	4b09      	ldr	r3, [pc, #36]	; (801021c <RNG_GetITStatus+0x34>)
 80101f8:	685a      	ldr	r2, [r3, #4]
 80101fa:	79fb      	ldrb	r3, [r7, #7]
 80101fc:	4013      	ands	r3, r2
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d002      	beq.n	8010208 <RNG_GetITStatus+0x20>
  {
    /* RNG_IT is set */
    bitstatus = SET;
 8010202:	2301      	movs	r3, #1
 8010204:	73fb      	strb	r3, [r7, #15]
 8010206:	e001      	b.n	801020c <RNG_GetITStatus+0x24>
  }
  else
  {
    /* RNG_IT is reset */
    bitstatus = RESET;
 8010208:	2300      	movs	r3, #0
 801020a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RNG_IT status */
  return bitstatus;
 801020c:	7bfb      	ldrb	r3, [r7, #15]
}
 801020e:	4618      	mov	r0, r3
 8010210:	3714      	adds	r7, #20
 8010212:	46bd      	mov	sp, r7
 8010214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010218:	4770      	bx	lr
 801021a:	bf00      	nop
 801021c:	50060800 	.word	0x50060800

08010220 <RNG_ClearITPendingBit>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.
  * @retval None
  */
void RNG_ClearITPendingBit(uint8_t RNG_IT)
{
 8010220:	b480      	push	{r7}
 8010222:	b083      	sub	sp, #12
 8010224:	af00      	add	r7, sp, #0
 8010226:	4603      	mov	r3, r0
 8010228:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RNG_IT(RNG_IT));

  /* Clear the selected RNG interrupt pending bit */
  RNG->SR = (uint8_t)~RNG_IT;
 801022a:	4b05      	ldr	r3, [pc, #20]	; (8010240 <RNG_ClearITPendingBit+0x20>)
 801022c:	79fa      	ldrb	r2, [r7, #7]
 801022e:	43d2      	mvns	r2, r2
 8010230:	b2d2      	uxtb	r2, r2
 8010232:	605a      	str	r2, [r3, #4]
}
 8010234:	370c      	adds	r7, #12
 8010236:	46bd      	mov	sp, r7
 8010238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023c:	4770      	bx	lr
 801023e:	bf00      	nop
 8010240:	50060800 	.word	0x50060800

08010244 <RTC_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are deinitialized
  *          - ERROR: RTC registers are not deinitialized
  */
ErrorStatus RTC_DeInit(void)
{
 8010244:	b580      	push	{r7, lr}
 8010246:	b084      	sub	sp, #16
 8010248:	af00      	add	r7, sp, #0
  __IO uint32_t wutcounter = 0x00;
 801024a:	2300      	movs	r3, #0
 801024c:	607b      	str	r3, [r7, #4]
  uint32_t wutwfstatus = 0x00;
 801024e:	2300      	movs	r3, #0
 8010250:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8010252:	2300      	movs	r3, #0
 8010254:	73fb      	strb	r3, [r7, #15]
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010256:	4b36      	ldr	r3, [pc, #216]	; (8010330 <RTC_DeInit+0xec>)
 8010258:	22ca      	movs	r2, #202	; 0xca
 801025a:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 801025c:	4b34      	ldr	r3, [pc, #208]	; (8010330 <RTC_DeInit+0xec>)
 801025e:	2253      	movs	r2, #83	; 0x53
 8010260:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8010262:	f000 f8d1 	bl	8010408 <RTC_EnterInitMode>
 8010266:	4603      	mov	r3, r0
 8010268:	2b00      	cmp	r3, #0
 801026a:	d102      	bne.n	8010272 <RTC_DeInit+0x2e>
  {
    status = ERROR;
 801026c:	2300      	movs	r3, #0
 801026e:	73fb      	strb	r3, [r7, #15]
 8010270:	e055      	b.n	801031e <RTC_DeInit+0xda>
  }  
  else
  {
    /* Reset TR, DR and CR registers */
    RTC->TR = (uint32_t)0x00000000;
 8010272:	4b2f      	ldr	r3, [pc, #188]	; (8010330 <RTC_DeInit+0xec>)
 8010274:	2200      	movs	r2, #0
 8010276:	601a      	str	r2, [r3, #0]
    RTC->DR = (uint32_t)0x00002101;
 8010278:	4b2d      	ldr	r3, [pc, #180]	; (8010330 <RTC_DeInit+0xec>)
 801027a:	f242 1201 	movw	r2, #8449	; 0x2101
 801027e:	605a      	str	r2, [r3, #4]
    /* Reset All CR bits except CR[2:0] */
    RTC->CR &= (uint32_t)0x00000007;
 8010280:	4b2b      	ldr	r3, [pc, #172]	; (8010330 <RTC_DeInit+0xec>)
 8010282:	4a2b      	ldr	r2, [pc, #172]	; (8010330 <RTC_DeInit+0xec>)
 8010284:	6892      	ldr	r2, [r2, #8]
 8010286:	f002 0207 	and.w	r2, r2, #7
 801028a:	609a      	str	r2, [r3, #8]
  
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 801028c:	4b28      	ldr	r3, [pc, #160]	; (8010330 <RTC_DeInit+0xec>)
 801028e:	68db      	ldr	r3, [r3, #12]
 8010290:	f003 0304 	and.w	r3, r3, #4
 8010294:	60bb      	str	r3, [r7, #8]
      wutcounter++;  
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	3301      	adds	r3, #1
 801029a:	607b      	str	r3, [r7, #4]
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80102a2:	d002      	beq.n	80102aa <RTC_DeInit+0x66>
 80102a4:	68bb      	ldr	r3, [r7, #8]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d0f0      	beq.n	801028c <RTC_DeInit+0x48>
    
    if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 80102aa:	4b21      	ldr	r3, [pc, #132]	; (8010330 <RTC_DeInit+0xec>)
 80102ac:	68db      	ldr	r3, [r3, #12]
 80102ae:	f003 0304 	and.w	r3, r3, #4
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d102      	bne.n	80102bc <RTC_DeInit+0x78>
    {
      status = ERROR;
 80102b6:	2300      	movs	r3, #0
 80102b8:	73fb      	strb	r3, [r7, #15]
 80102ba:	e030      	b.n	801031e <RTC_DeInit+0xda>
    }
    else
    {
      /* Reset all RTC CR register bits */
      RTC->CR &= (uint32_t)0x00000000;
 80102bc:	4b1c      	ldr	r3, [pc, #112]	; (8010330 <RTC_DeInit+0xec>)
 80102be:	689b      	ldr	r3, [r3, #8]
 80102c0:	4b1b      	ldr	r3, [pc, #108]	; (8010330 <RTC_DeInit+0xec>)
 80102c2:	2200      	movs	r2, #0
 80102c4:	609a      	str	r2, [r3, #8]
      RTC->WUTR = (uint32_t)0x0000FFFF;
 80102c6:	4b1a      	ldr	r3, [pc, #104]	; (8010330 <RTC_DeInit+0xec>)
 80102c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80102cc:	615a      	str	r2, [r3, #20]
      RTC->PRER = (uint32_t)0x007F00FF;
 80102ce:	4b18      	ldr	r3, [pc, #96]	; (8010330 <RTC_DeInit+0xec>)
 80102d0:	4a18      	ldr	r2, [pc, #96]	; (8010334 <RTC_DeInit+0xf0>)
 80102d2:	611a      	str	r2, [r3, #16]
      RTC->CALIBR = (uint32_t)0x00000000;
 80102d4:	4b16      	ldr	r3, [pc, #88]	; (8010330 <RTC_DeInit+0xec>)
 80102d6:	2200      	movs	r2, #0
 80102d8:	619a      	str	r2, [r3, #24]
      RTC->ALRMAR = (uint32_t)0x00000000;        
 80102da:	4b15      	ldr	r3, [pc, #84]	; (8010330 <RTC_DeInit+0xec>)
 80102dc:	2200      	movs	r2, #0
 80102de:	61da      	str	r2, [r3, #28]
      RTC->ALRMBR = (uint32_t)0x00000000;
 80102e0:	4b13      	ldr	r3, [pc, #76]	; (8010330 <RTC_DeInit+0xec>)
 80102e2:	2200      	movs	r2, #0
 80102e4:	621a      	str	r2, [r3, #32]
      RTC->SHIFTR = (uint32_t)0x00000000;
 80102e6:	4b12      	ldr	r3, [pc, #72]	; (8010330 <RTC_DeInit+0xec>)
 80102e8:	2200      	movs	r2, #0
 80102ea:	62da      	str	r2, [r3, #44]	; 0x2c
      RTC->CALR = (uint32_t)0x00000000;
 80102ec:	4b10      	ldr	r3, [pc, #64]	; (8010330 <RTC_DeInit+0xec>)
 80102ee:	2200      	movs	r2, #0
 80102f0:	63da      	str	r2, [r3, #60]	; 0x3c
      RTC->ALRMASSR = (uint32_t)0x00000000;
 80102f2:	4b0f      	ldr	r3, [pc, #60]	; (8010330 <RTC_DeInit+0xec>)
 80102f4:	2200      	movs	r2, #0
 80102f6:	645a      	str	r2, [r3, #68]	; 0x44
      RTC->ALRMBSSR = (uint32_t)0x00000000;
 80102f8:	4b0d      	ldr	r3, [pc, #52]	; (8010330 <RTC_DeInit+0xec>)
 80102fa:	2200      	movs	r2, #0
 80102fc:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Reset ISR register and exit initialization mode */
      RTC->ISR = (uint32_t)0x00000000;
 80102fe:	4b0c      	ldr	r3, [pc, #48]	; (8010330 <RTC_DeInit+0xec>)
 8010300:	2200      	movs	r2, #0
 8010302:	60da      	str	r2, [r3, #12]
      
      /* Reset Tamper and alternate functions configuration register */
      RTC->TAFCR = 0x00000000;
 8010304:	4b0a      	ldr	r3, [pc, #40]	; (8010330 <RTC_DeInit+0xec>)
 8010306:	2200      	movs	r2, #0
 8010308:	641a      	str	r2, [r3, #64]	; 0x40
  
      if(RTC_WaitForSynchro() == ERROR)
 801030a:	f000 f8c5 	bl	8010498 <RTC_WaitForSynchro>
 801030e:	4603      	mov	r3, r0
 8010310:	2b00      	cmp	r3, #0
 8010312:	d102      	bne.n	801031a <RTC_DeInit+0xd6>
      {
        status = ERROR;
 8010314:	2300      	movs	r3, #0
 8010316:	73fb      	strb	r3, [r7, #15]
 8010318:	e001      	b.n	801031e <RTC_DeInit+0xda>
      }
      else
      {
        status = SUCCESS;      
 801031a:	2301      	movs	r3, #1
 801031c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 801031e:	4b04      	ldr	r3, [pc, #16]	; (8010330 <RTC_DeInit+0xec>)
 8010320:	22ff      	movs	r2, #255	; 0xff
 8010322:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8010324:	7bfb      	ldrb	r3, [r7, #15]
}
 8010326:	4618      	mov	r0, r3
 8010328:	3710      	adds	r7, #16
 801032a:	46bd      	mov	sp, r7
 801032c:	bd80      	pop	{r7, pc}
 801032e:	bf00      	nop
 8010330:	40002800 	.word	0x40002800
 8010334:	007f00ff 	.word	0x007f00ff

08010338 <RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized  
  */
ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
{
 8010338:	b580      	push	{r7, lr}
 801033a:	b084      	sub	sp, #16
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
  ErrorStatus status = ERROR;
 8010340:	2300      	movs	r3, #0
 8010342:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
  assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
  assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010344:	4b19      	ldr	r3, [pc, #100]	; (80103ac <RTC_Init+0x74>)
 8010346:	22ca      	movs	r2, #202	; 0xca
 8010348:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 801034a:	4b18      	ldr	r3, [pc, #96]	; (80103ac <RTC_Init+0x74>)
 801034c:	2253      	movs	r2, #83	; 0x53
 801034e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8010350:	f000 f85a 	bl	8010408 <RTC_EnterInitMode>
 8010354:	4603      	mov	r3, r0
 8010356:	2b00      	cmp	r3, #0
 8010358:	d102      	bne.n	8010360 <RTC_Init+0x28>
  {
    status = ERROR;
 801035a:	2300      	movs	r3, #0
 801035c:	73fb      	strb	r3, [r7, #15]
 801035e:	e01c      	b.n	801039a <RTC_Init+0x62>
  } 
  else
  {
    /* Clear RTC CR FMT Bit */
    RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 8010360:	4b12      	ldr	r3, [pc, #72]	; (80103ac <RTC_Init+0x74>)
 8010362:	4a12      	ldr	r2, [pc, #72]	; (80103ac <RTC_Init+0x74>)
 8010364:	6892      	ldr	r2, [r2, #8]
 8010366:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801036a:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 801036c:	4b0f      	ldr	r3, [pc, #60]	; (80103ac <RTC_Init+0x74>)
 801036e:	4a0f      	ldr	r2, [pc, #60]	; (80103ac <RTC_Init+0x74>)
 8010370:	6891      	ldr	r1, [r2, #8]
 8010372:	687a      	ldr	r2, [r7, #4]
 8010374:	6812      	ldr	r2, [r2, #0]
 8010376:	430a      	orrs	r2, r1
 8010378:	609a      	str	r2, [r3, #8]
  
    /* Configure the RTC PRER */
    RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 801037a:	4b0c      	ldr	r3, [pc, #48]	; (80103ac <RTC_Init+0x74>)
 801037c:	687a      	ldr	r2, [r7, #4]
 801037e:	6892      	ldr	r2, [r2, #8]
 8010380:	611a      	str	r2, [r3, #16]
    RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 8010382:	4b0a      	ldr	r3, [pc, #40]	; (80103ac <RTC_Init+0x74>)
 8010384:	4a09      	ldr	r2, [pc, #36]	; (80103ac <RTC_Init+0x74>)
 8010386:	6911      	ldr	r1, [r2, #16]
 8010388:	687a      	ldr	r2, [r7, #4]
 801038a:	6852      	ldr	r2, [r2, #4]
 801038c:	0412      	lsls	r2, r2, #16
 801038e:	430a      	orrs	r2, r1
 8010390:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    RTC_ExitInitMode();
 8010392:	f000 f873 	bl	801047c <RTC_ExitInitMode>

    status = SUCCESS;    
 8010396:	2301      	movs	r3, #1
 8010398:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 801039a:	4b04      	ldr	r3, [pc, #16]	; (80103ac <RTC_Init+0x74>)
 801039c:	22ff      	movs	r2, #255	; 0xff
 801039e:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 80103a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80103a2:	4618      	mov	r0, r3
 80103a4:	3710      	adds	r7, #16
 80103a6:	46bd      	mov	sp, r7
 80103a8:	bd80      	pop	{r7, pc}
 80103aa:	bf00      	nop
 80103ac:	40002800 	.word	0x40002800

080103b0 <RTC_StructInit>:
  * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
{
 80103b0:	b480      	push	{r7}
 80103b2:	b083      	sub	sp, #12
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	6078      	str	r0, [r7, #4]
  /* Initialize the RTC_HourFormat member */
  RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	2200      	movs	r2, #0
 80103bc:	601a      	str	r2, [r3, #0]
    
  /* Initialize the RTC_AsynchPrediv member */
  RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	227f      	movs	r2, #127	; 0x7f
 80103c2:	605a      	str	r2, [r3, #4]

  /* Initialize the RTC_SynchPrediv member */
  RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	22ff      	movs	r2, #255	; 0xff
 80103c8:	609a      	str	r2, [r3, #8]
}
 80103ca:	370c      	adds	r7, #12
 80103cc:	46bd      	mov	sp, r7
 80103ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d2:	4770      	bx	lr

080103d4 <RTC_WriteProtectionCmd>:
  * @param  NewState: new state of the write protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_WriteProtectionCmd(FunctionalState NewState)
{
 80103d4:	b480      	push	{r7}
 80103d6:	b083      	sub	sp, #12
 80103d8:	af00      	add	r7, sp, #0
 80103da:	4603      	mov	r3, r0
 80103dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 80103de:	79fb      	ldrb	r3, [r7, #7]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d003      	beq.n	80103ec <RTC_WriteProtectionCmd+0x18>
  {
    /* Enable the write protection for RTC registers */
    RTC->WPR = 0xFF;   
 80103e4:	4b07      	ldr	r3, [pc, #28]	; (8010404 <RTC_WriteProtectionCmd+0x30>)
 80103e6:	22ff      	movs	r2, #255	; 0xff
 80103e8:	625a      	str	r2, [r3, #36]	; 0x24
 80103ea:	e005      	b.n	80103f8 <RTC_WriteProtectionCmd+0x24>
  }
  else
  {
    /* Disable the write protection for RTC registers */
    RTC->WPR = 0xCA;
 80103ec:	4b05      	ldr	r3, [pc, #20]	; (8010404 <RTC_WriteProtectionCmd+0x30>)
 80103ee:	22ca      	movs	r2, #202	; 0xca
 80103f0:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->WPR = 0x53;    
 80103f2:	4b04      	ldr	r3, [pc, #16]	; (8010404 <RTC_WriteProtectionCmd+0x30>)
 80103f4:	2253      	movs	r2, #83	; 0x53
 80103f6:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80103f8:	370c      	adds	r7, #12
 80103fa:	46bd      	mov	sp, r7
 80103fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010400:	4770      	bx	lr
 8010402:	bf00      	nop
 8010404:	40002800 	.word	0x40002800

08010408 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode  
  */
ErrorStatus RTC_EnterInitMode(void)
{
 8010408:	b480      	push	{r7}
 801040a:	b085      	sub	sp, #20
 801040c:	af00      	add	r7, sp, #0
  __IO uint32_t initcounter = 0x00;
 801040e:	2300      	movs	r3, #0
 8010410:	607b      	str	r3, [r7, #4]
  ErrorStatus status = ERROR;
 8010412:	2300      	movs	r3, #0
 8010414:	73fb      	strb	r3, [r7, #15]
  uint32_t initstatus = 0x00;
 8010416:	2300      	movs	r3, #0
 8010418:	60bb      	str	r3, [r7, #8]
     
  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 801041a:	4b17      	ldr	r3, [pc, #92]	; (8010478 <RTC_EnterInitMode+0x70>)
 801041c:	68db      	ldr	r3, [r3, #12]
 801041e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010422:	2b00      	cmp	r3, #0
 8010424:	d11e      	bne.n	8010464 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    RTC->ISR = (uint32_t)RTC_INIT_MASK;
 8010426:	4b14      	ldr	r3, [pc, #80]	; (8010478 <RTC_EnterInitMode+0x70>)
 8010428:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801042c:	60da      	str	r2, [r3, #12]
    
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    do
    {
      initstatus = RTC->ISR & RTC_ISR_INITF;
 801042e:	4b12      	ldr	r3, [pc, #72]	; (8010478 <RTC_EnterInitMode+0x70>)
 8010430:	68db      	ldr	r3, [r3, #12]
 8010432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010436:	60bb      	str	r3, [r7, #8]
      initcounter++;  
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	3301      	adds	r3, #1
 801043c:	607b      	str	r3, [r7, #4]
    } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010444:	d002      	beq.n	801044c <RTC_EnterInitMode+0x44>
 8010446:	68bb      	ldr	r3, [r7, #8]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d0f0      	beq.n	801042e <RTC_EnterInitMode+0x26>
    
    if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 801044c:	4b0a      	ldr	r3, [pc, #40]	; (8010478 <RTC_EnterInitMode+0x70>)
 801044e:	68db      	ldr	r3, [r3, #12]
 8010450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010454:	2b00      	cmp	r3, #0
 8010456:	d002      	beq.n	801045e <RTC_EnterInitMode+0x56>
    {
      status = SUCCESS;
 8010458:	2301      	movs	r3, #1
 801045a:	73fb      	strb	r3, [r7, #15]
 801045c:	e004      	b.n	8010468 <RTC_EnterInitMode+0x60>
    }
    else
    {
      status = ERROR;
 801045e:	2300      	movs	r3, #0
 8010460:	73fb      	strb	r3, [r7, #15]
 8010462:	e001      	b.n	8010468 <RTC_EnterInitMode+0x60>
    }        
  }
  else
  {
    status = SUCCESS;  
 8010464:	2301      	movs	r3, #1
 8010466:	73fb      	strb	r3, [r7, #15]
  } 
    
  return (status);  
 8010468:	7bfb      	ldrb	r3, [r7, #15]
}
 801046a:	4618      	mov	r0, r3
 801046c:	3714      	adds	r7, #20
 801046e:	46bd      	mov	sp, r7
 8010470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010474:	4770      	bx	lr
 8010476:	bf00      	nop
 8010478:	40002800 	.word	0x40002800

0801047c <RTC_ExitInitMode>:
  *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
  * @param  None
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
 801047c:	b480      	push	{r7}
 801047e:	af00      	add	r7, sp, #0
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8010480:	4b04      	ldr	r3, [pc, #16]	; (8010494 <RTC_ExitInitMode+0x18>)
 8010482:	4a04      	ldr	r2, [pc, #16]	; (8010494 <RTC_ExitInitMode+0x18>)
 8010484:	68d2      	ldr	r2, [r2, #12]
 8010486:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801048a:	60da      	str	r2, [r3, #12]
}
 801048c:	46bd      	mov	sp, r7
 801048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010492:	4770      	bx	lr
 8010494:	40002800 	.word	0x40002800

08010498 <RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus RTC_WaitForSynchro(void)
{
 8010498:	b480      	push	{r7}
 801049a:	b085      	sub	sp, #20
 801049c:	af00      	add	r7, sp, #0
  __IO uint32_t synchrocounter = 0;
 801049e:	2300      	movs	r3, #0
 80104a0:	607b      	str	r3, [r7, #4]
  ErrorStatus status = ERROR;
 80104a2:	2300      	movs	r3, #0
 80104a4:	73fb      	strb	r3, [r7, #15]
  uint32_t synchrostatus = 0x00;
 80104a6:	2300      	movs	r3, #0
 80104a8:	60bb      	str	r3, [r7, #8]

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80104aa:	4b18      	ldr	r3, [pc, #96]	; (801050c <RTC_WaitForSynchro+0x74>)
 80104ac:	22ca      	movs	r2, #202	; 0xca
 80104ae:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80104b0:	4b16      	ldr	r3, [pc, #88]	; (801050c <RTC_WaitForSynchro+0x74>)
 80104b2:	2253      	movs	r2, #83	; 0x53
 80104b4:	625a      	str	r2, [r3, #36]	; 0x24
    
  /* Clear RSF flag */
  RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 80104b6:	4b15      	ldr	r3, [pc, #84]	; (801050c <RTC_WaitForSynchro+0x74>)
 80104b8:	4a14      	ldr	r2, [pc, #80]	; (801050c <RTC_WaitForSynchro+0x74>)
 80104ba:	68d2      	ldr	r2, [r2, #12]
 80104bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80104c0:	60da      	str	r2, [r3, #12]
    
  /* Wait the registers to be synchronised */
  do
  {
    synchrostatus = RTC->ISR & RTC_ISR_RSF;
 80104c2:	4b12      	ldr	r3, [pc, #72]	; (801050c <RTC_WaitForSynchro+0x74>)
 80104c4:	68db      	ldr	r3, [r3, #12]
 80104c6:	f003 0320 	and.w	r3, r3, #32
 80104ca:	60bb      	str	r3, [r7, #8]
    synchrocounter++;  
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	3301      	adds	r3, #1
 80104d0:	607b      	str	r3, [r7, #4]
  } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80104d8:	d002      	beq.n	80104e0 <RTC_WaitForSynchro+0x48>
 80104da:	68bb      	ldr	r3, [r7, #8]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d0f0      	beq.n	80104c2 <RTC_WaitForSynchro+0x2a>
    
  if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 80104e0:	4b0a      	ldr	r3, [pc, #40]	; (801050c <RTC_WaitForSynchro+0x74>)
 80104e2:	68db      	ldr	r3, [r3, #12]
 80104e4:	f003 0320 	and.w	r3, r3, #32
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d002      	beq.n	80104f2 <RTC_WaitForSynchro+0x5a>
  {
    status = SUCCESS;
 80104ec:	2301      	movs	r3, #1
 80104ee:	73fb      	strb	r3, [r7, #15]
 80104f0:	e001      	b.n	80104f6 <RTC_WaitForSynchro+0x5e>
  }
  else
  {
    status = ERROR;
 80104f2:	2300      	movs	r3, #0
 80104f4:	73fb      	strb	r3, [r7, #15]
  }        

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80104f6:	4b05      	ldr	r3, [pc, #20]	; (801050c <RTC_WaitForSynchro+0x74>)
 80104f8:	22ff      	movs	r2, #255	; 0xff
 80104fa:	625a      	str	r2, [r3, #36]	; 0x24
    
  return (status); 
 80104fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80104fe:	4618      	mov	r0, r3
 8010500:	3714      	adds	r7, #20
 8010502:	46bd      	mov	sp, r7
 8010504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010508:	4770      	bx	lr
 801050a:	bf00      	nop
 801050c:	40002800 	.word	0x40002800

08010510 <RTC_RefClockCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC reference clock detection is enabled
  *          - ERROR: RTC reference clock detection is disabled  
  */
ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
{ 
 8010510:	b580      	push	{r7, lr}
 8010512:	b084      	sub	sp, #16
 8010514:	af00      	add	r7, sp, #0
 8010516:	4603      	mov	r3, r0
 8010518:	71fb      	strb	r3, [r7, #7]
  ErrorStatus status = ERROR;
 801051a:	2300      	movs	r3, #0
 801051c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 801051e:	4b15      	ldr	r3, [pc, #84]	; (8010574 <RTC_RefClockCmd+0x64>)
 8010520:	22ca      	movs	r2, #202	; 0xca
 8010522:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010524:	4b13      	ldr	r3, [pc, #76]	; (8010574 <RTC_RefClockCmd+0x64>)
 8010526:	2253      	movs	r2, #83	; 0x53
 8010528:	625a      	str	r2, [r3, #36]	; 0x24
    
  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 801052a:	f7ff ff6d 	bl	8010408 <RTC_EnterInitMode>
 801052e:	4603      	mov	r3, r0
 8010530:	2b00      	cmp	r3, #0
 8010532:	d102      	bne.n	801053a <RTC_RefClockCmd+0x2a>
  {
    status = ERROR;
 8010534:	2300      	movs	r3, #0
 8010536:	73fb      	strb	r3, [r7, #15]
 8010538:	e013      	b.n	8010562 <RTC_RefClockCmd+0x52>
  } 
  else
  {  
    if (NewState != DISABLE)
 801053a:	79fb      	ldrb	r3, [r7, #7]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d006      	beq.n	801054e <RTC_RefClockCmd+0x3e>
    {
      /* Enable the RTC reference clock detection */
      RTC->CR |= RTC_CR_REFCKON;   
 8010540:	4b0c      	ldr	r3, [pc, #48]	; (8010574 <RTC_RefClockCmd+0x64>)
 8010542:	4a0c      	ldr	r2, [pc, #48]	; (8010574 <RTC_RefClockCmd+0x64>)
 8010544:	6892      	ldr	r2, [r2, #8]
 8010546:	f042 0210 	orr.w	r2, r2, #16
 801054a:	609a      	str	r2, [r3, #8]
 801054c:	e005      	b.n	801055a <RTC_RefClockCmd+0x4a>
    }
    else
    {
      /* Disable the RTC reference clock detection */
      RTC->CR &= ~RTC_CR_REFCKON;    
 801054e:	4b09      	ldr	r3, [pc, #36]	; (8010574 <RTC_RefClockCmd+0x64>)
 8010550:	4a08      	ldr	r2, [pc, #32]	; (8010574 <RTC_RefClockCmd+0x64>)
 8010552:	6892      	ldr	r2, [r2, #8]
 8010554:	f022 0210 	bic.w	r2, r2, #16
 8010558:	609a      	str	r2, [r3, #8]
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 801055a:	f7ff ff8f 	bl	801047c <RTC_ExitInitMode>
    
    status = SUCCESS;
 801055e:	2301      	movs	r3, #1
 8010560:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 8010562:	4b04      	ldr	r3, [pc, #16]	; (8010574 <RTC_RefClockCmd+0x64>)
 8010564:	22ff      	movs	r2, #255	; 0xff
 8010566:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status; 
 8010568:	7bfb      	ldrb	r3, [r7, #15]
}
 801056a:	4618      	mov	r0, r3
 801056c:	3710      	adds	r7, #16
 801056e:	46bd      	mov	sp, r7
 8010570:	bd80      	pop	{r7, pc}
 8010572:	bf00      	nop
 8010574:	40002800 	.word	0x40002800

08010578 <RTC_BypassShadowCmd>:
  * @param  NewState: new state of the Bypass Shadow feature.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
*/
void RTC_BypassShadowCmd(FunctionalState NewState)
{
 8010578:	b480      	push	{r7}
 801057a:	b083      	sub	sp, #12
 801057c:	af00      	add	r7, sp, #0
 801057e:	4603      	mov	r3, r0
 8010580:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010582:	4b0f      	ldr	r3, [pc, #60]	; (80105c0 <RTC_BypassShadowCmd+0x48>)
 8010584:	22ca      	movs	r2, #202	; 0xca
 8010586:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010588:	4b0d      	ldr	r3, [pc, #52]	; (80105c0 <RTC_BypassShadowCmd+0x48>)
 801058a:	2253      	movs	r2, #83	; 0x53
 801058c:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (NewState != DISABLE)
 801058e:	79fb      	ldrb	r3, [r7, #7]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d006      	beq.n	80105a2 <RTC_BypassShadowCmd+0x2a>
  {
    /* Set the BYPSHAD bit */
    RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8010594:	4b0a      	ldr	r3, [pc, #40]	; (80105c0 <RTC_BypassShadowCmd+0x48>)
 8010596:	4a0a      	ldr	r2, [pc, #40]	; (80105c0 <RTC_BypassShadowCmd+0x48>)
 8010598:	6892      	ldr	r2, [r2, #8]
 801059a:	f042 0220 	orr.w	r2, r2, #32
 801059e:	609a      	str	r2, [r3, #8]
 80105a0:	e005      	b.n	80105ae <RTC_BypassShadowCmd+0x36>
  }
  else
  {
    /* Reset the BYPSHAD bit */
    RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 80105a2:	4b07      	ldr	r3, [pc, #28]	; (80105c0 <RTC_BypassShadowCmd+0x48>)
 80105a4:	4a06      	ldr	r2, [pc, #24]	; (80105c0 <RTC_BypassShadowCmd+0x48>)
 80105a6:	6892      	ldr	r2, [r2, #8]
 80105a8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80105ac:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 80105ae:	4b04      	ldr	r3, [pc, #16]	; (80105c0 <RTC_BypassShadowCmd+0x48>)
 80105b0:	22ff      	movs	r2, #255	; 0xff
 80105b2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80105b4:	370c      	adds	r7, #12
 80105b6:	46bd      	mov	sp, r7
 80105b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105bc:	4770      	bx	lr
 80105be:	bf00      	nop
 80105c0:	40002800 	.word	0x40002800

080105c4 <RTC_SetTime>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 80105c4:	b590      	push	{r4, r7, lr}
 80105c6:	b085      	sub	sp, #20
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	6078      	str	r0, [r7, #4]
 80105cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80105ce:	2300      	movs	r3, #0
 80105d0:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = ERROR;
 80105d2:	2300      	movs	r3, #0
 80105d4:	72fb      	strb	r3, [r7, #11]
    
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  if (RTC_Format == RTC_Format_BIN)
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d109      	bne.n	80105f0 <RTC_SetTime+0x2c>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80105dc:	4b3d      	ldr	r3, [pc, #244]	; (80106d4 <RTC_SetTime+0x110>)
 80105de:	689b      	ldr	r3, [r3, #8]
 80105e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d114      	bne.n	8010612 <RTC_SetTime+0x4e>
      assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 80105e8:	683b      	ldr	r3, [r7, #0]
 80105ea:	2200      	movs	r2, #0
 80105ec:	70da      	strb	r2, [r3, #3]
 80105ee:	e010      	b.n	8010612 <RTC_SetTime+0x4e>
    assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
    assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80105f0:	4b38      	ldr	r3, [pc, #224]	; (80106d4 <RTC_SetTime+0x110>)
 80105f2:	689b      	ldr	r3, [r3, #8]
 80105f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d007      	beq.n	801060c <RTC_SetTime+0x48>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	781b      	ldrb	r3, [r3, #0]
 8010600:	4618      	mov	r0, r3
 8010602:	f001 f885 	bl	8011710 <RTC_Bcd2ToByte>
 8010606:	4603      	mov	r3, r0
 8010608:	60fb      	str	r3, [r7, #12]
 801060a:	e002      	b.n	8010612 <RTC_SetTime+0x4e>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 801060c:	683b      	ldr	r3, [r7, #0]
 801060e:	2200      	movs	r2, #0
 8010610:	70da      	strb	r2, [r3, #3]
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d00f      	beq.n	8010638 <RTC_SetTime+0x74>
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8010618:	683b      	ldr	r3, [r7, #0]
 801061a:	781b      	ldrb	r3, [r3, #0]
 801061c:	041a      	lsls	r2, r3, #16
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 801061e:	683b      	ldr	r3, [r7, #0]
 8010620:	785b      	ldrb	r3, [r3, #1]
 8010622:	021b      	lsls	r3, r3, #8
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8010624:	431a      	orrs	r2, r3
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 8010626:	683b      	ldr	r3, [r7, #0]
 8010628:	789b      	ldrb	r3, [r3, #2]
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 801062a:	431a      	orrs	r2, r3
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 801062c:	683b      	ldr	r3, [r7, #0]
 801062e:	78db      	ldrb	r3, [r3, #3]
 8010630:	041b      	lsls	r3, r3, #16
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8010632:	4313      	orrs	r3, r2
 8010634:	60fb      	str	r3, [r7, #12]
 8010636:	e01b      	b.n	8010670 <RTC_SetTime+0xac>
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8010638:	683b      	ldr	r3, [r7, #0]
 801063a:	781b      	ldrb	r3, [r3, #0]
 801063c:	4618      	mov	r0, r3
 801063e:	f001 f849 	bl	80116d4 <RTC_ByteToBcd2>
 8010642:	4603      	mov	r3, r0
 8010644:	041c      	lsls	r4, r3, #16
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8010646:	683b      	ldr	r3, [r7, #0]
 8010648:	785b      	ldrb	r3, [r3, #1]
 801064a:	4618      	mov	r0, r3
 801064c:	f001 f842 	bl	80116d4 <RTC_ByteToBcd2>
 8010650:	4603      	mov	r3, r0
 8010652:	021b      	lsls	r3, r3, #8
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8010654:	431c      	orrs	r4, r3
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 8010656:	683b      	ldr	r3, [r7, #0]
 8010658:	789b      	ldrb	r3, [r3, #2]
 801065a:	4618      	mov	r0, r3
 801065c:	f001 f83a 	bl	80116d4 <RTC_ByteToBcd2>
 8010660:	4603      	mov	r3, r0
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8010662:	ea44 0203 	orr.w	r2, r4, r3
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 8010666:	683b      	ldr	r3, [r7, #0]
 8010668:	78db      	ldrb	r3, [r3, #3]
 801066a:	041b      	lsls	r3, r3, #16
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 801066c:	4313      	orrs	r3, r2
 801066e:	60fb      	str	r3, [r7, #12]
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
  }  

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010670:	4b18      	ldr	r3, [pc, #96]	; (80106d4 <RTC_SetTime+0x110>)
 8010672:	22ca      	movs	r2, #202	; 0xca
 8010674:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010676:	4b17      	ldr	r3, [pc, #92]	; (80106d4 <RTC_SetTime+0x110>)
 8010678:	2253      	movs	r2, #83	; 0x53
 801067a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 801067c:	f7ff fec4 	bl	8010408 <RTC_EnterInitMode>
 8010680:	4603      	mov	r3, r0
 8010682:	2b00      	cmp	r3, #0
 8010684:	d102      	bne.n	801068c <RTC_SetTime+0xc8>
  {
    status = ERROR;
 8010686:	2300      	movs	r3, #0
 8010688:	72fb      	strb	r3, [r7, #11]
 801068a:	e01b      	b.n	80106c4 <RTC_SetTime+0x100>
  } 
  else
  {
    /* Set the RTC_TR register */
    RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801068c:	4a11      	ldr	r2, [pc, #68]	; (80106d4 <RTC_SetTime+0x110>)
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8010694:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8010698:	6013      	str	r3, [r2, #0]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 801069a:	f7ff feef 	bl	801047c <RTC_ExitInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 801069e:	4b0d      	ldr	r3, [pc, #52]	; (80106d4 <RTC_SetTime+0x110>)
 80106a0:	689b      	ldr	r3, [r3, #8]
 80106a2:	f003 0320 	and.w	r3, r3, #32
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d10a      	bne.n	80106c0 <RTC_SetTime+0xfc>
    {
    if(RTC_WaitForSynchro() == ERROR)
 80106aa:	f7ff fef5 	bl	8010498 <RTC_WaitForSynchro>
 80106ae:	4603      	mov	r3, r0
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d102      	bne.n	80106ba <RTC_SetTime+0xf6>
    {
      status = ERROR;
 80106b4:	2300      	movs	r3, #0
 80106b6:	72fb      	strb	r3, [r7, #11]
 80106b8:	e004      	b.n	80106c4 <RTC_SetTime+0x100>
    }
    else
    {
      status = SUCCESS;
 80106ba:	2301      	movs	r3, #1
 80106bc:	72fb      	strb	r3, [r7, #11]
 80106be:	e001      	b.n	80106c4 <RTC_SetTime+0x100>
    }
  }
    else
    {
      status = SUCCESS;
 80106c0:	2301      	movs	r3, #1
 80106c2:	72fb      	strb	r3, [r7, #11]
    }
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80106c4:	4b03      	ldr	r3, [pc, #12]	; (80106d4 <RTC_SetTime+0x110>)
 80106c6:	22ff      	movs	r2, #255	; 0xff
 80106c8:	625a      	str	r2, [r3, #36]	; 0x24
    
  return status;
 80106ca:	7afb      	ldrb	r3, [r7, #11]
}
 80106cc:	4618      	mov	r0, r3
 80106ce:	3714      	adds	r7, #20
 80106d0:	46bd      	mov	sp, r7
 80106d2:	bd90      	pop	{r4, r7, pc}
 80106d4:	40002800 	.word	0x40002800

080106d8 <RTC_TimeStructInit>:
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
{
 80106d8:	b480      	push	{r7}
 80106da:	b083      	sub	sp, #12
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
  /* Time = 00h:00min:00sec */
  RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	2200      	movs	r2, #0
 80106e4:	70da      	strb	r2, [r3, #3]
  RTC_TimeStruct->RTC_Hours = 0;
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	2200      	movs	r2, #0
 80106ea:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct->RTC_Minutes = 0;
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	2200      	movs	r2, #0
 80106f0:	705a      	strb	r2, [r3, #1]
  RTC_TimeStruct->RTC_Seconds = 0; 
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	2200      	movs	r2, #0
 80106f6:	709a      	strb	r2, [r3, #2]
}
 80106f8:	370c      	adds	r7, #12
 80106fa:	46bd      	mov	sp, r7
 80106fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010700:	4770      	bx	lr
 8010702:	bf00      	nop

08010704 <RTC_GetTime>:
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
  *                        contain the returned current time configuration.     
  * @retval None
  */
void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 8010704:	b580      	push	{r7, lr}
 8010706:	b084      	sub	sp, #16
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
 801070c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801070e:	2300      	movs	r3, #0
 8010710:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 8010712:	4b22      	ldr	r3, [pc, #136]	; (801079c <RTC_GetTime+0x98>)
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 801071a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 801071e:	60fb      	str	r3, [r7, #12]
  
  /* Fill the structure fields with the read parameters */
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8010726:	0c1b      	lsrs	r3, r3, #16
 8010728:	b2da      	uxtb	r2, r3
 801072a:	683b      	ldr	r3, [r7, #0]
 801072c:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8010734:	0a1b      	lsrs	r3, r3, #8
 8010736:	b2da      	uxtb	r2, r3
 8010738:	683b      	ldr	r3, [r7, #0]
 801073a:	705a      	strb	r2, [r3, #1]
  RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	b2db      	uxtb	r3, r3
 8010740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010744:	b2da      	uxtb	r2, r3
 8010746:	683b      	ldr	r3, [r7, #0]
 8010748:	709a      	strb	r2, [r3, #2]
  RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010750:	0c1b      	lsrs	r3, r3, #16
 8010752:	b2da      	uxtb	r2, r3
 8010754:	683b      	ldr	r3, [r7, #0]
 8010756:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d11a      	bne.n	8010794 <RTC_GetTime+0x90>
  {
    /* Convert the structure parameters to Binary format */
    RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 801075e:	683b      	ldr	r3, [r7, #0]
 8010760:	781b      	ldrb	r3, [r3, #0]
 8010762:	4618      	mov	r0, r3
 8010764:	f000 ffd4 	bl	8011710 <RTC_Bcd2ToByte>
 8010768:	4603      	mov	r3, r0
 801076a:	461a      	mov	r2, r3
 801076c:	683b      	ldr	r3, [r7, #0]
 801076e:	701a      	strb	r2, [r3, #0]
    RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 8010770:	683b      	ldr	r3, [r7, #0]
 8010772:	785b      	ldrb	r3, [r3, #1]
 8010774:	4618      	mov	r0, r3
 8010776:	f000 ffcb 	bl	8011710 <RTC_Bcd2ToByte>
 801077a:	4603      	mov	r3, r0
 801077c:	461a      	mov	r2, r3
 801077e:	683b      	ldr	r3, [r7, #0]
 8010780:	705a      	strb	r2, [r3, #1]
    RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 8010782:	683b      	ldr	r3, [r7, #0]
 8010784:	789b      	ldrb	r3, [r3, #2]
 8010786:	4618      	mov	r0, r3
 8010788:	f000 ffc2 	bl	8011710 <RTC_Bcd2ToByte>
 801078c:	4603      	mov	r3, r0
 801078e:	461a      	mov	r2, r3
 8010790:	683b      	ldr	r3, [r7, #0]
 8010792:	709a      	strb	r2, [r3, #2]
  }
}
 8010794:	3710      	adds	r7, #16
 8010796:	46bd      	mov	sp, r7
 8010798:	bd80      	pop	{r7, pc}
 801079a:	bf00      	nop
 801079c:	40002800 	.word	0x40002800

080107a0 <RTC_GetSubSecond>:
  *         SSR register.
  * @param  None
  * @retval RTC current Calendar Sub seconds value.
  */
uint32_t RTC_GetSubSecond(void)
{
 80107a0:	b480      	push	{r7}
 80107a2:	b083      	sub	sp, #12
 80107a4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0;
 80107a6:	2300      	movs	r3, #0
 80107a8:	607b      	str	r3, [r7, #4]
  
  /* Get sub seconds values from the correspondent registers*/
  tmpreg = (uint32_t)(RTC->SSR);
 80107aa:	4b06      	ldr	r3, [pc, #24]	; (80107c4 <RTC_GetSubSecond+0x24>)
 80107ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107ae:	607b      	str	r3, [r7, #4]
  
  /* Read DR register to unfroze calendar registers */
  (void) (RTC->DR);
 80107b0:	4b04      	ldr	r3, [pc, #16]	; (80107c4 <RTC_GetSubSecond+0x24>)
 80107b2:	685b      	ldr	r3, [r3, #4]
  
  return (tmpreg);
 80107b4:	687b      	ldr	r3, [r7, #4]
}
 80107b6:	4618      	mov	r0, r3
 80107b8:	370c      	adds	r7, #12
 80107ba:	46bd      	mov	sp, r7
 80107bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c0:	4770      	bx	lr
 80107c2:	bf00      	nop
 80107c4:	40002800 	.word	0x40002800

080107c8 <RTC_SetDate>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Date register is configured
  *          - ERROR: RTC Date register is not configured
  */
ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 80107c8:	b590      	push	{r4, r7, lr}
 80107ca:	b085      	sub	sp, #20
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	6078      	str	r0, [r7, #4]
 80107d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80107d2:	2300      	movs	r3, #0
 80107d4:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = ERROR;
 80107d6:	2300      	movs	r3, #0
 80107d8:	72fb      	strb	r3, [r7, #11]
  
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d10e      	bne.n	80107fe <RTC_SetDate+0x36>
 80107e0:	683b      	ldr	r3, [r7, #0]
 80107e2:	785b      	ldrb	r3, [r3, #1]
 80107e4:	f003 0310 	and.w	r3, r3, #16
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d008      	beq.n	80107fe <RTC_SetDate+0x36>
  {
    RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 80107ec:	683b      	ldr	r3, [r7, #0]
 80107ee:	785b      	ldrb	r3, [r3, #1]
 80107f0:	f023 0310 	bic.w	r3, r3, #16
 80107f4:	b2db      	uxtb	r3, r3
 80107f6:	330a      	adds	r3, #10
 80107f8:	b2da      	uxtb	r2, r3
 80107fa:	683b      	ldr	r3, [r7, #0]
 80107fc:	705a      	strb	r2, [r3, #1]
  }  
  if (RTC_Format == RTC_Format_BIN)
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d00d      	beq.n	8010820 <RTC_SetDate+0x58>
    assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
    tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 8010804:	683b      	ldr	r3, [r7, #0]
 8010806:	785b      	ldrb	r3, [r3, #1]
 8010808:	4618      	mov	r0, r3
 801080a:	f000 ff81 	bl	8011710 <RTC_Bcd2ToByte>
 801080e:	4603      	mov	r3, r0
 8010810:	60fb      	str	r3, [r7, #12]
    assert_param(IS_RTC_MONTH(tmpreg));
    tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 8010812:	683b      	ldr	r3, [r7, #0]
 8010814:	789b      	ldrb	r3, [r3, #2]
 8010816:	4618      	mov	r0, r3
 8010818:	f000 ff7a 	bl	8011710 <RTC_Bcd2ToByte>
 801081c:	4603      	mov	r3, r0
 801081e:	60fb      	str	r3, [r7, #12]
    assert_param(IS_RTC_DATE(tmpreg));
  }
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d00f      	beq.n	8010846 <RTC_SetDate+0x7e>
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 8010826:	683b      	ldr	r3, [r7, #0]
 8010828:	78db      	ldrb	r3, [r3, #3]
 801082a:	041a      	lsls	r2, r3, #16
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	785b      	ldrb	r3, [r3, #1]
 8010830:	021b      	lsls	r3, r3, #8
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 8010832:	431a      	orrs	r2, r3
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
 8010834:	683b      	ldr	r3, [r7, #0]
 8010836:	789b      	ldrb	r3, [r3, #2]

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 8010838:	431a      	orrs	r2, r3
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 801083a:	683b      	ldr	r3, [r7, #0]
 801083c:	781b      	ldrb	r3, [r3, #0]
 801083e:	035b      	lsls	r3, r3, #13
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 8010840:	4313      	orrs	r3, r2
 8010842:	60fb      	str	r3, [r7, #12]
 8010844:	e01b      	b.n	801087e <RTC_SetDate+0xb6>
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 8010846:	683b      	ldr	r3, [r7, #0]
 8010848:	78db      	ldrb	r3, [r3, #3]
 801084a:	4618      	mov	r0, r3
 801084c:	f000 ff42 	bl	80116d4 <RTC_ByteToBcd2>
 8010850:	4603      	mov	r3, r0
 8010852:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 8010854:	683b      	ldr	r3, [r7, #0]
 8010856:	785b      	ldrb	r3, [r3, #1]
 8010858:	4618      	mov	r0, r3
 801085a:	f000 ff3b 	bl	80116d4 <RTC_ByteToBcd2>
 801085e:	4603      	mov	r3, r0
 8010860:	021b      	lsls	r3, r3, #8
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 8010862:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 8010864:	683b      	ldr	r3, [r7, #0]
 8010866:	789b      	ldrb	r3, [r3, #2]
 8010868:	4618      	mov	r0, r3
 801086a:	f000 ff33 	bl	80116d4 <RTC_ByteToBcd2>
 801086e:	4603      	mov	r3, r0
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 8010870:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 8010874:	683b      	ldr	r3, [r7, #0]
 8010876:	781b      	ldrb	r3, [r3, #0]
 8010878:	035b      	lsls	r3, r3, #13
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 801087a:	4313      	orrs	r3, r2
 801087c:	60fb      	str	r3, [r7, #12]
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 801087e:	4b19      	ldr	r3, [pc, #100]	; (80108e4 <RTC_SetDate+0x11c>)
 8010880:	22ca      	movs	r2, #202	; 0xca
 8010882:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010884:	4b17      	ldr	r3, [pc, #92]	; (80108e4 <RTC_SetDate+0x11c>)
 8010886:	2253      	movs	r2, #83	; 0x53
 8010888:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 801088a:	f7ff fdbd 	bl	8010408 <RTC_EnterInitMode>
 801088e:	4603      	mov	r3, r0
 8010890:	2b00      	cmp	r3, #0
 8010892:	d102      	bne.n	801089a <RTC_SetDate+0xd2>
  {
    status = ERROR;
 8010894:	2300      	movs	r3, #0
 8010896:	72fb      	strb	r3, [r7, #11]
 8010898:	e01b      	b.n	80108d2 <RTC_SetDate+0x10a>
  } 
  else
  {
    /* Set the RTC_DR register */
    RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 801089a:	4a12      	ldr	r2, [pc, #72]	; (80108e4 <RTC_SetDate+0x11c>)
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80108a2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80108a6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 80108a8:	f7ff fde8 	bl	801047c <RTC_ExitInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 80108ac:	4b0d      	ldr	r3, [pc, #52]	; (80108e4 <RTC_SetDate+0x11c>)
 80108ae:	689b      	ldr	r3, [r3, #8]
 80108b0:	f003 0320 	and.w	r3, r3, #32
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d10a      	bne.n	80108ce <RTC_SetDate+0x106>
    {
    if(RTC_WaitForSynchro() == ERROR)
 80108b8:	f7ff fdee 	bl	8010498 <RTC_WaitForSynchro>
 80108bc:	4603      	mov	r3, r0
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d102      	bne.n	80108c8 <RTC_SetDate+0x100>
    {
      status = ERROR;
 80108c2:	2300      	movs	r3, #0
 80108c4:	72fb      	strb	r3, [r7, #11]
 80108c6:	e004      	b.n	80108d2 <RTC_SetDate+0x10a>
    }
    else
    {
      status = SUCCESS;
 80108c8:	2301      	movs	r3, #1
 80108ca:	72fb      	strb	r3, [r7, #11]
 80108cc:	e001      	b.n	80108d2 <RTC_SetDate+0x10a>
    }
  }
    else
    {
      status = SUCCESS;
 80108ce:	2301      	movs	r3, #1
 80108d0:	72fb      	strb	r3, [r7, #11]
    }
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 80108d2:	4b04      	ldr	r3, [pc, #16]	; (80108e4 <RTC_SetDate+0x11c>)
 80108d4:	22ff      	movs	r2, #255	; 0xff
 80108d6:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 80108d8:	7afb      	ldrb	r3, [r7, #11]
}
 80108da:	4618      	mov	r0, r3
 80108dc:	3714      	adds	r7, #20
 80108de:	46bd      	mov	sp, r7
 80108e0:	bd90      	pop	{r4, r7, pc}
 80108e2:	bf00      	nop
 80108e4:	40002800 	.word	0x40002800

080108e8 <RTC_DateStructInit>:
  * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
{
 80108e8:	b480      	push	{r7}
 80108ea:	b083      	sub	sp, #12
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
  /* Monday, January 01 xx00 */
  RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	2201      	movs	r2, #1
 80108f4:	701a      	strb	r2, [r3, #0]
  RTC_DateStruct->RTC_Date = 1;
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	2201      	movs	r2, #1
 80108fa:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct->RTC_Month = RTC_Month_January;
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	2201      	movs	r2, #1
 8010900:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct->RTC_Year = 0;
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	2200      	movs	r2, #0
 8010906:	70da      	strb	r2, [r3, #3]
}
 8010908:	370c      	adds	r7, #12
 801090a:	46bd      	mov	sp, r7
 801090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010910:	4770      	bx	lr
 8010912:	bf00      	nop

08010914 <RTC_GetDate>:
  * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
  *                        contain the returned current date configuration.     
  * @retval None
  */
void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b084      	sub	sp, #16
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
 801091c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801091e:	2300      	movs	r3, #0
 8010920:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 8010922:	4b22      	ldr	r3, [pc, #136]	; (80109ac <RTC_GetDate+0x98>)
 8010924:	685b      	ldr	r3, [r3, #4]
 8010926:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801092a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801092e:	60fb      	str	r3, [r7, #12]

  /* Fill the structure fields with the read parameters */
  RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010936:	0c1b      	lsrs	r3, r3, #16
 8010938:	b2da      	uxtb	r2, r3
 801093a:	683b      	ldr	r3, [r7, #0]
 801093c:	70da      	strb	r2, [r3, #3]
  RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8010944:	0a1b      	lsrs	r3, r3, #8
 8010946:	b2da      	uxtb	r2, r3
 8010948:	683b      	ldr	r3, [r7, #0]
 801094a:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	b2db      	uxtb	r3, r3
 8010950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010954:	b2da      	uxtb	r2, r3
 8010956:	683b      	ldr	r3, [r7, #0]
 8010958:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010960:	0b5b      	lsrs	r3, r3, #13
 8010962:	b2da      	uxtb	r2, r3
 8010964:	683b      	ldr	r3, [r7, #0]
 8010966:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d11a      	bne.n	80109a4 <RTC_GetDate+0x90>
  {
    /* Convert the structure parameters to Binary format */
    RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 801096e:	683b      	ldr	r3, [r7, #0]
 8010970:	78db      	ldrb	r3, [r3, #3]
 8010972:	4618      	mov	r0, r3
 8010974:	f000 fecc 	bl	8011710 <RTC_Bcd2ToByte>
 8010978:	4603      	mov	r3, r0
 801097a:	461a      	mov	r2, r3
 801097c:	683b      	ldr	r3, [r7, #0]
 801097e:	70da      	strb	r2, [r3, #3]
    RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 8010980:	683b      	ldr	r3, [r7, #0]
 8010982:	785b      	ldrb	r3, [r3, #1]
 8010984:	4618      	mov	r0, r3
 8010986:	f000 fec3 	bl	8011710 <RTC_Bcd2ToByte>
 801098a:	4603      	mov	r3, r0
 801098c:	461a      	mov	r2, r3
 801098e:	683b      	ldr	r3, [r7, #0]
 8010990:	705a      	strb	r2, [r3, #1]
    RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 8010992:	683b      	ldr	r3, [r7, #0]
 8010994:	789b      	ldrb	r3, [r3, #2]
 8010996:	4618      	mov	r0, r3
 8010998:	f000 feba 	bl	8011710 <RTC_Bcd2ToByte>
 801099c:	4603      	mov	r3, r0
 801099e:	461a      	mov	r2, r3
 80109a0:	683b      	ldr	r3, [r7, #0]
 80109a2:	709a      	strb	r2, [r3, #2]
  }
}
 80109a4:	3710      	adds	r7, #16
 80109a6:	46bd      	mov	sp, r7
 80109a8:	bd80      	pop	{r7, pc}
 80109aa:	bf00      	nop
 80109ac:	40002800 	.word	0x40002800

080109b0 <RTC_SetAlarm>:
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
  *                          contains the alarm configuration parameters.     
  * @retval None
  */
void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 80109b0:	b590      	push	{r4, r7, lr}
 80109b2:	b087      	sub	sp, #28
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	60f8      	str	r0, [r7, #12]
 80109b8:	60b9      	str	r1, [r7, #8]
 80109ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80109bc:	2300      	movs	r3, #0
 80109be:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));

  if (RTC_Format == RTC_Format_BIN)
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d109      	bne.n	80109da <RTC_SetAlarm+0x2a>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80109c6:	4b47      	ldr	r3, [pc, #284]	; (8010ae4 <RTC_SetAlarm+0x134>)
 80109c8:	689b      	ldr	r3, [r3, #8]
 80109ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d127      	bne.n	8010a22 <RTC_SetAlarm+0x72>
      assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	2200      	movs	r2, #0
 80109d6:	70da      	strb	r2, [r3, #3]
 80109d8:	e023      	b.n	8010a22 <RTC_SetAlarm+0x72>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
    }
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80109da:	4b42      	ldr	r3, [pc, #264]	; (8010ae4 <RTC_SetAlarm+0x134>)
 80109dc:	689b      	ldr	r3, [r3, #8]
 80109de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d007      	beq.n	80109f6 <RTC_SetAlarm+0x46>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	781b      	ldrb	r3, [r3, #0]
 80109ea:	4618      	mov	r0, r3
 80109ec:	f000 fe90 	bl	8011710 <RTC_Bcd2ToByte>
 80109f0:	4603      	mov	r3, r0
 80109f2:	617b      	str	r3, [r7, #20]
 80109f4:	e002      	b.n	80109fc <RTC_SetAlarm+0x4c>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	2200      	movs	r2, #0
 80109fa:	70da      	strb	r2, [r3, #3]
    }
    
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
    
    if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	689b      	ldr	r3, [r3, #8]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d107      	bne.n	8010a14 <RTC_SetAlarm+0x64>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	7b1b      	ldrb	r3, [r3, #12]
 8010a08:	4618      	mov	r0, r3
 8010a0a:	f000 fe81 	bl	8011710 <RTC_Bcd2ToByte>
 8010a0e:	4603      	mov	r3, r0
 8010a10:	617b      	str	r3, [r7, #20]
 8010a12:	e006      	b.n	8010a22 <RTC_SetAlarm+0x72>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
    }
    else
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	7b1b      	ldrb	r3, [r3, #12]
 8010a18:	4618      	mov	r0, r3
 8010a1a:	f000 fe79 	bl	8011710 <RTC_Bcd2ToByte>
 8010a1e:	4603      	mov	r3, r0
 8010a20:	617b      	str	r3, [r7, #20]
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
    }    
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d019      	beq.n	8010a5c <RTC_SetAlarm+0xac>
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	781b      	ldrb	r3, [r3, #0]
 8010a2c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	785b      	ldrb	r3, [r3, #1]
 8010a32:	021b      	lsls	r3, r3, #8
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8010a34:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	789b      	ldrb	r3, [r3, #2]

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 8010a3a:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	78db      	ldrb	r3, [r3, #3]
 8010a40:	041b      	lsls	r3, r3, #16
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 8010a42:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	7b1b      	ldrb	r3, [r3, #12]
 8010a48:	061b      	lsls	r3, r3, #24
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 8010a4a:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	689b      	ldr	r3, [r3, #8]
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 8010a50:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	685b      	ldr	r3, [r3, #4]
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8010a56:	4313      	orrs	r3, r2
 8010a58:	617b      	str	r3, [r7, #20]
 8010a5a:	e02b      	b.n	8010ab4 <RTC_SetAlarm+0x104>
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	781b      	ldrb	r3, [r3, #0]
 8010a60:	4618      	mov	r0, r3
 8010a62:	f000 fe37 	bl	80116d4 <RTC_ByteToBcd2>
 8010a66:	4603      	mov	r3, r0
 8010a68:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	785b      	ldrb	r3, [r3, #1]
 8010a6e:	4618      	mov	r0, r3
 8010a70:	f000 fe30 	bl	80116d4 <RTC_ByteToBcd2>
 8010a74:	4603      	mov	r3, r0
 8010a76:	021b      	lsls	r3, r3, #8
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8010a78:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	789b      	ldrb	r3, [r3, #2]
 8010a7e:	4618      	mov	r0, r3
 8010a80:	f000 fe28 	bl	80116d4 <RTC_ByteToBcd2>
 8010a84:	4603      	mov	r3, r0
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 8010a86:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	78db      	ldrb	r3, [r3, #3]
 8010a8e:	041b      	lsls	r3, r3, #16
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 8010a90:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	7b1b      	ldrb	r3, [r3, #12]
 8010a98:	4618      	mov	r0, r3
 8010a9a:	f000 fe1b 	bl	80116d4 <RTC_ByteToBcd2>
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	061b      	lsls	r3, r3, #24
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 8010aa2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	689b      	ldr	r3, [r3, #8]
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 8010aaa:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	685b      	ldr	r3, [r3, #4]
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8010ab0:	4313      	orrs	r3, r2
 8010ab2:	617b      	str	r3, [r7, #20]
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  } 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010ab4:	4b0b      	ldr	r3, [pc, #44]	; (8010ae4 <RTC_SetAlarm+0x134>)
 8010ab6:	22ca      	movs	r2, #202	; 0xca
 8010ab8:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010aba:	4b0a      	ldr	r3, [pc, #40]	; (8010ae4 <RTC_SetAlarm+0x134>)
 8010abc:	2253      	movs	r2, #83	; 0x53
 8010abe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (RTC_Alarm == RTC_Alarm_A)
 8010ac0:	68bb      	ldr	r3, [r7, #8]
 8010ac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010ac6:	d103      	bne.n	8010ad0 <RTC_SetAlarm+0x120>
  {
    RTC->ALRMAR = (uint32_t)tmpreg;
 8010ac8:	4b06      	ldr	r3, [pc, #24]	; (8010ae4 <RTC_SetAlarm+0x134>)
 8010aca:	697a      	ldr	r2, [r7, #20]
 8010acc:	61da      	str	r2, [r3, #28]
 8010ace:	e002      	b.n	8010ad6 <RTC_SetAlarm+0x126>
  }
  else
  {
    RTC->ALRMBR = (uint32_t)tmpreg;
 8010ad0:	4b04      	ldr	r3, [pc, #16]	; (8010ae4 <RTC_SetAlarm+0x134>)
 8010ad2:	697a      	ldr	r2, [r7, #20]
 8010ad4:	621a      	str	r2, [r3, #32]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 8010ad6:	4b03      	ldr	r3, [pc, #12]	; (8010ae4 <RTC_SetAlarm+0x134>)
 8010ad8:	22ff      	movs	r2, #255	; 0xff
 8010ada:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010adc:	371c      	adds	r7, #28
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	bd90      	pop	{r4, r7, pc}
 8010ae2:	bf00      	nop
 8010ae4:	40002800 	.word	0x40002800

08010ae8 <RTC_AlarmStructInit>:
  * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 8010ae8:	b480      	push	{r7}
 8010aea:	b083      	sub	sp, #12
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	6078      	str	r0, [r7, #4]
  /* Alarm Time Settings : Time = 00h:00mn:00sec */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	2200      	movs	r2, #0
 8010af4:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	2200      	movs	r2, #0
 8010afa:	701a      	strb	r2, [r3, #0]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	2200      	movs	r2, #0
 8010b00:	705a      	strb	r2, [r3, #1]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	2200      	movs	r2, #0
 8010b06:	709a      	strb	r2, [r3, #2]

  /* Alarm Date Settings : Date = 1st day of the month */
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	609a      	str	r2, [r3, #8]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	2201      	movs	r2, #1
 8010b12:	731a      	strb	r2, [r3, #12]

  /* Alarm Masks Settings : Mask =  all fields are not masked */
  RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	2200      	movs	r2, #0
 8010b18:	605a      	str	r2, [r3, #4]
}
 8010b1a:	370c      	adds	r7, #12
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b22:	4770      	bx	lr

08010b24 <RTC_GetAlarm>:
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
  *                          contains the output alarm configuration values.     
  * @retval None
  */
void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b086      	sub	sp, #24
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	60f8      	str	r0, [r7, #12]
 8010b2c:	60b9      	str	r1, [r7, #8]
 8010b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8010b30:	2300      	movs	r3, #0
 8010b32:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm)); 

  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
 8010b34:	68bb      	ldr	r3, [r7, #8]
 8010b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010b3a:	d103      	bne.n	8010b44 <RTC_GetAlarm+0x20>
  {
    tmpreg = (uint32_t)(RTC->ALRMAR);
 8010b3c:	4b2e      	ldr	r3, [pc, #184]	; (8010bf8 <RTC_GetAlarm+0xd4>)
 8010b3e:	69db      	ldr	r3, [r3, #28]
 8010b40:	617b      	str	r3, [r7, #20]
 8010b42:	e002      	b.n	8010b4a <RTC_GetAlarm+0x26>
  }
  else
  {
    tmpreg = (uint32_t)(RTC->ALRMBR);
 8010b44:	4b2c      	ldr	r3, [pc, #176]	; (8010bf8 <RTC_GetAlarm+0xd4>)
 8010b46:	6a1b      	ldr	r3, [r3, #32]
 8010b48:	617b      	str	r3, [r7, #20]
  }

  /* Fill the structure with the read parameters */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 8010b4a:	697b      	ldr	r3, [r7, #20]
 8010b4c:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8010b50:	0c1b      	lsrs	r3, r3, #16
 8010b52:	b2da      	uxtb	r2, r3
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	701a      	strb	r2, [r3, #0]
                                                     RTC_ALRMAR_HU)) >> 16);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 8010b58:	697b      	ldr	r3, [r7, #20]
 8010b5a:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8010b5e:	0a1b      	lsrs	r3, r3, #8
 8010b60:	b2da      	uxtb	r2, r3
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	705a      	strb	r2, [r3, #1]
                                                     RTC_ALRMAR_MNU)) >> 8);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 8010b66:	697b      	ldr	r3, [r7, #20]
 8010b68:	b2db      	uxtb	r3, r3
 8010b6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010b6e:	b2da      	uxtb	r2, r3
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	709a      	strb	r2, [r3, #2]
                                                     RTC_ALRMAR_SU));
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 8010b74:	697b      	ldr	r3, [r7, #20]
 8010b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010b7a:	0c1b      	lsrs	r3, r3, #16
 8010b7c:	b2da      	uxtb	r2, r3
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
 8010b82:	697b      	ldr	r3, [r7, #20]
 8010b84:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8010b88:	0e1b      	lsrs	r3, r3, #24
 8010b8a:	b2da      	uxtb	r2, r3
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	731a      	strb	r2, [r3, #12]
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8010b90:	697b      	ldr	r3, [r7, #20]
 8010b92:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	609a      	str	r2, [r3, #8]
  RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 8010b9a:	697b      	ldr	r3, [r7, #20]
 8010b9c:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	605a      	str	r2, [r3, #4]

  if (RTC_Format == RTC_Format_BIN)
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d123      	bne.n	8010bf2 <RTC_GetAlarm+0xce>
  {
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	781b      	ldrb	r3, [r3, #0]
 8010bae:	4618      	mov	r0, r3
 8010bb0:	f000 fdae 	bl	8011710 <RTC_Bcd2ToByte>
 8010bb4:	4603      	mov	r3, r0
 8010bb6:	461a      	mov	r2, r3
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	701a      	strb	r2, [r3, #0]
                                                        RTC_AlarmTime.RTC_Hours);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	785b      	ldrb	r3, [r3, #1]
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	f000 fda5 	bl	8011710 <RTC_Bcd2ToByte>
 8010bc6:	4603      	mov	r3, r0
 8010bc8:	461a      	mov	r2, r3
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	705a      	strb	r2, [r3, #1]
                                                        RTC_AlarmTime.RTC_Minutes);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	789b      	ldrb	r3, [r3, #2]
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	f000 fd9c 	bl	8011710 <RTC_Bcd2ToByte>
 8010bd8:	4603      	mov	r3, r0
 8010bda:	461a      	mov	r2, r3
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	709a      	strb	r2, [r3, #2]
                                                        RTC_AlarmTime.RTC_Seconds);
    RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	7b1b      	ldrb	r3, [r3, #12]
 8010be4:	4618      	mov	r0, r3
 8010be6:	f000 fd93 	bl	8011710 <RTC_Bcd2ToByte>
 8010bea:	4603      	mov	r3, r0
 8010bec:	461a      	mov	r2, r3
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	731a      	strb	r2, [r3, #12]
  }  
}
 8010bf2:	3718      	adds	r7, #24
 8010bf4:	46bd      	mov	sp, r7
 8010bf6:	bd80      	pop	{r7, pc}
 8010bf8:	40002800 	.word	0x40002800

08010bfc <RTC_AlarmCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Alarm is enabled/disabled
  *          - ERROR: RTC Alarm is not enabled/disabled  
  */
ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
{
 8010bfc:	b480      	push	{r7}
 8010bfe:	b087      	sub	sp, #28
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	6078      	str	r0, [r7, #4]
 8010c04:	460b      	mov	r3, r1
 8010c06:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t alarmcounter = 0x00;
 8010c08:	2300      	movs	r3, #0
 8010c0a:	60fb      	str	r3, [r7, #12]
  uint32_t alarmstatus = 0x00;
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	613b      	str	r3, [r7, #16]
  ErrorStatus status = ERROR;
 8010c10:	2300      	movs	r3, #0
 8010c12:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010c14:	4b1f      	ldr	r3, [pc, #124]	; (8010c94 <RTC_AlarmCmd+0x98>)
 8010c16:	22ca      	movs	r2, #202	; 0xca
 8010c18:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010c1a:	4b1e      	ldr	r3, [pc, #120]	; (8010c94 <RTC_AlarmCmd+0x98>)
 8010c1c:	2253      	movs	r2, #83	; 0x53
 8010c1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm state */
  if (NewState != DISABLE)
 8010c20:	78fb      	ldrb	r3, [r7, #3]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d008      	beq.n	8010c38 <RTC_AlarmCmd+0x3c>
  {
    RTC->CR |= (uint32_t)RTC_Alarm;
 8010c26:	4b1b      	ldr	r3, [pc, #108]	; (8010c94 <RTC_AlarmCmd+0x98>)
 8010c28:	4a1a      	ldr	r2, [pc, #104]	; (8010c94 <RTC_AlarmCmd+0x98>)
 8010c2a:	6891      	ldr	r1, [r2, #8]
 8010c2c:	687a      	ldr	r2, [r7, #4]
 8010c2e:	430a      	orrs	r2, r1
 8010c30:	609a      	str	r2, [r3, #8]

    status = SUCCESS;    
 8010c32:	2301      	movs	r3, #1
 8010c34:	75fb      	strb	r3, [r7, #23]
 8010c36:	e022      	b.n	8010c7e <RTC_AlarmCmd+0x82>
  }
  else
  { 
    /* Disable the Alarm in RTC_CR register */
    RTC->CR &= (uint32_t)~RTC_Alarm;
 8010c38:	4b16      	ldr	r3, [pc, #88]	; (8010c94 <RTC_AlarmCmd+0x98>)
 8010c3a:	4a16      	ldr	r2, [pc, #88]	; (8010c94 <RTC_AlarmCmd+0x98>)
 8010c3c:	6891      	ldr	r1, [r2, #8]
 8010c3e:	687a      	ldr	r2, [r7, #4]
 8010c40:	43d2      	mvns	r2, r2
 8010c42:	400a      	ands	r2, r1
 8010c44:	609a      	str	r2, [r3, #8]
   
    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    do
    {
      alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 8010c46:	4b13      	ldr	r3, [pc, #76]	; (8010c94 <RTC_AlarmCmd+0x98>)
 8010c48:	68da      	ldr	r2, [r3, #12]
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	0a1b      	lsrs	r3, r3, #8
 8010c4e:	4013      	ands	r3, r2
 8010c50:	613b      	str	r3, [r7, #16]
      alarmcounter++;  
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	3301      	adds	r3, #1
 8010c56:	60fb      	str	r3, [r7, #12]
    } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010c5e:	d002      	beq.n	8010c66 <RTC_AlarmCmd+0x6a>
 8010c60:	693b      	ldr	r3, [r7, #16]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d0ef      	beq.n	8010c46 <RTC_AlarmCmd+0x4a>
    
    if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 8010c66:	4b0b      	ldr	r3, [pc, #44]	; (8010c94 <RTC_AlarmCmd+0x98>)
 8010c68:	68da      	ldr	r2, [r3, #12]
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	0a1b      	lsrs	r3, r3, #8
 8010c6e:	4013      	ands	r3, r2
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d102      	bne.n	8010c7a <RTC_AlarmCmd+0x7e>
    {
      status = ERROR;
 8010c74:	2300      	movs	r3, #0
 8010c76:	75fb      	strb	r3, [r7, #23]
 8010c78:	e001      	b.n	8010c7e <RTC_AlarmCmd+0x82>
    } 
    else
    {
      status = SUCCESS;
 8010c7a:	2301      	movs	r3, #1
 8010c7c:	75fb      	strb	r3, [r7, #23]
    }        
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010c7e:	4b05      	ldr	r3, [pc, #20]	; (8010c94 <RTC_AlarmCmd+0x98>)
 8010c80:	22ff      	movs	r2, #255	; 0xff
 8010c82:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8010c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c86:	4618      	mov	r0, r3
 8010c88:	371c      	adds	r7, #28
 8010c8a:	46bd      	mov	sp, r7
 8010c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c90:	4770      	bx	lr
 8010c92:	bf00      	nop
 8010c94:	40002800 	.word	0x40002800

08010c98 <RTC_AlarmSubSecondConfig>:
  *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
  *                                          to activate alarm
  * @retval None
  */
void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_AlarmSubSecondMask)
{
 8010c98:	b480      	push	{r7}
 8010c9a:	b087      	sub	sp, #28
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	60f8      	str	r0, [r7, #12]
 8010ca0:	60b9      	str	r1, [r7, #8]
 8010ca2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8010ca4:	2300      	movs	r3, #0
 8010ca6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010ca8:	4b0e      	ldr	r3, [pc, #56]	; (8010ce4 <RTC_AlarmSubSecondConfig+0x4c>)
 8010caa:	22ca      	movs	r2, #202	; 0xca
 8010cac:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010cae:	4b0d      	ldr	r3, [pc, #52]	; (8010ce4 <RTC_AlarmSubSecondConfig+0x4c>)
 8010cb0:	2253      	movs	r2, #83	; 0x53
 8010cb2:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Alarm A or Alarm B Sub Second registers */
  tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
 8010cb4:	68ba      	ldr	r2, [r7, #8]
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	4313      	orrs	r3, r2
 8010cba:	617b      	str	r3, [r7, #20]
  
  if (RTC_Alarm == RTC_Alarm_A)
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010cc2:	d103      	bne.n	8010ccc <RTC_AlarmSubSecondConfig+0x34>
  {
    /* Configure the Alarm A Sub Second register */
    RTC->ALRMASSR = tmpreg;
 8010cc4:	4b07      	ldr	r3, [pc, #28]	; (8010ce4 <RTC_AlarmSubSecondConfig+0x4c>)
 8010cc6:	697a      	ldr	r2, [r7, #20]
 8010cc8:	645a      	str	r2, [r3, #68]	; 0x44
 8010cca:	e002      	b.n	8010cd2 <RTC_AlarmSubSecondConfig+0x3a>
  }
  else
  {
    /* Configure the Alarm B Sub Second register */
    RTC->ALRMBSSR = tmpreg;
 8010ccc:	4b05      	ldr	r3, [pc, #20]	; (8010ce4 <RTC_AlarmSubSecondConfig+0x4c>)
 8010cce:	697a      	ldr	r2, [r7, #20]
 8010cd0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8010cd2:	4b04      	ldr	r3, [pc, #16]	; (8010ce4 <RTC_AlarmSubSecondConfig+0x4c>)
 8010cd4:	22ff      	movs	r2, #255	; 0xff
 8010cd6:	625a      	str	r2, [r3, #36]	; 0x24

}
 8010cd8:	371c      	adds	r7, #28
 8010cda:	46bd      	mov	sp, r7
 8010cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce0:	4770      	bx	lr
 8010ce2:	bf00      	nop
 8010ce4:	40002800 	.word	0x40002800

08010ce8 <RTC_GetAlarmSubSecond>:
  *     @arg RTC_Alarm_B: to select Alarm B
  * @param  None
  * @retval RTC Alarm Sub seconds value.
  */
uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
{
 8010ce8:	b480      	push	{r7}
 8010cea:	b085      	sub	sp, #20
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	60fb      	str	r3, [r7, #12]
  
  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010cfa:	d105      	bne.n	8010d08 <RTC_GetAlarmSubSecond+0x20>
  {
    tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 8010cfc:	4b08      	ldr	r3, [pc, #32]	; (8010d20 <RTC_GetAlarmSubSecond+0x38>)
 8010cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d00:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8010d04:	60fb      	str	r3, [r7, #12]
 8010d06:	e004      	b.n	8010d12 <RTC_GetAlarmSubSecond+0x2a>
  }
  else
  {
    tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8010d08:	4b05      	ldr	r3, [pc, #20]	; (8010d20 <RTC_GetAlarmSubSecond+0x38>)
 8010d0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010d0c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8010d10:	60fb      	str	r3, [r7, #12]
  } 
  
  return (tmpreg);
 8010d12:	68fb      	ldr	r3, [r7, #12]
}
 8010d14:	4618      	mov	r0, r3
 8010d16:	3714      	adds	r7, #20
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d1e:	4770      	bx	lr
 8010d20:	40002800 	.word	0x40002800

08010d24 <RTC_WakeUpClockConfig>:
  *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
  *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
  * @retval None
  */
void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
{
 8010d24:	b480      	push	{r7}
 8010d26:	b083      	sub	sp, #12
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010d2c:	4b0c      	ldr	r3, [pc, #48]	; (8010d60 <RTC_WakeUpClockConfig+0x3c>)
 8010d2e:	22ca      	movs	r2, #202	; 0xca
 8010d30:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010d32:	4b0b      	ldr	r3, [pc, #44]	; (8010d60 <RTC_WakeUpClockConfig+0x3c>)
 8010d34:	2253      	movs	r2, #83	; 0x53
 8010d36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the Wakeup Timer clock source bits in CR register */
  RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8010d38:	4b09      	ldr	r3, [pc, #36]	; (8010d60 <RTC_WakeUpClockConfig+0x3c>)
 8010d3a:	4a09      	ldr	r2, [pc, #36]	; (8010d60 <RTC_WakeUpClockConfig+0x3c>)
 8010d3c:	6892      	ldr	r2, [r2, #8]
 8010d3e:	f022 0207 	bic.w	r2, r2, #7
 8010d42:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  RTC->CR |= (uint32_t)RTC_WakeUpClock;
 8010d44:	4b06      	ldr	r3, [pc, #24]	; (8010d60 <RTC_WakeUpClockConfig+0x3c>)
 8010d46:	4a06      	ldr	r2, [pc, #24]	; (8010d60 <RTC_WakeUpClockConfig+0x3c>)
 8010d48:	6891      	ldr	r1, [r2, #8]
 8010d4a:	687a      	ldr	r2, [r7, #4]
 8010d4c:	430a      	orrs	r2, r1
 8010d4e:	609a      	str	r2, [r3, #8]
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010d50:	4b03      	ldr	r3, [pc, #12]	; (8010d60 <RTC_WakeUpClockConfig+0x3c>)
 8010d52:	22ff      	movs	r2, #255	; 0xff
 8010d54:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010d56:	370c      	adds	r7, #12
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5e:	4770      	bx	lr
 8010d60:	40002800 	.word	0x40002800

08010d64 <RTC_SetWakeUpCounter>:
  * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
  *          This parameter can be a value from 0x0000 to 0xFFFF. 
  * @retval None
  */
void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
{
 8010d64:	b480      	push	{r7}
 8010d66:	b083      	sub	sp, #12
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010d6c:	4b08      	ldr	r3, [pc, #32]	; (8010d90 <RTC_SetWakeUpCounter+0x2c>)
 8010d6e:	22ca      	movs	r2, #202	; 0xca
 8010d70:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010d72:	4b07      	ldr	r3, [pc, #28]	; (8010d90 <RTC_SetWakeUpCounter+0x2c>)
 8010d74:	2253      	movs	r2, #83	; 0x53
 8010d76:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Wakeup Timer counter */
  RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 8010d78:	4b05      	ldr	r3, [pc, #20]	; (8010d90 <RTC_SetWakeUpCounter+0x2c>)
 8010d7a:	687a      	ldr	r2, [r7, #4]
 8010d7c:	615a      	str	r2, [r3, #20]
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010d7e:	4b04      	ldr	r3, [pc, #16]	; (8010d90 <RTC_SetWakeUpCounter+0x2c>)
 8010d80:	22ff      	movs	r2, #255	; 0xff
 8010d82:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010d84:	370c      	adds	r7, #12
 8010d86:	46bd      	mov	sp, r7
 8010d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8c:	4770      	bx	lr
 8010d8e:	bf00      	nop
 8010d90:	40002800 	.word	0x40002800

08010d94 <RTC_GetWakeUpCounter>:
  * @brief  Returns the RTC WakeUp timer counter value.
  * @param  None
  * @retval The RTC WakeUp Counter value.
  */
uint32_t RTC_GetWakeUpCounter(void)
{
 8010d94:	b480      	push	{r7}
 8010d96:	af00      	add	r7, sp, #0
  /* Get the counter value */
  return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 8010d98:	4b03      	ldr	r3, [pc, #12]	; (8010da8 <RTC_GetWakeUpCounter+0x14>)
 8010d9a:	695b      	ldr	r3, [r3, #20]
 8010d9c:	b29b      	uxth	r3, r3
}
 8010d9e:	4618      	mov	r0, r3
 8010da0:	46bd      	mov	sp, r7
 8010da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da6:	4770      	bx	lr
 8010da8:	40002800 	.word	0x40002800

08010dac <RTC_WakeUpCmd>:
  * @param  NewState: new state of the WakeUp timer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
{
 8010dac:	b480      	push	{r7}
 8010dae:	b087      	sub	sp, #28
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	4603      	mov	r3, r0
 8010db4:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t wutcounter = 0x00;
 8010db6:	2300      	movs	r3, #0
 8010db8:	60fb      	str	r3, [r7, #12]
  uint32_t wutwfstatus = 0x00;
 8010dba:	2300      	movs	r3, #0
 8010dbc:	613b      	str	r3, [r7, #16]
  ErrorStatus status = ERROR;
 8010dbe:	2300      	movs	r3, #0
 8010dc0:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010dc2:	4b1e      	ldr	r3, [pc, #120]	; (8010e3c <RTC_WakeUpCmd+0x90>)
 8010dc4:	22ca      	movs	r2, #202	; 0xca
 8010dc6:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010dc8:	4b1c      	ldr	r3, [pc, #112]	; (8010e3c <RTC_WakeUpCmd+0x90>)
 8010dca:	2253      	movs	r2, #83	; 0x53
 8010dcc:	625a      	str	r2, [r3, #36]	; 0x24

  if (NewState != DISABLE)
 8010dce:	79fb      	ldrb	r3, [r7, #7]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d008      	beq.n	8010de6 <RTC_WakeUpCmd+0x3a>
  {
    /* Enable the Wakeup Timer */
    RTC->CR |= (uint32_t)RTC_CR_WUTE;
 8010dd4:	4b19      	ldr	r3, [pc, #100]	; (8010e3c <RTC_WakeUpCmd+0x90>)
 8010dd6:	4a19      	ldr	r2, [pc, #100]	; (8010e3c <RTC_WakeUpCmd+0x90>)
 8010dd8:	6892      	ldr	r2, [r2, #8]
 8010dda:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010dde:	609a      	str	r2, [r3, #8]
    status = SUCCESS;    
 8010de0:	2301      	movs	r3, #1
 8010de2:	75fb      	strb	r3, [r7, #23]
 8010de4:	e01f      	b.n	8010e26 <RTC_WakeUpCmd+0x7a>
  }
  else
  {
    /* Disable the Wakeup Timer */
    RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 8010de6:	4b15      	ldr	r3, [pc, #84]	; (8010e3c <RTC_WakeUpCmd+0x90>)
 8010de8:	4a14      	ldr	r2, [pc, #80]	; (8010e3c <RTC_WakeUpCmd+0x90>)
 8010dea:	6892      	ldr	r2, [r2, #8]
 8010dec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010df0:	609a      	str	r2, [r3, #8]
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 8010df2:	4b12      	ldr	r3, [pc, #72]	; (8010e3c <RTC_WakeUpCmd+0x90>)
 8010df4:	68db      	ldr	r3, [r3, #12]
 8010df6:	f003 0304 	and.w	r3, r3, #4
 8010dfa:	613b      	str	r3, [r7, #16]
      wutcounter++;  
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	3301      	adds	r3, #1
 8010e00:	60fb      	str	r3, [r7, #12]
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010e08:	d002      	beq.n	8010e10 <RTC_WakeUpCmd+0x64>
 8010e0a:	693b      	ldr	r3, [r7, #16]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d0f0      	beq.n	8010df2 <RTC_WakeUpCmd+0x46>
    
    if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 8010e10:	4b0a      	ldr	r3, [pc, #40]	; (8010e3c <RTC_WakeUpCmd+0x90>)
 8010e12:	68db      	ldr	r3, [r3, #12]
 8010e14:	f003 0304 	and.w	r3, r3, #4
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d102      	bne.n	8010e22 <RTC_WakeUpCmd+0x76>
    {
      status = ERROR;
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	75fb      	strb	r3, [r7, #23]
 8010e20:	e001      	b.n	8010e26 <RTC_WakeUpCmd+0x7a>
    }
    else
    {
      status = SUCCESS;
 8010e22:	2301      	movs	r3, #1
 8010e24:	75fb      	strb	r3, [r7, #23]
    }    
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010e26:	4b05      	ldr	r3, [pc, #20]	; (8010e3c <RTC_WakeUpCmd+0x90>)
 8010e28:	22ff      	movs	r2, #255	; 0xff
 8010e2a:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8010e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e2e:	4618      	mov	r0, r3
 8010e30:	371c      	adds	r7, #28
 8010e32:	46bd      	mov	sp, r7
 8010e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e38:	4770      	bx	lr
 8010e3a:	bf00      	nop
 8010e3c:	40002800 	.word	0x40002800

08010e40 <RTC_DayLightSavingConfig>:
  *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
  *            @arg RTC_StoreOperation_Set: BCK Bit Set
  * @retval None
  */
void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
{
 8010e40:	b480      	push	{r7}
 8010e42:	b083      	sub	sp, #12
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
 8010e48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010e4a:	4b0e      	ldr	r3, [pc, #56]	; (8010e84 <RTC_DayLightSavingConfig+0x44>)
 8010e4c:	22ca      	movs	r2, #202	; 0xca
 8010e4e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010e50:	4b0c      	ldr	r3, [pc, #48]	; (8010e84 <RTC_DayLightSavingConfig+0x44>)
 8010e52:	2253      	movs	r2, #83	; 0x53
 8010e54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 8010e56:	4b0b      	ldr	r3, [pc, #44]	; (8010e84 <RTC_DayLightSavingConfig+0x44>)
 8010e58:	4a0a      	ldr	r2, [pc, #40]	; (8010e84 <RTC_DayLightSavingConfig+0x44>)
 8010e5a:	6892      	ldr	r2, [r2, #8]
 8010e5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010e60:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 8010e62:	4b08      	ldr	r3, [pc, #32]	; (8010e84 <RTC_DayLightSavingConfig+0x44>)
 8010e64:	4a07      	ldr	r2, [pc, #28]	; (8010e84 <RTC_DayLightSavingConfig+0x44>)
 8010e66:	6891      	ldr	r1, [r2, #8]
 8010e68:	6878      	ldr	r0, [r7, #4]
 8010e6a:	683a      	ldr	r2, [r7, #0]
 8010e6c:	4302      	orrs	r2, r0
 8010e6e:	430a      	orrs	r2, r1
 8010e70:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010e72:	4b04      	ldr	r3, [pc, #16]	; (8010e84 <RTC_DayLightSavingConfig+0x44>)
 8010e74:	22ff      	movs	r2, #255	; 0xff
 8010e76:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010e78:	370c      	adds	r7, #12
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e80:	4770      	bx	lr
 8010e82:	bf00      	nop
 8010e84:	40002800 	.word	0x40002800

08010e88 <RTC_GetStoreOperation>:
  * @retval RTC Day Light Saving stored operation.
  *          - RTC_StoreOperation_Reset
  *          - RTC_StoreOperation_Set       
  */
uint32_t RTC_GetStoreOperation(void)
{
 8010e88:	b480      	push	{r7}
 8010e8a:	af00      	add	r7, sp, #0
  return (RTC->CR & RTC_CR_BCK);
 8010e8c:	4b04      	ldr	r3, [pc, #16]	; (8010ea0 <RTC_GetStoreOperation+0x18>)
 8010e8e:	689b      	ldr	r3, [r3, #8]
 8010e90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
}
 8010e94:	4618      	mov	r0, r3
 8010e96:	46bd      	mov	sp, r7
 8010e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9c:	4770      	bx	lr
 8010e9e:	bf00      	nop
 8010ea0:	40002800 	.word	0x40002800

08010ea4 <RTC_OutputConfig>:
  *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
  *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
  * @retval None
  */
void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
{
 8010ea4:	b480      	push	{r7}
 8010ea6:	b083      	sub	sp, #12
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	6078      	str	r0, [r7, #4]
 8010eac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT(RTC_Output));
  assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010eae:	4b0e      	ldr	r3, [pc, #56]	; (8010ee8 <RTC_OutputConfig+0x44>)
 8010eb0:	22ca      	movs	r2, #202	; 0xca
 8010eb2:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010eb4:	4b0c      	ldr	r3, [pc, #48]	; (8010ee8 <RTC_OutputConfig+0x44>)
 8010eb6:	2253      	movs	r2, #83	; 0x53
 8010eb8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 8010eba:	4b0b      	ldr	r3, [pc, #44]	; (8010ee8 <RTC_OutputConfig+0x44>)
 8010ebc:	4a0a      	ldr	r2, [pc, #40]	; (8010ee8 <RTC_OutputConfig+0x44>)
 8010ebe:	6892      	ldr	r2, [r2, #8]
 8010ec0:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8010ec4:	609a      	str	r2, [r3, #8]

  /* Configure the output selection and polarity */
  RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 8010ec6:	4b08      	ldr	r3, [pc, #32]	; (8010ee8 <RTC_OutputConfig+0x44>)
 8010ec8:	4a07      	ldr	r2, [pc, #28]	; (8010ee8 <RTC_OutputConfig+0x44>)
 8010eca:	6891      	ldr	r1, [r2, #8]
 8010ecc:	6878      	ldr	r0, [r7, #4]
 8010ece:	683a      	ldr	r2, [r7, #0]
 8010ed0:	4302      	orrs	r2, r0
 8010ed2:	430a      	orrs	r2, r1
 8010ed4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010ed6:	4b04      	ldr	r3, [pc, #16]	; (8010ee8 <RTC_OutputConfig+0x44>)
 8010ed8:	22ff      	movs	r2, #255	; 0xff
 8010eda:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010edc:	370c      	adds	r7, #12
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee4:	4770      	bx	lr
 8010ee6:	bf00      	nop
 8010ee8:	40002800 	.word	0x40002800

08010eec <RTC_CoarseCalibConfig>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are initialized
  *          - ERROR: RTC Coarse calibration are not initialized     
  */
ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
{
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b084      	sub	sp, #16
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]
 8010ef4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
  assert_param(IS_RTC_CALIB_VALUE(Value)); 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010efa:	4b0f      	ldr	r3, [pc, #60]	; (8010f38 <RTC_CoarseCalibConfig+0x4c>)
 8010efc:	22ca      	movs	r2, #202	; 0xca
 8010efe:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010f00:	4b0d      	ldr	r3, [pc, #52]	; (8010f38 <RTC_CoarseCalibConfig+0x4c>)
 8010f02:	2253      	movs	r2, #83	; 0x53
 8010f04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8010f06:	f7ff fa7f 	bl	8010408 <RTC_EnterInitMode>
 8010f0a:	4603      	mov	r3, r0
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d102      	bne.n	8010f16 <RTC_CoarseCalibConfig+0x2a>
  {
    status = ERROR;
 8010f10:	2300      	movs	r3, #0
 8010f12:	73fb      	strb	r3, [r7, #15]
 8010f14:	e008      	b.n	8010f28 <RTC_CoarseCalibConfig+0x3c>
  } 
  else
  {
    /* Set the coarse calibration value */
    RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
 8010f16:	4b08      	ldr	r3, [pc, #32]	; (8010f38 <RTC_CoarseCalibConfig+0x4c>)
 8010f18:	6879      	ldr	r1, [r7, #4]
 8010f1a:	683a      	ldr	r2, [r7, #0]
 8010f1c:	430a      	orrs	r2, r1
 8010f1e:	619a      	str	r2, [r3, #24]
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 8010f20:	f7ff faac 	bl	801047c <RTC_ExitInitMode>
    
    status = SUCCESS;
 8010f24:	2301      	movs	r3, #1
 8010f26:	73fb      	strb	r3, [r7, #15]
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010f28:	4b03      	ldr	r3, [pc, #12]	; (8010f38 <RTC_CoarseCalibConfig+0x4c>)
 8010f2a:	22ff      	movs	r2, #255	; 0xff
 8010f2c:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8010f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f30:	4618      	mov	r0, r3
 8010f32:	3710      	adds	r7, #16
 8010f34:	46bd      	mov	sp, r7
 8010f36:	bd80      	pop	{r7, pc}
 8010f38:	40002800 	.word	0x40002800

08010f3c <RTC_CoarseCalibCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are enabled/disabled
  *          - ERROR: RTC Coarse calibration are not enabled/disabled    
  */
ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
{
 8010f3c:	b580      	push	{r7, lr}
 8010f3e:	b084      	sub	sp, #16
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	4603      	mov	r3, r0
 8010f44:	71fb      	strb	r3, [r7, #7]
  ErrorStatus status = ERROR;
 8010f46:	2300      	movs	r3, #0
 8010f48:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010f4a:	4b15      	ldr	r3, [pc, #84]	; (8010fa0 <RTC_CoarseCalibCmd+0x64>)
 8010f4c:	22ca      	movs	r2, #202	; 0xca
 8010f4e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010f50:	4b13      	ldr	r3, [pc, #76]	; (8010fa0 <RTC_CoarseCalibCmd+0x64>)
 8010f52:	2253      	movs	r2, #83	; 0x53
 8010f54:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8010f56:	f7ff fa57 	bl	8010408 <RTC_EnterInitMode>
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d102      	bne.n	8010f66 <RTC_CoarseCalibCmd+0x2a>
  {
    status =  ERROR;
 8010f60:	2300      	movs	r3, #0
 8010f62:	73fb      	strb	r3, [r7, #15]
 8010f64:	e013      	b.n	8010f8e <RTC_CoarseCalibCmd+0x52>
  }
  else
  {
    if (NewState != DISABLE)
 8010f66:	79fb      	ldrb	r3, [r7, #7]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d006      	beq.n	8010f7a <RTC_CoarseCalibCmd+0x3e>
    {
      /* Enable the Coarse Calibration */
      RTC->CR |= (uint32_t)RTC_CR_DCE;
 8010f6c:	4b0c      	ldr	r3, [pc, #48]	; (8010fa0 <RTC_CoarseCalibCmd+0x64>)
 8010f6e:	4a0c      	ldr	r2, [pc, #48]	; (8010fa0 <RTC_CoarseCalibCmd+0x64>)
 8010f70:	6892      	ldr	r2, [r2, #8]
 8010f72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8010f76:	609a      	str	r2, [r3, #8]
 8010f78:	e005      	b.n	8010f86 <RTC_CoarseCalibCmd+0x4a>
    }
    else
    { 
      /* Disable the Coarse Calibration */
      RTC->CR &= (uint32_t)~RTC_CR_DCE;
 8010f7a:	4b09      	ldr	r3, [pc, #36]	; (8010fa0 <RTC_CoarseCalibCmd+0x64>)
 8010f7c:	4a08      	ldr	r2, [pc, #32]	; (8010fa0 <RTC_CoarseCalibCmd+0x64>)
 8010f7e:	6892      	ldr	r2, [r2, #8]
 8010f80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010f84:	609a      	str	r2, [r3, #8]
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 8010f86:	f7ff fa79 	bl	801047c <RTC_ExitInitMode>
    
    status = SUCCESS;
 8010f8a:	2301      	movs	r3, #1
 8010f8c:	73fb      	strb	r3, [r7, #15]
  } 
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010f8e:	4b04      	ldr	r3, [pc, #16]	; (8010fa0 <RTC_CoarseCalibCmd+0x64>)
 8010f90:	22ff      	movs	r2, #255	; 0xff
 8010f92:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8010f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f96:	4618      	mov	r0, r3
 8010f98:	3710      	adds	r7, #16
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	bd80      	pop	{r7, pc}
 8010f9e:	bf00      	nop
 8010fa0:	40002800 	.word	0x40002800

08010fa4 <RTC_CalibOutputCmd>:
  * @param  NewState: new state of the digital calibration Output.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_CalibOutputCmd(FunctionalState NewState)
{
 8010fa4:	b480      	push	{r7}
 8010fa6:	b083      	sub	sp, #12
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	4603      	mov	r3, r0
 8010fac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010fae:	4b0f      	ldr	r3, [pc, #60]	; (8010fec <RTC_CalibOutputCmd+0x48>)
 8010fb0:	22ca      	movs	r2, #202	; 0xca
 8010fb2:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010fb4:	4b0d      	ldr	r3, [pc, #52]	; (8010fec <RTC_CalibOutputCmd+0x48>)
 8010fb6:	2253      	movs	r2, #83	; 0x53
 8010fb8:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (NewState != DISABLE)
 8010fba:	79fb      	ldrb	r3, [r7, #7]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d006      	beq.n	8010fce <RTC_CalibOutputCmd+0x2a>
  {
    /* Enable the RTC clock output */
    RTC->CR |= (uint32_t)RTC_CR_COE;
 8010fc0:	4b0a      	ldr	r3, [pc, #40]	; (8010fec <RTC_CalibOutputCmd+0x48>)
 8010fc2:	4a0a      	ldr	r2, [pc, #40]	; (8010fec <RTC_CalibOutputCmd+0x48>)
 8010fc4:	6892      	ldr	r2, [r2, #8]
 8010fc6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8010fca:	609a      	str	r2, [r3, #8]
 8010fcc:	e005      	b.n	8010fda <RTC_CalibOutputCmd+0x36>
  }
  else
  { 
    /* Disable the RTC clock output */
    RTC->CR &= (uint32_t)~RTC_CR_COE;
 8010fce:	4b07      	ldr	r3, [pc, #28]	; (8010fec <RTC_CalibOutputCmd+0x48>)
 8010fd0:	4a06      	ldr	r2, [pc, #24]	; (8010fec <RTC_CalibOutputCmd+0x48>)
 8010fd2:	6892      	ldr	r2, [r2, #8]
 8010fd4:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8010fd8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010fda:	4b04      	ldr	r3, [pc, #16]	; (8010fec <RTC_CalibOutputCmd+0x48>)
 8010fdc:	22ff      	movs	r2, #255	; 0xff
 8010fde:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010fe0:	370c      	adds	r7, #12
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe8:	4770      	bx	lr
 8010fea:	bf00      	nop
 8010fec:	40002800 	.word	0x40002800

08010ff0 <RTC_CalibOutputConfig>:
  *     @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
  *     @arg RTC_CalibOutput_1Hz  : A signal has a regular waveform at 1Hz.
  * @retval None
*/
void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
{
 8010ff0:	b480      	push	{r7}
 8010ff2:	b083      	sub	sp, #12
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010ff8:	4b0c      	ldr	r3, [pc, #48]	; (801102c <RTC_CalibOutputConfig+0x3c>)
 8010ffa:	22ca      	movs	r2, #202	; 0xca
 8010ffc:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010ffe:	4b0b      	ldr	r3, [pc, #44]	; (801102c <RTC_CalibOutputConfig+0x3c>)
 8011000:	2253      	movs	r2, #83	; 0x53
 8011002:	625a      	str	r2, [r3, #36]	; 0x24
  
  /*clear flags before configuration */
  RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
 8011004:	4b09      	ldr	r3, [pc, #36]	; (801102c <RTC_CalibOutputConfig+0x3c>)
 8011006:	4a09      	ldr	r2, [pc, #36]	; (801102c <RTC_CalibOutputConfig+0x3c>)
 8011008:	6892      	ldr	r2, [r2, #8]
 801100a:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 801100e:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  RTC->CR |= (uint32_t)RTC_CalibOutput;
 8011010:	4b06      	ldr	r3, [pc, #24]	; (801102c <RTC_CalibOutputConfig+0x3c>)
 8011012:	4a06      	ldr	r2, [pc, #24]	; (801102c <RTC_CalibOutputConfig+0x3c>)
 8011014:	6891      	ldr	r1, [r2, #8]
 8011016:	687a      	ldr	r2, [r7, #4]
 8011018:	430a      	orrs	r2, r1
 801101a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 801101c:	4b03      	ldr	r3, [pc, #12]	; (801102c <RTC_CalibOutputConfig+0x3c>)
 801101e:	22ff      	movs	r2, #255	; 0xff
 8011020:	625a      	str	r2, [r3, #36]	; 0x24
}
 8011022:	370c      	adds	r7, #12
 8011024:	46bd      	mov	sp, r7
 8011026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801102a:	4770      	bx	lr
 801102c:	40002800 	.word	0x40002800

08011030 <RTC_SmoothCalibConfig>:
  *          - ERROR: RTC Calib registers are not configured
*/
ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
                                  uint32_t RTC_SmoothCalibPlusPulses,
                                  uint32_t RTC_SmouthCalibMinusPulsesValue)
{
 8011030:	b480      	push	{r7}
 8011032:	b087      	sub	sp, #28
 8011034:	af00      	add	r7, sp, #0
 8011036:	60f8      	str	r0, [r7, #12]
 8011038:	60b9      	str	r1, [r7, #8]
 801103a:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 801103c:	2300      	movs	r3, #0
 801103e:	75fb      	strb	r3, [r7, #23]
  uint32_t recalpfcount = 0;
 8011040:	2300      	movs	r3, #0
 8011042:	613b      	str	r3, [r7, #16]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8011044:	4b1a      	ldr	r3, [pc, #104]	; (80110b0 <RTC_SmoothCalibConfig+0x80>)
 8011046:	22ca      	movs	r2, #202	; 0xca
 8011048:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 801104a:	4b19      	ldr	r3, [pc, #100]	; (80110b0 <RTC_SmoothCalibConfig+0x80>)
 801104c:	2253      	movs	r2, #83	; 0x53
 801104e:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* check if a calibration is pending*/
  if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
 8011050:	4b17      	ldr	r3, [pc, #92]	; (80110b0 <RTC_SmoothCalibConfig+0x80>)
 8011052:	68db      	ldr	r3, [r3, #12]
 8011054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011058:	2b00      	cmp	r3, #0
 801105a:	d00d      	beq.n	8011078 <RTC_SmoothCalibConfig+0x48>
  {
    /* wait until the Calibration is completed*/
    while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 801105c:	e002      	b.n	8011064 <RTC_SmoothCalibConfig+0x34>
    {
      recalpfcount++;
 801105e:	693b      	ldr	r3, [r7, #16]
 8011060:	3301      	adds	r3, #1
 8011062:	613b      	str	r3, [r7, #16]
  
  /* check if a calibration is pending*/
  if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
  {
    /* wait until the Calibration is completed*/
    while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 8011064:	4b12      	ldr	r3, [pc, #72]	; (80110b0 <RTC_SmoothCalibConfig+0x80>)
 8011066:	68db      	ldr	r3, [r3, #12]
 8011068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801106c:	2b00      	cmp	r3, #0
 801106e:	d003      	beq.n	8011078 <RTC_SmoothCalibConfig+0x48>
 8011070:	693b      	ldr	r3, [r7, #16]
 8011072:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011076:	d1f2      	bne.n	801105e <RTC_SmoothCalibConfig+0x2e>
      recalpfcount++;
    }
  }

  /* check if the calibration pending is completed or if there is no calibration operation at all*/
  if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 8011078:	4b0d      	ldr	r3, [pc, #52]	; (80110b0 <RTC_SmoothCalibConfig+0x80>)
 801107a:	68db      	ldr	r3, [r3, #12]
 801107c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011080:	2b00      	cmp	r3, #0
 8011082:	d109      	bne.n	8011098 <RTC_SmoothCalibConfig+0x68>
  {
    /* Configure the Smooth calibration settings */
    RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | (uint32_t)RTC_SmouthCalibMinusPulsesValue);
 8011084:	4b0a      	ldr	r3, [pc, #40]	; (80110b0 <RTC_SmoothCalibConfig+0x80>)
 8011086:	68f9      	ldr	r1, [r7, #12]
 8011088:	68ba      	ldr	r2, [r7, #8]
 801108a:	4311      	orrs	r1, r2
 801108c:	687a      	ldr	r2, [r7, #4]
 801108e:	430a      	orrs	r2, r1
 8011090:	63da      	str	r2, [r3, #60]	; 0x3c

    status = SUCCESS;
 8011092:	2301      	movs	r3, #1
 8011094:	75fb      	strb	r3, [r7, #23]
 8011096:	e001      	b.n	801109c <RTC_SmoothCalibConfig+0x6c>
  }
  else
  {
    status = ERROR;
 8011098:	2300      	movs	r3, #0
 801109a:	75fb      	strb	r3, [r7, #23]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 801109c:	4b04      	ldr	r3, [pc, #16]	; (80110b0 <RTC_SmoothCalibConfig+0x80>)
 801109e:	22ff      	movs	r2, #255	; 0xff
 80110a0:	625a      	str	r2, [r3, #36]	; 0x24
  
  return (ErrorStatus)(status);
 80110a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80110a4:	4618      	mov	r0, r3
 80110a6:	371c      	adds	r7, #28
 80110a8:	46bd      	mov	sp, r7
 80110aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ae:	4770      	bx	lr
 80110b0:	40002800 	.word	0x40002800

080110b4 <RTC_TimeStampCmd>:
  * @param  NewState: new state of the TimeStamp.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
{
 80110b4:	b480      	push	{r7}
 80110b6:	b085      	sub	sp, #20
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	6078      	str	r0, [r7, #4]
 80110bc:	460b      	mov	r3, r1
 80110be:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 80110c0:	2300      	movs	r3, #0
 80110c2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80110c4:	4b12      	ldr	r3, [pc, #72]	; (8011110 <RTC_TimeStampCmd+0x5c>)
 80110c6:	689b      	ldr	r3, [r3, #8]
 80110c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80110cc:	f023 0308 	bic.w	r3, r3, #8
 80110d0:	60fb      	str	r3, [r7, #12]

  /* Get the new configuration */
  if (NewState != DISABLE)
 80110d2:	78fb      	ldrb	r3, [r7, #3]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d006      	beq.n	80110e6 <RTC_TimeStampCmd+0x32>
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 80110d8:	687a      	ldr	r2, [r7, #4]
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	4313      	orrs	r3, r2
 80110de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80110e2:	60fb      	str	r3, [r7, #12]
 80110e4:	e003      	b.n	80110ee <RTC_TimeStampCmd+0x3a>
  }
  else
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 80110e6:	68fa      	ldr	r2, [r7, #12]
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	4313      	orrs	r3, r2
 80110ec:	60fb      	str	r3, [r7, #12]
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80110ee:	4b08      	ldr	r3, [pc, #32]	; (8011110 <RTC_TimeStampCmd+0x5c>)
 80110f0:	22ca      	movs	r2, #202	; 0xca
 80110f2:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80110f4:	4b06      	ldr	r3, [pc, #24]	; (8011110 <RTC_TimeStampCmd+0x5c>)
 80110f6:	2253      	movs	r2, #83	; 0x53
 80110f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Time Stamp TSEDGE and Enable bits */
  RTC->CR = (uint32_t)tmpreg;
 80110fa:	4b05      	ldr	r3, [pc, #20]	; (8011110 <RTC_TimeStampCmd+0x5c>)
 80110fc:	68fa      	ldr	r2, [r7, #12]
 80110fe:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8011100:	4b03      	ldr	r3, [pc, #12]	; (8011110 <RTC_TimeStampCmd+0x5c>)
 8011102:	22ff      	movs	r2, #255	; 0xff
 8011104:	625a      	str	r2, [r3, #36]	; 0x24
}
 8011106:	3714      	adds	r7, #20
 8011108:	46bd      	mov	sp, r7
 801110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801110e:	4770      	bx	lr
 8011110:	40002800 	.word	0x40002800

08011114 <RTC_GetTimeStamp>:
  *                             contains the TimeStamp date values.     
  * @retval None
  */
void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
                                      RTC_DateTypeDef* RTC_StampDateStruct)
{
 8011114:	b580      	push	{r7, lr}
 8011116:	b086      	sub	sp, #24
 8011118:	af00      	add	r7, sp, #0
 801111a:	60f8      	str	r0, [r7, #12]
 801111c:	60b9      	str	r1, [r7, #8]
 801111e:	607a      	str	r2, [r7, #4]
  uint32_t tmptime = 0, tmpdate = 0;
 8011120:	2300      	movs	r3, #0
 8011122:	617b      	str	r3, [r7, #20]
 8011124:	2300      	movs	r3, #0
 8011126:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the TimeStamp time and date registers values */
  tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 8011128:	4b3e      	ldr	r3, [pc, #248]	; (8011224 <RTC_GetTimeStamp+0x110>)
 801112a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801112c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8011130:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8011134:	617b      	str	r3, [r7, #20]
  tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 8011136:	4b3b      	ldr	r3, [pc, #236]	; (8011224 <RTC_GetTimeStamp+0x110>)
 8011138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801113a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801113e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011142:	613b      	str	r3, [r7, #16]

  /* Fill the Time structure fields with the read parameters */
  RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8011144:	697b      	ldr	r3, [r7, #20]
 8011146:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 801114a:	0c1b      	lsrs	r3, r3, #16
 801114c:	b2da      	uxtb	r2, r3
 801114e:	68bb      	ldr	r3, [r7, #8]
 8011150:	701a      	strb	r2, [r3, #0]
  RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 8011152:	697b      	ldr	r3, [r7, #20]
 8011154:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8011158:	0a1b      	lsrs	r3, r3, #8
 801115a:	b2da      	uxtb	r2, r3
 801115c:	68bb      	ldr	r3, [r7, #8]
 801115e:	705a      	strb	r2, [r3, #1]
  RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 8011160:	697b      	ldr	r3, [r7, #20]
 8011162:	b2db      	uxtb	r3, r3
 8011164:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011168:	b2da      	uxtb	r2, r3
 801116a:	68bb      	ldr	r3, [r7, #8]
 801116c:	709a      	strb	r2, [r3, #2]
  RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 801116e:	697b      	ldr	r3, [r7, #20]
 8011170:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011174:	0c1b      	lsrs	r3, r3, #16
 8011176:	b2da      	uxtb	r2, r3
 8011178:	68bb      	ldr	r3, [r7, #8]
 801117a:	70da      	strb	r2, [r3, #3]

  /* Fill the Date structure fields with the read parameters */
  RTC_StampDateStruct->RTC_Year = 0;
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	2200      	movs	r2, #0
 8011180:	70da      	strb	r2, [r3, #3]
  RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8011182:	693b      	ldr	r3, [r7, #16]
 8011184:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8011188:	0a1b      	lsrs	r3, r3, #8
 801118a:	b2da      	uxtb	r2, r3
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	705a      	strb	r2, [r3, #1]
  RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 8011190:	693b      	ldr	r3, [r7, #16]
 8011192:	b2db      	uxtb	r3, r3
 8011194:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011198:	b2da      	uxtb	r2, r3
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	709a      	strb	r2, [r3, #2]
  RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 801119e:	693b      	ldr	r3, [r7, #16]
 80111a0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80111a4:	0b5b      	lsrs	r3, r3, #13
 80111a6:	b2da      	uxtb	r2, r3
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d135      	bne.n	801121e <RTC_GetTimeStamp+0x10a>
  {
    /* Convert the Time structure parameters to Binary format */
    RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 80111b2:	68bb      	ldr	r3, [r7, #8]
 80111b4:	781b      	ldrb	r3, [r3, #0]
 80111b6:	4618      	mov	r0, r3
 80111b8:	f000 faaa 	bl	8011710 <RTC_Bcd2ToByte>
 80111bc:	4603      	mov	r3, r0
 80111be:	461a      	mov	r2, r3
 80111c0:	68bb      	ldr	r3, [r7, #8]
 80111c2:	701a      	strb	r2, [r3, #0]
    RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 80111c4:	68bb      	ldr	r3, [r7, #8]
 80111c6:	785b      	ldrb	r3, [r3, #1]
 80111c8:	4618      	mov	r0, r3
 80111ca:	f000 faa1 	bl	8011710 <RTC_Bcd2ToByte>
 80111ce:	4603      	mov	r3, r0
 80111d0:	461a      	mov	r2, r3
 80111d2:	68bb      	ldr	r3, [r7, #8]
 80111d4:	705a      	strb	r2, [r3, #1]
    RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 80111d6:	68bb      	ldr	r3, [r7, #8]
 80111d8:	789b      	ldrb	r3, [r3, #2]
 80111da:	4618      	mov	r0, r3
 80111dc:	f000 fa98 	bl	8011710 <RTC_Bcd2ToByte>
 80111e0:	4603      	mov	r3, r0
 80111e2:	461a      	mov	r2, r3
 80111e4:	68bb      	ldr	r3, [r7, #8]
 80111e6:	709a      	strb	r2, [r3, #2]

    /* Convert the Date structure parameters to Binary format */
    RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	785b      	ldrb	r3, [r3, #1]
 80111ec:	4618      	mov	r0, r3
 80111ee:	f000 fa8f 	bl	8011710 <RTC_Bcd2ToByte>
 80111f2:	4603      	mov	r3, r0
 80111f4:	461a      	mov	r2, r3
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	705a      	strb	r2, [r3, #1]
    RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	789b      	ldrb	r3, [r3, #2]
 80111fe:	4618      	mov	r0, r3
 8011200:	f000 fa86 	bl	8011710 <RTC_Bcd2ToByte>
 8011204:	4603      	mov	r3, r0
 8011206:	461a      	mov	r2, r3
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	709a      	strb	r2, [r3, #2]
    RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	781b      	ldrb	r3, [r3, #0]
 8011210:	4618      	mov	r0, r3
 8011212:	f000 fa7d 	bl	8011710 <RTC_Bcd2ToByte>
 8011216:	4603      	mov	r3, r0
 8011218:	461a      	mov	r2, r3
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	701a      	strb	r2, [r3, #0]
  }
}
 801121e:	3718      	adds	r7, #24
 8011220:	46bd      	mov	sp, r7
 8011222:	bd80      	pop	{r7, pc}
 8011224:	40002800 	.word	0x40002800

08011228 <RTC_GetTimeStampSubSecond>:
  * @brief  Get the RTC timestamp Sub seconds value.
  * @param  None
  * @retval RTC current timestamp Sub seconds value.
  */
uint32_t RTC_GetTimeStampSubSecond(void)
{
 8011228:	b480      	push	{r7}
 801122a:	af00      	add	r7, sp, #0
  /* Get timestamp sub seconds values from the correspondent registers */
  return (uint32_t)(RTC->TSSSR);
 801122c:	4b03      	ldr	r3, [pc, #12]	; (801123c <RTC_GetTimeStampSubSecond+0x14>)
 801122e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8011230:	4618      	mov	r0, r3
 8011232:	46bd      	mov	sp, r7
 8011234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011238:	4770      	bx	lr
 801123a:	bf00      	nop
 801123c:	40002800 	.word	0x40002800

08011240 <RTC_TamperTriggerConfig>:
  *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
  *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
  * @retval None
  */
void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
{
 8011240:	b480      	push	{r7}
 8011242:	b083      	sub	sp, #12
 8011244:	af00      	add	r7, sp, #0
 8011246:	6078      	str	r0, [r7, #4]
 8011248:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
  assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
 
  if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 801124a:	683b      	ldr	r3, [r7, #0]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d108      	bne.n	8011262 <RTC_TamperTriggerConfig+0x22>
  {  
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 8011250:	4b0a      	ldr	r3, [pc, #40]	; (801127c <RTC_TamperTriggerConfig+0x3c>)
 8011252:	4a0a      	ldr	r2, [pc, #40]	; (801127c <RTC_TamperTriggerConfig+0x3c>)
 8011254:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8011256:	687a      	ldr	r2, [r7, #4]
 8011258:	0052      	lsls	r2, r2, #1
 801125a:	43d2      	mvns	r2, r2
 801125c:	400a      	ands	r2, r1
 801125e:	641a      	str	r2, [r3, #64]	; 0x40
 8011260:	e006      	b.n	8011270 <RTC_TamperTriggerConfig+0x30>
  }
  else
  { 
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 8011262:	4b06      	ldr	r3, [pc, #24]	; (801127c <RTC_TamperTriggerConfig+0x3c>)
 8011264:	4a05      	ldr	r2, [pc, #20]	; (801127c <RTC_TamperTriggerConfig+0x3c>)
 8011266:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8011268:	687a      	ldr	r2, [r7, #4]
 801126a:	0052      	lsls	r2, r2, #1
 801126c:	430a      	orrs	r2, r1
 801126e:	641a      	str	r2, [r3, #64]	; 0x40
  }  
}
 8011270:	370c      	adds	r7, #12
 8011272:	46bd      	mov	sp, r7
 8011274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011278:	4770      	bx	lr
 801127a:	bf00      	nop
 801127c:	40002800 	.word	0x40002800

08011280 <RTC_TamperCmd>:
  * @param  NewState: new state of the tamper pin.
  *          This parameter can be: ENABLE or DISABLE.                   
  * @retval None
  */
void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
{
 8011280:	b480      	push	{r7}
 8011282:	b083      	sub	sp, #12
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
 8011288:	460b      	mov	r3, r1
 801128a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 801128c:	78fb      	ldrb	r3, [r7, #3]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d006      	beq.n	80112a0 <RTC_TamperCmd+0x20>
  {
    /* Enable the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_Tamper;
 8011292:	4b09      	ldr	r3, [pc, #36]	; (80112b8 <RTC_TamperCmd+0x38>)
 8011294:	4a08      	ldr	r2, [pc, #32]	; (80112b8 <RTC_TamperCmd+0x38>)
 8011296:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8011298:	687a      	ldr	r2, [r7, #4]
 801129a:	430a      	orrs	r2, r1
 801129c:	641a      	str	r2, [r3, #64]	; 0x40
 801129e:	e006      	b.n	80112ae <RTC_TamperCmd+0x2e>
  }
  else
  {
    /* Disable the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 80112a0:	4b05      	ldr	r3, [pc, #20]	; (80112b8 <RTC_TamperCmd+0x38>)
 80112a2:	4a05      	ldr	r2, [pc, #20]	; (80112b8 <RTC_TamperCmd+0x38>)
 80112a4:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80112a6:	687a      	ldr	r2, [r7, #4]
 80112a8:	43d2      	mvns	r2, r2
 80112aa:	400a      	ands	r2, r1
 80112ac:	641a      	str	r2, [r3, #64]	; 0x40
  }  
}
 80112ae:	370c      	adds	r7, #12
 80112b0:	46bd      	mov	sp, r7
 80112b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b6:	4770      	bx	lr
 80112b8:	40002800 	.word	0x40002800

080112bc <RTC_TamperFilterConfig>:
  *     @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
  *                                    samples at the active level 
  * @retval None
  */
void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
{
 80112bc:	b480      	push	{r7}
 80112be:	b083      	sub	sp, #12
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
   
  /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 80112c4:	4b08      	ldr	r3, [pc, #32]	; (80112e8 <RTC_TamperFilterConfig+0x2c>)
 80112c6:	4a08      	ldr	r2, [pc, #32]	; (80112e8 <RTC_TamperFilterConfig+0x2c>)
 80112c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80112ca:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 80112ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
 80112d0:	4b05      	ldr	r3, [pc, #20]	; (80112e8 <RTC_TamperFilterConfig+0x2c>)
 80112d2:	4a05      	ldr	r2, [pc, #20]	; (80112e8 <RTC_TamperFilterConfig+0x2c>)
 80112d4:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80112d6:	687a      	ldr	r2, [r7, #4]
 80112d8:	430a      	orrs	r2, r1
 80112da:	641a      	str	r2, [r3, #64]	; 0x40
}
 80112dc:	370c      	adds	r7, #12
 80112de:	46bd      	mov	sp, r7
 80112e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e4:	4770      	bx	lr
 80112e6:	bf00      	nop
 80112e8:	40002800 	.word	0x40002800

080112ec <RTC_TamperSamplingFreqConfig>:
  *     @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
  *                                           with a frequency =  RTCCLK / 256  
  * @retval None
  */
void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
{
 80112ec:	b480      	push	{r7}
 80112ee:	b083      	sub	sp, #12
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
 
  /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 80112f4:	4b08      	ldr	r3, [pc, #32]	; (8011318 <RTC_TamperSamplingFreqConfig+0x2c>)
 80112f6:	4a08      	ldr	r2, [pc, #32]	; (8011318 <RTC_TamperSamplingFreqConfig+0x2c>)
 80112f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80112fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80112fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
 8011300:	4b05      	ldr	r3, [pc, #20]	; (8011318 <RTC_TamperSamplingFreqConfig+0x2c>)
 8011302:	4a05      	ldr	r2, [pc, #20]	; (8011318 <RTC_TamperSamplingFreqConfig+0x2c>)
 8011304:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8011306:	687a      	ldr	r2, [r7, #4]
 8011308:	430a      	orrs	r2, r1
 801130a:	641a      	str	r2, [r3, #64]	; 0x40
}
 801130c:	370c      	adds	r7, #12
 801130e:	46bd      	mov	sp, r7
 8011310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011314:	4770      	bx	lr
 8011316:	bf00      	nop
 8011318:	40002800 	.word	0x40002800

0801131c <RTC_TamperPinsPrechargeDuration>:
  *     @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are precharged before sampling during 4 RTCCLK cycle    
  *     @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are precharged before sampling during 8 RTCCLK cycle
  * @retval None
  */
void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
{
 801131c:	b480      	push	{r7}
 801131e:	b083      	sub	sp, #12
 8011320:	af00      	add	r7, sp, #0
 8011322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
   
  /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 8011324:	4b08      	ldr	r3, [pc, #32]	; (8011348 <RTC_TamperPinsPrechargeDuration+0x2c>)
 8011326:	4a08      	ldr	r2, [pc, #32]	; (8011348 <RTC_TamperPinsPrechargeDuration+0x2c>)
 8011328:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801132a:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 801132e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
 8011330:	4b05      	ldr	r3, [pc, #20]	; (8011348 <RTC_TamperPinsPrechargeDuration+0x2c>)
 8011332:	4a05      	ldr	r2, [pc, #20]	; (8011348 <RTC_TamperPinsPrechargeDuration+0x2c>)
 8011334:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8011336:	687a      	ldr	r2, [r7, #4]
 8011338:	430a      	orrs	r2, r1
 801133a:	641a      	str	r2, [r3, #64]	; 0x40
}
 801133c:	370c      	adds	r7, #12
 801133e:	46bd      	mov	sp, r7
 8011340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011344:	4770      	bx	lr
 8011346:	bf00      	nop
 8011348:	40002800 	.word	0x40002800

0801134c <RTC_TimeStampOnTamperDetectionCmd>:
  * @param  NewState: new state of the timestamp on tamper event.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
{
 801134c:	b480      	push	{r7}
 801134e:	b083      	sub	sp, #12
 8011350:	af00      	add	r7, sp, #0
 8011352:	4603      	mov	r3, r0
 8011354:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
   
  if (NewState != DISABLE)
 8011356:	79fb      	ldrb	r3, [r7, #7]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d006      	beq.n	801136a <RTC_TimeStampOnTamperDetectionCmd+0x1e>
  {
    /* Save timestamp on tamper detection event */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 801135c:	4b08      	ldr	r3, [pc, #32]	; (8011380 <RTC_TimeStampOnTamperDetectionCmd+0x34>)
 801135e:	4a08      	ldr	r2, [pc, #32]	; (8011380 <RTC_TimeStampOnTamperDetectionCmd+0x34>)
 8011360:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8011362:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8011366:	641a      	str	r2, [r3, #64]	; 0x40
 8011368:	e005      	b.n	8011376 <RTC_TimeStampOnTamperDetectionCmd+0x2a>
  }
  else
  {
    /* Tamper detection does not cause a timestamp to be saved */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
 801136a:	4b05      	ldr	r3, [pc, #20]	; (8011380 <RTC_TimeStampOnTamperDetectionCmd+0x34>)
 801136c:	4a04      	ldr	r2, [pc, #16]	; (8011380 <RTC_TimeStampOnTamperDetectionCmd+0x34>)
 801136e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8011370:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011374:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8011376:	370c      	adds	r7, #12
 8011378:	46bd      	mov	sp, r7
 801137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801137e:	4770      	bx	lr
 8011380:	40002800 	.word	0x40002800

08011384 <RTC_TamperPullUpCmd>:
  * @param  NewState: new state of tamper pull up.
  *   This parameter can be: ENABLE or DISABLE.                   
  * @retval None
  */
void RTC_TamperPullUpCmd(FunctionalState NewState)
{
 8011384:	b480      	push	{r7}
 8011386:	b083      	sub	sp, #12
 8011388:	af00      	add	r7, sp, #0
 801138a:	4603      	mov	r3, r0
 801138c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
 if (NewState != DISABLE)
 801138e:	79fb      	ldrb	r3, [r7, #7]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d006      	beq.n	80113a2 <RTC_TamperPullUpCmd+0x1e>
  {
    /* Enable precharge of the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 8011394:	4b08      	ldr	r3, [pc, #32]	; (80113b8 <RTC_TamperPullUpCmd+0x34>)
 8011396:	4a08      	ldr	r2, [pc, #32]	; (80113b8 <RTC_TamperPullUpCmd+0x34>)
 8011398:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801139a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801139e:	641a      	str	r2, [r3, #64]	; 0x40
 80113a0:	e005      	b.n	80113ae <RTC_TamperPullUpCmd+0x2a>
  }
  else
  {
    /* Disable precharge of the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
 80113a2:	4b05      	ldr	r3, [pc, #20]	; (80113b8 <RTC_TamperPullUpCmd+0x34>)
 80113a4:	4a04      	ldr	r2, [pc, #16]	; (80113b8 <RTC_TamperPullUpCmd+0x34>)
 80113a6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80113a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80113ac:	641a      	str	r2, [r3, #64]	; 0x40
  } 
}
 80113ae:	370c      	adds	r7, #12
 80113b0:	46bd      	mov	sp, r7
 80113b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b6:	4770      	bx	lr
 80113b8:	40002800 	.word	0x40002800

080113bc <RTC_WriteBackupRegister>:
  *                          specify the register.
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
{
 80113bc:	b480      	push	{r7}
 80113be:	b085      	sub	sp, #20
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
 80113c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 80113c6:	2300      	movs	r3, #0
 80113c8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 80113ca:	4b07      	ldr	r3, [pc, #28]	; (80113e8 <RTC_WriteBackupRegister+0x2c>)
 80113cc:	60fb      	str	r3, [r7, #12]
  tmp += (RTC_BKP_DR * 4);
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	009a      	lsls	r2, r3, #2
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	4413      	add	r3, r2
 80113d6:	60fb      	str	r3, [r7, #12]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	683a      	ldr	r2, [r7, #0]
 80113dc:	601a      	str	r2, [r3, #0]
}
 80113de:	3714      	adds	r7, #20
 80113e0:	46bd      	mov	sp, r7
 80113e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e6:	4770      	bx	lr
 80113e8:	40002850 	.word	0x40002850

080113ec <RTC_ReadBackupRegister>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
  *                          specify the register.                   
  * @retval None
  */
uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
{
 80113ec:	b480      	push	{r7}
 80113ee:	b085      	sub	sp, #20
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 80113f4:	2300      	movs	r3, #0
 80113f6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 80113f8:	4b07      	ldr	r3, [pc, #28]	; (8011418 <RTC_ReadBackupRegister+0x2c>)
 80113fa:	60fb      	str	r3, [r7, #12]
  tmp += (RTC_BKP_DR * 4);
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	009a      	lsls	r2, r3, #2
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	4413      	add	r3, r2
 8011404:	60fb      	str	r3, [r7, #12]
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	681b      	ldr	r3, [r3, #0]
}
 801140a:	4618      	mov	r0, r3
 801140c:	3714      	adds	r7, #20
 801140e:	46bd      	mov	sp, r7
 8011410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011414:	4770      	bx	lr
 8011416:	bf00      	nop
 8011418:	40002850 	.word	0x40002850

0801141c <RTC_TamperPinSelection>:
  *            @arg RTC_TamperPin_PC13: PC13 is selected as RTC Tamper Pin.
  *            @arg RTC_TamperPin_PI8: PI8 is selected as RTC Tamper Pin.    
  * @retval None
  */
void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
{
 801141c:	b480      	push	{r7}
 801141e:	b083      	sub	sp, #12
 8011420:	af00      	add	r7, sp, #0
 8011422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
 8011424:	4b08      	ldr	r3, [pc, #32]	; (8011448 <RTC_TamperPinSelection+0x2c>)
 8011426:	4a08      	ldr	r2, [pc, #32]	; (8011448 <RTC_TamperPinSelection+0x2c>)
 8011428:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801142a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801142e:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 8011430:	4b05      	ldr	r3, [pc, #20]	; (8011448 <RTC_TamperPinSelection+0x2c>)
 8011432:	4a05      	ldr	r2, [pc, #20]	; (8011448 <RTC_TamperPinSelection+0x2c>)
 8011434:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8011436:	687a      	ldr	r2, [r7, #4]
 8011438:	430a      	orrs	r2, r1
 801143a:	641a      	str	r2, [r3, #64]	; 0x40
}
 801143c:	370c      	adds	r7, #12
 801143e:	46bd      	mov	sp, r7
 8011440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011444:	4770      	bx	lr
 8011446:	bf00      	nop
 8011448:	40002800 	.word	0x40002800

0801144c <RTC_TimeStampPinSelection>:
  *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
  *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
  * @retval None
  */
void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
{
 801144c:	b480      	push	{r7}
 801144e:	b083      	sub	sp, #12
 8011450:	af00      	add	r7, sp, #0
 8011452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
 8011454:	4b08      	ldr	r3, [pc, #32]	; (8011478 <RTC_TimeStampPinSelection+0x2c>)
 8011456:	4a08      	ldr	r2, [pc, #32]	; (8011478 <RTC_TimeStampPinSelection+0x2c>)
 8011458:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801145a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 801145e:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 8011460:	4b05      	ldr	r3, [pc, #20]	; (8011478 <RTC_TimeStampPinSelection+0x2c>)
 8011462:	4a05      	ldr	r2, [pc, #20]	; (8011478 <RTC_TimeStampPinSelection+0x2c>)
 8011464:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8011466:	687a      	ldr	r2, [r7, #4]
 8011468:	430a      	orrs	r2, r1
 801146a:	641a      	str	r2, [r3, #64]	; 0x40
}
 801146c:	370c      	adds	r7, #12
 801146e:	46bd      	mov	sp, r7
 8011470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011474:	4770      	bx	lr
 8011476:	bf00      	nop
 8011478:	40002800 	.word	0x40002800

0801147c <RTC_OutputTypeConfig>:
  *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
  *                                    Push Pull mode.    
  * @retval None
  */
void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
{
 801147c:	b480      	push	{r7}
 801147e:	b083      	sub	sp, #12
 8011480:	af00      	add	r7, sp, #0
 8011482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 8011484:	4b08      	ldr	r3, [pc, #32]	; (80114a8 <RTC_OutputTypeConfig+0x2c>)
 8011486:	4a08      	ldr	r2, [pc, #32]	; (80114a8 <RTC_OutputTypeConfig+0x2c>)
 8011488:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801148a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801148e:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 8011490:	4b05      	ldr	r3, [pc, #20]	; (80114a8 <RTC_OutputTypeConfig+0x2c>)
 8011492:	4a05      	ldr	r2, [pc, #20]	; (80114a8 <RTC_OutputTypeConfig+0x2c>)
 8011494:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8011496:	687a      	ldr	r2, [r7, #4]
 8011498:	430a      	orrs	r2, r1
 801149a:	641a      	str	r2, [r3, #64]	; 0x40
}
 801149c:	370c      	adds	r7, #12
 801149e:	46bd      	mov	sp, r7
 80114a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a4:	4770      	bx	lr
 80114a6:	bf00      	nop
 80114a8:	40002800 	.word	0x40002800

080114ac <RTC_SynchroShiftConfig>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Shift registers are configured
  *          - ERROR: RTC Shift registers are not configured
*/
ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	b084      	sub	sp, #16
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
 80114b4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80114b6:	2300      	movs	r3, #0
 80114b8:	73fb      	strb	r3, [r7, #15]
  uint32_t shpfcount = 0;
 80114ba:	2300      	movs	r3, #0
 80114bc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
  assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80114be:	4b21      	ldr	r3, [pc, #132]	; (8011544 <RTC_SynchroShiftConfig+0x98>)
 80114c0:	22ca      	movs	r2, #202	; 0xca
 80114c2:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80114c4:	4b1f      	ldr	r3, [pc, #124]	; (8011544 <RTC_SynchroShiftConfig+0x98>)
 80114c6:	2253      	movs	r2, #83	; 0x53
 80114c8:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Check if a Shift is pending*/
  if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
 80114ca:	4b1e      	ldr	r3, [pc, #120]	; (8011544 <RTC_SynchroShiftConfig+0x98>)
 80114cc:	68db      	ldr	r3, [r3, #12]
 80114ce:	f003 0308 	and.w	r3, r3, #8
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d00d      	beq.n	80114f2 <RTC_SynchroShiftConfig+0x46>
  {
    /* Wait until the shift is completed*/
    while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 80114d6:	e002      	b.n	80114de <RTC_SynchroShiftConfig+0x32>
    {
      shpfcount++;
 80114d8:	68bb      	ldr	r3, [r7, #8]
 80114da:	3301      	adds	r3, #1
 80114dc:	60bb      	str	r3, [r7, #8]
  
  /* Check if a Shift is pending*/
  if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
  {
    /* Wait until the shift is completed*/
    while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 80114de:	4b19      	ldr	r3, [pc, #100]	; (8011544 <RTC_SynchroShiftConfig+0x98>)
 80114e0:	68db      	ldr	r3, [r3, #12]
 80114e2:	f003 0308 	and.w	r3, r3, #8
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d003      	beq.n	80114f2 <RTC_SynchroShiftConfig+0x46>
 80114ea:	68bb      	ldr	r3, [r7, #8]
 80114ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80114f0:	d1f2      	bne.n	80114d8 <RTC_SynchroShiftConfig+0x2c>
      shpfcount++;
    }
  }

  /* Check if the Shift pending is completed or if there is no Shift operation at all*/
  if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 80114f2:	4b14      	ldr	r3, [pc, #80]	; (8011544 <RTC_SynchroShiftConfig+0x98>)
 80114f4:	68db      	ldr	r3, [r3, #12]
 80114f6:	f003 0308 	and.w	r3, r3, #8
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d118      	bne.n	8011530 <RTC_SynchroShiftConfig+0x84>
  {
    /* check if the reference clock detection is disabled */
    if((RTC->CR & RTC_CR_REFCKON) == RESET)
 80114fe:	4b11      	ldr	r3, [pc, #68]	; (8011544 <RTC_SynchroShiftConfig+0x98>)
 8011500:	689b      	ldr	r3, [r3, #8]
 8011502:	f003 0310 	and.w	r3, r3, #16
 8011506:	2b00      	cmp	r3, #0
 8011508:	d10f      	bne.n	801152a <RTC_SynchroShiftConfig+0x7e>
    {
      /* Configure the Shift settings */
      RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
 801150a:	4b0e      	ldr	r3, [pc, #56]	; (8011544 <RTC_SynchroShiftConfig+0x98>)
 801150c:	6839      	ldr	r1, [r7, #0]
 801150e:	687a      	ldr	r2, [r7, #4]
 8011510:	430a      	orrs	r2, r1
 8011512:	62da      	str	r2, [r3, #44]	; 0x2c
    
      if(RTC_WaitForSynchro() == ERROR)
 8011514:	f7fe ffc0 	bl	8010498 <RTC_WaitForSynchro>
 8011518:	4603      	mov	r3, r0
 801151a:	2b00      	cmp	r3, #0
 801151c:	d102      	bne.n	8011524 <RTC_SynchroShiftConfig+0x78>
      {
        status = ERROR;
 801151e:	2300      	movs	r3, #0
 8011520:	73fb      	strb	r3, [r7, #15]
 8011522:	e007      	b.n	8011534 <RTC_SynchroShiftConfig+0x88>
      }
      else
      {
        status = SUCCESS;
 8011524:	2301      	movs	r3, #1
 8011526:	73fb      	strb	r3, [r7, #15]
 8011528:	e004      	b.n	8011534 <RTC_SynchroShiftConfig+0x88>
      }
    }
    else
    {
      status = ERROR;
 801152a:	2300      	movs	r3, #0
 801152c:	73fb      	strb	r3, [r7, #15]
 801152e:	e001      	b.n	8011534 <RTC_SynchroShiftConfig+0x88>
    }
  }
  else
  {
    status = ERROR;
 8011530:	2300      	movs	r3, #0
 8011532:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8011534:	4b03      	ldr	r3, [pc, #12]	; (8011544 <RTC_SynchroShiftConfig+0x98>)
 8011536:	22ff      	movs	r2, #255	; 0xff
 8011538:	625a      	str	r2, [r3, #36]	; 0x24
  
  return (ErrorStatus)(status);
 801153a:	7bfb      	ldrb	r3, [r7, #15]
}
 801153c:	4618      	mov	r0, r3
 801153e:	3710      	adds	r7, #16
 8011540:	46bd      	mov	sp, r7
 8011542:	bd80      	pop	{r7, pc}
 8011544:	40002800 	.word	0x40002800

08011548 <RTC_ITConfig>:
  * @param  NewState: new state of the specified RTC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
{
 8011548:	b480      	push	{r7}
 801154a:	b083      	sub	sp, #12
 801154c:	af00      	add	r7, sp, #0
 801154e:	6078      	str	r0, [r7, #4]
 8011550:	460b      	mov	r3, r1
 8011552:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RTC_CONFIG_IT(RTC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8011554:	4b19      	ldr	r3, [pc, #100]	; (80115bc <RTC_ITConfig+0x74>)
 8011556:	22ca      	movs	r2, #202	; 0xca
 8011558:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 801155a:	4b18      	ldr	r3, [pc, #96]	; (80115bc <RTC_ITConfig+0x74>)
 801155c:	2253      	movs	r2, #83	; 0x53
 801155e:	625a      	str	r2, [r3, #36]	; 0x24

  if (NewState != DISABLE)
 8011560:	78fb      	ldrb	r3, [r7, #3]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d010      	beq.n	8011588 <RTC_ITConfig+0x40>
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 8011566:	4b15      	ldr	r3, [pc, #84]	; (80115bc <RTC_ITConfig+0x74>)
 8011568:	4a14      	ldr	r2, [pc, #80]	; (80115bc <RTC_ITConfig+0x74>)
 801156a:	6891      	ldr	r1, [r2, #8]
 801156c:	687a      	ldr	r2, [r7, #4]
 801156e:	f022 0204 	bic.w	r2, r2, #4
 8011572:	430a      	orrs	r2, r1
 8011574:	609a      	str	r2, [r3, #8]
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 8011576:	4b11      	ldr	r3, [pc, #68]	; (80115bc <RTC_ITConfig+0x74>)
 8011578:	4a10      	ldr	r2, [pc, #64]	; (80115bc <RTC_ITConfig+0x74>)
 801157a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 801157c:	687a      	ldr	r2, [r7, #4]
 801157e:	f002 0204 	and.w	r2, r2, #4
 8011582:	430a      	orrs	r2, r1
 8011584:	641a      	str	r2, [r3, #64]	; 0x40
 8011586:	e011      	b.n	80115ac <RTC_ITConfig+0x64>
  }
  else
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 8011588:	4b0c      	ldr	r3, [pc, #48]	; (80115bc <RTC_ITConfig+0x74>)
 801158a:	4a0c      	ldr	r2, [pc, #48]	; (80115bc <RTC_ITConfig+0x74>)
 801158c:	6891      	ldr	r1, [r2, #8]
 801158e:	687a      	ldr	r2, [r7, #4]
 8011590:	f022 0204 	bic.w	r2, r2, #4
 8011594:	43d2      	mvns	r2, r2
 8011596:	400a      	ands	r2, r1
 8011598:	609a      	str	r2, [r3, #8]
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 801159a:	4b08      	ldr	r3, [pc, #32]	; (80115bc <RTC_ITConfig+0x74>)
 801159c:	4a07      	ldr	r2, [pc, #28]	; (80115bc <RTC_ITConfig+0x74>)
 801159e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80115a0:	687a      	ldr	r2, [r7, #4]
 80115a2:	f002 0204 	and.w	r2, r2, #4
 80115a6:	43d2      	mvns	r2, r2
 80115a8:	400a      	ands	r2, r1
 80115aa:	641a      	str	r2, [r3, #64]	; 0x40
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80115ac:	4b03      	ldr	r3, [pc, #12]	; (80115bc <RTC_ITConfig+0x74>)
 80115ae:	22ff      	movs	r2, #255	; 0xff
 80115b0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80115b2:	370c      	adds	r7, #12
 80115b4:	46bd      	mov	sp, r7
 80115b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ba:	4770      	bx	lr
 80115bc:	40002800 	.word	0x40002800

080115c0 <RTC_GetFlagStatus>:
  *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
  *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
  * @retval The new state of RTC_FLAG (SET or RESET).
  */
FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
{
 80115c0:	b480      	push	{r7}
 80115c2:	b085      	sub	sp, #20
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80115c8:	2300      	movs	r3, #0
 80115ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 80115cc:	2300      	movs	r3, #0
 80115ce:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
  
  /* Get all the flags */
  tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 80115d0:	4b0a      	ldr	r3, [pc, #40]	; (80115fc <RTC_GetFlagStatus+0x3c>)
 80115d2:	68da      	ldr	r2, [r3, #12]
 80115d4:	4b0a      	ldr	r3, [pc, #40]	; (8011600 <RTC_GetFlagStatus+0x40>)
 80115d6:	4013      	ands	r3, r2
 80115d8:	60bb      	str	r3, [r7, #8]
  
  /* Return the status of the flag */
  if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
 80115da:	68ba      	ldr	r2, [r7, #8]
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	4013      	ands	r3, r2
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d002      	beq.n	80115ea <RTC_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 80115e4:	2301      	movs	r3, #1
 80115e6:	73fb      	strb	r3, [r7, #15]
 80115e8:	e001      	b.n	80115ee <RTC_GetFlagStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
 80115ea:	2300      	movs	r3, #0
 80115ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80115ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80115f0:	4618      	mov	r0, r3
 80115f2:	3714      	adds	r7, #20
 80115f4:	46bd      	mov	sp, r7
 80115f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115fa:	4770      	bx	lr
 80115fc:	40002800 	.word	0x40002800
 8011600:	00013f7f 	.word	0x00013f7f

08011604 <RTC_ClearFlag>:
  *            @arg RTC_FLAG_ALRAF: Alarm A flag
  *            @arg RTC_FLAG_RSF: Registers Synchronized flag
  * @retval None
  */
void RTC_ClearFlag(uint32_t RTC_FLAG)
{
 8011604:	b480      	push	{r7}
 8011606:	b083      	sub	sp, #12
 8011608:	af00      	add	r7, sp, #0
 801160a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));

  /* Clear the Flags in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT)));  
 801160c:	4b08      	ldr	r3, [pc, #32]	; (8011630 <RTC_ClearFlag+0x2c>)
 801160e:	687a      	ldr	r2, [r7, #4]
 8011610:	b292      	uxth	r2, r2
 8011612:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8011616:	43d1      	mvns	r1, r2
 8011618:	4a05      	ldr	r2, [pc, #20]	; (8011630 <RTC_ClearFlag+0x2c>)
 801161a:	68d2      	ldr	r2, [r2, #12]
 801161c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8011620:	430a      	orrs	r2, r1
 8011622:	60da      	str	r2, [r3, #12]
}
 8011624:	370c      	adds	r7, #12
 8011626:	46bd      	mov	sp, r7
 8011628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162c:	4770      	bx	lr
 801162e:	bf00      	nop
 8011630:	40002800 	.word	0x40002800

08011634 <RTC_GetITStatus>:
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval The new state of RTC_IT (SET or RESET).
  */
ITStatus RTC_GetITStatus(uint32_t RTC_IT)
{
 8011634:	b480      	push	{r7}
 8011636:	b087      	sub	sp, #28
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 801163c:	2300      	movs	r3, #0
 801163e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0, enablestatus = 0;
 8011640:	2300      	movs	r3, #0
 8011642:	613b      	str	r3, [r7, #16]
 8011644:	2300      	movs	r3, #0
 8011646:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_RTC_GET_IT(RTC_IT));
  
  /* Get the TAMPER Interrupt enable bit and pending bit */
  tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 8011648:	4b13      	ldr	r3, [pc, #76]	; (8011698 <RTC_GetITStatus+0x64>)
 801164a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801164c:	f003 0304 	and.w	r3, r3, #4
 8011650:	613b      	str	r3, [r7, #16]
 
  /* Get the Interrupt enable Status */
  enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 8011652:	4b11      	ldr	r3, [pc, #68]	; (8011698 <RTC_GetITStatus+0x64>)
 8011654:	689a      	ldr	r2, [r3, #8]
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	401a      	ands	r2, r3
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	0bd9      	lsrs	r1, r3, #15
 801165e:	693b      	ldr	r3, [r7, #16]
 8011660:	400b      	ands	r3, r1
 8011662:	4313      	orrs	r3, r2
 8011664:	60fb      	str	r3, [r7, #12]
  
  /* Get the Interrupt pending bit */
  tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 8011666:	4b0c      	ldr	r3, [pc, #48]	; (8011698 <RTC_GetITStatus+0x64>)
 8011668:	68da      	ldr	r2, [r3, #12]
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	091b      	lsrs	r3, r3, #4
 801166e:	4013      	ands	r3, r2
 8011670:	613b      	str	r3, [r7, #16]
  
  /* Get the status of the Interrupt */
  if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d006      	beq.n	8011686 <RTC_GetITStatus+0x52>
 8011678:	693b      	ldr	r3, [r7, #16]
 801167a:	b29b      	uxth	r3, r3
 801167c:	2b00      	cmp	r3, #0
 801167e:	d002      	beq.n	8011686 <RTC_GetITStatus+0x52>
  {
    bitstatus = SET;
 8011680:	2301      	movs	r3, #1
 8011682:	75fb      	strb	r3, [r7, #23]
 8011684:	e001      	b.n	801168a <RTC_GetITStatus+0x56>
  }
  else
  {
    bitstatus = RESET;
 8011686:	2300      	movs	r3, #0
 8011688:	75fb      	strb	r3, [r7, #23]
  }
  return bitstatus;
 801168a:	7dfb      	ldrb	r3, [r7, #23]
}
 801168c:	4618      	mov	r0, r3
 801168e:	371c      	adds	r7, #28
 8011690:	46bd      	mov	sp, r7
 8011692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011696:	4770      	bx	lr
 8011698:	40002800 	.word	0x40002800

0801169c <RTC_ClearITPendingBit>:
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval None
  */
void RTC_ClearITPendingBit(uint32_t RTC_IT)
{
 801169c:	b480      	push	{r7}
 801169e:	b085      	sub	sp, #20
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80116a4:	2300      	movs	r3, #0
 80116a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_IT(RTC_IT));

  /* Get the RTC_ISR Interrupt pending bits mask */
  tmpreg = (uint32_t)(RTC_IT >> 4);
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	091b      	lsrs	r3, r3, #4
 80116ac:	60fb      	str	r3, [r7, #12]

  /* Clear the interrupt pending bits in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT))); 
 80116ae:	4b08      	ldr	r3, [pc, #32]	; (80116d0 <RTC_ClearITPendingBit+0x34>)
 80116b0:	68fa      	ldr	r2, [r7, #12]
 80116b2:	b292      	uxth	r2, r2
 80116b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80116b8:	43d1      	mvns	r1, r2
 80116ba:	4a05      	ldr	r2, [pc, #20]	; (80116d0 <RTC_ClearITPendingBit+0x34>)
 80116bc:	68d2      	ldr	r2, [r2, #12]
 80116be:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80116c2:	430a      	orrs	r2, r1
 80116c4:	60da      	str	r2, [r3, #12]
}
 80116c6:	3714      	adds	r7, #20
 80116c8:	46bd      	mov	sp, r7
 80116ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ce:	4770      	bx	lr
 80116d0:	40002800 	.word	0x40002800

080116d4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted.
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80116d4:	b480      	push	{r7}
 80116d6:	b085      	sub	sp, #20
 80116d8:	af00      	add	r7, sp, #0
 80116da:	4603      	mov	r3, r0
 80116dc:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0;
 80116de:	2300      	movs	r3, #0
 80116e0:	73fb      	strb	r3, [r7, #15]
  
  while (Value >= 10)
 80116e2:	e005      	b.n	80116f0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80116e4:	7bfb      	ldrb	r3, [r7, #15]
 80116e6:	3301      	adds	r3, #1
 80116e8:	73fb      	strb	r3, [r7, #15]
    Value -= 10;
 80116ea:	79fb      	ldrb	r3, [r7, #7]
 80116ec:	3b0a      	subs	r3, #10
 80116ee:	71fb      	strb	r3, [r7, #7]
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 80116f0:	79fb      	ldrb	r3, [r7, #7]
 80116f2:	2b09      	cmp	r3, #9
 80116f4:	d8f6      	bhi.n	80116e4 <RTC_ByteToBcd2+0x10>
  {
    bcdhigh++;
    Value -= 10;
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 80116f6:	7bfb      	ldrb	r3, [r7, #15]
 80116f8:	011b      	lsls	r3, r3, #4
 80116fa:	b2da      	uxtb	r2, r3
 80116fc:	79fb      	ldrb	r3, [r7, #7]
 80116fe:	4313      	orrs	r3, r2
 8011700:	b2db      	uxtb	r3, r3
}
 8011702:	4618      	mov	r0, r3
 8011704:	3714      	adds	r7, #20
 8011706:	46bd      	mov	sp, r7
 8011708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170c:	4770      	bx	lr
 801170e:	bf00      	nop

08011710 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted.
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8011710:	b480      	push	{r7}
 8011712:	b085      	sub	sp, #20
 8011714:	af00      	add	r7, sp, #0
 8011716:	4603      	mov	r3, r0
 8011718:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0;
 801171a:	2300      	movs	r3, #0
 801171c:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 801171e:	79fb      	ldrb	r3, [r7, #7]
 8011720:	091b      	lsrs	r3, r3, #4
 8011722:	b2db      	uxtb	r3, r3
 8011724:	461a      	mov	r2, r3
 8011726:	0092      	lsls	r2, r2, #2
 8011728:	4413      	add	r3, r2
 801172a:	005b      	lsls	r3, r3, #1
 801172c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & (uint8_t)0x0F));
 801172e:	79fb      	ldrb	r3, [r7, #7]
 8011730:	f003 030f 	and.w	r3, r3, #15
 8011734:	b2da      	uxtb	r2, r3
 8011736:	7bfb      	ldrb	r3, [r7, #15]
 8011738:	4413      	add	r3, r2
 801173a:	b2db      	uxtb	r3, r3
}
 801173c:	4618      	mov	r0, r3
 801173e:	3714      	adds	r7, #20
 8011740:	46bd      	mov	sp, r7
 8011742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011746:	4770      	bx	lr

08011748 <SAI_DeInit>:
  * @param  SAIx: To select the SAIx peripheral, where x can be the different instances 
  *                     
  * @retval None
  */
void SAI_DeInit(SAI_TypeDef* SAIx)
{
 8011748:	b580      	push	{r7, lr}
 801174a:	b082      	sub	sp, #8
 801174c:	af00      	add	r7, sp, #0
 801174e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SAI_PERIPH(SAIx));

  /* Enable SAI1 reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SAI1, ENABLE);
 8011750:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8011754:	2101      	movs	r1, #1
 8011756:	f7fe fb7d 	bl	800fe54 <RCC_APB2PeriphResetCmd>
  /* Release SAI1 from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SAI1, DISABLE);  
 801175a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 801175e:	2100      	movs	r1, #0
 8011760:	f7fe fb78 	bl	800fe54 <RCC_APB2PeriphResetCmd>
}
 8011764:	3708      	adds	r7, #8
 8011766:	46bd      	mov	sp, r7
 8011768:	bd80      	pop	{r7, pc}
 801176a:	bf00      	nop

0801176c <SAI_Init>:
  * @param  SAI_InitStruct: pointer to a SAI_InitTypeDef structure that
  *         contains the configuration information for the specified SAI Block peripheral.             
  * @retval None
  */
void SAI_Init(SAI_Block_TypeDef* SAI_Block_x, SAI_InitTypeDef* SAI_InitStruct)
{
 801176c:	b480      	push	{r7}
 801176e:	b085      	sub	sp, #20
 8011770:	af00      	add	r7, sp, #0
 8011772:	6078      	str	r0, [r7, #4]
 8011774:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011776:	2300      	movs	r3, #0
 8011778:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(SAI_InitStruct->SAI_MasterDivider));
  assert_param(IS_SAI_BLOCK_FIFO_THRESHOLD(SAI_InitStruct->SAI_FIFOThreshold));

  /* SAI Block_x CR1 Configuration */
  /* Get the SAI Block_x CR1 value */
  tmpreg = SAI_Block_x->CR1;
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	60fb      	str	r3, [r7, #12]
  /* Clear MODE, PRTCFG, DS, LSBFIRST, CKSTR, SYNCEN, OUTDRIV, NODIV, and MCKDIV bits */
  tmpreg &= CR1_CLEAR_MASK;
 8011780:	68fa      	ldr	r2, [r7, #12]
 8011782:	4b1c      	ldr	r3, [pc, #112]	; (80117f4 <SAI_Init+0x88>)
 8011784:	4013      	ands	r3, r2
 8011786:	60fb      	str	r3, [r7, #12]
  /* Set CKSTR bit according to SAI_ClockStrobing value   */
  /* Set SYNCEN bit according to SAI_Synchro value        */
  /* Set OUTDRIV bit according to SAI_OUTDRIV value       */
  /* Set NODIV bit according to SAI_NoDivider value       */
  /* Set MCKDIV bits according to SAI_MasterDivider value */
  tmpreg |= (uint32_t)(SAI_InitStruct->SAI_AudioMode     | SAI_InitStruct->SAI_Protocol  |
 8011788:	683b      	ldr	r3, [r7, #0]
 801178a:	681a      	ldr	r2, [r3, #0]
 801178c:	683b      	ldr	r3, [r7, #0]
 801178e:	685b      	ldr	r3, [r3, #4]
 8011790:	431a      	orrs	r2, r3
                       SAI_InitStruct->SAI_DataSize      | SAI_InitStruct->SAI_FirstBit  |  
 8011792:	683b      	ldr	r3, [r7, #0]
 8011794:	689b      	ldr	r3, [r3, #8]
  /* Set CKSTR bit according to SAI_ClockStrobing value   */
  /* Set SYNCEN bit according to SAI_Synchro value        */
  /* Set OUTDRIV bit according to SAI_OUTDRIV value       */
  /* Set NODIV bit according to SAI_NoDivider value       */
  /* Set MCKDIV bits according to SAI_MasterDivider value */
  tmpreg |= (uint32_t)(SAI_InitStruct->SAI_AudioMode     | SAI_InitStruct->SAI_Protocol  |
 8011796:	431a      	orrs	r2, r3
                       SAI_InitStruct->SAI_DataSize      | SAI_InitStruct->SAI_FirstBit  |  
 8011798:	683b      	ldr	r3, [r7, #0]
 801179a:	68db      	ldr	r3, [r3, #12]
 801179c:	431a      	orrs	r2, r3
                       SAI_InitStruct->SAI_ClockStrobing | SAI_InitStruct->SAI_Synchro   |  
 801179e:	683b      	ldr	r3, [r7, #0]
 80117a0:	691b      	ldr	r3, [r3, #16]
  /* Set SYNCEN bit according to SAI_Synchro value        */
  /* Set OUTDRIV bit according to SAI_OUTDRIV value       */
  /* Set NODIV bit according to SAI_NoDivider value       */
  /* Set MCKDIV bits according to SAI_MasterDivider value */
  tmpreg |= (uint32_t)(SAI_InitStruct->SAI_AudioMode     | SAI_InitStruct->SAI_Protocol  |
                       SAI_InitStruct->SAI_DataSize      | SAI_InitStruct->SAI_FirstBit  |  
 80117a2:	431a      	orrs	r2, r3
                       SAI_InitStruct->SAI_ClockStrobing | SAI_InitStruct->SAI_Synchro   |  
 80117a4:	683b      	ldr	r3, [r7, #0]
 80117a6:	695b      	ldr	r3, [r3, #20]
 80117a8:	431a      	orrs	r2, r3
                       SAI_InitStruct->SAI_OUTDRIV       | SAI_InitStruct->SAI_NoDivider | 
 80117aa:	683b      	ldr	r3, [r7, #0]
 80117ac:	699b      	ldr	r3, [r3, #24]
  /* Set OUTDRIV bit according to SAI_OUTDRIV value       */
  /* Set NODIV bit according to SAI_NoDivider value       */
  /* Set MCKDIV bits according to SAI_MasterDivider value */
  tmpreg |= (uint32_t)(SAI_InitStruct->SAI_AudioMode     | SAI_InitStruct->SAI_Protocol  |
                       SAI_InitStruct->SAI_DataSize      | SAI_InitStruct->SAI_FirstBit  |  
                       SAI_InitStruct->SAI_ClockStrobing | SAI_InitStruct->SAI_Synchro   |  
 80117ae:	431a      	orrs	r2, r3
                       SAI_InitStruct->SAI_OUTDRIV       | SAI_InitStruct->SAI_NoDivider | 
 80117b0:	683b      	ldr	r3, [r7, #0]
 80117b2:	69db      	ldr	r3, [r3, #28]
 80117b4:	431a      	orrs	r2, r3
                       (uint32_t)((SAI_InitStruct->SAI_MasterDivider) << 20));
 80117b6:	683b      	ldr	r3, [r7, #0]
 80117b8:	6a1b      	ldr	r3, [r3, #32]
 80117ba:	051b      	lsls	r3, r3, #20
  /* Set CKSTR bit according to SAI_ClockStrobing value   */
  /* Set SYNCEN bit according to SAI_Synchro value        */
  /* Set OUTDRIV bit according to SAI_OUTDRIV value       */
  /* Set NODIV bit according to SAI_NoDivider value       */
  /* Set MCKDIV bits according to SAI_MasterDivider value */
  tmpreg |= (uint32_t)(SAI_InitStruct->SAI_AudioMode     | SAI_InitStruct->SAI_Protocol  |
 80117bc:	4313      	orrs	r3, r2
 80117be:	68fa      	ldr	r2, [r7, #12]
 80117c0:	4313      	orrs	r3, r2
 80117c2:	60fb      	str	r3, [r7, #12]
                       SAI_InitStruct->SAI_DataSize      | SAI_InitStruct->SAI_FirstBit  |  
                       SAI_InitStruct->SAI_ClockStrobing | SAI_InitStruct->SAI_Synchro   |  
                       SAI_InitStruct->SAI_OUTDRIV       | SAI_InitStruct->SAI_NoDivider | 
                       (uint32_t)((SAI_InitStruct->SAI_MasterDivider) << 20));
  /* Write to SAI_Block_x CR1 */
  SAI_Block_x->CR1 = tmpreg;
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	68fa      	ldr	r2, [r7, #12]
 80117c8:	601a      	str	r2, [r3, #0]
  
  /* SAI Block_x CR2 Configuration */
  /* Get the SAIBlock_x CR2 value */
  tmpreg = SAI_Block_x->CR2;
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	685b      	ldr	r3, [r3, #4]
 80117ce:	60fb      	str	r3, [r7, #12]
  /* Clear FTH bits */
  tmpreg &= ~(SAI_xCR2_FTH);
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	f023 0303 	bic.w	r3, r3, #3
 80117d6:	60fb      	str	r3, [r7, #12]
  /* Configure the FIFO Level */
  /* Set FTH bits according to SAI_FIFOThreshold value */ 
  tmpreg |= (uint32_t)(SAI_InitStruct->SAI_FIFOThreshold);
 80117d8:	683b      	ldr	r3, [r7, #0]
 80117da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117dc:	68fa      	ldr	r2, [r7, #12]
 80117de:	4313      	orrs	r3, r2
 80117e0:	60fb      	str	r3, [r7, #12]
  /* Write to SAI_Block_x CR2 */
  SAI_Block_x->CR2 = tmpreg;
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	68fa      	ldr	r2, [r7, #12]
 80117e6:	605a      	str	r2, [r3, #4]
}
 80117e8:	3714      	adds	r7, #20
 80117ea:	46bd      	mov	sp, r7
 80117ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f0:	4770      	bx	lr
 80117f2:	bf00      	nop
 80117f4:	ff07c010 	.word	0xff07c010

080117f8 <SAI_FrameInit>:
  * @param  SAI_FrameInitStruct: pointer to an SAI_FrameInitTypeDef structure that
  *         contains the configuration of audio frame for a specified SAI Block                       
  * @retval None
  */
void SAI_FrameInit(SAI_Block_TypeDef* SAI_Block_x, SAI_FrameInitTypeDef* SAI_FrameInitStruct)
{
 80117f8:	b480      	push	{r7}
 80117fa:	b085      	sub	sp, #20
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	6078      	str	r0, [r7, #4]
 8011800:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011802:	2300      	movs	r3, #0
 8011804:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SAI_BLOCK_FS_POLARITY(SAI_FrameInitStruct->SAI_FSPolarity));
  assert_param(IS_SAI_BLOCK_FS_OFFSET(SAI_FrameInitStruct->SAI_FSOffset));

  /* SAI Block_x FRCR Configuration */
  /* Get the SAI Block_x FRCR value */
  tmpreg = SAI_Block_x->FRCR;
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	689b      	ldr	r3, [r3, #8]
 801180a:	60fb      	str	r3, [r7, #12]
  /* Clear FRL, FSALL, FSDEF, FSPOL, FSOFF bits */
  tmpreg &= FRCR_CLEAR_MASK;
 801180c:	68fa      	ldr	r2, [r7, #12]
 801180e:	4b0f      	ldr	r3, [pc, #60]	; (801184c <SAI_FrameInit+0x54>)
 8011810:	4013      	ands	r3, r2
 8011812:	60fb      	str	r3, [r7, #12]
  /* Set FRL bits according to SAI_FrameLength value         */
  /* Set FSALL bits according to SAI_ActiveFrameLength value */
  /* Set FSDEF bit according to SAI_FSDefinition value       */
  /* Set FSPOL bit according to SAI_FSPolarity value         */
  /* Set FSOFF bit according to SAI_FSOffset value           */
  tmpreg |= (uint32_t)((uint32_t)(SAI_FrameInitStruct->SAI_FrameLength - 1)  | 
 8011814:	683b      	ldr	r3, [r7, #0]
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	1e5a      	subs	r2, r3, #1
                       SAI_FrameInitStruct->SAI_FSOffset     | 
 801181a:	683b      	ldr	r3, [r7, #0]
 801181c:	691b      	ldr	r3, [r3, #16]
  /* Set FRL bits according to SAI_FrameLength value         */
  /* Set FSALL bits according to SAI_ActiveFrameLength value */
  /* Set FSDEF bit according to SAI_FSDefinition value       */
  /* Set FSPOL bit according to SAI_FSPolarity value         */
  /* Set FSOFF bit according to SAI_FSOffset value           */
  tmpreg |= (uint32_t)((uint32_t)(SAI_FrameInitStruct->SAI_FrameLength - 1)  | 
 801181e:	431a      	orrs	r2, r3
                       SAI_FrameInitStruct->SAI_FSOffset     | 
                       SAI_FrameInitStruct->SAI_FSDefinition |    
 8011820:	683b      	ldr	r3, [r7, #0]
 8011822:	689b      	ldr	r3, [r3, #8]
  /* Set FSALL bits according to SAI_ActiveFrameLength value */
  /* Set FSDEF bit according to SAI_FSDefinition value       */
  /* Set FSPOL bit according to SAI_FSPolarity value         */
  /* Set FSOFF bit according to SAI_FSOffset value           */
  tmpreg |= (uint32_t)((uint32_t)(SAI_FrameInitStruct->SAI_FrameLength - 1)  | 
                       SAI_FrameInitStruct->SAI_FSOffset     | 
 8011824:	431a      	orrs	r2, r3
                       SAI_FrameInitStruct->SAI_FSDefinition |    
                       SAI_FrameInitStruct->SAI_FSPolarity   |                        
 8011826:	683b      	ldr	r3, [r7, #0]
 8011828:	68db      	ldr	r3, [r3, #12]
  /* Set FSDEF bit according to SAI_FSDefinition value       */
  /* Set FSPOL bit according to SAI_FSPolarity value         */
  /* Set FSOFF bit according to SAI_FSOffset value           */
  tmpreg |= (uint32_t)((uint32_t)(SAI_FrameInitStruct->SAI_FrameLength - 1)  | 
                       SAI_FrameInitStruct->SAI_FSOffset     | 
                       SAI_FrameInitStruct->SAI_FSDefinition |    
 801182a:	431a      	orrs	r2, r3
                       SAI_FrameInitStruct->SAI_FSPolarity   |                        
                       (uint32_t)((SAI_FrameInitStruct->SAI_ActiveFrameLength - 1) << 8));
 801182c:	683b      	ldr	r3, [r7, #0]
 801182e:	685b      	ldr	r3, [r3, #4]
 8011830:	3b01      	subs	r3, #1
 8011832:	021b      	lsls	r3, r3, #8
  /* Set FRL bits according to SAI_FrameLength value         */
  /* Set FSALL bits according to SAI_ActiveFrameLength value */
  /* Set FSDEF bit according to SAI_FSDefinition value       */
  /* Set FSPOL bit according to SAI_FSPolarity value         */
  /* Set FSOFF bit according to SAI_FSOffset value           */
  tmpreg |= (uint32_t)((uint32_t)(SAI_FrameInitStruct->SAI_FrameLength - 1)  | 
 8011834:	4313      	orrs	r3, r2
 8011836:	68fa      	ldr	r2, [r7, #12]
 8011838:	4313      	orrs	r3, r2
 801183a:	60fb      	str	r3, [r7, #12]
                       SAI_FrameInitStruct->SAI_FSDefinition |    
                       SAI_FrameInitStruct->SAI_FSPolarity   |                        
                       (uint32_t)((SAI_FrameInitStruct->SAI_ActiveFrameLength - 1) << 8));
                       
  /* Write to SAI_Block_x FRCR */
  SAI_Block_x->FRCR = tmpreg;
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	68fa      	ldr	r2, [r7, #12]
 8011840:	609a      	str	r2, [r3, #8]
}
 8011842:	3714      	adds	r7, #20
 8011844:	46bd      	mov	sp, r7
 8011846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184a:	4770      	bx	lr
 801184c:	fff88000 	.word	0xfff88000

08011850 <SAI_SlotInit>:
  * @param  SAI_SlotInitStruct: pointer to an SAI_SlotInitTypeDef structure that
  *         contains the configuration of audio slot for a specified SAI Block                      
  * @retval None
  */
void SAI_SlotInit(SAI_Block_TypeDef* SAI_Block_x, SAI_SlotInitTypeDef* SAI_SlotInitStruct)
{
 8011850:	b480      	push	{r7}
 8011852:	b085      	sub	sp, #20
 8011854:	af00      	add	r7, sp, #0
 8011856:	6078      	str	r0, [r7, #4]
 8011858:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801185a:	2300      	movs	r3, #0
 801185c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(SAI_SlotInitStruct->SAI_SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(SAI_SlotInitStruct->SAI_SlotActive));

  /* SAI Block_x SLOTR Configuration */
  /* Get the SAI Block_x SLOTR value */
  tmpreg = SAI_Block_x->SLOTR;
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	68db      	ldr	r3, [r3, #12]
 8011862:	60fb      	str	r3, [r7, #12]
  /* Clear FBOFF, SLOTSZ, NBSLOT, SLOTEN bits */
  tmpreg &= SLOTR_CLEAR_MASK;
 8011864:	68fa      	ldr	r2, [r7, #12]
 8011866:	f24f 0320 	movw	r3, #61472	; 0xf020
 801186a:	4013      	ands	r3, r2
 801186c:	60fb      	str	r3, [r7, #12]
     audio frame and slots activated in audio frame */
  /* Set FBOFF bits according to SAI_FirstBitOffset value  */
  /* Set SLOTSZ bits according to SAI_SlotSize value       */
  /* Set NBSLOT bits according to SAI_SlotNumber value     */
  /* Set SLOTEN bits according to SAI_SlotActive value     */
  tmpreg |= (uint32_t)(SAI_SlotInitStruct->SAI_FirstBitOffset | 
 801186e:	683b      	ldr	r3, [r7, #0]
 8011870:	681a      	ldr	r2, [r3, #0]
                       SAI_SlotInitStruct->SAI_SlotSize       | 
 8011872:	683b      	ldr	r3, [r7, #0]
 8011874:	685b      	ldr	r3, [r3, #4]
     audio frame and slots activated in audio frame */
  /* Set FBOFF bits according to SAI_FirstBitOffset value  */
  /* Set SLOTSZ bits according to SAI_SlotSize value       */
  /* Set NBSLOT bits according to SAI_SlotNumber value     */
  /* Set SLOTEN bits according to SAI_SlotActive value     */
  tmpreg |= (uint32_t)(SAI_SlotInitStruct->SAI_FirstBitOffset | 
 8011876:	431a      	orrs	r2, r3
                       SAI_SlotInitStruct->SAI_SlotSize       | 
                       SAI_SlotInitStruct->SAI_SlotActive     |    
 8011878:	683b      	ldr	r3, [r7, #0]
 801187a:	68db      	ldr	r3, [r3, #12]
  /* Set FBOFF bits according to SAI_FirstBitOffset value  */
  /* Set SLOTSZ bits according to SAI_SlotSize value       */
  /* Set NBSLOT bits according to SAI_SlotNumber value     */
  /* Set SLOTEN bits according to SAI_SlotActive value     */
  tmpreg |= (uint32_t)(SAI_SlotInitStruct->SAI_FirstBitOffset | 
                       SAI_SlotInitStruct->SAI_SlotSize       | 
 801187c:	431a      	orrs	r2, r3
                       SAI_SlotInitStruct->SAI_SlotActive     |    
                       (uint32_t)((SAI_SlotInitStruct->SAI_SlotNumber - 1) <<  8));
 801187e:	683b      	ldr	r3, [r7, #0]
 8011880:	689b      	ldr	r3, [r3, #8]
 8011882:	3b01      	subs	r3, #1
 8011884:	021b      	lsls	r3, r3, #8
     audio frame and slots activated in audio frame */
  /* Set FBOFF bits according to SAI_FirstBitOffset value  */
  /* Set SLOTSZ bits according to SAI_SlotSize value       */
  /* Set NBSLOT bits according to SAI_SlotNumber value     */
  /* Set SLOTEN bits according to SAI_SlotActive value     */
  tmpreg |= (uint32_t)(SAI_SlotInitStruct->SAI_FirstBitOffset | 
 8011886:	4313      	orrs	r3, r2
 8011888:	68fa      	ldr	r2, [r7, #12]
 801188a:	4313      	orrs	r3, r2
 801188c:	60fb      	str	r3, [r7, #12]
                       SAI_SlotInitStruct->SAI_SlotSize       | 
                       SAI_SlotInitStruct->SAI_SlotActive     |    
                       (uint32_t)((SAI_SlotInitStruct->SAI_SlotNumber - 1) <<  8));
                       
  /* Write to SAI_Block_x SLOTR */
  SAI_Block_x->SLOTR = tmpreg;
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	68fa      	ldr	r2, [r7, #12]
 8011892:	60da      	str	r2, [r3, #12]
}
 8011894:	3714      	adds	r7, #20
 8011896:	46bd      	mov	sp, r7
 8011898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801189c:	4770      	bx	lr
 801189e:	bf00      	nop

080118a0 <SAI_StructInit>:
  * @param  SAI_InitStruct: pointer to a SAI_InitTypeDef structure which will 
  *         be initialized.  
  * @retval None
  */
void SAI_StructInit(SAI_InitTypeDef* SAI_InitStruct)
{
 80118a0:	b480      	push	{r7}
 80118a2:	b083      	sub	sp, #12
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	6078      	str	r0, [r7, #4]
  /* Reset SAI init structure parameters values */
  /* Initialize the SAI_AudioMode member */
  SAI_InitStruct->SAI_AudioMode = SAI_Mode_MasterTx;
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	2200      	movs	r2, #0
 80118ac:	601a      	str	r2, [r3, #0]
  /* Initialize the SAI_Protocol member */
  SAI_InitStruct->SAI_Protocol = SAI_Free_Protocol;
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	2200      	movs	r2, #0
 80118b2:	605a      	str	r2, [r3, #4]
  /* Initialize the SAI_DataSize member */
  SAI_InitStruct->SAI_DataSize = SAI_DataSize_8b;
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	2240      	movs	r2, #64	; 0x40
 80118b8:	609a      	str	r2, [r3, #8]
  /* Initialize the SAI_FirstBit member */
  SAI_InitStruct->SAI_FirstBit = SAI_FirstBit_MSB;
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	2200      	movs	r2, #0
 80118be:	60da      	str	r2, [r3, #12]
  /* Initialize the SAI_ClockStrobing member */
  SAI_InitStruct->SAI_ClockStrobing = SAI_ClockStrobing_FallingEdge;
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	2200      	movs	r2, #0
 80118c4:	611a      	str	r2, [r3, #16]
  /* Initialize the SAI_Synchro member */
  SAI_InitStruct->SAI_Synchro = SAI_Asynchronous;
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	2200      	movs	r2, #0
 80118ca:	615a      	str	r2, [r3, #20]
  /* Initialize the SAI_OUTDRIV member */
  SAI_InitStruct->SAI_OUTDRIV = SAI_OutputDrive_Disabled;
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	2200      	movs	r2, #0
 80118d0:	619a      	str	r2, [r3, #24]
  /* Initialize the SAI_NoDivider member */
  SAI_InitStruct->SAI_NoDivider = SAI_MasterDivider_Enabled;
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	2200      	movs	r2, #0
 80118d6:	61da      	str	r2, [r3, #28]
  /* Initialize the SAI_MasterDivider member */
  SAI_InitStruct->SAI_MasterDivider = 0;
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	2200      	movs	r2, #0
 80118dc:	621a      	str	r2, [r3, #32]
  /* Initialize the SAI_FIFOThreshold member */
  SAI_InitStruct->SAI_FIFOThreshold = SAI_Threshold_FIFOEmpty;
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	2200      	movs	r2, #0
 80118e2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80118e4:	370c      	adds	r7, #12
 80118e6:	46bd      	mov	sp, r7
 80118e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ec:	4770      	bx	lr
 80118ee:	bf00      	nop

080118f0 <SAI_FrameStructInit>:
  * @param  SAI_FrameInitStruct: pointer to a SAI_FrameInitTypeDef structure 
  *         which will be initialized.                     
  * @retval None
  */
void SAI_FrameStructInit(SAI_FrameInitTypeDef* SAI_FrameInitStruct)
{
 80118f0:	b480      	push	{r7}
 80118f2:	b083      	sub	sp, #12
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	6078      	str	r0, [r7, #4]
  /* Reset SAI Frame init structure parameters values */
  /* Initialize the SAI_FrameLength member */
  SAI_FrameInitStruct->SAI_FrameLength = 8;
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	2208      	movs	r2, #8
 80118fc:	601a      	str	r2, [r3, #0]
  /* Initialize the SAI_ActiveFrameLength member */
  SAI_FrameInitStruct->SAI_ActiveFrameLength = 1;
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	2201      	movs	r2, #1
 8011902:	605a      	str	r2, [r3, #4]
  /* Initialize the SAI_FSDefinition member */
  SAI_FrameInitStruct->SAI_FSDefinition = SAI_FS_StartFrame;
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	2200      	movs	r2, #0
 8011908:	609a      	str	r2, [r3, #8]
  /* Initialize the SAI_FSPolarity member */
  SAI_FrameInitStruct->SAI_FSPolarity = SAI_FS_ActiveLow;
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	2200      	movs	r2, #0
 801190e:	60da      	str	r2, [r3, #12]
  /* Initialize the SAI_FSOffset member */
  SAI_FrameInitStruct->SAI_FSOffset = SAI_FS_FirstBit;
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	2200      	movs	r2, #0
 8011914:	611a      	str	r2, [r3, #16]
}
 8011916:	370c      	adds	r7, #12
 8011918:	46bd      	mov	sp, r7
 801191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801191e:	4770      	bx	lr

08011920 <SAI_SlotStructInit>:
  * @param  SAI_SlotInitStruct: pointer to a SAI_SlotInitTypeDef structure 
  *         which will be initialized.                     
  * @retval None
  */
void SAI_SlotStructInit(SAI_SlotInitTypeDef* SAI_SlotInitStruct)
{
 8011920:	b480      	push	{r7}
 8011922:	b083      	sub	sp, #12
 8011924:	af00      	add	r7, sp, #0
 8011926:	6078      	str	r0, [r7, #4]
  /* Reset SAI Slot init structure parameters values */
  /* Initialize the SAI_FirstBitOffset member */
  SAI_SlotInitStruct->SAI_FirstBitOffset = 0;
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	2200      	movs	r2, #0
 801192c:	601a      	str	r2, [r3, #0]
  /* Initialize the SAI_SlotSize member */
  SAI_SlotInitStruct->SAI_SlotSize = SAI_SlotSize_DataSize;
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	2200      	movs	r2, #0
 8011932:	605a      	str	r2, [r3, #4]
  /* Initialize the SAI_SlotNumber member */
  SAI_SlotInitStruct->SAI_SlotNumber = 1;
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	2201      	movs	r2, #1
 8011938:	609a      	str	r2, [r3, #8]
  /* Initialize the SAI_SlotActive member */
  SAI_SlotInitStruct->SAI_SlotActive = SAI_Slot_NotActive;
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	2200      	movs	r2, #0
 801193e:	60da      	str	r2, [r3, #12]

}
 8011940:	370c      	adds	r7, #12
 8011942:	46bd      	mov	sp, r7
 8011944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011948:	4770      	bx	lr
 801194a:	bf00      	nop

0801194c <SAI_Cmd>:
  * @param  NewState: new state of the SAI_Block_x peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SAI_Cmd(SAI_Block_TypeDef* SAI_Block_x, FunctionalState NewState)
{
 801194c:	b480      	push	{r7}
 801194e:	b083      	sub	sp, #12
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
 8011954:	460b      	mov	r3, r1
 8011956:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8011958:	78fb      	ldrb	r3, [r7, #3]
 801195a:	2b00      	cmp	r3, #0
 801195c:	d006      	beq.n	801196c <SAI_Cmd+0x20>
  {
    /* Enable the selected SAI peripheral */
    SAI_Block_x->CR1 |= SAI_xCR1_SAIEN;
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	601a      	str	r2, [r3, #0]
 801196a:	e005      	b.n	8011978 <SAI_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected SAI peripheral */
    SAI_Block_x->CR1 &= ~(SAI_xCR1_SAIEN);
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	601a      	str	r2, [r3, #0]
  }
}
 8011978:	370c      	adds	r7, #12
 801197a:	46bd      	mov	sp, r7
 801197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011980:	4770      	bx	lr
 8011982:	bf00      	nop

08011984 <SAI_MonoModeConfig>:
  *            @arg SAI_MonoMode : Set mono audio mode
  *            @arg SAI_StreoMode : Set streo audio mode                       
  * @retval None
  */
void SAI_MonoModeConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_Mono_StreoMode)
{
 8011984:	b480      	push	{r7}
 8011986:	b083      	sub	sp, #12
 8011988:	af00      	add	r7, sp, #0
 801198a:	6078      	str	r0, [r7, #4]
 801198c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_MONO_STREO_MODE(SAI_MonoMode));
  /* Clear MONO bit */
  SAI_Block_x->CR1 &= ~(SAI_xCR1_MONO);
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	601a      	str	r2, [r3, #0]
  /* Set new Mono Mode value */
  SAI_Block_x->CR1 |= SAI_MonoMode;
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	601a      	str	r2, [r3, #0]
}
 80119a6:	370c      	adds	r7, #12
 80119a8:	46bd      	mov	sp, r7
 80119aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ae:	4770      	bx	lr

080119b0 <SAI_TRIStateConfig>:
  *            @arg SAI_Output_NotReleased : SD output line is still drived by the SAI.
  *            @arg SAI_Output_Released : SD output line is released (HI-Z)                       
  * @retval None
  */
void SAI_TRIStateConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_TRIState)
{
 80119b0:	b480      	push	{r7}
 80119b2:	b083      	sub	sp, #12
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	6078      	str	r0, [r7, #4]
 80119b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_TRISTATE_MANAGEMENT(SAI_TRIState));
  /* Clear MONO bit */
  SAI_Block_x->CR1 &= ~(SAI_xCR1_MONO);
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	601a      	str	r2, [r3, #0]
  /* Set new Mono Mode value */
  SAI_Block_x->CR1 |= SAI_MonoMode;  
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	601a      	str	r2, [r3, #0]
  
}
 80119d2:	370c      	adds	r7, #12
 80119d4:	46bd      	mov	sp, r7
 80119d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119da:	4770      	bx	lr

080119dc <SAI_CompandingModeConfig>:
  *            @arg SAI_ULaw_2CPL_Companding : Set U law (algorithm 2's complement representation)
  *            @arg SAI_ALaw_2CPL_Companding : Set A law (algorithm 2's complement repesentation)  
  * @retval None
  */
void SAI_CompandingModeConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_CompandingMode)
{
 80119dc:	b480      	push	{r7}
 80119de:	b083      	sub	sp, #12
 80119e0:	af00      	add	r7, sp, #0
 80119e2:	6078      	str	r0, [r7, #4]
 80119e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_COMPANDING_MODE(SAI_CompandingMode));
  /* Clear Companding Mode bits */
  SAI_Block_x->CR2 &= ~(SAI_xCR2_COMP);
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	685b      	ldr	r3, [r3, #4]
 80119ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	605a      	str	r2, [r3, #4]
  /* Set new Companding Mode value */
  SAI_Block_x->CR2 |= SAI_CompandingMode;
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	685a      	ldr	r2, [r3, #4]
 80119f6:	683b      	ldr	r3, [r7, #0]
 80119f8:	431a      	orrs	r2, r3
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	605a      	str	r2, [r3, #4]
}
 80119fe:	370c      	adds	r7, #12
 8011a00:	46bd      	mov	sp, r7
 8011a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a06:	4770      	bx	lr

08011a08 <SAI_MuteModeCmd>:
  * @param  NewState: new state of the SAIx block. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SAI_MuteModeCmd(SAI_Block_TypeDef* SAI_Block_x, FunctionalState NewState)
{
 8011a08:	b480      	push	{r7}
 8011a0a:	b083      	sub	sp, #12
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	6078      	str	r0, [r7, #4]
 8011a10:	460b      	mov	r3, r1
 8011a12:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8011a14:	78fb      	ldrb	r3, [r7, #3]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d006      	beq.n	8011a28 <SAI_MuteModeCmd+0x20>
  {
    /* Enable the selected SAI block mute mode */
    SAI_Block_x->CR2 |= SAI_xCR2_MUTE;
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	685b      	ldr	r3, [r3, #4]
 8011a1e:	f043 0220 	orr.w	r2, r3, #32
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	605a      	str	r2, [r3, #4]
 8011a26:	e005      	b.n	8011a34 <SAI_MuteModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected SAI SS output */
    SAI_Block_x->CR2 &= ~(SAI_xCR2_MUTE);
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	685b      	ldr	r3, [r3, #4]
 8011a2c:	f023 0220 	bic.w	r2, r3, #32
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	605a      	str	r2, [r3, #4]
  }
}
 8011a34:	370c      	adds	r7, #12
 8011a36:	46bd      	mov	sp, r7
 8011a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a3c:	4770      	bx	lr
 8011a3e:	bf00      	nop

08011a40 <SAI_MuteValueConfig>:
  *            @arg SAI_ZeroValue : bit value 0 is sent during Mute Mode
  *            @arg SAI_LastSentValue : Last value is sent during Mute Mode  
  * @retval None
  */
void SAI_MuteValueConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_MuteValue)
{
 8011a40:	b480      	push	{r7}
 8011a42:	b083      	sub	sp, #12
 8011a44:	af00      	add	r7, sp, #0
 8011a46:	6078      	str	r0, [r7, #4]
 8011a48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_MUTE_VALUE(SAI_MuteValue));
  
  /* Clear Mute value bits */
  SAI_Block_x->CR2 &= ~(SAI_xCR2_MUTEVAL);
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	685b      	ldr	r3, [r3, #4]
 8011a4e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	605a      	str	r2, [r3, #4]
  /* Set new Mute value */
  SAI_Block_x->CR2 |= SAI_MuteValue;
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	685a      	ldr	r2, [r3, #4]
 8011a5a:	683b      	ldr	r3, [r7, #0]
 8011a5c:	431a      	orrs	r2, r3
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	605a      	str	r2, [r3, #4]
}
 8011a62:	370c      	adds	r7, #12
 8011a64:	46bd      	mov	sp, r7
 8011a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a6a:	4770      	bx	lr

08011a6c <SAI_MuteFrameCounterConfig>:
  *         This parameter can be a number between 0 and 63.  
 
  * @retval None
  */
void SAI_MuteFrameCounterConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_MuteCounter)
{
 8011a6c:	b480      	push	{r7}
 8011a6e:	b083      	sub	sp, #12
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
 8011a74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_MUTE_COUNTER(SAI_MuteCounter));
  
  /* Clear Mute value bits */
  SAI_Block_x->CR2 &= ~(SAI_xCR2_MUTECNT);
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	685b      	ldr	r3, [r3, #4]
 8011a7a:	f423 52fc 	bic.w	r2, r3, #8064	; 0x1f80
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	605a      	str	r2, [r3, #4]
  /* Set new Mute value */
  SAI_Block_x->CR2 |= (SAI_MuteCounter << 7);
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	685a      	ldr	r2, [r3, #4]
 8011a86:	683b      	ldr	r3, [r7, #0]
 8011a88:	01db      	lsls	r3, r3, #7
 8011a8a:	431a      	orrs	r2, r3
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	605a      	str	r2, [r3, #4]
}
 8011a90:	370c      	adds	r7, #12
 8011a92:	46bd      	mov	sp, r7
 8011a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a98:	4770      	bx	lr
 8011a9a:	bf00      	nop

08011a9c <SAI_FlushFIFO>:
  * @param  NewState: new state of the selected SAI TI communication mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SAI_FlushFIFO(SAI_Block_TypeDef* SAI_Block_x)
{
 8011a9c:	b480      	push	{r7}
 8011a9e:	b083      	sub	sp, #12
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));

  /* FIFO flush */
  SAI_Block_x->CR2 |= SAI_xCR2_FFLUSH;
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	685b      	ldr	r3, [r3, #4]
 8011aa8:	f043 0208 	orr.w	r2, r3, #8
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	605a      	str	r2, [r3, #4]
}
 8011ab0:	370c      	adds	r7, #12
 8011ab2:	46bd      	mov	sp, r7
 8011ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab8:	4770      	bx	lr
 8011aba:	bf00      	nop

08011abc <SAI_ReceiveData>:
  * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral. 
  *         
  * @retval The value of the received data.
  */
uint32_t SAI_ReceiveData(SAI_Block_TypeDef* SAI_Block_x)
{
 8011abc:	b480      	push	{r7}
 8011abe:	b083      	sub	sp, #12
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  
  /* Return the data in the DR register */
  return SAI_Block_x->DR;
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	69db      	ldr	r3, [r3, #28]
}
 8011ac8:	4618      	mov	r0, r3
 8011aca:	370c      	adds	r7, #12
 8011acc:	46bd      	mov	sp, r7
 8011ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad2:	4770      	bx	lr

08011ad4 <SAI_SendData>:
  *        
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SAI_SendData(SAI_Block_TypeDef* SAI_Block_x, uint32_t Data)
{
 8011ad4:	b480      	push	{r7}
 8011ad6:	b083      	sub	sp, #12
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	6078      	str	r0, [r7, #4]
 8011adc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  
  /* Write in the DR register the data to be sent */
  SAI_Block_x->DR = Data;
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	683a      	ldr	r2, [r7, #0]
 8011ae2:	61da      	str	r2, [r3, #28]
}
 8011ae4:	370c      	adds	r7, #12
 8011ae6:	46bd      	mov	sp, r7
 8011ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aec:	4770      	bx	lr
 8011aee:	bf00      	nop

08011af0 <SAI_DMACmd>:
  * @param  NewState: new state of the selected SAI block DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SAI_DMACmd(SAI_Block_TypeDef* SAI_Block_x, FunctionalState NewState)
{
 8011af0:	b480      	push	{r7}
 8011af2:	b083      	sub	sp, #12
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	6078      	str	r0, [r7, #4]
 8011af8:	460b      	mov	r3, r1
 8011afa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8011afc:	78fb      	ldrb	r3, [r7, #3]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d006      	beq.n	8011b10 <SAI_DMACmd+0x20>
  {
    /* Enable the selected SAI block mute mode */
    SAI_Block_x->CR1 |= SAI_xCR1_DMAEN;
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	601a      	str	r2, [r3, #0]
 8011b0e:	e005      	b.n	8011b1c <SAI_DMACmd+0x2c>
  }
  else
  {
    /* Disable the selected SAI SS output */
    SAI_Block_x->CR1 &= ~(SAI_xCR1_DMAEN);
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	601a      	str	r2, [r3, #0]
  }
}
 8011b1c:	370c      	adds	r7, #12
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b24:	4770      	bx	lr
 8011b26:	bf00      	nop

08011b28 <SAI_ITConfig>:
  * @param  NewState: new state of the specified SAI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SAI_ITConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_IT, FunctionalState NewState)
{ 
 8011b28:	b480      	push	{r7}
 8011b2a:	b085      	sub	sp, #20
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	60f8      	str	r0, [r7, #12]
 8011b30:	60b9      	str	r1, [r7, #8]
 8011b32:	4613      	mov	r3, r2
 8011b34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SAI_BLOCK_CONFIG_IT(SAI_IT));

  if (NewState != DISABLE)
 8011b36:	79fb      	ldrb	r3, [r7, #7]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d006      	beq.n	8011b4a <SAI_ITConfig+0x22>
  {
    /* Enable the selected SAI Block interrupt */
    SAI_Block_x->IMR |= SAI_IT;
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	691a      	ldr	r2, [r3, #16]
 8011b40:	68bb      	ldr	r3, [r7, #8]
 8011b42:	431a      	orrs	r2, r3
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	611a      	str	r2, [r3, #16]
 8011b48:	e006      	b.n	8011b58 <SAI_ITConfig+0x30>
  }
  else
  {
    /* Disable the selected SAI Block interrupt */
    SAI_Block_x->IMR &= ~(SAI_IT);
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	691a      	ldr	r2, [r3, #16]
 8011b4e:	68bb      	ldr	r3, [r7, #8]
 8011b50:	43db      	mvns	r3, r3
 8011b52:	401a      	ands	r2, r3
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	611a      	str	r2, [r3, #16]
  }
}
 8011b58:	3714      	adds	r7, #20
 8011b5a:	46bd      	mov	sp, r7
 8011b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b60:	4770      	bx	lr
 8011b62:	bf00      	nop

08011b64 <SAI_GetFlagStatus>:
  *            @arg SAI_FLAG_AFSDET: anticipated frame synchronization detection flag.
  *            @arg SAI_FLAG_LFSDET: late frame synchronization detection flag.
  * @retval The new state of SAI_FLAG (SET or RESET).
  */
FlagStatus SAI_GetFlagStatus(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_FLAG)
{
 8011b64:	b480      	push	{r7}
 8011b66:	b085      	sub	sp, #20
 8011b68:	af00      	add	r7, sp, #0
 8011b6a:	6078      	str	r0, [r7, #4]
 8011b6c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8011b6e:	2300      	movs	r3, #0
 8011b70:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_GET_FLAG(SAI_FLAG));
  
  /* Check the status of the specified SAI flag */
  if ((SAI_Block_x->SR & SAI_FLAG) != (uint32_t)RESET)
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	695a      	ldr	r2, [r3, #20]
 8011b76:	683b      	ldr	r3, [r7, #0]
 8011b78:	4013      	ands	r3, r2
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d002      	beq.n	8011b84 <SAI_GetFlagStatus+0x20>
  {
    /* SAI_FLAG is set */
    bitstatus = SET;
 8011b7e:	2301      	movs	r3, #1
 8011b80:	73fb      	strb	r3, [r7, #15]
 8011b82:	e001      	b.n	8011b88 <SAI_GetFlagStatus+0x24>
  }
  else
  {
    /* SAI_FLAG is reset */
    bitstatus = RESET;
 8011b84:	2300      	movs	r3, #0
 8011b86:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SAI_FLAG status */
  return  bitstatus;
 8011b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	3714      	adds	r7, #20
 8011b8e:	46bd      	mov	sp, r7
 8011b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b94:	4770      	bx	lr
 8011b96:	bf00      	nop

08011b98 <SAI_ClearFlag>:
  *          - When the audio block is receiver and the FIFO is not empty           
  *  
  * @retval None
  */
void SAI_ClearFlag(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_FLAG)
{
 8011b98:	b480      	push	{r7}
 8011b9a:	b083      	sub	sp, #12
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	6078      	str	r0, [r7, #4]
 8011ba0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_CLEAR_FLAG(SAI_FLAG));
    
  /* Clear the selected SAI Block flag */
  SAI_Block_x->CLRFR |= SAI_FLAG;
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	699a      	ldr	r2, [r3, #24]
 8011ba6:	683b      	ldr	r3, [r7, #0]
 8011ba8:	431a      	orrs	r2, r3
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	619a      	str	r2, [r3, #24]
}
 8011bae:	370c      	adds	r7, #12
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb6:	4770      	bx	lr

08011bb8 <SAI_GetITStatus>:
  *            @arg SAI_IT_WCKCFG: wrong clock configuration interrupt 
  *                
  * @retval The new state of SAI_IT (SET or RESET).
  */
ITStatus SAI_GetITStatus(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_IT)
{
 8011bb8:	b480      	push	{r7}
 8011bba:	b085      	sub	sp, #20
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	6078      	str	r0, [r7, #4]
 8011bc0:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	73fb      	strb	r3, [r7, #15]
  uint32_t  enablestatus = 0;
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_CONFIG_IT(SAI_IT));
  
  /* Get the SAI_IT enable bit status */
  enablestatus = (SAI_Block_x->IMR & SAI_IT) ;
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	691a      	ldr	r2, [r3, #16]
 8011bce:	683b      	ldr	r3, [r7, #0]
 8011bd0:	4013      	ands	r3, r2
 8011bd2:	60bb      	str	r3, [r7, #8]

  /* Check the status of the specified SAI interrupt */
  if (((SAI_Block_x->SR & SAI_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	695a      	ldr	r2, [r3, #20]
 8011bd8:	683b      	ldr	r3, [r7, #0]
 8011bda:	4013      	ands	r3, r2
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d005      	beq.n	8011bec <SAI_GetITStatus+0x34>
 8011be0:	68bb      	ldr	r3, [r7, #8]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d002      	beq.n	8011bec <SAI_GetITStatus+0x34>
  {
    /* SAI_IT is set */
    bitstatus = SET;
 8011be6:	2301      	movs	r3, #1
 8011be8:	73fb      	strb	r3, [r7, #15]
 8011bea:	e001      	b.n	8011bf0 <SAI_GetITStatus+0x38>
  }
  else
  {
    /* SAI_IT is reset */
    bitstatus = RESET;
 8011bec:	2300      	movs	r3, #0
 8011bee:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SAI_IT status */
  return bitstatus;
 8011bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	3714      	adds	r7, #20
 8011bf6:	46bd      	mov	sp, r7
 8011bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bfc:	4770      	bx	lr
 8011bfe:	bf00      	nop

08011c00 <SAI_ClearITPendingBit>:
  *          - When the audio block is receiver and the FIFO is not empty  
  *            
  * @retval None
  */
void SAI_ClearITPendingBit(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_IT)
{
 8011c00:	b480      	push	{r7}
 8011c02:	b083      	sub	sp, #12
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
 8011c08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_CONFIG_IT(SAI_IT));

  /* Clear the selected SAI Block x interrupt pending bit */
  SAI_Block_x->CLRFR |= SAI_IT; 
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	699a      	ldr	r2, [r3, #24]
 8011c0e:	683b      	ldr	r3, [r7, #0]
 8011c10:	431a      	orrs	r2, r3
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	619a      	str	r2, [r3, #24]
}
 8011c16:	370c      	adds	r7, #12
 8011c18:	46bd      	mov	sp, r7
 8011c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c1e:	4770      	bx	lr

08011c20 <SAI_GetCmdStatus>:
  *          the end of audio frame.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState SAI_GetCmdStatus(SAI_Block_TypeDef* SAI_Block_x)
{
 8011c20:	b480      	push	{r7}
 8011c22:	b085      	sub	sp, #20
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8011c28:	2300      	movs	r3, #0
 8011c2a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  if ((SAI_Block_x->CR1 & (uint32_t)SAI_xCR1_SAIEN) != 0)
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d002      	beq.n	8011c3e <SAI_GetCmdStatus+0x1e>
  {
    /* The selected SAI Block x EN bit is set (audio frame transfer is ongoing) */
    state = ENABLE;
 8011c38:	2301      	movs	r3, #1
 8011c3a:	73fb      	strb	r3, [r7, #15]
 8011c3c:	e001      	b.n	8011c42 <SAI_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected SAI Block x EN bit is cleared (SAI Block is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8011c3e:	2300      	movs	r3, #0
 8011c40:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8011c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c44:	4618      	mov	r0, r3
 8011c46:	3714      	adds	r7, #20
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c4e:	4770      	bx	lr

08011c50 <SAI_GetFIFOStatus>:
  *           - SAI_FIFOStatus_HalfFull: if more than 1 half-full.
  *           - SAI_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
  *           - SAI_FIFOStatus_Full: when FIFO is full
  */
uint32_t SAI_GetFIFOStatus(SAI_Block_TypeDef* SAI_Block_x)
{
 8011c50:	b480      	push	{r7}
 8011c52:	b085      	sub	sp, #20
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8011c58:	2300      	movs	r3, #0
 8011c5a:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  
  /* Get the FIFO level bits */
  tmpreg = (uint32_t)((SAI_Block_x->SR & SAI_xSR_FLVL));
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	695b      	ldr	r3, [r3, #20]
 8011c60:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8011c64:	60fb      	str	r3, [r7, #12]
  
  return tmpreg;
 8011c66:	68fb      	ldr	r3, [r7, #12]
}
 8011c68:	4618      	mov	r0, r3
 8011c6a:	3714      	adds	r7, #20
 8011c6c:	46bd      	mov	sp, r7
 8011c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c72:	4770      	bx	lr

08011c74 <SDIO_DeInit>:
  * @brief  Deinitializes the SDIO peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void SDIO_DeInit(void)
{
 8011c74:	b580      	push	{r7, lr}
 8011c76:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, ENABLE);
 8011c78:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011c7c:	2101      	movs	r1, #1
 8011c7e:	f7fe f8e9 	bl	800fe54 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, DISABLE);
 8011c82:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011c86:	2100      	movs	r1, #0
 8011c88:	f7fe f8e4 	bl	800fe54 <RCC_APB2PeriphResetCmd>
}
 8011c8c:	bd80      	pop	{r7, pc}
 8011c8e:	bf00      	nop

08011c90 <SDIO_Init>:
  * @param  SDIO_InitStruct : pointer to a SDIO_InitTypeDef structure 
  *         that contains the configuration information for the SDIO peripheral.
  * @retval None
  */
void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct)
{
 8011c90:	b480      	push	{r7}
 8011c92:	b085      	sub	sp, #20
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8011c98:	2300      	movs	r3, #0
 8011c9a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
   
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
 8011c9c:	4b12      	ldr	r3, [pc, #72]	; (8011ce8 <SDIO_Init+0x58>)
 8011c9e:	685b      	ldr	r3, [r3, #4]
 8011ca0:	60fb      	str	r3, [r7, #12]
  
  /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
  tmpreg &= CLKCR_CLEAR_MASK;
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8011ca8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011cac:	60fb      	str	r3, [r7, #12]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	7d1b      	ldrb	r3, [r3, #20]
 8011cb2:	461a      	mov	r2, r3
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	689b      	ldr	r3, [r3, #8]
 8011cb8:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	685b      	ldr	r3, [r3, #4]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 8011cbe:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	68db      	ldr	r3, [r3, #12]
 8011cc4:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	681b      	ldr	r3, [r3, #0]
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 8011cca:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	691b      	ldr	r3, [r3, #16]
 8011cd0:	4313      	orrs	r3, r2
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 8011cd2:	68fa      	ldr	r2, [r7, #12]
 8011cd4:	4313      	orrs	r3, r2
 8011cd6:	60fb      	str	r3, [r7, #12]
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
  
  /* Write to SDIO CLKCR */
  SDIO->CLKCR = tmpreg;
 8011cd8:	4b03      	ldr	r3, [pc, #12]	; (8011ce8 <SDIO_Init+0x58>)
 8011cda:	68fa      	ldr	r2, [r7, #12]
 8011cdc:	605a      	str	r2, [r3, #4]
}
 8011cde:	3714      	adds	r7, #20
 8011ce0:	46bd      	mov	sp, r7
 8011ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce6:	4770      	bx	lr
 8011ce8:	40012c00 	.word	0x40012c00

08011cec <SDIO_StructInit>:
  * @param  SDIO_InitStruct: pointer to an SDIO_InitTypeDef structure which 
  *         will be initialized.
  * @retval None
  */
void SDIO_StructInit(SDIO_InitTypeDef* SDIO_InitStruct)
{
 8011cec:	b480      	push	{r7}
 8011cee:	b083      	sub	sp, #12
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	6078      	str	r0, [r7, #4]
  /* SDIO_InitStruct members default value */
  SDIO_InitStruct->SDIO_ClockDiv = 0x00;
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	2200      	movs	r2, #0
 8011cf8:	751a      	strb	r2, [r3, #20]
  SDIO_InitStruct->SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	2200      	movs	r2, #0
 8011cfe:	601a      	str	r2, [r3, #0]
  SDIO_InitStruct->SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	2200      	movs	r2, #0
 8011d04:	605a      	str	r2, [r3, #4]
  SDIO_InitStruct->SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	2200      	movs	r2, #0
 8011d0a:	609a      	str	r2, [r3, #8]
  SDIO_InitStruct->SDIO_BusWide = SDIO_BusWide_1b;
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	2200      	movs	r2, #0
 8011d10:	60da      	str	r2, [r3, #12]
  SDIO_InitStruct->SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	2200      	movs	r2, #0
 8011d16:	611a      	str	r2, [r3, #16]
}
 8011d18:	370c      	adds	r7, #12
 8011d1a:	46bd      	mov	sp, r7
 8011d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d20:	4770      	bx	lr
 8011d22:	bf00      	nop

08011d24 <SDIO_ClockCmd>:
  * @param  NewState: new state of the SDIO Clock. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_ClockCmd(FunctionalState NewState)
{
 8011d24:	b480      	push	{r7}
 8011d26:	b083      	sub	sp, #12
 8011d28:	af00      	add	r7, sp, #0
 8011d2a:	4603      	mov	r3, r0
 8011d2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CLKCR_CLKEN_BB = (uint32_t)NewState;
 8011d2e:	4b04      	ldr	r3, [pc, #16]	; (8011d40 <SDIO_ClockCmd+0x1c>)
 8011d30:	79fa      	ldrb	r2, [r7, #7]
 8011d32:	601a      	str	r2, [r3, #0]
}
 8011d34:	370c      	adds	r7, #12
 8011d36:	46bd      	mov	sp, r7
 8011d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3c:	4770      	bx	lr
 8011d3e:	bf00      	nop
 8011d40:	422580a0 	.word	0x422580a0

08011d44 <SDIO_SetPowerState>:
  *            @arg SDIO_PowerState_OFF: SDIO Power OFF
  *            @arg SDIO_PowerState_ON: SDIO Power ON
  * @retval None
  */
void SDIO_SetPowerState(uint32_t SDIO_PowerState)
{
 8011d44:	b480      	push	{r7}
 8011d46:	b083      	sub	sp, #12
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_POWER_STATE(SDIO_PowerState));
  
  SDIO->POWER = SDIO_PowerState;
 8011d4c:	4b03      	ldr	r3, [pc, #12]	; (8011d5c <SDIO_SetPowerState+0x18>)
 8011d4e:	687a      	ldr	r2, [r7, #4]
 8011d50:	601a      	str	r2, [r3, #0]
}
 8011d52:	370c      	adds	r7, #12
 8011d54:	46bd      	mov	sp, r7
 8011d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5a:	4770      	bx	lr
 8011d5c:	40012c00 	.word	0x40012c00

08011d60 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(void)
{
 8011d60:	b480      	push	{r7}
 8011d62:	af00      	add	r7, sp, #0
  return (SDIO->POWER & (~PWR_PWRCTRL_MASK));
 8011d64:	4b04      	ldr	r3, [pc, #16]	; (8011d78 <SDIO_GetPowerState+0x18>)
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	f003 0303 	and.w	r3, r3, #3
}
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	46bd      	mov	sp, r7
 8011d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d74:	4770      	bx	lr
 8011d76:	bf00      	nop
 8011d78:	40012c00 	.word	0x40012c00

08011d7c <SDIO_SendCommand>:
  *         structure that contains the configuration information for the SDIO 
  *         command.
  * @retval None
  */
void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
{
 8011d7c:	b480      	push	{r7}
 8011d7e:	b085      	sub	sp, #20
 8011d80:	af00      	add	r7, sp, #0
 8011d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8011d84:	2300      	movs	r3, #0
 8011d86:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
  
/*---------------------------- SDIO ARG Configuration ------------------------*/
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
 8011d88:	4b11      	ldr	r3, [pc, #68]	; (8011dd0 <SDIO_SendCommand+0x54>)
 8011d8a:	687a      	ldr	r2, [r7, #4]
 8011d8c:	6812      	ldr	r2, [r2, #0]
 8011d8e:	609a      	str	r2, [r3, #8]
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
 8011d90:	4b0f      	ldr	r3, [pc, #60]	; (8011dd0 <SDIO_SendCommand+0x54>)
 8011d92:	68db      	ldr	r3, [r3, #12]
 8011d94:	60fb      	str	r3, [r7, #12]
  /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
  tmpreg &= CMD_CLEAR_MASK;
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8011d9c:	f023 0307 	bic.w	r3, r3, #7
 8011da0:	60fb      	str	r3, [r7, #12]
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	685a      	ldr	r2, [r3, #4]
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	689b      	ldr	r3, [r3, #8]
 8011daa:	431a      	orrs	r2, r3
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	68db      	ldr	r3, [r3, #12]
 8011db0:	431a      	orrs	r2, r3
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	691b      	ldr	r3, [r3, #16]
 8011db6:	4313      	orrs	r3, r2
  tmpreg &= CMD_CLEAR_MASK;
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 8011db8:	68fa      	ldr	r2, [r7, #12]
 8011dba:	4313      	orrs	r3, r2
 8011dbc:	60fb      	str	r3, [r7, #12]
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
  
  /* Write to SDIO CMD */
  SDIO->CMD = tmpreg;
 8011dbe:	4b04      	ldr	r3, [pc, #16]	; (8011dd0 <SDIO_SendCommand+0x54>)
 8011dc0:	68fa      	ldr	r2, [r7, #12]
 8011dc2:	60da      	str	r2, [r3, #12]
}
 8011dc4:	3714      	adds	r7, #20
 8011dc6:	46bd      	mov	sp, r7
 8011dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dcc:	4770      	bx	lr
 8011dce:	bf00      	nop
 8011dd0:	40012c00 	.word	0x40012c00

08011dd4 <SDIO_CmdStructInit>:
  * @param  SDIO_CmdInitStruct: pointer to an SDIO_CmdInitTypeDef 
  *         structure which will be initialized.
  * @retval None
  */
void SDIO_CmdStructInit(SDIO_CmdInitTypeDef* SDIO_CmdInitStruct)
{
 8011dd4:	b480      	push	{r7}
 8011dd6:	b083      	sub	sp, #12
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	6078      	str	r0, [r7, #4]
  /* SDIO_CmdInitStruct members default value */
  SDIO_CmdInitStruct->SDIO_Argument = 0x00;
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	2200      	movs	r2, #0
 8011de0:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStruct->SDIO_CmdIndex = 0x00;
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	2200      	movs	r2, #0
 8011de6:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStruct->SDIO_Response = SDIO_Response_No;
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	2200      	movs	r2, #0
 8011dec:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStruct->SDIO_Wait = SDIO_Wait_No;
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	2200      	movs	r2, #0
 8011df2:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStruct->SDIO_CPSM = SDIO_CPSM_Disable;
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	2200      	movs	r2, #0
 8011df8:	611a      	str	r2, [r3, #16]
}
 8011dfa:	370c      	adds	r7, #12
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e02:	4770      	bx	lr

08011e04 <SDIO_GetCommandResponse>:
  * @brief  Returns command index of last command for which response received.
  * @param  None
  * @retval Returns the command index of the last command response received.
  */
uint8_t SDIO_GetCommandResponse(void)
{
 8011e04:	b480      	push	{r7}
 8011e06:	af00      	add	r7, sp, #0
  return (uint8_t)(SDIO->RESPCMD);
 8011e08:	4b03      	ldr	r3, [pc, #12]	; (8011e18 <SDIO_GetCommandResponse+0x14>)
 8011e0a:	691b      	ldr	r3, [r3, #16]
 8011e0c:	b2db      	uxtb	r3, r3
}
 8011e0e:	4618      	mov	r0, r3
 8011e10:	46bd      	mov	sp, r7
 8011e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e16:	4770      	bx	lr
 8011e18:	40012c00 	.word	0x40012c00

08011e1c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4
  * @retval The Corresponding response register value.
  */
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
{
 8011e1c:	b480      	push	{r7}
 8011e1e:	b085      	sub	sp, #20
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 8011e24:	2300      	movs	r3, #0
 8011e26:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));

  tmp = SDIO_RESP_ADDR + SDIO_RESP;
 8011e28:	687a      	ldr	r2, [r7, #4]
 8011e2a:	4b05      	ldr	r3, [pc, #20]	; (8011e40 <SDIO_GetResponse+0x24>)
 8011e2c:	4413      	add	r3, r2
 8011e2e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp); 
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	681b      	ldr	r3, [r3, #0]
}
 8011e34:	4618      	mov	r0, r3
 8011e36:	3714      	adds	r7, #20
 8011e38:	46bd      	mov	sp, r7
 8011e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e3e:	4770      	bx	lr
 8011e40:	40012c14 	.word	0x40012c14

08011e44 <SDIO_DataConfig>:
  * @param  SDIO_DataInitStruct : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDIO command.
  * @retval None
  */
void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 8011e44:	b480      	push	{r7}
 8011e46:	b085      	sub	sp, #20
 8011e48:	af00      	add	r7, sp, #0
 8011e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));

/*---------------------------- SDIO DTIMER Configuration ---------------------*/
  /* Set the SDIO Data TimeOut value */
  SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
 8011e50:	4b12      	ldr	r3, [pc, #72]	; (8011e9c <SDIO_DataConfig+0x58>)
 8011e52:	687a      	ldr	r2, [r7, #4]
 8011e54:	6812      	ldr	r2, [r2, #0]
 8011e56:	625a      	str	r2, [r3, #36]	; 0x24

/*---------------------------- SDIO DLEN Configuration -----------------------*/
  /* Set the SDIO DataLength value */
  SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;
 8011e58:	4b10      	ldr	r3, [pc, #64]	; (8011e9c <SDIO_DataConfig+0x58>)
 8011e5a:	687a      	ldr	r2, [r7, #4]
 8011e5c:	6852      	ldr	r2, [r2, #4]
 8011e5e:	629a      	str	r2, [r3, #40]	; 0x28

/*---------------------------- SDIO DCTRL Configuration ----------------------*/  
  /* Get the SDIO DCTRL value */
  tmpreg = SDIO->DCTRL;
 8011e60:	4b0e      	ldr	r3, [pc, #56]	; (8011e9c <SDIO_DataConfig+0x58>)
 8011e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e64:	60fb      	str	r3, [r7, #12]
  /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
  tmpreg &= DCTRL_CLEAR_MASK;
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	f023 03f7 	bic.w	r3, r3, #247	; 0xf7
 8011e6c:	60fb      	str	r3, [r7, #12]
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	689a      	ldr	r2, [r3, #8]
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	68db      	ldr	r3, [r3, #12]
 8011e76:	431a      	orrs	r2, r3
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	691b      	ldr	r3, [r3, #16]
 8011e7c:	431a      	orrs	r2, r3
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	695b      	ldr	r3, [r3, #20]
 8011e82:	4313      	orrs	r3, r2
  tmpreg &= DCTRL_CLEAR_MASK;
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 8011e84:	68fa      	ldr	r2, [r7, #12]
 8011e86:	4313      	orrs	r3, r2
 8011e88:	60fb      	str	r3, [r7, #12]
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;

  /* Write to SDIO DCTRL */
  SDIO->DCTRL = tmpreg;
 8011e8a:	4b04      	ldr	r3, [pc, #16]	; (8011e9c <SDIO_DataConfig+0x58>)
 8011e8c:	68fa      	ldr	r2, [r7, #12]
 8011e8e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8011e90:	3714      	adds	r7, #20
 8011e92:	46bd      	mov	sp, r7
 8011e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e98:	4770      	bx	lr
 8011e9a:	bf00      	nop
 8011e9c:	40012c00 	.word	0x40012c00

08011ea0 <SDIO_DataStructInit>:
  * @param  SDIO_DataInitStruct: pointer to an SDIO_DataInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 8011ea0:	b480      	push	{r7}
 8011ea2:	b083      	sub	sp, #12
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]
  /* SDIO_DataInitStruct members default value */
  SDIO_DataInitStruct->SDIO_DataTimeOut = 0xFFFFFFFF;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011eae:	601a      	str	r2, [r3, #0]
  SDIO_DataInitStruct->SDIO_DataLength = 0x00;
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	2200      	movs	r2, #0
 8011eb4:	605a      	str	r2, [r3, #4]
  SDIO_DataInitStruct->SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	2200      	movs	r2, #0
 8011eba:	609a      	str	r2, [r3, #8]
  SDIO_DataInitStruct->SDIO_TransferDir = SDIO_TransferDir_ToCard;
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	2200      	movs	r2, #0
 8011ec0:	60da      	str	r2, [r3, #12]
  SDIO_DataInitStruct->SDIO_TransferMode = SDIO_TransferMode_Block;  
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	2200      	movs	r2, #0
 8011ec6:	611a      	str	r2, [r3, #16]
  SDIO_DataInitStruct->SDIO_DPSM = SDIO_DPSM_Disable;
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	2200      	movs	r2, #0
 8011ecc:	615a      	str	r2, [r3, #20]
}
 8011ece:	370c      	adds	r7, #12
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed6:	4770      	bx	lr

08011ed8 <SDIO_GetDataCounter>:
  * @brief  Returns number of remaining data bytes to be transferred.
  * @param  None
  * @retval Number of remaining data bytes to be transferred
  */
uint32_t SDIO_GetDataCounter(void)
{ 
 8011ed8:	b480      	push	{r7}
 8011eda:	af00      	add	r7, sp, #0
  return SDIO->DCOUNT;
 8011edc:	4b03      	ldr	r3, [pc, #12]	; (8011eec <SDIO_GetDataCounter+0x14>)
 8011ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee8:	4770      	bx	lr
 8011eea:	bf00      	nop
 8011eec:	40012c00 	.word	0x40012c00

08011ef0 <SDIO_ReadData>:
  * @brief  Read one data word from Rx FIFO.
  * @param  None
  * @retval Data received
  */
uint32_t SDIO_ReadData(void)
{ 
 8011ef0:	b480      	push	{r7}
 8011ef2:	af00      	add	r7, sp, #0
  return SDIO->FIFO;
 8011ef4:	4b03      	ldr	r3, [pc, #12]	; (8011f04 <SDIO_ReadData+0x14>)
 8011ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011efa:	4618      	mov	r0, r3
 8011efc:	46bd      	mov	sp, r7
 8011efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f02:	4770      	bx	lr
 8011f04:	40012c00 	.word	0x40012c00

08011f08 <SDIO_WriteData>:
  * @brief  Write one data word to Tx FIFO.
  * @param  Data: 32-bit data word to write.
  * @retval None
  */
void SDIO_WriteData(uint32_t Data)
{ 
 8011f08:	b480      	push	{r7}
 8011f0a:	b083      	sub	sp, #12
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]
  SDIO->FIFO = Data;
 8011f10:	4b04      	ldr	r3, [pc, #16]	; (8011f24 <SDIO_WriteData+0x1c>)
 8011f12:	687a      	ldr	r2, [r7, #4]
 8011f14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8011f18:	370c      	adds	r7, #12
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f20:	4770      	bx	lr
 8011f22:	bf00      	nop
 8011f24:	40012c00 	.word	0x40012c00

08011f28 <SDIO_GetFIFOCount>:
  * @brief  Returns the number of words left to be written to or read from FIFO.	
  * @param  None
  * @retval Remaining number of words.
  */
uint32_t SDIO_GetFIFOCount(void)
{ 
 8011f28:	b480      	push	{r7}
 8011f2a:	af00      	add	r7, sp, #0
  return SDIO->FIFOCNT;
 8011f2c:	4b03      	ldr	r3, [pc, #12]	; (8011f3c <SDIO_GetFIFOCount+0x14>)
 8011f2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 8011f30:	4618      	mov	r0, r3
 8011f32:	46bd      	mov	sp, r7
 8011f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f38:	4770      	bx	lr
 8011f3a:	bf00      	nop
 8011f3c:	40012c00 	.word	0x40012c00

08011f40 <SDIO_StartSDIOReadWait>:
  * @param  NewState: new state of the Start SDIO Read Wait operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_StartSDIOReadWait(FunctionalState NewState)
{ 
 8011f40:	b480      	push	{r7}
 8011f42:	b083      	sub	sp, #12
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	4603      	mov	r3, r0
 8011f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTART_BB = (uint32_t) NewState;
 8011f4a:	4b04      	ldr	r3, [pc, #16]	; (8011f5c <SDIO_StartSDIOReadWait+0x1c>)
 8011f4c:	79fa      	ldrb	r2, [r7, #7]
 8011f4e:	601a      	str	r2, [r3, #0]
}
 8011f50:	370c      	adds	r7, #12
 8011f52:	46bd      	mov	sp, r7
 8011f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f58:	4770      	bx	lr
 8011f5a:	bf00      	nop
 8011f5c:	422585a0 	.word	0x422585a0

08011f60 <SDIO_StopSDIOReadWait>:
  * @param  NewState: new state of the Stop SDIO Read Wait operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_StopSDIOReadWait(FunctionalState NewState)
{ 
 8011f60:	b480      	push	{r7}
 8011f62:	b083      	sub	sp, #12
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	4603      	mov	r3, r0
 8011f68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTOP_BB = (uint32_t) NewState;
 8011f6a:	4b04      	ldr	r3, [pc, #16]	; (8011f7c <SDIO_StopSDIOReadWait+0x1c>)
 8011f6c:	79fa      	ldrb	r2, [r7, #7]
 8011f6e:	601a      	str	r2, [r3, #0]
}
 8011f70:	370c      	adds	r7, #12
 8011f72:	46bd      	mov	sp, r7
 8011f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f78:	4770      	bx	lr
 8011f7a:	bf00      	nop
 8011f7c:	422585a4 	.word	0x422585a4

08011f80 <SDIO_SetSDIOReadWaitMode>:
  *            @arg SDIO_ReadWaitMode_CLK: Read Wait control by stopping SDIOCLK
  *            @arg SDIO_ReadWaitMode_DATA2: Read Wait control using SDIO_DATA2
  * @retval None
  */
void SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode)
{
 8011f80:	b480      	push	{r7}
 8011f82:	b083      	sub	sp, #12
 8011f84:	af00      	add	r7, sp, #0
 8011f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_READWAIT_MODE(SDIO_ReadWaitMode));
  
  *(__IO uint32_t *) DCTRL_RWMOD_BB = SDIO_ReadWaitMode;
 8011f88:	4b03      	ldr	r3, [pc, #12]	; (8011f98 <SDIO_SetSDIOReadWaitMode+0x18>)
 8011f8a:	687a      	ldr	r2, [r7, #4]
 8011f8c:	601a      	str	r2, [r3, #0]
}
 8011f8e:	370c      	adds	r7, #12
 8011f90:	46bd      	mov	sp, r7
 8011f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f96:	4770      	bx	lr
 8011f98:	422585a8 	.word	0x422585a8

08011f9c <SDIO_SetSDIOOperation>:
  * @param  NewState: new state of SDIO specific operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SetSDIOOperation(FunctionalState NewState)
{ 
 8011f9c:	b480      	push	{r7}
 8011f9e:	b083      	sub	sp, #12
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	4603      	mov	r3, r0
 8011fa4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_SDIOEN_BB = (uint32_t)NewState;
 8011fa6:	4b04      	ldr	r3, [pc, #16]	; (8011fb8 <SDIO_SetSDIOOperation+0x1c>)
 8011fa8:	79fa      	ldrb	r2, [r7, #7]
 8011faa:	601a      	str	r2, [r3, #0]
}
 8011fac:	370c      	adds	r7, #12
 8011fae:	46bd      	mov	sp, r7
 8011fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb4:	4770      	bx	lr
 8011fb6:	bf00      	nop
 8011fb8:	422585ac 	.word	0x422585ac

08011fbc <SDIO_SendSDIOSuspendCmd>:
  * @param  NewState: new state of the SD I/O Mode suspend command.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SendSDIOSuspendCmd(FunctionalState NewState)
{ 
 8011fbc:	b480      	push	{r7}
 8011fbe:	b083      	sub	sp, #12
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	4603      	mov	r3, r0
 8011fc4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_SDIOSUSPEND_BB = (uint32_t)NewState;
 8011fc6:	4b04      	ldr	r3, [pc, #16]	; (8011fd8 <SDIO_SendSDIOSuspendCmd+0x1c>)
 8011fc8:	79fa      	ldrb	r2, [r7, #7]
 8011fca:	601a      	str	r2, [r3, #0]
}
 8011fcc:	370c      	adds	r7, #12
 8011fce:	46bd      	mov	sp, r7
 8011fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd4:	4770      	bx	lr
 8011fd6:	bf00      	nop
 8011fd8:	422581ac 	.word	0x422581ac

08011fdc <SDIO_CommandCompletionCmd>:
  * @param  NewState: new state of command completion signal. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_CommandCompletionCmd(FunctionalState NewState)
{ 
 8011fdc:	b480      	push	{r7}
 8011fde:	b083      	sub	sp, #12
 8011fe0:	af00      	add	r7, sp, #0
 8011fe2:	4603      	mov	r3, r0
 8011fe4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ENCMDCOMPL_BB = (uint32_t)NewState;
 8011fe6:	4b04      	ldr	r3, [pc, #16]	; (8011ff8 <SDIO_CommandCompletionCmd+0x1c>)
 8011fe8:	79fa      	ldrb	r2, [r7, #7]
 8011fea:	601a      	str	r2, [r3, #0]
}
 8011fec:	370c      	adds	r7, #12
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff4:	4770      	bx	lr
 8011ff6:	bf00      	nop
 8011ff8:	422581b0 	.word	0x422581b0

08011ffc <SDIO_CEATAITCmd>:
  * @param  NewState: new state of CE-ATA interrupt. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_CEATAITCmd(FunctionalState NewState)
{ 
 8011ffc:	b480      	push	{r7}
 8011ffe:	b083      	sub	sp, #12
 8012000:	af00      	add	r7, sp, #0
 8012002:	4603      	mov	r3, r0
 8012004:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_NIEN_BB = (uint32_t)((~((uint32_t)NewState)) & ((uint32_t)0x1));
 8012006:	4b07      	ldr	r3, [pc, #28]	; (8012024 <SDIO_CEATAITCmd+0x28>)
 8012008:	79fa      	ldrb	r2, [r7, #7]
 801200a:	f002 0201 	and.w	r2, r2, #1
 801200e:	2a00      	cmp	r2, #0
 8012010:	bf14      	ite	ne
 8012012:	2200      	movne	r2, #0
 8012014:	2201      	moveq	r2, #1
 8012016:	b2d2      	uxtb	r2, r2
 8012018:	601a      	str	r2, [r3, #0]
}
 801201a:	370c      	adds	r7, #12
 801201c:	46bd      	mov	sp, r7
 801201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012022:	4770      	bx	lr
 8012024:	422581b4 	.word	0x422581b4

08012028 <SDIO_SendCEATACmd>:
  * @param  NewState: new state of CE-ATA command. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SendCEATACmd(FunctionalState NewState)
{ 
 8012028:	b480      	push	{r7}
 801202a:	b083      	sub	sp, #12
 801202c:	af00      	add	r7, sp, #0
 801202e:	4603      	mov	r3, r0
 8012030:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ATACMD_BB = (uint32_t)NewState;
 8012032:	4b04      	ldr	r3, [pc, #16]	; (8012044 <SDIO_SendCEATACmd+0x1c>)
 8012034:	79fa      	ldrb	r2, [r7, #7]
 8012036:	601a      	str	r2, [r3, #0]
}
 8012038:	370c      	adds	r7, #12
 801203a:	46bd      	mov	sp, r7
 801203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012040:	4770      	bx	lr
 8012042:	bf00      	nop
 8012044:	422581b8 	.word	0x422581b8

08012048 <SDIO_DMACmd>:
  * @param  NewState: new state of the selected SDIO DMA request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_DMACmd(FunctionalState NewState)
{
 8012048:	b480      	push	{r7}
 801204a:	b083      	sub	sp, #12
 801204c:	af00      	add	r7, sp, #0
 801204e:	4603      	mov	r3, r0
 8012050:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_DMAEN_BB = (uint32_t)NewState;
 8012052:	4b04      	ldr	r3, [pc, #16]	; (8012064 <SDIO_DMACmd+0x1c>)
 8012054:	79fa      	ldrb	r2, [r7, #7]
 8012056:	601a      	str	r2, [r3, #0]
}
 8012058:	370c      	adds	r7, #12
 801205a:	46bd      	mov	sp, r7
 801205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012060:	4770      	bx	lr
 8012062:	bf00      	nop
 8012064:	4225858c 	.word	0x4225858c

08012068 <SDIO_ITConfig>:
  * @param  NewState: new state of the specified SDIO interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None 
  */
void SDIO_ITConfig(uint32_t SDIO_IT, FunctionalState NewState)
{
 8012068:	b480      	push	{r7}
 801206a:	b083      	sub	sp, #12
 801206c:	af00      	add	r7, sp, #0
 801206e:	6078      	str	r0, [r7, #4]
 8012070:	460b      	mov	r3, r1
 8012072:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SDIO_IT(SDIO_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8012074:	78fb      	ldrb	r3, [r7, #3]
 8012076:	2b00      	cmp	r3, #0
 8012078:	d006      	beq.n	8012088 <SDIO_ITConfig+0x20>
  {
    /* Enable the SDIO interrupts */
    SDIO->MASK |= SDIO_IT;
 801207a:	4b09      	ldr	r3, [pc, #36]	; (80120a0 <SDIO_ITConfig+0x38>)
 801207c:	4a08      	ldr	r2, [pc, #32]	; (80120a0 <SDIO_ITConfig+0x38>)
 801207e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8012080:	687a      	ldr	r2, [r7, #4]
 8012082:	430a      	orrs	r2, r1
 8012084:	63da      	str	r2, [r3, #60]	; 0x3c
 8012086:	e006      	b.n	8012096 <SDIO_ITConfig+0x2e>
  }
  else
  {
    /* Disable the SDIO interrupts */
    SDIO->MASK &= ~SDIO_IT;
 8012088:	4b05      	ldr	r3, [pc, #20]	; (80120a0 <SDIO_ITConfig+0x38>)
 801208a:	4a05      	ldr	r2, [pc, #20]	; (80120a0 <SDIO_ITConfig+0x38>)
 801208c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 801208e:	687a      	ldr	r2, [r7, #4]
 8012090:	43d2      	mvns	r2, r2
 8012092:	400a      	ands	r2, r1
 8012094:	63da      	str	r2, [r3, #60]	; 0x3c
  } 
}
 8012096:	370c      	adds	r7, #12
 8012098:	46bd      	mov	sp, r7
 801209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801209e:	4770      	bx	lr
 80120a0:	40012c00 	.word	0x40012c00

080120a4 <SDIO_GetFlagStatus>:
  *            @arg SDIO_FLAG_SDIOIT:   SD I/O interrupt received
  *            @arg SDIO_FLAG_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval The new state of SDIO_FLAG (SET or RESET).
  */
FlagStatus SDIO_GetFlagStatus(uint32_t SDIO_FLAG)
{ 
 80120a4:	b480      	push	{r7}
 80120a6:	b085      	sub	sp, #20
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80120ac:	2300      	movs	r3, #0
 80120ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_SDIO_FLAG(SDIO_FLAG));
  
  if ((SDIO->STA & SDIO_FLAG) != (uint32_t)RESET)
 80120b0:	4b08      	ldr	r3, [pc, #32]	; (80120d4 <SDIO_GetFlagStatus+0x30>)
 80120b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	4013      	ands	r3, r2
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d002      	beq.n	80120c2 <SDIO_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 80120bc:	2301      	movs	r3, #1
 80120be:	73fb      	strb	r3, [r7, #15]
 80120c0:	e001      	b.n	80120c6 <SDIO_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 80120c2:	2300      	movs	r3, #0
 80120c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80120c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80120c8:	4618      	mov	r0, r3
 80120ca:	3714      	adds	r7, #20
 80120cc:	46bd      	mov	sp, r7
 80120ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d2:	4770      	bx	lr
 80120d4:	40012c00 	.word	0x40012c00

080120d8 <SDIO_ClearFlag>:
  *            @arg SDIO_FLAG_SDIOIT:   SD I/O interrupt received
  *            @arg SDIO_FLAG_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval None
  */
void SDIO_ClearFlag(uint32_t SDIO_FLAG)
{ 
 80120d8:	b480      	push	{r7}
 80120da:	b083      	sub	sp, #12
 80120dc:	af00      	add	r7, sp, #0
 80120de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_FLAG(SDIO_FLAG));
   
  SDIO->ICR = SDIO_FLAG;
 80120e0:	4b03      	ldr	r3, [pc, #12]	; (80120f0 <SDIO_ClearFlag+0x18>)
 80120e2:	687a      	ldr	r2, [r7, #4]
 80120e4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80120e6:	370c      	adds	r7, #12
 80120e8:	46bd      	mov	sp, r7
 80120ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ee:	4770      	bx	lr
 80120f0:	40012c00 	.word	0x40012c00

080120f4 <SDIO_GetITStatus>:
  *            @arg SDIO_IT_SDIOIT:   SD I/O interrupt received interrupt
  *            @arg SDIO_IT_CEATAEND: CE-ATA command completion signal received for CMD61 interrupt
  * @retval The new state of SDIO_IT (SET or RESET).
  */
ITStatus SDIO_GetITStatus(uint32_t SDIO_IT)
{ 
 80120f4:	b480      	push	{r7}
 80120f6:	b085      	sub	sp, #20
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 80120fc:	2300      	movs	r3, #0
 80120fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_SDIO_GET_IT(SDIO_IT));
  if ((SDIO->STA & SDIO_IT) != (uint32_t)RESET)  
 8012100:	4b08      	ldr	r3, [pc, #32]	; (8012124 <SDIO_GetITStatus+0x30>)
 8012102:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	4013      	ands	r3, r2
 8012108:	2b00      	cmp	r3, #0
 801210a:	d002      	beq.n	8012112 <SDIO_GetITStatus+0x1e>
  {
    bitstatus = SET;
 801210c:	2301      	movs	r3, #1
 801210e:	73fb      	strb	r3, [r7, #15]
 8012110:	e001      	b.n	8012116 <SDIO_GetITStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8012112:	2300      	movs	r3, #0
 8012114:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8012116:	7bfb      	ldrb	r3, [r7, #15]
}
 8012118:	4618      	mov	r0, r3
 801211a:	3714      	adds	r7, #20
 801211c:	46bd      	mov	sp, r7
 801211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012122:	4770      	bx	lr
 8012124:	40012c00 	.word	0x40012c00

08012128 <SDIO_ClearITPendingBit>:
  *            @arg SDIO_IT_SDIOIT:   SD I/O interrupt received interrupt
  *            @arg SDIO_IT_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval None
  */
void SDIO_ClearITPendingBit(uint32_t SDIO_IT)
{ 
 8012128:	b480      	push	{r7}
 801212a:	b083      	sub	sp, #12
 801212c:	af00      	add	r7, sp, #0
 801212e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_IT(SDIO_IT));
   
  SDIO->ICR = SDIO_IT;
 8012130:	4b03      	ldr	r3, [pc, #12]	; (8012140 <SDIO_ClearITPendingBit+0x18>)
 8012132:	687a      	ldr	r2, [r7, #4]
 8012134:	639a      	str	r2, [r3, #56]	; 0x38
}
 8012136:	370c      	adds	r7, #12
 8012138:	46bd      	mov	sp, r7
 801213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801213e:	4770      	bx	lr
 8012140:	40012c00 	.word	0x40012c00

08012144 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8012144:	b580      	push	{r7, lr}
 8012146:	b082      	sub	sp, #8
 8012148:	af00      	add	r7, sp, #0
 801214a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 801214c:	687a      	ldr	r2, [r7, #4]
 801214e:	4b2d      	ldr	r3, [pc, #180]	; (8012204 <SPI_I2S_DeInit+0xc0>)
 8012150:	429a      	cmp	r2, r3
 8012152:	d10a      	bne.n	801216a <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8012154:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8012158:	2101      	movs	r1, #1
 801215a:	f7fd fe7b 	bl	800fe54 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 801215e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8012162:	2100      	movs	r1, #0
 8012164:	f7fd fe76 	bl	800fe54 <RCC_APB2PeriphResetCmd>
 8012168:	e049      	b.n	80121fe <SPI_I2S_DeInit+0xba>
  }
  else if (SPIx == SPI2)
 801216a:	687a      	ldr	r2, [r7, #4]
 801216c:	4b26      	ldr	r3, [pc, #152]	; (8012208 <SPI_I2S_DeInit+0xc4>)
 801216e:	429a      	cmp	r2, r3
 8012170:	d10a      	bne.n	8012188 <SPI_I2S_DeInit+0x44>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8012172:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8012176:	2101      	movs	r1, #1
 8012178:	f7fd fe4e 	bl	800fe18 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 801217c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8012180:	2100      	movs	r1, #0
 8012182:	f7fd fe49 	bl	800fe18 <RCC_APB1PeriphResetCmd>
 8012186:	e03a      	b.n	80121fe <SPI_I2S_DeInit+0xba>
  }
  else if (SPIx == SPI3)
 8012188:	687a      	ldr	r2, [r7, #4]
 801218a:	4b20      	ldr	r3, [pc, #128]	; (801220c <SPI_I2S_DeInit+0xc8>)
 801218c:	429a      	cmp	r2, r3
 801218e:	d10a      	bne.n	80121a6 <SPI_I2S_DeInit+0x62>
  {
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8012190:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8012194:	2101      	movs	r1, #1
 8012196:	f7fd fe3f 	bl	800fe18 <RCC_APB1PeriphResetCmd>
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 801219a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 801219e:	2100      	movs	r1, #0
 80121a0:	f7fd fe3a 	bl	800fe18 <RCC_APB1PeriphResetCmd>
 80121a4:	e02b      	b.n	80121fe <SPI_I2S_DeInit+0xba>
  }
  else if (SPIx == SPI4)
 80121a6:	687a      	ldr	r2, [r7, #4]
 80121a8:	4b19      	ldr	r3, [pc, #100]	; (8012210 <SPI_I2S_DeInit+0xcc>)
 80121aa:	429a      	cmp	r2, r3
 80121ac:	d10a      	bne.n	80121c4 <SPI_I2S_DeInit+0x80>
  {
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 80121ae:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80121b2:	2101      	movs	r1, #1
 80121b4:	f7fd fe4e 	bl	800fe54 <RCC_APB2PeriphResetCmd>
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 80121b8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80121bc:	2100      	movs	r1, #0
 80121be:	f7fd fe49 	bl	800fe54 <RCC_APB2PeriphResetCmd>
 80121c2:	e01c      	b.n	80121fe <SPI_I2S_DeInit+0xba>
  }
  else if (SPIx == SPI5)
 80121c4:	687a      	ldr	r2, [r7, #4]
 80121c6:	4b13      	ldr	r3, [pc, #76]	; (8012214 <SPI_I2S_DeInit+0xd0>)
 80121c8:	429a      	cmp	r2, r3
 80121ca:	d10a      	bne.n	80121e2 <SPI_I2S_DeInit+0x9e>
  {
    /* Enable SPI5 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 80121cc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80121d0:	2101      	movs	r1, #1
 80121d2:	f7fd fe3f 	bl	800fe54 <RCC_APB2PeriphResetCmd>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 80121d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80121da:	2100      	movs	r1, #0
 80121dc:	f7fd fe3a 	bl	800fe54 <RCC_APB2PeriphResetCmd>
 80121e0:	e00d      	b.n	80121fe <SPI_I2S_DeInit+0xba>
  }
  else 
  {
    if (SPIx == SPI6)
 80121e2:	687a      	ldr	r2, [r7, #4]
 80121e4:	4b0c      	ldr	r3, [pc, #48]	; (8012218 <SPI_I2S_DeInit+0xd4>)
 80121e6:	429a      	cmp	r2, r3
 80121e8:	d109      	bne.n	80121fe <SPI_I2S_DeInit+0xba>
    {
      /* Enable SPI6 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 80121ea:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80121ee:	2101      	movs	r1, #1
 80121f0:	f7fd fe30 	bl	800fe54 <RCC_APB2PeriphResetCmd>
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 80121f4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80121f8:	2100      	movs	r1, #0
 80121fa:	f7fd fe2b 	bl	800fe54 <RCC_APB2PeriphResetCmd>
    }
  }
}
 80121fe:	3708      	adds	r7, #8
 8012200:	46bd      	mov	sp, r7
 8012202:	bd80      	pop	{r7, pc}
 8012204:	40013000 	.word	0x40013000
 8012208:	40003800 	.word	0x40003800
 801220c:	40003c00 	.word	0x40003c00
 8012210:	40013400 	.word	0x40013400
 8012214:	40015000 	.word	0x40015000
 8012218:	40015400 	.word	0x40015400

0801221c <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 801221c:	b480      	push	{r7}
 801221e:	b085      	sub	sp, #20
 8012220:	af00      	add	r7, sp, #0
 8012222:	6078      	str	r0, [r7, #4]
 8012224:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8012226:	2300      	movs	r3, #0
 8012228:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	881b      	ldrh	r3, [r3, #0]
 801222e:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8012230:	89fb      	ldrh	r3, [r7, #14]
 8012232:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8012236:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8012238:	683b      	ldr	r3, [r7, #0]
 801223a:	881a      	ldrh	r2, [r3, #0]
 801223c:	683b      	ldr	r3, [r7, #0]
 801223e:	885b      	ldrh	r3, [r3, #2]
 8012240:	4313      	orrs	r3, r2
 8012242:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8012244:	683b      	ldr	r3, [r7, #0]
 8012246:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8012248:	4313      	orrs	r3, r2
 801224a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 801224c:	683b      	ldr	r3, [r7, #0]
 801224e:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8012250:	4313      	orrs	r3, r2
 8012252:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8012254:	683b      	ldr	r3, [r7, #0]
 8012256:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8012258:	4313      	orrs	r3, r2
 801225a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 801225c:	683b      	ldr	r3, [r7, #0]
 801225e:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8012260:	4313      	orrs	r3, r2
 8012262:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8012264:	683b      	ldr	r3, [r7, #0]
 8012266:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8012268:	4313      	orrs	r3, r2
 801226a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 801226c:	683b      	ldr	r3, [r7, #0]
 801226e:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8012270:	4313      	orrs	r3, r2
 8012272:	b29a      	uxth	r2, r3
 8012274:	89fb      	ldrh	r3, [r7, #14]
 8012276:	4313      	orrs	r3, r2
 8012278:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	89fa      	ldrh	r2, [r7, #14]
 801227e:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	8b9b      	ldrh	r3, [r3, #28]
 8012284:	b29b      	uxth	r3, r3
 8012286:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801228a:	b29a      	uxth	r2, r3
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8012290:	683b      	ldr	r3, [r7, #0]
 8012292:	8a1a      	ldrh	r2, [r3, #16]
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	821a      	strh	r2, [r3, #16]
}
 8012298:	3714      	adds	r7, #20
 801229a:	46bd      	mov	sp, r7
 801229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a0:	4770      	bx	lr
 80122a2:	bf00      	nop

080122a4 <I2S_Init>:
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 80122a4:	b480      	push	{r7}
 80122a6:	b08b      	sub	sp, #44	; 0x2c
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
 80122ac:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 80122ae:	2300      	movs	r3, #0
 80122b0:	837b      	strh	r3, [r7, #26]
 80122b2:	2302      	movs	r3, #2
 80122b4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80122b6:	2300      	movs	r3, #0
 80122b8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80122ba:	2301      	movs	r3, #1
 80122bc:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t tmp = 0, i2sclk = 0;
 80122be:	2300      	movs	r3, #0
 80122c0:	61fb      	str	r3, [r7, #28]
 80122c2:	2300      	movs	r3, #0
 80122c4:	617b      	str	r3, [r7, #20]
#ifndef I2S_EXTERNAL_CLOCK_VAL
  uint32_t pllm = 0, plln = 0, pllr = 0;
 80122c6:	2300      	movs	r3, #0
 80122c8:	613b      	str	r3, [r7, #16]
 80122ca:	2300      	movs	r3, #0
 80122cc:	60fb      	str	r3, [r7, #12]
 80122ce:	2300      	movs	r3, #0
 80122d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	8b9b      	ldrh	r3, [r3, #28]
 80122d6:	b29b      	uxth	r3, r3
 80122d8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80122dc:	f023 030f 	bic.w	r3, r3, #15
 80122e0:	b29a      	uxth	r2, r3
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	839a      	strh	r2, [r3, #28]
  SPIx->I2SPR = 0x0002;
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	2202      	movs	r2, #2
 80122ea:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	8b9b      	ldrh	r3, [r3, #28]
 80122f0:	837b      	strh	r3, [r7, #26]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 80122f2:	683b      	ldr	r3, [r7, #0]
 80122f4:	689b      	ldr	r3, [r3, #8]
 80122f6:	2b02      	cmp	r3, #2
 80122f8:	d104      	bne.n	8012304 <I2S_Init+0x60>
  {
    i2sodd = (uint16_t)0;
 80122fa:	2300      	movs	r3, #0
 80122fc:	84bb      	strh	r3, [r7, #36]	; 0x24
    i2sdiv = (uint16_t)2;   
 80122fe:	2302      	movs	r3, #2
 8012300:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012302:	e071      	b.n	80123e8 <I2S_Init+0x144>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8012304:	683b      	ldr	r3, [r7, #0]
 8012306:	889b      	ldrh	r3, [r3, #4]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d102      	bne.n	8012312 <I2S_Init+0x6e>
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 801230c:	2301      	movs	r3, #1
 801230e:	847b      	strh	r3, [r7, #34]	; 0x22
 8012310:	e001      	b.n	8012316 <I2S_Init+0x72>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 8012312:	2302      	movs	r3, #2
 8012314:	847b      	strh	r3, [r7, #34]	; 0x22
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8012316:	4b4c      	ldr	r3, [pc, #304]	; (8012448 <I2S_Init+0x1a4>)
 8012318:	689b      	ldr	r3, [r3, #8]
 801231a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801231e:	2b00      	cmp	r3, #0
 8012320:	d005      	beq.n	801232e <I2S_Init+0x8a>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 8012322:	4b49      	ldr	r3, [pc, #292]	; (8012448 <I2S_Init+0x1a4>)
 8012324:	4a48      	ldr	r2, [pc, #288]	; (8012448 <I2S_Init+0x1a4>)
 8012326:	6892      	ldr	r2, [r2, #8]
 8012328:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 801232c:	609a      	str	r2, [r3, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 801232e:	4b46      	ldr	r3, [pc, #280]	; (8012448 <I2S_Init+0x1a4>)
 8012330:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8012334:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8012338:	4013      	ands	r3, r2
 801233a:	099b      	lsrs	r3, r3, #6
 801233c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012340:	60fb      	str	r3, [r7, #12]
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8012342:	4b41      	ldr	r3, [pc, #260]	; (8012448 <I2S_Init+0x1a4>)
 8012344:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012348:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 801234c:	0f1b      	lsrs	r3, r3, #28
 801234e:	f003 0307 	and.w	r3, r3, #7
 8012352:	60bb      	str	r3, [r7, #8]
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8012354:	4b3c      	ldr	r3, [pc, #240]	; (8012448 <I2S_Init+0x1a4>)
 8012356:	685b      	ldr	r3, [r3, #4]
 8012358:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801235c:	613b      	str	r3, [r7, #16]

    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 801235e:	4a3b      	ldr	r2, [pc, #236]	; (801244c <I2S_Init+0x1a8>)
 8012360:	693b      	ldr	r3, [r7, #16]
 8012362:	fbb2 f3f3 	udiv	r3, r2, r3
 8012366:	68fa      	ldr	r2, [r7, #12]
 8012368:	fb02 f203 	mul.w	r2, r2, r3
 801236c:	68bb      	ldr	r3, [r7, #8]
 801236e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012372:	617b      	str	r3, [r7, #20]
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8012374:	683b      	ldr	r3, [r7, #0]
 8012376:	88db      	ldrh	r3, [r3, #6]
 8012378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801237c:	d10f      	bne.n	801239e <I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 801237e:	697b      	ldr	r3, [r7, #20]
 8012380:	0a1a      	lsrs	r2, r3, #8
 8012382:	4613      	mov	r3, r2
 8012384:	009b      	lsls	r3, r3, #2
 8012386:	4413      	add	r3, r2
 8012388:	005b      	lsls	r3, r3, #1
 801238a:	461a      	mov	r2, r3
 801238c:	683b      	ldr	r3, [r7, #0]
 801238e:	689b      	ldr	r3, [r3, #8]
 8012390:	fbb2 f3f3 	udiv	r3, r2, r3
 8012394:	b29b      	uxth	r3, r3
 8012396:	3305      	adds	r3, #5
 8012398:	b29b      	uxth	r3, r3
 801239a:	61fb      	str	r3, [r7, #28]
 801239c:	e011      	b.n	80123c2 <I2S_Init+0x11e>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 801239e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80123a0:	015b      	lsls	r3, r3, #5
 80123a2:	697a      	ldr	r2, [r7, #20]
 80123a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80123a8:	4613      	mov	r3, r2
 80123aa:	009b      	lsls	r3, r3, #2
 80123ac:	4413      	add	r3, r2
 80123ae:	005b      	lsls	r3, r3, #1
 80123b0:	461a      	mov	r2, r3
 80123b2:	683b      	ldr	r3, [r7, #0]
 80123b4:	689b      	ldr	r3, [r3, #8]
 80123b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80123ba:	b29b      	uxth	r3, r3
 80123bc:	3305      	adds	r3, #5
 80123be:	b29b      	uxth	r3, r3
 80123c0:	61fb      	str	r3, [r7, #28]
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 80123c2:	69fa      	ldr	r2, [r7, #28]
 80123c4:	4b22      	ldr	r3, [pc, #136]	; (8012450 <I2S_Init+0x1ac>)
 80123c6:	fba3 1302 	umull	r1, r3, r3, r2
 80123ca:	08db      	lsrs	r3, r3, #3
 80123cc:	61fb      	str	r3, [r7, #28]
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 80123ce:	69fb      	ldr	r3, [r7, #28]
 80123d0:	b29b      	uxth	r3, r3
 80123d2:	f003 0301 	and.w	r3, r3, #1
 80123d6:	84bb      	strh	r3, [r7, #36]	; 0x24
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 80123d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80123da:	69fa      	ldr	r2, [r7, #28]
 80123dc:	1ad3      	subs	r3, r2, r3
 80123de:	085b      	lsrs	r3, r3, #1
 80123e0:	84fb      	strh	r3, [r7, #38]	; 0x26
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 80123e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80123e4:	021b      	lsls	r3, r3, #8
 80123e6:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 80123e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80123ea:	2b01      	cmp	r3, #1
 80123ec:	d902      	bls.n	80123f4 <I2S_Init+0x150>
 80123ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80123f0:	2bff      	cmp	r3, #255	; 0xff
 80123f2:	d903      	bls.n	80123fc <I2S_Init+0x158>
  {
    /* Set the default values */
    i2sdiv = 2;
 80123f4:	2302      	movs	r3, #2
 80123f6:	84fb      	strh	r3, [r7, #38]	; 0x26
    i2sodd = 0;
 80123f8:	2300      	movs	r3, #0
 80123fa:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 80123fc:	683b      	ldr	r3, [r7, #0]
 80123fe:	88da      	ldrh	r2, [r3, #6]
 8012400:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012402:	4313      	orrs	r3, r2
 8012404:	b29a      	uxth	r2, r3
 8012406:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012408:	4313      	orrs	r3, r2
 801240a:	b29a      	uxth	r2, r3
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	841a      	strh	r2, [r3, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8012410:	683b      	ldr	r3, [r7, #0]
 8012412:	881a      	ldrh	r2, [r3, #0]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8012414:	683b      	ldr	r3, [r7, #0]
 8012416:	8859      	ldrh	r1, [r3, #2]
 8012418:	683b      	ldr	r3, [r7, #0]
 801241a:	8898      	ldrh	r0, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 801241c:	683b      	ldr	r3, [r7, #0]
 801241e:	899b      	ldrh	r3, [r3, #12]
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8012420:	4303      	orrs	r3, r0
 8012422:	b29b      	uxth	r3, r3
 8012424:	430b      	orrs	r3, r1
 8012426:	b29b      	uxth	r3, r3

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8012428:	4313      	orrs	r3, r2
 801242a:	b29a      	uxth	r2, r3
 801242c:	8b7b      	ldrh	r3, [r7, #26]
 801242e:	4313      	orrs	r3, r2
 8012430:	b29b      	uxth	r3, r3
 8012432:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012436:	837b      	strh	r3, [r7, #26]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	8b7a      	ldrh	r2, [r7, #26]
 801243c:	839a      	strh	r2, [r3, #28]
}
 801243e:	372c      	adds	r7, #44	; 0x2c
 8012440:	46bd      	mov	sp, r7
 8012442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012446:	4770      	bx	lr
 8012448:	40023800 	.word	0x40023800
 801244c:	007a1200 	.word	0x007a1200
 8012450:	cccccccd 	.word	0xcccccccd

08012454 <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 8012454:	b480      	push	{r7}
 8012456:	b083      	sub	sp, #12
 8012458:	af00      	add	r7, sp, #0
 801245a:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	2200      	movs	r2, #0
 8012460:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	2200      	movs	r2, #0
 8012466:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	2200      	movs	r2, #0
 801246c:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	2200      	movs	r2, #0
 8012472:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	2200      	movs	r2, #0
 8012478:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	2200      	movs	r2, #0
 801247e:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	2200      	movs	r2, #0
 8012484:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	2200      	movs	r2, #0
 801248a:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	2207      	movs	r2, #7
 8012490:	821a      	strh	r2, [r3, #16]
}
 8012492:	370c      	adds	r7, #12
 8012494:	46bd      	mov	sp, r7
 8012496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801249a:	4770      	bx	lr

0801249c <I2S_StructInit>:
  * @brief  Fills each I2S_InitStruct member with its default value.
  * @param  I2S_InitStruct: pointer to a I2S_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
 801249c:	b480      	push	{r7}
 801249e:	b083      	sub	sp, #12
 80124a0:	af00      	add	r7, sp, #0
 80124a2:	6078      	str	r0, [r7, #4]
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	2200      	movs	r2, #0
 80124a8:	801a      	strh	r2, [r3, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	2200      	movs	r2, #0
 80124ae:	805a      	strh	r2, [r3, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	2200      	movs	r2, #0
 80124b4:	809a      	strh	r2, [r3, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	2200      	movs	r2, #0
 80124ba:	80da      	strh	r2, [r3, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	2202      	movs	r2, #2
 80124c0:	609a      	str	r2, [r3, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	2200      	movs	r2, #0
 80124c6:	819a      	strh	r2, [r3, #12]
}
 80124c8:	370c      	adds	r7, #12
 80124ca:	46bd      	mov	sp, r7
 80124cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d0:	4770      	bx	lr
 80124d2:	bf00      	nop

080124d4 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80124d4:	b480      	push	{r7}
 80124d6:	b083      	sub	sp, #12
 80124d8:	af00      	add	r7, sp, #0
 80124da:	6078      	str	r0, [r7, #4]
 80124dc:	460b      	mov	r3, r1
 80124de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80124e0:	78fb      	ldrb	r3, [r7, #3]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d008      	beq.n	80124f8 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	881b      	ldrh	r3, [r3, #0]
 80124ea:	b29b      	uxth	r3, r3
 80124ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80124f0:	b29a      	uxth	r2, r3
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	801a      	strh	r2, [r3, #0]
 80124f6:	e007      	b.n	8012508 <SPI_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	881b      	ldrh	r3, [r3, #0]
 80124fc:	b29b      	uxth	r3, r3
 80124fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012502:	b29a      	uxth	r2, r3
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	801a      	strh	r2, [r3, #0]
  }
}
 8012508:	370c      	adds	r7, #12
 801250a:	46bd      	mov	sp, r7
 801250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012510:	4770      	bx	lr
 8012512:	bf00      	nop

08012514 <I2S_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8012514:	b480      	push	{r7}
 8012516:	b083      	sub	sp, #12
 8012518:	af00      	add	r7, sp, #0
 801251a:	6078      	str	r0, [r7, #4]
 801251c:	460b      	mov	r3, r1
 801251e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8012520:	78fb      	ldrb	r3, [r7, #3]
 8012522:	2b00      	cmp	r3, #0
 8012524:	d008      	beq.n	8012538 <I2S_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	8b9b      	ldrh	r3, [r3, #28]
 801252a:	b29b      	uxth	r3, r3
 801252c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8012530:	b29a      	uxth	r2, r3
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	839a      	strh	r2, [r3, #28]
 8012536:	e007      	b.n	8012548 <I2S_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	8b9b      	ldrh	r3, [r3, #28]
 801253c:	b29b      	uxth	r3, r3
 801253e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012542:	b29a      	uxth	r2, r3
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	839a      	strh	r2, [r3, #28]
  }
}
 8012548:	370c      	adds	r7, #12
 801254a:	46bd      	mov	sp, r7
 801254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012550:	4770      	bx	lr
 8012552:	bf00      	nop

08012554 <SPI_DataSizeConfig>:
  *            @arg SPI_DataSize_16b: Set data frame format to 16bit
  *            @arg SPI_DataSize_8b: Set data frame format to 8bit
  * @retval None
  */
void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
{
 8012554:	b480      	push	{r7}
 8012556:	b083      	sub	sp, #12
 8012558:	af00      	add	r7, sp, #0
 801255a:	6078      	str	r0, [r7, #4]
 801255c:	460b      	mov	r3, r1
 801255e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	881b      	ldrh	r3, [r3, #0]
 8012564:	b29b      	uxth	r3, r3
 8012566:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801256a:	b29a      	uxth	r2, r3
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	801a      	strh	r2, [r3, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	881b      	ldrh	r3, [r3, #0]
 8012574:	b29a      	uxth	r2, r3
 8012576:	887b      	ldrh	r3, [r7, #2]
 8012578:	4313      	orrs	r3, r2
 801257a:	b29a      	uxth	r2, r3
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	801a      	strh	r2, [r3, #0]
}
 8012580:	370c      	adds	r7, #12
 8012582:	46bd      	mov	sp, r7
 8012584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012588:	4770      	bx	lr
 801258a:	bf00      	nop

0801258c <SPI_BiDirectionalLineConfig>:
  *            @arg SPI_Direction_Tx: Selects Tx transmission direction
  *            @arg SPI_Direction_Rx: Selects Rx receive direction
  * @retval None
  */
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
 801258c:	b480      	push	{r7}
 801258e:	b083      	sub	sp, #12
 8012590:	af00      	add	r7, sp, #0
 8012592:	6078      	str	r0, [r7, #4]
 8012594:	460b      	mov	r3, r1
 8012596:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8012598:	887b      	ldrh	r3, [r7, #2]
 801259a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801259e:	d108      	bne.n	80125b2 <SPI_BiDirectionalLineConfig+0x26>
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	881b      	ldrh	r3, [r3, #0]
 80125a4:	b29b      	uxth	r3, r3
 80125a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80125aa:	b29a      	uxth	r2, r3
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	801a      	strh	r2, [r3, #0]
 80125b0:	e007      	b.n	80125c2 <SPI_BiDirectionalLineConfig+0x36>
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	881b      	ldrh	r3, [r3, #0]
 80125b6:	b29b      	uxth	r3, r3
 80125b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80125bc:	b29a      	uxth	r2, r3
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	801a      	strh	r2, [r3, #0]
  }
}
 80125c2:	370c      	adds	r7, #12
 80125c4:	46bd      	mov	sp, r7
 80125c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ca:	4770      	bx	lr

080125cc <SPI_NSSInternalSoftwareConfig>:
  *            @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
  *            @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
  * @retval None
  */
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
 80125cc:	b480      	push	{r7}
 80125ce:	b083      	sub	sp, #12
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	6078      	str	r0, [r7, #4]
 80125d4:	460b      	mov	r3, r1
 80125d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 80125d8:	887a      	ldrh	r2, [r7, #2]
 80125da:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80125de:	429a      	cmp	r2, r3
 80125e0:	d008      	beq.n	80125f4 <SPI_NSSInternalSoftwareConfig+0x28>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	881b      	ldrh	r3, [r3, #0]
 80125e6:	b29b      	uxth	r3, r3
 80125e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80125ec:	b29a      	uxth	r2, r3
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	801a      	strh	r2, [r3, #0]
 80125f2:	e007      	b.n	8012604 <SPI_NSSInternalSoftwareConfig+0x38>
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	881b      	ldrh	r3, [r3, #0]
 80125f8:	b29b      	uxth	r3, r3
 80125fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80125fe:	b29a      	uxth	r2, r3
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	801a      	strh	r2, [r3, #0]
  }
}
 8012604:	370c      	adds	r7, #12
 8012606:	46bd      	mov	sp, r7
 8012608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801260c:	4770      	bx	lr
 801260e:	bf00      	nop

08012610 <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8012610:	b480      	push	{r7}
 8012612:	b083      	sub	sp, #12
 8012614:	af00      	add	r7, sp, #0
 8012616:	6078      	str	r0, [r7, #4]
 8012618:	460b      	mov	r3, r1
 801261a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 801261c:	78fb      	ldrb	r3, [r7, #3]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d008      	beq.n	8012634 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	889b      	ldrh	r3, [r3, #4]
 8012626:	b29b      	uxth	r3, r3
 8012628:	f043 0304 	orr.w	r3, r3, #4
 801262c:	b29a      	uxth	r2, r3
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	809a      	strh	r2, [r3, #4]
 8012632:	e007      	b.n	8012644 <SPI_SSOutputCmd+0x34>
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	889b      	ldrh	r3, [r3, #4]
 8012638:	b29b      	uxth	r3, r3
 801263a:	f023 0304 	bic.w	r3, r3, #4
 801263e:	b29a      	uxth	r2, r3
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	809a      	strh	r2, [r3, #4]
  }
}
 8012644:	370c      	adds	r7, #12
 8012646:	46bd      	mov	sp, r7
 8012648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264c:	4770      	bx	lr
 801264e:	bf00      	nop

08012650 <SPI_TIModeCmd>:
  * @param  NewState: new state of the selected SPI TI communication mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8012650:	b480      	push	{r7}
 8012652:	b083      	sub	sp, #12
 8012654:	af00      	add	r7, sp, #0
 8012656:	6078      	str	r0, [r7, #4]
 8012658:	460b      	mov	r3, r1
 801265a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801265c:	78fb      	ldrb	r3, [r7, #3]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d008      	beq.n	8012674 <SPI_TIModeCmd+0x24>
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	889b      	ldrh	r3, [r3, #4]
 8012666:	b29b      	uxth	r3, r3
 8012668:	f043 0310 	orr.w	r3, r3, #16
 801266c:	b29a      	uxth	r2, r3
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	809a      	strh	r2, [r3, #4]
 8012672:	e007      	b.n	8012684 <SPI_TIModeCmd+0x34>
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	889b      	ldrh	r3, [r3, #4]
 8012678:	b29b      	uxth	r3, r3
 801267a:	f023 0310 	bic.w	r3, r3, #16
 801267e:	b29a      	uxth	r2, r3
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	809a      	strh	r2, [r3, #4]
  }
}
 8012684:	370c      	adds	r7, #12
 8012686:	46bd      	mov	sp, r7
 8012688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801268c:	4770      	bx	lr
 801268e:	bf00      	nop

08012690 <I2S_FullDuplexConfig>:
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 8012690:	b480      	push	{r7}
 8012692:	b085      	sub	sp, #20
 8012694:	af00      	add	r7, sp, #0
 8012696:	6078      	str	r0, [r7, #4]
 8012698:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, tmp = 0;
 801269a:	2300      	movs	r3, #0
 801269c:	81bb      	strh	r3, [r7, #12]
 801269e:	2300      	movs	r3, #0
 80126a0:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	8b9b      	ldrh	r3, [r3, #28]
 80126a6:	b29b      	uxth	r3, r3
 80126a8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80126ac:	f023 030f 	bic.w	r3, r3, #15
 80126b0:	b29a      	uxth	r2, r3
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	839a      	strh	r2, [r3, #28]
  I2Sxext->I2SPR = 0x0002;
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	2202      	movs	r2, #2
 80126ba:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	8b9b      	ldrh	r3, [r3, #28]
 80126c0:	81bb      	strh	r3, [r7, #12]
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 80126c2:	683b      	ldr	r3, [r7, #0]
 80126c4:	881b      	ldrh	r3, [r3, #0]
 80126c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80126ca:	d003      	beq.n	80126d4 <I2S_FullDuplexConfig+0x44>
 80126cc:	683b      	ldr	r3, [r7, #0]
 80126ce:	881b      	ldrh	r3, [r3, #0]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d103      	bne.n	80126dc <I2S_FullDuplexConfig+0x4c>
  {
    tmp = I2S_Mode_SlaveRx;
 80126d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80126d8:	81fb      	strh	r3, [r7, #14]
 80126da:	e00b      	b.n	80126f4 <I2S_FullDuplexConfig+0x64>
  }
  else
  {
    if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveRx))
 80126dc:	683b      	ldr	r3, [r7, #0]
 80126de:	881b      	ldrh	r3, [r3, #0]
 80126e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80126e4:	d004      	beq.n	80126f0 <I2S_FullDuplexConfig+0x60>
 80126e6:	683b      	ldr	r3, [r7, #0]
 80126e8:	881b      	ldrh	r3, [r3, #0]
 80126ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80126ee:	d101      	bne.n	80126f4 <I2S_FullDuplexConfig+0x64>
    {
      tmp = I2S_Mode_SlaveTx;
 80126f0:	2300      	movs	r3, #0
 80126f2:	81fb      	strh	r3, [r7, #14]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80126f4:	683b      	ldr	r3, [r7, #0]
 80126f6:	885a      	ldrh	r2, [r3, #2]
 80126f8:	683b      	ldr	r3, [r7, #0]
 80126fa:	8899      	ldrh	r1, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 80126fc:	683b      	ldr	r3, [r7, #0]
 80126fe:	899b      	ldrh	r3, [r3, #12]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8012700:	430b      	orrs	r3, r1
 8012702:	b29b      	uxth	r3, r3
 8012704:	4313      	orrs	r3, r2
 8012706:	b29a      	uxth	r2, r3
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8012708:	89fb      	ldrh	r3, [r7, #14]
 801270a:	4313      	orrs	r3, r2
 801270c:	b29a      	uxth	r2, r3
 801270e:	89bb      	ldrh	r3, [r7, #12]
 8012710:	4313      	orrs	r3, r2
 8012712:	b29b      	uxth	r3, r3
 8012714:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012718:	81bb      	strh	r3, [r7, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	89ba      	ldrh	r2, [r7, #12]
 801271e:	839a      	strh	r2, [r3, #28]
}
 8012720:	3714      	adds	r7, #20
 8012722:	46bd      	mov	sp, r7
 8012724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012728:	4770      	bx	lr
 801272a:	bf00      	nop

0801272c <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 801272c:	b480      	push	{r7}
 801272e:	b083      	sub	sp, #12
 8012730:	af00      	add	r7, sp, #0
 8012732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	899b      	ldrh	r3, [r3, #12]
 8012738:	b29b      	uxth	r3, r3
}
 801273a:	4618      	mov	r0, r3
 801273c:	370c      	adds	r7, #12
 801273e:	46bd      	mov	sp, r7
 8012740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012744:	4770      	bx	lr
 8012746:	bf00      	nop

08012748 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8012748:	b480      	push	{r7}
 801274a:	b083      	sub	sp, #12
 801274c:	af00      	add	r7, sp, #0
 801274e:	6078      	str	r0, [r7, #4]
 8012750:	460b      	mov	r3, r1
 8012752:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	887a      	ldrh	r2, [r7, #2]
 8012758:	819a      	strh	r2, [r3, #12]
}
 801275a:	370c      	adds	r7, #12
 801275c:	46bd      	mov	sp, r7
 801275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012762:	4770      	bx	lr

08012764 <SPI_CalculateCRC>:
  * @param  NewState: new state of the SPIx CRC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8012764:	b480      	push	{r7}
 8012766:	b083      	sub	sp, #12
 8012768:	af00      	add	r7, sp, #0
 801276a:	6078      	str	r0, [r7, #4]
 801276c:	460b      	mov	r3, r1
 801276e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8012770:	78fb      	ldrb	r3, [r7, #3]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d008      	beq.n	8012788 <SPI_CalculateCRC+0x24>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	881b      	ldrh	r3, [r3, #0]
 801277a:	b29b      	uxth	r3, r3
 801277c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012780:	b29a      	uxth	r2, r3
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	801a      	strh	r2, [r3, #0]
 8012786:	e007      	b.n	8012798 <SPI_CalculateCRC+0x34>
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	881b      	ldrh	r3, [r3, #0]
 801278c:	b29b      	uxth	r3, r3
 801278e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012792:	b29a      	uxth	r2, r3
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	801a      	strh	r2, [r3, #0]
  }
}
 8012798:	370c      	adds	r7, #12
 801279a:	46bd      	mov	sp, r7
 801279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a0:	4770      	bx	lr
 80127a2:	bf00      	nop

080127a4 <SPI_TransmitCRC>:
  * @brief  Transmit the SPIx CRC value.
  * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
  * @retval None
  */
void SPI_TransmitCRC(SPI_TypeDef* SPIx)
{
 80127a4:	b480      	push	{r7}
 80127a6:	b083      	sub	sp, #12
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	881b      	ldrh	r3, [r3, #0]
 80127b0:	b29b      	uxth	r3, r3
 80127b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80127b6:	b29a      	uxth	r2, r3
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	801a      	strh	r2, [r3, #0]
}
 80127bc:	370c      	adds	r7, #12
 80127be:	46bd      	mov	sp, r7
 80127c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c4:	4770      	bx	lr
 80127c6:	bf00      	nop

080127c8 <SPI_GetCRC>:
  *            @arg SPI_CRC_Tx: Selects Tx CRC register
  *            @arg SPI_CRC_Rx: Selects Rx CRC register
  * @retval The selected CRC register value..
  */
uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
{
 80127c8:	b480      	push	{r7}
 80127ca:	b085      	sub	sp, #20
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	6078      	str	r0, [r7, #4]
 80127d0:	460b      	mov	r3, r1
 80127d2:	70fb      	strb	r3, [r7, #3]
  uint16_t crcreg = 0;
 80127d4:	2300      	movs	r3, #0
 80127d6:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 80127d8:	78fb      	ldrb	r3, [r7, #3]
 80127da:	2b01      	cmp	r3, #1
 80127dc:	d003      	beq.n	80127e6 <SPI_GetCRC+0x1e>
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	8b1b      	ldrh	r3, [r3, #24]
 80127e2:	81fb      	strh	r3, [r7, #14]
 80127e4:	e002      	b.n	80127ec <SPI_GetCRC+0x24>
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	8a9b      	ldrh	r3, [r3, #20]
 80127ea:	81fb      	strh	r3, [r7, #14]
  }
  /* Return the selected CRC register */
  return crcreg;
 80127ec:	89fb      	ldrh	r3, [r7, #14]
}
 80127ee:	4618      	mov	r0, r3
 80127f0:	3714      	adds	r7, #20
 80127f2:	46bd      	mov	sp, r7
 80127f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f8:	4770      	bx	lr
 80127fa:	bf00      	nop

080127fc <SPI_GetCRCPolynomial>:
  * @brief  Returns the CRC Polynomial register value for the specified SPI.
  * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
  * @retval The CRC Polynomial register value.
  */
uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
{
 80127fc:	b480      	push	{r7}
 80127fe:	b083      	sub	sp, #12
 8012800:	af00      	add	r7, sp, #0
 8012802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	8a1b      	ldrh	r3, [r3, #16]
 8012808:	b29b      	uxth	r3, r3
}
 801280a:	4618      	mov	r0, r3
 801280c:	370c      	adds	r7, #12
 801280e:	46bd      	mov	sp, r7
 8012810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012814:	4770      	bx	lr
 8012816:	bf00      	nop

08012818 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 8012818:	b480      	push	{r7}
 801281a:	b083      	sub	sp, #12
 801281c:	af00      	add	r7, sp, #0
 801281e:	6078      	str	r0, [r7, #4]
 8012820:	4613      	mov	r3, r2
 8012822:	460a      	mov	r2, r1
 8012824:	807a      	strh	r2, [r7, #2]
 8012826:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8012828:	787b      	ldrb	r3, [r7, #1]
 801282a:	2b00      	cmp	r3, #0
 801282c:	d008      	beq.n	8012840 <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	889b      	ldrh	r3, [r3, #4]
 8012832:	b29a      	uxth	r2, r3
 8012834:	887b      	ldrh	r3, [r7, #2]
 8012836:	4313      	orrs	r3, r2
 8012838:	b29a      	uxth	r2, r3
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	809a      	strh	r2, [r3, #4]
 801283e:	e009      	b.n	8012854 <SPI_I2S_DMACmd+0x3c>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	889b      	ldrh	r3, [r3, #4]
 8012844:	b29a      	uxth	r2, r3
 8012846:	887b      	ldrh	r3, [r7, #2]
 8012848:	43db      	mvns	r3, r3
 801284a:	b29b      	uxth	r3, r3
 801284c:	4013      	ands	r3, r2
 801284e:	b29a      	uxth	r2, r3
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	809a      	strh	r2, [r3, #4]
  }
}
 8012854:	370c      	adds	r7, #12
 8012856:	46bd      	mov	sp, r7
 8012858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801285c:	4770      	bx	lr
 801285e:	bf00      	nop

08012860 <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 8012860:	b480      	push	{r7}
 8012862:	b085      	sub	sp, #20
 8012864:	af00      	add	r7, sp, #0
 8012866:	6078      	str	r0, [r7, #4]
 8012868:	4613      	mov	r3, r2
 801286a:	460a      	mov	r2, r1
 801286c:	70fa      	strb	r2, [r7, #3]
 801286e:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 8012870:	2300      	movs	r3, #0
 8012872:	81fb      	strh	r3, [r7, #14]
 8012874:	2300      	movs	r3, #0
 8012876:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;
 8012878:	78fb      	ldrb	r3, [r7, #3]
 801287a:	091b      	lsrs	r3, r3, #4
 801287c:	b2db      	uxtb	r3, r3
 801287e:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8012880:	89fb      	ldrh	r3, [r7, #14]
 8012882:	2201      	movs	r2, #1
 8012884:	fa02 f303 	lsl.w	r3, r2, r3
 8012888:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 801288a:	78bb      	ldrb	r3, [r7, #2]
 801288c:	2b00      	cmp	r3, #0
 801288e:	d008      	beq.n	80128a2 <SPI_I2S_ITConfig+0x42>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	889b      	ldrh	r3, [r3, #4]
 8012894:	b29a      	uxth	r2, r3
 8012896:	89bb      	ldrh	r3, [r7, #12]
 8012898:	4313      	orrs	r3, r2
 801289a:	b29a      	uxth	r2, r3
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	809a      	strh	r2, [r3, #4]
 80128a0:	e009      	b.n	80128b6 <SPI_I2S_ITConfig+0x56>
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	889b      	ldrh	r3, [r3, #4]
 80128a6:	b29a      	uxth	r2, r3
 80128a8:	89bb      	ldrh	r3, [r7, #12]
 80128aa:	43db      	mvns	r3, r3
 80128ac:	b29b      	uxth	r3, r3
 80128ae:	4013      	ands	r3, r2
 80128b0:	b29a      	uxth	r2, r3
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	809a      	strh	r2, [r3, #4]
  }
}
 80128b6:	3714      	adds	r7, #20
 80128b8:	46bd      	mov	sp, r7
 80128ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128be:	4770      	bx	lr

080128c0 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80128c0:	b480      	push	{r7}
 80128c2:	b085      	sub	sp, #20
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	6078      	str	r0, [r7, #4]
 80128c8:	460b      	mov	r3, r1
 80128ca:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80128cc:	2300      	movs	r3, #0
 80128ce:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	891b      	ldrh	r3, [r3, #8]
 80128d4:	b29a      	uxth	r2, r3
 80128d6:	887b      	ldrh	r3, [r7, #2]
 80128d8:	4013      	ands	r3, r2
 80128da:	b29b      	uxth	r3, r3
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d002      	beq.n	80128e6 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80128e0:	2301      	movs	r3, #1
 80128e2:	73fb      	strb	r3, [r7, #15]
 80128e4:	e001      	b.n	80128ea <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80128e6:	2300      	movs	r3, #0
 80128e8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80128ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80128ec:	4618      	mov	r0, r3
 80128ee:	3714      	adds	r7, #20
 80128f0:	46bd      	mov	sp, r7
 80128f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f6:	4770      	bx	lr

080128f8 <SPI_I2S_ClearFlag>:
  *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
  *  
  * @retval None
  */
void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80128f8:	b480      	push	{r7}
 80128fa:	b083      	sub	sp, #12
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	6078      	str	r0, [r7, #4]
 8012900:	460b      	mov	r3, r1
 8012902:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 8012904:	887b      	ldrh	r3, [r7, #2]
 8012906:	43db      	mvns	r3, r3
 8012908:	b29a      	uxth	r2, r3
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	811a      	strh	r2, [r3, #8]
}
 801290e:	370c      	adds	r7, #12
 8012910:	46bd      	mov	sp, r7
 8012912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012916:	4770      	bx	lr

08012918 <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8012918:	b480      	push	{r7}
 801291a:	b085      	sub	sp, #20
 801291c:	af00      	add	r7, sp, #0
 801291e:	6078      	str	r0, [r7, #4]
 8012920:	460b      	mov	r3, r1
 8012922:	70fb      	strb	r3, [r7, #3]
  ITStatus bitstatus = RESET;
 8012924:	2300      	movs	r3, #0
 8012926:	73fb      	strb	r3, [r7, #15]
  uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 8012928:	2300      	movs	r3, #0
 801292a:	81bb      	strh	r3, [r7, #12]
 801292c:	2300      	movs	r3, #0
 801292e:	817b      	strh	r3, [r7, #10]
 8012930:	2300      	movs	r3, #0
 8012932:	813b      	strh	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8012934:	78fb      	ldrb	r3, [r7, #3]
 8012936:	f003 030f 	and.w	r3, r3, #15
 801293a:	2201      	movs	r2, #1
 801293c:	fa02 f303 	lsl.w	r3, r2, r3
 8012940:	81bb      	strh	r3, [r7, #12]

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;
 8012942:	78fb      	ldrb	r3, [r7, #3]
 8012944:	091b      	lsrs	r3, r3, #4
 8012946:	b2db      	uxtb	r3, r3
 8012948:	817b      	strh	r3, [r7, #10]

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 801294a:	897b      	ldrh	r3, [r7, #10]
 801294c:	2201      	movs	r2, #1
 801294e:	fa02 f303 	lsl.w	r3, r2, r3
 8012952:	817b      	strh	r3, [r7, #10]

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	889b      	ldrh	r3, [r3, #4]
 8012958:	b29a      	uxth	r2, r3
 801295a:	897b      	ldrh	r3, [r7, #10]
 801295c:	4013      	ands	r3, r2
 801295e:	813b      	strh	r3, [r7, #8]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	891b      	ldrh	r3, [r3, #8]
 8012964:	b29a      	uxth	r2, r3
 8012966:	89bb      	ldrh	r3, [r7, #12]
 8012968:	4013      	ands	r3, r2
 801296a:	b29b      	uxth	r3, r3
 801296c:	2b00      	cmp	r3, #0
 801296e:	d005      	beq.n	801297c <SPI_I2S_GetITStatus+0x64>
 8012970:	893b      	ldrh	r3, [r7, #8]
 8012972:	2b00      	cmp	r3, #0
 8012974:	d002      	beq.n	801297c <SPI_I2S_GetITStatus+0x64>
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 8012976:	2301      	movs	r3, #1
 8012978:	73fb      	strb	r3, [r7, #15]
 801297a:	e001      	b.n	8012980 <SPI_I2S_GetITStatus+0x68>
  }
  else
  {
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
 801297c:	2300      	movs	r3, #0
 801297e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
 8012980:	7bfb      	ldrb	r3, [r7, #15]
}
 8012982:	4618      	mov	r0, r3
 8012984:	3714      	adds	r7, #20
 8012986:	46bd      	mov	sp, r7
 8012988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801298c:	4770      	bx	lr
 801298e:	bf00      	nop

08012990 <SPI_I2S_ClearITPendingBit>:
  *          followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable 
  *          the SPI).
  * @retval None
  */
void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8012990:	b480      	push	{r7}
 8012992:	b085      	sub	sp, #20
 8012994:	af00      	add	r7, sp, #0
 8012996:	6078      	str	r0, [r7, #4]
 8012998:	460b      	mov	r3, r1
 801299a:	70fb      	strb	r3, [r7, #3]
  uint16_t itpos = 0;
 801299c:	2300      	movs	r3, #0
 801299e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 80129a0:	78fb      	ldrb	r3, [r7, #3]
 80129a2:	f003 030f 	and.w	r3, r3, #15
 80129a6:	2201      	movs	r2, #1
 80129a8:	fa02 f303 	lsl.w	r3, r2, r3
 80129ac:	81fb      	strh	r3, [r7, #14]

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 80129ae:	89fb      	ldrh	r3, [r7, #14]
 80129b0:	43db      	mvns	r3, r3
 80129b2:	b29a      	uxth	r2, r3
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	811a      	strh	r2, [r3, #8]
}
 80129b8:	3714      	adds	r7, #20
 80129ba:	46bd      	mov	sp, r7
 80129bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c0:	4770      	bx	lr
 80129c2:	bf00      	nop

080129c4 <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 80129c4:	b580      	push	{r7, lr}
 80129c6:	af00      	add	r7, sp, #0
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80129c8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80129cc:	2101      	movs	r1, #1
 80129ce:	f7fd fa41 	bl	800fe54 <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 80129d2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80129d6:	2100      	movs	r1, #0
 80129d8:	f7fd fa3c 	bl	800fe54 <RCC_APB2PeriphResetCmd>
}
 80129dc:	bd80      	pop	{r7, pc}
 80129de:	bf00      	nop

080129e0 <SYSCFG_MemoryRemapConfig>:
  *            @arg SYSCFG_MemoryRemap_SRAM:        Embedded SRAM (112kB) mapped at 0x00000000
  *            @arg SYSCFG_MemoryRemap_SDRAM:       FMC (External SDRAM)  mapped at 0x00000000 for STM32F42xxx/43xxx devices.            
  * @retval None
  */
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
 80129e0:	b480      	push	{r7}
 80129e2:	b083      	sub	sp, #12
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	4603      	mov	r3, r0
 80129e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 80129ea:	4b04      	ldr	r3, [pc, #16]	; (80129fc <SYSCFG_MemoryRemapConfig+0x1c>)
 80129ec:	79fa      	ldrb	r2, [r7, #7]
 80129ee:	601a      	str	r2, [r3, #0]
}
 80129f0:	370c      	adds	r7, #12
 80129f2:	46bd      	mov	sp, r7
 80129f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f8:	4770      	bx	lr
 80129fa:	bf00      	nop
 80129fc:	40013800 	.word	0x40013800

08012a00 <SYSCFG_MemorySwappingBank>:
  *            @arg DISABLE:(the default state) Flash Bank1 mapped at 0x08000000 (and aliased @0x0000 0000) 
                            and Flash Bank2 mapped at 0x08100000 (and aliased at 0x00100000)  
  * @retval None
  */
void SYSCFG_MemorySwappingBank(FunctionalState NewState)
{
 8012a00:	b480      	push	{r7}
 8012a02:	b083      	sub	sp, #12
 8012a04:	af00      	add	r7, sp, #0
 8012a06:	4603      	mov	r3, r0
 8012a08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) UFB_MODE_BB = (uint32_t)NewState;
 8012a0a:	4b04      	ldr	r3, [pc, #16]	; (8012a1c <SYSCFG_MemorySwappingBank+0x1c>)
 8012a0c:	79fa      	ldrb	r2, [r7, #7]
 8012a0e:	601a      	str	r2, [r3, #0]
}
 8012a10:	370c      	adds	r7, #12
 8012a12:	46bd      	mov	sp, r7
 8012a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a18:	4770      	bx	lr
 8012a1a:	bf00      	nop
 8012a1c:	42270020 	.word	0x42270020

08012a20 <SYSCFG_EXTILineConfig>:
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8012a20:	b490      	push	{r4, r7}
 8012a22:	b084      	sub	sp, #16
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	4602      	mov	r2, r0
 8012a28:	460b      	mov	r3, r1
 8012a2a:	71fa      	strb	r2, [r7, #7]
 8012a2c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8012a2e:	2300      	movs	r3, #0
 8012a30:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8012a32:	79bb      	ldrb	r3, [r7, #6]
 8012a34:	f003 0303 	and.w	r3, r3, #3
 8012a38:	009b      	lsls	r3, r3, #2
 8012a3a:	220f      	movs	r2, #15
 8012a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8012a40:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8012a42:	4b15      	ldr	r3, [pc, #84]	; (8012a98 <SYSCFG_EXTILineConfig+0x78>)
 8012a44:	79ba      	ldrb	r2, [r7, #6]
 8012a46:	0892      	lsrs	r2, r2, #2
 8012a48:	b2d2      	uxtb	r2, r2
 8012a4a:	4913      	ldr	r1, [pc, #76]	; (8012a98 <SYSCFG_EXTILineConfig+0x78>)
 8012a4c:	79b8      	ldrb	r0, [r7, #6]
 8012a4e:	0880      	lsrs	r0, r0, #2
 8012a50:	b2c0      	uxtb	r0, r0
 8012a52:	3002      	adds	r0, #2
 8012a54:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8012a58:	68f9      	ldr	r1, [r7, #12]
 8012a5a:	43c9      	mvns	r1, r1
 8012a5c:	4001      	ands	r1, r0
 8012a5e:	3202      	adds	r2, #2
 8012a60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8012a64:	4b0c      	ldr	r3, [pc, #48]	; (8012a98 <SYSCFG_EXTILineConfig+0x78>)
 8012a66:	79ba      	ldrb	r2, [r7, #6]
 8012a68:	0892      	lsrs	r2, r2, #2
 8012a6a:	b2d2      	uxtb	r2, r2
 8012a6c:	490a      	ldr	r1, [pc, #40]	; (8012a98 <SYSCFG_EXTILineConfig+0x78>)
 8012a6e:	79b8      	ldrb	r0, [r7, #6]
 8012a70:	0880      	lsrs	r0, r0, #2
 8012a72:	b2c0      	uxtb	r0, r0
 8012a74:	3002      	adds	r0, #2
 8012a76:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8012a7a:	79fc      	ldrb	r4, [r7, #7]
 8012a7c:	79b9      	ldrb	r1, [r7, #6]
 8012a7e:	f001 0103 	and.w	r1, r1, #3
 8012a82:	0089      	lsls	r1, r1, #2
 8012a84:	fa04 f101 	lsl.w	r1, r4, r1
 8012a88:	4301      	orrs	r1, r0
 8012a8a:	3202      	adds	r2, #2
 8012a8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8012a90:	3710      	adds	r7, #16
 8012a92:	46bd      	mov	sp, r7
 8012a94:	bc90      	pop	{r4, r7}
 8012a96:	4770      	bx	lr
 8012a98:	40013800 	.word	0x40013800

08012a9c <SYSCFG_ETH_MediaInterfaceConfig>:
  *            @arg SYSCFG_ETH_MediaInterface_MII: MII mode selected
  *            @arg SYSCFG_ETH_MediaInterface_RMII: RMII mode selected 
  * @retval None 
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
 8012a9c:	b480      	push	{r7}
 8012a9e:	b083      	sub	sp, #12
 8012aa0:	af00      	add	r7, sp, #0
 8012aa2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 8012aa4:	4b03      	ldr	r3, [pc, #12]	; (8012ab4 <SYSCFG_ETH_MediaInterfaceConfig+0x18>)
 8012aa6:	687a      	ldr	r2, [r7, #4]
 8012aa8:	601a      	str	r2, [r3, #0]
}
 8012aaa:	370c      	adds	r7, #12
 8012aac:	46bd      	mov	sp, r7
 8012aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ab2:	4770      	bx	lr
 8012ab4:	422700dc 	.word	0x422700dc

08012ab8 <SYSCFG_CompensationCellCmd>:
  *            @arg ENABLE: I/O compensation cell enabled  
  *            @arg DISABLE: I/O compensation cell power-down mode  
  * @retval None
  */
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
 8012ab8:	b480      	push	{r7}
 8012aba:	b083      	sub	sp, #12
 8012abc:	af00      	add	r7, sp, #0
 8012abe:	4603      	mov	r3, r0
 8012ac0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 8012ac2:	4b04      	ldr	r3, [pc, #16]	; (8012ad4 <SYSCFG_CompensationCellCmd+0x1c>)
 8012ac4:	79fa      	ldrb	r2, [r7, #7]
 8012ac6:	601a      	str	r2, [r3, #0]
}
 8012ac8:	370c      	adds	r7, #12
 8012aca:	46bd      	mov	sp, r7
 8012acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad0:	4770      	bx	lr
 8012ad2:	bf00      	nop
 8012ad4:	42270400 	.word	0x42270400

08012ad8 <SYSCFG_GetCompensationCellStatus>:
  * @brief  Checks whether the I/O Compensation Cell ready flag is set or not.
  * @param  None
  * @retval The new state of the I/O Compensation Cell ready flag (SET or RESET)
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
 8012ad8:	b480      	push	{r7}
 8012ada:	b083      	sub	sp, #12
 8012adc:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 8012ade:	2300      	movs	r3, #0
 8012ae0:	71fb      	strb	r3, [r7, #7]
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 8012ae2:	4b09      	ldr	r3, [pc, #36]	; (8012b08 <SYSCFG_GetCompensationCellStatus+0x30>)
 8012ae4:	6a1b      	ldr	r3, [r3, #32]
 8012ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d002      	beq.n	8012af4 <SYSCFG_GetCompensationCellStatus+0x1c>
  {
    bitstatus = SET;
 8012aee:	2301      	movs	r3, #1
 8012af0:	71fb      	strb	r3, [r7, #7]
 8012af2:	e001      	b.n	8012af8 <SYSCFG_GetCompensationCellStatus+0x20>
  }
  else
  {
    bitstatus = RESET;
 8012af4:	2300      	movs	r3, #0
 8012af6:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 8012af8:	79fb      	ldrb	r3, [r7, #7]
}
 8012afa:	4618      	mov	r0, r3
 8012afc:	370c      	adds	r7, #12
 8012afe:	46bd      	mov	sp, r7
 8012b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b04:	4770      	bx	lr
 8012b06:	bf00      	nop
 8012b08:	40013800 	.word	0x40013800

08012b0c <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	b082      	sub	sp, #8
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8012b14:	687a      	ldr	r2, [r7, #4]
 8012b16:	4b5f      	ldr	r3, [pc, #380]	; (8012c94 <TIM_DeInit+0x188>)
 8012b18:	429a      	cmp	r2, r3
 8012b1a:	d108      	bne.n	8012b2e <TIM_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8012b1c:	2001      	movs	r0, #1
 8012b1e:	2101      	movs	r1, #1
 8012b20:	f7fd f998 	bl	800fe54 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8012b24:	2001      	movs	r0, #1
 8012b26:	2100      	movs	r1, #0
 8012b28:	f7fd f994 	bl	800fe54 <RCC_APB2PeriphResetCmd>
 8012b2c:	e0af      	b.n	8012c8e <TIM_DeInit+0x182>
  } 
  else if (TIMx == TIM2) 
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012b34:	d108      	bne.n	8012b48 <TIM_DeInit+0x3c>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8012b36:	2001      	movs	r0, #1
 8012b38:	2101      	movs	r1, #1
 8012b3a:	f7fd f96d 	bl	800fe18 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8012b3e:	2001      	movs	r0, #1
 8012b40:	2100      	movs	r1, #0
 8012b42:	f7fd f969 	bl	800fe18 <RCC_APB1PeriphResetCmd>
 8012b46:	e0a2      	b.n	8012c8e <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM3)
 8012b48:	687a      	ldr	r2, [r7, #4]
 8012b4a:	4b53      	ldr	r3, [pc, #332]	; (8012c98 <TIM_DeInit+0x18c>)
 8012b4c:	429a      	cmp	r2, r3
 8012b4e:	d108      	bne.n	8012b62 <TIM_DeInit+0x56>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8012b50:	2002      	movs	r0, #2
 8012b52:	2101      	movs	r1, #1
 8012b54:	f7fd f960 	bl	800fe18 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8012b58:	2002      	movs	r0, #2
 8012b5a:	2100      	movs	r1, #0
 8012b5c:	f7fd f95c 	bl	800fe18 <RCC_APB1PeriphResetCmd>
 8012b60:	e095      	b.n	8012c8e <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM4)
 8012b62:	687a      	ldr	r2, [r7, #4]
 8012b64:	4b4d      	ldr	r3, [pc, #308]	; (8012c9c <TIM_DeInit+0x190>)
 8012b66:	429a      	cmp	r2, r3
 8012b68:	d108      	bne.n	8012b7c <TIM_DeInit+0x70>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8012b6a:	2004      	movs	r0, #4
 8012b6c:	2101      	movs	r1, #1
 8012b6e:	f7fd f953 	bl	800fe18 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8012b72:	2004      	movs	r0, #4
 8012b74:	2100      	movs	r1, #0
 8012b76:	f7fd f94f 	bl	800fe18 <RCC_APB1PeriphResetCmd>
 8012b7a:	e088      	b.n	8012c8e <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM5)
 8012b7c:	687a      	ldr	r2, [r7, #4]
 8012b7e:	4b48      	ldr	r3, [pc, #288]	; (8012ca0 <TIM_DeInit+0x194>)
 8012b80:	429a      	cmp	r2, r3
 8012b82:	d108      	bne.n	8012b96 <TIM_DeInit+0x8a>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8012b84:	2008      	movs	r0, #8
 8012b86:	2101      	movs	r1, #1
 8012b88:	f7fd f946 	bl	800fe18 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8012b8c:	2008      	movs	r0, #8
 8012b8e:	2100      	movs	r1, #0
 8012b90:	f7fd f942 	bl	800fe18 <RCC_APB1PeriphResetCmd>
 8012b94:	e07b      	b.n	8012c8e <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM6)  
 8012b96:	687a      	ldr	r2, [r7, #4]
 8012b98:	4b42      	ldr	r3, [pc, #264]	; (8012ca4 <TIM_DeInit+0x198>)
 8012b9a:	429a      	cmp	r2, r3
 8012b9c:	d108      	bne.n	8012bb0 <TIM_DeInit+0xa4>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8012b9e:	2010      	movs	r0, #16
 8012ba0:	2101      	movs	r1, #1
 8012ba2:	f7fd f939 	bl	800fe18 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8012ba6:	2010      	movs	r0, #16
 8012ba8:	2100      	movs	r1, #0
 8012baa:	f7fd f935 	bl	800fe18 <RCC_APB1PeriphResetCmd>
 8012bae:	e06e      	b.n	8012c8e <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM7)
 8012bb0:	687a      	ldr	r2, [r7, #4]
 8012bb2:	4b3d      	ldr	r3, [pc, #244]	; (8012ca8 <TIM_DeInit+0x19c>)
 8012bb4:	429a      	cmp	r2, r3
 8012bb6:	d108      	bne.n	8012bca <TIM_DeInit+0xbe>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8012bb8:	2020      	movs	r0, #32
 8012bba:	2101      	movs	r1, #1
 8012bbc:	f7fd f92c 	bl	800fe18 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8012bc0:	2020      	movs	r0, #32
 8012bc2:	2100      	movs	r1, #0
 8012bc4:	f7fd f928 	bl	800fe18 <RCC_APB1PeriphResetCmd>
 8012bc8:	e061      	b.n	8012c8e <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM8)
 8012bca:	687a      	ldr	r2, [r7, #4]
 8012bcc:	4b37      	ldr	r3, [pc, #220]	; (8012cac <TIM_DeInit+0x1a0>)
 8012bce:	429a      	cmp	r2, r3
 8012bd0:	d108      	bne.n	8012be4 <TIM_DeInit+0xd8>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8012bd2:	2002      	movs	r0, #2
 8012bd4:	2101      	movs	r1, #1
 8012bd6:	f7fd f93d 	bl	800fe54 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8012bda:	2002      	movs	r0, #2
 8012bdc:	2100      	movs	r1, #0
 8012bde:	f7fd f939 	bl	800fe54 <RCC_APB2PeriphResetCmd>
 8012be2:	e054      	b.n	8012c8e <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM9)
 8012be4:	687a      	ldr	r2, [r7, #4]
 8012be6:	4b32      	ldr	r3, [pc, #200]	; (8012cb0 <TIM_DeInit+0x1a4>)
 8012be8:	429a      	cmp	r2, r3
 8012bea:	d10a      	bne.n	8012c02 <TIM_DeInit+0xf6>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8012bec:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8012bf0:	2101      	movs	r1, #1
 8012bf2:	f7fd f92f 	bl	800fe54 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8012bf6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8012bfa:	2100      	movs	r1, #0
 8012bfc:	f7fd f92a 	bl	800fe54 <RCC_APB2PeriphResetCmd>
 8012c00:	e045      	b.n	8012c8e <TIM_DeInit+0x182>
   }  
  else if (TIMx == TIM10)
 8012c02:	687a      	ldr	r2, [r7, #4]
 8012c04:	4b2b      	ldr	r3, [pc, #172]	; (8012cb4 <TIM_DeInit+0x1a8>)
 8012c06:	429a      	cmp	r2, r3
 8012c08:	d10a      	bne.n	8012c20 <TIM_DeInit+0x114>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 8012c0a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8012c0e:	2101      	movs	r1, #1
 8012c10:	f7fd f920 	bl	800fe54 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8012c14:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8012c18:	2100      	movs	r1, #0
 8012c1a:	f7fd f91b 	bl	800fe54 <RCC_APB2PeriphResetCmd>
 8012c1e:	e036      	b.n	8012c8e <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM11) 
 8012c20:	687a      	ldr	r2, [r7, #4]
 8012c22:	4b25      	ldr	r3, [pc, #148]	; (8012cb8 <TIM_DeInit+0x1ac>)
 8012c24:	429a      	cmp	r2, r3
 8012c26:	d10a      	bne.n	8012c3e <TIM_DeInit+0x132>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8012c28:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8012c2c:	2101      	movs	r1, #1
 8012c2e:	f7fd f911 	bl	800fe54 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8012c32:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8012c36:	2100      	movs	r1, #0
 8012c38:	f7fd f90c 	bl	800fe54 <RCC_APB2PeriphResetCmd>
 8012c3c:	e027      	b.n	8012c8e <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM12)
 8012c3e:	687a      	ldr	r2, [r7, #4]
 8012c40:	4b1e      	ldr	r3, [pc, #120]	; (8012cbc <TIM_DeInit+0x1b0>)
 8012c42:	429a      	cmp	r2, r3
 8012c44:	d108      	bne.n	8012c58 <TIM_DeInit+0x14c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8012c46:	2040      	movs	r0, #64	; 0x40
 8012c48:	2101      	movs	r1, #1
 8012c4a:	f7fd f8e5 	bl	800fe18 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8012c4e:	2040      	movs	r0, #64	; 0x40
 8012c50:	2100      	movs	r1, #0
 8012c52:	f7fd f8e1 	bl	800fe18 <RCC_APB1PeriphResetCmd>
 8012c56:	e01a      	b.n	8012c8e <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM13) 
 8012c58:	687a      	ldr	r2, [r7, #4]
 8012c5a:	4b19      	ldr	r3, [pc, #100]	; (8012cc0 <TIM_DeInit+0x1b4>)
 8012c5c:	429a      	cmp	r2, r3
 8012c5e:	d108      	bne.n	8012c72 <TIM_DeInit+0x166>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8012c60:	2080      	movs	r0, #128	; 0x80
 8012c62:	2101      	movs	r1, #1
 8012c64:	f7fd f8d8 	bl	800fe18 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8012c68:	2080      	movs	r0, #128	; 0x80
 8012c6a:	2100      	movs	r1, #0
 8012c6c:	f7fd f8d4 	bl	800fe18 <RCC_APB1PeriphResetCmd>
 8012c70:	e00d      	b.n	8012c8e <TIM_DeInit+0x182>
  }  
  else
  { 
    if (TIMx == TIM14) 
 8012c72:	687a      	ldr	r2, [r7, #4]
 8012c74:	4b13      	ldr	r3, [pc, #76]	; (8012cc4 <TIM_DeInit+0x1b8>)
 8012c76:	429a      	cmp	r2, r3
 8012c78:	d109      	bne.n	8012c8e <TIM_DeInit+0x182>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8012c7a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8012c7e:	2101      	movs	r1, #1
 8012c80:	f7fd f8ca 	bl	800fe18 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8012c84:	f44f 7080 	mov.w	r0, #256	; 0x100
 8012c88:	2100      	movs	r1, #0
 8012c8a:	f7fd f8c5 	bl	800fe18 <RCC_APB1PeriphResetCmd>
    }   
  }
}
 8012c8e:	3708      	adds	r7, #8
 8012c90:	46bd      	mov	sp, r7
 8012c92:	bd80      	pop	{r7, pc}
 8012c94:	40010000 	.word	0x40010000
 8012c98:	40000400 	.word	0x40000400
 8012c9c:	40000800 	.word	0x40000800
 8012ca0:	40000c00 	.word	0x40000c00
 8012ca4:	40001000 	.word	0x40001000
 8012ca8:	40001400 	.word	0x40001400
 8012cac:	40010400 	.word	0x40010400
 8012cb0:	40014000 	.word	0x40014000
 8012cb4:	40014400 	.word	0x40014400
 8012cb8:	40014800 	.word	0x40014800
 8012cbc:	40001800 	.word	0x40001800
 8012cc0:	40001c00 	.word	0x40001c00
 8012cc4:	40002000 	.word	0x40002000

08012cc8 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8012cc8:	b480      	push	{r7}
 8012cca:	b085      	sub	sp, #20
 8012ccc:	af00      	add	r7, sp, #0
 8012cce:	6078      	str	r0, [r7, #4]
 8012cd0:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	881b      	ldrh	r3, [r3, #0]
 8012cda:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8012cdc:	687a      	ldr	r2, [r7, #4]
 8012cde:	4b28      	ldr	r3, [pc, #160]	; (8012d80 <TIM_TimeBaseInit+0xb8>)
 8012ce0:	429a      	cmp	r2, r3
 8012ce2:	d013      	beq.n	8012d0c <TIM_TimeBaseInit+0x44>
 8012ce4:	687a      	ldr	r2, [r7, #4]
 8012ce6:	4b27      	ldr	r3, [pc, #156]	; (8012d84 <TIM_TimeBaseInit+0xbc>)
 8012ce8:	429a      	cmp	r2, r3
 8012cea:	d00f      	beq.n	8012d0c <TIM_TimeBaseInit+0x44>
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012cf2:	d00b      	beq.n	8012d0c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8012cf4:	687a      	ldr	r2, [r7, #4]
 8012cf6:	4b24      	ldr	r3, [pc, #144]	; (8012d88 <TIM_TimeBaseInit+0xc0>)
 8012cf8:	429a      	cmp	r2, r3
 8012cfa:	d007      	beq.n	8012d0c <TIM_TimeBaseInit+0x44>
 8012cfc:	687a      	ldr	r2, [r7, #4]
 8012cfe:	4b23      	ldr	r3, [pc, #140]	; (8012d8c <TIM_TimeBaseInit+0xc4>)
 8012d00:	429a      	cmp	r2, r3
 8012d02:	d003      	beq.n	8012d0c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8012d04:	687a      	ldr	r2, [r7, #4]
 8012d06:	4b22      	ldr	r3, [pc, #136]	; (8012d90 <TIM_TimeBaseInit+0xc8>)
 8012d08:	429a      	cmp	r2, r3
 8012d0a:	d108      	bne.n	8012d1e <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8012d0c:	89fb      	ldrh	r3, [r7, #14]
 8012d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012d12:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8012d14:	683b      	ldr	r3, [r7, #0]
 8012d16:	885a      	ldrh	r2, [r3, #2]
 8012d18:	89fb      	ldrh	r3, [r7, #14]
 8012d1a:	4313      	orrs	r3, r2
 8012d1c:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8012d1e:	687a      	ldr	r2, [r7, #4]
 8012d20:	4b1c      	ldr	r3, [pc, #112]	; (8012d94 <TIM_TimeBaseInit+0xcc>)
 8012d22:	429a      	cmp	r2, r3
 8012d24:	d00c      	beq.n	8012d40 <TIM_TimeBaseInit+0x78>
 8012d26:	687a      	ldr	r2, [r7, #4]
 8012d28:	4b1b      	ldr	r3, [pc, #108]	; (8012d98 <TIM_TimeBaseInit+0xd0>)
 8012d2a:	429a      	cmp	r2, r3
 8012d2c:	d008      	beq.n	8012d40 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8012d2e:	89fb      	ldrh	r3, [r7, #14]
 8012d30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012d34:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8012d36:	683b      	ldr	r3, [r7, #0]
 8012d38:	891a      	ldrh	r2, [r3, #8]
 8012d3a:	89fb      	ldrh	r3, [r7, #14]
 8012d3c:	4313      	orrs	r3, r2
 8012d3e:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	89fa      	ldrh	r2, [r7, #14]
 8012d44:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8012d46:	683b      	ldr	r3, [r7, #0]
 8012d48:	685a      	ldr	r2, [r3, #4]
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8012d4e:	683b      	ldr	r3, [r7, #0]
 8012d50:	881a      	ldrh	r2, [r3, #0]
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8012d56:	687a      	ldr	r2, [r7, #4]
 8012d58:	4b09      	ldr	r3, [pc, #36]	; (8012d80 <TIM_TimeBaseInit+0xb8>)
 8012d5a:	429a      	cmp	r2, r3
 8012d5c:	d003      	beq.n	8012d66 <TIM_TimeBaseInit+0x9e>
 8012d5e:	687a      	ldr	r2, [r7, #4]
 8012d60:	4b08      	ldr	r3, [pc, #32]	; (8012d84 <TIM_TimeBaseInit+0xbc>)
 8012d62:	429a      	cmp	r2, r3
 8012d64:	d104      	bne.n	8012d70 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8012d66:	683b      	ldr	r3, [r7, #0]
 8012d68:	7a9b      	ldrb	r3, [r3, #10]
 8012d6a:	461a      	mov	r2, r3
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	2201      	movs	r2, #1
 8012d74:	829a      	strh	r2, [r3, #20]
}
 8012d76:	3714      	adds	r7, #20
 8012d78:	46bd      	mov	sp, r7
 8012d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d7e:	4770      	bx	lr
 8012d80:	40010000 	.word	0x40010000
 8012d84:	40010400 	.word	0x40010400
 8012d88:	40000400 	.word	0x40000400
 8012d8c:	40000800 	.word	0x40000800
 8012d90:	40000c00 	.word	0x40000c00
 8012d94:	40001000 	.word	0x40001000
 8012d98:	40001400 	.word	0x40001400

08012d9c <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8012d9c:	b480      	push	{r7}
 8012d9e:	b083      	sub	sp, #12
 8012da0:	af00      	add	r7, sp, #0
 8012da2:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012daa:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	2200      	movs	r2, #0
 8012db0:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	2200      	movs	r2, #0
 8012db6:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	2200      	movs	r2, #0
 8012dbc:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	2200      	movs	r2, #0
 8012dc2:	729a      	strb	r2, [r3, #10]
}
 8012dc4:	370c      	adds	r7, #12
 8012dc6:	46bd      	mov	sp, r7
 8012dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dcc:	4770      	bx	lr
 8012dce:	bf00      	nop

08012dd0 <TIM_PrescalerConfig>:
  *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 8012dd0:	b480      	push	{r7}
 8012dd2:	b083      	sub	sp, #12
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	6078      	str	r0, [r7, #4]
 8012dd8:	4613      	mov	r3, r2
 8012dda:	460a      	mov	r2, r1
 8012ddc:	807a      	strh	r2, [r7, #2]
 8012dde:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	887a      	ldrh	r2, [r7, #2]
 8012de4:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	883a      	ldrh	r2, [r7, #0]
 8012dea:	829a      	strh	r2, [r3, #20]
}
 8012dec:	370c      	adds	r7, #12
 8012dee:	46bd      	mov	sp, r7
 8012df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df4:	4770      	bx	lr
 8012df6:	bf00      	nop

08012df8 <TIM_CounterModeConfig>:
  *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
 8012df8:	b480      	push	{r7}
 8012dfa:	b085      	sub	sp, #20
 8012dfc:	af00      	add	r7, sp, #0
 8012dfe:	6078      	str	r0, [r7, #4]
 8012e00:	460b      	mov	r3, r1
 8012e02:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
 8012e04:	2300      	movs	r3, #0
 8012e06:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	881b      	ldrh	r3, [r3, #0]
 8012e0c:	81fb      	strh	r3, [r7, #14]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012e0e:	89fb      	ldrh	r3, [r7, #14]
 8012e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012e14:	81fb      	strh	r3, [r7, #14]

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 8012e16:	89fa      	ldrh	r2, [r7, #14]
 8012e18:	887b      	ldrh	r3, [r7, #2]
 8012e1a:	4313      	orrs	r3, r2
 8012e1c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	89fa      	ldrh	r2, [r7, #14]
 8012e22:	801a      	strh	r2, [r3, #0]
}
 8012e24:	3714      	adds	r7, #20
 8012e26:	46bd      	mov	sp, r7
 8012e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e2c:	4770      	bx	lr
 8012e2e:	bf00      	nop

08012e30 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 8012e30:	b480      	push	{r7}
 8012e32:	b083      	sub	sp, #12
 8012e34:	af00      	add	r7, sp, #0
 8012e36:	6078      	str	r0, [r7, #4]
 8012e38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	683a      	ldr	r2, [r7, #0]
 8012e3e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8012e40:	370c      	adds	r7, #12
 8012e42:	46bd      	mov	sp, r7
 8012e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e48:	4770      	bx	lr
 8012e4a:	bf00      	nop

08012e4c <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 8012e4c:	b480      	push	{r7}
 8012e4e:	b083      	sub	sp, #12
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	6078      	str	r0, [r7, #4]
 8012e54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	683a      	ldr	r2, [r7, #0]
 8012e5a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8012e5c:	370c      	adds	r7, #12
 8012e5e:	46bd      	mov	sp, r7
 8012e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e64:	4770      	bx	lr
 8012e66:	bf00      	nop

08012e68 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 8012e68:	b480      	push	{r7}
 8012e6a:	b083      	sub	sp, #12
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8012e74:	4618      	mov	r0, r3
 8012e76:	370c      	adds	r7, #12
 8012e78:	46bd      	mov	sp, r7
 8012e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e7e:	4770      	bx	lr

08012e80 <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
 8012e80:	b480      	push	{r7}
 8012e82:	b083      	sub	sp, #12
 8012e84:	af00      	add	r7, sp, #0
 8012e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012e8c:	b29b      	uxth	r3, r3
}
 8012e8e:	4618      	mov	r0, r3
 8012e90:	370c      	adds	r7, #12
 8012e92:	46bd      	mov	sp, r7
 8012e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e98:	4770      	bx	lr
 8012e9a:	bf00      	nop

08012e9c <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8012e9c:	b480      	push	{r7}
 8012e9e:	b083      	sub	sp, #12
 8012ea0:	af00      	add	r7, sp, #0
 8012ea2:	6078      	str	r0, [r7, #4]
 8012ea4:	460b      	mov	r3, r1
 8012ea6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8012ea8:	78fb      	ldrb	r3, [r7, #3]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d008      	beq.n	8012ec0 <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	881b      	ldrh	r3, [r3, #0]
 8012eb2:	b29b      	uxth	r3, r3
 8012eb4:	f043 0302 	orr.w	r3, r3, #2
 8012eb8:	b29a      	uxth	r2, r3
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	801a      	strh	r2, [r3, #0]
 8012ebe:	e007      	b.n	8012ed0 <TIM_UpdateDisableConfig+0x34>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	881b      	ldrh	r3, [r3, #0]
 8012ec4:	b29b      	uxth	r3, r3
 8012ec6:	f023 0302 	bic.w	r3, r3, #2
 8012eca:	b29a      	uxth	r2, r3
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	801a      	strh	r2, [r3, #0]
  }
}
 8012ed0:	370c      	adds	r7, #12
 8012ed2:	46bd      	mov	sp, r7
 8012ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed8:	4770      	bx	lr
 8012eda:	bf00      	nop

08012edc <TIM_UpdateRequestConfig>:
  *                 generation through the slave mode controller.
  *            @arg TIM_UpdateSource_Regular: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 8012edc:	b480      	push	{r7}
 8012ede:	b083      	sub	sp, #12
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	6078      	str	r0, [r7, #4]
 8012ee4:	460b      	mov	r3, r1
 8012ee6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8012ee8:	887b      	ldrh	r3, [r7, #2]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d008      	beq.n	8012f00 <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	881b      	ldrh	r3, [r3, #0]
 8012ef2:	b29b      	uxth	r3, r3
 8012ef4:	f043 0304 	orr.w	r3, r3, #4
 8012ef8:	b29a      	uxth	r2, r3
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	801a      	strh	r2, [r3, #0]
 8012efe:	e007      	b.n	8012f10 <TIM_UpdateRequestConfig+0x34>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	881b      	ldrh	r3, [r3, #0]
 8012f04:	b29b      	uxth	r3, r3
 8012f06:	f023 0304 	bic.w	r3, r3, #4
 8012f0a:	b29a      	uxth	r2, r3
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	801a      	strh	r2, [r3, #0]
  }
}
 8012f10:	370c      	adds	r7, #12
 8012f12:	46bd      	mov	sp, r7
 8012f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f18:	4770      	bx	lr
 8012f1a:	bf00      	nop

08012f1c <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8012f1c:	b480      	push	{r7}
 8012f1e:	b083      	sub	sp, #12
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	6078      	str	r0, [r7, #4]
 8012f24:	460b      	mov	r3, r1
 8012f26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8012f28:	78fb      	ldrb	r3, [r7, #3]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d008      	beq.n	8012f40 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	881b      	ldrh	r3, [r3, #0]
 8012f32:	b29b      	uxth	r3, r3
 8012f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012f38:	b29a      	uxth	r2, r3
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	801a      	strh	r2, [r3, #0]
 8012f3e:	e007      	b.n	8012f50 <TIM_ARRPreloadConfig+0x34>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	881b      	ldrh	r3, [r3, #0]
 8012f44:	b29b      	uxth	r3, r3
 8012f46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012f4a:	b29a      	uxth	r2, r3
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	801a      	strh	r2, [r3, #0]
  }
}
 8012f50:	370c      	adds	r7, #12
 8012f52:	46bd      	mov	sp, r7
 8012f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f58:	4770      	bx	lr
 8012f5a:	bf00      	nop

08012f5c <TIM_SelectOnePulseMode>:
  *            @arg TIM_OPMode_Single
  *            @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
 8012f5c:	b480      	push	{r7}
 8012f5e:	b083      	sub	sp, #12
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	6078      	str	r0, [r7, #4]
 8012f64:	460b      	mov	r3, r1
 8012f66:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	881b      	ldrh	r3, [r3, #0]
 8012f6c:	b29b      	uxth	r3, r3
 8012f6e:	f023 0308 	bic.w	r3, r3, #8
 8012f72:	b29a      	uxth	r2, r3
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	801a      	strh	r2, [r3, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	881b      	ldrh	r3, [r3, #0]
 8012f7c:	b29a      	uxth	r2, r3
 8012f7e:	887b      	ldrh	r3, [r7, #2]
 8012f80:	4313      	orrs	r3, r2
 8012f82:	b29a      	uxth	r2, r3
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	801a      	strh	r2, [r3, #0]
}
 8012f88:	370c      	adds	r7, #12
 8012f8a:	46bd      	mov	sp, r7
 8012f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f90:	4770      	bx	lr
 8012f92:	bf00      	nop

08012f94 <TIM_SetClockDivision>:
  *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
 8012f94:	b480      	push	{r7}
 8012f96:	b083      	sub	sp, #12
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	6078      	str	r0, [r7, #4]
 8012f9c:	460b      	mov	r3, r1
 8012f9e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	881b      	ldrh	r3, [r3, #0]
 8012fa4:	b29b      	uxth	r3, r3
 8012fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012faa:	b29a      	uxth	r2, r3
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	801a      	strh	r2, [r3, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	881b      	ldrh	r3, [r3, #0]
 8012fb4:	b29a      	uxth	r2, r3
 8012fb6:	887b      	ldrh	r3, [r7, #2]
 8012fb8:	4313      	orrs	r3, r2
 8012fba:	b29a      	uxth	r2, r3
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	801a      	strh	r2, [r3, #0]
}
 8012fc0:	370c      	adds	r7, #12
 8012fc2:	46bd      	mov	sp, r7
 8012fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc8:	4770      	bx	lr
 8012fca:	bf00      	nop

08012fcc <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8012fcc:	b480      	push	{r7}
 8012fce:	b083      	sub	sp, #12
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	6078      	str	r0, [r7, #4]
 8012fd4:	460b      	mov	r3, r1
 8012fd6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8012fd8:	78fb      	ldrb	r3, [r7, #3]
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d008      	beq.n	8012ff0 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	881b      	ldrh	r3, [r3, #0]
 8012fe2:	b29b      	uxth	r3, r3
 8012fe4:	f043 0301 	orr.w	r3, r3, #1
 8012fe8:	b29a      	uxth	r2, r3
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	801a      	strh	r2, [r3, #0]
 8012fee:	e007      	b.n	8013000 <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	881b      	ldrh	r3, [r3, #0]
 8012ff4:	b29b      	uxth	r3, r3
 8012ff6:	f023 0301 	bic.w	r3, r3, #1
 8012ffa:	b29a      	uxth	r2, r3
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	801a      	strh	r2, [r3, #0]
  }
}
 8013000:	370c      	adds	r7, #12
 8013002:	46bd      	mov	sp, r7
 8013004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013008:	4770      	bx	lr
 801300a:	bf00      	nop

0801300c <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 801300c:	b480      	push	{r7}
 801300e:	b085      	sub	sp, #20
 8013010:	af00      	add	r7, sp, #0
 8013012:	6078      	str	r0, [r7, #4]
 8013014:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8013016:	2300      	movs	r3, #0
 8013018:	817b      	strh	r3, [r7, #10]
 801301a:	2300      	movs	r3, #0
 801301c:	81fb      	strh	r3, [r7, #14]
 801301e:	2300      	movs	r3, #0
 8013020:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	8c1b      	ldrh	r3, [r3, #32]
 8013026:	b29b      	uxth	r3, r3
 8013028:	f023 0301 	bic.w	r3, r3, #1
 801302c:	b29a      	uxth	r2, r3
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	8c1b      	ldrh	r3, [r3, #32]
 8013036:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	889b      	ldrh	r3, [r3, #4]
 801303c:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	8b1b      	ldrh	r3, [r3, #24]
 8013042:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 8013044:	897b      	ldrh	r3, [r7, #10]
 8013046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801304a:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 801304c:	897b      	ldrh	r3, [r7, #10]
 801304e:	f023 0303 	bic.w	r3, r3, #3
 8013052:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8013054:	683b      	ldr	r3, [r7, #0]
 8013056:	881a      	ldrh	r2, [r3, #0]
 8013058:	897b      	ldrh	r3, [r7, #10]
 801305a:	4313      	orrs	r3, r2
 801305c:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 801305e:	89fb      	ldrh	r3, [r7, #14]
 8013060:	f023 0302 	bic.w	r3, r3, #2
 8013064:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8013066:	683b      	ldr	r3, [r7, #0]
 8013068:	899a      	ldrh	r2, [r3, #12]
 801306a:	89fb      	ldrh	r3, [r7, #14]
 801306c:	4313      	orrs	r3, r2
 801306e:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8013070:	683b      	ldr	r3, [r7, #0]
 8013072:	885a      	ldrh	r2, [r3, #2]
 8013074:	89fb      	ldrh	r3, [r7, #14]
 8013076:	4313      	orrs	r3, r2
 8013078:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 801307a:	687a      	ldr	r2, [r7, #4]
 801307c:	4b1e      	ldr	r3, [pc, #120]	; (80130f8 <TIM_OC1Init+0xec>)
 801307e:	429a      	cmp	r2, r3
 8013080:	d003      	beq.n	801308a <TIM_OC1Init+0x7e>
 8013082:	687a      	ldr	r2, [r7, #4]
 8013084:	4b1d      	ldr	r3, [pc, #116]	; (80130fc <TIM_OC1Init+0xf0>)
 8013086:	429a      	cmp	r2, r3
 8013088:	d123      	bne.n	80130d2 <TIM_OC1Init+0xc6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 801308a:	89fb      	ldrh	r3, [r7, #14]
 801308c:	f023 0308 	bic.w	r3, r3, #8
 8013090:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8013092:	683b      	ldr	r3, [r7, #0]
 8013094:	89da      	ldrh	r2, [r3, #14]
 8013096:	89fb      	ldrh	r3, [r7, #14]
 8013098:	4313      	orrs	r3, r2
 801309a:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 801309c:	89fb      	ldrh	r3, [r7, #14]
 801309e:	f023 0304 	bic.w	r3, r3, #4
 80130a2:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80130a4:	683b      	ldr	r3, [r7, #0]
 80130a6:	889a      	ldrh	r2, [r3, #4]
 80130a8:	89fb      	ldrh	r3, [r7, #14]
 80130aa:	4313      	orrs	r3, r2
 80130ac:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 80130ae:	89bb      	ldrh	r3, [r7, #12]
 80130b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80130b4:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 80130b6:	89bb      	ldrh	r3, [r7, #12]
 80130b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80130bc:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80130be:	683b      	ldr	r3, [r7, #0]
 80130c0:	8a1a      	ldrh	r2, [r3, #16]
 80130c2:	89bb      	ldrh	r3, [r7, #12]
 80130c4:	4313      	orrs	r3, r2
 80130c6:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80130c8:	683b      	ldr	r3, [r7, #0]
 80130ca:	8a5a      	ldrh	r2, [r3, #18]
 80130cc:	89bb      	ldrh	r3, [r7, #12]
 80130ce:	4313      	orrs	r3, r2
 80130d0:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	89ba      	ldrh	r2, [r7, #12]
 80130d6:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	897a      	ldrh	r2, [r7, #10]
 80130dc:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 80130de:	683b      	ldr	r3, [r7, #0]
 80130e0:	689a      	ldr	r2, [r3, #8]
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	89fa      	ldrh	r2, [r7, #14]
 80130ea:	841a      	strh	r2, [r3, #32]
}
 80130ec:	3714      	adds	r7, #20
 80130ee:	46bd      	mov	sp, r7
 80130f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f4:	4770      	bx	lr
 80130f6:	bf00      	nop
 80130f8:	40010000 	.word	0x40010000
 80130fc:	40010400 	.word	0x40010400

08013100 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8013100:	b480      	push	{r7}
 8013102:	b085      	sub	sp, #20
 8013104:	af00      	add	r7, sp, #0
 8013106:	6078      	str	r0, [r7, #4]
 8013108:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 801310a:	2300      	movs	r3, #0
 801310c:	817b      	strh	r3, [r7, #10]
 801310e:	2300      	movs	r3, #0
 8013110:	81fb      	strh	r3, [r7, #14]
 8013112:	2300      	movs	r3, #0
 8013114:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	8c1b      	ldrh	r3, [r3, #32]
 801311a:	b29b      	uxth	r3, r3
 801311c:	f023 0310 	bic.w	r3, r3, #16
 8013120:	b29a      	uxth	r2, r3
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	8c1b      	ldrh	r3, [r3, #32]
 801312a:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	889b      	ldrh	r3, [r3, #4]
 8013130:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	8b1b      	ldrh	r3, [r3, #24]
 8013136:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 8013138:	897b      	ldrh	r3, [r7, #10]
 801313a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801313e:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 8013140:	897b      	ldrh	r3, [r7, #10]
 8013142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013146:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8013148:	683b      	ldr	r3, [r7, #0]
 801314a:	881b      	ldrh	r3, [r3, #0]
 801314c:	021b      	lsls	r3, r3, #8
 801314e:	b29a      	uxth	r2, r3
 8013150:	897b      	ldrh	r3, [r7, #10]
 8013152:	4313      	orrs	r3, r2
 8013154:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8013156:	89fb      	ldrh	r3, [r7, #14]
 8013158:	f023 0320 	bic.w	r3, r3, #32
 801315c:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 801315e:	683b      	ldr	r3, [r7, #0]
 8013160:	899b      	ldrh	r3, [r3, #12]
 8013162:	011b      	lsls	r3, r3, #4
 8013164:	b29a      	uxth	r2, r3
 8013166:	89fb      	ldrh	r3, [r7, #14]
 8013168:	4313      	orrs	r3, r2
 801316a:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 801316c:	683b      	ldr	r3, [r7, #0]
 801316e:	885b      	ldrh	r3, [r3, #2]
 8013170:	011b      	lsls	r3, r3, #4
 8013172:	b29a      	uxth	r2, r3
 8013174:	89fb      	ldrh	r3, [r7, #14]
 8013176:	4313      	orrs	r3, r2
 8013178:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 801317a:	687a      	ldr	r2, [r7, #4]
 801317c:	4b22      	ldr	r3, [pc, #136]	; (8013208 <TIM_OC2Init+0x108>)
 801317e:	429a      	cmp	r2, r3
 8013180:	d003      	beq.n	801318a <TIM_OC2Init+0x8a>
 8013182:	687a      	ldr	r2, [r7, #4]
 8013184:	4b21      	ldr	r3, [pc, #132]	; (801320c <TIM_OC2Init+0x10c>)
 8013186:	429a      	cmp	r2, r3
 8013188:	d12b      	bne.n	80131e2 <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 801318a:	89fb      	ldrh	r3, [r7, #14]
 801318c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013190:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8013192:	683b      	ldr	r3, [r7, #0]
 8013194:	89db      	ldrh	r3, [r3, #14]
 8013196:	011b      	lsls	r3, r3, #4
 8013198:	b29a      	uxth	r2, r3
 801319a:	89fb      	ldrh	r3, [r7, #14]
 801319c:	4313      	orrs	r3, r2
 801319e:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 80131a0:	89fb      	ldrh	r3, [r7, #14]
 80131a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80131a6:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80131a8:	683b      	ldr	r3, [r7, #0]
 80131aa:	889b      	ldrh	r3, [r3, #4]
 80131ac:	011b      	lsls	r3, r3, #4
 80131ae:	b29a      	uxth	r2, r3
 80131b0:	89fb      	ldrh	r3, [r7, #14]
 80131b2:	4313      	orrs	r3, r2
 80131b4:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 80131b6:	89bb      	ldrh	r3, [r7, #12]
 80131b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80131bc:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 80131be:	89bb      	ldrh	r3, [r7, #12]
 80131c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80131c4:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80131c6:	683b      	ldr	r3, [r7, #0]
 80131c8:	8a1b      	ldrh	r3, [r3, #16]
 80131ca:	009b      	lsls	r3, r3, #2
 80131cc:	b29a      	uxth	r2, r3
 80131ce:	89bb      	ldrh	r3, [r7, #12]
 80131d0:	4313      	orrs	r3, r2
 80131d2:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80131d4:	683b      	ldr	r3, [r7, #0]
 80131d6:	8a5b      	ldrh	r3, [r3, #18]
 80131d8:	009b      	lsls	r3, r3, #2
 80131da:	b29a      	uxth	r2, r3
 80131dc:	89bb      	ldrh	r3, [r7, #12]
 80131de:	4313      	orrs	r3, r2
 80131e0:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	89ba      	ldrh	r2, [r7, #12]
 80131e6:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	897a      	ldrh	r2, [r7, #10]
 80131ec:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 80131ee:	683b      	ldr	r3, [r7, #0]
 80131f0:	689a      	ldr	r2, [r3, #8]
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	89fa      	ldrh	r2, [r7, #14]
 80131fa:	841a      	strh	r2, [r3, #32]
}
 80131fc:	3714      	adds	r7, #20
 80131fe:	46bd      	mov	sp, r7
 8013200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013204:	4770      	bx	lr
 8013206:	bf00      	nop
 8013208:	40010000 	.word	0x40010000
 801320c:	40010400 	.word	0x40010400

08013210 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8013210:	b480      	push	{r7}
 8013212:	b085      	sub	sp, #20
 8013214:	af00      	add	r7, sp, #0
 8013216:	6078      	str	r0, [r7, #4]
 8013218:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 801321a:	2300      	movs	r3, #0
 801321c:	817b      	strh	r3, [r7, #10]
 801321e:	2300      	movs	r3, #0
 8013220:	81fb      	strh	r3, [r7, #14]
 8013222:	2300      	movs	r3, #0
 8013224:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	8c1b      	ldrh	r3, [r3, #32]
 801322a:	b29b      	uxth	r3, r3
 801322c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013230:	b29a      	uxth	r2, r3
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	8c1b      	ldrh	r3, [r3, #32]
 801323a:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	889b      	ldrh	r3, [r3, #4]
 8013240:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	8b9b      	ldrh	r3, [r3, #28]
 8013246:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 8013248:	897b      	ldrh	r3, [r7, #10]
 801324a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801324e:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8013250:	897b      	ldrh	r3, [r7, #10]
 8013252:	f023 0303 	bic.w	r3, r3, #3
 8013256:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8013258:	683b      	ldr	r3, [r7, #0]
 801325a:	881a      	ldrh	r2, [r3, #0]
 801325c:	897b      	ldrh	r3, [r7, #10]
 801325e:	4313      	orrs	r3, r2
 8013260:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8013262:	89fb      	ldrh	r3, [r7, #14]
 8013264:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013268:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 801326a:	683b      	ldr	r3, [r7, #0]
 801326c:	899b      	ldrh	r3, [r3, #12]
 801326e:	021b      	lsls	r3, r3, #8
 8013270:	b29a      	uxth	r2, r3
 8013272:	89fb      	ldrh	r3, [r7, #14]
 8013274:	4313      	orrs	r3, r2
 8013276:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8013278:	683b      	ldr	r3, [r7, #0]
 801327a:	885b      	ldrh	r3, [r3, #2]
 801327c:	021b      	lsls	r3, r3, #8
 801327e:	b29a      	uxth	r2, r3
 8013280:	89fb      	ldrh	r3, [r7, #14]
 8013282:	4313      	orrs	r3, r2
 8013284:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8013286:	687a      	ldr	r2, [r7, #4]
 8013288:	4b22      	ldr	r3, [pc, #136]	; (8013314 <TIM_OC3Init+0x104>)
 801328a:	429a      	cmp	r2, r3
 801328c:	d003      	beq.n	8013296 <TIM_OC3Init+0x86>
 801328e:	687a      	ldr	r2, [r7, #4]
 8013290:	4b21      	ldr	r3, [pc, #132]	; (8013318 <TIM_OC3Init+0x108>)
 8013292:	429a      	cmp	r2, r3
 8013294:	d12b      	bne.n	80132ee <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8013296:	89fb      	ldrh	r3, [r7, #14]
 8013298:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801329c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 801329e:	683b      	ldr	r3, [r7, #0]
 80132a0:	89db      	ldrh	r3, [r3, #14]
 80132a2:	021b      	lsls	r3, r3, #8
 80132a4:	b29a      	uxth	r2, r3
 80132a6:	89fb      	ldrh	r3, [r7, #14]
 80132a8:	4313      	orrs	r3, r2
 80132aa:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 80132ac:	89fb      	ldrh	r3, [r7, #14]
 80132ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80132b2:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80132b4:	683b      	ldr	r3, [r7, #0]
 80132b6:	889b      	ldrh	r3, [r3, #4]
 80132b8:	021b      	lsls	r3, r3, #8
 80132ba:	b29a      	uxth	r2, r3
 80132bc:	89fb      	ldrh	r3, [r7, #14]
 80132be:	4313      	orrs	r3, r2
 80132c0:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 80132c2:	89bb      	ldrh	r3, [r7, #12]
 80132c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80132c8:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 80132ca:	89bb      	ldrh	r3, [r7, #12]
 80132cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80132d0:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80132d2:	683b      	ldr	r3, [r7, #0]
 80132d4:	8a1b      	ldrh	r3, [r3, #16]
 80132d6:	011b      	lsls	r3, r3, #4
 80132d8:	b29a      	uxth	r2, r3
 80132da:	89bb      	ldrh	r3, [r7, #12]
 80132dc:	4313      	orrs	r3, r2
 80132de:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80132e0:	683b      	ldr	r3, [r7, #0]
 80132e2:	8a5b      	ldrh	r3, [r3, #18]
 80132e4:	011b      	lsls	r3, r3, #4
 80132e6:	b29a      	uxth	r2, r3
 80132e8:	89bb      	ldrh	r3, [r7, #12]
 80132ea:	4313      	orrs	r3, r2
 80132ec:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	89ba      	ldrh	r2, [r7, #12]
 80132f2:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	897a      	ldrh	r2, [r7, #10]
 80132f8:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80132fa:	683b      	ldr	r3, [r7, #0]
 80132fc:	689a      	ldr	r2, [r3, #8]
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	89fa      	ldrh	r2, [r7, #14]
 8013306:	841a      	strh	r2, [r3, #32]
}
 8013308:	3714      	adds	r7, #20
 801330a:	46bd      	mov	sp, r7
 801330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013310:	4770      	bx	lr
 8013312:	bf00      	nop
 8013314:	40010000 	.word	0x40010000
 8013318:	40010400 	.word	0x40010400

0801331c <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 801331c:	b480      	push	{r7}
 801331e:	b085      	sub	sp, #20
 8013320:	af00      	add	r7, sp, #0
 8013322:	6078      	str	r0, [r7, #4]
 8013324:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8013326:	2300      	movs	r3, #0
 8013328:	81bb      	strh	r3, [r7, #12]
 801332a:	2300      	movs	r3, #0
 801332c:	817b      	strh	r3, [r7, #10]
 801332e:	2300      	movs	r3, #0
 8013330:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	8c1b      	ldrh	r3, [r3, #32]
 8013336:	b29b      	uxth	r3, r3
 8013338:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801333c:	b29a      	uxth	r2, r3
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	8c1b      	ldrh	r3, [r3, #32]
 8013346:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	889b      	ldrh	r3, [r3, #4]
 801334c:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	8b9b      	ldrh	r3, [r3, #28]
 8013352:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 8013354:	89bb      	ldrh	r3, [r7, #12]
 8013356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801335a:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 801335c:	89bb      	ldrh	r3, [r7, #12]
 801335e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013362:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8013364:	683b      	ldr	r3, [r7, #0]
 8013366:	881b      	ldrh	r3, [r3, #0]
 8013368:	021b      	lsls	r3, r3, #8
 801336a:	b29a      	uxth	r2, r3
 801336c:	89bb      	ldrh	r3, [r7, #12]
 801336e:	4313      	orrs	r3, r2
 8013370:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8013372:	897b      	ldrh	r3, [r7, #10]
 8013374:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013378:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 801337a:	683b      	ldr	r3, [r7, #0]
 801337c:	899b      	ldrh	r3, [r3, #12]
 801337e:	031b      	lsls	r3, r3, #12
 8013380:	b29a      	uxth	r2, r3
 8013382:	897b      	ldrh	r3, [r7, #10]
 8013384:	4313      	orrs	r3, r2
 8013386:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8013388:	683b      	ldr	r3, [r7, #0]
 801338a:	885b      	ldrh	r3, [r3, #2]
 801338c:	031b      	lsls	r3, r3, #12
 801338e:	b29a      	uxth	r2, r3
 8013390:	897b      	ldrh	r3, [r7, #10]
 8013392:	4313      	orrs	r3, r2
 8013394:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8013396:	687a      	ldr	r2, [r7, #4]
 8013398:	4b11      	ldr	r3, [pc, #68]	; (80133e0 <TIM_OC4Init+0xc4>)
 801339a:	429a      	cmp	r2, r3
 801339c:	d003      	beq.n	80133a6 <TIM_OC4Init+0x8a>
 801339e:	687a      	ldr	r2, [r7, #4]
 80133a0:	4b10      	ldr	r3, [pc, #64]	; (80133e4 <TIM_OC4Init+0xc8>)
 80133a2:	429a      	cmp	r2, r3
 80133a4:	d10a      	bne.n	80133bc <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 80133a6:	89fb      	ldrh	r3, [r7, #14]
 80133a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80133ac:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80133ae:	683b      	ldr	r3, [r7, #0]
 80133b0:	8a1b      	ldrh	r3, [r3, #16]
 80133b2:	019b      	lsls	r3, r3, #6
 80133b4:	b29a      	uxth	r2, r3
 80133b6:	89fb      	ldrh	r3, [r7, #14]
 80133b8:	4313      	orrs	r3, r2
 80133ba:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	89fa      	ldrh	r2, [r7, #14]
 80133c0:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	89ba      	ldrh	r2, [r7, #12]
 80133c6:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80133c8:	683b      	ldr	r3, [r7, #0]
 80133ca:	689a      	ldr	r2, [r3, #8]
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	897a      	ldrh	r2, [r7, #10]
 80133d4:	841a      	strh	r2, [r3, #32]
}
 80133d6:	3714      	adds	r7, #20
 80133d8:	46bd      	mov	sp, r7
 80133da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133de:	4770      	bx	lr
 80133e0:	40010000 	.word	0x40010000
 80133e4:	40010400 	.word	0x40010400

080133e8 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80133e8:	b480      	push	{r7}
 80133ea:	b083      	sub	sp, #12
 80133ec:	af00      	add	r7, sp, #0
 80133ee:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	2200      	movs	r2, #0
 80133f4:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	2200      	movs	r2, #0
 80133fa:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	2200      	movs	r2, #0
 8013400:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	2200      	movs	r2, #0
 8013406:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	2200      	movs	r2, #0
 801340c:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	2200      	movs	r2, #0
 8013412:	81da      	strh	r2, [r3, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	2200      	movs	r2, #0
 8013418:	821a      	strh	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	2200      	movs	r2, #0
 801341e:	825a      	strh	r2, [r3, #18]
}
 8013420:	370c      	adds	r7, #12
 8013422:	46bd      	mov	sp, r7
 8013424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013428:	4770      	bx	lr
 801342a:	bf00      	nop

0801342c <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 801342c:	b480      	push	{r7}
 801342e:	b085      	sub	sp, #20
 8013430:	af00      	add	r7, sp, #0
 8013432:	6078      	str	r0, [r7, #4]
 8013434:	4613      	mov	r3, r2
 8013436:	460a      	mov	r2, r1
 8013438:	807a      	strh	r2, [r7, #2]
 801343a:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 801343c:	2300      	movs	r3, #0
 801343e:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
 8013440:	2300      	movs	r3, #0
 8013442:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_OFFSET;
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	3318      	adds	r3, #24
 801344c:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 801344e:	887b      	ldrh	r3, [r7, #2]
 8013450:	2201      	movs	r2, #1
 8013452:	fa02 f303 	lsl.w	r3, r2, r3
 8013456:	817b      	strh	r3, [r7, #10]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	8c1b      	ldrh	r3, [r3, #32]
 801345c:	b29a      	uxth	r2, r3
 801345e:	897b      	ldrh	r3, [r7, #10]
 8013460:	43db      	mvns	r3, r3
 8013462:	b29b      	uxth	r3, r3
 8013464:	4013      	ands	r3, r2
 8013466:	b29a      	uxth	r2, r3
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 801346c:	887b      	ldrh	r3, [r7, #2]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d002      	beq.n	8013478 <TIM_SelectOCxM+0x4c>
 8013472:	887b      	ldrh	r3, [r7, #2]
 8013474:	2b08      	cmp	r3, #8
 8013476:	d113      	bne.n	80134a0 <TIM_SelectOCxM+0x74>
  {
    tmp += (TIM_Channel>>1);
 8013478:	887b      	ldrh	r3, [r7, #2]
 801347a:	085b      	lsrs	r3, r3, #1
 801347c:	b29b      	uxth	r3, r3
 801347e:	68fa      	ldr	r2, [r7, #12]
 8013480:	4413      	add	r3, r2
 8013482:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 8013484:	68fa      	ldr	r2, [r7, #12]
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	6819      	ldr	r1, [r3, #0]
 801348a:	f64f 738f 	movw	r3, #65423	; 0xff8f
 801348e:	400b      	ands	r3, r1
 8013490:	6013      	str	r3, [r2, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	68fa      	ldr	r2, [r7, #12]
 8013496:	6811      	ldr	r1, [r2, #0]
 8013498:	883a      	ldrh	r2, [r7, #0]
 801349a:	430a      	orrs	r2, r1
 801349c:	601a      	str	r2, [r3, #0]
 801349e:	e016      	b.n	80134ce <TIM_SelectOCxM+0xa2>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 80134a0:	887b      	ldrh	r3, [r7, #2]
 80134a2:	3b04      	subs	r3, #4
 80134a4:	b29b      	uxth	r3, r3
 80134a6:	085b      	lsrs	r3, r3, #1
 80134a8:	b29b      	uxth	r3, r3
 80134aa:	68fa      	ldr	r2, [r7, #12]
 80134ac:	4413      	add	r3, r2
 80134ae:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 80134b0:	68fa      	ldr	r2, [r7, #12]
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	6819      	ldr	r1, [r3, #0]
 80134b6:	f648 73ff 	movw	r3, #36863	; 0x8fff
 80134ba:	400b      	ands	r3, r1
 80134bc:	6013      	str	r3, [r2, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	68fa      	ldr	r2, [r7, #12]
 80134c2:	6811      	ldr	r1, [r2, #0]
 80134c4:	883a      	ldrh	r2, [r7, #0]
 80134c6:	0212      	lsls	r2, r2, #8
 80134c8:	b292      	uxth	r2, r2
 80134ca:	430a      	orrs	r2, r1
 80134cc:	601a      	str	r2, [r3, #0]
  }
}
 80134ce:	3714      	adds	r7, #20
 80134d0:	46bd      	mov	sp, r7
 80134d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d6:	4770      	bx	lr

080134d8 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 80134d8:	b480      	push	{r7}
 80134da:	b083      	sub	sp, #12
 80134dc:	af00      	add	r7, sp, #0
 80134de:	6078      	str	r0, [r7, #4]
 80134e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	683a      	ldr	r2, [r7, #0]
 80134e6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80134e8:	370c      	adds	r7, #12
 80134ea:	46bd      	mov	sp, r7
 80134ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f0:	4770      	bx	lr
 80134f2:	bf00      	nop

080134f4 <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 80134f4:	b480      	push	{r7}
 80134f6:	b083      	sub	sp, #12
 80134f8:	af00      	add	r7, sp, #0
 80134fa:	6078      	str	r0, [r7, #4]
 80134fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	683a      	ldr	r2, [r7, #0]
 8013502:	639a      	str	r2, [r3, #56]	; 0x38
}
 8013504:	370c      	adds	r7, #12
 8013506:	46bd      	mov	sp, r7
 8013508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801350c:	4770      	bx	lr
 801350e:	bf00      	nop

08013510 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 8013510:	b480      	push	{r7}
 8013512:	b083      	sub	sp, #12
 8013514:	af00      	add	r7, sp, #0
 8013516:	6078      	str	r0, [r7, #4]
 8013518:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	683a      	ldr	r2, [r7, #0]
 801351e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8013520:	370c      	adds	r7, #12
 8013522:	46bd      	mov	sp, r7
 8013524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013528:	4770      	bx	lr
 801352a:	bf00      	nop

0801352c <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 801352c:	b480      	push	{r7}
 801352e:	b083      	sub	sp, #12
 8013530:	af00      	add	r7, sp, #0
 8013532:	6078      	str	r0, [r7, #4]
 8013534:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	683a      	ldr	r2, [r7, #0]
 801353a:	641a      	str	r2, [r3, #64]	; 0x40
}
 801353c:	370c      	adds	r7, #12
 801353e:	46bd      	mov	sp, r7
 8013540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013544:	4770      	bx	lr
 8013546:	bf00      	nop

08013548 <TIM_ForcedOC1Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8013548:	b480      	push	{r7}
 801354a:	b085      	sub	sp, #20
 801354c:	af00      	add	r7, sp, #0
 801354e:	6078      	str	r0, [r7, #4]
 8013550:	460b      	mov	r3, r1
 8013552:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8013554:	2300      	movs	r3, #0
 8013556:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	8b1b      	ldrh	r3, [r3, #24]
 801355c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 801355e:	89fb      	ldrh	r3, [r7, #14]
 8013560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013564:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 8013566:	89fa      	ldrh	r2, [r7, #14]
 8013568:	887b      	ldrh	r3, [r7, #2]
 801356a:	4313      	orrs	r3, r2
 801356c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	89fa      	ldrh	r2, [r7, #14]
 8013572:	831a      	strh	r2, [r3, #24]
}
 8013574:	3714      	adds	r7, #20
 8013576:	46bd      	mov	sp, r7
 8013578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801357c:	4770      	bx	lr
 801357e:	bf00      	nop

08013580 <TIM_ForcedOC2Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8013580:	b480      	push	{r7}
 8013582:	b085      	sub	sp, #20
 8013584:	af00      	add	r7, sp, #0
 8013586:	6078      	str	r0, [r7, #4]
 8013588:	460b      	mov	r3, r1
 801358a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 801358c:	2300      	movs	r3, #0
 801358e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	8b1b      	ldrh	r3, [r3, #24]
 8013594:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 8013596:	89fb      	ldrh	r3, [r7, #14]
 8013598:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801359c:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 801359e:	887b      	ldrh	r3, [r7, #2]
 80135a0:	021b      	lsls	r3, r3, #8
 80135a2:	b29a      	uxth	r2, r3
 80135a4:	89fb      	ldrh	r3, [r7, #14]
 80135a6:	4313      	orrs	r3, r2
 80135a8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	89fa      	ldrh	r2, [r7, #14]
 80135ae:	831a      	strh	r2, [r3, #24]
}
 80135b0:	3714      	adds	r7, #20
 80135b2:	46bd      	mov	sp, r7
 80135b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b8:	4770      	bx	lr
 80135ba:	bf00      	nop

080135bc <TIM_ForcedOC3Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 80135bc:	b480      	push	{r7}
 80135be:	b085      	sub	sp, #20
 80135c0:	af00      	add	r7, sp, #0
 80135c2:	6078      	str	r0, [r7, #4]
 80135c4:	460b      	mov	r3, r1
 80135c6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80135c8:	2300      	movs	r3, #0
 80135ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	8b9b      	ldrh	r3, [r3, #28]
 80135d0:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 80135d2:	89fb      	ldrh	r3, [r7, #14]
 80135d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80135d8:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 80135da:	89fa      	ldrh	r2, [r7, #14]
 80135dc:	887b      	ldrh	r3, [r7, #2]
 80135de:	4313      	orrs	r3, r2
 80135e0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	89fa      	ldrh	r2, [r7, #14]
 80135e6:	839a      	strh	r2, [r3, #28]
}
 80135e8:	3714      	adds	r7, #20
 80135ea:	46bd      	mov	sp, r7
 80135ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f0:	4770      	bx	lr
 80135f2:	bf00      	nop

080135f4 <TIM_ForcedOC4Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 80135f4:	b480      	push	{r7}
 80135f6:	b085      	sub	sp, #20
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	6078      	str	r0, [r7, #4]
 80135fc:	460b      	mov	r3, r1
 80135fe:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8013600:	2300      	movs	r3, #0
 8013602:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	8b9b      	ldrh	r3, [r3, #28]
 8013608:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 801360a:	89fb      	ldrh	r3, [r7, #14]
 801360c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013610:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 8013612:	887b      	ldrh	r3, [r7, #2]
 8013614:	021b      	lsls	r3, r3, #8
 8013616:	b29a      	uxth	r2, r3
 8013618:	89fb      	ldrh	r3, [r7, #14]
 801361a:	4313      	orrs	r3, r2
 801361c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	89fa      	ldrh	r2, [r7, #14]
 8013622:	839a      	strh	r2, [r3, #28]
}
 8013624:	3714      	adds	r7, #20
 8013626:	46bd      	mov	sp, r7
 8013628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801362c:	4770      	bx	lr
 801362e:	bf00      	nop

08013630 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8013630:	b480      	push	{r7}
 8013632:	b085      	sub	sp, #20
 8013634:	af00      	add	r7, sp, #0
 8013636:	6078      	str	r0, [r7, #4]
 8013638:	460b      	mov	r3, r1
 801363a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 801363c:	2300      	movs	r3, #0
 801363e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	8b1b      	ldrh	r3, [r3, #24]
 8013644:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8013646:	89fb      	ldrh	r3, [r7, #14]
 8013648:	f023 0308 	bic.w	r3, r3, #8
 801364c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 801364e:	89fa      	ldrh	r2, [r7, #14]
 8013650:	887b      	ldrh	r3, [r7, #2]
 8013652:	4313      	orrs	r3, r2
 8013654:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	89fa      	ldrh	r2, [r7, #14]
 801365a:	831a      	strh	r2, [r3, #24]
}
 801365c:	3714      	adds	r7, #20
 801365e:	46bd      	mov	sp, r7
 8013660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013664:	4770      	bx	lr
 8013666:	bf00      	nop

08013668 <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8013668:	b480      	push	{r7}
 801366a:	b085      	sub	sp, #20
 801366c:	af00      	add	r7, sp, #0
 801366e:	6078      	str	r0, [r7, #4]
 8013670:	460b      	mov	r3, r1
 8013672:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8013674:	2300      	movs	r3, #0
 8013676:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	8b1b      	ldrh	r3, [r3, #24]
 801367c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 801367e:	89fb      	ldrh	r3, [r7, #14]
 8013680:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013684:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8013686:	887b      	ldrh	r3, [r7, #2]
 8013688:	021b      	lsls	r3, r3, #8
 801368a:	b29a      	uxth	r2, r3
 801368c:	89fb      	ldrh	r3, [r7, #14]
 801368e:	4313      	orrs	r3, r2
 8013690:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	89fa      	ldrh	r2, [r7, #14]
 8013696:	831a      	strh	r2, [r3, #24]
}
 8013698:	3714      	adds	r7, #20
 801369a:	46bd      	mov	sp, r7
 801369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136a0:	4770      	bx	lr
 80136a2:	bf00      	nop

080136a4 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80136a4:	b480      	push	{r7}
 80136a6:	b085      	sub	sp, #20
 80136a8:	af00      	add	r7, sp, #0
 80136aa:	6078      	str	r0, [r7, #4]
 80136ac:	460b      	mov	r3, r1
 80136ae:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80136b0:	2300      	movs	r3, #0
 80136b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	8b9b      	ldrh	r3, [r3, #28]
 80136b8:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 80136ba:	89fb      	ldrh	r3, [r7, #14]
 80136bc:	f023 0308 	bic.w	r3, r3, #8
 80136c0:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 80136c2:	89fa      	ldrh	r2, [r7, #14]
 80136c4:	887b      	ldrh	r3, [r7, #2]
 80136c6:	4313      	orrs	r3, r2
 80136c8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	89fa      	ldrh	r2, [r7, #14]
 80136ce:	839a      	strh	r2, [r3, #28]
}
 80136d0:	3714      	adds	r7, #20
 80136d2:	46bd      	mov	sp, r7
 80136d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d8:	4770      	bx	lr
 80136da:	bf00      	nop

080136dc <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80136dc:	b480      	push	{r7}
 80136de:	b085      	sub	sp, #20
 80136e0:	af00      	add	r7, sp, #0
 80136e2:	6078      	str	r0, [r7, #4]
 80136e4:	460b      	mov	r3, r1
 80136e6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80136e8:	2300      	movs	r3, #0
 80136ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	8b9b      	ldrh	r3, [r3, #28]
 80136f0:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 80136f2:	89fb      	ldrh	r3, [r7, #14]
 80136f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80136f8:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 80136fa:	887b      	ldrh	r3, [r7, #2]
 80136fc:	021b      	lsls	r3, r3, #8
 80136fe:	b29a      	uxth	r2, r3
 8013700:	89fb      	ldrh	r3, [r7, #14]
 8013702:	4313      	orrs	r3, r2
 8013704:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	89fa      	ldrh	r2, [r7, #14]
 801370a:	839a      	strh	r2, [r3, #28]
}
 801370c:	3714      	adds	r7, #20
 801370e:	46bd      	mov	sp, r7
 8013710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013714:	4770      	bx	lr
 8013716:	bf00      	nop

08013718 <TIM_OC1FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8013718:	b480      	push	{r7}
 801371a:	b085      	sub	sp, #20
 801371c:	af00      	add	r7, sp, #0
 801371e:	6078      	str	r0, [r7, #4]
 8013720:	460b      	mov	r3, r1
 8013722:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8013724:	2300      	movs	r3, #0
 8013726:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	8b1b      	ldrh	r3, [r3, #24]
 801372c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 801372e:	89fb      	ldrh	r3, [r7, #14]
 8013730:	f023 0304 	bic.w	r3, r3, #4
 8013734:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8013736:	89fa      	ldrh	r2, [r7, #14]
 8013738:	887b      	ldrh	r3, [r7, #2]
 801373a:	4313      	orrs	r3, r2
 801373c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	89fa      	ldrh	r2, [r7, #14]
 8013742:	831a      	strh	r2, [r3, #24]
}
 8013744:	3714      	adds	r7, #20
 8013746:	46bd      	mov	sp, r7
 8013748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801374c:	4770      	bx	lr
 801374e:	bf00      	nop

08013750 <TIM_OC2FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8013750:	b480      	push	{r7}
 8013752:	b085      	sub	sp, #20
 8013754:	af00      	add	r7, sp, #0
 8013756:	6078      	str	r0, [r7, #4]
 8013758:	460b      	mov	r3, r1
 801375a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 801375c:	2300      	movs	r3, #0
 801375e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	8b1b      	ldrh	r3, [r3, #24]
 8013764:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 8013766:	89fb      	ldrh	r3, [r7, #14]
 8013768:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801376c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 801376e:	887b      	ldrh	r3, [r7, #2]
 8013770:	021b      	lsls	r3, r3, #8
 8013772:	b29a      	uxth	r2, r3
 8013774:	89fb      	ldrh	r3, [r7, #14]
 8013776:	4313      	orrs	r3, r2
 8013778:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	89fa      	ldrh	r2, [r7, #14]
 801377e:	831a      	strh	r2, [r3, #24]
}
 8013780:	3714      	adds	r7, #20
 8013782:	46bd      	mov	sp, r7
 8013784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013788:	4770      	bx	lr
 801378a:	bf00      	nop

0801378c <TIM_OC3FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 801378c:	b480      	push	{r7}
 801378e:	b085      	sub	sp, #20
 8013790:	af00      	add	r7, sp, #0
 8013792:	6078      	str	r0, [r7, #4]
 8013794:	460b      	mov	r3, r1
 8013796:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8013798:	2300      	movs	r3, #0
 801379a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	8b9b      	ldrh	r3, [r3, #28]
 80137a0:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 80137a2:	89fb      	ldrh	r3, [r7, #14]
 80137a4:	f023 0304 	bic.w	r3, r3, #4
 80137a8:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 80137aa:	89fa      	ldrh	r2, [r7, #14]
 80137ac:	887b      	ldrh	r3, [r7, #2]
 80137ae:	4313      	orrs	r3, r2
 80137b0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	89fa      	ldrh	r2, [r7, #14]
 80137b6:	839a      	strh	r2, [r3, #28]
}
 80137b8:	3714      	adds	r7, #20
 80137ba:	46bd      	mov	sp, r7
 80137bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c0:	4770      	bx	lr
 80137c2:	bf00      	nop

080137c4 <TIM_OC4FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 80137c4:	b480      	push	{r7}
 80137c6:	b085      	sub	sp, #20
 80137c8:	af00      	add	r7, sp, #0
 80137ca:	6078      	str	r0, [r7, #4]
 80137cc:	460b      	mov	r3, r1
 80137ce:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80137d0:	2300      	movs	r3, #0
 80137d2:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	8b9b      	ldrh	r3, [r3, #28]
 80137d8:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 80137da:	89fb      	ldrh	r3, [r7, #14]
 80137dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80137e0:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 80137e2:	887b      	ldrh	r3, [r7, #2]
 80137e4:	021b      	lsls	r3, r3, #8
 80137e6:	b29a      	uxth	r2, r3
 80137e8:	89fb      	ldrh	r3, [r7, #14]
 80137ea:	4313      	orrs	r3, r2
 80137ec:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	89fa      	ldrh	r2, [r7, #14]
 80137f2:	839a      	strh	r2, [r3, #28]
}
 80137f4:	3714      	adds	r7, #20
 80137f6:	46bd      	mov	sp, r7
 80137f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137fc:	4770      	bx	lr
 80137fe:	bf00      	nop

08013800 <TIM_ClearOC1Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8013800:	b480      	push	{r7}
 8013802:	b085      	sub	sp, #20
 8013804:	af00      	add	r7, sp, #0
 8013806:	6078      	str	r0, [r7, #4]
 8013808:	460b      	mov	r3, r1
 801380a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 801380c:	2300      	movs	r3, #0
 801380e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	8b1b      	ldrh	r3, [r3, #24]
 8013814:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 8013816:	89fb      	ldrh	r3, [r7, #14]
 8013818:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801381c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 801381e:	89fa      	ldrh	r2, [r7, #14]
 8013820:	887b      	ldrh	r3, [r7, #2]
 8013822:	4313      	orrs	r3, r2
 8013824:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	89fa      	ldrh	r2, [r7, #14]
 801382a:	831a      	strh	r2, [r3, #24]
}
 801382c:	3714      	adds	r7, #20
 801382e:	46bd      	mov	sp, r7
 8013830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013834:	4770      	bx	lr
 8013836:	bf00      	nop

08013838 <TIM_ClearOC2Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8013838:	b480      	push	{r7}
 801383a:	b085      	sub	sp, #20
 801383c:	af00      	add	r7, sp, #0
 801383e:	6078      	str	r0, [r7, #4]
 8013840:	460b      	mov	r3, r1
 8013842:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8013844:	2300      	movs	r3, #0
 8013846:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	8b1b      	ldrh	r3, [r3, #24]
 801384c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 801384e:	89fb      	ldrh	r3, [r7, #14]
 8013850:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8013854:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 8013856:	887b      	ldrh	r3, [r7, #2]
 8013858:	021b      	lsls	r3, r3, #8
 801385a:	b29a      	uxth	r2, r3
 801385c:	89fb      	ldrh	r3, [r7, #14]
 801385e:	4313      	orrs	r3, r2
 8013860:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	89fa      	ldrh	r2, [r7, #14]
 8013866:	831a      	strh	r2, [r3, #24]
}
 8013868:	3714      	adds	r7, #20
 801386a:	46bd      	mov	sp, r7
 801386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013870:	4770      	bx	lr
 8013872:	bf00      	nop

08013874 <TIM_ClearOC3Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8013874:	b480      	push	{r7}
 8013876:	b085      	sub	sp, #20
 8013878:	af00      	add	r7, sp, #0
 801387a:	6078      	str	r0, [r7, #4]
 801387c:	460b      	mov	r3, r1
 801387e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8013880:	2300      	movs	r3, #0
 8013882:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	8b9b      	ldrh	r3, [r3, #28]
 8013888:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 801388a:	89fb      	ldrh	r3, [r7, #14]
 801388c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013890:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 8013892:	89fa      	ldrh	r2, [r7, #14]
 8013894:	887b      	ldrh	r3, [r7, #2]
 8013896:	4313      	orrs	r3, r2
 8013898:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	89fa      	ldrh	r2, [r7, #14]
 801389e:	839a      	strh	r2, [r3, #28]
}
 80138a0:	3714      	adds	r7, #20
 80138a2:	46bd      	mov	sp, r7
 80138a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a8:	4770      	bx	lr
 80138aa:	bf00      	nop

080138ac <TIM_ClearOC4Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 80138ac:	b480      	push	{r7}
 80138ae:	b085      	sub	sp, #20
 80138b0:	af00      	add	r7, sp, #0
 80138b2:	6078      	str	r0, [r7, #4]
 80138b4:	460b      	mov	r3, r1
 80138b6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80138b8:	2300      	movs	r3, #0
 80138ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	8b9b      	ldrh	r3, [r3, #28]
 80138c0:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 80138c2:	89fb      	ldrh	r3, [r7, #14]
 80138c4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80138c8:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 80138ca:	887b      	ldrh	r3, [r7, #2]
 80138cc:	021b      	lsls	r3, r3, #8
 80138ce:	b29a      	uxth	r2, r3
 80138d0:	89fb      	ldrh	r3, [r7, #14]
 80138d2:	4313      	orrs	r3, r2
 80138d4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	89fa      	ldrh	r2, [r7, #14]
 80138da:	839a      	strh	r2, [r3, #28]
}
 80138dc:	3714      	adds	r7, #20
 80138de:	46bd      	mov	sp, r7
 80138e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138e4:	4770      	bx	lr
 80138e6:	bf00      	nop

080138e8 <TIM_OC1PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 80138e8:	b480      	push	{r7}
 80138ea:	b085      	sub	sp, #20
 80138ec:	af00      	add	r7, sp, #0
 80138ee:	6078      	str	r0, [r7, #4]
 80138f0:	460b      	mov	r3, r1
 80138f2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 80138f4:	2300      	movs	r3, #0
 80138f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	8c1b      	ldrh	r3, [r3, #32]
 80138fc:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 80138fe:	89fb      	ldrh	r3, [r7, #14]
 8013900:	f023 0302 	bic.w	r3, r3, #2
 8013904:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
 8013906:	89fa      	ldrh	r2, [r7, #14]
 8013908:	887b      	ldrh	r3, [r7, #2]
 801390a:	4313      	orrs	r3, r2
 801390c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	89fa      	ldrh	r2, [r7, #14]
 8013912:	841a      	strh	r2, [r3, #32]
}
 8013914:	3714      	adds	r7, #20
 8013916:	46bd      	mov	sp, r7
 8013918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801391c:	4770      	bx	lr
 801391e:	bf00      	nop

08013920 <TIM_OC1NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8013920:	b480      	push	{r7}
 8013922:	b085      	sub	sp, #20
 8013924:	af00      	add	r7, sp, #0
 8013926:	6078      	str	r0, [r7, #4]
 8013928:	460b      	mov	r3, r1
 801392a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 801392c:	2300      	movs	r3, #0
 801392e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	8c1b      	ldrh	r3, [r3, #32]
 8013934:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8013936:	89fb      	ldrh	r3, [r7, #14]
 8013938:	f023 0308 	bic.w	r3, r3, #8
 801393c:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
 801393e:	89fa      	ldrh	r2, [r7, #14]
 8013940:	887b      	ldrh	r3, [r7, #2]
 8013942:	4313      	orrs	r3, r2
 8013944:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	89fa      	ldrh	r2, [r7, #14]
 801394a:	841a      	strh	r2, [r3, #32]
}
 801394c:	3714      	adds	r7, #20
 801394e:	46bd      	mov	sp, r7
 8013950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013954:	4770      	bx	lr
 8013956:	bf00      	nop

08013958 <TIM_OC2PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8013958:	b480      	push	{r7}
 801395a:	b085      	sub	sp, #20
 801395c:	af00      	add	r7, sp, #0
 801395e:	6078      	str	r0, [r7, #4]
 8013960:	460b      	mov	r3, r1
 8013962:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8013964:	2300      	movs	r3, #0
 8013966:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	8c1b      	ldrh	r3, [r3, #32]
 801396c:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 801396e:	89fb      	ldrh	r3, [r7, #14]
 8013970:	f023 0320 	bic.w	r3, r3, #32
 8013974:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 8013976:	887b      	ldrh	r3, [r7, #2]
 8013978:	011b      	lsls	r3, r3, #4
 801397a:	b29a      	uxth	r2, r3
 801397c:	89fb      	ldrh	r3, [r7, #14]
 801397e:	4313      	orrs	r3, r2
 8013980:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	89fa      	ldrh	r2, [r7, #14]
 8013986:	841a      	strh	r2, [r3, #32]
}
 8013988:	3714      	adds	r7, #20
 801398a:	46bd      	mov	sp, r7
 801398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013990:	4770      	bx	lr
 8013992:	bf00      	nop

08013994 <TIM_OC2NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8013994:	b480      	push	{r7}
 8013996:	b085      	sub	sp, #20
 8013998:	af00      	add	r7, sp, #0
 801399a:	6078      	str	r0, [r7, #4]
 801399c:	460b      	mov	r3, r1
 801399e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 80139a0:	2300      	movs	r3, #0
 80139a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	8c1b      	ldrh	r3, [r3, #32]
 80139a8:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 80139aa:	89fb      	ldrh	r3, [r7, #14]
 80139ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80139b0:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 80139b2:	887b      	ldrh	r3, [r7, #2]
 80139b4:	011b      	lsls	r3, r3, #4
 80139b6:	b29a      	uxth	r2, r3
 80139b8:	89fb      	ldrh	r3, [r7, #14]
 80139ba:	4313      	orrs	r3, r2
 80139bc:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	89fa      	ldrh	r2, [r7, #14]
 80139c2:	841a      	strh	r2, [r3, #32]
}
 80139c4:	3714      	adds	r7, #20
 80139c6:	46bd      	mov	sp, r7
 80139c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139cc:	4770      	bx	lr
 80139ce:	bf00      	nop

080139d0 <TIM_OC3PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 80139d0:	b480      	push	{r7}
 80139d2:	b085      	sub	sp, #20
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	6078      	str	r0, [r7, #4]
 80139d8:	460b      	mov	r3, r1
 80139da:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 80139dc:	2300      	movs	r3, #0
 80139de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	8c1b      	ldrh	r3, [r3, #32]
 80139e4:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80139e6:	89fb      	ldrh	r3, [r7, #14]
 80139e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80139ec:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 80139ee:	887b      	ldrh	r3, [r7, #2]
 80139f0:	021b      	lsls	r3, r3, #8
 80139f2:	b29a      	uxth	r2, r3
 80139f4:	89fb      	ldrh	r3, [r7, #14]
 80139f6:	4313      	orrs	r3, r2
 80139f8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	89fa      	ldrh	r2, [r7, #14]
 80139fe:	841a      	strh	r2, [r3, #32]
}
 8013a00:	3714      	adds	r7, #20
 8013a02:	46bd      	mov	sp, r7
 8013a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a08:	4770      	bx	lr
 8013a0a:	bf00      	nop

08013a0c <TIM_OC3NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8013a0c:	b480      	push	{r7}
 8013a0e:	b085      	sub	sp, #20
 8013a10:	af00      	add	r7, sp, #0
 8013a12:	6078      	str	r0, [r7, #4]
 8013a14:	460b      	mov	r3, r1
 8013a16:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8013a18:	2300      	movs	r3, #0
 8013a1a:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	8c1b      	ldrh	r3, [r3, #32]
 8013a20:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8013a22:	89fb      	ldrh	r3, [r7, #14]
 8013a24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013a28:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 8013a2a:	887b      	ldrh	r3, [r7, #2]
 8013a2c:	021b      	lsls	r3, r3, #8
 8013a2e:	b29a      	uxth	r2, r3
 8013a30:	89fb      	ldrh	r3, [r7, #14]
 8013a32:	4313      	orrs	r3, r2
 8013a34:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	89fa      	ldrh	r2, [r7, #14]
 8013a3a:	841a      	strh	r2, [r3, #32]
}
 8013a3c:	3714      	adds	r7, #20
 8013a3e:	46bd      	mov	sp, r7
 8013a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a44:	4770      	bx	lr
 8013a46:	bf00      	nop

08013a48 <TIM_OC4PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8013a48:	b480      	push	{r7}
 8013a4a:	b085      	sub	sp, #20
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	6078      	str	r0, [r7, #4]
 8013a50:	460b      	mov	r3, r1
 8013a52:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8013a54:	2300      	movs	r3, #0
 8013a56:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	8c1b      	ldrh	r3, [r3, #32]
 8013a5c:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8013a5e:	89fb      	ldrh	r3, [r7, #14]
 8013a60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013a64:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 8013a66:	887b      	ldrh	r3, [r7, #2]
 8013a68:	031b      	lsls	r3, r3, #12
 8013a6a:	b29a      	uxth	r2, r3
 8013a6c:	89fb      	ldrh	r3, [r7, #14]
 8013a6e:	4313      	orrs	r3, r2
 8013a70:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	89fa      	ldrh	r2, [r7, #14]
 8013a76:	841a      	strh	r2, [r3, #32]
}
 8013a78:	3714      	adds	r7, #20
 8013a7a:	46bd      	mov	sp, r7
 8013a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a80:	4770      	bx	lr
 8013a82:	bf00      	nop

08013a84 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8013a84:	b480      	push	{r7}
 8013a86:	b085      	sub	sp, #20
 8013a88:	af00      	add	r7, sp, #0
 8013a8a:	6078      	str	r0, [r7, #4]
 8013a8c:	4613      	mov	r3, r2
 8013a8e:	460a      	mov	r2, r1
 8013a90:	807a      	strh	r2, [r7, #2]
 8013a92:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8013a94:	2300      	movs	r3, #0
 8013a96:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 8013a98:	887b      	ldrh	r3, [r7, #2]
 8013a9a:	2201      	movs	r2, #1
 8013a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8013aa0:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	8c1b      	ldrh	r3, [r3, #32]
 8013aa6:	b29a      	uxth	r2, r3
 8013aa8:	89fb      	ldrh	r3, [r7, #14]
 8013aaa:	43db      	mvns	r3, r3
 8013aac:	b29b      	uxth	r3, r3
 8013aae:	4013      	ands	r3, r2
 8013ab0:	b29a      	uxth	r2, r3
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	8c1b      	ldrh	r3, [r3, #32]
 8013aba:	b29a      	uxth	r2, r3
 8013abc:	8839      	ldrh	r1, [r7, #0]
 8013abe:	887b      	ldrh	r3, [r7, #2]
 8013ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8013ac4:	b29b      	uxth	r3, r3
 8013ac6:	4313      	orrs	r3, r2
 8013ac8:	b29a      	uxth	r2, r3
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	841a      	strh	r2, [r3, #32]
}
 8013ace:	3714      	adds	r7, #20
 8013ad0:	46bd      	mov	sp, r7
 8013ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ad6:	4770      	bx	lr

08013ad8 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8013ad8:	b480      	push	{r7}
 8013ada:	b085      	sub	sp, #20
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	6078      	str	r0, [r7, #4]
 8013ae0:	4613      	mov	r3, r2
 8013ae2:	460a      	mov	r2, r1
 8013ae4:	807a      	strh	r2, [r7, #2]
 8013ae6:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8013ae8:	2300      	movs	r3, #0
 8013aea:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 8013aec:	887b      	ldrh	r3, [r7, #2]
 8013aee:	2204      	movs	r2, #4
 8013af0:	fa02 f303 	lsl.w	r3, r2, r3
 8013af4:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	8c1b      	ldrh	r3, [r3, #32]
 8013afa:	b29a      	uxth	r2, r3
 8013afc:	89fb      	ldrh	r3, [r7, #14]
 8013afe:	43db      	mvns	r3, r3
 8013b00:	b29b      	uxth	r3, r3
 8013b02:	4013      	ands	r3, r2
 8013b04:	b29a      	uxth	r2, r3
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	8c1b      	ldrh	r3, [r3, #32]
 8013b0e:	b29a      	uxth	r2, r3
 8013b10:	8839      	ldrh	r1, [r7, #0]
 8013b12:	887b      	ldrh	r3, [r7, #2]
 8013b14:	fa01 f303 	lsl.w	r3, r1, r3
 8013b18:	b29b      	uxth	r3, r3
 8013b1a:	4313      	orrs	r3, r2
 8013b1c:	b29a      	uxth	r2, r3
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	841a      	strh	r2, [r3, #32]
}
 8013b22:	3714      	adds	r7, #20
 8013b24:	46bd      	mov	sp, r7
 8013b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b2a:	4770      	bx	lr

08013b2c <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8013b2c:	b580      	push	{r7, lr}
 8013b2e:	b082      	sub	sp, #8
 8013b30:	af00      	add	r7, sp, #0
 8013b32:	6078      	str	r0, [r7, #4]
 8013b34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8013b36:	683b      	ldr	r3, [r7, #0]
 8013b38:	881b      	ldrh	r3, [r3, #0]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d10f      	bne.n	8013b5e <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8013b3e:	683b      	ldr	r3, [r7, #0]
 8013b40:	8859      	ldrh	r1, [r3, #2]
 8013b42:	683b      	ldr	r3, [r7, #0]
 8013b44:	889a      	ldrh	r2, [r3, #4]
 8013b46:	683b      	ldr	r3, [r7, #0]
 8013b48:	891b      	ldrh	r3, [r3, #8]
 8013b4a:	6878      	ldr	r0, [r7, #4]
 8013b4c:	f000 fc92 	bl	8014474 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8013b50:	683b      	ldr	r3, [r7, #0]
 8013b52:	88db      	ldrh	r3, [r3, #6]
 8013b54:	6878      	ldr	r0, [r7, #4]
 8013b56:	4619      	mov	r1, r3
 8013b58:	f000 f8e0 	bl	8013d1c <TIM_SetIC1Prescaler>
 8013b5c:	e036      	b.n	8013bcc <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8013b5e:	683b      	ldr	r3, [r7, #0]
 8013b60:	881b      	ldrh	r3, [r3, #0]
 8013b62:	2b04      	cmp	r3, #4
 8013b64:	d10f      	bne.n	8013b86 <TIM_ICInit+0x5a>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8013b66:	683b      	ldr	r3, [r7, #0]
 8013b68:	8859      	ldrh	r1, [r3, #2]
 8013b6a:	683b      	ldr	r3, [r7, #0]
 8013b6c:	889a      	ldrh	r2, [r3, #4]
 8013b6e:	683b      	ldr	r3, [r7, #0]
 8013b70:	891b      	ldrh	r3, [r3, #8]
 8013b72:	6878      	ldr	r0, [r7, #4]
 8013b74:	f000 fcba 	bl	80144ec <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8013b78:	683b      	ldr	r3, [r7, #0]
 8013b7a:	88db      	ldrh	r3, [r3, #6]
 8013b7c:	6878      	ldr	r0, [r7, #4]
 8013b7e:	4619      	mov	r1, r3
 8013b80:	f000 f8e8 	bl	8013d54 <TIM_SetIC2Prescaler>
 8013b84:	e022      	b.n	8013bcc <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8013b86:	683b      	ldr	r3, [r7, #0]
 8013b88:	881b      	ldrh	r3, [r3, #0]
 8013b8a:	2b08      	cmp	r3, #8
 8013b8c:	d10f      	bne.n	8013bae <TIM_ICInit+0x82>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8013b8e:	683b      	ldr	r3, [r7, #0]
 8013b90:	8859      	ldrh	r1, [r3, #2]
 8013b92:	683b      	ldr	r3, [r7, #0]
 8013b94:	889a      	ldrh	r2, [r3, #4]
 8013b96:	683b      	ldr	r3, [r7, #0]
 8013b98:	891b      	ldrh	r3, [r3, #8]
 8013b9a:	6878      	ldr	r0, [r7, #4]
 8013b9c:	f000 fcec 	bl	8014578 <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8013ba0:	683b      	ldr	r3, [r7, #0]
 8013ba2:	88db      	ldrh	r3, [r3, #6]
 8013ba4:	6878      	ldr	r0, [r7, #4]
 8013ba6:	4619      	mov	r1, r3
 8013ba8:	f000 f8f2 	bl	8013d90 <TIM_SetIC3Prescaler>
 8013bac:	e00e      	b.n	8013bcc <TIM_ICInit+0xa0>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8013bae:	683b      	ldr	r3, [r7, #0]
 8013bb0:	8859      	ldrh	r1, [r3, #2]
 8013bb2:	683b      	ldr	r3, [r7, #0]
 8013bb4:	889a      	ldrh	r2, [r3, #4]
 8013bb6:	683b      	ldr	r3, [r7, #0]
 8013bb8:	891b      	ldrh	r3, [r3, #8]
 8013bba:	6878      	ldr	r0, [r7, #4]
 8013bbc:	f000 fd1e 	bl	80145fc <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8013bc0:	683b      	ldr	r3, [r7, #0]
 8013bc2:	88db      	ldrh	r3, [r3, #6]
 8013bc4:	6878      	ldr	r0, [r7, #4]
 8013bc6:	4619      	mov	r1, r3
 8013bc8:	f000 f8fe 	bl	8013dc8 <TIM_SetIC4Prescaler>
  }
}
 8013bcc:	3708      	adds	r7, #8
 8013bce:	46bd      	mov	sp, r7
 8013bd0:	bd80      	pop	{r7, pc}
 8013bd2:	bf00      	nop

08013bd4 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8013bd4:	b480      	push	{r7}
 8013bd6:	b083      	sub	sp, #12
 8013bd8:	af00      	add	r7, sp, #0
 8013bda:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	2200      	movs	r2, #0
 8013be0:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	2200      	movs	r2, #0
 8013be6:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	2201      	movs	r2, #1
 8013bec:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	2200      	movs	r2, #0
 8013bf2:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	2200      	movs	r2, #0
 8013bf8:	811a      	strh	r2, [r3, #8]
}
 8013bfa:	370c      	adds	r7, #12
 8013bfc:	46bd      	mov	sp, r7
 8013bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c02:	4770      	bx	lr

08013c04 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8013c04:	b580      	push	{r7, lr}
 8013c06:	b084      	sub	sp, #16
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	6078      	str	r0, [r7, #4]
 8013c0c:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 8013c0e:	2300      	movs	r3, #0
 8013c10:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 8013c12:	2301      	movs	r3, #1
 8013c14:	81bb      	strh	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8013c16:	683b      	ldr	r3, [r7, #0]
 8013c18:	885b      	ldrh	r3, [r3, #2]
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d102      	bne.n	8013c24 <TIM_PWMIConfig+0x20>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 8013c1e:	2302      	movs	r3, #2
 8013c20:	81fb      	strh	r3, [r7, #14]
 8013c22:	e001      	b.n	8013c28 <TIM_PWMIConfig+0x24>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 8013c24:	2300      	movs	r3, #0
 8013c26:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8013c28:	683b      	ldr	r3, [r7, #0]
 8013c2a:	889b      	ldrh	r3, [r3, #4]
 8013c2c:	2b01      	cmp	r3, #1
 8013c2e:	d102      	bne.n	8013c36 <TIM_PWMIConfig+0x32>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 8013c30:	2302      	movs	r3, #2
 8013c32:	81bb      	strh	r3, [r7, #12]
 8013c34:	e001      	b.n	8013c3a <TIM_PWMIConfig+0x36>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 8013c36:	2301      	movs	r3, #1
 8013c38:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8013c3a:	683b      	ldr	r3, [r7, #0]
 8013c3c:	881b      	ldrh	r3, [r3, #0]
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d11c      	bne.n	8013c7c <TIM_PWMIConfig+0x78>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8013c42:	683b      	ldr	r3, [r7, #0]
 8013c44:	8859      	ldrh	r1, [r3, #2]
 8013c46:	683b      	ldr	r3, [r7, #0]
 8013c48:	889a      	ldrh	r2, [r3, #4]
 8013c4a:	683b      	ldr	r3, [r7, #0]
 8013c4c:	891b      	ldrh	r3, [r3, #8]
 8013c4e:	6878      	ldr	r0, [r7, #4]
 8013c50:	f000 fc10 	bl	8014474 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8013c54:	683b      	ldr	r3, [r7, #0]
 8013c56:	88db      	ldrh	r3, [r3, #6]
 8013c58:	6878      	ldr	r0, [r7, #4]
 8013c5a:	4619      	mov	r1, r3
 8013c5c:	f000 f85e 	bl	8013d1c <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8013c60:	683b      	ldr	r3, [r7, #0]
 8013c62:	891b      	ldrh	r3, [r3, #8]
 8013c64:	89f9      	ldrh	r1, [r7, #14]
 8013c66:	89ba      	ldrh	r2, [r7, #12]
 8013c68:	6878      	ldr	r0, [r7, #4]
 8013c6a:	f000 fc3f 	bl	80144ec <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8013c6e:	683b      	ldr	r3, [r7, #0]
 8013c70:	88db      	ldrh	r3, [r3, #6]
 8013c72:	6878      	ldr	r0, [r7, #4]
 8013c74:	4619      	mov	r1, r3
 8013c76:	f000 f86d 	bl	8013d54 <TIM_SetIC2Prescaler>
 8013c7a:	e01b      	b.n	8013cb4 <TIM_PWMIConfig+0xb0>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8013c7c:	683b      	ldr	r3, [r7, #0]
 8013c7e:	8859      	ldrh	r1, [r3, #2]
 8013c80:	683b      	ldr	r3, [r7, #0]
 8013c82:	889a      	ldrh	r2, [r3, #4]
 8013c84:	683b      	ldr	r3, [r7, #0]
 8013c86:	891b      	ldrh	r3, [r3, #8]
 8013c88:	6878      	ldr	r0, [r7, #4]
 8013c8a:	f000 fc2f 	bl	80144ec <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8013c8e:	683b      	ldr	r3, [r7, #0]
 8013c90:	88db      	ldrh	r3, [r3, #6]
 8013c92:	6878      	ldr	r0, [r7, #4]
 8013c94:	4619      	mov	r1, r3
 8013c96:	f000 f85d 	bl	8013d54 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8013c9a:	683b      	ldr	r3, [r7, #0]
 8013c9c:	891b      	ldrh	r3, [r3, #8]
 8013c9e:	89f9      	ldrh	r1, [r7, #14]
 8013ca0:	89ba      	ldrh	r2, [r7, #12]
 8013ca2:	6878      	ldr	r0, [r7, #4]
 8013ca4:	f000 fbe6 	bl	8014474 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8013ca8:	683b      	ldr	r3, [r7, #0]
 8013caa:	88db      	ldrh	r3, [r3, #6]
 8013cac:	6878      	ldr	r0, [r7, #4]
 8013cae:	4619      	mov	r1, r3
 8013cb0:	f000 f834 	bl	8013d1c <TIM_SetIC1Prescaler>
  }
}
 8013cb4:	3710      	adds	r7, #16
 8013cb6:	46bd      	mov	sp, r7
 8013cb8:	bd80      	pop	{r7, pc}
 8013cba:	bf00      	nop

08013cbc <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 8013cbc:	b480      	push	{r7}
 8013cbe:	b083      	sub	sp, #12
 8013cc0:	af00      	add	r7, sp, #0
 8013cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8013cc8:	4618      	mov	r0, r3
 8013cca:	370c      	adds	r7, #12
 8013ccc:	46bd      	mov	sp, r7
 8013cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cd2:	4770      	bx	lr

08013cd4 <TIM_GetCapture2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 8013cd4:	b480      	push	{r7}
 8013cd6:	b083      	sub	sp, #12
 8013cd8:	af00      	add	r7, sp, #0
 8013cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	370c      	adds	r7, #12
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cea:	4770      	bx	lr

08013cec <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 8013cec:	b480      	push	{r7}
 8013cee:	b083      	sub	sp, #12
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	370c      	adds	r7, #12
 8013cfc:	46bd      	mov	sp, r7
 8013cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d02:	4770      	bx	lr

08013d04 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 8013d04:	b480      	push	{r7}
 8013d06:	b083      	sub	sp, #12
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8013d10:	4618      	mov	r0, r3
 8013d12:	370c      	adds	r7, #12
 8013d14:	46bd      	mov	sp, r7
 8013d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d1a:	4770      	bx	lr

08013d1c <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8013d1c:	b480      	push	{r7}
 8013d1e:	b083      	sub	sp, #12
 8013d20:	af00      	add	r7, sp, #0
 8013d22:	6078      	str	r0, [r7, #4]
 8013d24:	460b      	mov	r3, r1
 8013d26:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	8b1b      	ldrh	r3, [r3, #24]
 8013d2c:	b29b      	uxth	r3, r3
 8013d2e:	f023 030c 	bic.w	r3, r3, #12
 8013d32:	b29a      	uxth	r2, r3
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	831a      	strh	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	8b1b      	ldrh	r3, [r3, #24]
 8013d3c:	b29a      	uxth	r2, r3
 8013d3e:	887b      	ldrh	r3, [r7, #2]
 8013d40:	4313      	orrs	r3, r2
 8013d42:	b29a      	uxth	r2, r3
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	831a      	strh	r2, [r3, #24]
}
 8013d48:	370c      	adds	r7, #12
 8013d4a:	46bd      	mov	sp, r7
 8013d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d50:	4770      	bx	lr
 8013d52:	bf00      	nop

08013d54 <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8013d54:	b480      	push	{r7}
 8013d56:	b083      	sub	sp, #12
 8013d58:	af00      	add	r7, sp, #0
 8013d5a:	6078      	str	r0, [r7, #4]
 8013d5c:	460b      	mov	r3, r1
 8013d5e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	8b1b      	ldrh	r3, [r3, #24]
 8013d64:	b29b      	uxth	r3, r3
 8013d66:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8013d6a:	b29a      	uxth	r2, r3
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	831a      	strh	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	8b1b      	ldrh	r3, [r3, #24]
 8013d74:	b29a      	uxth	r2, r3
 8013d76:	887b      	ldrh	r3, [r7, #2]
 8013d78:	021b      	lsls	r3, r3, #8
 8013d7a:	b29b      	uxth	r3, r3
 8013d7c:	4313      	orrs	r3, r2
 8013d7e:	b29a      	uxth	r2, r3
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	831a      	strh	r2, [r3, #24]
}
 8013d84:	370c      	adds	r7, #12
 8013d86:	46bd      	mov	sp, r7
 8013d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d8c:	4770      	bx	lr
 8013d8e:	bf00      	nop

08013d90 <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8013d90:	b480      	push	{r7}
 8013d92:	b083      	sub	sp, #12
 8013d94:	af00      	add	r7, sp, #0
 8013d96:	6078      	str	r0, [r7, #4]
 8013d98:	460b      	mov	r3, r1
 8013d9a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	8b9b      	ldrh	r3, [r3, #28]
 8013da0:	b29b      	uxth	r3, r3
 8013da2:	f023 030c 	bic.w	r3, r3, #12
 8013da6:	b29a      	uxth	r2, r3
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	839a      	strh	r2, [r3, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	8b9b      	ldrh	r3, [r3, #28]
 8013db0:	b29a      	uxth	r2, r3
 8013db2:	887b      	ldrh	r3, [r7, #2]
 8013db4:	4313      	orrs	r3, r2
 8013db6:	b29a      	uxth	r2, r3
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	839a      	strh	r2, [r3, #28]
}
 8013dbc:	370c      	adds	r7, #12
 8013dbe:	46bd      	mov	sp, r7
 8013dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dc4:	4770      	bx	lr
 8013dc6:	bf00      	nop

08013dc8 <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 8013dc8:	b480      	push	{r7}
 8013dca:	b083      	sub	sp, #12
 8013dcc:	af00      	add	r7, sp, #0
 8013dce:	6078      	str	r0, [r7, #4]
 8013dd0:	460b      	mov	r3, r1
 8013dd2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	8b9b      	ldrh	r3, [r3, #28]
 8013dd8:	b29b      	uxth	r3, r3
 8013dda:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8013dde:	b29a      	uxth	r2, r3
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	839a      	strh	r2, [r3, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	8b9b      	ldrh	r3, [r3, #28]
 8013de8:	b29a      	uxth	r2, r3
 8013dea:	887b      	ldrh	r3, [r7, #2]
 8013dec:	021b      	lsls	r3, r3, #8
 8013dee:	b29b      	uxth	r3, r3
 8013df0:	4313      	orrs	r3, r2
 8013df2:	b29a      	uxth	r2, r3
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	839a      	strh	r2, [r3, #28]
}
 8013df8:	370c      	adds	r7, #12
 8013dfa:	46bd      	mov	sp, r7
 8013dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e00:	4770      	bx	lr
 8013e02:	bf00      	nop

08013e04 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 8013e04:	b480      	push	{r7}
 8013e06:	b083      	sub	sp, #12
 8013e08:	af00      	add	r7, sp, #0
 8013e0a:	6078      	str	r0, [r7, #4]
 8013e0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8013e0e:	683b      	ldr	r3, [r7, #0]
 8013e10:	881a      	ldrh	r2, [r3, #0]
 8013e12:	683b      	ldr	r3, [r7, #0]
 8013e14:	885b      	ldrh	r3, [r3, #2]
 8013e16:	4313      	orrs	r3, r2
 8013e18:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8013e1a:	683b      	ldr	r3, [r7, #0]
 8013e1c:	889b      	ldrh	r3, [r3, #4]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8013e1e:	4313      	orrs	r3, r2
 8013e20:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8013e22:	683b      	ldr	r3, [r7, #0]
 8013e24:	88db      	ldrh	r3, [r3, #6]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8013e26:	4313      	orrs	r3, r2
 8013e28:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8013e2a:	683b      	ldr	r3, [r7, #0]
 8013e2c:	891b      	ldrh	r3, [r3, #8]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8013e2e:	4313      	orrs	r3, r2
 8013e30:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8013e32:	683b      	ldr	r3, [r7, #0]
 8013e34:	895b      	ldrh	r3, [r3, #10]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8013e36:	4313      	orrs	r3, r2
 8013e38:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
 8013e3a:	683b      	ldr	r3, [r7, #0]
 8013e3c:	899b      	ldrh	r3, [r3, #12]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8013e3e:	4313      	orrs	r3, r2
 8013e40:	b29a      	uxth	r2, r3
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 8013e48:	370c      	adds	r7, #12
 8013e4a:	46bd      	mov	sp, r7
 8013e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e50:	4770      	bx	lr
 8013e52:	bf00      	nop

08013e54 <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
 8013e54:	b480      	push	{r7}
 8013e56:	b083      	sub	sp, #12
 8013e58:	af00      	add	r7, sp, #0
 8013e5a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	2200      	movs	r2, #0
 8013e60:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	2200      	movs	r2, #0
 8013e66:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	2200      	movs	r2, #0
 8013e6c:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	2200      	movs	r2, #0
 8013e72:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	2200      	movs	r2, #0
 8013e78:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	2200      	movs	r2, #0
 8013e7e:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	2200      	movs	r2, #0
 8013e84:	819a      	strh	r2, [r3, #12]
}
 8013e86:	370c      	adds	r7, #12
 8013e88:	46bd      	mov	sp, r7
 8013e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e8e:	4770      	bx	lr

08013e90 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8013e90:	b480      	push	{r7}
 8013e92:	b083      	sub	sp, #12
 8013e94:	af00      	add	r7, sp, #0
 8013e96:	6078      	str	r0, [r7, #4]
 8013e98:	460b      	mov	r3, r1
 8013e9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8013e9c:	78fb      	ldrb	r3, [r7, #3]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d00c      	beq.n	8013ebc <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8013ea8:	b29b      	uxth	r3, r3
 8013eaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013eae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013eb2:	b29a      	uxth	r2, r3
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8013eba:	e009      	b.n	8013ed0 <TIM_CtrlPWMOutputs+0x40>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8013ec2:	b29b      	uxth	r3, r3
 8013ec4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8013ec8:	b29a      	uxth	r2, r3
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }  
}
 8013ed0:	370c      	adds	r7, #12
 8013ed2:	46bd      	mov	sp, r7
 8013ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ed8:	4770      	bx	lr
 8013eda:	bf00      	nop

08013edc <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8013edc:	b480      	push	{r7}
 8013ede:	b083      	sub	sp, #12
 8013ee0:	af00      	add	r7, sp, #0
 8013ee2:	6078      	str	r0, [r7, #4]
 8013ee4:	460b      	mov	r3, r1
 8013ee6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8013ee8:	78fb      	ldrb	r3, [r7, #3]
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d008      	beq.n	8013f00 <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	889b      	ldrh	r3, [r3, #4]
 8013ef2:	b29b      	uxth	r3, r3
 8013ef4:	f043 0304 	orr.w	r3, r3, #4
 8013ef8:	b29a      	uxth	r2, r3
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	809a      	strh	r2, [r3, #4]
 8013efe:	e007      	b.n	8013f10 <TIM_SelectCOM+0x34>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	889b      	ldrh	r3, [r3, #4]
 8013f04:	b29b      	uxth	r3, r3
 8013f06:	f023 0304 	bic.w	r3, r3, #4
 8013f0a:	b29a      	uxth	r2, r3
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	809a      	strh	r2, [r3, #4]
  }
}
 8013f10:	370c      	adds	r7, #12
 8013f12:	46bd      	mov	sp, r7
 8013f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f18:	4770      	bx	lr
 8013f1a:	bf00      	nop

08013f1c <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
 8013f1c:	b480      	push	{r7}
 8013f1e:	b083      	sub	sp, #12
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	6078      	str	r0, [r7, #4]
 8013f24:	460b      	mov	r3, r1
 8013f26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8013f28:	78fb      	ldrb	r3, [r7, #3]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d008      	beq.n	8013f40 <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	889b      	ldrh	r3, [r3, #4]
 8013f32:	b29b      	uxth	r3, r3
 8013f34:	f043 0301 	orr.w	r3, r3, #1
 8013f38:	b29a      	uxth	r2, r3
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	809a      	strh	r2, [r3, #4]
 8013f3e:	e007      	b.n	8013f50 <TIM_CCPreloadControl+0x34>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	889b      	ldrh	r3, [r3, #4]
 8013f44:	b29b      	uxth	r3, r3
 8013f46:	f023 0301 	bic.w	r3, r3, #1
 8013f4a:	b29a      	uxth	r2, r3
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	809a      	strh	r2, [r3, #4]
  }
}
 8013f50:	370c      	adds	r7, #12
 8013f52:	46bd      	mov	sp, r7
 8013f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f58:	4770      	bx	lr
 8013f5a:	bf00      	nop

08013f5c <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8013f5c:	b480      	push	{r7}
 8013f5e:	b083      	sub	sp, #12
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	6078      	str	r0, [r7, #4]
 8013f64:	4613      	mov	r3, r2
 8013f66:	460a      	mov	r2, r1
 8013f68:	807a      	strh	r2, [r7, #2]
 8013f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8013f6c:	787b      	ldrb	r3, [r7, #1]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d008      	beq.n	8013f84 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	899b      	ldrh	r3, [r3, #12]
 8013f76:	b29a      	uxth	r2, r3
 8013f78:	887b      	ldrh	r3, [r7, #2]
 8013f7a:	4313      	orrs	r3, r2
 8013f7c:	b29a      	uxth	r2, r3
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	819a      	strh	r2, [r3, #12]
 8013f82:	e009      	b.n	8013f98 <TIM_ITConfig+0x3c>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	899b      	ldrh	r3, [r3, #12]
 8013f88:	b29a      	uxth	r2, r3
 8013f8a:	887b      	ldrh	r3, [r7, #2]
 8013f8c:	43db      	mvns	r3, r3
 8013f8e:	b29b      	uxth	r3, r3
 8013f90:	4013      	ands	r3, r2
 8013f92:	b29a      	uxth	r2, r3
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	819a      	strh	r2, [r3, #12]
  }
}
 8013f98:	370c      	adds	r7, #12
 8013f9a:	46bd      	mov	sp, r7
 8013f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fa0:	4770      	bx	lr
 8013fa2:	bf00      	nop

08013fa4 <TIM_GenerateEvent>:
  * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.
  *        
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
 8013fa4:	b480      	push	{r7}
 8013fa6:	b083      	sub	sp, #12
 8013fa8:	af00      	add	r7, sp, #0
 8013faa:	6078      	str	r0, [r7, #4]
 8013fac:	460b      	mov	r3, r1
 8013fae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	887a      	ldrh	r2, [r7, #2]
 8013fb4:	829a      	strh	r2, [r3, #20]
}
 8013fb6:	370c      	adds	r7, #12
 8013fb8:	46bd      	mov	sp, r7
 8013fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fbe:	4770      	bx	lr

08013fc0 <TIM_GetFlagStatus>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
  *
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
 8013fc0:	b480      	push	{r7}
 8013fc2:	b085      	sub	sp, #20
 8013fc4:	af00      	add	r7, sp, #0
 8013fc6:	6078      	str	r0, [r7, #4]
 8013fc8:	460b      	mov	r3, r1
 8013fca:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8013fcc:	2300      	movs	r3, #0
 8013fce:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	8a1b      	ldrh	r3, [r3, #16]
 8013fd4:	b29a      	uxth	r2, r3
 8013fd6:	887b      	ldrh	r3, [r7, #2]
 8013fd8:	4013      	ands	r3, r2
 8013fda:	b29b      	uxth	r3, r3
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d002      	beq.n	8013fe6 <TIM_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8013fe0:	2301      	movs	r3, #1
 8013fe2:	73fb      	strb	r3, [r7, #15]
 8013fe4:	e001      	b.n	8013fea <TIM_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8013fe6:	2300      	movs	r3, #0
 8013fe8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8013fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8013fec:	4618      	mov	r0, r3
 8013fee:	3714      	adds	r7, #20
 8013ff0:	46bd      	mov	sp, r7
 8013ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff6:	4770      	bx	lr

08013ff8 <TIM_ClearFlag>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.
  *    
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 8013ff8:	b480      	push	{r7}
 8013ffa:	b083      	sub	sp, #12
 8013ffc:	af00      	add	r7, sp, #0
 8013ffe:	6078      	str	r0, [r7, #4]
 8014000:	460b      	mov	r3, r1
 8014002:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8014004:	887b      	ldrh	r3, [r7, #2]
 8014006:	43db      	mvns	r3, r3
 8014008:	b29a      	uxth	r2, r3
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	821a      	strh	r2, [r3, #16]
}
 801400e:	370c      	adds	r7, #12
 8014010:	46bd      	mov	sp, r7
 8014012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014016:	4770      	bx	lr

08014018 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8014018:	b480      	push	{r7}
 801401a:	b085      	sub	sp, #20
 801401c:	af00      	add	r7, sp, #0
 801401e:	6078      	str	r0, [r7, #4]
 8014020:	460b      	mov	r3, r1
 8014022:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8014024:	2300      	movs	r3, #0
 8014026:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8014028:	2300      	movs	r3, #0
 801402a:	81bb      	strh	r3, [r7, #12]
 801402c:	2300      	movs	r3, #0
 801402e:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	8a1b      	ldrh	r3, [r3, #16]
 8014034:	b29a      	uxth	r2, r3
 8014036:	887b      	ldrh	r3, [r7, #2]
 8014038:	4013      	ands	r3, r2
 801403a:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	899b      	ldrh	r3, [r3, #12]
 8014040:	b29a      	uxth	r2, r3
 8014042:	887b      	ldrh	r3, [r7, #2]
 8014044:	4013      	ands	r3, r2
 8014046:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8014048:	89bb      	ldrh	r3, [r7, #12]
 801404a:	2b00      	cmp	r3, #0
 801404c:	d005      	beq.n	801405a <TIM_GetITStatus+0x42>
 801404e:	897b      	ldrh	r3, [r7, #10]
 8014050:	2b00      	cmp	r3, #0
 8014052:	d002      	beq.n	801405a <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8014054:	2301      	movs	r3, #1
 8014056:	73fb      	strb	r3, [r7, #15]
 8014058:	e001      	b.n	801405e <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 801405a:	2300      	movs	r3, #0
 801405c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801405e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014060:	4618      	mov	r0, r3
 8014062:	3714      	adds	r7, #20
 8014064:	46bd      	mov	sp, r7
 8014066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801406a:	4770      	bx	lr

0801406c <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 801406c:	b480      	push	{r7}
 801406e:	b083      	sub	sp, #12
 8014070:	af00      	add	r7, sp, #0
 8014072:	6078      	str	r0, [r7, #4]
 8014074:	460b      	mov	r3, r1
 8014076:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8014078:	887b      	ldrh	r3, [r7, #2]
 801407a:	43db      	mvns	r3, r3
 801407c:	b29a      	uxth	r2, r3
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	821a      	strh	r2, [r3, #16]
}
 8014082:	370c      	adds	r7, #12
 8014084:	46bd      	mov	sp, r7
 8014086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801408a:	4770      	bx	lr

0801408c <TIM_DMAConfig>:
  * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
  *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
 801408c:	b480      	push	{r7}
 801408e:	b083      	sub	sp, #12
 8014090:	af00      	add	r7, sp, #0
 8014092:	6078      	str	r0, [r7, #4]
 8014094:	4613      	mov	r3, r2
 8014096:	460a      	mov	r2, r1
 8014098:	807a      	strh	r2, [r7, #2]
 801409a:	803b      	strh	r3, [r7, #0]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 801409c:	887a      	ldrh	r2, [r7, #2]
 801409e:	883b      	ldrh	r3, [r7, #0]
 80140a0:	4313      	orrs	r3, r2
 80140a2:	b29a      	uxth	r2, r3
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 80140aa:	370c      	adds	r7, #12
 80140ac:	46bd      	mov	sp, r7
 80140ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b2:	4770      	bx	lr

080140b4 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 80140b4:	b480      	push	{r7}
 80140b6:	b083      	sub	sp, #12
 80140b8:	af00      	add	r7, sp, #0
 80140ba:	6078      	str	r0, [r7, #4]
 80140bc:	4613      	mov	r3, r2
 80140be:	460a      	mov	r2, r1
 80140c0:	807a      	strh	r2, [r7, #2]
 80140c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80140c4:	787b      	ldrb	r3, [r7, #1]
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d008      	beq.n	80140dc <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	899b      	ldrh	r3, [r3, #12]
 80140ce:	b29a      	uxth	r2, r3
 80140d0:	887b      	ldrh	r3, [r7, #2]
 80140d2:	4313      	orrs	r3, r2
 80140d4:	b29a      	uxth	r2, r3
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	819a      	strh	r2, [r3, #12]
 80140da:	e009      	b.n	80140f0 <TIM_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	899b      	ldrh	r3, [r3, #12]
 80140e0:	b29a      	uxth	r2, r3
 80140e2:	887b      	ldrh	r3, [r7, #2]
 80140e4:	43db      	mvns	r3, r3
 80140e6:	b29b      	uxth	r3, r3
 80140e8:	4013      	ands	r3, r2
 80140ea:	b29a      	uxth	r2, r3
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	819a      	strh	r2, [r3, #12]
  }
}
 80140f0:	370c      	adds	r7, #12
 80140f2:	46bd      	mov	sp, r7
 80140f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140f8:	4770      	bx	lr
 80140fa:	bf00      	nop

080140fc <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80140fc:	b480      	push	{r7}
 80140fe:	b083      	sub	sp, #12
 8014100:	af00      	add	r7, sp, #0
 8014102:	6078      	str	r0, [r7, #4]
 8014104:	460b      	mov	r3, r1
 8014106:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8014108:	78fb      	ldrb	r3, [r7, #3]
 801410a:	2b00      	cmp	r3, #0
 801410c:	d008      	beq.n	8014120 <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	889b      	ldrh	r3, [r3, #4]
 8014112:	b29b      	uxth	r3, r3
 8014114:	f043 0308 	orr.w	r3, r3, #8
 8014118:	b29a      	uxth	r2, r3
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	809a      	strh	r2, [r3, #4]
 801411e:	e007      	b.n	8014130 <TIM_SelectCCDMA+0x34>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	889b      	ldrh	r3, [r3, #4]
 8014124:	b29b      	uxth	r3, r3
 8014126:	f023 0308 	bic.w	r3, r3, #8
 801412a:	b29a      	uxth	r2, r3
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	809a      	strh	r2, [r3, #4]
  }
}
 8014130:	370c      	adds	r7, #12
 8014132:	46bd      	mov	sp, r7
 8014134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014138:	4770      	bx	lr
 801413a:	bf00      	nop

0801413c <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
 801413c:	b480      	push	{r7}
 801413e:	b083      	sub	sp, #12
 8014140:	af00      	add	r7, sp, #0
 8014142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	891b      	ldrh	r3, [r3, #8]
 8014148:	b29b      	uxth	r3, r3
 801414a:	f023 0307 	bic.w	r3, r3, #7
 801414e:	b29a      	uxth	r2, r3
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	811a      	strh	r2, [r3, #8]
}
 8014154:	370c      	adds	r7, #12
 8014156:	46bd      	mov	sp, r7
 8014158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801415c:	4770      	bx	lr
 801415e:	bf00      	nop

08014160 <TIM_ITRxExternalClockConfig>:
  *            @arg TIM_TS_ITR2: Internal Trigger 2
  *            @arg TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8014160:	b580      	push	{r7, lr}
 8014162:	b082      	sub	sp, #8
 8014164:	af00      	add	r7, sp, #0
 8014166:	6078      	str	r0, [r7, #4]
 8014168:	460b      	mov	r3, r1
 801416a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 801416c:	887b      	ldrh	r3, [r7, #2]
 801416e:	6878      	ldr	r0, [r7, #4]
 8014170:	4619      	mov	r1, r3
 8014172:	f000 f875 	bl	8014260 <TIM_SelectInputTrigger>

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	891b      	ldrh	r3, [r3, #8]
 801417a:	b29b      	uxth	r3, r3
 801417c:	f043 0307 	orr.w	r3, r3, #7
 8014180:	b29a      	uxth	r2, r3
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	811a      	strh	r2, [r3, #8]
}
 8014186:	3708      	adds	r7, #8
 8014188:	46bd      	mov	sp, r7
 801418a:	bd80      	pop	{r7, pc}

0801418c <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 801418c:	b580      	push	{r7, lr}
 801418e:	b084      	sub	sp, #16
 8014190:	af00      	add	r7, sp, #0
 8014192:	60f8      	str	r0, [r7, #12]
 8014194:	8179      	strh	r1, [r7, #10]
 8014196:	813a      	strh	r2, [r7, #8]
 8014198:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 801419a:	897b      	ldrh	r3, [r7, #10]
 801419c:	2b60      	cmp	r3, #96	; 0x60
 801419e:	d107      	bne.n	80141b0 <TIM_TIxExternalClockConfig+0x24>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 80141a0:	893a      	ldrh	r2, [r7, #8]
 80141a2:	88fb      	ldrh	r3, [r7, #6]
 80141a4:	68f8      	ldr	r0, [r7, #12]
 80141a6:	4611      	mov	r1, r2
 80141a8:	2201      	movs	r2, #1
 80141aa:	f000 f99f 	bl	80144ec <TI2_Config>
 80141ae:	e006      	b.n	80141be <TIM_TIxExternalClockConfig+0x32>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 80141b0:	893a      	ldrh	r2, [r7, #8]
 80141b2:	88fb      	ldrh	r3, [r7, #6]
 80141b4:	68f8      	ldr	r0, [r7, #12]
 80141b6:	4611      	mov	r1, r2
 80141b8:	2201      	movs	r2, #1
 80141ba:	f000 f95b 	bl	8014474 <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 80141be:	897b      	ldrh	r3, [r7, #10]
 80141c0:	68f8      	ldr	r0, [r7, #12]
 80141c2:	4619      	mov	r1, r3
 80141c4:	f000 f84c 	bl	8014260 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	891b      	ldrh	r3, [r3, #8]
 80141cc:	b29b      	uxth	r3, r3
 80141ce:	f043 0307 	orr.w	r3, r3, #7
 80141d2:	b29a      	uxth	r2, r3
 80141d4:	68fb      	ldr	r3, [r7, #12]
 80141d6:	811a      	strh	r2, [r3, #8]
}
 80141d8:	3710      	adds	r7, #16
 80141da:	46bd      	mov	sp, r7
 80141dc:	bd80      	pop	{r7, pc}
 80141de:	bf00      	nop

080141e0 <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 80141e0:	b580      	push	{r7, lr}
 80141e2:	b086      	sub	sp, #24
 80141e4:	af00      	add	r7, sp, #0
 80141e6:	60f8      	str	r0, [r7, #12]
 80141e8:	8179      	strh	r1, [r7, #10]
 80141ea:	813a      	strh	r2, [r7, #8]
 80141ec:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 80141ee:	2300      	movs	r3, #0
 80141f0:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 80141f2:	8979      	ldrh	r1, [r7, #10]
 80141f4:	893a      	ldrh	r2, [r7, #8]
 80141f6:	88fb      	ldrh	r3, [r7, #6]
 80141f8:	68f8      	ldr	r0, [r7, #12]
 80141fa:	f000 f8a1 	bl	8014340 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	891b      	ldrh	r3, [r3, #8]
 8014202:	82fb      	strh	r3, [r7, #22]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8014204:	8afb      	ldrh	r3, [r7, #22]
 8014206:	f023 0307 	bic.w	r3, r3, #7
 801420a:	82fb      	strh	r3, [r7, #22]

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 801420c:	8afb      	ldrh	r3, [r7, #22]
 801420e:	f043 0307 	orr.w	r3, r3, #7
 8014212:	82fb      	strh	r3, [r7, #22]

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8014214:	8afb      	ldrh	r3, [r7, #22]
 8014216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801421a:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
 801421c:	8afb      	ldrh	r3, [r7, #22]
 801421e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8014222:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	8afa      	ldrh	r2, [r7, #22]
 8014228:	811a      	strh	r2, [r3, #8]
}
 801422a:	3718      	adds	r7, #24
 801422c:	46bd      	mov	sp, r7
 801422e:	bd80      	pop	{r7, pc}

08014230 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8014230:	b580      	push	{r7, lr}
 8014232:	b084      	sub	sp, #16
 8014234:	af00      	add	r7, sp, #0
 8014236:	60f8      	str	r0, [r7, #12]
 8014238:	8179      	strh	r1, [r7, #10]
 801423a:	813a      	strh	r2, [r7, #8]
 801423c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 801423e:	8979      	ldrh	r1, [r7, #10]
 8014240:	893a      	ldrh	r2, [r7, #8]
 8014242:	88fb      	ldrh	r3, [r7, #6]
 8014244:	68f8      	ldr	r0, [r7, #12]
 8014246:	f000 f87b 	bl	8014340 <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	891b      	ldrh	r3, [r3, #8]
 801424e:	b29b      	uxth	r3, r3
 8014250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014254:	b29a      	uxth	r2, r3
 8014256:	68fb      	ldr	r3, [r7, #12]
 8014258:	811a      	strh	r2, [r3, #8]
}
 801425a:	3710      	adds	r7, #16
 801425c:	46bd      	mov	sp, r7
 801425e:	bd80      	pop	{r7, pc}

08014260 <TIM_SelectInputTrigger>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8014260:	b480      	push	{r7}
 8014262:	b085      	sub	sp, #20
 8014264:	af00      	add	r7, sp, #0
 8014266:	6078      	str	r0, [r7, #4]
 8014268:	460b      	mov	r3, r1
 801426a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
 801426c:	2300      	movs	r3, #0
 801426e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	891b      	ldrh	r3, [r3, #8]
 8014274:	81fb      	strh	r3, [r7, #14]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8014276:	89fb      	ldrh	r3, [r7, #14]
 8014278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801427c:	81fb      	strh	r3, [r7, #14]

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 801427e:	89fa      	ldrh	r2, [r7, #14]
 8014280:	887b      	ldrh	r3, [r7, #2]
 8014282:	4313      	orrs	r3, r2
 8014284:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	89fa      	ldrh	r2, [r7, #14]
 801428a:	811a      	strh	r2, [r3, #8]
}
 801428c:	3714      	adds	r7, #20
 801428e:	46bd      	mov	sp, r7
 8014290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014294:	4770      	bx	lr
 8014296:	bf00      	nop

08014298 <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 8014298:	b480      	push	{r7}
 801429a:	b083      	sub	sp, #12
 801429c:	af00      	add	r7, sp, #0
 801429e:	6078      	str	r0, [r7, #4]
 80142a0:	460b      	mov	r3, r1
 80142a2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	889b      	ldrh	r3, [r3, #4]
 80142a8:	b29b      	uxth	r3, r3
 80142aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80142ae:	b29a      	uxth	r2, r3
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	889b      	ldrh	r3, [r3, #4]
 80142b8:	b29a      	uxth	r2, r3
 80142ba:	887b      	ldrh	r3, [r7, #2]
 80142bc:	4313      	orrs	r3, r2
 80142be:	b29a      	uxth	r2, r3
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	809a      	strh	r2, [r3, #4]
}
 80142c4:	370c      	adds	r7, #12
 80142c6:	46bd      	mov	sp, r7
 80142c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142cc:	4770      	bx	lr
 80142ce:	bf00      	nop

080142d0 <TIM_SelectSlaveMode>:
  *            @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI
  *            @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
 80142d0:	b480      	push	{r7}
 80142d2:	b083      	sub	sp, #12
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	6078      	str	r0, [r7, #4]
 80142d8:	460b      	mov	r3, r1
 80142da:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	891b      	ldrh	r3, [r3, #8]
 80142e0:	b29b      	uxth	r3, r3
 80142e2:	f023 0307 	bic.w	r3, r3, #7
 80142e6:	b29a      	uxth	r2, r3
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	811a      	strh	r2, [r3, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	891b      	ldrh	r3, [r3, #8]
 80142f0:	b29a      	uxth	r2, r3
 80142f2:	887b      	ldrh	r3, [r7, #2]
 80142f4:	4313      	orrs	r3, r2
 80142f6:	b29a      	uxth	r2, r3
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	811a      	strh	r2, [r3, #8]
}
 80142fc:	370c      	adds	r7, #12
 80142fe:	46bd      	mov	sp, r7
 8014300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014304:	4770      	bx	lr
 8014306:	bf00      	nop

08014308 <TIM_SelectMasterSlaveMode>:
  *                                             and its slaves (through TRGO)
  *            @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
 8014308:	b480      	push	{r7}
 801430a:	b083      	sub	sp, #12
 801430c:	af00      	add	r7, sp, #0
 801430e:	6078      	str	r0, [r7, #4]
 8014310:	460b      	mov	r3, r1
 8014312:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	891b      	ldrh	r3, [r3, #8]
 8014318:	b29b      	uxth	r3, r3
 801431a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801431e:	b29a      	uxth	r2, r3
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	891b      	ldrh	r3, [r3, #8]
 8014328:	b29a      	uxth	r2, r3
 801432a:	887b      	ldrh	r3, [r7, #2]
 801432c:	4313      	orrs	r3, r2
 801432e:	b29a      	uxth	r2, r3
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	811a      	strh	r2, [r3, #8]
}
 8014334:	370c      	adds	r7, #12
 8014336:	46bd      	mov	sp, r7
 8014338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801433c:	4770      	bx	lr
 801433e:	bf00      	nop

08014340 <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8014340:	b480      	push	{r7}
 8014342:	b087      	sub	sp, #28
 8014344:	af00      	add	r7, sp, #0
 8014346:	60f8      	str	r0, [r7, #12]
 8014348:	8179      	strh	r1, [r7, #10]
 801434a:	813a      	strh	r2, [r7, #8]
 801434c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 801434e:	2300      	movs	r3, #0
 8014350:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	891b      	ldrh	r3, [r3, #8]
 8014356:	82fb      	strh	r3, [r7, #22]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8014358:	8afb      	ldrh	r3, [r7, #22]
 801435a:	b2db      	uxtb	r3, r3
 801435c:	82fb      	strh	r3, [r7, #22]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 801435e:	88fb      	ldrh	r3, [r7, #6]
 8014360:	021b      	lsls	r3, r3, #8
 8014362:	b29a      	uxth	r2, r3
 8014364:	893b      	ldrh	r3, [r7, #8]
 8014366:	4313      	orrs	r3, r2
 8014368:	b29a      	uxth	r2, r3
 801436a:	897b      	ldrh	r3, [r7, #10]
 801436c:	4313      	orrs	r3, r2
 801436e:	b29a      	uxth	r2, r3
 8014370:	8afb      	ldrh	r3, [r7, #22]
 8014372:	4313      	orrs	r3, r2
 8014374:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014376:	68fb      	ldr	r3, [r7, #12]
 8014378:	8afa      	ldrh	r2, [r7, #22]
 801437a:	811a      	strh	r2, [r3, #8]
}
 801437c:	371c      	adds	r7, #28
 801437e:	46bd      	mov	sp, r7
 8014380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014384:	4770      	bx	lr
 8014386:	bf00      	nop

08014388 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8014388:	b480      	push	{r7}
 801438a:	b087      	sub	sp, #28
 801438c:	af00      	add	r7, sp, #0
 801438e:	60f8      	str	r0, [r7, #12]
 8014390:	8179      	strh	r1, [r7, #10]
 8014392:	813a      	strh	r2, [r7, #8]
 8014394:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8014396:	2300      	movs	r3, #0
 8014398:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 801439a:	2300      	movs	r3, #0
 801439c:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 801439e:	2300      	movs	r3, #0
 80143a0:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	891b      	ldrh	r3, [r3, #8]
 80143a6:	82fb      	strh	r3, [r7, #22]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	8b1b      	ldrh	r3, [r3, #24]
 80143ac:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	8c1b      	ldrh	r3, [r3, #32]
 80143b2:	827b      	strh	r3, [r7, #18]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80143b4:	8afb      	ldrh	r3, [r7, #22]
 80143b6:	f023 0307 	bic.w	r3, r3, #7
 80143ba:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 80143bc:	8afa      	ldrh	r2, [r7, #22]
 80143be:	897b      	ldrh	r3, [r7, #10]
 80143c0:	4313      	orrs	r3, r2
 80143c2:	82fb      	strh	r3, [r7, #22]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80143c4:	8abb      	ldrh	r3, [r7, #20]
 80143c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80143ca:	f023 0303 	bic.w	r3, r3, #3
 80143ce:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 80143d0:	8abb      	ldrh	r3, [r7, #20]
 80143d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80143d6:	f043 0301 	orr.w	r3, r3, #1
 80143da:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 80143dc:	8a7b      	ldrh	r3, [r7, #18]
 80143de:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80143e2:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 80143e4:	88fb      	ldrh	r3, [r7, #6]
 80143e6:	011b      	lsls	r3, r3, #4
 80143e8:	b29a      	uxth	r2, r3
 80143ea:	893b      	ldrh	r3, [r7, #8]
 80143ec:	4313      	orrs	r3, r2
 80143ee:	b29a      	uxth	r2, r3
 80143f0:	8a7b      	ldrh	r3, [r7, #18]
 80143f2:	4313      	orrs	r3, r2
 80143f4:	827b      	strh	r3, [r7, #18]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	8afa      	ldrh	r2, [r7, #22]
 80143fa:	811a      	strh	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	8aba      	ldrh	r2, [r7, #20]
 8014400:	831a      	strh	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014402:	68fb      	ldr	r3, [r7, #12]
 8014404:	8a7a      	ldrh	r2, [r7, #18]
 8014406:	841a      	strh	r2, [r3, #32]
}
 8014408:	371c      	adds	r7, #28
 801440a:	46bd      	mov	sp, r7
 801440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014410:	4770      	bx	lr
 8014412:	bf00      	nop

08014414 <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8014414:	b480      	push	{r7}
 8014416:	b083      	sub	sp, #12
 8014418:	af00      	add	r7, sp, #0
 801441a:	6078      	str	r0, [r7, #4]
 801441c:	460b      	mov	r3, r1
 801441e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8014420:	78fb      	ldrb	r3, [r7, #3]
 8014422:	2b00      	cmp	r3, #0
 8014424:	d008      	beq.n	8014438 <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	889b      	ldrh	r3, [r3, #4]
 801442a:	b29b      	uxth	r3, r3
 801442c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014430:	b29a      	uxth	r2, r3
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	809a      	strh	r2, [r3, #4]
 8014436:	e007      	b.n	8014448 <TIM_SelectHallSensor+0x34>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	889b      	ldrh	r3, [r3, #4]
 801443c:	b29b      	uxth	r3, r3
 801443e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014442:	b29a      	uxth	r2, r3
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	809a      	strh	r2, [r3, #4]
  }
}
 8014448:	370c      	adds	r7, #12
 801444a:	46bd      	mov	sp, r7
 801444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014450:	4770      	bx	lr
 8014452:	bf00      	nop

08014454 <TIM_RemapConfig>:
  *            @arg TIM11_HSE:      TIM11 CH4 input is connected to HSE_RTC clock
  *                                 (HSE divided by a programmable prescaler)  
  * @retval None
  */
void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
{
 8014454:	b480      	push	{r7}
 8014456:	b083      	sub	sp, #12
 8014458:	af00      	add	r7, sp, #0
 801445a:	6078      	str	r0, [r7, #4]
 801445c:	460b      	mov	r3, r1
 801445e:	807b      	strh	r3, [r7, #2]
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	887a      	ldrh	r2, [r7, #2]
 8014464:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 8014468:	370c      	adds	r7, #12
 801446a:	46bd      	mov	sp, r7
 801446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014470:	4770      	bx	lr
 8014472:	bf00      	nop

08014474 <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8014474:	b480      	push	{r7}
 8014476:	b087      	sub	sp, #28
 8014478:	af00      	add	r7, sp, #0
 801447a:	60f8      	str	r0, [r7, #12]
 801447c:	8179      	strh	r1, [r7, #10]
 801447e:	813a      	strh	r2, [r7, #8]
 8014480:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 8014482:	2300      	movs	r3, #0
 8014484:	82fb      	strh	r3, [r7, #22]
 8014486:	2300      	movs	r3, #0
 8014488:	82bb      	strh	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	8c1b      	ldrh	r3, [r3, #32]
 801448e:	b29b      	uxth	r3, r3
 8014490:	f023 0301 	bic.w	r3, r3, #1
 8014494:	b29a      	uxth	r2, r3
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801449a:	68fb      	ldr	r3, [r7, #12]
 801449c:	8b1b      	ldrh	r3, [r3, #24]
 801449e:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 80144a0:	68fb      	ldr	r3, [r7, #12]
 80144a2:	8c1b      	ldrh	r3, [r3, #32]
 80144a4:	82bb      	strh	r3, [r7, #20]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 80144a6:	8afb      	ldrh	r3, [r7, #22]
 80144a8:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 80144ac:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80144ae:	88fb      	ldrh	r3, [r7, #6]
 80144b0:	011b      	lsls	r3, r3, #4
 80144b2:	b29a      	uxth	r2, r3
 80144b4:	893b      	ldrh	r3, [r7, #8]
 80144b6:	4313      	orrs	r3, r2
 80144b8:	b29a      	uxth	r2, r3
 80144ba:	8afb      	ldrh	r3, [r7, #22]
 80144bc:	4313      	orrs	r3, r2
 80144be:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80144c0:	8abb      	ldrh	r3, [r7, #20]
 80144c2:	f023 030a 	bic.w	r3, r3, #10
 80144c6:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 80144c8:	897a      	ldrh	r2, [r7, #10]
 80144ca:	8abb      	ldrh	r3, [r7, #20]
 80144cc:	4313      	orrs	r3, r2
 80144ce:	b29b      	uxth	r3, r3
 80144d0:	f043 0301 	orr.w	r3, r3, #1
 80144d4:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	8afa      	ldrh	r2, [r7, #22]
 80144da:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	8aba      	ldrh	r2, [r7, #20]
 80144e0:	841a      	strh	r2, [r3, #32]
}
 80144e2:	371c      	adds	r7, #28
 80144e4:	46bd      	mov	sp, r7
 80144e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ea:	4770      	bx	lr

080144ec <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80144ec:	b480      	push	{r7}
 80144ee:	b087      	sub	sp, #28
 80144f0:	af00      	add	r7, sp, #0
 80144f2:	60f8      	str	r0, [r7, #12]
 80144f4:	8179      	strh	r1, [r7, #10]
 80144f6:	813a      	strh	r2, [r7, #8]
 80144f8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 80144fa:	2300      	movs	r3, #0
 80144fc:	82fb      	strh	r3, [r7, #22]
 80144fe:	2300      	movs	r3, #0
 8014500:	82bb      	strh	r3, [r7, #20]
 8014502:	2300      	movs	r3, #0
 8014504:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	8c1b      	ldrh	r3, [r3, #32]
 801450a:	b29b      	uxth	r3, r3
 801450c:	f023 0310 	bic.w	r3, r3, #16
 8014510:	b29a      	uxth	r2, r3
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	8b1b      	ldrh	r3, [r3, #24]
 801451a:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	8c1b      	ldrh	r3, [r3, #32]
 8014520:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8014522:	897b      	ldrh	r3, [r7, #10]
 8014524:	011b      	lsls	r3, r3, #4
 8014526:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8014528:	8afb      	ldrh	r3, [r7, #22]
 801452a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801452e:	051b      	lsls	r3, r3, #20
 8014530:	0d1b      	lsrs	r3, r3, #20
 8014532:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8014534:	88fb      	ldrh	r3, [r7, #6]
 8014536:	031b      	lsls	r3, r3, #12
 8014538:	b29a      	uxth	r2, r3
 801453a:	8afb      	ldrh	r3, [r7, #22]
 801453c:	4313      	orrs	r3, r2
 801453e:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8014540:	893b      	ldrh	r3, [r7, #8]
 8014542:	021b      	lsls	r3, r3, #8
 8014544:	b29a      	uxth	r2, r3
 8014546:	8afb      	ldrh	r3, [r7, #22]
 8014548:	4313      	orrs	r3, r2
 801454a:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801454c:	8abb      	ldrh	r3, [r7, #20]
 801454e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8014552:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8014554:	8a7a      	ldrh	r2, [r7, #18]
 8014556:	8abb      	ldrh	r3, [r7, #20]
 8014558:	4313      	orrs	r3, r2
 801455a:	b29b      	uxth	r3, r3
 801455c:	f043 0310 	orr.w	r3, r3, #16
 8014560:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	8afa      	ldrh	r2, [r7, #22]
 8014566:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014568:	68fb      	ldr	r3, [r7, #12]
 801456a:	8aba      	ldrh	r2, [r7, #20]
 801456c:	841a      	strh	r2, [r3, #32]
}
 801456e:	371c      	adds	r7, #28
 8014570:	46bd      	mov	sp, r7
 8014572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014576:	4770      	bx	lr

08014578 <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8014578:	b480      	push	{r7}
 801457a:	b087      	sub	sp, #28
 801457c:	af00      	add	r7, sp, #0
 801457e:	60f8      	str	r0, [r7, #12]
 8014580:	8179      	strh	r1, [r7, #10]
 8014582:	813a      	strh	r2, [r7, #8]
 8014584:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8014586:	2300      	movs	r3, #0
 8014588:	82fb      	strh	r3, [r7, #22]
 801458a:	2300      	movs	r3, #0
 801458c:	82bb      	strh	r3, [r7, #20]
 801458e:	2300      	movs	r3, #0
 8014590:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8014592:	68fb      	ldr	r3, [r7, #12]
 8014594:	8c1b      	ldrh	r3, [r3, #32]
 8014596:	b29b      	uxth	r3, r3
 8014598:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801459c:	b29a      	uxth	r2, r3
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	8b9b      	ldrh	r3, [r3, #28]
 80145a6:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 80145a8:	68fb      	ldr	r3, [r7, #12]
 80145aa:	8c1b      	ldrh	r3, [r3, #32]
 80145ac:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 80145ae:	897b      	ldrh	r3, [r7, #10]
 80145b0:	021b      	lsls	r3, r3, #8
 80145b2:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 80145b4:	8afb      	ldrh	r3, [r7, #22]
 80145b6:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 80145ba:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80145bc:	88fb      	ldrh	r3, [r7, #6]
 80145be:	011b      	lsls	r3, r3, #4
 80145c0:	b29a      	uxth	r2, r3
 80145c2:	893b      	ldrh	r3, [r7, #8]
 80145c4:	4313      	orrs	r3, r2
 80145c6:	b29a      	uxth	r2, r3
 80145c8:	8afb      	ldrh	r3, [r7, #22]
 80145ca:	4313      	orrs	r3, r2
 80145cc:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80145ce:	8abb      	ldrh	r3, [r7, #20]
 80145d0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80145d4:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 80145d6:	8a7a      	ldrh	r2, [r7, #18]
 80145d8:	8abb      	ldrh	r3, [r7, #20]
 80145da:	4313      	orrs	r3, r2
 80145dc:	b29b      	uxth	r3, r3
 80145de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80145e2:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	8afa      	ldrh	r2, [r7, #22]
 80145e8:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	8aba      	ldrh	r2, [r7, #20]
 80145ee:	841a      	strh	r2, [r3, #32]
}
 80145f0:	371c      	adds	r7, #28
 80145f2:	46bd      	mov	sp, r7
 80145f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145f8:	4770      	bx	lr
 80145fa:	bf00      	nop

080145fc <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80145fc:	b480      	push	{r7}
 80145fe:	b087      	sub	sp, #28
 8014600:	af00      	add	r7, sp, #0
 8014602:	60f8      	str	r0, [r7, #12]
 8014604:	8179      	strh	r1, [r7, #10]
 8014606:	813a      	strh	r2, [r7, #8]
 8014608:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 801460a:	2300      	movs	r3, #0
 801460c:	82fb      	strh	r3, [r7, #22]
 801460e:	2300      	movs	r3, #0
 8014610:	82bb      	strh	r3, [r7, #20]
 8014612:	2300      	movs	r3, #0
 8014614:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	8c1b      	ldrh	r3, [r3, #32]
 801461a:	b29b      	uxth	r3, r3
 801461c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014620:	b29a      	uxth	r2, r3
 8014622:	68fb      	ldr	r3, [r7, #12]
 8014624:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	8b9b      	ldrh	r3, [r3, #28]
 801462a:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	8c1b      	ldrh	r3, [r3, #32]
 8014630:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8014632:	897b      	ldrh	r3, [r7, #10]
 8014634:	031b      	lsls	r3, r3, #12
 8014636:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8014638:	8afb      	ldrh	r3, [r7, #22]
 801463a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801463e:	051b      	lsls	r3, r3, #20
 8014640:	0d1b      	lsrs	r3, r3, #20
 8014642:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8014644:	893b      	ldrh	r3, [r7, #8]
 8014646:	021b      	lsls	r3, r3, #8
 8014648:	b29a      	uxth	r2, r3
 801464a:	8afb      	ldrh	r3, [r7, #22]
 801464c:	4313      	orrs	r3, r2
 801464e:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8014650:	88fb      	ldrh	r3, [r7, #6]
 8014652:	031b      	lsls	r3, r3, #12
 8014654:	b29a      	uxth	r2, r3
 8014656:	8afb      	ldrh	r3, [r7, #22]
 8014658:	4313      	orrs	r3, r2
 801465a:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 801465c:	8abb      	ldrh	r3, [r7, #20]
 801465e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014662:	045b      	lsls	r3, r3, #17
 8014664:	0c5b      	lsrs	r3, r3, #17
 8014666:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8014668:	8a7a      	ldrh	r2, [r7, #18]
 801466a:	8abb      	ldrh	r3, [r7, #20]
 801466c:	4313      	orrs	r3, r2
 801466e:	b29b      	uxth	r3, r3
 8014670:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8014674:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	8afa      	ldrh	r2, [r7, #22]
 801467a:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	8aba      	ldrh	r2, [r7, #20]
 8014680:	841a      	strh	r2, [r3, #32]
}
 8014682:	371c      	adds	r7, #28
 8014684:	46bd      	mov	sp, r7
 8014686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801468a:	4770      	bx	lr

0801468c <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 801468c:	b580      	push	{r7, lr}
 801468e:	b082      	sub	sp, #8
 8014690:	af00      	add	r7, sp, #0
 8014692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8014694:	687a      	ldr	r2, [r7, #4]
 8014696:	4b3a      	ldr	r3, [pc, #232]	; (8014780 <USART_DeInit+0xf4>)
 8014698:	429a      	cmp	r2, r3
 801469a:	d108      	bne.n	80146ae <USART_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 801469c:	2010      	movs	r0, #16
 801469e:	2101      	movs	r1, #1
 80146a0:	f7fb fbd8 	bl	800fe54 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 80146a4:	2010      	movs	r0, #16
 80146a6:	2100      	movs	r1, #0
 80146a8:	f7fb fbd4 	bl	800fe54 <RCC_APB2PeriphResetCmd>
 80146ac:	e065      	b.n	801477a <USART_DeInit+0xee>
  }
  else if (USARTx == USART2)
 80146ae:	687a      	ldr	r2, [r7, #4]
 80146b0:	4b34      	ldr	r3, [pc, #208]	; (8014784 <USART_DeInit+0xf8>)
 80146b2:	429a      	cmp	r2, r3
 80146b4:	d10a      	bne.n	80146cc <USART_DeInit+0x40>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 80146b6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80146ba:	2101      	movs	r1, #1
 80146bc:	f7fb fbac 	bl	800fe18 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 80146c0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80146c4:	2100      	movs	r1, #0
 80146c6:	f7fb fba7 	bl	800fe18 <RCC_APB1PeriphResetCmd>
 80146ca:	e056      	b.n	801477a <USART_DeInit+0xee>
  }
  else if (USARTx == USART3)
 80146cc:	687a      	ldr	r2, [r7, #4]
 80146ce:	4b2e      	ldr	r3, [pc, #184]	; (8014788 <USART_DeInit+0xfc>)
 80146d0:	429a      	cmp	r2, r3
 80146d2:	d10a      	bne.n	80146ea <USART_DeInit+0x5e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 80146d4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80146d8:	2101      	movs	r1, #1
 80146da:	f7fb fb9d 	bl	800fe18 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 80146de:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80146e2:	2100      	movs	r1, #0
 80146e4:	f7fb fb98 	bl	800fe18 <RCC_APB1PeriphResetCmd>
 80146e8:	e047      	b.n	801477a <USART_DeInit+0xee>
  }    
  else if (USARTx == UART4)
 80146ea:	687a      	ldr	r2, [r7, #4]
 80146ec:	4b27      	ldr	r3, [pc, #156]	; (801478c <USART_DeInit+0x100>)
 80146ee:	429a      	cmp	r2, r3
 80146f0:	d10a      	bne.n	8014708 <USART_DeInit+0x7c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 80146f2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80146f6:	2101      	movs	r1, #1
 80146f8:	f7fb fb8e 	bl	800fe18 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 80146fc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8014700:	2100      	movs	r1, #0
 8014702:	f7fb fb89 	bl	800fe18 <RCC_APB1PeriphResetCmd>
 8014706:	e038      	b.n	801477a <USART_DeInit+0xee>
  }
  else if (USARTx == UART5)
 8014708:	687a      	ldr	r2, [r7, #4]
 801470a:	4b21      	ldr	r3, [pc, #132]	; (8014790 <USART_DeInit+0x104>)
 801470c:	429a      	cmp	r2, r3
 801470e:	d10a      	bne.n	8014726 <USART_DeInit+0x9a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8014710:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8014714:	2101      	movs	r1, #1
 8014716:	f7fb fb7f 	bl	800fe18 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 801471a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 801471e:	2100      	movs	r1, #0
 8014720:	f7fb fb7a 	bl	800fe18 <RCC_APB1PeriphResetCmd>
 8014724:	e029      	b.n	801477a <USART_DeInit+0xee>
  }  
  else if (USARTx == USART6)
 8014726:	687a      	ldr	r2, [r7, #4]
 8014728:	4b1a      	ldr	r3, [pc, #104]	; (8014794 <USART_DeInit+0x108>)
 801472a:	429a      	cmp	r2, r3
 801472c:	d108      	bne.n	8014740 <USART_DeInit+0xb4>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 801472e:	2020      	movs	r0, #32
 8014730:	2101      	movs	r1, #1
 8014732:	f7fb fb8f 	bl	800fe54 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8014736:	2020      	movs	r0, #32
 8014738:	2100      	movs	r1, #0
 801473a:	f7fb fb8b 	bl	800fe54 <RCC_APB2PeriphResetCmd>
 801473e:	e01c      	b.n	801477a <USART_DeInit+0xee>
  }
  else if (USARTx == UART7)
 8014740:	687a      	ldr	r2, [r7, #4]
 8014742:	4b15      	ldr	r3, [pc, #84]	; (8014798 <USART_DeInit+0x10c>)
 8014744:	429a      	cmp	r2, r3
 8014746:	d10a      	bne.n	801475e <USART_DeInit+0xd2>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
 8014748:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 801474c:	2101      	movs	r1, #1
 801474e:	f7fb fb63 	bl	800fe18 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 8014752:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8014756:	2100      	movs	r1, #0
 8014758:	f7fb fb5e 	bl	800fe18 <RCC_APB1PeriphResetCmd>
 801475c:	e00d      	b.n	801477a <USART_DeInit+0xee>
  }     
  else
  {
    if (USARTx == UART8)
 801475e:	687a      	ldr	r2, [r7, #4]
 8014760:	4b0e      	ldr	r3, [pc, #56]	; (801479c <USART_DeInit+0x110>)
 8014762:	429a      	cmp	r2, r3
 8014764:	d109      	bne.n	801477a <USART_DeInit+0xee>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
 8014766:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 801476a:	2101      	movs	r1, #1
 801476c:	f7fb fb54 	bl	800fe18 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 8014770:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8014774:	2100      	movs	r1, #0
 8014776:	f7fb fb4f 	bl	800fe18 <RCC_APB1PeriphResetCmd>
    }
  }
}
 801477a:	3708      	adds	r7, #8
 801477c:	46bd      	mov	sp, r7
 801477e:	bd80      	pop	{r7, pc}
 8014780:	40011000 	.word	0x40011000
 8014784:	40004400 	.word	0x40004400
 8014788:	40004800 	.word	0x40004800
 801478c:	40004c00 	.word	0x40004c00
 8014790:	40005000 	.word	0x40005000
 8014794:	40011400 	.word	0x40011400
 8014798:	40007800 	.word	0x40007800
 801479c:	40007c00 	.word	0x40007c00

080147a0 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80147a0:	b580      	push	{r7, lr}
 80147a2:	b08a      	sub	sp, #40	; 0x28
 80147a4:	af00      	add	r7, sp, #0
 80147a6:	6078      	str	r0, [r7, #4]
 80147a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80147aa:	2300      	movs	r3, #0
 80147ac:	627b      	str	r3, [r7, #36]	; 0x24
 80147ae:	2300      	movs	r3, #0
 80147b0:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80147b2:	2300      	movs	r3, #0
 80147b4:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80147b6:	2300      	movs	r3, #0
 80147b8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	8a1b      	ldrh	r3, [r3, #16]
 80147be:	b29b      	uxth	r3, r3
 80147c0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80147c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80147c8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80147ca:	683b      	ldr	r3, [r7, #0]
 80147cc:	88db      	ldrh	r3, [r3, #6]
 80147ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80147d0:	4313      	orrs	r3, r2
 80147d2:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80147d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147d6:	b29a      	uxth	r2, r3
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	899b      	ldrh	r3, [r3, #12]
 80147e0:	b29b      	uxth	r3, r3
 80147e2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80147e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80147ea:	f023 030c 	bic.w	r3, r3, #12
 80147ee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80147f0:	683b      	ldr	r3, [r7, #0]
 80147f2:	889a      	ldrh	r2, [r3, #4]
 80147f4:	683b      	ldr	r3, [r7, #0]
 80147f6:	891b      	ldrh	r3, [r3, #8]
 80147f8:	4313      	orrs	r3, r2
 80147fa:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80147fc:	683b      	ldr	r3, [r7, #0]
 80147fe:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8014800:	4313      	orrs	r3, r2
 8014802:	b29b      	uxth	r3, r3
 8014804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014806:	4313      	orrs	r3, r2
 8014808:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 801480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801480c:	b29a      	uxth	r2, r3
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	8a9b      	ldrh	r3, [r3, #20]
 8014816:	b29b      	uxth	r3, r3
 8014818:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 801481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801481c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014820:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8014822:	683b      	ldr	r3, [r7, #0]
 8014824:	899b      	ldrh	r3, [r3, #12]
 8014826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014828:	4313      	orrs	r3, r2
 801482a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 801482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801482e:	b29a      	uxth	r2, r3
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8014834:	f107 0308 	add.w	r3, r7, #8
 8014838:	4618      	mov	r0, r3
 801483a:	f7fb f851 	bl	800f8e0 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 801483e:	687a      	ldr	r2, [r7, #4]
 8014840:	4b31      	ldr	r3, [pc, #196]	; (8014908 <USART_Init+0x168>)
 8014842:	429a      	cmp	r2, r3
 8014844:	d003      	beq.n	801484e <USART_Init+0xae>
 8014846:	687a      	ldr	r2, [r7, #4]
 8014848:	4b30      	ldr	r3, [pc, #192]	; (801490c <USART_Init+0x16c>)
 801484a:	429a      	cmp	r2, r3
 801484c:	d102      	bne.n	8014854 <USART_Init+0xb4>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 801484e:	697b      	ldr	r3, [r7, #20]
 8014850:	623b      	str	r3, [r7, #32]
 8014852:	e001      	b.n	8014858 <USART_Init+0xb8>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8014854:	693b      	ldr	r3, [r7, #16]
 8014856:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	899b      	ldrh	r3, [r3, #12]
 801485c:	b29b      	uxth	r3, r3
 801485e:	b29b      	uxth	r3, r3
 8014860:	b21b      	sxth	r3, r3
 8014862:	2b00      	cmp	r3, #0
 8014864:	da0c      	bge.n	8014880 <USART_Init+0xe0>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8014866:	6a3a      	ldr	r2, [r7, #32]
 8014868:	4613      	mov	r3, r2
 801486a:	009b      	lsls	r3, r3, #2
 801486c:	4413      	add	r3, r2
 801486e:	009a      	lsls	r2, r3, #2
 8014870:	441a      	add	r2, r3
 8014872:	683b      	ldr	r3, [r7, #0]
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	005b      	lsls	r3, r3, #1
 8014878:	fbb2 f3f3 	udiv	r3, r2, r3
 801487c:	61fb      	str	r3, [r7, #28]
 801487e:	e00b      	b.n	8014898 <USART_Init+0xf8>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8014880:	6a3a      	ldr	r2, [r7, #32]
 8014882:	4613      	mov	r3, r2
 8014884:	009b      	lsls	r3, r3, #2
 8014886:	4413      	add	r3, r2
 8014888:	009a      	lsls	r2, r3, #2
 801488a:	441a      	add	r2, r3
 801488c:	683b      	ldr	r3, [r7, #0]
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	009b      	lsls	r3, r3, #2
 8014892:	fbb2 f3f3 	udiv	r3, r2, r3
 8014896:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8014898:	69fa      	ldr	r2, [r7, #28]
 801489a:	4b1d      	ldr	r3, [pc, #116]	; (8014910 <USART_Init+0x170>)
 801489c:	fba3 1302 	umull	r1, r3, r3, r2
 80148a0:	095b      	lsrs	r3, r3, #5
 80148a2:	011b      	lsls	r3, r3, #4
 80148a4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80148a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148a8:	091b      	lsrs	r3, r3, #4
 80148aa:	2264      	movs	r2, #100	; 0x64
 80148ac:	fb02 f303 	mul.w	r3, r2, r3
 80148b0:	69fa      	ldr	r2, [r7, #28]
 80148b2:	1ad3      	subs	r3, r2, r3
 80148b4:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	899b      	ldrh	r3, [r3, #12]
 80148ba:	b29b      	uxth	r3, r3
 80148bc:	b29b      	uxth	r3, r3
 80148be:	b21b      	sxth	r3, r3
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	da0d      	bge.n	80148e0 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80148c4:	69bb      	ldr	r3, [r7, #24]
 80148c6:	00db      	lsls	r3, r3, #3
 80148c8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80148cc:	4b10      	ldr	r3, [pc, #64]	; (8014910 <USART_Init+0x170>)
 80148ce:	fba3 1302 	umull	r1, r3, r3, r2
 80148d2:	095b      	lsrs	r3, r3, #5
 80148d4:	f003 0307 	and.w	r3, r3, #7
 80148d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80148da:	4313      	orrs	r3, r2
 80148dc:	627b      	str	r3, [r7, #36]	; 0x24
 80148de:	e00c      	b.n	80148fa <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80148e0:	69bb      	ldr	r3, [r7, #24]
 80148e2:	011b      	lsls	r3, r3, #4
 80148e4:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80148e8:	4b09      	ldr	r3, [pc, #36]	; (8014910 <USART_Init+0x170>)
 80148ea:	fba3 1302 	umull	r1, r3, r3, r2
 80148ee:	095b      	lsrs	r3, r3, #5
 80148f0:	f003 030f 	and.w	r3, r3, #15
 80148f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80148f6:	4313      	orrs	r3, r2
 80148f8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80148fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148fc:	b29a      	uxth	r2, r3
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	811a      	strh	r2, [r3, #8]
}
 8014902:	3728      	adds	r7, #40	; 0x28
 8014904:	46bd      	mov	sp, r7
 8014906:	bd80      	pop	{r7, pc}
 8014908:	40011000 	.word	0x40011000
 801490c:	40011400 	.word	0x40011400
 8014910:	51eb851f 	.word	0x51eb851f

08014914 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 8014914:	b480      	push	{r7}
 8014916:	b083      	sub	sp, #12
 8014918:	af00      	add	r7, sp, #0
 801491a:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8014922:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	2200      	movs	r2, #0
 8014928:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	2200      	movs	r2, #0
 801492e:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	2200      	movs	r2, #0
 8014934:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	220c      	movs	r2, #12
 801493a:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	2200      	movs	r2, #0
 8014940:	819a      	strh	r2, [r3, #12]
}
 8014942:	370c      	adds	r7, #12
 8014944:	46bd      	mov	sp, r7
 8014946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801494a:	4770      	bx	lr

0801494c <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 801494c:	b480      	push	{r7}
 801494e:	b085      	sub	sp, #20
 8014950:	af00      	add	r7, sp, #0
 8014952:	6078      	str	r0, [r7, #4]
 8014954:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
 8014956:	2300      	movs	r3, #0
 8014958:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	8a1b      	ldrh	r3, [r3, #16]
 801495e:	b29b      	uxth	r3, r3
 8014960:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8014968:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 801496a:	683b      	ldr	r3, [r7, #0]
 801496c:	881a      	ldrh	r2, [r3, #0]
 801496e:	683b      	ldr	r3, [r7, #0]
 8014970:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8014972:	4313      	orrs	r3, r2
 8014974:	b29a      	uxth	r2, r3
 8014976:	683b      	ldr	r3, [r7, #0]
 8014978:	889b      	ldrh	r3, [r3, #4]
 801497a:	4313      	orrs	r3, r2
 801497c:	b29a      	uxth	r2, r3
 801497e:	683b      	ldr	r3, [r7, #0]
 8014980:	88db      	ldrh	r3, [r3, #6]
 8014982:	4313      	orrs	r3, r2
 8014984:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8014986:	68fa      	ldr	r2, [r7, #12]
 8014988:	4313      	orrs	r3, r2
 801498a:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 801498c:	68fb      	ldr	r3, [r7, #12]
 801498e:	b29a      	uxth	r2, r3
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	821a      	strh	r2, [r3, #16]
}
 8014994:	3714      	adds	r7, #20
 8014996:	46bd      	mov	sp, r7
 8014998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801499c:	4770      	bx	lr
 801499e:	bf00      	nop

080149a0 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 80149a0:	b480      	push	{r7}
 80149a2:	b083      	sub	sp, #12
 80149a4:	af00      	add	r7, sp, #0
 80149a6:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	2200      	movs	r2, #0
 80149ac:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	2200      	movs	r2, #0
 80149b2:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	2200      	movs	r2, #0
 80149b8:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	2200      	movs	r2, #0
 80149be:	80da      	strh	r2, [r3, #6]
}
 80149c0:	370c      	adds	r7, #12
 80149c2:	46bd      	mov	sp, r7
 80149c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149c8:	4770      	bx	lr
 80149ca:	bf00      	nop

080149cc <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80149cc:	b480      	push	{r7}
 80149ce:	b083      	sub	sp, #12
 80149d0:	af00      	add	r7, sp, #0
 80149d2:	6078      	str	r0, [r7, #4]
 80149d4:	460b      	mov	r3, r1
 80149d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80149d8:	78fb      	ldrb	r3, [r7, #3]
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d008      	beq.n	80149f0 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	899b      	ldrh	r3, [r3, #12]
 80149e2:	b29b      	uxth	r3, r3
 80149e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80149e8:	b29a      	uxth	r2, r3
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	819a      	strh	r2, [r3, #12]
 80149ee:	e007      	b.n	8014a00 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	899b      	ldrh	r3, [r3, #12]
 80149f4:	b29b      	uxth	r3, r3
 80149f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80149fa:	b29a      	uxth	r2, r3
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	819a      	strh	r2, [r3, #12]
  }
}
 8014a00:	370c      	adds	r7, #12
 8014a02:	46bd      	mov	sp, r7
 8014a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a08:	4770      	bx	lr
 8014a0a:	bf00      	nop

08014a0c <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock. 
  * @note   The function is used for IrDA mode with UART4 and UART5.   
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
 8014a0c:	b480      	push	{r7}
 8014a0e:	b083      	sub	sp, #12
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	6078      	str	r0, [r7, #4]
 8014a14:	460b      	mov	r3, r1
 8014a16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	8b1b      	ldrh	r3, [r3, #24]
 8014a1c:	b29b      	uxth	r3, r3
 8014a1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8014a22:	b29a      	uxth	r2, r3
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	8b1b      	ldrh	r3, [r3, #24]
 8014a2c:	b29a      	uxth	r2, r3
 8014a2e:	78fb      	ldrb	r3, [r7, #3]
 8014a30:	b29b      	uxth	r3, r3
 8014a32:	4313      	orrs	r3, r2
 8014a34:	b29a      	uxth	r2, r3
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	831a      	strh	r2, [r3, #24]
}
 8014a3a:	370c      	adds	r7, #12
 8014a3c:	46bd      	mov	sp, r7
 8014a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a42:	4770      	bx	lr

08014a44 <USART_OverSampling8Cmd>:
  * @param  NewState: new state of the USART 8x oversampling mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8014a44:	b480      	push	{r7}
 8014a46:	b083      	sub	sp, #12
 8014a48:	af00      	add	r7, sp, #0
 8014a4a:	6078      	str	r0, [r7, #4]
 8014a4c:	460b      	mov	r3, r1
 8014a4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8014a50:	78fb      	ldrb	r3, [r7, #3]
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d00a      	beq.n	8014a6c <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	899b      	ldrh	r3, [r3, #12]
 8014a5a:	b29b      	uxth	r3, r3
 8014a5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014a60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014a64:	b29a      	uxth	r2, r3
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	819a      	strh	r2, [r3, #12]
 8014a6a:	e007      	b.n	8014a7c <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	899b      	ldrh	r3, [r3, #12]
 8014a70:	b29b      	uxth	r3, r3
 8014a72:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8014a76:	b29a      	uxth	r2, r3
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	819a      	strh	r2, [r3, #12]
  }
}  
 8014a7c:	370c      	adds	r7, #12
 8014a7e:	46bd      	mov	sp, r7
 8014a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a84:	4770      	bx	lr
 8014a86:	bf00      	nop

08014a88 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8014a88:	b480      	push	{r7}
 8014a8a:	b083      	sub	sp, #12
 8014a8c:	af00      	add	r7, sp, #0
 8014a8e:	6078      	str	r0, [r7, #4]
 8014a90:	460b      	mov	r3, r1
 8014a92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8014a94:	78fb      	ldrb	r3, [r7, #3]
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d008      	beq.n	8014aac <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	8a9b      	ldrh	r3, [r3, #20]
 8014a9e:	b29b      	uxth	r3, r3
 8014aa0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014aa4:	b29a      	uxth	r2, r3
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	829a      	strh	r2, [r3, #20]
 8014aaa:	e007      	b.n	8014abc <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	8a9b      	ldrh	r3, [r3, #20]
 8014ab0:	b29b      	uxth	r3, r3
 8014ab2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014ab6:	b29a      	uxth	r2, r3
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	829a      	strh	r2, [r3, #20]
  }
}
 8014abc:	370c      	adds	r7, #12
 8014abe:	46bd      	mov	sp, r7
 8014ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac4:	4770      	bx	lr
 8014ac6:	bf00      	nop

08014ac8 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8014ac8:	b480      	push	{r7}
 8014aca:	b083      	sub	sp, #12
 8014acc:	af00      	add	r7, sp, #0
 8014ace:	6078      	str	r0, [r7, #4]
 8014ad0:	460b      	mov	r3, r1
 8014ad2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8014ad4:	887b      	ldrh	r3, [r7, #2]
 8014ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014ada:	b29a      	uxth	r2, r3
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	809a      	strh	r2, [r3, #4]
}
 8014ae0:	370c      	adds	r7, #12
 8014ae2:	46bd      	mov	sp, r7
 8014ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ae8:	4770      	bx	lr
 8014aea:	bf00      	nop

08014aec <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8014aec:	b480      	push	{r7}
 8014aee:	b083      	sub	sp, #12
 8014af0:	af00      	add	r7, sp, #0
 8014af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	889b      	ldrh	r3, [r3, #4]
 8014af8:	b29b      	uxth	r3, r3
 8014afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014afe:	b29b      	uxth	r3, r3
}
 8014b00:	4618      	mov	r0, r3
 8014b02:	370c      	adds	r7, #12
 8014b04:	46bd      	mov	sp, r7
 8014b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b0a:	4770      	bx	lr

08014b0c <USART_SetAddress>:
  *         UART peripheral.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
 8014b0c:	b480      	push	{r7}
 8014b0e:	b083      	sub	sp, #12
 8014b10:	af00      	add	r7, sp, #0
 8014b12:	6078      	str	r0, [r7, #4]
 8014b14:	460b      	mov	r3, r1
 8014b16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	8a1b      	ldrh	r3, [r3, #16]
 8014b1c:	b29b      	uxth	r3, r3
 8014b1e:	f023 030f 	bic.w	r3, r3, #15
 8014b22:	b29a      	uxth	r2, r3
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	8a1b      	ldrh	r3, [r3, #16]
 8014b2c:	b29a      	uxth	r2, r3
 8014b2e:	78fb      	ldrb	r3, [r7, #3]
 8014b30:	b29b      	uxth	r3, r3
 8014b32:	4313      	orrs	r3, r2
 8014b34:	b29a      	uxth	r2, r3
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	821a      	strh	r2, [r3, #16]
}
 8014b3a:	370c      	adds	r7, #12
 8014b3c:	46bd      	mov	sp, r7
 8014b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b42:	4770      	bx	lr

08014b44 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8014b44:	b480      	push	{r7}
 8014b46:	b083      	sub	sp, #12
 8014b48:	af00      	add	r7, sp, #0
 8014b4a:	6078      	str	r0, [r7, #4]
 8014b4c:	460b      	mov	r3, r1
 8014b4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8014b50:	78fb      	ldrb	r3, [r7, #3]
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d008      	beq.n	8014b68 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	899b      	ldrh	r3, [r3, #12]
 8014b5a:	b29b      	uxth	r3, r3
 8014b5c:	f043 0302 	orr.w	r3, r3, #2
 8014b60:	b29a      	uxth	r2, r3
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	819a      	strh	r2, [r3, #12]
 8014b66:	e007      	b.n	8014b78 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	899b      	ldrh	r3, [r3, #12]
 8014b6c:	b29b      	uxth	r3, r3
 8014b6e:	f023 0302 	bic.w	r3, r3, #2
 8014b72:	b29a      	uxth	r2, r3
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	819a      	strh	r2, [r3, #12]
  }
}
 8014b78:	370c      	adds	r7, #12
 8014b7a:	46bd      	mov	sp, r7
 8014b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b80:	4770      	bx	lr
 8014b82:	bf00      	nop

08014b84 <USART_WakeUpConfig>:
  *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
 8014b84:	b480      	push	{r7}
 8014b86:	b083      	sub	sp, #12
 8014b88:	af00      	add	r7, sp, #0
 8014b8a:	6078      	str	r0, [r7, #4]
 8014b8c:	460b      	mov	r3, r1
 8014b8e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	899b      	ldrh	r3, [r3, #12]
 8014b94:	b29b      	uxth	r3, r3
 8014b96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014b9a:	b29a      	uxth	r2, r3
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	899b      	ldrh	r3, [r3, #12]
 8014ba4:	b29a      	uxth	r2, r3
 8014ba6:	887b      	ldrh	r3, [r7, #2]
 8014ba8:	4313      	orrs	r3, r2
 8014baa:	b29a      	uxth	r2, r3
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	819a      	strh	r2, [r3, #12]
}
 8014bb0:	370c      	adds	r7, #12
 8014bb2:	46bd      	mov	sp, r7
 8014bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bb8:	4770      	bx	lr
 8014bba:	bf00      	nop

08014bbc <USART_LINBreakDetectLengthConfig>:
  *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
 8014bbc:	b480      	push	{r7}
 8014bbe:	b083      	sub	sp, #12
 8014bc0:	af00      	add	r7, sp, #0
 8014bc2:	6078      	str	r0, [r7, #4]
 8014bc4:	460b      	mov	r3, r1
 8014bc6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	8a1b      	ldrh	r3, [r3, #16]
 8014bcc:	b29b      	uxth	r3, r3
 8014bce:	f023 0320 	bic.w	r3, r3, #32
 8014bd2:	b29a      	uxth	r2, r3
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	8a1b      	ldrh	r3, [r3, #16]
 8014bdc:	b29a      	uxth	r2, r3
 8014bde:	887b      	ldrh	r3, [r7, #2]
 8014be0:	4313      	orrs	r3, r2
 8014be2:	b29a      	uxth	r2, r3
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	821a      	strh	r2, [r3, #16]
}
 8014be8:	370c      	adds	r7, #12
 8014bea:	46bd      	mov	sp, r7
 8014bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bf0:	4770      	bx	lr
 8014bf2:	bf00      	nop

08014bf4 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8014bf4:	b480      	push	{r7}
 8014bf6:	b083      	sub	sp, #12
 8014bf8:	af00      	add	r7, sp, #0
 8014bfa:	6078      	str	r0, [r7, #4]
 8014bfc:	460b      	mov	r3, r1
 8014bfe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8014c00:	78fb      	ldrb	r3, [r7, #3]
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d008      	beq.n	8014c18 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	8a1b      	ldrh	r3, [r3, #16]
 8014c0a:	b29b      	uxth	r3, r3
 8014c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014c10:	b29a      	uxth	r2, r3
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	821a      	strh	r2, [r3, #16]
 8014c16:	e007      	b.n	8014c28 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	8a1b      	ldrh	r3, [r3, #16]
 8014c1c:	b29b      	uxth	r3, r3
 8014c1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014c22:	b29a      	uxth	r2, r3
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	821a      	strh	r2, [r3, #16]
  }
}
 8014c28:	370c      	adds	r7, #12
 8014c2a:	46bd      	mov	sp, r7
 8014c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c30:	4770      	bx	lr
 8014c32:	bf00      	nop

08014c34 <USART_SendBreak>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
 8014c34:	b480      	push	{r7}
 8014c36:	b083      	sub	sp, #12
 8014c38:	af00      	add	r7, sp, #0
 8014c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	899b      	ldrh	r3, [r3, #12]
 8014c40:	b29b      	uxth	r3, r3
 8014c42:	f043 0301 	orr.w	r3, r3, #1
 8014c46:	b29a      	uxth	r2, r3
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	819a      	strh	r2, [r3, #12]
}
 8014c4c:	370c      	adds	r7, #12
 8014c4e:	46bd      	mov	sp, r7
 8014c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c54:	4770      	bx	lr
 8014c56:	bf00      	nop

08014c58 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8014c58:	b480      	push	{r7}
 8014c5a:	b083      	sub	sp, #12
 8014c5c:	af00      	add	r7, sp, #0
 8014c5e:	6078      	str	r0, [r7, #4]
 8014c60:	460b      	mov	r3, r1
 8014c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8014c64:	78fb      	ldrb	r3, [r7, #3]
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d008      	beq.n	8014c7c <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	8a9b      	ldrh	r3, [r3, #20]
 8014c6e:	b29b      	uxth	r3, r3
 8014c70:	f043 0308 	orr.w	r3, r3, #8
 8014c74:	b29a      	uxth	r2, r3
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	829a      	strh	r2, [r3, #20]
 8014c7a:	e007      	b.n	8014c8c <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	8a9b      	ldrh	r3, [r3, #20]
 8014c80:	b29b      	uxth	r3, r3
 8014c82:	f023 0308 	bic.w	r3, r3, #8
 8014c86:	b29a      	uxth	r2, r3
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	829a      	strh	r2, [r3, #20]
  }
}
 8014c8c:	370c      	adds	r7, #12
 8014c8e:	46bd      	mov	sp, r7
 8014c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c94:	4770      	bx	lr
 8014c96:	bf00      	nop

08014c98 <USART_SetGuardTime>:
  *         UART peripheral.
  * @param  USART_GuardTime: specifies the guard time.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
 8014c98:	b480      	push	{r7}
 8014c9a:	b083      	sub	sp, #12
 8014c9c:	af00      	add	r7, sp, #0
 8014c9e:	6078      	str	r0, [r7, #4]
 8014ca0:	460b      	mov	r3, r1
 8014ca2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	8b1b      	ldrh	r3, [r3, #24]
 8014ca8:	b29b      	uxth	r3, r3
 8014caa:	b2db      	uxtb	r3, r3
 8014cac:	b29a      	uxth	r2, r3
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	8b1b      	ldrh	r3, [r3, #24]
 8014cb6:	b29a      	uxth	r2, r3
 8014cb8:	78fb      	ldrb	r3, [r7, #3]
 8014cba:	b29b      	uxth	r3, r3
 8014cbc:	021b      	lsls	r3, r3, #8
 8014cbe:	b29b      	uxth	r3, r3
 8014cc0:	4313      	orrs	r3, r2
 8014cc2:	b29a      	uxth	r2, r3
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	831a      	strh	r2, [r3, #24]
}
 8014cc8:	370c      	adds	r7, #12
 8014cca:	46bd      	mov	sp, r7
 8014ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cd0:	4770      	bx	lr
 8014cd2:	bf00      	nop

08014cd4 <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8014cd4:	b480      	push	{r7}
 8014cd6:	b083      	sub	sp, #12
 8014cd8:	af00      	add	r7, sp, #0
 8014cda:	6078      	str	r0, [r7, #4]
 8014cdc:	460b      	mov	r3, r1
 8014cde:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8014ce0:	78fb      	ldrb	r3, [r7, #3]
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d008      	beq.n	8014cf8 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	8a9b      	ldrh	r3, [r3, #20]
 8014cea:	b29b      	uxth	r3, r3
 8014cec:	f043 0320 	orr.w	r3, r3, #32
 8014cf0:	b29a      	uxth	r2, r3
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	829a      	strh	r2, [r3, #20]
 8014cf6:	e007      	b.n	8014d08 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	8a9b      	ldrh	r3, [r3, #20]
 8014cfc:	b29b      	uxth	r3, r3
 8014cfe:	f023 0320 	bic.w	r3, r3, #32
 8014d02:	b29a      	uxth	r2, r3
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	829a      	strh	r2, [r3, #20]
  }
}
 8014d08:	370c      	adds	r7, #12
 8014d0a:	46bd      	mov	sp, r7
 8014d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d10:	4770      	bx	lr
 8014d12:	bf00      	nop

08014d14 <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8014d14:	b480      	push	{r7}
 8014d16:	b083      	sub	sp, #12
 8014d18:	af00      	add	r7, sp, #0
 8014d1a:	6078      	str	r0, [r7, #4]
 8014d1c:	460b      	mov	r3, r1
 8014d1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8014d20:	78fb      	ldrb	r3, [r7, #3]
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d008      	beq.n	8014d38 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	8a9b      	ldrh	r3, [r3, #20]
 8014d2a:	b29b      	uxth	r3, r3
 8014d2c:	f043 0310 	orr.w	r3, r3, #16
 8014d30:	b29a      	uxth	r2, r3
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	829a      	strh	r2, [r3, #20]
 8014d36:	e007      	b.n	8014d48 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	8a9b      	ldrh	r3, [r3, #20]
 8014d3c:	b29b      	uxth	r3, r3
 8014d3e:	f023 0310 	bic.w	r3, r3, #16
 8014d42:	b29a      	uxth	r2, r3
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	829a      	strh	r2, [r3, #20]
  }
}
 8014d48:	370c      	adds	r7, #12
 8014d4a:	46bd      	mov	sp, r7
 8014d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d50:	4770      	bx	lr
 8014d52:	bf00      	nop

08014d54 <USART_IrDAConfig>:
  *            @arg USART_IrDAMode_LowPower
  *            @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
 8014d54:	b480      	push	{r7}
 8014d56:	b083      	sub	sp, #12
 8014d58:	af00      	add	r7, sp, #0
 8014d5a:	6078      	str	r0, [r7, #4]
 8014d5c:	460b      	mov	r3, r1
 8014d5e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	8a9b      	ldrh	r3, [r3, #20]
 8014d64:	b29b      	uxth	r3, r3
 8014d66:	f023 0304 	bic.w	r3, r3, #4
 8014d6a:	b29a      	uxth	r2, r3
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	8a9b      	ldrh	r3, [r3, #20]
 8014d74:	b29a      	uxth	r2, r3
 8014d76:	887b      	ldrh	r3, [r7, #2]
 8014d78:	4313      	orrs	r3, r2
 8014d7a:	b29a      	uxth	r2, r3
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	829a      	strh	r2, [r3, #20]
}
 8014d80:	370c      	adds	r7, #12
 8014d82:	46bd      	mov	sp, r7
 8014d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d88:	4770      	bx	lr
 8014d8a:	bf00      	nop

08014d8c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8014d8c:	b480      	push	{r7}
 8014d8e:	b083      	sub	sp, #12
 8014d90:	af00      	add	r7, sp, #0
 8014d92:	6078      	str	r0, [r7, #4]
 8014d94:	460b      	mov	r3, r1
 8014d96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8014d98:	78fb      	ldrb	r3, [r7, #3]
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d008      	beq.n	8014db0 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	8a9b      	ldrh	r3, [r3, #20]
 8014da2:	b29b      	uxth	r3, r3
 8014da4:	f043 0302 	orr.w	r3, r3, #2
 8014da8:	b29a      	uxth	r2, r3
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	829a      	strh	r2, [r3, #20]
 8014dae:	e007      	b.n	8014dc0 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	8a9b      	ldrh	r3, [r3, #20]
 8014db4:	b29b      	uxth	r3, r3
 8014db6:	f023 0302 	bic.w	r3, r3, #2
 8014dba:	b29a      	uxth	r2, r3
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	829a      	strh	r2, [r3, #20]
  }
}
 8014dc0:	370c      	adds	r7, #12
 8014dc2:	46bd      	mov	sp, r7
 8014dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dc8:	4770      	bx	lr
 8014dca:	bf00      	nop

08014dcc <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 8014dcc:	b480      	push	{r7}
 8014dce:	b083      	sub	sp, #12
 8014dd0:	af00      	add	r7, sp, #0
 8014dd2:	6078      	str	r0, [r7, #4]
 8014dd4:	4613      	mov	r3, r2
 8014dd6:	460a      	mov	r2, r1
 8014dd8:	807a      	strh	r2, [r7, #2]
 8014dda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8014ddc:	787b      	ldrb	r3, [r7, #1]
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d008      	beq.n	8014df4 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	8a9b      	ldrh	r3, [r3, #20]
 8014de6:	b29a      	uxth	r2, r3
 8014de8:	887b      	ldrh	r3, [r7, #2]
 8014dea:	4313      	orrs	r3, r2
 8014dec:	b29a      	uxth	r2, r3
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	829a      	strh	r2, [r3, #20]
 8014df2:	e009      	b.n	8014e08 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	8a9b      	ldrh	r3, [r3, #20]
 8014df8:	b29a      	uxth	r2, r3
 8014dfa:	887b      	ldrh	r3, [r7, #2]
 8014dfc:	43db      	mvns	r3, r3
 8014dfe:	b29b      	uxth	r3, r3
 8014e00:	4013      	ands	r3, r2
 8014e02:	b29a      	uxth	r2, r3
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	829a      	strh	r2, [r3, #20]
  }
}
 8014e08:	370c      	adds	r7, #12
 8014e0a:	46bd      	mov	sp, r7
 8014e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e10:	4770      	bx	lr
 8014e12:	bf00      	nop

08014e14 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8014e14:	b480      	push	{r7}
 8014e16:	b087      	sub	sp, #28
 8014e18:	af00      	add	r7, sp, #0
 8014e1a:	6078      	str	r0, [r7, #4]
 8014e1c:	4613      	mov	r3, r2
 8014e1e:	460a      	mov	r2, r1
 8014e20:	807a      	strh	r2, [r7, #2]
 8014e22:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8014e24:	2300      	movs	r3, #0
 8014e26:	613b      	str	r3, [r7, #16]
 8014e28:	2300      	movs	r3, #0
 8014e2a:	60fb      	str	r3, [r7, #12]
 8014e2c:	2300      	movs	r3, #0
 8014e2e:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8014e30:	2300      	movs	r3, #0
 8014e32:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8014e38:	887b      	ldrh	r3, [r7, #2]
 8014e3a:	b2db      	uxtb	r3, r3
 8014e3c:	095b      	lsrs	r3, r3, #5
 8014e3e:	b2db      	uxtb	r3, r3
 8014e40:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8014e42:	887b      	ldrh	r3, [r7, #2]
 8014e44:	f003 031f 	and.w	r3, r3, #31
 8014e48:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8014e4a:	68fb      	ldr	r3, [r7, #12]
 8014e4c:	2201      	movs	r2, #1
 8014e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8014e52:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8014e54:	693b      	ldr	r3, [r7, #16]
 8014e56:	2b01      	cmp	r3, #1
 8014e58:	d103      	bne.n	8014e62 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8014e5a:	697b      	ldr	r3, [r7, #20]
 8014e5c:	330c      	adds	r3, #12
 8014e5e:	617b      	str	r3, [r7, #20]
 8014e60:	e009      	b.n	8014e76 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8014e62:	693b      	ldr	r3, [r7, #16]
 8014e64:	2b02      	cmp	r3, #2
 8014e66:	d103      	bne.n	8014e70 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8014e68:	697b      	ldr	r3, [r7, #20]
 8014e6a:	3310      	adds	r3, #16
 8014e6c:	617b      	str	r3, [r7, #20]
 8014e6e:	e002      	b.n	8014e76 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8014e70:	697b      	ldr	r3, [r7, #20]
 8014e72:	3314      	adds	r3, #20
 8014e74:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8014e76:	787b      	ldrb	r3, [r7, #1]
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d006      	beq.n	8014e8a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8014e7c:	697b      	ldr	r3, [r7, #20]
 8014e7e:	697a      	ldr	r2, [r7, #20]
 8014e80:	6811      	ldr	r1, [r2, #0]
 8014e82:	68ba      	ldr	r2, [r7, #8]
 8014e84:	430a      	orrs	r2, r1
 8014e86:	601a      	str	r2, [r3, #0]
 8014e88:	e006      	b.n	8014e98 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8014e8a:	697b      	ldr	r3, [r7, #20]
 8014e8c:	697a      	ldr	r2, [r7, #20]
 8014e8e:	6811      	ldr	r1, [r2, #0]
 8014e90:	68ba      	ldr	r2, [r7, #8]
 8014e92:	43d2      	mvns	r2, r2
 8014e94:	400a      	ands	r2, r1
 8014e96:	601a      	str	r2, [r3, #0]
  }
}
 8014e98:	371c      	adds	r7, #28
 8014e9a:	46bd      	mov	sp, r7
 8014e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ea0:	4770      	bx	lr
 8014ea2:	bf00      	nop

08014ea4 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8014ea4:	b480      	push	{r7}
 8014ea6:	b085      	sub	sp, #20
 8014ea8:	af00      	add	r7, sp, #0
 8014eaa:	6078      	str	r0, [r7, #4]
 8014eac:	460b      	mov	r3, r1
 8014eae:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8014eb0:	2300      	movs	r3, #0
 8014eb2:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	881b      	ldrh	r3, [r3, #0]
 8014eb8:	b29a      	uxth	r2, r3
 8014eba:	887b      	ldrh	r3, [r7, #2]
 8014ebc:	4013      	ands	r3, r2
 8014ebe:	b29b      	uxth	r3, r3
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d002      	beq.n	8014eca <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8014ec4:	2301      	movs	r3, #1
 8014ec6:	73fb      	strb	r3, [r7, #15]
 8014ec8:	e001      	b.n	8014ece <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8014eca:	2300      	movs	r3, #0
 8014ecc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8014ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ed0:	4618      	mov	r0, r3
 8014ed2:	3714      	adds	r7, #20
 8014ed4:	46bd      	mov	sp, r7
 8014ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eda:	4770      	bx	lr

08014edc <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8014edc:	b480      	push	{r7}
 8014ede:	b083      	sub	sp, #12
 8014ee0:	af00      	add	r7, sp, #0
 8014ee2:	6078      	str	r0, [r7, #4]
 8014ee4:	460b      	mov	r3, r1
 8014ee6:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8014ee8:	887b      	ldrh	r3, [r7, #2]
 8014eea:	43db      	mvns	r3, r3
 8014eec:	b29a      	uxth	r2, r3
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	801a      	strh	r2, [r3, #0]
}
 8014ef2:	370c      	adds	r7, #12
 8014ef4:	46bd      	mov	sp, r7
 8014ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014efa:	4770      	bx	lr

08014efc <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8014efc:	b480      	push	{r7}
 8014efe:	b087      	sub	sp, #28
 8014f00:	af00      	add	r7, sp, #0
 8014f02:	6078      	str	r0, [r7, #4]
 8014f04:	460b      	mov	r3, r1
 8014f06:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8014f08:	2300      	movs	r3, #0
 8014f0a:	60fb      	str	r3, [r7, #12]
 8014f0c:	2300      	movs	r3, #0
 8014f0e:	617b      	str	r3, [r7, #20]
 8014f10:	2300      	movs	r3, #0
 8014f12:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8014f14:	2300      	movs	r3, #0
 8014f16:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8014f18:	887b      	ldrh	r3, [r7, #2]
 8014f1a:	b2db      	uxtb	r3, r3
 8014f1c:	095b      	lsrs	r3, r3, #5
 8014f1e:	b2db      	uxtb	r3, r3
 8014f20:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8014f22:	887b      	ldrh	r3, [r7, #2]
 8014f24:	f003 031f 	and.w	r3, r3, #31
 8014f28:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8014f2a:	697b      	ldr	r3, [r7, #20]
 8014f2c:	2201      	movs	r2, #1
 8014f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8014f32:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8014f34:	68bb      	ldr	r3, [r7, #8]
 8014f36:	2b01      	cmp	r3, #1
 8014f38:	d106      	bne.n	8014f48 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	899b      	ldrh	r3, [r3, #12]
 8014f3e:	b29b      	uxth	r3, r3
 8014f40:	697a      	ldr	r2, [r7, #20]
 8014f42:	4013      	ands	r3, r2
 8014f44:	617b      	str	r3, [r7, #20]
 8014f46:	e00f      	b.n	8014f68 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8014f48:	68bb      	ldr	r3, [r7, #8]
 8014f4a:	2b02      	cmp	r3, #2
 8014f4c:	d106      	bne.n	8014f5c <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	8a1b      	ldrh	r3, [r3, #16]
 8014f52:	b29b      	uxth	r3, r3
 8014f54:	697a      	ldr	r2, [r7, #20]
 8014f56:	4013      	ands	r3, r2
 8014f58:	617b      	str	r3, [r7, #20]
 8014f5a:	e005      	b.n	8014f68 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	8a9b      	ldrh	r3, [r3, #20]
 8014f60:	b29b      	uxth	r3, r3
 8014f62:	697a      	ldr	r2, [r7, #20]
 8014f64:	4013      	ands	r3, r2
 8014f66:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8014f68:	887b      	ldrh	r3, [r7, #2]
 8014f6a:	0a1b      	lsrs	r3, r3, #8
 8014f6c:	b29b      	uxth	r3, r3
 8014f6e:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8014f70:	68fb      	ldr	r3, [r7, #12]
 8014f72:	2201      	movs	r2, #1
 8014f74:	fa02 f303 	lsl.w	r3, r2, r3
 8014f78:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	881b      	ldrh	r3, [r3, #0]
 8014f7e:	b29b      	uxth	r3, r3
 8014f80:	68fa      	ldr	r2, [r7, #12]
 8014f82:	4013      	ands	r3, r2
 8014f84:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8014f86:	697b      	ldr	r3, [r7, #20]
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d005      	beq.n	8014f98 <USART_GetITStatus+0x9c>
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d002      	beq.n	8014f98 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
 8014f92:	2301      	movs	r3, #1
 8014f94:	74fb      	strb	r3, [r7, #19]
 8014f96:	e001      	b.n	8014f9c <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
 8014f98:	2300      	movs	r3, #0
 8014f9a:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8014f9c:	7cfb      	ldrb	r3, [r7, #19]
}
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	371c      	adds	r7, #28
 8014fa2:	46bd      	mov	sp, r7
 8014fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fa8:	4770      	bx	lr
 8014faa:	bf00      	nop

08014fac <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8014fac:	b480      	push	{r7}
 8014fae:	b085      	sub	sp, #20
 8014fb0:	af00      	add	r7, sp, #0
 8014fb2:	6078      	str	r0, [r7, #4]
 8014fb4:	460b      	mov	r3, r1
 8014fb6:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8014fb8:	2300      	movs	r3, #0
 8014fba:	81fb      	strh	r3, [r7, #14]
 8014fbc:	2300      	movs	r3, #0
 8014fbe:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8014fc0:	887b      	ldrh	r3, [r7, #2]
 8014fc2:	0a1b      	lsrs	r3, r3, #8
 8014fc4:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8014fc6:	89fb      	ldrh	r3, [r7, #14]
 8014fc8:	2201      	movs	r2, #1
 8014fca:	fa02 f303 	lsl.w	r3, r2, r3
 8014fce:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8014fd0:	89bb      	ldrh	r3, [r7, #12]
 8014fd2:	43db      	mvns	r3, r3
 8014fd4:	b29a      	uxth	r2, r3
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	801a      	strh	r2, [r3, #0]
}
 8014fda:	3714      	adds	r7, #20
 8014fdc:	46bd      	mov	sp, r7
 8014fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fe2:	4770      	bx	lr

08014fe4 <WWDG_DeInit>:
  * @brief  Deinitializes the WWDG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void WWDG_DeInit(void)
{
 8014fe4:	b580      	push	{r7, lr}
 8014fe6:	af00      	add	r7, sp, #0
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
 8014fe8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8014fec:	2101      	movs	r1, #1
 8014fee:	f7fa ff13 	bl	800fe18 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
 8014ff2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8014ff6:	2100      	movs	r1, #0
 8014ff8:	f7fa ff0e 	bl	800fe18 <RCC_APB1PeriphResetCmd>
}
 8014ffc:	bd80      	pop	{r7, pc}
 8014ffe:	bf00      	nop

08015000 <WWDG_SetPrescaler>:
  *     @arg WWDG_Prescaler_4: WWDG counter clock = (PCLK1/4096)/4
  *     @arg WWDG_Prescaler_8: WWDG counter clock = (PCLK1/4096)/8
  * @retval None
  */
void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
{
 8015000:	b480      	push	{r7}
 8015002:	b085      	sub	sp, #20
 8015004:	af00      	add	r7, sp, #0
 8015006:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8015008:	2300      	movs	r3, #0
 801500a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
  /* Clear WDGTB[1:0] bits */
  tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
 801500c:	4b08      	ldr	r3, [pc, #32]	; (8015030 <WWDG_SetPrescaler+0x30>)
 801500e:	685b      	ldr	r3, [r3, #4]
 8015010:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8015014:	60fb      	str	r3, [r7, #12]
  /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
  tmpreg |= WWDG_Prescaler;
 8015016:	68fa      	ldr	r2, [r7, #12]
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	4313      	orrs	r3, r2
 801501c:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  WWDG->CFR = tmpreg;
 801501e:	4b04      	ldr	r3, [pc, #16]	; (8015030 <WWDG_SetPrescaler+0x30>)
 8015020:	68fa      	ldr	r2, [r7, #12]
 8015022:	605a      	str	r2, [r3, #4]
}
 8015024:	3714      	adds	r7, #20
 8015026:	46bd      	mov	sp, r7
 8015028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801502c:	4770      	bx	lr
 801502e:	bf00      	nop
 8015030:	40002c00 	.word	0x40002c00

08015034 <WWDG_SetWindowValue>:
  * @param  WindowValue: specifies the window value to be compared to the downcounter.
  *   This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
 8015034:	b480      	push	{r7}
 8015036:	b085      	sub	sp, #20
 8015038:	af00      	add	r7, sp, #0
 801503a:	4603      	mov	r3, r0
 801503c:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t tmpreg = 0;
 801503e:	2300      	movs	r3, #0
 8015040:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_MASK;
 8015042:	4b09      	ldr	r3, [pc, #36]	; (8015068 <WWDG_SetWindowValue+0x34>)
 8015044:	685b      	ldr	r3, [r3, #4]
 8015046:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801504a:	60fb      	str	r3, [r7, #12]

  /* Set W[6:0] bits according to WindowValue value */
  tmpreg |= WindowValue & (uint32_t) BIT_MASK;
 801504c:	79fb      	ldrb	r3, [r7, #7]
 801504e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	4313      	orrs	r3, r2
 8015056:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  WWDG->CFR = tmpreg;
 8015058:	4b03      	ldr	r3, [pc, #12]	; (8015068 <WWDG_SetWindowValue+0x34>)
 801505a:	68fa      	ldr	r2, [r7, #12]
 801505c:	605a      	str	r2, [r3, #4]
}
 801505e:	3714      	adds	r7, #20
 8015060:	46bd      	mov	sp, r7
 8015062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015066:	4770      	bx	lr
 8015068:	40002c00 	.word	0x40002c00

0801506c <WWDG_EnableIT>:
  * @note   Once enabled this interrupt cannot be disabled except by a system reset.
  * @param  None
  * @retval None
  */
void WWDG_EnableIT(void)
{
 801506c:	b480      	push	{r7}
 801506e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
 8015070:	4b03      	ldr	r3, [pc, #12]	; (8015080 <WWDG_EnableIT+0x14>)
 8015072:	2201      	movs	r2, #1
 8015074:	601a      	str	r2, [r3, #0]
}
 8015076:	46bd      	mov	sp, r7
 8015078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801507c:	4770      	bx	lr
 801507e:	bf00      	nop
 8015080:	420580a4 	.word	0x420580a4

08015084 <WWDG_SetCounter>:
  *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
  *   an immediate reset) 
  * @retval None
  */
void WWDG_SetCounter(uint8_t Counter)
{
 8015084:	b480      	push	{r7}
 8015086:	b083      	sub	sp, #12
 8015088:	af00      	add	r7, sp, #0
 801508a:	4603      	mov	r3, r0
 801508c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  /* Write to T[6:0] bits to configure the counter value, no need to do
     a read-modify-write; writing a 0 to WDGA bit does nothing */
  WWDG->CR = Counter & BIT_MASK;
 801508e:	4b05      	ldr	r3, [pc, #20]	; (80150a4 <WWDG_SetCounter+0x20>)
 8015090:	79fa      	ldrb	r2, [r7, #7]
 8015092:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8015096:	601a      	str	r2, [r3, #0]
}
 8015098:	370c      	adds	r7, #12
 801509a:	46bd      	mov	sp, r7
 801509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150a0:	4770      	bx	lr
 80150a2:	bf00      	nop
 80150a4:	40002c00 	.word	0x40002c00

080150a8 <WWDG_Enable>:
  *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
  *   an immediate reset)
  * @retval None
  */
void WWDG_Enable(uint8_t Counter)
{
 80150a8:	b480      	push	{r7}
 80150aa:	b083      	sub	sp, #12
 80150ac:	af00      	add	r7, sp, #0
 80150ae:	4603      	mov	r3, r0
 80150b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  WWDG->CR = WWDG_CR_WDGA | Counter;
 80150b2:	4b05      	ldr	r3, [pc, #20]	; (80150c8 <WWDG_Enable+0x20>)
 80150b4:	79fa      	ldrb	r2, [r7, #7]
 80150b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80150ba:	b2d2      	uxtb	r2, r2
 80150bc:	601a      	str	r2, [r3, #0]
}
 80150be:	370c      	adds	r7, #12
 80150c0:	46bd      	mov	sp, r7
 80150c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150c6:	4770      	bx	lr
 80150c8:	40002c00 	.word	0x40002c00

080150cc <WWDG_GetFlagStatus>:
  * @brief  Checks whether the Early Wakeup interrupt flag is set or not.
  * @param  None
  * @retval The new state of the Early Wakeup interrupt flag (SET or RESET)
  */
FlagStatus WWDG_GetFlagStatus(void)
{
 80150cc:	b480      	push	{r7}
 80150ce:	b083      	sub	sp, #12
 80150d0:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 80150d2:	2300      	movs	r3, #0
 80150d4:	71fb      	strb	r3, [r7, #7]
    
  if ((WWDG->SR) != (uint32_t)RESET)
 80150d6:	4b08      	ldr	r3, [pc, #32]	; (80150f8 <WWDG_GetFlagStatus+0x2c>)
 80150d8:	689b      	ldr	r3, [r3, #8]
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d002      	beq.n	80150e4 <WWDG_GetFlagStatus+0x18>
  {
    bitstatus = SET;
 80150de:	2301      	movs	r3, #1
 80150e0:	71fb      	strb	r3, [r7, #7]
 80150e2:	e001      	b.n	80150e8 <WWDG_GetFlagStatus+0x1c>
  }
  else
  {
    bitstatus = RESET;
 80150e4:	2300      	movs	r3, #0
 80150e6:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 80150e8:	79fb      	ldrb	r3, [r7, #7]
}
 80150ea:	4618      	mov	r0, r3
 80150ec:	370c      	adds	r7, #12
 80150ee:	46bd      	mov	sp, r7
 80150f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150f4:	4770      	bx	lr
 80150f6:	bf00      	nop
 80150f8:	40002c00 	.word	0x40002c00

080150fc <WWDG_ClearFlag>:
  * @brief  Clears Early Wakeup interrupt flag.
  * @param  None
  * @retval None
  */
void WWDG_ClearFlag(void)
{
 80150fc:	b480      	push	{r7}
 80150fe:	af00      	add	r7, sp, #0
  WWDG->SR = (uint32_t)RESET;
 8015100:	4b03      	ldr	r3, [pc, #12]	; (8015110 <WWDG_ClearFlag+0x14>)
 8015102:	2200      	movs	r2, #0
 8015104:	609a      	str	r2, [r3, #8]
}
 8015106:	46bd      	mov	sp, r7
 8015108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801510c:	4770      	bx	lr
 801510e:	bf00      	nop
 8015110:	40002c00 	.word	0x40002c00

08015114 <STM_EVAL_LEDInit>:
  *     @arg LED3
  *     @arg LED4
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8015114:	b580      	push	{r7, lr}
 8015116:	b084      	sub	sp, #16
 8015118:	af00      	add	r7, sp, #0
 801511a:	4603      	mov	r3, r0
 801511c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 801511e:	79fa      	ldrb	r2, [r7, #7]
 8015120:	4b10      	ldr	r3, [pc, #64]	; (8015164 <STM_EVAL_LEDInit+0x50>)
 8015122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015126:	4618      	mov	r0, r3
 8015128:	2101      	movs	r1, #1
 801512a:	f7fa fd85 	bl	800fc38 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 801512e:	79fa      	ldrb	r2, [r7, #7]
 8015130:	4b0d      	ldr	r3, [pc, #52]	; (8015168 <STM_EVAL_LEDInit+0x54>)
 8015132:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8015136:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8015138:	2301      	movs	r3, #1
 801513a:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 801513c:	2300      	movs	r3, #0
 801513e:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8015140:	2301      	movs	r3, #1
 8015142:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8015144:	2302      	movs	r3, #2
 8015146:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8015148:	79fa      	ldrb	r2, [r7, #7]
 801514a:	4b08      	ldr	r3, [pc, #32]	; (801516c <STM_EVAL_LEDInit+0x58>)
 801514c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015150:	f107 0308 	add.w	r3, r7, #8
 8015154:	4610      	mov	r0, r2
 8015156:	4619      	mov	r1, r3
 8015158:	f7f7 fec6 	bl	800cee8 <GPIO_Init>
}
 801515c:	3710      	adds	r7, #16
 801515e:	46bd      	mov	sp, r7
 8015160:	bd80      	pop	{r7, pc}
 8015162:	bf00      	nop
 8015164:	0801a598 	.word	0x0801a598
 8015168:	0801a594 	.word	0x0801a594
 801516c:	20000088 	.word	0x20000088

08015170 <STM_EVAL_LEDOn>:
  *     @arg LED3
  *     @arg LED4 
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 8015170:	b480      	push	{r7}
 8015172:	b083      	sub	sp, #12
 8015174:	af00      	add	r7, sp, #0
 8015176:	4603      	mov	r3, r0
 8015178:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 801517a:	79fa      	ldrb	r2, [r7, #7]
 801517c:	4b06      	ldr	r3, [pc, #24]	; (8015198 <STM_EVAL_LEDOn+0x28>)
 801517e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015182:	79f9      	ldrb	r1, [r7, #7]
 8015184:	4a05      	ldr	r2, [pc, #20]	; (801519c <STM_EVAL_LEDOn+0x2c>)
 8015186:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 801518a:	831a      	strh	r2, [r3, #24]
}
 801518c:	370c      	adds	r7, #12
 801518e:	46bd      	mov	sp, r7
 8015190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015194:	4770      	bx	lr
 8015196:	bf00      	nop
 8015198:	20000088 	.word	0x20000088
 801519c:	0801a594 	.word	0x0801a594

080151a0 <STM_EVAL_LEDOff>:
  *     @arg LED3
  *     @arg LED4
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 80151a0:	b480      	push	{r7}
 80151a2:	b083      	sub	sp, #12
 80151a4:	af00      	add	r7, sp, #0
 80151a6:	4603      	mov	r3, r0
 80151a8:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 80151aa:	79fa      	ldrb	r2, [r7, #7]
 80151ac:	4b06      	ldr	r3, [pc, #24]	; (80151c8 <STM_EVAL_LEDOff+0x28>)
 80151ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151b2:	79f9      	ldrb	r1, [r7, #7]
 80151b4:	4a05      	ldr	r2, [pc, #20]	; (80151cc <STM_EVAL_LEDOff+0x2c>)
 80151b6:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80151ba:	835a      	strh	r2, [r3, #26]
}
 80151bc:	370c      	adds	r7, #12
 80151be:	46bd      	mov	sp, r7
 80151c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151c4:	4770      	bx	lr
 80151c6:	bf00      	nop
 80151c8:	20000088 	.word	0x20000088
 80151cc:	0801a594 	.word	0x0801a594

080151d0 <STM_EVAL_LEDToggle>:
  *     @arg LED3
  *     @arg LED4  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 80151d0:	b480      	push	{r7}
 80151d2:	b083      	sub	sp, #12
 80151d4:	af00      	add	r7, sp, #0
 80151d6:	4603      	mov	r3, r0
 80151d8:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 80151da:	79fa      	ldrb	r2, [r7, #7]
 80151dc:	4b09      	ldr	r3, [pc, #36]	; (8015204 <STM_EVAL_LEDToggle+0x34>)
 80151de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151e2:	79f9      	ldrb	r1, [r7, #7]
 80151e4:	4a07      	ldr	r2, [pc, #28]	; (8015204 <STM_EVAL_LEDToggle+0x34>)
 80151e6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80151ea:	6951      	ldr	r1, [r2, #20]
 80151ec:	79f8      	ldrb	r0, [r7, #7]
 80151ee:	4a06      	ldr	r2, [pc, #24]	; (8015208 <STM_EVAL_LEDToggle+0x38>)
 80151f0:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 80151f4:	404a      	eors	r2, r1
 80151f6:	615a      	str	r2, [r3, #20]
}
 80151f8:	370c      	adds	r7, #12
 80151fa:	46bd      	mov	sp, r7
 80151fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015200:	4770      	bx	lr
 8015202:	bf00      	nop
 8015204:	20000088 	.word	0x20000088
 8015208:	0801a594 	.word	0x0801a594

0801520c <STM_EVAL_PBInit>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 801520c:	b580      	push	{r7, lr}
 801520e:	b088      	sub	sp, #32
 8015210:	af00      	add	r7, sp, #0
 8015212:	4602      	mov	r2, r0
 8015214:	460b      	mov	r3, r1
 8015216:	71fa      	strb	r2, [r7, #7]
 8015218:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the BUTTON Clock */
  RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 801521a:	2301      	movs	r3, #1
 801521c:	4618      	mov	r0, r3
 801521e:	2101      	movs	r1, #1
 8015220:	f7fa fd0a 	bl	800fc38 <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8015224:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8015228:	2101      	movs	r1, #1
 801522a:	f7fa fd7d 	bl	800fd28 <RCC_APB2PeriphClockCmd>

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 801522e:	2300      	movs	r3, #0
 8015230:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 8015232:	2302      	movs	r3, #2
 8015234:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 8015236:	2301      	movs	r3, #1
 8015238:	61bb      	str	r3, [r7, #24]
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 801523a:	79fa      	ldrb	r2, [r7, #7]
 801523c:	4b17      	ldr	r3, [pc, #92]	; (801529c <STM_EVAL_PBInit+0x90>)
 801523e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015242:	f107 0318 	add.w	r3, r7, #24
 8015246:	4610      	mov	r0, r2
 8015248:	4619      	mov	r1, r3
 801524a:	f7f7 fe4d 	bl	800cee8 <GPIO_Init>

  if (Button_Mode == BUTTON_MODE_EXTI)
 801524e:	79bb      	ldrb	r3, [r7, #6]
 8015250:	2b01      	cmp	r3, #1
 8015252:	d11f      	bne.n	8015294 <STM_EVAL_PBInit+0x88>
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 8015254:	2200      	movs	r2, #0
 8015256:	2300      	movs	r3, #0
 8015258:	4610      	mov	r0, r2
 801525a:	4619      	mov	r1, r3
 801525c:	f7fd fbe0 	bl	8012a20 <SYSCFG_EXTILineConfig>

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 8015260:	2301      	movs	r3, #1
 8015262:	613b      	str	r3, [r7, #16]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8015264:	2300      	movs	r3, #0
 8015266:	753b      	strb	r3, [r7, #20]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 8015268:	2308      	movs	r3, #8
 801526a:	757b      	strb	r3, [r7, #21]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 801526c:	2301      	movs	r3, #1
 801526e:	75bb      	strb	r3, [r7, #22]
    EXTI_Init(&EXTI_InitStructure);
 8015270:	f107 0310 	add.w	r3, r7, #16
 8015274:	4618      	mov	r0, r3
 8015276:	f7f6 f87f 	bl	800b378 <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 801527a:	2306      	movs	r3, #6
 801527c:	733b      	strb	r3, [r7, #12]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 801527e:	230f      	movs	r3, #15
 8015280:	737b      	strb	r3, [r7, #13]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 8015282:	230f      	movs	r3, #15
 8015284:	73bb      	strb	r3, [r7, #14]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8015286:	2301      	movs	r3, #1
 8015288:	73fb      	strb	r3, [r7, #15]

    NVIC_Init(&NVIC_InitStructure); 
 801528a:	f107 030c 	add.w	r3, r7, #12
 801528e:	4618      	mov	r0, r3
 8015290:	f7ef ff84 	bl	800519c <NVIC_Init>
  }
}
 8015294:	3720      	adds	r7, #32
 8015296:	46bd      	mov	sp, r7
 8015298:	bd80      	pop	{r7, pc}
 801529a:	bf00      	nop
 801529c:	20000090 	.word	0x20000090

080152a0 <STM_EVAL_PBGetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t STM_EVAL_PBGetState(Button_TypeDef Button)
{
 80152a0:	b580      	push	{r7, lr}
 80152a2:	b082      	sub	sp, #8
 80152a4:	af00      	add	r7, sp, #0
 80152a6:	4603      	mov	r3, r0
 80152a8:	71fb      	strb	r3, [r7, #7]
  return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80152aa:	79fa      	ldrb	r2, [r7, #7]
 80152ac:	4b06      	ldr	r3, [pc, #24]	; (80152c8 <STM_EVAL_PBGetState+0x28>)
 80152ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80152b2:	2301      	movs	r3, #1
 80152b4:	4610      	mov	r0, r2
 80152b6:	4619      	mov	r1, r3
 80152b8:	f7f7 fee0 	bl	800d07c <GPIO_ReadInputDataBit>
 80152bc:	4603      	mov	r3, r0
}
 80152be:	4618      	mov	r0, r3
 80152c0:	3708      	adds	r7, #8
 80152c2:	46bd      	mov	sp, r7
 80152c4:	bd80      	pop	{r7, pc}
 80152c6:	bf00      	nop
 80152c8:	20000090 	.word	0x20000090

080152cc <sEE_LowLevel_DeInit>:
  * @brief  DeInitializes peripherals used by the I2C EEPROM driver.
  * @param  None
  * @retval None
  */
void sEE_LowLevel_DeInit(void)
{
 80152cc:	b580      	push	{r7, lr}
 80152ce:	b082      	sub	sp, #8
 80152d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStructure; 
   
  /* sEE_I2C Peripheral Disable */
  I2C_Cmd(sEE_I2C, DISABLE);
 80152d2:	4826      	ldr	r0, [pc, #152]	; (801536c <sEE_LowLevel_DeInit+0xa0>)
 80152d4:	2100      	movs	r1, #0
 80152d6:	f7f8 fdef 	bl	800deb8 <I2C_Cmd>
 
  /* sEE_I2C DeInit */
  I2C_DeInit(sEE_I2C);
 80152da:	4824      	ldr	r0, [pc, #144]	; (801536c <sEE_LowLevel_DeInit+0xa0>)
 80152dc:	f7f8 fcd2 	bl	800dc84 <I2C_DeInit>

  /*!< sEE_I2C Periph clock disable */
  RCC_APB1PeriphClockCmd(sEE_I2C_CLK, DISABLE);
 80152e0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80152e4:	2100      	movs	r1, #0
 80152e6:	f7fa fd01 	bl	800fcec <RCC_APB1PeriphClockCmd>
    
  /*!< GPIO configuration */  
  /*!< Configure sEE_I2C pins: SCL */
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
 80152ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80152ee:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80152f0:	2300      	movs	r3, #0
 80152f2:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80152f4:	2300      	movs	r3, #0
 80152f6:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 80152f8:	463b      	mov	r3, r7
 80152fa:	481d      	ldr	r0, [pc, #116]	; (8015370 <sEE_LowLevel_DeInit+0xa4>)
 80152fc:	4619      	mov	r1, r3
 80152fe:	f7f7 fdf3 	bl	800cee8 <GPIO_Init>

  /*!< Configure sEE_I2C pins: SDA */
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
 8015302:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015306:	603b      	str	r3, [r7, #0]
  GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 8015308:	463b      	mov	r3, r7
 801530a:	481a      	ldr	r0, [pc, #104]	; (8015374 <sEE_LowLevel_DeInit+0xa8>)
 801530c:	4619      	mov	r1, r3
 801530e:	f7f7 fdeb 	bl	800cee8 <GPIO_Init>

  /* Configure and enable I2C DMA TX Stream interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_TX_IRQn;
 8015312:	4b19      	ldr	r3, [pc, #100]	; (8015378 <sEE_LowLevel_DeInit+0xac>)
 8015314:	220f      	movs	r2, #15
 8015316:	701a      	strb	r2, [r3, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
 8015318:	4b17      	ldr	r3, [pc, #92]	; (8015378 <sEE_LowLevel_DeInit+0xac>)
 801531a:	2200      	movs	r2, #0
 801531c:	705a      	strb	r2, [r3, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 801531e:	4b16      	ldr	r3, [pc, #88]	; (8015378 <sEE_LowLevel_DeInit+0xac>)
 8015320:	2200      	movs	r2, #0
 8015322:	709a      	strb	r2, [r3, #2]
  NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
 8015324:	4b14      	ldr	r3, [pc, #80]	; (8015378 <sEE_LowLevel_DeInit+0xac>)
 8015326:	2200      	movs	r2, #0
 8015328:	70da      	strb	r2, [r3, #3]
  NVIC_Init(&NVIC_InitStructure);
 801532a:	4813      	ldr	r0, [pc, #76]	; (8015378 <sEE_LowLevel_DeInit+0xac>)
 801532c:	f7ef ff36 	bl	800519c <NVIC_Init>

  /* Configure and enable I2C DMA RX Stream interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_RX_IRQn;
 8015330:	4b11      	ldr	r3, [pc, #68]	; (8015378 <sEE_LowLevel_DeInit+0xac>)
 8015332:	220d      	movs	r2, #13
 8015334:	701a      	strb	r2, [r3, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
 8015336:	4b10      	ldr	r3, [pc, #64]	; (8015378 <sEE_LowLevel_DeInit+0xac>)
 8015338:	2200      	movs	r2, #0
 801533a:	705a      	strb	r2, [r3, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 801533c:	4b0e      	ldr	r3, [pc, #56]	; (8015378 <sEE_LowLevel_DeInit+0xac>)
 801533e:	2200      	movs	r2, #0
 8015340:	709a      	strb	r2, [r3, #2]
  NVIC_Init(&NVIC_InitStructure);   
 8015342:	480d      	ldr	r0, [pc, #52]	; (8015378 <sEE_LowLevel_DeInit+0xac>)
 8015344:	f7ef ff2a 	bl	800519c <NVIC_Init>
  
  /* Disable and Deinitialize the DMA Streams */
  DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
 8015348:	480c      	ldr	r0, [pc, #48]	; (801537c <sEE_LowLevel_DeInit+0xb0>)
 801534a:	2100      	movs	r1, #0
 801534c:	f7f5 fdd2 	bl	800aef4 <DMA_Cmd>
  DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
 8015350:	480b      	ldr	r0, [pc, #44]	; (8015380 <sEE_LowLevel_DeInit+0xb4>)
 8015352:	2100      	movs	r1, #0
 8015354:	f7f5 fdce 	bl	800aef4 <DMA_Cmd>
  DMA_DeInit(sEE_I2C_DMA_STREAM_TX);
 8015358:	4808      	ldr	r0, [pc, #32]	; (801537c <sEE_LowLevel_DeInit+0xb0>)
 801535a:	f7f5 fc6d 	bl	800ac38 <DMA_DeInit>
  DMA_DeInit(sEE_I2C_DMA_STREAM_RX);
 801535e:	4808      	ldr	r0, [pc, #32]	; (8015380 <sEE_LowLevel_DeInit+0xb4>)
 8015360:	f7f5 fc6a 	bl	800ac38 <DMA_DeInit>
}
 8015364:	3708      	adds	r7, #8
 8015366:	46bd      	mov	sp, r7
 8015368:	bd80      	pop	{r7, pc}
 801536a:	bf00      	nop
 801536c:	40005c00 	.word	0x40005c00
 8015370:	40020000 	.word	0x40020000
 8015374:	40020800 	.word	0x40020800
 8015378:	20005344 	.word	0x20005344
 801537c:	40026070 	.word	0x40026070
 8015380:	40026040 	.word	0x40026040

08015384 <sEE_LowLevel_Init>:
  * @brief  Initializes peripherals used by the I2C EEPROM driver.
  * @param  None
  * @retval None
  */
void sEE_LowLevel_Init(void)
{
 8015384:	b580      	push	{r7, lr}
 8015386:	b082      	sub	sp, #8
 8015388:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStructure; 
   
  /*!< sEE_I2C Periph clock enable */
  RCC_APB1PeriphClockCmd(sEE_I2C_CLK, ENABLE);
 801538a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 801538e:	2101      	movs	r1, #1
 8015390:	f7fa fcac 	bl	800fcec <RCC_APB1PeriphClockCmd>
  
  /*!< sEE_I2C_SCL_GPIO_CLK and sEE_I2C_SDA_GPIO_CLK Periph clock enable */
  RCC_AHB1PeriphClockCmd(sEE_I2C_SCL_GPIO_CLK | sEE_I2C_SDA_GPIO_CLK, ENABLE);
 8015394:	2005      	movs	r0, #5
 8015396:	2101      	movs	r1, #1
 8015398:	f7fa fc4e 	bl	800fc38 <RCC_AHB1PeriphClockCmd>
  
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 801539c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80153a0:	2101      	movs	r1, #1
 80153a2:	f7fa fcc1 	bl	800fd28 <RCC_APB2PeriphClockCmd>
  
  /* Reset sEE_I2C IP */
  RCC_APB1PeriphResetCmd(sEE_I2C_CLK, ENABLE);  
 80153a6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80153aa:	2101      	movs	r1, #1
 80153ac:	f7fa fd34 	bl	800fe18 <RCC_APB1PeriphResetCmd>
  /* Release reset signal of sEE_I2C IP */
  RCC_APB1PeriphResetCmd(sEE_I2C_CLK, DISABLE);
 80153b0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80153b4:	2100      	movs	r1, #0
 80153b6:	f7fa fd2f 	bl	800fe18 <RCC_APB1PeriphResetCmd>
    
  /*!< GPIO configuration */  
  /*!< Configure sEE_I2C pins: SCL */   
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
 80153ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80153be:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80153c0:	2302      	movs	r3, #2
 80153c2:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80153c4:	2302      	movs	r3, #2
 80153c6:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 80153c8:	2301      	movs	r3, #1
 80153ca:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80153cc:	2300      	movs	r3, #0
 80153ce:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 80153d0:	463b      	mov	r3, r7
 80153d2:	4849      	ldr	r0, [pc, #292]	; (80154f8 <sEE_LowLevel_Init+0x174>)
 80153d4:	4619      	mov	r1, r3
 80153d6:	f7f7 fd87 	bl	800cee8 <GPIO_Init>

  /*!< Configure sEE_I2C pins: SDA */
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
 80153da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80153de:	603b      	str	r3, [r7, #0]
  GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 80153e0:	463b      	mov	r3, r7
 80153e2:	4846      	ldr	r0, [pc, #280]	; (80154fc <sEE_LowLevel_Init+0x178>)
 80153e4:	4619      	mov	r1, r3
 80153e6:	f7f7 fd7f 	bl	800cee8 <GPIO_Init>

  /* Connect PXx to I2C_SCL*/
  GPIO_PinAFConfig(sEE_I2C_SCL_GPIO_PORT, sEE_I2C_SCL_SOURCE, sEE_I2C_SCL_AF);
 80153ea:	4843      	ldr	r0, [pc, #268]	; (80154f8 <sEE_LowLevel_Init+0x174>)
 80153ec:	2108      	movs	r1, #8
 80153ee:	2204      	movs	r2, #4
 80153f0:	f7f7 fee8 	bl	800d1c4 <GPIO_PinAFConfig>

  /* Connect PXx to I2C_SDA*/
  GPIO_PinAFConfig(sEE_I2C_SDA_GPIO_PORT, sEE_I2C_SDA_SOURCE, sEE_I2C_SDA_AF);  
 80153f4:	4841      	ldr	r0, [pc, #260]	; (80154fc <sEE_LowLevel_Init+0x178>)
 80153f6:	2109      	movs	r1, #9
 80153f8:	2204      	movs	r2, #4
 80153fa:	f7f7 fee3 	bl	800d1c4 <GPIO_PinAFConfig>
  
  /* Configure and enable I2C DMA TX Channel interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_TX_IRQn;
 80153fe:	4b40      	ldr	r3, [pc, #256]	; (8015500 <sEE_LowLevel_Init+0x17c>)
 8015400:	220f      	movs	r2, #15
 8015402:	701a      	strb	r2, [r3, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
 8015404:	4b3e      	ldr	r3, [pc, #248]	; (8015500 <sEE_LowLevel_Init+0x17c>)
 8015406:	2200      	movs	r2, #0
 8015408:	705a      	strb	r2, [r3, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 801540a:	4b3d      	ldr	r3, [pc, #244]	; (8015500 <sEE_LowLevel_Init+0x17c>)
 801540c:	2200      	movs	r2, #0
 801540e:	709a      	strb	r2, [r3, #2]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8015410:	4b3b      	ldr	r3, [pc, #236]	; (8015500 <sEE_LowLevel_Init+0x17c>)
 8015412:	2201      	movs	r2, #1
 8015414:	70da      	strb	r2, [r3, #3]
  NVIC_Init(&NVIC_InitStructure);
 8015416:	483a      	ldr	r0, [pc, #232]	; (8015500 <sEE_LowLevel_Init+0x17c>)
 8015418:	f7ef fec0 	bl	800519c <NVIC_Init>

  /* Configure and enable I2C DMA RX Channel interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_RX_IRQn;
 801541c:	4b38      	ldr	r3, [pc, #224]	; (8015500 <sEE_LowLevel_Init+0x17c>)
 801541e:	220d      	movs	r2, #13
 8015420:	701a      	strb	r2, [r3, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
 8015422:	4b37      	ldr	r3, [pc, #220]	; (8015500 <sEE_LowLevel_Init+0x17c>)
 8015424:	2200      	movs	r2, #0
 8015426:	705a      	strb	r2, [r3, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 8015428:	4b35      	ldr	r3, [pc, #212]	; (8015500 <sEE_LowLevel_Init+0x17c>)
 801542a:	2200      	movs	r2, #0
 801542c:	709a      	strb	r2, [r3, #2]
  NVIC_Init(&NVIC_InitStructure);  
 801542e:	4834      	ldr	r0, [pc, #208]	; (8015500 <sEE_LowLevel_Init+0x17c>)
 8015430:	f7ef feb4 	bl	800519c <NVIC_Init>
  
  /*!< I2C DMA TX and RX channels configuration */
  /* Enable the DMA clock */
  RCC_AHB1PeriphClockCmd(sEE_I2C_DMA_CLK, ENABLE);
 8015434:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8015438:	2101      	movs	r1, #1
 801543a:	f7fa fbfd 	bl	800fc38 <RCC_AHB1PeriphClockCmd>
  
  /* Clear any pending flag on Rx Stream  */
  DMA_ClearFlag(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_FEIF | sEE_TX_DMA_FLAG_DMEIF | sEE_TX_DMA_FLAG_TEIF | \
 801543e:	4831      	ldr	r0, [pc, #196]	; (8015504 <sEE_LowLevel_Init+0x180>)
 8015440:	4931      	ldr	r1, [pc, #196]	; (8015508 <sEE_LowLevel_Init+0x184>)
 8015442:	f7f5 fe91 	bl	800b168 <DMA_ClearFlag>
                                       sEE_TX_DMA_FLAG_HTIF | sEE_TX_DMA_FLAG_TCIF);
  /* Disable the EE I2C Tx DMA stream */
  DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
 8015446:	482f      	ldr	r0, [pc, #188]	; (8015504 <sEE_LowLevel_Init+0x180>)
 8015448:	2100      	movs	r1, #0
 801544a:	f7f5 fd53 	bl	800aef4 <DMA_Cmd>
  /* Configure the DMA stream for the EE I2C peripheral TX direction */
  DMA_DeInit(sEE_I2C_DMA_STREAM_TX);
 801544e:	482d      	ldr	r0, [pc, #180]	; (8015504 <sEE_LowLevel_Init+0x180>)
 8015450:	f7f5 fbf2 	bl	800ac38 <DMA_DeInit>
  sEEDMA_InitStructure.DMA_Channel = sEE_I2C_DMA_CHANNEL;
 8015454:	4b2d      	ldr	r3, [pc, #180]	; (801550c <sEE_LowLevel_Init+0x188>)
 8015456:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 801545a:	601a      	str	r2, [r3, #0]
  sEEDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)sEE_I2C_DR_Address;
 801545c:	4b2b      	ldr	r3, [pc, #172]	; (801550c <sEE_LowLevel_Init+0x188>)
 801545e:	4a2c      	ldr	r2, [pc, #176]	; (8015510 <sEE_LowLevel_Init+0x18c>)
 8015460:	605a      	str	r2, [r3, #4]
  sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)0;    /* This parameter will be configured durig communication */;
 8015462:	4b2a      	ldr	r3, [pc, #168]	; (801550c <sEE_LowLevel_Init+0x188>)
 8015464:	2200      	movs	r2, #0
 8015466:	609a      	str	r2, [r3, #8]
  sEEDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral; /* This parameter will be configured durig communication */
 8015468:	4b28      	ldr	r3, [pc, #160]	; (801550c <sEE_LowLevel_Init+0x188>)
 801546a:	2240      	movs	r2, #64	; 0x40
 801546c:	60da      	str	r2, [r3, #12]
  sEEDMA_InitStructure.DMA_BufferSize = 0xFFFF;              /* This parameter will be configured durig communication */
 801546e:	4b27      	ldr	r3, [pc, #156]	; (801550c <sEE_LowLevel_Init+0x188>)
 8015470:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015474:	611a      	str	r2, [r3, #16]
  sEEDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8015476:	4b25      	ldr	r3, [pc, #148]	; (801550c <sEE_LowLevel_Init+0x188>)
 8015478:	2200      	movs	r2, #0
 801547a:	615a      	str	r2, [r3, #20]
  sEEDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 801547c:	4b23      	ldr	r3, [pc, #140]	; (801550c <sEE_LowLevel_Init+0x188>)
 801547e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015482:	619a      	str	r2, [r3, #24]
  sEEDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8015484:	4b21      	ldr	r3, [pc, #132]	; (801550c <sEE_LowLevel_Init+0x188>)
 8015486:	2200      	movs	r2, #0
 8015488:	61da      	str	r2, [r3, #28]
  sEEDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 801548a:	4b20      	ldr	r3, [pc, #128]	; (801550c <sEE_LowLevel_Init+0x188>)
 801548c:	2200      	movs	r2, #0
 801548e:	621a      	str	r2, [r3, #32]
  sEEDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8015490:	4b1e      	ldr	r3, [pc, #120]	; (801550c <sEE_LowLevel_Init+0x188>)
 8015492:	2200      	movs	r2, #0
 8015494:	625a      	str	r2, [r3, #36]	; 0x24
  sEEDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8015496:	4b1d      	ldr	r3, [pc, #116]	; (801550c <sEE_LowLevel_Init+0x188>)
 8015498:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 801549c:	629a      	str	r2, [r3, #40]	; 0x28
  sEEDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
 801549e:	4b1b      	ldr	r3, [pc, #108]	; (801550c <sEE_LowLevel_Init+0x188>)
 80154a0:	2204      	movs	r2, #4
 80154a2:	62da      	str	r2, [r3, #44]	; 0x2c
  sEEDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 80154a4:	4b19      	ldr	r3, [pc, #100]	; (801550c <sEE_LowLevel_Init+0x188>)
 80154a6:	2203      	movs	r2, #3
 80154a8:	631a      	str	r2, [r3, #48]	; 0x30
  sEEDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 80154aa:	4b18      	ldr	r3, [pc, #96]	; (801550c <sEE_LowLevel_Init+0x188>)
 80154ac:	2200      	movs	r2, #0
 80154ae:	635a      	str	r2, [r3, #52]	; 0x34
  sEEDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80154b0:	4b16      	ldr	r3, [pc, #88]	; (801550c <sEE_LowLevel_Init+0x188>)
 80154b2:	2200      	movs	r2, #0
 80154b4:	639a      	str	r2, [r3, #56]	; 0x38
  DMA_Init(sEE_I2C_DMA_STREAM_TX, &sEEDMA_InitStructure);
 80154b6:	4813      	ldr	r0, [pc, #76]	; (8015504 <sEE_LowLevel_Init+0x180>)
 80154b8:	4914      	ldr	r1, [pc, #80]	; (801550c <sEE_LowLevel_Init+0x188>)
 80154ba:	f7f5 fc8f 	bl	800addc <DMA_Init>

  /* Clear any pending flag on Rx Stream */
  DMA_ClearFlag(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_FEIF | sEE_RX_DMA_FLAG_DMEIF | sEE_RX_DMA_FLAG_TEIF | \
 80154be:	4815      	ldr	r0, [pc, #84]	; (8015514 <sEE_LowLevel_Init+0x190>)
 80154c0:	4915      	ldr	r1, [pc, #84]	; (8015518 <sEE_LowLevel_Init+0x194>)
 80154c2:	f7f5 fe51 	bl	800b168 <DMA_ClearFlag>
                                       sEE_RX_DMA_FLAG_HTIF | sEE_RX_DMA_FLAG_TCIF);
  /* Disable the EE I2C DMA Rx stream */
  DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
 80154c6:	4813      	ldr	r0, [pc, #76]	; (8015514 <sEE_LowLevel_Init+0x190>)
 80154c8:	2100      	movs	r1, #0
 80154ca:	f7f5 fd13 	bl	800aef4 <DMA_Cmd>
  /* Configure the DMA stream for the EE I2C peripheral RX direction */
  DMA_DeInit(sEE_I2C_DMA_STREAM_RX);
 80154ce:	4811      	ldr	r0, [pc, #68]	; (8015514 <sEE_LowLevel_Init+0x190>)
 80154d0:	f7f5 fbb2 	bl	800ac38 <DMA_DeInit>
  DMA_Init(sEE_I2C_DMA_STREAM_RX, &sEEDMA_InitStructure);
 80154d4:	480f      	ldr	r0, [pc, #60]	; (8015514 <sEE_LowLevel_Init+0x190>)
 80154d6:	490d      	ldr	r1, [pc, #52]	; (801550c <sEE_LowLevel_Init+0x188>)
 80154d8:	f7f5 fc80 	bl	800addc <DMA_Init>
  
  /* Enable the DMA Channels Interrupts */
  DMA_ITConfig(sEE_I2C_DMA_STREAM_TX, DMA_IT_TC, ENABLE);
 80154dc:	4809      	ldr	r0, [pc, #36]	; (8015504 <sEE_LowLevel_Init+0x180>)
 80154de:	2110      	movs	r1, #16
 80154e0:	2201      	movs	r2, #1
 80154e2:	f7f5 fe6f 	bl	800b1c4 <DMA_ITConfig>
  DMA_ITConfig(sEE_I2C_DMA_STREAM_RX, DMA_IT_TC, ENABLE);      
 80154e6:	480b      	ldr	r0, [pc, #44]	; (8015514 <sEE_LowLevel_Init+0x190>)
 80154e8:	2110      	movs	r1, #16
 80154ea:	2201      	movs	r2, #1
 80154ec:	f7f5 fe6a 	bl	800b1c4 <DMA_ITConfig>
}
 80154f0:	3708      	adds	r7, #8
 80154f2:	46bd      	mov	sp, r7
 80154f4:	bd80      	pop	{r7, pc}
 80154f6:	bf00      	nop
 80154f8:	40020000 	.word	0x40020000
 80154fc:	40020800 	.word	0x40020800
 8015500:	20005344 	.word	0x20005344
 8015504:	40026070 	.word	0x40026070
 8015508:	2000003d 	.word	0x2000003d
 801550c:	20005308 	.word	0x20005308
 8015510:	40005c10 	.word	0x40005c10
 8015514:	40026040 	.word	0x40026040
 8015518:	103d0000 	.word	0x103d0000

0801551c <sEE_LowLevel_DMAConfig>:
  * @brief  Initializes DMA channel used by the I2C EEPROM driver.
  * @param  None
  * @retval None
  */
void sEE_LowLevel_DMAConfig(uint32_t pBuffer, uint32_t BufferSize, uint32_t Direction)
{ 
 801551c:	b580      	push	{r7, lr}
 801551e:	b084      	sub	sp, #16
 8015520:	af00      	add	r7, sp, #0
 8015522:	60f8      	str	r0, [r7, #12]
 8015524:	60b9      	str	r1, [r7, #8]
 8015526:	607a      	str	r2, [r7, #4]
  /* Initialize the DMA with the new parameters */
  if (Direction == sEE_DIRECTION_TX)
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	2b00      	cmp	r3, #0
 801552c:	d10d      	bne.n	801554a <sEE_LowLevel_DMAConfig+0x2e>
  {
    /* Configure the DMA Tx Stream with the buffer address and the buffer size */
    sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)pBuffer;
 801552e:	4b0f      	ldr	r3, [pc, #60]	; (801556c <sEE_LowLevel_DMAConfig+0x50>)
 8015530:	68fa      	ldr	r2, [r7, #12]
 8015532:	609a      	str	r2, [r3, #8]
    sEEDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;    
 8015534:	4b0d      	ldr	r3, [pc, #52]	; (801556c <sEE_LowLevel_DMAConfig+0x50>)
 8015536:	2240      	movs	r2, #64	; 0x40
 8015538:	60da      	str	r2, [r3, #12]
    sEEDMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;  
 801553a:	4b0c      	ldr	r3, [pc, #48]	; (801556c <sEE_LowLevel_DMAConfig+0x50>)
 801553c:	68ba      	ldr	r2, [r7, #8]
 801553e:	611a      	str	r2, [r3, #16]
    DMA_Init(sEE_I2C_DMA_STREAM_TX, &sEEDMA_InitStructure);  
 8015540:	480b      	ldr	r0, [pc, #44]	; (8015570 <sEE_LowLevel_DMAConfig+0x54>)
 8015542:	490a      	ldr	r1, [pc, #40]	; (801556c <sEE_LowLevel_DMAConfig+0x50>)
 8015544:	f7f5 fc4a 	bl	800addc <DMA_Init>
 8015548:	e00c      	b.n	8015564 <sEE_LowLevel_DMAConfig+0x48>
  }
  else
  { 
    /* Configure the DMA Rx Stream with the buffer address and the buffer size */
    sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)pBuffer;
 801554a:	4b08      	ldr	r3, [pc, #32]	; (801556c <sEE_LowLevel_DMAConfig+0x50>)
 801554c:	68fa      	ldr	r2, [r7, #12]
 801554e:	609a      	str	r2, [r3, #8]
    sEEDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8015550:	4b06      	ldr	r3, [pc, #24]	; (801556c <sEE_LowLevel_DMAConfig+0x50>)
 8015552:	2200      	movs	r2, #0
 8015554:	60da      	str	r2, [r3, #12]
    sEEDMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;      
 8015556:	4b05      	ldr	r3, [pc, #20]	; (801556c <sEE_LowLevel_DMAConfig+0x50>)
 8015558:	68ba      	ldr	r2, [r7, #8]
 801555a:	611a      	str	r2, [r3, #16]
    DMA_Init(sEE_I2C_DMA_STREAM_RX, &sEEDMA_InitStructure);    
 801555c:	4805      	ldr	r0, [pc, #20]	; (8015574 <sEE_LowLevel_DMAConfig+0x58>)
 801555e:	4903      	ldr	r1, [pc, #12]	; (801556c <sEE_LowLevel_DMAConfig+0x50>)
 8015560:	f7f5 fc3c 	bl	800addc <DMA_Init>
  }
}
 8015564:	3710      	adds	r7, #16
 8015566:	46bd      	mov	sp, r7
 8015568:	bd80      	pop	{r7, pc}
 801556a:	bf00      	nop
 801556c:	20005308 	.word	0x20005308
 8015570:	40026070 	.word	0x40026070
 8015574:	40026040 	.word	0x40026040

08015578 <LCD_DeInit>:
  * @brief  DeInitializes the LCD.
  * @param  None
  * @retval None
  */
void LCD_DeInit(void)
{ 
 8015578:	b580      	push	{r7, lr}
 801557a:	b082      	sub	sp, #8
 801557c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* LCD Display Off */
  LCD_DisplayOff();
 801557e:	f001 ff93 	bl	80174a8 <LCD_DisplayOff>

  /* LCD_SPI disable */
  SPI_Cmd(LCD_SPI, DISABLE);
 8015582:	487f      	ldr	r0, [pc, #508]	; (8015780 <LCD_DeInit+0x208>)
 8015584:	2100      	movs	r1, #0
 8015586:	f7fc ffa5 	bl	80124d4 <SPI_Cmd>
  
  /* LCD_SPI DeInit */
  SPI_I2S_DeInit(LCD_SPI);
 801558a:	487d      	ldr	r0, [pc, #500]	; (8015780 <LCD_DeInit+0x208>)
 801558c:	f7fc fdda 	bl	8012144 <SPI_I2S_DeInit>
   
  /* Disable SPI clock  */
  RCC_APB2PeriphClockCmd(LCD_SPI_CLK, DISABLE);
 8015590:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8015594:	2100      	movs	r1, #0
 8015596:	f7fa fbc7 	bl	800fd28 <RCC_APB2PeriphClockCmd>
    
  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = LCD_NCS_PIN;
 801559a:	2304      	movs	r3, #4
 801559c:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 801559e:	2300      	movs	r3, #0
 80155a0:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80155a2:	2300      	movs	r3, #0
 80155a4:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80155a6:	463b      	mov	r3, r7
 80155a8:	4876      	ldr	r0, [pc, #472]	; (8015784 <LCD_DeInit+0x20c>)
 80155aa:	4619      	mov	r1, r3
 80155ac:	f7f7 fc9c 	bl	800cee8 <GPIO_Init>
   
  /* Configure SPI pins: SCK, MISO and MOSI */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_SCK_PIN;
 80155b0:	2380      	movs	r3, #128	; 0x80
 80155b2:	603b      	str	r3, [r7, #0]
  GPIO_Init(LCD_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 80155b4:	463b      	mov	r3, r7
 80155b6:	4874      	ldr	r0, [pc, #464]	; (8015788 <LCD_DeInit+0x210>)
 80155b8:	4619      	mov	r1, r3
 80155ba:	f7f7 fc95 	bl	800cee8 <GPIO_Init>

  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MISO_PIN;
 80155be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80155c2:	603b      	str	r3, [r7, #0]
  GPIO_Init(LCD_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 80155c4:	463b      	mov	r3, r7
 80155c6:	4870      	ldr	r0, [pc, #448]	; (8015788 <LCD_DeInit+0x210>)
 80155c8:	4619      	mov	r1, r3
 80155ca:	f7f7 fc8d 	bl	800cee8 <GPIO_Init>
  
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MOSI_PIN;
 80155ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80155d2:	603b      	str	r3, [r7, #0]
  GPIO_Init(LCD_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 80155d4:	463b      	mov	r3, r7
 80155d6:	486c      	ldr	r0, [pc, #432]	; (8015788 <LCD_DeInit+0x210>)
 80155d8:	4619      	mov	r1, r3
 80155da:	f7f7 fc85 	bl	800cee8 <GPIO_Init>

  /* GPIOA configuration */
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_MCO);
 80155de:	486b      	ldr	r0, [pc, #428]	; (801578c <LCD_DeInit+0x214>)
 80155e0:	2103      	movs	r1, #3
 80155e2:	2200      	movs	r2, #0
 80155e4:	f7f7 fdee 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource4, GPIO_AF_MCO);
 80155e8:	4868      	ldr	r0, [pc, #416]	; (801578c <LCD_DeInit+0x214>)
 80155ea:	2104      	movs	r1, #4
 80155ec:	2200      	movs	r2, #0
 80155ee:	f7f7 fde9 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_MCO);
 80155f2:	4866      	ldr	r0, [pc, #408]	; (801578c <LCD_DeInit+0x214>)
 80155f4:	2106      	movs	r1, #6
 80155f6:	2200      	movs	r2, #0
 80155f8:	f7f7 fde4 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_MCO);
 80155fc:	4863      	ldr	r0, [pc, #396]	; (801578c <LCD_DeInit+0x214>)
 80155fe:	210b      	movs	r1, #11
 8015600:	2200      	movs	r2, #0
 8015602:	f7f7 fddf 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource12, GPIO_AF_MCO);
 8015606:	4861      	ldr	r0, [pc, #388]	; (801578c <LCD_DeInit+0x214>)
 8015608:	210c      	movs	r1, #12
 801560a:	2200      	movs	r2, #0
 801560c:	f7f7 fdda 	bl	800d1c4 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_6 |
 8015610:	f641 0358 	movw	r3, #6232	; 0x1858
 8015614:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_11 | GPIO_Pin_12;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8015616:	2302      	movs	r3, #2
 8015618:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 801561a:	2302      	movs	r3, #2
 801561c:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 801561e:	2300      	movs	r3, #0
 8015620:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8015622:	2300      	movs	r3, #0
 8015624:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8015626:	463b      	mov	r3, r7
 8015628:	4858      	ldr	r0, [pc, #352]	; (801578c <LCD_DeInit+0x214>)
 801562a:	4619      	mov	r1, r3
 801562c:	f7f7 fc5c 	bl	800cee8 <GPIO_Init>

  /* GPIOB configuration */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource0, GPIO_AF_MCO);
 8015630:	4857      	ldr	r0, [pc, #348]	; (8015790 <LCD_DeInit+0x218>)
 8015632:	2100      	movs	r1, #0
 8015634:	2200      	movs	r2, #0
 8015636:	f7f7 fdc5 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, GPIO_AF_MCO);
 801563a:	4855      	ldr	r0, [pc, #340]	; (8015790 <LCD_DeInit+0x218>)
 801563c:	2101      	movs	r1, #1
 801563e:	2200      	movs	r2, #0
 8015640:	f7f7 fdc0 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_MCO);
 8015644:	4852      	ldr	r0, [pc, #328]	; (8015790 <LCD_DeInit+0x218>)
 8015646:	2108      	movs	r1, #8
 8015648:	2200      	movs	r2, #0
 801564a:	f7f7 fdbb 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_MCO);
 801564e:	4850      	ldr	r0, [pc, #320]	; (8015790 <LCD_DeInit+0x218>)
 8015650:	2109      	movs	r1, #9
 8015652:	2200      	movs	r2, #0
 8015654:	f7f7 fdb6 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_MCO);
 8015658:	484d      	ldr	r0, [pc, #308]	; (8015790 <LCD_DeInit+0x218>)
 801565a:	210a      	movs	r1, #10
 801565c:	2200      	movs	r2, #0
 801565e:	f7f7 fdb1 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_MCO);
 8015662:	484b      	ldr	r0, [pc, #300]	; (8015790 <LCD_DeInit+0x218>)
 8015664:	210b      	movs	r1, #11
 8015666:	2200      	movs	r2, #0
 8015668:	f7f7 fdac 	bl	800d1c4 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  | GPIO_Pin_1  | GPIO_Pin_8    |
 801566c:	f640 7303 	movw	r3, #3843	; 0xf03
 8015670:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_9  |  GPIO_Pin_10 | GPIO_Pin_11;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8015672:	2302      	movs	r3, #2
 8015674:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8015676:	2302      	movs	r3, #2
 8015678:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 801567a:	2300      	movs	r3, #0
 801567c:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 801567e:	2300      	movs	r3, #0
 8015680:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8015682:	463b      	mov	r3, r7
 8015684:	4842      	ldr	r0, [pc, #264]	; (8015790 <LCD_DeInit+0x218>)
 8015686:	4619      	mov	r1, r3
 8015688:	f7f7 fc2e 	bl	800cee8 <GPIO_Init>
  
  /* GPIOC configuration */
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_MCO);
 801568c:	483d      	ldr	r0, [pc, #244]	; (8015784 <LCD_DeInit+0x20c>)
 801568e:	2106      	movs	r1, #6
 8015690:	2200      	movs	r2, #0
 8015692:	f7f7 fd97 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_MCO);
 8015696:	483b      	ldr	r0, [pc, #236]	; (8015784 <LCD_DeInit+0x20c>)
 8015698:	2107      	movs	r1, #7
 801569a:	2200      	movs	r2, #0
 801569c:	f7f7 fd92 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_MCO);
 80156a0:	4838      	ldr	r0, [pc, #224]	; (8015784 <LCD_DeInit+0x20c>)
 80156a2:	210a      	movs	r1, #10
 80156a4:	2200      	movs	r2, #0
 80156a6:	f7f7 fd8d 	bl	800d1c4 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6  | GPIO_Pin_7  | GPIO_Pin_10;
 80156aa:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80156ae:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80156b0:	2302      	movs	r3, #2
 80156b2:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80156b4:	2302      	movs	r3, #2
 80156b6:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80156b8:	2300      	movs	r3, #0
 80156ba:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80156bc:	2300      	movs	r3, #0
 80156be:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 80156c0:	463b      	mov	r3, r7
 80156c2:	4830      	ldr	r0, [pc, #192]	; (8015784 <LCD_DeInit+0x20c>)
 80156c4:	4619      	mov	r1, r3
 80156c6:	f7f7 fc0f 	bl	800cee8 <GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource3, GPIO_AF_MCO);
 80156ca:	4832      	ldr	r0, [pc, #200]	; (8015794 <LCD_DeInit+0x21c>)
 80156cc:	2103      	movs	r1, #3
 80156ce:	2200      	movs	r2, #0
 80156d0:	f7f7 fd78 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource6, GPIO_AF_MCO);
 80156d4:	482f      	ldr	r0, [pc, #188]	; (8015794 <LCD_DeInit+0x21c>)
 80156d6:	2106      	movs	r1, #6
 80156d8:	2200      	movs	r2, #0
 80156da:	f7f7 fd73 	bl	800d1c4 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3  | GPIO_Pin_6; 
 80156de:	2348      	movs	r3, #72	; 0x48
 80156e0:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80156e2:	2302      	movs	r3, #2
 80156e4:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80156e6:	2302      	movs	r3, #2
 80156e8:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80156ea:	2300      	movs	r3, #0
 80156ec:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80156ee:	2300      	movs	r3, #0
 80156f0:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOD, &GPIO_InitStructure);  
 80156f2:	463b      	mov	r3, r7
 80156f4:	4827      	ldr	r0, [pc, #156]	; (8015794 <LCD_DeInit+0x21c>)
 80156f6:	4619      	mov	r1, r3
 80156f8:	f7f7 fbf6 	bl	800cee8 <GPIO_Init>

  /* GPIOF configuration */
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource10, GPIO_AF_MCO);
 80156fc:	4822      	ldr	r0, [pc, #136]	; (8015788 <LCD_DeInit+0x210>)
 80156fe:	210a      	movs	r1, #10
 8015700:	2200      	movs	r2, #0
 8015702:	f7f7 fd5f 	bl	800d1c4 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; 
 8015706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801570a:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 801570c:	2302      	movs	r3, #2
 801570e:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8015710:	2302      	movs	r3, #2
 8015712:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8015714:	2300      	movs	r3, #0
 8015716:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8015718:	2300      	movs	r3, #0
 801571a:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOF, &GPIO_InitStructure);  
 801571c:	463b      	mov	r3, r7
 801571e:	481a      	ldr	r0, [pc, #104]	; (8015788 <LCD_DeInit+0x210>)
 8015720:	4619      	mov	r1, r3
 8015722:	f7f7 fbe1 	bl	800cee8 <GPIO_Init>

  /* GPIOG configuration */
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource6, GPIO_AF_MCO);
 8015726:	481c      	ldr	r0, [pc, #112]	; (8015798 <LCD_DeInit+0x220>)
 8015728:	2106      	movs	r1, #6
 801572a:	2200      	movs	r2, #0
 801572c:	f7f7 fd4a 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource7, GPIO_AF_MCO);
 8015730:	4819      	ldr	r0, [pc, #100]	; (8015798 <LCD_DeInit+0x220>)
 8015732:	2107      	movs	r1, #7
 8015734:	2200      	movs	r2, #0
 8015736:	f7f7 fd45 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource10, GPIO_AF_MCO);
 801573a:	4817      	ldr	r0, [pc, #92]	; (8015798 <LCD_DeInit+0x220>)
 801573c:	210a      	movs	r1, #10
 801573e:	2200      	movs	r2, #0
 8015740:	f7f7 fd40 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource11, GPIO_AF_MCO);
 8015744:	4814      	ldr	r0, [pc, #80]	; (8015798 <LCD_DeInit+0x220>)
 8015746:	210b      	movs	r1, #11
 8015748:	2200      	movs	r2, #0
 801574a:	f7f7 fd3b 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource12, GPIO_AF_MCO);
 801574e:	4812      	ldr	r0, [pc, #72]	; (8015798 <LCD_DeInit+0x220>)
 8015750:	210c      	movs	r1, #12
 8015752:	2200      	movs	r2, #0
 8015754:	f7f7 fd36 	bl	800d1c4 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6  | GPIO_Pin_7  | GPIO_Pin_10    |
 8015758:	f44f 53e6 	mov.w	r3, #7360	; 0x1cc0
 801575c:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_11 | GPIO_Pin_12;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 801575e:	2302      	movs	r3, #2
 8015760:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8015762:	2302      	movs	r3, #2
 8015764:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8015766:	2300      	movs	r3, #0
 8015768:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 801576a:	2300      	movs	r3, #0
 801576c:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOG, &GPIO_InitStructure);
 801576e:	463b      	mov	r3, r7
 8015770:	4809      	ldr	r0, [pc, #36]	; (8015798 <LCD_DeInit+0x220>)
 8015772:	4619      	mov	r1, r3
 8015774:	f7f7 fbb8 	bl	800cee8 <GPIO_Init>
}
 8015778:	3708      	adds	r7, #8
 801577a:	46bd      	mov	sp, r7
 801577c:	bd80      	pop	{r7, pc}
 801577e:	bf00      	nop
 8015780:	40015000 	.word	0x40015000
 8015784:	40020800 	.word	0x40020800
 8015788:	40021400 	.word	0x40021400
 801578c:	40020000 	.word	0x40020000
 8015790:	40020400 	.word	0x40020400
 8015794:	40020c00 	.word	0x40020c00
 8015798:	40021800 	.word	0x40021800

0801579c <LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval None
  */
void LCD_Init(void)
{ 
 801579c:	b580      	push	{r7, lr}
 801579e:	b090      	sub	sp, #64	; 0x40
 80157a0:	af00      	add	r7, sp, #0
  LTDC_InitTypeDef       LTDC_InitStruct;
  
  /* Configure the LCD Control pins ------------------------------------------*/
  LCD_CtrlLinesConfig();
 80157a2:	f001 fe87 	bl	80174b4 <LCD_CtrlLinesConfig>
  LCD_ChipSelect(DISABLE);
 80157a6:	2000      	movs	r0, #0
 80157a8:	f000 f8ac 	bl	8015904 <LCD_ChipSelect>
  LCD_ChipSelect(ENABLE);
 80157ac:	2001      	movs	r0, #1
 80157ae:	f000 f8a9 	bl	8015904 <LCD_ChipSelect>
  
  /* Configure the LCD_SPI interface -----------------------------------------*/
  LCD_SPIConfig(); 
 80157b2:	f001 febb 	bl	801752c <LCD_SPIConfig>
  
  /* Power on the LCD --------------------------------------------------------*/
  LCD_PowerOn();
 80157b6:	f001 fd29 	bl	801720c <LCD_PowerOn>
  
  /* Enable the LTDC Clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_LTDC, ENABLE);
 80157ba:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80157be:	2101      	movs	r1, #1
 80157c0:	f7fa fab2 	bl	800fd28 <RCC_APB2PeriphClockCmd>
  
  /* Enable the DMA2D Clock */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2D, ENABLE); 
 80157c4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80157c8:	2101      	movs	r1, #1
 80157ca:	f7fa fa35 	bl	800fc38 <RCC_AHB1PeriphClockCmd>
  
  /* Configure the LCD Control pins */
  LCD_AF_GPIOConfig();  
 80157ce:	f001 ff17 	bl	8017600 <LCD_AF_GPIOConfig>
  
  /* Configure the FMC Parallel interface : SDRAM is used as Frame Buffer for LCD */
  SDRAM_Init();
 80157d2:	f002 f809 	bl	80177e8 <SDRAM_Init>
  
  /* LTDC Configuration *********************************************************/  
  /* Polarity configuration */
  /* Initialize the horizontal synchronization polarity as active low */
  LTDC_InitStruct.LTDC_HSPolarity = LTDC_HSPolarity_AL;     
 80157d6:	2300      	movs	r3, #0
 80157d8:	607b      	str	r3, [r7, #4]
  /* Initialize the vertical synchronization polarity as active low */  
  LTDC_InitStruct.LTDC_VSPolarity = LTDC_VSPolarity_AL;     
 80157da:	2300      	movs	r3, #0
 80157dc:	60bb      	str	r3, [r7, #8]
  /* Initialize the data enable polarity as active low */
  LTDC_InitStruct.LTDC_DEPolarity = LTDC_DEPolarity_AL;     
 80157de:	2300      	movs	r3, #0
 80157e0:	60fb      	str	r3, [r7, #12]
  /* Initialize the pixel clock polarity as input pixel clock */ 
  LTDC_InitStruct.LTDC_PCPolarity = LTDC_PCPolarity_IPC;
 80157e2:	2300      	movs	r3, #0
 80157e4:	613b      	str	r3, [r7, #16]
  
  /* Configure R,G,B component values for LCD background color */                   
  LTDC_InitStruct.LTDC_BackgroundRedValue = 0;            
 80157e6:	2300      	movs	r3, #0
 80157e8:	637b      	str	r3, [r7, #52]	; 0x34
  LTDC_InitStruct.LTDC_BackgroundGreenValue = 0;          
 80157ea:	2300      	movs	r3, #0
 80157ec:	63bb      	str	r3, [r7, #56]	; 0x38
  LTDC_InitStruct.LTDC_BackgroundBlueValue = 0;  
 80157ee:	2300      	movs	r3, #0
 80157f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* Enable Pixel Clock */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAI_N = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAI_R = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / RCC_PLLSAIDivR = 48/8 = 6 Mhz */
  RCC_PLLSAIConfig(192, 7, 4);
 80157f2:	20c0      	movs	r0, #192	; 0xc0
 80157f4:	2107      	movs	r1, #7
 80157f6:	2204      	movs	r2, #4
 80157f8:	f7f9 ff7e 	bl	800f6f8 <RCC_PLLSAIConfig>
  RCC_LTDCCLKDivConfig(RCC_PLLSAIDivR_Div8);
 80157fc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8015800:	f7fa f9ee 	bl	800fbe0 <RCC_LTDCCLKDivConfig>
  
  /* Enable PLLSAI Clock */
  RCC_PLLSAICmd(ENABLE);
 8015804:	2001      	movs	r0, #1
 8015806:	f7f9 ff8f 	bl	800f728 <RCC_PLLSAICmd>
  /* Wait for PLLSAI activation */
  while(RCC_GetFlagStatus(RCC_FLAG_PLLSAIRDY) == RESET)
 801580a:	bf00      	nop
 801580c:	203d      	movs	r0, #61	; 0x3d
 801580e:	f7fa fbf9 	bl	8010004 <RCC_GetFlagStatus>
 8015812:	4603      	mov	r3, r0
 8015814:	2b00      	cmp	r3, #0
 8015816:	d0f9      	beq.n	801580c <LCD_Init+0x70>
  {
  }
  
  /* Timing configuration */  
  /* Configure horizontal synchronization width */     
  LTDC_InitStruct.LTDC_HorizontalSync = 9;
 8015818:	2309      	movs	r3, #9
 801581a:	617b      	str	r3, [r7, #20]
  /* Configure vertical synchronization height */
  LTDC_InitStruct.LTDC_VerticalSync = 1;
 801581c:	2301      	movs	r3, #1
 801581e:	61bb      	str	r3, [r7, #24]
  /* Configure accumulated horizontal back porch */
  LTDC_InitStruct.LTDC_AccumulatedHBP = 29; 
 8015820:	231d      	movs	r3, #29
 8015822:	61fb      	str	r3, [r7, #28]
  /* Configure accumulated vertical back porch */
  LTDC_InitStruct.LTDC_AccumulatedVBP = 3;  
 8015824:	2303      	movs	r3, #3
 8015826:	623b      	str	r3, [r7, #32]
  /* Configure accumulated active width */  
  LTDC_InitStruct.LTDC_AccumulatedActiveW = 269;
 8015828:	f240 130d 	movw	r3, #269	; 0x10d
 801582c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure accumulated active height */
  LTDC_InitStruct.LTDC_AccumulatedActiveH = 323;
 801582e:	f240 1343 	movw	r3, #323	; 0x143
 8015832:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Configure total width */
  LTDC_InitStruct.LTDC_TotalWidth = 279; 
 8015834:	f240 1317 	movw	r3, #279	; 0x117
 8015838:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure total height */
  LTDC_InitStruct.LTDC_TotalHeigh = 327;
 801583a:	f240 1347 	movw	r3, #327	; 0x147
 801583e:	633b      	str	r3, [r7, #48]	; 0x30
  
  LTDC_Init(&LTDC_InitStruct);
 8015840:	1d3b      	adds	r3, r7, #4
 8015842:	4618      	mov	r0, r3
 8015844:	f7f8 ff94 	bl	800e770 <LTDC_Init>
}  
 8015848:	3740      	adds	r7, #64	; 0x40
 801584a:	46bd      	mov	sp, r7
 801584c:	bd80      	pop	{r7, pc}
 801584e:	bf00      	nop

08015850 <LCD_LayerInit>:
  * @brief  Initializes the LCD Layers.
  * @param  None
  * @retval None
  */
void LCD_LayerInit(void)
{
 8015850:	b580      	push	{r7, lr}
 8015852:	b090      	sub	sp, #64	; 0x40
 8015854:	af00      	add	r7, sp, #0
  /* In this case all the active display area is used to display a picture then :
  Horizontal start = horizontal synchronization + Horizontal back porch = 30 
  Horizontal stop = Horizontal start + window width -1 = 30 + 240 -1
  Vertical start   = vertical synchronization + vertical back porch     = 4
  Vertical stop   = Vertical start + window height -1  = 4 + 320 -1      */      
  LTDC_Layer_InitStruct.LTDC_HorizontalStart = 30;
 8015856:	231e      	movs	r3, #30
 8015858:	603b      	str	r3, [r7, #0]
  LTDC_Layer_InitStruct.LTDC_HorizontalStop = (LCD_PIXEL_WIDTH + 30 - 1); 
 801585a:	f240 130d 	movw	r3, #269	; 0x10d
 801585e:	607b      	str	r3, [r7, #4]
  LTDC_Layer_InitStruct.LTDC_VerticalStart = 4;
 8015860:	2304      	movs	r3, #4
 8015862:	60bb      	str	r3, [r7, #8]
  LTDC_Layer_InitStruct.LTDC_VerticalStop = (LCD_PIXEL_HEIGHT + 4 - 1);
 8015864:	f240 1343 	movw	r3, #323	; 0x143
 8015868:	60fb      	str	r3, [r7, #12]
  
  /* Pixel Format configuration*/
  LTDC_Layer_InitStruct.LTDC_PixelFormat = LTDC_Pixelformat_RGB565;
 801586a:	2302      	movs	r3, #2
 801586c:	613b      	str	r3, [r7, #16]
  /* Alpha constant (255 totally opaque) */
  LTDC_Layer_InitStruct.LTDC_ConstantAlpha = 255; 
 801586e:	23ff      	movs	r3, #255	; 0xff
 8015870:	617b      	str	r3, [r7, #20]
  /* Default Color configuration (configure A,R,G,B component values) */          
  LTDC_Layer_InitStruct.LTDC_DefaultColorBlue = 0;        
 8015872:	2300      	movs	r3, #0
 8015874:	61bb      	str	r3, [r7, #24]
  LTDC_Layer_InitStruct.LTDC_DefaultColorGreen = 0;       
 8015876:	2300      	movs	r3, #0
 8015878:	61fb      	str	r3, [r7, #28]
  LTDC_Layer_InitStruct.LTDC_DefaultColorRed = 0;         
 801587a:	2300      	movs	r3, #0
 801587c:	623b      	str	r3, [r7, #32]
  LTDC_Layer_InitStruct.LTDC_DefaultColorAlpha = 0;
 801587e:	2300      	movs	r3, #0
 8015880:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure blending factors */       
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_CA;    
 8015882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015886:	62bb      	str	r3, [r7, #40]	; 0x28
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_CA;
 8015888:	2305      	movs	r3, #5
 801588a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* the length of one line of pixels in bytes + 3 then :
  Line Lenth = Active high width x number of bytes per pixel + 3 
  Active high width         = LCD_PIXEL_WIDTH 
  number of bytes per pixel = 2    (pixel_format : RGB565) 
  */
  LTDC_Layer_InitStruct.LTDC_CFBLineLength = ((LCD_PIXEL_WIDTH * 2) + 3);
 801588c:	f240 13e3 	movw	r3, #483	; 0x1e3
 8015890:	637b      	str	r3, [r7, #52]	; 0x34
  /* the pitch is the increment from the start of one line of pixels to the 
  start of the next line in bytes, then :
  Pitch = Active high width x number of bytes per pixel */ 
  LTDC_Layer_InitStruct.LTDC_CFBPitch = (LCD_PIXEL_WIDTH * 2);
 8015892:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8015896:	63bb      	str	r3, [r7, #56]	; 0x38
  
  /* Configure the number of lines */  
  LTDC_Layer_InitStruct.LTDC_CFBLineNumber = LCD_PIXEL_HEIGHT;
 8015898:	f44f 73a0 	mov.w	r3, #320	; 0x140
 801589c:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* Start Address configuration : the LCD Frame buffer is defined on SDRAM */    
  LTDC_Layer_InitStruct.LTDC_CFBStartAdress = LCD_FRAME_BUFFER;
 801589e:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80158a2:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Initialize LTDC layer 1 */
  LTDC_LayerInit(LTDC_Layer1, &LTDC_Layer_InitStruct);
 80158a4:	463b      	mov	r3, r7
 80158a6:	4813      	ldr	r0, [pc, #76]	; (80158f4 <LCD_LayerInit+0xa4>)
 80158a8:	4619      	mov	r1, r3
 80158aa:	f7f9 f8bf 	bl	800ea2c <LTDC_LayerInit>
  
  /* Configure Layer2 */
  /* Start Address configuration : the LCD Frame buffer is defined on SDRAM w/ Offset */     
  LTDC_Layer_InitStruct.LTDC_CFBStartAdress = LCD_FRAME_BUFFER + BUFFER_OFFSET;
 80158ae:	4b12      	ldr	r3, [pc, #72]	; (80158f8 <LCD_LayerInit+0xa8>)
 80158b0:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Configure blending factors */       
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_PAxCA;    
 80158b2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80158b6:	62bb      	str	r3, [r7, #40]	; 0x28
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_PAxCA;
 80158b8:	2307      	movs	r3, #7
 80158ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Initialize LTDC layer 2 */
  LTDC_LayerInit(LTDC_Layer2, &LTDC_Layer_InitStruct);
 80158bc:	463b      	mov	r3, r7
 80158be:	480f      	ldr	r0, [pc, #60]	; (80158fc <LCD_LayerInit+0xac>)
 80158c0:	4619      	mov	r1, r3
 80158c2:	f7f9 f8b3 	bl	800ea2c <LTDC_LayerInit>
  
  /* LTDC configuration reload */  
  LTDC_ReloadConfig(LTDC_IMReload);
 80158c6:	2001      	movs	r0, #1
 80158c8:	f7f9 f8a2 	bl	800ea10 <LTDC_ReloadConfig>
  
  /* Enable foreground & background Layers */
  LTDC_LayerCmd(LTDC_Layer1, ENABLE); 
 80158cc:	4809      	ldr	r0, [pc, #36]	; (80158f4 <LCD_LayerInit+0xa4>)
 80158ce:	2101      	movs	r1, #1
 80158d0:	f7f9 f980 	bl	800ebd4 <LTDC_LayerCmd>
  LTDC_LayerCmd(LTDC_Layer2, ENABLE);
 80158d4:	4809      	ldr	r0, [pc, #36]	; (80158fc <LCD_LayerInit+0xac>)
 80158d6:	2101      	movs	r1, #1
 80158d8:	f7f9 f97c 	bl	800ebd4 <LTDC_LayerCmd>
  
  /* LTDC configuration reload */  
  LTDC_ReloadConfig(LTDC_IMReload);
 80158dc:	2001      	movs	r0, #1
 80158de:	f7f9 f897 	bl	800ea10 <LTDC_ReloadConfig>
  
  /* Set default font */    
  LCD_SetFont(&LCD_DEFAULT_FONT); 
 80158e2:	4807      	ldr	r0, [pc, #28]	; (8015900 <LCD_LayerInit+0xb0>)
 80158e4:	f000 f890 	bl	8015a08 <LCD_SetFont>
  
  /* dithering activation */
  LTDC_DitherCmd(ENABLE);
 80158e8:	2001      	movs	r0, #1
 80158ea:	f7f9 f829 	bl	800e940 <LTDC_DitherCmd>
}
 80158ee:	3740      	adds	r7, #64	; 0x40
 80158f0:	46bd      	mov	sp, r7
 80158f2:	bd80      	pop	{r7, pc}
 80158f4:	40016884 	.word	0x40016884
 80158f8:	d0050000 	.word	0xd0050000
 80158fc:	40016904 	.word	0x40016904
 8015900:	20000094 	.word	0x20000094

08015904 <LCD_ChipSelect>:
  * @brief  Controls LCD Chip Select (CS) pin
  * @param  NewState CS pin state
  * @retval None
  */
void LCD_ChipSelect(FunctionalState NewState)
{
 8015904:	b580      	push	{r7, lr}
 8015906:	b082      	sub	sp, #8
 8015908:	af00      	add	r7, sp, #0
 801590a:	4603      	mov	r3, r0
 801590c:	71fb      	strb	r3, [r7, #7]
  if (NewState == DISABLE)
 801590e:	79fb      	ldrb	r3, [r7, #7]
 8015910:	2b00      	cmp	r3, #0
 8015912:	d104      	bne.n	801591e <LCD_ChipSelect+0x1a>
  {
    GPIO_ResetBits(LCD_NCS_GPIO_PORT, LCD_NCS_PIN); /* CS pin low: LCD disabled */
 8015914:	4805      	ldr	r0, [pc, #20]	; (801592c <LCD_ChipSelect+0x28>)
 8015916:	2104      	movs	r1, #4
 8015918:	f7f7 fc0e 	bl	800d138 <GPIO_ResetBits>
 801591c:	e003      	b.n	8015926 <LCD_ChipSelect+0x22>
  }
  else
  {
    GPIO_SetBits(LCD_NCS_GPIO_PORT, LCD_NCS_PIN); /* CS pin high: LCD enabled */
 801591e:	4803      	ldr	r0, [pc, #12]	; (801592c <LCD_ChipSelect+0x28>)
 8015920:	2104      	movs	r1, #4
 8015922:	f7f7 fbfb 	bl	800d11c <GPIO_SetBits>
  }
}
 8015926:	3708      	adds	r7, #8
 8015928:	46bd      	mov	sp, r7
 801592a:	bd80      	pop	{r7, pc}
 801592c:	40020800 	.word	0x40020800

08015930 <LCD_SetLayer>:
  * @brief  Sets the LCD Layer.
  * @param  Layerx: specifies the Layer foreground or background.
  * @retval None
  */
void LCD_SetLayer(uint32_t Layerx)
{
 8015930:	b480      	push	{r7}
 8015932:	b083      	sub	sp, #12
 8015934:	af00      	add	r7, sp, #0
 8015936:	6078      	str	r0, [r7, #4]
  if (Layerx == LCD_BACKGROUND_LAYER)
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	2b00      	cmp	r3, #0
 801593c:	d107      	bne.n	801594e <LCD_SetLayer+0x1e>
  {
    CurrentFrameBuffer = LCD_FRAME_BUFFER; 
 801593e:	4b09      	ldr	r3, [pc, #36]	; (8015964 <LCD_SetLayer+0x34>)
 8015940:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
 8015944:	601a      	str	r2, [r3, #0]
    CurrentLayer = LCD_BACKGROUND_LAYER;
 8015946:	4b08      	ldr	r3, [pc, #32]	; (8015968 <LCD_SetLayer+0x38>)
 8015948:	2200      	movs	r2, #0
 801594a:	601a      	str	r2, [r3, #0]
 801594c:	e005      	b.n	801595a <LCD_SetLayer+0x2a>
  }
  else
  {
    CurrentFrameBuffer = LCD_FRAME_BUFFER + BUFFER_OFFSET;
 801594e:	4b05      	ldr	r3, [pc, #20]	; (8015964 <LCD_SetLayer+0x34>)
 8015950:	4a06      	ldr	r2, [pc, #24]	; (801596c <LCD_SetLayer+0x3c>)
 8015952:	601a      	str	r2, [r3, #0]
    CurrentLayer = LCD_FOREGROUND_LAYER;
 8015954:	4b04      	ldr	r3, [pc, #16]	; (8015968 <LCD_SetLayer+0x38>)
 8015956:	2201      	movs	r2, #1
 8015958:	601a      	str	r2, [r3, #0]
  }
}  
 801595a:	370c      	adds	r7, #12
 801595c:	46bd      	mov	sp, r7
 801595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015962:	4770      	bx	lr
 8015964:	200000b8 	.word	0x200000b8
 8015968:	20005350 	.word	0x20005350
 801596c:	d0050000 	.word	0xd0050000

08015970 <LCD_SetColors>:
  * @param  TextColor: specifies the Text Color.
  * @param  BackColor: specifies the Background Color.
  * @retval None
  */
void LCD_SetColors(uint16_t TextColor, uint16_t BackColor)
{
 8015970:	b480      	push	{r7}
 8015972:	b083      	sub	sp, #12
 8015974:	af00      	add	r7, sp, #0
 8015976:	4602      	mov	r2, r0
 8015978:	460b      	mov	r3, r1
 801597a:	80fa      	strh	r2, [r7, #6]
 801597c:	80bb      	strh	r3, [r7, #4]
  CurrentTextColor = TextColor; 
 801597e:	4b05      	ldr	r3, [pc, #20]	; (8015994 <LCD_SetColors+0x24>)
 8015980:	88fa      	ldrh	r2, [r7, #6]
 8015982:	801a      	strh	r2, [r3, #0]
  CurrentBackColor = BackColor;
 8015984:	4b04      	ldr	r3, [pc, #16]	; (8015998 <LCD_SetColors+0x28>)
 8015986:	88ba      	ldrh	r2, [r7, #4]
 8015988:	801a      	strh	r2, [r3, #0]
}
 801598a:	370c      	adds	r7, #12
 801598c:	46bd      	mov	sp, r7
 801598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015992:	4770      	bx	lr
 8015994:	2000534c 	.word	0x2000534c
 8015998:	200000b4 	.word	0x200000b4

0801599c <LCD_GetColors>:
  * @param  BackColor: pointer to the variable that will contain the Background 
            Color.
  * @retval None
  */
void LCD_GetColors(uint16_t *TextColor, uint16_t *BackColor)
{
 801599c:	b480      	push	{r7}
 801599e:	b083      	sub	sp, #12
 80159a0:	af00      	add	r7, sp, #0
 80159a2:	6078      	str	r0, [r7, #4]
 80159a4:	6039      	str	r1, [r7, #0]
  *TextColor = CurrentTextColor;
 80159a6:	4b06      	ldr	r3, [pc, #24]	; (80159c0 <LCD_GetColors+0x24>)
 80159a8:	881a      	ldrh	r2, [r3, #0]
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	801a      	strh	r2, [r3, #0]
  *BackColor = CurrentBackColor;
 80159ae:	4b05      	ldr	r3, [pc, #20]	; (80159c4 <LCD_GetColors+0x28>)
 80159b0:	881a      	ldrh	r2, [r3, #0]
 80159b2:	683b      	ldr	r3, [r7, #0]
 80159b4:	801a      	strh	r2, [r3, #0]
}
 80159b6:	370c      	adds	r7, #12
 80159b8:	46bd      	mov	sp, r7
 80159ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159be:	4770      	bx	lr
 80159c0:	2000534c 	.word	0x2000534c
 80159c4:	200000b4 	.word	0x200000b4

080159c8 <LCD_SetTextColor>:
  * @brief  Sets the Text color.
  * @param  Color: specifies the Text color code RGB(5-6-5).
  * @retval None
  */
void LCD_SetTextColor(uint16_t Color)
{
 80159c8:	b480      	push	{r7}
 80159ca:	b083      	sub	sp, #12
 80159cc:	af00      	add	r7, sp, #0
 80159ce:	4603      	mov	r3, r0
 80159d0:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 80159d2:	4b04      	ldr	r3, [pc, #16]	; (80159e4 <LCD_SetTextColor+0x1c>)
 80159d4:	88fa      	ldrh	r2, [r7, #6]
 80159d6:	801a      	strh	r2, [r3, #0]
}
 80159d8:	370c      	adds	r7, #12
 80159da:	46bd      	mov	sp, r7
 80159dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159e0:	4770      	bx	lr
 80159e2:	bf00      	nop
 80159e4:	2000534c 	.word	0x2000534c

080159e8 <LCD_SetBackColor>:
  * @brief  Sets the Background color.
  * @param  Color: specifies the Background color code RGB(5-6-5).
  * @retval None
  */
void LCD_SetBackColor(uint16_t Color)
{
 80159e8:	b480      	push	{r7}
 80159ea:	b083      	sub	sp, #12
 80159ec:	af00      	add	r7, sp, #0
 80159ee:	4603      	mov	r3, r0
 80159f0:	80fb      	strh	r3, [r7, #6]
  CurrentBackColor = Color;
 80159f2:	4b04      	ldr	r3, [pc, #16]	; (8015a04 <LCD_SetBackColor+0x1c>)
 80159f4:	88fa      	ldrh	r2, [r7, #6]
 80159f6:	801a      	strh	r2, [r3, #0]
}
 80159f8:	370c      	adds	r7, #12
 80159fa:	46bd      	mov	sp, r7
 80159fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a00:	4770      	bx	lr
 8015a02:	bf00      	nop
 8015a04:	200000b4 	.word	0x200000b4

08015a08 <LCD_SetFont>:
  * @brief  Sets the Text Font.
  * @param  fonts: specifies the font to be used.
  * @retval None
  */
void LCD_SetFont(sFONT *fonts)
{
 8015a08:	b480      	push	{r7}
 8015a0a:	b083      	sub	sp, #12
 8015a0c:	af00      	add	r7, sp, #0
 8015a0e:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8015a10:	4b03      	ldr	r3, [pc, #12]	; (8015a20 <LCD_SetFont+0x18>)
 8015a12:	687a      	ldr	r2, [r7, #4]
 8015a14:	601a      	str	r2, [r3, #0]
}
 8015a16:	370c      	adds	r7, #12
 8015a18:	46bd      	mov	sp, r7
 8015a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a1e:	4770      	bx	lr
 8015a20:	20005348 	.word	0x20005348

08015a24 <LCD_SetTransparency>:
  * @param  transparency: specifies the transparency, 
  *         This parameter must range from 0x00 to 0xFF.
  * @retval None
  */
void LCD_SetTransparency(uint8_t transparency)
{
 8015a24:	b580      	push	{r7, lr}
 8015a26:	b082      	sub	sp, #8
 8015a28:	af00      	add	r7, sp, #0
 8015a2a:	4603      	mov	r3, r0
 8015a2c:	71fb      	strb	r3, [r7, #7]
  if (CurrentLayer == LCD_BACKGROUND_LAYER)
 8015a2e:	4b0a      	ldr	r3, [pc, #40]	; (8015a58 <LCD_SetTransparency+0x34>)
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d105      	bne.n	8015a42 <LCD_SetTransparency+0x1e>
  {
    LTDC_LayerAlpha(LTDC_Layer1, transparency);
 8015a36:	79fb      	ldrb	r3, [r7, #7]
 8015a38:	4808      	ldr	r0, [pc, #32]	; (8015a5c <LCD_SetTransparency+0x38>)
 8015a3a:	4619      	mov	r1, r3
 8015a3c:	f7f9 fa48 	bl	800eed0 <LTDC_LayerAlpha>
 8015a40:	e004      	b.n	8015a4c <LCD_SetTransparency+0x28>
  }
  else
  {     
    LTDC_LayerAlpha(LTDC_Layer2, transparency);
 8015a42:	79fb      	ldrb	r3, [r7, #7]
 8015a44:	4806      	ldr	r0, [pc, #24]	; (8015a60 <LCD_SetTransparency+0x3c>)
 8015a46:	4619      	mov	r1, r3
 8015a48:	f7f9 fa42 	bl	800eed0 <LTDC_LayerAlpha>
  }
  LTDC_ReloadConfig(LTDC_IMReload);
 8015a4c:	2001      	movs	r0, #1
 8015a4e:	f7f8 ffdf 	bl	800ea10 <LTDC_ReloadConfig>
}
 8015a52:	3708      	adds	r7, #8
 8015a54:	46bd      	mov	sp, r7
 8015a56:	bd80      	pop	{r7, pc}
 8015a58:	20005350 	.word	0x20005350
 8015a5c:	40016884 	.word	0x40016884
 8015a60:	40016904 	.word	0x40016904

08015a64 <LCD_GetFont>:
  * @brief  Gets the Text Font.
  * @param  None.
  * @retval the used font.
  */
sFONT *LCD_GetFont(void)
{
 8015a64:	b480      	push	{r7}
 8015a66:	af00      	add	r7, sp, #0
  return LCD_Currentfonts;
 8015a68:	4b03      	ldr	r3, [pc, #12]	; (8015a78 <LCD_GetFont+0x14>)
 8015a6a:	681b      	ldr	r3, [r3, #0]
}
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	46bd      	mov	sp, r7
 8015a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a74:	4770      	bx	lr
 8015a76:	bf00      	nop
 8015a78:	20005348 	.word	0x20005348

08015a7c <LCD_ClearLine>:
  *                                      0..26 if LCD_Currentfonts is Font12x12 or Font8x12
  *                                      0..39 if LCD_Currentfonts is Font8x8
  * @retval None
  */
void LCD_ClearLine(uint16_t Line)
{
 8015a7c:	b580      	push	{r7, lr}
 8015a7e:	b084      	sub	sp, #16
 8015a80:	af00      	add	r7, sp, #0
 8015a82:	4603      	mov	r3, r0
 8015a84:	80fb      	strh	r3, [r7, #6]
  uint16_t refcolumn = 0;
 8015a86:	2300      	movs	r3, #0
 8015a88:	81fb      	strh	r3, [r7, #14]
  /* Send the string character by character on lCD */
  while ((refcolumn < LCD_PIXEL_WIDTH) && (((refcolumn + LCD_Currentfonts->Width)& 0xFFFF) >= LCD_Currentfonts->Width))
 8015a8a:	e00c      	b.n	8015aa6 <LCD_ClearLine+0x2a>
  {
    /* Display one character on LCD */
    LCD_DisplayChar(Line, refcolumn, ' ');
 8015a8c:	88fa      	ldrh	r2, [r7, #6]
 8015a8e:	89fb      	ldrh	r3, [r7, #14]
 8015a90:	4610      	mov	r0, r2
 8015a92:	4619      	mov	r1, r3
 8015a94:	2220      	movs	r2, #32
 8015a96:	f000 f93d 	bl	8015d14 <LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += LCD_Currentfonts->Width;
 8015a9a:	4b0b      	ldr	r3, [pc, #44]	; (8015ac8 <LCD_ClearLine+0x4c>)
 8015a9c:	681b      	ldr	r3, [r3, #0]
 8015a9e:	889a      	ldrh	r2, [r3, #4]
 8015aa0:	89fb      	ldrh	r3, [r7, #14]
 8015aa2:	4413      	add	r3, r2
 8015aa4:	81fb      	strh	r3, [r7, #14]
  */
void LCD_ClearLine(uint16_t Line)
{
  uint16_t refcolumn = 0;
  /* Send the string character by character on lCD */
  while ((refcolumn < LCD_PIXEL_WIDTH) && (((refcolumn + LCD_Currentfonts->Width)& 0xFFFF) >= LCD_Currentfonts->Width))
 8015aa6:	89fb      	ldrh	r3, [r7, #14]
 8015aa8:	2bef      	cmp	r3, #239	; 0xef
 8015aaa:	d80a      	bhi.n	8015ac2 <LCD_ClearLine+0x46>
 8015aac:	89fa      	ldrh	r2, [r7, #14]
 8015aae:	4b06      	ldr	r3, [pc, #24]	; (8015ac8 <LCD_ClearLine+0x4c>)
 8015ab0:	681b      	ldr	r3, [r3, #0]
 8015ab2:	889b      	ldrh	r3, [r3, #4]
 8015ab4:	4413      	add	r3, r2
 8015ab6:	b29a      	uxth	r2, r3
 8015ab8:	4b03      	ldr	r3, [pc, #12]	; (8015ac8 <LCD_ClearLine+0x4c>)
 8015aba:	681b      	ldr	r3, [r3, #0]
 8015abc:	889b      	ldrh	r3, [r3, #4]
 8015abe:	429a      	cmp	r2, r3
 8015ac0:	dae4      	bge.n	8015a8c <LCD_ClearLine+0x10>
    /* Display one character on LCD */
    LCD_DisplayChar(Line, refcolumn, ' ');
    /* Decrement the column position by 16 */
    refcolumn += LCD_Currentfonts->Width;
  }
}
 8015ac2:	3710      	adds	r7, #16
 8015ac4:	46bd      	mov	sp, r7
 8015ac6:	bd80      	pop	{r7, pc}
 8015ac8:	20005348 	.word	0x20005348

08015acc <LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background.
  * @retval None
  */
void LCD_Clear(uint16_t Color)
{
 8015acc:	b480      	push	{r7}
 8015ace:	b085      	sub	sp, #20
 8015ad0:	af00      	add	r7, sp, #0
 8015ad2:	4603      	mov	r3, r0
 8015ad4:	80fb      	strh	r3, [r7, #6]
  uint32_t index = 0;
 8015ad6:	2300      	movs	r3, #0
 8015ad8:	60fb      	str	r3, [r7, #12]
  
  /* erase memory */
  for (index = 0x00; index < BUFFER_OFFSET; index++)
 8015ada:	2300      	movs	r3, #0
 8015adc:	60fb      	str	r3, [r7, #12]
 8015ade:	e009      	b.n	8015af4 <LCD_Clear+0x28>
  {
    *(__IO uint16_t*)(CurrentFrameBuffer + (2*index)) = Color;
 8015ae0:	68fb      	ldr	r3, [r7, #12]
 8015ae2:	005a      	lsls	r2, r3, #1
 8015ae4:	4b08      	ldr	r3, [pc, #32]	; (8015b08 <LCD_Clear+0x3c>)
 8015ae6:	681b      	ldr	r3, [r3, #0]
 8015ae8:	4413      	add	r3, r2
 8015aea:	88fa      	ldrh	r2, [r7, #6]
 8015aec:	801a      	strh	r2, [r3, #0]
void LCD_Clear(uint16_t Color)
{
  uint32_t index = 0;
  
  /* erase memory */
  for (index = 0x00; index < BUFFER_OFFSET; index++)
 8015aee:	68fb      	ldr	r3, [r7, #12]
 8015af0:	3301      	adds	r3, #1
 8015af2:	60fb      	str	r3, [r7, #12]
 8015af4:	68fb      	ldr	r3, [r7, #12]
 8015af6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8015afa:	d3f1      	bcc.n	8015ae0 <LCD_Clear+0x14>
  {
    *(__IO uint16_t*)(CurrentFrameBuffer + (2*index)) = Color;
  } 
}
 8015afc:	3714      	adds	r7, #20
 8015afe:	46bd      	mov	sp, r7
 8015b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b04:	4770      	bx	lr
 8015b06:	bf00      	nop
 8015b08:	200000b8 	.word	0x200000b8

08015b0c <LCD_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position. 
  * @retval Display Address
  */
uint32_t LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
{  
 8015b0c:	b480      	push	{r7}
 8015b0e:	b083      	sub	sp, #12
 8015b10:	af00      	add	r7, sp, #0
 8015b12:	4602      	mov	r2, r0
 8015b14:	460b      	mov	r3, r1
 8015b16:	80fa      	strh	r2, [r7, #6]
 8015b18:	80bb      	strh	r3, [r7, #4]
  return CurrentFrameBuffer + 2*(Xpos + (LCD_PIXEL_WIDTH*Ypos));
 8015b1a:	88f9      	ldrh	r1, [r7, #6]
 8015b1c:	88ba      	ldrh	r2, [r7, #4]
 8015b1e:	4613      	mov	r3, r2
 8015b20:	011b      	lsls	r3, r3, #4
 8015b22:	1a9b      	subs	r3, r3, r2
 8015b24:	011b      	lsls	r3, r3, #4
 8015b26:	440b      	add	r3, r1
 8015b28:	005b      	lsls	r3, r3, #1
 8015b2a:	461a      	mov	r2, r3
 8015b2c:	4b04      	ldr	r3, [pc, #16]	; (8015b40 <LCD_SetCursor+0x34>)
 8015b2e:	681b      	ldr	r3, [r3, #0]
 8015b30:	4413      	add	r3, r2
}
 8015b32:	4618      	mov	r0, r3
 8015b34:	370c      	adds	r7, #12
 8015b36:	46bd      	mov	sp, r7
 8015b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b3c:	4770      	bx	lr
 8015b3e:	bf00      	nop
 8015b40:	200000b8 	.word	0x200000b8

08015b44 <LCD_SetColorKeying>:
  * @brief  Config and Sets the color Keying.
  * @param  RGBValue: Specifies the Color reference. 
  * @retval None
  */
void LCD_SetColorKeying(uint32_t RGBValue)
{  
 8015b44:	b580      	push	{r7, lr}
 8015b46:	b086      	sub	sp, #24
 8015b48:	af00      	add	r7, sp, #0
 8015b4a:	6078      	str	r0, [r7, #4]
  LTDC_ColorKeying_InitTypeDef   LTDC_colorkeying_InitStruct;
  
  /* configure the color Keying */
  LTDC_colorkeying_InitStruct.LTDC_ColorKeyBlue = 0x0000FF & RGBValue;
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	b2db      	uxtb	r3, r3
 8015b50:	60fb      	str	r3, [r7, #12]
  LTDC_colorkeying_InitStruct.LTDC_ColorKeyGreen = (0x00FF00 & RGBValue) >> 8;
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015b58:	0a1b      	lsrs	r3, r3, #8
 8015b5a:	613b      	str	r3, [r7, #16]
  LTDC_colorkeying_InitStruct.LTDC_ColorKeyRed = (0xFF0000 & RGBValue) >> 16;  
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8015b62:	0c1b      	lsrs	r3, r3, #16
 8015b64:	617b      	str	r3, [r7, #20]

  if (CurrentLayer == LCD_BACKGROUND_LAYER)
 8015b66:	4b0e      	ldr	r3, [pc, #56]	; (8015ba0 <LCD_SetColorKeying+0x5c>)
 8015b68:	681b      	ldr	r3, [r3, #0]
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	d10a      	bne.n	8015b84 <LCD_SetColorKeying+0x40>
  {   
    /* Enable the color Keying for Layer1 */
    LTDC_ColorKeyingConfig(LTDC_Layer1, &LTDC_colorkeying_InitStruct, ENABLE);
 8015b6e:	f107 030c 	add.w	r3, r7, #12
 8015b72:	480c      	ldr	r0, [pc, #48]	; (8015ba4 <LCD_SetColorKeying+0x60>)
 8015b74:	4619      	mov	r1, r3
 8015b76:	2201      	movs	r2, #1
 8015b78:	f7f9 f890 	bl	800ec9c <LTDC_ColorKeyingConfig>
    LTDC_ReloadConfig(LTDC_IMReload);
 8015b7c:	2001      	movs	r0, #1
 8015b7e:	f7f8 ff47 	bl	800ea10 <LTDC_ReloadConfig>
 8015b82:	e009      	b.n	8015b98 <LCD_SetColorKeying+0x54>
  }
  else
  {
    /* Enable the color Keying for Layer2 */
    LTDC_ColorKeyingConfig(LTDC_Layer2, &LTDC_colorkeying_InitStruct, ENABLE);
 8015b84:	f107 030c 	add.w	r3, r7, #12
 8015b88:	4807      	ldr	r0, [pc, #28]	; (8015ba8 <LCD_SetColorKeying+0x64>)
 8015b8a:	4619      	mov	r1, r3
 8015b8c:	2201      	movs	r2, #1
 8015b8e:	f7f9 f885 	bl	800ec9c <LTDC_ColorKeyingConfig>
    LTDC_ReloadConfig(LTDC_IMReload);
 8015b92:	2001      	movs	r0, #1
 8015b94:	f7f8 ff3c 	bl	800ea10 <LTDC_ReloadConfig>
  }
}
 8015b98:	3718      	adds	r7, #24
 8015b9a:	46bd      	mov	sp, r7
 8015b9c:	bd80      	pop	{r7, pc}
 8015b9e:	bf00      	nop
 8015ba0:	20005350 	.word	0x20005350
 8015ba4:	40016884 	.word	0x40016884
 8015ba8:	40016904 	.word	0x40016904

08015bac <LCD_ReSetColorKeying>:
  * @brief  Disable the color Keying.
  * @param  RGBValue: Specifies the Color reference. 
  * @retval None
  */
void LCD_ReSetColorKeying(void)
{
 8015bac:	b580      	push	{r7, lr}
 8015bae:	b084      	sub	sp, #16
 8015bb0:	af00      	add	r7, sp, #0
  LTDC_ColorKeying_InitTypeDef   LTDC_colorkeying_InitStruct;
  
  if (CurrentLayer == LCD_BACKGROUND_LAYER)
 8015bb2:	4b0d      	ldr	r3, [pc, #52]	; (8015be8 <LCD_ReSetColorKeying+0x3c>)
 8015bb4:	681b      	ldr	r3, [r3, #0]
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d109      	bne.n	8015bce <LCD_ReSetColorKeying+0x22>
  {   
    /* Disable the color Keying for Layer1 */
    LTDC_ColorKeyingConfig(LTDC_Layer1, &LTDC_colorkeying_InitStruct, DISABLE);
 8015bba:	1d3b      	adds	r3, r7, #4
 8015bbc:	480b      	ldr	r0, [pc, #44]	; (8015bec <LCD_ReSetColorKeying+0x40>)
 8015bbe:	4619      	mov	r1, r3
 8015bc0:	2200      	movs	r2, #0
 8015bc2:	f7f9 f86b 	bl	800ec9c <LTDC_ColorKeyingConfig>
    LTDC_ReloadConfig(LTDC_IMReload);
 8015bc6:	2001      	movs	r0, #1
 8015bc8:	f7f8 ff22 	bl	800ea10 <LTDC_ReloadConfig>
 8015bcc:	e008      	b.n	8015be0 <LCD_ReSetColorKeying+0x34>
  }
  else
  {
    /* Disable the color Keying for Layer2 */
    LTDC_ColorKeyingConfig(LTDC_Layer2, &LTDC_colorkeying_InitStruct, DISABLE);
 8015bce:	1d3b      	adds	r3, r7, #4
 8015bd0:	4807      	ldr	r0, [pc, #28]	; (8015bf0 <LCD_ReSetColorKeying+0x44>)
 8015bd2:	4619      	mov	r1, r3
 8015bd4:	2200      	movs	r2, #0
 8015bd6:	f7f9 f861 	bl	800ec9c <LTDC_ColorKeyingConfig>
    LTDC_ReloadConfig(LTDC_IMReload);
 8015bda:	2001      	movs	r0, #1
 8015bdc:	f7f8 ff18 	bl	800ea10 <LTDC_ReloadConfig>
  }
} 
 8015be0:	3710      	adds	r7, #16
 8015be2:	46bd      	mov	sp, r7
 8015be4:	bd80      	pop	{r7, pc}
 8015be6:	bf00      	nop
 8015be8:	20005350 	.word	0x20005350
 8015bec:	40016884 	.word	0x40016884
 8015bf0:	40016904 	.word	0x40016904

08015bf4 <LCD_DrawChar>:
  * @param  Ypos: start column address.
  * @param  c: pointer to the character data.
  * @retval None
  */
void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8015bf4:	b480      	push	{r7}
 8015bf6:	b087      	sub	sp, #28
 8015bf8:	af00      	add	r7, sp, #0
 8015bfa:	460b      	mov	r3, r1
 8015bfc:	603a      	str	r2, [r7, #0]
 8015bfe:	4602      	mov	r2, r0
 8015c00:	80fa      	strh	r2, [r7, #6]
 8015c02:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0, xpos =0;
 8015c04:	2300      	movs	r3, #0
 8015c06:	617b      	str	r3, [r7, #20]
 8015c08:	2300      	movs	r3, #0
 8015c0a:	613b      	str	r3, [r7, #16]
 8015c0c:	2300      	movs	r3, #0
 8015c0e:	60bb      	str	r3, [r7, #8]
  uint32_t  Xaddress = 0;
 8015c10:	2300      	movs	r3, #0
 8015c12:	60fb      	str	r3, [r7, #12]
  
  xpos = Xpos*LCD_PIXEL_WIDTH*2;
 8015c14:	88fa      	ldrh	r2, [r7, #6]
 8015c16:	4613      	mov	r3, r2
 8015c18:	011b      	lsls	r3, r3, #4
 8015c1a:	1a9b      	subs	r3, r3, r2
 8015c1c:	015b      	lsls	r3, r3, #5
 8015c1e:	60bb      	str	r3, [r7, #8]
  Xaddress += Ypos;
 8015c20:	88bb      	ldrh	r3, [r7, #4]
 8015c22:	68fa      	ldr	r2, [r7, #12]
 8015c24:	4413      	add	r3, r2
 8015c26:	60fb      	str	r3, [r7, #12]
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8015c28:	2300      	movs	r3, #0
 8015c2a:	617b      	str	r3, [r7, #20]
 8015c2c:	e05c      	b.n	8015ce8 <LCD_DrawChar+0xf4>
  {
    
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8015c2e:	2300      	movs	r3, #0
 8015c30:	613b      	str	r3, [r7, #16]
 8015c32:	e048      	b.n	8015cc6 <LCD_DrawChar+0xd2>
    {
          
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
 8015c34:	697b      	ldr	r3, [r7, #20]
 8015c36:	005b      	lsls	r3, r3, #1
 8015c38:	683a      	ldr	r2, [r7, #0]
 8015c3a:	4413      	add	r3, r2
 8015c3c:	881b      	ldrh	r3, [r3, #0]
 8015c3e:	461a      	mov	r2, r3
 8015c40:	4b2f      	ldr	r3, [pc, #188]	; (8015d00 <LCD_DrawChar+0x10c>)
 8015c42:	681b      	ldr	r3, [r3, #0]
 8015c44:	8899      	ldrh	r1, [r3, #4]
 8015c46:	4b2f      	ldr	r3, [pc, #188]	; (8015d04 <LCD_DrawChar+0x110>)
 8015c48:	fba3 0301 	umull	r0, r3, r3, r1
 8015c4c:	08db      	lsrs	r3, r3, #3
 8015c4e:	b29b      	uxth	r3, r3
 8015c50:	00db      	lsls	r3, r3, #3
 8015c52:	2180      	movs	r1, #128	; 0x80
 8015c54:	4099      	lsls	r1, r3
 8015c56:	693b      	ldr	r3, [r7, #16]
 8015c58:	fa41 f303 	asr.w	r3, r1, r3
 8015c5c:	4013      	ands	r3, r2
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d104      	bne.n	8015c6c <LCD_DrawChar+0x78>
 8015c62:	4b27      	ldr	r3, [pc, #156]	; (8015d00 <LCD_DrawChar+0x10c>)
 8015c64:	681b      	ldr	r3, [r3, #0]
 8015c66:	889b      	ldrh	r3, [r3, #4]
 8015c68:	2b0c      	cmp	r3, #12
 8015c6a:	d911      	bls.n	8015c90 <LCD_DrawChar+0x9c>
        (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8015c6c:	697b      	ldr	r3, [r7, #20]
 8015c6e:	005b      	lsls	r3, r3, #1
 8015c70:	683a      	ldr	r2, [r7, #0]
 8015c72:	4413      	add	r3, r2
 8015c74:	881b      	ldrh	r3, [r3, #0]
 8015c76:	461a      	mov	r2, r3
 8015c78:	693b      	ldr	r3, [r7, #16]
 8015c7a:	fa42 f303 	asr.w	r3, r2, r3
 8015c7e:	f003 0301 	and.w	r3, r3, #1
  {
    
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
    {
          
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	d10f      	bne.n	8015ca6 <LCD_DrawChar+0xb2>
        (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8015c86:	4b1e      	ldr	r3, [pc, #120]	; (8015d00 <LCD_DrawChar+0x10c>)
 8015c88:	681b      	ldr	r3, [r3, #0]
 8015c8a:	889b      	ldrh	r3, [r3, #4]
 8015c8c:	2b0c      	cmp	r3, #12
 8015c8e:	d90a      	bls.n	8015ca6 <LCD_DrawChar+0xb2>
      {
          /* Write data value to all SDRAM memory */
         *(__IO uint16_t*) (CurrentFrameBuffer + (2*Xaddress) + xpos) = CurrentBackColor;
 8015c90:	68fb      	ldr	r3, [r7, #12]
 8015c92:	005a      	lsls	r2, r3, #1
 8015c94:	4b1c      	ldr	r3, [pc, #112]	; (8015d08 <LCD_DrawChar+0x114>)
 8015c96:	681b      	ldr	r3, [r3, #0]
 8015c98:	441a      	add	r2, r3
 8015c9a:	68bb      	ldr	r3, [r7, #8]
 8015c9c:	4413      	add	r3, r2
 8015c9e:	4a1b      	ldr	r2, [pc, #108]	; (8015d0c <LCD_DrawChar+0x118>)
 8015ca0:	8812      	ldrh	r2, [r2, #0]
 8015ca2:	801a      	strh	r2, [r3, #0]
 8015ca4:	e009      	b.n	8015cba <LCD_DrawChar+0xc6>
      }
      else
      {
          /* Write data value to all SDRAM memory */
         *(__IO uint16_t*) (CurrentFrameBuffer + (2*Xaddress) + xpos) = CurrentTextColor;         
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	005a      	lsls	r2, r3, #1
 8015caa:	4b17      	ldr	r3, [pc, #92]	; (8015d08 <LCD_DrawChar+0x114>)
 8015cac:	681b      	ldr	r3, [r3, #0]
 8015cae:	441a      	add	r2, r3
 8015cb0:	68bb      	ldr	r3, [r7, #8]
 8015cb2:	4413      	add	r3, r2
 8015cb4:	4a16      	ldr	r2, [pc, #88]	; (8015d10 <LCD_DrawChar+0x11c>)
 8015cb6:	8812      	ldrh	r2, [r2, #0]
 8015cb8:	801a      	strh	r2, [r3, #0]
      }
      Xaddress++;
 8015cba:	68fb      	ldr	r3, [r7, #12]
 8015cbc:	3301      	adds	r3, #1
 8015cbe:	60fb      	str	r3, [r7, #12]
  Xaddress += Ypos;
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
  {
    
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8015cc0:	693b      	ldr	r3, [r7, #16]
 8015cc2:	3301      	adds	r3, #1
 8015cc4:	613b      	str	r3, [r7, #16]
 8015cc6:	4b0e      	ldr	r3, [pc, #56]	; (8015d00 <LCD_DrawChar+0x10c>)
 8015cc8:	681b      	ldr	r3, [r3, #0]
 8015cca:	889b      	ldrh	r3, [r3, #4]
 8015ccc:	461a      	mov	r2, r3
 8015cce:	693b      	ldr	r3, [r7, #16]
 8015cd0:	429a      	cmp	r2, r3
 8015cd2:	d8af      	bhi.n	8015c34 <LCD_DrawChar+0x40>
          /* Write data value to all SDRAM memory */
         *(__IO uint16_t*) (CurrentFrameBuffer + (2*Xaddress) + xpos) = CurrentTextColor;         
      }
      Xaddress++;
    }
      Xaddress += (LCD_PIXEL_WIDTH - LCD_Currentfonts->Width);
 8015cd4:	4b0a      	ldr	r3, [pc, #40]	; (8015d00 <LCD_DrawChar+0x10c>)
 8015cd6:	681b      	ldr	r3, [r3, #0]
 8015cd8:	889b      	ldrh	r3, [r3, #4]
 8015cda:	68fa      	ldr	r2, [r7, #12]
 8015cdc:	1ad3      	subs	r3, r2, r3
 8015cde:	33f0      	adds	r3, #240	; 0xf0
 8015ce0:	60fb      	str	r3, [r7, #12]
  uint32_t  Xaddress = 0;
  
  xpos = Xpos*LCD_PIXEL_WIDTH*2;
  Xaddress += Ypos;
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8015ce2:	697b      	ldr	r3, [r7, #20]
 8015ce4:	3301      	adds	r3, #1
 8015ce6:	617b      	str	r3, [r7, #20]
 8015ce8:	4b05      	ldr	r3, [pc, #20]	; (8015d00 <LCD_DrawChar+0x10c>)
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	88db      	ldrh	r3, [r3, #6]
 8015cee:	461a      	mov	r2, r3
 8015cf0:	697b      	ldr	r3, [r7, #20]
 8015cf2:	429a      	cmp	r2, r3
 8015cf4:	d89b      	bhi.n	8015c2e <LCD_DrawChar+0x3a>
      }
      Xaddress++;
    }
      Xaddress += (LCD_PIXEL_WIDTH - LCD_Currentfonts->Width);
  }
}
 8015cf6:	371c      	adds	r7, #28
 8015cf8:	46bd      	mov	sp, r7
 8015cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cfe:	4770      	bx	lr
 8015d00:	20005348 	.word	0x20005348
 8015d04:	aaaaaaab 	.word	0xaaaaaaab
 8015d08:	200000b8 	.word	0x200000b8
 8015d0c:	200000b4 	.word	0x200000b4
 8015d10:	2000534c 	.word	0x2000534c

08015d14 <LCD_DisplayChar>:
  * @param  Column: start column address.
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E.
  * @retval None
  */
void LCD_DisplayChar(uint16_t Line, uint16_t Column, uint8_t Ascii)
{
 8015d14:	b580      	push	{r7, lr}
 8015d16:	b082      	sub	sp, #8
 8015d18:	af00      	add	r7, sp, #0
 8015d1a:	4613      	mov	r3, r2
 8015d1c:	4602      	mov	r2, r0
 8015d1e:	80fa      	strh	r2, [r7, #6]
 8015d20:	460a      	mov	r2, r1
 8015d22:	80ba      	strh	r2, [r7, #4]
 8015d24:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8015d26:	78fb      	ldrb	r3, [r7, #3]
 8015d28:	3b20      	subs	r3, #32
 8015d2a:	70fb      	strb	r3, [r7, #3]

  LCD_DrawChar(Line, Column, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8015d2c:	4b0a      	ldr	r3, [pc, #40]	; (8015d58 <LCD_DisplayChar+0x44>)
 8015d2e:	681b      	ldr	r3, [r3, #0]
 8015d30:	681a      	ldr	r2, [r3, #0]
 8015d32:	78fb      	ldrb	r3, [r7, #3]
 8015d34:	4908      	ldr	r1, [pc, #32]	; (8015d58 <LCD_DisplayChar+0x44>)
 8015d36:	6809      	ldr	r1, [r1, #0]
 8015d38:	88c9      	ldrh	r1, [r1, #6]
 8015d3a:	fb01 f303 	mul.w	r3, r1, r3
 8015d3e:	005b      	lsls	r3, r3, #1
 8015d40:	4413      	add	r3, r2
 8015d42:	88f9      	ldrh	r1, [r7, #6]
 8015d44:	88ba      	ldrh	r2, [r7, #4]
 8015d46:	4608      	mov	r0, r1
 8015d48:	4611      	mov	r1, r2
 8015d4a:	461a      	mov	r2, r3
 8015d4c:	f7ff ff52 	bl	8015bf4 <LCD_DrawChar>
}
 8015d50:	3708      	adds	r7, #8
 8015d52:	46bd      	mov	sp, r7
 8015d54:	bd80      	pop	{r7, pc}
 8015d56:	bf00      	nop
 8015d58:	20005348 	.word	0x20005348

08015d5c <LCD_DisplayStringLine>:
  *     @arg Linex: where x can be 0..9
  * @param  *ptr: pointer to string to display on LCD.
  * @retval None
  */
void LCD_DisplayStringLine(uint16_t Line, uint8_t *ptr)
{  
 8015d5c:	b580      	push	{r7, lr}
 8015d5e:	b084      	sub	sp, #16
 8015d60:	af00      	add	r7, sp, #0
 8015d62:	4603      	mov	r3, r0
 8015d64:	6039      	str	r1, [r7, #0]
 8015d66:	80fb      	strh	r3, [r7, #6]
  uint16_t refcolumn = 0;
 8015d68:	2300      	movs	r3, #0
 8015d6a:	81fb      	strh	r3, [r7, #14]
  /* Send the string character by character on lCD */
  while ((refcolumn < LCD_PIXEL_WIDTH) && ((*ptr != 0) & (((refcolumn + LCD_Currentfonts->Width) & 0xFFFF) >= LCD_Currentfonts->Width)))
 8015d6c:	e011      	b.n	8015d92 <LCD_DisplayStringLine+0x36>
  {
    /* Display one character on LCD */
    LCD_DisplayChar(Line, refcolumn, *ptr);
 8015d6e:	683b      	ldr	r3, [r7, #0]
 8015d70:	781b      	ldrb	r3, [r3, #0]
 8015d72:	88f9      	ldrh	r1, [r7, #6]
 8015d74:	89fa      	ldrh	r2, [r7, #14]
 8015d76:	4608      	mov	r0, r1
 8015d78:	4611      	mov	r1, r2
 8015d7a:	461a      	mov	r2, r3
 8015d7c:	f7ff ffca 	bl	8015d14 <LCD_DisplayChar>
    /* Decrement the column position by width */
    refcolumn += LCD_Currentfonts->Width;
 8015d80:	4b13      	ldr	r3, [pc, #76]	; (8015dd0 <LCD_DisplayStringLine+0x74>)
 8015d82:	681b      	ldr	r3, [r3, #0]
 8015d84:	889a      	ldrh	r2, [r3, #4]
 8015d86:	89fb      	ldrh	r3, [r7, #14]
 8015d88:	4413      	add	r3, r2
 8015d8a:	81fb      	strh	r3, [r7, #14]
    /* Point on the next character */
    ptr++;
 8015d8c:	683b      	ldr	r3, [r7, #0]
 8015d8e:	3301      	adds	r3, #1
 8015d90:	603b      	str	r3, [r7, #0]
  */
void LCD_DisplayStringLine(uint16_t Line, uint8_t *ptr)
{  
  uint16_t refcolumn = 0;
  /* Send the string character by character on lCD */
  while ((refcolumn < LCD_PIXEL_WIDTH) && ((*ptr != 0) & (((refcolumn + LCD_Currentfonts->Width) & 0xFFFF) >= LCD_Currentfonts->Width)))
 8015d92:	89fb      	ldrh	r3, [r7, #14]
 8015d94:	2bef      	cmp	r3, #239	; 0xef
 8015d96:	d818      	bhi.n	8015dca <LCD_DisplayStringLine+0x6e>
 8015d98:	683b      	ldr	r3, [r7, #0]
 8015d9a:	781b      	ldrb	r3, [r3, #0]
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	bf0c      	ite	eq
 8015da0:	2300      	moveq	r3, #0
 8015da2:	2301      	movne	r3, #1
 8015da4:	b2da      	uxtb	r2, r3
 8015da6:	89f9      	ldrh	r1, [r7, #14]
 8015da8:	4b09      	ldr	r3, [pc, #36]	; (8015dd0 <LCD_DisplayStringLine+0x74>)
 8015daa:	681b      	ldr	r3, [r3, #0]
 8015dac:	889b      	ldrh	r3, [r3, #4]
 8015dae:	440b      	add	r3, r1
 8015db0:	b299      	uxth	r1, r3
 8015db2:	4b07      	ldr	r3, [pc, #28]	; (8015dd0 <LCD_DisplayStringLine+0x74>)
 8015db4:	681b      	ldr	r3, [r3, #0]
 8015db6:	889b      	ldrh	r3, [r3, #4]
 8015db8:	4299      	cmp	r1, r3
 8015dba:	bfb4      	ite	lt
 8015dbc:	2300      	movlt	r3, #0
 8015dbe:	2301      	movge	r3, #1
 8015dc0:	b2db      	uxtb	r3, r3
 8015dc2:	4013      	ands	r3, r2
 8015dc4:	b2db      	uxtb	r3, r3
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d1d1      	bne.n	8015d6e <LCD_DisplayStringLine+0x12>
    /* Decrement the column position by width */
    refcolumn += LCD_Currentfonts->Width;
    /* Point on the next character */
    ptr++;
  }
}
 8015dca:	3710      	adds	r7, #16
 8015dcc:	46bd      	mov	sp, r7
 8015dce:	bd80      	pop	{r7, pc}
 8015dd0:	20005348 	.word	0x20005348

08015dd4 <LCD_SetDisplayWindow>:
  * @param  Height: display window height, can be a value from 0 to 320.
  * @param  Width: display window width, can be a value from 0 to 240.
  * @retval None
  */
void LCD_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Height, uint16_t Width)
{
 8015dd4:	b580      	push	{r7, lr}
 8015dd6:	b082      	sub	sp, #8
 8015dd8:	af00      	add	r7, sp, #0
 8015dda:	80f8      	strh	r0, [r7, #6]
 8015ddc:	80b9      	strh	r1, [r7, #4]
 8015dde:	807a      	strh	r2, [r7, #2]
 8015de0:	803b      	strh	r3, [r7, #0]

  if (CurrentLayer == LCD_BACKGROUND_LAYER)
 8015de2:	4b18      	ldr	r3, [pc, #96]	; (8015e44 <LCD_SetDisplayWindow+0x70>)
 8015de4:	681b      	ldr	r3, [r3, #0]
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d114      	bne.n	8015e14 <LCD_SetDisplayWindow+0x40>
  { 
    /* reconfigure the layer1 position */
    LTDC_LayerPosition(LTDC_Layer1, Xpos, Ypos);
 8015dea:	88fa      	ldrh	r2, [r7, #6]
 8015dec:	88bb      	ldrh	r3, [r7, #4]
 8015dee:	4816      	ldr	r0, [pc, #88]	; (8015e48 <LCD_SetDisplayWindow+0x74>)
 8015df0:	4611      	mov	r1, r2
 8015df2:	461a      	mov	r2, r3
 8015df4:	f7f8 fffe 	bl	800edf4 <LTDC_LayerPosition>
    LTDC_ReloadConfig(LTDC_IMReload);
 8015df8:	2001      	movs	r0, #1
 8015dfa:	f7f8 fe09 	bl	800ea10 <LTDC_ReloadConfig>
    
    /* reconfigure the layer1 size */
    LTDC_LayerSize(LTDC_Layer1, Width, Height);
 8015dfe:	883a      	ldrh	r2, [r7, #0]
 8015e00:	887b      	ldrh	r3, [r7, #2]
 8015e02:	4811      	ldr	r0, [pc, #68]	; (8015e48 <LCD_SetDisplayWindow+0x74>)
 8015e04:	4611      	mov	r1, r2
 8015e06:	461a      	mov	r2, r3
 8015e08:	f7f9 f87e 	bl	800ef08 <LTDC_LayerSize>
    LTDC_ReloadConfig(LTDC_IMReload);
 8015e0c:	2001      	movs	r0, #1
 8015e0e:	f7f8 fdff 	bl	800ea10 <LTDC_ReloadConfig>
 8015e12:	e013      	b.n	8015e3c <LCD_SetDisplayWindow+0x68>
 }
 else
 {   
    /* reconfigure the layer2 position */
    LTDC_LayerPosition(LTDC_Layer2, Xpos, Ypos);
 8015e14:	88fa      	ldrh	r2, [r7, #6]
 8015e16:	88bb      	ldrh	r3, [r7, #4]
 8015e18:	480c      	ldr	r0, [pc, #48]	; (8015e4c <LCD_SetDisplayWindow+0x78>)
 8015e1a:	4611      	mov	r1, r2
 8015e1c:	461a      	mov	r2, r3
 8015e1e:	f7f8 ffe9 	bl	800edf4 <LTDC_LayerPosition>
    LTDC_ReloadConfig(LTDC_IMReload); 
 8015e22:	2001      	movs	r0, #1
 8015e24:	f7f8 fdf4 	bl	800ea10 <LTDC_ReloadConfig>
   
   /* reconfigure the layer2 size */
    LTDC_LayerSize(LTDC_Layer2, Width, Height);
 8015e28:	883a      	ldrh	r2, [r7, #0]
 8015e2a:	887b      	ldrh	r3, [r7, #2]
 8015e2c:	4807      	ldr	r0, [pc, #28]	; (8015e4c <LCD_SetDisplayWindow+0x78>)
 8015e2e:	4611      	mov	r1, r2
 8015e30:	461a      	mov	r2, r3
 8015e32:	f7f9 f869 	bl	800ef08 <LTDC_LayerSize>
    LTDC_ReloadConfig(LTDC_IMReload);
 8015e36:	2001      	movs	r0, #1
 8015e38:	f7f8 fdea 	bl	800ea10 <LTDC_ReloadConfig>
  }
}
 8015e3c:	3708      	adds	r7, #8
 8015e3e:	46bd      	mov	sp, r7
 8015e40:	bd80      	pop	{r7, pc}
 8015e42:	bf00      	nop
 8015e44:	20005350 	.word	0x20005350
 8015e48:	40016884 	.word	0x40016884
 8015e4c:	40016904 	.word	0x40016904

08015e50 <LCD_WindowModeDisable>:
  * @brief  Disables LCD Window mode.
  * @param  None
  * @retval None
  */
void LCD_WindowModeDisable(void)
{
 8015e50:	b580      	push	{r7, lr}
 8015e52:	af00      	add	r7, sp, #0
  LCD_SetDisplayWindow(0, 0, LCD_PIXEL_HEIGHT, LCD_PIXEL_WIDTH); 
 8015e54:	2000      	movs	r0, #0
 8015e56:	2100      	movs	r1, #0
 8015e58:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8015e5c:	23f0      	movs	r3, #240	; 0xf0
 8015e5e:	f7ff ffb9 	bl	8015dd4 <LCD_SetDisplayWindow>
}
 8015e62:	bd80      	pop	{r7, pc}

08015e64 <LCD_DrawLine>:
  * @param Direction: line direction.
  *   This parameter can be one of the following values: LCD_DIR_HORIZONTAL or LCD_DIR_VERTICAL.
  * @retval None
  */
void LCD_DrawLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length, uint8_t Direction)
{
 8015e64:	b580      	push	{r7, lr}
 8015e66:	b090      	sub	sp, #64	; 0x40
 8015e68:	af00      	add	r7, sp, #0
 8015e6a:	80f8      	strh	r0, [r7, #6]
 8015e6c:	80b9      	strh	r1, [r7, #4]
 8015e6e:	807a      	strh	r2, [r7, #2]
 8015e70:	707b      	strb	r3, [r7, #1]
  DMA2D_InitTypeDef      DMA2D_InitStruct;
  
  uint32_t  Xaddress = 0;
 8015e72:	2300      	movs	r3, #0
 8015e74:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t Red_Value = 0, Green_Value = 0, Blue_Value = 0;
 8015e76:	2300      	movs	r3, #0
 8015e78:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015e7a:	2300      	movs	r3, #0
 8015e7c:	873b      	strh	r3, [r7, #56]	; 0x38
 8015e7e:	2300      	movs	r3, #0
 8015e80:	86fb      	strh	r3, [r7, #54]	; 0x36
  
  Xaddress = CurrentFrameBuffer + 2*(LCD_PIXEL_WIDTH*Ypos + Xpos);
 8015e82:	88ba      	ldrh	r2, [r7, #4]
 8015e84:	4613      	mov	r3, r2
 8015e86:	011b      	lsls	r3, r3, #4
 8015e88:	1a9b      	subs	r3, r3, r2
 8015e8a:	011b      	lsls	r3, r3, #4
 8015e8c:	461a      	mov	r2, r3
 8015e8e:	88fb      	ldrh	r3, [r7, #6]
 8015e90:	4413      	add	r3, r2
 8015e92:	005b      	lsls	r3, r3, #1
 8015e94:	461a      	mov	r2, r3
 8015e96:	4b23      	ldr	r3, [pc, #140]	; (8015f24 <LCD_DrawLine+0xc0>)
 8015e98:	681b      	ldr	r3, [r3, #0]
 8015e9a:	4413      	add	r3, r2
 8015e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 
  Red_Value = (0xF800 & CurrentTextColor) >> 11;
 8015e9e:	4b22      	ldr	r3, [pc, #136]	; (8015f28 <LCD_DrawLine+0xc4>)
 8015ea0:	881b      	ldrh	r3, [r3, #0]
 8015ea2:	0adb      	lsrs	r3, r3, #11
 8015ea4:	877b      	strh	r3, [r7, #58]	; 0x3a
  Blue_Value = 0x001F & CurrentTextColor;
 8015ea6:	4b20      	ldr	r3, [pc, #128]	; (8015f28 <LCD_DrawLine+0xc4>)
 8015ea8:	881b      	ldrh	r3, [r3, #0]
 8015eaa:	f003 031f 	and.w	r3, r3, #31
 8015eae:	86fb      	strh	r3, [r7, #54]	; 0x36
  Green_Value = (0x07E0 & CurrentTextColor) >> 5;
 8015eb0:	4b1d      	ldr	r3, [pc, #116]	; (8015f28 <LCD_DrawLine+0xc4>)
 8015eb2:	881b      	ldrh	r3, [r3, #0]
 8015eb4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8015eb8:	b29b      	uxth	r3, r3
 8015eba:	095b      	lsrs	r3, r3, #5
 8015ebc:	873b      	strh	r3, [r7, #56]	; 0x38

  /* Configure DMA2D */    
  DMA2D_DeInit();  
 8015ebe:	f7f4 fb7b 	bl	800a5b8 <DMA2D_DeInit>
  DMA2D_InitStruct.DMA2D_Mode = DMA2D_R2M;       
 8015ec2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8015ec6:	60fb      	str	r3, [r7, #12]
  DMA2D_InitStruct.DMA2D_CMode = DMA2D_RGB565;      
 8015ec8:	2302      	movs	r3, #2
 8015eca:	613b      	str	r3, [r7, #16]
  DMA2D_InitStruct.DMA2D_OutputGreen = Green_Value;      
 8015ecc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8015ece:	61bb      	str	r3, [r7, #24]
  DMA2D_InitStruct.DMA2D_OutputBlue = Blue_Value;     
 8015ed0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015ed2:	617b      	str	r3, [r7, #20]
  DMA2D_InitStruct.DMA2D_OutputRed = Red_Value;                
 8015ed4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015ed6:	61fb      	str	r3, [r7, #28]
  DMA2D_InitStruct.DMA2D_OutputAlpha = 0x0F;                  
 8015ed8:	230f      	movs	r3, #15
 8015eda:	623b      	str	r3, [r7, #32]
  DMA2D_InitStruct.DMA2D_OutputMemoryAdd = Xaddress;                  
 8015edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ede:	627b      	str	r3, [r7, #36]	; 0x24
  
  if(Direction == LCD_DIR_HORIZONTAL)
 8015ee0:	787b      	ldrb	r3, [r7, #1]
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d106      	bne.n	8015ef4 <LCD_DrawLine+0x90>
  {                                                      
    DMA2D_InitStruct.DMA2D_OutputOffset = 0;                
 8015ee6:	2300      	movs	r3, #0
 8015ee8:	62bb      	str	r3, [r7, #40]	; 0x28
    DMA2D_InitStruct.DMA2D_NumberOfLine = 1;            
 8015eea:	2301      	movs	r3, #1
 8015eec:	62fb      	str	r3, [r7, #44]	; 0x2c
    DMA2D_InitStruct.DMA2D_PixelPerLine = Length; 
 8015eee:	887b      	ldrh	r3, [r7, #2]
 8015ef0:	633b      	str	r3, [r7, #48]	; 0x30
 8015ef2:	e005      	b.n	8015f00 <LCD_DrawLine+0x9c>
  }
  else
  {                                                            
    DMA2D_InitStruct.DMA2D_OutputOffset = LCD_PIXEL_WIDTH - 1;                
 8015ef4:	23ef      	movs	r3, #239	; 0xef
 8015ef6:	62bb      	str	r3, [r7, #40]	; 0x28
    DMA2D_InitStruct.DMA2D_NumberOfLine = Length;            
 8015ef8:	887b      	ldrh	r3, [r7, #2]
 8015efa:	62fb      	str	r3, [r7, #44]	; 0x2c
    DMA2D_InitStruct.DMA2D_PixelPerLine = 1;  
 8015efc:	2301      	movs	r3, #1
 8015efe:	633b      	str	r3, [r7, #48]	; 0x30
  }
  
  DMA2D_Init(&DMA2D_InitStruct);  
 8015f00:	f107 030c 	add.w	r3, r7, #12
 8015f04:	4618      	mov	r0, r3
 8015f06:	f7f4 fb65 	bl	800a5d4 <DMA2D_Init>
  /* Start Transfer */ 
  DMA2D_StartTransfer();  
 8015f0a:	f7f4 fc39 	bl	800a780 <DMA2D_StartTransfer>
  /* Wait for CTC Flag activation */
  while(DMA2D_GetFlagStatus(DMA2D_FLAG_TC) == RESET)
 8015f0e:	bf00      	nop
 8015f10:	2002      	movs	r0, #2
 8015f12:	f7f4 fe2b 	bl	800ab6c <DMA2D_GetFlagStatus>
 8015f16:	4603      	mov	r3, r0
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d0f9      	beq.n	8015f10 <LCD_DrawLine+0xac>
  {
  }
  
}
 8015f1c:	3740      	adds	r7, #64	; 0x40
 8015f1e:	46bd      	mov	sp, r7
 8015f20:	bd80      	pop	{r7, pc}
 8015f22:	bf00      	nop
 8015f24:	200000b8 	.word	0x200000b8
 8015f28:	2000534c 	.word	0x2000534c

08015f2c <LCD_DrawRect>:
  * @param  Height: display rectangle height, can be a value from 0 to 320.
  * @param  Width: display rectangle width, can be a value from 0 to 240.
  * @retval None
  */
void LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Height, uint16_t Width)
{
 8015f2c:	b580      	push	{r7, lr}
 8015f2e:	b082      	sub	sp, #8
 8015f30:	af00      	add	r7, sp, #0
 8015f32:	80f8      	strh	r0, [r7, #6]
 8015f34:	80b9      	strh	r1, [r7, #4]
 8015f36:	807a      	strh	r2, [r7, #2]
 8015f38:	803b      	strh	r3, [r7, #0]
  /* draw horizontal lines */
  LCD_DrawLine(Xpos, Ypos, Width, LCD_DIR_HORIZONTAL);
 8015f3a:	88f9      	ldrh	r1, [r7, #6]
 8015f3c:	88ba      	ldrh	r2, [r7, #4]
 8015f3e:	883b      	ldrh	r3, [r7, #0]
 8015f40:	4608      	mov	r0, r1
 8015f42:	4611      	mov	r1, r2
 8015f44:	461a      	mov	r2, r3
 8015f46:	2300      	movs	r3, #0
 8015f48:	f7ff ff8c 	bl	8015e64 <LCD_DrawLine>
  LCD_DrawLine(Xpos, (Ypos+ Height), Width, LCD_DIR_HORIZONTAL);
 8015f4c:	88ba      	ldrh	r2, [r7, #4]
 8015f4e:	887b      	ldrh	r3, [r7, #2]
 8015f50:	4413      	add	r3, r2
 8015f52:	b29a      	uxth	r2, r3
 8015f54:	88f9      	ldrh	r1, [r7, #6]
 8015f56:	883b      	ldrh	r3, [r7, #0]
 8015f58:	4608      	mov	r0, r1
 8015f5a:	4611      	mov	r1, r2
 8015f5c:	461a      	mov	r2, r3
 8015f5e:	2300      	movs	r3, #0
 8015f60:	f7ff ff80 	bl	8015e64 <LCD_DrawLine>
  
  /* draw vertical lines */
  LCD_DrawLine(Xpos, Ypos, Height, LCD_DIR_VERTICAL);
 8015f64:	88f9      	ldrh	r1, [r7, #6]
 8015f66:	88ba      	ldrh	r2, [r7, #4]
 8015f68:	887b      	ldrh	r3, [r7, #2]
 8015f6a:	4608      	mov	r0, r1
 8015f6c:	4611      	mov	r1, r2
 8015f6e:	461a      	mov	r2, r3
 8015f70:	2301      	movs	r3, #1
 8015f72:	f7ff ff77 	bl	8015e64 <LCD_DrawLine>
  LCD_DrawLine((Xpos + Width), Ypos, Height, LCD_DIR_VERTICAL);
 8015f76:	88fa      	ldrh	r2, [r7, #6]
 8015f78:	883b      	ldrh	r3, [r7, #0]
 8015f7a:	4413      	add	r3, r2
 8015f7c:	b299      	uxth	r1, r3
 8015f7e:	88ba      	ldrh	r2, [r7, #4]
 8015f80:	887b      	ldrh	r3, [r7, #2]
 8015f82:	4608      	mov	r0, r1
 8015f84:	4611      	mov	r1, r2
 8015f86:	461a      	mov	r2, r3
 8015f88:	2301      	movs	r3, #1
 8015f8a:	f7ff ff6b 	bl	8015e64 <LCD_DrawLine>
}
 8015f8e:	3708      	adds	r7, #8
 8015f90:	46bd      	mov	sp, r7
 8015f92:	bd80      	pop	{r7, pc}

08015f94 <LCD_DrawCircle>:
  * @param  Ypos: specifies the Y position, can be a value from 0 to 320.
  * @param  Radius: radius of the circle.
  * @retval None
  */
void LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8015f94:	b480      	push	{r7}
 8015f96:	b087      	sub	sp, #28
 8015f98:	af00      	add	r7, sp, #0
 8015f9a:	4613      	mov	r3, r2
 8015f9c:	4602      	mov	r2, r0
 8015f9e:	80fa      	strh	r2, [r7, #6]
 8015fa0:	460a      	mov	r2, r1
 8015fa2:	80ba      	strh	r2, [r7, #4]
 8015fa4:	807b      	strh	r3, [r7, #2]
    int x = -Radius, y = 0, err = 2-2*Radius, e2;
 8015fa6:	887b      	ldrh	r3, [r7, #2]
 8015fa8:	425b      	negs	r3, r3
 8015faa:	617b      	str	r3, [r7, #20]
 8015fac:	2300      	movs	r3, #0
 8015fae:	613b      	str	r3, [r7, #16]
 8015fb0:	887a      	ldrh	r2, [r7, #2]
 8015fb2:	4613      	mov	r3, r2
 8015fb4:	07db      	lsls	r3, r3, #31
 8015fb6:	1a9b      	subs	r3, r3, r2
 8015fb8:	005b      	lsls	r3, r3, #1
 8015fba:	3302      	adds	r3, #2
 8015fbc:	60fb      	str	r3, [r7, #12]
    do {
        *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-x) + LCD_PIXEL_WIDTH*(Ypos+y)))) = CurrentTextColor; 
 8015fbe:	88fa      	ldrh	r2, [r7, #6]
 8015fc0:	697b      	ldr	r3, [r7, #20]
 8015fc2:	1ad1      	subs	r1, r2, r3
 8015fc4:	88ba      	ldrh	r2, [r7, #4]
 8015fc6:	693b      	ldr	r3, [r7, #16]
 8015fc8:	441a      	add	r2, r3
 8015fca:	4613      	mov	r3, r2
 8015fcc:	011b      	lsls	r3, r3, #4
 8015fce:	1a9b      	subs	r3, r3, r2
 8015fd0:	011b      	lsls	r3, r3, #4
 8015fd2:	440b      	add	r3, r1
 8015fd4:	005b      	lsls	r3, r3, #1
 8015fd6:	461a      	mov	r2, r3
 8015fd8:	4b36      	ldr	r3, [pc, #216]	; (80160b4 <LCD_DrawCircle+0x120>)
 8015fda:	681b      	ldr	r3, [r3, #0]
 8015fdc:	4413      	add	r3, r2
 8015fde:	4a36      	ldr	r2, [pc, #216]	; (80160b8 <LCD_DrawCircle+0x124>)
 8015fe0:	8812      	ldrh	r2, [r2, #0]
 8015fe2:	801a      	strh	r2, [r3, #0]
        *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+x) + LCD_PIXEL_WIDTH*(Ypos+y)))) = CurrentTextColor;
 8015fe4:	88fa      	ldrh	r2, [r7, #6]
 8015fe6:	697b      	ldr	r3, [r7, #20]
 8015fe8:	18d1      	adds	r1, r2, r3
 8015fea:	88ba      	ldrh	r2, [r7, #4]
 8015fec:	693b      	ldr	r3, [r7, #16]
 8015fee:	441a      	add	r2, r3
 8015ff0:	4613      	mov	r3, r2
 8015ff2:	011b      	lsls	r3, r3, #4
 8015ff4:	1a9b      	subs	r3, r3, r2
 8015ff6:	011b      	lsls	r3, r3, #4
 8015ff8:	440b      	add	r3, r1
 8015ffa:	005b      	lsls	r3, r3, #1
 8015ffc:	461a      	mov	r2, r3
 8015ffe:	4b2d      	ldr	r3, [pc, #180]	; (80160b4 <LCD_DrawCircle+0x120>)
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	4413      	add	r3, r2
 8016004:	4a2c      	ldr	r2, [pc, #176]	; (80160b8 <LCD_DrawCircle+0x124>)
 8016006:	8812      	ldrh	r2, [r2, #0]
 8016008:	801a      	strh	r2, [r3, #0]
        *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+x) + LCD_PIXEL_WIDTH*(Ypos-y)))) = CurrentTextColor;
 801600a:	88fa      	ldrh	r2, [r7, #6]
 801600c:	697b      	ldr	r3, [r7, #20]
 801600e:	18d1      	adds	r1, r2, r3
 8016010:	88ba      	ldrh	r2, [r7, #4]
 8016012:	693b      	ldr	r3, [r7, #16]
 8016014:	1ad2      	subs	r2, r2, r3
 8016016:	4613      	mov	r3, r2
 8016018:	011b      	lsls	r3, r3, #4
 801601a:	1a9b      	subs	r3, r3, r2
 801601c:	011b      	lsls	r3, r3, #4
 801601e:	440b      	add	r3, r1
 8016020:	005b      	lsls	r3, r3, #1
 8016022:	461a      	mov	r2, r3
 8016024:	4b23      	ldr	r3, [pc, #140]	; (80160b4 <LCD_DrawCircle+0x120>)
 8016026:	681b      	ldr	r3, [r3, #0]
 8016028:	4413      	add	r3, r2
 801602a:	4a23      	ldr	r2, [pc, #140]	; (80160b8 <LCD_DrawCircle+0x124>)
 801602c:	8812      	ldrh	r2, [r2, #0]
 801602e:	801a      	strh	r2, [r3, #0]
        *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-x) + LCD_PIXEL_WIDTH*(Ypos-y)))) = CurrentTextColor;
 8016030:	88fa      	ldrh	r2, [r7, #6]
 8016032:	697b      	ldr	r3, [r7, #20]
 8016034:	1ad1      	subs	r1, r2, r3
 8016036:	88ba      	ldrh	r2, [r7, #4]
 8016038:	693b      	ldr	r3, [r7, #16]
 801603a:	1ad2      	subs	r2, r2, r3
 801603c:	4613      	mov	r3, r2
 801603e:	011b      	lsls	r3, r3, #4
 8016040:	1a9b      	subs	r3, r3, r2
 8016042:	011b      	lsls	r3, r3, #4
 8016044:	440b      	add	r3, r1
 8016046:	005b      	lsls	r3, r3, #1
 8016048:	461a      	mov	r2, r3
 801604a:	4b1a      	ldr	r3, [pc, #104]	; (80160b4 <LCD_DrawCircle+0x120>)
 801604c:	681b      	ldr	r3, [r3, #0]
 801604e:	4413      	add	r3, r2
 8016050:	4a19      	ldr	r2, [pc, #100]	; (80160b8 <LCD_DrawCircle+0x124>)
 8016052:	8812      	ldrh	r2, [r2, #0]
 8016054:	801a      	strh	r2, [r3, #0]
      
        e2 = err;
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	60bb      	str	r3, [r7, #8]
        if (e2 <= y) {
 801605a:	68ba      	ldr	r2, [r7, #8]
 801605c:	693b      	ldr	r3, [r7, #16]
 801605e:	429a      	cmp	r2, r3
 8016060:	dc13      	bgt.n	801608a <LCD_DrawCircle+0xf6>
            err += ++y*2+1;
 8016062:	693b      	ldr	r3, [r7, #16]
 8016064:	3301      	adds	r3, #1
 8016066:	613b      	str	r3, [r7, #16]
 8016068:	693b      	ldr	r3, [r7, #16]
 801606a:	005b      	lsls	r3, r3, #1
 801606c:	3301      	adds	r3, #1
 801606e:	68fa      	ldr	r2, [r7, #12]
 8016070:	4413      	add	r3, r2
 8016072:	60fb      	str	r3, [r7, #12]
            if (-x == y && e2 <= x) e2 = 0;
 8016074:	697b      	ldr	r3, [r7, #20]
 8016076:	425a      	negs	r2, r3
 8016078:	693b      	ldr	r3, [r7, #16]
 801607a:	429a      	cmp	r2, r3
 801607c:	d105      	bne.n	801608a <LCD_DrawCircle+0xf6>
 801607e:	68ba      	ldr	r2, [r7, #8]
 8016080:	697b      	ldr	r3, [r7, #20]
 8016082:	429a      	cmp	r2, r3
 8016084:	dc01      	bgt.n	801608a <LCD_DrawCircle+0xf6>
 8016086:	2300      	movs	r3, #0
 8016088:	60bb      	str	r3, [r7, #8]
        }
        if (e2 > x) err += ++x*2+1;
 801608a:	68ba      	ldr	r2, [r7, #8]
 801608c:	697b      	ldr	r3, [r7, #20]
 801608e:	429a      	cmp	r2, r3
 8016090:	dd08      	ble.n	80160a4 <LCD_DrawCircle+0x110>
 8016092:	697b      	ldr	r3, [r7, #20]
 8016094:	3301      	adds	r3, #1
 8016096:	617b      	str	r3, [r7, #20]
 8016098:	697b      	ldr	r3, [r7, #20]
 801609a:	005b      	lsls	r3, r3, #1
 801609c:	3301      	adds	r3, #1
 801609e:	68fa      	ldr	r2, [r7, #12]
 80160a0:	4413      	add	r3, r2
 80160a2:	60fb      	str	r3, [r7, #12]
    }
    while (x <= 0);
 80160a4:	697b      	ldr	r3, [r7, #20]
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	dd89      	ble.n	8015fbe <LCD_DrawCircle+0x2a>
}
 80160aa:	371c      	adds	r7, #28
 80160ac:	46bd      	mov	sp, r7
 80160ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160b2:	4770      	bx	lr
 80160b4:	200000b8 	.word	0x200000b8
 80160b8:	2000534c 	.word	0x2000534c

080160bc <LCD_DrawFullEllipse>:
  * @param  Radius: minor radius of ellipse.
  * @param  Radius2: major radius of ellipse.  
  * @retval None
  */
void LCD_DrawFullEllipse(int Xpos, int Ypos, int Radius, int Radius2)
{
 80160bc:	b5b0      	push	{r4, r5, r7, lr}
 80160be:	b08c      	sub	sp, #48	; 0x30
 80160c0:	af00      	add	r7, sp, #0
 80160c2:	60f8      	str	r0, [r7, #12]
 80160c4:	60b9      	str	r1, [r7, #8]
 80160c6:	607a      	str	r2, [r7, #4]
 80160c8:	603b      	str	r3, [r7, #0]
  int x = -Radius, y = 0, err = 2-2*Radius, e2;
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	425b      	negs	r3, r3
 80160ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80160d0:	2300      	movs	r3, #0
 80160d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80160d4:	687a      	ldr	r2, [r7, #4]
 80160d6:	4613      	mov	r3, r2
 80160d8:	07db      	lsls	r3, r3, #31
 80160da:	1a9b      	subs	r3, r3, r2
 80160dc:	005b      	lsls	r3, r3, #1
 80160de:	3302      	adds	r3, #2
 80160e0:	627b      	str	r3, [r7, #36]	; 0x24
  float K = 0, rad1 = 0, rad2 = 0;
 80160e2:	f04f 0300 	mov.w	r3, #0
 80160e6:	61fb      	str	r3, [r7, #28]
 80160e8:	f04f 0300 	mov.w	r3, #0
 80160ec:	61bb      	str	r3, [r7, #24]
 80160ee:	f04f 0300 	mov.w	r3, #0
 80160f2:	617b      	str	r3, [r7, #20]
  
  rad1 = Radius;
 80160f4:	6878      	ldr	r0, [r7, #4]
 80160f6:	f002 f855 	bl	80181a4 <__aeabi_i2f>
 80160fa:	4603      	mov	r3, r0
 80160fc:	61bb      	str	r3, [r7, #24]
  rad2 = Radius2;
 80160fe:	6838      	ldr	r0, [r7, #0]
 8016100:	f002 f850 	bl	80181a4 <__aeabi_i2f>
 8016104:	4603      	mov	r3, r0
 8016106:	617b      	str	r3, [r7, #20]
  
  if (Radius > Radius2)
 8016108:	687a      	ldr	r2, [r7, #4]
 801610a:	683b      	ldr	r3, [r7, #0]
 801610c:	429a      	cmp	r2, r3
 801610e:	f340 8092 	ble.w	8016236 <LCD_DrawFullEllipse+0x17a>
  { 
    do 
    {
      K = (float)(rad1/rad2);
 8016112:	69b8      	ldr	r0, [r7, #24]
 8016114:	6979      	ldr	r1, [r7, #20]
 8016116:	f002 f94d 	bl	80183b4 <__aeabi_fdiv>
 801611a:	4603      	mov	r3, r0
 801611c:	61fb      	str	r3, [r7, #28]
      LCD_DrawLine((Xpos+x), (Ypos-(uint16_t)(y/K)), (2*(uint16_t)(y/K) + 1), LCD_DIR_VERTICAL);
 801611e:	68fb      	ldr	r3, [r7, #12]
 8016120:	b29a      	uxth	r2, r3
 8016122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016124:	b29b      	uxth	r3, r3
 8016126:	4413      	add	r3, r2
 8016128:	b29d      	uxth	r5, r3
 801612a:	68bb      	ldr	r3, [r7, #8]
 801612c:	b29c      	uxth	r4, r3
 801612e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016130:	f002 f838 	bl	80181a4 <__aeabi_i2f>
 8016134:	4603      	mov	r3, r0
 8016136:	4618      	mov	r0, r3
 8016138:	69f9      	ldr	r1, [r7, #28]
 801613a:	f002 f93b 	bl	80183b4 <__aeabi_fdiv>
 801613e:	4603      	mov	r3, r0
 8016140:	4618      	mov	r0, r3
 8016142:	f002 f9d3 	bl	80184ec <__aeabi_f2uiz>
 8016146:	4603      	mov	r3, r0
 8016148:	b29b      	uxth	r3, r3
 801614a:	1ae3      	subs	r3, r4, r3
 801614c:	b29c      	uxth	r4, r3
 801614e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016150:	f002 f828 	bl	80181a4 <__aeabi_i2f>
 8016154:	4603      	mov	r3, r0
 8016156:	4618      	mov	r0, r3
 8016158:	69f9      	ldr	r1, [r7, #28]
 801615a:	f002 f92b 	bl	80183b4 <__aeabi_fdiv>
 801615e:	4603      	mov	r3, r0
 8016160:	4618      	mov	r0, r3
 8016162:	f002 f9c3 	bl	80184ec <__aeabi_f2uiz>
 8016166:	4603      	mov	r3, r0
 8016168:	b29b      	uxth	r3, r3
 801616a:	005b      	lsls	r3, r3, #1
 801616c:	b29b      	uxth	r3, r3
 801616e:	3301      	adds	r3, #1
 8016170:	b29b      	uxth	r3, r3
 8016172:	4628      	mov	r0, r5
 8016174:	4621      	mov	r1, r4
 8016176:	461a      	mov	r2, r3
 8016178:	2301      	movs	r3, #1
 801617a:	f7ff fe73 	bl	8015e64 <LCD_DrawLine>
      LCD_DrawLine((Xpos-x), (Ypos-(uint16_t)(y/K)), (2*(uint16_t)(y/K) + 1), LCD_DIR_VERTICAL);
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	b29a      	uxth	r2, r3
 8016182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016184:	b29b      	uxth	r3, r3
 8016186:	1ad3      	subs	r3, r2, r3
 8016188:	b29d      	uxth	r5, r3
 801618a:	68bb      	ldr	r3, [r7, #8]
 801618c:	b29c      	uxth	r4, r3
 801618e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016190:	f002 f808 	bl	80181a4 <__aeabi_i2f>
 8016194:	4603      	mov	r3, r0
 8016196:	4618      	mov	r0, r3
 8016198:	69f9      	ldr	r1, [r7, #28]
 801619a:	f002 f90b 	bl	80183b4 <__aeabi_fdiv>
 801619e:	4603      	mov	r3, r0
 80161a0:	4618      	mov	r0, r3
 80161a2:	f002 f9a3 	bl	80184ec <__aeabi_f2uiz>
 80161a6:	4603      	mov	r3, r0
 80161a8:	b29b      	uxth	r3, r3
 80161aa:	1ae3      	subs	r3, r4, r3
 80161ac:	b29c      	uxth	r4, r3
 80161ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80161b0:	f001 fff8 	bl	80181a4 <__aeabi_i2f>
 80161b4:	4603      	mov	r3, r0
 80161b6:	4618      	mov	r0, r3
 80161b8:	69f9      	ldr	r1, [r7, #28]
 80161ba:	f002 f8fb 	bl	80183b4 <__aeabi_fdiv>
 80161be:	4603      	mov	r3, r0
 80161c0:	4618      	mov	r0, r3
 80161c2:	f002 f993 	bl	80184ec <__aeabi_f2uiz>
 80161c6:	4603      	mov	r3, r0
 80161c8:	b29b      	uxth	r3, r3
 80161ca:	005b      	lsls	r3, r3, #1
 80161cc:	b29b      	uxth	r3, r3
 80161ce:	3301      	adds	r3, #1
 80161d0:	b29b      	uxth	r3, r3
 80161d2:	4628      	mov	r0, r5
 80161d4:	4621      	mov	r1, r4
 80161d6:	461a      	mov	r2, r3
 80161d8:	2301      	movs	r3, #1
 80161da:	f7ff fe43 	bl	8015e64 <LCD_DrawLine>
      
      e2 = err;
 80161de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161e0:	623b      	str	r3, [r7, #32]
      if (e2 <= y) 
 80161e2:	6a3a      	ldr	r2, [r7, #32]
 80161e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161e6:	429a      	cmp	r2, r3
 80161e8:	dc13      	bgt.n	8016212 <LCD_DrawFullEllipse+0x156>
      {
        err += ++y*2+1;
 80161ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161ec:	3301      	adds	r3, #1
 80161ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80161f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161f2:	005b      	lsls	r3, r3, #1
 80161f4:	3301      	adds	r3, #1
 80161f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80161f8:	4413      	add	r3, r2
 80161fa:	627b      	str	r3, [r7, #36]	; 0x24
        if (-x == y && e2 <= x) e2 = 0;
 80161fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161fe:	425a      	negs	r2, r3
 8016200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016202:	429a      	cmp	r2, r3
 8016204:	d105      	bne.n	8016212 <LCD_DrawFullEllipse+0x156>
 8016206:	6a3a      	ldr	r2, [r7, #32]
 8016208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801620a:	429a      	cmp	r2, r3
 801620c:	dc01      	bgt.n	8016212 <LCD_DrawFullEllipse+0x156>
 801620e:	2300      	movs	r3, #0
 8016210:	623b      	str	r3, [r7, #32]
      }
      if (e2 > x) err += ++x*2+1;
 8016212:	6a3a      	ldr	r2, [r7, #32]
 8016214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016216:	429a      	cmp	r2, r3
 8016218:	dd08      	ble.n	801622c <LCD_DrawFullEllipse+0x170>
 801621a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801621c:	3301      	adds	r3, #1
 801621e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016222:	005b      	lsls	r3, r3, #1
 8016224:	3301      	adds	r3, #1
 8016226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016228:	4413      	add	r3, r2
 801622a:	627b      	str	r3, [r7, #36]	; 0x24
      
    }
    while (x <= 0);
 801622c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801622e:	2b00      	cmp	r3, #0
 8016230:	f77f af6f 	ble.w	8016112 <LCD_DrawFullEllipse+0x56>
 8016234:	e095      	b.n	8016362 <LCD_DrawFullEllipse+0x2a6>
  }
  else
  {
    y = -Radius2; 
 8016236:	683b      	ldr	r3, [r7, #0]
 8016238:	425b      	negs	r3, r3
 801623a:	62bb      	str	r3, [r7, #40]	; 0x28
    x = 0;
 801623c:	2300      	movs	r3, #0
 801623e:	62fb      	str	r3, [r7, #44]	; 0x2c
    do 
    { 
      K = (float)(rad2/rad1);       
 8016240:	6978      	ldr	r0, [r7, #20]
 8016242:	69b9      	ldr	r1, [r7, #24]
 8016244:	f002 f8b6 	bl	80183b4 <__aeabi_fdiv>
 8016248:	4603      	mov	r3, r0
 801624a:	61fb      	str	r3, [r7, #28]
      LCD_DrawLine((Xpos-(uint16_t)(x/K)), (Ypos+y), (2*(uint16_t)(x/K) + 1), LCD_DIR_HORIZONTAL);
 801624c:	68fb      	ldr	r3, [r7, #12]
 801624e:	b29c      	uxth	r4, r3
 8016250:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016252:	f001 ffa7 	bl	80181a4 <__aeabi_i2f>
 8016256:	4603      	mov	r3, r0
 8016258:	4618      	mov	r0, r3
 801625a:	69f9      	ldr	r1, [r7, #28]
 801625c:	f002 f8aa 	bl	80183b4 <__aeabi_fdiv>
 8016260:	4603      	mov	r3, r0
 8016262:	4618      	mov	r0, r3
 8016264:	f002 f942 	bl	80184ec <__aeabi_f2uiz>
 8016268:	4603      	mov	r3, r0
 801626a:	b29b      	uxth	r3, r3
 801626c:	1ae3      	subs	r3, r4, r3
 801626e:	b29d      	uxth	r5, r3
 8016270:	68bb      	ldr	r3, [r7, #8]
 8016272:	b29a      	uxth	r2, r3
 8016274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016276:	b29b      	uxth	r3, r3
 8016278:	4413      	add	r3, r2
 801627a:	b29c      	uxth	r4, r3
 801627c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801627e:	f001 ff91 	bl	80181a4 <__aeabi_i2f>
 8016282:	4603      	mov	r3, r0
 8016284:	4618      	mov	r0, r3
 8016286:	69f9      	ldr	r1, [r7, #28]
 8016288:	f002 f894 	bl	80183b4 <__aeabi_fdiv>
 801628c:	4603      	mov	r3, r0
 801628e:	4618      	mov	r0, r3
 8016290:	f002 f92c 	bl	80184ec <__aeabi_f2uiz>
 8016294:	4603      	mov	r3, r0
 8016296:	b29b      	uxth	r3, r3
 8016298:	005b      	lsls	r3, r3, #1
 801629a:	b29b      	uxth	r3, r3
 801629c:	3301      	adds	r3, #1
 801629e:	b29b      	uxth	r3, r3
 80162a0:	4628      	mov	r0, r5
 80162a2:	4621      	mov	r1, r4
 80162a4:	461a      	mov	r2, r3
 80162a6:	2300      	movs	r3, #0
 80162a8:	f7ff fddc 	bl	8015e64 <LCD_DrawLine>
      LCD_DrawLine((Xpos-(uint16_t)(x/K)), (Ypos-y), (2*(uint16_t)(x/K) + 1), LCD_DIR_HORIZONTAL);
 80162ac:	68fb      	ldr	r3, [r7, #12]
 80162ae:	b29c      	uxth	r4, r3
 80162b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80162b2:	f001 ff77 	bl	80181a4 <__aeabi_i2f>
 80162b6:	4603      	mov	r3, r0
 80162b8:	4618      	mov	r0, r3
 80162ba:	69f9      	ldr	r1, [r7, #28]
 80162bc:	f002 f87a 	bl	80183b4 <__aeabi_fdiv>
 80162c0:	4603      	mov	r3, r0
 80162c2:	4618      	mov	r0, r3
 80162c4:	f002 f912 	bl	80184ec <__aeabi_f2uiz>
 80162c8:	4603      	mov	r3, r0
 80162ca:	b29b      	uxth	r3, r3
 80162cc:	1ae3      	subs	r3, r4, r3
 80162ce:	b29d      	uxth	r5, r3
 80162d0:	68bb      	ldr	r3, [r7, #8]
 80162d2:	b29a      	uxth	r2, r3
 80162d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162d6:	b29b      	uxth	r3, r3
 80162d8:	1ad3      	subs	r3, r2, r3
 80162da:	b29c      	uxth	r4, r3
 80162dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80162de:	f001 ff61 	bl	80181a4 <__aeabi_i2f>
 80162e2:	4603      	mov	r3, r0
 80162e4:	4618      	mov	r0, r3
 80162e6:	69f9      	ldr	r1, [r7, #28]
 80162e8:	f002 f864 	bl	80183b4 <__aeabi_fdiv>
 80162ec:	4603      	mov	r3, r0
 80162ee:	4618      	mov	r0, r3
 80162f0:	f002 f8fc 	bl	80184ec <__aeabi_f2uiz>
 80162f4:	4603      	mov	r3, r0
 80162f6:	b29b      	uxth	r3, r3
 80162f8:	005b      	lsls	r3, r3, #1
 80162fa:	b29b      	uxth	r3, r3
 80162fc:	3301      	adds	r3, #1
 80162fe:	b29b      	uxth	r3, r3
 8016300:	4628      	mov	r0, r5
 8016302:	4621      	mov	r1, r4
 8016304:	461a      	mov	r2, r3
 8016306:	2300      	movs	r3, #0
 8016308:	f7ff fdac 	bl	8015e64 <LCD_DrawLine>
      
      e2 = err;
 801630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801630e:	623b      	str	r3, [r7, #32]
      if (e2 <= x) 
 8016310:	6a3a      	ldr	r2, [r7, #32]
 8016312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016314:	429a      	cmp	r2, r3
 8016316:	dc13      	bgt.n	8016340 <LCD_DrawFullEllipse+0x284>
      {
        err += ++x*2+1;
 8016318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801631a:	3301      	adds	r3, #1
 801631c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801631e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016320:	005b      	lsls	r3, r3, #1
 8016322:	3301      	adds	r3, #1
 8016324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016326:	4413      	add	r3, r2
 8016328:	627b      	str	r3, [r7, #36]	; 0x24
        if (-y == x && e2 <= y) e2 = 0;
 801632a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801632c:	425a      	negs	r2, r3
 801632e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016330:	429a      	cmp	r2, r3
 8016332:	d105      	bne.n	8016340 <LCD_DrawFullEllipse+0x284>
 8016334:	6a3a      	ldr	r2, [r7, #32]
 8016336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016338:	429a      	cmp	r2, r3
 801633a:	dc01      	bgt.n	8016340 <LCD_DrawFullEllipse+0x284>
 801633c:	2300      	movs	r3, #0
 801633e:	623b      	str	r3, [r7, #32]
      }
      if (e2 > y) err += ++y*2+1;
 8016340:	6a3a      	ldr	r2, [r7, #32]
 8016342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016344:	429a      	cmp	r2, r3
 8016346:	dd08      	ble.n	801635a <LCD_DrawFullEllipse+0x29e>
 8016348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801634a:	3301      	adds	r3, #1
 801634c:	62bb      	str	r3, [r7, #40]	; 0x28
 801634e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016350:	005b      	lsls	r3, r3, #1
 8016352:	3301      	adds	r3, #1
 8016354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016356:	4413      	add	r3, r2
 8016358:	627b      	str	r3, [r7, #36]	; 0x24
    }
    while (y <= 0);
 801635a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801635c:	2b00      	cmp	r3, #0
 801635e:	f77f af6f 	ble.w	8016240 <LCD_DrawFullEllipse+0x184>
  }
}
 8016362:	3730      	adds	r7, #48	; 0x30
 8016364:	46bd      	mov	sp, r7
 8016366:	bdb0      	pop	{r4, r5, r7, pc}

08016368 <LCD_DrawEllipse>:
  * @param  Radius: specifies Radius.
  * @param  Radius2: specifies Radius2.
  * @retval None
  */
void LCD_DrawEllipse(int Xpos, int Ypos, int Radius, int Radius2)
{
 8016368:	b590      	push	{r4, r7, lr}
 801636a:	b08d      	sub	sp, #52	; 0x34
 801636c:	af00      	add	r7, sp, #0
 801636e:	60f8      	str	r0, [r7, #12]
 8016370:	60b9      	str	r1, [r7, #8]
 8016372:	607a      	str	r2, [r7, #4]
 8016374:	603b      	str	r3, [r7, #0]
  int x = -Radius, y = 0, err = 2-2*Radius, e2;
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	425b      	negs	r3, r3
 801637a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801637c:	2300      	movs	r3, #0
 801637e:	62bb      	str	r3, [r7, #40]	; 0x28
 8016380:	687a      	ldr	r2, [r7, #4]
 8016382:	4613      	mov	r3, r2
 8016384:	07db      	lsls	r3, r3, #31
 8016386:	1a9b      	subs	r3, r3, r2
 8016388:	005b      	lsls	r3, r3, #1
 801638a:	3302      	adds	r3, #2
 801638c:	627b      	str	r3, [r7, #36]	; 0x24
  float K = 0, rad1 = 0, rad2 = 0;
 801638e:	f04f 0300 	mov.w	r3, #0
 8016392:	61fb      	str	r3, [r7, #28]
 8016394:	f04f 0300 	mov.w	r3, #0
 8016398:	61bb      	str	r3, [r7, #24]
 801639a:	f04f 0300 	mov.w	r3, #0
 801639e:	617b      	str	r3, [r7, #20]
   
  rad1 = Radius;
 80163a0:	6878      	ldr	r0, [r7, #4]
 80163a2:	f001 feff 	bl	80181a4 <__aeabi_i2f>
 80163a6:	4603      	mov	r3, r0
 80163a8:	61bb      	str	r3, [r7, #24]
  rad2 = Radius2;
 80163aa:	6838      	ldr	r0, [r7, #0]
 80163ac:	f001 fefa 	bl	80181a4 <__aeabi_i2f>
 80163b0:	4603      	mov	r3, r0
 80163b2:	617b      	str	r3, [r7, #20]
  
  if (Radius > Radius2)
 80163b4:	687a      	ldr	r2, [r7, #4]
 80163b6:	683b      	ldr	r3, [r7, #0]
 80163b8:	429a      	cmp	r2, r3
 80163ba:	f340 80b9 	ble.w	8016530 <LCD_DrawEllipse+0x1c8>
  { 
    do {
      K = (float)(rad1/rad2);
 80163be:	69b8      	ldr	r0, [r7, #24]
 80163c0:	6979      	ldr	r1, [r7, #20]
 80163c2:	f001 fff7 	bl	80183b4 <__aeabi_fdiv>
 80163c6:	4603      	mov	r3, r0
 80163c8:	61fb      	str	r3, [r7, #28]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-x) + LCD_PIXEL_WIDTH*(Ypos+(uint16_t)(y/K))))) = CurrentTextColor; 
 80163ca:	68fa      	ldr	r2, [r7, #12]
 80163cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163ce:	1ad4      	subs	r4, r2, r3
 80163d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80163d2:	f001 fee7 	bl	80181a4 <__aeabi_i2f>
 80163d6:	4603      	mov	r3, r0
 80163d8:	4618      	mov	r0, r3
 80163da:	69f9      	ldr	r1, [r7, #28]
 80163dc:	f001 ffea 	bl	80183b4 <__aeabi_fdiv>
 80163e0:	4603      	mov	r3, r0
 80163e2:	4618      	mov	r0, r3
 80163e4:	f002 f882 	bl	80184ec <__aeabi_f2uiz>
 80163e8:	4603      	mov	r3, r0
 80163ea:	b29b      	uxth	r3, r3
 80163ec:	461a      	mov	r2, r3
 80163ee:	68bb      	ldr	r3, [r7, #8]
 80163f0:	441a      	add	r2, r3
 80163f2:	4613      	mov	r3, r2
 80163f4:	011b      	lsls	r3, r3, #4
 80163f6:	1a9b      	subs	r3, r3, r2
 80163f8:	011b      	lsls	r3, r3, #4
 80163fa:	4423      	add	r3, r4
 80163fc:	005b      	lsls	r3, r3, #1
 80163fe:	461a      	mov	r2, r3
 8016400:	4b49      	ldr	r3, [pc, #292]	; (8016528 <LCD_DrawEllipse+0x1c0>)
 8016402:	681b      	ldr	r3, [r3, #0]
 8016404:	4413      	add	r3, r2
 8016406:	4a49      	ldr	r2, [pc, #292]	; (801652c <LCD_DrawEllipse+0x1c4>)
 8016408:	8812      	ldrh	r2, [r2, #0]
 801640a:	801a      	strh	r2, [r3, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+x) + LCD_PIXEL_WIDTH*(Ypos+(uint16_t)(y/K))))) = CurrentTextColor;
 801640c:	68fa      	ldr	r2, [r7, #12]
 801640e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016410:	18d4      	adds	r4, r2, r3
 8016412:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016414:	f001 fec6 	bl	80181a4 <__aeabi_i2f>
 8016418:	4603      	mov	r3, r0
 801641a:	4618      	mov	r0, r3
 801641c:	69f9      	ldr	r1, [r7, #28]
 801641e:	f001 ffc9 	bl	80183b4 <__aeabi_fdiv>
 8016422:	4603      	mov	r3, r0
 8016424:	4618      	mov	r0, r3
 8016426:	f002 f861 	bl	80184ec <__aeabi_f2uiz>
 801642a:	4603      	mov	r3, r0
 801642c:	b29b      	uxth	r3, r3
 801642e:	461a      	mov	r2, r3
 8016430:	68bb      	ldr	r3, [r7, #8]
 8016432:	441a      	add	r2, r3
 8016434:	4613      	mov	r3, r2
 8016436:	011b      	lsls	r3, r3, #4
 8016438:	1a9b      	subs	r3, r3, r2
 801643a:	011b      	lsls	r3, r3, #4
 801643c:	4423      	add	r3, r4
 801643e:	005b      	lsls	r3, r3, #1
 8016440:	461a      	mov	r2, r3
 8016442:	4b39      	ldr	r3, [pc, #228]	; (8016528 <LCD_DrawEllipse+0x1c0>)
 8016444:	681b      	ldr	r3, [r3, #0]
 8016446:	4413      	add	r3, r2
 8016448:	4a38      	ldr	r2, [pc, #224]	; (801652c <LCD_DrawEllipse+0x1c4>)
 801644a:	8812      	ldrh	r2, [r2, #0]
 801644c:	801a      	strh	r2, [r3, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+x) + LCD_PIXEL_WIDTH*(Ypos-(uint16_t)(y/K))))) = CurrentTextColor;
 801644e:	68fa      	ldr	r2, [r7, #12]
 8016450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016452:	18d4      	adds	r4, r2, r3
 8016454:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016456:	f001 fea5 	bl	80181a4 <__aeabi_i2f>
 801645a:	4603      	mov	r3, r0
 801645c:	4618      	mov	r0, r3
 801645e:	69f9      	ldr	r1, [r7, #28]
 8016460:	f001 ffa8 	bl	80183b4 <__aeabi_fdiv>
 8016464:	4603      	mov	r3, r0
 8016466:	4618      	mov	r0, r3
 8016468:	f002 f840 	bl	80184ec <__aeabi_f2uiz>
 801646c:	4603      	mov	r3, r0
 801646e:	b29b      	uxth	r3, r3
 8016470:	68ba      	ldr	r2, [r7, #8]
 8016472:	1ad2      	subs	r2, r2, r3
 8016474:	4613      	mov	r3, r2
 8016476:	011b      	lsls	r3, r3, #4
 8016478:	1a9b      	subs	r3, r3, r2
 801647a:	011b      	lsls	r3, r3, #4
 801647c:	4423      	add	r3, r4
 801647e:	005b      	lsls	r3, r3, #1
 8016480:	461a      	mov	r2, r3
 8016482:	4b29      	ldr	r3, [pc, #164]	; (8016528 <LCD_DrawEllipse+0x1c0>)
 8016484:	681b      	ldr	r3, [r3, #0]
 8016486:	4413      	add	r3, r2
 8016488:	4a28      	ldr	r2, [pc, #160]	; (801652c <LCD_DrawEllipse+0x1c4>)
 801648a:	8812      	ldrh	r2, [r2, #0]
 801648c:	801a      	strh	r2, [r3, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-x) + LCD_PIXEL_WIDTH*(Ypos-(uint16_t)(y/K))))) = CurrentTextColor;
 801648e:	68fa      	ldr	r2, [r7, #12]
 8016490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016492:	1ad4      	subs	r4, r2, r3
 8016494:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016496:	f001 fe85 	bl	80181a4 <__aeabi_i2f>
 801649a:	4603      	mov	r3, r0
 801649c:	4618      	mov	r0, r3
 801649e:	69f9      	ldr	r1, [r7, #28]
 80164a0:	f001 ff88 	bl	80183b4 <__aeabi_fdiv>
 80164a4:	4603      	mov	r3, r0
 80164a6:	4618      	mov	r0, r3
 80164a8:	f002 f820 	bl	80184ec <__aeabi_f2uiz>
 80164ac:	4603      	mov	r3, r0
 80164ae:	b29b      	uxth	r3, r3
 80164b0:	68ba      	ldr	r2, [r7, #8]
 80164b2:	1ad2      	subs	r2, r2, r3
 80164b4:	4613      	mov	r3, r2
 80164b6:	011b      	lsls	r3, r3, #4
 80164b8:	1a9b      	subs	r3, r3, r2
 80164ba:	011b      	lsls	r3, r3, #4
 80164bc:	4423      	add	r3, r4
 80164be:	005b      	lsls	r3, r3, #1
 80164c0:	461a      	mov	r2, r3
 80164c2:	4b19      	ldr	r3, [pc, #100]	; (8016528 <LCD_DrawEllipse+0x1c0>)
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	4413      	add	r3, r2
 80164c8:	4a18      	ldr	r2, [pc, #96]	; (801652c <LCD_DrawEllipse+0x1c4>)
 80164ca:	8812      	ldrh	r2, [r2, #0]
 80164cc:	801a      	strh	r2, [r3, #0]
            
      e2 = err;
 80164ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164d0:	623b      	str	r3, [r7, #32]
      if (e2 <= y) {
 80164d2:	6a3a      	ldr	r2, [r7, #32]
 80164d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164d6:	429a      	cmp	r2, r3
 80164d8:	dc13      	bgt.n	8016502 <LCD_DrawEllipse+0x19a>
        err += ++y*2+1;
 80164da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164dc:	3301      	adds	r3, #1
 80164de:	62bb      	str	r3, [r7, #40]	; 0x28
 80164e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164e2:	005b      	lsls	r3, r3, #1
 80164e4:	3301      	adds	r3, #1
 80164e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80164e8:	4413      	add	r3, r2
 80164ea:	627b      	str	r3, [r7, #36]	; 0x24
        if (-x == y && e2 <= x) e2 = 0;
 80164ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164ee:	425a      	negs	r2, r3
 80164f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164f2:	429a      	cmp	r2, r3
 80164f4:	d105      	bne.n	8016502 <LCD_DrawEllipse+0x19a>
 80164f6:	6a3a      	ldr	r2, [r7, #32]
 80164f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164fa:	429a      	cmp	r2, r3
 80164fc:	dc01      	bgt.n	8016502 <LCD_DrawEllipse+0x19a>
 80164fe:	2300      	movs	r3, #0
 8016500:	623b      	str	r3, [r7, #32]
      }
      if (e2 > x) err += ++x*2+1;
 8016502:	6a3a      	ldr	r2, [r7, #32]
 8016504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016506:	429a      	cmp	r2, r3
 8016508:	dd08      	ble.n	801651c <LCD_DrawEllipse+0x1b4>
 801650a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801650c:	3301      	adds	r3, #1
 801650e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016512:	005b      	lsls	r3, r3, #1
 8016514:	3301      	adds	r3, #1
 8016516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016518:	4413      	add	r3, r2
 801651a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    while (x <= 0);
 801651c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801651e:	2b00      	cmp	r3, #0
 8016520:	f77f af4d 	ble.w	80163be <LCD_DrawEllipse+0x56>
 8016524:	e0bc      	b.n	80166a0 <LCD_DrawEllipse+0x338>
 8016526:	bf00      	nop
 8016528:	200000b8 	.word	0x200000b8
 801652c:	2000534c 	.word	0x2000534c
  }
  else
  {
    y = -Radius2; 
 8016530:	683b      	ldr	r3, [r7, #0]
 8016532:	425b      	negs	r3, r3
 8016534:	62bb      	str	r3, [r7, #40]	; 0x28
    x = 0;
 8016536:	2300      	movs	r3, #0
 8016538:	62fb      	str	r3, [r7, #44]	; 0x2c
    do { 
      K = (float)(rad2/rad1);
 801653a:	6978      	ldr	r0, [r7, #20]
 801653c:	69b9      	ldr	r1, [r7, #24]
 801653e:	f001 ff39 	bl	80183b4 <__aeabi_fdiv>
 8016542:	4603      	mov	r3, r0
 8016544:	61fb      	str	r3, [r7, #28]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-(uint16_t)(x/K)) + LCD_PIXEL_WIDTH*(Ypos+y)))) = CurrentTextColor; 
 8016546:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016548:	f001 fe2c 	bl	80181a4 <__aeabi_i2f>
 801654c:	4603      	mov	r3, r0
 801654e:	4618      	mov	r0, r3
 8016550:	69f9      	ldr	r1, [r7, #28]
 8016552:	f001 ff2f 	bl	80183b4 <__aeabi_fdiv>
 8016556:	4603      	mov	r3, r0
 8016558:	4618      	mov	r0, r3
 801655a:	f001 ffc7 	bl	80184ec <__aeabi_f2uiz>
 801655e:	4603      	mov	r3, r0
 8016560:	b29b      	uxth	r3, r3
 8016562:	68fa      	ldr	r2, [r7, #12]
 8016564:	1ad1      	subs	r1, r2, r3
 8016566:	68ba      	ldr	r2, [r7, #8]
 8016568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801656a:	441a      	add	r2, r3
 801656c:	4613      	mov	r3, r2
 801656e:	011b      	lsls	r3, r3, #4
 8016570:	1a9b      	subs	r3, r3, r2
 8016572:	011b      	lsls	r3, r3, #4
 8016574:	440b      	add	r3, r1
 8016576:	005b      	lsls	r3, r3, #1
 8016578:	461a      	mov	r2, r3
 801657a:	4b4b      	ldr	r3, [pc, #300]	; (80166a8 <LCD_DrawEllipse+0x340>)
 801657c:	681b      	ldr	r3, [r3, #0]
 801657e:	4413      	add	r3, r2
 8016580:	4a4a      	ldr	r2, [pc, #296]	; (80166ac <LCD_DrawEllipse+0x344>)
 8016582:	8812      	ldrh	r2, [r2, #0]
 8016584:	801a      	strh	r2, [r3, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+(uint16_t)(x/K)) + LCD_PIXEL_WIDTH*(Ypos+y)))) = CurrentTextColor;
 8016586:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016588:	f001 fe0c 	bl	80181a4 <__aeabi_i2f>
 801658c:	4603      	mov	r3, r0
 801658e:	4618      	mov	r0, r3
 8016590:	69f9      	ldr	r1, [r7, #28]
 8016592:	f001 ff0f 	bl	80183b4 <__aeabi_fdiv>
 8016596:	4603      	mov	r3, r0
 8016598:	4618      	mov	r0, r3
 801659a:	f001 ffa7 	bl	80184ec <__aeabi_f2uiz>
 801659e:	4603      	mov	r3, r0
 80165a0:	b29b      	uxth	r3, r3
 80165a2:	461a      	mov	r2, r3
 80165a4:	68fb      	ldr	r3, [r7, #12]
 80165a6:	18d1      	adds	r1, r2, r3
 80165a8:	68ba      	ldr	r2, [r7, #8]
 80165aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165ac:	441a      	add	r2, r3
 80165ae:	4613      	mov	r3, r2
 80165b0:	011b      	lsls	r3, r3, #4
 80165b2:	1a9b      	subs	r3, r3, r2
 80165b4:	011b      	lsls	r3, r3, #4
 80165b6:	440b      	add	r3, r1
 80165b8:	005b      	lsls	r3, r3, #1
 80165ba:	461a      	mov	r2, r3
 80165bc:	4b3a      	ldr	r3, [pc, #232]	; (80166a8 <LCD_DrawEllipse+0x340>)
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	4413      	add	r3, r2
 80165c2:	4a3a      	ldr	r2, [pc, #232]	; (80166ac <LCD_DrawEllipse+0x344>)
 80165c4:	8812      	ldrh	r2, [r2, #0]
 80165c6:	801a      	strh	r2, [r3, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+(uint16_t)(x/K)) + LCD_PIXEL_WIDTH*(Ypos-y)))) = CurrentTextColor;
 80165c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80165ca:	f001 fdeb 	bl	80181a4 <__aeabi_i2f>
 80165ce:	4603      	mov	r3, r0
 80165d0:	4618      	mov	r0, r3
 80165d2:	69f9      	ldr	r1, [r7, #28]
 80165d4:	f001 feee 	bl	80183b4 <__aeabi_fdiv>
 80165d8:	4603      	mov	r3, r0
 80165da:	4618      	mov	r0, r3
 80165dc:	f001 ff86 	bl	80184ec <__aeabi_f2uiz>
 80165e0:	4603      	mov	r3, r0
 80165e2:	b29b      	uxth	r3, r3
 80165e4:	461a      	mov	r2, r3
 80165e6:	68fb      	ldr	r3, [r7, #12]
 80165e8:	18d1      	adds	r1, r2, r3
 80165ea:	68ba      	ldr	r2, [r7, #8]
 80165ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165ee:	1ad2      	subs	r2, r2, r3
 80165f0:	4613      	mov	r3, r2
 80165f2:	011b      	lsls	r3, r3, #4
 80165f4:	1a9b      	subs	r3, r3, r2
 80165f6:	011b      	lsls	r3, r3, #4
 80165f8:	440b      	add	r3, r1
 80165fa:	005b      	lsls	r3, r3, #1
 80165fc:	461a      	mov	r2, r3
 80165fe:	4b2a      	ldr	r3, [pc, #168]	; (80166a8 <LCD_DrawEllipse+0x340>)
 8016600:	681b      	ldr	r3, [r3, #0]
 8016602:	4413      	add	r3, r2
 8016604:	4a29      	ldr	r2, [pc, #164]	; (80166ac <LCD_DrawEllipse+0x344>)
 8016606:	8812      	ldrh	r2, [r2, #0]
 8016608:	801a      	strh	r2, [r3, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-(uint16_t)(x/K)) + LCD_PIXEL_WIDTH*(Ypos-y)))) = CurrentTextColor;
 801660a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801660c:	f001 fdca 	bl	80181a4 <__aeabi_i2f>
 8016610:	4603      	mov	r3, r0
 8016612:	4618      	mov	r0, r3
 8016614:	69f9      	ldr	r1, [r7, #28]
 8016616:	f001 fecd 	bl	80183b4 <__aeabi_fdiv>
 801661a:	4603      	mov	r3, r0
 801661c:	4618      	mov	r0, r3
 801661e:	f001 ff65 	bl	80184ec <__aeabi_f2uiz>
 8016622:	4603      	mov	r3, r0
 8016624:	b29b      	uxth	r3, r3
 8016626:	68fa      	ldr	r2, [r7, #12]
 8016628:	1ad1      	subs	r1, r2, r3
 801662a:	68ba      	ldr	r2, [r7, #8]
 801662c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801662e:	1ad2      	subs	r2, r2, r3
 8016630:	4613      	mov	r3, r2
 8016632:	011b      	lsls	r3, r3, #4
 8016634:	1a9b      	subs	r3, r3, r2
 8016636:	011b      	lsls	r3, r3, #4
 8016638:	440b      	add	r3, r1
 801663a:	005b      	lsls	r3, r3, #1
 801663c:	461a      	mov	r2, r3
 801663e:	4b1a      	ldr	r3, [pc, #104]	; (80166a8 <LCD_DrawEllipse+0x340>)
 8016640:	681b      	ldr	r3, [r3, #0]
 8016642:	4413      	add	r3, r2
 8016644:	4a19      	ldr	r2, [pc, #100]	; (80166ac <LCD_DrawEllipse+0x344>)
 8016646:	8812      	ldrh	r2, [r2, #0]
 8016648:	801a      	strh	r2, [r3, #0]
      
      e2 = err;
 801664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801664c:	623b      	str	r3, [r7, #32]
      if (e2 <= x) {
 801664e:	6a3a      	ldr	r2, [r7, #32]
 8016650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016652:	429a      	cmp	r2, r3
 8016654:	dc13      	bgt.n	801667e <LCD_DrawEllipse+0x316>
        err += ++x*2+1;
 8016656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016658:	3301      	adds	r3, #1
 801665a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801665c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801665e:	005b      	lsls	r3, r3, #1
 8016660:	3301      	adds	r3, #1
 8016662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016664:	4413      	add	r3, r2
 8016666:	627b      	str	r3, [r7, #36]	; 0x24
        if (-y == x && e2 <= y) e2 = 0;
 8016668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801666a:	425a      	negs	r2, r3
 801666c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801666e:	429a      	cmp	r2, r3
 8016670:	d105      	bne.n	801667e <LCD_DrawEllipse+0x316>
 8016672:	6a3a      	ldr	r2, [r7, #32]
 8016674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016676:	429a      	cmp	r2, r3
 8016678:	dc01      	bgt.n	801667e <LCD_DrawEllipse+0x316>
 801667a:	2300      	movs	r3, #0
 801667c:	623b      	str	r3, [r7, #32]
      }
      if (e2 > y) err += ++y*2+1;     
 801667e:	6a3a      	ldr	r2, [r7, #32]
 8016680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016682:	429a      	cmp	r2, r3
 8016684:	dd08      	ble.n	8016698 <LCD_DrawEllipse+0x330>
 8016686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016688:	3301      	adds	r3, #1
 801668a:	62bb      	str	r3, [r7, #40]	; 0x28
 801668c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801668e:	005b      	lsls	r3, r3, #1
 8016690:	3301      	adds	r3, #1
 8016692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016694:	4413      	add	r3, r2
 8016696:	627b      	str	r3, [r7, #36]	; 0x24
    }
    while (y <= 0);
 8016698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801669a:	2b00      	cmp	r3, #0
 801669c:	f77f af4d 	ble.w	801653a <LCD_DrawEllipse+0x1d2>
  }
}
 80166a0:	3734      	adds	r7, #52	; 0x34
 80166a2:	46bd      	mov	sp, r7
 80166a4:	bd90      	pop	{r4, r7, pc}
 80166a6:	bf00      	nop
 80166a8:	200000b8 	.word	0x200000b8
 80166ac:	2000534c 	.word	0x2000534c

080166b0 <LCD_DrawMonoPict>:
  * @brief  Displays a mono-color picture.
  * @param  Pict: pointer to the picture array.
  * @retval None
  */
void LCD_DrawMonoPict(const uint32_t *Pict)
{
 80166b0:	b480      	push	{r7}
 80166b2:	b085      	sub	sp, #20
 80166b4:	af00      	add	r7, sp, #0
 80166b6:	6078      	str	r0, [r7, #4]
  uint32_t index = 0, counter = 0;
 80166b8:	2300      	movs	r3, #0
 80166ba:	60fb      	str	r3, [r7, #12]
 80166bc:	2300      	movs	r3, #0
 80166be:	60bb      	str	r3, [r7, #8]
  
   
  for(index = 0; index < 2400; index++)
 80166c0:	2300      	movs	r3, #0
 80166c2:	60fb      	str	r3, [r7, #12]
 80166c4:	e022      	b.n	801670c <LCD_DrawMonoPict+0x5c>
  {
    for(counter = 0; counter < 32; counter++)
 80166c6:	2300      	movs	r3, #0
 80166c8:	60bb      	str	r3, [r7, #8]
 80166ca:	e019      	b.n	8016700 <LCD_DrawMonoPict+0x50>
    {
      if((Pict[index] & (1 << counter)) == 0x00)
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	009b      	lsls	r3, r3, #2
 80166d0:	687a      	ldr	r2, [r7, #4]
 80166d2:	4413      	add	r3, r2
 80166d4:	681a      	ldr	r2, [r3, #0]
 80166d6:	68bb      	ldr	r3, [r7, #8]
 80166d8:	2101      	movs	r1, #1
 80166da:	fa01 f303 	lsl.w	r3, r1, r3
 80166de:	4013      	ands	r3, r2
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d105      	bne.n	80166f0 <LCD_DrawMonoPict+0x40>
      {
        *(__IO uint16_t*)(CurrentFrameBuffer) = CurrentBackColor;
 80166e4:	4b0e      	ldr	r3, [pc, #56]	; (8016720 <LCD_DrawMonoPict+0x70>)
 80166e6:	681b      	ldr	r3, [r3, #0]
 80166e8:	4a0e      	ldr	r2, [pc, #56]	; (8016724 <LCD_DrawMonoPict+0x74>)
 80166ea:	8812      	ldrh	r2, [r2, #0]
 80166ec:	801a      	strh	r2, [r3, #0]
 80166ee:	e004      	b.n	80166fa <LCD_DrawMonoPict+0x4a>
      }
      else
      {
        *(__IO uint16_t*)(CurrentFrameBuffer) = CurrentTextColor;
 80166f0:	4b0b      	ldr	r3, [pc, #44]	; (8016720 <LCD_DrawMonoPict+0x70>)
 80166f2:	681b      	ldr	r3, [r3, #0]
 80166f4:	4a0c      	ldr	r2, [pc, #48]	; (8016728 <LCD_DrawMonoPict+0x78>)
 80166f6:	8812      	ldrh	r2, [r2, #0]
 80166f8:	801a      	strh	r2, [r3, #0]
  uint32_t index = 0, counter = 0;
  
   
  for(index = 0; index < 2400; index++)
  {
    for(counter = 0; counter < 32; counter++)
 80166fa:	68bb      	ldr	r3, [r7, #8]
 80166fc:	3301      	adds	r3, #1
 80166fe:	60bb      	str	r3, [r7, #8]
 8016700:	68bb      	ldr	r3, [r7, #8]
 8016702:	2b1f      	cmp	r3, #31
 8016704:	d9e2      	bls.n	80166cc <LCD_DrawMonoPict+0x1c>
void LCD_DrawMonoPict(const uint32_t *Pict)
{
  uint32_t index = 0, counter = 0;
  
   
  for(index = 0; index < 2400; index++)
 8016706:	68fb      	ldr	r3, [r7, #12]
 8016708:	3301      	adds	r3, #1
 801670a:	60fb      	str	r3, [r7, #12]
 801670c:	68fb      	ldr	r3, [r7, #12]
 801670e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8016712:	d3d8      	bcc.n	80166c6 <LCD_DrawMonoPict+0x16>
      {
        *(__IO uint16_t*)(CurrentFrameBuffer) = CurrentTextColor;
      }
    }
  }
}
 8016714:	3714      	adds	r7, #20
 8016716:	46bd      	mov	sp, r7
 8016718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801671c:	4770      	bx	lr
 801671e:	bf00      	nop
 8016720:	200000b8 	.word	0x200000b8
 8016724:	200000b4 	.word	0x200000b4
 8016728:	2000534c 	.word	0x2000534c

0801672c <LCD_WriteBMP>:
  * @brief  Displays a bitmap picture loaded in the internal Flash.
  * @param  BmpAddress: Bmp picture address in the internal Flash.
  * @retval None
  */
void LCD_WriteBMP(uint32_t BmpAddress)
{
 801672c:	b580      	push	{r7, lr}
 801672e:	b08a      	sub	sp, #40	; 0x28
 8016730:	af00      	add	r7, sp, #0
 8016732:	6078      	str	r0, [r7, #4]
  uint32_t index = 0, size = 0, width = 0, height = 0, bit_pixel = 0;
 8016734:	2300      	movs	r3, #0
 8016736:	627b      	str	r3, [r7, #36]	; 0x24
 8016738:	2300      	movs	r3, #0
 801673a:	617b      	str	r3, [r7, #20]
 801673c:	2300      	movs	r3, #0
 801673e:	613b      	str	r3, [r7, #16]
 8016740:	2300      	movs	r3, #0
 8016742:	60fb      	str	r3, [r7, #12]
 8016744:	2300      	movs	r3, #0
 8016746:	60bb      	str	r3, [r7, #8]
  uint32_t Address;
  uint32_t currentline = 0, linenumber = 0;
 8016748:	2300      	movs	r3, #0
 801674a:	61fb      	str	r3, [r7, #28]
 801674c:	2300      	movs	r3, #0
 801674e:	61bb      	str	r3, [r7, #24]
 
  Address = CurrentFrameBuffer;
 8016750:	4b69      	ldr	r3, [pc, #420]	; (80168f8 <LCD_WriteBMP+0x1cc>)
 8016752:	681b      	ldr	r3, [r3, #0]
 8016754:	623b      	str	r3, [r7, #32]

  /* Read bitmap size */
  size = *(__IO uint16_t *) (BmpAddress + 2);
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	3302      	adds	r3, #2
 801675a:	881b      	ldrh	r3, [r3, #0]
 801675c:	b29b      	uxth	r3, r3
 801675e:	617b      	str	r3, [r7, #20]
  size |= (*(__IO uint16_t *) (BmpAddress + 4)) << 16;
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	3304      	adds	r3, #4
 8016764:	881b      	ldrh	r3, [r3, #0]
 8016766:	b29b      	uxth	r3, r3
 8016768:	041b      	lsls	r3, r3, #16
 801676a:	697a      	ldr	r2, [r7, #20]
 801676c:	4313      	orrs	r3, r2
 801676e:	617b      	str	r3, [r7, #20]
  
  /* Get bitmap data address offset */
  index = *(__IO uint16_t *) (BmpAddress + 10);
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	330a      	adds	r3, #10
 8016774:	881b      	ldrh	r3, [r3, #0]
 8016776:	b29b      	uxth	r3, r3
 8016778:	627b      	str	r3, [r7, #36]	; 0x24
  index |= (*(__IO uint16_t *) (BmpAddress + 12)) << 16;
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	330c      	adds	r3, #12
 801677e:	881b      	ldrh	r3, [r3, #0]
 8016780:	b29b      	uxth	r3, r3
 8016782:	041b      	lsls	r3, r3, #16
 8016784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016786:	4313      	orrs	r3, r2
 8016788:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = *(uint16_t *) (BmpAddress + 18);
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	3312      	adds	r3, #18
 801678e:	881b      	ldrh	r3, [r3, #0]
 8016790:	613b      	str	r3, [r7, #16]
  width |= (*(uint16_t *) (BmpAddress + 20)) << 16;
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	3314      	adds	r3, #20
 8016796:	881b      	ldrh	r3, [r3, #0]
 8016798:	041b      	lsls	r3, r3, #16
 801679a:	693a      	ldr	r2, [r7, #16]
 801679c:	4313      	orrs	r3, r2
 801679e:	613b      	str	r3, [r7, #16]

  /* Read bitmap height */
  height = *(uint16_t *) (BmpAddress + 22);
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	3316      	adds	r3, #22
 80167a4:	881b      	ldrh	r3, [r3, #0]
 80167a6:	60fb      	str	r3, [r7, #12]
  height |= (*(uint16_t *) (BmpAddress + 24)) << 16;
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	3318      	adds	r3, #24
 80167ac:	881b      	ldrh	r3, [r3, #0]
 80167ae:	041b      	lsls	r3, r3, #16
 80167b0:	68fa      	ldr	r2, [r7, #12]
 80167b2:	4313      	orrs	r3, r2
 80167b4:	60fb      	str	r3, [r7, #12]

  /* Read bit/pixel */
  bit_pixel = *(uint16_t *) (BmpAddress + 28);  
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	331c      	adds	r3, #28
 80167ba:	881b      	ldrh	r3, [r3, #0]
 80167bc:	60bb      	str	r3, [r7, #8]
 
  if (CurrentLayer == LCD_BACKGROUND_LAYER)
 80167be:	4b4f      	ldr	r3, [pc, #316]	; (80168fc <LCD_WriteBMP+0x1d0>)
 80167c0:	681b      	ldr	r3, [r3, #0]
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d127      	bne.n	8016816 <LCD_WriteBMP+0xea>
  {
    /* reconfigure layer size in accordance with the picture */
    LTDC_LayerSize(LTDC_Layer1, width, height);
 80167c6:	484e      	ldr	r0, [pc, #312]	; (8016900 <LCD_WriteBMP+0x1d4>)
 80167c8:	6939      	ldr	r1, [r7, #16]
 80167ca:	68fa      	ldr	r2, [r7, #12]
 80167cc:	f7f8 fb9c 	bl	800ef08 <LTDC_LayerSize>
    LTDC_ReloadConfig(LTDC_VBReload);
 80167d0:	2002      	movs	r0, #2
 80167d2:	f7f8 f91d 	bl	800ea10 <LTDC_ReloadConfig>

    /* Reconfigure the Layer pixel format in accordance with the picture */    
    if ((bit_pixel/8) == 4)
 80167d6:	68bb      	ldr	r3, [r7, #8]
 80167d8:	3b20      	subs	r3, #32
 80167da:	2b07      	cmp	r3, #7
 80167dc:	d807      	bhi.n	80167ee <LCD_WriteBMP+0xc2>
    {
      LTDC_LayerPixelFormat(LTDC_Layer1, LTDC_Pixelformat_ARGB8888);
 80167de:	4848      	ldr	r0, [pc, #288]	; (8016900 <LCD_WriteBMP+0x1d4>)
 80167e0:	2100      	movs	r1, #0
 80167e2:	f7f8 fbf7 	bl	800efd4 <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);
 80167e6:	2002      	movs	r0, #2
 80167e8:	f7f8 f912 	bl	800ea10 <LTDC_ReloadConfig>
 80167ec:	e03a      	b.n	8016864 <LCD_WriteBMP+0x138>
    }
    else if ((bit_pixel/8) == 2)
 80167ee:	68bb      	ldr	r3, [r7, #8]
 80167f0:	3b10      	subs	r3, #16
 80167f2:	2b07      	cmp	r3, #7
 80167f4:	d807      	bhi.n	8016806 <LCD_WriteBMP+0xda>
    {
      LTDC_LayerPixelFormat(LTDC_Layer1, LTDC_Pixelformat_RGB565);
 80167f6:	4842      	ldr	r0, [pc, #264]	; (8016900 <LCD_WriteBMP+0x1d4>)
 80167f8:	2102      	movs	r1, #2
 80167fa:	f7f8 fbeb 	bl	800efd4 <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);
 80167fe:	2002      	movs	r0, #2
 8016800:	f7f8 f906 	bl	800ea10 <LTDC_ReloadConfig>
 8016804:	e02e      	b.n	8016864 <LCD_WriteBMP+0x138>
    }
    else 
    {
      LTDC_LayerPixelFormat(LTDC_Layer1, LTDC_Pixelformat_RGB888);
 8016806:	483e      	ldr	r0, [pc, #248]	; (8016900 <LCD_WriteBMP+0x1d4>)
 8016808:	2101      	movs	r1, #1
 801680a:	f7f8 fbe3 	bl	800efd4 <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);
 801680e:	2002      	movs	r0, #2
 8016810:	f7f8 f8fe 	bl	800ea10 <LTDC_ReloadConfig>
 8016814:	e026      	b.n	8016864 <LCD_WriteBMP+0x138>
    } 
  }
  else
  {
    /* reconfigure layer size in accordance with the picture */
    LTDC_LayerSize(LTDC_Layer2, width, height);
 8016816:	483b      	ldr	r0, [pc, #236]	; (8016904 <LCD_WriteBMP+0x1d8>)
 8016818:	6939      	ldr	r1, [r7, #16]
 801681a:	68fa      	ldr	r2, [r7, #12]
 801681c:	f7f8 fb74 	bl	800ef08 <LTDC_LayerSize>
    LTDC_ReloadConfig(LTDC_VBReload); 
 8016820:	2002      	movs	r0, #2
 8016822:	f7f8 f8f5 	bl	800ea10 <LTDC_ReloadConfig>
    
    /* Reconfigure the Layer pixel format in accordance with the picture */
    if ((bit_pixel/8) == 4)
 8016826:	68bb      	ldr	r3, [r7, #8]
 8016828:	3b20      	subs	r3, #32
 801682a:	2b07      	cmp	r3, #7
 801682c:	d807      	bhi.n	801683e <LCD_WriteBMP+0x112>
    {
      LTDC_LayerPixelFormat(LTDC_Layer2, LTDC_Pixelformat_ARGB8888);
 801682e:	4835      	ldr	r0, [pc, #212]	; (8016904 <LCD_WriteBMP+0x1d8>)
 8016830:	2100      	movs	r1, #0
 8016832:	f7f8 fbcf 	bl	800efd4 <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);
 8016836:	2002      	movs	r0, #2
 8016838:	f7f8 f8ea 	bl	800ea10 <LTDC_ReloadConfig>
 801683c:	e012      	b.n	8016864 <LCD_WriteBMP+0x138>
    }
    else if ((bit_pixel/8) == 2)
 801683e:	68bb      	ldr	r3, [r7, #8]
 8016840:	3b10      	subs	r3, #16
 8016842:	2b07      	cmp	r3, #7
 8016844:	d807      	bhi.n	8016856 <LCD_WriteBMP+0x12a>
    {
      LTDC_LayerPixelFormat(LTDC_Layer2, LTDC_Pixelformat_RGB565);
 8016846:	482f      	ldr	r0, [pc, #188]	; (8016904 <LCD_WriteBMP+0x1d8>)
 8016848:	2102      	movs	r1, #2
 801684a:	f7f8 fbc3 	bl	800efd4 <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);
 801684e:	2002      	movs	r0, #2
 8016850:	f7f8 f8de 	bl	800ea10 <LTDC_ReloadConfig>
 8016854:	e006      	b.n	8016864 <LCD_WriteBMP+0x138>
    }
    else
    {
      LTDC_LayerPixelFormat(LTDC_Layer2, LTDC_Pixelformat_RGB888);
 8016856:	482b      	ldr	r0, [pc, #172]	; (8016904 <LCD_WriteBMP+0x1d8>)
 8016858:	2101      	movs	r1, #1
 801685a:	f7f8 fbbb 	bl	800efd4 <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);  
 801685e:	2002      	movs	r0, #2
 8016860:	f7f8 f8d6 	bl	800ea10 <LTDC_ReloadConfig>
    }
  }
 
  /* compute the real size of the picture (without the header)) */  
  size = (size - index); 
 8016864:	697a      	ldr	r2, [r7, #20]
 8016866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016868:	1ad3      	subs	r3, r2, r3
 801686a:	617b      	str	r3, [r7, #20]

  /* bypass the bitmap header */
  BmpAddress += index;
 801686c:	687a      	ldr	r2, [r7, #4]
 801686e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016870:	4413      	add	r3, r2
 8016872:	607b      	str	r3, [r7, #4]

  /* start copie image from the bottom */
  Address += width*(height-1)*(bit_pixel/8);
 8016874:	68fb      	ldr	r3, [r7, #12]
 8016876:	3b01      	subs	r3, #1
 8016878:	693a      	ldr	r2, [r7, #16]
 801687a:	fb02 f303 	mul.w	r3, r2, r3
 801687e:	68ba      	ldr	r2, [r7, #8]
 8016880:	08d2      	lsrs	r2, r2, #3
 8016882:	fb02 f303 	mul.w	r3, r2, r3
 8016886:	6a3a      	ldr	r2, [r7, #32]
 8016888:	4413      	add	r3, r2
 801688a:	623b      	str	r3, [r7, #32]
  
  for(index = 0; index < size; index++)
 801688c:	2300      	movs	r3, #0
 801688e:	627b      	str	r3, [r7, #36]	; 0x24
 8016890:	e02a      	b.n	80168e8 <LCD_WriteBMP+0x1bc>
  {
    *(__IO uint8_t*) (Address) = *(__IO uint8_t *)BmpAddress;
 8016892:	6a3b      	ldr	r3, [r7, #32]
 8016894:	687a      	ldr	r2, [r7, #4]
 8016896:	7812      	ldrb	r2, [r2, #0]
 8016898:	b2d2      	uxtb	r2, r2
 801689a:	701a      	strb	r2, [r3, #0]
    
    /*jump on next byte */   
    BmpAddress++;
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	3301      	adds	r3, #1
 80168a0:	607b      	str	r3, [r7, #4]
    Address++;
 80168a2:	6a3b      	ldr	r3, [r7, #32]
 80168a4:	3301      	adds	r3, #1
 80168a6:	623b      	str	r3, [r7, #32]
    currentline++;
 80168a8:	69fb      	ldr	r3, [r7, #28]
 80168aa:	3301      	adds	r3, #1
 80168ac:	61fb      	str	r3, [r7, #28]
    
    if((currentline/(bit_pixel/8)) == width)
 80168ae:	68bb      	ldr	r3, [r7, #8]
 80168b0:	08db      	lsrs	r3, r3, #3
 80168b2:	69fa      	ldr	r2, [r7, #28]
 80168b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80168b8:	693b      	ldr	r3, [r7, #16]
 80168ba:	429a      	cmp	r2, r3
 80168bc:	d111      	bne.n	80168e2 <LCD_WriteBMP+0x1b6>
    {
      if(linenumber < height)
 80168be:	69ba      	ldr	r2, [r7, #24]
 80168c0:	68fb      	ldr	r3, [r7, #12]
 80168c2:	429a      	cmp	r2, r3
 80168c4:	d20d      	bcs.n	80168e2 <LCD_WriteBMP+0x1b6>
      {
        linenumber++;
 80168c6:	69bb      	ldr	r3, [r7, #24]
 80168c8:	3301      	adds	r3, #1
 80168ca:	61bb      	str	r3, [r7, #24]
        Address -=(2*width*(bit_pixel/8));
 80168cc:	68bb      	ldr	r3, [r7, #8]
 80168ce:	08db      	lsrs	r3, r3, #3
 80168d0:	693a      	ldr	r2, [r7, #16]
 80168d2:	fb02 f303 	mul.w	r3, r2, r3
 80168d6:	005b      	lsls	r3, r3, #1
 80168d8:	6a3a      	ldr	r2, [r7, #32]
 80168da:	1ad3      	subs	r3, r2, r3
 80168dc:	623b      	str	r3, [r7, #32]
        currentline = 0;
 80168de:	2300      	movs	r3, #0
 80168e0:	61fb      	str	r3, [r7, #28]
  BmpAddress += index;

  /* start copie image from the bottom */
  Address += width*(height-1)*(bit_pixel/8);
  
  for(index = 0; index < size; index++)
 80168e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168e4:	3301      	adds	r3, #1
 80168e6:	627b      	str	r3, [r7, #36]	; 0x24
 80168e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80168ea:	697b      	ldr	r3, [r7, #20]
 80168ec:	429a      	cmp	r2, r3
 80168ee:	d3d0      	bcc.n	8016892 <LCD_WriteBMP+0x166>
        Address -=(2*width*(bit_pixel/8));
        currentline = 0;
      }
    }
  }
}
 80168f0:	3728      	adds	r7, #40	; 0x28
 80168f2:	46bd      	mov	sp, r7
 80168f4:	bd80      	pop	{r7, pc}
 80168f6:	bf00      	nop
 80168f8:	200000b8 	.word	0x200000b8
 80168fc:	20005350 	.word	0x20005350
 8016900:	40016884 	.word	0x40016884
 8016904:	40016904 	.word	0x40016904

08016908 <LCD_DrawFullRect>:
  * @param  Height: rectangle height.
  * @param  Width: rectangle width.
  * @retval None
  */
void LCD_DrawFullRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8016908:	b580      	push	{r7, lr}
 801690a:	b090      	sub	sp, #64	; 0x40
 801690c:	af00      	add	r7, sp, #0
 801690e:	80f8      	strh	r0, [r7, #6]
 8016910:	80b9      	strh	r1, [r7, #4]
 8016912:	807a      	strh	r2, [r7, #2]
 8016914:	803b      	strh	r3, [r7, #0]
  DMA2D_InitTypeDef      DMA2D_InitStruct;
  
  uint32_t  Xaddress = 0; 
 8016916:	2300      	movs	r3, #0
 8016918:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t Red_Value = 0, Green_Value = 0, Blue_Value = 0;
 801691a:	2300      	movs	r3, #0
 801691c:	877b      	strh	r3, [r7, #58]	; 0x3a
 801691e:	2300      	movs	r3, #0
 8016920:	873b      	strh	r3, [r7, #56]	; 0x38
 8016922:	2300      	movs	r3, #0
 8016924:	86fb      	strh	r3, [r7, #54]	; 0x36
 
  Red_Value = (0xF800 & CurrentTextColor) >> 11;
 8016926:	4b26      	ldr	r3, [pc, #152]	; (80169c0 <LCD_DrawFullRect+0xb8>)
 8016928:	881b      	ldrh	r3, [r3, #0]
 801692a:	0adb      	lsrs	r3, r3, #11
 801692c:	877b      	strh	r3, [r7, #58]	; 0x3a
  Blue_Value = 0x001F & CurrentTextColor;
 801692e:	4b24      	ldr	r3, [pc, #144]	; (80169c0 <LCD_DrawFullRect+0xb8>)
 8016930:	881b      	ldrh	r3, [r3, #0]
 8016932:	f003 031f 	and.w	r3, r3, #31
 8016936:	86fb      	strh	r3, [r7, #54]	; 0x36
  Green_Value = (0x07E0 & CurrentTextColor) >> 5;
 8016938:	4b21      	ldr	r3, [pc, #132]	; (80169c0 <LCD_DrawFullRect+0xb8>)
 801693a:	881b      	ldrh	r3, [r3, #0]
 801693c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8016940:	b29b      	uxth	r3, r3
 8016942:	095b      	lsrs	r3, r3, #5
 8016944:	873b      	strh	r3, [r7, #56]	; 0x38
  
  Xaddress = CurrentFrameBuffer + 2*(LCD_PIXEL_WIDTH*Ypos + Xpos);
 8016946:	88ba      	ldrh	r2, [r7, #4]
 8016948:	4613      	mov	r3, r2
 801694a:	011b      	lsls	r3, r3, #4
 801694c:	1a9b      	subs	r3, r3, r2
 801694e:	011b      	lsls	r3, r3, #4
 8016950:	461a      	mov	r2, r3
 8016952:	88fb      	ldrh	r3, [r7, #6]
 8016954:	4413      	add	r3, r2
 8016956:	005b      	lsls	r3, r3, #1
 8016958:	461a      	mov	r2, r3
 801695a:	4b1a      	ldr	r3, [pc, #104]	; (80169c4 <LCD_DrawFullRect+0xbc>)
 801695c:	681b      	ldr	r3, [r3, #0]
 801695e:	4413      	add	r3, r2
 8016960:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* configure DMA2D */
  DMA2D_DeInit();
 8016962:	f7f3 fe29 	bl	800a5b8 <DMA2D_DeInit>
  DMA2D_InitStruct.DMA2D_Mode = DMA2D_R2M;       
 8016966:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 801696a:	60fb      	str	r3, [r7, #12]
  DMA2D_InitStruct.DMA2D_CMode = DMA2D_RGB565;      
 801696c:	2302      	movs	r3, #2
 801696e:	613b      	str	r3, [r7, #16]
  DMA2D_InitStruct.DMA2D_OutputGreen = Green_Value;      
 8016970:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016972:	61bb      	str	r3, [r7, #24]
  DMA2D_InitStruct.DMA2D_OutputBlue = Blue_Value;     
 8016974:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8016976:	617b      	str	r3, [r7, #20]
  DMA2D_InitStruct.DMA2D_OutputRed = Red_Value;                
 8016978:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801697a:	61fb      	str	r3, [r7, #28]
  DMA2D_InitStruct.DMA2D_OutputAlpha = 0x0F;                  
 801697c:	230f      	movs	r3, #15
 801697e:	623b      	str	r3, [r7, #32]
  DMA2D_InitStruct.DMA2D_OutputMemoryAdd = Xaddress;                
 8016980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016982:	627b      	str	r3, [r7, #36]	; 0x24
  DMA2D_InitStruct.DMA2D_OutputOffset = (LCD_PIXEL_WIDTH - Width);                
 8016984:	887b      	ldrh	r3, [r7, #2]
 8016986:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 801698a:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA2D_InitStruct.DMA2D_NumberOfLine = Height;            
 801698c:	883b      	ldrh	r3, [r7, #0]
 801698e:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA2D_InitStruct.DMA2D_PixelPerLine = Width;
 8016990:	887b      	ldrh	r3, [r7, #2]
 8016992:	633b      	str	r3, [r7, #48]	; 0x30
  DMA2D_Init(&DMA2D_InitStruct); 
 8016994:	f107 030c 	add.w	r3, r7, #12
 8016998:	4618      	mov	r0, r3
 801699a:	f7f3 fe1b 	bl	800a5d4 <DMA2D_Init>
  
  /* Start Transfer */ 
  DMA2D_StartTransfer();
 801699e:	f7f3 feef 	bl	800a780 <DMA2D_StartTransfer>
  
  /* Wait for CTC Flag activation */
  while(DMA2D_GetFlagStatus(DMA2D_FLAG_TC) == RESET)
 80169a2:	bf00      	nop
 80169a4:	2002      	movs	r0, #2
 80169a6:	f7f4 f8e1 	bl	800ab6c <DMA2D_GetFlagStatus>
 80169aa:	4603      	mov	r3, r0
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d0f9      	beq.n	80169a4 <LCD_DrawFullRect+0x9c>
  {
  } 

  LCD_SetTextColor(CurrentTextColor);
 80169b0:	4b03      	ldr	r3, [pc, #12]	; (80169c0 <LCD_DrawFullRect+0xb8>)
 80169b2:	881b      	ldrh	r3, [r3, #0]
 80169b4:	4618      	mov	r0, r3
 80169b6:	f7ff f807 	bl	80159c8 <LCD_SetTextColor>
}
 80169ba:	3740      	adds	r7, #64	; 0x40
 80169bc:	46bd      	mov	sp, r7
 80169be:	bd80      	pop	{r7, pc}
 80169c0:	2000534c 	.word	0x2000534c
 80169c4:	200000b8 	.word	0x200000b8

080169c8 <LCD_DrawFullCircle>:
  * @param  Ypos: specifies the Y position, can be a value from 0 to 320.
  * @param  Radius
  * @retval None
  */
void LCD_DrawFullCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80169c8:	b580      	push	{r7, lr}
 80169ca:	b086      	sub	sp, #24
 80169cc:	af00      	add	r7, sp, #0
 80169ce:	4613      	mov	r3, r2
 80169d0:	4602      	mov	r2, r0
 80169d2:	80fa      	strh	r2, [r7, #6]
 80169d4:	460a      	mov	r2, r1
 80169d6:	80ba      	strh	r2, [r7, #4]
 80169d8:	807b      	strh	r3, [r7, #2]
  int32_t  D;    /* Decision Variable */ 
  uint32_t  CurX;/* Current X Value */
  uint32_t  CurY;/* Current Y Value */ 
  
  D = 3 - (Radius << 1);
 80169da:	887b      	ldrh	r3, [r7, #2]
 80169dc:	005b      	lsls	r3, r3, #1
 80169de:	f1c3 0303 	rsb	r3, r3, #3
 80169e2:	617b      	str	r3, [r7, #20]
  
  CurX = 0;
 80169e4:	2300      	movs	r3, #0
 80169e6:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 80169e8:	887b      	ldrh	r3, [r7, #2]
 80169ea:	60fb      	str	r3, [r7, #12]
  
  while (CurX <= CurY)
 80169ec:	e06d      	b.n	8016aca <LCD_DrawFullCircle+0x102>
  {
    if(CurY > 0) 
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d027      	beq.n	8016a44 <LCD_DrawFullCircle+0x7c>
    {
      LCD_DrawLine(Xpos - CurX, Ypos - CurY, 2*CurY, LCD_DIR_VERTICAL);
 80169f4:	693b      	ldr	r3, [r7, #16]
 80169f6:	b29b      	uxth	r3, r3
 80169f8:	88fa      	ldrh	r2, [r7, #6]
 80169fa:	1ad3      	subs	r3, r2, r3
 80169fc:	b299      	uxth	r1, r3
 80169fe:	68fb      	ldr	r3, [r7, #12]
 8016a00:	b29b      	uxth	r3, r3
 8016a02:	88ba      	ldrh	r2, [r7, #4]
 8016a04:	1ad3      	subs	r3, r2, r3
 8016a06:	b29a      	uxth	r2, r3
 8016a08:	68fb      	ldr	r3, [r7, #12]
 8016a0a:	b29b      	uxth	r3, r3
 8016a0c:	005b      	lsls	r3, r3, #1
 8016a0e:	b29b      	uxth	r3, r3
 8016a10:	4608      	mov	r0, r1
 8016a12:	4611      	mov	r1, r2
 8016a14:	461a      	mov	r2, r3
 8016a16:	2301      	movs	r3, #1
 8016a18:	f7ff fa24 	bl	8015e64 <LCD_DrawLine>
      LCD_DrawLine(Xpos + CurX, Ypos - CurY, 2*CurY, LCD_DIR_VERTICAL);
 8016a1c:	693b      	ldr	r3, [r7, #16]
 8016a1e:	b29a      	uxth	r2, r3
 8016a20:	88fb      	ldrh	r3, [r7, #6]
 8016a22:	4413      	add	r3, r2
 8016a24:	b299      	uxth	r1, r3
 8016a26:	68fb      	ldr	r3, [r7, #12]
 8016a28:	b29b      	uxth	r3, r3
 8016a2a:	88ba      	ldrh	r2, [r7, #4]
 8016a2c:	1ad3      	subs	r3, r2, r3
 8016a2e:	b29a      	uxth	r2, r3
 8016a30:	68fb      	ldr	r3, [r7, #12]
 8016a32:	b29b      	uxth	r3, r3
 8016a34:	005b      	lsls	r3, r3, #1
 8016a36:	b29b      	uxth	r3, r3
 8016a38:	4608      	mov	r0, r1
 8016a3a:	4611      	mov	r1, r2
 8016a3c:	461a      	mov	r2, r3
 8016a3e:	2301      	movs	r3, #1
 8016a40:	f7ff fa10 	bl	8015e64 <LCD_DrawLine>
    }
    
    if(CurX > 0) 
 8016a44:	693b      	ldr	r3, [r7, #16]
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	d027      	beq.n	8016a9a <LCD_DrawFullCircle+0xd2>
    {
      LCD_DrawLine(Xpos - CurY, Ypos - CurX, 2*CurX, LCD_DIR_VERTICAL);
 8016a4a:	68fb      	ldr	r3, [r7, #12]
 8016a4c:	b29b      	uxth	r3, r3
 8016a4e:	88fa      	ldrh	r2, [r7, #6]
 8016a50:	1ad3      	subs	r3, r2, r3
 8016a52:	b299      	uxth	r1, r3
 8016a54:	693b      	ldr	r3, [r7, #16]
 8016a56:	b29b      	uxth	r3, r3
 8016a58:	88ba      	ldrh	r2, [r7, #4]
 8016a5a:	1ad3      	subs	r3, r2, r3
 8016a5c:	b29a      	uxth	r2, r3
 8016a5e:	693b      	ldr	r3, [r7, #16]
 8016a60:	b29b      	uxth	r3, r3
 8016a62:	005b      	lsls	r3, r3, #1
 8016a64:	b29b      	uxth	r3, r3
 8016a66:	4608      	mov	r0, r1
 8016a68:	4611      	mov	r1, r2
 8016a6a:	461a      	mov	r2, r3
 8016a6c:	2301      	movs	r3, #1
 8016a6e:	f7ff f9f9 	bl	8015e64 <LCD_DrawLine>
      LCD_DrawLine(Xpos + CurY, Ypos - CurX, 2*CurX, LCD_DIR_VERTICAL);
 8016a72:	68fb      	ldr	r3, [r7, #12]
 8016a74:	b29a      	uxth	r2, r3
 8016a76:	88fb      	ldrh	r3, [r7, #6]
 8016a78:	4413      	add	r3, r2
 8016a7a:	b299      	uxth	r1, r3
 8016a7c:	693b      	ldr	r3, [r7, #16]
 8016a7e:	b29b      	uxth	r3, r3
 8016a80:	88ba      	ldrh	r2, [r7, #4]
 8016a82:	1ad3      	subs	r3, r2, r3
 8016a84:	b29a      	uxth	r2, r3
 8016a86:	693b      	ldr	r3, [r7, #16]
 8016a88:	b29b      	uxth	r3, r3
 8016a8a:	005b      	lsls	r3, r3, #1
 8016a8c:	b29b      	uxth	r3, r3
 8016a8e:	4608      	mov	r0, r1
 8016a90:	4611      	mov	r1, r2
 8016a92:	461a      	mov	r2, r3
 8016a94:	2301      	movs	r3, #1
 8016a96:	f7ff f9e5 	bl	8015e64 <LCD_DrawLine>
    }
    if (D < 0)
 8016a9a:	697b      	ldr	r3, [r7, #20]
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	da06      	bge.n	8016aae <LCD_DrawFullCircle+0xe6>
    { 
      D += (CurX << 2) + 6;
 8016aa0:	693b      	ldr	r3, [r7, #16]
 8016aa2:	009a      	lsls	r2, r3, #2
 8016aa4:	697b      	ldr	r3, [r7, #20]
 8016aa6:	4413      	add	r3, r2
 8016aa8:	3306      	adds	r3, #6
 8016aaa:	617b      	str	r3, [r7, #20]
 8016aac:	e00a      	b.n	8016ac4 <LCD_DrawFullCircle+0xfc>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8016aae:	693a      	ldr	r2, [r7, #16]
 8016ab0:	68fb      	ldr	r3, [r7, #12]
 8016ab2:	1ad3      	subs	r3, r2, r3
 8016ab4:	009a      	lsls	r2, r3, #2
 8016ab6:	697b      	ldr	r3, [r7, #20]
 8016ab8:	4413      	add	r3, r2
 8016aba:	330a      	adds	r3, #10
 8016abc:	617b      	str	r3, [r7, #20]
      CurY--;
 8016abe:	68fb      	ldr	r3, [r7, #12]
 8016ac0:	3b01      	subs	r3, #1
 8016ac2:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8016ac4:	693b      	ldr	r3, [r7, #16]
 8016ac6:	3301      	adds	r3, #1
 8016ac8:	613b      	str	r3, [r7, #16]
  D = 3 - (Radius << 1);
  
  CurX = 0;
  CurY = Radius;
  
  while (CurX <= CurY)
 8016aca:	693a      	ldr	r2, [r7, #16]
 8016acc:	68fb      	ldr	r3, [r7, #12]
 8016ace:	429a      	cmp	r2, r3
 8016ad0:	d98d      	bls.n	80169ee <LCD_DrawFullCircle+0x26>
      CurY--;
    }
    CurX++;
  }
  
  LCD_DrawCircle(Xpos, Ypos, Radius);  
 8016ad2:	88f9      	ldrh	r1, [r7, #6]
 8016ad4:	88ba      	ldrh	r2, [r7, #4]
 8016ad6:	887b      	ldrh	r3, [r7, #2]
 8016ad8:	4608      	mov	r0, r1
 8016ada:	4611      	mov	r1, r2
 8016adc:	461a      	mov	r2, r3
 8016ade:	f7ff fa59 	bl	8015f94 <LCD_DrawCircle>
}
 8016ae2:	3718      	adds	r7, #24
 8016ae4:	46bd      	mov	sp, r7
 8016ae6:	bd80      	pop	{r7, pc}

08016ae8 <LCD_DrawUniLine>:
  * @param  x2: specifies the point 2 x position.
  * @param  y2: specifies the point 2 y position.
  * @retval None
  */
void LCD_DrawUniLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8016ae8:	b580      	push	{r7, lr}
 8016aea:	b08a      	sub	sp, #40	; 0x28
 8016aec:	af00      	add	r7, sp, #0
 8016aee:	80f8      	strh	r0, [r7, #6]
 8016af0:	80b9      	strh	r1, [r7, #4]
 8016af2:	807a      	strh	r2, [r7, #2]
 8016af4:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8016af6:	2300      	movs	r3, #0
 8016af8:	823b      	strh	r3, [r7, #16]
 8016afa:	2300      	movs	r3, #0
 8016afc:	81fb      	strh	r3, [r7, #14]
 8016afe:	2300      	movs	r3, #0
 8016b00:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016b02:	2300      	movs	r3, #0
 8016b04:	84bb      	strh	r3, [r7, #36]	; 0x24
 8016b06:	2300      	movs	r3, #0
 8016b08:	847b      	strh	r3, [r7, #34]	; 0x22
 8016b0a:	2300      	movs	r3, #0
 8016b0c:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8016b0e:	2300      	movs	r3, #0
 8016b10:	83fb      	strh	r3, [r7, #30]
 8016b12:	2300      	movs	r3, #0
 8016b14:	83bb      	strh	r3, [r7, #28]
 8016b16:	2300      	movs	r3, #0
 8016b18:	837b      	strh	r3, [r7, #26]
 8016b1a:	2300      	movs	r3, #0
 8016b1c:	833b      	strh	r3, [r7, #24]
 8016b1e:	2300      	movs	r3, #0
 8016b20:	82fb      	strh	r3, [r7, #22]
 8016b22:	2300      	movs	r3, #0
 8016b24:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8016b26:	2300      	movs	r3, #0
 8016b28:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8016b2a:	887a      	ldrh	r2, [r7, #2]
 8016b2c:	88fb      	ldrh	r3, [r7, #6]
 8016b2e:	1ad3      	subs	r3, r2, r3
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	bfb8      	it	lt
 8016b34:	425b      	neglt	r3, r3
 8016b36:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8016b38:	883a      	ldrh	r2, [r7, #0]
 8016b3a:	88bb      	ldrh	r3, [r7, #4]
 8016b3c:	1ad3      	subs	r3, r2, r3
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	bfb8      	it	lt
 8016b42:	425b      	neglt	r3, r3
 8016b44:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8016b46:	88fb      	ldrh	r3, [r7, #6]
 8016b48:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8016b4a:	88bb      	ldrh	r3, [r7, #4]
 8016b4c:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8016b4e:	887a      	ldrh	r2, [r7, #2]
 8016b50:	88fb      	ldrh	r3, [r7, #6]
 8016b52:	429a      	cmp	r2, r3
 8016b54:	d304      	bcc.n	8016b60 <LCD_DrawUniLine+0x78>
  {
    xinc1 = 1;
 8016b56:	2301      	movs	r3, #1
 8016b58:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8016b5a:	2301      	movs	r3, #1
 8016b5c:	843b      	strh	r3, [r7, #32]
 8016b5e:	e005      	b.n	8016b6c <LCD_DrawUniLine+0x84>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8016b60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016b64:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8016b66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016b6a:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8016b6c:	883a      	ldrh	r2, [r7, #0]
 8016b6e:	88bb      	ldrh	r3, [r7, #4]
 8016b70:	429a      	cmp	r2, r3
 8016b72:	d304      	bcc.n	8016b7e <LCD_DrawUniLine+0x96>
  {
    yinc1 = 1;
 8016b74:	2301      	movs	r3, #1
 8016b76:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8016b78:	2301      	movs	r3, #1
 8016b7a:	83bb      	strh	r3, [r7, #28]
 8016b7c:	e005      	b.n	8016b8a <LCD_DrawUniLine+0xa2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8016b7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016b82:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8016b84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016b88:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8016b8a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8016b8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016b92:	429a      	cmp	r2, r3
 8016b94:	db10      	blt.n	8016bb8 <LCD_DrawUniLine+0xd0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8016b96:	2300      	movs	r3, #0
 8016b98:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8016b9a:	2300      	movs	r3, #0
 8016b9c:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8016b9e:	8a3b      	ldrh	r3, [r7, #16]
 8016ba0:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8016ba2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8016ba6:	0fda      	lsrs	r2, r3, #31
 8016ba8:	4413      	add	r3, r2
 8016baa:	105b      	asrs	r3, r3, #1
 8016bac:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8016bae:	89fb      	ldrh	r3, [r7, #14]
 8016bb0:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8016bb2:	8a3b      	ldrh	r3, [r7, #16]
 8016bb4:	82bb      	strh	r3, [r7, #20]
 8016bb6:	e00f      	b.n	8016bd8 <LCD_DrawUniLine+0xf0>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8016bb8:	2300      	movs	r3, #0
 8016bba:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8016bbc:	2300      	movs	r3, #0
 8016bbe:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8016bc0:	89fb      	ldrh	r3, [r7, #14]
 8016bc2:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8016bc4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016bc8:	0fda      	lsrs	r2, r3, #31
 8016bca:	4413      	add	r3, r2
 8016bcc:	105b      	asrs	r3, r3, #1
 8016bce:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8016bd0:	8a3b      	ldrh	r3, [r7, #16]
 8016bd2:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8016bd4:	89fb      	ldrh	r3, [r7, #14]
 8016bd6:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8016bd8:	2300      	movs	r3, #0
 8016bda:	827b      	strh	r3, [r7, #18]
 8016bdc:	e02e      	b.n	8016c3c <LCD_DrawUniLine+0x154>
  {
    PutPixel(x, y);             /* Draw the current pixel */
 8016bde:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8016be2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8016be6:	4610      	mov	r0, r2
 8016be8:	4619      	mov	r1, r3
 8016bea:	f000 fdc5 	bl	8017778 <PutPixel>
    num += numadd;              /* Increase the numerator by the top of the fraction */
 8016bee:	8b3a      	ldrh	r2, [r7, #24]
 8016bf0:	8afb      	ldrh	r3, [r7, #22]
 8016bf2:	4413      	add	r3, r2
 8016bf4:	b29b      	uxth	r3, r3
 8016bf6:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 8016bf8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8016bfc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8016c00:	429a      	cmp	r2, r3
 8016c02:	db0e      	blt.n	8016c22 <LCD_DrawUniLine+0x13a>
    {
      num -= den;               /* Calculate the new numerator value */
 8016c04:	8b3a      	ldrh	r2, [r7, #24]
 8016c06:	8b7b      	ldrh	r3, [r7, #26]
 8016c08:	1ad3      	subs	r3, r2, r3
 8016c0a:	b29b      	uxth	r3, r3
 8016c0c:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 8016c0e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016c10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016c12:	4413      	add	r3, r2
 8016c14:	b29b      	uxth	r3, r3
 8016c16:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;               /* Change the y as appropriate */
 8016c18:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016c1a:	8bfb      	ldrh	r3, [r7, #30]
 8016c1c:	4413      	add	r3, r2
 8016c1e:	b29b      	uxth	r3, r3
 8016c20:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 8016c22:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016c24:	8c3b      	ldrh	r3, [r7, #32]
 8016c26:	4413      	add	r3, r2
 8016c28:	b29b      	uxth	r3, r3
 8016c2a:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                 /* Change the y as appropriate */
 8016c2c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016c2e:	8bbb      	ldrh	r3, [r7, #28]
 8016c30:	4413      	add	r3, r2
 8016c32:	b29b      	uxth	r3, r3
 8016c34:	84bb      	strh	r3, [r7, #36]	; 0x24
    num = deltay / 2;
    numadd = deltax;
    numpixels = deltay;         /* There are more y-values than x-values */
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8016c36:	8a7b      	ldrh	r3, [r7, #18]
 8016c38:	3301      	adds	r3, #1
 8016c3a:	827b      	strh	r3, [r7, #18]
 8016c3c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8016c40:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8016c44:	429a      	cmp	r2, r3
 8016c46:	ddca      	ble.n	8016bde <LCD_DrawUniLine+0xf6>
      y += yinc1;               /* Change the y as appropriate */
    }
    x += xinc2;                 /* Change the x as appropriate */
    y += yinc2;                 /* Change the y as appropriate */
  }
}
 8016c48:	3728      	adds	r7, #40	; 0x28
 8016c4a:	46bd      	mov	sp, r7
 8016c4c:	bd80      	pop	{r7, pc}
 8016c4e:	bf00      	nop

08016c50 <LCD_Triangle>:
  * @brief  Displays an triangle.
  * @param  Points: pointer to the points array.
  * @retval None
  */
void LCD_Triangle(pPoint Points, uint16_t PointCount)
{
 8016c50:	b580      	push	{r7, lr}
 8016c52:	b084      	sub	sp, #16
 8016c54:	af00      	add	r7, sp, #0
 8016c56:	6078      	str	r0, [r7, #4]
 8016c58:	460b      	mov	r3, r1
 8016c5a:	807b      	strh	r3, [r7, #2]
  int16_t X = 0, Y = 0;
 8016c5c:	2300      	movs	r3, #0
 8016c5e:	81fb      	strh	r3, [r7, #14]
 8016c60:	2300      	movs	r3, #0
 8016c62:	81bb      	strh	r3, [r7, #12]
  pPoint First = Points;
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	60bb      	str	r3, [r7, #8]

  if(PointCount != 3)
 8016c68:	887b      	ldrh	r3, [r7, #2]
 8016c6a:	2b03      	cmp	r3, #3
 8016c6c:	d000      	beq.n	8016c70 <LCD_Triangle+0x20>
  {
    return;
 8016c6e:	e027      	b.n	8016cc0 <LCD_Triangle+0x70>
  }

  while(--PointCount)
 8016c70:	e012      	b.n	8016c98 <LCD_Triangle+0x48>
  {
    X = Points->X;
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	881b      	ldrh	r3, [r3, #0]
 8016c76:	81fb      	strh	r3, [r7, #14]
    Y = Points->Y;
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	885b      	ldrh	r3, [r3, #2]
 8016c7c:	81bb      	strh	r3, [r7, #12]
    Points++;
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	3304      	adds	r3, #4
 8016c82:	607b      	str	r3, [r7, #4]
    LCD_DrawUniLine(X, Y, Points->X, Points->Y);
 8016c84:	89f8      	ldrh	r0, [r7, #14]
 8016c86:	89b9      	ldrh	r1, [r7, #12]
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	881b      	ldrh	r3, [r3, #0]
 8016c8c:	b29a      	uxth	r2, r3
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	885b      	ldrh	r3, [r3, #2]
 8016c92:	b29b      	uxth	r3, r3
 8016c94:	f7ff ff28 	bl	8016ae8 <LCD_DrawUniLine>
  if(PointCount != 3)
  {
    return;
  }

  while(--PointCount)
 8016c98:	887b      	ldrh	r3, [r7, #2]
 8016c9a:	3b01      	subs	r3, #1
 8016c9c:	807b      	strh	r3, [r7, #2]
 8016c9e:	887b      	ldrh	r3, [r7, #2]
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	d1e6      	bne.n	8016c72 <LCD_Triangle+0x22>
    X = Points->X;
    Y = Points->Y;
    Points++;
    LCD_DrawUniLine(X, Y, Points->X, Points->Y);
  }
  LCD_DrawUniLine(First->X, First->Y, Points->X, Points->Y);
 8016ca4:	68bb      	ldr	r3, [r7, #8]
 8016ca6:	881b      	ldrh	r3, [r3, #0]
 8016ca8:	b298      	uxth	r0, r3
 8016caa:	68bb      	ldr	r3, [r7, #8]
 8016cac:	885b      	ldrh	r3, [r3, #2]
 8016cae:	b299      	uxth	r1, r3
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	881b      	ldrh	r3, [r3, #0]
 8016cb4:	b29a      	uxth	r2, r3
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	885b      	ldrh	r3, [r3, #2]
 8016cba:	b29b      	uxth	r3, r3
 8016cbc:	f7ff ff14 	bl	8016ae8 <LCD_DrawUniLine>
}
 8016cc0:	3710      	adds	r7, #16
 8016cc2:	46bd      	mov	sp, r7
 8016cc4:	bd80      	pop	{r7, pc}
 8016cc6:	bf00      	nop

08016cc8 <LCD_FillTriangle>:
  * @param  x1..3: x position of triangle point 1..3.
  * @param  y1..3: y position of triangle point 1..3.
  * @retval None
  */
void LCD_FillTriangle(uint16_t x1, uint16_t x2, uint16_t x3, uint16_t y1, uint16_t y2, uint16_t y3)
{ 
 8016cc8:	b580      	push	{r7, lr}
 8016cca:	b08a      	sub	sp, #40	; 0x28
 8016ccc:	af00      	add	r7, sp, #0
 8016cce:	80f8      	strh	r0, [r7, #6]
 8016cd0:	80b9      	strh	r1, [r7, #4]
 8016cd2:	807a      	strh	r2, [r7, #2]
 8016cd4:	803b      	strh	r3, [r7, #0]
  
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8016cd6:	2300      	movs	r3, #0
 8016cd8:	823b      	strh	r3, [r7, #16]
 8016cda:	2300      	movs	r3, #0
 8016cdc:	81fb      	strh	r3, [r7, #14]
 8016cde:	2300      	movs	r3, #0
 8016ce0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016ce2:	2300      	movs	r3, #0
 8016ce4:	84bb      	strh	r3, [r7, #36]	; 0x24
 8016ce6:	2300      	movs	r3, #0
 8016ce8:	847b      	strh	r3, [r7, #34]	; 0x22
 8016cea:	2300      	movs	r3, #0
 8016cec:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8016cee:	2300      	movs	r3, #0
 8016cf0:	83fb      	strh	r3, [r7, #30]
 8016cf2:	2300      	movs	r3, #0
 8016cf4:	83bb      	strh	r3, [r7, #28]
 8016cf6:	2300      	movs	r3, #0
 8016cf8:	837b      	strh	r3, [r7, #26]
 8016cfa:	2300      	movs	r3, #0
 8016cfc:	833b      	strh	r3, [r7, #24]
 8016cfe:	2300      	movs	r3, #0
 8016d00:	82fb      	strh	r3, [r7, #22]
 8016d02:	2300      	movs	r3, #0
 8016d04:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8016d06:	2300      	movs	r3, #0
 8016d08:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8016d0a:	88ba      	ldrh	r2, [r7, #4]
 8016d0c:	88fb      	ldrh	r3, [r7, #6]
 8016d0e:	1ad3      	subs	r3, r2, r3
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	bfb8      	it	lt
 8016d14:	425b      	neglt	r3, r3
 8016d16:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8016d18:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8016d1a:	883b      	ldrh	r3, [r7, #0]
 8016d1c:	1ad3      	subs	r3, r2, r3
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	bfb8      	it	lt
 8016d22:	425b      	neglt	r3, r3
 8016d24:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8016d26:	88fb      	ldrh	r3, [r7, #6]
 8016d28:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8016d2a:	883b      	ldrh	r3, [r7, #0]
 8016d2c:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8016d2e:	88ba      	ldrh	r2, [r7, #4]
 8016d30:	88fb      	ldrh	r3, [r7, #6]
 8016d32:	429a      	cmp	r2, r3
 8016d34:	d304      	bcc.n	8016d40 <LCD_FillTriangle+0x78>
  {
    xinc1 = 1;
 8016d36:	2301      	movs	r3, #1
 8016d38:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8016d3a:	2301      	movs	r3, #1
 8016d3c:	843b      	strh	r3, [r7, #32]
 8016d3e:	e005      	b.n	8016d4c <LCD_FillTriangle+0x84>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8016d40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016d44:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8016d46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016d4a:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8016d4c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8016d4e:	883b      	ldrh	r3, [r7, #0]
 8016d50:	429a      	cmp	r2, r3
 8016d52:	d304      	bcc.n	8016d5e <LCD_FillTriangle+0x96>
  {
    yinc1 = 1;
 8016d54:	2301      	movs	r3, #1
 8016d56:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8016d58:	2301      	movs	r3, #1
 8016d5a:	83bb      	strh	r3, [r7, #28]
 8016d5c:	e005      	b.n	8016d6a <LCD_FillTriangle+0xa2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8016d5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016d62:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8016d64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016d68:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8016d6a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8016d6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016d72:	429a      	cmp	r2, r3
 8016d74:	db10      	blt.n	8016d98 <LCD_FillTriangle+0xd0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8016d76:	2300      	movs	r3, #0
 8016d78:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8016d7a:	2300      	movs	r3, #0
 8016d7c:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8016d7e:	8a3b      	ldrh	r3, [r7, #16]
 8016d80:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8016d82:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8016d86:	0fda      	lsrs	r2, r3, #31
 8016d88:	4413      	add	r3, r2
 8016d8a:	105b      	asrs	r3, r3, #1
 8016d8c:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8016d8e:	89fb      	ldrh	r3, [r7, #14]
 8016d90:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8016d92:	8a3b      	ldrh	r3, [r7, #16]
 8016d94:	82bb      	strh	r3, [r7, #20]
 8016d96:	e00f      	b.n	8016db8 <LCD_FillTriangle+0xf0>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8016d98:	2300      	movs	r3, #0
 8016d9a:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8016d9c:	2300      	movs	r3, #0
 8016d9e:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8016da0:	89fb      	ldrh	r3, [r7, #14]
 8016da2:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8016da4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016da8:	0fda      	lsrs	r2, r3, #31
 8016daa:	4413      	add	r3, r2
 8016dac:	105b      	asrs	r3, r3, #1
 8016dae:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8016db0:	8a3b      	ldrh	r3, [r7, #16]
 8016db2:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8016db4:	89fb      	ldrh	r3, [r7, #14]
 8016db6:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8016db8:	2300      	movs	r3, #0
 8016dba:	827b      	strh	r3, [r7, #18]
 8016dbc:	e02c      	b.n	8016e18 <LCD_FillTriangle+0x150>
  {
    LCD_DrawUniLine(x, y, x3, y3);
 8016dbe:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8016dc0:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8016dc2:	887a      	ldrh	r2, [r7, #2]
 8016dc4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016dc6:	f7ff fe8f 	bl	8016ae8 <LCD_DrawUniLine>
    
    num += numadd;              /* Increase the numerator by the top of the fraction */
 8016dca:	8b3a      	ldrh	r2, [r7, #24]
 8016dcc:	8afb      	ldrh	r3, [r7, #22]
 8016dce:	4413      	add	r3, r2
 8016dd0:	b29b      	uxth	r3, r3
 8016dd2:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 8016dd4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8016dd8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8016ddc:	429a      	cmp	r2, r3
 8016dde:	db0e      	blt.n	8016dfe <LCD_FillTriangle+0x136>
    {
      num -= den;               /* Calculate the new numerator value */
 8016de0:	8b3a      	ldrh	r2, [r7, #24]
 8016de2:	8b7b      	ldrh	r3, [r7, #26]
 8016de4:	1ad3      	subs	r3, r2, r3
 8016de6:	b29b      	uxth	r3, r3
 8016de8:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 8016dea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016dec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016dee:	4413      	add	r3, r2
 8016df0:	b29b      	uxth	r3, r3
 8016df2:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;               /* Change the y as appropriate */
 8016df4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016df6:	8bfb      	ldrh	r3, [r7, #30]
 8016df8:	4413      	add	r3, r2
 8016dfa:	b29b      	uxth	r3, r3
 8016dfc:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 8016dfe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016e00:	8c3b      	ldrh	r3, [r7, #32]
 8016e02:	4413      	add	r3, r2
 8016e04:	b29b      	uxth	r3, r3
 8016e06:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                 /* Change the y as appropriate */
 8016e08:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016e0a:	8bbb      	ldrh	r3, [r7, #28]
 8016e0c:	4413      	add	r3, r2
 8016e0e:	b29b      	uxth	r3, r3
 8016e10:	84bb      	strh	r3, [r7, #36]	; 0x24
    num = deltay / 2;
    numadd = deltax;
    numpixels = deltay;         /* There are more y-values than x-values */
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8016e12:	8a7b      	ldrh	r3, [r7, #18]
 8016e14:	3301      	adds	r3, #1
 8016e16:	827b      	strh	r3, [r7, #18]
 8016e18:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8016e1c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8016e20:	429a      	cmp	r2, r3
 8016e22:	ddcc      	ble.n	8016dbe <LCD_FillTriangle+0xf6>
    x += xinc2;                 /* Change the x as appropriate */
    y += yinc2;                 /* Change the y as appropriate */
  }  
  
  
}
 8016e24:	3728      	adds	r7, #40	; 0x28
 8016e26:	46bd      	mov	sp, r7
 8016e28:	bd80      	pop	{r7, pc}
 8016e2a:	bf00      	nop

08016e2c <LCD_PolyLine>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_PolyLine(pPoint Points, uint16_t PointCount)
{
 8016e2c:	b580      	push	{r7, lr}
 8016e2e:	b084      	sub	sp, #16
 8016e30:	af00      	add	r7, sp, #0
 8016e32:	6078      	str	r0, [r7, #4]
 8016e34:	460b      	mov	r3, r1
 8016e36:	807b      	strh	r3, [r7, #2]
  int16_t X = 0, Y = 0;
 8016e38:	2300      	movs	r3, #0
 8016e3a:	81fb      	strh	r3, [r7, #14]
 8016e3c:	2300      	movs	r3, #0
 8016e3e:	81bb      	strh	r3, [r7, #12]

  if(PointCount < 2)
 8016e40:	887b      	ldrh	r3, [r7, #2]
 8016e42:	2b01      	cmp	r3, #1
 8016e44:	d800      	bhi.n	8016e48 <LCD_PolyLine+0x1c>
  {
    return;
 8016e46:	e019      	b.n	8016e7c <LCD_PolyLine+0x50>
  }

  while(--PointCount)
 8016e48:	e012      	b.n	8016e70 <LCD_PolyLine+0x44>
  {
    X = Points->X;
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	881b      	ldrh	r3, [r3, #0]
 8016e4e:	81fb      	strh	r3, [r7, #14]
    Y = Points->Y;
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	885b      	ldrh	r3, [r3, #2]
 8016e54:	81bb      	strh	r3, [r7, #12]
    Points++;
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	3304      	adds	r3, #4
 8016e5a:	607b      	str	r3, [r7, #4]
    LCD_DrawUniLine(X, Y, Points->X, Points->Y);
 8016e5c:	89f8      	ldrh	r0, [r7, #14]
 8016e5e:	89b9      	ldrh	r1, [r7, #12]
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	881b      	ldrh	r3, [r3, #0]
 8016e64:	b29a      	uxth	r2, r3
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	885b      	ldrh	r3, [r3, #2]
 8016e6a:	b29b      	uxth	r3, r3
 8016e6c:	f7ff fe3c 	bl	8016ae8 <LCD_DrawUniLine>
  if(PointCount < 2)
  {
    return;
  }

  while(--PointCount)
 8016e70:	887b      	ldrh	r3, [r7, #2]
 8016e72:	3b01      	subs	r3, #1
 8016e74:	807b      	strh	r3, [r7, #2]
 8016e76:	887b      	ldrh	r3, [r7, #2]
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d1e6      	bne.n	8016e4a <LCD_PolyLine+0x1e>
    X = Points->X;
    Y = Points->Y;
    Points++;
    LCD_DrawUniLine(X, Y, Points->X, Points->Y);
  }
}
 8016e7c:	3710      	adds	r7, #16
 8016e7e:	46bd      	mov	sp, r7
 8016e80:	bd80      	pop	{r7, pc}
 8016e82:	bf00      	nop

08016e84 <LCD_PolyLineRelativeClosed>:
  * @param  Closed: specifies if the draw is closed or not.
  *           1: closed, 0 : not closed.
  * @retval None
  */
static void LCD_PolyLineRelativeClosed(pPoint Points, uint16_t PointCount, uint16_t Closed)
{
 8016e84:	b590      	push	{r4, r7, lr}
 8016e86:	b085      	sub	sp, #20
 8016e88:	af00      	add	r7, sp, #0
 8016e8a:	6078      	str	r0, [r7, #4]
 8016e8c:	4613      	mov	r3, r2
 8016e8e:	460a      	mov	r2, r1
 8016e90:	807a      	strh	r2, [r7, #2]
 8016e92:	803b      	strh	r3, [r7, #0]
  int16_t X = 0, Y = 0;
 8016e94:	2300      	movs	r3, #0
 8016e96:	81fb      	strh	r3, [r7, #14]
 8016e98:	2300      	movs	r3, #0
 8016e9a:	81bb      	strh	r3, [r7, #12]
  pPoint First = Points;
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	60bb      	str	r3, [r7, #8]

  if(PointCount < 2)
 8016ea0:	887b      	ldrh	r3, [r7, #2]
 8016ea2:	2b01      	cmp	r3, #1
 8016ea4:	d800      	bhi.n	8016ea8 <LCD_PolyLineRelativeClosed+0x24>
  {
    return;
 8016ea6:	e03a      	b.n	8016f1e <LCD_PolyLineRelativeClosed+0x9a>
  }  
  X = Points->X;
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	881b      	ldrh	r3, [r3, #0]
 8016eac:	81fb      	strh	r3, [r7, #14]
  Y = Points->Y;
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	885b      	ldrh	r3, [r3, #2]
 8016eb2:	81bb      	strh	r3, [r7, #12]
  while(--PointCount)
 8016eb4:	e020      	b.n	8016ef8 <LCD_PolyLineRelativeClosed+0x74>
  {
    Points++;
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	3304      	adds	r3, #4
 8016eba:	607b      	str	r3, [r7, #4]
    LCD_DrawUniLine(X, Y, X + Points->X, Y + Points->Y);
 8016ebc:	89f8      	ldrh	r0, [r7, #14]
 8016ebe:	89b9      	ldrh	r1, [r7, #12]
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	881b      	ldrh	r3, [r3, #0]
 8016ec4:	b29a      	uxth	r2, r3
 8016ec6:	89fb      	ldrh	r3, [r7, #14]
 8016ec8:	4413      	add	r3, r2
 8016eca:	b29a      	uxth	r2, r3
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	885b      	ldrh	r3, [r3, #2]
 8016ed0:	b29c      	uxth	r4, r3
 8016ed2:	89bb      	ldrh	r3, [r7, #12]
 8016ed4:	4423      	add	r3, r4
 8016ed6:	b29b      	uxth	r3, r3
 8016ed8:	f7ff fe06 	bl	8016ae8 <LCD_DrawUniLine>
    X = X + Points->X;
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	881b      	ldrh	r3, [r3, #0]
 8016ee0:	b29a      	uxth	r2, r3
 8016ee2:	89fb      	ldrh	r3, [r7, #14]
 8016ee4:	4413      	add	r3, r2
 8016ee6:	b29b      	uxth	r3, r3
 8016ee8:	81fb      	strh	r3, [r7, #14]
    Y = Y + Points->Y;
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	885b      	ldrh	r3, [r3, #2]
 8016eee:	b29a      	uxth	r2, r3
 8016ef0:	89bb      	ldrh	r3, [r7, #12]
 8016ef2:	4413      	add	r3, r2
 8016ef4:	b29b      	uxth	r3, r3
 8016ef6:	81bb      	strh	r3, [r7, #12]
  {
    return;
  }  
  X = Points->X;
  Y = Points->Y;
  while(--PointCount)
 8016ef8:	887b      	ldrh	r3, [r7, #2]
 8016efa:	3b01      	subs	r3, #1
 8016efc:	807b      	strh	r3, [r7, #2]
 8016efe:	887b      	ldrh	r3, [r7, #2]
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d1d8      	bne.n	8016eb6 <LCD_PolyLineRelativeClosed+0x32>
    Points++;
    LCD_DrawUniLine(X, Y, X + Points->X, Y + Points->Y);
    X = X + Points->X;
    Y = Y + Points->Y;
  }
  if(Closed)
 8016f04:	883b      	ldrh	r3, [r7, #0]
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d009      	beq.n	8016f1e <LCD_PolyLineRelativeClosed+0x9a>
  {
    LCD_DrawUniLine(First->X, First->Y, X, Y);
 8016f0a:	68bb      	ldr	r3, [r7, #8]
 8016f0c:	881b      	ldrh	r3, [r3, #0]
 8016f0e:	b298      	uxth	r0, r3
 8016f10:	68bb      	ldr	r3, [r7, #8]
 8016f12:	885b      	ldrh	r3, [r3, #2]
 8016f14:	b299      	uxth	r1, r3
 8016f16:	89fa      	ldrh	r2, [r7, #14]
 8016f18:	89bb      	ldrh	r3, [r7, #12]
 8016f1a:	f7ff fde5 	bl	8016ae8 <LCD_DrawUniLine>
  }  
}
 8016f1e:	3714      	adds	r7, #20
 8016f20:	46bd      	mov	sp, r7
 8016f22:	bd90      	pop	{r4, r7, pc}

08016f24 <LCD_ClosedPolyLine>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_ClosedPolyLine(pPoint Points, uint16_t PointCount)
{
 8016f24:	b590      	push	{r4, r7, lr}
 8016f26:	b083      	sub	sp, #12
 8016f28:	af00      	add	r7, sp, #0
 8016f2a:	6078      	str	r0, [r7, #4]
 8016f2c:	460b      	mov	r3, r1
 8016f2e:	807b      	strh	r3, [r7, #2]
  LCD_PolyLine(Points, PointCount);
 8016f30:	887b      	ldrh	r3, [r7, #2]
 8016f32:	6878      	ldr	r0, [r7, #4]
 8016f34:	4619      	mov	r1, r3
 8016f36:	f7ff ff79 	bl	8016e2c <LCD_PolyLine>
  LCD_DrawUniLine(Points->X, Points->Y, (Points+PointCount-1)->X, (Points+PointCount-1)->Y);
 8016f3a:	687b      	ldr	r3, [r7, #4]
 8016f3c:	881b      	ldrh	r3, [r3, #0]
 8016f3e:	b298      	uxth	r0, r3
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	885b      	ldrh	r3, [r3, #2]
 8016f44:	b299      	uxth	r1, r3
 8016f46:	887b      	ldrh	r3, [r7, #2]
 8016f48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016f4c:	3b01      	subs	r3, #1
 8016f4e:	009b      	lsls	r3, r3, #2
 8016f50:	687a      	ldr	r2, [r7, #4]
 8016f52:	4413      	add	r3, r2
 8016f54:	881b      	ldrh	r3, [r3, #0]
 8016f56:	b29a      	uxth	r2, r3
 8016f58:	887b      	ldrh	r3, [r7, #2]
 8016f5a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016f5e:	3b01      	subs	r3, #1
 8016f60:	009b      	lsls	r3, r3, #2
 8016f62:	687c      	ldr	r4, [r7, #4]
 8016f64:	4423      	add	r3, r4
 8016f66:	885b      	ldrh	r3, [r3, #2]
 8016f68:	b29b      	uxth	r3, r3
 8016f6a:	f7ff fdbd 	bl	8016ae8 <LCD_DrawUniLine>
}
 8016f6e:	370c      	adds	r7, #12
 8016f70:	46bd      	mov	sp, r7
 8016f72:	bd90      	pop	{r4, r7, pc}

08016f74 <LCD_PolyLineRelative>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_PolyLineRelative(pPoint Points, uint16_t PointCount)
{
 8016f74:	b580      	push	{r7, lr}
 8016f76:	b082      	sub	sp, #8
 8016f78:	af00      	add	r7, sp, #0
 8016f7a:	6078      	str	r0, [r7, #4]
 8016f7c:	460b      	mov	r3, r1
 8016f7e:	807b      	strh	r3, [r7, #2]
  LCD_PolyLineRelativeClosed(Points, PointCount, 0);
 8016f80:	887b      	ldrh	r3, [r7, #2]
 8016f82:	6878      	ldr	r0, [r7, #4]
 8016f84:	4619      	mov	r1, r3
 8016f86:	2200      	movs	r2, #0
 8016f88:	f7ff ff7c 	bl	8016e84 <LCD_PolyLineRelativeClosed>
}
 8016f8c:	3708      	adds	r7, #8
 8016f8e:	46bd      	mov	sp, r7
 8016f90:	bd80      	pop	{r7, pc}
 8016f92:	bf00      	nop

08016f94 <LCD_ClosedPolyLineRelative>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_ClosedPolyLineRelative(pPoint Points, uint16_t PointCount)
{
 8016f94:	b580      	push	{r7, lr}
 8016f96:	b082      	sub	sp, #8
 8016f98:	af00      	add	r7, sp, #0
 8016f9a:	6078      	str	r0, [r7, #4]
 8016f9c:	460b      	mov	r3, r1
 8016f9e:	807b      	strh	r3, [r7, #2]
  LCD_PolyLineRelativeClosed(Points, PointCount, 1);
 8016fa0:	887b      	ldrh	r3, [r7, #2]
 8016fa2:	6878      	ldr	r0, [r7, #4]
 8016fa4:	4619      	mov	r1, r3
 8016fa6:	2201      	movs	r2, #1
 8016fa8:	f7ff ff6c 	bl	8016e84 <LCD_PolyLineRelativeClosed>
}
 8016fac:	3708      	adds	r7, #8
 8016fae:	46bd      	mov	sp, r7
 8016fb0:	bd80      	pop	{r7, pc}
 8016fb2:	bf00      	nop

08016fb4 <LCD_FillPolyLine>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_FillPolyLine(pPoint Points, uint16_t PointCount)
{
 8016fb4:	b5b0      	push	{r4, r5, r7, lr}
 8016fb6:	b08c      	sub	sp, #48	; 0x30
 8016fb8:	af02      	add	r7, sp, #8
 8016fba:	6078      	str	r0, [r7, #4]
 8016fbc:	460b      	mov	r3, r1
 8016fbe:	807b      	strh	r3, [r7, #2]
 
  int16_t X = 0, Y = 0, X2 = 0, Y2 = 0, X_center = 0, Y_center = 0, X_first = 0, Y_first = 0, pixelX = 0, pixelY = 0, counter = 0;
 8016fc0:	2300      	movs	r3, #0
 8016fc2:	833b      	strh	r3, [r7, #24]
 8016fc4:	2300      	movs	r3, #0
 8016fc6:	82fb      	strh	r3, [r7, #22]
 8016fc8:	2300      	movs	r3, #0
 8016fca:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016fcc:	2300      	movs	r3, #0
 8016fce:	84bb      	strh	r3, [r7, #36]	; 0x24
 8016fd0:	2300      	movs	r3, #0
 8016fd2:	82bb      	strh	r3, [r7, #20]
 8016fd4:	2300      	movs	r3, #0
 8016fd6:	827b      	strh	r3, [r7, #18]
 8016fd8:	2300      	movs	r3, #0
 8016fda:	823b      	strh	r3, [r7, #16]
 8016fdc:	2300      	movs	r3, #0
 8016fde:	81fb      	strh	r3, [r7, #14]
 8016fe0:	2300      	movs	r3, #0
 8016fe2:	81bb      	strh	r3, [r7, #12]
 8016fe4:	2300      	movs	r3, #0
 8016fe6:	817b      	strh	r3, [r7, #10]
 8016fe8:	2300      	movs	r3, #0
 8016fea:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  IMAGE_LEFT = 0, IMAGE_RIGHT = 0, IMAGE_TOP = 0, IMAGE_BOTTOM = 0;  
 8016fec:	2300      	movs	r3, #0
 8016fee:	843b      	strh	r3, [r7, #32]
 8016ff0:	2300      	movs	r3, #0
 8016ff2:	83fb      	strh	r3, [r7, #30]
 8016ff4:	2300      	movs	r3, #0
 8016ff6:	83bb      	strh	r3, [r7, #28]
 8016ff8:	2300      	movs	r3, #0
 8016ffa:	837b      	strh	r3, [r7, #26]

  IMAGE_LEFT = IMAGE_RIGHT = Points->X;
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	881b      	ldrh	r3, [r3, #0]
 8017000:	83fb      	strh	r3, [r7, #30]
 8017002:	8bfb      	ldrh	r3, [r7, #30]
 8017004:	843b      	strh	r3, [r7, #32]
  IMAGE_TOP= IMAGE_BOTTOM = Points->Y;
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	885b      	ldrh	r3, [r3, #2]
 801700a:	837b      	strh	r3, [r7, #26]
 801700c:	8b7b      	ldrh	r3, [r7, #26]
 801700e:	83bb      	strh	r3, [r7, #28]

  for(counter = 1; counter < PointCount; counter++)
 8017010:	2301      	movs	r3, #1
 8017012:	847b      	strh	r3, [r7, #34]	; 0x22
 8017014:	e02c      	b.n	8017070 <LCD_FillPolyLine+0xbc>
  {
    pixelX = POLY_X(counter);
 8017016:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801701a:	009b      	lsls	r3, r3, #2
 801701c:	687a      	ldr	r2, [r7, #4]
 801701e:	4413      	add	r3, r2
 8017020:	885b      	ldrh	r3, [r3, #2]
 8017022:	81bb      	strh	r3, [r7, #12]
    if(pixelX < IMAGE_LEFT)
 8017024:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8017028:	8c3b      	ldrh	r3, [r7, #32]
 801702a:	429a      	cmp	r2, r3
 801702c:	da01      	bge.n	8017032 <LCD_FillPolyLine+0x7e>
    {
      IMAGE_LEFT = pixelX;
 801702e:	89bb      	ldrh	r3, [r7, #12]
 8017030:	843b      	strh	r3, [r7, #32]
    }
    if(pixelX > IMAGE_RIGHT)
 8017032:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8017036:	8bfb      	ldrh	r3, [r7, #30]
 8017038:	429a      	cmp	r2, r3
 801703a:	dd01      	ble.n	8017040 <LCD_FillPolyLine+0x8c>
    {
      IMAGE_RIGHT = pixelX;
 801703c:	89bb      	ldrh	r3, [r7, #12]
 801703e:	83fb      	strh	r3, [r7, #30]
    }
    
    pixelY = POLY_Y(counter);
 8017040:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017044:	009b      	lsls	r3, r3, #2
 8017046:	687a      	ldr	r2, [r7, #4]
 8017048:	4413      	add	r3, r2
 801704a:	881b      	ldrh	r3, [r3, #0]
 801704c:	817b      	strh	r3, [r7, #10]
    if(pixelY < IMAGE_TOP)
 801704e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8017052:	8bbb      	ldrh	r3, [r7, #28]
 8017054:	429a      	cmp	r2, r3
 8017056:	da01      	bge.n	801705c <LCD_FillPolyLine+0xa8>
    { 
      IMAGE_TOP = pixelY;
 8017058:	897b      	ldrh	r3, [r7, #10]
 801705a:	83bb      	strh	r3, [r7, #28]
    }
    if(pixelY > IMAGE_BOTTOM)
 801705c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8017060:	8b7b      	ldrh	r3, [r7, #26]
 8017062:	429a      	cmp	r2, r3
 8017064:	dd01      	ble.n	801706a <LCD_FillPolyLine+0xb6>
    {
      IMAGE_BOTTOM = pixelY;
 8017066:	897b      	ldrh	r3, [r7, #10]
 8017068:	837b      	strh	r3, [r7, #26]
  uint16_t  IMAGE_LEFT = 0, IMAGE_RIGHT = 0, IMAGE_TOP = 0, IMAGE_BOTTOM = 0;  

  IMAGE_LEFT = IMAGE_RIGHT = Points->X;
  IMAGE_TOP= IMAGE_BOTTOM = Points->Y;

  for(counter = 1; counter < PointCount; counter++)
 801706a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801706c:	3301      	adds	r3, #1
 801706e:	847b      	strh	r3, [r7, #34]	; 0x22
 8017070:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8017074:	887b      	ldrh	r3, [r7, #2]
 8017076:	429a      	cmp	r2, r3
 8017078:	dbcd      	blt.n	8017016 <LCD_FillPolyLine+0x62>
    {
      IMAGE_BOTTOM = pixelY;
    }
  }  
  
  if(PointCount < 2)
 801707a:	887b      	ldrh	r3, [r7, #2]
 801707c:	2b01      	cmp	r3, #1
 801707e:	d800      	bhi.n	8017082 <LCD_FillPolyLine+0xce>
  {
    return;
 8017080:	e065      	b.n	801714e <LCD_FillPolyLine+0x19a>
  }
  
  X_center = (IMAGE_LEFT + IMAGE_RIGHT)/2;
 8017082:	8c3a      	ldrh	r2, [r7, #32]
 8017084:	8bfb      	ldrh	r3, [r7, #30]
 8017086:	4413      	add	r3, r2
 8017088:	0fda      	lsrs	r2, r3, #31
 801708a:	4413      	add	r3, r2
 801708c:	105b      	asrs	r3, r3, #1
 801708e:	82bb      	strh	r3, [r7, #20]
  Y_center = (IMAGE_BOTTOM + IMAGE_TOP)/2;
 8017090:	8b7a      	ldrh	r2, [r7, #26]
 8017092:	8bbb      	ldrh	r3, [r7, #28]
 8017094:	4413      	add	r3, r2
 8017096:	0fda      	lsrs	r2, r3, #31
 8017098:	4413      	add	r3, r2
 801709a:	105b      	asrs	r3, r3, #1
 801709c:	827b      	strh	r3, [r7, #18]
 
  X_first = Points->X;
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	881b      	ldrh	r3, [r3, #0]
 80170a2:	823b      	strh	r3, [r7, #16]
  Y_first = Points->Y;
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	885b      	ldrh	r3, [r3, #2]
 80170a8:	81fb      	strh	r3, [r7, #14]
  
  while(--PointCount)
 80170aa:	e02c      	b.n	8017106 <LCD_FillPolyLine+0x152>
  {
    X = Points->X;
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	881b      	ldrh	r3, [r3, #0]
 80170b0:	833b      	strh	r3, [r7, #24]
    Y = Points->Y;
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	885b      	ldrh	r3, [r3, #2]
 80170b6:	82fb      	strh	r3, [r7, #22]
    Points++;
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	3304      	adds	r3, #4
 80170bc:	607b      	str	r3, [r7, #4]
    X2 = Points->X;
 80170be:	687b      	ldr	r3, [r7, #4]
 80170c0:	881b      	ldrh	r3, [r3, #0]
 80170c2:	84fb      	strh	r3, [r7, #38]	; 0x26
    Y2 = Points->Y;    
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	885b      	ldrh	r3, [r3, #2]
 80170c8:	84bb      	strh	r3, [r7, #36]	; 0x24
  
    LCD_FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 80170ca:	8b38      	ldrh	r0, [r7, #24]
 80170cc:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80170ce:	8aba      	ldrh	r2, [r7, #20]
 80170d0:	8afb      	ldrh	r3, [r7, #22]
 80170d2:	8cbd      	ldrh	r5, [r7, #36]	; 0x24
 80170d4:	8a7c      	ldrh	r4, [r7, #18]
 80170d6:	9500      	str	r5, [sp, #0]
 80170d8:	9401      	str	r4, [sp, #4]
 80170da:	f7ff fdf5 	bl	8016cc8 <LCD_FillTriangle>
    LCD_FillTriangle(X, X_center, X2, Y, Y_center, Y2);
 80170de:	8b38      	ldrh	r0, [r7, #24]
 80170e0:	8ab9      	ldrh	r1, [r7, #20]
 80170e2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80170e4:	8afb      	ldrh	r3, [r7, #22]
 80170e6:	8a7d      	ldrh	r5, [r7, #18]
 80170e8:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
 80170ea:	9500      	str	r5, [sp, #0]
 80170ec:	9401      	str	r4, [sp, #4]
 80170ee:	f7ff fdeb 	bl	8016cc8 <LCD_FillTriangle>
    LCD_FillTriangle(X_center, X2, X, Y_center, Y2, Y);   
 80170f2:	8ab8      	ldrh	r0, [r7, #20]
 80170f4:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80170f6:	8b3a      	ldrh	r2, [r7, #24]
 80170f8:	8a7b      	ldrh	r3, [r7, #18]
 80170fa:	8cbd      	ldrh	r5, [r7, #36]	; 0x24
 80170fc:	8afc      	ldrh	r4, [r7, #22]
 80170fe:	9500      	str	r5, [sp, #0]
 8017100:	9401      	str	r4, [sp, #4]
 8017102:	f7ff fde1 	bl	8016cc8 <LCD_FillTriangle>
  Y_center = (IMAGE_BOTTOM + IMAGE_TOP)/2;
 
  X_first = Points->X;
  Y_first = Points->Y;
  
  while(--PointCount)
 8017106:	887b      	ldrh	r3, [r7, #2]
 8017108:	3b01      	subs	r3, #1
 801710a:	807b      	strh	r3, [r7, #2]
 801710c:	887b      	ldrh	r3, [r7, #2]
 801710e:	2b00      	cmp	r3, #0
 8017110:	d1cc      	bne.n	80170ac <LCD_FillPolyLine+0xf8>
    LCD_FillTriangle(X, X2, X_center, Y, Y2, Y_center);
    LCD_FillTriangle(X, X_center, X2, Y, Y_center, Y2);
    LCD_FillTriangle(X_center, X2, X, Y_center, Y2, Y);   
  }
  
  LCD_FillTriangle(X_first, X2, X_center, Y_first, Y2, Y_center);
 8017112:	8a38      	ldrh	r0, [r7, #16]
 8017114:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8017116:	8aba      	ldrh	r2, [r7, #20]
 8017118:	89fb      	ldrh	r3, [r7, #14]
 801711a:	8cbd      	ldrh	r5, [r7, #36]	; 0x24
 801711c:	8a7c      	ldrh	r4, [r7, #18]
 801711e:	9500      	str	r5, [sp, #0]
 8017120:	9401      	str	r4, [sp, #4]
 8017122:	f7ff fdd1 	bl	8016cc8 <LCD_FillTriangle>
  LCD_FillTriangle(X_first, X_center, X2, Y_first, Y_center, Y2);
 8017126:	8a38      	ldrh	r0, [r7, #16]
 8017128:	8ab9      	ldrh	r1, [r7, #20]
 801712a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801712c:	89fb      	ldrh	r3, [r7, #14]
 801712e:	8a7d      	ldrh	r5, [r7, #18]
 8017130:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
 8017132:	9500      	str	r5, [sp, #0]
 8017134:	9401      	str	r4, [sp, #4]
 8017136:	f7ff fdc7 	bl	8016cc8 <LCD_FillTriangle>
  LCD_FillTriangle(X_center, X2, X_first, Y_center, Y2, Y_first); 
 801713a:	8ab8      	ldrh	r0, [r7, #20]
 801713c:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 801713e:	8a3a      	ldrh	r2, [r7, #16]
 8017140:	8a7b      	ldrh	r3, [r7, #18]
 8017142:	8cbd      	ldrh	r5, [r7, #36]	; 0x24
 8017144:	89fc      	ldrh	r4, [r7, #14]
 8017146:	9500      	str	r5, [sp, #0]
 8017148:	9401      	str	r4, [sp, #4]
 801714a:	f7ff fdbd 	bl	8016cc8 <LCD_FillTriangle>
}
 801714e:	3728      	adds	r7, #40	; 0x28
 8017150:	46bd      	mov	sp, r7
 8017152:	bdb0      	pop	{r4, r5, r7, pc}

08017154 <LCD_WriteCommand>:
  * @brief  Writes command to select the LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void LCD_WriteCommand(uint8_t LCD_Reg)
{
 8017154:	b580      	push	{r7, lr}
 8017156:	b082      	sub	sp, #8
 8017158:	af00      	add	r7, sp, #0
 801715a:	4603      	mov	r3, r0
 801715c:	71fb      	strb	r3, [r7, #7]
    /* Reset WRX to send command */
  LCD_CtrlLinesWrite(LCD_WRX_GPIO_PORT, LCD_WRX_PIN, Bit_RESET);
 801715e:	4812      	ldr	r0, [pc, #72]	; (80171a8 <LCD_WriteCommand+0x54>)
 8017160:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8017164:	2200      	movs	r2, #0
 8017166:	f000 f9cf 	bl	8017508 <LCD_CtrlLinesWrite>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_ChipSelect(DISABLE);
 801716a:	2000      	movs	r0, #0
 801716c:	f7fe fbca 	bl	8015904 <LCD_ChipSelect>
  SPI_I2S_SendData(LCD_SPI, LCD_Reg);
 8017170:	79fb      	ldrb	r3, [r7, #7]
 8017172:	b29b      	uxth	r3, r3
 8017174:	480d      	ldr	r0, [pc, #52]	; (80171ac <LCD_WriteCommand+0x58>)
 8017176:	4619      	mov	r1, r3
 8017178:	f7fb fae6 	bl	8012748 <SPI_I2S_SendData>
  
  /* Wait until a data is sent(not busy), before config /CS HIGH */
  
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_TXE) == RESET) ;
 801717c:	bf00      	nop
 801717e:	480b      	ldr	r0, [pc, #44]	; (80171ac <LCD_WriteCommand+0x58>)
 8017180:	2102      	movs	r1, #2
 8017182:	f7fb fb9d 	bl	80128c0 <SPI_I2S_GetFlagStatus>
 8017186:	4603      	mov	r3, r0
 8017188:	2b00      	cmp	r3, #0
 801718a:	d0f8      	beq.n	801717e <LCD_WriteCommand+0x2a>
  
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET);
 801718c:	bf00      	nop
 801718e:	4807      	ldr	r0, [pc, #28]	; (80171ac <LCD_WriteCommand+0x58>)
 8017190:	2180      	movs	r1, #128	; 0x80
 8017192:	f7fb fb95 	bl	80128c0 <SPI_I2S_GetFlagStatus>
 8017196:	4603      	mov	r3, r0
 8017198:	2b00      	cmp	r3, #0
 801719a:	d1f8      	bne.n	801718e <LCD_WriteCommand+0x3a>
  
  LCD_ChipSelect(ENABLE);
 801719c:	2001      	movs	r0, #1
 801719e:	f7fe fbb1 	bl	8015904 <LCD_ChipSelect>
}
 80171a2:	3708      	adds	r7, #8
 80171a4:	46bd      	mov	sp, r7
 80171a6:	bd80      	pop	{r7, pc}
 80171a8:	40020c00 	.word	0x40020c00
 80171ac:	40015000 	.word	0x40015000

080171b0 <LCD_WriteData>:
  *         This function must be used after LCD_WriteCommand() function
  * @param  value: data to write to the selected register.
  * @retval None
  */
void LCD_WriteData(uint8_t value)
{
 80171b0:	b580      	push	{r7, lr}
 80171b2:	b082      	sub	sp, #8
 80171b4:	af00      	add	r7, sp, #0
 80171b6:	4603      	mov	r3, r0
 80171b8:	71fb      	strb	r3, [r7, #7]
    /* Set WRX to send data */
  LCD_CtrlLinesWrite(LCD_WRX_GPIO_PORT, LCD_WRX_PIN, Bit_SET);
 80171ba:	4812      	ldr	r0, [pc, #72]	; (8017204 <LCD_WriteData+0x54>)
 80171bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80171c0:	2201      	movs	r2, #1
 80171c2:	f000 f9a1 	bl	8017508 <LCD_CtrlLinesWrite>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_ChipSelect(DISABLE);
 80171c6:	2000      	movs	r0, #0
 80171c8:	f7fe fb9c 	bl	8015904 <LCD_ChipSelect>
  SPI_I2S_SendData(LCD_SPI, value);
 80171cc:	79fb      	ldrb	r3, [r7, #7]
 80171ce:	b29b      	uxth	r3, r3
 80171d0:	480d      	ldr	r0, [pc, #52]	; (8017208 <LCD_WriteData+0x58>)
 80171d2:	4619      	mov	r1, r3
 80171d4:	f7fb fab8 	bl	8012748 <SPI_I2S_SendData>
  
  /* Wait until a data is sent(not busy), before config /CS HIGH */
  
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_TXE) == RESET) ;
 80171d8:	bf00      	nop
 80171da:	480b      	ldr	r0, [pc, #44]	; (8017208 <LCD_WriteData+0x58>)
 80171dc:	2102      	movs	r1, #2
 80171de:	f7fb fb6f 	bl	80128c0 <SPI_I2S_GetFlagStatus>
 80171e2:	4603      	mov	r3, r0
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	d0f8      	beq.n	80171da <LCD_WriteData+0x2a>
  
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET);
 80171e8:	bf00      	nop
 80171ea:	4807      	ldr	r0, [pc, #28]	; (8017208 <LCD_WriteData+0x58>)
 80171ec:	2180      	movs	r1, #128	; 0x80
 80171ee:	f7fb fb67 	bl	80128c0 <SPI_I2S_GetFlagStatus>
 80171f2:	4603      	mov	r3, r0
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d1f8      	bne.n	80171ea <LCD_WriteData+0x3a>
  
  LCD_ChipSelect(ENABLE);
 80171f8:	2001      	movs	r0, #1
 80171fa:	f7fe fb83 	bl	8015904 <LCD_ChipSelect>
}
 80171fe:	3708      	adds	r7, #8
 8017200:	46bd      	mov	sp, r7
 8017202:	bd80      	pop	{r7, pc}
 8017204:	40020c00 	.word	0x40020c00
 8017208:	40015000 	.word	0x40015000

0801720c <LCD_PowerOn>:
  * @brief  Configure the LCD controller (Power On sequence as described in ILI9341 Datasheet)
  * @param  None
  * @retval None
  */
void LCD_PowerOn(void)
{
 801720c:	b580      	push	{r7, lr}
 801720e:	af00      	add	r7, sp, #0
  LCD_WriteCommand(0xCA);
 8017210:	20ca      	movs	r0, #202	; 0xca
 8017212:	f7ff ff9f 	bl	8017154 <LCD_WriteCommand>
  LCD_WriteData(0xC3);
 8017216:	20c3      	movs	r0, #195	; 0xc3
 8017218:	f7ff ffca 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x08);
 801721c:	2008      	movs	r0, #8
 801721e:	f7ff ffc7 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x50);
 8017222:	2050      	movs	r0, #80	; 0x50
 8017224:	f7ff ffc4 	bl	80171b0 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWERB);
 8017228:	20cf      	movs	r0, #207	; 0xcf
 801722a:	f7ff ff93 	bl	8017154 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 801722e:	2000      	movs	r0, #0
 8017230:	f7ff ffbe 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0xC1);
 8017234:	20c1      	movs	r0, #193	; 0xc1
 8017236:	f7ff ffbb 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x30);
 801723a:	2030      	movs	r0, #48	; 0x30
 801723c:	f7ff ffb8 	bl	80171b0 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER_SEQ);
 8017240:	20ed      	movs	r0, #237	; 0xed
 8017242:	f7ff ff87 	bl	8017154 <LCD_WriteCommand>
  LCD_WriteData(0x64);
 8017246:	2064      	movs	r0, #100	; 0x64
 8017248:	f7ff ffb2 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x03);
 801724c:	2003      	movs	r0, #3
 801724e:	f7ff ffaf 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x12);
 8017252:	2012      	movs	r0, #18
 8017254:	f7ff ffac 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x81);
 8017258:	2081      	movs	r0, #129	; 0x81
 801725a:	f7ff ffa9 	bl	80171b0 <LCD_WriteData>
  LCD_WriteCommand(LCD_DTCA);
 801725e:	20e8      	movs	r0, #232	; 0xe8
 8017260:	f7ff ff78 	bl	8017154 <LCD_WriteCommand>
  LCD_WriteData(0x85);
 8017264:	2085      	movs	r0, #133	; 0x85
 8017266:	f7ff ffa3 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x00);
 801726a:	2000      	movs	r0, #0
 801726c:	f7ff ffa0 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x78);
 8017270:	2078      	movs	r0, #120	; 0x78
 8017272:	f7ff ff9d 	bl	80171b0 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWERA);
 8017276:	20cb      	movs	r0, #203	; 0xcb
 8017278:	f7ff ff6c 	bl	8017154 <LCD_WriteCommand>
  LCD_WriteData(0x39);
 801727c:	2039      	movs	r0, #57	; 0x39
 801727e:	f7ff ff97 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x2C);
 8017282:	202c      	movs	r0, #44	; 0x2c
 8017284:	f7ff ff94 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x00);
 8017288:	2000      	movs	r0, #0
 801728a:	f7ff ff91 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x34);
 801728e:	2034      	movs	r0, #52	; 0x34
 8017290:	f7ff ff8e 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x02);
 8017294:	2002      	movs	r0, #2
 8017296:	f7ff ff8b 	bl	80171b0 <LCD_WriteData>
  LCD_WriteCommand(LCD_PRC);
 801729a:	20f7      	movs	r0, #247	; 0xf7
 801729c:	f7ff ff5a 	bl	8017154 <LCD_WriteCommand>
  LCD_WriteData(0x20);
 80172a0:	2020      	movs	r0, #32
 80172a2:	f7ff ff85 	bl	80171b0 <LCD_WriteData>
  LCD_WriteCommand(LCD_DTCB);
 80172a6:	20ea      	movs	r0, #234	; 0xea
 80172a8:	f7ff ff54 	bl	8017154 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 80172ac:	2000      	movs	r0, #0
 80172ae:	f7ff ff7f 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x00);
 80172b2:	2000      	movs	r0, #0
 80172b4:	f7ff ff7c 	bl	80171b0 <LCD_WriteData>
  LCD_WriteCommand(LCD_FRC);
 80172b8:	20b1      	movs	r0, #177	; 0xb1
 80172ba:	f7ff ff4b 	bl	8017154 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 80172be:	2000      	movs	r0, #0
 80172c0:	f7ff ff76 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x1B);
 80172c4:	201b      	movs	r0, #27
 80172c6:	f7ff ff73 	bl	80171b0 <LCD_WriteData>
  LCD_WriteCommand(LCD_DFC);
 80172ca:	20b6      	movs	r0, #182	; 0xb6
 80172cc:	f7ff ff42 	bl	8017154 <LCD_WriteCommand>
  LCD_WriteData(0x0A);
 80172d0:	200a      	movs	r0, #10
 80172d2:	f7ff ff6d 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0xA2);
 80172d6:	20a2      	movs	r0, #162	; 0xa2
 80172d8:	f7ff ff6a 	bl	80171b0 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER1);
 80172dc:	20c0      	movs	r0, #192	; 0xc0
 80172de:	f7ff ff39 	bl	8017154 <LCD_WriteCommand>
  LCD_WriteData(0x10);
 80172e2:	2010      	movs	r0, #16
 80172e4:	f7ff ff64 	bl	80171b0 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER2);
 80172e8:	20c1      	movs	r0, #193	; 0xc1
 80172ea:	f7ff ff33 	bl	8017154 <LCD_WriteCommand>
  LCD_WriteData(0x10);
 80172ee:	2010      	movs	r0, #16
 80172f0:	f7ff ff5e 	bl	80171b0 <LCD_WriteData>
  LCD_WriteCommand(LCD_VCOM1);
 80172f4:	20c5      	movs	r0, #197	; 0xc5
 80172f6:	f7ff ff2d 	bl	8017154 <LCD_WriteCommand>
  LCD_WriteData(0x45);
 80172fa:	2045      	movs	r0, #69	; 0x45
 80172fc:	f7ff ff58 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x15);
 8017300:	2015      	movs	r0, #21
 8017302:	f7ff ff55 	bl	80171b0 <LCD_WriteData>
  LCD_WriteCommand(LCD_VCOM2);
 8017306:	20c7      	movs	r0, #199	; 0xc7
 8017308:	f7ff ff24 	bl	8017154 <LCD_WriteCommand>
  LCD_WriteData(0x90);
 801730c:	2090      	movs	r0, #144	; 0x90
 801730e:	f7ff ff4f 	bl	80171b0 <LCD_WriteData>
  LCD_WriteCommand(LCD_MAC);
 8017312:	2036      	movs	r0, #54	; 0x36
 8017314:	f7ff ff1e 	bl	8017154 <LCD_WriteCommand>
  LCD_WriteData(0xC8);
 8017318:	20c8      	movs	r0, #200	; 0xc8
 801731a:	f7ff ff49 	bl	80171b0 <LCD_WriteData>
  LCD_WriteCommand(LCD_3GAMMA_EN);
 801731e:	20f2      	movs	r0, #242	; 0xf2
 8017320:	f7ff ff18 	bl	8017154 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8017324:	2000      	movs	r0, #0
 8017326:	f7ff ff43 	bl	80171b0 <LCD_WriteData>
  LCD_WriteCommand(LCD_RGB_INTERFACE);
 801732a:	20b0      	movs	r0, #176	; 0xb0
 801732c:	f7ff ff12 	bl	8017154 <LCD_WriteCommand>
  LCD_WriteData(0xC2);
 8017330:	20c2      	movs	r0, #194	; 0xc2
 8017332:	f7ff ff3d 	bl	80171b0 <LCD_WriteData>
  LCD_WriteCommand(LCD_DFC);
 8017336:	20b6      	movs	r0, #182	; 0xb6
 8017338:	f7ff ff0c 	bl	8017154 <LCD_WriteCommand>
  LCD_WriteData(0x0A);
 801733c:	200a      	movs	r0, #10
 801733e:	f7ff ff37 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0xA7);
 8017342:	20a7      	movs	r0, #167	; 0xa7
 8017344:	f7ff ff34 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x27);
 8017348:	2027      	movs	r0, #39	; 0x27
 801734a:	f7ff ff31 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x04);
 801734e:	2004      	movs	r0, #4
 8017350:	f7ff ff2e 	bl	80171b0 <LCD_WriteData>

  /* colomn address set */
  LCD_WriteCommand(LCD_COLUMN_ADDR);
 8017354:	202a      	movs	r0, #42	; 0x2a
 8017356:	f7ff fefd 	bl	8017154 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 801735a:	2000      	movs	r0, #0
 801735c:	f7ff ff28 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x00);
 8017360:	2000      	movs	r0, #0
 8017362:	f7ff ff25 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x00);
 8017366:	2000      	movs	r0, #0
 8017368:	f7ff ff22 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0xEF);
 801736c:	20ef      	movs	r0, #239	; 0xef
 801736e:	f7ff ff1f 	bl	80171b0 <LCD_WriteData>
  /* Page Address Set */
  LCD_WriteCommand(LCD_PAGE_ADDR);
 8017372:	202b      	movs	r0, #43	; 0x2b
 8017374:	f7ff feee 	bl	8017154 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8017378:	2000      	movs	r0, #0
 801737a:	f7ff ff19 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x00);
 801737e:	2000      	movs	r0, #0
 8017380:	f7ff ff16 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x01);
 8017384:	2001      	movs	r0, #1
 8017386:	f7ff ff13 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x3F);
 801738a:	203f      	movs	r0, #63	; 0x3f
 801738c:	f7ff ff10 	bl	80171b0 <LCD_WriteData>
  LCD_WriteCommand(LCD_INTERFACE);
 8017390:	20f6      	movs	r0, #246	; 0xf6
 8017392:	f7ff fedf 	bl	8017154 <LCD_WriteCommand>
  LCD_WriteData(0x01);
 8017396:	2001      	movs	r0, #1
 8017398:	f7ff ff0a 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x00);
 801739c:	2000      	movs	r0, #0
 801739e:	f7ff ff07 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x06);
 80173a2:	2006      	movs	r0, #6
 80173a4:	f7ff ff04 	bl	80171b0 <LCD_WriteData>
  
  LCD_WriteCommand(LCD_GRAM);
 80173a8:	202c      	movs	r0, #44	; 0x2c
 80173aa:	f7ff fed3 	bl	8017154 <LCD_WriteCommand>
  delay(200);
 80173ae:	20c8      	movs	r0, #200	; 0xc8
 80173b0:	f000 fa06 	bl	80177c0 <delay>
  
  LCD_WriteCommand(LCD_GAMMA);
 80173b4:	2026      	movs	r0, #38	; 0x26
 80173b6:	f7ff fecd 	bl	8017154 <LCD_WriteCommand>
  LCD_WriteData(0x01);
 80173ba:	2001      	movs	r0, #1
 80173bc:	f7ff fef8 	bl	80171b0 <LCD_WriteData>
  
  LCD_WriteCommand(LCD_PGAMMA);
 80173c0:	20e0      	movs	r0, #224	; 0xe0
 80173c2:	f7ff fec7 	bl	8017154 <LCD_WriteCommand>
  LCD_WriteData(0x0F);
 80173c6:	200f      	movs	r0, #15
 80173c8:	f7ff fef2 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x29);
 80173cc:	2029      	movs	r0, #41	; 0x29
 80173ce:	f7ff feef 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x24);
 80173d2:	2024      	movs	r0, #36	; 0x24
 80173d4:	f7ff feec 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x0C);
 80173d8:	200c      	movs	r0, #12
 80173da:	f7ff fee9 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x0E);
 80173de:	200e      	movs	r0, #14
 80173e0:	f7ff fee6 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x09);
 80173e4:	2009      	movs	r0, #9
 80173e6:	f7ff fee3 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x4E);
 80173ea:	204e      	movs	r0, #78	; 0x4e
 80173ec:	f7ff fee0 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x78);
 80173f0:	2078      	movs	r0, #120	; 0x78
 80173f2:	f7ff fedd 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x3C);
 80173f6:	203c      	movs	r0, #60	; 0x3c
 80173f8:	f7ff feda 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x09);
 80173fc:	2009      	movs	r0, #9
 80173fe:	f7ff fed7 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x13);
 8017402:	2013      	movs	r0, #19
 8017404:	f7ff fed4 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x05);
 8017408:	2005      	movs	r0, #5
 801740a:	f7ff fed1 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x17);
 801740e:	2017      	movs	r0, #23
 8017410:	f7ff fece 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x11);
 8017414:	2011      	movs	r0, #17
 8017416:	f7ff fecb 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x00);
 801741a:	2000      	movs	r0, #0
 801741c:	f7ff fec8 	bl	80171b0 <LCD_WriteData>
  LCD_WriteCommand(LCD_NGAMMA);
 8017420:	20e1      	movs	r0, #225	; 0xe1
 8017422:	f7ff fe97 	bl	8017154 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8017426:	2000      	movs	r0, #0
 8017428:	f7ff fec2 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x16);
 801742c:	2016      	movs	r0, #22
 801742e:	f7ff febf 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x1B);
 8017432:	201b      	movs	r0, #27
 8017434:	f7ff febc 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x04);
 8017438:	2004      	movs	r0, #4
 801743a:	f7ff feb9 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x11);
 801743e:	2011      	movs	r0, #17
 8017440:	f7ff feb6 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x07);
 8017444:	2007      	movs	r0, #7
 8017446:	f7ff feb3 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x31);
 801744a:	2031      	movs	r0, #49	; 0x31
 801744c:	f7ff feb0 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x33);
 8017450:	2033      	movs	r0, #51	; 0x33
 8017452:	f7ff fead 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x42);
 8017456:	2042      	movs	r0, #66	; 0x42
 8017458:	f7ff feaa 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x05);
 801745c:	2005      	movs	r0, #5
 801745e:	f7ff fea7 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x0C);
 8017462:	200c      	movs	r0, #12
 8017464:	f7ff fea4 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x0A);
 8017468:	200a      	movs	r0, #10
 801746a:	f7ff fea1 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x28);
 801746e:	2028      	movs	r0, #40	; 0x28
 8017470:	f7ff fe9e 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x2F);
 8017474:	202f      	movs	r0, #47	; 0x2f
 8017476:	f7ff fe9b 	bl	80171b0 <LCD_WriteData>
  LCD_WriteData(0x0F);
 801747a:	200f      	movs	r0, #15
 801747c:	f7ff fe98 	bl	80171b0 <LCD_WriteData>
  
  LCD_WriteCommand(LCD_SLEEP_OUT);
 8017480:	2011      	movs	r0, #17
 8017482:	f7ff fe67 	bl	8017154 <LCD_WriteCommand>
  delay(200);
 8017486:	20c8      	movs	r0, #200	; 0xc8
 8017488:	f000 f99a 	bl	80177c0 <delay>
  LCD_WriteCommand(LCD_DISPLAY_ON);
 801748c:	2029      	movs	r0, #41	; 0x29
 801748e:	f7ff fe61 	bl	8017154 <LCD_WriteCommand>
  /* GRAM start writing */
  LCD_WriteCommand(LCD_GRAM);
 8017492:	202c      	movs	r0, #44	; 0x2c
 8017494:	f7ff fe5e 	bl	8017154 <LCD_WriteCommand>
 }
 8017498:	bd80      	pop	{r7, pc}
 801749a:	bf00      	nop

0801749c <LCD_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void LCD_DisplayOn(void)
{
 801749c:	b580      	push	{r7, lr}
 801749e:	af00      	add	r7, sp, #0
  LCD_WriteCommand(LCD_DISPLAY_ON);
 80174a0:	2029      	movs	r0, #41	; 0x29
 80174a2:	f7ff fe57 	bl	8017154 <LCD_WriteCommand>
}
 80174a6:	bd80      	pop	{r7, pc}

080174a8 <LCD_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void LCD_DisplayOff(void)
{
 80174a8:	b580      	push	{r7, lr}
 80174aa:	af00      	add	r7, sp, #0
    /* Display Off */
    LCD_WriteCommand(LCD_DISPLAY_OFF);
 80174ac:	2028      	movs	r0, #40	; 0x28
 80174ae:	f7ff fe51 	bl	8017154 <LCD_WriteCommand>
}
 80174b2:	bd80      	pop	{r7, pc}

080174b4 <LCD_CtrlLinesConfig>:
  *         when VDDIO is lower than required LCD supply.
  * @param  None
  * @retval None
  */
void LCD_CtrlLinesConfig(void)
{
 80174b4:	b580      	push	{r7, lr}
 80174b6:	b082      	sub	sp, #8
 80174b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIOs clock*/
  RCC_AHB1PeriphClockCmd(LCD_NCS_GPIO_CLK | LCD_WRX_GPIO_CLK, ENABLE);
 80174ba:	200c      	movs	r0, #12
 80174bc:	2101      	movs	r1, #1
 80174be:	f7f8 fbbb 	bl	800fc38 <RCC_AHB1PeriphClockCmd>

  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = LCD_NCS_PIN;
 80174c2:	2304      	movs	r3, #4
 80174c4:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80174c6:	2302      	movs	r3, #2
 80174c8:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80174ca:	2301      	movs	r3, #1
 80174cc:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80174ce:	2300      	movs	r3, #0
 80174d0:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80174d2:	2300      	movs	r3, #0
 80174d4:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80174d6:	463b      	mov	r3, r7
 80174d8:	4809      	ldr	r0, [pc, #36]	; (8017500 <LCD_CtrlLinesConfig+0x4c>)
 80174da:	4619      	mov	r1, r3
 80174dc:	f7f5 fd04 	bl	800cee8 <GPIO_Init>
  
  /* Configure WRX in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = LCD_WRX_PIN;
 80174e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80174e4:	603b      	str	r3, [r7, #0]
  GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80174e6:	463b      	mov	r3, r7
 80174e8:	4806      	ldr	r0, [pc, #24]	; (8017504 <LCD_CtrlLinesConfig+0x50>)
 80174ea:	4619      	mov	r1, r3
 80174ec:	f7f5 fcfc 	bl	800cee8 <GPIO_Init>

  /* Set chip select pin high */
  LCD_CtrlLinesWrite(LCD_NCS_GPIO_PORT, LCD_NCS_PIN, Bit_SET);
 80174f0:	4803      	ldr	r0, [pc, #12]	; (8017500 <LCD_CtrlLinesConfig+0x4c>)
 80174f2:	2104      	movs	r1, #4
 80174f4:	2201      	movs	r2, #1
 80174f6:	f000 f807 	bl	8017508 <LCD_CtrlLinesWrite>
}
 80174fa:	3708      	adds	r7, #8
 80174fc:	46bd      	mov	sp, r7
 80174fe:	bd80      	pop	{r7, pc}
 8017500:	40020800 	.word	0x40020800
 8017504:	40020c00 	.word	0x40020c00

08017508 <LCD_CtrlLinesWrite>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void LCD_CtrlLinesWrite(GPIO_TypeDef* GPIOx, uint16_t CtrlPins, BitAction BitVal)
{
 8017508:	b580      	push	{r7, lr}
 801750a:	b082      	sub	sp, #8
 801750c:	af00      	add	r7, sp, #0
 801750e:	6078      	str	r0, [r7, #4]
 8017510:	4613      	mov	r3, r2
 8017512:	460a      	mov	r2, r1
 8017514:	807a      	strh	r2, [r7, #2]
 8017516:	707b      	strb	r3, [r7, #1]
  /* Set or Reset the control line */
  GPIO_WriteBit(GPIOx, (uint16_t)CtrlPins, (BitAction)BitVal);
 8017518:	887a      	ldrh	r2, [r7, #2]
 801751a:	787b      	ldrb	r3, [r7, #1]
 801751c:	6878      	ldr	r0, [r7, #4]
 801751e:	4611      	mov	r1, r2
 8017520:	461a      	mov	r2, r3
 8017522:	f7f5 fe17 	bl	800d154 <GPIO_WriteBit>
}
 8017526:	3708      	adds	r7, #8
 8017528:	46bd      	mov	sp, r7
 801752a:	bd80      	pop	{r7, pc}

0801752c <LCD_SPIConfig>:
  * @brief  Configures the LCD_SPI interface.
  * @param  None
  * @retval None
  */
void LCD_SPIConfig(void)
{
 801752c:	b580      	push	{r7, lr}
 801752e:	b088      	sub	sp, #32
 8017530:	af00      	add	r7, sp, #0
  SPI_InitTypeDef    SPI_InitStructure;
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable LCD_SPI_SCK_GPIO_CLK, LCD_SPI_MISO_GPIO_CLK and LCD_SPI_MOSI_GPIO_CLK clock */
  RCC_AHB1PeriphClockCmd(LCD_SPI_SCK_GPIO_CLK | LCD_SPI_MISO_GPIO_CLK | LCD_SPI_MOSI_GPIO_CLK, ENABLE);
 8017532:	2020      	movs	r0, #32
 8017534:	2101      	movs	r1, #1
 8017536:	f7f8 fb7f 	bl	800fc38 <RCC_AHB1PeriphClockCmd>

  /* Enable LCD_SPI and SYSCFG clock  */
  RCC_APB2PeriphClockCmd(LCD_SPI_CLK, ENABLE);
 801753a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 801753e:	2101      	movs	r1, #1
 8017540:	f7f8 fbf2 	bl	800fd28 <RCC_APB2PeriphClockCmd>
  
  /* Configure LCD_SPI SCK pin */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_SCK_PIN;
 8017544:	2380      	movs	r3, #128	; 0x80
 8017546:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 8017548:	2301      	movs	r3, #1
 801754a:	727b      	strb	r3, [r7, #9]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 801754c:	2302      	movs	r3, #2
 801754e:	723b      	strb	r3, [r7, #8]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8017550:	2300      	movs	r3, #0
 8017552:	72bb      	strb	r3, [r7, #10]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 8017554:	2302      	movs	r3, #2
 8017556:	72fb      	strb	r3, [r7, #11]
  GPIO_Init(LCD_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 8017558:	1d3b      	adds	r3, r7, #4
 801755a:	4827      	ldr	r0, [pc, #156]	; (80175f8 <LCD_SPIConfig+0xcc>)
 801755c:	4619      	mov	r1, r3
 801755e:	f7f5 fcc3 	bl	800cee8 <GPIO_Init>

  /* Configure LCD_SPI MISO pin */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MISO_PIN;
 8017562:	f44f 7380 	mov.w	r3, #256	; 0x100
 8017566:	607b      	str	r3, [r7, #4]
  GPIO_Init(LCD_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 8017568:	1d3b      	adds	r3, r7, #4
 801756a:	4823      	ldr	r0, [pc, #140]	; (80175f8 <LCD_SPIConfig+0xcc>)
 801756c:	4619      	mov	r1, r3
 801756e:	f7f5 fcbb 	bl	800cee8 <GPIO_Init>

  /* Configure LCD_SPI MOSI pin */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MOSI_PIN;
 8017572:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017576:	607b      	str	r3, [r7, #4]
  GPIO_Init(LCD_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 8017578:	1d3b      	adds	r3, r7, #4
 801757a:	481f      	ldr	r0, [pc, #124]	; (80175f8 <LCD_SPIConfig+0xcc>)
 801757c:	4619      	mov	r1, r3
 801757e:	f7f5 fcb3 	bl	800cee8 <GPIO_Init>

  /* Connect SPI SCK */
  GPIO_PinAFConfig(LCD_SPI_SCK_GPIO_PORT, LCD_SPI_SCK_SOURCE, LCD_SPI_SCK_AF);
 8017582:	481d      	ldr	r0, [pc, #116]	; (80175f8 <LCD_SPIConfig+0xcc>)
 8017584:	2107      	movs	r1, #7
 8017586:	2205      	movs	r2, #5
 8017588:	f7f5 fe1c 	bl	800d1c4 <GPIO_PinAFConfig>

  /* Connect SPI MISO */
  GPIO_PinAFConfig(LCD_SPI_MISO_GPIO_PORT, LCD_SPI_MISO_SOURCE, LCD_SPI_MISO_AF);
 801758c:	481a      	ldr	r0, [pc, #104]	; (80175f8 <LCD_SPIConfig+0xcc>)
 801758e:	2108      	movs	r1, #8
 8017590:	2205      	movs	r2, #5
 8017592:	f7f5 fe17 	bl	800d1c4 <GPIO_PinAFConfig>

  /* Connect SPI MOSI */
  GPIO_PinAFConfig(LCD_SPI_MOSI_GPIO_PORT, LCD_SPI_MOSI_SOURCE, LCD_SPI_MOSI_AF);
 8017596:	4818      	ldr	r0, [pc, #96]	; (80175f8 <LCD_SPIConfig+0xcc>)
 8017598:	2109      	movs	r1, #9
 801759a:	2205      	movs	r2, #5
 801759c:	f7f5 fe12 	bl	800d1c4 <GPIO_PinAFConfig>
  
  SPI_I2S_DeInit(LCD_SPI);
 80175a0:	4816      	ldr	r0, [pc, #88]	; (80175fc <LCD_SPIConfig+0xd0>)
 80175a2:	f7fa fdcf 	bl	8012144 <SPI_I2S_DeInit>

  /* SPI configuration -------------------------------------------------------*/
  /* If the SPI peripheral is already enabled, don't reconfigure it */
  if ((LCD_SPI->CR1 & SPI_CR1_SPE) == 0)
 80175a6:	4b15      	ldr	r3, [pc, #84]	; (80175fc <LCD_SPIConfig+0xd0>)
 80175a8:	881b      	ldrh	r3, [r3, #0]
 80175aa:	b29b      	uxth	r3, r3
 80175ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	d11d      	bne.n	80175f0 <LCD_SPIConfig+0xc4>
  {    
    SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80175b4:	2300      	movs	r3, #0
 80175b6:	81bb      	strh	r3, [r7, #12]
    SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 80175b8:	f44f 7382 	mov.w	r3, #260	; 0x104
 80175bc:	81fb      	strh	r3, [r7, #14]
    SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 80175be:	2300      	movs	r3, #0
 80175c0:	823b      	strh	r3, [r7, #16]
    SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 80175c2:	2300      	movs	r3, #0
 80175c4:	827b      	strh	r3, [r7, #18]
    SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 80175c6:	2300      	movs	r3, #0
 80175c8:	82bb      	strh	r3, [r7, #20]
    SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 80175ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80175ce:	82fb      	strh	r3, [r7, #22]
       to verify these constraints:
          - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
          - l3gd20 SPI interface max baudrate is 10MHz for write/read
          - PCLK2 frequency is set to 90 MHz 
       */
    SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
 80175d0:	2318      	movs	r3, #24
 80175d2:	833b      	strh	r3, [r7, #24]
    SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 80175d4:	2300      	movs	r3, #0
 80175d6:	837b      	strh	r3, [r7, #26]
    SPI_InitStructure.SPI_CRCPolynomial = 7;
 80175d8:	2307      	movs	r3, #7
 80175da:	83bb      	strh	r3, [r7, #28]
    SPI_Init(LCD_SPI, &SPI_InitStructure);
 80175dc:	f107 030c 	add.w	r3, r7, #12
 80175e0:	4806      	ldr	r0, [pc, #24]	; (80175fc <LCD_SPIConfig+0xd0>)
 80175e2:	4619      	mov	r1, r3
 80175e4:	f7fa fe1a 	bl	801221c <SPI_Init>

    /* Enable L3GD20_SPI  */
    SPI_Cmd(LCD_SPI, ENABLE);
 80175e8:	4804      	ldr	r0, [pc, #16]	; (80175fc <LCD_SPIConfig+0xd0>)
 80175ea:	2101      	movs	r1, #1
 80175ec:	f7fa ff72 	bl	80124d4 <SPI_Cmd>
  }
}
 80175f0:	3720      	adds	r7, #32
 80175f2:	46bd      	mov	sp, r7
 80175f4:	bd80      	pop	{r7, pc}
 80175f6:	bf00      	nop
 80175f8:	40021400 	.word	0x40021400
 80175fc:	40015000 	.word	0x40015000

08017600 <LCD_AF_GPIOConfig>:
  * @brief  GPIO config for LTDC.
  * @param  None
  * @retval None
  */
static void LCD_AF_GPIOConfig(void)
{
 8017600:	b580      	push	{r7, lr}
 8017602:	b082      	sub	sp, #8
 8017604:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable GPIOA, GPIOB, GPIOC, GPIOD, GPIOF, GPIOG AHB Clocks */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | \
 8017606:	206f      	movs	r0, #111	; 0x6f
 8017608:	2101      	movs	r1, #1
 801760a:	f7f8 fb15 	bl	800fc38 <RCC_AHB1PeriphClockCmd>
           -----------------------------------------------------

*/

 /* GPIOA configuration */
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_LTDC);
 801760e:	4854      	ldr	r0, [pc, #336]	; (8017760 <LCD_AF_GPIOConfig+0x160>)
 8017610:	2103      	movs	r1, #3
 8017612:	220e      	movs	r2, #14
 8017614:	f7f5 fdd6 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource4, GPIO_AF_LTDC);
 8017618:	4851      	ldr	r0, [pc, #324]	; (8017760 <LCD_AF_GPIOConfig+0x160>)
 801761a:	2104      	movs	r1, #4
 801761c:	220e      	movs	r2, #14
 801761e:	f7f5 fdd1 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_LTDC);
 8017622:	484f      	ldr	r0, [pc, #316]	; (8017760 <LCD_AF_GPIOConfig+0x160>)
 8017624:	2106      	movs	r1, #6
 8017626:	220e      	movs	r2, #14
 8017628:	f7f5 fdcc 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_LTDC);
 801762c:	484c      	ldr	r0, [pc, #304]	; (8017760 <LCD_AF_GPIOConfig+0x160>)
 801762e:	210b      	movs	r1, #11
 8017630:	220e      	movs	r2, #14
 8017632:	f7f5 fdc7 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource12, GPIO_AF_LTDC);
 8017636:	484a      	ldr	r0, [pc, #296]	; (8017760 <LCD_AF_GPIOConfig+0x160>)
 8017638:	210c      	movs	r1, #12
 801763a:	220e      	movs	r2, #14
 801763c:	f7f5 fdc2 	bl	800d1c4 <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_6 | \
 8017640:	f641 0358 	movw	r3, #6232	; 0x1858
 8017644:	603b      	str	r3, [r7, #0]
                             GPIO_Pin_11 | GPIO_Pin_12;
                             
  GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8017646:	2302      	movs	r3, #2
 8017648:	717b      	strb	r3, [r7, #5]
  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 801764a:	2302      	movs	r3, #2
 801764c:	713b      	strb	r3, [r7, #4]
  GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 801764e:	2300      	movs	r3, #0
 8017650:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8017652:	2300      	movs	r3, #0
 8017654:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017656:	463b      	mov	r3, r7
 8017658:	4841      	ldr	r0, [pc, #260]	; (8017760 <LCD_AF_GPIOConfig+0x160>)
 801765a:	4619      	mov	r1, r3
 801765c:	f7f5 fc44 	bl	800cee8 <GPIO_Init>
  
 /* GPIOB configuration */  
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource0, 0x09);
 8017660:	4840      	ldr	r0, [pc, #256]	; (8017764 <LCD_AF_GPIOConfig+0x164>)
 8017662:	2100      	movs	r1, #0
 8017664:	2209      	movs	r2, #9
 8017666:	f7f5 fdad 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, 0x09);
 801766a:	483e      	ldr	r0, [pc, #248]	; (8017764 <LCD_AF_GPIOConfig+0x164>)
 801766c:	2101      	movs	r1, #1
 801766e:	2209      	movs	r2, #9
 8017670:	f7f5 fda8 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_LTDC);
 8017674:	483b      	ldr	r0, [pc, #236]	; (8017764 <LCD_AF_GPIOConfig+0x164>)
 8017676:	2108      	movs	r1, #8
 8017678:	220e      	movs	r2, #14
 801767a:	f7f5 fda3 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_LTDC);
 801767e:	4839      	ldr	r0, [pc, #228]	; (8017764 <LCD_AF_GPIOConfig+0x164>)
 8017680:	2109      	movs	r1, #9
 8017682:	220e      	movs	r2, #14
 8017684:	f7f5 fd9e 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_LTDC);
 8017688:	4836      	ldr	r0, [pc, #216]	; (8017764 <LCD_AF_GPIOConfig+0x164>)
 801768a:	210a      	movs	r1, #10
 801768c:	220e      	movs	r2, #14
 801768e:	f7f5 fd99 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_LTDC);
 8017692:	4834      	ldr	r0, [pc, #208]	; (8017764 <LCD_AF_GPIOConfig+0x164>)
 8017694:	210b      	movs	r1, #11
 8017696:	220e      	movs	r2, #14
 8017698:	f7f5 fd94 	bl	800d1c4 <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | \
 801769c:	f640 7303 	movw	r3, #3843	; 0xf03
 80176a0:	603b      	str	r3, [r7, #0]
                             GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
  
  GPIO_Init(GPIOB, &GPIO_InitStruct);
 80176a2:	463b      	mov	r3, r7
 80176a4:	482f      	ldr	r0, [pc, #188]	; (8017764 <LCD_AF_GPIOConfig+0x164>)
 80176a6:	4619      	mov	r1, r3
 80176a8:	f7f5 fc1e 	bl	800cee8 <GPIO_Init>

 /* GPIOC configuration */
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_LTDC);
 80176ac:	482e      	ldr	r0, [pc, #184]	; (8017768 <LCD_AF_GPIOConfig+0x168>)
 80176ae:	2106      	movs	r1, #6
 80176b0:	220e      	movs	r2, #14
 80176b2:	f7f5 fd87 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_LTDC);
 80176b6:	482c      	ldr	r0, [pc, #176]	; (8017768 <LCD_AF_GPIOConfig+0x168>)
 80176b8:	2107      	movs	r1, #7
 80176ba:	220e      	movs	r2, #14
 80176bc:	f7f5 fd82 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_LTDC);
 80176c0:	4829      	ldr	r0, [pc, #164]	; (8017768 <LCD_AF_GPIOConfig+0x168>)
 80176c2:	210a      	movs	r1, #10
 80176c4:	220e      	movs	r2, #14
 80176c6:	f7f5 fd7d 	bl	800d1c4 <GPIO_PinAFConfig>
  
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_10;
 80176ca:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80176ce:	603b      	str	r3, [r7, #0]
                             
  GPIO_Init(GPIOC, &GPIO_InitStruct);
 80176d0:	463b      	mov	r3, r7
 80176d2:	4825      	ldr	r0, [pc, #148]	; (8017768 <LCD_AF_GPIOConfig+0x168>)
 80176d4:	4619      	mov	r1, r3
 80176d6:	f7f5 fc07 	bl	800cee8 <GPIO_Init>

 /* GPIOD configuration */
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource3, GPIO_AF_LTDC);
 80176da:	4824      	ldr	r0, [pc, #144]	; (801776c <LCD_AF_GPIOConfig+0x16c>)
 80176dc:	2103      	movs	r1, #3
 80176de:	220e      	movs	r2, #14
 80176e0:	f7f5 fd70 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource6, GPIO_AF_LTDC);
 80176e4:	4821      	ldr	r0, [pc, #132]	; (801776c <LCD_AF_GPIOConfig+0x16c>)
 80176e6:	2106      	movs	r1, #6
 80176e8:	220e      	movs	r2, #14
 80176ea:	f7f5 fd6b 	bl	800d1c4 <GPIO_PinAFConfig>
  
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_6;
 80176ee:	2348      	movs	r3, #72	; 0x48
 80176f0:	603b      	str	r3, [r7, #0]
                             
  GPIO_Init(GPIOD, &GPIO_InitStruct);
 80176f2:	463b      	mov	r3, r7
 80176f4:	481d      	ldr	r0, [pc, #116]	; (801776c <LCD_AF_GPIOConfig+0x16c>)
 80176f6:	4619      	mov	r1, r3
 80176f8:	f7f5 fbf6 	bl	800cee8 <GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource10, GPIO_AF_LTDC);
 80176fc:	481c      	ldr	r0, [pc, #112]	; (8017770 <LCD_AF_GPIOConfig+0x170>)
 80176fe:	210a      	movs	r1, #10
 8017700:	220e      	movs	r2, #14
 8017702:	f7f5 fd5f 	bl	800d1c4 <GPIO_PinAFConfig>
  
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_10;
 8017706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801770a:	603b      	str	r3, [r7, #0]
                             
  GPIO_Init(GPIOF, &GPIO_InitStruct);     
 801770c:	463b      	mov	r3, r7
 801770e:	4818      	ldr	r0, [pc, #96]	; (8017770 <LCD_AF_GPIOConfig+0x170>)
 8017710:	4619      	mov	r1, r3
 8017712:	f7f5 fbe9 	bl	800cee8 <GPIO_Init>

 /* GPIOG configuration */  
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource6, GPIO_AF_LTDC);
 8017716:	4817      	ldr	r0, [pc, #92]	; (8017774 <LCD_AF_GPIOConfig+0x174>)
 8017718:	2106      	movs	r1, #6
 801771a:	220e      	movs	r2, #14
 801771c:	f7f5 fd52 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource7, GPIO_AF_LTDC);
 8017720:	4814      	ldr	r0, [pc, #80]	; (8017774 <LCD_AF_GPIOConfig+0x174>)
 8017722:	2107      	movs	r1, #7
 8017724:	220e      	movs	r2, #14
 8017726:	f7f5 fd4d 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource10, 0x09);
 801772a:	4812      	ldr	r0, [pc, #72]	; (8017774 <LCD_AF_GPIOConfig+0x174>)
 801772c:	210a      	movs	r1, #10
 801772e:	2209      	movs	r2, #9
 8017730:	f7f5 fd48 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource11, GPIO_AF_LTDC);
 8017734:	480f      	ldr	r0, [pc, #60]	; (8017774 <LCD_AF_GPIOConfig+0x174>)
 8017736:	210b      	movs	r1, #11
 8017738:	220e      	movs	r2, #14
 801773a:	f7f5 fd43 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource12, 0x09);
 801773e:	480d      	ldr	r0, [pc, #52]	; (8017774 <LCD_AF_GPIOConfig+0x174>)
 8017740:	210c      	movs	r1, #12
 8017742:	2209      	movs	r2, #9
 8017744:	f7f5 fd3e 	bl	800d1c4 <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_10 | \
 8017748:	f44f 53e6 	mov.w	r3, #7360	; 0x1cc0
 801774c:	603b      	str	r3, [r7, #0]
                             GPIO_Pin_11 | GPIO_Pin_12;
  
  GPIO_Init(GPIOG, &GPIO_InitStruct);
 801774e:	463b      	mov	r3, r7
 8017750:	4808      	ldr	r0, [pc, #32]	; (8017774 <LCD_AF_GPIOConfig+0x174>)
 8017752:	4619      	mov	r1, r3
 8017754:	f7f5 fbc8 	bl	800cee8 <GPIO_Init>
 
}
 8017758:	3708      	adds	r7, #8
 801775a:	46bd      	mov	sp, r7
 801775c:	bd80      	pop	{r7, pc}
 801775e:	bf00      	nop
 8017760:	40020000 	.word	0x40020000
 8017764:	40020400 	.word	0x40020400
 8017768:	40020800 	.word	0x40020800
 801776c:	40020c00 	.word	0x40020c00
 8017770:	40021400 	.word	0x40021400
 8017774:	40021800 	.word	0x40021800

08017778 <PutPixel>:
  * @param  x: pixel x.
  * @param  y: pixel y.  
  * @retval None
  */
static void PutPixel(int16_t x, int16_t y)
{ 
 8017778:	b580      	push	{r7, lr}
 801777a:	b082      	sub	sp, #8
 801777c:	af00      	add	r7, sp, #0
 801777e:	4602      	mov	r2, r0
 8017780:	460b      	mov	r3, r1
 8017782:	80fa      	strh	r2, [r7, #6]
 8017784:	80bb      	strh	r3, [r7, #4]
  if(x < 0 || x > 239 || y < 0 || y > 319)
 8017786:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801778a:	2b00      	cmp	r3, #0
 801778c:	db0c      	blt.n	80177a8 <PutPixel+0x30>
 801778e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017792:	2bef      	cmp	r3, #239	; 0xef
 8017794:	dc08      	bgt.n	80177a8 <PutPixel+0x30>
 8017796:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801779a:	2b00      	cmp	r3, #0
 801779c:	db04      	blt.n	80177a8 <PutPixel+0x30>
 801779e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80177a2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80177a6:	db00      	blt.n	80177aa <PutPixel+0x32>
  {
    return;  
 80177a8:	e007      	b.n	80177ba <PutPixel+0x42>
  }
  LCD_DrawLine(x, y, 1, LCD_DIR_HORIZONTAL);
 80177aa:	88fa      	ldrh	r2, [r7, #6]
 80177ac:	88bb      	ldrh	r3, [r7, #4]
 80177ae:	4610      	mov	r0, r2
 80177b0:	4619      	mov	r1, r3
 80177b2:	2201      	movs	r2, #1
 80177b4:	2300      	movs	r3, #0
 80177b6:	f7fe fb55 	bl	8015e64 <LCD_DrawLine>
}
 80177ba:	3708      	adds	r7, #8
 80177bc:	46bd      	mov	sp, r7
 80177be:	bd80      	pop	{r7, pc}

080177c0 <delay>:
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
 80177c0:	b480      	push	{r7}
 80177c2:	b085      	sub	sp, #20
 80177c4:	af00      	add	r7, sp, #0
 80177c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 80177c8:	2300      	movs	r3, #0
 80177ca:	60fb      	str	r3, [r7, #12]
  for(index = nCount; index != 0; index--)
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	60fb      	str	r3, [r7, #12]
 80177d0:	e002      	b.n	80177d8 <delay+0x18>
 80177d2:	68fb      	ldr	r3, [r7, #12]
 80177d4:	3b01      	subs	r3, #1
 80177d6:	60fb      	str	r3, [r7, #12]
 80177d8:	68fb      	ldr	r3, [r7, #12]
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d1f9      	bne.n	80177d2 <delay+0x12>
  {
  }
}
 80177de:	3714      	adds	r7, #20
 80177e0:	46bd      	mov	sp, r7
 80177e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177e6:	4770      	bx	lr

080177e8 <SDRAM_Init>:
  *         on the SDRAM.
  * @param  None
  * @retval None
  */
void SDRAM_Init(void)
{
 80177e8:	b580      	push	{r7, lr}
 80177ea:	b092      	sub	sp, #72	; 0x48
 80177ec:	af00      	add	r7, sp, #0
  FMC_SDRAMInitTypeDef  FMC_SDRAMInitStructure;
  FMC_SDRAMTimingInitTypeDef  FMC_SDRAMTimingInitStructure; 
  
  /* GPIO configuration for FMC SDRAM bank */
  SDRAM_GPIOConfig();
 80177ee:	f000 f835 	bl	801785c <SDRAM_GPIOConfig>
  
  /* Enable FMC clock */
  RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FMC, ENABLE);
 80177f2:	2001      	movs	r0, #1
 80177f4:	2101      	movs	r1, #1
 80177f6:	f7f8 fa5b 	bl	800fcb0 <RCC_AHB3PeriphClockCmd>
 
/* FMC Configuration ---------------------------------------------------------*/
/* FMC SDRAM Bank configuration */   
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  FMC_SDRAMTimingInitStructure.FMC_LoadToActiveDelay    = 2;      
 80177fa:	2302      	movs	r3, #2
 80177fc:	603b      	str	r3, [r7, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  FMC_SDRAMTimingInitStructure.FMC_ExitSelfRefreshDelay = 7;
 80177fe:	2307      	movs	r3, #7
 8017800:	607b      	str	r3, [r7, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  FMC_SDRAMTimingInitStructure.FMC_SelfRefreshTime      = 4;
 8017802:	2304      	movs	r3, #4
 8017804:	60bb      	str	r3, [r7, #8]
  /* TRC:  min=70 (7x11.11ns) */        
  FMC_SDRAMTimingInitStructure.FMC_RowCycleDelay        = 7;         
 8017806:	2307      	movs	r3, #7
 8017808:	60fb      	str	r3, [r7, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  FMC_SDRAMTimingInitStructure.FMC_WriteRecoveryTime    = 2;      
 801780a:	2302      	movs	r3, #2
 801780c:	613b      	str	r3, [r7, #16]
  /* TRP:  20ns => 2x11.11ns */
  FMC_SDRAMTimingInitStructure.FMC_RPDelay              = 2;                
 801780e:	2302      	movs	r3, #2
 8017810:	617b      	str	r3, [r7, #20]
  /* TRCD: 20ns => 2x11.11ns */
  FMC_SDRAMTimingInitStructure.FMC_RCDDelay             = 2;
 8017812:	2302      	movs	r3, #2
 8017814:	61bb      	str	r3, [r7, #24]

/* FMC SDRAM control configuration */
  FMC_SDRAMInitStructure.FMC_Bank = FMC_Bank2_SDRAM;
 8017816:	2301      	movs	r3, #1
 8017818:	61fb      	str	r3, [r7, #28]
  /* Row addressing: [7:0] */
  FMC_SDRAMInitStructure.FMC_ColumnBitsNumber = FMC_ColumnBits_Number_8b;
 801781a:	2300      	movs	r3, #0
 801781c:	623b      	str	r3, [r7, #32]
  /* Column addressing: [11:0] */
  FMC_SDRAMInitStructure.FMC_RowBitsNumber = FMC_RowBits_Number_12b;
 801781e:	2304      	movs	r3, #4
 8017820:	627b      	str	r3, [r7, #36]	; 0x24
  FMC_SDRAMInitStructure.FMC_SDMemoryDataWidth = SDRAM_MEMORY_WIDTH;
 8017822:	2310      	movs	r3, #16
 8017824:	62bb      	str	r3, [r7, #40]	; 0x28
  FMC_SDRAMInitStructure.FMC_InternalBankNumber = FMC_InternalBank_Number_4;
 8017826:	2340      	movs	r3, #64	; 0x40
 8017828:	62fb      	str	r3, [r7, #44]	; 0x2c
  FMC_SDRAMInitStructure.FMC_CASLatency = SDRAM_CAS_LATENCY; 
 801782a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 801782e:	633b      	str	r3, [r7, #48]	; 0x30
  FMC_SDRAMInitStructure.FMC_WriteProtection = FMC_Write_Protection_Disable;
 8017830:	2300      	movs	r3, #0
 8017832:	637b      	str	r3, [r7, #52]	; 0x34
  FMC_SDRAMInitStructure.FMC_SDClockPeriod = SDCLOCK_PERIOD;  
 8017834:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017838:	63bb      	str	r3, [r7, #56]	; 0x38
  FMC_SDRAMInitStructure.FMC_ReadBurst = SDRAM_READBURST;
 801783a:	2300      	movs	r3, #0
 801783c:	63fb      	str	r3, [r7, #60]	; 0x3c
  FMC_SDRAMInitStructure.FMC_ReadPipeDelay = FMC_ReadPipe_Delay_1;
 801783e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8017842:	643b      	str	r3, [r7, #64]	; 0x40
  FMC_SDRAMInitStructure.FMC_SDRAMTimingStruct = &FMC_SDRAMTimingInitStructure;
 8017844:	463b      	mov	r3, r7
 8017846:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* FMC SDRAM bank initialization */
  FMC_SDRAMInit(&FMC_SDRAMInitStructure); 
 8017848:	f107 031c 	add.w	r3, r7, #28
 801784c:	4618      	mov	r0, r3
 801784e:	f7f4 ffa5 	bl	800c79c <FMC_SDRAMInit>
  
  /* FMC SDRAM device initialization sequence */
  SDRAM_InitSequence(); 
 8017852:	f000 f90d 	bl	8017a70 <SDRAM_InitSequence>
  
}
 8017856:	3748      	adds	r7, #72	; 0x48
 8017858:	46bd      	mov	sp, r7
 801785a:	bd80      	pop	{r7, pc}

0801785c <SDRAM_GPIOConfig>:
  * @brief  Configures all SDRAM memory I/Os pins. 
  * @param  None. 
  * @retval None.
  */
void SDRAM_GPIOConfig(void)
{
 801785c:	b580      	push	{r7, lr}
 801785e:	b082      	sub	sp, #8
 8017860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable GPIOs clock */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD |
 8017862:	207e      	movs	r0, #126	; 0x7e
 8017864:	2101      	movs	r1, #1
 8017866:	f7f8 f9e7 	bl	800fc38 <RCC_AHB1PeriphClockCmd>
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 801786a:	2302      	movs	r3, #2
 801786c:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 801786e:	2302      	movs	r3, #2
 8017870:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8017872:	2300      	movs	r3, #0
 8017874:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8017876:	2300      	movs	r3, #0
 8017878:	71fb      	strb	r3, [r7, #7]

  /* GPIOB configuration */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource5 , GPIO_AF_FMC);
 801787a:	4877      	ldr	r0, [pc, #476]	; (8017a58 <SDRAM_GPIOConfig+0x1fc>)
 801787c:	2105      	movs	r1, #5
 801787e:	220c      	movs	r2, #12
 8017880:	f7f5 fca0 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6 , GPIO_AF_FMC);
 8017884:	4874      	ldr	r0, [pc, #464]	; (8017a58 <SDRAM_GPIOConfig+0x1fc>)
 8017886:	2106      	movs	r1, #6
 8017888:	220c      	movs	r2, #12
 801788a:	f7f5 fc9b 	bl	800d1c4 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5  | GPIO_Pin_6;      
 801788e:	2360      	movs	r3, #96	; 0x60
 8017890:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8017892:	463b      	mov	r3, r7
 8017894:	4870      	ldr	r0, [pc, #448]	; (8017a58 <SDRAM_GPIOConfig+0x1fc>)
 8017896:	4619      	mov	r1, r3
 8017898:	f7f5 fb26 	bl	800cee8 <GPIO_Init>

  /* GPIOC configuration */
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource0 , GPIO_AF_FMC);
 801789c:	486f      	ldr	r0, [pc, #444]	; (8017a5c <SDRAM_GPIOConfig+0x200>)
 801789e:	2100      	movs	r1, #0
 80178a0:	220c      	movs	r2, #12
 80178a2:	f7f5 fc8f 	bl	800d1c4 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;      
 80178a6:	2301      	movs	r3, #1
 80178a8:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80178aa:	463b      	mov	r3, r7
 80178ac:	486b      	ldr	r0, [pc, #428]	; (8017a5c <SDRAM_GPIOConfig+0x200>)
 80178ae:	4619      	mov	r1, r3
 80178b0:	f7f5 fb1a 	bl	800cee8 <GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_FMC);
 80178b4:	486a      	ldr	r0, [pc, #424]	; (8017a60 <SDRAM_GPIOConfig+0x204>)
 80178b6:	2100      	movs	r1, #0
 80178b8:	220c      	movs	r2, #12
 80178ba:	f7f5 fc83 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_FMC);
 80178be:	4868      	ldr	r0, [pc, #416]	; (8017a60 <SDRAM_GPIOConfig+0x204>)
 80178c0:	2101      	movs	r1, #1
 80178c2:	220c      	movs	r2, #12
 80178c4:	f7f5 fc7e 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_FMC);
 80178c8:	4865      	ldr	r0, [pc, #404]	; (8017a60 <SDRAM_GPIOConfig+0x204>)
 80178ca:	2108      	movs	r1, #8
 80178cc:	220c      	movs	r2, #12
 80178ce:	f7f5 fc79 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_FMC);
 80178d2:	4863      	ldr	r0, [pc, #396]	; (8017a60 <SDRAM_GPIOConfig+0x204>)
 80178d4:	2109      	movs	r1, #9
 80178d6:	220c      	movs	r2, #12
 80178d8:	f7f5 fc74 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_FMC);
 80178dc:	4860      	ldr	r0, [pc, #384]	; (8017a60 <SDRAM_GPIOConfig+0x204>)
 80178de:	210a      	movs	r1, #10
 80178e0:	220c      	movs	r2, #12
 80178e2:	f7f5 fc6f 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_FMC);
 80178e6:	485e      	ldr	r0, [pc, #376]	; (8017a60 <SDRAM_GPIOConfig+0x204>)
 80178e8:	210e      	movs	r1, #14
 80178ea:	220c      	movs	r2, #12
 80178ec:	f7f5 fc6a 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_FMC);
 80178f0:	485b      	ldr	r0, [pc, #364]	; (8017a60 <SDRAM_GPIOConfig+0x204>)
 80178f2:	210f      	movs	r1, #15
 80178f4:	220c      	movs	r2, #12
 80178f6:	f7f5 fc65 	bl	800d1c4 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1  | GPIO_Pin_8 |
 80178fa:	f24c 7303 	movw	r3, #50947	; 0xc703
 80178fe:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_14 |
                                GPIO_Pin_15;

  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8017900:	463b      	mov	r3, r7
 8017902:	4857      	ldr	r0, [pc, #348]	; (8017a60 <SDRAM_GPIOConfig+0x204>)
 8017904:	4619      	mov	r1, r3
 8017906:	f7f5 faef 	bl	800cee8 <GPIO_Init>

  /* GPIOE configuration */
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource0 , GPIO_AF_FMC);
 801790a:	4856      	ldr	r0, [pc, #344]	; (8017a64 <SDRAM_GPIOConfig+0x208>)
 801790c:	2100      	movs	r1, #0
 801790e:	220c      	movs	r2, #12
 8017910:	f7f5 fc58 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource1 , GPIO_AF_FMC);
 8017914:	4853      	ldr	r0, [pc, #332]	; (8017a64 <SDRAM_GPIOConfig+0x208>)
 8017916:	2101      	movs	r1, #1
 8017918:	220c      	movs	r2, #12
 801791a:	f7f5 fc53 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource7 , GPIO_AF_FMC);
 801791e:	4851      	ldr	r0, [pc, #324]	; (8017a64 <SDRAM_GPIOConfig+0x208>)
 8017920:	2107      	movs	r1, #7
 8017922:	220c      	movs	r2, #12
 8017924:	f7f5 fc4e 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource8 , GPIO_AF_FMC);
 8017928:	484e      	ldr	r0, [pc, #312]	; (8017a64 <SDRAM_GPIOConfig+0x208>)
 801792a:	2108      	movs	r1, #8
 801792c:	220c      	movs	r2, #12
 801792e:	f7f5 fc49 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource9 , GPIO_AF_FMC);
 8017932:	484c      	ldr	r0, [pc, #304]	; (8017a64 <SDRAM_GPIOConfig+0x208>)
 8017934:	2109      	movs	r1, #9
 8017936:	220c      	movs	r2, #12
 8017938:	f7f5 fc44 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource10 , GPIO_AF_FMC);
 801793c:	4849      	ldr	r0, [pc, #292]	; (8017a64 <SDRAM_GPIOConfig+0x208>)
 801793e:	210a      	movs	r1, #10
 8017940:	220c      	movs	r2, #12
 8017942:	f7f5 fc3f 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource11 , GPIO_AF_FMC);
 8017946:	4847      	ldr	r0, [pc, #284]	; (8017a64 <SDRAM_GPIOConfig+0x208>)
 8017948:	210b      	movs	r1, #11
 801794a:	220c      	movs	r2, #12
 801794c:	f7f5 fc3a 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource12 , GPIO_AF_FMC);
 8017950:	4844      	ldr	r0, [pc, #272]	; (8017a64 <SDRAM_GPIOConfig+0x208>)
 8017952:	210c      	movs	r1, #12
 8017954:	220c      	movs	r2, #12
 8017956:	f7f5 fc35 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource13 , GPIO_AF_FMC);
 801795a:	4842      	ldr	r0, [pc, #264]	; (8017a64 <SDRAM_GPIOConfig+0x208>)
 801795c:	210d      	movs	r1, #13
 801795e:	220c      	movs	r2, #12
 8017960:	f7f5 fc30 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource14 , GPIO_AF_FMC);
 8017964:	483f      	ldr	r0, [pc, #252]	; (8017a64 <SDRAM_GPIOConfig+0x208>)
 8017966:	210e      	movs	r1, #14
 8017968:	220c      	movs	r2, #12
 801796a:	f7f5 fc2b 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource15 , GPIO_AF_FMC);
 801796e:	483d      	ldr	r0, [pc, #244]	; (8017a64 <SDRAM_GPIOConfig+0x208>)
 8017970:	210f      	movs	r1, #15
 8017972:	220c      	movs	r2, #12
 8017974:	f7f5 fc26 	bl	800d1c4 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  | GPIO_Pin_1  | GPIO_Pin_7 |
 8017978:	f64f 7383 	movw	r3, #65411	; 0xff83
 801797c:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_8  | GPIO_Pin_9  | GPIO_Pin_10 |
                                GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 |
                                GPIO_Pin_14 | GPIO_Pin_15;

  GPIO_Init(GPIOE, &GPIO_InitStructure);
 801797e:	463b      	mov	r3, r7
 8017980:	4838      	ldr	r0, [pc, #224]	; (8017a64 <SDRAM_GPIOConfig+0x208>)
 8017982:	4619      	mov	r1, r3
 8017984:	f7f5 fab0 	bl	800cee8 <GPIO_Init>

  /* GPIOF configuration */
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource0 , GPIO_AF_FMC);
 8017988:	4837      	ldr	r0, [pc, #220]	; (8017a68 <SDRAM_GPIOConfig+0x20c>)
 801798a:	2100      	movs	r1, #0
 801798c:	220c      	movs	r2, #12
 801798e:	f7f5 fc19 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource1 , GPIO_AF_FMC);
 8017992:	4835      	ldr	r0, [pc, #212]	; (8017a68 <SDRAM_GPIOConfig+0x20c>)
 8017994:	2101      	movs	r1, #1
 8017996:	220c      	movs	r2, #12
 8017998:	f7f5 fc14 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource2 , GPIO_AF_FMC);
 801799c:	4832      	ldr	r0, [pc, #200]	; (8017a68 <SDRAM_GPIOConfig+0x20c>)
 801799e:	2102      	movs	r1, #2
 80179a0:	220c      	movs	r2, #12
 80179a2:	f7f5 fc0f 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource3 , GPIO_AF_FMC);
 80179a6:	4830      	ldr	r0, [pc, #192]	; (8017a68 <SDRAM_GPIOConfig+0x20c>)
 80179a8:	2103      	movs	r1, #3
 80179aa:	220c      	movs	r2, #12
 80179ac:	f7f5 fc0a 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource4 , GPIO_AF_FMC);
 80179b0:	482d      	ldr	r0, [pc, #180]	; (8017a68 <SDRAM_GPIOConfig+0x20c>)
 80179b2:	2104      	movs	r1, #4
 80179b4:	220c      	movs	r2, #12
 80179b6:	f7f5 fc05 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource5 , GPIO_AF_FMC);
 80179ba:	482b      	ldr	r0, [pc, #172]	; (8017a68 <SDRAM_GPIOConfig+0x20c>)
 80179bc:	2105      	movs	r1, #5
 80179be:	220c      	movs	r2, #12
 80179c0:	f7f5 fc00 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource11 , GPIO_AF_FMC);
 80179c4:	4828      	ldr	r0, [pc, #160]	; (8017a68 <SDRAM_GPIOConfig+0x20c>)
 80179c6:	210b      	movs	r1, #11
 80179c8:	220c      	movs	r2, #12
 80179ca:	f7f5 fbfb 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource12 , GPIO_AF_FMC);
 80179ce:	4826      	ldr	r0, [pc, #152]	; (8017a68 <SDRAM_GPIOConfig+0x20c>)
 80179d0:	210c      	movs	r1, #12
 80179d2:	220c      	movs	r2, #12
 80179d4:	f7f5 fbf6 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource13 , GPIO_AF_FMC);
 80179d8:	4823      	ldr	r0, [pc, #140]	; (8017a68 <SDRAM_GPIOConfig+0x20c>)
 80179da:	210d      	movs	r1, #13
 80179dc:	220c      	movs	r2, #12
 80179de:	f7f5 fbf1 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource14 , GPIO_AF_FMC);
 80179e2:	4821      	ldr	r0, [pc, #132]	; (8017a68 <SDRAM_GPIOConfig+0x20c>)
 80179e4:	210e      	movs	r1, #14
 80179e6:	220c      	movs	r2, #12
 80179e8:	f7f5 fbec 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource15 , GPIO_AF_FMC);
 80179ec:	481e      	ldr	r0, [pc, #120]	; (8017a68 <SDRAM_GPIOConfig+0x20c>)
 80179ee:	210f      	movs	r1, #15
 80179f0:	220c      	movs	r2, #12
 80179f2:	f7f5 fbe7 	bl	800d1c4 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  | GPIO_Pin_1 | GPIO_Pin_2 | 
 80179f6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80179fa:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_3  | GPIO_Pin_4 | GPIO_Pin_5 |
                                GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 |
                                GPIO_Pin_14 | GPIO_Pin_15;      

  GPIO_Init(GPIOF, &GPIO_InitStructure);
 80179fc:	463b      	mov	r3, r7
 80179fe:	481a      	ldr	r0, [pc, #104]	; (8017a68 <SDRAM_GPIOConfig+0x20c>)
 8017a00:	4619      	mov	r1, r3
 8017a02:	f7f5 fa71 	bl	800cee8 <GPIO_Init>

  /* GPIOG configuration */
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource0 , GPIO_AF_FMC);
 8017a06:	4819      	ldr	r0, [pc, #100]	; (8017a6c <SDRAM_GPIOConfig+0x210>)
 8017a08:	2100      	movs	r1, #0
 8017a0a:	220c      	movs	r2, #12
 8017a0c:	f7f5 fbda 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource1 , GPIO_AF_FMC);
 8017a10:	4816      	ldr	r0, [pc, #88]	; (8017a6c <SDRAM_GPIOConfig+0x210>)
 8017a12:	2101      	movs	r1, #1
 8017a14:	220c      	movs	r2, #12
 8017a16:	f7f5 fbd5 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource4 , GPIO_AF_FMC);
 8017a1a:	4814      	ldr	r0, [pc, #80]	; (8017a6c <SDRAM_GPIOConfig+0x210>)
 8017a1c:	2104      	movs	r1, #4
 8017a1e:	220c      	movs	r2, #12
 8017a20:	f7f5 fbd0 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource5 , GPIO_AF_FMC);
 8017a24:	4811      	ldr	r0, [pc, #68]	; (8017a6c <SDRAM_GPIOConfig+0x210>)
 8017a26:	2105      	movs	r1, #5
 8017a28:	220c      	movs	r2, #12
 8017a2a:	f7f5 fbcb 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource8 , GPIO_AF_FMC);
 8017a2e:	480f      	ldr	r0, [pc, #60]	; (8017a6c <SDRAM_GPIOConfig+0x210>)
 8017a30:	2108      	movs	r1, #8
 8017a32:	220c      	movs	r2, #12
 8017a34:	f7f5 fbc6 	bl	800d1c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource15 , GPIO_AF_FMC);
 8017a38:	480c      	ldr	r0, [pc, #48]	; (8017a6c <SDRAM_GPIOConfig+0x210>)
 8017a3a:	210f      	movs	r1, #15
 8017a3c:	220c      	movs	r2, #12
 8017a3e:	f7f5 fbc1 	bl	800d1c4 <GPIO_PinAFConfig>
  

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_4 |
 8017a42:	f248 1333 	movw	r3, #33075	; 0x8133
 8017a46:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_5 | GPIO_Pin_8 | GPIO_Pin_15;

  GPIO_Init(GPIOG, &GPIO_InitStructure);    
 8017a48:	463b      	mov	r3, r7
 8017a4a:	4808      	ldr	r0, [pc, #32]	; (8017a6c <SDRAM_GPIOConfig+0x210>)
 8017a4c:	4619      	mov	r1, r3
 8017a4e:	f7f5 fa4b 	bl	800cee8 <GPIO_Init>
}
 8017a52:	3708      	adds	r7, #8
 8017a54:	46bd      	mov	sp, r7
 8017a56:	bd80      	pop	{r7, pc}
 8017a58:	40020400 	.word	0x40020400
 8017a5c:	40020800 	.word	0x40020800
 8017a60:	40020c00 	.word	0x40020c00
 8017a64:	40021000 	.word	0x40021000
 8017a68:	40021400 	.word	0x40021400
 8017a6c:	40021800 	.word	0x40021800

08017a70 <SDRAM_InitSequence>:
  * @brief  Executes the SDRAM memory initialization sequence. 
  * @param  None. 
  * @retval None.
  */
void SDRAM_InitSequence(void)
{
 8017a70:	b580      	push	{r7, lr}
 8017a72:	b086      	sub	sp, #24
 8017a74:	af00      	add	r7, sp, #0
  FMC_SDRAMCommandTypeDef FMC_SDRAMCommandStructure;
  uint32_t tmpr = 0;
 8017a76:	2300      	movs	r3, #0
 8017a78:	617b      	str	r3, [r7, #20]
  
/* Step 3 --------------------------------------------------------------------*/
  /* Configure a clock configuration enable command */
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_CLK_Enabled;
 8017a7a:	2301      	movs	r3, #1
 8017a7c:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 8017a7e:	2308      	movs	r3, #8
 8017a80:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 1;
 8017a82:	2301      	movs	r3, #1
 8017a84:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 8017a86:	2300      	movs	r3, #0
 8017a88:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8017a8a:	bf00      	nop
 8017a8c:	2001      	movs	r0, #1
 8017a8e:	2120      	movs	r1, #32
 8017a90:	f7f5 f866 	bl	800cb60 <FMC_GetFlagStatus>
 8017a94:	4603      	mov	r3, r0
 8017a96:	2b00      	cmp	r3, #0
 8017a98:	d1f8      	bne.n	8017a8c <SDRAM_InitSequence+0x1c>
  {
  }
  /* Send the command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);  
 8017a9a:	1d3b      	adds	r3, r7, #4
 8017a9c:	4618      	mov	r0, r3
 8017a9e:	f7f4 ff6f 	bl	800c980 <FMC_SDRAMCmdConfig>
  
/* Step 4 --------------------------------------------------------------------*/
  /* Insert 100 ms delay */
  __Delay(10);
 8017aa2:	200a      	movs	r0, #10
 8017aa4:	f000 f8aa 	bl	8017bfc <delay>
    
/* Step 5 --------------------------------------------------------------------*/
  /* Configure a PALL (precharge all) command */ 
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_PALL;
 8017aa8:	2302      	movs	r3, #2
 8017aaa:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 8017aac:	2308      	movs	r3, #8
 8017aae:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 1;
 8017ab0:	2301      	movs	r3, #1
 8017ab2:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 8017ab4:	2300      	movs	r3, #0
 8017ab6:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8017ab8:	bf00      	nop
 8017aba:	2001      	movs	r0, #1
 8017abc:	2120      	movs	r1, #32
 8017abe:	f7f5 f84f 	bl	800cb60 <FMC_GetFlagStatus>
 8017ac2:	4603      	mov	r3, r0
 8017ac4:	2b00      	cmp	r3, #0
 8017ac6:	d1f8      	bne.n	8017aba <SDRAM_InitSequence+0x4a>
  {
  }
  /* Send the command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8017ac8:	1d3b      	adds	r3, r7, #4
 8017aca:	4618      	mov	r0, r3
 8017acc:	f7f4 ff58 	bl	800c980 <FMC_SDRAMCmdConfig>
  
/* Step 6 --------------------------------------------------------------------*/
  /* Configure a Auto-Refresh command */ 
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_AutoRefresh;
 8017ad0:	2303      	movs	r3, #3
 8017ad2:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 8017ad4:	2308      	movs	r3, #8
 8017ad6:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 4;
 8017ad8:	2304      	movs	r3, #4
 8017ada:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 8017adc:	2300      	movs	r3, #0
 8017ade:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8017ae0:	bf00      	nop
 8017ae2:	2001      	movs	r0, #1
 8017ae4:	2120      	movs	r1, #32
 8017ae6:	f7f5 f83b 	bl	800cb60 <FMC_GetFlagStatus>
 8017aea:	4603      	mov	r3, r0
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	d1f8      	bne.n	8017ae2 <SDRAM_InitSequence+0x72>
  {
  }
  /* Send the  first command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8017af0:	1d3b      	adds	r3, r7, #4
 8017af2:	4618      	mov	r0, r3
 8017af4:	f7f4 ff44 	bl	800c980 <FMC_SDRAMCmdConfig>
  
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8017af8:	bf00      	nop
 8017afa:	2001      	movs	r0, #1
 8017afc:	2120      	movs	r1, #32
 8017afe:	f7f5 f82f 	bl	800cb60 <FMC_GetFlagStatus>
 8017b02:	4603      	mov	r3, r0
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d1f8      	bne.n	8017afa <SDRAM_InitSequence+0x8a>
  {
  }
  /* Send the second command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8017b08:	1d3b      	adds	r3, r7, #4
 8017b0a:	4618      	mov	r0, r3
 8017b0c:	f7f4 ff38 	bl	800c980 <FMC_SDRAMCmdConfig>
  
/* Step 7 --------------------------------------------------------------------*/
  /* Program the external memory mode register */
  tmpr = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_2          |
 8017b10:	f240 2331 	movw	r3, #561	; 0x231
 8017b14:	617b      	str	r3, [r7, #20]
                   SDRAM_MODEREG_CAS_LATENCY_3           |
                   SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                   SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  /* Configure a load Mode register command*/ 
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_LoadMode;
 8017b16:	2304      	movs	r3, #4
 8017b18:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 8017b1a:	2308      	movs	r3, #8
 8017b1c:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 1;
 8017b1e:	2301      	movs	r3, #1
 8017b20:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = tmpr;
 8017b22:	697b      	ldr	r3, [r7, #20]
 8017b24:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8017b26:	bf00      	nop
 8017b28:	2001      	movs	r0, #1
 8017b2a:	2120      	movs	r1, #32
 8017b2c:	f7f5 f818 	bl	800cb60 <FMC_GetFlagStatus>
 8017b30:	4603      	mov	r3, r0
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d1f8      	bne.n	8017b28 <SDRAM_InitSequence+0xb8>
  {
  }
  /* Send the command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8017b36:	1d3b      	adds	r3, r7, #4
 8017b38:	4618      	mov	r0, r3
 8017b3a:	f7f4 ff21 	bl	800c980 <FMC_SDRAMCmdConfig>
/* Step 8 --------------------------------------------------------------------*/

  /* Set the refresh rate counter */
  /* (15.62 us x Freq) - 20 */
  /* Set the device refresh counter */
  FMC_SetRefreshCount(1386);
 8017b3e:	f240 506a 	movw	r0, #1386	; 0x56a
 8017b42:	f7f4 ff5b 	bl	800c9fc <FMC_SetRefreshCount>
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8017b46:	bf00      	nop
 8017b48:	2001      	movs	r0, #1
 8017b4a:	2120      	movs	r1, #32
 8017b4c:	f7f5 f808 	bl	800cb60 <FMC_GetFlagStatus>
 8017b50:	4603      	mov	r3, r0
 8017b52:	2b00      	cmp	r3, #0
 8017b54:	d1f8      	bne.n	8017b48 <SDRAM_InitSequence+0xd8>
  {
  }
}
 8017b56:	3718      	adds	r7, #24
 8017b58:	46bd      	mov	sp, r7
 8017b5a:	bd80      	pop	{r7, pc}

08017b5c <SDRAM_WriteBuffer>:
  *         written.
  * @param  uwBufferSize: number of words to write. 
  * @retval None.
  */
void SDRAM_WriteBuffer(uint32_t* pBuffer, uint32_t uwWriteAddress, uint32_t uwBufferSize)
{
 8017b5c:	b580      	push	{r7, lr}
 8017b5e:	b086      	sub	sp, #24
 8017b60:	af00      	add	r7, sp, #0
 8017b62:	60f8      	str	r0, [r7, #12]
 8017b64:	60b9      	str	r1, [r7, #8]
 8017b66:	607a      	str	r2, [r7, #4]
  __IO uint32_t write_pointer = (uint32_t)uwWriteAddress;
 8017b68:	68bb      	ldr	r3, [r7, #8]
 8017b6a:	617b      	str	r3, [r7, #20]

  /* Disable write protection */
  FMC_SDRAMWriteProtectionConfig(FMC_Bank2_SDRAM, DISABLE);
 8017b6c:	2001      	movs	r0, #1
 8017b6e:	2100      	movs	r1, #0
 8017b70:	f7f4 ff68 	bl	800ca44 <FMC_SDRAMWriteProtectionConfig>
  
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8017b74:	bf00      	nop
 8017b76:	2001      	movs	r0, #1
 8017b78:	2120      	movs	r1, #32
 8017b7a:	f7f4 fff1 	bl	800cb60 <FMC_GetFlagStatus>
 8017b7e:	4603      	mov	r3, r0
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	d1f8      	bne.n	8017b76 <SDRAM_WriteBuffer+0x1a>
  {
  }

  /* While there is data to write */
  for (; uwBufferSize != 0; uwBufferSize--) 
 8017b84:	e00e      	b.n	8017ba4 <SDRAM_WriteBuffer+0x48>
  {
    /* Transfer data to the memory */
    *(uint32_t *) (SDRAM_BANK_ADDR + write_pointer) = *pBuffer++;
 8017b86:	697b      	ldr	r3, [r7, #20]
 8017b88:	f103 4350 	add.w	r3, r3, #3489660928	; 0xd0000000
 8017b8c:	461a      	mov	r2, r3
 8017b8e:	68fb      	ldr	r3, [r7, #12]
 8017b90:	1d19      	adds	r1, r3, #4
 8017b92:	60f9      	str	r1, [r7, #12]
 8017b94:	681b      	ldr	r3, [r3, #0]
 8017b96:	6013      	str	r3, [r2, #0]

    /* Increment the address*/
    write_pointer += 4;
 8017b98:	697b      	ldr	r3, [r7, #20]
 8017b9a:	3304      	adds	r3, #4
 8017b9c:	617b      	str	r3, [r7, #20]
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
  {
  }

  /* While there is data to write */
  for (; uwBufferSize != 0; uwBufferSize--) 
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	3b01      	subs	r3, #1
 8017ba2:	607b      	str	r3, [r7, #4]
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d1ed      	bne.n	8017b86 <SDRAM_WriteBuffer+0x2a>

    /* Increment the address*/
    write_pointer += 4;
  }
    
}
 8017baa:	3718      	adds	r7, #24
 8017bac:	46bd      	mov	sp, r7
 8017bae:	bd80      	pop	{r7, pc}

08017bb0 <SDRAM_ReadBuffer>:
  *         read.
  * @param  uwBufferSize: number of words to write. 
  * @retval None.
  */
void SDRAM_ReadBuffer(uint32_t* pBuffer, uint32_t uwReadAddress, uint32_t uwBufferSize)
{
 8017bb0:	b580      	push	{r7, lr}
 8017bb2:	b086      	sub	sp, #24
 8017bb4:	af00      	add	r7, sp, #0
 8017bb6:	60f8      	str	r0, [r7, #12]
 8017bb8:	60b9      	str	r1, [r7, #8]
 8017bba:	607a      	str	r2, [r7, #4]
  __IO uint32_t write_pointer = (uint32_t)uwReadAddress;
 8017bbc:	68bb      	ldr	r3, [r7, #8]
 8017bbe:	617b      	str	r3, [r7, #20]
  
   
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8017bc0:	bf00      	nop
 8017bc2:	2001      	movs	r0, #1
 8017bc4:	2120      	movs	r1, #32
 8017bc6:	f7f4 ffcb 	bl	800cb60 <FMC_GetFlagStatus>
 8017bca:	4603      	mov	r3, r0
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d1f8      	bne.n	8017bc2 <SDRAM_ReadBuffer+0x12>
  {
  }
  
  /* Read data */
  for(; uwBufferSize != 0x00; uwBufferSize--)
 8017bd0:	e00d      	b.n	8017bee <SDRAM_ReadBuffer+0x3e>
  {
   *pBuffer++ = *(__IO uint32_t *)(SDRAM_BANK_ADDR + write_pointer );
 8017bd2:	68fb      	ldr	r3, [r7, #12]
 8017bd4:	1d1a      	adds	r2, r3, #4
 8017bd6:	60fa      	str	r2, [r7, #12]
 8017bd8:	697a      	ldr	r2, [r7, #20]
 8017bda:	f102 4250 	add.w	r2, r2, #3489660928	; 0xd0000000
 8017bde:	6812      	ldr	r2, [r2, #0]
 8017be0:	601a      	str	r2, [r3, #0]
    
   /* Increment the address*/
    write_pointer += 4;
 8017be2:	697b      	ldr	r3, [r7, #20]
 8017be4:	3304      	adds	r3, #4
 8017be6:	617b      	str	r3, [r7, #20]
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
  {
  }
  
  /* Read data */
  for(; uwBufferSize != 0x00; uwBufferSize--)
 8017be8:	687b      	ldr	r3, [r7, #4]
 8017bea:	3b01      	subs	r3, #1
 8017bec:	607b      	str	r3, [r7, #4]
 8017bee:	687b      	ldr	r3, [r7, #4]
 8017bf0:	2b00      	cmp	r3, #0
 8017bf2:	d1ee      	bne.n	8017bd2 <SDRAM_ReadBuffer+0x22>
   *pBuffer++ = *(__IO uint32_t *)(SDRAM_BANK_ADDR + write_pointer );
    
   /* Increment the address*/
    write_pointer += 4;
  } 
}
 8017bf4:	3718      	adds	r7, #24
 8017bf6:	46bd      	mov	sp, r7
 8017bf8:	bd80      	pop	{r7, pc}
 8017bfa:	bf00      	nop

08017bfc <delay>:
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
 8017bfc:	b480      	push	{r7}
 8017bfe:	b085      	sub	sp, #20
 8017c00:	af00      	add	r7, sp, #0
 8017c02:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 8017c04:	2300      	movs	r3, #0
 8017c06:	60fb      	str	r3, [r7, #12]
  for(index = (100000 * nCount); index != 0; index--)
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	4a08      	ldr	r2, [pc, #32]	; (8017c2c <delay+0x30>)
 8017c0c:	fb02 f303 	mul.w	r3, r2, r3
 8017c10:	60fb      	str	r3, [r7, #12]
 8017c12:	e002      	b.n	8017c1a <delay+0x1e>
 8017c14:	68fb      	ldr	r3, [r7, #12]
 8017c16:	3b01      	subs	r3, #1
 8017c18:	60fb      	str	r3, [r7, #12]
 8017c1a:	68fb      	ldr	r3, [r7, #12]
 8017c1c:	2b00      	cmp	r3, #0
 8017c1e:	d1f9      	bne.n	8017c14 <delay+0x18>
  {
  }
}
 8017c20:	3714      	adds	r7, #20
 8017c22:	46bd      	mov	sp, r7
 8017c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c28:	4770      	bx	lr
 8017c2a:	bf00      	nop
 8017c2c:	000186a0 	.word	0x000186a0

08017c30 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8017c30:	b580      	push	{r7, lr}
 8017c32:	af00      	add	r7, sp, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8017c34:	4b11      	ldr	r3, [pc, #68]	; (8017c7c <SystemInit+0x4c>)
 8017c36:	4a11      	ldr	r2, [pc, #68]	; (8017c7c <SystemInit+0x4c>)
 8017c38:	6812      	ldr	r2, [r2, #0]
 8017c3a:	f042 0201 	orr.w	r2, r2, #1
 8017c3e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8017c40:	4b0e      	ldr	r3, [pc, #56]	; (8017c7c <SystemInit+0x4c>)
 8017c42:	2200      	movs	r2, #0
 8017c44:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8017c46:	4a0d      	ldr	r2, [pc, #52]	; (8017c7c <SystemInit+0x4c>)
 8017c48:	4b0c      	ldr	r3, [pc, #48]	; (8017c7c <SystemInit+0x4c>)
 8017c4a:	681b      	ldr	r3, [r3, #0]
 8017c4c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8017c50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8017c54:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8017c56:	4b09      	ldr	r3, [pc, #36]	; (8017c7c <SystemInit+0x4c>)
 8017c58:	4a09      	ldr	r2, [pc, #36]	; (8017c80 <SystemInit+0x50>)
 8017c5a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8017c5c:	4b07      	ldr	r3, [pc, #28]	; (8017c7c <SystemInit+0x4c>)
 8017c5e:	4a07      	ldr	r2, [pc, #28]	; (8017c7c <SystemInit+0x4c>)
 8017c60:	6812      	ldr	r2, [r2, #0]
 8017c62:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8017c66:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8017c68:	4b04      	ldr	r3, [pc, #16]	; (8017c7c <SystemInit+0x4c>)
 8017c6a:	2200      	movs	r2, #0
 8017c6c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8017c6e:	f000 f887 	bl	8017d80 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8017c72:	4b04      	ldr	r3, [pc, #16]	; (8017c84 <SystemInit+0x54>)
 8017c74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8017c78:	609a      	str	r2, [r3, #8]
#endif
}
 8017c7a:	bd80      	pop	{r7, pc}
 8017c7c:	40023800 	.word	0x40023800
 8017c80:	24003010 	.word	0x24003010
 8017c84:	e000ed00 	.word	0xe000ed00

08017c88 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8017c88:	b480      	push	{r7}
 8017c8a:	b087      	sub	sp, #28
 8017c8c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8017c8e:	2300      	movs	r3, #0
 8017c90:	613b      	str	r3, [r7, #16]
 8017c92:	2300      	movs	r3, #0
 8017c94:	617b      	str	r3, [r7, #20]
 8017c96:	2302      	movs	r3, #2
 8017c98:	60fb      	str	r3, [r7, #12]
 8017c9a:	2300      	movs	r3, #0
 8017c9c:	60bb      	str	r3, [r7, #8]
 8017c9e:	2302      	movs	r3, #2
 8017ca0:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8017ca2:	4b32      	ldr	r3, [pc, #200]	; (8017d6c <SystemCoreClockUpdate+0xe4>)
 8017ca4:	689b      	ldr	r3, [r3, #8]
 8017ca6:	f003 030c 	and.w	r3, r3, #12
 8017caa:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8017cac:	693b      	ldr	r3, [r7, #16]
 8017cae:	2b04      	cmp	r3, #4
 8017cb0:	d007      	beq.n	8017cc2 <SystemCoreClockUpdate+0x3a>
 8017cb2:	2b08      	cmp	r3, #8
 8017cb4:	d009      	beq.n	8017cca <SystemCoreClockUpdate+0x42>
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	d13f      	bne.n	8017d3a <SystemCoreClockUpdate+0xb2>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8017cba:	4b2d      	ldr	r3, [pc, #180]	; (8017d70 <SystemCoreClockUpdate+0xe8>)
 8017cbc:	4a2d      	ldr	r2, [pc, #180]	; (8017d74 <SystemCoreClockUpdate+0xec>)
 8017cbe:	601a      	str	r2, [r3, #0]
      break;
 8017cc0:	e03f      	b.n	8017d42 <SystemCoreClockUpdate+0xba>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8017cc2:	4b2b      	ldr	r3, [pc, #172]	; (8017d70 <SystemCoreClockUpdate+0xe8>)
 8017cc4:	4a2c      	ldr	r2, [pc, #176]	; (8017d78 <SystemCoreClockUpdate+0xf0>)
 8017cc6:	601a      	str	r2, [r3, #0]
      break;
 8017cc8:	e03b      	b.n	8017d42 <SystemCoreClockUpdate+0xba>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8017cca:	4b28      	ldr	r3, [pc, #160]	; (8017d6c <SystemCoreClockUpdate+0xe4>)
 8017ccc:	685b      	ldr	r3, [r3, #4]
 8017cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8017cd2:	0d9b      	lsrs	r3, r3, #22
 8017cd4:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8017cd6:	4b25      	ldr	r3, [pc, #148]	; (8017d6c <SystemCoreClockUpdate+0xe4>)
 8017cd8:	685b      	ldr	r3, [r3, #4]
 8017cda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017cde:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8017ce0:	68bb      	ldr	r3, [r7, #8]
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	d00d      	beq.n	8017d02 <SystemCoreClockUpdate+0x7a>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8017ce6:	4a24      	ldr	r2, [pc, #144]	; (8017d78 <SystemCoreClockUpdate+0xf0>)
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	fbb2 f2f3 	udiv	r2, r2, r3
 8017cee:	4b1f      	ldr	r3, [pc, #124]	; (8017d6c <SystemCoreClockUpdate+0xe4>)
 8017cf0:	6859      	ldr	r1, [r3, #4]
 8017cf2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8017cf6:	400b      	ands	r3, r1
 8017cf8:	099b      	lsrs	r3, r3, #6
 8017cfa:	fb03 f302 	mul.w	r3, r3, r2
 8017cfe:	617b      	str	r3, [r7, #20]
 8017d00:	e00c      	b.n	8017d1c <SystemCoreClockUpdate+0x94>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8017d02:	4a1c      	ldr	r2, [pc, #112]	; (8017d74 <SystemCoreClockUpdate+0xec>)
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	fbb2 f2f3 	udiv	r2, r2, r3
 8017d0a:	4b18      	ldr	r3, [pc, #96]	; (8017d6c <SystemCoreClockUpdate+0xe4>)
 8017d0c:	6859      	ldr	r1, [r3, #4]
 8017d0e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8017d12:	400b      	ands	r3, r1
 8017d14:	099b      	lsrs	r3, r3, #6
 8017d16:	fb03 f302 	mul.w	r3, r3, r2
 8017d1a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8017d1c:	4b13      	ldr	r3, [pc, #76]	; (8017d6c <SystemCoreClockUpdate+0xe4>)
 8017d1e:	685b      	ldr	r3, [r3, #4]
 8017d20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8017d24:	0c1b      	lsrs	r3, r3, #16
 8017d26:	3301      	adds	r3, #1
 8017d28:	005b      	lsls	r3, r3, #1
 8017d2a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8017d2c:	697a      	ldr	r2, [r7, #20]
 8017d2e:	68fb      	ldr	r3, [r7, #12]
 8017d30:	fbb2 f2f3 	udiv	r2, r2, r3
 8017d34:	4b0e      	ldr	r3, [pc, #56]	; (8017d70 <SystemCoreClockUpdate+0xe8>)
 8017d36:	601a      	str	r2, [r3, #0]
      break;
 8017d38:	e003      	b.n	8017d42 <SystemCoreClockUpdate+0xba>
    default:
      SystemCoreClock = HSI_VALUE;
 8017d3a:	4b0d      	ldr	r3, [pc, #52]	; (8017d70 <SystemCoreClockUpdate+0xe8>)
 8017d3c:	4a0d      	ldr	r2, [pc, #52]	; (8017d74 <SystemCoreClockUpdate+0xec>)
 8017d3e:	601a      	str	r2, [r3, #0]
      break;
 8017d40:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8017d42:	4b0a      	ldr	r3, [pc, #40]	; (8017d6c <SystemCoreClockUpdate+0xe4>)
 8017d44:	689b      	ldr	r3, [r3, #8]
 8017d46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017d4a:	091b      	lsrs	r3, r3, #4
 8017d4c:	4a0b      	ldr	r2, [pc, #44]	; (8017d7c <SystemCoreClockUpdate+0xf4>)
 8017d4e:	5cd3      	ldrb	r3, [r2, r3]
 8017d50:	b2db      	uxtb	r3, r3
 8017d52:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8017d54:	4b06      	ldr	r3, [pc, #24]	; (8017d70 <SystemCoreClockUpdate+0xe8>)
 8017d56:	681a      	ldr	r2, [r3, #0]
 8017d58:	693b      	ldr	r3, [r7, #16]
 8017d5a:	40da      	lsrs	r2, r3
 8017d5c:	4b04      	ldr	r3, [pc, #16]	; (8017d70 <SystemCoreClockUpdate+0xe8>)
 8017d5e:	601a      	str	r2, [r3, #0]
}
 8017d60:	371c      	adds	r7, #28
 8017d62:	46bd      	mov	sp, r7
 8017d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d68:	4770      	bx	lr
 8017d6a:	bf00      	nop
 8017d6c:	40023800 	.word	0x40023800
 8017d70:	200000bc 	.word	0x200000bc
 8017d74:	00f42400 	.word	0x00f42400
 8017d78:	007a1200 	.word	0x007a1200
 8017d7c:	200000c0 	.word	0x200000c0

08017d80 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8017d80:	b480      	push	{r7}
 8017d82:	b083      	sub	sp, #12
 8017d84:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8017d86:	2300      	movs	r3, #0
 8017d88:	607b      	str	r3, [r7, #4]
 8017d8a:	2300      	movs	r3, #0
 8017d8c:	603b      	str	r3, [r7, #0]
                   (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

#else /* PLL_SOURCE_HSE_BYPASS or PLL_SOURCE_HSE */

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8017d8e:	4b42      	ldr	r3, [pc, #264]	; (8017e98 <SetSysClock+0x118>)
 8017d90:	4a41      	ldr	r2, [pc, #260]	; (8017e98 <SetSysClock+0x118>)
 8017d92:	6812      	ldr	r2, [r2, #0]
 8017d94:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8017d98:	601a      	str	r2, [r3, #0]
  RCC->CR |= ((uint32_t)RCC_CR_HSEBYP);
#endif   /* PLL_SOURCE_HSE_BYPASS */
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8017d9a:	4b3f      	ldr	r3, [pc, #252]	; (8017e98 <SetSysClock+0x118>)
 8017d9c:	681b      	ldr	r3, [r3, #0]
 8017d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017da2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	3301      	adds	r3, #1
 8017da8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8017daa:	683b      	ldr	r3, [r7, #0]
 8017dac:	2b00      	cmp	r3, #0
 8017dae:	d103      	bne.n	8017db8 <SetSysClock+0x38>
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8017db6:	d1f0      	bne.n	8017d9a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8017db8:	4b37      	ldr	r3, [pc, #220]	; (8017e98 <SetSysClock+0x118>)
 8017dba:	681b      	ldr	r3, [r3, #0]
 8017dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d002      	beq.n	8017dca <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8017dc4:	2301      	movs	r3, #1
 8017dc6:	603b      	str	r3, [r7, #0]
 8017dc8:	e001      	b.n	8017dce <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8017dca:	2300      	movs	r3, #0
 8017dcc:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8017dce:	683b      	ldr	r3, [r7, #0]
 8017dd0:	2b01      	cmp	r3, #1
 8017dd2:	d102      	bne.n	8017dda <SetSysClock+0x5a>
  {
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8017dd4:	4b30      	ldr	r3, [pc, #192]	; (8017e98 <SetSysClock+0x118>)
 8017dd6:	4a31      	ldr	r2, [pc, #196]	; (8017e9c <SetSysClock+0x11c>)
 8017dd8:	605a      	str	r2, [r3, #4]
         configuration. User can add here some code to deal with this error */
  }
#endif /*PLL_SOURCE_HSI*/
  
      /* Select regulator voltage output Scale 1 mode, System frequency up to 180 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8017dda:	4b2f      	ldr	r3, [pc, #188]	; (8017e98 <SetSysClock+0x118>)
 8017ddc:	4a2e      	ldr	r2, [pc, #184]	; (8017e98 <SetSysClock+0x118>)
 8017dde:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8017de0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8017de4:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8017de6:	4b2e      	ldr	r3, [pc, #184]	; (8017ea0 <SetSysClock+0x120>)
 8017de8:	4a2d      	ldr	r2, [pc, #180]	; (8017ea0 <SetSysClock+0x120>)
 8017dea:	6812      	ldr	r2, [r2, #0]
 8017dec:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8017df0:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8017df2:	4b29      	ldr	r3, [pc, #164]	; (8017e98 <SetSysClock+0x118>)
 8017df4:	4a28      	ldr	r2, [pc, #160]	; (8017e98 <SetSysClock+0x118>)
 8017df6:	6892      	ldr	r2, [r2, #8]
 8017df8:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8017dfa:	4b27      	ldr	r3, [pc, #156]	; (8017e98 <SetSysClock+0x118>)
 8017dfc:	4a26      	ldr	r2, [pc, #152]	; (8017e98 <SetSysClock+0x118>)
 8017dfe:	6892      	ldr	r2, [r2, #8]
 8017e00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8017e04:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8017e06:	4b24      	ldr	r3, [pc, #144]	; (8017e98 <SetSysClock+0x118>)
 8017e08:	4a23      	ldr	r2, [pc, #140]	; (8017e98 <SetSysClock+0x118>)
 8017e0a:	6892      	ldr	r2, [r2, #8]
 8017e0c:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8017e10:	609a      	str	r2, [r3, #8]

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8017e12:	4b21      	ldr	r3, [pc, #132]	; (8017e98 <SetSysClock+0x118>)
 8017e14:	4a20      	ldr	r2, [pc, #128]	; (8017e98 <SetSysClock+0x118>)
 8017e16:	6812      	ldr	r2, [r2, #0]
 8017e18:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8017e1c:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8017e1e:	bf00      	nop
 8017e20:	4b1d      	ldr	r3, [pc, #116]	; (8017e98 <SetSysClock+0x118>)
 8017e22:	681b      	ldr	r3, [r3, #0]
 8017e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	d0f9      	beq.n	8017e20 <SetSysClock+0xa0>
    {
    }

    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 8017e2c:	4b1c      	ldr	r3, [pc, #112]	; (8017ea0 <SetSysClock+0x120>)
 8017e2e:	4a1c      	ldr	r2, [pc, #112]	; (8017ea0 <SetSysClock+0x120>)
 8017e30:	6812      	ldr	r2, [r2, #0]
 8017e32:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8017e36:	601a      	str	r2, [r3, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 8017e38:	bf00      	nop
 8017e3a:	4b19      	ldr	r3, [pc, #100]	; (8017ea0 <SetSysClock+0x120>)
 8017e3c:	685b      	ldr	r3, [r3, #4]
 8017e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	d0f9      	beq.n	8017e3a <SetSysClock+0xba>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 8017e46:	4b16      	ldr	r3, [pc, #88]	; (8017ea0 <SetSysClock+0x120>)
 8017e48:	4a15      	ldr	r2, [pc, #84]	; (8017ea0 <SetSysClock+0x120>)
 8017e4a:	6812      	ldr	r2, [r2, #0]
 8017e4c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8017e50:	601a      	str	r2, [r3, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 8017e52:	bf00      	nop
 8017e54:	4b12      	ldr	r3, [pc, #72]	; (8017ea0 <SetSysClock+0x120>)
 8017e56:	685b      	ldr	r3, [r3, #4]
 8017e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d0f9      	beq.n	8017e54 <SetSysClock+0xd4>
    {
    } 
     
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8017e60:	4b10      	ldr	r3, [pc, #64]	; (8017ea4 <SetSysClock+0x124>)
 8017e62:	f240 7205 	movw	r2, #1797	; 0x705
 8017e66:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8017e68:	4b0b      	ldr	r3, [pc, #44]	; (8017e98 <SetSysClock+0x118>)
 8017e6a:	4a0b      	ldr	r2, [pc, #44]	; (8017e98 <SetSysClock+0x118>)
 8017e6c:	6892      	ldr	r2, [r2, #8]
 8017e6e:	f022 0203 	bic.w	r2, r2, #3
 8017e72:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8017e74:	4b08      	ldr	r3, [pc, #32]	; (8017e98 <SetSysClock+0x118>)
 8017e76:	4a08      	ldr	r2, [pc, #32]	; (8017e98 <SetSysClock+0x118>)
 8017e78:	6892      	ldr	r2, [r2, #8]
 8017e7a:	f042 0202 	orr.w	r2, r2, #2
 8017e7e:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8017e80:	bf00      	nop
 8017e82:	4b05      	ldr	r3, [pc, #20]	; (8017e98 <SetSysClock+0x118>)
 8017e84:	689b      	ldr	r3, [r3, #8]
 8017e86:	f003 030c 	and.w	r3, r3, #12
 8017e8a:	2b08      	cmp	r3, #8
 8017e8c:	d1f9      	bne.n	8017e82 <SetSysClock+0x102>
    {
    }
}
 8017e8e:	370c      	adds	r7, #12
 8017e90:	46bd      	mov	sp, r7
 8017e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e96:	4770      	bx	lr
 8017e98:	40023800 	.word	0x40023800
 8017e9c:	07405a08 	.word	0x07405a08
 8017ea0:	40007000 	.word	0x40007000
 8017ea4:	40023c00 	.word	0x40023c00

08017ea8 <SysTick_Handler>:
	.type	USART2_IRQHandler, %function
	.global USART2_IRQHandler
SysTick_Handler:
USART2_IRQHandler:
	/* disable global interupt */
	cpsid i
 8017ea8:	b672      	cpsid	i

	mrs r0, psp
 8017eaa:	f3ef 8009 	mrs	r0, PSP
	stmdb r0!, {r7}
 8017eae:	f840 7d04 	str.w	r7, [r0, #-4]!

	/* Get ISR number */
	mrs r7, ipsr
 8017eb2:	f3ef 8705 	mrs	r7, IPSR
	neg r7, r7
 8017eb6:	f1c7 0700 	rsb	r7, r7, #0

	/* save user state */
	stmdb r0!, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8017eba:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* load kernel state */
	pop {r4, r5, r6, r7, r8, r9, r10, r11, ip, lr}
 8017ebe:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
	msr psr_nzcvq, ip
 8017ec2:	f38c 8803 	msr	PSR, ip

	bx lr
 8017ec6:	4770      	bx	lr

08017ec8 <SVC_Handler>:

	.type	SVC_Handler, %function
	.global SVC_Handler
SVC_Handler:
	/* save user state */
	mrs r0, psp
 8017ec8:	f3ef 8009 	mrs	r0, PSP
	stmdb r0!, {r7}
 8017ecc:	f840 7d04 	str.w	r7, [r0, #-4]!
	stmdb r0!, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8017ed0:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* load kernel state */
	pop {r4, r5, r6, r7, r8, r9, r10, r11, ip, lr}
 8017ed4:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
	msr psr_nzcvq, ip
 8017ed8:	f38c 8803 	msr	PSR, ip
	
	bx lr
 8017edc:	4770      	bx	lr

08017ede <activate>:

	.global activate
activate:
	/* save kernel state */
	mrs ip, psr
 8017ede:	f3ef 8c03 	mrs	ip, PSR
	push {r4, r5, r6, r7, r8, r9, r10, r11, ip, lr}
 8017ee2:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
	
	/* load user state */
	ldmia r0!, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8017ee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ldmia r0!, {r7}
 8017eea:	c880      	ldmia	r0!, {r7}
	
	/* switch to process stack pointer */
	msr psp, r0
 8017eec:	f380 8809 	msr	PSP, r0
	mov r0, #3
 8017ef0:	f04f 0003 	mov.w	r0, #3
	msr control, r0
 8017ef4:	f380 8814 	msr	CONTROL, r0

	/* enable global interupt */
	cpsie i
 8017ef8:	b662      	cpsie	i
	bx lr
 8017efa:	4770      	bx	lr
 8017efc:	0000      	movs	r0, r0
	...

08017f00 <memcpy>:
    .syntax unified
    .align 4

.global memcpy
memcpy:
	push    {r0}
 8017f00:	b401      	push	{r0}
	cmp     r2, #4
 8017f02:	2a04      	cmp	r2, #4
	it      lo
 8017f04:	bf38      	it	cc
	lslslo  r2, r2, #30         /* Adjust r2 for less_than_4_bytes */
 8017f06:	ea5f 7282 	movscc.w	r2, r2, lsl #30
	blo     less_than_4_bytes
 8017f0a:	f0c0 8031 	bcc.w	8017f70 <less_than_4_bytes>
	
	ands    r3, r1, #3
 8017f0e:	f011 0303 	ands.w	r3, r1, #3
	beq     aligned
 8017f12:	f000 800e 	beq.w	8017f32 <aligned>
	
	negs    r3, r3              /* Next aligned offset = (4 - src & 3) & 3 */
 8017f16:	425b      	negs	r3, r3
	lsls    r3, r3, #31
 8017f18:	07db      	lsls	r3, r3, #31
	ittt    cs
 8017f1a:	bf22      	ittt	cs
	ldrhcs  r3, [r1], #2		/* Load if 2 bytes unaligned */
 8017f1c:	f831 3b02 	ldrhcs.w	r3, [r1], #2
	subcs   r2, r2, #2
 8017f20:	3a02      	subcs	r2, #2
	strhcs  r3, [r0], #2		/* Save if 2 bytes unaligned */
 8017f22:	f820 3b02 	strhcs.w	r3, [r0], #2
	ittt    mi
 8017f26:	bf42      	ittt	mi
	ldrbmi  r3, [r1] ,#1		/* Load if 1 byte unaligned */
 8017f28:	f811 3b01 	ldrbmi.w	r3, [r1], #1
	submi   r2, r2, #1
 8017f2c:	3a01      	submi	r2, #1
	strbmi  r3, [r0] ,#1		/* Save if 1 byte unaligned */
 8017f2e:	f800 3b01 	strbmi.w	r3, [r0], #1

08017f32 <aligned>:

aligned:
	push    {r4 - r10}
 8017f32:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
	subs 	r2, #32		 
 8017f36:	3a20      	subs	r2, #32
	blo     less_than_32_bytes
 8017f38:	f0c0 8007 	bcc.w	8017f4a <less_than_32_bytes>

08017f3c <L>:
L:
	ldmia 	r1!, {r3 - r10}
 8017f3c:	e8b1 07f8 	ldmia.w	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
	subs 	r2, #32		 
 8017f40:	3a20      	subs	r2, #32
	stmia	r0!, {r3 - r10}
 8017f42:	e8a0 07f8 	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
	bhs 	L
 8017f46:	f4bf aff9 	bcs.w	8017f3c <L>

08017f4a <less_than_32_bytes>:
					
less_than_32_bytes:
	lsls    r2, r2, #28
 8017f4a:	0712      	lsls	r2, r2, #28
	it      cs
 8017f4c:	bf28      	it	cs
	ldmiacs	r1!, {r3 - r6}		/* Load if 16 bytes remained */
 8017f4e:	c978      	ldmiacs	r1!, {r3, r4, r5, r6}
	it      mi
 8017f50:	bf48      	it	mi
	ldmiami r1!, {r7 - r8}		/* Load if 8 bytes remained */
 8017f52:	e8b1 0180 	ldmiami.w	r1!, {r7, r8}
	it      cs
 8017f56:	bf28      	it	cs
	stmiacs	r0!, {r3 - r6}
 8017f58:	c078      	stmiacs	r0!, {r3, r4, r5, r6}
	it      mi
 8017f5a:	bf48      	it	mi
	stmiami r0!, {r7 - r8}
 8017f5c:	e8a0 0180 	stmiami.w	r0!, {r7, r8}
	
	lsls    r2, r2, #2
 8017f60:	0092      	lsls	r2, r2, #2
	itt     cs
 8017f62:	bf24      	itt	cs
	ldrcs   r3, [r1], #4		/* Load if 4 bytes remained */
 8017f64:	f851 3b04 	ldrcs.w	r3, [r1], #4
	strcs   r3, [r0], #4
 8017f68:	f840 3b04 	strcs.w	r3, [r0], #4
	
	pop     {r4 - r10}
 8017f6c:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}

08017f70 <less_than_4_bytes>:
	
less_than_4_bytes:
	it      ne
 8017f70:	bf18      	it	ne
	ldrne   r3, [r1]    		/* Load if ether 2 bytes or 1 byte remained */
 8017f72:	680b      	ldrne	r3, [r1, #0]
	lsls    r2, r2, #1
 8017f74:	0052      	lsls	r2, r2, #1
	itt     cs
 8017f76:	bf24      	itt	cs
	strhcs  r3, [r0],#2			/* Save if 2 bytes remained */
 8017f78:	f820 3b02 	strhcs.w	r3, [r0], #2
	lsrcs   r3, r3, 16
 8017f7c:	0c1b      	lsrcs	r3, r3, #16
	it      mi
 8017f7e:	bf48      	it	mi
	strbmi  r3, [r0],#1			/* Save if 1 byte remained */
 8017f80:	f800 3b01 	strbmi.w	r3, [r0], #1
	
	pop     {r0}				
 8017f84:	bc01      	pop	{r0}
	bx      lr				
 8017f86:	4770      	bx	lr
 8017f88:	f3af 8000 	nop.w
 8017f8c:	f3af 8000 	nop.w

08017f90 <fork>:
	.fpu softvfp
	.thumb

.global fork
fork:
	push {r7}
 8017f90:	b480      	push	{r7}
	mov r7, #0x1
 8017f92:	f04f 0701 	mov.w	r7, #1
	svc 0
 8017f96:	df00      	svc	0
	nop
 8017f98:	bf00      	nop
	pop {r7}
 8017f9a:	bc80      	pop	{r7}
	bx lr
 8017f9c:	4770      	bx	lr

08017f9e <getpid>:
.global getpid
getpid:
	push {r7}
 8017f9e:	b480      	push	{r7}
	mov r7, #0x2
 8017fa0:	f04f 0702 	mov.w	r7, #2
	svc 0
 8017fa4:	df00      	svc	0
	nop
 8017fa6:	bf00      	nop
	pop {r7}
 8017fa8:	bc80      	pop	{r7}
	bx lr
 8017faa:	4770      	bx	lr

08017fac <write>:
.global write
write:
	push {r7}
 8017fac:	b480      	push	{r7}
	mov r7, #0x3
 8017fae:	f04f 0703 	mov.w	r7, #3
	svc 0
 8017fb2:	df00      	svc	0
	nop
 8017fb4:	bf00      	nop
	pop {r7}
 8017fb6:	bc80      	pop	{r7}
	bx lr
 8017fb8:	4770      	bx	lr

08017fba <read>:
.global read
read:
	push {r7}
 8017fba:	b480      	push	{r7}
	mov r7, #0x4
 8017fbc:	f04f 0704 	mov.w	r7, #4
	svc 0
 8017fc0:	df00      	svc	0
	nop
 8017fc2:	bf00      	nop
	pop {r7}
 8017fc4:	bc80      	pop	{r7}
	bx lr
 8017fc6:	4770      	bx	lr

08017fc8 <interrupt_wait>:
.global interrupt_wait
interrupt_wait:
	push {r7}
 8017fc8:	b480      	push	{r7}
	mov r7, #0x5
 8017fca:	f04f 0705 	mov.w	r7, #5
	svc 0
 8017fce:	df00      	svc	0
	nop
 8017fd0:	bf00      	nop
	pop {r7}
 8017fd2:	bc80      	pop	{r7}
	bx lr
 8017fd4:	4770      	bx	lr

08017fd6 <getpriority>:
.global getpriority
getpriority:
	push {r7}
 8017fd6:	b480      	push	{r7}
	mov r7, #0x6
 8017fd8:	f04f 0706 	mov.w	r7, #6
	svc 0
 8017fdc:	df00      	svc	0
	nop
 8017fde:	bf00      	nop
	pop {r7}
 8017fe0:	bc80      	pop	{r7}
	bx lr
 8017fe2:	4770      	bx	lr

08017fe4 <setpriority>:
.global setpriority
setpriority:
	push {r7}
 8017fe4:	b480      	push	{r7}
	mov r7, #0x7
 8017fe6:	f04f 0707 	mov.w	r7, #7
	svc 0
 8017fea:	df00      	svc	0
	nop
 8017fec:	bf00      	nop
	pop {r7}
 8017fee:	bc80      	pop	{r7}
	bx lr
 8017ff0:	4770      	bx	lr

08017ff2 <mknod>:
.global mknod
mknod:
	push {r7}
 8017ff2:	b480      	push	{r7}
	mov r7, #0x8
 8017ff4:	f04f 0708 	mov.w	r7, #8
	svc 0
 8017ff8:	df00      	svc	0
	nop
 8017ffa:	bf00      	nop
	pop {r7}
 8017ffc:	bc80      	pop	{r7}
	bx lr
 8017ffe:	4770      	bx	lr

08018000 <sleep>:
.global sleep
sleep:
	push {r7}
 8018000:	b480      	push	{r7}
	mov r7, #0x9
 8018002:	f04f 0709 	mov.w	r7, #9
	svc 0
 8018006:	df00      	svc	0
	nop
 8018008:	bf00      	nop
	pop {r7}
 801800a:	bc80      	pop	{r7}
	bx lr
 801800c:	4770      	bx	lr

0801800e <lseek>:
.global lseek
lseek:
	push {r7}
 801800e:	b480      	push	{r7}
	mov r7, #0xa
 8018010:	f04f 070a 	mov.w	r7, #10
	svc 0
 8018014:	df00      	svc	0
	nop
 8018016:	bf00      	nop
	pop {r7}
 8018018:	bc80      	pop	{r7}
	bx lr
 801801a:	4770      	bx	lr
 801801c:	0801d0c0 	.word	0x0801d0c0
 8018020:	20000000 	.word	0x20000000
 8018024:	200000d4 	.word	0x200000d4
 8018028:	200000d4 	.word	0x200000d4
 801802c:	20005354 	.word	0x20005354

08018030 <__aeabi_frsub>:
 8018030:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8018034:	e002      	b.n	801803c <__addsf3>
 8018036:	bf00      	nop

08018038 <__aeabi_fsub>:
 8018038:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0801803c <__addsf3>:
 801803c:	0042      	lsls	r2, r0, #1
 801803e:	bf1f      	itttt	ne
 8018040:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8018044:	ea92 0f03 	teqne	r2, r3
 8018048:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 801804c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8018050:	d06a      	beq.n	8018128 <__addsf3+0xec>
 8018052:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8018056:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 801805a:	bfc1      	itttt	gt
 801805c:	18d2      	addgt	r2, r2, r3
 801805e:	4041      	eorgt	r1, r0
 8018060:	4048      	eorgt	r0, r1
 8018062:	4041      	eorgt	r1, r0
 8018064:	bfb8      	it	lt
 8018066:	425b      	neglt	r3, r3
 8018068:	2b19      	cmp	r3, #25
 801806a:	bf88      	it	hi
 801806c:	4770      	bxhi	lr
 801806e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8018072:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8018076:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 801807a:	bf18      	it	ne
 801807c:	4240      	negne	r0, r0
 801807e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8018082:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8018086:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 801808a:	bf18      	it	ne
 801808c:	4249      	negne	r1, r1
 801808e:	ea92 0f03 	teq	r2, r3
 8018092:	d03f      	beq.n	8018114 <__addsf3+0xd8>
 8018094:	f1a2 0201 	sub.w	r2, r2, #1
 8018098:	fa41 fc03 	asr.w	ip, r1, r3
 801809c:	eb10 000c 	adds.w	r0, r0, ip
 80180a0:	f1c3 0320 	rsb	r3, r3, #32
 80180a4:	fa01 f103 	lsl.w	r1, r1, r3
 80180a8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80180ac:	d502      	bpl.n	80180b4 <__addsf3+0x78>
 80180ae:	4249      	negs	r1, r1
 80180b0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80180b4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80180b8:	d313      	bcc.n	80180e2 <__addsf3+0xa6>
 80180ba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80180be:	d306      	bcc.n	80180ce <__addsf3+0x92>
 80180c0:	0840      	lsrs	r0, r0, #1
 80180c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80180c6:	f102 0201 	add.w	r2, r2, #1
 80180ca:	2afe      	cmp	r2, #254	; 0xfe
 80180cc:	d251      	bcs.n	8018172 <__addsf3+0x136>
 80180ce:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80180d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80180d6:	bf08      	it	eq
 80180d8:	f020 0001 	biceq.w	r0, r0, #1
 80180dc:	ea40 0003 	orr.w	r0, r0, r3
 80180e0:	4770      	bx	lr
 80180e2:	0049      	lsls	r1, r1, #1
 80180e4:	eb40 0000 	adc.w	r0, r0, r0
 80180e8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80180ec:	f1a2 0201 	sub.w	r2, r2, #1
 80180f0:	d1ed      	bne.n	80180ce <__addsf3+0x92>
 80180f2:	fab0 fc80 	clz	ip, r0
 80180f6:	f1ac 0c08 	sub.w	ip, ip, #8
 80180fa:	ebb2 020c 	subs.w	r2, r2, ip
 80180fe:	fa00 f00c 	lsl.w	r0, r0, ip
 8018102:	bfaa      	itet	ge
 8018104:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8018108:	4252      	neglt	r2, r2
 801810a:	4318      	orrge	r0, r3
 801810c:	bfbc      	itt	lt
 801810e:	40d0      	lsrlt	r0, r2
 8018110:	4318      	orrlt	r0, r3
 8018112:	4770      	bx	lr
 8018114:	f092 0f00 	teq	r2, #0
 8018118:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 801811c:	bf06      	itte	eq
 801811e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8018122:	3201      	addeq	r2, #1
 8018124:	3b01      	subne	r3, #1
 8018126:	e7b5      	b.n	8018094 <__addsf3+0x58>
 8018128:	ea4f 0341 	mov.w	r3, r1, lsl #1
 801812c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8018130:	bf18      	it	ne
 8018132:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8018136:	d021      	beq.n	801817c <__addsf3+0x140>
 8018138:	ea92 0f03 	teq	r2, r3
 801813c:	d004      	beq.n	8018148 <__addsf3+0x10c>
 801813e:	f092 0f00 	teq	r2, #0
 8018142:	bf08      	it	eq
 8018144:	4608      	moveq	r0, r1
 8018146:	4770      	bx	lr
 8018148:	ea90 0f01 	teq	r0, r1
 801814c:	bf1c      	itt	ne
 801814e:	2000      	movne	r0, #0
 8018150:	4770      	bxne	lr
 8018152:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8018156:	d104      	bne.n	8018162 <__addsf3+0x126>
 8018158:	0040      	lsls	r0, r0, #1
 801815a:	bf28      	it	cs
 801815c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8018160:	4770      	bx	lr
 8018162:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8018166:	bf3c      	itt	cc
 8018168:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 801816c:	4770      	bxcc	lr
 801816e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8018172:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8018176:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801817a:	4770      	bx	lr
 801817c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8018180:	bf16      	itet	ne
 8018182:	4608      	movne	r0, r1
 8018184:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8018188:	4601      	movne	r1, r0
 801818a:	0242      	lsls	r2, r0, #9
 801818c:	bf06      	itte	eq
 801818e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8018192:	ea90 0f01 	teqeq	r0, r1
 8018196:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 801819a:	4770      	bx	lr

0801819c <__aeabi_ui2f>:
 801819c:	f04f 0300 	mov.w	r3, #0
 80181a0:	e004      	b.n	80181ac <__aeabi_i2f+0x8>
 80181a2:	bf00      	nop

080181a4 <__aeabi_i2f>:
 80181a4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80181a8:	bf48      	it	mi
 80181aa:	4240      	negmi	r0, r0
 80181ac:	ea5f 0c00 	movs.w	ip, r0
 80181b0:	bf08      	it	eq
 80181b2:	4770      	bxeq	lr
 80181b4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80181b8:	4601      	mov	r1, r0
 80181ba:	f04f 0000 	mov.w	r0, #0
 80181be:	e01c      	b.n	80181fa <__aeabi_l2f+0x2a>

080181c0 <__aeabi_ul2f>:
 80181c0:	ea50 0201 	orrs.w	r2, r0, r1
 80181c4:	bf08      	it	eq
 80181c6:	4770      	bxeq	lr
 80181c8:	f04f 0300 	mov.w	r3, #0
 80181cc:	e00a      	b.n	80181e4 <__aeabi_l2f+0x14>
 80181ce:	bf00      	nop

080181d0 <__aeabi_l2f>:
 80181d0:	ea50 0201 	orrs.w	r2, r0, r1
 80181d4:	bf08      	it	eq
 80181d6:	4770      	bxeq	lr
 80181d8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80181dc:	d502      	bpl.n	80181e4 <__aeabi_l2f+0x14>
 80181de:	4240      	negs	r0, r0
 80181e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80181e4:	ea5f 0c01 	movs.w	ip, r1
 80181e8:	bf02      	ittt	eq
 80181ea:	4684      	moveq	ip, r0
 80181ec:	4601      	moveq	r1, r0
 80181ee:	2000      	moveq	r0, #0
 80181f0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80181f4:	bf08      	it	eq
 80181f6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80181fa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80181fe:	fabc f28c 	clz	r2, ip
 8018202:	3a08      	subs	r2, #8
 8018204:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8018208:	db10      	blt.n	801822c <__aeabi_l2f+0x5c>
 801820a:	fa01 fc02 	lsl.w	ip, r1, r2
 801820e:	4463      	add	r3, ip
 8018210:	fa00 fc02 	lsl.w	ip, r0, r2
 8018214:	f1c2 0220 	rsb	r2, r2, #32
 8018218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 801821c:	fa20 f202 	lsr.w	r2, r0, r2
 8018220:	eb43 0002 	adc.w	r0, r3, r2
 8018224:	bf08      	it	eq
 8018226:	f020 0001 	biceq.w	r0, r0, #1
 801822a:	4770      	bx	lr
 801822c:	f102 0220 	add.w	r2, r2, #32
 8018230:	fa01 fc02 	lsl.w	ip, r1, r2
 8018234:	f1c2 0220 	rsb	r2, r2, #32
 8018238:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 801823c:	fa21 f202 	lsr.w	r2, r1, r2
 8018240:	eb43 0002 	adc.w	r0, r3, r2
 8018244:	bf08      	it	eq
 8018246:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 801824a:	4770      	bx	lr

0801824c <__aeabi_fmul>:
 801824c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8018250:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8018254:	bf1e      	ittt	ne
 8018256:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 801825a:	ea92 0f0c 	teqne	r2, ip
 801825e:	ea93 0f0c 	teqne	r3, ip
 8018262:	d06f      	beq.n	8018344 <__aeabi_fmul+0xf8>
 8018264:	441a      	add	r2, r3
 8018266:	ea80 0c01 	eor.w	ip, r0, r1
 801826a:	0240      	lsls	r0, r0, #9
 801826c:	bf18      	it	ne
 801826e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8018272:	d01e      	beq.n	80182b2 <__aeabi_fmul+0x66>
 8018274:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8018278:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 801827c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8018280:	fba0 3101 	umull	r3, r1, r0, r1
 8018284:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8018288:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 801828c:	bf3e      	ittt	cc
 801828e:	0049      	lslcc	r1, r1, #1
 8018290:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8018294:	005b      	lslcc	r3, r3, #1
 8018296:	ea40 0001 	orr.w	r0, r0, r1
 801829a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 801829e:	2afd      	cmp	r2, #253	; 0xfd
 80182a0:	d81d      	bhi.n	80182de <__aeabi_fmul+0x92>
 80182a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80182a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80182aa:	bf08      	it	eq
 80182ac:	f020 0001 	biceq.w	r0, r0, #1
 80182b0:	4770      	bx	lr
 80182b2:	f090 0f00 	teq	r0, #0
 80182b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80182ba:	bf08      	it	eq
 80182bc:	0249      	lsleq	r1, r1, #9
 80182be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80182c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80182c6:	3a7f      	subs	r2, #127	; 0x7f
 80182c8:	bfc2      	ittt	gt
 80182ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80182ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80182d2:	4770      	bxgt	lr
 80182d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80182d8:	f04f 0300 	mov.w	r3, #0
 80182dc:	3a01      	subs	r2, #1
 80182de:	dc5d      	bgt.n	801839c <__aeabi_fmul+0x150>
 80182e0:	f112 0f19 	cmn.w	r2, #25
 80182e4:	bfdc      	itt	le
 80182e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80182ea:	4770      	bxle	lr
 80182ec:	f1c2 0200 	rsb	r2, r2, #0
 80182f0:	0041      	lsls	r1, r0, #1
 80182f2:	fa21 f102 	lsr.w	r1, r1, r2
 80182f6:	f1c2 0220 	rsb	r2, r2, #32
 80182fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80182fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8018302:	f140 0000 	adc.w	r0, r0, #0
 8018306:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 801830a:	bf08      	it	eq
 801830c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8018310:	4770      	bx	lr
 8018312:	f092 0f00 	teq	r2, #0
 8018316:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 801831a:	bf02      	ittt	eq
 801831c:	0040      	lsleq	r0, r0, #1
 801831e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8018322:	3a01      	subeq	r2, #1
 8018324:	d0f9      	beq.n	801831a <__aeabi_fmul+0xce>
 8018326:	ea40 000c 	orr.w	r0, r0, ip
 801832a:	f093 0f00 	teq	r3, #0
 801832e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8018332:	bf02      	ittt	eq
 8018334:	0049      	lsleq	r1, r1, #1
 8018336:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 801833a:	3b01      	subeq	r3, #1
 801833c:	d0f9      	beq.n	8018332 <__aeabi_fmul+0xe6>
 801833e:	ea41 010c 	orr.w	r1, r1, ip
 8018342:	e78f      	b.n	8018264 <__aeabi_fmul+0x18>
 8018344:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8018348:	ea92 0f0c 	teq	r2, ip
 801834c:	bf18      	it	ne
 801834e:	ea93 0f0c 	teqne	r3, ip
 8018352:	d00a      	beq.n	801836a <__aeabi_fmul+0x11e>
 8018354:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8018358:	bf18      	it	ne
 801835a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 801835e:	d1d8      	bne.n	8018312 <__aeabi_fmul+0xc6>
 8018360:	ea80 0001 	eor.w	r0, r0, r1
 8018364:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8018368:	4770      	bx	lr
 801836a:	f090 0f00 	teq	r0, #0
 801836e:	bf17      	itett	ne
 8018370:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8018374:	4608      	moveq	r0, r1
 8018376:	f091 0f00 	teqne	r1, #0
 801837a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 801837e:	d014      	beq.n	80183aa <__aeabi_fmul+0x15e>
 8018380:	ea92 0f0c 	teq	r2, ip
 8018384:	d101      	bne.n	801838a <__aeabi_fmul+0x13e>
 8018386:	0242      	lsls	r2, r0, #9
 8018388:	d10f      	bne.n	80183aa <__aeabi_fmul+0x15e>
 801838a:	ea93 0f0c 	teq	r3, ip
 801838e:	d103      	bne.n	8018398 <__aeabi_fmul+0x14c>
 8018390:	024b      	lsls	r3, r1, #9
 8018392:	bf18      	it	ne
 8018394:	4608      	movne	r0, r1
 8018396:	d108      	bne.n	80183aa <__aeabi_fmul+0x15e>
 8018398:	ea80 0001 	eor.w	r0, r0, r1
 801839c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80183a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80183a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80183a8:	4770      	bx	lr
 80183aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80183ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80183b2:	4770      	bx	lr

080183b4 <__aeabi_fdiv>:
 80183b4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80183b8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80183bc:	bf1e      	ittt	ne
 80183be:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80183c2:	ea92 0f0c 	teqne	r2, ip
 80183c6:	ea93 0f0c 	teqne	r3, ip
 80183ca:	d069      	beq.n	80184a0 <__aeabi_fdiv+0xec>
 80183cc:	eba2 0203 	sub.w	r2, r2, r3
 80183d0:	ea80 0c01 	eor.w	ip, r0, r1
 80183d4:	0249      	lsls	r1, r1, #9
 80183d6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80183da:	d037      	beq.n	801844c <__aeabi_fdiv+0x98>
 80183dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80183e0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80183e4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80183e8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80183ec:	428b      	cmp	r3, r1
 80183ee:	bf38      	it	cc
 80183f0:	005b      	lslcc	r3, r3, #1
 80183f2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80183f6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80183fa:	428b      	cmp	r3, r1
 80183fc:	bf24      	itt	cs
 80183fe:	1a5b      	subcs	r3, r3, r1
 8018400:	ea40 000c 	orrcs.w	r0, r0, ip
 8018404:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8018408:	bf24      	itt	cs
 801840a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 801840e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8018412:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8018416:	bf24      	itt	cs
 8018418:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 801841c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8018420:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8018424:	bf24      	itt	cs
 8018426:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 801842a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 801842e:	011b      	lsls	r3, r3, #4
 8018430:	bf18      	it	ne
 8018432:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8018436:	d1e0      	bne.n	80183fa <__aeabi_fdiv+0x46>
 8018438:	2afd      	cmp	r2, #253	; 0xfd
 801843a:	f63f af50 	bhi.w	80182de <__aeabi_fmul+0x92>
 801843e:	428b      	cmp	r3, r1
 8018440:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8018444:	bf08      	it	eq
 8018446:	f020 0001 	biceq.w	r0, r0, #1
 801844a:	4770      	bx	lr
 801844c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8018450:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8018454:	327f      	adds	r2, #127	; 0x7f
 8018456:	bfc2      	ittt	gt
 8018458:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 801845c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8018460:	4770      	bxgt	lr
 8018462:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8018466:	f04f 0300 	mov.w	r3, #0
 801846a:	3a01      	subs	r2, #1
 801846c:	e737      	b.n	80182de <__aeabi_fmul+0x92>
 801846e:	f092 0f00 	teq	r2, #0
 8018472:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8018476:	bf02      	ittt	eq
 8018478:	0040      	lsleq	r0, r0, #1
 801847a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 801847e:	3a01      	subeq	r2, #1
 8018480:	d0f9      	beq.n	8018476 <__aeabi_fdiv+0xc2>
 8018482:	ea40 000c 	orr.w	r0, r0, ip
 8018486:	f093 0f00 	teq	r3, #0
 801848a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 801848e:	bf02      	ittt	eq
 8018490:	0049      	lsleq	r1, r1, #1
 8018492:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8018496:	3b01      	subeq	r3, #1
 8018498:	d0f9      	beq.n	801848e <__aeabi_fdiv+0xda>
 801849a:	ea41 010c 	orr.w	r1, r1, ip
 801849e:	e795      	b.n	80183cc <__aeabi_fdiv+0x18>
 80184a0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80184a4:	ea92 0f0c 	teq	r2, ip
 80184a8:	d108      	bne.n	80184bc <__aeabi_fdiv+0x108>
 80184aa:	0242      	lsls	r2, r0, #9
 80184ac:	f47f af7d 	bne.w	80183aa <__aeabi_fmul+0x15e>
 80184b0:	ea93 0f0c 	teq	r3, ip
 80184b4:	f47f af70 	bne.w	8018398 <__aeabi_fmul+0x14c>
 80184b8:	4608      	mov	r0, r1
 80184ba:	e776      	b.n	80183aa <__aeabi_fmul+0x15e>
 80184bc:	ea93 0f0c 	teq	r3, ip
 80184c0:	d104      	bne.n	80184cc <__aeabi_fdiv+0x118>
 80184c2:	024b      	lsls	r3, r1, #9
 80184c4:	f43f af4c 	beq.w	8018360 <__aeabi_fmul+0x114>
 80184c8:	4608      	mov	r0, r1
 80184ca:	e76e      	b.n	80183aa <__aeabi_fmul+0x15e>
 80184cc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80184d0:	bf18      	it	ne
 80184d2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80184d6:	d1ca      	bne.n	801846e <__aeabi_fdiv+0xba>
 80184d8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80184dc:	f47f af5c 	bne.w	8018398 <__aeabi_fmul+0x14c>
 80184e0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80184e4:	f47f af3c 	bne.w	8018360 <__aeabi_fmul+0x114>
 80184e8:	e75f      	b.n	80183aa <__aeabi_fmul+0x15e>
 80184ea:	bf00      	nop

080184ec <__aeabi_f2uiz>:
 80184ec:	0042      	lsls	r2, r0, #1
 80184ee:	d20e      	bcs.n	801850e <__aeabi_f2uiz+0x22>
 80184f0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80184f4:	d30b      	bcc.n	801850e <__aeabi_f2uiz+0x22>
 80184f6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80184fa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80184fe:	d409      	bmi.n	8018514 <__aeabi_f2uiz+0x28>
 8018500:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8018504:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8018508:	fa23 f002 	lsr.w	r0, r3, r2
 801850c:	4770      	bx	lr
 801850e:	f04f 0000 	mov.w	r0, #0
 8018512:	4770      	bx	lr
 8018514:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8018518:	d101      	bne.n	801851e <__aeabi_f2uiz+0x32>
 801851a:	0242      	lsls	r2, r0, #9
 801851c:	d102      	bne.n	8018524 <__aeabi_f2uiz+0x38>
 801851e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018522:	4770      	bx	lr
 8018524:	f04f 0000 	mov.w	r0, #0
 8018528:	4770      	bx	lr
 801852a:	bf00      	nop

0801852c <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 801852c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801852e:	f000 b804 	b.w	801853a <LoopCopyDataInit>

08018532 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8018532:	4b0c      	ldr	r3, [pc, #48]	; (8018564 <LoopFillZerobss+0x12>)
  ldr  r3, [r3, r1]
 8018534:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8018536:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8018538:	3104      	adds	r1, #4

0801853a <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 801853a:	480b      	ldr	r0, [pc, #44]	; (8018568 <LoopFillZerobss+0x16>)
  ldr  r3, =_edata
 801853c:	4b0b      	ldr	r3, [pc, #44]	; (801856c <LoopFillZerobss+0x1a>)
  adds  r2, r0, r1
 801853e:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8018540:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8018542:	f4ff aff6 	bcc.w	8018532 <CopyDataInit>
  ldr  r2, =_sbss
 8018546:	4a0a      	ldr	r2, [pc, #40]	; (8018570 <LoopFillZerobss+0x1e>)
  b  LoopFillZerobss
 8018548:	f000 b803 	b.w	8018552 <LoopFillZerobss>

0801854c <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801854c:	2300      	movs	r3, #0
  str  r3, [r2], #4
 801854e:	f842 3b04 	str.w	r3, [r2], #4

08018552 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8018552:	4b08      	ldr	r3, [pc, #32]	; (8018574 <LoopFillZerobss+0x22>)
  cmp  r2, r3
 8018554:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8018556:	f4ff aff9 	bcc.w	801854c <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801855a:	f7ff fb69 	bl	8017c30 <SystemInit>
/* Call the application's entry point.*/
  bl  main
 801855e:	f7e7 fe25 	bl	80001ac <main>
  bx  lr    
 8018562:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8018564:	0801d0c0 	.word	0x0801d0c0
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8018568:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 801856c:	200000d4 	.word	0x200000d4
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8018570:	200000d4 	.word	0x200000d4
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8018574:	20005354 	.word	0x20005354

08018578 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8018578:	f7ff bffe 	b.w	8018578 <ADC_IRQHandler>

0801857c <memset>:
 801857c:	b4f0      	push	{r4, r5, r6, r7}
 801857e:	0784      	lsls	r4, r0, #30
 8018580:	d043      	beq.n	801860a <memset+0x8e>
 8018582:	1e54      	subs	r4, r2, #1
 8018584:	2a00      	cmp	r2, #0
 8018586:	d03e      	beq.n	8018606 <memset+0x8a>
 8018588:	b2cd      	uxtb	r5, r1
 801858a:	4603      	mov	r3, r0
 801858c:	e003      	b.n	8018596 <memset+0x1a>
 801858e:	1e62      	subs	r2, r4, #1
 8018590:	2c00      	cmp	r4, #0
 8018592:	d038      	beq.n	8018606 <memset+0x8a>
 8018594:	4614      	mov	r4, r2
 8018596:	f803 5b01 	strb.w	r5, [r3], #1
 801859a:	079a      	lsls	r2, r3, #30
 801859c:	d1f7      	bne.n	801858e <memset+0x12>
 801859e:	2c03      	cmp	r4, #3
 80185a0:	d92a      	bls.n	80185f8 <memset+0x7c>
 80185a2:	b2cd      	uxtb	r5, r1
 80185a4:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80185a8:	2c0f      	cmp	r4, #15
 80185aa:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80185ae:	d915      	bls.n	80185dc <memset+0x60>
 80185b0:	f1a4 0710 	sub.w	r7, r4, #16
 80185b4:	093f      	lsrs	r7, r7, #4
 80185b6:	f103 0610 	add.w	r6, r3, #16
 80185ba:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 80185be:	461a      	mov	r2, r3
 80185c0:	6015      	str	r5, [r2, #0]
 80185c2:	6055      	str	r5, [r2, #4]
 80185c4:	6095      	str	r5, [r2, #8]
 80185c6:	60d5      	str	r5, [r2, #12]
 80185c8:	3210      	adds	r2, #16
 80185ca:	42b2      	cmp	r2, r6
 80185cc:	d1f8      	bne.n	80185c0 <memset+0x44>
 80185ce:	f004 040f 	and.w	r4, r4, #15
 80185d2:	3701      	adds	r7, #1
 80185d4:	2c03      	cmp	r4, #3
 80185d6:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 80185da:	d90d      	bls.n	80185f8 <memset+0x7c>
 80185dc:	461e      	mov	r6, r3
 80185de:	4622      	mov	r2, r4
 80185e0:	3a04      	subs	r2, #4
 80185e2:	2a03      	cmp	r2, #3
 80185e4:	f846 5b04 	str.w	r5, [r6], #4
 80185e8:	d8fa      	bhi.n	80185e0 <memset+0x64>
 80185ea:	1f22      	subs	r2, r4, #4
 80185ec:	f022 0203 	bic.w	r2, r2, #3
 80185f0:	3204      	adds	r2, #4
 80185f2:	4413      	add	r3, r2
 80185f4:	f004 0403 	and.w	r4, r4, #3
 80185f8:	b12c      	cbz	r4, 8018606 <memset+0x8a>
 80185fa:	b2c9      	uxtb	r1, r1
 80185fc:	441c      	add	r4, r3
 80185fe:	f803 1b01 	strb.w	r1, [r3], #1
 8018602:	42a3      	cmp	r3, r4
 8018604:	d1fb      	bne.n	80185fe <memset+0x82>
 8018606:	bcf0      	pop	{r4, r5, r6, r7}
 8018608:	4770      	bx	lr
 801860a:	4614      	mov	r4, r2
 801860c:	4603      	mov	r3, r0
 801860e:	e7c6      	b.n	801859e <memset+0x22>

08018610 <strcat>:
 8018610:	0783      	lsls	r3, r0, #30
 8018612:	b570      	push	{r4, r5, r6, lr}
 8018614:	4606      	mov	r6, r0
 8018616:	d11f      	bne.n	8018658 <strcat+0x48>
 8018618:	6803      	ldr	r3, [r0, #0]
 801861a:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 801861e:	ea22 0303 	bic.w	r3, r2, r3
 8018622:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8018626:	bf08      	it	eq
 8018628:	1d03      	addeq	r3, r0, #4
 801862a:	d115      	bne.n	8018658 <strcat+0x48>
 801862c:	4618      	mov	r0, r3
 801862e:	f853 4b04 	ldr.w	r4, [r3], #4
 8018632:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 8018636:	ea25 0404 	bic.w	r4, r5, r4
 801863a:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 801863e:	d0f5      	beq.n	801862c <strcat+0x1c>
 8018640:	7803      	ldrb	r3, [r0, #0]
 8018642:	b12b      	cbz	r3, 8018650 <strcat+0x40>
 8018644:	1c43      	adds	r3, r0, #1
 8018646:	4618      	mov	r0, r3
 8018648:	3301      	adds	r3, #1
 801864a:	7804      	ldrb	r4, [r0, #0]
 801864c:	2c00      	cmp	r4, #0
 801864e:	d1fa      	bne.n	8018646 <strcat+0x36>
 8018650:	f000 f804 	bl	801865c <strcpy>
 8018654:	4630      	mov	r0, r6
 8018656:	bd70      	pop	{r4, r5, r6, pc}
 8018658:	4630      	mov	r0, r6
 801865a:	e7f1      	b.n	8018640 <strcat+0x30>

0801865c <strcpy>:
 801865c:	ea80 0201 	eor.w	r2, r0, r1
 8018660:	4684      	mov	ip, r0
 8018662:	f012 0f03 	tst.w	r2, #3
 8018666:	d14f      	bne.n	8018708 <strcpy+0xac>
 8018668:	f011 0f03 	tst.w	r1, #3
 801866c:	d132      	bne.n	80186d4 <strcpy+0x78>
 801866e:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8018672:	f011 0f04 	tst.w	r1, #4
 8018676:	f851 3b04 	ldr.w	r3, [r1], #4
 801867a:	d00b      	beq.n	8018694 <strcpy+0x38>
 801867c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8018680:	439a      	bics	r2, r3
 8018682:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8018686:	bf04      	itt	eq
 8018688:	f84c 3b04 	streq.w	r3, [ip], #4
 801868c:	f851 3b04 	ldreq.w	r3, [r1], #4
 8018690:	d116      	bne.n	80186c0 <strcpy+0x64>
 8018692:	bf00      	nop
 8018694:	f851 4b04 	ldr.w	r4, [r1], #4
 8018698:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 801869c:	439a      	bics	r2, r3
 801869e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80186a2:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 80186a6:	d10b      	bne.n	80186c0 <strcpy+0x64>
 80186a8:	f84c 3b04 	str.w	r3, [ip], #4
 80186ac:	43a2      	bics	r2, r4
 80186ae:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80186b2:	bf04      	itt	eq
 80186b4:	f851 3b04 	ldreq.w	r3, [r1], #4
 80186b8:	f84c 4b04 	streq.w	r4, [ip], #4
 80186bc:	d0ea      	beq.n	8018694 <strcpy+0x38>
 80186be:	4623      	mov	r3, r4
 80186c0:	f80c 3b01 	strb.w	r3, [ip], #1
 80186c4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80186c8:	ea4f 2333 	mov.w	r3, r3, ror #8
 80186cc:	d1f8      	bne.n	80186c0 <strcpy+0x64>
 80186ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80186d2:	4770      	bx	lr
 80186d4:	f011 0f01 	tst.w	r1, #1
 80186d8:	d006      	beq.n	80186e8 <strcpy+0x8c>
 80186da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80186de:	f80c 2b01 	strb.w	r2, [ip], #1
 80186e2:	2a00      	cmp	r2, #0
 80186e4:	bf08      	it	eq
 80186e6:	4770      	bxeq	lr
 80186e8:	f011 0f02 	tst.w	r1, #2
 80186ec:	d0bf      	beq.n	801866e <strcpy+0x12>
 80186ee:	f831 2b02 	ldrh.w	r2, [r1], #2
 80186f2:	f012 0fff 	tst.w	r2, #255	; 0xff
 80186f6:	bf16      	itet	ne
 80186f8:	f82c 2b02 	strhne.w	r2, [ip], #2
 80186fc:	f88c 2000 	strbeq.w	r2, [ip]
 8018700:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 8018704:	d1b3      	bne.n	801866e <strcpy+0x12>
 8018706:	4770      	bx	lr
 8018708:	f811 2b01 	ldrb.w	r2, [r1], #1
 801870c:	f80c 2b01 	strb.w	r2, [ip], #1
 8018710:	2a00      	cmp	r2, #0
 8018712:	d1f9      	bne.n	8018708 <strcpy+0xac>
 8018714:	4770      	bx	lr
 8018716:	bf00      	nop

08018718 <cmd_data>:
 8018718:	6365 6f68 0000 0000 0000 0000 0000 0000     echo............
 8018728:	0000 0000 1f6d 0800 6853 776f 7720 726f     ....m...Show wor
 8018738:	7364 7920 756f 6920 706e 7475 002e 0000     ds you input....
	...
 8018b30:	7865 6f70 7472 0000 0000 0000 0000 0000     export..........
 8018b40:	0000 0000 1bcd 0800 7845 6f70 7472 6520     ........Export e
 8018b50:	766e 7269 6e6f 656d 746e 7620 7261 6169     nvironment varia
 8018b60:	6c62 7365 002e 0000 0000 0000 0000 0000     bles............
	...
 8018f48:	6568 706c 0000 0000 0000 0000 0000 0000     help............
 8018f58:	0000 0000 1e7d 0800 694c 7473 6120 6c6c     ....}...List all
 8018f68:	6320 6d6f 616d 646e 2073 6f79 2075 6163      commands you ca
 8018f78:	206e 7375 2e65 0000 0000 0000 0000 0000     n use...........
	...
 8019360:	6968 7473 726f 0079 0000 0000 0000 0000     history.........
 8019370:	0000 0000 214d 0800 6853 776f 6c20 7461     ....M!..Show lat
 8019380:	7365 2074 6f63 6d6d 6e61 7364 6520 746e     est commands ent
 8019390:	7265 6465 002e 0000 0000 0000 0000 0000     ered............
	...
 8019778:	616d 006e 0000 0000 0000 0000 0000 0000     man.............
 8019788:	0000 0000 203d 0800 614d 756e 6c61 7020     ....= ..Manual p
 8019798:	6761 7265 002e 0000 0000 0000 0000 0000     ager............
	...
 8019b90:	7370 0000 0000 0000 0000 0000 0000 0000     ps..............
 8019ba0:	0000 0000 1ca1 0800 694c 7473 6120 6c6c     ........List all
 8019bb0:	7420 6568 7020 6f72 6563 7373 7365 002e      the processes..
	...
 8019fa8:	7878 0064 0000 0000 0000 0000 0000 0000     xxd.............
 8019fb8:	0000 0000 22ad 0800 614d 656b 6120 6820     ....."..Make a h
 8019fc8:	7865 7564 706d 002e 0000 0000 0000 0000     exdump..........
	...
 801a3c0:	642f 7665 742f 7974 2f30 756f 0074 0000     /dev/tty0/out...
 801a3d0:	642f 7665 742f 7974 2f30 6e69 0000 0000     /dev/tty0/in....
 801a3e0:	6548 6c6c 2c6f 5720 726f 646c 0a21 0000     Hello, World!...
 801a3f0:	742f 706d 6d2f 7571 7565 2f65 756f 0074     /tmp/mqueue/out.
 801a400:	6548 6c6c 206f 0a31 0000 0000 6548 6c6c     Hello 1.....Hell
 801a410:	206f 0a32 0000 0000 6f47 3a74 0000 0000     o 2.....Got:....
 801a420:	2008 0008 6873 6e65 7767 6e65 7340 6568     . ..shengwen@she
 801a430:	676e 6577 2d6e 5453 334d 3a32 247e 0020     ngwen-STM32:~$ .
 801a440:	203a 6f63 6d6d 6e61 2064 6f6e 2074 6f66     : command not fo
 801a450:	6e75 0064 4950 2044 5453 5441 5355 5020     und.PID STATUS P
 801a460:	4952 524f 5449 0059 3130 3332 3534 3736     RIORITY.01234567
 801a470:	3938 4241 4443 4645 0000 0000 203a 0000     89ABCDEF....: ..
 801a480:	6854 7369 7320 7379 6574 206d 6168 2073     This system has 
 801a490:	6f63 6d6d 6e61 7364 6120 2073 6f66 6c6c     commands as foll
 801a4a0:	776f 0d0a 0000 0000 6e2d 0000 0020 0000     ow......-n.. ...
 801a4b0:	414e 454d 203a 0000 4544 4353 4952 5450     NAME: ..DESCRIPT
 801a4c0:	4f49 3a4e 0020 0000 3130 3332 3534 3736     ION: ...01234567
 801a4d0:	3938 6261 6463 6665 0000 0000 7878 3a64     89abcdef....xxd:
 801a4e0:	0020 0000 203a 6f4e 7320 6375 2068 6966      ...: No such fi
 801a4f0:	656c 6f20 2072 6964 6572 7463 726f 0d79     le or directory.
 801a500:	000a 0000 003a 0000 2020 0000 0a0d 0000     ....:...  ......
 801a510:	642f 7665 722f 6d6f 0030 0000 002f 0000     /dev/rom0.../...
 801a520:	6f72 666d 0073 0000 732f 7379 702f 7461     romfs.../sys/pat
 801a530:	7368 7265 6576 0072 642f 7665 722f 6d6f     hserver./dev/rom
 801a540:	0030 0000 6f72 666d 0073 0000 797a 7778     0...romfs...zyxw
 801a550:	7576 7374 7172 6f70 6d6e 6b6c 696a 6768     vutsrqponmlkjihg
 801a560:	6566 6364 6162 3839 3637 3435 3233 3031     fedcba9876543210
 801a570:	3231 3433 3635 3837 6139 6362 6564 6766     123456789abcdefg
 801a580:	6968 6b6a 6d6c 6f6e 7170 7372 7574 7776     hijklmnopqrstuvw
 801a590:	7978 007a                                   xyz.

0801a594 <GPIO_PIN>:
 801a594:	2000 4000                                   . .@

0801a598 <GPIO_CLK>:
 801a598:	0040 0000 0040 0000                         @...@...

0801a5a0 <BUTTON_PIN>:
 801a5a0:	0001 0000                                   ....

0801a5a4 <BUTTON_CLK>:
 801a5a4:	0001 0000                                   ....

0801a5a8 <BUTTON_EXTI_LINE>:
 801a5a8:	0001 0000                                   ....

0801a5ac <BUTTON_PORT_SOURCE>:
 801a5ac:	0000 0000                                   ....

0801a5b0 <BUTTON_PIN_SOURCE>:
 801a5b0:	0000 0000                                   ....

0801a5b4 <BUTTON_IRQn>:
 801a5b4:	0006 0000                                   ....

0801a5b8 <ASCII16x24_Table>:
	...
 801a5e8:	0000 0180 0180 0180 0180 0180 0180 0180     ................
 801a5f8:	0180 0180 0180 0180 0180 0180 0000 0000     ................
 801a608:	0180 0180 0000 0000 0000 0000 0000 0000     ................
 801a618:	0000 0000 00cc 00cc 00cc 00cc 00cc 00cc     ................
	...
 801a654:	0c60 0c60 0c60 0630 0630 1ffe 1ffe 0630     `.`.`.0.0.....0.
 801a664:	0738 0318 1ffe 1ffe 0318 0318 018c 018c     8...............
 801a674:	018c 0000 0000 0080 03e0 0ff8 0e9c 1c8c     ................
 801a684:	188c 008c 0098 01f8 07e0 0e80 1c80 188c     ................
 801a694:	188c 189c 0cb8 0ff0 03e0 0080 0080 0000     ................
	...
 801a6ac:	0000 180e 0c1b 0c11 0611 0611 0311 0311     ................
 801a6bc:	019b 018e 38c0 6cc0 4460 4460 4430 4430     .....8.l`D`D0D0D
 801a6cc:	4418 6c18 380c 0000 0000 0000 0000 01e0     .D.l.8..........
 801a6dc:	03f0 0738 0618 0618 0330 01f0 00f0 00f8     ..8.....0.......
 801a6ec:	319c 330e 1e06 1c06 1c06 3f06 73fc 21f0     .1.3.......?.s.!
	...
 801a70c:	000c 000c 000c 000c 000c 000c 0000 0000     ................
	...
 801a738:	0000 0200 0300 0180 00c0 00c0 0060 0060     ............`.`.
 801a748:	0030 0030 0030 0030 0030 0030 0030 0030     0.0.0.0.0.0.0.0.
 801a758:	0060 0060 00c0 00c0 0180 0300 0200 0000     `.`.............
 801a768:	0000 0020 0060 00c0 0180 0180 0300 0300     .. .`...........
 801a778:	0600 0600 0600 0600 0600 0600 0600 0600     ................
 801a788:	0300 0300 0180 0180 00c0 0060 0020 0000     ..........`. ...
	...
 801a7a4:	00c0 00c0 06d8 07f8 01e0 0330 0738 0000     ..........0.8...
	...
 801a7d4:	0180 0180 0180 0180 0180 3ffc 3ffc 0180     ...........?.?..
 801a7e4:	0180 0180 0180 0180 0000 0000 0000 0000     ................
	...
 801a818:	0000 0180 0180 0100 0100 0080 0000 0000     ................
	...
 801a840:	07e0 07e0 0000 0000 0000 0000 0000 0000     ................
	...
 801a878:	0000 00c0 00c0 0000 0000 0000 0000 0000     ................
 801a888:	0000 0c00 0c00 0600 0600 0600 0300 0300     ................
 801a898:	0300 0380 0180 0180 0180 00c0 00c0 00c0     ................
 801a8a8:	0060 0060 0000 0000 0000 0000 0000 0000     `.`.............
 801a8b8:	0000 03e0 07f0 0e38 0c18 180c 180c 180c     ......8.........
 801a8c8:	180c 180c 180c 180c 180c 180c 0c18 0e38     ..............8.
 801a8d8:	07f0 03e0 0000 0000 0000 0000 0000 0000     ................
 801a8e8:	0000 0100 0180 01c0 01f0 0198 0188 0180     ................
 801a8f8:	0180 0180 0180 0180 0180 0180 0180 0180     ................
 801a908:	0180 0180 0000 0000 0000 0000 0000 0000     ................
 801a918:	0000 03e0 0ff8 0c18 180c 180c 1800 1800     ................
 801a928:	0c00 0600 0300 0180 00c0 0060 0030 0018     ..........`.0...
 801a938:	1ffc 1ffc 0000 0000 0000 0000 0000 0000     ................
 801a948:	0000 01e0 07f8 0e18 0c0c 0c0c 0c00 0600     ................
 801a958:	03c0 07c0 0c00 1800 1800 180c 180c 0c18     ................
 801a968:	07f8 03e0 0000 0000 0000 0000 0000 0000     ................
 801a978:	0000 0c00 0e00 0f00 0f00 0d80 0cc0 0c60     ..............`.
 801a988:	0c60 0c30 0c18 0c0c 3ffc 3ffc 0c00 0c00     `.0......?.?....
 801a998:	0c00 0c00 0000 0000 0000 0000 0000 0000     ................
 801a9a8:	0000 0ff8 0ff8 0018 0018 000c 03ec 07fc     ................
 801a9b8:	0e1c 1c00 1800 1800 1800 180c 0c1c 0e18     ................
 801a9c8:	07f8 03e0 0000 0000 0000 0000 0000 0000     ................
 801a9d8:	0000 07c0 0ff0 1c38 1818 0018 000c 03cc     ......8.........
 801a9e8:	0fec 0e3c 1c1c 180c 180c 180c 1c18 0e38     ..<...........8.
 801a9f8:	07f0 03e0 0000 0000 0000 0000 0000 0000     ................
 801aa08:	0000 1ffc 1ffc 0c00 0600 0600 0300 0380     ................
 801aa18:	0180 01c0 00c0 00e0 0060 0060 0070 0030     ........`.`.p.0.
 801aa28:	0030 0030 0000 0000 0000 0000 0000 0000     0.0.............
 801aa38:	0000 03e0 07f0 0e38 0c18 0c18 0c18 0638     ......8.......8.
 801aa48:	07f0 07f0 0c18 180c 180c 180c 180c 0c38     ..............8.
 801aa58:	0ff8 03e0 0000 0000 0000 0000 0000 0000     ................
 801aa68:	0000 03e0 07f0 0e38 0c1c 180c 180c 180c     ......8.........
 801aa78:	1c1c 1e38 1bf8 19e0 1800 0c00 0c00 0e1c     ..8.............
 801aa88:	07f8 01f0 0000 0000 0000 0000 0000 0000     ................
	...
 801aaa4:	0180 0180 0000 0000 0000 0000 0000 0000     ................
 801aab4:	0000 0000 0180 0180 0000 0000 0000 0000     ................
	...
 801aad4:	0180 0180 0000 0000 0000 0000 0000 0000     ................
 801aae4:	0000 0000 0180 0180 0100 0100 0080 0000     ................
	...
 801ab08:	1000 1c00 0f80 03e0 00f8 0018 00f8 03e0     ................
 801ab18:	0f80 1c00 1000 0000 0000 0000 0000 0000     ................
	...
 801ab38:	1ff8 0000 0000 0000 1ff8 0000 0000 0000     ................
	...
 801ab68:	0008 0038 01f0 07c0 1f00 1800 1f00 07c0     ..8.............
 801ab78:	01f0 0038 0008 0000 0000 0000 0000 0000     ..8.............
 801ab88:	0000 03e0 0ff8 0c18 180c 180c 1800 0c00     ................
 801ab98:	0600 0300 0180 00c0 00c0 00c0 0000 0000     ................
 801aba8:	00c0 00c0 0000 0000 0000 0000 0000 0000     ................
 801abb8:	0000 0000 07e0 1818 2004 29c2 4a22 4411     ......... .)"J.D
 801abc8:	4409 4409 4409 2209 1311 0ce2 4002 2004     .D.D.D.".....@. 
 801abd8:	1818 07e0 0000 0000 0000 0000 0000 0000     ................
 801abe8:	0000 0380 0380 06c0 06c0 06c0 0c60 0c60     ............`.`.
 801abf8:	1830 1830 1830 3ff8 3ff8 701c 600c 600c     0.0.0..?.?.p.`.`
 801ac08:	c006 c006 0000 0000 0000 0000 0000 0000     ................
 801ac18:	0000 03fc 0ffc 0c0c 180c 180c 180c 0c0c     ................
 801ac28:	07fc 0ffc 180c 300c 300c 300c 300c 180c     .......0.0.0.0..
 801ac38:	1ffc 07fc 0000 0000 0000 0000 0000 0000     ................
 801ac48:	0000 07c0 1ff0 3838 301c 700c 6006 0006     ......88.0.p.`..
 801ac58:	0006 0006 0006 0006 0006 6006 700c 301c     ...........`.p.0
 801ac68:	1ff0 07e0 0000 0000 0000 0000 0000 0000     ................
 801ac78:	0000 03fe 0ffe 0e06 1806 1806 3006 3006     .............0.0
 801ac88:	3006 3006 3006 3006 3006 1806 1806 0e06     .0.0.0.0.0......
 801ac98:	0ffe 03fe 0000 0000 0000 0000 0000 0000     ................
 801aca8:	0000 3ffc 3ffc 000c 000c 000c 000c 000c     ...?.?..........
 801acb8:	1ffc 1ffc 000c 000c 000c 000c 000c 000c     ................
 801acc8:	3ffc 3ffc 0000 0000 0000 0000 0000 0000     .?.?............
 801acd8:	0000 3ff8 3ff8 0018 0018 0018 0018 0018     ...?.?..........
 801ace8:	1ff8 1ff8 0018 0018 0018 0018 0018 0018     ................
 801acf8:	0018 0018 0000 0000 0000 0000 0000 0000     ................
 801ad08:	0000 0fe0 3ff8 783c 600e e006 c007 0003     .....?<x.`......
 801ad18:	0003 fe03 fe03 c003 c007 c006 c00e f03c     ..............<.
 801ad28:	3ff8 0fe0 0000 0000 0000 0000 0000 0000     .?..............
 801ad38:	0000 300c 300c 300c 300c 300c 300c 300c     ...0.0.0.0.0.0.0
 801ad48:	3ffc 3ffc 300c 300c 300c 300c 300c 300c     .?.?.0.0.0.0.0.0
 801ad58:	300c 300c 0000 0000 0000 0000 0000 0000     .0.0............
 801ad68:	0000 0180 0180 0180 0180 0180 0180 0180     ................
 801ad78:	0180 0180 0180 0180 0180 0180 0180 0180     ................
 801ad88:	0180 0180 0000 0000 0000 0000 0000 0000     ................
 801ad98:	0000 0600 0600 0600 0600 0600 0600 0600     ................
 801ada8:	0600 0600 0600 0600 0600 0618 0618 0738     ..............8.
 801adb8:	03f0 01e0 0000 0000 0000 0000 0000 0000     ................
 801adc8:	0000 3006 1806 0c06 0606 0306 0186 00c6     ...0............
 801add8:	0066 0076 00de 018e 0306 0606 0c06 1806     f.v.............
 801ade8:	3006 6006 0000 0000 0000 0000 0000 0000     .0.`............
 801adf8:	0000 0018 0018 0018 0018 0018 0018 0018     ................
 801ae08:	0018 0018 0018 0018 0018 0018 0018 0018     ................
 801ae18:	1ff8 1ff8 0000 0000 0000 0000 0000 0000     ................
 801ae28:	0000 e00e f01e f01e f01e d836 d836 d836     ..........6.6.6.
 801ae38:	d836 cc66 cc66 cc66 c6c6 c6c6 c6c6 c6c6     6.f.f.f.........
 801ae48:	c386 c386 0000 0000 0000 0000 0000 0000     ................
 801ae58:	0000 300c 301c 303c 303c 306c 306c 30cc     ...0.0<0<0l0l0.0
 801ae68:	30cc 318c 330c 330c 360c 360c 3c0c 3c0c     .0.1.3.3.6.6.<.<
 801ae78:	380c 300c 0000 0000 0000 0000 0000 0000     .8.0............
 801ae88:	0000 07e0 1ff8 381c 700e 6006 c003 c003     .......8.p.`....
 801ae98:	c003 c003 c003 c003 c003 6006 700e 381c     ...........`.p.8
 801aea8:	1ff8 07e0 0000 0000 0000 0000 0000 0000     ................
 801aeb8:	0000 0ffc 1ffc 380c 300c 300c 300c 300c     .......8.0.0.0.0
 801aec8:	180c 1ffc 07fc 000c 000c 000c 000c 000c     ................
 801aed8:	000c 000c 0000 0000 0000 0000 0000 0000     ................
 801aee8:	0000 07e0 1ff8 381c 700e 6006 e003 c003     .......8.p.`....
 801aef8:	c003 c003 c003 c003 e007 6306 3f0e 3c1c     ...........c.?.<
 801af08:	3ff8 f7e0 c000 0000 0000 0000 0000 0000     .?..............
 801af18:	0000 0ffe 1ffe 3806 3006 3006 3006 3806     .......8.0.0.0.8
 801af28:	1ffe 07fe 0306 0606 0c06 1806 1806 3006     ...............0
 801af38:	3006 6006 0000 0000 0000 0000 0000 0000     .0.`............
 801af48:	0000 03e0 0ff8 0c1c 180c 180c 000c 001c     ................
 801af58:	03f8 0fe0 1e00 3800 3006 3006 300e 1c1c     .......8.0.0.0..
 801af68:	0ff8 07e0 0000 0000 0000 0000 0000 0000     ................
 801af78:	0000 7ffe 7ffe 0180 0180 0180 0180 0180     ................
 801af88:	0180 0180 0180 0180 0180 0180 0180 0180     ................
 801af98:	0180 0180 0000 0000 0000 0000 0000 0000     ................
 801afa8:	0000 300c 300c 300c 300c 300c 300c 300c     ...0.0.0.0.0.0.0
 801afb8:	300c 300c 300c 300c 300c 300c 300c 1818     .0.0.0.0.0.0.0..
 801afc8:	1ff8 07e0 0000 0000 0000 0000 0000 0000     ................
 801afd8:	0000 6003 3006 3006 3006 180c 180c 180c     ...`.0.0.0......
 801afe8:	0c18 0c18 0e38 0630 0630 0770 0360 0360     ....8.0.0.p.`.`.
 801aff8:	01c0 01c0 0000 0000 0000 0000 0000 0000     ................
 801b008:	0000 6003 61c3 61c3 61c3 3366 3366 3366     ...`.a.a.af3f3f3
 801b018:	3366 3366 3366 1b6c 1b6c 1b6c 1a2c 1e3c     f3f3f3l.l.l.,.<.
 801b028:	0e38 0e38 0000 0000 0000 0000 0000 0000     8.8.............
 801b038:	0000 e00f 700c 3018 1830 0c70 0e60 07c0     .....p.00.p.`...
 801b048:	0380 0380 03c0 06e0 0c70 1c30 1818 300c     ........p.0....0
 801b058:	600e e007 0000 0000 0000 0000 0000 0000     .`..............
 801b068:	0000 c003 6006 300c 381c 1838 0c30 0660     .....`.0.88.0.`.
 801b078:	07e0 03c0 0180 0180 0180 0180 0180 0180     ................
 801b088:	0180 0180 0000 0000 0000 0000 0000 0000     ................
 801b098:	0000 7ffc 7ffc 6000 3000 1800 0c00 0600     .......`.0......
 801b0a8:	0300 0180 00c0 0060 0030 0018 000c 0006     ......`.0.......
 801b0b8:	7ffe 7ffe 0000 0000 0000 0000 0000 0000     ................
 801b0c8:	0000 03e0 03e0 0060 0060 0060 0060 0060     ......`.`.`.`.`.
 801b0d8:	0060 0060 0060 0060 0060 0060 0060 0060     `.`.`.`.`.`.`.`.
 801b0e8:	0060 0060 0060 0060 0060 03e0 03e0 0000     `.`.`.`.`.......
 801b0f8:	0000 0030 0030 0060 0060 0060 00c0 00c0     ..0.0.`.`.`.....
 801b108:	00c0 01c0 0180 0180 0180 0300 0300 0300     ................
 801b118:	0600 0600 0000 0000 0000 0000 0000 0000     ................
 801b128:	0000 03e0 03e0 0300 0300 0300 0300 0300     ................
 801b138:	0300 0300 0300 0300 0300 0300 0300 0300     ................
 801b148:	0300 0300 0300 0300 0300 03e0 03e0 0000     ................
 801b158:	0000 0000 01c0 01c0 0360 0360 0360 0630     ........`.`.`.0.
 801b168:	0630 0c18 0c18 0000 0000 0000 0000 0000     0...............
	...
 801b1a8:	0000 ffff ffff 0000 0000 0000 0000 0000     ................
 801b1b8:	0000 000c 000c 000c 000c 000c 000c 0000     ................
	...
 801b1f4:	03f0 07f8 0c1c 0c0c 0f00 0ff0 0cf8 0c0c     ................
 801b204:	0c0c 0f1c 0ff8 18f0 0000 0000 0000 0000     ................
 801b214:	0000 0000 0000 0018 0018 0018 0018 0018     ................
 801b224:	03d8 0ff8 0c38 1818 1818 1818 1818 1818     ....8...........
 801b234:	1818 0c38 0ff8 03d8 0000 0000 0000 0000     ..8.............
	...
 801b254:	03c0 07f0 0e30 0c18 0018 0018 0018 0018     ....0...........
 801b264:	0c18 0e30 07f0 03c0 0000 0000 0000 0000     ..0.............
 801b274:	0000 0000 0000 1800 1800 1800 1800 1800     ................
 801b284:	1bc0 1ff0 1c30 1818 1818 1818 1818 1818     ....0...........
 801b294:	1818 1c30 1ff0 1bc0 0000 0000 0000 0000     ..0.............
	...
 801b2b4:	03c0 0ff0 0c30 1818 1ff8 1ff8 0018 0018     ....0...........
 801b2c4:	1838 1c30 0ff0 07c0 0000 0000 0000 0000     8.0.............
 801b2d4:	0000 0000 0000 0f80 0fc0 00c0 00c0 00c0     ................
 801b2e4:	07f0 07f0 00c0 00c0 00c0 00c0 00c0 00c0     ................
 801b2f4:	00c0 00c0 00c0 00c0 0000 0000 0000 0000     ................
	...
 801b314:	0de0 0ff8 0e18 0c0c 0c0c 0c0c 0c0c 0c0c     ................
 801b324:	0c0c 0e18 0ff8 0de0 0c00 0c0c 061c 07f8     ................
 801b334:	01f0 0000 0000 0018 0018 0018 0018 0018     ................
 801b344:	07d8 0ff8 1c38 1818 1818 1818 1818 1818     ....8...........
 801b354:	1818 1818 1818 1818 0000 0000 0000 0000     ................
 801b364:	0000 0000 0000 00c0 00c0 0000 0000 0000     ................
 801b374:	00c0 00c0 00c0 00c0 00c0 00c0 00c0 00c0     ................
 801b384:	00c0 00c0 00c0 00c0 0000 0000 0000 0000     ................
 801b394:	0000 0000 0000 00c0 00c0 0000 0000 0000     ................
 801b3a4:	00c0 00c0 00c0 00c0 00c0 00c0 00c0 00c0     ................
 801b3b4:	00c0 00c0 00c0 00c0 00c0 00c0 00c0 00f8     ................
 801b3c4:	0078 0000 0000 000c 000c 000c 000c 000c     x...............
 801b3d4:	0c0c 060c 030c 018c 00cc 006c 00fc 019c     ..........l.....
 801b3e4:	038c 030c 060c 0c0c 0000 0000 0000 0000     ................
 801b3f4:	0000 0000 0000 00c0 00c0 00c0 00c0 00c0     ................
 801b404:	00c0 00c0 00c0 00c0 00c0 00c0 00c0 00c0     ................
 801b414:	00c0 00c0 00c0 00c0 0000 0000 0000 0000     ................
	...
 801b434:	3c7c 7eff e3c7 c183 c183 c183 c183 c183     |<.~............
 801b444:	c183 c183 c183 c183 0000 0000 0000 0000     ................
	...
 801b464:	0798 0ff8 1c38 1818 1818 1818 1818 1818     ....8...........
 801b474:	1818 1818 1818 1818 0000 0000 0000 0000     ................
	...
 801b494:	03c0 0ff0 0c30 1818 1818 1818 1818 1818     ....0...........
 801b4a4:	1818 0c30 0ff0 03c0 0000 0000 0000 0000     ..0.............
	...
 801b4c4:	03d8 0ff8 0c38 1818 1818 1818 1818 1818     ....8...........
 801b4d4:	1818 0c38 0ff8 03d8 0018 0018 0018 0018     ..8.............
 801b4e4:	0018 0000 0000 0000 0000 0000 0000 0000     ................
 801b4f4:	1bc0 1ff0 1c30 1818 1818 1818 1818 1818     ....0...........
 801b504:	1818 1c30 1ff0 1bc0 1800 1800 1800 1800     ..0.............
 801b514:	1800 0000 0000 0000 0000 0000 0000 0000     ................
 801b524:	07b0 03f0 0070 0030 0030 0030 0030 0030     ....p.0.0.0.0.0.
 801b534:	0030 0030 0030 0030 0000 0000 0000 0000     0.0.0.0.........
	...
 801b554:	03e0 03f0 0e38 0c18 0038 03f0 07c0 0c00     ....8...8.......
 801b564:	0c18 0e38 07f0 03e0 0000 0000 0000 0000     ..8.............
	...
 801b57c:	0080 00c0 00c0 00c0 07f0 07f0 00c0 00c0     ................
 801b58c:	00c0 00c0 00c0 00c0 00c0 00c0 07c0 0780     ................
	...
 801b5b4:	1818 1818 1818 1818 1818 1818 1818 1818     ................
 801b5c4:	1818 1c38 1ff0 19e0 0000 0000 0000 0000     ..8.............
	...
 801b5e4:	180c 0c18 0c18 0c18 0630 0630 0630 0360     ........0.0.0.`.
 801b5f4:	0360 0360 01c0 01c0 0000 0000 0000 0000     `.`.............
	...
 801b614:	41c1 41c1 61c3 6363 6363 6363 3636 3636     .A.A.acccccc6666
 801b624:	3636 1c1c 1c1c 1c1c 0000 0000 0000 0000     66..............
	...
 801b644:	381c 1c38 0c30 0660 0360 0360 0360 0360     .88.0.`.`.`.`.`.
 801b654:	0660 0c30 1c38 381c 0000 0000 0000 0000     `.0.8..8........
	...
 801b674:	3018 1830 1830 1870 0c60 0c60 0ce0 06c0     .00.0.p.`.`.....
 801b684:	06c0 0380 0380 0380 0180 0180 01c0 00f0     ................
 801b694:	0070 0000 0000 0000 0000 0000 0000 0000     p...............
 801b6a4:	1ffc 1ffc 0c00 0600 0300 0180 00c0 0060     ..............`.
 801b6b4:	0030 0018 1ffc 1ffc 0000 0000 0000 0000     0...............
 801b6c4:	0000 0000 0000 0300 0180 00c0 00c0 00c0     ................
 801b6d4:	00c0 00c0 00c0 0060 0060 0030 0060 0040     ......`.`.0.`.@.
 801b6e4:	00c0 00c0 00c0 00c0 00c0 00c0 0180 0300     ................
 801b6f4:	0000 0000 0000 0180 0180 0180 0180 0180     ................
 801b704:	0180 0180 0180 0180 0180 0180 0180 0180     ................
 801b714:	0180 0180 0180 0180 0180 0180 0180 0180     ................
 801b724:	0180 0000 0000 0060 00c0 01c0 0180 0180     ......`.........
 801b734:	0180 0180 0180 0300 0300 0600 0300 0100     ................
 801b744:	0180 0180 0180 0180 0180 0180 00c0 0060     ..............`.
	...
 801b768:	10f0 1ff8 0f08 0000 0000 0000 0000 0000     ................
	...

0801b788 <ASCII12x12_Table>:
	...
 801b7a0:	0000 2000 2000 2000 2000 2000 2000 2000     ... . . . . . . 
 801b7b0:	0000 2000 0000 0000 0000 5000 5000 5000     ... .......P.P.P
	...
 801b7d0:	0000 0900 0900 1200 7f00 1200 7f00 1200     ................
 801b7e0:	2400 2400 0000 0000 1000 3800 5400 5000     .$.$.......8.T.P
 801b7f0:	5000 3800 1400 5400 5400 3800 1000 0000     .P.8...T.T.8....
 801b800:	0000 3080 4900 4900 4a00 32c0 0520 0920     ...0.I.I.J.2 . .
 801b810:	0920 10c0 0000 0000 0000 0c00 1200 1200      ...............
 801b820:	1400 1800 2500 2300 2300 1d80 0000 0000     .....%.#.#......
 801b830:	0000 4000 4000 4000 0000 0000 0000 0000     ...@.@.@........
	...
 801b848:	0000 0800 1000 1000 2000 2000 2000 2000     ......... . . . 
 801b858:	2000 2000 1000 1000 0000 4000 2000 2000     . . .......@. . 
 801b868:	1000 1000 1000 1000 1000 1000 2000 2000     ............. . 
 801b878:	0000 2000 7000 2000 5000 0000 0000 0000     ... .p. .P......
	...
 801b894:	0000 0800 0800 7f00 0800 0800 0000 0000     ................
	...
 801b8b8:	0000 2000 2000 4000 0000 0000 0000 0000     ... . .@........
 801b8c8:	0000 0000 7000 0000 0000 0000 0000 0000     .....p..........
	...
 801b8e8:	0000 2000 0000 0000 0000 1000 1000 1000     ... ............
 801b8f8:	2000 2000 2000 2000 4000 4000 0000 0000     . . . . .@.@....
 801b908:	0000 1000 2800 4400 4400 4400 4400 4400     .....(.D.D.D.D.D
 801b918:	2800 1000 0000 0000 0000 1000 3000 5000     .(...........0.P
 801b928:	1000 1000 1000 1000 1000 1000 0000 0000     ................
 801b938:	0000 3000 4800 4400 0400 0800 1000 2000     ...0.H.D....... 
 801b948:	4000 7c00 0000 0000 0000 3000 4800 0400     .@.|.......0.H..
 801b958:	0800 1000 0800 4400 4800 3000 0000 0000     .......D.H.0....
 801b968:	0000 0800 1800 1800 2800 2800 4800 7c00     .........(.(.H.|
 801b978:	0800 0800 0000 0000 0000 3c00 2000 4000     ...........<. .@
 801b988:	7000 4800 0400 4400 4800 3000 0000 0000     .p.H...D.H.0....
 801b998:	0000 1800 2400 4000 5000 6800 4400 4400     .....$.@.P.h.D.D
 801b9a8:	2800 1000 0000 0000 0000 7c00 0400 0800     .(.........|....
 801b9b8:	1000 1000 1000 2000 2000 2000 0000 0000     ....... . . ....
 801b9c8:	0000 1000 2800 4400 2800 1000 2800 4400     .....(.D.(...(.D
 801b9d8:	2800 1000 0000 0000 0000 1000 2800 4400     .(...........(.D
 801b9e8:	4400 2c00 1400 0400 4800 3000 0000 0000     .D.,.....H.0....
 801b9f8:	0000 0000 0000 2000 0000 0000 0000 0000     ....... ........
 801ba08:	0000 2000 0000 0000 0000 0000 0000 2000     ... ........... 
	...
 801ba20:	0000 2000 2000 4000 0000 0000 0400 0800     ... . .@........
 801ba30:	3000 4000 3000 0800 0400 0000 0000 0000     .0.@.0..........
 801ba40:	0000 0000 0000 7c00 0000 0000 7c00 0000     .......|.....|..
	...
 801ba5c:	4000 2000 1800 0400 1800 2000 4000 0000     .@. ....... .@..
 801ba6c:	0000 0000 0000 3800 6400 4400 0400 0800     .......8.d.D....
 801ba7c:	1000 1000 0000 1000 0000 0000 0000 0f80     ................
 801ba8c:	1040 2ea0 51a0 5120 5120 5120 5320 4dc0     @....Q Q Q Q S.M
 801ba9c:	2020 1040 0000 0800 1400 1400 1400 2200       @............"
 801baac:	3e00 2200 4100 4100 0000 0000 0000 3c00     .>.".A.A.......<
 801babc:	2200 2200 2200 3c00 2200 2200 2200 3c00     .".".".<.".".".<
 801bacc:	0000 0000 0000 0e00 1100 2100 2000 2000     ...........!. . 
 801badc:	2000 2100 1100 0e00 0000 0000 0000 3c00     . .!...........<
 801baec:	2200 2100 2100 2100 2100 2100 2200 3c00     .".!.!.!.!.!.".<
 801bafc:	0000 0000 0000 3e00 2000 2000 2000 3e00     .......>. . . .>
 801bb0c:	2000 2000 2000 3e00 0000 0000 0000 3e00     . . . .>.......>
 801bb1c:	2000 2000 2000 3c00 2000 2000 2000 2000     . . . .<. . . . 
 801bb2c:	0000 0000 0000 0e00 1100 2100 2000 2700     ...........!. .'
 801bb3c:	2100 2100 1100 0e00 0000 0000 0000 2100     .!.!...........!
 801bb4c:	2100 2100 2100 3f00 2100 2100 2100 2100     .!.!.!.?.!.!.!.!
 801bb5c:	0000 0000 0000 2000 2000 2000 2000 2000     ....... . . . . 
 801bb6c:	2000 2000 2000 2000 0000 0000 0000 0800     . . . . ........
 801bb7c:	0800 0800 0800 0800 0800 4800 4800 3000     ...........H.H.0
 801bb8c:	0000 0000 0000 2200 2400 2800 2800 3800     .......".$.(.(.8
 801bb9c:	2800 2400 2400 2200 0000 0000 0000 2000     .(.$.$."....... 
 801bbac:	2000 2000 2000 2000 2000 2000 2000 3e00     . . . . . . . .>
 801bbbc:	0000 0000 0000 2080 3180 3180 3180 2a80     ....... .1.1.1.*
 801bbcc:	2a80 2a80 2a80 2480 0000 0000 0000 2100     .*.*.*.$.......!
 801bbdc:	3100 3100 2900 2900 2500 2300 2300 2100     .1.1.).).%.#.#.!
 801bbec:	0000 0000 0000 0c00 1200 2100 2100 2100     ...........!.!.!
 801bbfc:	2100 2100 1200 0c00 0000 0000 0000 3c00     .!.!...........<
 801bc0c:	2200 2200 2200 3c00 2000 2000 2000 2000     .".".".<. . . . 
 801bc1c:	0000 0000 0000 0c00 1200 2100 2100 2100     ...........!.!.!
 801bc2c:	2100 2100 1600 0d00 0100 0000 0000 3e00     .!.!...........>
 801bc3c:	2100 2100 2100 3e00 2400 2200 2100 2080     .!.!.!.>.$.".!. 
 801bc4c:	0000 0000 0000 1c00 2200 2200 2000 1c00     .........".". ..
 801bc5c:	0200 2200 2200 1c00 0000 0000 0000 3e00     ...".".........>
 801bc6c:	0800 0800 0800 0800 0800 0800 0800 0800     ................
 801bc7c:	0000 0000 0000 2100 2100 2100 2100 2100     .......!.!.!.!.!
 801bc8c:	2100 2100 1200 0c00 0000 0000 0000 4100     .!.!...........A
 801bc9c:	4100 2200 2200 2200 1400 1400 1400 0800     .A."."."........
 801bcac:	0000 0000 0000 4440 4a40 2a40 2a80 2a80     ......@D@J@*.*.*
 801bcbc:	2a80 2a80 2a80 1100 0000 0000 0000 4100     .*.*.*.........A
 801bccc:	2200 1400 1400 0800 1400 1400 2200 4100     ."...........".A
 801bcdc:	0000 0000 0000 4100 2200 2200 1400 0800     .......A."."....
 801bcec:	0800 0800 0800 0800 0000 0000 0000 7e00     ...............~
 801bcfc:	0200 0400 0800 1000 1000 2000 4000 7e00     ........... .@.~
 801bd0c:	0000 0000 0000 3000 2000 2000 2000 2000     .......0. . . . 
 801bd1c:	2000 2000 2000 2000 2000 2000 0000 4000     . . . . . . ...@
 801bd2c:	4000 2000 2000 2000 2000 2000 1000 1000     .@. . . . . ....
 801bd3c:	0000 0000 0000 6000 2000 2000 2000 2000     .......`. . . . 
 801bd4c:	2000 2000 2000 2000 2000 2000 0000 1000     . . . . . . ....
 801bd5c:	2800 2800 2800 4400 0000 0000 0000 0000     .(.(.(.D........
	...
 801bd84:	0000 7e00 4000 2000 0000 0000 0000 0000     ...~.@. ........
	...
 801bda4:	0000 3800 4400 0400 3c00 4400 4400 3c00     ...8.D...<.D.D.<
 801bdb4:	0000 0000 0000 4000 4000 5800 6400 4400     .......@.@.X.d.D
 801bdc4:	4400 4400 6400 5800 0000 0000 0000 0000     .D.D.d.X........
 801bdd4:	0000 3000 4800 4000 4000 4000 4800 3000     ...0.H.@.@.@.H.0
 801bde4:	0000 0000 0000 0400 0400 3400 4c00 4400     ...........4.L.D
 801bdf4:	4400 4400 4c00 3400 0000 0000 0000 0000     .D.D.L.4........
 801be04:	0000 3800 4400 4400 7c00 4000 4400 3800     ...8.D.D.|.@.D.8
 801be14:	0000 0000 0000 6000 4000 e000 4000 4000     .......`.@...@.@
 801be24:	4000 4000 4000 4000 0000 0000 0000 0000     .@.@.@.@........
 801be34:	0000 3400 4c00 4400 4400 4400 4c00 3400     ...4.L.D.D.D.L.4
 801be44:	0400 4400 0000 4000 4000 5800 6400 4400     ...D...@.@.X.d.D
 801be54:	4400 4400 4400 4400 0000 0000 0000 4000     .D.D.D.D.......@
 801be64:	0000 4000 4000 4000 4000 4000 4000 4000     ...@.@.@.@.@.@.@
 801be74:	0000 0000 0000 4000 0000 4000 4000 4000     .......@...@.@.@
 801be84:	4000 4000 4000 4000 4000 4000 0000 4000     .@.@.@.@.@.@...@
 801be94:	4000 4800 5000 6000 5000 5000 4800 4800     .@.H.P.`.P.P.H.H
 801bea4:	0000 0000 0000 4000 4000 4000 4000 4000     .......@.@.@.@.@
 801beb4:	4000 4000 4000 4000 0000 0000 0000 0000     .@.@.@.@........
 801bec4:	0000 5200 6d00 4900 4900 4900 4900 4900     ...R.m.I.I.I.I.I
	...
 801bedc:	0000 5800 6400 4400 4400 4400 4400 4400     ...X.d.D.D.D.D.D
	...
 801bef4:	0000 3800 4400 4400 4400 4400 4400 3800     ...8.D.D.D.D.D.8
	...
 801bf0c:	0000 5800 6400 4400 4400 4400 6400 5800     ...X.d.D.D.D.d.X
 801bf1c:	4000 4000 0000 0000 0000 3400 4c00 4400     .@.@.......4.L.D
 801bf2c:	4400 4400 4c00 3400 0400 0400 0000 0000     .D.D.L.4........
 801bf3c:	0000 5000 6000 4000 4000 4000 4000 4000     ...P.`.@.@.@.@.@
	...
 801bf54:	0000 3000 4800 4000 3000 0800 4800 3000     ...0.H.@.0...H.0
 801bf64:	0000 0000 0000 4000 4000 e000 4000 4000     .......@.@...@.@
 801bf74:	4000 4000 4000 6000 0000 0000 0000 0000     .@.@.@.`........
 801bf84:	0000 4400 4400 4400 4400 4400 4c00 3400     ...D.D.D.D.D.L.4
	...
 801bf9c:	0000 4400 4400 2800 2800 2800 2800 1000     ...D.D.(.(.(.(..
	...
 801bfb4:	0000 4900 4900 5500 5500 5500 5500 2200     ...I.I.U.U.U.U."
	...
 801bfcc:	0000 4400 2800 2800 1000 2800 2800 4400     ...D.(.(...(.(.D
	...
 801bfe4:	0000 4400 4400 2800 2800 2800 1000 1000     ...D.D.(.(.(....
 801bff4:	1000 1000 0000 0000 0000 7800 0800 1000     ...........x....
 801c004:	2000 2000 4000 7800 0000 0000 0000 1000     . . .@.x........
 801c014:	2000 2000 2000 2000 4000 2000 2000 2000     . . . . .@. . . 
 801c024:	2000 2000 0000 2000 2000 2000 2000 2000     . . ... . . . . 
 801c034:	2000 2000 2000 2000 2000 2000 0000 4000     . . . . . . ...@
 801c044:	2000 2000 2000 2000 1000 2000 2000 2000     . . . . ... . . 
 801c054:	2000 2000 0000 0000 0000 0000 7400 5800     . . .........t.X
	...
 801c074:	7000 5000 5000 5000 5000 5000 5000 7000     .p.P.P.P.P.P.P.p
 801c084:	0000 0000                                   ....

0801c088 <ASCII8x12_Table>:
	...
 801c0a4:	0000 0010 0010 0010 0010 0010 0010 0000     ................
 801c0b4:	0010 0000 0000 0000 0000 0028 0028 0028     ..........(.(.(.
	...
 801c0d4:	0000 0014 0014 003e 0014 0028 007c 0028     ......>...(.|.(.
 801c0e4:	0028 0000 0000 0000 0010 0038 0054 0050     (.........8.T.P.
 801c0f4:	0038 0014 0014 0054 0038 0010 0000 0000     8.....T.8.......
 801c104:	0000 0044 00a8 00a8 0050 0014 001a 002a     ..D.....P.....*.
 801c114:	0024 0000 0000 0000 0000 0020 0050 0050     $......... .P.P.
 801c124:	0020 00e8 0098 0098 0060 0000 0000 0000      .......`.......
 801c134:	0000 0080 0080 0080 0000 0000 0000 0000     ................
	...
 801c14c:	0000 0040 0080 0080 0080 0080 0080 0080     ..@.............
 801c15c:	0080 0080 0000 0000 0000 0080 0040 0040     ............@.@.
 801c16c:	0040 0040 0040 0040 0040 0040 0000 0000     @.@.@.@.@.@.....
 801c17c:	0000 0040 00e0 0040 00a0 0000 0000 0000     ..@...@.........
	...
 801c198:	0000 0020 0020 00f8 0020 0020 0000 0000     .. . ... . .....
	...
 801c1bc:	0040 0040 0000 0000 0000 0000 0000 0000     @.@.............
 801c1cc:	0000 0000 00c0 0000 0000 0000 0000 0000     ................
	...
 801c1ec:	0040 0000 0000 0000 0000 0020 0020 0020     @......... . . .
 801c1fc:	0040 0040 0080 0080 0080 0000 0000 0000     @.@.............
 801c20c:	0000 0060 0090 0090 0090 0090 0090 0090     ..`.............
 801c21c:	0060 0000 0000 0000 0000 0020 0060 00a0     `......... .`...
 801c22c:	0020 0020 0020 0020 0020 0000 0000 0000      . . . . .......
 801c23c:	0000 0060 0090 0010 0010 0020 0040 0080     ..`....... .@...
 801c24c:	00f0 0000 0000 0000 0000 0060 0090 0010     ..........`.....
 801c25c:	0060 0010 0010 0090 0060 0000 0000 0000     `.......`.......
 801c26c:	0000 0010 0030 0050 0050 0090 00f8 0010     ....0.P.P.......
 801c27c:	0010 0000 0000 0000 0000 0070 0040 0080     ..........p.@...
 801c28c:	00e0 0010 0010 0090 0060 0000 0000 0000     ........`.......
 801c29c:	0000 0060 0090 0080 00a0 00d0 0090 0090     ..`.............
 801c2ac:	0060 0000 0000 0000 0000 00f0 0010 0020     `............. .
 801c2bc:	0020 0020 0040 0040 0040 0000 0000 0000      . .@.@.@.......
 801c2cc:	0000 0060 0090 0090 0060 0090 0090 0090     ..`.....`.......
 801c2dc:	0060 0000 0000 0000 0000 0060 0090 0090     `.........`.....
 801c2ec:	00b0 0050 0010 0090 0060 0000 0000 0000     ..P.....`.......
 801c2fc:	0000 0000 0000 0040 0000 0000 0000 0000     ......@.........
 801c30c:	0040 0000 0000 0000 0000 0000 0000 0040     @.............@.
	...
 801c324:	0040 0040 0000 0000 0000 0000 0000 0010     @.@.............
 801c334:	0060 0080 0060 0010 0000 0000 0000 0000     `...`...........
	...
 801c34c:	00f0 0000 00f0 0000 0000 0000 0000 0000     ................
 801c35c:	0000 0000 0000 0080 0060 0010 0060 0080     ........`...`...
	...
 801c374:	0000 0060 0090 0010 0020 0040 0040 0000     ..`..... .@.@...
 801c384:	0040 0000 0000 0000 0000 001c 0022 005b     @...........".[.
 801c394:	00a5 00a5 00a5 00a5 009e 0041 0000 0000     ..........A.....
 801c3a4:	0000 0020 0050 0050 0050 0050 0070 0088     .. .P.P.P.P.p...
 801c3b4:	0088 0000 0000 0000 0000 00f0 0088 0088     ................
 801c3c4:	00f0 0088 0088 0088 00f0 0000 0000 0000     ................
 801c3d4:	0000 0038 0044 0084 0080 0080 0084 0044     ..8.D.........D.
 801c3e4:	0038 0000 0000 0000 0000 00e0 0090 0088     8...............
 801c3f4:	0088 0088 0088 0090 00e0 0000 0000 0000     ................
 801c404:	0000 00f8 0080 0080 00f8 0080 0080 0080     ................
 801c414:	00f8 0000 0000 0000 0000 0078 0040 0040     ..........x.@.@.
 801c424:	0070 0040 0040 0040 0040 0000 0000 0000     p.@.@.@.@.......
 801c434:	0000 0038 0044 0084 0080 009c 0084 0044     ..8.D.........D.
 801c444:	0038 0000 0000 0000 0000 0088 0088 0088     8...............
 801c454:	00f8 0088 0088 0088 0088 0000 0000 0000     ................
 801c464:	0000 0080 0080 0080 0080 0080 0080 0080     ................
 801c474:	0080 0000 0000 0000 0000 0010 0010 0010     ................
 801c484:	0010 0010 0090 0090 0060 0000 0000 0000     ........`.......
 801c494:	0000 0088 0090 00a0 00e0 00a0 0090 0090     ................
 801c4a4:	0088 0000 0000 0000 0000 0080 0080 0080     ................
 801c4b4:	0080 0080 0080 0080 00f0 0000 0000 0000     ................
 801c4c4:	0000 0082 00c6 00c6 00aa 00aa 00aa 00aa     ................
 801c4d4:	0092 0000 0000 0000 0000 0084 00c4 00a4     ................
 801c4e4:	00a4 0094 0094 008c 0084 0000 0000 0000     ................
 801c4f4:	0000 0030 0048 0084 0084 0084 0084 0048     ..0.H.........H.
 801c504:	0030 0000 0000 0000 0000 00f0 0088 0088     0...............
 801c514:	0088 00f0 0080 0080 0080 0000 0000 0000     ................
 801c524:	0000 0030 0048 0084 0084 0084 0084 0058     ..0.H.........X.
 801c534:	0034 0004 0000 0000 0000 0078 0044 0044     4.........x.D.D.
 801c544:	0078 0050 0048 0044 0042 0000 0000 0000     x.P.H.D.B.......
 801c554:	0000 0070 0088 0080 0070 0008 0088 0088     ..p.....p.......
 801c564:	0070 0000 0000 0000 0000 00f8 0020 0020     p........... . .
 801c574:	0020 0020 0020 0020 0020 0000 0000 0000      . . . . .......
 801c584:	0000 0084 0084 0084 0084 0084 0084 0048     ..............H.
 801c594:	0030 0000 0000 0000 0000 0088 0088 0050     0.............P.
 801c5a4:	0050 0050 0050 0050 0020 0000 0000 0000     P.P.P.P. .......
 801c5b4:	0000 0092 00aa 00aa 00aa 00aa 00aa 00aa     ................
 801c5c4:	0044 0000 0000 0000 0000 0084 0048 0048     D...........H.H.
 801c5d4:	0030 0030 0048 0048 0084 0000 0000 0000     0.0.H.H.........
 801c5e4:	0000 0088 0050 0050 0020 0020 0020 0020     ....P.P. . . . .
 801c5f4:	0020 0000 0000 0000 0000 00f8 0008 0010      ...............
 801c604:	0020 0020 0040 0080 00f8 0000 0000 0000      . .@...........
 801c614:	0000 00c0 0080 0080 0080 0080 0080 0080     ................
 801c624:	0080 0080 0000 0000 0000 0080 0080 0040     ..............@.
 801c634:	0040 0040 0040 0020 0020 0000 0000 0000     @.@.@. . .......
 801c644:	0000 00c0 0040 0040 0040 0040 0040 0040     ....@.@.@.@.@.@.
 801c654:	0040 0040 0000 0000 0000 0040 00a0 00a0     @.@.......@.....
 801c664:	00a0 0000 0000 0000 0000 0000 0000 0000     ................
	...
 801c684:	0000 00f8 0000 0000 0000 0080 0040 0000     ............@...
	...
 801c6a8:	0000 00e0 0010 0070 0090 0090 0070 0000     ......p.....p...
 801c6b8:	0000 0000 0000 0080 0080 00a0 00d0 0090     ................
 801c6c8:	0090 00d0 00a0 0000 0000 0000 0000 0000     ................
 801c6d8:	0000 0060 0090 0080 0080 0090 0060 0000     ..`.........`...
 801c6e8:	0000 0000 0000 0010 0010 0050 00b0 0090     ..........P.....
 801c6f8:	0090 00b0 0050 0000 0000 0000 0000 0000     ....P...........
 801c708:	0000 0060 0090 00f0 0080 0090 0060 0000     ..`.........`...
 801c718:	0000 0000 0000 00c0 0080 00c0 0080 0080     ................
 801c728:	0080 0080 0080 0000 0000 0000 0000 0000     ................
 801c738:	0000 0050 00b0 0090 0090 00b0 0050 0010     ..P.........P...
 801c748:	0000 0000 0000 0080 0080 00a0 00d0 0090     ................
 801c758:	0090 0090 0090 0000 0000 0000 0000 0080     ................
 801c768:	0000 0080 0080 0080 0080 0080 0080 0000     ................
 801c778:	0000 0000 0000 0080 0000 0080 0080 0080     ................
 801c788:	0080 0080 0080 0080 0000 0000 0000 0080     ................
 801c798:	0080 0090 00a0 00c0 00a0 0090 0090 0000     ................
 801c7a8:	0000 0000 0000 0080 0080 0080 0080 0080     ................
 801c7b8:	0080 0080 0080 0000 0000 0000 0000 0000     ................
 801c7c8:	0000 00a6 00da 0092 0092 0092 0092 0000     ................
	...
 801c7e0:	0000 00a0 00d0 0090 0090 0090 0090 0000     ................
	...
 801c7f8:	0000 0060 0090 0090 0090 0090 0060 0000     ..`.........`...
	...
 801c810:	0000 00a0 00d0 0090 0090 00d0 00a0 0080     ................
	...
 801c828:	0000 0050 00b0 0090 0090 00b0 0050 0010     ..P.........P...
	...
 801c840:	0000 00a0 00c0 0080 0080 0080 0080 0000     ................
	...
 801c858:	0000 00e0 0090 0040 0020 0090 0060 0000     ......@. ...`...
 801c868:	0000 0000 0000 0080 0080 00c0 0080 0080     ................
 801c878:	0080 0080 00c0 0000 0000 0000 0000 0000     ................
 801c888:	0000 0090 0090 0090 0090 00b0 0050 0000     ............P...
	...
 801c8a0:	0000 0088 0088 0050 0050 0050 0020 0000     ......P.P.P. ...
	...
 801c8b8:	0000 0092 00aa 00aa 00aa 00aa 0044 0000     ............D...
	...
 801c8d0:	0000 0088 0050 0020 0020 0050 0088 0000     ....P. . .P.....
	...
 801c8e8:	0000 0088 0050 0050 0050 0020 0020 0020     ....P.P.P. . . .
	...
 801c900:	0000 00f0 0010 0020 0040 0080 00f0 0000     ...... .@.......
 801c910:	0000 0000 0000 00c0 0080 0080 0080 0000     ................
 801c920:	0080 0080 0080 0080 0000 0000 0000 0080     ................
 801c930:	0080 0080 0080 0080 0080 0080 0080 0080     ................
 801c940:	0000 0000 0000 00c0 0040 0040 0040 0020     ........@.@.@. .
 801c950:	0040 0040 0040 0040 0000 0000 0000 0000     @.@.@.@.........
 801c960:	0000 0000 00e8 00b0 0000 0000 0000 0000     ................
	...
 801c978:	00e0 00a0 00a0 00a0 00a0 00a0 00e0 0000     ................

0801c988 <ASCII8x8_Table>:
	...
 801c998:	0040 0040 0040 0040 0040 0040 0000 0040     @.@.@.@.@.@...@.
 801c9a8:	00a0 00a0 00a0 0000 0000 0000 0000 0000     ................
 801c9b8:	0000 0024 0024 00fe 0048 00fc 0048 0048     ..$.$...H...H.H.
 801c9c8:	0038 0054 0050 0038 0014 0014 0054 0038     8.T.P.8.....T.8.
 801c9d8:	0044 00a8 00a8 0050 0014 001a 002a 0024     D.....P.....*.$.
 801c9e8:	0010 0028 0028 0010 0074 004c 004c 0030     ..(.(...t.L.L.0.
 801c9f8:	0010 0010 0010 0000 0000 0000 0000 0000     ................
 801ca08:	0008 0010 0010 0010 0010 0010 0010 0008     ................
 801ca18:	0010 0008 0008 0008 0008 0008 0008 0010     ................
 801ca28:	0000 0000 0024 0018 003c 0018 0024 0000     ....$...<...$...
 801ca38:	0000 0000 0010 0010 007c 0010 0010 0000     ........|.......
	...
 801ca50:	0000 0008 0008 0010 0000 0000 0000 0000     ................
 801ca60:	003c 0000 0000 0000 0000 0000 0000 0000     <...............
 801ca70:	0000 0000 0018 0018 0008 0008 0008 0010     ................
 801ca80:	0010 0020 0020 0020 0018 0024 0024 0024     .. . . ...$.$.$.
 801ca90:	0024 0024 0024 0018 0008 0018 0028 0008     $.$.$.......(...
 801caa0:	0008 0008 0008 0008 0038 0044 0000 0004     ........8.D.....
 801cab0:	0008 0010 0020 007c 0018 0024 0004 0018     .... .|...$.....
 801cac0:	0004 0004 0024 0018 0004 000c 0014 0024     ....$.........$.
 801cad0:	0044 007e 0004 0004 003c 0020 0020 0038     D.~.....<. . .8.
 801cae0:	0004 0004 0024 0018 0018 0024 0020 0038     ....$.....$. .8.
 801caf0:	0024 0024 0024 0018 003c 0004 0008 0008     $.$.$...<.......
 801cb00:	0008 0010 0010 0010 0018 0024 0024 0018     ..........$.$...
 801cb10:	0024 0024 0024 0018 0018 0024 0024 0024     $.$.$.....$.$.$.
 801cb20:	001c 0004 0024 0018 0000 0000 0010 0000     ....$...........
 801cb30:	0000 0010 0000 0000 0000 0000 0008 0000     ................
 801cb40:	0000 0008 0010 0000 0000 0000 0004 0018     ................
 801cb50:	0020 0018 0004 0000 0000 0000 0000 003c      .............<.
 801cb60:	0000 003c 0000 0000 0000 0000 0020 0018     ..<......... ...
 801cb70:	0004 0018 0020 0000 0018 0024 0004 0008     .... .....$.....
 801cb80:	0010 0010 0000 0010 003c 0042 0099 00a5     ........<.B.....
 801cb90:	00a5 009d 0042 0038 0038 0044 0044 0044     ....B.8.8.D.D.D.
 801cba0:	007c 0044 0044 0044 0078 0044 0044 0078     |.D.D.D.x.D.D.x.
 801cbb0:	0044 0044 0044 0078 001c 0022 0042 0040     D.D.D.x...".B.@.
 801cbc0:	0040 0042 0022 001c 0070 0048 0044 0044     @.B."...p.H.D.D.
 801cbd0:	0044 0044 0048 0070 007c 0040 0040 007c     D.D.H.p.|.@.@.|.
 801cbe0:	0040 0040 0040 007c 003c 0020 0020 0038     @.@.@.|.<. . .8.
 801cbf0:	0020 0020 0020 0020 001c 0022 0042 0040      . . . ...".B.@.
 801cc00:	004e 0042 0022 001c 0044 0044 0044 007c     N.B."...D.D.D.|.
 801cc10:	0044 0044 0044 0044 0010 0010 0010 0010     D.D.D.D.........
 801cc20:	0010 0010 0010 0010 0004 0004 0004 0004     ................
 801cc30:	0004 0024 0024 0018 0044 0048 0050 0070     ..$.$...D.H.P.p.
 801cc40:	0050 0048 0048 0044 0020 0020 0020 0020     P.H.H.D. . . . .
 801cc50:	0020 0020 0020 003c 0082 00c6 00c6 00aa      . . .<.........
 801cc60:	00aa 00aa 00aa 0092 0042 0062 0052 0052     ........B.b.R.R.
 801cc70:	004a 004a 0046 0042 0018 0024 0042 0042     J.J.F.B...$.B.B.
 801cc80:	0042 0042 0024 0018 0078 0044 0044 0044     B.B.$...x.D.D.D.
 801cc90:	0078 0040 0040 0040 0018 0024 0042 0042     x.@.@.@...$.B.B.
 801cca0:	0042 0042 002c 001a 0078 0044 0044 0078     B.B.,...x.D.D.x.
 801ccb0:	0050 0048 0044 0042 0038 0044 0040 0038     P.H.D.B.8.D.@.8.
 801ccc0:	0004 0044 0044 0038 007c 0010 0010 0010     ..D.D.8.|.......
 801ccd0:	0010 0010 0010 0010 0042 0042 0042 0042     ........B.B.B.B.
 801cce0:	0042 0042 0024 0018 0044 0044 0028 0028     B.B.$...D.D.(.(.
 801ccf0:	0028 0028 0028 0010 0092 00aa 00aa 00aa     (.(.(...........
 801cd00:	00aa 00aa 00aa 0044 0042 0024 0024 0018     ......D.B.$.$...
 801cd10:	0018 0024 0024 0042 0044 0028 0028 0010     ..$.$.B.D.(.(...
 801cd20:	0010 0010 0010 0010 007c 0004 0008 0010     ........|.......
 801cd30:	0010 0020 0040 007c 001c 0010 0010 0010     .. .@.|.........
 801cd40:	0010 0010 0010 001c 0010 0010 0008 0008     ................
 801cd50:	0008 0008 0004 0004 001c 0004 0004 0004     ................
 801cd60:	0004 0004 0004 001c 0010 0028 0044 0000     ..........(.D...
	...
 801cd88:	0020 0010 0010 0000 0000 0000 0000 0000      ...............
 801cd98:	0000 0000 0018 0004 001c 0024 0024 001c     ..........$.$...
 801cda8:	0020 0020 0028 0034 0024 0024 0034 0028      . .(.4.$.$.4.(.
 801cdb8:	0000 0000 0018 0024 0020 0020 0024 0018     ......$. . .$...
 801cdc8:	0004 0004 0014 002c 0024 0024 002c 0014     ......,.$.$.,...
 801cdd8:	0000 0000 0018 0024 003c 0020 0024 0018     ......$.<. .$...
 801cde8:	0000 0018 0010 0010 0018 0010 0010 0010     ................
 801cdf8:	0000 0018 0024 0024 0018 0004 0024 0018     ....$.$.....$...
 801ce08:	0020 0020 0028 0034 0024 0024 0024 0024      . .(.4.$.$.$.$.
 801ce18:	0010 0000 0010 0010 0010 0010 0010 0010     ................
 801ce28:	0008 0000 0008 0008 0008 0008 0028 0010     ............(...
 801ce38:	0020 0020 0024 0028 0030 0028 0024 0024      . .$.(.0.(.$.$.
 801ce48:	0010 0010 0010 0010 0010 0010 0010 0010     ................
 801ce58:	0000 0000 00a6 00da 0092 0092 0092 0092     ................
 801ce68:	0000 0000 0028 0034 0024 0024 0024 0024     ....(.4.$.$.$.$.
 801ce78:	0000 0000 0018 0024 0024 0024 0024 0018     ......$.$.$.$...
 801ce88:	0000 0028 0034 0024 0038 0020 0020 0020     ..(.4.$.8. . . .
 801ce98:	0000 0014 002c 0024 001c 0004 0004 0004     ....,.$.........
 801cea8:	0000 0000 002c 0030 0020 0020 0020 0020     ....,.0. . . . .
 801ceb8:	0000 0000 0018 0024 0010 0008 0024 0018     ......$.....$...
 801cec8:	0000 0010 0038 0010 0010 0010 0010 0018     ....8...........
 801ced8:	0000 0000 0024 0024 0024 0024 002c 0014     ....$.$.$.$.,...
 801cee8:	0000 0000 0044 0044 0028 0028 0028 0010     ....D.D.(.(.(...
 801cef8:	0000 0000 0092 00aa 00aa 00aa 00aa 0044     ..............D.
 801cf08:	0000 0000 0044 0028 0010 0010 0028 0044     ....D.(.....(.D.
 801cf18:	0000 0028 0028 0028 0010 0010 0010 0010     ..(.(.(.........
 801cf28:	0000 0000 003c 0004 0008 0010 0020 003c     ....<....... .<.
 801cf38:	0000 0008 0010 0010 0020 0010 0010 0008     ........ .......
 801cf48:	0010 0010 0010 0010 0010 0010 0010 0010     ................
 801cf58:	0000 0010 0008 0008 0004 0008 0008 0010     ................
 801cf68:	0000 0000 0000 0060 0092 000c 0000 0000     ......`.........
 801cf78:	00ff 00ff 00ff 00ff 00ff 00ff 00ff 00ff     ................

0801cf88 <_ctype_>:
 801cf88:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 801cf98:	2020 2020 2020 2020 2020 2020 2020 2020                     
 801cfa8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 801cfb8:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 801cfc8:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 801cfd8:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 801cfe8:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 801cff8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 801d008:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0801d08c <_sromdev>:
	...
 801d098:	00000001 	.word	0x00000001
	...
