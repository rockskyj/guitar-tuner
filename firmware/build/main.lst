
build/main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 00 03 20 f1 53 01 08 3d 54 01 08 3d 54 01 08     ... .S..=T..=T..
 8000010:	3d 54 01 08 3d 54 01 08 3d 54 01 08 00 00 00 00     =T..=T..=T......
	...
 800002c:	81 52 01 08 3d 54 01 08 00 00 00 00 3d 54 01 08     .R..=T......=T..
 800003c:	61 52 01 08 3d 54 01 08 3d 54 01 08 3d 54 01 08     aR..=T..=T..=T..
 800004c:	3d 54 01 08 3d 54 01 08 3d 54 01 08 3d 54 01 08     =T..=T..=T..=T..
 800005c:	3d 54 01 08 3d 54 01 08 3d 54 01 08 3d 54 01 08     =T..=T..=T..=T..
 800006c:	3d 54 01 08 3d 54 01 08 3d 54 01 08 3d 54 01 08     =T..=T..=T..=T..
 800007c:	3d 54 01 08 3d 54 01 08 3d 54 01 08 3d 54 01 08     =T..=T..=T..=T..
 800008c:	3d 54 01 08 3d 54 01 08 3d 54 01 08 3d 54 01 08     =T..=T..=T..=T..
 800009c:	3d 54 01 08 3d 54 01 08 3d 54 01 08 3d 54 01 08     =T..=T..=T..=T..
 80000ac:	3d 54 01 08 3d 54 01 08 3d 54 01 08 3d 54 01 08     =T..=T..=T..=T..
 80000bc:	3d 54 01 08 3d 54 01 08 3d 54 01 08 3d 54 01 08     =T..=T..=T..=T..
 80000cc:	3d 54 01 08 3d 54 01 08 3d 54 01 08 61 52 01 08     =T..=T..=T..aR..
 80000dc:	3d 54 01 08 3d 54 01 08 3d 54 01 08 3d 54 01 08     =T..=T..=T..=T..
 80000ec:	3d 54 01 08 3d 54 01 08 3d 54 01 08 3d 54 01 08     =T..=T..=T..=T..
 80000fc:	3d 54 01 08 3d 54 01 08 3d 54 01 08 3d 54 01 08     =T..=T..=T..=T..
 800010c:	3d 54 01 08 3d 54 01 08 3d 54 01 08 3d 54 01 08     =T..=T..=T..=T..
 800011c:	3d 54 01 08 3d 54 01 08 3d 54 01 08 3d 54 01 08     =T..=T..=T..=T..
 800012c:	3d 54 01 08 3d 54 01 08 3d 54 01 08 3d 54 01 08     =T..=T..=T..=T..
 800013c:	3d 54 01 08 3d 54 01 08 3d 54 01 08 3d 54 01 08     =T..=T..=T..=T..
 800014c:	3d 54 01 08 3d 54 01 08 3d 54 01 08 3d 54 01 08     =T..=T..=T..=T..
 800015c:	3d 54 01 08 3d 54 01 08 3d 54 01 08 3d 54 01 08     =T..=T..=T..=T..
 800016c:	3d 54 01 08 3d 54 01 08 3d 54 01 08 3d 54 01 08     =T..=T..=T..=T..
 800017c:	3d 54 01 08 3d 54 01 08 3d 54 01 08 3d 54 01 08     =T..=T..=T..=T..
 800018c:	3d 54 01 08 3d 54 01 08 3d 54 01 08 3d 54 01 08     =T..=T..=T..=T..
 800019c:	3d 54 01 08 3d 54 01 08 3d 54 01 08 3d 54 01 08     =T..=T..=T..=T..

080001ac <block_driver_readable>:
};


int block_driver_readable (struct block *block, struct file_request *request,
                           struct event_monitor *monitor)
{
 80001ac:	b480      	push	{r7}
 80001ae:	b085      	sub	sp, #20
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	60f8      	str	r0, [r7, #12]
 80001b4:	60b9      	str	r1, [r7, #8]
 80001b6:	607a      	str	r2, [r7, #4]
    if (block->buzy)
 80001b8:	68fb      	ldr	r3, [r7, #12]
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d001      	beq.n	80001c4 <block_driver_readable+0x18>
        return FILE_ACCESS_ACCEPT;
 80001c0:	2301      	movs	r3, #1
 80001c2:	e001      	b.n	80001c8 <block_driver_readable+0x1c>
    else
        return FILE_ACCESS_ERROR;
 80001c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80001c8:	4618      	mov	r0, r3
 80001ca:	3714      	adds	r7, #20
 80001cc:	46bd      	mov	sp, r7
 80001ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001d2:	4770      	bx	lr

080001d4 <block_driver_writable>:

int block_driver_writable (struct block *block, struct file_request *request,
                           struct event_monitor *monitor)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	60f8      	str	r0, [r7, #12]
 80001dc:	60b9      	str	r1, [r7, #8]
 80001de:	607a      	str	r2, [r7, #4]
    if (block->buzy)
 80001e0:	68fb      	ldr	r3, [r7, #12]
 80001e2:	699b      	ldr	r3, [r3, #24]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d001      	beq.n	80001ec <block_driver_writable+0x18>
        return FILE_ACCESS_ACCEPT;
 80001e8:	2301      	movs	r3, #1
 80001ea:	e001      	b.n	80001f0 <block_driver_writable+0x1c>
    else
        return FILE_ACCESS_ERROR;
 80001ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	3714      	adds	r7, #20
 80001f4:	46bd      	mov	sp, r7
 80001f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fa:	4770      	bx	lr

080001fc <block_driver_lseekable>:

int block_driver_lseekable (struct block *block, struct file_request *request,
                            struct event_monitor *monitor)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b085      	sub	sp, #20
 8000200:	af00      	add	r7, sp, #0
 8000202:	60f8      	str	r0, [r7, #12]
 8000204:	60b9      	str	r1, [r7, #8]
 8000206:	607a      	str	r2, [r7, #4]
    if (block->buzy)
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	699b      	ldr	r3, [r3, #24]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d001      	beq.n	8000214 <block_driver_lseekable+0x18>
        return FILE_ACCESS_ACCEPT;
 8000210:	2301      	movs	r3, #1
 8000212:	e001      	b.n	8000218 <block_driver_lseekable+0x1c>
    else
        return FILE_ACCESS_ERROR;
 8000214:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000218:	4618      	mov	r0, r3
 800021a:	3714      	adds	r7, #20
 800021c:	46bd      	mov	sp, r7
 800021e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000222:	4770      	bx	lr

08000224 <block_driver_read>:

int block_driver_read (struct block *block, struct file_request *request,
                       struct event_monitor *monitor)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b086      	sub	sp, #24
 8000228:	af00      	add	r7, sp, #0
 800022a:	60f8      	str	r0, [r7, #12]
 800022c:	60b9      	str	r1, [r7, #8]
 800022e:	607a      	str	r2, [r7, #4]
    int size = request->size;
 8000230:	68bb      	ldr	r3, [r7, #8]
 8000232:	689b      	ldr	r3, [r3, #8]
 8000234:	617b      	str	r3, [r7, #20]
    if (size > BLOCK_BUF)
 8000236:	697b      	ldr	r3, [r7, #20]
 8000238:	2b40      	cmp	r3, #64	; 0x40
 800023a:	dd01      	ble.n	8000240 <block_driver_read+0x1c>
        size = BLOCK_BUF;
 800023c:	2340      	movs	r3, #64	; 0x40
 800023e:	617b      	str	r3, [r7, #20]

    memcpy(request->buf, block->buf, size);
 8000240:	68bb      	ldr	r3, [r7, #8]
 8000242:	6859      	ldr	r1, [r3, #4]
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	f103 0220 	add.w	r2, r3, #32
 800024a:	697b      	ldr	r3, [r7, #20]
 800024c:	4608      	mov	r0, r1
 800024e:	4611      	mov	r1, r2
 8000250:	461a      	mov	r2, r3
 8000252:	f015 f835 	bl	80152c0 <memcpy>

    /* still buzy until driver write response */
    return size;
 8000256:	697b      	ldr	r3, [r7, #20]
}
 8000258:	4618      	mov	r0, r3
 800025a:	3718      	adds	r7, #24
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}

08000260 <block_driver_write>:

int block_driver_write (struct block *block, struct file_request *request,
                        struct event_monitor *monitor)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b088      	sub	sp, #32
 8000264:	af00      	add	r7, sp, #0
 8000266:	60f8      	str	r0, [r7, #12]
 8000268:	60b9      	str	r1, [r7, #8]
 800026a:	607a      	str	r2, [r7, #4]
    struct block_response *response = (void *)request->buf;
 800026c:	68bb      	ldr	r3, [r7, #8]
 800026e:	685b      	ldr	r3, [r3, #4]
 8000270:	61bb      	str	r3, [r7, #24]
    char *data_buf = response->buf;
 8000272:	69bb      	ldr	r3, [r7, #24]
 8000274:	685b      	ldr	r3, [r3, #4]
 8000276:	617b      	str	r3, [r7, #20]
    int len = response->transfer_len;
 8000278:	69bb      	ldr	r3, [r7, #24]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	61fb      	str	r3, [r7, #28]
    if (len > BLOCK_BUF)
 800027e:	69fb      	ldr	r3, [r7, #28]
 8000280:	2b40      	cmp	r3, #64	; 0x40
 8000282:	dd01      	ble.n	8000288 <block_driver_write+0x28>
        len = BLOCK_BUF;
 8000284:	2340      	movs	r3, #64	; 0x40
 8000286:	61fb      	str	r3, [r7, #28]

    if (len > 0) {
 8000288:	69fb      	ldr	r3, [r7, #28]
 800028a:	2b00      	cmp	r3, #0
 800028c:	dd08      	ble.n	80002a0 <block_driver_write+0x40>
        memcpy(block->buf, data_buf, len);
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	f103 0220 	add.w	r2, r3, #32
 8000294:	69fb      	ldr	r3, [r7, #28]
 8000296:	4610      	mov	r0, r2
 8000298:	6979      	ldr	r1, [r7, #20]
 800029a:	461a      	mov	r2, r3
 800029c:	f015 f810 	bl	80152c0 <memcpy>
    }
    block->transfer_len = len;
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	69fa      	ldr	r2, [r7, #28]
 80002a4:	661a      	str	r2, [r3, #96]	; 0x60
    block->buzy = 0;
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	2200      	movs	r2, #0
 80002aa:	619a      	str	r2, [r3, #24]
	event_monitor_release(monitor, block->event);
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	691b      	ldr	r3, [r3, #16]
 80002b0:	6878      	ldr	r0, [r7, #4]
 80002b2:	4619      	mov	r1, r3
 80002b4:	f000 fbd0 	bl	8000a58 <event_monitor_release>
    return len;
 80002b8:	69fb      	ldr	r3, [r7, #28]
}
 80002ba:	4618      	mov	r0, r3
 80002bc:	3720      	adds	r7, #32
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop

080002c4 <block_driver_lseek>:

int block_driver_lseek (struct block *block, struct file_request *request,
                        struct event_monitor *monitor)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	60f8      	str	r0, [r7, #12]
 80002cc:	60b9      	str	r1, [r7, #8]
 80002ce:	607a      	str	r2, [r7, #4]
    block->transfer_len = request->size;
 80002d0:	68bb      	ldr	r3, [r7, #8]
 80002d2:	689a      	ldr	r2, [r3, #8]
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	661a      	str	r2, [r3, #96]	; 0x60
    block->buzy = 0;
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	2200      	movs	r2, #0
 80002dc:	619a      	str	r2, [r3, #24]
	event_monitor_release(monitor, block->event);
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	691b      	ldr	r3, [r3, #16]
 80002e2:	6878      	ldr	r0, [r7, #4]
 80002e4:	4619      	mov	r1, r3
 80002e6:	f000 fbb7 	bl	8000a58 <event_monitor_release>
    return request->size;
 80002ea:	68bb      	ldr	r3, [r7, #8]
 80002ec:	689b      	ldr	r3, [r3, #8]
}
 80002ee:	4618      	mov	r0, r3
 80002f0:	3710      	adds	r7, #16
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop

080002f8 <block_request_readable>:
 *  5. Get transfer_len
 *  6. Read data from buffer
 */
int block_request_readable (struct block *block, struct file_request *request,
                            struct event_monitor *monitor)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b090      	sub	sp, #64	; 0x40
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	60f8      	str	r0, [r7, #12]
 8000300:	60b9      	str	r1, [r7, #8]
 8000302:	607a      	str	r2, [r7, #4]
    struct task_control_block *task = request->task;
 8000304:	68bb      	ldr	r3, [r7, #8]
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	63bb      	str	r3, [r7, #56]	; 0x38

    if (block->request_pid == 0) {
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	695b      	ldr	r3, [r3, #20]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d13d      	bne.n	800038e <block_request_readable+0x96>
        /* try to send request */
        struct file *driver = block->driver_file;
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	68db      	ldr	r3, [r3, #12]
 8000316:	637b      	str	r3, [r7, #52]	; 0x34
        int size = request->size;
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (size > BLOCK_BUF)
 800031e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000320:	2b40      	cmp	r3, #64	; 0x40
 8000322:	dd01      	ble.n	8000328 <block_request_readable+0x30>
            size = BLOCK_BUF;
 8000324:	2340      	movs	r3, #64	; 0x40
 8000326:	63fb      	str	r3, [r7, #60]	; 0x3c

        struct block_request block_request = {
 8000328:	2301      	movs	r3, #1
 800032a:	623b      	str	r3, [r7, #32]
            .cmd = BLOCK_CMD_READ,
            .task = task->pid,
 800032c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800032e:	685b      	ldr	r3, [r3, #4]
        struct file *driver = block->driver_file;
        int size = request->size;
        if (size > BLOCK_BUF)
            size = BLOCK_BUF;

        struct block_request block_request = {
 8000330:	627b      	str	r3, [r7, #36]	; 0x24
            .cmd = BLOCK_CMD_READ,
            .task = task->pid,
            .fd = block->file.fd,
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	681b      	ldr	r3, [r3, #0]
        struct file *driver = block->driver_file;
        int size = request->size;
        if (size > BLOCK_BUF)
            size = BLOCK_BUF;

        struct block_request block_request = {
 8000336:	62bb      	str	r3, [r7, #40]	; 0x28
 8000338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800033a:	62fb      	str	r3, [r7, #44]	; 0x2c
            .cmd = BLOCK_CMD_READ,
            .task = task->pid,
            .fd = block->file.fd,
            .size = size,
            .pos = block->pos
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	69db      	ldr	r3, [r3, #28]
        struct file *driver = block->driver_file;
        int size = request->size;
        if (size > BLOCK_BUF)
            size = BLOCK_BUF;

        struct block_request block_request = {
 8000340:	633b      	str	r3, [r7, #48]	; 0x30
            .fd = block->file.fd,
            .size = size,
            .pos = block->pos
        };

        struct file_request file_request = {
 8000342:	f107 0310 	add.w	r3, r7, #16
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	3304      	adds	r3, #4
 800034c:	2200      	movs	r2, #0
 800034e:	601a      	str	r2, [r3, #0]
 8000350:	3304      	adds	r3, #4
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	3304      	adds	r3, #4
 8000358:	2200      	movs	r2, #0
 800035a:	601a      	str	r2, [r3, #0]
 800035c:	3304      	adds	r3, #4
 800035e:	f107 0320 	add.w	r3, r7, #32
 8000362:	617b      	str	r3, [r7, #20]
 8000364:	2314      	movs	r3, #20
 8000366:	61bb      	str	r3, [r7, #24]
            .task = NULL,
            .buf = (char *)&block_request,
            .size = sizeof(block_request),
        };
        if (file_write(driver, &file_request, monitor) == 1) {
 8000368:	f107 0310 	add.w	r3, r7, #16
 800036c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800036e:	4619      	mov	r1, r3
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	f000 fe5b 	bl	800102c <file_write>
 8000376:	4603      	mov	r3, r0
 8000378:	2b01      	cmp	r3, #1
 800037a:	d107      	bne.n	800038c <block_request_readable+0x94>
            block->request_pid = task->pid;
 800037c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800037e:	685a      	ldr	r2, [r3, #4]
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	615a      	str	r2, [r3, #20]
            block->buzy = 1;
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	2201      	movs	r2, #1
 8000388:	619a      	str	r2, [r3, #24]
 800038a:	e00c      	b.n	80003a6 <block_request_readable+0xae>
 800038c:	e00b      	b.n	80003a6 <block_request_readable+0xae>
        }
    }
    else if (block->request_pid == task->pid && !block->buzy) {
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	695a      	ldr	r2, [r3, #20]
 8000392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000394:	685b      	ldr	r3, [r3, #4]
 8000396:	429a      	cmp	r2, r3
 8000398:	d105      	bne.n	80003a6 <block_request_readable+0xae>
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d101      	bne.n	80003a6 <block_request_readable+0xae>
        return FILE_ACCESS_ACCEPT;
 80003a2:	2301      	movs	r3, #1
 80003a4:	e007      	b.n	80003b6 <block_request_readable+0xbe>
    }

	event_monitor_block(monitor, block->event, task);
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	691b      	ldr	r3, [r3, #16]
 80003aa:	6878      	ldr	r0, [r7, #4]
 80003ac:	4619      	mov	r1, r3
 80003ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80003b0:	f000 fb34 	bl	8000a1c <event_monitor_block>
    return FILE_ACCESS_BLOCK;
 80003b4:	2300      	movs	r3, #0
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	3740      	adds	r7, #64	; 0x40
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop

080003c0 <block_request_writable>:
 *  6. Driver write empty data to buffer
 *  7. Get transfer_len
 */
int block_request_writable (struct block *block, struct file_request *request,
                            struct event_monitor *monitor)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b090      	sub	sp, #64	; 0x40
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	60f8      	str	r0, [r7, #12]
 80003c8:	60b9      	str	r1, [r7, #8]
 80003ca:	607a      	str	r2, [r7, #4]
    struct task_control_block *task = request->task;
 80003cc:	68bb      	ldr	r3, [r7, #8]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	63bb      	str	r3, [r7, #56]	; 0x38

    if (block->request_pid == 0) {
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d148      	bne.n	800046c <block_request_writable+0xac>
        /* try to send request */
        struct file *driver = block->driver_file;
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	68db      	ldr	r3, [r3, #12]
 80003de:	637b      	str	r3, [r7, #52]	; 0x34
        int size = request->size;
 80003e0:	68bb      	ldr	r3, [r7, #8]
 80003e2:	689b      	ldr	r3, [r3, #8]
 80003e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (size > BLOCK_BUF)
 80003e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80003e8:	2b40      	cmp	r3, #64	; 0x40
 80003ea:	dd01      	ble.n	80003f0 <block_request_writable+0x30>
            size = BLOCK_BUF;
 80003ec:	2340      	movs	r3, #64	; 0x40
 80003ee:	63fb      	str	r3, [r7, #60]	; 0x3c

        struct block_request block_request = {
 80003f0:	2302      	movs	r3, #2
 80003f2:	623b      	str	r3, [r7, #32]
            .cmd = BLOCK_CMD_WRITE,
            .task = task->pid,
 80003f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80003f6:	685b      	ldr	r3, [r3, #4]
        struct file *driver = block->driver_file;
        int size = request->size;
        if (size > BLOCK_BUF)
            size = BLOCK_BUF;

        struct block_request block_request = {
 80003f8:	627b      	str	r3, [r7, #36]	; 0x24
            .cmd = BLOCK_CMD_WRITE,
            .task = task->pid,
            .fd = block->file.fd,
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	681b      	ldr	r3, [r3, #0]
        struct file *driver = block->driver_file;
        int size = request->size;
        if (size > BLOCK_BUF)
            size = BLOCK_BUF;

        struct block_request block_request = {
 80003fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8000400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000402:	62fb      	str	r3, [r7, #44]	; 0x2c
            .cmd = BLOCK_CMD_WRITE,
            .task = task->pid,
            .fd = block->file.fd,
            .size = size,
            .pos = block->pos
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	69db      	ldr	r3, [r3, #28]
        struct file *driver = block->driver_file;
        int size = request->size;
        if (size > BLOCK_BUF)
            size = BLOCK_BUF;

        struct block_request block_request = {
 8000408:	633b      	str	r3, [r7, #48]	; 0x30
            .fd = block->file.fd,
            .size = size,
            .pos = block->pos
        };

        struct file_request file_request = {
 800040a:	f107 0310 	add.w	r3, r7, #16
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	3304      	adds	r3, #4
 8000414:	2200      	movs	r2, #0
 8000416:	601a      	str	r2, [r3, #0]
 8000418:	3304      	adds	r3, #4
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
 800041e:	3304      	adds	r3, #4
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
 8000424:	3304      	adds	r3, #4
 8000426:	f107 0320 	add.w	r3, r7, #32
 800042a:	617b      	str	r3, [r7, #20]
 800042c:	2314      	movs	r3, #20
 800042e:	61bb      	str	r3, [r7, #24]
            .task = NULL,
            .buf = (char *)&block_request,
            .size = sizeof(block_request),
        };

        if (file_write(driver, &file_request, monitor) == 1) {
 8000430:	f107 0310 	add.w	r3, r7, #16
 8000434:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000436:	4619      	mov	r1, r3
 8000438:	687a      	ldr	r2, [r7, #4]
 800043a:	f000 fdf7 	bl	800102c <file_write>
 800043e:	4603      	mov	r3, r0
 8000440:	2b01      	cmp	r3, #1
 8000442:	d112      	bne.n	800046a <block_request_writable+0xaa>

            memcpy(block->buf, request->buf, size);
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	f103 0120 	add.w	r1, r3, #32
 800044a:	68bb      	ldr	r3, [r7, #8]
 800044c:	685a      	ldr	r2, [r3, #4]
 800044e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000450:	4608      	mov	r0, r1
 8000452:	4611      	mov	r1, r2
 8000454:	461a      	mov	r2, r3
 8000456:	f014 ff33 	bl	80152c0 <memcpy>

            block->request_pid = task->pid;
 800045a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800045c:	685a      	ldr	r2, [r3, #4]
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	615a      	str	r2, [r3, #20]
            block->buzy = 1;
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	2201      	movs	r2, #1
 8000466:	619a      	str	r2, [r3, #24]
 8000468:	e00c      	b.n	8000484 <block_request_writable+0xc4>
 800046a:	e00b      	b.n	8000484 <block_request_writable+0xc4>
        }
    }
    else if (block->request_pid == task->pid && !block->buzy) {
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	695a      	ldr	r2, [r3, #20]
 8000470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000472:	685b      	ldr	r3, [r3, #4]
 8000474:	429a      	cmp	r2, r3
 8000476:	d105      	bne.n	8000484 <block_request_writable+0xc4>
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d101      	bne.n	8000484 <block_request_writable+0xc4>
        return FILE_ACCESS_ACCEPT;
 8000480:	2301      	movs	r3, #1
 8000482:	e007      	b.n	8000494 <block_request_writable+0xd4>
    }

	event_monitor_block(monitor, block->event, task);
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	691b      	ldr	r3, [r3, #16]
 8000488:	6878      	ldr	r0, [r7, #4]
 800048a:	4619      	mov	r1, r3
 800048c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800048e:	f000 fac5 	bl	8000a1c <event_monitor_block>
    return FILE_ACCESS_BLOCK;
 8000492:	2300      	movs	r3, #0
}
 8000494:	4618      	mov	r0, r3
 8000496:	3740      	adds	r7, #64	; 0x40
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}

0800049c <block_request_lseekable>:

int block_request_lseekable (struct block *block, struct file_request *request,
                             struct event_monitor *monitor)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b092      	sub	sp, #72	; 0x48
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	60f8      	str	r0, [r7, #12]
 80004a4:	60b9      	str	r1, [r7, #8]
 80004a6:	607a      	str	r2, [r7, #4]
    struct task_control_block *task = request->task;
 80004a8:	68bb      	ldr	r3, [r7, #8]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	643b      	str	r3, [r7, #64]	; 0x40

    if (block->request_pid == 0) {
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d153      	bne.n	800055e <block_request_lseekable+0xc2>
        /* try to send request */
        struct file *driver = block->driver_file;
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	68db      	ldr	r3, [r3, #12]
 80004ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        int size = request->size;
 80004bc:	68bb      	ldr	r3, [r7, #8]
 80004be:	689b      	ldr	r3, [r3, #8]
 80004c0:	63bb      	str	r3, [r7, #56]	; 0x38
        if (size > BLOCK_BUF)
 80004c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80004c4:	2b40      	cmp	r3, #64	; 0x40
 80004c6:	dd01      	ble.n	80004cc <block_request_lseekable+0x30>
            size = BLOCK_BUF;
 80004c8:	2340      	movs	r3, #64	; 0x40
 80004ca:	63bb      	str	r3, [r7, #56]	; 0x38

        int pos;
        switch(request->whence) {
 80004cc:	68bb      	ldr	r3, [r7, #8]
 80004ce:	68db      	ldr	r3, [r3, #12]
 80004d0:	2b02      	cmp	r3, #2
 80004d2:	d006      	beq.n	80004e2 <block_request_lseekable+0x46>
 80004d4:	2b03      	cmp	r3, #3
 80004d6:	d008      	beq.n	80004ea <block_request_lseekable+0x4e>
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d10a      	bne.n	80004f2 <block_request_lseekable+0x56>
            case SEEK_SET:
                pos = 0;
 80004dc:	2300      	movs	r3, #0
 80004de:	647b      	str	r3, [r7, #68]	; 0x44
                break;
 80004e0:	e00a      	b.n	80004f8 <block_request_lseekable+0x5c>
            case SEEK_CUR:
                pos = block->pos;
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	647b      	str	r3, [r7, #68]	; 0x44
                break;
 80004e8:	e006      	b.n	80004f8 <block_request_lseekable+0x5c>
            case SEEK_END:
                pos = -1;
 80004ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004ee:	647b      	str	r3, [r7, #68]	; 0x44
                break;
 80004f0:	e002      	b.n	80004f8 <block_request_lseekable+0x5c>
            default:
                return FILE_ACCESS_ERROR;
 80004f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004f6:	e046      	b.n	8000586 <block_request_lseekable+0xea>
        }

        struct block_request block_request = {
 80004f8:	2303      	movs	r3, #3
 80004fa:	627b      	str	r3, [r7, #36]	; 0x24
            .cmd = BLOCK_CMD_SEEK,
            .task = task->pid,
 80004fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80004fe:	685b      	ldr	r3, [r3, #4]
                break;
            default:
                return FILE_ACCESS_ERROR;
        }

        struct block_request block_request = {
 8000500:	62bb      	str	r3, [r7, #40]	; 0x28
            .cmd = BLOCK_CMD_SEEK,
            .task = task->pid,
            .fd = block->file.fd,
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	681b      	ldr	r3, [r3, #0]
                break;
            default:
                return FILE_ACCESS_ERROR;
        }

        struct block_request block_request = {
 8000506:	62fb      	str	r3, [r7, #44]	; 0x2c
            .cmd = BLOCK_CMD_SEEK,
            .task = task->pid,
            .fd = block->file.fd,
            .size = request->size,
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	689b      	ldr	r3, [r3, #8]
                break;
            default:
                return FILE_ACCESS_ERROR;
        }

        struct block_request block_request = {
 800050c:	633b      	str	r3, [r7, #48]	; 0x30
 800050e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000510:	637b      	str	r3, [r7, #52]	; 0x34
            .fd = block->file.fd,
            .size = request->size,
            .pos = pos,
        };

        struct file_request file_request = {
 8000512:	f107 0314 	add.w	r3, r7, #20
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	3304      	adds	r3, #4
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	3304      	adds	r3, #4
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	3304      	adds	r3, #4
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	3304      	adds	r3, #4
 800052e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000532:	61bb      	str	r3, [r7, #24]
 8000534:	2314      	movs	r3, #20
 8000536:	61fb      	str	r3, [r7, #28]
            .task = NULL,
            .buf = (char *)&block_request,
            .size = sizeof(block_request),
        };

        if (file_write(driver, &file_request, monitor) == 1) {
 8000538:	f107 0314 	add.w	r3, r7, #20
 800053c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800053e:	4619      	mov	r1, r3
 8000540:	687a      	ldr	r2, [r7, #4]
 8000542:	f000 fd73 	bl	800102c <file_write>
 8000546:	4603      	mov	r3, r0
 8000548:	2b01      	cmp	r3, #1
 800054a:	d107      	bne.n	800055c <block_request_lseekable+0xc0>
            block->request_pid = task->pid;
 800054c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800054e:	685a      	ldr	r2, [r3, #4]
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	615a      	str	r2, [r3, #20]
            block->buzy = 1;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	2201      	movs	r2, #1
 8000558:	619a      	str	r2, [r3, #24]
 800055a:	e00c      	b.n	8000576 <block_request_lseekable+0xda>
 800055c:	e00b      	b.n	8000576 <block_request_lseekable+0xda>
        }
    }
    else if (block->request_pid == task->pid && !block->buzy) {
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	695a      	ldr	r2, [r3, #20]
 8000562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	429a      	cmp	r2, r3
 8000568:	d105      	bne.n	8000576 <block_request_lseekable+0xda>
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d101      	bne.n	8000576 <block_request_lseekable+0xda>
        return FILE_ACCESS_ACCEPT;
 8000572:	2301      	movs	r3, #1
 8000574:	e007      	b.n	8000586 <block_request_lseekable+0xea>
    }

	event_monitor_block(monitor, block->event, task);
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	691b      	ldr	r3, [r3, #16]
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	4619      	mov	r1, r3
 800057e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000580:	f000 fa4c 	bl	8000a1c <event_monitor_block>
    return FILE_ACCESS_BLOCK;
 8000584:	2300      	movs	r3, #0
}
 8000586:	4618      	mov	r0, r3
 8000588:	3748      	adds	r7, #72	; 0x48
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop

08000590 <block_request_read>:

int block_request_read (struct block *block, struct file_request *request,
                        struct event_monitor *monitor)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
    if (block->transfer_len > 0) {
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	dd12      	ble.n	80005ca <block_request_read+0x3a>
        memcpy(request->buf, block->buf, block->transfer_len);
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	6859      	ldr	r1, [r3, #4]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	f103 0220 	add.w	r2, r3, #32
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005b2:	4608      	mov	r0, r1
 80005b4:	4611      	mov	r1, r2
 80005b6:	461a      	mov	r2, r3
 80005b8:	f014 fe82 	bl	80152c0 <memcpy>

        block->pos += block->transfer_len;
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	69da      	ldr	r2, [r3, #28]
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005c4:	441a      	add	r2, r3
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	61da      	str	r2, [r3, #28]
    }

    block->request_pid = 0;
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	2200      	movs	r2, #0
 80005ce:	615a      	str	r2, [r3, #20]
    return block->transfer_len;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <block_request_write>:

int block_request_write (struct block *block, struct file_request *request,
                         struct event_monitor *monitor)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
    if (block->transfer_len > 0) {
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	dd06      	ble.n	80005fe <block_request_write+0x22>
        block->pos += block->transfer_len;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	69da      	ldr	r2, [r3, #28]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005f8:	441a      	add	r2, r3
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	61da      	str	r2, [r3, #28]
    }

    block->request_pid = 0;
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	2200      	movs	r2, #0
 8000602:	615a      	str	r2, [r3, #20]
    return block->transfer_len;
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 8000608:	4618      	mov	r0, r3
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <block_request_lseek>:

int block_request_lseek (struct block *block, struct file_request *request,
                         struct event_monitor *monitor)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	607a      	str	r2, [r7, #4]
    if (block->transfer_len >= 0) {
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000624:	2b00      	cmp	r3, #0
 8000626:	db03      	blt.n	8000630 <block_request_lseek+0x1c>
        block->pos = block->transfer_len;
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	61da      	str	r2, [r3, #28]
    }

    block->request_pid = 0;
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	2200      	movs	r2, #0
 8000634:	615a      	str	r2, [r3, #20]
    return block->transfer_len;
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 800063a:	4618      	mov	r0, r3
 800063c:	3714      	adds	r7, #20
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <block_event_release>:

int block_event_release(struct event_monitor *monitor, int event,
                        struct task_control_block *task, void *data)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
 8000654:	603b      	str	r3, [r7, #0]
    struct file *file = data;
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	617b      	str	r3, [r7, #20]
    struct file_request *request = (void*)task->stack->r0;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000660:	613b      	str	r3, [r7, #16]

    switch (task->stack->r7) {
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	2b04      	cmp	r3, #4
 800066a:	d004      	beq.n	8000676 <block_event_release+0x2e>
 800066c:	2b0a      	cmp	r3, #10
 800066e:	d010      	beq.n	8000692 <block_event_release+0x4a>
 8000670:	2b03      	cmp	r3, #3
 8000672:	d007      	beq.n	8000684 <block_event_release+0x3c>
 8000674:	e014      	b.n	80006a0 <block_event_release+0x58>
        case 0x04:
            return file_read(file, request, monitor);
 8000676:	6978      	ldr	r0, [r7, #20]
 8000678:	6939      	ldr	r1, [r7, #16]
 800067a:	68fa      	ldr	r2, [r7, #12]
 800067c:	f000 fc8c 	bl	8000f98 <file_read>
 8000680:	4603      	mov	r3, r0
 8000682:	e00e      	b.n	80006a2 <block_event_release+0x5a>
        case 0x03:
            return file_write(file, request, monitor);
 8000684:	6978      	ldr	r0, [r7, #20]
 8000686:	6939      	ldr	r1, [r7, #16]
 8000688:	68fa      	ldr	r2, [r7, #12]
 800068a:	f000 fccf 	bl	800102c <file_write>
 800068e:	4603      	mov	r3, r0
 8000690:	e007      	b.n	80006a2 <block_event_release+0x5a>
        case 0x0a:
            return file_lseek(file, request, monitor);
 8000692:	6978      	ldr	r0, [r7, #20]
 8000694:	6939      	ldr	r1, [r7, #16]
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	f000 fd6a 	bl	8001170 <file_lseek>
 800069c:	4603      	mov	r3, r0
 800069e:	e000      	b.n	80006a2 <block_event_release+0x5a>
        default:
            return 0;
 80006a0:	2300      	movs	r3, #0
    }
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3718      	adds	r7, #24
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop

080006ac <block_init>:

int block_init(int fd, int driver_pid, struct file *files[],
               struct memory_pool *memory_pool, struct event_monitor *monitor)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
 80006b8:	603b      	str	r3, [r7, #0]
    struct block *block;

    block = memory_pool_alloc(memory_pool, sizeof(*block));
 80006ba:	6838      	ldr	r0, [r7, #0]
 80006bc:	2164      	movs	r1, #100	; 0x64
 80006be:	f002 fdb7 	bl	8003230 <memory_pool_alloc>
 80006c2:	6178      	str	r0, [r7, #20]

    if (!block)
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d102      	bne.n	80006d0 <block_init+0x24>
        return -1;
 80006ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006ce:	e02f      	b.n	8000730 <block_init+0x84>

    block->driver_pid = driver_pid;
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	68ba      	ldr	r2, [r7, #8]
 80006d4:	609a      	str	r2, [r3, #8]
    block->driver_file = files[driver_pid + 3];
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	3303      	adds	r3, #3
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	4413      	add	r3, r2
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	60da      	str	r2, [r3, #12]
    block->request_pid = 0;
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	2200      	movs	r2, #0
 80006ea:	615a      	str	r2, [r3, #20]
    block->buzy = 0;
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	2200      	movs	r2, #0
 80006f0:	619a      	str	r2, [r3, #24]
    block->pos = 0;
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	2200      	movs	r2, #0
 80006f6:	61da      	str	r2, [r3, #28]
	block->file.ops = &block_ops;
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	4a0f      	ldr	r2, [pc, #60]	; (8000738 <block_init+0x8c>)
 80006fc:	605a      	str	r2, [r3, #4]
    block->event = event_monitor_find_free(monitor);
 80006fe:	6a38      	ldr	r0, [r7, #32]
 8000700:	f000 f93c 	bl	800097c <event_monitor_find_free>
 8000704:	4602      	mov	r2, r0
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	611a      	str	r2, [r3, #16]
    files[fd] = &block->file;
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	4413      	add	r3, r2
 8000712:	697a      	ldr	r2, [r7, #20]
 8000714:	601a      	str	r2, [r3, #0]

    event_monitor_register(monitor, block->event, block_event_release, files[fd]);
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	691a      	ldr	r2, [r3, #16]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	6879      	ldr	r1, [r7, #4]
 8000720:	440b      	add	r3, r1
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	6a38      	ldr	r0, [r7, #32]
 8000726:	4611      	mov	r1, r2
 8000728:	4a04      	ldr	r2, [pc, #16]	; (800073c <block_init+0x90>)
 800072a:	f000 f94d 	bl	80009c8 <event_monitor_register>

    return 0;
 800072e:	2300      	movs	r3, #0
}
 8000730:	4618      	mov	r0, r3
 8000732:	3718      	adds	r7, #24
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000000 	.word	0x20000000
 800073c:	08000649 	.word	0x08000649

08000740 <block_response>:

int block_response(int fd, char *buf, int len)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0
 8000746:	60f8      	str	r0, [r7, #12]
 8000748:	60b9      	str	r1, [r7, #8]
 800074a:	607a      	str	r2, [r7, #4]
    struct block_response response = {
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	617b      	str	r3, [r7, #20]
        .transfer_len = len,
        .buf = buf
    };
    return write(fd, &response, sizeof(response));
 8000754:	f107 0310 	add.w	r3, r7, #16
 8000758:	68f8      	ldr	r0, [r7, #12]
 800075a:	4619      	mov	r1, r3
 800075c:	2208      	movs	r2, #8
 800075e:	f014 fe05 	bl	801536c <write>
 8000762:	4603      	mov	r3, r0
}
 8000764:	4618      	mov	r0, r3
 8000766:	3718      	adds	r7, #24
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <block_readable>:

int block_readable (struct file *file, struct file_request *request,
                    struct event_monitor *monitor)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
    struct block *block = container_of(file, struct block, file);
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	617b      	str	r3, [r7, #20]
    if (block->driver_pid == request->task->pid) {
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	689a      	ldr	r2, [r3, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	429a      	cmp	r2, r3
 8000788:	d106      	bne.n	8000798 <block_readable+0x2c>
        return block_driver_readable(block, request, monitor);
 800078a:	6978      	ldr	r0, [r7, #20]
 800078c:	68b9      	ldr	r1, [r7, #8]
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	f7ff fd0c 	bl	80001ac <block_driver_readable>
 8000794:	4603      	mov	r3, r0
 8000796:	e005      	b.n	80007a4 <block_readable+0x38>
    }
    else {
        return block_request_readable(block, request, monitor);
 8000798:	6978      	ldr	r0, [r7, #20]
 800079a:	68b9      	ldr	r1, [r7, #8]
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	f7ff fdab 	bl	80002f8 <block_request_readable>
 80007a2:	4603      	mov	r3, r0
    }
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3718      	adds	r7, #24
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <block_writable>:

int block_writable (struct file *file, struct file_request *request,
                    struct event_monitor *monitor)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
    struct block *block = container_of(file, struct block, file);
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	617b      	str	r3, [r7, #20]
    if (block->driver_pid == request->task->pid) {
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	689a      	ldr	r2, [r3, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d106      	bne.n	80007d8 <block_writable+0x2c>
        return block_driver_writable(block, request, monitor);
 80007ca:	6978      	ldr	r0, [r7, #20]
 80007cc:	68b9      	ldr	r1, [r7, #8]
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	f7ff fd00 	bl	80001d4 <block_driver_writable>
 80007d4:	4603      	mov	r3, r0
 80007d6:	e005      	b.n	80007e4 <block_writable+0x38>
    }
    else {
        return block_request_writable(block, request, monitor);
 80007d8:	6978      	ldr	r0, [r7, #20]
 80007da:	68b9      	ldr	r1, [r7, #8]
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	f7ff fdef 	bl	80003c0 <block_request_writable>
 80007e2:	4603      	mov	r3, r0
    }
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3718      	adds	r7, #24
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <block_read>:

int block_read (struct file *file, struct file_request *request,
                struct event_monitor *monitor)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	607a      	str	r2, [r7, #4]
    struct block *block = container_of(file, struct block, file);
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	617b      	str	r3, [r7, #20]
    if (block->driver_pid == request->task->pid) {
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	689a      	ldr	r2, [r3, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	429a      	cmp	r2, r3
 8000808:	d106      	bne.n	8000818 <block_read+0x2c>
        return block_driver_read(block, request, monitor);
 800080a:	6978      	ldr	r0, [r7, #20]
 800080c:	68b9      	ldr	r1, [r7, #8]
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	f7ff fd08 	bl	8000224 <block_driver_read>
 8000814:	4603      	mov	r3, r0
 8000816:	e005      	b.n	8000824 <block_read+0x38>
    }
    else {
        return block_request_read(block, request, monitor);
 8000818:	6978      	ldr	r0, [r7, #20]
 800081a:	68b9      	ldr	r1, [r7, #8]
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	f7ff feb7 	bl	8000590 <block_request_read>
 8000822:	4603      	mov	r3, r0
    }
}
 8000824:	4618      	mov	r0, r3
 8000826:	3718      	adds	r7, #24
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <block_write>:

int block_write (struct file *file, struct file_request *request,
                 struct event_monitor *monitor)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
    struct block *block = container_of(file, struct block, file);
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	617b      	str	r3, [r7, #20]
    if (block->driver_pid == request->task->pid) {
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	689a      	ldr	r2, [r3, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	429a      	cmp	r2, r3
 8000848:	d106      	bne.n	8000858 <block_write+0x2c>
        return block_driver_write(block, request, monitor);
 800084a:	6978      	ldr	r0, [r7, #20]
 800084c:	68b9      	ldr	r1, [r7, #8]
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	f7ff fd06 	bl	8000260 <block_driver_write>
 8000854:	4603      	mov	r3, r0
 8000856:	e005      	b.n	8000864 <block_write+0x38>
    }
    else {
        return block_request_write(block, request, monitor);
 8000858:	6978      	ldr	r0, [r7, #20]
 800085a:	68b9      	ldr	r1, [r7, #8]
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	f7ff febd 	bl	80005dc <block_request_write>
 8000862:	4603      	mov	r3, r0
    }
}
 8000864:	4618      	mov	r0, r3
 8000866:	3718      	adds	r7, #24
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <block_lseekable>:

int block_lseekable (struct file *file, struct file_request *request,
                     struct event_monitor *monitor)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]
    struct block *block = container_of(file, struct block, file);
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	617b      	str	r3, [r7, #20]
    if (block->driver_pid == request->task->pid) {
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	689a      	ldr	r2, [r3, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	429a      	cmp	r2, r3
 8000888:	d106      	bne.n	8000898 <block_lseekable+0x2c>
        return block_driver_lseekable(block, request, monitor);
 800088a:	6978      	ldr	r0, [r7, #20]
 800088c:	68b9      	ldr	r1, [r7, #8]
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	f7ff fcb4 	bl	80001fc <block_driver_lseekable>
 8000894:	4603      	mov	r3, r0
 8000896:	e005      	b.n	80008a4 <block_lseekable+0x38>
    }
    else {
        return block_request_lseekable(block, request, monitor);
 8000898:	6978      	ldr	r0, [r7, #20]
 800089a:	68b9      	ldr	r1, [r7, #8]
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	f7ff fdfd 	bl	800049c <block_request_lseekable>
 80008a2:	4603      	mov	r3, r0
    }
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3718      	adds	r7, #24
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <block_lseek>:

int block_lseek (struct file *file, struct file_request *request,
                 struct event_monitor *monitor)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b086      	sub	sp, #24
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	607a      	str	r2, [r7, #4]
    struct block *block = container_of(file, struct block, file);
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	617b      	str	r3, [r7, #20]
    if (block->driver_pid == request->task->pid) {
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	689a      	ldr	r2, [r3, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	d106      	bne.n	80008d8 <block_lseek+0x2c>
        return block_driver_lseek(block, request, monitor);
 80008ca:	6978      	ldr	r0, [r7, #20]
 80008cc:	68b9      	ldr	r1, [r7, #8]
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	f7ff fcf8 	bl	80002c4 <block_driver_lseek>
 80008d4:	4603      	mov	r3, r0
 80008d6:	e005      	b.n	80008e4 <block_lseek+0x38>
    }
    else {
        return block_request_lseek(block, request, monitor);
 80008d8:	6978      	ldr	r0, [r7, #20]
 80008da:	68b9      	ldr	r1, [r7, #8]
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	f7ff fe99 	bl	8000614 <block_request_lseek>
 80008e2:	4603      	mov	r3, r0
    }
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3718      	adds	r7, #24
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <event_monitor_init>:


void event_monitor_init(struct event_monitor *monitor,
                        struct event *events,
                        struct list *ready_list)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
    int i;

    monitor->events = events;
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	68ba      	ldr	r2, [r7, #8]
 80008fc:	601a      	str	r2, [r3, #0]
    monitor->ready_list = ready_list;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	605a      	str	r2, [r3, #4]

    for (i = 0; i < EVENT_LIMIT; i++) {
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	e031      	b.n	800096e <event_monitor_init+0x82>
        events[i].registerd = 0;
 800090a:	697a      	ldr	r2, [r7, #20]
 800090c:	4613      	mov	r3, r2
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	4413      	add	r3, r2
 8000912:	00db      	lsls	r3, r3, #3
 8000914:	68ba      	ldr	r2, [r7, #8]
 8000916:	4413      	add	r3, r2
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
        events[i].pending = 0;
 800091c:	697a      	ldr	r2, [r7, #20]
 800091e:	4613      	mov	r3, r2
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	4413      	add	r3, r2
 8000924:	00db      	lsls	r3, r3, #3
 8000926:	68ba      	ldr	r2, [r7, #8]
 8000928:	4413      	add	r3, r2
 800092a:	2200      	movs	r2, #0
 800092c:	605a      	str	r2, [r3, #4]
        events[i].handler = 0;
 800092e:	697a      	ldr	r2, [r7, #20]
 8000930:	4613      	mov	r3, r2
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	4413      	add	r3, r2
 8000936:	00db      	lsls	r3, r3, #3
 8000938:	68ba      	ldr	r2, [r7, #8]
 800093a:	4413      	add	r3, r2
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
        events[i].data = 0;
 8000940:	697a      	ldr	r2, [r7, #20]
 8000942:	4613      	mov	r3, r2
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	4413      	add	r3, r2
 8000948:	00db      	lsls	r3, r3, #3
 800094a:	68ba      	ldr	r2, [r7, #8]
 800094c:	4413      	add	r3, r2
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
        list_init(&events[i].list);
 8000952:	697a      	ldr	r2, [r7, #20]
 8000954:	4613      	mov	r3, r2
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	4413      	add	r3, r2
 800095a:	00db      	lsls	r3, r3, #3
 800095c:	68ba      	ldr	r2, [r7, #8]
 800095e:	4413      	add	r3, r2
 8000960:	3310      	adds	r3, #16
 8000962:	4618      	mov	r0, r3
 8000964:	f002 fbb2 	bl	80030cc <list_init>
    int i;

    monitor->events = events;
    monitor->ready_list = ready_list;

    for (i = 0; i < EVENT_LIMIT; i++) {
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	3301      	adds	r3, #1
 800096c:	617b      	str	r3, [r7, #20]
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	2baa      	cmp	r3, #170	; 0xaa
 8000972:	ddca      	ble.n	800090a <event_monitor_init+0x1e>
        events[i].pending = 0;
        events[i].handler = 0;
        events[i].data = 0;
        list_init(&events[i].list);
    }
}
 8000974:	3718      	adds	r7, #24
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop

0800097c <event_monitor_find_free>:

int event_monitor_find_free(struct event_monitor *monitor)
{
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
    int i;
    for (i = 0; i < EVENT_LIMIT && monitor->events[i].registerd; i++);
 8000984:	2300      	movs	r3, #0
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	e002      	b.n	8000990 <event_monitor_find_free+0x14>
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	3301      	adds	r3, #1
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	2baa      	cmp	r3, #170	; 0xaa
 8000994:	dc0a      	bgt.n	80009ac <event_monitor_find_free+0x30>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6819      	ldr	r1, [r3, #0]
 800099a:	68fa      	ldr	r2, [r7, #12]
 800099c:	4613      	mov	r3, r2
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	4413      	add	r3, r2
 80009a2:	00db      	lsls	r3, r3, #3
 80009a4:	440b      	add	r3, r1
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d1ee      	bne.n	800098a <event_monitor_find_free+0xe>

    if (i == EVENT_LIMIT)
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	2bab      	cmp	r3, #171	; 0xab
 80009b0:	d102      	bne.n	80009b8 <event_monitor_find_free+0x3c>
        return -1;
 80009b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009b6:	e000      	b.n	80009ba <event_monitor_find_free+0x3e>

    return i;
 80009b8:	68fb      	ldr	r3, [r7, #12]
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3714      	adds	r7, #20
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop

080009c8 <event_monitor_register>:

void event_monitor_register(struct event_monitor *monitor, int event,
                            event_monitor_handler handler, void *data)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
 80009d4:	603b      	str	r3, [r7, #0]
    monitor->events[event].registerd = 1;
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	6819      	ldr	r1, [r3, #0]
 80009da:	68ba      	ldr	r2, [r7, #8]
 80009dc:	4613      	mov	r3, r2
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	4413      	add	r3, r2
 80009e2:	00db      	lsls	r3, r3, #3
 80009e4:	440b      	add	r3, r1
 80009e6:	2201      	movs	r2, #1
 80009e8:	601a      	str	r2, [r3, #0]
    monitor->events[event].handler = handler;
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	6819      	ldr	r1, [r3, #0]
 80009ee:	68ba      	ldr	r2, [r7, #8]
 80009f0:	4613      	mov	r3, r2
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	4413      	add	r3, r2
 80009f6:	00db      	lsls	r3, r3, #3
 80009f8:	440b      	add	r3, r1
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	609a      	str	r2, [r3, #8]
    monitor->events[event].data = data;
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	6819      	ldr	r1, [r3, #0]
 8000a02:	68ba      	ldr	r2, [r7, #8]
 8000a04:	4613      	mov	r3, r2
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	4413      	add	r3, r2
 8000a0a:	00db      	lsls	r3, r3, #3
 8000a0c:	440b      	add	r3, r1
 8000a0e:	683a      	ldr	r2, [r7, #0]
 8000a10:	60da      	str	r2, [r3, #12]
}
 8000a12:	3714      	adds	r7, #20
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <event_monitor_block>:

void event_monitor_block(struct event_monitor *monitor, int event,
                         struct task_control_block *task)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
    if (task->status == TASK_READY)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	689b      	ldr	r3, [r3, #8]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d10f      	bne.n	8000a50 <event_monitor_block+0x34>
        list_push(&monitor->events[event].list, &task->list);
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	6819      	ldr	r1, [r3, #0]
 8000a34:	68ba      	ldr	r2, [r7, #8]
 8000a36:	4613      	mov	r3, r2
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	4413      	add	r3, r2
 8000a3c:	00db      	lsls	r3, r3, #3
 8000a3e:	440b      	add	r3, r1
 8000a40:	f103 0210 	add.w	r2, r3, #16
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3310      	adds	r3, #16
 8000a48:	4610      	mov	r0, r2
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	f002 fb98 	bl	8003180 <list_push>
}
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop

08000a58 <event_monitor_release>:

void event_monitor_release(struct event_monitor *monitor, int event)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
    monitor->events[event].pending = 1;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6819      	ldr	r1, [r3, #0]
 8000a66:	683a      	ldr	r2, [r7, #0]
 8000a68:	4613      	mov	r3, r2
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	4413      	add	r3, r2
 8000a6e:	00db      	lsls	r3, r3, #3
 8000a70:	440b      	add	r3, r1
 8000a72:	2201      	movs	r2, #1
 8000a74:	605a      	str	r2, [r3, #4]
}
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <event_monitor_serve>:

void event_monitor_serve(struct event_monitor *monitor)
{
 8000a80:	b590      	push	{r4, r7, lr}
 8000a82:	b089      	sub	sp, #36	; 0x24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
    int i;
    for (i = 0; i < EVENT_LIMIT; i++) {
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
 8000a8c:	e04e      	b.n	8000b2c <event_monitor_serve+0xac>
        if (monitor->events[i].pending) {
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6819      	ldr	r1, [r3, #0]
 8000a92:	69fa      	ldr	r2, [r7, #28]
 8000a94:	4613      	mov	r3, r2
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	4413      	add	r3, r2
 8000a9a:	00db      	lsls	r3, r3, #3
 8000a9c:	440b      	add	r3, r1
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d040      	beq.n	8000b26 <event_monitor_serve+0xa6>
            struct event *event = &monitor->events[i];
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6819      	ldr	r1, [r3, #0]
 8000aa8:	69fa      	ldr	r2, [r7, #28]
 8000aaa:	4613      	mov	r3, r2
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	4413      	add	r3, r2
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	440b      	add	r3, r1
 8000ab4:	613b      	str	r3, [r7, #16]
            struct task_control_block *task;
            struct list *curr, *next;

            list_for_each_safe (curr, next, &event->list) {
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	695b      	ldr	r3, [r3, #20]
 8000aba:	61bb      	str	r3, [r7, #24]
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	617b      	str	r3, [r7, #20]
 8000ac2:	e025      	b.n	8000b10 <event_monitor_serve+0x90>
                task = list_entry(curr, struct task_control_block, list);
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	3b10      	subs	r3, #16
 8000ac8:	60fb      	str	r3, [r7, #12]
                if (event->handler
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d019      	beq.n	8000b06 <event_monitor_serve+0x86>
                        && event->handler(monitor, i, task, event->data)) {
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	689c      	ldr	r4, [r3, #8]
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	68db      	ldr	r3, [r3, #12]
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	69f9      	ldr	r1, [r7, #28]
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	47a0      	blx	r4
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d00e      	beq.n	8000b06 <event_monitor_serve+0x86>
                    list_push(&monitor->ready_list[task->priority], &task->list);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	685a      	ldr	r2, [r3, #4]
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	00db      	lsls	r3, r3, #3
 8000af2:	441a      	add	r2, r3
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	3310      	adds	r3, #16
 8000af8:	4610      	mov	r0, r2
 8000afa:	4619      	mov	r1, r3
 8000afc:	f002 fb40 	bl	8003180 <list_push>
                    task->status = TASK_READY;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
        if (monitor->events[i].pending) {
            struct event *event = &monitor->events[i];
            struct task_control_block *task;
            struct list *curr, *next;

            list_for_each_safe (curr, next, &event->list) {
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	61bb      	str	r3, [r7, #24]
 8000b0a:	69bb      	ldr	r3, [r7, #24]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	f103 0210 	add.w	r2, r3, #16
 8000b16:	69bb      	ldr	r3, [r7, #24]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d1d3      	bne.n	8000ac4 <event_monitor_serve+0x44>
                    list_push(&monitor->ready_list[task->priority], &task->list);
                    task->status = TASK_READY;
                }
            }

            event->pending = 0;
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	2200      	movs	r2, #0
 8000b20:	605a      	str	r2, [r3, #4]

            /* If someone pending events, rescan events */
            i = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
}

void event_monitor_serve(struct event_monitor *monitor)
{
    int i;
    for (i = 0; i < EVENT_LIMIT; i++) {
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	61fb      	str	r3, [r7, #28]
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	2baa      	cmp	r3, #170	; 0xaa
 8000b30:	ddad      	ble.n	8000a8e <event_monitor_serve+0xe>

            /* If someone pending events, rescan events */
            i = 0;
        }
    }
}
 8000b32:	3724      	adds	r7, #36	; 0x24
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd90      	pop	{r4, r7, pc}

08000b38 <mkfifo>:
	.lseekable = NULL,
	.lseek = NULL,
};

int mkfifo(const char *pathname, int mode)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
	mkfile(pathname, mode, S_IFIFO);
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	6839      	ldr	r1, [r7, #0]
 8000b46:	2201      	movs	r2, #1
 8000b48:	f000 f92a 	bl	8000da0 <mkfile>
	return 0;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop

08000b58 <fifo_init>:

int
fifo_init(int fd, int driver_pid, struct file *files[],
          struct memory_pool *memory_pool, struct event_monitor *monitor)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
 8000b64:	603b      	str	r3, [r7, #0]
    struct pipe_ringbuffer *pipe;

    pipe = memory_pool_alloc(memory_pool, sizeof(struct pipe_ringbuffer));
 8000b66:	6838      	ldr	r0, [r7, #0]
 8000b68:	2158      	movs	r1, #88	; 0x58
 8000b6a:	f002 fb61 	bl	8003230 <memory_pool_alloc>
 8000b6e:	6178      	str	r0, [r7, #20]

    if (!pipe)
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d102      	bne.n	8000b7c <fifo_init+0x24>
        return -1;
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b7a:	e033      	b.n	8000be4 <fifo_init+0x8c>

    pipe->start = 0;
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
    pipe->end = 0;
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	2200      	movs	r2, #0
 8000b86:	60da      	str	r2, [r3, #12]
	pipe->file.ops = &fifo_ops;
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	4a18      	ldr	r2, [pc, #96]	; (8000bec <fifo_init+0x94>)
 8000b8c:	605a      	str	r2, [r3, #4]
    files[fd] = &pipe->file;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	4413      	add	r3, r2
 8000b96:	697a      	ldr	r2, [r7, #20]
 8000b98:	601a      	str	r2, [r3, #0]

    pipe->read_event = event_monitor_find_free(monitor);
 8000b9a:	6a38      	ldr	r0, [r7, #32]
 8000b9c:	f7ff feee 	bl	800097c <event_monitor_find_free>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	611a      	str	r2, [r3, #16]
    event_monitor_register(monitor, pipe->read_event, pipe_read_release, files[fd]);
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	691a      	ldr	r2, [r3, #16]
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	440b      	add	r3, r1
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	6a38      	ldr	r0, [r7, #32]
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4a0d      	ldr	r2, [pc, #52]	; (8000bf0 <fifo_init+0x98>)
 8000bba:	f7ff ff05 	bl	80009c8 <event_monitor_register>

    pipe->write_event = event_monitor_find_free(monitor);
 8000bbe:	6a38      	ldr	r0, [r7, #32]
 8000bc0:	f7ff fedc 	bl	800097c <event_monitor_find_free>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	615a      	str	r2, [r3, #20]
    event_monitor_register(monitor, pipe->write_event, pipe_write_release, files[fd]);
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	695a      	ldr	r2, [r3, #20]
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	440b      	add	r3, r1
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	6a38      	ldr	r0, [r7, #32]
 8000bda:	4611      	mov	r1, r2
 8000bdc:	4a05      	ldr	r2, [pc, #20]	; (8000bf4 <fifo_init+0x9c>)
 8000bde:	f7ff fef3 	bl	80009c8 <event_monitor_register>
    return 0;
 8000be2:	2300      	movs	r3, #0
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3718      	adds	r7, #24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000018 	.word	0x20000018
 8000bf0:	08003f51 	.word	0x08003f51
 8000bf4:	08003f81 	.word	0x08003f81

08000bf8 <fifo_readable>:

int
fifo_readable (struct file *file, struct file_request *request,
               struct event_monitor *monitor)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
	/* Trying to read too much */
	if (request->size > PIPE_BUF) {
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	2b40      	cmp	r3, #64	; 0x40
 8000c0a:	dd02      	ble.n	8000c12 <fifo_readable+0x1a>
		return FILE_ACCESS_ERROR;
 8000c0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c10:	e021      	b.n	8000c56 <fifo_readable+0x5e>
	}

	struct pipe_ringbuffer *pipe =
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	617b      	str	r3, [r7, #20]
	    container_of(file, struct pipe_ringbuffer, file);

	if ((size_t)PIPE_LEN(*pipe) < request->size) {
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	68da      	ldr	r2, [r3, #12]
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	1ad2      	subs	r2, r2, r3
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	68d9      	ldr	r1, [r3, #12]
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	689b      	ldr	r3, [r3, #8]
 8000c28:	4299      	cmp	r1, r3
 8000c2a:	da01      	bge.n	8000c30 <fifo_readable+0x38>
 8000c2c:	2340      	movs	r3, #64	; 0x40
 8000c2e:	e000      	b.n	8000c32 <fifo_readable+0x3a>
 8000c30:	2300      	movs	r3, #0
 8000c32:	4413      	add	r3, r2
 8000c34:	461a      	mov	r2, r3
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d20a      	bcs.n	8000c54 <fifo_readable+0x5c>
		/* Trying to read more than there is: block */
		event_monitor_block(monitor, pipe->read_event, request->task);
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	691a      	ldr	r2, [r3, #16]
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	4611      	mov	r1, r2
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	f7ff fee6 	bl	8000a1c <event_monitor_block>
		return FILE_ACCESS_BLOCK;
 8000c50:	2300      	movs	r3, #0
 8000c52:	e000      	b.n	8000c56 <fifo_readable+0x5e>
	}
	return FILE_ACCESS_ACCEPT;
 8000c54:	2301      	movs	r3, #1
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3718      	adds	r7, #24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop

08000c60 <fifo_writable>:

int
fifo_writable (struct file *file, struct file_request *request,
               struct event_monitor *monitor)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
	struct pipe_ringbuffer *pipe =
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	617b      	str	r3, [r7, #20]
	    container_of(file, struct pipe_ringbuffer, file);

	/* If the write would be non-atomic */
	if (request->size > PIPE_BUF) {
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	2b40      	cmp	r3, #64	; 0x40
 8000c76:	dd02      	ble.n	8000c7e <fifo_writable+0x1e>
		return FILE_ACCESS_ERROR;
 8000c78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c7c:	e020      	b.n	8000cc0 <fifo_writable+0x60>
	}
	/* Preserve 1 byte to distiguish empty or full */
	if ((size_t)PIPE_BUF - PIPE_LEN(*pipe) - 1 < request->size) {
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	689a      	ldr	r2, [r3, #8]
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	68db      	ldr	r3, [r3, #12]
 8000c86:	1ad2      	subs	r2, r2, r3
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	68d9      	ldr	r1, [r3, #12]
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	4299      	cmp	r1, r3
 8000c92:	da01      	bge.n	8000c98 <fifo_writable+0x38>
 8000c94:	2340      	movs	r3, #64	; 0x40
 8000c96:	e000      	b.n	8000c9a <fifo_writable+0x3a>
 8000c98:	2300      	movs	r3, #0
 8000c9a:	1ad3      	subs	r3, r2, r3
 8000c9c:	f103 023f 	add.w	r2, r3, #63	; 0x3f
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d20a      	bcs.n	8000cbe <fifo_writable+0x5e>
		/* Trying to write more than we have space for: block */
	    event_monitor_block(monitor, pipe->write_event, request->task);
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	695a      	ldr	r2, [r3, #20]
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	4611      	mov	r1, r2
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	f7ff feb1 	bl	8000a1c <event_monitor_block>
		return FILE_ACCESS_BLOCK;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e000      	b.n	8000cc0 <fifo_writable+0x60>
	}
	return FILE_ACCESS_ACCEPT;
 8000cbe:	2301      	movs	r3, #1
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <fifo_read>:

int
fifo_read (struct file *file, struct file_request *request,
               struct event_monitor *monitor)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
	size_t i;
	struct pipe_ringbuffer *pipe =
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	613b      	str	r3, [r7, #16]
	    container_of(file, struct pipe_ringbuffer, file);

	/* Copy data into buf */
	for (i = 0; i < request->size; i++) {
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	e018      	b.n	8000d10 <fifo_read+0x48>
		PIPE_POP(*pipe, request->buf[i]);
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	685a      	ldr	r2, [r3, #4]
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	6892      	ldr	r2, [r2, #8]
 8000cea:	6939      	ldr	r1, [r7, #16]
 8000cec:	440a      	add	r2, r1
 8000cee:	7e12      	ldrb	r2, [r2, #24]
 8000cf0:	701a      	strb	r2, [r3, #0]
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	1c5a      	adds	r2, r3, #1
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	2b3f      	cmp	r3, #63	; 0x3f
 8000d02:	dd02      	ble.n	8000d0a <fifo_read+0x42>
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
	size_t i;
	struct pipe_ringbuffer *pipe =
	    container_of(file, struct pipe_ringbuffer, file);

	/* Copy data into buf */
	for (i = 0; i < request->size; i++) {
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	461a      	mov	r2, r3
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d8e0      	bhi.n	8000cde <fifo_read+0x16>
		PIPE_POP(*pipe, request->buf[i]);
	}

    /* Prepared to write */
	event_monitor_release(monitor, pipe->write_event);
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	695b      	ldr	r3, [r3, #20]
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	4619      	mov	r1, r3
 8000d24:	f7ff fe98 	bl	8000a58 <event_monitor_release>
	return request->size;
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	689b      	ldr	r3, [r3, #8]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <fifo_write>:

int
fifo_write (struct file *file, struct file_request *request,
               struct event_monitor *monitor)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
	size_t i;
	struct pipe_ringbuffer *pipe =
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	613b      	str	r3, [r7, #16]
	    container_of(file, struct pipe_ringbuffer, file);

	/* Copy data into pipe */
	for (i = 0; i < request->size; i++)
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	e018      	b.n	8000d7c <fifo_write+0x48>
		PIPE_PUSH(*pipe, request->buf[i]);
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	68db      	ldr	r3, [r3, #12]
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	6851      	ldr	r1, [r2, #4]
 8000d52:	697a      	ldr	r2, [r7, #20]
 8000d54:	440a      	add	r2, r1
 8000d56:	7812      	ldrb	r2, [r2, #0]
 8000d58:	6939      	ldr	r1, [r7, #16]
 8000d5a:	440b      	add	r3, r1
 8000d5c:	761a      	strb	r2, [r3, #24]
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	68db      	ldr	r3, [r3, #12]
 8000d62:	1c5a      	adds	r2, r3, #1
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	60da      	str	r2, [r3, #12]
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	2b3f      	cmp	r3, #63	; 0x3f
 8000d6e:	dd02      	ble.n	8000d76 <fifo_write+0x42>
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	2200      	movs	r2, #0
 8000d74:	60da      	str	r2, [r3, #12]
	size_t i;
	struct pipe_ringbuffer *pipe =
	    container_of(file, struct pipe_ringbuffer, file);

	/* Copy data into pipe */
	for (i = 0; i < request->size; i++)
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	461a      	mov	r2, r3
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d8e0      	bhi.n	8000d4a <fifo_write+0x16>
		PIPE_PUSH(*pipe, request->buf[i]);

    /* Prepared to read */
	event_monitor_release(monitor, pipe->read_event);
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	691b      	ldr	r3, [r3, #16]
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f7ff fe62 	bl	8000a58 <event_monitor_release>
	return request->size;
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	689b      	ldr	r3, [r3, #8]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3718      	adds	r7, #24
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <mkfile>:
#include "block.h"
#include "regfile.h"
#include "path.h"

int mkfile(const char *pathname, int mode, int dev)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b096      	sub	sp, #88	; 0x58
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
    int cmd = PATH_CMD_MKFILE;
 8000dac:	2301      	movs	r3, #1
 8000dae:	653b      	str	r3, [r7, #80]	; 0x50
	unsigned int replyfd = getpid() + 3;
 8000db0:	f014 fad5 	bl	801535e <getpid>
 8000db4:	4603      	mov	r3, r0
 8000db6:	3303      	adds	r3, #3
 8000db8:	64fb      	str	r3, [r7, #76]	; 0x4c
	size_t plen = strlen(pathname)+1;
 8000dba:	68f8      	ldr	r0, [r7, #12]
 8000dbc:	f004 f83a 	bl	8004e34 <strlen>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	64bb      	str	r3, [r7, #72]	; 0x48
	char buf[4 + 4 + 4 + PATH_MAX + 4];
	(void) mode;
	int pos = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	657b      	str	r3, [r7, #84]	; 0x54
	int status = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	617b      	str	r3, [r7, #20]

	path_write_data(buf, &cmd, 4, pos);
 8000dce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000dd0:	f107 0218 	add.w	r2, r7, #24
 8000dd4:	441a      	add	r2, r3
 8000dd6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000dda:	4610      	mov	r0, r2
 8000ddc:	4619      	mov	r1, r3
 8000dde:	2204      	movs	r2, #4
 8000de0:	f014 fa6e 	bl	80152c0 <memcpy>
 8000de4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000de6:	3304      	adds	r3, #4
 8000de8:	657b      	str	r3, [r7, #84]	; 0x54
	path_write_data(buf, &replyfd, 4, pos);
 8000dea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000dec:	f107 0218 	add.w	r2, r7, #24
 8000df0:	441a      	add	r2, r3
 8000df2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000df6:	4610      	mov	r0, r2
 8000df8:	4619      	mov	r1, r3
 8000dfa:	2204      	movs	r2, #4
 8000dfc:	f014 fa60 	bl	80152c0 <memcpy>
 8000e00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e02:	3304      	adds	r3, #4
 8000e04:	657b      	str	r3, [r7, #84]	; 0x54
	path_write_data(buf, &plen, 4, pos);
 8000e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e08:	f107 0218 	add.w	r2, r7, #24
 8000e0c:	441a      	add	r2, r3
 8000e0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e12:	4610      	mov	r0, r2
 8000e14:	4619      	mov	r1, r3
 8000e16:	2204      	movs	r2, #4
 8000e18:	f014 fa52 	bl	80152c0 <memcpy>
 8000e1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e1e:	3304      	adds	r3, #4
 8000e20:	657b      	str	r3, [r7, #84]	; 0x54
	path_write_data(buf, pathname, plen, pos);
 8000e22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e24:	f107 0218 	add.w	r2, r7, #24
 8000e28:	441a      	add	r2, r3
 8000e2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e2c:	4610      	mov	r0, r2
 8000e2e:	68f9      	ldr	r1, [r7, #12]
 8000e30:	461a      	mov	r2, r3
 8000e32:	f014 fa45 	bl	80152c0 <memcpy>
 8000e36:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000e38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e3a:	4413      	add	r3, r2
 8000e3c:	657b      	str	r3, [r7, #84]	; 0x54
	path_write_data(buf, &dev, 4, pos);
 8000e3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e40:	f107 0218 	add.w	r2, r7, #24
 8000e44:	441a      	add	r2, r3
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	4610      	mov	r0, r2
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	2204      	movs	r2, #4
 8000e4e:	f014 fa37 	bl	80152c0 <memcpy>
 8000e52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e54:	3304      	adds	r3, #4
 8000e56:	657b      	str	r3, [r7, #84]	; 0x54

	write(PATHSERVER_FD, buf, pos);
 8000e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e5a:	f107 0218 	add.w	r2, r7, #24
 8000e5e:	200b      	movs	r0, #11
 8000e60:	4611      	mov	r1, r2
 8000e62:	461a      	mov	r2, r3
 8000e64:	f014 fa82 	bl	801536c <write>
	read(replyfd, &status, 4);
 8000e68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4610      	mov	r0, r2
 8000e72:	4619      	mov	r1, r3
 8000e74:	2204      	movs	r2, #4
 8000e76:	f014 fa80 	bl	801537a <read>

	return status;
 8000e7a:	697b      	ldr	r3, [r7, #20]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3758      	adds	r7, #88	; 0x58
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <open>:

int open(const char *pathname, int flags)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b092      	sub	sp, #72	; 0x48
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
    int cmd = PATH_CMD_OPEN;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	643b      	str	r3, [r7, #64]	; 0x40
	unsigned int replyfd = getpid() + 3;
 8000e92:	f014 fa64 	bl	801535e <getpid>
 8000e96:	4603      	mov	r3, r0
 8000e98:	3303      	adds	r3, #3
 8000e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
	size_t plen = strlen(pathname) + 1;
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f003 ffc9 	bl	8004e34 <strlen>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	63bb      	str	r3, [r7, #56]	; 0x38
	unsigned int fd = -1;
 8000ea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eac:	637b      	str	r3, [r7, #52]	; 0x34
	char buf[4 + 4 + 4 + PATH_MAX];
	(void) flags;
	int pos = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	647b      	str	r3, [r7, #68]	; 0x44

	path_write_data(buf, &cmd, 4, pos);
 8000eb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000eb4:	f107 0208 	add.w	r2, r7, #8
 8000eb8:	441a      	add	r2, r3
 8000eba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ebe:	4610      	mov	r0, r2
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	2204      	movs	r2, #4
 8000ec4:	f014 f9fc 	bl	80152c0 <memcpy>
 8000ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000eca:	3304      	adds	r3, #4
 8000ecc:	647b      	str	r3, [r7, #68]	; 0x44
	path_write_data(buf, &replyfd, 4, pos);
 8000ece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ed0:	f107 0208 	add.w	r2, r7, #8
 8000ed4:	441a      	add	r2, r3
 8000ed6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000eda:	4610      	mov	r0, r2
 8000edc:	4619      	mov	r1, r3
 8000ede:	2204      	movs	r2, #4
 8000ee0:	f014 f9ee 	bl	80152c0 <memcpy>
 8000ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ee6:	3304      	adds	r3, #4
 8000ee8:	647b      	str	r3, [r7, #68]	; 0x44
	path_write_data(buf, &plen, 4, pos);
 8000eea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000eec:	f107 0208 	add.w	r2, r7, #8
 8000ef0:	441a      	add	r2, r3
 8000ef2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	4619      	mov	r1, r3
 8000efa:	2204      	movs	r2, #4
 8000efc:	f014 f9e0 	bl	80152c0 <memcpy>
 8000f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f02:	3304      	adds	r3, #4
 8000f04:	647b      	str	r3, [r7, #68]	; 0x44
	path_write_data(buf, pathname, plen, pos);
 8000f06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f08:	f107 0208 	add.w	r2, r7, #8
 8000f0c:	441a      	add	r2, r3
 8000f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f10:	4610      	mov	r0, r2
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	461a      	mov	r2, r3
 8000f16:	f014 f9d3 	bl	80152c0 <memcpy>
 8000f1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f1e:	4413      	add	r3, r2
 8000f20:	647b      	str	r3, [r7, #68]	; 0x44

	write(PATHSERVER_FD, buf, pos);
 8000f22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f24:	f107 0208 	add.w	r2, r7, #8
 8000f28:	200b      	movs	r0, #11
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	f014 fa1d 	bl	801536c <write>
	read(replyfd, &fd, 4);
 8000f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f34:	461a      	mov	r2, r3
 8000f36:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f3a:	4610      	mov	r0, r2
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	2204      	movs	r2, #4
 8000f40:	f014 fa1b 	bl	801537a <read>

	return fd;
 8000f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3748      	adds	r7, #72	; 0x48
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop

08000f50 <file_release>:

int file_release(struct event_monitor *monitor, int event,
                  struct task_control_block *task, void *data)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
 8000f5c:	603b      	str	r3, [r7, #0]
    struct file *file = data;
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	617b      	str	r3, [r7, #20]
    struct file_request *request = (void*)task->stack->r0;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f68:	613b      	str	r3, [r7, #16]

    if (FILE_EVENT_IS_READ(event))
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d106      	bne.n	8000f82 <file_release+0x32>
        return file_read(file, request, monitor);
 8000f74:	6978      	ldr	r0, [r7, #20]
 8000f76:	6939      	ldr	r1, [r7, #16]
 8000f78:	68fa      	ldr	r2, [r7, #12]
 8000f7a:	f000 f80d 	bl	8000f98 <file_read>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	e005      	b.n	8000f8e <file_release+0x3e>
    else
        return file_write(file, request, monitor);
 8000f82:	6978      	ldr	r0, [r7, #20]
 8000f84:	6939      	ldr	r1, [r7, #16]
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	f000 f850 	bl	800102c <file_write>
 8000f8c:	4603      	mov	r3, r0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop

08000f98 <file_read>:

int file_read(struct file *file, struct file_request *request,
              struct event_monitor *monitor)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
    struct task_control_block *task = request->task;
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	617b      	str	r3, [r7, #20]

	if (file) {
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d02b      	beq.n	8001008 <file_read+0x70>
	    switch (file->ops->readable(file, request, monitor)) {
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	68f8      	ldr	r0, [r7, #12]
 8000fb8:	68b9      	ldr	r1, [r7, #8]
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	4798      	blx	r3
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d015      	beq.n	8000ff0 <file_read+0x58>
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d11f      	bne.n	8001008 <file_read+0x70>
		    case FILE_ACCESS_ACCEPT: {
			    int size = file->ops->read(file, request, monitor);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	68b9      	ldr	r1, [r7, #8]
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	4798      	blx	r3
 8000fd6:	6138      	str	r0, [r7, #16]

			    if (task) {
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d006      	beq.n	8000fec <file_read+0x54>
			        task->stack->r0 = size;
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	629a      	str	r2, [r3, #40]	; 0x28
	                task->status = TASK_READY;
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
	            }

			    return 1;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e018      	b.n	8001022 <file_read+0x8a>
		    }
		    case FILE_ACCESS_BLOCK:
			    if (task && task->status == TASK_READY) {
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d006      	beq.n	8001004 <file_read+0x6c>
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d102      	bne.n	8001004 <file_read+0x6c>
	                task->status = TASK_WAIT_READ;
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	2201      	movs	r2, #1
 8001002:	609a      	str	r2, [r3, #8]
	            }

	            return 0;
 8001004:	2300      	movs	r3, #0
 8001006:	e00c      	b.n	8001022 <file_read+0x8a>
		    default:
		        ;
		}
	}

    if (task) {
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d007      	beq.n	800101e <file_read+0x86>
        task->stack->r0 = -1;
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001016:	629a      	str	r2, [r3, #40]	; 0x28
        task->status = TASK_READY;
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
    }

    return -1;
 800101e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001022:	4618      	mov	r0, r3
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop

0800102c <file_write>:

int file_write(struct file *file, struct file_request *request,
               struct event_monitor *monitor)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
    struct task_control_block *task = request->task;
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	617b      	str	r3, [r7, #20]

	if (file) {
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d02c      	beq.n	800109e <file_write+0x72>
	    switch (file->ops->writable(file, request, monitor)) {
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	68f8      	ldr	r0, [r7, #12]
 800104c:	68b9      	ldr	r1, [r7, #8]
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	4798      	blx	r3
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d015      	beq.n	8001084 <file_write+0x58>
 8001058:	2b01      	cmp	r3, #1
 800105a:	d120      	bne.n	800109e <file_write+0x72>
	        case FILE_ACCESS_ACCEPT: {
	            int size = file->ops->write(file, request, monitor);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	68f8      	ldr	r0, [r7, #12]
 8001064:	68b9      	ldr	r1, [r7, #8]
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	4798      	blx	r3
 800106a:	6138      	str	r0, [r7, #16]

	            if (task) {
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d006      	beq.n	8001080 <file_write+0x54>
	                task->stack->r0 = size;
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	629a      	str	r2, [r3, #40]	; 0x28
	                task->status = TASK_READY;
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
	            }

			    return 1;
 8001080:	2301      	movs	r3, #1
 8001082:	e019      	b.n	80010b8 <file_write+0x8c>
		    }
		    case FILE_ACCESS_BLOCK:
		        if (task && task->status == TASK_READY) {
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d007      	beq.n	800109a <file_write+0x6e>
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d103      	bne.n	800109a <file_write+0x6e>
		            request->task->status = TASK_WAIT_WRITE;
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2202      	movs	r2, #2
 8001098:	609a      	str	r2, [r3, #8]
		        }

		        return 0;
 800109a:	2300      	movs	r3, #0
 800109c:	e00c      	b.n	80010b8 <file_write+0x8c>
		    default:
		        ;
		}
	}

	if (task) {
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d007      	beq.n	80010b4 <file_write+0x88>
	    task->stack->r0 = -1;
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010ac:	629a      	str	r2, [r3, #40]	; 0x28
	    task->status = TASK_READY;
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
	}

	return -1;
 80010b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <file_mknod>:

int
file_mknod(int fd, int driver_pid, struct file *files[], int dev,
           struct memory_pool *memory_pool, struct event_monitor *event_monitor)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b088      	sub	sp, #32
 80010c4:	af02      	add	r7, sp, #8
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
 80010cc:	603b      	str	r3, [r7, #0]
    int result;
	switch(dev) {
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	3b01      	subs	r3, #1
 80010d2:	2b07      	cmp	r3, #7
 80010d4:	d83a      	bhi.n	800114c <file_mknod+0x8c>
 80010d6:	a201      	add	r2, pc, #4	; (adr r2, 80010dc <file_mknod+0x1c>)
 80010d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010dc:	080010fd 	.word	0x080010fd
 80010e0:	08001111 	.word	0x08001111
 80010e4:	0800114d 	.word	0x0800114d
 80010e8:	0800114d 	.word	0x0800114d
 80010ec:	0800114d 	.word	0x0800114d
 80010f0:	08001125 	.word	0x08001125
 80010f4:	0800114d 	.word	0x0800114d
 80010f8:	08001139 	.word	0x08001139
	case S_IFIFO:
		result = fifo_init(fd, driver_pid, files, memory_pool, event_monitor);
 80010fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	68f8      	ldr	r0, [r7, #12]
 8001102:	68b9      	ldr	r1, [r7, #8]
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	6a3b      	ldr	r3, [r7, #32]
 8001108:	f7ff fd26 	bl	8000b58 <fifo_init>
 800110c:	6178      	str	r0, [r7, #20]
		break;
 800110e:	e020      	b.n	8001152 <file_mknod+0x92>
	case S_IMSGQ:
		result = mq_init(fd, driver_pid, files, memory_pool, event_monitor);
 8001110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	68f8      	ldr	r0, [r7, #12]
 8001116:	68b9      	ldr	r1, [r7, #8]
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	6a3b      	ldr	r3, [r7, #32]
 800111c:	f002 f8c6 	bl	80032ac <mq_init>
 8001120:	6178      	str	r0, [r7, #20]
		break;
 8001122:	e016      	b.n	8001152 <file_mknod+0x92>
	case S_IFBLK:
	    result = block_init(fd, driver_pid, files, memory_pool, event_monitor);
 8001124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	68f8      	ldr	r0, [r7, #12]
 800112a:	68b9      	ldr	r1, [r7, #8]
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	6a3b      	ldr	r3, [r7, #32]
 8001130:	f7ff fabc 	bl	80006ac <block_init>
 8001134:	6178      	str	r0, [r7, #20]
	    break;
 8001136:	e00c      	b.n	8001152 <file_mknod+0x92>
	case S_IFREG:
	    result = regfile_init(fd, driver_pid, files, memory_pool, event_monitor);
 8001138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	68f8      	ldr	r0, [r7, #12]
 800113e:	68b9      	ldr	r1, [r7, #8]
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	6a3b      	ldr	r3, [r7, #32]
 8001144:	f003 fa34 	bl	80045b0 <regfile_init>
 8001148:	6178      	str	r0, [r7, #20]
	    break;
 800114a:	e002      	b.n	8001152 <file_mknod+0x92>
	default:
		result = -1;
 800114c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001150:	617b      	str	r3, [r7, #20]
	}

	if (result == 0) {
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d106      	bne.n	8001166 <file_mknod+0xa6>
	    files[fd]->fd = fd;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	4413      	add	r3, r2
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	601a      	str	r2, [r3, #0]
    }

	return result;
 8001166:	697b      	ldr	r3, [r7, #20]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <file_lseek>:

int file_lseek(struct file *file, struct file_request *request,
               struct event_monitor *monitor)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
    struct task_control_block *task = request->task;
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	617b      	str	r3, [r7, #20]

    if (file && file->ops->lseekable && file->ops->lseek) {
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d036      	beq.n	80011f6 <file_lseek+0x86>
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d031      	beq.n	80011f6 <file_lseek+0x86>
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	695b      	ldr	r3, [r3, #20]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d02c      	beq.n	80011f6 <file_lseek+0x86>
        switch (file->ops->lseekable(file, request, monitor)) {
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	691b      	ldr	r3, [r3, #16]
 80011a2:	68f8      	ldr	r0, [r7, #12]
 80011a4:	68b9      	ldr	r1, [r7, #8]
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	4798      	blx	r3
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d015      	beq.n	80011dc <file_lseek+0x6c>
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d120      	bne.n	80011f6 <file_lseek+0x86>
            case FILE_ACCESS_ACCEPT: {
                int status = file->ops->lseek(file, request, monitor);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	68f8      	ldr	r0, [r7, #12]
 80011bc:	68b9      	ldr	r1, [r7, #8]
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	4798      	blx	r3
 80011c2:	6138      	str	r0, [r7, #16]

	            if (task) {
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d006      	beq.n	80011d8 <file_lseek+0x68>
	                task->stack->r0 = status;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	629a      	str	r2, [r3, #40]	; 0x28
	                task->status = TASK_READY;
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
	            }

			    return 1;
 80011d8:	2301      	movs	r3, #1
 80011da:	e019      	b.n	8001210 <file_lseek+0xa0>
		    }
		    case FILE_ACCESS_BLOCK:
		        if (task && task->status == TASK_READY) {
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d007      	beq.n	80011f2 <file_lseek+0x82>
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d103      	bne.n	80011f2 <file_lseek+0x82>
		            request->task->status = TASK_WAIT_WRITE;
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2202      	movs	r2, #2
 80011f0:	609a      	str	r2, [r3, #8]
		        }

		        return 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	e00c      	b.n	8001210 <file_lseek+0xa0>
		    default:
		        ;
        }
    }

	if (task) {
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d007      	beq.n	800120c <file_lseek+0x9c>
	    task->stack->r0 = -1;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001204:	629a      	str	r2, [r3, #40]	; 0x28
	    task->status = TASK_READY;
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
	}

	return -1;
 800120c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001210:	4618      	mov	r0, r3
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001222:	4b08      	ldr	r3, [pc, #32]	; (8001244 <NVIC_EnableIRQ+0x2c>)
 8001224:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001228:	0952      	lsrs	r2, r2, #5
 800122a:	79f9      	ldrb	r1, [r7, #7]
 800122c:	f001 011f 	and.w	r1, r1, #31
 8001230:	2001      	movs	r0, #1
 8001232:	fa00 f101 	lsl.w	r1, r0, r1
 8001236:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000e100 	.word	0xe000e100

08001248 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 8001252:	4b09      	ldr	r3, [pc, #36]	; (8001278 <NVIC_DisableIRQ+0x30>)
 8001254:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001258:	0952      	lsrs	r2, r2, #5
 800125a:	79f9      	ldrb	r1, [r7, #7]
 800125c:	f001 011f 	and.w	r1, r1, #31
 8001260:	2001      	movs	r0, #1
 8001262:	fa00 f101 	lsl.w	r1, r0, r1
 8001266:	3220      	adds	r2, #32
 8001268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e000e100 	.word	0xe000e100

0800127c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	6039      	str	r1, [r7, #0]
 8001286:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	2b00      	cmp	r3, #0
 800128e:	da0b      	bge.n	80012a8 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001290:	490d      	ldr	r1, [pc, #52]	; (80012c8 <NVIC_SetPriority+0x4c>)
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	f003 030f 	and.w	r3, r3, #15
 8001298:	3b04      	subs	r3, #4
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	b2d2      	uxtb	r2, r2
 800129e:	0112      	lsls	r2, r2, #4
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	440b      	add	r3, r1
 80012a4:	761a      	strb	r2, [r3, #24]
 80012a6:	e009      	b.n	80012bc <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80012a8:	4908      	ldr	r1, [pc, #32]	; (80012cc <NVIC_SetPriority+0x50>)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	683a      	ldr	r2, [r7, #0]
 80012b0:	b2d2      	uxtb	r2, r2
 80012b2:	0112      	lsls	r2, r2, #4
 80012b4:	b2d2      	uxtb	r2, r2
 80012b6:	440b      	add	r3, r1
 80012b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000ed00 	.word	0xe000ed00
 80012cc:	e000e100 	.word	0xe000e100

080012d0 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3b01      	subs	r3, #1
 80012dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012e0:	d301      	bcc.n	80012e6 <SysTick_Config+0x16>
 80012e2:	2301      	movs	r3, #1
 80012e4:	e00f      	b.n	8001306 <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 80012e6:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <SysTick_Config+0x40>)
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	3a01      	subs	r2, #1
 80012ec:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 80012ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012f2:	210f      	movs	r1, #15
 80012f4:	f7ff ffc2 	bl	800127c <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80012f8:	4b05      	ldr	r3, [pc, #20]	; (8001310 <SysTick_Config+0x40>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012fe:	4b04      	ldr	r3, [pc, #16]	; (8001310 <SysTick_Config+0x40>)
 8001300:	2207      	movs	r2, #7
 8001302:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	e000e010 	.word	0xe000e010

08001314 <serialout>:

struct task_control_block tasks[TASK_LIMIT];


void serialout(USART_TypeDef* uart, unsigned int intr)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
	int fd;
	char c;
	mkfifo("/dev/tty0/out", 0);
 800131e:	4817      	ldr	r0, [pc, #92]	; (800137c <serialout+0x68>)
 8001320:	2100      	movs	r1, #0
 8001322:	f7ff fc09 	bl	8000b38 <mkfifo>
	fd = open("/dev/tty0/out", 0);
 8001326:	4815      	ldr	r0, [pc, #84]	; (800137c <serialout+0x68>)
 8001328:	2100      	movs	r1, #0
 800132a:	f7ff fdab 	bl	8000e84 <open>
 800132e:	60f8      	str	r0, [r7, #12]

	while (1) {
		read(fd, &c, 1);
 8001330:	f107 030b 	add.w	r3, r7, #11
 8001334:	68f8      	ldr	r0, [r7, #12]
 8001336:	4619      	mov	r1, r3
 8001338:	2201      	movs	r2, #1
 800133a:	f014 f81e 	bl	801537a <read>
    	
		USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
 800133e:	4810      	ldr	r0, [pc, #64]	; (8001380 <serialout+0x6c>)
 8001340:	f240 7127 	movw	r1, #1831	; 0x727
 8001344:	2201      	movs	r2, #1
 8001346:	f013 fccf 	bl	8014ce8 <USART_ITConfig>
		while (USART_GetFlagStatus(uart, USART_FLAG_TXE) != SET) {
 800134a:	e003      	b.n	8001354 <serialout+0x40>
    		interrupt_wait(intr);
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f014 f81a 	bl	8015388 <interrupt_wait>

	while (1) {
		read(fd, &c, 1);
    	
		USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
		while (USART_GetFlagStatus(uart, USART_FLAG_TXE) != SET) {
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	2180      	movs	r1, #128	; 0x80
 8001358:	f013 fd0e 	bl	8014d78 <USART_GetFlagStatus>
 800135c:	4603      	mov	r3, r0
 800135e:	2b01      	cmp	r3, #1
 8001360:	d1f4      	bne.n	800134c <serialout+0x38>
    		interrupt_wait(intr);
    	}
		USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
 8001362:	4807      	ldr	r0, [pc, #28]	; (8001380 <serialout+0x6c>)
 8001364:	f240 7127 	movw	r1, #1831	; 0x727
 8001368:	2200      	movs	r2, #0
 800136a:	f013 fcbd 	bl	8014ce8 <USART_ITConfig>
    	
    	USART_SendData(USART2, c);
 800136e:	7afb      	ldrb	r3, [r7, #11]
 8001370:	4803      	ldr	r0, [pc, #12]	; (8001380 <serialout+0x6c>)
 8001372:	4619      	mov	r1, r3
 8001374:	f013 fb12 	bl	801499c <USART_SendData>
	}
 8001378:	e7da      	b.n	8001330 <serialout+0x1c>
 800137a:	bf00      	nop
 800137c:	08017238 	.word	0x08017238
 8001380:	40004400 	.word	0x40004400

08001384 <serialin>:
}

void serialin(USART_TypeDef* uart, unsigned int intr)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
	int fd;
	char c;
	mkfifo("/dev/tty0/in", 0);
 800138e:	4814      	ldr	r0, [pc, #80]	; (80013e0 <serialin+0x5c>)
 8001390:	2100      	movs	r1, #0
 8001392:	f7ff fbd1 	bl	8000b38 <mkfifo>
	fd = open("/dev/tty0/in", 0);
 8001396:	4812      	ldr	r0, [pc, #72]	; (80013e0 <serialin+0x5c>)
 8001398:	2100      	movs	r1, #0
 800139a:	f7ff fd73 	bl	8000e84 <open>
 800139e:	60f8      	str	r0, [r7, #12]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 80013a0:	4810      	ldr	r0, [pc, #64]	; (80013e4 <serialin+0x60>)
 80013a2:	f240 5125 	movw	r1, #1317	; 0x525
 80013a6:	2201      	movs	r2, #1
 80013a8:	f013 fc9e 	bl	8014ce8 <USART_ITConfig>

	while (1) {
		interrupt_wait(intr);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f013 ffea 	bl	8015388 <interrupt_wait>
		if (USART_GetFlagStatus(uart, USART_FLAG_RXNE) == SET) {
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	2120      	movs	r1, #32
 80013b8:	f013 fcde 	bl	8014d78 <USART_GetFlagStatus>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d10d      	bne.n	80013de <serialin+0x5a>
			c = USART_ReceiveData(uart);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f013 fafc 	bl	80149c0 <USART_ReceiveData>
 80013c8:	4603      	mov	r3, r0
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	72fb      	strb	r3, [r7, #11]
			write(fd, &c, 1);
 80013ce:	f107 030b 	add.w	r3, r7, #11
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	4619      	mov	r1, r3
 80013d6:	2201      	movs	r2, #1
 80013d8:	f013 ffc8 	bl	801536c <write>
		}
	}
 80013dc:	e7e6      	b.n	80013ac <serialin+0x28>
 80013de:	e7e5      	b.n	80013ac <serialin+0x28>
 80013e0:	08017248 	.word	0x08017248
 80013e4:	40004400 	.word	0x40004400

080013e8 <greeting>:
}

void greeting()
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
	int fdout = open("/dev/tty0/out", 0);
 80013ee:	480b      	ldr	r0, [pc, #44]	; (800141c <greeting+0x34>)
 80013f0:	2100      	movs	r1, #0
 80013f2:	f7ff fd47 	bl	8000e84 <open>
 80013f6:	6038      	str	r0, [r7, #0]
	char *string = "Hello, World!\n";
 80013f8:	4b09      	ldr	r3, [pc, #36]	; (8001420 <greeting+0x38>)
 80013fa:	607b      	str	r3, [r7, #4]
	while (*string) {
 80013fc:	e007      	b.n	800140e <greeting+0x26>
		write(fdout, string, 1);
 80013fe:	6838      	ldr	r0, [r7, #0]
 8001400:	6879      	ldr	r1, [r7, #4]
 8001402:	2201      	movs	r2, #1
 8001404:	f013 ffb2 	bl	801536c <write>
		string++;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3301      	adds	r3, #1
 800140c:	607b      	str	r3, [r7, #4]

void greeting()
{
	int fdout = open("/dev/tty0/out", 0);
	char *string = "Hello, World!\n";
	while (*string) {
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f3      	bne.n	80013fe <greeting+0x16>
		write(fdout, string, 1);
		string++;
	}
}
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	08017238 	.word	0x08017238
 8001420:	08017258 	.word	0x08017258

08001424 <echo>:

void echo()
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
	int fdout;
	int fdin;
	char c;

	fdout = open("/dev/tty0/out", 0);
 800142a:	480b      	ldr	r0, [pc, #44]	; (8001458 <echo+0x34>)
 800142c:	2100      	movs	r1, #0
 800142e:	f7ff fd29 	bl	8000e84 <open>
 8001432:	60f8      	str	r0, [r7, #12]
	fdin = open("/dev/tty0/in", 0);
 8001434:	4809      	ldr	r0, [pc, #36]	; (800145c <echo+0x38>)
 8001436:	2100      	movs	r1, #0
 8001438:	f7ff fd24 	bl	8000e84 <open>
 800143c:	60b8      	str	r0, [r7, #8]

	while (1) {
		read(fdin, &c, 1);
 800143e:	1dfb      	adds	r3, r7, #7
 8001440:	68b8      	ldr	r0, [r7, #8]
 8001442:	4619      	mov	r1, r3
 8001444:	2201      	movs	r2, #1
 8001446:	f013 ff98 	bl	801537a <read>
		write(fdout, &c, 1);
 800144a:	1dfb      	adds	r3, r7, #7
 800144c:	68f8      	ldr	r0, [r7, #12]
 800144e:	4619      	mov	r1, r3
 8001450:	2201      	movs	r2, #1
 8001452:	f013 ff8b 	bl	801536c <write>
	}
 8001456:	e7f2      	b.n	800143e <echo+0x1a>
 8001458:	08017238 	.word	0x08017238
 800145c:	08017248 	.word	0x08017248

08001460 <rs232_xmit_msg_task>:
}

void rs232_xmit_msg_task()
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b09c      	sub	sp, #112	; 0x70
 8001464:	af00      	add	r7, sp, #0
	int fdout;
	int fdin;
	char str[100];
	int curr_char;

	fdout = open("/dev/tty0/out", 0);
 8001466:	4814      	ldr	r0, [pc, #80]	; (80014b8 <rs232_xmit_msg_task+0x58>)
 8001468:	2100      	movs	r1, #0
 800146a:	f7ff fd0b 	bl	8000e84 <open>
 800146e:	66b8      	str	r0, [r7, #104]	; 0x68
	fdin = mq_open("/tmp/mqueue/out", O_CREAT);
 8001470:	4812      	ldr	r0, [pc, #72]	; (80014bc <rs232_xmit_msg_task+0x5c>)
 8001472:	2104      	movs	r1, #4
 8001474:	f001 ff02 	bl	800327c <mq_open>
 8001478:	6678      	str	r0, [r7, #100]	; 0x64
	setpriority(0, PRIORITY_DEFAULT - 2);
 800147a:	2000      	movs	r0, #0
 800147c:	2112      	movs	r1, #18
 800147e:	f013 ff91 	bl	80153a4 <setpriority>

	while (1) {
		/* Read from the queue.  Keep trying until a message is
		 * received.  This will block for a period of time (specified
		 * by portMAX_DELAY). */
		read(fdin, str, 100);
 8001482:	463b      	mov	r3, r7
 8001484:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001486:	4619      	mov	r1, r3
 8001488:	2264      	movs	r2, #100	; 0x64
 800148a:	f013 ff76 	bl	801537a <read>

		/* Write each character of the message to the RS232 port. */
		curr_char = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	66fb      	str	r3, [r7, #108]	; 0x6c
		while (str[curr_char] != '\0') {
 8001492:	e00a      	b.n	80014aa <rs232_xmit_msg_task+0x4a>
			write(fdout, &str[curr_char], 1);
 8001494:	463a      	mov	r2, r7
 8001496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001498:	4413      	add	r3, r2
 800149a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800149c:	4619      	mov	r1, r3
 800149e:	2201      	movs	r2, #1
 80014a0:	f013 ff64 	bl	801536c <write>
			curr_char++;
 80014a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014a6:	3301      	adds	r3, #1
 80014a8:	66fb      	str	r3, [r7, #108]	; 0x6c
		 * by portMAX_DELAY). */
		read(fdin, str, 100);

		/* Write each character of the message to the RS232 port. */
		curr_char = 0;
		while (str[curr_char] != '\0') {
 80014aa:	463a      	mov	r2, r7
 80014ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014ae:	4413      	add	r3, r2
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1ee      	bne.n	8001494 <rs232_xmit_msg_task+0x34>
			write(fdout, &str[curr_char], 1);
			curr_char++;
		}
	}
 80014b6:	e7e4      	b.n	8001482 <rs232_xmit_msg_task+0x22>
 80014b8:	08017238 	.word	0x08017238
 80014bc:	08017268 	.word	0x08017268

080014c0 <queue_str_task>:
}

void queue_str_task(const char *str, int delay)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
	int fdout = mq_open("/tmp/mqueue/out", 0);
 80014ca:	480b      	ldr	r0, [pc, #44]	; (80014f8 <queue_str_task+0x38>)
 80014cc:	2100      	movs	r1, #0
 80014ce:	f001 fed5 	bl	800327c <mq_open>
 80014d2:	60f8      	str	r0, [r7, #12]
	int msg_len = strlen(str) + 1;
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f003 fcad 	bl	8004e34 <strlen>
 80014da:	4603      	mov	r3, r0
 80014dc:	3301      	adds	r3, #1
 80014de:	60bb      	str	r3, [r7, #8]

	while (1) {
		/* Post the message.  Keep on trying until it is successful. */
		write(fdout, str, msg_len);
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	6879      	ldr	r1, [r7, #4]
 80014e6:	461a      	mov	r2, r3
 80014e8:	f013 ff40 	bl	801536c <write>

		/* Wait. */
		sleep(delay);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f013 ff66 	bl	80153c0 <sleep>
	}
 80014f4:	e7f4      	b.n	80014e0 <queue_str_task+0x20>
 80014f6:	bf00      	nop
 80014f8:	08017268 	.word	0x08017268

080014fc <queue_str_task1>:
}

void queue_str_task1()
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
	queue_str_task("Hello 1\n", 200);
 8001500:	4802      	ldr	r0, [pc, #8]	; (800150c <queue_str_task1+0x10>)
 8001502:	21c8      	movs	r1, #200	; 0xc8
 8001504:	f7ff ffdc 	bl	80014c0 <queue_str_task>
}
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	08017278 	.word	0x08017278

08001510 <queue_str_task2>:

void queue_str_task2()
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
	queue_str_task("Hello 2\n", 50);
 8001514:	4802      	ldr	r0, [pc, #8]	; (8001520 <queue_str_task2+0x10>)
 8001516:	2132      	movs	r1, #50	; 0x32
 8001518:	f7ff ffd2 	bl	80014c0 <queue_str_task>
}
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	08017284 	.word	0x08017284

08001524 <serial_readwrite_task>:

void serial_readwrite_task()
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b09e      	sub	sp, #120	; 0x78
 8001528:	af00      	add	r7, sp, #0
	char str[100];
	char ch;
	int curr_char;
	int done;

	fdout = mq_open("/tmp/mqueue/out", 0);
 800152a:	4824      	ldr	r0, [pc, #144]	; (80015bc <serial_readwrite_task+0x98>)
 800152c:	2100      	movs	r1, #0
 800152e:	f001 fea5 	bl	800327c <mq_open>
 8001532:	66f8      	str	r0, [r7, #108]	; 0x6c
	fdin = open("/dev/tty0/in", 0);
 8001534:	4822      	ldr	r0, [pc, #136]	; (80015c0 <serial_readwrite_task+0x9c>)
 8001536:	2100      	movs	r1, #0
 8001538:	f7ff fca4 	bl	8000e84 <open>
 800153c:	66b8      	str	r0, [r7, #104]	; 0x68

	/* Prepare the response message to be queued. */
	memcpy(str, "Got:", 4);
 800153e:	1d3b      	adds	r3, r7, #4
 8001540:	4618      	mov	r0, r3
 8001542:	4920      	ldr	r1, [pc, #128]	; (80015c4 <serial_readwrite_task+0xa0>)
 8001544:	2204      	movs	r2, #4
 8001546:	f013 febb 	bl	80152c0 <memcpy>

	while (1) {
		curr_char = 4;
 800154a:	2304      	movs	r3, #4
 800154c:	677b      	str	r3, [r7, #116]	; 0x74
		done = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	673b      	str	r3, [r7, #112]	; 0x70
		do {
			/* Receive a byte from the RS232 port (this call will
			 * block). */
			read(fdin, &ch, 1);
 8001552:	1cfb      	adds	r3, r7, #3
 8001554:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001556:	4619      	mov	r1, r3
 8001558:	2201      	movs	r2, #1
 800155a:	f013 ff0e 	bl	801537a <read>

			/* If the byte is an end-of-line type character, then
			 * finish the string and inidcate we are done.
			 */
			if (curr_char >= 98 || ch == '\r' || ch == '\n') {
 800155e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001560:	2b61      	cmp	r3, #97	; 0x61
 8001562:	dc05      	bgt.n	8001570 <serial_readwrite_task+0x4c>
 8001564:	78fb      	ldrb	r3, [r7, #3]
 8001566:	2b0d      	cmp	r3, #13
 8001568:	d002      	beq.n	8001570 <serial_readwrite_task+0x4c>
 800156a:	78fb      	ldrb	r3, [r7, #3]
 800156c:	2b0a      	cmp	r3, #10
 800156e:	d110      	bne.n	8001592 <serial_readwrite_task+0x6e>
				str[curr_char] = '\n';
 8001570:	1d3a      	adds	r2, r7, #4
 8001572:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001574:	4413      	add	r3, r2
 8001576:	220a      	movs	r2, #10
 8001578:	701a      	strb	r2, [r3, #0]
				str[curr_char+1] = '\0';
 800157a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800157c:	3301      	adds	r3, #1
 800157e:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001582:	440b      	add	r3, r1
 8001584:	2200      	movs	r2, #0
 8001586:	f803 2c74 	strb.w	r2, [r3, #-116]
				done = -1;
 800158a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800158e:	673b      	str	r3, [r7, #112]	; 0x70
 8001590:	e008      	b.n	80015a4 <serial_readwrite_task+0x80>
			}
			/* Otherwise, add the character to the
			 * response string. */
			else
				str[curr_char++] = ch;
 8001592:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001594:	1c5a      	adds	r2, r3, #1
 8001596:	677a      	str	r2, [r7, #116]	; 0x74
 8001598:	78fa      	ldrb	r2, [r7, #3]
 800159a:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800159e:	440b      	add	r3, r1
 80015a0:	f803 2c74 	strb.w	r2, [r3, #-116]
		} while (!done);
 80015a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0d3      	beq.n	8001552 <serial_readwrite_task+0x2e>

		/* Once we are done building the response string, queue the
		 * response to be sent to the RS232 port.
		 */
		write(fdout, str, curr_char+1 + 1);
 80015aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80015ac:	3302      	adds	r3, #2
 80015ae:	1d3a      	adds	r2, r7, #4
 80015b0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80015b2:	4611      	mov	r1, r2
 80015b4:	461a      	mov	r2, r3
 80015b6:	f013 fed9 	bl	801536c <write>
	}
 80015ba:	e7c6      	b.n	800154a <serial_readwrite_task+0x26>
 80015bc:	08017268 	.word	0x08017268
 80015c0:	08017248 	.word	0x08017248
 80015c4:	08017290 	.word	0x08017290

080015c8 <serial_test_task>:
}

void serial_test_task()
{
 80015c8:	b5b0      	push	{r4, r5, r7, lr}
 80015ca:	b08a      	sub	sp, #40	; 0x28
 80015cc:	af00      	add	r7, sp, #0
	char put_ch[2]={'0','\0'};
 80015ce:	2330      	movs	r3, #48	; 0x30
 80015d0:	773b      	strb	r3, [r7, #28]
 80015d2:	2300      	movs	r3, #0
 80015d4:	777b      	strb	r3, [r7, #29]
	char hint[] =  USER_NAME "@" USER_NAME "-STM32:~$ ";
 80015d6:	4b44      	ldr	r3, [pc, #272]	; (80016e8 <serial_test_task+0x120>)
 80015d8:	463c      	mov	r4, r7
 80015da:	461d      	mov	r5, r3
 80015dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	int hint_length = sizeof(hint);
 80015e8:	231c      	movs	r3, #28
 80015ea:	623b      	str	r3, [r7, #32]
	char *p = NULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24

	fdout = mq_open("/tmp/mqueue/out", 0);
 80015f0:	483e      	ldr	r0, [pc, #248]	; (80016ec <serial_test_task+0x124>)
 80015f2:	2100      	movs	r1, #0
 80015f4:	f001 fe42 	bl	800327c <mq_open>
 80015f8:	4602      	mov	r2, r0
 80015fa:	4b3d      	ldr	r3, [pc, #244]	; (80016f0 <serial_test_task+0x128>)
 80015fc:	601a      	str	r2, [r3, #0]
	fdin = open("/dev/tty0/in", 0);
 80015fe:	483d      	ldr	r0, [pc, #244]	; (80016f4 <serial_test_task+0x12c>)
 8001600:	2100      	movs	r1, #0
 8001602:	f7ff fc3f 	bl	8000e84 <open>
 8001606:	4602      	mov	r2, r0
 8001608:	4b3b      	ldr	r3, [pc, #236]	; (80016f8 <serial_test_task+0x130>)
 800160a:	601a      	str	r2, [r3, #0]

	for (;; cur_his = (cur_his + 1) % HISTORY_COUNT) {
		p = cmd[cur_his];
 800160c:	4b3b      	ldr	r3, [pc, #236]	; (80016fc <serial_test_task+0x134>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	019a      	lsls	r2, r3, #6
 8001612:	4b3b      	ldr	r3, [pc, #236]	; (8001700 <serial_test_task+0x138>)
 8001614:	4413      	add	r3, r2
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
		write(fdout, hint, hint_length);
 8001618:	4b35      	ldr	r3, [pc, #212]	; (80016f0 <serial_test_task+0x128>)
 800161a:	6819      	ldr	r1, [r3, #0]
 800161c:	6a3b      	ldr	r3, [r7, #32]
 800161e:	463a      	mov	r2, r7
 8001620:	4608      	mov	r0, r1
 8001622:	4611      	mov	r1, r2
 8001624:	461a      	mov	r2, r3
 8001626:	f013 fea1 	bl	801536c <write>

		while (1) {
			read(fdin, put_ch, 1);
 800162a:	4b33      	ldr	r3, [pc, #204]	; (80016f8 <serial_test_task+0x130>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	f107 031c 	add.w	r3, r7, #28
 8001632:	4610      	mov	r0, r2
 8001634:	4619      	mov	r1, r3
 8001636:	2201      	movs	r2, #1
 8001638:	f013 fe9f 	bl	801537a <read>

			if (put_ch[0] == '\r' || put_ch[0] == '\n') {
 800163c:	7f3b      	ldrb	r3, [r7, #28]
 800163e:	2b0d      	cmp	r3, #13
 8001640:	d002      	beq.n	8001648 <serial_test_task+0x80>
 8001642:	7f3b      	ldrb	r3, [r7, #28]
 8001644:	2b0a      	cmp	r3, #10
 8001646:	d114      	bne.n	8001672 <serial_test_task+0xaa>
				*p = '\0';
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	2200      	movs	r2, #0
 800164c:	701a      	strb	r2, [r3, #0]
				write(fdout, next_line, 3);
 800164e:	4b28      	ldr	r3, [pc, #160]	; (80016f0 <serial_test_task+0x128>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	492b      	ldr	r1, [pc, #172]	; (8001704 <serial_test_task+0x13c>)
 8001656:	2203      	movs	r2, #3
 8001658:	f013 fe88 	bl	801536c <write>
				break;
 800165c:	bf00      	nop
			else if (p - cmd[cur_his] < CMDBUF_SIZE - 1) {
				*p++ = put_ch[0];
				write(fdout, put_ch, 2);
			}
		}
		check_keyword();	
 800165e:	f000 f8d1 	bl	8001804 <check_keyword>
	char *p = NULL;

	fdout = mq_open("/tmp/mqueue/out", 0);
	fdin = open("/dev/tty0/in", 0);

	for (;; cur_his = (cur_his + 1) % HISTORY_COUNT) {
 8001662:	4b26      	ldr	r3, [pc, #152]	; (80016fc <serial_test_task+0x134>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	1c5a      	adds	r2, r3, #1
 8001668:	4b27      	ldr	r3, [pc, #156]	; (8001708 <serial_test_task+0x140>)
 800166a:	4013      	ands	r3, r2
 800166c:	2b00      	cmp	r3, #0
 800166e:	da37      	bge.n	80016e0 <serial_test_task+0x118>
 8001670:	e032      	b.n	80016d8 <serial_test_task+0x110>
			if (put_ch[0] == '\r' || put_ch[0] == '\n') {
				*p = '\0';
				write(fdout, next_line, 3);
				break;
			}
			else if (put_ch[0] == 127 || put_ch[0] == '\b') {
 8001672:	7f3b      	ldrb	r3, [r7, #28]
 8001674:	2b7f      	cmp	r3, #127	; 0x7f
 8001676:	d002      	beq.n	800167e <serial_test_task+0xb6>
 8001678:	7f3b      	ldrb	r3, [r7, #28]
 800167a:	2b08      	cmp	r3, #8
 800167c:	d113      	bne.n	80016a6 <serial_test_task+0xde>
				if (p > cmd[cur_his]) {
 800167e:	4b1f      	ldr	r3, [pc, #124]	; (80016fc <serial_test_task+0x134>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	019a      	lsls	r2, r3, #6
 8001684:	4b1e      	ldr	r3, [pc, #120]	; (8001700 <serial_test_task+0x138>)
 8001686:	441a      	add	r2, r3
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	429a      	cmp	r2, r3
 800168c:	d20a      	bcs.n	80016a4 <serial_test_task+0xdc>
					p--;
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	3b01      	subs	r3, #1
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
					write(fdout, "\b \b", 4);
 8001694:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <serial_test_task+0x128>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	491c      	ldr	r1, [pc, #112]	; (800170c <serial_test_task+0x144>)
 800169c:	2204      	movs	r2, #4
 800169e:	f013 fe65 	bl	801536c <write>
				*p = '\0';
				write(fdout, next_line, 3);
				break;
			}
			else if (put_ch[0] == 127 || put_ch[0] == '\b') {
				if (p > cmd[cur_his]) {
 80016a2:	e018      	b.n	80016d6 <serial_test_task+0x10e>
 80016a4:	e017      	b.n	80016d6 <serial_test_task+0x10e>
					p--;
					write(fdout, "\b \b", 4);
				}
			}
			else if (p - cmd[cur_his] < CMDBUF_SIZE - 1) {
 80016a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016a8:	4b14      	ldr	r3, [pc, #80]	; (80016fc <serial_test_task+0x134>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	0199      	lsls	r1, r3, #6
 80016ae:	4b14      	ldr	r3, [pc, #80]	; (8001700 <serial_test_task+0x138>)
 80016b0:	440b      	add	r3, r1
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b3e      	cmp	r3, #62	; 0x3e
 80016b6:	dc0e      	bgt.n	80016d6 <serial_test_task+0x10e>
				*p++ = put_ch[0];
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	1c5a      	adds	r2, r3, #1
 80016bc:	627a      	str	r2, [r7, #36]	; 0x24
 80016be:	7f3a      	ldrb	r2, [r7, #28]
 80016c0:	701a      	strb	r2, [r3, #0]
				write(fdout, put_ch, 2);
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <serial_test_task+0x128>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	f107 031c 	add.w	r3, r7, #28
 80016ca:	4610      	mov	r0, r2
 80016cc:	4619      	mov	r1, r3
 80016ce:	2202      	movs	r2, #2
 80016d0:	f013 fe4c 	bl	801536c <write>
			}
		}
 80016d4:	e7a9      	b.n	800162a <serial_test_task+0x62>
 80016d6:	e7a8      	b.n	800162a <serial_test_task+0x62>
	char *p = NULL;

	fdout = mq_open("/tmp/mqueue/out", 0);
	fdin = open("/dev/tty0/in", 0);

	for (;; cur_his = (cur_his + 1) % HISTORY_COUNT) {
 80016d8:	3b01      	subs	r3, #1
 80016da:	f063 0307 	orn	r3, r3, #7
 80016de:	3301      	adds	r3, #1
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <serial_test_task+0x134>)
 80016e4:	601a      	str	r2, [r3, #0]
				*p++ = put_ch[0];
				write(fdout, put_ch, 2);
			}
		}
		check_keyword();	
	}
 80016e6:	e791      	b.n	800160c <serial_test_task+0x44>
 80016e8:	0801729c 	.word	0x0801729c
 80016ec:	08017268 	.word	0x08017268
 80016f0:	20000294 	.word	0x20000294
 80016f4:	08017248 	.word	0x08017248
 80016f8:	20000298 	.word	0x20000298
 80016fc:	20000290 	.word	0x20000290
 8001700:	20000090 	.word	0x20000090
 8001704:	20000030 	.word	0x20000030
 8001708:	80000007 	.word	0x80000007
 800170c:	08017298 	.word	0x08017298

08001710 <cmdtok>:
}

/* Split command into tokens. */
char *cmdtok(char *cmd)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	static char *cur = NULL;
	static char *end = NULL;
	if (cmd) {
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d045      	beq.n	80017aa <cmdtok+0x9a>
		char quo = '\0';
 800171e:	2300      	movs	r3, #0
 8001720:	73fb      	strb	r3, [r7, #15]
		cur = cmd;
 8001722:	4b35      	ldr	r3, [pc, #212]	; (80017f8 <cmdtok+0xe8>)
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	601a      	str	r2, [r3, #0]
		for (end = cmd; *end; end++) {
 8001728:	4b34      	ldr	r3, [pc, #208]	; (80017fc <cmdtok+0xec>)
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	e036      	b.n	800179e <cmdtok+0x8e>
			if (*end == '\'' || *end == '\"') {
 8001730:	4b32      	ldr	r3, [pc, #200]	; (80017fc <cmdtok+0xec>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b27      	cmp	r3, #39	; 0x27
 8001738:	d004      	beq.n	8001744 <cmdtok+0x34>
 800173a:	4b30      	ldr	r3, [pc, #192]	; (80017fc <cmdtok+0xec>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b22      	cmp	r3, #34	; 0x22
 8001742:	d114      	bne.n	800176e <cmdtok+0x5e>
				if (quo == *end)
 8001744:	4b2d      	ldr	r3, [pc, #180]	; (80017fc <cmdtok+0xec>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	7bfa      	ldrb	r2, [r7, #15]
 800174c:	429a      	cmp	r2, r3
 800174e:	d102      	bne.n	8001756 <cmdtok+0x46>
					quo = '\0';
 8001750:	2300      	movs	r3, #0
 8001752:	73fb      	strb	r3, [r7, #15]
 8001754:	e006      	b.n	8001764 <cmdtok+0x54>
				else if (quo == '\0')
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d103      	bne.n	8001764 <cmdtok+0x54>
					quo = *end;
 800175c:	4b27      	ldr	r3, [pc, #156]	; (80017fc <cmdtok+0xec>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	73fb      	strb	r3, [r7, #15]
				*end = '\0';
 8001764:	4b25      	ldr	r3, [pc, #148]	; (80017fc <cmdtok+0xec>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
 800176c:	e012      	b.n	8001794 <cmdtok+0x84>
			}
			else if (isspace((int)*end) && !quo)
 800176e:	4b24      	ldr	r3, [pc, #144]	; (8001800 <cmdtok+0xf0>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	4b22      	ldr	r3, [pc, #136]	; (80017fc <cmdtok+0xec>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	3301      	adds	r3, #1
 800177a:	4413      	add	r3, r2
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	2b00      	cmp	r3, #0
 8001784:	d006      	beq.n	8001794 <cmdtok+0x84>
 8001786:	7bfb      	ldrb	r3, [r7, #15]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d103      	bne.n	8001794 <cmdtok+0x84>
				*end = '\0';
 800178c:	4b1b      	ldr	r3, [pc, #108]	; (80017fc <cmdtok+0xec>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]
	static char *cur = NULL;
	static char *end = NULL;
	if (cmd) {
		char quo = '\0';
		cur = cmd;
		for (end = cmd; *end; end++) {
 8001794:	4b19      	ldr	r3, [pc, #100]	; (80017fc <cmdtok+0xec>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	1c5a      	adds	r2, r3, #1
 800179a:	4b18      	ldr	r3, [pc, #96]	; (80017fc <cmdtok+0xec>)
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	4b17      	ldr	r3, [pc, #92]	; (80017fc <cmdtok+0xec>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1c3      	bne.n	8001730 <cmdtok+0x20>
 80017a8:	e00a      	b.n	80017c0 <cmdtok+0xb0>
			else if (isspace((int)*end) && !quo)
				*end = '\0';
		}
	}
	else
		for (; *cur; cur++)
 80017aa:	e004      	b.n	80017b6 <cmdtok+0xa6>
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <cmdtok+0xe8>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	1c5a      	adds	r2, r3, #1
 80017b2:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <cmdtok+0xe8>)
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <cmdtok+0xe8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1f5      	bne.n	80017ac <cmdtok+0x9c>
			;

	for (; *cur == '\0'; cur++)
 80017c0:	e00c      	b.n	80017dc <cmdtok+0xcc>
		if (cur == end) return NULL;
 80017c2:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <cmdtok+0xe8>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	4b0d      	ldr	r3, [pc, #52]	; (80017fc <cmdtok+0xec>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d101      	bne.n	80017d2 <cmdtok+0xc2>
 80017ce:	2300      	movs	r3, #0
 80017d0:	e00b      	b.n	80017ea <cmdtok+0xda>
	}
	else
		for (; *cur; cur++)
			;

	for (; *cur == '\0'; cur++)
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <cmdtok+0xe8>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	1c5a      	adds	r2, r3, #1
 80017d8:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <cmdtok+0xe8>)
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <cmdtok+0xe8>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0ed      	beq.n	80017c2 <cmdtok+0xb2>
		if (cur == end) return NULL;
	return cur;
 80017e6:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <cmdtok+0xe8>)
 80017e8:	681b      	ldr	r3, [r3, #0]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	200052ac 	.word	0x200052ac
 80017fc:	200052b0 	.word	0x200052b0
 8001800:	20000088 	.word	0x20000088

08001804 <check_keyword>:

void check_keyword()
{
 8001804:	b5b0      	push	{r4, r5, r7, lr}
 8001806:	b0a6      	sub	sp, #152	; 0x98
 8001808:	af00      	add	r7, sp, #0
	char *argv[MAX_ARGC + 1] = {NULL};
 800180a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800180e:	2350      	movs	r3, #80	; 0x50
 8001810:	4610      	mov	r0, r2
 8001812:	2100      	movs	r1, #0
 8001814:	461a      	mov	r2, r3
 8001816:	f013 fe13 	bl	8015440 <memset>
	char cmdstr[CMDBUF_SIZE];
	int argc = 1;
 800181a:	2301      	movs	r3, #1
 800181c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	int i;

	find_events();
 8001820:	f000 f892 	bl	8001948 <find_events>
	fill_arg(cmdstr, cmd[cur_his]);
 8001824:	4b42      	ldr	r3, [pc, #264]	; (8001930 <check_keyword+0x12c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	019a      	lsls	r2, r3, #6
 800182a:	4b42      	ldr	r3, [pc, #264]	; (8001934 <check_keyword+0x130>)
 800182c:	4413      	add	r3, r2
 800182e:	463a      	mov	r2, r7
 8001830:	4610      	mov	r0, r2
 8001832:	4619      	mov	r1, r3
 8001834:	f000 f93a 	bl	8001aac <fill_arg>
	argv[0] = cmdtok(cmdstr);
 8001838:	463b      	mov	r3, r7
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff ff68 	bl	8001710 <cmdtok>
 8001840:	4603      	mov	r3, r0
 8001842:	643b      	str	r3, [r7, #64]	; 0x40
	if (!argv[0])
 8001844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001846:	2b00      	cmp	r3, #0
 8001848:	d06f      	beq.n	800192a <check_keyword+0x126>
		return;

	while (1) {
		argv[argc] = cmdtok(NULL);
 800184a:	2000      	movs	r0, #0
 800184c:	f7ff ff60 	bl	8001710 <cmdtok>
 8001850:	4602      	mov	r2, r0
 8001852:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800185c:	440b      	add	r3, r1
 800185e:	f843 2c58 	str.w	r2, [r3, #-88]
		if (!argv[argc])
 8001862:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800186c:	4413      	add	r3, r2
 800186e:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d100      	bne.n	8001878 <check_keyword+0x74>
			break;
 8001876:	e00a      	b.n	800188e <check_keyword+0x8a>
		argc++;
 8001878:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800187c:	3301      	adds	r3, #1
 800187e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		if (argc >= MAX_ARGC)
 8001882:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001886:	2b12      	cmp	r3, #18
 8001888:	dd00      	ble.n	800188c <check_keyword+0x88>
			break;
 800188a:	e000      	b.n	800188e <check_keyword+0x8a>
	}
 800188c:	e7dd      	b.n	800184a <check_keyword+0x46>

	for (i = 0; i < CMD_COUNT; i++) {
 800188e:	2300      	movs	r3, #0
 8001890:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001894:	e025      	b.n	80018e2 <check_keyword+0xde>
		if (!strcmp(argv[0], cmd_data[i].cmd)) {
 8001896:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001898:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800189c:	f44f 6183 	mov.w	r1, #1048	; 0x418
 80018a0:	fb01 f103 	mul.w	r1, r1, r3
 80018a4:	4b24      	ldr	r3, [pc, #144]	; (8001938 <check_keyword+0x134>)
 80018a6:	440b      	add	r3, r1
 80018a8:	4610      	mov	r0, r2
 80018aa:	4619      	mov	r1, r3
 80018ac:	f003 fa88 	bl	8004dc0 <strcmp>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d110      	bne.n	80018d8 <check_keyword+0xd4>
			cmd_data[i].func(argc, argv);
 80018b6:	4a20      	ldr	r2, [pc, #128]	; (8001938 <check_keyword+0x134>)
 80018b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018bc:	f44f 6183 	mov.w	r1, #1048	; 0x418
 80018c0:	fb01 f303 	mul.w	r3, r1, r3
 80018c4:	4413      	add	r3, r2
 80018c6:	3314      	adds	r3, #20
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80018ce:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80018d2:	4611      	mov	r1, r2
 80018d4:	4798      	blx	r3
			break;
 80018d6:	e008      	b.n	80018ea <check_keyword+0xe6>
		argc++;
		if (argc >= MAX_ARGC)
			break;
	}

	for (i = 0; i < CMD_COUNT; i++) {
 80018d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018dc:	3301      	adds	r3, #1
 80018de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80018e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018e6:	2b06      	cmp	r3, #6
 80018e8:	ddd5      	ble.n	8001896 <check_keyword+0x92>
		if (!strcmp(argv[0], cmd_data[i].cmd)) {
			cmd_data[i].func(argc, argv);
			break;
		}
	}
	if (i == CMD_COUNT) {
 80018ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018ee:	2b07      	cmp	r3, #7
 80018f0:	d11b      	bne.n	800192a <check_keyword+0x126>
		write(fdout, argv[0], strlen(argv[0]) + 1);
 80018f2:	4b12      	ldr	r3, [pc, #72]	; (800193c <check_keyword+0x138>)
 80018f4:	681d      	ldr	r5, [r3, #0]
 80018f6:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 80018f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018fa:	4618      	mov	r0, r3
 80018fc:	f003 fa9a 	bl	8004e34 <strlen>
 8001900:	4603      	mov	r3, r0
 8001902:	3301      	adds	r3, #1
 8001904:	4628      	mov	r0, r5
 8001906:	4621      	mov	r1, r4
 8001908:	461a      	mov	r2, r3
 800190a:	f013 fd2f 	bl	801536c <write>
		write(fdout, ": command not found", 20);
 800190e:	4b0b      	ldr	r3, [pc, #44]	; (800193c <check_keyword+0x138>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	490a      	ldr	r1, [pc, #40]	; (8001940 <check_keyword+0x13c>)
 8001916:	2214      	movs	r2, #20
 8001918:	f013 fd28 	bl	801536c <write>
		write(fdout, next_line, 3);
 800191c:	4b07      	ldr	r3, [pc, #28]	; (800193c <check_keyword+0x138>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	4908      	ldr	r1, [pc, #32]	; (8001944 <check_keyword+0x140>)
 8001924:	2203      	movs	r2, #3
 8001926:	f013 fd21 	bl	801536c <write>
	}
}
 800192a:	3798      	adds	r7, #152	; 0x98
 800192c:	46bd      	mov	sp, r7
 800192e:	bdb0      	pop	{r4, r5, r7, pc}
 8001930:	20000290 	.word	0x20000290
 8001934:	20000090 	.word	0x20000090
 8001938:	08015590 	.word	0x08015590
 800193c:	20000294 	.word	0x20000294
 8001940:	080172b8 	.word	0x080172b8
 8001944:	20000030 	.word	0x20000030

08001948 <find_events>:

void find_events()
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b094      	sub	sp, #80	; 0x50
 800194c:	af00      	add	r7, sp, #0
	char buf[CMDBUF_SIZE];
	char *p = cmd[cur_his];
 800194e:	4b3b      	ldr	r3, [pc, #236]	; (8001a3c <find_events+0xf4>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	019a      	lsls	r2, r3, #6
 8001954:	4b3a      	ldr	r3, [pc, #232]	; (8001a40 <find_events+0xf8>)
 8001956:	4413      	add	r3, r2
 8001958:	64fb      	str	r3, [r7, #76]	; 0x4c
	char *q;
	int i;

	for (; *p; p++) {
 800195a:	e067      	b.n	8001a2c <find_events+0xe4>
		if (*p == '!') {
 800195c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b21      	cmp	r3, #33	; 0x21
 8001962:	d160      	bne.n	8001a26 <find_events+0xde>
			q = p;
 8001964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001966:	64bb      	str	r3, [r7, #72]	; 0x48
			while (*q && !isspace((int)*q))
 8001968:	e002      	b.n	8001970 <find_events+0x28>
				q++;
 800196a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800196c:	3301      	adds	r3, #1
 800196e:	64bb      	str	r3, [r7, #72]	; 0x48
	int i;

	for (; *p; p++) {
		if (*p == '!') {
			q = p;
			while (*q && !isspace((int)*q))
 8001970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d00a      	beq.n	800198e <find_events+0x46>
 8001978:	4b32      	ldr	r3, [pc, #200]	; (8001a44 <find_events+0xfc>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	3301      	adds	r3, #1
 8001982:	4413      	add	r3, r2
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	f003 0308 	and.w	r3, r3, #8
 800198a:	2b00      	cmp	r3, #0
 800198c:	d0ed      	beq.n	800196a <find_events+0x22>
				q++;
			for (i = cur_his + HISTORY_COUNT - 1; i > cur_his; i--) {
 800198e:	4b2b      	ldr	r3, [pc, #172]	; (8001a3c <find_events+0xf4>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	3307      	adds	r3, #7
 8001994:	647b      	str	r3, [r7, #68]	; 0x44
 8001996:	e041      	b.n	8001a1c <find_events+0xd4>
				if (!strncmp(cmd[i % HISTORY_COUNT], p + 1, q - p - 1)) {
 8001998:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800199a:	4b2b      	ldr	r3, [pc, #172]	; (8001a48 <find_events+0x100>)
 800199c:	4013      	ands	r3, r2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	da03      	bge.n	80019aa <find_events+0x62>
 80019a2:	3b01      	subs	r3, #1
 80019a4:	f063 0307 	orn	r3, r3, #7
 80019a8:	3301      	adds	r3, #1
 80019aa:	019a      	lsls	r2, r3, #6
 80019ac:	4b24      	ldr	r3, [pc, #144]	; (8001a40 <find_events+0xf8>)
 80019ae:	18d1      	adds	r1, r2, r3
 80019b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80019b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019b8:	1ac3      	subs	r3, r0, r3
 80019ba:	3b01      	subs	r3, #1
 80019bc:	4608      	mov	r0, r1
 80019be:	4611      	mov	r1, r2
 80019c0:	461a      	mov	r2, r3
 80019c2:	f003 fa0b 	bl	8004ddc <strncmp>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d124      	bne.n	8001a16 <find_events+0xce>
					strcpy(buf, q);
 80019cc:	1d3b      	adds	r3, r7, #4
 80019ce:	4618      	mov	r0, r3
 80019d0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80019d2:	f013 fd7f 	bl	80154d4 <strcpy>
					strcpy(p, cmd[i % HISTORY_COUNT]);
 80019d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80019d8:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <find_events+0x100>)
 80019da:	4013      	ands	r3, r2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	da03      	bge.n	80019e8 <find_events+0xa0>
 80019e0:	3b01      	subs	r3, #1
 80019e2:	f063 0307 	orn	r3, r3, #7
 80019e6:	3301      	adds	r3, #1
 80019e8:	019a      	lsls	r2, r3, #6
 80019ea:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <find_events+0xf8>)
 80019ec:	4413      	add	r3, r2
 80019ee:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80019f0:	4619      	mov	r1, r3
 80019f2:	f013 fd6f 	bl	80154d4 <strcpy>
					p += strlen(p);
 80019f6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80019f8:	f003 fa1c 	bl	8004e34 <strlen>
 80019fc:	4603      	mov	r3, r0
 80019fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a00:	4413      	add	r3, r2
 8001a02:	64fb      	str	r3, [r7, #76]	; 0x4c
					strcpy(p--, buf);
 8001a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a06:	1e5a      	subs	r2, r3, #1
 8001a08:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001a0a:	1d3a      	adds	r2, r7, #4
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	4611      	mov	r1, r2
 8001a10:	f013 fd60 	bl	80154d4 <strcpy>
					break;
 8001a14:	e007      	b.n	8001a26 <find_events+0xde>
	for (; *p; p++) {
		if (*p == '!') {
			q = p;
			while (*q && !isspace((int)*q))
				q++;
			for (i = cur_his + HISTORY_COUNT - 1; i > cur_his; i--) {
 8001a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	647b      	str	r3, [r7, #68]	; 0x44
 8001a1c:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <find_events+0xf4>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001a22:	429a      	cmp	r2, r3
 8001a24:	dcb8      	bgt.n	8001998 <find_events+0x50>
	char buf[CMDBUF_SIZE];
	char *p = cmd[cur_his];
	char *q;
	int i;

	for (; *p; p++) {
 8001a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a28:	3301      	adds	r3, #1
 8001a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d193      	bne.n	800195c <find_events+0x14>
					break;
				}
			}
		}
	}
}
 8001a34:	3750      	adds	r7, #80	; 0x50
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000290 	.word	0x20000290
 8001a40:	20000090 	.word	0x20000090
 8001a44:	20000088 	.word	0x20000088
 8001a48:	80000007 	.word	0x80000007

08001a4c <find_envvar>:

char *find_envvar(const char *name)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
	int i;

	for (i = 0; i < env_count; i++) {
 8001a54:	2300      	movs	r3, #0
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	e01a      	b.n	8001a90 <find_envvar+0x44>
		if (!strcmp(env_var[i].name, name))
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	011b      	lsls	r3, r3, #4
 8001a64:	4a0f      	ldr	r2, [pc, #60]	; (8001aa4 <find_envvar+0x58>)
 8001a66:	4413      	add	r3, r2
 8001a68:	4618      	mov	r0, r3
 8001a6a:	6879      	ldr	r1, [r7, #4]
 8001a6c:	f003 f9a8 	bl	8004dc0 <strcmp>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d109      	bne.n	8001a8a <find_envvar+0x3e>
			return env_var[i].value;
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	011b      	lsls	r3, r3, #4
 8001a80:	f103 0210 	add.w	r2, r3, #16
 8001a84:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <find_envvar+0x58>)
 8001a86:	4413      	add	r3, r2
 8001a88:	e008      	b.n	8001a9c <find_envvar+0x50>

char *find_envvar(const char *name)
{
	int i;

	for (i = 0; i < env_count; i++) {
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <find_envvar+0x5c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	dbdf      	blt.n	8001a5a <find_envvar+0xe>
		if (!strcmp(env_var[i].name, name))
			return env_var[i].value;
	}

	return NULL;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	200002a0 	.word	0x200002a0
 8001aa8:	200007a0 	.word	0x200007a0

08001aac <fill_arg>:

/* Fill in entire value of argument. */
int fill_arg(char *const dest, const char *argv)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b088      	sub	sp, #32
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
	char env_name[MAX_ENVNAME + 1];
	char *buf = dest;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	61fb      	str	r3, [r7, #28]
	char *p = NULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61bb      	str	r3, [r7, #24]

	for (; *argv; argv++) {
 8001abe:	e04c      	b.n	8001b5a <fill_arg+0xae>
		if (isalnum((int)*argv) || *argv == '_') {
 8001ac0:	4b3a      	ldr	r3, [pc, #232]	; (8001bac <fill_arg+0x100>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	4413      	add	r3, r2
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d103      	bne.n	8001ade <fill_arg+0x32>
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b5f      	cmp	r3, #95	; 0x5f
 8001adc:	d110      	bne.n	8001b00 <fill_arg+0x54>
			if (p)
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d006      	beq.n	8001af2 <fill_arg+0x46>
				*p++ = *argv;
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	1c5a      	adds	r2, r3, #1
 8001ae8:	61ba      	str	r2, [r7, #24]
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	7812      	ldrb	r2, [r2, #0]
 8001aee:	701a      	strb	r2, [r3, #0]
	char *buf = dest;
	char *p = NULL;

	for (; *argv; argv++) {
		if (isalnum((int)*argv) || *argv == '_') {
			if (p)
 8001af0:	e030      	b.n	8001b54 <fill_arg+0xa8>
				*p++ = *argv;
			else
				*buf++ = *argv;
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	1c5a      	adds	r2, r3, #1
 8001af6:	61fa      	str	r2, [r7, #28]
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	7812      	ldrb	r2, [r2, #0]
 8001afc:	701a      	strb	r2, [r3, #0]
	char *buf = dest;
	char *p = NULL;

	for (; *argv; argv++) {
		if (isalnum((int)*argv) || *argv == '_') {
			if (p)
 8001afe:	e029      	b.n	8001b54 <fill_arg+0xa8>
				*p++ = *argv;
			else
				*buf++ = *argv;
		}
		else { /* Symbols. */
			if (p) {
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d018      	beq.n	8001b38 <fill_arg+0x8c>
				*p = '\0';
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	701a      	strb	r2, [r3, #0]
				p = find_envvar(env_name);
 8001b0c:	f107 0308 	add.w	r3, r7, #8
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff ff9b 	bl	8001a4c <find_envvar>
 8001b16:	61b8      	str	r0, [r7, #24]
				if (p) {
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00c      	beq.n	8001b38 <fill_arg+0x8c>
					strcpy(buf, p);
 8001b1e:	69f8      	ldr	r0, [r7, #28]
 8001b20:	69b9      	ldr	r1, [r7, #24]
 8001b22:	f013 fcd7 	bl	80154d4 <strcpy>
					buf += strlen(p);
 8001b26:	69b8      	ldr	r0, [r7, #24]
 8001b28:	f003 f984 	bl	8004e34 <strlen>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	69fa      	ldr	r2, [r7, #28]
 8001b30:	4413      	add	r3, r2
 8001b32:	61fb      	str	r3, [r7, #28]
					p = NULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61bb      	str	r3, [r7, #24]
				}
			}
			if (*argv == '$')
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b24      	cmp	r3, #36	; 0x24
 8001b3e:	d103      	bne.n	8001b48 <fill_arg+0x9c>
				p = env_name;
 8001b40:	f107 0308 	add.w	r3, r7, #8
 8001b44:	61bb      	str	r3, [r7, #24]
 8001b46:	e005      	b.n	8001b54 <fill_arg+0xa8>
			else
				*buf++ = *argv;
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	1c5a      	adds	r2, r3, #1
 8001b4c:	61fa      	str	r2, [r7, #28]
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	7812      	ldrb	r2, [r2, #0]
 8001b52:	701a      	strb	r2, [r3, #0]
{
	char env_name[MAX_ENVNAME + 1];
	char *buf = dest;
	char *p = NULL;

	for (; *argv; argv++) {
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	3301      	adds	r3, #1
 8001b58:	603b      	str	r3, [r7, #0]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1ae      	bne.n	8001ac0 <fill_arg+0x14>
				p = env_name;
			else
				*buf++ = *argv;
		}
	}
	if (p) {
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d016      	beq.n	8001b96 <fill_arg+0xea>
		*p = '\0';
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	701a      	strb	r2, [r3, #0]
		p = find_envvar(env_name);
 8001b6e:	f107 0308 	add.w	r3, r7, #8
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff ff6a 	bl	8001a4c <find_envvar>
 8001b78:	61b8      	str	r0, [r7, #24]
		if (p) {
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d00a      	beq.n	8001b96 <fill_arg+0xea>
			strcpy(buf, p);
 8001b80:	69f8      	ldr	r0, [r7, #28]
 8001b82:	69b9      	ldr	r1, [r7, #24]
 8001b84:	f013 fca6 	bl	80154d4 <strcpy>
			buf += strlen(p);
 8001b88:	69b8      	ldr	r0, [r7, #24]
 8001b8a:	f003 f953 	bl	8004e34 <strlen>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	69fa      	ldr	r2, [r7, #28]
 8001b92:	4413      	add	r3, r2
 8001b94:	61fb      	str	r3, [r7, #28]
		}
	}
	*buf = '\0';
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]

	return buf - dest;
 8001b9c:	69fa      	ldr	r2, [r7, #28]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	1ad3      	subs	r3, r2, r3
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3720      	adds	r7, #32
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000088 	.word	0x20000088

08001bb0 <export_envvar>:

//export
void export_envvar(int argc, char *argv[])
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
	char *found;
	char *value;
	int i;

	for (i = 1; i < argc; i++) {
 8001bba:	2301      	movs	r3, #1
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	e056      	b.n	8001c6e <export_envvar+0xbe>
		value = argv[i];
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	617b      	str	r3, [r7, #20]
		while (*value && *value != '=')
 8001bcc:	e002      	b.n	8001bd4 <export_envvar+0x24>
			value++;
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	617b      	str	r3, [r7, #20]
	char *value;
	int i;

	for (i = 1; i < argc; i++) {
		value = argv[i];
		while (*value && *value != '=')
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d003      	beq.n	8001be4 <export_envvar+0x34>
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b3d      	cmp	r3, #61	; 0x3d
 8001be2:	d1f4      	bne.n	8001bce <export_envvar+0x1e>
			value++;
		if (*value)
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d004      	beq.n	8001bf6 <export_envvar+0x46>
			*value++ = '\0';
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	1c5a      	adds	r2, r3, #1
 8001bf0:	617a      	str	r2, [r7, #20]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	701a      	strb	r2, [r3, #0]
		found = find_envvar(argv[i]);
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ff23 	bl	8001a4c <find_envvar>
 8001c06:	60f8      	str	r0, [r7, #12]
		if (found)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d004      	beq.n	8001c18 <export_envvar+0x68>
			strcpy(found, value);
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	6979      	ldr	r1, [r7, #20]
 8001c12:	f013 fc5f 	bl	80154d4 <strcpy>
 8001c16:	e027      	b.n	8001c68 <export_envvar+0xb8>
		else if (env_count < MAX_ENVCOUNT) {
 8001c18:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <export_envvar+0xcc>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b0f      	cmp	r3, #15
 8001c1e:	dc23      	bgt.n	8001c68 <export_envvar+0xb8>
			strcpy(env_var[env_count].name, argv[i]);
 8001c20:	4b16      	ldr	r3, [pc, #88]	; (8001c7c <export_envvar+0xcc>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	4613      	mov	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	011b      	lsls	r3, r3, #4
 8001c2c:	4a14      	ldr	r2, [pc, #80]	; (8001c80 <export_envvar+0xd0>)
 8001c2e:	441a      	add	r2, r3
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	6839      	ldr	r1, [r7, #0]
 8001c36:	440b      	add	r3, r1
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f013 fc49 	bl	80154d4 <strcpy>
			strcpy(env_var[env_count].value, value);
 8001c42:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <export_envvar+0xcc>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	4613      	mov	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	011b      	lsls	r3, r3, #4
 8001c4e:	f103 0210 	add.w	r2, r3, #16
 8001c52:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <export_envvar+0xd0>)
 8001c54:	4413      	add	r3, r2
 8001c56:	4618      	mov	r0, r3
 8001c58:	6979      	ldr	r1, [r7, #20]
 8001c5a:	f013 fc3b 	bl	80154d4 <strcpy>
			env_count++;
 8001c5e:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <export_envvar+0xcc>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <export_envvar+0xcc>)
 8001c66:	601a      	str	r2, [r3, #0]
{
	char *found;
	char *value;
	int i;

	for (i = 1; i < argc; i++) {
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	dba4      	blt.n	8001bc0 <export_envvar+0x10>
			strcpy(env_var[env_count].name, argv[i]);
			strcpy(env_var[env_count].value, value);
			env_count++;
		}
	}
}
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	200007a0 	.word	0x200007a0
 8001c80:	200002a0 	.word	0x200002a0

08001c84 <show_task_info>:

//ps
void show_task_info(int argc, char* argv[])
{
 8001c84:	b5b0      	push	{r4, r5, r7, lr}
 8001c86:	b08c      	sub	sp, #48	; 0x30
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
	char ps_message[]="PID STATUS PRIORITY";
 8001c8e:	4b3f      	ldr	r3, [pc, #252]	; (8001d8c <show_task_info+0x108>)
 8001c90:	f107 0414 	add.w	r4, r7, #20
 8001c94:	461d      	mov	r5, r3
 8001c96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c9a:	682b      	ldr	r3, [r5, #0]
 8001c9c:	6023      	str	r3, [r4, #0]
	int ps_message_length = sizeof(ps_message);
 8001c9e:	2314      	movs	r3, #20
 8001ca0:	62bb      	str	r3, [r7, #40]	; 0x28
	int task_i;

	write(fdout, &ps_message , ps_message_length);
 8001ca2:	4b3b      	ldr	r3, [pc, #236]	; (8001d90 <show_task_info+0x10c>)
 8001ca4:	6819      	ldr	r1, [r3, #0]
 8001ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca8:	f107 0214 	add.w	r2, r7, #20
 8001cac:	4608      	mov	r0, r1
 8001cae:	4611      	mov	r1, r2
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	f013 fb5b 	bl	801536c <write>
	write(fdout, &next_line , 3);
 8001cb6:	4b36      	ldr	r3, [pc, #216]	; (8001d90 <show_task_info+0x10c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	4935      	ldr	r1, [pc, #212]	; (8001d94 <show_task_info+0x110>)
 8001cbe:	2203      	movs	r2, #3
 8001cc0:	f013 fb54 	bl	801536c <write>

	for (task_i = 0; task_i < task_count; task_i++) {
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cc8:	e058      	b.n	8001d7c <show_task_info+0xf8>
		char task_info_pid[2];
		char task_info_status[2];
		char task_info_priority[3];

		task_info_pid[0]='0'+tasks[task_i].pid;
 8001cca:	4933      	ldr	r1, [pc, #204]	; (8001d98 <show_task_info+0x114>)
 8001ccc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cce:	4613      	mov	r3, r2
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	4413      	add	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	440b      	add	r3, r1
 8001cd8:	3304      	adds	r3, #4
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	3330      	adds	r3, #48	; 0x30
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	743b      	strb	r3, [r7, #16]
		task_info_pid[1]='\0';
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	747b      	strb	r3, [r7, #17]
		task_info_status[0]='0'+tasks[task_i].status;
 8001ce8:	492b      	ldr	r1, [pc, #172]	; (8001d98 <show_task_info+0x114>)
 8001cea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cec:	4613      	mov	r3, r2
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	4413      	add	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	440b      	add	r3, r1
 8001cf6:	3308      	adds	r3, #8
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	3330      	adds	r3, #48	; 0x30
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	733b      	strb	r3, [r7, #12]
		task_info_status[1]='\0';			
 8001d02:	2300      	movs	r3, #0
 8001d04:	737b      	strb	r3, [r7, #13]

		itoa(tasks[task_i].priority, task_info_priority, 10);
 8001d06:	4924      	ldr	r1, [pc, #144]	; (8001d98 <show_task_info+0x114>)
 8001d08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	4413      	add	r3, r2
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	440b      	add	r3, r1
 8001d14:	330c      	adds	r3, #12
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	f107 0308 	add.w	r3, r7, #8
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	4619      	mov	r1, r3
 8001d20:	220a      	movs	r2, #10
 8001d22:	f000 f83d 	bl	8001da0 <itoa>

		write(fdout, &task_info_pid , 2);
 8001d26:	4b1a      	ldr	r3, [pc, #104]	; (8001d90 <show_task_info+0x10c>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	f107 0310 	add.w	r3, r7, #16
 8001d2e:	4610      	mov	r0, r2
 8001d30:	4619      	mov	r1, r3
 8001d32:	2202      	movs	r2, #2
 8001d34:	f013 fb1a 	bl	801536c <write>
		write_blank(3);
 8001d38:	2003      	movs	r0, #3
 8001d3a:	f000 fa55 	bl	80021e8 <write_blank>
			write(fdout, &task_info_status , 2);
 8001d3e:	4b14      	ldr	r3, [pc, #80]	; (8001d90 <show_task_info+0x10c>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	f107 030c 	add.w	r3, r7, #12
 8001d46:	4610      	mov	r0, r2
 8001d48:	4619      	mov	r1, r3
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	f013 fb0e 	bl	801536c <write>
		write_blank(5);
 8001d50:	2005      	movs	r0, #5
 8001d52:	f000 fa49 	bl	80021e8 <write_blank>
		write(fdout, &task_info_priority , 3);
 8001d56:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <show_task_info+0x10c>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	f107 0308 	add.w	r3, r7, #8
 8001d5e:	4610      	mov	r0, r2
 8001d60:	4619      	mov	r1, r3
 8001d62:	2203      	movs	r2, #3
 8001d64:	f013 fb02 	bl	801536c <write>

		write(fdout, &next_line , 3);
 8001d68:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <show_task_info+0x10c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	4909      	ldr	r1, [pc, #36]	; (8001d94 <show_task_info+0x110>)
 8001d70:	2203      	movs	r2, #3
 8001d72:	f013 fafb 	bl	801536c <write>
	int task_i;

	write(fdout, &ps_message , ps_message_length);
	write(fdout, &next_line , 3);

	for (task_i = 0; task_i < task_count; task_i++) {
 8001d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d78:	3301      	adds	r3, #1
 8001d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d7e:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <show_task_info+0x118>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d3a1      	bcc.n	8001cca <show_task_info+0x46>
		write_blank(5);
		write(fdout, &task_info_priority , 3);

		write(fdout, &next_line , 3);
	}
}
 8001d86:	3730      	adds	r7, #48	; 0x30
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d8c:	080172cc 	.word	0x080172cc
 8001d90:	20000294 	.word	0x20000294
 8001d94:	20000030 	.word	0x20000030
 8001d98:	200007a4 	.word	0x200007a4
 8001d9c:	2000008c 	.word	0x2000008c

08001da0 <itoa>:

//this function helps to show int

void itoa(int n, char *dst, int base)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b090      	sub	sp, #64	; 0x40
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
	char buf[33] = {0};
 8001dac:	f107 0314 	add.w	r3, r7, #20
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	3304      	adds	r3, #4
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	3304      	adds	r3, #4
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	3304      	adds	r3, #4
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	3304      	adds	r3, #4
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	3304      	adds	r3, #4
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	3304      	adds	r3, #4
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	3304      	adds	r3, #4
 8001de0:	2200      	movs	r2, #0
 8001de2:	701a      	strb	r2, [r3, #0]
 8001de4:	3301      	adds	r3, #1
	char *p = &buf[32];
 8001de6:	f107 0314 	add.w	r3, r7, #20
 8001dea:	3320      	adds	r3, #32
 8001dec:	63fb      	str	r3, [r7, #60]	; 0x3c

	if (n == 0)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d106      	bne.n	8001e02 <itoa+0x62>
		*--p = '0';
 8001df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001df6:	3b01      	subs	r3, #1
 8001df8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dfc:	2230      	movs	r2, #48	; 0x30
 8001dfe:	701a      	strb	r2, [r3, #0]
 8001e00:	e024      	b.n	8001e4c <itoa+0xac>
	else {
		unsigned int num = (base == 10 && num < 0) ? -n : n;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	63bb      	str	r3, [r7, #56]	; 0x38

		for (; num; num/=base)
 8001e06:	e012      	b.n	8001e2e <itoa+0x8e>
			*--p = "0123456789ABCDEF" [num % base];
 8001e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e12:	fbb3 f1f2 	udiv	r1, r3, r2
 8001e16:	fb02 f201 	mul.w	r2, r2, r1
 8001e1a:	1a9b      	subs	r3, r3, r2
 8001e1c:	4a0f      	ldr	r2, [pc, #60]	; (8001e5c <itoa+0xbc>)
 8001e1e:	5cd2      	ldrb	r2, [r2, r3]
 8001e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e22:	701a      	strb	r2, [r3, #0]
	if (n == 0)
		*--p = '0';
	else {
		unsigned int num = (base == 10 && num < 0) ? -n : n;

		for (; num; num/=base)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1e9      	bne.n	8001e08 <itoa+0x68>
			*--p = "0123456789ABCDEF" [num % base];
		if (base == 10 && n < 0)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b0a      	cmp	r3, #10
 8001e38:	d108      	bne.n	8001e4c <itoa+0xac>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	da05      	bge.n	8001e4c <itoa+0xac>
			*--p = '-';
 8001e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e42:	3b01      	subs	r3, #1
 8001e44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e48:	222d      	movs	r2, #45	; 0x2d
 8001e4a:	701a      	strb	r2, [r3, #0]
	}

	strcpy(dst, p);
 8001e4c:	68b8      	ldr	r0, [r7, #8]
 8001e4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001e50:	f013 fb40 	bl	80154d4 <strcpy>
}
 8001e54:	3740      	adds	r7, #64	; 0x40
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	080172e0 	.word	0x080172e0

08001e60 <show_cmd_info>:

//help

void show_cmd_info(int argc, char* argv[])
{
 8001e60:	b5b0      	push	{r4, r5, r7, lr}
 8001e62:	b08e      	sub	sp, #56	; 0x38
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
	const char help_desp[] = "This system has commands as follow\n\r\0";
 8001e6a:	4b34      	ldr	r3, [pc, #208]	; (8001f3c <show_cmd_info+0xdc>)
 8001e6c:	f107 040c 	add.w	r4, r7, #12
 8001e70:	461d      	mov	r5, r3
 8001e72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e7a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e7e:	6020      	str	r0, [r4, #0]
 8001e80:	3404      	adds	r4, #4
 8001e82:	8021      	strh	r1, [r4, #0]
	int i;

	write(fdout, &help_desp, sizeof(help_desp));
 8001e84:	4b2e      	ldr	r3, [pc, #184]	; (8001f40 <show_cmd_info+0xe0>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	f107 030c 	add.w	r3, r7, #12
 8001e8c:	4610      	mov	r0, r2
 8001e8e:	4619      	mov	r1, r3
 8001e90:	2226      	movs	r2, #38	; 0x26
 8001e92:	f013 fa6b 	bl	801536c <write>
	for (i = 0; i < CMD_COUNT; i++) {
 8001e96:	2300      	movs	r3, #0
 8001e98:	637b      	str	r3, [r7, #52]	; 0x34
 8001e9a:	e048      	b.n	8001f2e <show_cmd_info+0xce>
		write(fdout, cmd_data[i].cmd, strlen(cmd_data[i].cmd) + 1);
 8001e9c:	4b28      	ldr	r3, [pc, #160]	; (8001f40 <show_cmd_info+0xe0>)
 8001e9e:	681d      	ldr	r5, [r3, #0]
 8001ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea2:	f44f 6283 	mov.w	r2, #1048	; 0x418
 8001ea6:	fb02 f203 	mul.w	r2, r2, r3
 8001eaa:	4b26      	ldr	r3, [pc, #152]	; (8001f44 <show_cmd_info+0xe4>)
 8001eac:	18d4      	adds	r4, r2, r3
 8001eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb0:	f44f 6283 	mov.w	r2, #1048	; 0x418
 8001eb4:	fb02 f203 	mul.w	r2, r2, r3
 8001eb8:	4b22      	ldr	r3, [pc, #136]	; (8001f44 <show_cmd_info+0xe4>)
 8001eba:	4413      	add	r3, r2
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f002 ffb9 	bl	8004e34 <strlen>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	4628      	mov	r0, r5
 8001ec8:	4621      	mov	r1, r4
 8001eca:	461a      	mov	r2, r3
 8001ecc:	f013 fa4e 	bl	801536c <write>
		write(fdout, ": ", 3);
 8001ed0:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <show_cmd_info+0xe0>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	491c      	ldr	r1, [pc, #112]	; (8001f48 <show_cmd_info+0xe8>)
 8001ed8:	2203      	movs	r2, #3
 8001eda:	f013 fa47 	bl	801536c <write>
		write(fdout, cmd_data[i].description, strlen(cmd_data[i].description) + 1);
 8001ede:	4b18      	ldr	r3, [pc, #96]	; (8001f40 <show_cmd_info+0xe0>)
 8001ee0:	681d      	ldr	r5, [r3, #0]
 8001ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ee4:	f44f 6283 	mov.w	r2, #1048	; 0x418
 8001ee8:	fb02 f303 	mul.w	r3, r2, r3
 8001eec:	f103 0218 	add.w	r2, r3, #24
 8001ef0:	4b14      	ldr	r3, [pc, #80]	; (8001f44 <show_cmd_info+0xe4>)
 8001ef2:	18d4      	adds	r4, r2, r3
 8001ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ef6:	f44f 6283 	mov.w	r2, #1048	; 0x418
 8001efa:	fb02 f303 	mul.w	r3, r2, r3
 8001efe:	f103 0218 	add.w	r2, r3, #24
 8001f02:	4b10      	ldr	r3, [pc, #64]	; (8001f44 <show_cmd_info+0xe4>)
 8001f04:	4413      	add	r3, r2
 8001f06:	4618      	mov	r0, r3
 8001f08:	f002 ff94 	bl	8004e34 <strlen>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	3301      	adds	r3, #1
 8001f10:	4628      	mov	r0, r5
 8001f12:	4621      	mov	r1, r4
 8001f14:	461a      	mov	r2, r3
 8001f16:	f013 fa29 	bl	801536c <write>
		write(fdout, next_line, 3);
 8001f1a:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <show_cmd_info+0xe0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	490a      	ldr	r1, [pc, #40]	; (8001f4c <show_cmd_info+0xec>)
 8001f22:	2203      	movs	r2, #3
 8001f24:	f013 fa22 	bl	801536c <write>
{
	const char help_desp[] = "This system has commands as follow\n\r\0";
	int i;

	write(fdout, &help_desp, sizeof(help_desp));
	for (i = 0; i < CMD_COUNT; i++) {
 8001f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8001f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f30:	2b06      	cmp	r3, #6
 8001f32:	ddb3      	ble.n	8001e9c <show_cmd_info+0x3c>
		write(fdout, cmd_data[i].cmd, strlen(cmd_data[i].cmd) + 1);
		write(fdout, ": ", 3);
		write(fdout, cmd_data[i].description, strlen(cmd_data[i].description) + 1);
		write(fdout, next_line, 3);
	}
}
 8001f34:	3738      	adds	r7, #56	; 0x38
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bdb0      	pop	{r4, r5, r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	080172f8 	.word	0x080172f8
 8001f40:	20000294 	.word	0x20000294
 8001f44:	08015590 	.word	0x08015590
 8001f48:	080172f4 	.word	0x080172f4
 8001f4c:	20000030 	.word	0x20000030

08001f50 <show_echo>:

//echo
void show_echo(int argc, char* argv[])
{
 8001f50:	b5b0      	push	{r4, r5, r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
	const int _n = 1; /* Flag for "-n" option. */
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	60fb      	str	r3, [r7, #12]
	int flag = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	617b      	str	r3, [r7, #20]
	int i;

	for (i = 1; i < argc; i++) {
 8001f62:	2301      	movs	r3, #1
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	e014      	b.n	8001f92 <show_echo+0x42>
		if (!strcmp(argv[i], "-n"))
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	4413      	add	r3, r2
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	4926      	ldr	r1, [pc, #152]	; (8002010 <show_echo+0xc0>)
 8001f76:	f002 ff23 	bl	8004dc0 <strcmp>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d107      	bne.n	8001f90 <show_echo+0x40>
			flag |= _n;
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	617b      	str	r3, [r7, #20]
{
	const int _n = 1; /* Flag for "-n" option. */
	int flag = 0;
	int i;

	for (i = 1; i < argc; i++) {
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	613b      	str	r3, [r7, #16]
 8001f8e:	e000      	b.n	8001f92 <show_echo+0x42>
		if (!strcmp(argv[i], "-n"))
			flag |= _n;
		else
			break;
 8001f90:	e003      	b.n	8001f9a <show_echo+0x4a>
{
	const int _n = 1; /* Flag for "-n" option. */
	int flag = 0;
	int i;

	for (i = 1; i < argc; i++) {
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	dbe6      	blt.n	8001f68 <show_echo+0x18>
			flag |= _n;
		else
			break;
	}

	for (; i < argc; i++) {
 8001f9a:	e024      	b.n	8001fe6 <show_echo+0x96>
		write(fdout, argv[i], strlen(argv[i]) + 1);
 8001f9c:	4b1d      	ldr	r3, [pc, #116]	; (8002014 <show_echo+0xc4>)
 8001f9e:	681d      	ldr	r5, [r3, #0]
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	681c      	ldr	r4, [r3, #0]
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f002 ff3d 	bl	8004e34 <strlen>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	4628      	mov	r0, r5
 8001fc0:	4621      	mov	r1, r4
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	f013 f9d2 	bl	801536c <write>
		if (i < argc - 1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	1e5a      	subs	r2, r3, #1
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	dd06      	ble.n	8001fe0 <show_echo+0x90>
			write(fdout, " ", 2);
 8001fd2:	4b10      	ldr	r3, [pc, #64]	; (8002014 <show_echo+0xc4>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	490f      	ldr	r1, [pc, #60]	; (8002018 <show_echo+0xc8>)
 8001fda:	2202      	movs	r2, #2
 8001fdc:	f013 f9c6 	bl	801536c <write>
			flag |= _n;
		else
			break;
	}

	for (; i < argc; i++) {
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	613b      	str	r3, [r7, #16]
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	dbd6      	blt.n	8001f9c <show_echo+0x4c>
		write(fdout, argv[i], strlen(argv[i]) + 1);
		if (i < argc - 1)
			write(fdout, " ", 2);
	}

	if (~flag & _n)
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	43da      	mvns	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d006      	beq.n	8002008 <show_echo+0xb8>
		write(fdout, next_line, 3);
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <show_echo+0xc4>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	4906      	ldr	r1, [pc, #24]	; (800201c <show_echo+0xcc>)
 8002002:	2203      	movs	r2, #3
 8002004:	f013 f9b2 	bl	801536c <write>
}
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bdb0      	pop	{r4, r5, r7, pc}
 800200e:	bf00      	nop
 8002010:	08017320 	.word	0x08017320
 8002014:	20000294 	.word	0x20000294
 8002018:	08017324 	.word	0x08017324
 800201c:	20000030 	.word	0x20000030

08002020 <show_man_page>:

//man
void show_man_page(int argc, char *argv[])
{
 8002020:	b5b0      	push	{r4, r5, r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
	int i;

	if (argc < 2)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b01      	cmp	r3, #1
 800202e:	dc00      	bgt.n	8002032 <show_man_page+0x12>
		return;
 8002030:	e071      	b.n	8002116 <show_man_page+0xf6>

	for (i = 0; i < CMD_COUNT && strcmp(cmd_data[i].cmd, argv[1]); i++)
 8002032:	2300      	movs	r3, #0
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	e002      	b.n	800203e <show_man_page+0x1e>
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	3301      	adds	r3, #1
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2b06      	cmp	r3, #6
 8002042:	dc10      	bgt.n	8002066 <show_man_page+0x46>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f44f 6283 	mov.w	r2, #1048	; 0x418
 800204a:	fb02 f203 	mul.w	r2, r2, r3
 800204e:	4b33      	ldr	r3, [pc, #204]	; (800211c <show_man_page+0xfc>)
 8002050:	441a      	add	r2, r3
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	3304      	adds	r3, #4
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4610      	mov	r0, r2
 800205a:	4619      	mov	r1, r3
 800205c:	f002 feb0 	bl	8004dc0 <strcmp>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1e8      	bne.n	8002038 <show_man_page+0x18>
		;

	if (i >= CMD_COUNT)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2b06      	cmp	r3, #6
 800206a:	dd00      	ble.n	800206e <show_man_page+0x4e>
		return;
 800206c:	e053      	b.n	8002116 <show_man_page+0xf6>

	write(fdout, "NAME: ", 7);
 800206e:	4b2c      	ldr	r3, [pc, #176]	; (8002120 <show_man_page+0x100>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	492b      	ldr	r1, [pc, #172]	; (8002124 <show_man_page+0x104>)
 8002076:	2207      	movs	r2, #7
 8002078:	f013 f978 	bl	801536c <write>
	write(fdout, cmd_data[i].cmd, strlen(cmd_data[i].cmd) + 1);
 800207c:	4b28      	ldr	r3, [pc, #160]	; (8002120 <show_man_page+0x100>)
 800207e:	681d      	ldr	r5, [r3, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f44f 6283 	mov.w	r2, #1048	; 0x418
 8002086:	fb02 f203 	mul.w	r2, r2, r3
 800208a:	4b24      	ldr	r3, [pc, #144]	; (800211c <show_man_page+0xfc>)
 800208c:	18d4      	adds	r4, r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f44f 6283 	mov.w	r2, #1048	; 0x418
 8002094:	fb02 f203 	mul.w	r2, r2, r3
 8002098:	4b20      	ldr	r3, [pc, #128]	; (800211c <show_man_page+0xfc>)
 800209a:	4413      	add	r3, r2
 800209c:	4618      	mov	r0, r3
 800209e:	f002 fec9 	bl	8004e34 <strlen>
 80020a2:	4603      	mov	r3, r0
 80020a4:	3301      	adds	r3, #1
 80020a6:	4628      	mov	r0, r5
 80020a8:	4621      	mov	r1, r4
 80020aa:	461a      	mov	r2, r3
 80020ac:	f013 f95e 	bl	801536c <write>
	write(fdout, next_line, 3);
 80020b0:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <show_man_page+0x100>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	491c      	ldr	r1, [pc, #112]	; (8002128 <show_man_page+0x108>)
 80020b8:	2203      	movs	r2, #3
 80020ba:	f013 f957 	bl	801536c <write>
	write(fdout, "DESCRIPTION: ", 14);
 80020be:	4b18      	ldr	r3, [pc, #96]	; (8002120 <show_man_page+0x100>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	4919      	ldr	r1, [pc, #100]	; (800212c <show_man_page+0x10c>)
 80020c6:	220e      	movs	r2, #14
 80020c8:	f013 f950 	bl	801536c <write>
	write(fdout, cmd_data[i].description, strlen(cmd_data[i].description) + 1);
 80020cc:	4b14      	ldr	r3, [pc, #80]	; (8002120 <show_man_page+0x100>)
 80020ce:	681d      	ldr	r5, [r3, #0]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f44f 6283 	mov.w	r2, #1048	; 0x418
 80020d6:	fb02 f303 	mul.w	r3, r2, r3
 80020da:	f103 0218 	add.w	r2, r3, #24
 80020de:	4b0f      	ldr	r3, [pc, #60]	; (800211c <show_man_page+0xfc>)
 80020e0:	18d4      	adds	r4, r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f44f 6283 	mov.w	r2, #1048	; 0x418
 80020e8:	fb02 f303 	mul.w	r3, r2, r3
 80020ec:	f103 0218 	add.w	r2, r3, #24
 80020f0:	4b0a      	ldr	r3, [pc, #40]	; (800211c <show_man_page+0xfc>)
 80020f2:	4413      	add	r3, r2
 80020f4:	4618      	mov	r0, r3
 80020f6:	f002 fe9d 	bl	8004e34 <strlen>
 80020fa:	4603      	mov	r3, r0
 80020fc:	3301      	adds	r3, #1
 80020fe:	4628      	mov	r0, r5
 8002100:	4621      	mov	r1, r4
 8002102:	461a      	mov	r2, r3
 8002104:	f013 f932 	bl	801536c <write>
	write(fdout, next_line, 3);
 8002108:	4b05      	ldr	r3, [pc, #20]	; (8002120 <show_man_page+0x100>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	4906      	ldr	r1, [pc, #24]	; (8002128 <show_man_page+0x108>)
 8002110:	2203      	movs	r2, #3
 8002112:	f013 f92b 	bl	801536c <write>
}
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bdb0      	pop	{r4, r5, r7, pc}
 800211c:	08015590 	.word	0x08015590
 8002120:	20000294 	.word	0x20000294
 8002124:	08017328 	.word	0x08017328
 8002128:	20000030 	.word	0x20000030
 800212c:	08017330 	.word	0x08017330

08002130 <show_history>:

void show_history(int argc, char *argv[])
{
 8002130:	b5b0      	push	{r4, r5, r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
	int i;

	for (i = cur_his + 1; i <= cur_his + HISTORY_COUNT; i++) {
 800213a:	4b26      	ldr	r3, [pc, #152]	; (80021d4 <show_history+0xa4>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	3301      	adds	r3, #1
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	e03c      	b.n	80021be <show_history+0x8e>
		if (cmd[i % HISTORY_COUNT][0]) {
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	4b24      	ldr	r3, [pc, #144]	; (80021d8 <show_history+0xa8>)
 8002148:	4013      	ands	r3, r2
 800214a:	2b00      	cmp	r3, #0
 800214c:	da03      	bge.n	8002156 <show_history+0x26>
 800214e:	3b01      	subs	r3, #1
 8002150:	f063 0307 	orn	r3, r3, #7
 8002154:	3301      	adds	r3, #1
 8002156:	4a21      	ldr	r2, [pc, #132]	; (80021dc <show_history+0xac>)
 8002158:	019b      	lsls	r3, r3, #6
 800215a:	4413      	add	r3, r2
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d02a      	beq.n	80021b8 <show_history+0x88>
			write(fdout, cmd[i % HISTORY_COUNT], strlen(cmd[i % HISTORY_COUNT]) + 1);
 8002162:	4b1f      	ldr	r3, [pc, #124]	; (80021e0 <show_history+0xb0>)
 8002164:	681d      	ldr	r5, [r3, #0]
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	4b1b      	ldr	r3, [pc, #108]	; (80021d8 <show_history+0xa8>)
 800216a:	4013      	ands	r3, r2
 800216c:	2b00      	cmp	r3, #0
 800216e:	da03      	bge.n	8002178 <show_history+0x48>
 8002170:	3b01      	subs	r3, #1
 8002172:	f063 0307 	orn	r3, r3, #7
 8002176:	3301      	adds	r3, #1
 8002178:	019a      	lsls	r2, r3, #6
 800217a:	4b18      	ldr	r3, [pc, #96]	; (80021dc <show_history+0xac>)
 800217c:	18d4      	adds	r4, r2, r3
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	4b15      	ldr	r3, [pc, #84]	; (80021d8 <show_history+0xa8>)
 8002182:	4013      	ands	r3, r2
 8002184:	2b00      	cmp	r3, #0
 8002186:	da03      	bge.n	8002190 <show_history+0x60>
 8002188:	3b01      	subs	r3, #1
 800218a:	f063 0307 	orn	r3, r3, #7
 800218e:	3301      	adds	r3, #1
 8002190:	019a      	lsls	r2, r3, #6
 8002192:	4b12      	ldr	r3, [pc, #72]	; (80021dc <show_history+0xac>)
 8002194:	4413      	add	r3, r2
 8002196:	4618      	mov	r0, r3
 8002198:	f002 fe4c 	bl	8004e34 <strlen>
 800219c:	4603      	mov	r3, r0
 800219e:	3301      	adds	r3, #1
 80021a0:	4628      	mov	r0, r5
 80021a2:	4621      	mov	r1, r4
 80021a4:	461a      	mov	r2, r3
 80021a6:	f013 f8e1 	bl	801536c <write>
			write(fdout, next_line, 3);
 80021aa:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <show_history+0xb0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	490c      	ldr	r1, [pc, #48]	; (80021e4 <show_history+0xb4>)
 80021b2:	2203      	movs	r2, #3
 80021b4:	f013 f8da 	bl	801536c <write>

void show_history(int argc, char *argv[])
{
	int i;

	for (i = cur_his + 1; i <= cur_his + HISTORY_COUNT; i++) {
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	3301      	adds	r3, #1
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <show_history+0xa4>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f103 0208 	add.w	r2, r3, #8
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	dabb      	bge.n	8002144 <show_history+0x14>
		if (cmd[i % HISTORY_COUNT][0]) {
			write(fdout, cmd[i % HISTORY_COUNT], strlen(cmd[i % HISTORY_COUNT]) + 1);
			write(fdout, next_line, 3);
		}
	}
}
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bdb0      	pop	{r4, r5, r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000290 	.word	0x20000290
 80021d8:	80000007 	.word	0x80000007
 80021dc:	20000090 	.word	0x20000090
 80021e0:	20000294 	.word	0x20000294
 80021e4:	20000030 	.word	0x20000030

080021e8 <write_blank>:

void write_blank(int blank_num)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
	char blank[] = " ";
 80021f0:	2320      	movs	r3, #32
 80021f2:	813b      	strh	r3, [r7, #8]
	int blank_count = 0;
 80021f4:	2300      	movs	r3, #0
 80021f6:	60fb      	str	r3, [r7, #12]

	while (blank_count <= blank_num) {
 80021f8:	e00b      	b.n	8002212 <write_blank+0x2a>
		write(fdout, blank, sizeof(blank));
 80021fa:	4b09      	ldr	r3, [pc, #36]	; (8002220 <write_blank+0x38>)
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	f107 0308 	add.w	r3, r7, #8
 8002202:	4610      	mov	r0, r2
 8002204:	4619      	mov	r1, r3
 8002206:	2202      	movs	r2, #2
 8002208:	f013 f8b0 	bl	801536c <write>
		blank_count++;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	3301      	adds	r3, #1
 8002210:	60fb      	str	r3, [r7, #12]
void write_blank(int blank_num)
{
	char blank[] = " ";
	int blank_count = 0;

	while (blank_count <= blank_num) {
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	429a      	cmp	r2, r3
 8002218:	ddef      	ble.n	80021fa <write_blank+0x12>
		write(fdout, blank, sizeof(blank));
		blank_count++;
	}
}
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	20000294 	.word	0x20000294

08002224 <hexof>:

char hexof(int dec)
{
 8002224:	b4b0      	push	{r4, r5, r7}
 8002226:	b089      	sub	sp, #36	; 0x24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
    const char hextab[] = "0123456789abcdef";
 800222c:	4b0c      	ldr	r3, [pc, #48]	; (8002260 <hexof+0x3c>)
 800222e:	f107 040c 	add.w	r4, r7, #12
 8002232:	461d      	mov	r5, r3
 8002234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002238:	682b      	ldr	r3, [r5, #0]
 800223a:	7023      	strb	r3, [r4, #0]

    if (dec < 0 || dec > 15)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	db02      	blt.n	8002248 <hexof+0x24>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b0f      	cmp	r3, #15
 8002246:	dd01      	ble.n	800224c <hexof+0x28>
        return -1;
 8002248:	23ff      	movs	r3, #255	; 0xff
 800224a:	e004      	b.n	8002256 <hexof+0x32>

    return hextab[dec];
 800224c:	f107 020c 	add.w	r2, r7, #12
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4413      	add	r3, r2
 8002254:	781b      	ldrb	r3, [r3, #0]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3724      	adds	r7, #36	; 0x24
 800225a:	46bd      	mov	sp, r7
 800225c:	bcb0      	pop	{r4, r5, r7}
 800225e:	4770      	bx	lr
 8002260:	08017340 	.word	0x08017340

08002264 <char_filter>:

char char_filter(char c, char fallback)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	71fa      	strb	r2, [r7, #7]
 8002270:	71bb      	strb	r3, [r7, #6]
    if (c < 0x20 || c > 0x7E)
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	2b1f      	cmp	r3, #31
 8002276:	d902      	bls.n	800227e <char_filter+0x1a>
 8002278:	79fb      	ldrb	r3, [r7, #7]
 800227a:	2b7e      	cmp	r3, #126	; 0x7e
 800227c:	d901      	bls.n	8002282 <char_filter+0x1e>
        return fallback;
 800227e:	79bb      	ldrb	r3, [r7, #6]
 8002280:	e000      	b.n	8002284 <char_filter+0x20>

    return c;
 8002282:	79fb      	ldrb	r3, [r7, #7]
}
 8002284:	4618      	mov	r0, r3
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <show_xxd>:

#define XXD_WIDTH 0x10

//xxd
void show_xxd(int argc, char *argv[])
{
 8002290:	b5b0      	push	{r4, r5, r7, lr}
 8002292:	b08c      	sub	sp, #48	; 0x30
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
    int readfd = -1;
 800229a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800229e:	62fb      	str	r3, [r7, #44]	; 0x2c
    char buf[XXD_WIDTH];
    char ch;
    char chout[2] = {0};
 80022a0:	2300      	movs	r3, #0
 80022a2:	81bb      	strh	r3, [r7, #12]
    int pos = 0;
 80022a4:	2300      	movs	r3, #0
 80022a6:	62bb      	str	r3, [r7, #40]	; 0x28
    int size;
    int i;

    if (argc == 1) { /* fallback to stdin */
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d103      	bne.n	80022b6 <show_xxd+0x26>
        readfd = fdin;
 80022ae:	4ba3      	ldr	r3, [pc, #652]	; (800253c <show_xxd+0x2ac>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022b4:	e02b      	b.n	800230e <show_xxd+0x7e>
    }
    else { /* open file of argv[1] */
        readfd = open(argv[1], 0);
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	3304      	adds	r3, #4
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	2100      	movs	r1, #0
 80022c0:	f7fe fde0 	bl	8000e84 <open>
 80022c4:	62f8      	str	r0, [r7, #44]	; 0x2c

        if (readfd < 0) { /* Open error */
 80022c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	da20      	bge.n	800230e <show_xxd+0x7e>
            write(fdout, "xxd: ", 6);
 80022cc:	4b9c      	ldr	r3, [pc, #624]	; (8002540 <show_xxd+0x2b0>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	499c      	ldr	r1, [pc, #624]	; (8002544 <show_xxd+0x2b4>)
 80022d4:	2206      	movs	r2, #6
 80022d6:	f013 f849 	bl	801536c <write>
            write(fdout, argv[1], strlen(argv[1]) + 1);
 80022da:	4b99      	ldr	r3, [pc, #612]	; (8002540 <show_xxd+0x2b0>)
 80022dc:	681d      	ldr	r5, [r3, #0]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	3304      	adds	r3, #4
 80022e2:	681c      	ldr	r4, [r3, #0]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	3304      	adds	r3, #4
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f002 fda2 	bl	8004e34 <strlen>
 80022f0:	4603      	mov	r3, r0
 80022f2:	3301      	adds	r3, #1
 80022f4:	4628      	mov	r0, r5
 80022f6:	4621      	mov	r1, r4
 80022f8:	461a      	mov	r2, r3
 80022fa:	f013 f837 	bl	801536c <write>
            write(fdout, ": No such file or directory\r\n", 31);
 80022fe:	4b90      	ldr	r3, [pc, #576]	; (8002540 <show_xxd+0x2b0>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	4990      	ldr	r1, [pc, #576]	; (8002548 <show_xxd+0x2b8>)
 8002306:	221f      	movs	r2, #31
 8002308:	f013 f830 	bl	801536c <write>
 800230c:	e112      	b.n	8002534 <show_xxd+0x2a4>
            return;
        }
    }

    lseek(readfd, 0, SEEK_SET);
 800230e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002310:	2100      	movs	r1, #0
 8002312:	2201      	movs	r2, #1
 8002314:	f013 f85b 	bl	80153ce <lseek>
    while ((size = read(readfd, &ch, sizeof(ch))) && size != -1) {
 8002318:	e09e      	b.n	8002458 <show_xxd+0x1c8>
        if (ch != -1 && ch != 0x04) { /* has something read */
 800231a:	7bfb      	ldrb	r3, [r7, #15]
 800231c:	2b04      	cmp	r3, #4
 800231e:	f000 809a 	beq.w	8002456 <show_xxd+0x1c6>

            if (pos % XXD_WIDTH == 0) { /* new line, print address */
 8002322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002324:	f003 030f 	and.w	r3, r3, #15
 8002328:	2b00      	cmp	r3, #0
 800232a:	d123      	bne.n	8002374 <show_xxd+0xe4>
                for (i = sizeof(pos) * 8 - 4; i >= 0; i -= 4) {
 800232c:	231c      	movs	r3, #28
 800232e:	627b      	str	r3, [r7, #36]	; 0x24
 8002330:	e016      	b.n	8002360 <show_xxd+0xd0>
                    chout[0] = hexof((pos >> i) & 0xF);
 8002332:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	fa42 f303 	asr.w	r3, r2, r3
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff ff70 	bl	8002224 <hexof>
 8002344:	4603      	mov	r3, r0
 8002346:	733b      	strb	r3, [r7, #12]
                    write(fdout, chout, 2);
 8002348:	4b7d      	ldr	r3, [pc, #500]	; (8002540 <show_xxd+0x2b0>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	f107 030c 	add.w	r3, r7, #12
 8002350:	4610      	mov	r0, r2
 8002352:	4619      	mov	r1, r3
 8002354:	2202      	movs	r2, #2
 8002356:	f013 f809 	bl	801536c <write>
    lseek(readfd, 0, SEEK_SET);
    while ((size = read(readfd, &ch, sizeof(ch))) && size != -1) {
        if (ch != -1 && ch != 0x04) { /* has something read */

            if (pos % XXD_WIDTH == 0) { /* new line, print address */
                for (i = sizeof(pos) * 8 - 4; i >= 0; i -= 4) {
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	3b04      	subs	r3, #4
 800235e:	627b      	str	r3, [r7, #36]	; 0x24
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	2b00      	cmp	r3, #0
 8002364:	dae5      	bge.n	8002332 <show_xxd+0xa2>
                    chout[0] = hexof((pos >> i) & 0xF);
                    write(fdout, chout, 2);
                }

                write(fdout, ":", 2);
 8002366:	4b76      	ldr	r3, [pc, #472]	; (8002540 <show_xxd+0x2b0>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	4977      	ldr	r1, [pc, #476]	; (800254c <show_xxd+0x2bc>)
 800236e:	2202      	movs	r2, #2
 8002370:	f012 fffc 	bl	801536c <write>
            }

            if (pos % 2 == 0) { /* whitespace for each 2 bytes */
 8002374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d106      	bne.n	800238c <show_xxd+0xfc>
                write(fdout, " ", 2);
 800237e:	4b70      	ldr	r3, [pc, #448]	; (8002540 <show_xxd+0x2b0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	4972      	ldr	r1, [pc, #456]	; (8002550 <show_xxd+0x2c0>)
 8002386:	2202      	movs	r2, #2
 8002388:	f012 fff0 	bl	801536c <write>
            }

            /* higher bits */
            chout[0] = hexof(ch >> 4);
 800238c:	7bfb      	ldrb	r3, [r7, #15]
 800238e:	091b      	lsrs	r3, r3, #4
 8002390:	b2db      	uxtb	r3, r3
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff ff46 	bl	8002224 <hexof>
 8002398:	4603      	mov	r3, r0
 800239a:	733b      	strb	r3, [r7, #12]
            write(fdout, chout, 2);
 800239c:	4b68      	ldr	r3, [pc, #416]	; (8002540 <show_xxd+0x2b0>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	f107 030c 	add.w	r3, r7, #12
 80023a4:	4610      	mov	r0, r2
 80023a6:	4619      	mov	r1, r3
 80023a8:	2202      	movs	r2, #2
 80023aa:	f012 ffdf 	bl	801536c <write>

            /* lower bits*/
            chout[0] = hexof(ch & 0xF);
 80023ae:	7bfb      	ldrb	r3, [r7, #15]
 80023b0:	f003 030f 	and.w	r3, r3, #15
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff ff35 	bl	8002224 <hexof>
 80023ba:	4603      	mov	r3, r0
 80023bc:	733b      	strb	r3, [r7, #12]
            write(fdout, chout, 2);
 80023be:	4b60      	ldr	r3, [pc, #384]	; (8002540 <show_xxd+0x2b0>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	f107 030c 	add.w	r3, r7, #12
 80023c6:	4610      	mov	r0, r2
 80023c8:	4619      	mov	r1, r3
 80023ca:	2202      	movs	r2, #2
 80023cc:	f012 ffce 	bl	801536c <write>

            /* store in buffer */
            buf[pos % XXD_WIDTH] = ch;
 80023d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023d2:	4b60      	ldr	r3, [pc, #384]	; (8002554 <show_xxd+0x2c4>)
 80023d4:	4013      	ands	r3, r2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	da03      	bge.n	80023e2 <show_xxd+0x152>
 80023da:	3b01      	subs	r3, #1
 80023dc:	f063 030f 	orn	r3, r3, #15
 80023e0:	3301      	adds	r3, #1
 80023e2:	7bfa      	ldrb	r2, [r7, #15]
 80023e4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80023e8:	440b      	add	r3, r1
 80023ea:	f803 2c20 	strb.w	r2, [r3, #-32]

            pos++;
 80023ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f0:	3301      	adds	r3, #1
 80023f2:	62bb      	str	r3, [r7, #40]	; 0x28

            if (pos % XXD_WIDTH == 0) { /* end of line */
 80023f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d12c      	bne.n	8002458 <show_xxd+0x1c8>
                write(fdout, "  ", 3);
 80023fe:	4b50      	ldr	r3, [pc, #320]	; (8002540 <show_xxd+0x2b0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	4954      	ldr	r1, [pc, #336]	; (8002558 <show_xxd+0x2c8>)
 8002406:	2203      	movs	r2, #3
 8002408:	f012 ffb0 	bl	801536c <write>

                for (i = 0; i < XXD_WIDTH; i++) {
 800240c:	2300      	movs	r3, #0
 800240e:	627b      	str	r3, [r7, #36]	; 0x24
 8002410:	e016      	b.n	8002440 <show_xxd+0x1b0>
                    chout[0] = char_filter(buf[i], '.');
 8002412:	f107 0210 	add.w	r2, r7, #16
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	4413      	add	r3, r2
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	212e      	movs	r1, #46	; 0x2e
 8002420:	f7ff ff20 	bl	8002264 <char_filter>
 8002424:	4603      	mov	r3, r0
 8002426:	733b      	strb	r3, [r7, #12]
                    write(fdout, chout, 2);
 8002428:	4b45      	ldr	r3, [pc, #276]	; (8002540 <show_xxd+0x2b0>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	f107 030c 	add.w	r3, r7, #12
 8002430:	4610      	mov	r0, r2
 8002432:	4619      	mov	r1, r3
 8002434:	2202      	movs	r2, #2
 8002436:	f012 ff99 	bl	801536c <write>
            pos++;

            if (pos % XXD_WIDTH == 0) { /* end of line */
                write(fdout, "  ", 3);

                for (i = 0; i < XXD_WIDTH; i++) {
 800243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243c:	3301      	adds	r3, #1
 800243e:	627b      	str	r3, [r7, #36]	; 0x24
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	2b0f      	cmp	r3, #15
 8002444:	dde5      	ble.n	8002412 <show_xxd+0x182>
                    chout[0] = char_filter(buf[i], '.');
                    write(fdout, chout, 2);
                }

                write(fdout, "\r\n", 3);
 8002446:	4b3e      	ldr	r3, [pc, #248]	; (8002540 <show_xxd+0x2b0>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	4943      	ldr	r1, [pc, #268]	; (800255c <show_xxd+0x2cc>)
 800244e:	2203      	movs	r2, #3
 8002450:	f012 ff8c 	bl	801536c <write>
 8002454:	e000      	b.n	8002458 <show_xxd+0x1c8>
            }
        }
        else { /* EOF */
            break;
 8002456:	e00f      	b.n	8002478 <show_xxd+0x1e8>
            return;
        }
    }

    lseek(readfd, 0, SEEK_SET);
    while ((size = read(readfd, &ch, sizeof(ch))) && size != -1) {
 8002458:	f107 030f 	add.w	r3, r7, #15
 800245c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800245e:	4619      	mov	r1, r3
 8002460:	2201      	movs	r2, #1
 8002462:	f012 ff8a 	bl	801537a <read>
 8002466:	6238      	str	r0, [r7, #32]
 8002468:	6a3b      	ldr	r3, [r7, #32]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d004      	beq.n	8002478 <show_xxd+0x1e8>
 800246e:	6a3b      	ldr	r3, [r7, #32]
 8002470:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002474:	f47f af51 	bne.w	800231a <show_xxd+0x8a>
        else { /* EOF */
            break;
        }
    }

    if (pos % XXD_WIDTH != 0) { /* rest */
 8002478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	2b00      	cmp	r3, #0
 8002480:	d058      	beq.n	8002534 <show_xxd+0x2a4>
        /* align */
        for (i = pos % XXD_WIDTH; i < XXD_WIDTH; i++) {
 8002482:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002484:	4b33      	ldr	r3, [pc, #204]	; (8002554 <show_xxd+0x2c4>)
 8002486:	4013      	ands	r3, r2
 8002488:	2b00      	cmp	r3, #0
 800248a:	da03      	bge.n	8002494 <show_xxd+0x204>
 800248c:	3b01      	subs	r3, #1
 800248e:	f063 030f 	orn	r3, r3, #15
 8002492:	3301      	adds	r3, #1
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
 8002496:	e015      	b.n	80024c4 <show_xxd+0x234>
            if (i % 2 == 0) { /* whitespace for each 2 bytes */
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d106      	bne.n	80024b0 <show_xxd+0x220>
                write(fdout, " ", 2);
 80024a2:	4b27      	ldr	r3, [pc, #156]	; (8002540 <show_xxd+0x2b0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	4929      	ldr	r1, [pc, #164]	; (8002550 <show_xxd+0x2c0>)
 80024aa:	2202      	movs	r2, #2
 80024ac:	f012 ff5e 	bl	801536c <write>
            }
            write(fdout, "  ", 3);
 80024b0:	4b23      	ldr	r3, [pc, #140]	; (8002540 <show_xxd+0x2b0>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	4928      	ldr	r1, [pc, #160]	; (8002558 <show_xxd+0x2c8>)
 80024b8:	2203      	movs	r2, #3
 80024ba:	f012 ff57 	bl	801536c <write>
        }
    }

    if (pos % XXD_WIDTH != 0) { /* rest */
        /* align */
        for (i = pos % XXD_WIDTH; i < XXD_WIDTH; i++) {
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	3301      	adds	r3, #1
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	2b0f      	cmp	r3, #15
 80024c8:	dde6      	ble.n	8002498 <show_xxd+0x208>
                write(fdout, " ", 2);
            }
            write(fdout, "  ", 3);
        }

        write(fdout, "  ", 3);
 80024ca:	4b1d      	ldr	r3, [pc, #116]	; (8002540 <show_xxd+0x2b0>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	4921      	ldr	r1, [pc, #132]	; (8002558 <show_xxd+0x2c8>)
 80024d2:	2203      	movs	r2, #3
 80024d4:	f012 ff4a 	bl	801536c <write>

        for (i = 0; i < pos % XXD_WIDTH; i++) {
 80024d8:	2300      	movs	r3, #0
 80024da:	627b      	str	r3, [r7, #36]	; 0x24
 80024dc:	e016      	b.n	800250c <show_xxd+0x27c>
            chout[0] = char_filter(buf[i], '.');
 80024de:	f107 0210 	add.w	r2, r7, #16
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	4413      	add	r3, r2
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	212e      	movs	r1, #46	; 0x2e
 80024ec:	f7ff feba 	bl	8002264 <char_filter>
 80024f0:	4603      	mov	r3, r0
 80024f2:	733b      	strb	r3, [r7, #12]
            write(fdout, chout, 2);
 80024f4:	4b12      	ldr	r3, [pc, #72]	; (8002540 <show_xxd+0x2b0>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	f107 030c 	add.w	r3, r7, #12
 80024fc:	4610      	mov	r0, r2
 80024fe:	4619      	mov	r1, r3
 8002500:	2202      	movs	r2, #2
 8002502:	f012 ff33 	bl	801536c <write>
            write(fdout, "  ", 3);
        }

        write(fdout, "  ", 3);

        for (i = 0; i < pos % XXD_WIDTH; i++) {
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	3301      	adds	r3, #1
 800250a:	627b      	str	r3, [r7, #36]	; 0x24
 800250c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800250e:	4b11      	ldr	r3, [pc, #68]	; (8002554 <show_xxd+0x2c4>)
 8002510:	4013      	ands	r3, r2
 8002512:	2b00      	cmp	r3, #0
 8002514:	da03      	bge.n	800251e <show_xxd+0x28e>
 8002516:	3b01      	subs	r3, #1
 8002518:	f063 030f 	orn	r3, r3, #15
 800251c:	3301      	adds	r3, #1
 800251e:	461a      	mov	r2, r3
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	429a      	cmp	r2, r3
 8002524:	dcdb      	bgt.n	80024de <show_xxd+0x24e>
            chout[0] = char_filter(buf[i], '.');
            write(fdout, chout, 2);
        }

        write(fdout, "\r\n", 3);
 8002526:	4b06      	ldr	r3, [pc, #24]	; (8002540 <show_xxd+0x2b0>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	490b      	ldr	r1, [pc, #44]	; (800255c <show_xxd+0x2cc>)
 800252e:	2203      	movs	r2, #3
 8002530:	f012 ff1c 	bl	801536c <write>
    }
}
 8002534:	3730      	adds	r7, #48	; 0x30
 8002536:	46bd      	mov	sp, r7
 8002538:	bdb0      	pop	{r4, r5, r7, pc}
 800253a:	bf00      	nop
 800253c:	20000298 	.word	0x20000298
 8002540:	20000294 	.word	0x20000294
 8002544:	08017354 	.word	0x08017354
 8002548:	0801735c 	.word	0x0801735c
 800254c:	0801737c 	.word	0x0801737c
 8002550:	08017324 	.word	0x08017324
 8002554:	8000000f 	.word	0x8000000f
 8002558:	08017380 	.word	0x08017380
 800255c:	08017384 	.word	0x08017384

08002560 <first>:


void first()
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
	if (!fork()) setpriority(0, 0), pathserver();
 8002564:	f012 fef4 	bl	8015350 <fork>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d105      	bne.n	800257a <first+0x1a>
 800256e:	2000      	movs	r0, #0
 8002570:	2100      	movs	r1, #0
 8002572:	f012 ff17 	bl	80153a4 <setpriority>
 8002576:	f001 f819 	bl	80035ac <pathserver>
	if (!fork()) setpriority(0, 0), romdev_driver();
 800257a:	f012 fee9 	bl	8015350 <fork>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d105      	bne.n	8002590 <first+0x30>
 8002584:	2000      	movs	r0, #0
 8002586:	2100      	movs	r1, #0
 8002588:	f012 ff0c 	bl	80153a4 <setpriority>
 800258c:	f002 f930 	bl	80047f0 <romdev_driver>
	if (!fork()) setpriority(0, 0), romfs_server();
 8002590:	f012 fede 	bl	8015350 <fork>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d105      	bne.n	80025a6 <first+0x46>
 800259a:	2000      	movs	r0, #0
 800259c:	2100      	movs	r1, #0
 800259e:	f012 ff01 	bl	80153a4 <setpriority>
 80025a2:	f002 fa13 	bl	80049cc <romfs_server>
	if (!fork()) setpriority(0, 0), serialout(USART2, USART2_IRQn);
 80025a6:	f012 fed3 	bl	8015350 <fork>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d107      	bne.n	80025c0 <first+0x60>
 80025b0:	2000      	movs	r0, #0
 80025b2:	2100      	movs	r1, #0
 80025b4:	f012 fef6 	bl	80153a4 <setpriority>
 80025b8:	4816      	ldr	r0, [pc, #88]	; (8002614 <first+0xb4>)
 80025ba:	2126      	movs	r1, #38	; 0x26
 80025bc:	f7fe feaa 	bl	8001314 <serialout>
	if (!fork()) setpriority(0, 0), serialin(USART2, USART2_IRQn);
 80025c0:	f012 fec6 	bl	8015350 <fork>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d107      	bne.n	80025da <first+0x7a>
 80025ca:	2000      	movs	r0, #0
 80025cc:	2100      	movs	r1, #0
 80025ce:	f012 fee9 	bl	80153a4 <setpriority>
 80025d2:	4810      	ldr	r0, [pc, #64]	; (8002614 <first+0xb4>)
 80025d4:	2126      	movs	r1, #38	; 0x26
 80025d6:	f7fe fed5 	bl	8001384 <serialin>
	if (!fork()) rs232_xmit_msg_task();
 80025da:	f012 feb9 	bl	8015350 <fork>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <first+0x88>
 80025e4:	f7fe ff3c 	bl	8001460 <rs232_xmit_msg_task>
	if (!fork()) setpriority(0, PRIORITY_DEFAULT - 10), serial_test_task();
 80025e8:	f012 feb2 	bl	8015350 <fork>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d105      	bne.n	80025fe <first+0x9e>
 80025f2:	2000      	movs	r0, #0
 80025f4:	210a      	movs	r1, #10
 80025f6:	f012 fed5 	bl	80153a4 <setpriority>
 80025fa:	f7fe ffe5 	bl	80015c8 <serial_test_task>

	setpriority(0, PRIORITY_LIMIT);
 80025fe:	2000      	movs	r0, #0
 8002600:	2127      	movs	r1, #39	; 0x27
 8002602:	f012 fecf 	bl	80153a4 <setpriority>

	mount("/dev/rom0", "/", ROMFS_TYPE, 0);
 8002606:	4804      	ldr	r0, [pc, #16]	; (8002618 <first+0xb8>)
 8002608:	4904      	ldr	r1, [pc, #16]	; (800261c <first+0xbc>)
 800260a:	4a05      	ldr	r2, [pc, #20]	; (8002620 <first+0xc0>)
 800260c:	2300      	movs	r3, #0
 800260e:	f001 fbdb 	bl	8003dc8 <mount>

	while(1);
 8002612:	e7fe      	b.n	8002612 <first+0xb2>
 8002614:	40004400 	.word	0x40004400
 8002618:	08017388 	.word	0x08017388
 800261c:	08017394 	.word	0x08017394
 8002620:	08017398 	.word	0x08017398

08002624 <intr_release>:
#define INTR_EVENT_REVERSE(event) ((event) - FILE_LIMIT - 15)
#define TIME_EVENT (FILE_LIMIT + INTR_LIMIT)

int intr_release(struct event_monitor *monitor, int event,
                 struct task_control_block *task, void *data)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
 8002630:	603b      	str	r3, [r7, #0]
    return 1;
 8002632:	2301      	movs	r3, #1
}
 8002634:	4618      	mov	r0, r3
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <time_release>:

int time_release(struct event_monitor *monitor, int event,
                 struct task_control_block *task, void *data)
{
 8002640:	b480      	push	{r7}
 8002642:	b087      	sub	sp, #28
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
 800264c:	603b      	str	r3, [r7, #0]
    int *tick_count = data;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	617b      	str	r3, [r7, #20]
    return task->stack->r0 == *tick_count;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	429a      	cmp	r2, r3
 800265e:	bf14      	ite	ne
 8002660:	2300      	movne	r3, #0
 8002662:	2301      	moveq	r3, #1
 8002664:	b2db      	uxtb	r3, r3
}
 8002666:	4618      	mov	r0, r3
 8002668:	371c      	adds	r7, #28
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop

08002674 <main>:
struct list ready_list[PRIORITY_LIMIT + 1];  /* [0 ... 39] */
struct event events[EVENT_LIMIT];


int main()
{
 8002674:	b5b0      	push	{r4, r5, r7, lr}
 8002676:	b096      	sub	sp, #88	; 0x58
 8002678:	af02      	add	r7, sp, #8
	//struct task_control_block tasks[TASK_LIMIT];
	struct memory_pool memory_pool;
	struct event_monitor event_monitor;
	//size_t task_count = 0;
	size_t current_task = 0;
 800267a:	2300      	movs	r3, #0
 800267c:	64fb      	str	r3, [r7, #76]	; 0x4c
	int i;
	struct list *list;
	struct task_control_block *task;
	int timeup;
	unsigned int tick_count = 0;
 800267e:	2300      	movs	r3, #0
 8002680:	607b      	str	r3, [r7, #4]

	SysTick_Config(configCPU_CLOCK_HZ / configTICK_RATE_HZ);
 8002682:	4889      	ldr	r0, [pc, #548]	; (80028a8 <main+0x234>)
 8002684:	f7fe fe24 	bl	80012d0 <SysTick_Config>

	init_rs232();
 8002688:	f002 fc74 	bl	8004f74 <init_rs232>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800268c:	b662      	cpsie	i
	__enable_irq();

    /* Initialize memory pool */
    memory_pool_init(&memory_pool, MEM_LIMIT, memory_space);
 800268e:	f107 0310 	add.w	r3, r7, #16
 8002692:	4618      	mov	r0, r3
 8002694:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002698:	4a84      	ldr	r2, [pc, #528]	; (80028ac <main+0x238>)
 800269a:	f000 fdb5 	bl	8003208 <memory_pool_init>

	/* Initialize all files */
	for (i = 0; i < FILE_LIMIT; i++)
 800269e:	2300      	movs	r3, #0
 80026a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80026a2:	e007      	b.n	80026b4 <main+0x40>
		files[i] = NULL;
 80026a4:	4b82      	ldr	r3, [pc, #520]	; (80028b0 <main+0x23c>)
 80026a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026a8:	2100      	movs	r1, #0
 80026aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Initialize memory pool */
    memory_pool_init(&memory_pool, MEM_LIMIT, memory_space);

	/* Initialize all files */
	for (i = 0; i < FILE_LIMIT; i++)
 80026ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026b0:	3301      	adds	r3, #1
 80026b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80026b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026b6:	2b1f      	cmp	r3, #31
 80026b8:	ddf4      	ble.n	80026a4 <main+0x30>
		files[i] = NULL;

	/* Initialize ready lists */
	for (i = 0; i <= PRIORITY_LIMIT; i++)
 80026ba:	2300      	movs	r3, #0
 80026bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80026be:	e009      	b.n	80026d4 <main+0x60>
		list_init(&ready_list[i]);
 80026c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026c2:	00da      	lsls	r2, r3, #3
 80026c4:	4b7b      	ldr	r3, [pc, #492]	; (80028b4 <main+0x240>)
 80026c6:	4413      	add	r3, r2
 80026c8:	4618      	mov	r0, r3
 80026ca:	f000 fcff 	bl	80030cc <list_init>
	/* Initialize all files */
	for (i = 0; i < FILE_LIMIT; i++)
		files[i] = NULL;

	/* Initialize ready lists */
	for (i = 0; i <= PRIORITY_LIMIT; i++)
 80026ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026d0:	3301      	adds	r3, #1
 80026d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80026d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026d6:	2b27      	cmp	r3, #39	; 0x27
 80026d8:	ddf2      	ble.n	80026c0 <main+0x4c>
		list_init(&ready_list[i]);

    /* Initialise event monitor */
    event_monitor_init(&event_monitor, events, ready_list);
 80026da:	f107 0308 	add.w	r3, r7, #8
 80026de:	4618      	mov	r0, r3
 80026e0:	4975      	ldr	r1, [pc, #468]	; (80028b8 <main+0x244>)
 80026e2:	4a74      	ldr	r2, [pc, #464]	; (80028b4 <main+0x240>)
 80026e4:	f7fe f902 	bl	80008ec <event_monitor_init>

	/* Initialize fifos */
	for (i = 0; i <= PATHSERVER_FD; i++)
 80026e8:	2300      	movs	r3, #0
 80026ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80026ec:	e00f      	b.n	800270e <main+0x9a>
		file_mknod(i, -1, files, S_IFIFO, &memory_pool, &event_monitor);
 80026ee:	f107 0310 	add.w	r3, r7, #16
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	f107 0308 	add.w	r3, r7, #8
 80026f8:	9301      	str	r3, [sp, #4]
 80026fa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80026fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002700:	4a6b      	ldr	r2, [pc, #428]	; (80028b0 <main+0x23c>)
 8002702:	2301      	movs	r3, #1
 8002704:	f7fe fcdc 	bl	80010c0 <file_mknod>

    /* Initialise event monitor */
    event_monitor_init(&event_monitor, events, ready_list);

	/* Initialize fifos */
	for (i = 0; i <= PATHSERVER_FD; i++)
 8002708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800270a:	3301      	adds	r3, #1
 800270c:	64bb      	str	r3, [r7, #72]	; 0x48
 800270e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002710:	2b0b      	cmp	r3, #11
 8002712:	ddec      	ble.n	80026ee <main+0x7a>
		file_mknod(i, -1, files, S_IFIFO, &memory_pool, &event_monitor);

    /* Register IRQ events, see INTR_LIMIT */
	for (i = -15; i < INTR_LIMIT - 15; i++)
 8002714:	f06f 030e 	mvn.w	r3, #14
 8002718:	64bb      	str	r3, [r7, #72]	; 0x48
 800271a:	e00c      	b.n	8002736 <main+0xc2>
	    event_monitor_register(&event_monitor, INTR_EVENT(i), intr_release, 0);
 800271c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800271e:	332f      	adds	r3, #47	; 0x2f
 8002720:	f107 0208 	add.w	r2, r7, #8
 8002724:	4610      	mov	r0, r2
 8002726:	4619      	mov	r1, r3
 8002728:	4a64      	ldr	r2, [pc, #400]	; (80028bc <main+0x248>)
 800272a:	2300      	movs	r3, #0
 800272c:	f7fe f94c 	bl	80009c8 <event_monitor_register>
	/* Initialize fifos */
	for (i = 0; i <= PATHSERVER_FD; i++)
		file_mknod(i, -1, files, S_IFIFO, &memory_pool, &event_monitor);

    /* Register IRQ events, see INTR_LIMIT */
	for (i = -15; i < INTR_LIMIT - 15; i++)
 8002730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002732:	3301      	adds	r3, #1
 8002734:	64bb      	str	r3, [r7, #72]	; 0x48
 8002736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002738:	2b5a      	cmp	r3, #90	; 0x5a
 800273a:	ddef      	ble.n	800271c <main+0xa8>
	    event_monitor_register(&event_monitor, INTR_EVENT(i), intr_release, 0);

	event_monitor_register(&event_monitor, TIME_EVENT, time_release, &tick_count);
 800273c:	f107 0208 	add.w	r2, r7, #8
 8002740:	1d3b      	adds	r3, r7, #4
 8002742:	4610      	mov	r0, r2
 8002744:	218a      	movs	r1, #138	; 0x8a
 8002746:	4a5e      	ldr	r2, [pc, #376]	; (80028c0 <main+0x24c>)
 8002748:	f7fe f93e 	bl	80009c8 <event_monitor_register>

    /* Initialize first thread */
	tasks[task_count].stack = (void*)init_task(stacks[task_count], &first);
 800274c:	4b5d      	ldr	r3, [pc, #372]	; (80028c4 <main+0x250>)
 800274e:	681c      	ldr	r4, [r3, #0]
 8002750:	4b5c      	ldr	r3, [pc, #368]	; (80028c4 <main+0x250>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	4613      	mov	r3, r2
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	4413      	add	r3, r2
 800275a:	025b      	lsls	r3, r3, #9
 800275c:	4a5a      	ldr	r2, [pc, #360]	; (80028c8 <main+0x254>)
 800275e:	4413      	add	r3, r2
 8002760:	4618      	mov	r0, r3
 8002762:	495a      	ldr	r1, [pc, #360]	; (80028cc <main+0x258>)
 8002764:	f002 fb92 	bl	8004e8c <init_task>
 8002768:	4602      	mov	r2, r0
 800276a:	4959      	ldr	r1, [pc, #356]	; (80028d0 <main+0x25c>)
 800276c:	4623      	mov	r3, r4
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	4423      	add	r3, r4
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	440b      	add	r3, r1
 8002776:	601a      	str	r2, [r3, #0]
	tasks[task_count].pid = 0;
 8002778:	4b52      	ldr	r3, [pc, #328]	; (80028c4 <main+0x250>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	4954      	ldr	r1, [pc, #336]	; (80028d0 <main+0x25c>)
 800277e:	4613      	mov	r3, r2
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	4413      	add	r3, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	440b      	add	r3, r1
 8002788:	3304      	adds	r3, #4
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]
	tasks[task_count].priority = PRIORITY_DEFAULT;
 800278e:	4b4d      	ldr	r3, [pc, #308]	; (80028c4 <main+0x250>)
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	494f      	ldr	r1, [pc, #316]	; (80028d0 <main+0x25c>)
 8002794:	4613      	mov	r3, r2
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	4413      	add	r3, r2
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	440b      	add	r3, r1
 800279e:	330c      	adds	r3, #12
 80027a0:	2214      	movs	r2, #20
 80027a2:	601a      	str	r2, [r3, #0]
	list_init(&tasks[task_count].list);
 80027a4:	4b47      	ldr	r3, [pc, #284]	; (80028c4 <main+0x250>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	4613      	mov	r3, r2
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	4413      	add	r3, r2
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	f103 0210 	add.w	r2, r3, #16
 80027b4:	4b46      	ldr	r3, [pc, #280]	; (80028d0 <main+0x25c>)
 80027b6:	4413      	add	r3, r2
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 fc87 	bl	80030cc <list_init>
	list_push(&ready_list[tasks[task_count].priority], &tasks[task_count].list);
 80027be:	4b41      	ldr	r3, [pc, #260]	; (80028c4 <main+0x250>)
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	4943      	ldr	r1, [pc, #268]	; (80028d0 <main+0x25c>)
 80027c4:	4613      	mov	r3, r2
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	4413      	add	r3, r2
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	440b      	add	r3, r1
 80027ce:	330c      	adds	r3, #12
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	00da      	lsls	r2, r3, #3
 80027d4:	4b37      	ldr	r3, [pc, #220]	; (80028b4 <main+0x240>)
 80027d6:	18d1      	adds	r1, r2, r3
 80027d8:	4b3a      	ldr	r3, [pc, #232]	; (80028c4 <main+0x250>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	4613      	mov	r3, r2
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	4413      	add	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	f103 0210 	add.w	r2, r3, #16
 80027e8:	4b39      	ldr	r3, [pc, #228]	; (80028d0 <main+0x25c>)
 80027ea:	4413      	add	r3, r2
 80027ec:	4608      	mov	r0, r1
 80027ee:	4619      	mov	r1, r3
 80027f0:	f000 fcc6 	bl	8003180 <list_push>
	task_count++;
 80027f4:	4b33      	ldr	r3, [pc, #204]	; (80028c4 <main+0x250>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	1c5a      	adds	r2, r3, #1
 80027fa:	4b32      	ldr	r3, [pc, #200]	; (80028c4 <main+0x250>)
 80027fc:	601a      	str	r2, [r3, #0]

	while (1) {
		tasks[current_task].stack = activate(tasks[current_task].stack);
 80027fe:	4934      	ldr	r1, [pc, #208]	; (80028d0 <main+0x25c>)
 8002800:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002802:	4613      	mov	r3, r2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	4413      	add	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	440b      	add	r3, r1
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f012 fd41 	bl	8015296 <activate>
 8002814:	4601      	mov	r1, r0
 8002816:	482e      	ldr	r0, [pc, #184]	; (80028d0 <main+0x25c>)
 8002818:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800281a:	4613      	mov	r3, r2
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	4413      	add	r3, r2
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	4403      	add	r3, r0
 8002824:	6019      	str	r1, [r3, #0]
		tasks[current_task].status = TASK_READY;
 8002826:	492a      	ldr	r1, [pc, #168]	; (80028d0 <main+0x25c>)
 8002828:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800282a:	4613      	mov	r3, r2
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	4413      	add	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	440b      	add	r3, r1
 8002834:	3308      	adds	r3, #8
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
		timeup = 0;
 800283a:	2300      	movs	r3, #0
 800283c:	647b      	str	r3, [r7, #68]	; 0x44

		switch (tasks[current_task].stack->r7) {
 800283e:	4924      	ldr	r1, [pc, #144]	; (80028d0 <main+0x25c>)
 8002840:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002842:	4613      	mov	r3, r2
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	4413      	add	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	440b      	add	r3, r1
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	3b01      	subs	r3, #1
 8002852:	2b09      	cmp	r3, #9
 8002854:	f200 83ae 	bhi.w	8002fb4 <main+0x940>
 8002858:	a201      	add	r2, pc, #4	; (adr r2, 8002860 <main+0x1ec>)
 800285a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800285e:	bf00      	nop
 8002860:	08002889 	.word	0x08002889
 8002864:	08002a21 	.word	0x08002a21
 8002868:	08002a37 	.word	0x08002a37
 800286c:	08002b21 	.word	0x08002b21
 8002870:	08002bf1 	.word	0x08002bf1
 8002874:	08002c53 	.word	0x08002c53
 8002878:	08002ce5 	.word	0x08002ce5
 800287c:	08002e05 	.word	0x08002e05
 8002880:	08002e65 	.word	0x08002e65
 8002884:	08002ed7 	.word	0x08002ed7
		case 0x1: /* fork */
			if (task_count == TASK_LIMIT) {
 8002888:	4b0e      	ldr	r3, [pc, #56]	; (80028c4 <main+0x250>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b08      	cmp	r3, #8
 800288e:	d121      	bne.n	80028d4 <main+0x260>
				/* Cannot create a new task, return error */
				tasks[current_task].stack->r0 = -1;
 8002890:	490f      	ldr	r1, [pc, #60]	; (80028d0 <main+0x25c>)
 8002892:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002894:	4613      	mov	r3, r2
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	4413      	add	r3, r2
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	440b      	add	r3, r1
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028a4:	629a      	str	r2, [r3, #40]	; 0x28
				list_init(&tasks[task_count].list);
				list_push(&ready_list[tasks[task_count].priority], &tasks[task_count].list);
				/* There is now one more task */
				task_count++;
			}
			break;
 80028a6:	e3c3      	b.n	8003030 <main+0x9bc>
 80028a8:	000afc80 	.word	0x000afc80
 80028ac:	20003864 	.word	0x20003864
 80028b0:	20004064 	.word	0x20004064
 80028b4:	20004164 	.word	0x20004164
 80028b8:	200042a4 	.word	0x200042a4
 80028bc:	08002625 	.word	0x08002625
 80028c0:	08002641 	.word	0x08002641
 80028c4:	2000008c 	.word	0x2000008c
 80028c8:	20000864 	.word	0x20000864
 80028cc:	08002561 	.word	0x08002561
 80028d0:	200007a4 	.word	0x200007a4
				/* Cannot create a new task, return error */
				tasks[current_task].stack->r0 = -1;
			}
			else {
				/* Compute how much of the stack is used */
				size_t used = stacks[current_task] + STACK_SIZE
 80028d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028d6:	1c5a      	adds	r2, r3, #1
 80028d8:	4613      	mov	r3, r2
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	4413      	add	r3, r2
 80028de:	025b      	lsls	r3, r3, #9
 80028e0:	4a89      	ldr	r2, [pc, #548]	; (8002b08 <main+0x494>)
 80028e2:	4413      	add	r3, r2
					      - (unsigned int*)tasks[current_task].stack;
 80028e4:	4619      	mov	r1, r3
 80028e6:	4889      	ldr	r0, [pc, #548]	; (8002b0c <main+0x498>)
 80028e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028ea:	4613      	mov	r3, r2
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	4413      	add	r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	4403      	add	r3, r0
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	1acb      	subs	r3, r1, r3
 80028f8:	109b      	asrs	r3, r3, #2
				/* Cannot create a new task, return error */
				tasks[current_task].stack->r0 = -1;
			}
			else {
				/* Compute how much of the stack is used */
				size_t used = stacks[current_task] + STACK_SIZE
 80028fa:	643b      	str	r3, [r7, #64]	; 0x40
					      - (unsigned int*)tasks[current_task].stack;
				/* New stack is END - used */
				tasks[task_count].stack = (void*)(stacks[task_count] + STACK_SIZE - used);
 80028fc:	4b84      	ldr	r3, [pc, #528]	; (8002b10 <main+0x49c>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	4b83      	ldr	r3, [pc, #524]	; (8002b10 <main+0x49c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	1c59      	adds	r1, r3, #1
 8002906:	460b      	mov	r3, r1
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	440b      	add	r3, r1
 800290c:	025b      	lsls	r3, r3, #9
 800290e:	497e      	ldr	r1, [pc, #504]	; (8002b08 <main+0x494>)
 8002910:	4419      	add	r1, r3
 8002912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	425b      	negs	r3, r3
 8002918:	4419      	add	r1, r3
 800291a:	487c      	ldr	r0, [pc, #496]	; (8002b0c <main+0x498>)
 800291c:	4613      	mov	r3, r2
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	4413      	add	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	4403      	add	r3, r0
 8002926:	6019      	str	r1, [r3, #0]
				/* Copy only the used part of the stack */
				memcpy(tasks[task_count].stack, tasks[current_task].stack,
 8002928:	4b79      	ldr	r3, [pc, #484]	; (8002b10 <main+0x49c>)
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	4977      	ldr	r1, [pc, #476]	; (8002b0c <main+0x498>)
 800292e:	4613      	mov	r3, r2
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	4413      	add	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	440b      	add	r3, r1
 8002938:	6819      	ldr	r1, [r3, #0]
 800293a:	4874      	ldr	r0, [pc, #464]	; (8002b0c <main+0x498>)
 800293c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800293e:	4613      	mov	r3, r2
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	4413      	add	r3, r2
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	4403      	add	r3, r0
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4608      	mov	r0, r1
 8002950:	4611      	mov	r1, r2
 8002952:	461a      	mov	r2, r3
 8002954:	f012 fcb4 	bl	80152c0 <memcpy>
				       used * sizeof(unsigned int));
				/* Set PID */
				tasks[task_count].pid = task_count;
 8002958:	4b6d      	ldr	r3, [pc, #436]	; (8002b10 <main+0x49c>)
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	4b6c      	ldr	r3, [pc, #432]	; (8002b10 <main+0x49c>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4619      	mov	r1, r3
 8002962:	486a      	ldr	r0, [pc, #424]	; (8002b0c <main+0x498>)
 8002964:	4613      	mov	r3, r2
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	4413      	add	r3, r2
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	4403      	add	r3, r0
 800296e:	3304      	adds	r3, #4
 8002970:	6019      	str	r1, [r3, #0]
				/* Set priority, inherited from forked task */
				tasks[task_count].priority = tasks[current_task].priority;
 8002972:	4b67      	ldr	r3, [pc, #412]	; (8002b10 <main+0x49c>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	4865      	ldr	r0, [pc, #404]	; (8002b0c <main+0x498>)
 8002978:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800297a:	460b      	mov	r3, r1
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	440b      	add	r3, r1
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	4403      	add	r3, r0
 8002984:	330c      	adds	r3, #12
 8002986:	6819      	ldr	r1, [r3, #0]
 8002988:	4860      	ldr	r0, [pc, #384]	; (8002b0c <main+0x498>)
 800298a:	4613      	mov	r3, r2
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	4413      	add	r3, r2
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	4403      	add	r3, r0
 8002994:	330c      	adds	r3, #12
 8002996:	6019      	str	r1, [r3, #0]
				/* Set return values in each process */
				tasks[current_task].stack->r0 = task_count;
 8002998:	495c      	ldr	r1, [pc, #368]	; (8002b0c <main+0x498>)
 800299a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800299c:	4613      	mov	r3, r2
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	4413      	add	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	440b      	add	r3, r1
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a59      	ldr	r2, [pc, #356]	; (8002b10 <main+0x49c>)
 80029aa:	6812      	ldr	r2, [r2, #0]
 80029ac:	629a      	str	r2, [r3, #40]	; 0x28
				tasks[task_count].stack->r0 = 0;
 80029ae:	4b58      	ldr	r3, [pc, #352]	; (8002b10 <main+0x49c>)
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	4956      	ldr	r1, [pc, #344]	; (8002b0c <main+0x498>)
 80029b4:	4613      	mov	r3, r2
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	4413      	add	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	440b      	add	r3, r1
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2200      	movs	r2, #0
 80029c2:	629a      	str	r2, [r3, #40]	; 0x28
				list_init(&tasks[task_count].list);
 80029c4:	4b52      	ldr	r3, [pc, #328]	; (8002b10 <main+0x49c>)
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	4613      	mov	r3, r2
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	4413      	add	r3, r2
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	f103 0210 	add.w	r2, r3, #16
 80029d4:	4b4d      	ldr	r3, [pc, #308]	; (8002b0c <main+0x498>)
 80029d6:	4413      	add	r3, r2
 80029d8:	4618      	mov	r0, r3
 80029da:	f000 fb77 	bl	80030cc <list_init>
				list_push(&ready_list[tasks[task_count].priority], &tasks[task_count].list);
 80029de:	4b4c      	ldr	r3, [pc, #304]	; (8002b10 <main+0x49c>)
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	494a      	ldr	r1, [pc, #296]	; (8002b0c <main+0x498>)
 80029e4:	4613      	mov	r3, r2
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	4413      	add	r3, r2
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	440b      	add	r3, r1
 80029ee:	330c      	adds	r3, #12
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	00da      	lsls	r2, r3, #3
 80029f4:	4b47      	ldr	r3, [pc, #284]	; (8002b14 <main+0x4a0>)
 80029f6:	18d1      	adds	r1, r2, r3
 80029f8:	4b45      	ldr	r3, [pc, #276]	; (8002b10 <main+0x49c>)
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	4613      	mov	r3, r2
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	4413      	add	r3, r2
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	f103 0210 	add.w	r2, r3, #16
 8002a08:	4b40      	ldr	r3, [pc, #256]	; (8002b0c <main+0x498>)
 8002a0a:	4413      	add	r3, r2
 8002a0c:	4608      	mov	r0, r1
 8002a0e:	4619      	mov	r1, r3
 8002a10:	f000 fbb6 	bl	8003180 <list_push>
				/* There is now one more task */
				task_count++;
 8002a14:	4b3e      	ldr	r3, [pc, #248]	; (8002b10 <main+0x49c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	1c5a      	adds	r2, r3, #1
 8002a1a:	4b3d      	ldr	r3, [pc, #244]	; (8002b10 <main+0x49c>)
 8002a1c:	601a      	str	r2, [r3, #0]
			}
			break;
 8002a1e:	e307      	b.n	8003030 <main+0x9bc>
		case 0x2: /* getpid */
			tasks[current_task].stack->r0 = current_task;
 8002a20:	493a      	ldr	r1, [pc, #232]	; (8002b0c <main+0x498>)
 8002a22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a24:	4613      	mov	r3, r2
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	4413      	add	r3, r2
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	440b      	add	r3, r1
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a32:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8002a34:	e2fc      	b.n	8003030 <main+0x9bc>
		case 0x3: /* write */
		    {
		        /* Check fd is valid */
		        int fd = tasks[current_task].stack->r0;
 8002a36:	4935      	ldr	r1, [pc, #212]	; (8002b0c <main+0x498>)
 8002a38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	4413      	add	r3, r2
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	440b      	add	r3, r1
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a48:	63fb      	str	r3, [r7, #60]	; 0x3c
		        if (fd < FILE_LIMIT && files[fd]) {
 8002a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a4c:	2b1f      	cmp	r3, #31
 8002a4e:	dc4e      	bgt.n	8002aee <main+0x47a>
 8002a50:	4b31      	ldr	r3, [pc, #196]	; (8002b18 <main+0x4a4>)
 8002a52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d048      	beq.n	8002aee <main+0x47a>
		            /* Prepare file request, store reference in r0 */
		            requests[current_task].task = &tasks[current_task];
 8002a5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a5e:	4613      	mov	r3, r2
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	4413      	add	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	4a29      	ldr	r2, [pc, #164]	; (8002b0c <main+0x498>)
 8002a68:	441a      	add	r2, r3
 8002a6a:	492c      	ldr	r1, [pc, #176]	; (8002b1c <main+0x4a8>)
 8002a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	440b      	add	r3, r1
 8002a72:	601a      	str	r2, [r3, #0]
		            requests[current_task].buf =
		                (void*)tasks[current_task].stack->r1;
 8002a74:	4925      	ldr	r1, [pc, #148]	; (8002b0c <main+0x498>)
 8002a76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a78:	4613      	mov	r3, r2
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	4413      	add	r3, r2
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	440b      	add	r3, r1
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a86:	461a      	mov	r2, r3
		        /* Check fd is valid */
		        int fd = tasks[current_task].stack->r0;
		        if (fd < FILE_LIMIT && files[fd]) {
		            /* Prepare file request, store reference in r0 */
		            requests[current_task].task = &tasks[current_task];
		            requests[current_task].buf =
 8002a88:	4924      	ldr	r1, [pc, #144]	; (8002b1c <main+0x4a8>)
 8002a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a8c:	011b      	lsls	r3, r3, #4
 8002a8e:	440b      	add	r3, r1
 8002a90:	3304      	adds	r3, #4
 8002a92:	601a      	str	r2, [r3, #0]
		                (void*)tasks[current_task].stack->r1;
		            requests[current_task].size = tasks[current_task].stack->r2;
 8002a94:	491d      	ldr	r1, [pc, #116]	; (8002b0c <main+0x498>)
 8002a96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a98:	4613      	mov	r3, r2
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	4413      	add	r3, r2
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	440b      	add	r3, r1
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	491c      	ldr	r1, [pc, #112]	; (8002b1c <main+0x4a8>)
 8002aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	440b      	add	r3, r1
 8002ab0:	3308      	adds	r3, #8
 8002ab2:	601a      	str	r2, [r3, #0]
		            tasks[current_task].stack->r0 =
 8002ab4:	4915      	ldr	r1, [pc, #84]	; (8002b0c <main+0x498>)
 8002ab6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ab8:	4613      	mov	r3, r2
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	4413      	add	r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	440b      	add	r3, r1
 8002ac2:	681b      	ldr	r3, [r3, #0]
		                (int)&requests[current_task];
 8002ac4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ac6:	0111      	lsls	r1, r2, #4
 8002ac8:	4a14      	ldr	r2, [pc, #80]	; (8002b1c <main+0x4a8>)
 8002aca:	440a      	add	r2, r1
		            /* Prepare file request, store reference in r0 */
		            requests[current_task].task = &tasks[current_task];
		            requests[current_task].buf =
		                (void*)tasks[current_task].stack->r1;
		            requests[current_task].size = tasks[current_task].stack->r2;
		            tasks[current_task].stack->r0 =
 8002acc:	629a      	str	r2, [r3, #40]	; 0x28
		                (int)&requests[current_task];

                    /* Write */
			        file_write(files[fd], &requests[current_task],
 8002ace:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <main+0x4a4>)
 8002ad0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ad2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ad8:	011a      	lsls	r2, r3, #4
 8002ada:	4b10      	ldr	r3, [pc, #64]	; (8002b1c <main+0x4a8>)
 8002adc:	441a      	add	r2, r3
 8002ade:	f107 0308 	add.w	r3, r7, #8
 8002ae2:	4608      	mov	r0, r1
 8002ae4:	4611      	mov	r1, r2
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	f7fe faa0 	bl	800102c <file_write>
			                   &event_monitor);
			    }
			    else {
			        tasks[current_task].stack->r0 = -1;
			    }
			} break;
 8002aec:	e2a0      	b.n	8003030 <main+0x9bc>
                    /* Write */
			        file_write(files[fd], &requests[current_task],
			                   &event_monitor);
			    }
			    else {
			        tasks[current_task].stack->r0 = -1;
 8002aee:	4907      	ldr	r1, [pc, #28]	; (8002b0c <main+0x498>)
 8002af0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002af2:	4613      	mov	r3, r2
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	4413      	add	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	440b      	add	r3, r1
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b02:	629a      	str	r2, [r3, #40]	; 0x28
			    }
			} break;
 8002b04:	e294      	b.n	8003030 <main+0x9bc>
 8002b06:	bf00      	nop
 8002b08:	20000864 	.word	0x20000864
 8002b0c:	200007a4 	.word	0x200007a4
 8002b10:	2000008c 	.word	0x2000008c
 8002b14:	20004164 	.word	0x20004164
 8002b18:	20004064 	.word	0x20004064
 8002b1c:	200040e4 	.word	0x200040e4
		case 0x4: /* read */
            {
		        /* Check fd is valid */
		        int fd = tasks[current_task].stack->r0;
 8002b20:	4998      	ldr	r1, [pc, #608]	; (8002d84 <main+0x710>)
 8002b22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b24:	4613      	mov	r3, r2
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	4413      	add	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	440b      	add	r3, r1
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b32:	63bb      	str	r3, [r7, #56]	; 0x38
		        if (fd < FILE_LIMIT && files[fd]) {
 8002b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b36:	2b1f      	cmp	r3, #31
 8002b38:	dc4e      	bgt.n	8002bd8 <main+0x564>
 8002b3a:	4b93      	ldr	r3, [pc, #588]	; (8002d88 <main+0x714>)
 8002b3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d048      	beq.n	8002bd8 <main+0x564>
		            /* Prepare file request, store reference in r0 */
		            requests[current_task].task = &tasks[current_task];
 8002b46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b48:	4613      	mov	r3, r2
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	4413      	add	r3, r2
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	4a8c      	ldr	r2, [pc, #560]	; (8002d84 <main+0x710>)
 8002b52:	441a      	add	r2, r3
 8002b54:	498d      	ldr	r1, [pc, #564]	; (8002d8c <main+0x718>)
 8002b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	440b      	add	r3, r1
 8002b5c:	601a      	str	r2, [r3, #0]
		            requests[current_task].buf =
		                (void*)tasks[current_task].stack->r1;
 8002b5e:	4989      	ldr	r1, [pc, #548]	; (8002d84 <main+0x710>)
 8002b60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b62:	4613      	mov	r3, r2
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	4413      	add	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	440b      	add	r3, r1
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b70:	461a      	mov	r2, r3
		        /* Check fd is valid */
		        int fd = tasks[current_task].stack->r0;
		        if (fd < FILE_LIMIT && files[fd]) {
		            /* Prepare file request, store reference in r0 */
		            requests[current_task].task = &tasks[current_task];
		            requests[current_task].buf =
 8002b72:	4986      	ldr	r1, [pc, #536]	; (8002d8c <main+0x718>)
 8002b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b76:	011b      	lsls	r3, r3, #4
 8002b78:	440b      	add	r3, r1
 8002b7a:	3304      	adds	r3, #4
 8002b7c:	601a      	str	r2, [r3, #0]
		                (void*)tasks[current_task].stack->r1;
		            requests[current_task].size = tasks[current_task].stack->r2;
 8002b7e:	4981      	ldr	r1, [pc, #516]	; (8002d84 <main+0x710>)
 8002b80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b82:	4613      	mov	r3, r2
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	4413      	add	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	440b      	add	r3, r1
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b90:	461a      	mov	r2, r3
 8002b92:	497e      	ldr	r1, [pc, #504]	; (8002d8c <main+0x718>)
 8002b94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	440b      	add	r3, r1
 8002b9a:	3308      	adds	r3, #8
 8002b9c:	601a      	str	r2, [r3, #0]
		            tasks[current_task].stack->r0 =
 8002b9e:	4979      	ldr	r1, [pc, #484]	; (8002d84 <main+0x710>)
 8002ba0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	4413      	add	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	440b      	add	r3, r1
 8002bac:	681b      	ldr	r3, [r3, #0]
		                (int)&requests[current_task];
 8002bae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bb0:	0111      	lsls	r1, r2, #4
 8002bb2:	4a76      	ldr	r2, [pc, #472]	; (8002d8c <main+0x718>)
 8002bb4:	440a      	add	r2, r1
		            /* Prepare file request, store reference in r0 */
		            requests[current_task].task = &tasks[current_task];
		            requests[current_task].buf =
		                (void*)tasks[current_task].stack->r1;
		            requests[current_task].size = tasks[current_task].stack->r2;
		            tasks[current_task].stack->r0 =
 8002bb6:	629a      	str	r2, [r3, #40]	; 0x28
		                (int)&requests[current_task];

                    /* Read */
			        file_read(files[fd], &requests[current_task],
 8002bb8:	4b73      	ldr	r3, [pc, #460]	; (8002d88 <main+0x714>)
 8002bba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bc2:	011a      	lsls	r2, r3, #4
 8002bc4:	4b71      	ldr	r3, [pc, #452]	; (8002d8c <main+0x718>)
 8002bc6:	441a      	add	r2, r3
 8002bc8:	f107 0308 	add.w	r3, r7, #8
 8002bcc:	4608      	mov	r0, r1
 8002bce:	4611      	mov	r1, r2
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	f7fe f9e1 	bl	8000f98 <file_read>
			                  &event_monitor);
			    }
			    else {
			        tasks[current_task].stack->r0 = -1;
			    }
			} break;
 8002bd6:	e22b      	b.n	8003030 <main+0x9bc>
                    /* Read */
			        file_read(files[fd], &requests[current_task],
			                  &event_monitor);
			    }
			    else {
			        tasks[current_task].stack->r0 = -1;
 8002bd8:	496a      	ldr	r1, [pc, #424]	; (8002d84 <main+0x710>)
 8002bda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bdc:	4613      	mov	r3, r2
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	4413      	add	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	440b      	add	r3, r1
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bec:	629a      	str	r2, [r3, #40]	; 0x28
			    }
			} break;
 8002bee:	e21f      	b.n	8003030 <main+0x9bc>
		case 0x5: /* interrupt_wait */
			/* Enable interrupt */
			NVIC_EnableIRQ(tasks[current_task].stack->r0);
 8002bf0:	4964      	ldr	r1, [pc, #400]	; (8002d84 <main+0x710>)
 8002bf2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	4413      	add	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	440b      	add	r3, r1
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	b25b      	sxtb	r3, r3
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fe fb06 	bl	8001218 <NVIC_EnableIRQ>
			/* Block task waiting for interrupt to happen */
			event_monitor_block(&event_monitor,
			                    INTR_EVENT(tasks[current_task].stack->r0),
 8002c0c:	495d      	ldr	r1, [pc, #372]	; (8002d84 <main+0x710>)
 8002c0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c10:	4613      	mov	r3, r2
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	4413      	add	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	440b      	add	r3, r1
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1e:	332f      	adds	r3, #47	; 0x2f
			} break;
		case 0x5: /* interrupt_wait */
			/* Enable interrupt */
			NVIC_EnableIRQ(tasks[current_task].stack->r0);
			/* Block task waiting for interrupt to happen */
			event_monitor_block(&event_monitor,
 8002c20:	4619      	mov	r1, r3
 8002c22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c24:	4613      	mov	r3, r2
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	4413      	add	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4a55      	ldr	r2, [pc, #340]	; (8002d84 <main+0x710>)
 8002c2e:	4413      	add	r3, r2
 8002c30:	f107 0208 	add.w	r2, r7, #8
 8002c34:	4610      	mov	r0, r2
 8002c36:	461a      	mov	r2, r3
 8002c38:	f7fd fef0 	bl	8000a1c <event_monitor_block>
			                    INTR_EVENT(tasks[current_task].stack->r0),
			                    &tasks[current_task]);
			tasks[current_task].status = TASK_WAIT_INTR;
 8002c3c:	4951      	ldr	r1, [pc, #324]	; (8002d84 <main+0x710>)
 8002c3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c40:	4613      	mov	r3, r2
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	4413      	add	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	440b      	add	r3, r1
 8002c4a:	3308      	adds	r3, #8
 8002c4c:	2203      	movs	r2, #3
 8002c4e:	601a      	str	r2, [r3, #0]
			break;
 8002c50:	e1ee      	b.n	8003030 <main+0x9bc>
		case 0x6: /* getpriority */
			{
				int who = tasks[current_task].stack->r0;
 8002c52:	494c      	ldr	r1, [pc, #304]	; (8002d84 <main+0x710>)
 8002c54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c56:	4613      	mov	r3, r2
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	4413      	add	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	440b      	add	r3, r1
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c64:	637b      	str	r3, [r7, #52]	; 0x34
				if (who > 0 && who < (int)task_count)
 8002c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	dd18      	ble.n	8002c9e <main+0x62a>
 8002c6c:	4b48      	ldr	r3, [pc, #288]	; (8002d90 <main+0x71c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	461a      	mov	r2, r3
 8002c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c74:	429a      	cmp	r2, r3
 8002c76:	dd12      	ble.n	8002c9e <main+0x62a>
					tasks[current_task].stack->r0 = tasks[who].priority;
 8002c78:	4942      	ldr	r1, [pc, #264]	; (8002d84 <main+0x710>)
 8002c7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	4413      	add	r3, r2
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	440b      	add	r3, r1
 8002c86:	6819      	ldr	r1, [r3, #0]
 8002c88:	483e      	ldr	r0, [pc, #248]	; (8002d84 <main+0x710>)
 8002c8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	4413      	add	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4403      	add	r3, r0
 8002c96:	330c      	adds	r3, #12
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	628b      	str	r3, [r1, #40]	; 0x28
 8002c9c:	e021      	b.n	8002ce2 <main+0x66e>
				else if (who == 0)
 8002c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d112      	bne.n	8002cca <main+0x656>
					tasks[current_task].stack->r0 = tasks[current_task].priority;
 8002ca4:	4937      	ldr	r1, [pc, #220]	; (8002d84 <main+0x710>)
 8002ca6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ca8:	4613      	mov	r3, r2
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	4413      	add	r3, r2
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	440b      	add	r3, r1
 8002cb2:	6819      	ldr	r1, [r3, #0]
 8002cb4:	4833      	ldr	r0, [pc, #204]	; (8002d84 <main+0x710>)
 8002cb6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cb8:	4613      	mov	r3, r2
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	4413      	add	r3, r2
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	4403      	add	r3, r0
 8002cc2:	330c      	adds	r3, #12
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	628b      	str	r3, [r1, #40]	; 0x28
 8002cc8:	e00b      	b.n	8002ce2 <main+0x66e>
				else
					tasks[current_task].stack->r0 = -1;
 8002cca:	492e      	ldr	r1, [pc, #184]	; (8002d84 <main+0x710>)
 8002ccc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cce:	4613      	mov	r3, r2
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	4413      	add	r3, r2
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	440b      	add	r3, r1
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cde:	629a      	str	r2, [r3, #40]	; 0x28
			} break;
 8002ce0:	e1a6      	b.n	8003030 <main+0x9bc>
 8002ce2:	e1a5      	b.n	8003030 <main+0x9bc>
		case 0x7: /* setpriority */
			{
				int who = tasks[current_task].stack->r0;
 8002ce4:	4927      	ldr	r1, [pc, #156]	; (8002d84 <main+0x710>)
 8002ce6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ce8:	4613      	mov	r3, r2
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	4413      	add	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	440b      	add	r3, r1
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf6:	633b      	str	r3, [r7, #48]	; 0x30
				int value = tasks[current_task].stack->r1;
 8002cf8:	4922      	ldr	r1, [pc, #136]	; (8002d84 <main+0x710>)
 8002cfa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	4413      	add	r3, r2
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	440b      	add	r3, r1
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
				value = (value < 0) ? 0 : ((value > PRIORITY_LIMIT) ? PRIORITY_LIMIT : value);
 8002d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	db04      	blt.n	8002d1c <main+0x6a8>
 8002d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d14:	2b27      	cmp	r3, #39	; 0x27
 8002d16:	bfa8      	it	ge
 8002d18:	2327      	movge	r3, #39	; 0x27
 8002d1a:	e000      	b.n	8002d1e <main+0x6aa>
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
				if (who > 0 && who < (int)task_count) {
 8002d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	dd38      	ble.n	8002d98 <main+0x724>
 8002d26:	4b1a      	ldr	r3, [pc, #104]	; (8002d90 <main+0x71c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	dd32      	ble.n	8002d98 <main+0x724>
					tasks[who].priority = value;
 8002d32:	4914      	ldr	r1, [pc, #80]	; (8002d84 <main+0x710>)
 8002d34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d36:	4613      	mov	r3, r2
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	4413      	add	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	440b      	add	r3, r1
 8002d40:	330c      	adds	r3, #12
 8002d42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d44:	601a      	str	r2, [r3, #0]
					if (tasks[who].status == TASK_READY)
 8002d46:	490f      	ldr	r1, [pc, #60]	; (8002d84 <main+0x710>)
 8002d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	4413      	add	r3, r2
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	440b      	add	r3, r1
 8002d54:	3308      	adds	r3, #8
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d111      	bne.n	8002d80 <main+0x70c>
					    list_push(&ready_list[value], &tasks[who].list);
 8002d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5e:	00da      	lsls	r2, r3, #3
 8002d60:	4b0c      	ldr	r3, [pc, #48]	; (8002d94 <main+0x720>)
 8002d62:	18d1      	adds	r1, r2, r3
 8002d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d66:	4613      	mov	r3, r2
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	4413      	add	r3, r2
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	f103 0210 	add.w	r2, r3, #16
 8002d72:	4b04      	ldr	r3, [pc, #16]	; (8002d84 <main+0x710>)
 8002d74:	4413      	add	r3, r2
 8002d76:	4608      	mov	r0, r1
 8002d78:	4619      	mov	r1, r3
 8002d7a:	f000 fa01 	bl	8003180 <list_push>
				int who = tasks[current_task].stack->r0;
				int value = tasks[current_task].stack->r1;
				value = (value < 0) ? 0 : ((value > PRIORITY_LIMIT) ? PRIORITY_LIMIT : value);
				if (who > 0 && who < (int)task_count) {
					tasks[who].priority = value;
					if (tasks[who].status == TASK_READY)
 8002d7e:	e036      	b.n	8002dee <main+0x77a>
 8002d80:	e035      	b.n	8002dee <main+0x77a>
 8002d82:	bf00      	nop
 8002d84:	200007a4 	.word	0x200007a4
 8002d88:	20004064 	.word	0x20004064
 8002d8c:	200040e4 	.word	0x200040e4
 8002d90:	2000008c 	.word	0x2000008c
 8002d94:	20004164 	.word	0x20004164
					    list_push(&ready_list[value], &tasks[who].list);
				}
				else if (who == 0) {
 8002d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d11b      	bne.n	8002dd6 <main+0x762>
					tasks[current_task].priority = value;
 8002d9e:	4999      	ldr	r1, [pc, #612]	; (8003004 <main+0x990>)
 8002da0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002da2:	4613      	mov	r3, r2
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	4413      	add	r3, r2
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	440b      	add	r3, r1
 8002dac:	330c      	adds	r3, #12
 8002dae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002db0:	601a      	str	r2, [r3, #0]
				    list_unshift(&ready_list[value], &tasks[current_task].list);
 8002db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db4:	00da      	lsls	r2, r3, #3
 8002db6:	4b94      	ldr	r3, [pc, #592]	; (8003008 <main+0x994>)
 8002db8:	18d1      	adds	r1, r2, r3
 8002dba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	4413      	add	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	f103 0210 	add.w	r2, r3, #16
 8002dc8:	4b8e      	ldr	r3, [pc, #568]	; (8003004 <main+0x990>)
 8002dca:	4413      	add	r3, r2
 8002dcc:	4608      	mov	r0, r1
 8002dce:	4619      	mov	r1, r3
 8002dd0:	f000 f9b6 	bl	8003140 <list_unshift>
 8002dd4:	e00b      	b.n	8002dee <main+0x77a>
				}
				else {
					tasks[current_task].stack->r0 = -1;
 8002dd6:	498b      	ldr	r1, [pc, #556]	; (8003004 <main+0x990>)
 8002dd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dda:	4613      	mov	r3, r2
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	4413      	add	r3, r2
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	440b      	add	r3, r1
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002dea:	629a      	str	r2, [r3, #40]	; 0x28
					break;
 8002dec:	e120      	b.n	8003030 <main+0x9bc>
				}
				tasks[current_task].stack->r0 = 0;
 8002dee:	4985      	ldr	r1, [pc, #532]	; (8003004 <main+0x990>)
 8002df0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002df2:	4613      	mov	r3, r2
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	4413      	add	r3, r2
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	440b      	add	r3, r1
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	629a      	str	r2, [r3, #40]	; 0x28
			} break;
 8002e02:	e115      	b.n	8003030 <main+0x9bc>
		case 0x8: /* mknod */
			tasks[current_task].stack->r0 =
 8002e04:	497f      	ldr	r1, [pc, #508]	; (8003004 <main+0x990>)
 8002e06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e08:	4613      	mov	r3, r2
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	4413      	add	r3, r2
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	440b      	add	r3, r1
 8002e12:	681c      	ldr	r4, [r3, #0]
				file_mknod(tasks[current_task].stack->r0,
 8002e14:	497b      	ldr	r1, [pc, #492]	; (8003004 <main+0x990>)
 8002e16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e18:	4613      	mov	r3, r2
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	4413      	add	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	440b      	add	r3, r1
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e26:	4618      	mov	r0, r3
 8002e28:	4976      	ldr	r1, [pc, #472]	; (8003004 <main+0x990>)
 8002e2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	4413      	add	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	440b      	add	r3, r1
 8002e36:	3304      	adds	r3, #4
 8002e38:	6819      	ldr	r1, [r3, #0]
				           tasks[current_task].pid,
				           files,
					       tasks[current_task].stack->r2,
 8002e3a:	4d72      	ldr	r5, [pc, #456]	; (8003004 <main+0x990>)
 8002e3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e3e:	4613      	mov	r3, r2
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	4413      	add	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	442b      	add	r3, r5
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				}
				tasks[current_task].stack->r0 = 0;
			} break;
		case 0x8: /* mknod */
			tasks[current_task].stack->r0 =
				file_mknod(tasks[current_task].stack->r0,
 8002e4c:	f107 0210 	add.w	r2, r7, #16
 8002e50:	9200      	str	r2, [sp, #0]
 8002e52:	f107 0208 	add.w	r2, r7, #8
 8002e56:	9201      	str	r2, [sp, #4]
 8002e58:	4a6c      	ldr	r2, [pc, #432]	; (800300c <main+0x998>)
 8002e5a:	f7fe f931 	bl	80010c0 <file_mknod>
 8002e5e:	4603      	mov	r3, r0
					break;
				}
				tasks[current_task].stack->r0 = 0;
			} break;
		case 0x8: /* mknod */
			tasks[current_task].stack->r0 =
 8002e60:	62a3      	str	r3, [r4, #40]	; 0x28
				           tasks[current_task].pid,
				           files,
					       tasks[current_task].stack->r2,
					       &memory_pool,
					       &event_monitor);
			break;
 8002e62:	e0e5      	b.n	8003030 <main+0x9bc>
		case 0x9: /* sleep */
			if (tasks[current_task].stack->r0 != 0) {
 8002e64:	4967      	ldr	r1, [pc, #412]	; (8003004 <main+0x990>)
 8002e66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e68:	4613      	mov	r3, r2
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	4413      	add	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	440b      	add	r3, r1
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d02c      	beq.n	8002ed4 <main+0x860>
				tasks[current_task].stack->r0 += tick_count;
 8002e7a:	4962      	ldr	r1, [pc, #392]	; (8003004 <main+0x990>)
 8002e7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e7e:	4613      	mov	r3, r2
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	4413      	add	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	440b      	add	r3, r1
 8002e88:	6819      	ldr	r1, [r3, #0]
 8002e8a:	485e      	ldr	r0, [pc, #376]	; (8003004 <main+0x990>)
 8002e8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e8e:	4613      	mov	r3, r2
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	4413      	add	r3, r2
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	4403      	add	r3, r0
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	628b      	str	r3, [r1, #40]	; 0x28
				tasks[current_task].status = TASK_WAIT_TIME;
 8002ea2:	4958      	ldr	r1, [pc, #352]	; (8003004 <main+0x990>)
 8002ea4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	4413      	add	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	440b      	add	r3, r1
 8002eb0:	3308      	adds	r3, #8
 8002eb2:	2204      	movs	r2, #4
 8002eb4:	601a      	str	r2, [r3, #0]
			    event_monitor_block(&event_monitor, TIME_EVENT,
 8002eb6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002eb8:	4613      	mov	r3, r2
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	4413      	add	r3, r2
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	4a50      	ldr	r2, [pc, #320]	; (8003004 <main+0x990>)
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f107 0208 	add.w	r2, r7, #8
 8002ec8:	4610      	mov	r0, r2
 8002eca:	218a      	movs	r1, #138	; 0x8a
 8002ecc:	461a      	mov	r2, r3
 8002ece:	f7fd fda5 	bl	8000a1c <event_monitor_block>
			                        &tasks[current_task]);
			}
			break;
 8002ed2:	e0ad      	b.n	8003030 <main+0x9bc>
 8002ed4:	e0ac      	b.n	8003030 <main+0x9bc>
		case 0xa: /* lseek */
            {
		        /* Check fd is valid */
		        int fd = tasks[current_task].stack->r0;
 8002ed6:	494b      	ldr	r1, [pc, #300]	; (8003004 <main+0x990>)
 8002ed8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002eda:	4613      	mov	r3, r2
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	4413      	add	r3, r2
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	440b      	add	r3, r1
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee8:	62bb      	str	r3, [r7, #40]	; 0x28
		        if (fd < FILE_LIMIT && files[fd]) {
 8002eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eec:	2b1f      	cmp	r3, #31
 8002eee:	dc55      	bgt.n	8002f9c <main+0x928>
 8002ef0:	4b46      	ldr	r3, [pc, #280]	; (800300c <main+0x998>)
 8002ef2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d04f      	beq.n	8002f9c <main+0x928>
		            /* Prepare file request, store reference in r0 */
		            requests[current_task].task = &tasks[current_task];
 8002efc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002efe:	4613      	mov	r3, r2
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	4413      	add	r3, r2
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	4a3f      	ldr	r2, [pc, #252]	; (8003004 <main+0x990>)
 8002f08:	441a      	add	r2, r3
 8002f0a:	4941      	ldr	r1, [pc, #260]	; (8003010 <main+0x99c>)
 8002f0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f0e:	011b      	lsls	r3, r3, #4
 8002f10:	440b      	add	r3, r1
 8002f12:	601a      	str	r2, [r3, #0]
		            requests[current_task].buf = NULL;
 8002f14:	4a3e      	ldr	r2, [pc, #248]	; (8003010 <main+0x99c>)
 8002f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f18:	011b      	lsls	r3, r3, #4
 8002f1a:	4413      	add	r3, r2
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
		            requests[current_task].size = tasks[current_task].stack->r1;
 8002f22:	4938      	ldr	r1, [pc, #224]	; (8003004 <main+0x990>)
 8002f24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f26:	4613      	mov	r3, r2
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	4413      	add	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	440b      	add	r3, r1
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f34:	461a      	mov	r2, r3
 8002f36:	4936      	ldr	r1, [pc, #216]	; (8003010 <main+0x99c>)
 8002f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f3a:	011b      	lsls	r3, r3, #4
 8002f3c:	440b      	add	r3, r1
 8002f3e:	3308      	adds	r3, #8
 8002f40:	601a      	str	r2, [r3, #0]
		            requests[current_task].whence = tasks[current_task].stack->r2;
 8002f42:	4930      	ldr	r1, [pc, #192]	; (8003004 <main+0x990>)
 8002f44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f46:	4613      	mov	r3, r2
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	4413      	add	r3, r2
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	440b      	add	r3, r1
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f54:	461a      	mov	r2, r3
 8002f56:	492e      	ldr	r1, [pc, #184]	; (8003010 <main+0x99c>)
 8002f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f5a:	011b      	lsls	r3, r3, #4
 8002f5c:	440b      	add	r3, r1
 8002f5e:	330c      	adds	r3, #12
 8002f60:	601a      	str	r2, [r3, #0]
		            tasks[current_task].stack->r0 =
 8002f62:	4928      	ldr	r1, [pc, #160]	; (8003004 <main+0x990>)
 8002f64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f66:	4613      	mov	r3, r2
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	4413      	add	r3, r2
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	440b      	add	r3, r1
 8002f70:	681b      	ldr	r3, [r3, #0]
		                (int)&requests[current_task];
 8002f72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f74:	0111      	lsls	r1, r2, #4
 8002f76:	4a26      	ldr	r2, [pc, #152]	; (8003010 <main+0x99c>)
 8002f78:	440a      	add	r2, r1
		            /* Prepare file request, store reference in r0 */
		            requests[current_task].task = &tasks[current_task];
		            requests[current_task].buf = NULL;
		            requests[current_task].size = tasks[current_task].stack->r1;
		            requests[current_task].whence = tasks[current_task].stack->r2;
		            tasks[current_task].stack->r0 =
 8002f7a:	629a      	str	r2, [r3, #40]	; 0x28
		                (int)&requests[current_task];

                    /* Read */
			        file_lseek(files[fd], &requests[current_task],
 8002f7c:	4b23      	ldr	r3, [pc, #140]	; (800300c <main+0x998>)
 8002f7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f86:	011a      	lsls	r2, r3, #4
 8002f88:	4b21      	ldr	r3, [pc, #132]	; (8003010 <main+0x99c>)
 8002f8a:	441a      	add	r2, r3
 8002f8c:	f107 0308 	add.w	r3, r7, #8
 8002f90:	4608      	mov	r0, r1
 8002f92:	4611      	mov	r1, r2
 8002f94:	461a      	mov	r2, r3
 8002f96:	f7fe f8eb 	bl	8001170 <file_lseek>
			                   &event_monitor);
			    }
			    else {
			        tasks[current_task].stack->r0 = -1;
			    }
			} break;
 8002f9a:	e049      	b.n	8003030 <main+0x9bc>
                    /* Read */
			        file_lseek(files[fd], &requests[current_task],
			                   &event_monitor);
			    }
			    else {
			        tasks[current_task].stack->r0 = -1;
 8002f9c:	4919      	ldr	r1, [pc, #100]	; (8003004 <main+0x990>)
 8002f9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	4413      	add	r3, r2
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	440b      	add	r3, r1
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fb0:	629a      	str	r2, [r3, #40]	; 0x28
			    }
			} break;
 8002fb2:	e03d      	b.n	8003030 <main+0x9bc>
		default: /* Catch all interrupts */
			if ((int)tasks[current_task].stack->r7 < 0) {
 8002fb4:	4913      	ldr	r1, [pc, #76]	; (8003004 <main+0x990>)
 8002fb6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fb8:	4613      	mov	r3, r2
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	4413      	add	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	440b      	add	r3, r1
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	da32      	bge.n	8003030 <main+0x9bc>
				unsigned int intr = -tasks[current_task].stack->r7 - 16;
 8002fca:	490e      	ldr	r1, [pc, #56]	; (8003004 <main+0x990>)
 8002fcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fce:	4613      	mov	r3, r2
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	4413      	add	r3, r2
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	440b      	add	r3, r1
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68da      	ldr	r2, [r3, #12]
 8002fdc:	f06f 030f 	mvn.w	r3, #15
 8002fe0:	1a9b      	subs	r3, r3, r2
 8002fe2:	627b      	str	r3, [r7, #36]	; 0x24

				if (intr == SysTick_IRQn) {
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fea:	d113      	bne.n	8003014 <main+0x9a0>
					/* Never disable timer. We need it for pre-emption */
					timeup = 1;
 8002fec:	2301      	movs	r3, #1
 8002fee:	647b      	str	r3, [r7, #68]	; 0x44
					tick_count++;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	607b      	str	r3, [r7, #4]
					event_monitor_release(&event_monitor, TIME_EVENT);
 8002ff6:	f107 0308 	add.w	r3, r7, #8
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	218a      	movs	r1, #138	; 0x8a
 8002ffe:	f7fd fd2b 	bl	8000a58 <event_monitor_release>
 8003002:	e00d      	b.n	8003020 <main+0x9ac>
 8003004:	200007a4 	.word	0x200007a4
 8003008:	20004164 	.word	0x20004164
 800300c:	20004064 	.word	0x20004064
 8003010:	200040e4 	.word	0x200040e4
				}
				else {
					/* Disable interrupt, interrupt_wait re-enables */
					NVIC_DisableIRQ(intr);
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	b2db      	uxtb	r3, r3
 8003018:	b25b      	sxtb	r3, r3
 800301a:	4618      	mov	r0, r3
 800301c:	f7fe f914 	bl	8001248 <NVIC_DisableIRQ>
				}
				event_monitor_release(&event_monitor, INTR_EVENT(intr));
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	332f      	adds	r3, #47	; 0x2f
 8003024:	f107 0208 	add.w	r2, r7, #8
 8003028:	4610      	mov	r0, r2
 800302a:	4619      	mov	r1, r3
 800302c:	f7fd fd14 	bl	8000a58 <event_monitor_release>
			}
		}

        /* Rearrange ready list and event list */
		event_monitor_serve(&event_monitor);
 8003030:	f107 0308 	add.w	r3, r7, #8
 8003034:	4618      	mov	r0, r3
 8003036:	f7fd fd23 	bl	8000a80 <event_monitor_serve>

		/* Check whether to context switch */
		task = &tasks[current_task];
 800303a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800303c:	4613      	mov	r3, r2
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	4413      	add	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	4a1f      	ldr	r2, [pc, #124]	; (80030c4 <main+0xa50>)
 8003046:	4413      	add	r3, r2
 8003048:	623b      	str	r3, [r7, #32]
		if (timeup && ready_list[task->priority].next == &task->list)
 800304a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800304c:	2b00      	cmp	r3, #0
 800304e:	d01b      	beq.n	8003088 <main+0xa14>
 8003050:	6a3b      	ldr	r3, [r7, #32]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	4a1c      	ldr	r2, [pc, #112]	; (80030c8 <main+0xa54>)
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	4413      	add	r3, r2
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	3310      	adds	r3, #16
 8003060:	429a      	cmp	r2, r3
 8003062:	d111      	bne.n	8003088 <main+0xa14>
		    list_push(&ready_list[task->priority], &tasks[current_task].list);
 8003064:	6a3b      	ldr	r3, [r7, #32]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	00da      	lsls	r2, r3, #3
 800306a:	4b17      	ldr	r3, [pc, #92]	; (80030c8 <main+0xa54>)
 800306c:	18d1      	adds	r1, r2, r3
 800306e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003070:	4613      	mov	r3, r2
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	4413      	add	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	f103 0210 	add.w	r2, r3, #16
 800307c:	4b11      	ldr	r3, [pc, #68]	; (80030c4 <main+0xa50>)
 800307e:	4413      	add	r3, r2
 8003080:	4608      	mov	r0, r1
 8003082:	4619      	mov	r1, r3
 8003084:	f000 f87c 	bl	8003180 <list_push>

		/* Select next TASK_READY task */
		for (i = 0; list_empty(&ready_list[i]); i++);
 8003088:	2300      	movs	r3, #0
 800308a:	64bb      	str	r3, [r7, #72]	; 0x48
 800308c:	e002      	b.n	8003094 <main+0xa20>
 800308e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003090:	3301      	adds	r3, #1
 8003092:	64bb      	str	r3, [r7, #72]	; 0x48
 8003094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003096:	00da      	lsls	r2, r3, #3
 8003098:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <main+0xa54>)
 800309a:	4413      	add	r3, r2
 800309c:	4618      	mov	r0, r3
 800309e:	f000 f827 	bl	80030f0 <list_empty>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1f2      	bne.n	800308e <main+0xa1a>

		list = ready_list[i].next;
 80030a8:	4a07      	ldr	r2, [pc, #28]	; (80030c8 <main+0xa54>)
 80030aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	4413      	add	r3, r2
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	61fb      	str	r3, [r7, #28]
		task = list_entry(list, struct task_control_block, list);
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	3b10      	subs	r3, #16
 80030b8:	623b      	str	r3, [r7, #32]
		current_task = task->pid;
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	64fb      	str	r3, [r7, #76]	; 0x4c
	}
 80030c0:	f7ff bb9d 	b.w	80027fe <main+0x18a>
 80030c4:	200007a4 	.word	0x200007a4
 80030c8:	20004164 	.word	0x20004164

080030cc <list_init>:
#include "list.h"

void list_init(struct list* list)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
    if (list) {
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d005      	beq.n	80030e6 <list_init+0x1a>
        list->prev = list;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	601a      	str	r2, [r3, #0]
        list->next = list;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	605a      	str	r2, [r3, #4]
    }
}
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <list_empty>:

int list_empty(struct list *list)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
    return list->next == list;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	429a      	cmp	r2, r3
 8003100:	bf14      	ite	ne
 8003102:	2300      	movne	r3, #0
 8003104:	2301      	moveq	r3, #1
 8003106:	b2db      	uxtb	r3, r3
}
 8003108:	4618      	mov	r0, r3
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <list_remove>:

void list_remove(struct list *list)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
    if (list) {
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d009      	beq.n	8003136 <list_remove+0x22>
        list->next->prev = list->prev;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6812      	ldr	r2, [r2, #0]
 800312a:	601a      	str	r2, [r3, #0]
        list->prev->next = list->next;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	6852      	ldr	r2, [r2, #4]
 8003134:	605a      	str	r2, [r3, #4]
    }
}
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <list_unshift>:

void list_unshift(struct list *list, struct list *new)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
    if (list && new) {
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d013      	beq.n	8003178 <list_unshift+0x38>
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d010      	beq.n	8003178 <list_unshift+0x38>
        list_remove(new);
 8003156:	6838      	ldr	r0, [r7, #0]
 8003158:	f7ff ffdc 	bl	8003114 <list_remove>

        list->next->prev = new;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	601a      	str	r2, [r3, #0]
        new->next = list->next;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	605a      	str	r2, [r3, #4]
        new->prev = list;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	601a      	str	r2, [r3, #0]
        list->next = new;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	605a      	str	r2, [r3, #4]
    }
}
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop

08003180 <list_push>:

void list_push(struct list *list, struct list *new)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
    if (list && new) {
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d01a      	beq.n	80031c6 <list_push+0x46>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d017      	beq.n	80031c6 <list_push+0x46>
        /* Remove new from origin list */
        new->prev->next = new->next;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	6852      	ldr	r2, [r2, #4]
 800319e:	605a      	str	r2, [r3, #4]
        new->next->prev = new->prev;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	6812      	ldr	r2, [r2, #0]
 80031a8:	601a      	str	r2, [r3, #0]

        list->prev->next = new;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	605a      	str	r2, [r3, #4]
        new->next = list;
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	605a      	str	r2, [r3, #4]
        new->prev = list->prev;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	601a      	str	r2, [r3, #0]
        list->prev = new;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	601a      	str	r2, [r3, #0]
    }
}
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <list_shift>:

struct list* list_shift(struct list *list)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
    struct list *first = list->next;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	60fb      	str	r3, [r7, #12]

    if (first == list)
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d101      	bne.n	80031ea <list_shift+0x1a>
        return 0;
 80031e6:	2300      	movs	r3, #0
 80031e8:	e008      	b.n	80031fc <list_shift+0x2c>

    list->next = first->next;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	605a      	str	r2, [r3, #4]
    list->next->prev = list;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	601a      	str	r2, [r3, #0]

    return first;
 80031fa:	68fb      	ldr	r3, [r7, #12]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <memory_pool_init>:
#include "memory-pool.h"



void memory_pool_init(struct memory_pool *pool, size_t size, char *memory)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
    pool->offset = 0;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]
    pool->size = size;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	605a      	str	r2, [r3, #4]
    pool->memory = memory;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	609a      	str	r2, [r3, #8]
}
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <memory_pool_alloc>:

void *memory_pool_alloc(struct memory_pool *pool, size_t size)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
    if (pool->offset + size <= pool->size) {
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	461a      	mov	r2, r3
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	441a      	add	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	429a      	cmp	r2, r3
 800324a:	d80f      	bhi.n	800326c <memory_pool_alloc+0x3c>
        char *alloc = pool->memory + pool->offset;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4413      	add	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]
        pool->offset += size;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	461a      	mov	r2, r3
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	4413      	add	r3, r2
 8003262:	461a      	mov	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	601a      	str	r2, [r3, #0]
        return alloc;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	e000      	b.n	800326e <memory_pool_alloc+0x3e>
    }

    return NULL;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop

0800327c <mq_open>:
	.lseekable = NULL,
	.lseek = NULL,
};

int mq_open(const char *name, int oflag)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
	if (oflag & O_CREAT)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	2b00      	cmp	r3, #0
 800328e:	d004      	beq.n	800329a <mq_open+0x1e>
		mkfile(name, 0, S_IMSGQ);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	2100      	movs	r1, #0
 8003294:	2202      	movs	r2, #2
 8003296:	f7fd fd83 	bl	8000da0 <mkfile>
	return open(name, 0);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	2100      	movs	r1, #0
 800329e:	f7fd fdf1 	bl	8000e84 <open>
 80032a2:	4603      	mov	r3, r0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <mq_init>:

int
mq_init(int fd, int driver_pid, struct file *files[],
        struct memory_pool *memory_pool, struct event_monitor *monitor)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
 80032b8:	603b      	str	r3, [r7, #0]
    struct pipe_ringbuffer *pipe;

    pipe = memory_pool_alloc(memory_pool, sizeof(struct pipe_ringbuffer));
 80032ba:	6838      	ldr	r0, [r7, #0]
 80032bc:	2158      	movs	r1, #88	; 0x58
 80032be:	f7ff ffb7 	bl	8003230 <memory_pool_alloc>
 80032c2:	6178      	str	r0, [r7, #20]

    if (!pipe)
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d102      	bne.n	80032d0 <mq_init+0x24>
        return -1;
 80032ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032ce:	e033      	b.n	8003338 <mq_init+0x8c>

    pipe->start = 0;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	2200      	movs	r2, #0
 80032d4:	609a      	str	r2, [r3, #8]
    pipe->end = 0;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	2200      	movs	r2, #0
 80032da:	60da      	str	r2, [r3, #12]
	pipe->file.ops = &mq_ops;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	4a18      	ldr	r2, [pc, #96]	; (8003340 <mq_init+0x94>)
 80032e0:	605a      	str	r2, [r3, #4]
    files[fd] = &pipe->file;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	4413      	add	r3, r2
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	601a      	str	r2, [r3, #0]

    pipe->read_event = event_monitor_find_free(monitor);
 80032ee:	6a38      	ldr	r0, [r7, #32]
 80032f0:	f7fd fb44 	bl	800097c <event_monitor_find_free>
 80032f4:	4602      	mov	r2, r0
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	611a      	str	r2, [r3, #16]
    event_monitor_register(monitor, pipe->read_event, pipe_read_release, files[fd]);
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	691a      	ldr	r2, [r3, #16]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	440b      	add	r3, r1
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6a38      	ldr	r0, [r7, #32]
 800330a:	4611      	mov	r1, r2
 800330c:	4a0d      	ldr	r2, [pc, #52]	; (8003344 <mq_init+0x98>)
 800330e:	f7fd fb5b 	bl	80009c8 <event_monitor_register>

    pipe->write_event = event_monitor_find_free(monitor);
 8003312:	6a38      	ldr	r0, [r7, #32]
 8003314:	f7fd fb32 	bl	800097c <event_monitor_find_free>
 8003318:	4602      	mov	r2, r0
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	615a      	str	r2, [r3, #20]
    event_monitor_register(monitor, pipe->write_event, pipe_write_release, files[fd]);
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	695a      	ldr	r2, [r3, #20]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	440b      	add	r3, r1
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6a38      	ldr	r0, [r7, #32]
 800332e:	4611      	mov	r1, r2
 8003330:	4a05      	ldr	r2, [pc, #20]	; (8003348 <mq_init+0x9c>)
 8003332:	f7fd fb49 	bl	80009c8 <event_monitor_register>
    return 0;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3718      	adds	r7, #24
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	20000034 	.word	0x20000034
 8003344:	08003f51 	.word	0x08003f51
 8003348:	08003f81 	.word	0x08003f81

0800334c <mq_readable>:

int
mq_readable (struct file *file, struct file_request *request,
             struct event_monitor *monitor)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b08a      	sub	sp, #40	; 0x28
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
	size_t msg_len;

	struct pipe_ringbuffer *pipe =
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	61bb      	str	r3, [r7, #24]
	    container_of(file, struct pipe_ringbuffer, file);

	/* Trying to read too much */
	if ((size_t)PIPE_LEN(*pipe) < sizeof(size_t)) {
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	68da      	ldr	r2, [r3, #12]
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	1ad2      	subs	r2, r2, r3
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	68d9      	ldr	r1, [r3, #12]
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	4299      	cmp	r1, r3
 8003370:	da01      	bge.n	8003376 <mq_readable+0x2a>
 8003372:	2340      	movs	r3, #64	; 0x40
 8003374:	e000      	b.n	8003378 <mq_readable+0x2c>
 8003376:	2300      	movs	r3, #0
 8003378:	4413      	add	r3, r2
 800337a:	2b03      	cmp	r3, #3
 800337c:	d80a      	bhi.n	8003394 <mq_readable+0x48>
		/* Nothing to read */
	    event_monitor_block(monitor, pipe->read_event, request->task);
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	691a      	ldr	r2, [r3, #16]
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	4611      	mov	r1, r2
 800338a:	461a      	mov	r2, r3
 800338c:	f7fd fb46 	bl	8000a1c <event_monitor_block>
		return FILE_ACCESS_BLOCK;
 8003390:	2300      	movs	r3, #0
 8003392:	e028      	b.n	80033e6 <mq_readable+0x9a>
	}

	PIPE_PEEK(*pipe, msg_len, 4);
 8003394:	2304      	movs	r3, #4
 8003396:	627b      	str	r3, [r7, #36]	; 0x24
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	623b      	str	r3, [r7, #32]
 800339e:	2300      	movs	r3, #0
 80033a0:	61fb      	str	r3, [r7, #28]
 80033a2:	e011      	b.n	80033c8 <mq_readable+0x7c>
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	1c5a      	adds	r2, r3, #1
 80033a8:	61fa      	str	r2, [r7, #28]
 80033aa:	f107 0214 	add.w	r2, r7, #20
 80033ae:	441a      	add	r2, r3
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	1c59      	adds	r1, r3, #1
 80033b4:	6239      	str	r1, [r7, #32]
 80033b6:	69b9      	ldr	r1, [r7, #24]
 80033b8:	440b      	add	r3, r1
 80033ba:	7e1b      	ldrb	r3, [r3, #24]
 80033bc:	7013      	strb	r3, [r2, #0]
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	2b3f      	cmp	r3, #63	; 0x3f
 80033c2:	dd01      	ble.n	80033c8 <mq_readable+0x7c>
 80033c4:	2300      	movs	r3, #0
 80033c6:	623b      	str	r3, [r7, #32]
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	1e5a      	subs	r2, r3, #1
 80033cc:	627a      	str	r2, [r7, #36]	; 0x24
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1e8      	bne.n	80033a4 <mq_readable+0x58>

	if (msg_len > request->size) {
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	461a      	mov	r2, r3
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d202      	bcs.n	80033e4 <mq_readable+0x98>
		/* Trying to read more than buffer size */
		return FILE_ACCESS_ERROR;
 80033de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033e2:	e000      	b.n	80033e6 <mq_readable+0x9a>
	}
	return FILE_ACCESS_ACCEPT;
 80033e4:	2301      	movs	r3, #1
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3728      	adds	r7, #40	; 0x28
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop

080033f0 <mq_writable>:

int
mq_writable (struct file *file, struct file_request *request,
             struct event_monitor *monitor)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
	size_t total_len = sizeof(size_t) + request->size;
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	3304      	adds	r3, #4
 8003402:	617b      	str	r3, [r7, #20]
	struct pipe_ringbuffer *pipe =
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	613b      	str	r3, [r7, #16]
	    container_of(file, struct pipe_ringbuffer, file);

	/* If the write would be non-atomic */
	if (total_len > PIPE_BUF) {
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	2b40      	cmp	r3, #64	; 0x40
 800340c:	d902      	bls.n	8003414 <mq_writable+0x24>
		return FILE_ACCESS_ERROR;
 800340e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003412:	e01f      	b.n	8003454 <mq_writable+0x64>
	}
	/* Preserve 1 byte to distiguish empty or full */
	if ((size_t)PIPE_BUF - PIPE_LEN(*pipe) - 1 < total_len) {
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	1ad2      	subs	r2, r2, r3
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	68d9      	ldr	r1, [r3, #12]
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	4299      	cmp	r1, r3
 8003428:	da01      	bge.n	800342e <mq_writable+0x3e>
 800342a:	2340      	movs	r3, #64	; 0x40
 800342c:	e000      	b.n	8003430 <mq_writable+0x40>
 800342e:	2300      	movs	r3, #0
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	f103 023f 	add.w	r2, r3, #63	; 0x3f
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	429a      	cmp	r2, r3
 800343a:	d20a      	bcs.n	8003452 <mq_writable+0x62>
		/* Trying to write more than we have space for: block */
	    event_monitor_block(monitor, pipe->write_event, request->task);
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	695a      	ldr	r2, [r3, #20]
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	4611      	mov	r1, r2
 8003448:	461a      	mov	r2, r3
 800344a:	f7fd fae7 	bl	8000a1c <event_monitor_block>
		return FILE_ACCESS_BLOCK;
 800344e:	2300      	movs	r3, #0
 8003450:	e000      	b.n	8003454 <mq_writable+0x64>
	}
	return FILE_ACCESS_ACCEPT;
 8003452:	2301      	movs	r3, #1
}
 8003454:	4618      	mov	r0, r3
 8003456:	3718      	adds	r7, #24
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <mq_read>:

int
mq_read (struct file *file, struct file_request *request,
         struct event_monitor *monitor)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b088      	sub	sp, #32
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
	size_t msg_len;
	size_t i;
	struct pipe_ringbuffer *pipe =
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	61bb      	str	r3, [r7, #24]
	    container_of(file, struct pipe_ringbuffer, file);

	/* Get length */
	for (i = 0; i < 4; i++) {
 800346c:	2300      	movs	r3, #0
 800346e:	61fb      	str	r3, [r7, #28]
 8003470:	e018      	b.n	80034a4 <mq_read+0x48>
		PIPE_POP(*pipe, *(((char*)&msg_len)+i));
 8003472:	f107 0214 	add.w	r2, r7, #20
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	4413      	add	r3, r2
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	6892      	ldr	r2, [r2, #8]
 800347e:	69b9      	ldr	r1, [r7, #24]
 8003480:	440a      	add	r2, r1
 8003482:	7e12      	ldrb	r2, [r2, #24]
 8003484:	701a      	strb	r2, [r3, #0]
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	1c5a      	adds	r2, r3, #1
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	609a      	str	r2, [r3, #8]
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	2b3f      	cmp	r3, #63	; 0x3f
 8003496:	dd02      	ble.n	800349e <mq_read+0x42>
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	2200      	movs	r2, #0
 800349c:	609a      	str	r2, [r3, #8]
	size_t i;
	struct pipe_ringbuffer *pipe =
	    container_of(file, struct pipe_ringbuffer, file);

	/* Get length */
	for (i = 0; i < 4; i++) {
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	3301      	adds	r3, #1
 80034a2:	61fb      	str	r3, [r7, #28]
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	2b03      	cmp	r3, #3
 80034a8:	d9e3      	bls.n	8003472 <mq_read+0x16>
		PIPE_POP(*pipe, *(((char*)&msg_len)+i));
	}
	/* Copy data into buf */
	for (i = 0; i < msg_len; i++) {
 80034aa:	2300      	movs	r3, #0
 80034ac:	61fb      	str	r3, [r7, #28]
 80034ae:	e018      	b.n	80034e2 <mq_read+0x86>
		PIPE_POP(*pipe, request->buf[i]);
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	4413      	add	r3, r2
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	6892      	ldr	r2, [r2, #8]
 80034bc:	69b9      	ldr	r1, [r7, #24]
 80034be:	440a      	add	r2, r1
 80034c0:	7e12      	ldrb	r2, [r2, #24]
 80034c2:	701a      	strb	r2, [r3, #0]
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	1c5a      	adds	r2, r3, #1
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	609a      	str	r2, [r3, #8]
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	2b3f      	cmp	r3, #63	; 0x3f
 80034d4:	dd02      	ble.n	80034dc <mq_read+0x80>
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	2200      	movs	r2, #0
 80034da:	609a      	str	r2, [r3, #8]
	/* Get length */
	for (i = 0; i < 4; i++) {
		PIPE_POP(*pipe, *(((char*)&msg_len)+i));
	}
	/* Copy data into buf */
	for (i = 0; i < msg_len; i++) {
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	3301      	adds	r3, #1
 80034e0:	61fb      	str	r3, [r7, #28]
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	69fa      	ldr	r2, [r7, #28]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d3e2      	bcc.n	80034b0 <mq_read+0x54>
		PIPE_POP(*pipe, request->buf[i]);
	}

    /* Prepared to write */
	event_monitor_release(monitor, pipe->write_event);
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	4619      	mov	r1, r3
 80034f2:	f7fd fab1 	bl	8000a58 <event_monitor_release>
	return msg_len;
 80034f6:	697b      	ldr	r3, [r7, #20]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3720      	adds	r7, #32
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <mq_write>:

int
mq_write (struct file *file, struct file_request *request,
          struct event_monitor *monitor)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
	size_t i;
	struct pipe_ringbuffer *pipe =
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	613b      	str	r3, [r7, #16]
	    container_of(file, struct pipe_ringbuffer, file);

	/* Copy count into pipe */
	for (i = 0; i < sizeof(size_t); i++)
 8003510:	2300      	movs	r3, #0
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	e019      	b.n	800354a <mq_write+0x4a>
		PIPE_PUSH(*pipe,*(((char*)&request->size)+i));
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	f102 0108 	add.w	r1, r2, #8
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	440a      	add	r2, r1
 8003524:	7812      	ldrb	r2, [r2, #0]
 8003526:	6939      	ldr	r1, [r7, #16]
 8003528:	440b      	add	r3, r1
 800352a:	761a      	strb	r2, [r3, #24]
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	1c5a      	adds	r2, r3, #1
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	60da      	str	r2, [r3, #12]
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	2b3f      	cmp	r3, #63	; 0x3f
 800353c:	dd02      	ble.n	8003544 <mq_write+0x44>
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	2200      	movs	r2, #0
 8003542:	60da      	str	r2, [r3, #12]
	size_t i;
	struct pipe_ringbuffer *pipe =
	    container_of(file, struct pipe_ringbuffer, file);

	/* Copy count into pipe */
	for (i = 0; i < sizeof(size_t); i++)
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	3301      	adds	r3, #1
 8003548:	617b      	str	r3, [r7, #20]
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	2b03      	cmp	r3, #3
 800354e:	d9e2      	bls.n	8003516 <mq_write+0x16>
		PIPE_PUSH(*pipe,*(((char*)&request->size)+i));
	/* Copy data into pipe */
	for (i = 0; i < request->size; i++)
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	e018      	b.n	8003588 <mq_write+0x88>
		PIPE_PUSH(*pipe,request->buf[i]);
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	6851      	ldr	r1, [r2, #4]
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	440a      	add	r2, r1
 8003562:	7812      	ldrb	r2, [r2, #0]
 8003564:	6939      	ldr	r1, [r7, #16]
 8003566:	440b      	add	r3, r1
 8003568:	761a      	strb	r2, [r3, #24]
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	1c5a      	adds	r2, r3, #1
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	60da      	str	r2, [r3, #12]
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	2b3f      	cmp	r3, #63	; 0x3f
 800357a:	dd02      	ble.n	8003582 <mq_write+0x82>
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	2200      	movs	r2, #0
 8003580:	60da      	str	r2, [r3, #12]

	/* Copy count into pipe */
	for (i = 0; i < sizeof(size_t); i++)
		PIPE_PUSH(*pipe,*(((char*)&request->size)+i));
	/* Copy data into pipe */
	for (i = 0; i < request->size; i++)
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	3301      	adds	r3, #1
 8003586:	617b      	str	r3, [r7, #20]
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	461a      	mov	r2, r3
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	429a      	cmp	r2, r3
 8003592:	d8e0      	bhi.n	8003556 <mq_write+0x56>
		PIPE_PUSH(*pipe,request->buf[i]);

    /* Prepared to read */
	event_monitor_release(monitor, pipe->read_event);
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	4619      	mov	r1, r3
 800359c:	f7fd fa5c 	bl	8000a58 <event_monitor_release>
	return request->size;
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	689b      	ldr	r3, [r3, #8]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3718      	adds	r7, #24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <pathserver>:
 * The first TASK_LIMIT FDs are reserved for use by their respective tasks.
 * 0-2 are reserved FDs and are skipped.
 * The server registers itself at /sys/pathserver
 */
void pathserver()
{
 80035ac:	b590      	push	{r4, r7, lr}
 80035ae:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464
 80035b2:	af00      	add	r7, sp, #0
	char paths[FILE_LIMIT - TASK_LIMIT - 3][PATH_MAX];
	int npaths = 0;
 80035b4:	2300      	movs	r3, #0
 80035b6:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
	int fs_fds[FS_LIMIT];
	char fs_types[FS_LIMIT][FS_TYPE_MAX];
	int nfs_types = 0;
 80035ba:	2300      	movs	r3, #0
 80035bc:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
	struct mount mounts[MOUNT_LIMIT];
	int nmounts = 0;
 80035c0:	2300      	movs	r3, #0
 80035c2:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
	int i = 0;
 80035c6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80035ca:	2200      	movs	r2, #0
 80035cc:	601a      	str	r2, [r3, #0]
	int cmd = 0;
 80035ce:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80035d2:	2200      	movs	r2, #0
 80035d4:	601a      	str	r2, [r3, #0]
	unsigned int plen = 0;
 80035d6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80035da:	2200      	movs	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]
	unsigned int replyfd = 0;
 80035de:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]
	char path[PATH_MAX];
	int dev = 0;
 80035e6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80035ea:	2200      	movs	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]
	int newfd = 0;
 80035ee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
	char fs_type[FS_TYPE_MAX];
	int status;

	memcpy(paths[npaths++], PATH_SERVER_NAME, sizeof(PATH_SERVER_NAME));
 80035f6:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 80035fa:	1c5a      	adds	r2, r3, #1
 80035fc:	f8c7 245c 	str.w	r2, [r7, #1116]	; 0x45c
 8003600:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8003604:	015b      	lsls	r3, r3, #5
 8003606:	4413      	add	r3, r2
 8003608:	4618      	mov	r0, r3
 800360a:	49b6      	ldr	r1, [pc, #728]	; (80038e4 <pathserver+0x338>)
 800360c:	2210      	movs	r2, #16
 800360e:	f011 fe57 	bl	80152c0 <memcpy>
 8003612:	e000      	b.n	8003616 <pathserver+0x6a>
		    }   break;

		    default:
		        ;
		}
	}
 8003614:	bf00      	nop
	int status;

	memcpy(paths[npaths++], PATH_SERVER_NAME, sizeof(PATH_SERVER_NAME));

	while (1) {
		read(PATHSERVER_FD, &cmd, 4);
 8003616:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800361a:	200b      	movs	r0, #11
 800361c:	4619      	mov	r1, r3
 800361e:	2204      	movs	r2, #4
 8003620:	f011 feab 	bl	801537a <read>
		read(PATHSERVER_FD, &replyfd, 4);
 8003624:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003628:	200b      	movs	r0, #11
 800362a:	4619      	mov	r1, r3
 800362c:	2204      	movs	r2, #4
 800362e:	f011 fea4 	bl	801537a <read>

		switch (cmd) {
 8003632:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	3b01      	subs	r3, #1
 800363a:	2b04      	cmp	r3, #4
 800363c:	d8ea      	bhi.n	8003614 <pathserver+0x68>
 800363e:	a201      	add	r2, pc, #4	; (adr r2, 8003644 <pathserver+0x98>)
 8003640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003644:	08003659 	.word	0x08003659
 8003648:	08003701 	.word	0x08003701
 800364c:	08003939 	.word	0x08003939
 8003650:	080039ab 	.word	0x080039ab
 8003654:	08003a2b 	.word	0x08003a2b
		    case PATH_CMD_MKFILE:
		        read(PATHSERVER_FD, &plen, 4);
 8003658:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800365c:	200b      	movs	r0, #11
 800365e:	4619      	mov	r1, r3
 8003660:	2204      	movs	r2, #4
 8003662:	f011 fe8a 	bl	801537a <read>
		        read(PATHSERVER_FD, path, plen);
 8003666:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8003670:	200b      	movs	r0, #11
 8003672:	4611      	mov	r1, r2
 8003674:	461a      	mov	r2, r3
 8003676:	f011 fe80 	bl	801537a <read>
			    read(PATHSERVER_FD, &dev, 4);
 800367a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800367e:	200b      	movs	r0, #11
 8003680:	4619      	mov	r1, r3
 8003682:	2204      	movs	r2, #4
 8003684:	f011 fe79 	bl	801537a <read>
			    newfd = npaths + 3 + TASK_LIMIT;
 8003688:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 800368c:	f103 020b 	add.w	r2, r3, #11
 8003690:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003694:	601a      	str	r2, [r3, #0]
			    if (mknod(newfd, 0, dev) == 0) {
 8003696:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4610      	mov	r0, r2
 80036a4:	2100      	movs	r1, #0
 80036a6:	461a      	mov	r2, r3
 80036a8:	f011 fe83 	bl	80153b2 <mknod>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d115      	bne.n	80036de <pathserver+0x132>
			        memcpy(paths[npaths], path, plen);
 80036b2:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 80036b6:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 80036ba:	015b      	lsls	r3, r3, #5
 80036bc:	18d1      	adds	r1, r2, r3
 80036be:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80036c8:	4608      	mov	r0, r1
 80036ca:	4611      	mov	r1, r2
 80036cc:	461a      	mov	r2, r3
 80036ce:	f011 fdf7 	bl	80152c0 <memcpy>
			        npaths++;
 80036d2:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 80036d6:	3301      	adds	r3, #1
 80036d8:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 80036dc:	e004      	b.n	80036e8 <pathserver+0x13c>
			    }
			    else {
			        newfd = -1;
 80036de:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80036e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036e6:	601a      	str	r2, [r3, #0]
			    }
			    write(replyfd, &newfd, 4);
 80036e8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	461a      	mov	r2, r3
 80036f0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80036f4:	4610      	mov	r0, r2
 80036f6:	4619      	mov	r1, r3
 80036f8:	2204      	movs	r2, #4
 80036fa:	f011 fe37 	bl	801536c <write>
		        break;
 80036fe:	e299      	b.n	8003c34 <pathserver+0x688>

		    case PATH_CMD_OPEN:
		        read(PATHSERVER_FD, &plen, 4);
 8003700:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003704:	200b      	movs	r0, #11
 8003706:	4619      	mov	r1, r3
 8003708:	2204      	movs	r2, #4
 800370a:	f011 fe36 	bl	801537a <read>
		        read(PATHSERVER_FD, path, plen);
 800370e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8003718:	200b      	movs	r0, #11
 800371a:	4611      	mov	r1, r2
 800371c:	461a      	mov	r2, r3
 800371e:	f011 fe2c 	bl	801537a <read>
		        /* Search for path */
			    for (i = 0; i < npaths; i++) {
 8003722:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003726:	2200      	movs	r2, #0
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	e03f      	b.n	80037ac <pathserver+0x200>
				    if (*paths[i] && strcmp(path, paths[i]) == 0) {
 800372c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8003736:	015b      	lsls	r3, r3, #5
 8003738:	4413      	add	r3, r2
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d02e      	beq.n	800379e <pathserver+0x1f2>
 8003740:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 800374a:	015b      	lsls	r3, r3, #5
 800374c:	4413      	add	r3, r2
 800374e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8003752:	4610      	mov	r0, r2
 8003754:	4619      	mov	r1, r3
 8003756:	f001 fb33 	bl	8004dc0 <strcmp>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d11e      	bne.n	800379e <pathserver+0x1f2>
					    i += 3; /* 0-2 are reserved */
 8003760:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	1cda      	adds	r2, r3, #3
 8003768:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800376c:	601a      	str	r2, [r3, #0]
					    i += TASK_LIMIT; /* FDs reserved for tasks */
 800376e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f103 0208 	add.w	r2, r3, #8
 8003778:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800377c:	601a      	str	r2, [r3, #0]
					    write(replyfd, &i, 4);
 800377e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	461a      	mov	r2, r3
 8003786:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800378a:	4610      	mov	r0, r2
 800378c:	4619      	mov	r1, r3
 800378e:	2204      	movs	r2, #4
 8003790:	f011 fdec 	bl	801536c <write>
					    i = 0;
 8003794:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]
					    break;
 800379c:	e00d      	b.n	80037ba <pathserver+0x20e>

		    case PATH_CMD_OPEN:
		        read(PATHSERVER_FD, &plen, 4);
		        read(PATHSERVER_FD, path, plen);
		        /* Search for path */
			    for (i = 0; i < npaths; i++) {
 800379e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 80037b6:	429a      	cmp	r2, r3
 80037b8:	dbb8      	blt.n	800372c <pathserver+0x180>
					    i = 0;
					    break;
				    }
			    }

			    if (i < npaths) {
 80037ba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 80037c4:	429a      	cmp	r2, r3
 80037c6:	da00      	bge.n	80037ca <pathserver+0x21e>
				    break;
 80037c8:	e234      	b.n	8003c34 <pathserver+0x688>
			    }

		        /* Search for mount point */
			    for (i = 0; i < nmounts; i++) {
 80037ca:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	e090      	b.n	80038f6 <pathserver+0x34a>
				    if (*mounts[i].path
 80037d4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80037de:	4613      	mov	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	4413      	add	r3, r2
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	440b      	add	r3, r1
 80037e8:	3308      	adds	r3, #8
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d07b      	beq.n	80038e8 <pathserver+0x33c>
				            && strncmp(path, mounts[i].path,
 80037f0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80037fa:	4613      	mov	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	4413      	add	r3, r2
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	3308      	adds	r3, #8
 8003804:	18cc      	adds	r4, r1, r3
				                       strlen(mounts[i].path)) == 0) {
 8003806:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003810:	4613      	mov	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	3308      	adds	r3, #8
 800381a:	440b      	add	r3, r1
			    }

		        /* Search for mount point */
			    for (i = 0; i < nmounts; i++) {
				    if (*mounts[i].path
				            && strncmp(path, mounts[i].path,
 800381c:	4618      	mov	r0, r3
 800381e:	f001 fb09 	bl	8004e34 <strlen>
 8003822:	4603      	mov	r3, r0
 8003824:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8003828:	4610      	mov	r0, r2
 800382a:	4621      	mov	r1, r4
 800382c:	461a      	mov	r2, r3
 800382e:	f001 fad5 	bl	8004ddc <strncmp>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d157      	bne.n	80038e8 <pathserver+0x33c>
				                       strlen(mounts[i].path)) == 0) {
				        int mlen = strlen(mounts[i].path);
 8003838:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003842:	4613      	mov	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	3308      	adds	r3, #8
 800384c:	440b      	add	r3, r1
 800384e:	4618      	mov	r0, r3
 8003850:	f001 faf0 	bl	8004e34 <strlen>
 8003854:	4603      	mov	r3, r0
 8003856:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
					    struct fs_request request;
					    request.cmd = FS_CMD_OPEN;
 800385a:	f107 0320 	add.w	r3, r7, #32
 800385e:	2201      	movs	r2, #1
 8003860:	601a      	str	r2, [r3, #0]
					    request.from = replyfd;
 8003862:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	461a      	mov	r2, r3
 800386a:	f107 0320 	add.w	r3, r7, #32
 800386e:	605a      	str	r2, [r3, #4]
					    request.device = mounts[i].dev;
 8003870:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 800387a:	4613      	mov	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4413      	add	r3, r2
 8003880:	00db      	lsls	r3, r3, #3
 8003882:	440b      	add	r3, r1
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	f107 0320 	add.w	r3, r7, #32
 800388a:	609a      	str	r2, [r3, #8]
					    request.pos = mlen; /* search starting position */
 800388c:	f107 0320 	add.w	r3, r7, #32
 8003890:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 8003894:	635a      	str	r2, [r3, #52]	; 0x34
					    memcpy(request.path, &path, plen);
 8003896:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f107 0220 	add.w	r2, r7, #32
 80038a0:	f102 0110 	add.w	r1, r2, #16
 80038a4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80038a8:	4608      	mov	r0, r1
 80038aa:	4611      	mov	r1, r2
 80038ac:	461a      	mov	r2, r3
 80038ae:	f011 fd07 	bl	80152c0 <memcpy>
					    write(mounts[i].fs, &request, sizeof(request));
 80038b2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80038bc:	4613      	mov	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	440b      	add	r3, r1
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	f107 0320 	add.w	r3, r7, #32
 80038cc:	4610      	mov	r0, r2
 80038ce:	4619      	mov	r1, r3
 80038d0:	2238      	movs	r2, #56	; 0x38
 80038d2:	f011 fd4b 	bl	801536c <write>
					    i = 0;
 80038d6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]
					    break;
 80038de:	bf00      	nop
 80038e0:	e011      	b.n	8003906 <pathserver+0x35a>
 80038e2:	bf00      	nop
 80038e4:	080173a0 	.word	0x080173a0
			    if (i < npaths) {
				    break;
			    }

		        /* Search for mount point */
			    for (i = 0; i < nmounts; i++) {
 80038e8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8003900:	429a      	cmp	r2, r3
 8003902:	f6ff af67 	blt.w	80037d4 <pathserver+0x228>
					    i = 0;
					    break;
				    }
			    }

			    if (i >= nmounts) {
 8003906:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8003910:	429a      	cmp	r2, r3
 8003912:	db10      	blt.n	8003936 <pathserver+0x38a>
				    i = -1; /* Error: not found */
 8003914:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003918:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800391c:	601a      	str	r2, [r3, #0]
				    write(replyfd, &i, 4);
 800391e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	461a      	mov	r2, r3
 8003926:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800392a:	4610      	mov	r0, r2
 800392c:	4619      	mov	r1, r3
 800392e:	2204      	movs	r2, #4
 8003930:	f011 fd1c 	bl	801536c <write>
			    }
		        break;
 8003934:	e17e      	b.n	8003c34 <pathserver+0x688>
 8003936:	e17d      	b.n	8003c34 <pathserver+0x688>

		    case PATH_CMD_REGISTER_PATH:
		        read(PATHSERVER_FD, &plen, 4);
 8003938:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800393c:	200b      	movs	r0, #11
 800393e:	4619      	mov	r1, r3
 8003940:	2204      	movs	r2, #4
 8003942:	f011 fd1a 	bl	801537a <read>
		        read(PATHSERVER_FD, path, plen);
 8003946:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8003950:	200b      	movs	r0, #11
 8003952:	4611      	mov	r1, r2
 8003954:	461a      	mov	r2, r3
 8003956:	f011 fd10 	bl	801537a <read>
			    newfd = npaths + 3 + TASK_LIMIT;
 800395a:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 800395e:	f103 020b 	add.w	r2, r3, #11
 8003962:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003966:	601a      	str	r2, [r3, #0]
			    memcpy(paths[npaths], path, plen);
 8003968:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 800396c:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8003970:	015b      	lsls	r3, r3, #5
 8003972:	18d1      	adds	r1, r2, r3
 8003974:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800397e:	4608      	mov	r0, r1
 8003980:	4611      	mov	r1, r2
 8003982:	461a      	mov	r2, r3
 8003984:	f011 fc9c 	bl	80152c0 <memcpy>
		        npaths++;
 8003988:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 800398c:	3301      	adds	r3, #1
 800398e:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
				write(replyfd, &newfd, 4);
 8003992:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	461a      	mov	r2, r3
 800399a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800399e:	4610      	mov	r0, r2
 80039a0:	4619      	mov	r1, r3
 80039a2:	2204      	movs	r2, #4
 80039a4:	f011 fce2 	bl	801536c <write>
		        break;
 80039a8:	e144      	b.n	8003c34 <pathserver+0x688>

		    case PATH_CMD_REGISTER_FS:
		        read(PATHSERVER_FD, &plen, 4);
 80039aa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80039ae:	200b      	movs	r0, #11
 80039b0:	4619      	mov	r1, r3
 80039b2:	2204      	movs	r2, #4
 80039b4:	f011 fce1 	bl	801537a <read>
		        read(PATHSERVER_FD, fs_type, plen);
 80039b8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80039c2:	200b      	movs	r0, #11
 80039c4:	4611      	mov	r1, r2
 80039c6:	461a      	mov	r2, r3
 80039c8:	f011 fcd7 	bl	801537a <read>
		        fs_fds[nfs_types] = replyfd;
 80039cc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4619      	mov	r1, r3
 80039d4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80039d8:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 80039dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			    memcpy(fs_types[nfs_types], fs_type, plen);
 80039e0:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 80039e4:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	18d1      	adds	r1, r2, r3
 80039ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80039f6:	4608      	mov	r0, r1
 80039f8:	4611      	mov	r1, r2
 80039fa:	461a      	mov	r2, r3
 80039fc:	f011 fc60 	bl	80152c0 <memcpy>
		        nfs_types++;
 8003a00:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8003a04:	3301      	adds	r3, #1
 8003a06:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
		        i = 0;
 8003a0a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003a0e:	2200      	movs	r2, #0
 8003a10:	601a      	str	r2, [r3, #0]
				write(replyfd, &i, 4);
 8003a12:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	461a      	mov	r2, r3
 8003a1a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003a1e:	4610      	mov	r0, r2
 8003a20:	4619      	mov	r1, r3
 8003a22:	2204      	movs	r2, #4
 8003a24:	f011 fca2 	bl	801536c <write>
				break;
 8003a28:	e104      	b.n	8003c34 <pathserver+0x688>
			    int dlen;
			    int tlen;
			    char src[PATH_MAX];
			    char dst[PATH_MAX];
			    char type[FS_TYPE_MAX];
		        read(PATHSERVER_FD, &slen, 4);
 8003a2a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003a2e:	200b      	movs	r0, #11
 8003a30:	4619      	mov	r1, r3
 8003a32:	2204      	movs	r2, #4
 8003a34:	f011 fca1 	bl	801537a <read>
		        read(PATHSERVER_FD, src, slen);
 8003a38:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	463a      	mov	r2, r7
 8003a40:	200b      	movs	r0, #11
 8003a42:	4611      	mov	r1, r2
 8003a44:	461a      	mov	r2, r3
 8003a46:	f011 fc98 	bl	801537a <read>
		        read(PATHSERVER_FD, &dlen, 4);
 8003a4a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003a4e:	200b      	movs	r0, #11
 8003a50:	4619      	mov	r1, r3
 8003a52:	2204      	movs	r2, #4
 8003a54:	f011 fc91 	bl	801537a <read>
		        read(PATHSERVER_FD, dst, dlen);
 8003a58:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f107 0220 	add.w	r2, r7, #32
 8003a62:	200b      	movs	r0, #11
 8003a64:	4611      	mov	r1, r2
 8003a66:	461a      	mov	r2, r3
 8003a68:	f011 fc87 	bl	801537a <read>
		        read(PATHSERVER_FD, &tlen, 4);
 8003a6c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003a70:	200b      	movs	r0, #11
 8003a72:	4619      	mov	r1, r3
 8003a74:	2204      	movs	r2, #4
 8003a76:	f011 fc80 	bl	801537a <read>
		        read(PATHSERVER_FD, type, tlen);
 8003a7a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003a84:	200b      	movs	r0, #11
 8003a86:	4611      	mov	r1, r2
 8003a88:	461a      	mov	r2, r3
 8003a8a:	f011 fc76 	bl	801537a <read>

		        /* Search for filesystem types */
			    for (i = 0; i < nfs_types; i++) {
 8003a8e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003a92:	2200      	movs	r2, #0
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	e020      	b.n	8003ada <pathserver+0x52e>
				    if (*fs_types[i] && strcmp(type, fs_types[i]) == 0) {
 8003a98:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8003aa2:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d010      	beq.n	8003acc <pathserver+0x520>
 8003aaa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003abc:	4610      	mov	r0, r2
 8003abe:	4619      	mov	r1, r3
 8003ac0:	f001 f97e 	bl	8004dc0 <strcmp>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d100      	bne.n	8003acc <pathserver+0x520>
					    break;
 8003aca:	e00d      	b.n	8003ae8 <pathserver+0x53c>
		        read(PATHSERVER_FD, dst, dlen);
		        read(PATHSERVER_FD, &tlen, 4);
		        read(PATHSERVER_FD, type, tlen);

		        /* Search for filesystem types */
			    for (i = 0; i < nfs_types; i++) {
 8003acc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	1c5a      	adds	r2, r3, #1
 8003ad4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	dbd7      	blt.n	8003a98 <pathserver+0x4ec>
				    if (*fs_types[i] && strcmp(type, fs_types[i]) == 0) {
					    break;
				    }
			    }

			    if (i >= nfs_types) {
 8003ae8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8003af2:	429a      	cmp	r2, r3
 8003af4:	db10      	blt.n	8003b18 <pathserver+0x56c>
				    status = -1; /* Error: not found */
 8003af6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003afa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003afe:	601a      	str	r2, [r3, #0]
				    write(replyfd, &status, 4);
 8003b00:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	461a      	mov	r2, r3
 8003b08:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003b0c:	4610      	mov	r0, r2
 8003b0e:	4619      	mov	r1, r3
 8003b10:	2204      	movs	r2, #4
 8003b12:	f011 fc2b 	bl	801536c <write>
				    break;
 8003b16:	e08d      	b.n	8003c34 <pathserver+0x688>
			    }

                mounts[nmounts].fs = fs_fds[i];
 8003b18:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8003b22:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b26:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8003b2a:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 8003b2e:	4613      	mov	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	4413      	add	r3, r2
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	4403      	add	r3, r0
 8003b38:	6019      	str	r1, [r3, #0]

		        /* Search for device */
			    for (i = 0; i < npaths; i++) {
 8003b3a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b3e:	2200      	movs	r2, #0
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	e020      	b.n	8003b86 <pathserver+0x5da>
				    if (*paths[i] && strcmp(src, paths[i]) == 0) {
 8003b44:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8003b4e:	015b      	lsls	r3, r3, #5
 8003b50:	4413      	add	r3, r2
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00f      	beq.n	8003b78 <pathserver+0x5cc>
 8003b58:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8003b62:	015b      	lsls	r3, r3, #5
 8003b64:	4413      	add	r3, r2
 8003b66:	463a      	mov	r2, r7
 8003b68:	4610      	mov	r0, r2
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	f001 f928 	bl	8004dc0 <strcmp>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d100      	bne.n	8003b78 <pathserver+0x5cc>
					    break;
 8003b76:	e00d      	b.n	8003b94 <pathserver+0x5e8>
			    }

                mounts[nmounts].fs = fs_fds[i];

		        /* Search for device */
			    for (i = 0; i < npaths; i++) {
 8003b78:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	1c5a      	adds	r2, r3, #1
 8003b80:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8003b90:	429a      	cmp	r2, r3
 8003b92:	dbd7      	blt.n	8003b44 <pathserver+0x598>
				    if (*paths[i] && strcmp(src, paths[i]) == 0) {
					    break;
				    }
			    }

			    if (i >= npaths) {
 8003b94:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	db10      	blt.n	8003bc4 <pathserver+0x618>
				    status = -1; /* Error: not found */
 8003ba2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003ba6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003baa:	601a      	str	r2, [r3, #0]
				    write(replyfd, &status, 4);
 8003bac:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003bb8:	4610      	mov	r0, r2
 8003bba:	4619      	mov	r1, r3
 8003bbc:	2204      	movs	r2, #4
 8003bbe:	f011 fbd5 	bl	801536c <write>
				    break;
 8003bc2:	e037      	b.n	8003c34 <pathserver+0x688>
			    }

                /* Store mount point */
                mounts[nmounts].dev = i + 3 + TASK_LIMIT;
 8003bc4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f103 010b 	add.w	r1, r3, #11
 8003bce:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8003bd2:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4413      	add	r3, r2
 8003bdc:	00db      	lsls	r3, r3, #3
 8003bde:	4403      	add	r3, r0
 8003be0:	6059      	str	r1, [r3, #4]
			    memcpy(mounts[nmounts].path, dst, dlen);
 8003be2:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003be6:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 8003bea:	4613      	mov	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	3308      	adds	r3, #8
 8003bf4:	4419      	add	r1, r3
 8003bf6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f107 0220 	add.w	r2, r7, #32
 8003c00:	4608      	mov	r0, r1
 8003c02:	4611      	mov	r1, r2
 8003c04:	461a      	mov	r2, r3
 8003c06:	f011 fb5b 	bl	80152c0 <memcpy>
			    nmounts++;
 8003c0a:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8003c0e:	3301      	adds	r3, #1
 8003c10:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454

                status = 0;
 8003c14:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]
                write(replyfd, &status, 4);
 8003c1c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	461a      	mov	r2, r3
 8003c24:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003c28:	4610      	mov	r0, r2
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	2204      	movs	r2, #4
 8003c2e:	f011 fb9d 	bl	801536c <write>
		    }   break;
 8003c32:	bf00      	nop

		    default:
		        ;
		}
	}
 8003c34:	e4ee      	b.n	8003614 <pathserver+0x68>
 8003c36:	bf00      	nop

08003c38 <path_register>:
}

int path_register(const char *pathname)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b092      	sub	sp, #72	; 0x48
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
    int cmd = PATH_CMD_REGISTER_PATH;
 8003c40:	2303      	movs	r3, #3
 8003c42:	643b      	str	r3, [r7, #64]	; 0x40
	unsigned int replyfd = getpid() + 3;
 8003c44:	f011 fb8b 	bl	801535e <getpid>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	3303      	adds	r3, #3
 8003c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
	size_t plen = strlen(pathname)+1;
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f001 f8f0 	bl	8004e34 <strlen>
 8003c54:	4603      	mov	r3, r0
 8003c56:	3301      	adds	r3, #1
 8003c58:	63bb      	str	r3, [r7, #56]	; 0x38
	int fd = -1;
 8003c5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c5e:	637b      	str	r3, [r7, #52]	; 0x34
	char buf[4+4+4+PATH_MAX];
	int pos = 0;
 8003c60:	2300      	movs	r3, #0
 8003c62:	647b      	str	r3, [r7, #68]	; 0x44

	path_write_data(buf, &cmd, 4, pos);
 8003c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c66:	f107 0208 	add.w	r2, r7, #8
 8003c6a:	441a      	add	r2, r3
 8003c6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c70:	4610      	mov	r0, r2
 8003c72:	4619      	mov	r1, r3
 8003c74:	2204      	movs	r2, #4
 8003c76:	f011 fb23 	bl	80152c0 <memcpy>
 8003c7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	647b      	str	r3, [r7, #68]	; 0x44
	path_write_data(buf, &replyfd, 4, pos);
 8003c80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c82:	f107 0208 	add.w	r2, r7, #8
 8003c86:	441a      	add	r2, r3
 8003c88:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	4619      	mov	r1, r3
 8003c90:	2204      	movs	r2, #4
 8003c92:	f011 fb15 	bl	80152c0 <memcpy>
 8003c96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c98:	3304      	adds	r3, #4
 8003c9a:	647b      	str	r3, [r7, #68]	; 0x44
	path_write_data(buf, &plen, 4, pos);
 8003c9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c9e:	f107 0208 	add.w	r2, r7, #8
 8003ca2:	441a      	add	r2, r3
 8003ca4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003ca8:	4610      	mov	r0, r2
 8003caa:	4619      	mov	r1, r3
 8003cac:	2204      	movs	r2, #4
 8003cae:	f011 fb07 	bl	80152c0 <memcpy>
 8003cb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	647b      	str	r3, [r7, #68]	; 0x44
	path_write_data(buf, pathname, plen, pos);
 8003cb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cba:	f107 0208 	add.w	r2, r7, #8
 8003cbe:	441a      	add	r2, r3
 8003cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	6879      	ldr	r1, [r7, #4]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	f011 fafa 	bl	80152c0 <memcpy>
 8003ccc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd0:	4413      	add	r3, r2
 8003cd2:	647b      	str	r3, [r7, #68]	; 0x44

	write(PATHSERVER_FD, buf, pos);
 8003cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cd6:	f107 0208 	add.w	r2, r7, #8
 8003cda:	200b      	movs	r0, #11
 8003cdc:	4611      	mov	r1, r2
 8003cde:	461a      	mov	r2, r3
 8003ce0:	f011 fb44 	bl	801536c <write>
	read(replyfd, &fd, 4);
 8003ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003cec:	4610      	mov	r0, r2
 8003cee:	4619      	mov	r1, r3
 8003cf0:	2204      	movs	r2, #4
 8003cf2:	f011 fb42 	bl	801537a <read>

	return fd;
 8003cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3748      	adds	r7, #72	; 0x48
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <path_register_fs>:

int path_register_fs(const char *type)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b092      	sub	sp, #72	; 0x48
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
    int cmd = PATH_CMD_REGISTER_FS;
 8003d08:	2304      	movs	r3, #4
 8003d0a:	643b      	str	r3, [r7, #64]	; 0x40
	unsigned int replyfd = getpid() + 3;
 8003d0c:	f011 fb27 	bl	801535e <getpid>
 8003d10:	4603      	mov	r3, r0
 8003d12:	3303      	adds	r3, #3
 8003d14:	63fb      	str	r3, [r7, #60]	; 0x3c
	size_t plen = strlen(type)+1;
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f001 f88c 	bl	8004e34 <strlen>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	3301      	adds	r3, #1
 8003d20:	63bb      	str	r3, [r7, #56]	; 0x38
	int fd = -1;
 8003d22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d26:	637b      	str	r3, [r7, #52]	; 0x34
	char buf[4+4+4+PATH_MAX];
	int pos = 0;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	647b      	str	r3, [r7, #68]	; 0x44

	path_write_data(buf, &cmd, 4, pos);
 8003d2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d2e:	f107 0208 	add.w	r2, r7, #8
 8003d32:	441a      	add	r2, r3
 8003d34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003d38:	4610      	mov	r0, r2
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	2204      	movs	r2, #4
 8003d3e:	f011 fabf 	bl	80152c0 <memcpy>
 8003d42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d44:	3304      	adds	r3, #4
 8003d46:	647b      	str	r3, [r7, #68]	; 0x44
	path_write_data(buf, &replyfd, 4, pos);
 8003d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d4a:	f107 0208 	add.w	r2, r7, #8
 8003d4e:	441a      	add	r2, r3
 8003d50:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003d54:	4610      	mov	r0, r2
 8003d56:	4619      	mov	r1, r3
 8003d58:	2204      	movs	r2, #4
 8003d5a:	f011 fab1 	bl	80152c0 <memcpy>
 8003d5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d60:	3304      	adds	r3, #4
 8003d62:	647b      	str	r3, [r7, #68]	; 0x44
	path_write_data(buf, &plen, 4, pos);
 8003d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d66:	f107 0208 	add.w	r2, r7, #8
 8003d6a:	441a      	add	r2, r3
 8003d6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003d70:	4610      	mov	r0, r2
 8003d72:	4619      	mov	r1, r3
 8003d74:	2204      	movs	r2, #4
 8003d76:	f011 faa3 	bl	80152c0 <memcpy>
 8003d7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	647b      	str	r3, [r7, #68]	; 0x44
	path_write_data(buf, type, plen, pos);
 8003d80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d82:	f107 0208 	add.w	r2, r7, #8
 8003d86:	441a      	add	r2, r3
 8003d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8a:	4610      	mov	r0, r2
 8003d8c:	6879      	ldr	r1, [r7, #4]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	f011 fa96 	bl	80152c0 <memcpy>
 8003d94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d98:	4413      	add	r3, r2
 8003d9a:	647b      	str	r3, [r7, #68]	; 0x44

	write(PATHSERVER_FD, buf, pos);
 8003d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d9e:	f107 0208 	add.w	r2, r7, #8
 8003da2:	200b      	movs	r0, #11
 8003da4:	4611      	mov	r1, r2
 8003da6:	461a      	mov	r2, r3
 8003da8:	f011 fae0 	bl	801536c <write>
	read(replyfd, &fd, 4);
 8003dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dae:	461a      	mov	r2, r3
 8003db0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003db4:	4610      	mov	r0, r2
 8003db6:	4619      	mov	r1, r3
 8003db8:	2204      	movs	r2, #4
 8003dba:	f011 fade 	bl	801537a <read>

	return fd;
 8003dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3748      	adds	r7, #72	; 0x48
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <mount>:

int mount(const char *src, const char *dst, const char *type, int flags)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b0a2      	sub	sp, #136	; 0x88
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
 8003dd4:	603b      	str	r3, [r7, #0]
    int cmd = PATH_CMD_MOUNT;
 8003dd6:	2305      	movs	r3, #5
 8003dd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	unsigned int replyfd = getpid() + 3;
 8003ddc:	f011 fabf 	bl	801535e <getpid>
 8003de0:	4603      	mov	r3, r0
 8003de2:	3303      	adds	r3, #3
 8003de4:	67fb      	str	r3, [r7, #124]	; 0x7c
	size_t slen = strlen(src)+1;
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f001 f824 	bl	8004e34 <strlen>
 8003dec:	4603      	mov	r3, r0
 8003dee:	3301      	adds	r3, #1
 8003df0:	67bb      	str	r3, [r7, #120]	; 0x78
	size_t dlen = strlen(dst) + 1;
 8003df2:	68b8      	ldr	r0, [r7, #8]
 8003df4:	f001 f81e 	bl	8004e34 <strlen>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	677b      	str	r3, [r7, #116]	; 0x74
	size_t tlen = strlen(type) + 1;
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f001 f818 	bl	8004e34 <strlen>
 8003e04:	4603      	mov	r3, r0
 8003e06:	3301      	adds	r3, #1
 8003e08:	673b      	str	r3, [r7, #112]	; 0x70
	int status;
	char buf[4 + 4 + 4 + PATH_MAX + 4 + PATH_MAX + 4 + FS_TYPE_MAX];
	int pos = 0;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	path_write_data(buf, &cmd, 4, pos);
 8003e10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e14:	f107 0210 	add.w	r2, r7, #16
 8003e18:	441a      	add	r2, r3
 8003e1a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003e1e:	4610      	mov	r0, r2
 8003e20:	4619      	mov	r1, r3
 8003e22:	2204      	movs	r2, #4
 8003e24:	f011 fa4c 	bl	80152c0 <memcpy>
 8003e28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	path_write_data(buf, &replyfd, 4, pos);
 8003e32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e36:	f107 0210 	add.w	r2, r7, #16
 8003e3a:	441a      	add	r2, r3
 8003e3c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003e40:	4610      	mov	r0, r2
 8003e42:	4619      	mov	r1, r3
 8003e44:	2204      	movs	r2, #4
 8003e46:	f011 fa3b 	bl	80152c0 <memcpy>
 8003e4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e4e:	3304      	adds	r3, #4
 8003e50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	path_write_data(buf, &slen, 4, pos);
 8003e54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e58:	f107 0210 	add.w	r2, r7, #16
 8003e5c:	441a      	add	r2, r3
 8003e5e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003e62:	4610      	mov	r0, r2
 8003e64:	4619      	mov	r1, r3
 8003e66:	2204      	movs	r2, #4
 8003e68:	f011 fa2a 	bl	80152c0 <memcpy>
 8003e6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e70:	3304      	adds	r3, #4
 8003e72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	path_write_data(buf, src, slen, pos);
 8003e76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e7a:	f107 0210 	add.w	r2, r7, #16
 8003e7e:	441a      	add	r2, r3
 8003e80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e82:	4610      	mov	r0, r2
 8003e84:	68f9      	ldr	r1, [r7, #12]
 8003e86:	461a      	mov	r2, r3
 8003e88:	f011 fa1a 	bl	80152c0 <memcpy>
 8003e8c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003e90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e92:	4413      	add	r3, r2
 8003e94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	path_write_data(buf, &dlen, 4, pos);
 8003e98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e9c:	f107 0210 	add.w	r2, r7, #16
 8003ea0:	441a      	add	r2, r3
 8003ea2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003ea6:	4610      	mov	r0, r2
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	2204      	movs	r2, #4
 8003eac:	f011 fa08 	bl	80152c0 <memcpy>
 8003eb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003eb4:	3304      	adds	r3, #4
 8003eb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	path_write_data(buf, dst, dlen, pos);
 8003eba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ebe:	f107 0210 	add.w	r2, r7, #16
 8003ec2:	441a      	add	r2, r3
 8003ec4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ec6:	4610      	mov	r0, r2
 8003ec8:	68b9      	ldr	r1, [r7, #8]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	f011 f9f8 	bl	80152c0 <memcpy>
 8003ed0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003ed4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	path_write_data(buf, &tlen, 4, pos);
 8003edc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ee0:	f107 0210 	add.w	r2, r7, #16
 8003ee4:	441a      	add	r2, r3
 8003ee6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003eea:	4610      	mov	r0, r2
 8003eec:	4619      	mov	r1, r3
 8003eee:	2204      	movs	r2, #4
 8003ef0:	f011 f9e6 	bl	80152c0 <memcpy>
 8003ef4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ef8:	3304      	adds	r3, #4
 8003efa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	path_write_data(buf, type, tlen, pos);
 8003efe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f02:	f107 0210 	add.w	r2, r7, #16
 8003f06:	441a      	add	r2, r3
 8003f08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f0a:	4610      	mov	r0, r2
 8003f0c:	6879      	ldr	r1, [r7, #4]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	f011 f9d6 	bl	80152c0 <memcpy>
 8003f14:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003f18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	write(PATHSERVER_FD, buf, pos);
 8003f20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f24:	f107 0210 	add.w	r2, r7, #16
 8003f28:	200b      	movs	r0, #11
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	f011 fa1d 	bl	801536c <write>
	read(replyfd, &status, 4);
 8003f32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f34:	461a      	mov	r2, r3
 8003f36:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003f3a:	4610      	mov	r0, r2
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	2204      	movs	r2, #4
 8003f40:	f011 fa1b 	bl	801537a <read>

	return status;
 8003f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3788      	adds	r7, #136	; 0x88
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop

08003f50 <pipe_read_release>:



int pipe_read_release(struct event_monitor *monitor, int event,
                      struct task_control_block *task, void *data)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
 8003f5c:	603b      	str	r3, [r7, #0]
    struct file *file = data;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	617b      	str	r3, [r7, #20]
    struct file_request *request = (void*)task->stack->r0;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f68:	613b      	str	r3, [r7, #16]

    return file_read(file, request, monitor);
 8003f6a:	6978      	ldr	r0, [r7, #20]
 8003f6c:	6939      	ldr	r1, [r7, #16]
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	f7fd f812 	bl	8000f98 <file_read>
 8003f74:	4603      	mov	r3, r0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3718      	adds	r7, #24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop

08003f80 <pipe_write_release>:

int pipe_write_release(struct event_monitor *monitor, int event,
                       struct task_control_block *task, void *data)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
 8003f8c:	603b      	str	r3, [r7, #0]
    struct file *file = data;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	617b      	str	r3, [r7, #20]
    struct file_request *request = (void*)task->stack->r0;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f98:	613b      	str	r3, [r7, #16]

    return file_write(file, request, monitor);
 8003f9a:	6978      	ldr	r0, [r7, #20]
 8003f9c:	6939      	ldr	r1, [r7, #16]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	f7fd f844 	bl	800102c <file_write>
 8003fa4:	4603      	mov	r3, r0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3718      	adds	r7, #24
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop

08003fb0 <regfile_driver_readable>:
};


int regfile_driver_readable (struct regfile *regfile, struct file_request *request,
                           struct event_monitor *monitor)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
    if (regfile->buzy)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d001      	beq.n	8003fc8 <regfile_driver_readable+0x18>
        return FILE_ACCESS_ACCEPT;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e001      	b.n	8003fcc <regfile_driver_readable+0x1c>
    else
        return FILE_ACCESS_ERROR;
 8003fc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3714      	adds	r7, #20
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <regfile_driver_writable>:

int regfile_driver_writable (struct regfile *regfile, struct file_request *request,
                           struct event_monitor *monitor)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
    if (regfile->buzy)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <regfile_driver_writable+0x18>
        return FILE_ACCESS_ACCEPT;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e001      	b.n	8003ff4 <regfile_driver_writable+0x1c>
    else
        return FILE_ACCESS_ERROR;
 8003ff0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <regfile_driver_lseekable>:

int regfile_driver_lseekable (struct regfile *regfile, struct file_request *request,
                            struct event_monitor *monitor)
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
    if (regfile->buzy)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <regfile_driver_lseekable+0x18>
        return FILE_ACCESS_ACCEPT;
 8004014:	2301      	movs	r3, #1
 8004016:	e001      	b.n	800401c <regfile_driver_lseekable+0x1c>
    else
        return FILE_ACCESS_ERROR;
 8004018:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800401c:	4618      	mov	r0, r3
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <regfile_driver_read>:

int regfile_driver_read (struct regfile *regfile, struct file_request *request,
                       struct event_monitor *monitor)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
    int size = request->size;
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	617b      	str	r3, [r7, #20]
    if (size > REGFILE_BUF)
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	2b40      	cmp	r3, #64	; 0x40
 800403e:	dd01      	ble.n	8004044 <regfile_driver_read+0x1c>
        size = REGFILE_BUF;
 8004040:	2340      	movs	r3, #64	; 0x40
 8004042:	617b      	str	r3, [r7, #20]

    memcpy(request->buf, regfile->buf, size);
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	6859      	ldr	r1, [r3, #4]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f103 0220 	add.w	r2, r3, #32
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	4608      	mov	r0, r1
 8004052:	4611      	mov	r1, r2
 8004054:	461a      	mov	r2, r3
 8004056:	f011 f933 	bl	80152c0 <memcpy>

    /* still buzy until driver write response */
    return size;
 800405a:	697b      	ldr	r3, [r7, #20]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3718      	adds	r7, #24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <regfile_driver_write>:

int regfile_driver_write (struct regfile *regfile, struct file_request *request,
                        struct event_monitor *monitor)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
    char *data_buf = request->buf;
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	613b      	str	r3, [r7, #16]
    int len = request->size;
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	617b      	str	r3, [r7, #20]
    if (len > REGFILE_BUF)
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	2b40      	cmp	r3, #64	; 0x40
 8004080:	dd01      	ble.n	8004086 <regfile_driver_write+0x22>
        len = REGFILE_BUF;
 8004082:	2340      	movs	r3, #64	; 0x40
 8004084:	617b      	str	r3, [r7, #20]

    if (len > 0) {
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	2b00      	cmp	r3, #0
 800408a:	dd08      	ble.n	800409e <regfile_driver_write+0x3a>
        memcpy(regfile->buf, data_buf, len);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f103 0220 	add.w	r2, r3, #32
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	4610      	mov	r0, r2
 8004096:	6939      	ldr	r1, [r7, #16]
 8004098:	461a      	mov	r2, r3
 800409a:	f011 f911 	bl	80152c0 <memcpy>
    }
    regfile->transfer_len = len;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	661a      	str	r2, [r3, #96]	; 0x60
    regfile->buzy = 0;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	619a      	str	r2, [r3, #24]
	event_monitor_release(monitor, regfile->event);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	4619      	mov	r1, r3
 80040b2:	f7fc fcd1 	bl	8000a58 <event_monitor_release>
    return len;
 80040b6:	697b      	ldr	r3, [r7, #20]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3718      	adds	r7, #24
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <regfile_driver_lseek>:

int regfile_driver_lseek (struct regfile *regfile, struct file_request *request,
                        struct event_monitor *monitor)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
    regfile->transfer_len = request->size;
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	661a      	str	r2, [r3, #96]	; 0x60
    regfile->buzy = 0;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	619a      	str	r2, [r3, #24]
	event_monitor_release(monitor, regfile->event);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	4619      	mov	r1, r3
 80040e2:	f7fc fcb9 	bl	8000a58 <event_monitor_release>
    return request->size;
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	689b      	ldr	r3, [r3, #8]
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop

080040f4 <regfile_request_readable>:
 *  5. Get transfer_len
 *  6. Read data from buffer
 */
int regfile_request_readable (struct regfile *regfile, struct file_request *request,
                            struct event_monitor *monitor)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b09a      	sub	sp, #104	; 0x68
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
    struct task_control_block *task = request->task;
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	663b      	str	r3, [r7, #96]	; 0x60

    if (regfile->request_pid == 0) {
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d169      	bne.n	80041e2 <regfile_request_readable+0xee>
        /* try to send request */
        struct file *driver = regfile->driver_file;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	65fb      	str	r3, [r7, #92]	; 0x5c
        int size = request->size;
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	667b      	str	r3, [r7, #100]	; 0x64
        if (size > REGFILE_BUF)
 800411a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800411c:	2b40      	cmp	r3, #64	; 0x40
 800411e:	dd01      	ble.n	8004124 <regfile_request_readable+0x30>
            size = REGFILE_BUF;
 8004120:	2340      	movs	r3, #64	; 0x40
 8004122:	667b      	str	r3, [r7, #100]	; 0x64

        struct fs_request fs_request = {
 8004124:	f107 0314 	add.w	r3, r7, #20
 8004128:	2200      	movs	r2, #0
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	3304      	adds	r3, #4
 800412e:	2200      	movs	r2, #0
 8004130:	601a      	str	r2, [r3, #0]
 8004132:	3304      	adds	r3, #4
 8004134:	2200      	movs	r2, #0
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	3304      	adds	r3, #4
 800413a:	2200      	movs	r2, #0
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	3304      	adds	r3, #4
 8004140:	2200      	movs	r2, #0
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	3304      	adds	r3, #4
 8004146:	2200      	movs	r2, #0
 8004148:	601a      	str	r2, [r3, #0]
 800414a:	3304      	adds	r3, #4
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	3304      	adds	r3, #4
 8004152:	2200      	movs	r2, #0
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	3304      	adds	r3, #4
 8004158:	2200      	movs	r2, #0
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	3304      	adds	r3, #4
 800415e:	2200      	movs	r2, #0
 8004160:	601a      	str	r2, [r3, #0]
 8004162:	3304      	adds	r3, #4
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	3304      	adds	r3, #4
 800416a:	2200      	movs	r2, #0
 800416c:	601a      	str	r2, [r3, #0]
 800416e:	3304      	adds	r3, #4
 8004170:	2200      	movs	r2, #0
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	3304      	adds	r3, #4
 8004176:	2200      	movs	r2, #0
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	3304      	adds	r3, #4
 800417c:	2302      	movs	r3, #2
 800417e:	617b      	str	r3, [r7, #20]
            .cmd = FS_CMD_READ,
            .from = task->pid,
 8004180:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004182:	685b      	ldr	r3, [r3, #4]
        struct file *driver = regfile->driver_file;
        int size = request->size;
        if (size > REGFILE_BUF)
            size = REGFILE_BUF;

        struct fs_request fs_request = {
 8004184:	61bb      	str	r3, [r7, #24]
            .cmd = FS_CMD_READ,
            .from = task->pid,
            .target = regfile->file.fd,
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
        struct file *driver = regfile->driver_file;
        int size = request->size;
        if (size > REGFILE_BUF)
            size = REGFILE_BUF;

        struct fs_request fs_request = {
 800418a:	623b      	str	r3, [r7, #32]
 800418c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800418e:	647b      	str	r3, [r7, #68]	; 0x44
            .cmd = FS_CMD_READ,
            .from = task->pid,
            .target = regfile->file.fd,
            .size = size,
            .pos = regfile->pos
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	69db      	ldr	r3, [r3, #28]
        struct file *driver = regfile->driver_file;
        int size = request->size;
        if (size > REGFILE_BUF)
            size = REGFILE_BUF;

        struct fs_request fs_request = {
 8004194:	64bb      	str	r3, [r7, #72]	; 0x48
            .target = regfile->file.fd,
            .size = size,
            .pos = regfile->pos
        };

        struct file_request file_request = {
 8004196:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800419a:	2200      	movs	r2, #0
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	3304      	adds	r3, #4
 80041a0:	2200      	movs	r2, #0
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	3304      	adds	r3, #4
 80041a6:	2200      	movs	r2, #0
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	3304      	adds	r3, #4
 80041ac:	2200      	movs	r2, #0
 80041ae:	601a      	str	r2, [r3, #0]
 80041b0:	3304      	adds	r3, #4
 80041b2:	f107 0314 	add.w	r3, r7, #20
 80041b6:	653b      	str	r3, [r7, #80]	; 0x50
 80041b8:	2338      	movs	r3, #56	; 0x38
 80041ba:	657b      	str	r3, [r7, #84]	; 0x54
            .task = NULL,
            .buf = (char *)&fs_request,
            .size = sizeof(fs_request),
        };
        if (file_write(driver, &file_request, monitor) == 1) {
 80041bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80041c0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80041c2:	4619      	mov	r1, r3
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	f7fc ff31 	bl	800102c <file_write>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d107      	bne.n	80041e0 <regfile_request_readable+0xec>
            regfile->request_pid = task->pid;
 80041d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	615a      	str	r2, [r3, #20]
            regfile->buzy = 1;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2201      	movs	r2, #1
 80041dc:	619a      	str	r2, [r3, #24]
 80041de:	e00c      	b.n	80041fa <regfile_request_readable+0x106>
 80041e0:	e00b      	b.n	80041fa <regfile_request_readable+0x106>
        }
    }
    else if (regfile->request_pid == task->pid && !regfile->buzy) {
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	695a      	ldr	r2, [r3, #20]
 80041e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d105      	bne.n	80041fa <regfile_request_readable+0x106>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <regfile_request_readable+0x106>
        return FILE_ACCESS_ACCEPT;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e007      	b.n	800420a <regfile_request_readable+0x116>
    }

	event_monitor_block(monitor, regfile->event, task);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	4619      	mov	r1, r3
 8004202:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004204:	f7fc fc0a 	bl	8000a1c <event_monitor_block>
    return FILE_ACCESS_BLOCK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3768      	adds	r7, #104	; 0x68
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop

08004214 <regfile_request_writable>:
 *  6. Driver write empty data to buffer
 *  7. Get transfer_len
 */
int regfile_request_writable (struct regfile *regfile, struct file_request *request,
                            struct event_monitor *monitor)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b09a      	sub	sp, #104	; 0x68
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
    struct task_control_block *task = request->task;
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	663b      	str	r3, [r7, #96]	; 0x60

    if (regfile->request_pid == 0) {
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d174      	bne.n	8004318 <regfile_request_writable+0x104>
        /* try to send request */
        struct file *driver = regfile->driver_file;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	65fb      	str	r3, [r7, #92]	; 0x5c
        int size = request->size;
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	667b      	str	r3, [r7, #100]	; 0x64
        if (size > REGFILE_BUF)
 800423a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800423c:	2b40      	cmp	r3, #64	; 0x40
 800423e:	dd01      	ble.n	8004244 <regfile_request_writable+0x30>
            size = REGFILE_BUF;
 8004240:	2340      	movs	r3, #64	; 0x40
 8004242:	667b      	str	r3, [r7, #100]	; 0x64

        struct fs_request fs_request = {
 8004244:	f107 0314 	add.w	r3, r7, #20
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	3304      	adds	r3, #4
 800424e:	2200      	movs	r2, #0
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	3304      	adds	r3, #4
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	3304      	adds	r3, #4
 800425a:	2200      	movs	r2, #0
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	3304      	adds	r3, #4
 8004260:	2200      	movs	r2, #0
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	3304      	adds	r3, #4
 8004266:	2200      	movs	r2, #0
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	3304      	adds	r3, #4
 800426c:	2200      	movs	r2, #0
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	3304      	adds	r3, #4
 8004272:	2200      	movs	r2, #0
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	3304      	adds	r3, #4
 8004278:	2200      	movs	r2, #0
 800427a:	601a      	str	r2, [r3, #0]
 800427c:	3304      	adds	r3, #4
 800427e:	2200      	movs	r2, #0
 8004280:	601a      	str	r2, [r3, #0]
 8004282:	3304      	adds	r3, #4
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]
 8004288:	3304      	adds	r3, #4
 800428a:	2200      	movs	r2, #0
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	3304      	adds	r3, #4
 8004290:	2200      	movs	r2, #0
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	3304      	adds	r3, #4
 8004296:	2200      	movs	r2, #0
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	3304      	adds	r3, #4
 800429c:	2303      	movs	r3, #3
 800429e:	617b      	str	r3, [r7, #20]
            .cmd = FS_CMD_WRITE,
            .from = task->pid,
 80042a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042a2:	685b      	ldr	r3, [r3, #4]
        struct file *driver = regfile->driver_file;
        int size = request->size;
        if (size > REGFILE_BUF)
            size = REGFILE_BUF;

        struct fs_request fs_request = {
 80042a4:	61bb      	str	r3, [r7, #24]
            .cmd = FS_CMD_WRITE,
            .from = task->pid,
            .target = regfile->file.fd,
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
        struct file *driver = regfile->driver_file;
        int size = request->size;
        if (size > REGFILE_BUF)
            size = REGFILE_BUF;

        struct fs_request fs_request = {
 80042aa:	623b      	str	r3, [r7, #32]
 80042ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042ae:	647b      	str	r3, [r7, #68]	; 0x44
            .cmd = FS_CMD_WRITE,
            .from = task->pid,
            .target = regfile->file.fd,
            .size = size,
            .pos = regfile->pos
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	69db      	ldr	r3, [r3, #28]
        struct file *driver = regfile->driver_file;
        int size = request->size;
        if (size > REGFILE_BUF)
            size = REGFILE_BUF;

        struct fs_request fs_request = {
 80042b4:	64bb      	str	r3, [r7, #72]	; 0x48
            .target = regfile->file.fd,
            .size = size,
            .pos = regfile->pos
        };

        struct file_request file_request = {
 80042b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80042ba:	2200      	movs	r2, #0
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	3304      	adds	r3, #4
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	3304      	adds	r3, #4
 80042c6:	2200      	movs	r2, #0
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	3304      	adds	r3, #4
 80042cc:	2200      	movs	r2, #0
 80042ce:	601a      	str	r2, [r3, #0]
 80042d0:	3304      	adds	r3, #4
 80042d2:	f107 0314 	add.w	r3, r7, #20
 80042d6:	653b      	str	r3, [r7, #80]	; 0x50
 80042d8:	2338      	movs	r3, #56	; 0x38
 80042da:	657b      	str	r3, [r7, #84]	; 0x54
            .task = NULL,
            .buf = (char *)&fs_request,
            .size = sizeof(fs_request),
        };

        if (file_write(driver, &file_request, monitor) == 1) {
 80042dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80042e0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80042e2:	4619      	mov	r1, r3
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	f7fc fea1 	bl	800102c <file_write>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d112      	bne.n	8004316 <regfile_request_writable+0x102>

            memcpy(regfile->buf, request->buf, size);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f103 0120 	add.w	r1, r3, #32
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042fc:	4608      	mov	r0, r1
 80042fe:	4611      	mov	r1, r2
 8004300:	461a      	mov	r2, r3
 8004302:	f010 ffdd 	bl	80152c0 <memcpy>

            regfile->request_pid = task->pid;
 8004306:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	615a      	str	r2, [r3, #20]
            regfile->buzy = 1;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2201      	movs	r2, #1
 8004312:	619a      	str	r2, [r3, #24]
 8004314:	e00c      	b.n	8004330 <regfile_request_writable+0x11c>
 8004316:	e00b      	b.n	8004330 <regfile_request_writable+0x11c>
        }
    }
    else if (regfile->request_pid == task->pid && !regfile->buzy) {
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	695a      	ldr	r2, [r3, #20]
 800431c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	429a      	cmp	r2, r3
 8004322:	d105      	bne.n	8004330 <regfile_request_writable+0x11c>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d101      	bne.n	8004330 <regfile_request_writable+0x11c>
        return FILE_ACCESS_ACCEPT;
 800432c:	2301      	movs	r3, #1
 800432e:	e007      	b.n	8004340 <regfile_request_writable+0x12c>
    }

	event_monitor_block(monitor, regfile->event, task);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	4619      	mov	r1, r3
 8004338:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800433a:	f7fc fb6f 	bl	8000a1c <event_monitor_block>
    return FILE_ACCESS_BLOCK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3768      	adds	r7, #104	; 0x68
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <regfile_request_lseekable>:

int regfile_request_lseekable (struct regfile *regfile, struct file_request *request,
                             struct event_monitor *monitor)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b09a      	sub	sp, #104	; 0x68
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
    struct task_control_block *task = request->task;
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	663b      	str	r3, [r7, #96]	; 0x60

    if (regfile->request_pid == 0) {
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d17f      	bne.n	8004462 <regfile_request_lseekable+0x11a>
        /* try to send request */
        struct file *driver = regfile->driver_file;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	65fb      	str	r3, [r7, #92]	; 0x5c
        int size = request->size;
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	65bb      	str	r3, [r7, #88]	; 0x58
        if (size > REGFILE_BUF)
 800436e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004370:	2b40      	cmp	r3, #64	; 0x40
 8004372:	dd01      	ble.n	8004378 <regfile_request_lseekable+0x30>
            size = REGFILE_BUF;
 8004374:	2340      	movs	r3, #64	; 0x40
 8004376:	65bb      	str	r3, [r7, #88]	; 0x58

        int pos;
        switch(request->whence) {
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	2b02      	cmp	r3, #2
 800437e:	d006      	beq.n	800438e <regfile_request_lseekable+0x46>
 8004380:	2b03      	cmp	r3, #3
 8004382:	d008      	beq.n	8004396 <regfile_request_lseekable+0x4e>
 8004384:	2b01      	cmp	r3, #1
 8004386:	d10a      	bne.n	800439e <regfile_request_lseekable+0x56>
            case SEEK_SET:
                pos = 0;
 8004388:	2300      	movs	r3, #0
 800438a:	667b      	str	r3, [r7, #100]	; 0x64
                break;
 800438c:	e00a      	b.n	80043a4 <regfile_request_lseekable+0x5c>
            case SEEK_CUR:
                pos = regfile->pos;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	667b      	str	r3, [r7, #100]	; 0x64
                break;
 8004394:	e006      	b.n	80043a4 <regfile_request_lseekable+0x5c>
            case SEEK_END:
                pos = -1;
 8004396:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800439a:	667b      	str	r3, [r7, #100]	; 0x64
                break;
 800439c:	e002      	b.n	80043a4 <regfile_request_lseekable+0x5c>
            default:
                return FILE_ACCESS_ERROR;
 800439e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043a2:	e072      	b.n	800448a <regfile_request_lseekable+0x142>
        }

        struct fs_request fs_request = {
 80043a4:	f107 0310 	add.w	r3, r7, #16
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	3304      	adds	r3, #4
 80043ae:	2200      	movs	r2, #0
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	3304      	adds	r3, #4
 80043b4:	2200      	movs	r2, #0
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	3304      	adds	r3, #4
 80043ba:	2200      	movs	r2, #0
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	3304      	adds	r3, #4
 80043c0:	2200      	movs	r2, #0
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	3304      	adds	r3, #4
 80043c6:	2200      	movs	r2, #0
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	3304      	adds	r3, #4
 80043cc:	2200      	movs	r2, #0
 80043ce:	601a      	str	r2, [r3, #0]
 80043d0:	3304      	adds	r3, #4
 80043d2:	2200      	movs	r2, #0
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	3304      	adds	r3, #4
 80043d8:	2200      	movs	r2, #0
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	3304      	adds	r3, #4
 80043de:	2200      	movs	r2, #0
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	3304      	adds	r3, #4
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	3304      	adds	r3, #4
 80043ea:	2200      	movs	r2, #0
 80043ec:	601a      	str	r2, [r3, #0]
 80043ee:	3304      	adds	r3, #4
 80043f0:	2200      	movs	r2, #0
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	3304      	adds	r3, #4
 80043f6:	2200      	movs	r2, #0
 80043f8:	601a      	str	r2, [r3, #0]
 80043fa:	3304      	adds	r3, #4
 80043fc:	2304      	movs	r3, #4
 80043fe:	613b      	str	r3, [r7, #16]
            .cmd = FS_CMD_SEEK,
            .from = task->pid,
 8004400:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004402:	685b      	ldr	r3, [r3, #4]
                break;
            default:
                return FILE_ACCESS_ERROR;
        }

        struct fs_request fs_request = {
 8004404:	617b      	str	r3, [r7, #20]
            .cmd = FS_CMD_SEEK,
            .from = task->pid,
            .target = regfile->file.fd,
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
                break;
            default:
                return FILE_ACCESS_ERROR;
        }

        struct fs_request fs_request = {
 800440a:	61fb      	str	r3, [r7, #28]
            .cmd = FS_CMD_SEEK,
            .from = task->pid,
            .target = regfile->file.fd,
            .size = request->size,
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	689b      	ldr	r3, [r3, #8]
                break;
            default:
                return FILE_ACCESS_ERROR;
        }

        struct fs_request fs_request = {
 8004410:	643b      	str	r3, [r7, #64]	; 0x40
 8004412:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004414:	647b      	str	r3, [r7, #68]	; 0x44
            .target = regfile->file.fd,
            .size = request->size,
            .pos = pos,
        };

        struct file_request file_request = {
 8004416:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800441a:	2200      	movs	r2, #0
 800441c:	601a      	str	r2, [r3, #0]
 800441e:	3304      	adds	r3, #4
 8004420:	2200      	movs	r2, #0
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	3304      	adds	r3, #4
 8004426:	2200      	movs	r2, #0
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	3304      	adds	r3, #4
 800442c:	2200      	movs	r2, #0
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	3304      	adds	r3, #4
 8004432:	f107 0310 	add.w	r3, r7, #16
 8004436:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004438:	2338      	movs	r3, #56	; 0x38
 800443a:	653b      	str	r3, [r7, #80]	; 0x50
            .task = NULL,
            .buf = (char *)&fs_request,
            .size = sizeof(fs_request),
        };

        if (file_write(driver, &file_request, monitor) == 1) {
 800443c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004440:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004442:	4619      	mov	r1, r3
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	f7fc fdf1 	bl	800102c <file_write>
 800444a:	4603      	mov	r3, r0
 800444c:	2b01      	cmp	r3, #1
 800444e:	d107      	bne.n	8004460 <regfile_request_lseekable+0x118>
            regfile->request_pid = task->pid;
 8004450:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	615a      	str	r2, [r3, #20]
            regfile->buzy = 1;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2201      	movs	r2, #1
 800445c:	619a      	str	r2, [r3, #24]
 800445e:	e00c      	b.n	800447a <regfile_request_lseekable+0x132>
 8004460:	e00b      	b.n	800447a <regfile_request_lseekable+0x132>
        }
    }
    else if (regfile->request_pid == task->pid && !regfile->buzy) {
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	695a      	ldr	r2, [r3, #20]
 8004466:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	429a      	cmp	r2, r3
 800446c:	d105      	bne.n	800447a <regfile_request_lseekable+0x132>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <regfile_request_lseekable+0x132>
        return FILE_ACCESS_ACCEPT;
 8004476:	2301      	movs	r3, #1
 8004478:	e007      	b.n	800448a <regfile_request_lseekable+0x142>
    }

	event_monitor_block(monitor, regfile->event, task);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	4619      	mov	r1, r3
 8004482:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004484:	f7fc faca 	bl	8000a1c <event_monitor_block>
    return FILE_ACCESS_BLOCK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3768      	adds	r7, #104	; 0x68
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop

08004494 <regfile_request_read>:

int regfile_request_read (struct regfile *regfile, struct file_request *request,
                        struct event_monitor *monitor)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
    if (regfile->transfer_len > 0) {
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	dd12      	ble.n	80044ce <regfile_request_read+0x3a>
        memcpy(request->buf, regfile->buf, regfile->transfer_len);
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	6859      	ldr	r1, [r3, #4]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f103 0220 	add.w	r2, r3, #32
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044b6:	4608      	mov	r0, r1
 80044b8:	4611      	mov	r1, r2
 80044ba:	461a      	mov	r2, r3
 80044bc:	f010 ff00 	bl	80152c0 <memcpy>

        regfile->pos += regfile->transfer_len;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	69da      	ldr	r2, [r3, #28]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044c8:	441a      	add	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	61da      	str	r2, [r3, #28]
    }

    regfile->request_pid = 0;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	615a      	str	r2, [r3, #20]
    return regfile->transfer_len;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <regfile_request_write>:

int regfile_request_write (struct regfile *regfile, struct file_request *request,
                         struct event_monitor *monitor)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
    if (regfile->transfer_len > 0) {
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	dd06      	ble.n	8004502 <regfile_request_write+0x22>
        regfile->pos += regfile->transfer_len;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	69da      	ldr	r2, [r3, #28]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044fc:	441a      	add	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	61da      	str	r2, [r3, #28]
    }

    regfile->request_pid = 0;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	615a      	str	r2, [r3, #20]
    return regfile->transfer_len;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 800450c:	4618      	mov	r0, r3
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <regfile_request_lseek>:

int regfile_request_lseek (struct regfile *regfile, struct file_request *request,
                         struct event_monitor *monitor)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
    if (regfile->transfer_len >= 0) {
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004528:	2b00      	cmp	r3, #0
 800452a:	db03      	blt.n	8004534 <regfile_request_lseek+0x1c>
        regfile->pos = regfile->transfer_len;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	61da      	str	r2, [r3, #28]
    }

    regfile->request_pid = 0;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	615a      	str	r2, [r3, #20]
    return regfile->transfer_len;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 800453e:	4618      	mov	r0, r3
 8004540:	3714      	adds	r7, #20
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop

0800454c <regfile_event_release>:

int regfile_event_release(struct event_monitor *monitor, int event,
                        struct task_control_block *task, void *data)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
 8004558:	603b      	str	r3, [r7, #0]
    struct file *file = data;
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	617b      	str	r3, [r7, #20]
    struct file_request *request = (void*)task->stack->r0;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004564:	613b      	str	r3, [r7, #16]

    switch (task->stack->r7) {
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	2b04      	cmp	r3, #4
 800456e:	d004      	beq.n	800457a <regfile_event_release+0x2e>
 8004570:	2b0a      	cmp	r3, #10
 8004572:	d010      	beq.n	8004596 <regfile_event_release+0x4a>
 8004574:	2b03      	cmp	r3, #3
 8004576:	d007      	beq.n	8004588 <regfile_event_release+0x3c>
 8004578:	e014      	b.n	80045a4 <regfile_event_release+0x58>
        case 0x04:
            return file_read(file, request, monitor);
 800457a:	6978      	ldr	r0, [r7, #20]
 800457c:	6939      	ldr	r1, [r7, #16]
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	f7fc fd0a 	bl	8000f98 <file_read>
 8004584:	4603      	mov	r3, r0
 8004586:	e00e      	b.n	80045a6 <regfile_event_release+0x5a>
        case 0x03:
            return file_write(file, request, monitor);
 8004588:	6978      	ldr	r0, [r7, #20]
 800458a:	6939      	ldr	r1, [r7, #16]
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	f7fc fd4d 	bl	800102c <file_write>
 8004592:	4603      	mov	r3, r0
 8004594:	e007      	b.n	80045a6 <regfile_event_release+0x5a>
        case 0x0a:
            return file_lseek(file, request, monitor);
 8004596:	6978      	ldr	r0, [r7, #20]
 8004598:	6939      	ldr	r1, [r7, #16]
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	f7fc fde8 	bl	8001170 <file_lseek>
 80045a0:	4603      	mov	r3, r0
 80045a2:	e000      	b.n	80045a6 <regfile_event_release+0x5a>
        default:
            return 0;
 80045a4:	2300      	movs	r3, #0
    }
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3718      	adds	r7, #24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop

080045b0 <regfile_init>:

int regfile_init(int fd, int driver_pid, struct file *files[],
               struct memory_pool *memory_pool, struct event_monitor *monitor)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
 80045bc:	603b      	str	r3, [r7, #0]
    struct regfile *regfile;

    regfile = memory_pool_alloc(memory_pool, sizeof(*regfile));
 80045be:	6838      	ldr	r0, [r7, #0]
 80045c0:	2164      	movs	r1, #100	; 0x64
 80045c2:	f7fe fe35 	bl	8003230 <memory_pool_alloc>
 80045c6:	6178      	str	r0, [r7, #20]

    if (!regfile)
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d102      	bne.n	80045d4 <regfile_init+0x24>
        return -1;
 80045ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045d2:	e02f      	b.n	8004634 <regfile_init+0x84>

    regfile->driver_pid = driver_pid;
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	609a      	str	r2, [r3, #8]
    regfile->driver_file = files[driver_pid + 3];
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	3303      	adds	r3, #3
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	4413      	add	r3, r2
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	60da      	str	r2, [r3, #12]
    regfile->request_pid = 0;
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2200      	movs	r2, #0
 80045ee:	615a      	str	r2, [r3, #20]
    regfile->buzy = 0;
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	2200      	movs	r2, #0
 80045f4:	619a      	str	r2, [r3, #24]
    regfile->pos = 0;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2200      	movs	r2, #0
 80045fa:	61da      	str	r2, [r3, #28]
	regfile->file.ops = &regfile_ops;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	4a0f      	ldr	r2, [pc, #60]	; (800463c <regfile_init+0x8c>)
 8004600:	605a      	str	r2, [r3, #4]
    regfile->event = event_monitor_find_free(monitor);
 8004602:	6a38      	ldr	r0, [r7, #32]
 8004604:	f7fc f9ba 	bl	800097c <event_monitor_find_free>
 8004608:	4602      	mov	r2, r0
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	611a      	str	r2, [r3, #16]
    files[fd] = &regfile->file;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	4413      	add	r3, r2
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	601a      	str	r2, [r3, #0]

    event_monitor_register(monitor, regfile->event, regfile_event_release, files[fd]);
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	691a      	ldr	r2, [r3, #16]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	6879      	ldr	r1, [r7, #4]
 8004624:	440b      	add	r3, r1
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6a38      	ldr	r0, [r7, #32]
 800462a:	4611      	mov	r1, r2
 800462c:	4a04      	ldr	r2, [pc, #16]	; (8004640 <regfile_init+0x90>)
 800462e:	f7fc f9cb 	bl	80009c8 <event_monitor_register>

    return 0;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3718      	adds	r7, #24
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	2000004c 	.word	0x2000004c
 8004640:	0800454d 	.word	0x0800454d

08004644 <regfile_response>:

int regfile_response(int fd, char *buf, int len)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
    struct regfile_response response = {
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	613b      	str	r3, [r7, #16]
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	617b      	str	r3, [r7, #20]
        .transfer_len = len,
        .buf = buf
    };
    return write(fd, &response, sizeof(response));
 8004658:	f107 0310 	add.w	r3, r7, #16
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	4619      	mov	r1, r3
 8004660:	2208      	movs	r2, #8
 8004662:	f010 fe83 	bl	801536c <write>
 8004666:	4603      	mov	r3, r0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3718      	adds	r7, #24
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <regfile_readable>:

int regfile_readable (struct file *file, struct file_request *request,
                    struct event_monitor *monitor)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
    struct regfile *regfile = container_of(file, struct regfile, file);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	617b      	str	r3, [r7, #20]
    if (regfile->driver_pid == request->task->pid) {
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	689a      	ldr	r2, [r3, #8]
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	429a      	cmp	r2, r3
 800468c:	d106      	bne.n	800469c <regfile_readable+0x2c>
        return regfile_driver_readable(regfile, request, monitor);
 800468e:	6978      	ldr	r0, [r7, #20]
 8004690:	68b9      	ldr	r1, [r7, #8]
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	f7ff fc8c 	bl	8003fb0 <regfile_driver_readable>
 8004698:	4603      	mov	r3, r0
 800469a:	e005      	b.n	80046a8 <regfile_readable+0x38>
    }
    else {
        return regfile_request_readable(regfile, request, monitor);
 800469c:	6978      	ldr	r0, [r7, #20]
 800469e:	68b9      	ldr	r1, [r7, #8]
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	f7ff fd27 	bl	80040f4 <regfile_request_readable>
 80046a6:	4603      	mov	r3, r0
    }
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3718      	adds	r7, #24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <regfile_writable>:

int regfile_writable (struct file *file, struct file_request *request,
                    struct event_monitor *monitor)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
    struct regfile *regfile = container_of(file, struct regfile, file);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	617b      	str	r3, [r7, #20]
    if (regfile->driver_pid == request->task->pid) {
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d106      	bne.n	80046dc <regfile_writable+0x2c>
        return regfile_driver_writable(regfile, request, monitor);
 80046ce:	6978      	ldr	r0, [r7, #20]
 80046d0:	68b9      	ldr	r1, [r7, #8]
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	f7ff fc80 	bl	8003fd8 <regfile_driver_writable>
 80046d8:	4603      	mov	r3, r0
 80046da:	e005      	b.n	80046e8 <regfile_writable+0x38>
    }
    else {
        return regfile_request_writable(regfile, request, monitor);
 80046dc:	6978      	ldr	r0, [r7, #20]
 80046de:	68b9      	ldr	r1, [r7, #8]
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	f7ff fd97 	bl	8004214 <regfile_request_writable>
 80046e6:	4603      	mov	r3, r0
    }
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3718      	adds	r7, #24
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <regfile_read>:

int regfile_read (struct file *file, struct file_request *request,
                struct event_monitor *monitor)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
    struct regfile *regfile = container_of(file, struct regfile, file);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	617b      	str	r3, [r7, #20]
    if (regfile->driver_pid == request->task->pid) {
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	689a      	ldr	r2, [r3, #8]
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	429a      	cmp	r2, r3
 800470c:	d106      	bne.n	800471c <regfile_read+0x2c>
        return regfile_driver_read(regfile, request, monitor);
 800470e:	6978      	ldr	r0, [r7, #20]
 8004710:	68b9      	ldr	r1, [r7, #8]
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	f7ff fc88 	bl	8004028 <regfile_driver_read>
 8004718:	4603      	mov	r3, r0
 800471a:	e005      	b.n	8004728 <regfile_read+0x38>
    }
    else {
        return regfile_request_read(regfile, request, monitor);
 800471c:	6978      	ldr	r0, [r7, #20]
 800471e:	68b9      	ldr	r1, [r7, #8]
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	f7ff feb7 	bl	8004494 <regfile_request_read>
 8004726:	4603      	mov	r3, r0
    }
}
 8004728:	4618      	mov	r0, r3
 800472a:	3718      	adds	r7, #24
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <regfile_write>:

int regfile_write (struct file *file, struct file_request *request,
                 struct event_monitor *monitor)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
    struct regfile *regfile = container_of(file, struct regfile, file);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	617b      	str	r3, [r7, #20]
    if (regfile->driver_pid == request->task->pid) {
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	429a      	cmp	r2, r3
 800474c:	d106      	bne.n	800475c <regfile_write+0x2c>
        return regfile_driver_write(regfile, request, monitor);
 800474e:	6978      	ldr	r0, [r7, #20]
 8004750:	68b9      	ldr	r1, [r7, #8]
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	f7ff fc86 	bl	8004064 <regfile_driver_write>
 8004758:	4603      	mov	r3, r0
 800475a:	e005      	b.n	8004768 <regfile_write+0x38>
    }
    else {
        return regfile_request_write(regfile, request, monitor);
 800475c:	6978      	ldr	r0, [r7, #20]
 800475e:	68b9      	ldr	r1, [r7, #8]
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	f7ff febd 	bl	80044e0 <regfile_request_write>
 8004766:	4603      	mov	r3, r0
    }
}
 8004768:	4618      	mov	r0, r3
 800476a:	3718      	adds	r7, #24
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <regfile_lseekable>:

int regfile_lseekable (struct file *file, struct file_request *request,
                     struct event_monitor *monitor)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
    struct regfile *regfile = container_of(file, struct regfile, file);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	617b      	str	r3, [r7, #20]

    if (regfile->driver_pid == request->task->pid) {
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	429a      	cmp	r2, r3
 800478c:	d106      	bne.n	800479c <regfile_lseekable+0x2c>
        return regfile_driver_lseekable(regfile, request, monitor);
 800478e:	6978      	ldr	r0, [r7, #20]
 8004790:	68b9      	ldr	r1, [r7, #8]
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	f7ff fc34 	bl	8004000 <regfile_driver_lseekable>
 8004798:	4603      	mov	r3, r0
 800479a:	e005      	b.n	80047a8 <regfile_lseekable+0x38>
    }
    else {
        return regfile_request_lseekable(regfile, request, monitor);
 800479c:	6978      	ldr	r0, [r7, #20]
 800479e:	68b9      	ldr	r1, [r7, #8]
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	f7ff fdd1 	bl	8004348 <regfile_request_lseekable>
 80047a6:	4603      	mov	r3, r0
    }
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3718      	adds	r7, #24
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <regfile_lseek>:

int regfile_lseek (struct file *file, struct file_request *request,
                 struct event_monitor *monitor)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
    struct regfile *regfile = container_of(file, struct regfile, file);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	617b      	str	r3, [r7, #20]

    if (regfile->driver_pid == request->task->pid) {
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	689a      	ldr	r2, [r3, #8]
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d106      	bne.n	80047dc <regfile_lseek+0x2c>
        return regfile_driver_lseek(regfile, request, monitor);
 80047ce:	6978      	ldr	r0, [r7, #20]
 80047d0:	68b9      	ldr	r1, [r7, #8]
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	f7ff fc74 	bl	80040c0 <regfile_driver_lseek>
 80047d8:	4603      	mov	r3, r0
 80047da:	e005      	b.n	80047e8 <regfile_lseek+0x38>
    }
    else {
        return regfile_request_lseek(regfile, request, monitor);
 80047dc:	6978      	ldr	r0, [r7, #20]
 80047de:	68b9      	ldr	r1, [r7, #8]
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	f7ff fe99 	bl	8004518 <regfile_request_lseek>
 80047e6:	4603      	mov	r3, r0
    }
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3718      	adds	r7, #24
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <romdev_driver>:
#include "block.h"
#include "path.h"


void romdev_driver()
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b08e      	sub	sp, #56	; 0x38
 80047f4:	af00      	add	r7, sp, #0
    const char *request_start;
    const char *request_end;
    size_t request_len;

    /* Register path for device */
    self = getpid() + 3;
 80047f6:	f010 fdb2 	bl	801535e <getpid>
 80047fa:	4603      	mov	r3, r0
 80047fc:	3303      	adds	r3, #3
 80047fe:	627b      	str	r3, [r7, #36]	; 0x24
	fd = path_register(ROMDEV_PATH);
 8004800:	4838      	ldr	r0, [pc, #224]	; (80048e4 <romdev_driver+0xf4>)
 8004802:	f7ff fa19 	bl	8003c38 <path_register>
 8004806:	6378      	str	r0, [r7, #52]	; 0x34
	mknod(fd, 0, S_IFBLK);
 8004808:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800480a:	2100      	movs	r1, #0
 800480c:	2206      	movs	r2, #6
 800480e:	f010 fdd0 	bl	80153b2 <mknod>

    /* Service routine */
	while (1) {
	    if (read(self, &request, sizeof(request)) == sizeof(request)) {
 8004812:	1d3b      	adds	r3, r7, #4
 8004814:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004816:	4619      	mov	r1, r3
 8004818:	2214      	movs	r2, #20
 800481a:	f010 fdae 	bl	801537a <read>
 800481e:	4603      	mov	r3, r0
 8004820:	2b14      	cmp	r3, #20
 8004822:	d15e      	bne.n	80048e2 <romdev_driver+0xf2>
	        cmd = request.cmd;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	623b      	str	r3, [r7, #32]

	        switch (cmd) {
 8004828:	6a3b      	ldr	r3, [r7, #32]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d002      	beq.n	8004834 <romdev_driver+0x44>
 800482e:	2b03      	cmp	r3, #3
 8004830:	d02f      	beq.n	8004892 <romdev_driver+0xa2>
 8004832:	e04f      	b.n	80048d4 <romdev_driver+0xe4>
	            case BLOCK_CMD_READ:
	                fd = request.fd;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	637b      	str	r3, [r7, #52]	; 0x34
	                size = request.size;
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	61fb      	str	r3, [r7, #28]
	                pos = request.pos;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	61bb      	str	r3, [r7, #24]

                    /* Check boundary */
                    request_start = &_sromdev + pos;
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	4b29      	ldr	r3, [pc, #164]	; (80048e8 <romdev_driver+0xf8>)
 8004844:	4413      	add	r3, r2
 8004846:	633b      	str	r3, [r7, #48]	; 0x30
                    if (request_start < &_sromdev)
 8004848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800484a:	4b27      	ldr	r3, [pc, #156]	; (80048e8 <romdev_driver+0xf8>)
 800484c:	429a      	cmp	r2, r3
 800484e:	d205      	bcs.n	800485c <romdev_driver+0x6c>
	                    block_response(fd, NULL, -1);
 8004850:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004852:	2100      	movs	r1, #0
 8004854:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004858:	f7fb ff72 	bl	8000740 <block_response>
                    if (request_start > &_eromdev)
 800485c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800485e:	4b23      	ldr	r3, [pc, #140]	; (80048ec <romdev_driver+0xfc>)
 8004860:	429a      	cmp	r2, r3
 8004862:	d901      	bls.n	8004868 <romdev_driver+0x78>
                        request_start = &_eromdev;
 8004864:	4b21      	ldr	r3, [pc, #132]	; (80048ec <romdev_driver+0xfc>)
 8004866:	633b      	str	r3, [r7, #48]	; 0x30

                    request_end = request_start + size;
 8004868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	4413      	add	r3, r2
 800486e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (request_end > &_eromdev)
 8004870:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004872:	4b1e      	ldr	r3, [pc, #120]	; (80048ec <romdev_driver+0xfc>)
 8004874:	429a      	cmp	r2, r3
 8004876:	d901      	bls.n	800487c <romdev_driver+0x8c>
                        request_end = &_eromdev;
 8004878:	4b1c      	ldr	r3, [pc, #112]	; (80048ec <romdev_driver+0xfc>)
 800487a:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Response */
                    request_len = request_end - request_start;
 800487c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800487e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	62bb      	str	r3, [r7, #40]	; 0x28
	                block_response(fd, (char *)request_start, request_len);
 8004884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004886:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004888:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800488a:	461a      	mov	r2, r3
 800488c:	f7fb ff58 	bl	8000740 <block_response>
	                break;
 8004890:	e027      	b.n	80048e2 <romdev_driver+0xf2>

	            case BLOCK_CMD_SEEK:
	                fd = request.fd;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	637b      	str	r3, [r7, #52]	; 0x34
	                size = request.size;
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	61fb      	str	r3, [r7, #28]
	                pos = request.pos;
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	61bb      	str	r3, [r7, #24]

	                if (pos == 0) { /* SEEK_SET */
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d102      	bne.n	80048aa <romdev_driver+0xba>
	                    request_len = size;
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80048a8:	e00d      	b.n	80048c6 <romdev_driver+0xd6>
	                }
	                else if (pos < 0) { /* SEEK_END */
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	da06      	bge.n	80048be <romdev_driver+0xce>
	                    request_len = (&_eromdev - &_sromdev) + size;
 80048b0:	4b0d      	ldr	r3, [pc, #52]	; (80048e8 <romdev_driver+0xf8>)
 80048b2:	69fa      	ldr	r2, [r7, #28]
 80048b4:	1ad2      	subs	r2, r2, r3
 80048b6:	4b0d      	ldr	r3, [pc, #52]	; (80048ec <romdev_driver+0xfc>)
 80048b8:	4413      	add	r3, r2
 80048ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80048bc:	e003      	b.n	80048c6 <romdev_driver+0xd6>
	                }
	                else { /* SEEK_CUR */
	                    request_len = pos + size;
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	4413      	add	r3, r2
 80048c4:	62bb      	str	r3, [r7, #40]	; 0x28
	                }
	                lseek(fd, request_len, SEEK_SET);
 80048c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80048ca:	4619      	mov	r1, r3
 80048cc:	2201      	movs	r2, #1
 80048ce:	f010 fd7e 	bl	80153ce <lseek>
	                break;
 80048d2:	e006      	b.n	80048e2 <romdev_driver+0xf2>

	            case BLOCK_CMD_WRITE: /* readonly */
	            default:
	                block_response(fd, NULL, -1);
 80048d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80048d6:	2100      	movs	r1, #0
 80048d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048dc:	f7fb ff30 	bl	8000740 <block_response>
	        }
	    }
	}
 80048e0:	e797      	b.n	8004812 <romdev_driver+0x22>
 80048e2:	e796      	b.n	8004812 <romdev_driver+0x22>
 80048e4:	080173b0 	.word	0x080173b0
 80048e8:	080174c8 	.word	0x080174c8
 80048ec:	080174fc 	.word	0x080174fc

080048f0 <romfs_open_recur>:
    uint32_t len;
    uint8_t name[PATH_MAX];
};

int romfs_open_recur(int device, char *path, int this, struct romfs_entry *entry)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
 80048fc:	603b      	str	r3, [r7, #0]
    if (entry->isdir) {
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d040      	beq.n	8004988 <romfs_open_recur+0x98>
        /* Iterate through children */
        int pos = this + sizeof(*entry);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	3334      	adds	r3, #52	; 0x34
 800490a:	617b      	str	r3, [r7, #20]
        while (pos) {
 800490c:	e039      	b.n	8004982 <romfs_open_recur+0x92>
            /* Get entry */
            lseek(device, pos, SEEK_SET);
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	6979      	ldr	r1, [r7, #20]
 8004912:	2201      	movs	r2, #1
 8004914:	f010 fd5b 	bl	80153ce <lseek>
            read(device, entry, sizeof(*entry));
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	6839      	ldr	r1, [r7, #0]
 800491c:	2234      	movs	r2, #52	; 0x34
 800491e:	f010 fd2c 	bl	801537a <read>

            /* Compare path */
            int len = strlen((char *)entry->name);
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	3314      	adds	r3, #20
 8004926:	4618      	mov	r0, r3
 8004928:	f000 fa84 	bl	8004e34 <strlen>
 800492c:	4603      	mov	r3, r0
 800492e:	613b      	str	r3, [r7, #16]
            if (strncmp((char *)entry->name, path, len) == 0) {
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	f103 0214 	add.w	r2, r3, #20
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	4610      	mov	r0, r2
 800493a:	68b9      	ldr	r1, [r7, #8]
 800493c:	461a      	mov	r2, r3
 800493e:	f000 fa4d 	bl	8004ddc <strncmp>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d119      	bne.n	800497c <romfs_open_recur+0x8c>
                if (path[len] == '/') { /* Match directory */
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	4413      	add	r3, r2
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	2b2f      	cmp	r3, #47	; 0x2f
 8004952:	d10b      	bne.n	800496c <romfs_open_recur+0x7c>
                    return romfs_open_recur(device, path + len + 1, pos, entry);
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	3301      	adds	r3, #1
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	4413      	add	r3, r2
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	4619      	mov	r1, r3
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	f7ff ffc4 	bl	80048f0 <romfs_open_recur>
 8004968:	4603      	mov	r3, r0
 800496a:	e00f      	b.n	800498c <romfs_open_recur+0x9c>
                }
                else if (path[len] == 0) { /* Match file */
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	4413      	add	r3, r2
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <romfs_open_recur+0x8c>
                    return pos;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	e007      	b.n	800498c <romfs_open_recur+0x9c>
                }
            }

            /* Next entry */
            pos = entry->next;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	617b      	str	r3, [r7, #20]
int romfs_open_recur(int device, char *path, int this, struct romfs_entry *entry)
{
    if (entry->isdir) {
        /* Iterate through children */
        int pos = this + sizeof(*entry);
        while (pos) {
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1c2      	bne.n	800490e <romfs_open_recur+0x1e>
            /* Next entry */
            pos = entry->next;
        }
    }

    return -1;
 8004988:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800498c:	4618      	mov	r0, r3
 800498e:	3718      	adds	r7, #24
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <romfs_open>:

/*
 * return entry position
 */
int romfs_open(int device, char *path, struct romfs_entry *entry)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
    /* Get root entry */
    lseek(device, 0, SEEK_SET);
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	2100      	movs	r1, #0
 80049a4:	2201      	movs	r2, #1
 80049a6:	f010 fd12 	bl	80153ce <lseek>
    read(device, entry, sizeof(*entry));
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	6879      	ldr	r1, [r7, #4]
 80049ae:	2234      	movs	r2, #52	; 0x34
 80049b0:	f010 fce3 	bl	801537a <read>

    return romfs_open_recur(device, path, 0, entry);
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	68b9      	ldr	r1, [r7, #8]
 80049b8:	2200      	movs	r2, #0
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f7ff ff98 	bl	80048f0 <romfs_open_recur>
 80049c0:	4603      	mov	r3, r0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop

080049cc <romfs_server>:

void romfs_server()
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b0d8      	sub	sp, #352	; 0x160
 80049d0:	af00      	add	r7, sp, #0
    struct romfs_file files[ROMFS_FILE_LIMIT];
    int nfiles = 0;
 80049d2:	2300      	movs	r3, #0
 80049d4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    int self = getpid() + 3;
 80049d8:	f010 fcc1 	bl	801535e <getpid>
 80049dc:	4603      	mov	r3, r0
 80049de:	3303      	adds	r3, #3
 80049e0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    int i;
    int data_start;
    int data_end;
    char data[REGFILE_BUF];

    path_register_fs(ROMFS_TYPE);
 80049e4:	48d1      	ldr	r0, [pc, #836]	; (8004d2c <romfs_server+0x360>)
 80049e6:	f7ff f98b 	bl	8003d00 <path_register_fs>

    while (1) {
        if (read(self, &request, sizeof(request)) == sizeof(request)) {
 80049ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80049ee:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 80049f2:	4619      	mov	r1, r3
 80049f4:	2238      	movs	r2, #56	; 0x38
 80049f6:	f010 fcc0 	bl	801537a <read>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b38      	cmp	r3, #56	; 0x38
 80049fe:	f040 81dd 	bne.w	8004dbc <romfs_server+0x3f0>
            cmd = request.cmd;
 8004a02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	        switch (cmd) {
 8004a0c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	f000 8083 	beq.w	8004b1c <romfs_server+0x150>
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	f000 8167 	beq.w	8004cea <romfs_server+0x31e>
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	f040 81c5 	bne.w	8004dac <romfs_server+0x3e0>
	            case FS_CMD_OPEN:
	                device = request.device;
 8004a22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	                from = request.from;
 8004a2c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	                pos = request.pos; /* searching starting position */
 8004a36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a3c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	                pos = romfs_open(request.device, request.path + pos, &entry);
 8004a40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004a44:	6899      	ldr	r1, [r3, #8]
 8004a46:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004a4a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004a4e:	3310      	adds	r3, #16
 8004a50:	441a      	add	r2, r3
 8004a52:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004a56:	4608      	mov	r0, r1
 8004a58:	4611      	mov	r1, r2
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	f7ff ff9a 	bl	8004994 <romfs_open>
 8004a60:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134

	                if (pos >= 0) { /* Found */
 8004a64:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	db49      	blt.n	8004b00 <romfs_server+0x134>
	                    /* Register */
	                    status = path_register(request.path);
 8004a6c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004a70:	3310      	adds	r3, #16
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7ff f8e0 	bl	8003c38 <path_register>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004a7e:	601a      	str	r2, [r3, #0]

                        if (status != -1) {
 8004a80:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a8a:	d03e      	beq.n	8004b0a <romfs_server+0x13e>
                            mknod(status, 0, S_IFREG);
 8004a8c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4618      	mov	r0, r3
 8004a94:	2100      	movs	r1, #0
 8004a96:	2208      	movs	r2, #8
 8004a98:	f010 fc8b 	bl	80153b2 <mknod>
	                        files[nfiles].fd = status;
 8004a9c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004aa6:	011b      	lsls	r3, r3, #4
 8004aa8:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8004aac:	4403      	add	r3, r0
 8004aae:	3bac      	subs	r3, #172	; 0xac
 8004ab0:	601a      	str	r2, [r3, #0]
	                        files[nfiles].device = request.device;
 8004ab2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004ab6:	689a      	ldr	r2, [r3, #8]
 8004ab8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004abc:	011b      	lsls	r3, r3, #4
 8004abe:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8004ac2:	440b      	add	r3, r1
 8004ac4:	3ba8      	subs	r3, #168	; 0xa8
 8004ac6:	601a      	str	r2, [r3, #0]
	                        files[nfiles].start = pos + sizeof(entry);
 8004ac8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004acc:	3334      	adds	r3, #52	; 0x34
 8004ace:	461a      	mov	r2, r3
 8004ad0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004ad4:	011b      	lsls	r3, r3, #4
 8004ad6:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8004ada:	4403      	add	r3, r0
 8004adc:	3ba4      	subs	r3, #164	; 0xa4
 8004ade:	601a      	str	r2, [r3, #0]
	                        files[nfiles].len = entry.len;
 8004ae0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004ae4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004ae8:	011b      	lsls	r3, r3, #4
 8004aea:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8004aee:	440b      	add	r3, r1
 8004af0:	3ba0      	subs	r3, #160	; 0xa0
 8004af2:	601a      	str	r2, [r3, #0]
	                        nfiles++;
 8004af4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004af8:	3301      	adds	r3, #1
 8004afa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8004afe:	e004      	b.n	8004b0a <romfs_server+0x13e>
	                    }
	                }
	                else {
	                    status = -1;
 8004b00:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004b04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b08:	601a      	str	r2, [r3, #0]
	                }

                    /* Response */
	                write(from, &status, sizeof(status));
 8004b0a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004b0e:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8004b12:	4619      	mov	r1, r3
 8004b14:	2204      	movs	r2, #4
 8004b16:	f010 fc29 	bl	801536c <write>
	                break;
 8004b1a:	e14f      	b.n	8004dbc <romfs_server+0x3f0>
	            case FS_CMD_READ:
	                from = request.from;
 8004b1c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	                target = request.target;
 8004b26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	                size = request.size;
 8004b30:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b36:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	                pos = request.pos;
 8004b3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b40:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

                    /* Find fd */
                    for (i = 0; i < nfiles; i++) {
 8004b44:	2300      	movs	r3, #0
 8004b46:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004b4a:	e096      	b.n	8004c7a <romfs_server+0x2ae>
                        if (files[i].fd == target) {
 8004b4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b50:	011b      	lsls	r3, r3, #4
 8004b52:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004b56:	4413      	add	r3, r2
 8004b58:	3bac      	subs	r3, #172	; 0xac
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004b60:	429a      	cmp	r2, r3
 8004b62:	f040 8085 	bne.w	8004c70 <romfs_server+0x2a4>
                            device = files[i].device;
 8004b66:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b6a:	011b      	lsls	r3, r3, #4
 8004b6c:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8004b70:	4403      	add	r3, r0
 8004b72:	3ba8      	subs	r3, #168	; 0xa8
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

                            /* Check boundary */
                            data_start = files[i].start + pos;
 8004b7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b7e:	011b      	lsls	r3, r3, #4
 8004b80:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8004b84:	440b      	add	r3, r1
 8004b86:	3ba4      	subs	r3, #164	; 0xa4
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004b8e:	4413      	add	r3, r2
 8004b90:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
                            if (data_start < files[i].start) {
 8004b94:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b98:	011b      	lsls	r3, r3, #4
 8004b9a:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004b9e:	4413      	add	r3, r2
 8004ba0:	3ba4      	subs	r3, #164	; 0xa4
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	dd04      	ble.n	8004bb6 <romfs_server+0x1ea>
                                i = nfiles;
 8004bac:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004bb0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	                            break;
 8004bb4:	e068      	b.n	8004c88 <romfs_server+0x2bc>
	                        }
                            if (data_start > files[i].start + files[i].len)
 8004bb6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004bba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bbe:	011b      	lsls	r3, r3, #4
 8004bc0:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8004bc4:	4403      	add	r3, r0
 8004bc6:	3ba4      	subs	r3, #164	; 0xa4
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4619      	mov	r1, r3
 8004bcc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bd0:	011b      	lsls	r3, r3, #4
 8004bd2:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8004bd6:	4403      	add	r3, r0
 8004bd8:	3ba0      	subs	r3, #160	; 0xa0
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	440b      	add	r3, r1
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d913      	bls.n	8004c0a <romfs_server+0x23e>
                                data_start = files[i].start + files[i].len;
 8004be2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004be6:	011b      	lsls	r3, r3, #4
 8004be8:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8004bec:	440b      	add	r3, r1
 8004bee:	3ba4      	subs	r3, #164	; 0xa4
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bf8:	011b      	lsls	r3, r3, #4
 8004bfa:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8004bfe:	4403      	add	r3, r0
 8004c00:	3ba0      	subs	r3, #160	; 0xa0
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4413      	add	r3, r2
 8004c06:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148

                            data_end = data_start + size;
 8004c0a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004c0e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004c12:	4413      	add	r3, r2
 8004c14:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
                            if (data_end > files[i].start + files[i].len)
 8004c18:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004c1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c20:	011b      	lsls	r3, r3, #4
 8004c22:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8004c26:	440b      	add	r3, r1
 8004c28:	3ba4      	subs	r3, #164	; 0xa4
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c32:	011b      	lsls	r3, r3, #4
 8004c34:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8004c38:	4403      	add	r3, r0
 8004c3a:	3ba0      	subs	r3, #160	; 0xa0
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	440b      	add	r3, r1
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d914      	bls.n	8004c6e <romfs_server+0x2a2>
                                data_end = files[i].start + files[i].len;
 8004c44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c48:	011b      	lsls	r3, r3, #4
 8004c4a:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8004c4e:	440b      	add	r3, r1
 8004c50:	3ba4      	subs	r3, #164	; 0xa4
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	461a      	mov	r2, r3
 8004c56:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c5a:	011b      	lsls	r3, r3, #4
 8004c5c:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8004c60:	4403      	add	r3, r0
 8004c62:	3ba0      	subs	r3, #160	; 0xa0
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4413      	add	r3, r2
 8004c68:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
                            break;
 8004c6c:	e00c      	b.n	8004c88 <romfs_server+0x2bc>
 8004c6e:	e00b      	b.n	8004c88 <romfs_server+0x2bc>
	                target = request.target;
	                size = request.size;
	                pos = request.pos;

                    /* Find fd */
                    for (i = 0; i < nfiles; i++) {
 8004c70:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c74:	3301      	adds	r3, #1
 8004c76:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004c7a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004c7e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004c82:	429a      	cmp	r2, r3
 8004c84:	f6ff af62 	blt.w	8004b4c <romfs_server+0x180>
                            if (data_end > files[i].start + files[i].len)
                                data_end = files[i].start + files[i].len;
                            break;
                        }
                    }
                    if (i >= nfiles) {
 8004c88:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004c8c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004c90:	429a      	cmp	r2, r3
 8004c92:	db07      	blt.n	8004ca4 <romfs_server+0x2d8>
                        write(target, NULL, -1);
 8004c94:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8004c98:	2100      	movs	r1, #0
 8004c9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c9e:	f010 fb65 	bl	801536c <write>
                        break;
 8004ca2:	e08b      	b.n	8004dbc <romfs_server+0x3f0>
                    }

                    /* Get data from device */
                    lseek(device, data_start, SEEK_SET);
 8004ca4:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 8004ca8:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8004cac:	2201      	movs	r2, #1
 8004cae:	f010 fb8e 	bl	80153ce <lseek>
                    size = data_end - data_start;
 8004cb2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004cb6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
                    size = read(device, data, size);
 8004cc0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004cc4:	1d3a      	adds	r2, r7, #4
 8004cc6:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 8004cca:	4611      	mov	r1, r2
 8004ccc:	461a      	mov	r2, r3
 8004cce:	f010 fb54 	bl	801537a <read>
 8004cd2:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150

                    /* Response */
	                write(target, data, size);
 8004cd6:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004cda:	1d3a      	adds	r2, r7, #4
 8004cdc:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8004ce0:	4611      	mov	r1, r2
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	f010 fb42 	bl	801536c <write>
	                break;
 8004ce8:	e068      	b.n	8004dbc <romfs_server+0x3f0>

	            case FS_CMD_SEEK:
	                target = request.target;
 8004cea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	                size = request.size;
 8004cf4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfa:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	                pos = request.pos;
 8004cfe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d04:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

                    /* Find fd */
                    for (i = 0; i < nfiles; i++) {
 8004d08:	2300      	movs	r3, #0
 8004d0a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004d0e:	e014      	b.n	8004d3a <romfs_server+0x36e>
                        if (files[i].fd == target) {
 8004d10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d14:	011b      	lsls	r3, r3, #4
 8004d16:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8004d1a:	440b      	add	r3, r1
 8004d1c:	3bac      	subs	r3, #172	; 0xac
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d103      	bne.n	8004d30 <romfs_server+0x364>
                            break;
 8004d28:	e00d      	b.n	8004d46 <romfs_server+0x37a>
 8004d2a:	bf00      	nop
 8004d2c:	080173bc 	.word	0x080173bc
	                target = request.target;
	                size = request.size;
	                pos = request.pos;

                    /* Find fd */
                    for (i = 0; i < nfiles; i++) {
 8004d30:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d34:	3301      	adds	r3, #1
 8004d36:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004d3a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004d3e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004d42:	429a      	cmp	r2, r3
 8004d44:	dbe4      	blt.n	8004d10 <romfs_server+0x344>
                        if (files[i].fd == target) {
                            break;
                        }
                    }
                    if (i >= nfiles) {
 8004d46:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004d4a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	db07      	blt.n	8004d62 <romfs_server+0x396>
                        lseek(target, -1, SEEK_SET);
 8004d52:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8004d56:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f010 fb37 	bl	80153ce <lseek>
                        break;
 8004d60:	e02c      	b.n	8004dbc <romfs_server+0x3f0>
                    }

	                if (pos == 0) { /* SEEK_SET */
 8004d62:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d018      	beq.n	8004d9c <romfs_server+0x3d0>
	                }
	                else if (pos < 0) { /* SEEK_END */
 8004d6a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	da0d      	bge.n	8004d8e <romfs_server+0x3c2>
	                    size = (files[i].len) + size;
 8004d72:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d76:	011b      	lsls	r3, r3, #4
 8004d78:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004d7c:	4413      	add	r3, r2
 8004d7e:	3ba0      	subs	r3, #160	; 0xa0
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004d86:	4413      	add	r3, r2
 8004d88:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004d8c:	e006      	b.n	8004d9c <romfs_server+0x3d0>
	                }
	                else { /* SEEK_CUR */
	                    size = pos + size;
 8004d8e:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8004d92:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d96:	4413      	add	r3, r2
 8004d98:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	                }
	                lseek(target, size, SEEK_SET);
 8004d9c:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8004da0:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8004da4:	2201      	movs	r2, #1
 8004da6:	f010 fb12 	bl	80153ce <lseek>
	                break;
 8004daa:	e007      	b.n	8004dbc <romfs_server+0x3f0>

	            case FS_CMD_WRITE: /* readonly */
	            default:
	                write(target, NULL, -1);
 8004dac:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8004db0:	2100      	movs	r1, #0
 8004db2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004db6:	f010 fad9 	bl	801536c <write>
	        }
        }
    }
 8004dba:	e616      	b.n	80049ea <romfs_server+0x1e>
 8004dbc:	e615      	b.n	80049ea <romfs_server+0x1e>
 8004dbe:	bf00      	nop

08004dc0 <strcmp>:
#include "string.h"
#include "stm32f4xx.h"
int strcmp(const char *a, const char *b)
{
	asm(
 8004dc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004dc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004dc8:	2a01      	cmp	r2, #1
 8004dca:	bf88      	it	hi
 8004dcc:	429a      	cmphi	r2, r3
 8004dce:	f43f aff7 	beq.w	8004dc0 <strcmp>
 8004dd2:	eba2 0003 	sub.w	r0, r2, r3
 8004dd6:	4770      	bx	lr
        "   beq     strcmp_lop      \n"
		"	sub     r0, r2, r3  	\n"
        "   bx      lr              \n"
		:::
	);
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	bf00      	nop

08004ddc <strncmp>:

int strncmp(const char *a, const char *b, size_t n)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b087      	sub	sp, #28
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
	size_t i;

	for (i = 0; i < n; i++)
 8004de8:	2300      	movs	r3, #0
 8004dea:	617b      	str	r3, [r7, #20]
 8004dec:	e017      	b.n	8004e1e <strncmp+0x42>
		if (a[i] != b[i])
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	4413      	add	r3, r2
 8004df4:	781a      	ldrb	r2, [r3, #0]
 8004df6:	68b9      	ldr	r1, [r7, #8]
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	440b      	add	r3, r1
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d00a      	beq.n	8004e18 <strncmp+0x3c>
			return a[i] - b[i];
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	4413      	add	r3, r2
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	68b9      	ldr	r1, [r7, #8]
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	440b      	add	r3, r1
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	e007      	b.n	8004e28 <strncmp+0x4c>

int strncmp(const char *a, const char *b, size_t n)
{
	size_t i;

	for (i = 0; i < n; i++)
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	617b      	str	r3, [r7, #20]
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d3e3      	bcc.n	8004dee <strncmp+0x12>
		if (a[i] != b[i])
			return a[i] - b[i];

	return 0;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	371c      	adds	r7, #28
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <strlen>:

size_t strlen(const char *s)
{
	asm(
 8004e34:	f1a0 0301 	sub.w	r3, r0, #1

08004e38 <strlen_loop>:
 8004e38:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8004e3c:	2a00      	cmp	r2, #0
 8004e3e:	f47f affb 	bne.w	8004e38 <strlen_loop>
 8004e42:	eba3 0000 	sub.w	r0, r3, r0
 8004e46:	4770      	bx	lr
        "   bne  strlen_loop        \n"
		"	sub  r0, r3, r0			\n"
		"	bx   lr					\n"
		:::
	);
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	bf00      	nop

08004e4c <puts>:

void puts(char *s)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
	while (*s) {
 8004e54:	e010      	b.n	8004e78 <puts+0x2c>
		while (USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET)
 8004e56:	bf00      	nop
 8004e58:	480b      	ldr	r0, [pc, #44]	; (8004e88 <puts+0x3c>)
 8004e5a:	2180      	movs	r1, #128	; 0x80
 8004e5c:	f00f ff8c 	bl	8014d78 <USART_GetFlagStatus>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d0f8      	beq.n	8004e58 <puts+0xc>
			/* wait */ ;
		USART_SendData(USART2, *s);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	4807      	ldr	r0, [pc, #28]	; (8004e88 <puts+0x3c>)
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	f00f fd95 	bl	801499c <USART_SendData>
		s++;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	3301      	adds	r3, #1
 8004e76:	607b      	str	r3, [r7, #4]
	);
}

void puts(char *s)
{
	while (*s) {
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1ea      	bne.n	8004e56 <puts+0xa>
		while (USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET)
			/* wait */ ;
		USART_SendData(USART2, *s);
		s++;
	}
}
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	40004400 	.word	0x40004400

08004e8c <init_task>:
#include "task.h"

#include <stddef.h>

unsigned int *init_task(unsigned int *stack, void (*start)())
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
	stack += STACK_SIZE - 9; /* End of stack, minus what we're about to push */
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8004e9c:	607b      	str	r3, [r7, #4]
	stack[8] = (unsigned int)start;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	3320      	adds	r3, #32
 8004ea2:	683a      	ldr	r2, [r7, #0]
 8004ea4:	601a      	str	r2, [r3, #0]
	return stack;
 8004ea6:	687b      	ldr	r3, [r7, #4]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <init_led>:
#include "stm32f4xx_exti.h"
#include "stm32f4xx_syscfg.h"
#include "misc.h"

void init_led(void)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8004eba:	2004      	movs	r0, #4
 8004ebc:	2101      	movs	r1, #1
 8004ebe:	f00a fe25 	bl	800fb0c <RCC_AHB1PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
 8004ec2:	480b      	ldr	r0, [pc, #44]	; (8004ef0 <init_led+0x3c>)
 8004ec4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f008 f8ad 	bl	800d028 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
 8004ece:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ed2:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004edc:	2302      	movs	r3, #2
 8004ede:	717b      	strb	r3, [r7, #5]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004ee0:	463b      	mov	r3, r7
 8004ee2:	4803      	ldr	r0, [pc, #12]	; (8004ef0 <init_led+0x3c>)
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	f007 ff69 	bl	800cdbc <GPIO_Init>
}
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	40020800 	.word	0x40020800

08004ef4 <init_button>:

void init_button(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8004efa:	2001      	movs	r0, #1
 8004efc:	2101      	movs	r1, #1
 8004efe:	f00a fe05 	bl	800fb0c <RCC_AHB1PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
 8004f02:	2301      	movs	r3, #1
 8004f04:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8004f06:	2300      	movs	r3, #0
 8004f08:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	717b      	strb	r3, [r7, #5]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004f0e:	463b      	mov	r3, r7
 8004f10:	4803      	ldr	r0, [pc, #12]	; (8004f20 <init_button+0x2c>)
 8004f12:	4619      	mov	r1, r3
 8004f14:	f007 ff52 	bl	800cdbc <GPIO_Init>
}
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	40020800 	.word	0x40020800

08004f24 <enable_button_interrupts>:

void enable_button_interrupts(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8004f2a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004f2e:	2101      	movs	r1, #1
 8004f30:	f00a fe64 	bl	800fbfc <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource0);
 8004f34:	2000      	movs	r0, #0
 8004f36:	2100      	movs	r1, #0
 8004f38:	f00d fcdc 	bl	80128f4 <SYSCFG_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8004f40:	2300      	movs	r3, #0
 8004f42:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8004f44:	2308      	movs	r3, #8
 8004f46:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
 8004f4c:	f107 0308 	add.w	r3, r7, #8
 8004f50:	4618      	mov	r0, r3
 8004f52:	f006 f97b 	bl	800b24c <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
 8004f56:	2306      	movs	r3, #6
 8004f58:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8004f5a:	230f      	movs	r3, #15
 8004f5c:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 8004f5e:	230f      	movs	r3, #15
 8004f60:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8004f62:	2301      	movs	r3, #1
 8004f64:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
 8004f66:	1d3b      	adds	r3, r7, #4
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f000 f881 	bl	8005070 <NVIC_Init>
}
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <init_rs232>:

void init_rs232(void)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af00      	add	r7, sp, #0
    /* --------------------------- System Clocks Configuration -----------------*/
    /* USART2 clock enable */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8004f7a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004f7e:	2101      	movs	r1, #1
 8004f80:	f00a fe1e 	bl	800fbc0 <RCC_APB1PeriphClockCmd>
    /* GPIOA clock enable */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8004f84:	2008      	movs	r0, #8
 8004f86:	2101      	movs	r1, #1
 8004f88:	f00a fdc0 	bl	800fb0c <RCC_AHB1PeriphClockCmd>
    GPIO_InitTypeDef GPIO_InitStructure;

    /*-------------------------- GPIO Configuration ----------------------------*/
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6;
 8004f8c:	2360      	movs	r3, #96	; 0x60
 8004f8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8004f90:	2302      	movs	r3, #2
 8004f92:	753b      	strb	r3, [r7, #20]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8004f94:	2300      	movs	r3, #0
 8004f96:	75bb      	strb	r3, [r7, #22]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	75fb      	strb	r3, [r7, #23]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	757b      	strb	r3, [r7, #21]
    GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004fa0:	f107 0310 	add.w	r3, r7, #16
 8004fa4:	4813      	ldr	r0, [pc, #76]	; (8004ff4 <init_rs232+0x80>)
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	f007 ff08 	bl	800cdbc <GPIO_Init>
    
    /* Connect USART pins to AF */
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource5, GPIO_AF_USART2);   // USART2_TX
 8004fac:	4811      	ldr	r0, [pc, #68]	; (8004ff4 <init_rs232+0x80>)
 8004fae:	2105      	movs	r1, #5
 8004fb0:	2207      	movs	r2, #7
 8004fb2:	f008 f871 	bl	800d098 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource6, GPIO_AF_USART2);   // USART2_RX
 8004fb6:	480f      	ldr	r0, [pc, #60]	; (8004ff4 <init_rs232+0x80>)
 8004fb8:	2106      	movs	r1, #6
 8004fba:	2207      	movs	r2, #7
 8004fbc:	f008 f86c 	bl	800d098 <GPIO_PinAFConfig>
     *  - One Stop Bit
     *  - No parity
     *  - Hardware flow control disabled (RTS and CTS signals)
     *  - Receive and transmit enabled
     */
    USART_InitStructure.USART_BaudRate = 9600;
 8004fc0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8004fc4:	603b      	str	r3, [r7, #0]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	80bb      	strh	r3, [r7, #4]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	80fb      	strh	r3, [r7, #6]
    USART_InitStructure.USART_Parity = USART_Parity_No;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	813b      	strh	r3, [r7, #8]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8004fd6:	230c      	movs	r3, #12
 8004fd8:	817b      	strh	r3, [r7, #10]
    USART_Init(USART2, &USART_InitStructure);
 8004fda:	463b      	mov	r3, r7
 8004fdc:	4806      	ldr	r0, [pc, #24]	; (8004ff8 <init_rs232+0x84>)
 8004fde:	4619      	mov	r1, r3
 8004fe0:	f00f fb48 	bl	8014674 <USART_Init>
    USART_Cmd(USART2, ENABLE);
 8004fe4:	4804      	ldr	r0, [pc, #16]	; (8004ff8 <init_rs232+0x84>)
 8004fe6:	2101      	movs	r1, #1
 8004fe8:	f00f fc5a 	bl	80148a0 <USART_Cmd>
}
 8004fec:	3718      	adds	r7, #24
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	40020c00 	.word	0x40020c00
 8004ff8:	40004400 	.word	0x40004400

08004ffc <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
 8005002:	480c      	ldr	r0, [pc, #48]	; (8005034 <enable_rs232_interrupts+0x38>)
 8005004:	f240 7127 	movw	r1, #1831	; 0x727
 8005008:	2200      	movs	r2, #0
 800500a:	f00f fe6d 	bl	8014ce8 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 800500e:	4809      	ldr	r0, [pc, #36]	; (8005034 <enable_rs232_interrupts+0x38>)
 8005010:	f240 5125 	movw	r1, #1317	; 0x525
 8005014:	2201      	movs	r2, #1
 8005016:	f00f fe67 	bl	8014ce8 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 800501a:	2326      	movs	r3, #38	; 0x26
 800501c:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 800501e:	2300      	movs	r3, #0
 8005020:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8005022:	2301      	movs	r3, #1
 8005024:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
 8005026:	1d3b      	adds	r3, r7, #4
 8005028:	4618      	mov	r0, r3
 800502a:	f000 f821 	bl	8005070 <NVIC_Init>
}
 800502e:	3708      	adds	r7, #8
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	40004400 	.word	0x40004400

08005038 <enable_rs232>:

void enable_rs232(void)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
 800503c:	4802      	ldr	r0, [pc, #8]	; (8005048 <enable_rs232+0x10>)
 800503e:	2101      	movs	r1, #1
 8005040:	f00f fc2e 	bl	80148a0 <USART_Cmd>
}
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	40004400 	.word	0x40004400

0800504c <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8005054:	4a05      	ldr	r2, [pc, #20]	; (800506c <NVIC_PriorityGroupConfig+0x20>)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800505c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005060:	60d3      	str	r3, [r2, #12]
}
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr
 800506c:	e000ed00 	.word	0xe000ed00

08005070 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8005078:	2300      	movs	r3, #0
 800507a:	73fb      	strb	r3, [r7, #15]
 800507c:	2300      	movs	r3, #0
 800507e:	73bb      	strb	r3, [r7, #14]
 8005080:	230f      	movs	r3, #15
 8005082:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	78db      	ldrb	r3, [r3, #3]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d037      	beq.n	80050fc <NVIC_Init+0x8c>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800508c:	4b25      	ldr	r3, [pc, #148]	; (8005124 <NVIC_Init+0xb4>)
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	43db      	mvns	r3, r3
 8005092:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005096:	0a1b      	lsrs	r3, r3, #8
 8005098:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 800509a:	7bfb      	ldrb	r3, [r7, #15]
 800509c:	f1c3 0304 	rsb	r3, r3, #4
 80050a0:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80050a2:	7b7a      	ldrb	r2, [r7, #13]
 80050a4:	7bfb      	ldrb	r3, [r7, #15]
 80050a6:	fa42 f303 	asr.w	r3, r2, r3
 80050aa:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	785b      	ldrb	r3, [r3, #1]
 80050b0:	461a      	mov	r2, r3
 80050b2:	7bbb      	ldrb	r3, [r7, #14]
 80050b4:	fa02 f303 	lsl.w	r3, r2, r3
 80050b8:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	789a      	ldrb	r2, [r3, #2]
 80050be:	7b7b      	ldrb	r3, [r7, #13]
 80050c0:	4013      	ands	r3, r2
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 80050ca:	7bfb      	ldrb	r3, [r7, #15]
 80050cc:	011b      	lsls	r3, r3, #4
 80050ce:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80050d0:	4a15      	ldr	r2, [pc, #84]	; (8005128 <NVIC_Init+0xb8>)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	4413      	add	r3, r2
 80050d8:	7bfa      	ldrb	r2, [r7, #15]
 80050da:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80050de:	4b12      	ldr	r3, [pc, #72]	; (8005128 <NVIC_Init+0xb8>)
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	7812      	ldrb	r2, [r2, #0]
 80050e4:	0952      	lsrs	r2, r2, #5
 80050e6:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80050e8:	6879      	ldr	r1, [r7, #4]
 80050ea:	7809      	ldrb	r1, [r1, #0]
 80050ec:	f001 011f 	and.w	r1, r1, #31
 80050f0:	2001      	movs	r0, #1
 80050f2:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80050f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80050fa:	e00e      	b.n	800511a <NVIC_Init+0xaa>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80050fc:	4b0a      	ldr	r3, [pc, #40]	; (8005128 <NVIC_Init+0xb8>)
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	7812      	ldrb	r2, [r2, #0]
 8005102:	0952      	lsrs	r2, r2, #5
 8005104:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8005106:	6879      	ldr	r1, [r7, #4]
 8005108:	7809      	ldrb	r1, [r1, #0]
 800510a:	f001 011f 	and.w	r1, r1, #31
 800510e:	2001      	movs	r0, #1
 8005110:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005114:	3220      	adds	r2, #32
 8005116:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800511a:	3714      	adds	r7, #20
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr
 8005124:	e000ed00 	.word	0xe000ed00
 8005128:	e000e100 	.word	0xe000e100

0800512c <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8005136:	4a07      	ldr	r2, [pc, #28]	; (8005154 <NVIC_SetVectorTable+0x28>)
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800513e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005142:	6879      	ldr	r1, [r7, #4]
 8005144:	430b      	orrs	r3, r1
 8005146:	6093      	str	r3, [r2, #8]
}
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	e000ed00 	.word	0xe000ed00

08005158 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	4602      	mov	r2, r0
 8005160:	460b      	mov	r3, r1
 8005162:	71fa      	strb	r2, [r7, #7]
 8005164:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8005166:	79bb      	ldrb	r3, [r7, #6]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d006      	beq.n	800517a <NVIC_SystemLPConfig+0x22>
  {
    SCB->SCR |= LowPowerMode;
 800516c:	4b09      	ldr	r3, [pc, #36]	; (8005194 <NVIC_SystemLPConfig+0x3c>)
 800516e:	4a09      	ldr	r2, [pc, #36]	; (8005194 <NVIC_SystemLPConfig+0x3c>)
 8005170:	6911      	ldr	r1, [r2, #16]
 8005172:	79fa      	ldrb	r2, [r7, #7]
 8005174:	430a      	orrs	r2, r1
 8005176:	611a      	str	r2, [r3, #16]
 8005178:	e006      	b.n	8005188 <NVIC_SystemLPConfig+0x30>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 800517a:	4b06      	ldr	r3, [pc, #24]	; (8005194 <NVIC_SystemLPConfig+0x3c>)
 800517c:	4a05      	ldr	r2, [pc, #20]	; (8005194 <NVIC_SystemLPConfig+0x3c>)
 800517e:	6911      	ldr	r1, [r2, #16]
 8005180:	79fa      	ldrb	r2, [r7, #7]
 8005182:	43d2      	mvns	r2, r2
 8005184:	400a      	ands	r2, r1
 8005186:	611a      	str	r2, [r3, #16]
  }
}
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	e000ed00 	.word	0xe000ed00

08005198 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b04      	cmp	r3, #4
 80051a4:	d106      	bne.n	80051b4 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80051a6:	4b09      	ldr	r3, [pc, #36]	; (80051cc <SysTick_CLKSourceConfig+0x34>)
 80051a8:	4a08      	ldr	r2, [pc, #32]	; (80051cc <SysTick_CLKSourceConfig+0x34>)
 80051aa:	6812      	ldr	r2, [r2, #0]
 80051ac:	f042 0204 	orr.w	r2, r2, #4
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	e005      	b.n	80051c0 <SysTick_CLKSourceConfig+0x28>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 80051b4:	4b05      	ldr	r3, [pc, #20]	; (80051cc <SysTick_CLKSourceConfig+0x34>)
 80051b6:	4a05      	ldr	r2, [pc, #20]	; (80051cc <SysTick_CLKSourceConfig+0x34>)
 80051b8:	6812      	ldr	r2, [r2, #0]
 80051ba:	f022 0204 	bic.w	r2, r2, #4
 80051be:	601a      	str	r2, [r3, #0]
  }
}
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	e000e010 	.word	0xe000e010

080051d0 <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 80051d4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80051d8:	2101      	movs	r1, #1
 80051da:	f00a fda5 	bl	800fd28 <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 80051de:	f44f 7080 	mov.w	r0, #256	; 0x100
 80051e2:	2100      	movs	r1, #0
 80051e4:	f00a fda0 	bl	800fd28 <RCC_APB2PeriphResetCmd>
}
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop

080051ec <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 80051f6:	2300      	movs	r3, #0
 80051f8:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 80051fa:	2300      	movs	r3, #0
 80051fc:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800520a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800520e:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	791b      	ldrb	r3, [r3, #4]
 8005214:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 800521a:	4313      	orrs	r3, r2
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	4313      	orrs	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	4b17      	ldr	r3, [pc, #92]	; (8005290 <ADC_Init+0xa4>)
 8005232:	4013      	ands	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800523e:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8005244:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	795b      	ldrb	r3, [r3, #5]
 800524a:	005b      	lsls	r3, r3, #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800524c:	4313      	orrs	r3, r2
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	4313      	orrs	r3, r2
 8005252:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525e:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005266:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	7d1b      	ldrb	r3, [r3, #20]
 800526c:	3b01      	subs	r3, #1
 800526e:	b2da      	uxtb	r2, r3
 8005270:	7afb      	ldrb	r3, [r7, #11]
 8005272:	4313      	orrs	r3, r2
 8005274:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8005276:	7afb      	ldrb	r3, [r7, #11]
 8005278:	051b      	lsls	r3, r3, #20
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	4313      	orrs	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr
 8005290:	c0fff7fd 	.word	0xc0fff7fd

08005294 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	751a      	strb	r2, [r3, #20]
}
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 80052d8:	2300      	movs	r3, #0
 80052da:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 80052dc:	4b0e      	ldr	r3, [pc, #56]	; (8005318 <ADC_CommonInit+0x48>)
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	4b0d      	ldr	r3, [pc, #52]	; (800531c <ADC_CommonInit+0x4c>)
 80052e6:	4013      	ands	r3, r2
 80052e8:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80052f2:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 80052f8:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68db      	ldr	r3, [r3, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80052fe:	4313      	orrs	r3, r2
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	4313      	orrs	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8005306:	4b04      	ldr	r3, [pc, #16]	; (8005318 <ADC_CommonInit+0x48>)
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	605a      	str	r2, [r3, #4]
}
 800530c:	3714      	adds	r7, #20
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	40012300 	.word	0x40012300
 800531c:	fffc30e0 	.word	0xfffc30e0

08005320 <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	60da      	str	r2, [r3, #12]
}
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop

0800534c <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	460b      	mov	r3, r1
 8005356:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005358:	78fb      	ldrb	r3, [r7, #3]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d006      	beq.n	800536c <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f043 0201 	orr.w	r2, r3, #1
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	609a      	str	r2, [r3, #8]
 800536a:	e005      	b.n	8005378 <ADC_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f023 0201 	bic.w	r2, r3, #1
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	609a      	str	r2, [r3, #8]
  }
}
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop

08005384 <ADC_AnalogWatchdogCmd>:
  *            @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected channels
  *            @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
  * @retval None	  
  */
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800538e:	2300      	movs	r3, #0
 8005390:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	60fb      	str	r3, [r7, #12]
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  tmpreg &= CR1_AWDMode_RESET;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800539e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	605a      	str	r2, [r3, #4]
}
 80053b2:	3714      	adds	r7, #20
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <ADC_AnalogWatchdogThresholdsConfig>:
  *          This parameter must be a 12-bit value.
  * @retval None
  */
void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
                                        uint16_t LowThreshold)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	4613      	mov	r3, r2
 80053c6:	460a      	mov	r2, r1
 80053c8:	807a      	strh	r2, [r7, #2]
 80053ca:	803b      	strh	r3, [r7, #0]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
 80053cc:	887a      	ldrh	r2, [r7, #2]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
 80053d2:	883a      	ldrh	r2, [r7, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80053d8:	370c      	adds	r7, #12
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop

080053e4 <ADC_AnalogWatchdogSingleChannelConfig>:
  *            @arg ADC_Channel_17: ADC Channel17 selected
  *            @arg ADC_Channel_18: ADC Channel18 selected
  * @retval None
  */
void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	460b      	mov	r3, r1
 80053ee:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 80053f0:	2300      	movs	r3, #0
 80053f2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	60fb      	str	r3, [r7, #12]
  
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_RESET;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f023 031f 	bic.w	r3, r3, #31
 8005400:	60fb      	str	r3, [r7, #12]
  
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
 8005402:	78fb      	ldrb	r3, [r7, #3]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	4313      	orrs	r3, r2
 8005408:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	605a      	str	r2, [r3, #4]
}
 8005410:	3714      	adds	r7, #20
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop

0800541c <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor and Vrefint channels.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	4603      	mov	r3, r0
 8005424:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005426:	79fb      	ldrb	r3, [r7, #7]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d006      	beq.n	800543a <ADC_TempSensorVrefintCmd+0x1e>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 800542c:	4b08      	ldr	r3, [pc, #32]	; (8005450 <ADC_TempSensorVrefintCmd+0x34>)
 800542e:	4a08      	ldr	r2, [pc, #32]	; (8005450 <ADC_TempSensorVrefintCmd+0x34>)
 8005430:	6852      	ldr	r2, [r2, #4]
 8005432:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005436:	605a      	str	r2, [r3, #4]
 8005438:	e005      	b.n	8005446 <ADC_TempSensorVrefintCmd+0x2a>
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 800543a:	4b05      	ldr	r3, [pc, #20]	; (8005450 <ADC_TempSensorVrefintCmd+0x34>)
 800543c:	4a04      	ldr	r2, [pc, #16]	; (8005450 <ADC_TempSensorVrefintCmd+0x34>)
 800543e:	6852      	ldr	r2, [r2, #4]
 8005440:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8005444:	605a      	str	r2, [r3, #4]
  }
}
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	40012300 	.word	0x40012300

08005454 <ADC_VBATCmd>:
  * @param  NewState: new state of the VBAT channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VBATCmd(FunctionalState NewState)                             
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	4603      	mov	r3, r0
 800545c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800545e:	79fb      	ldrb	r3, [r7, #7]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d006      	beq.n	8005472 <ADC_VBATCmd+0x1e>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 8005464:	4b08      	ldr	r3, [pc, #32]	; (8005488 <ADC_VBATCmd+0x34>)
 8005466:	4a08      	ldr	r2, [pc, #32]	; (8005488 <ADC_VBATCmd+0x34>)
 8005468:	6852      	ldr	r2, [r2, #4]
 800546a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800546e:	605a      	str	r2, [r3, #4]
 8005470:	e005      	b.n	800547e <ADC_VBATCmd+0x2a>
  }
  else
  {
    /* Disable the VBAT channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 8005472:	4b05      	ldr	r3, [pc, #20]	; (8005488 <ADC_VBATCmd+0x34>)
 8005474:	4a04      	ldr	r2, [pc, #16]	; (8005488 <ADC_VBATCmd+0x34>)
 8005476:	6852      	ldr	r2, [r2, #4]
 8005478:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800547c:	605a      	str	r2, [r3, #4]
  }
}
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	40012300 	.word	0x40012300

0800548c <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	70f9      	strb	r1, [r7, #3]
 8005496:	70ba      	strb	r2, [r7, #2]
 8005498:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800549a:	2300      	movs	r3, #0
 800549c:	60fb      	str	r3, [r7, #12]
 800549e:	2300      	movs	r3, #0
 80054a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80054a2:	78fb      	ldrb	r3, [r7, #3]
 80054a4:	2b09      	cmp	r3, #9
 80054a6:	d923      	bls.n	80054f0 <ADC_RegularChannelConfig+0x64>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 80054ae:	78fb      	ldrb	r3, [r7, #3]
 80054b0:	f1a3 020a 	sub.w	r2, r3, #10
 80054b4:	4613      	mov	r3, r2
 80054b6:	005b      	lsls	r3, r3, #1
 80054b8:	4413      	add	r3, r2
 80054ba:	2207      	movs	r2, #7
 80054bc:	fa02 f303 	lsl.w	r3, r2, r3
 80054c0:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	43db      	mvns	r3, r3
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	4013      	ands	r3, r2
 80054ca:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 80054cc:	7879      	ldrb	r1, [r7, #1]
 80054ce:	78fb      	ldrb	r3, [r7, #3]
 80054d0:	f1a3 020a 	sub.w	r2, r3, #10
 80054d4:	4613      	mov	r3, r2
 80054d6:	005b      	lsls	r3, r3, #1
 80054d8:	4413      	add	r3, r2
 80054da:	fa01 f303 	lsl.w	r3, r1, r3
 80054de:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	60da      	str	r2, [r3, #12]
 80054ee:	e01e      	b.n	800552e <ADC_RegularChannelConfig+0xa2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 80054f6:	78fa      	ldrb	r2, [r7, #3]
 80054f8:	4613      	mov	r3, r2
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	4413      	add	r3, r2
 80054fe:	2207      	movs	r2, #7
 8005500:	fa02 f303 	lsl.w	r3, r2, r3
 8005504:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	43db      	mvns	r3, r3
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	4013      	ands	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8005510:	7879      	ldrb	r1, [r7, #1]
 8005512:	78fa      	ldrb	r2, [r7, #3]
 8005514:	4613      	mov	r3, r2
 8005516:	005b      	lsls	r3, r3, #1
 8005518:	4413      	add	r3, r2
 800551a:	fa01 f303 	lsl.w	r3, r1, r3
 800551e:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	4313      	orrs	r3, r2
 8005526:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 800552e:	78bb      	ldrb	r3, [r7, #2]
 8005530:	2b06      	cmp	r3, #6
 8005532:	d821      	bhi.n	8005578 <ADC_RegularChannelConfig+0xec>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005538:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 800553a:	78bb      	ldrb	r3, [r7, #2]
 800553c:	1e5a      	subs	r2, r3, #1
 800553e:	4613      	mov	r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4413      	add	r3, r2
 8005544:	221f      	movs	r2, #31
 8005546:	fa02 f303 	lsl.w	r3, r2, r3
 800554a:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	43db      	mvns	r3, r3
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	4013      	ands	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8005556:	78f9      	ldrb	r1, [r7, #3]
 8005558:	78bb      	ldrb	r3, [r7, #2]
 800555a:	1e5a      	subs	r2, r3, #1
 800555c:	4613      	mov	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4413      	add	r3, r2
 8005562:	fa01 f303 	lsl.w	r3, r1, r3
 8005566:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	4313      	orrs	r3, r2
 800556e:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	635a      	str	r2, [r3, #52]	; 0x34
 8005576:	e047      	b.n	8005608 <ADC_RegularChannelConfig+0x17c>
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8005578:	78bb      	ldrb	r3, [r7, #2]
 800557a:	2b0c      	cmp	r3, #12
 800557c:	d821      	bhi.n	80055c2 <ADC_RegularChannelConfig+0x136>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005582:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8005584:	78bb      	ldrb	r3, [r7, #2]
 8005586:	1fda      	subs	r2, r3, #7
 8005588:	4613      	mov	r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	221f      	movs	r2, #31
 8005590:	fa02 f303 	lsl.w	r3, r2, r3
 8005594:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	43db      	mvns	r3, r3
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	4013      	ands	r3, r2
 800559e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 80055a0:	78f9      	ldrb	r1, [r7, #3]
 80055a2:	78bb      	ldrb	r3, [r7, #2]
 80055a4:	1fda      	subs	r2, r3, #7
 80055a6:	4613      	mov	r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4413      	add	r3, r2
 80055ac:	fa01 f303 	lsl.w	r3, r1, r3
 80055b0:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	631a      	str	r2, [r3, #48]	; 0x30
 80055c0:	e022      	b.n	8005608 <ADC_RegularChannelConfig+0x17c>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c6:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 80055c8:	78bb      	ldrb	r3, [r7, #2]
 80055ca:	f1a3 020d 	sub.w	r2, r3, #13
 80055ce:	4613      	mov	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	221f      	movs	r2, #31
 80055d6:	fa02 f303 	lsl.w	r3, r2, r3
 80055da:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	43db      	mvns	r3, r3
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	4013      	ands	r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 80055e6:	78f9      	ldrb	r1, [r7, #3]
 80055e8:	78bb      	ldrb	r3, [r7, #2]
 80055ea:	f1a3 020d 	sub.w	r2, r3, #13
 80055ee:	4613      	mov	r3, r2
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4413      	add	r3, r2
 80055f4:	fa01 f303 	lsl.w	r3, r1, r3
 80055f8:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	4313      	orrs	r3, r2
 8005600:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8005608:	3714      	adds	r7, #20
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop

08005614 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	609a      	str	r2, [r3, #8]
}
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop

08005634 <ADC_GetSoftwareStartConvStatus>:
  * @brief  Gets the selected ADC Software start regular conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800563c:	2300      	movs	r3, #0
 800563e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_SWSTART) != (uint32_t)RESET)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d002      	beq.n	8005652 <ADC_GetSoftwareStartConvStatus+0x1e>
  {
    /* SWSTART bit is set */
    bitstatus = SET;
 800564c:	2301      	movs	r3, #1
 800564e:	73fb      	strb	r3, [r7, #15]
 8005650:	e001      	b.n	8005656 <ADC_GetSoftwareStartConvStatus+0x22>
  }
  else
  {
    /* SWSTART bit is reset */
    bitstatus = RESET;
 8005652:	2300      	movs	r3, #0
 8005654:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the SWSTART bit status */
  return  bitstatus;
 8005656:	7bfb      	ldrb	r3, [r7, #15]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <ADC_EOCOnEachRegularChannelCmd>:
  * @param  NewState: new state of the selected ADC EOC flag rising
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	460b      	mov	r3, r1
 800566e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005670:	78fb      	ldrb	r3, [r7, #3]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d006      	beq.n	8005684 <ADC_EOCOnEachRegularChannelCmd+0x20>
  {
    /* Enable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	609a      	str	r2, [r3, #8]
 8005682:	e005      	b.n	8005690 <ADC_EOCOnEachRegularChannelCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	609a      	str	r2, [r3, #8]
  }
}
 8005690:	370c      	adds	r7, #12
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop

0800569c <ADC_ContinuousModeCmd>:
  * @param  NewState: new state of the selected ADC continuous conversion mode
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	460b      	mov	r3, r1
 80056a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80056a8:	78fb      	ldrb	r3, [r7, #3]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d006      	beq.n	80056bc <ADC_ContinuousModeCmd+0x20>
  {
    /* Enable the selected ADC continuous conversion mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f043 0202 	orr.w	r2, r3, #2
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	609a      	str	r2, [r3, #8]
 80056ba:	e005      	b.n	80056c8 <ADC_ContinuousModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC continuous conversion mode */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f023 0202 	bic.w	r2, r3, #2
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	609a      	str	r2, [r3, #8]
  }
}
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop

080056d4 <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel count value.
  *          This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	460b      	mov	r3, r1
 80056de:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 80056e0:	2300      	movs	r3, #0
 80056e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 80056e4:	2300      	movs	r3, #0
 80056e6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_RESET;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80056f4:	60fb      	str	r3, [r7, #12]
  
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
 80056f6:	78fb      	ldrb	r3, [r7, #3]
 80056f8:	3b01      	subs	r3, #1
 80056fa:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 13;
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	035b      	lsls	r3, r3, #13
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	4313      	orrs	r3, r2
 8005704:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	605a      	str	r2, [r3, #4]
}
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop

08005718 <ADC_DiscModeCmd>:
  *         regular group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	460b      	mov	r3, r1
 8005722:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005724:	78fb      	ldrb	r3, [r7, #3]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d006      	beq.n	8005738 <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	605a      	str	r2, [r3, #4]
 8005736:	e005      	b.n	8005744 <ADC_DiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	605a      	str	r2, [r3, #4]
  }
}
 8005744:	370c      	adds	r7, #12
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop

08005750 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800575c:	b29b      	uxth	r3, r3
}
 800575e:	4618      	mov	r0, r3
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop

0800576c <ADC_GetMultiModeConversionValue>:
  * @note   In triple mode, the value returned by this function is as following
  *           Data[15:0] : these bits contain alternatively the regular data of ADC1, ADC3 and ADC2.
  *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3.           
  */
uint32_t ADC_GetMultiModeConversionValue(void)
{
 800576c:	b480      	push	{r7}
 800576e:	af00      	add	r7, sp, #0
  /* Return the multi mode conversion value */
  return (*(__IO uint32_t *) CDR_ADDRESS);
 8005770:	4b03      	ldr	r3, [pc, #12]	; (8005780 <ADC_GetMultiModeConversionValue+0x14>)
 8005772:	681b      	ldr	r3, [r3, #0]
}
 8005774:	4618      	mov	r0, r3
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	40012308 	.word	0x40012308

08005784 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	460b      	mov	r3, r1
 800578e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005790:	78fb      	ldrb	r3, [r7, #3]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d006      	beq.n	80057a4 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	609a      	str	r2, [r3, #8]
 80057a2:	e005      	b.n	80057b0 <ADC_DMACmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	609a      	str	r2, [r3, #8]
  }
}
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop

080057bc <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	460b      	mov	r3, r1
 80057c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80057c8:	78fb      	ldrb	r3, [r7, #3]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d006      	beq.n	80057dc <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	609a      	str	r2, [r3, #8]
 80057da:	e005      	b.n	80057e8 <ADC_DMARequestAfterLastTransferCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	609a      	str	r2, [r3, #8]
  }
}
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop

080057f4 <ADC_MultiModeDMARequestAfterLastTransferCmd>:
  *         by ADC_CommonInitStruct.ADC_DMAAccessMode structure member) is 
  *          ADC_DMAAccessMode_1, ADC_DMAAccessMode_2 or ADC_DMAAccessMode_3.     
  * @retval None
  */
void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	4603      	mov	r3, r0
 80057fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80057fe:	79fb      	ldrb	r3, [r7, #7]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d006      	beq.n	8005812 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x1e>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 8005804:	4b08      	ldr	r3, [pc, #32]	; (8005828 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x34>)
 8005806:	4a08      	ldr	r2, [pc, #32]	; (8005828 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x34>)
 8005808:	6852      	ldr	r2, [r2, #4]
 800580a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800580e:	605a      	str	r2, [r3, #4]
 8005810:	e005      	b.n	800581e <ADC_MultiModeDMARequestAfterLastTransferCmd+0x2a>
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 8005812:	4b05      	ldr	r3, [pc, #20]	; (8005828 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x34>)
 8005814:	4a04      	ldr	r2, [pc, #16]	; (8005828 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x34>)
 8005816:	6852      	ldr	r2, [r2, #4]
 8005818:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800581c:	605a      	str	r2, [r3, #4]
  }
}
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr
 8005828:	40012300 	.word	0x40012300

0800582c <ADC_InjectedChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 800582c:	b480      	push	{r7}
 800582e:	b087      	sub	sp, #28
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	70f9      	strb	r1, [r7, #3]
 8005836:	70ba      	strb	r2, [r7, #2]
 8005838:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
 800583a:	2300      	movs	r3, #0
 800583c:	617b      	str	r3, [r7, #20]
 800583e:	2300      	movs	r3, #0
 8005840:	613b      	str	r3, [r7, #16]
 8005842:	2300      	movs	r3, #0
 8005844:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8005846:	78fb      	ldrb	r3, [r7, #3]
 8005848:	2b09      	cmp	r3, #9
 800584a:	d923      	bls.n	8005894 <ADC_InjectedChannelConfig+0x68>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 8005852:	78fb      	ldrb	r3, [r7, #3]
 8005854:	f1a3 020a 	sub.w	r2, r3, #10
 8005858:	4613      	mov	r3, r2
 800585a:	005b      	lsls	r3, r3, #1
 800585c:	4413      	add	r3, r2
 800585e:	2207      	movs	r2, #7
 8005860:	fa02 f303 	lsl.w	r3, r2, r3
 8005864:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	43db      	mvns	r3, r3
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	4013      	ands	r3, r2
 800586e:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 8005870:	7879      	ldrb	r1, [r7, #1]
 8005872:	78fb      	ldrb	r3, [r7, #3]
 8005874:	f1a3 020a 	sub.w	r2, r3, #10
 8005878:	4613      	mov	r3, r2
 800587a:	005b      	lsls	r3, r3, #1
 800587c:	4413      	add	r3, r2
 800587e:	fa01 f303 	lsl.w	r3, r1, r3
 8005882:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	4313      	orrs	r3, r2
 800588a:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	60da      	str	r2, [r3, #12]
 8005892:	e01e      	b.n	80058d2 <ADC_InjectedChannelConfig+0xa6>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 800589a:	78fa      	ldrb	r2, [r7, #3]
 800589c:	4613      	mov	r3, r2
 800589e:	005b      	lsls	r3, r3, #1
 80058a0:	4413      	add	r3, r2
 80058a2:	2207      	movs	r2, #7
 80058a4:	fa02 f303 	lsl.w	r3, r2, r3
 80058a8:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	43db      	mvns	r3, r3
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	4013      	ands	r3, r2
 80058b2:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80058b4:	7879      	ldrb	r1, [r7, #1]
 80058b6:	78fa      	ldrb	r2, [r7, #3]
 80058b8:	4613      	mov	r3, r2
 80058ba:	005b      	lsls	r3, r3, #1
 80058bc:	4413      	add	r3, r2
 80058be:	fa01 f303 	lsl.w	r3, r1, r3
 80058c2:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	697a      	ldr	r2, [r7, #20]
 80058d0:	611a      	str	r2, [r3, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d6:	617b      	str	r3, [r7, #20]
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80058de:	0d1b      	lsrs	r3, r3, #20
 80058e0:	60fb      	str	r3, [r7, #12]
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	78ba      	ldrb	r2, [r7, #2]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	3302      	adds	r3, #2
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	461a      	mov	r2, r3
 80058f2:	4613      	mov	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	4413      	add	r3, r2
 80058f8:	221f      	movs	r2, #31
 80058fa:	fa02 f303 	lsl.w	r3, r2, r3
 80058fe:	613b      	str	r3, [r7, #16]
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	43db      	mvns	r3, r3
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	4013      	ands	r3, r2
 8005908:	617b      	str	r3, [r7, #20]
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 800590a:	78f9      	ldrb	r1, [r7, #3]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	b2db      	uxtb	r3, r3
 8005910:	78ba      	ldrb	r2, [r7, #2]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	b2db      	uxtb	r3, r3
 8005916:	3302      	adds	r3, #2
 8005918:	b2db      	uxtb	r3, r3
 800591a:	461a      	mov	r2, r3
 800591c:	4613      	mov	r3, r2
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	4413      	add	r3, r2
 8005922:	fa01 f303 	lsl.w	r3, r1, r3
 8005926:	613b      	str	r3, [r7, #16]
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	4313      	orrs	r3, r2
 800592e:	617b      	str	r3, [r7, #20]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005936:	371c      	adds	r7, #28
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <ADC_InjectedSequencerLengthConfig>:
  * @param  Length: The sequencer length. 
  *          This parameter must be a number between 1 to 4.
  * @retval None
  */
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	460b      	mov	r3, r1
 800594a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 800594c:	2300      	movs	r3, #0
 800594e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 8005950:	2300      	movs	r3, #0
 8005952:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005958:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old injected sequence length JL bits */
  tmpreg1 &= JSQR_JL_RESET;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005960:	60fb      	str	r3, [r7, #12]
  
  /* Set the injected sequence length JL bits */
  tmpreg2 = Length - 1; 
 8005962:	78fb      	ldrb	r3, [r7, #3]
 8005964:	3b01      	subs	r3, #1
 8005966:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 20;
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	051b      	lsls	r3, r3, #20
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	4313      	orrs	r3, r2
 8005970:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005978:	3714      	adds	r7, #20
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop

08005984 <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *          This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	4613      	mov	r3, r2
 800598e:	460a      	mov	r2, r1
 8005990:	70fa      	strb	r2, [r7, #3]
 8005992:	803b      	strh	r3, [r7, #0]
    __IO uint32_t tmp = 0;
 8005994:	2300      	movs	r3, #0
 8005996:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));
  
  tmp = (uint32_t)ADCx;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel;
 800599c:	78fa      	ldrb	r2, [r7, #3]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	4413      	add	r3, r2
 80059a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the selected injected channel data offset */
 *(__IO uint32_t *) tmp = (uint32_t)Offset;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	883a      	ldrh	r2, [r7, #0]
 80059a8:	601a      	str	r2, [r3, #0]
}
 80059aa:	3714      	adds	r7, #20
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <ADC_ExternalTrigInjectedConvConfig>:
  *            @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected 
  *            @arg ADC_ExternalTrigInjecConv_Ext_IT15: External interrupt line 15 event selected                          
  * @retval None
  */
void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80059be:	2300      	movs	r3, #0
 80059c0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_RESET;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80059ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	609a      	str	r2, [r3, #8]
}
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <ADC_ExternalTrigInjectedConvEdgeConfig>:
  *            @arg ADC_ExternalTrigInjecConvEdge_RisingFalling: detection on both rising 
  *                                                               and falling edge
  * @retval None
  */
void ADC_ExternalTrigInjectedConvEdgeConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConvEdge)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80059f2:	2300      	movs	r3, #0
 80059f4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	60fb      	str	r3, [r7, #12]
  /* Clear the old external trigger edge for injected group */
  tmpreg &= CR2_JEXTEN_RESET;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005a02:	60fb      	str	r3, [r7, #12]
  /* Set the new external trigger edge for injected group */
  tmpreg |= ADC_ExternalTrigInjecConvEdge;
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	609a      	str	r2, [r3, #8]
}
 8005a12:	3714      	adds	r7, #20
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <ADC_SoftwareStartInjectedConv>:
  * @brief  Enables the selected ADC software start conversion of the injected channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC conversion for injected group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	609a      	str	r2, [r3, #8]
}
 8005a30:	370c      	adds	r7, #12
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop

08005a3c <ADC_GetSoftwareStartInjectedConvCmdStatus>:
  * @brief  Gets the selected ADC Software start injected conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start injected conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8005a44:	2300      	movs	r3, #0
 8005a46:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d002      	beq.n	8005a5a <ADC_GetSoftwareStartInjectedConvCmdStatus+0x1e>
  {
    /* JSWSTART bit is set */
    bitstatus = SET;
 8005a54:	2301      	movs	r3, #1
 8005a56:	73fb      	strb	r3, [r7, #15]
 8005a58:	e001      	b.n	8005a5e <ADC_GetSoftwareStartInjectedConvCmdStatus+0x22>
  }
  else
  {
    /* JSWSTART bit is reset */
    bitstatus = RESET;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
 8005a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3714      	adds	r7, #20
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <ADC_AutoInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC auto injected conversion
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	460b      	mov	r3, r1
 8005a76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005a78:	78fb      	ldrb	r3, [r7, #3]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d006      	beq.n	8005a8c <ADC_AutoInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	605a      	str	r2, [r3, #4]
 8005a8a:	e005      	b.n	8005a98 <ADC_AutoInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	605a      	str	r2, [r3, #4]
  }
}
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop

08005aa4 <ADC_InjectedDiscModeCmd>:
  *         group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	460b      	mov	r3, r1
 8005aae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005ab0:	78fb      	ldrb	r3, [r7, #3]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d006      	beq.n	8005ac4 <ADC_InjectedDiscModeCmd+0x20>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	605a      	str	r2, [r3, #4]
 8005ac2:	e005      	b.n	8005ad0 <ADC_InjectedDiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	605a      	str	r2, [r3, #4]
  }
}
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop

08005adc <ADC_GetInjectedConversionValue>:
  *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel + JDR_OFFSET;
 8005af0:	78fa      	ldrb	r2, [r7, #3]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	4413      	add	r3, r2
 8005af6:	3328      	adds	r3, #40	; 0x28
 8005af8:	60fb      	str	r3, [r7, #12]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp); 
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	b29b      	uxth	r3, r3
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3714      	adds	r7, #20
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	4613      	mov	r3, r2
 8005b16:	460a      	mov	r2, r1
 8005b18:	807a      	strh	r2, [r7, #2]
 8005b1a:	707b      	strb	r3, [r7, #1]
  uint32_t itmask = 0;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 8005b20:	887b      	ldrh	r3, [r7, #2]
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	60fb      	str	r3, [r7, #12]
  itmask = (uint32_t)0x01 << itmask;    
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2e:	60fb      	str	r3, [r7, #12]

  if (NewState != DISABLE)
 8005b30:	787b      	ldrb	r3, [r7, #1]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d006      	beq.n	8005b44 <ADC_ITConfig+0x38>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685a      	ldr	r2, [r3, #4]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	431a      	orrs	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	605a      	str	r2, [r3, #4]
 8005b42:	e006      	b.n	8005b52 <ADC_ITConfig+0x46>
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	43db      	mvns	r3, r3
 8005b4c:	401a      	ands	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	605a      	str	r2, [r3, #4]
  }
}
 8005b52:	3714      	adds	r7, #20
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	460b      	mov	r3, r1
 8005b66:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	78fb      	ldrb	r3, [r7, #3]
 8005b72:	4013      	ands	r3, r2
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d002      	beq.n	8005b7e <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	73fb      	strb	r3, [r7, #15]
 8005b7c:	e001      	b.n	8005b82 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8005b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3714      	adds	r7, #20
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <ADC_ClearFlag>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                          
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	460b      	mov	r3, r1
 8005b9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));

  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
 8005b9c:	78fb      	ldrb	r3, [r7, #3]
 8005b9e:	43da      	mvns	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	601a      	str	r2, [r3, #0]
}
 8005ba4:	370c      	adds	r7, #12
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop

08005bb0 <ADC_GetITStatus>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                        
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b087      	sub	sp, #28
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	460b      	mov	r3, r1
 8005bba:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	75fb      	strb	r3, [r7, #23]
  uint32_t itmask = 0, enablestatus = 0;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	613b      	str	r3, [r7, #16]
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));

  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;
 8005bc8:	887b      	ldrh	r3, [r7, #2]
 8005bca:	0a1b      	lsrs	r3, r3, #8
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	613b      	str	r3, [r7, #16]

  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685a      	ldr	r2, [r3, #4]
 8005bd4:	887b      	ldrh	r3, [r7, #2]
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	2101      	movs	r1, #1
 8005bda:	fa01 f303 	lsl.w	r3, r1, r3
 8005bde:	4013      	ands	r3, r2
 8005be0:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	4013      	ands	r3, r2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d005      	beq.n	8005bfa <ADC_GetITStatus+0x4a>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d002      	beq.n	8005bfa <ADC_GetITStatus+0x4a>
  {
    /* ADC_IT is set */
    bitstatus = SET;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	75fb      	strb	r3, [r7, #23]
 8005bf8:	e001      	b.n	8005bfe <ADC_GetITStatus+0x4e>
  }
  else
  {
    /* ADC_IT is reset */
    bitstatus = RESET;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the ADC_IT status */
  return  bitstatus;
 8005bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	371c      	adds	r7, #28
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <ADC_ClearITPendingBit>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                         
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	460b      	mov	r3, r1
 8005c16:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT)); 
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
 8005c1c:	887b      	ldrh	r3, [r7, #2]
 8005c1e:	0a1b      	lsrs	r3, r3, #8
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 8005c24:	7bfb      	ldrb	r3, [r7, #15]
 8005c26:	43da      	mvns	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	601a      	str	r2, [r3, #0]
}                    
 8005c2c:	3714      	adds	r7, #20
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop

08005c38 <CAN_DeInit>:
  * @brief  Deinitializes the CAN peripheral registers to their default reset values.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval None.
  */
void CAN_DeInit(CAN_TypeDef* CANx)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
 
  if (CANx == CAN1)
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	4b0d      	ldr	r3, [pc, #52]	; (8005c78 <CAN_DeInit+0x40>)
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d10a      	bne.n	8005c5e <CAN_DeInit+0x26>
  {
    /* Enable CAN1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 8005c48:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8005c4c:	2101      	movs	r1, #1
 8005c4e:	f00a f84d 	bl	800fcec <RCC_APB1PeriphResetCmd>
    /* Release CAN1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 8005c52:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8005c56:	2100      	movs	r1, #0
 8005c58:	f00a f848 	bl	800fcec <RCC_APB1PeriphResetCmd>
 8005c5c:	e009      	b.n	8005c72 <CAN_DeInit+0x3a>
  }
  else
  {  
    /* Enable CAN2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 8005c5e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005c62:	2101      	movs	r1, #1
 8005c64:	f00a f842 	bl	800fcec <RCC_APB1PeriphResetCmd>
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 8005c68:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	f00a f83d 	bl	800fcec <RCC_APB1PeriphResetCmd>
  }
}
 8005c72:	3708      	adds	r7, #8
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	40006400 	.word	0x40006400

08005c7c <CAN_Init>:
  *         the configuration information for the CAN peripheral.
  * @retval Constant indicates initialization succeed which will be 
  *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
  */
uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  uint8_t InitStatus = CAN_InitStatus_Failed;
 8005c86:	2300      	movs	r3, #0
 8005c88:	73fb      	strb	r3, [r7, #15]
  uint32_t wait_ack = 0x00000000;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Exit from sleep mode */
  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f023 0202 	bic.w	r2, r3, #2
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f043 0201 	orr.w	r2, r3, #1
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	601a      	str	r2, [r3, #0]

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8005ca6:	e002      	b.n	8005cae <CAN_Init+0x32>
  {
    wait_ack++;
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	3301      	adds	r3, #1
 8005cac:	60bb      	str	r3, [r7, #8]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d104      	bne.n	8005cc4 <CAN_Init+0x48>
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d1f1      	bne.n	8005ca8 <CAN_Init+0x2c>
  {
    wait_ack++;
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	f003 0301 	and.w	r3, r3, #1
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d102      	bne.n	8005cd6 <CAN_Init+0x5a>
  {
    InitStatus = CAN_InitStatus_Failed;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	73fb      	strb	r3, [r7, #15]
 8005cd4:	e09c      	b.n	8005e10 <CAN_Init+0x194>
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (CAN_InitStruct->CAN_TTCM == ENABLE)
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	799b      	ldrb	r3, [r3, #6]
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d106      	bne.n	8005cec <CAN_Init+0x70>
    {
      CANx->MCR |= CAN_MCR_TTCM;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	601a      	str	r2, [r3, #0]
 8005cea:	e005      	b.n	8005cf8 <CAN_Init+0x7c>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (CAN_InitStruct->CAN_ABOM == ENABLE)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	79db      	ldrb	r3, [r3, #7]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d106      	bne.n	8005d0e <CAN_Init+0x92>
    {
      CANx->MCR |= CAN_MCR_ABOM;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	601a      	str	r2, [r3, #0]
 8005d0c:	e005      	b.n	8005d1a <CAN_Init+0x9e>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (CAN_InitStruct->CAN_AWUM == ENABLE)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	7a1b      	ldrb	r3, [r3, #8]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d106      	bne.n	8005d30 <CAN_Init+0xb4>
    {
      CANx->MCR |= CAN_MCR_AWUM;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f043 0220 	orr.w	r2, r3, #32
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	601a      	str	r2, [r3, #0]
 8005d2e:	e005      	b.n	8005d3c <CAN_Init+0xc0>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f023 0220 	bic.w	r2, r3, #32
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (CAN_InitStruct->CAN_NART == ENABLE)
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	7a5b      	ldrb	r3, [r3, #9]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d106      	bne.n	8005d52 <CAN_Init+0xd6>
    {
      CANx->MCR |= CAN_MCR_NART;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f043 0210 	orr.w	r2, r3, #16
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	601a      	str	r2, [r3, #0]
 8005d50:	e005      	b.n	8005d5e <CAN_Init+0xe2>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f023 0210 	bic.w	r2, r3, #16
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (CAN_InitStruct->CAN_RFLM == ENABLE)
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	7a9b      	ldrb	r3, [r3, #10]
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d106      	bne.n	8005d74 <CAN_Init+0xf8>
    {
      CANx->MCR |= CAN_MCR_RFLM;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f043 0208 	orr.w	r2, r3, #8
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	601a      	str	r2, [r3, #0]
 8005d72:	e005      	b.n	8005d80 <CAN_Init+0x104>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f023 0208 	bic.w	r2, r3, #8
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (CAN_InitStruct->CAN_TXFP == ENABLE)
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	7adb      	ldrb	r3, [r3, #11]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d106      	bne.n	8005d96 <CAN_Init+0x11a>
    {
      CANx->MCR |= CAN_MCR_TXFP;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f043 0204 	orr.w	r2, r3, #4
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	601a      	str	r2, [r3, #0]
 8005d94:	e005      	b.n	8005da2 <CAN_Init+0x126>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f023 0204 	bic.w	r2, r3, #4
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	789b      	ldrb	r3, [r3, #2]
 8005da6:	079a      	lsls	r2, r3, #30
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	78db      	ldrb	r3, [r3, #3]
 8005dac:	061b      	lsls	r3, r3, #24
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8005dae:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	791b      	ldrb	r3, [r3, #4]
 8005db4:	041b      	lsls	r3, r3, #16
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 8005db6:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	795b      	ldrb	r3, [r3, #5]
 8005dbc:	051b      	lsls	r3, r3, #20
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 8005dbe:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	881b      	ldrh	r3, [r3, #0]
 8005dc4:	3b01      	subs	r3, #1

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 8005dc6:	431a      	orrs	r2, r3
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	61da      	str	r2, [r3, #28]
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);

    /* Request leave initialisation */
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f023 0201 	bic.w	r2, r3, #1
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	601a      	str	r2, [r3, #0]

   /* Wait the acknowledge */
   wait_ack = 0;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	60bb      	str	r3, [r7, #8]

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8005ddc:	e002      	b.n	8005de4 <CAN_Init+0x168>
   {
     wait_ack++;
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	3301      	adds	r3, #1
 8005de2:	60bb      	str	r3, [r7, #8]
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;

   /* Wait the acknowledge */
   wait_ack = 0;

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	f003 0301 	and.w	r3, r3, #1
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d004      	beq.n	8005dfa <CAN_Init+0x17e>
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d1f1      	bne.n	8005dde <CAN_Init+0x162>
   {
     wait_ack++;
   }

    /* ...and check acknowledged */
    if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d002      	beq.n	8005e0c <CAN_Init+0x190>
    {
      InitStatus = CAN_InitStatus_Failed;
 8005e06:	2300      	movs	r3, #0
 8005e08:	73fb      	strb	r3, [r7, #15]
 8005e0a:	e001      	b.n	8005e10 <CAN_Init+0x194>
    }
    else
    {
      InitStatus = CAN_InitStatus_Success ;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* At this step, return the status of initialization */
  return InitStatus;
 8005e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop

08005e20 <CAN_FilterInit>:
  * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
  *         contains the configuration information.
  * @retval None
  */
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint32_t filter_number_bit_pos = 0;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	7a9b      	ldrb	r3, [r3, #10]
 8005e30:	2201      	movs	r2, #1
 8005e32:	fa02 f303 	lsl.w	r3, r2, r3
 8005e36:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 8005e38:	4b51      	ldr	r3, [pc, #324]	; (8005f80 <CAN_FilterInit+0x160>)
 8005e3a:	4a51      	ldr	r2, [pc, #324]	; (8005f80 <CAN_FilterInit+0x160>)
 8005e3c:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8005e40:	f042 0201 	orr.w	r2, r2, #1
 8005e44:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 8005e48:	4b4d      	ldr	r3, [pc, #308]	; (8005f80 <CAN_FilterInit+0x160>)
 8005e4a:	4a4d      	ldr	r2, [pc, #308]	; (8005f80 <CAN_FilterInit+0x160>)
 8005e4c:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	43d2      	mvns	r2, r2
 8005e54:	400a      	ands	r2, r1
 8005e56:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	7b1b      	ldrb	r3, [r3, #12]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d121      	bne.n	8005ea6 <CAN_FilterInit+0x86>
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 8005e62:	4b47      	ldr	r3, [pc, #284]	; (8005f80 <CAN_FilterInit+0x160>)
 8005e64:	4a46      	ldr	r2, [pc, #280]	; (8005f80 <CAN_FilterInit+0x160>)
 8005e66:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	43d2      	mvns	r2, r2
 8005e6e:	400a      	ands	r2, r1
 8005e70:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8005e74:	4b42      	ldr	r3, [pc, #264]	; (8005f80 <CAN_FilterInit+0x160>)
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	7a92      	ldrb	r2, [r2, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8005e7a:	6879      	ldr	r1, [r7, #4]
 8005e7c:	88c9      	ldrh	r1, [r1, #6]
 8005e7e:	0408      	lsls	r0, r1, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8005e80:	6879      	ldr	r1, [r7, #4]
 8005e82:	8849      	ldrh	r1, [r1, #2]
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8005e84:	4301      	orrs	r1, r0
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8005e86:	3248      	adds	r2, #72	; 0x48
 8005e88:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8005e8c:	493c      	ldr	r1, [pc, #240]	; (8005f80 <CAN_FilterInit+0x160>)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	7a9b      	ldrb	r3, [r3, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	8892      	ldrh	r2, [r2, #4]
 8005e96:	0410      	lsls	r0, r2, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	8812      	ldrh	r2, [r2, #0]
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8005e9c:	4302      	orrs	r2, r0
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8005e9e:	3348      	adds	r3, #72	; 0x48
 8005ea0:	00db      	lsls	r3, r3, #3
 8005ea2:	440b      	add	r3, r1
 8005ea4:	605a      	str	r2, [r3, #4]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	7b1b      	ldrb	r3, [r3, #12]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d120      	bne.n	8005ef0 <CAN_FilterInit+0xd0>
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 8005eae:	4b34      	ldr	r3, [pc, #208]	; (8005f80 <CAN_FilterInit+0x160>)
 8005eb0:	4a33      	ldr	r2, [pc, #204]	; (8005f80 <CAN_FilterInit+0x160>)
 8005eb2:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8005ebe:	4b30      	ldr	r3, [pc, #192]	; (8005f80 <CAN_FilterInit+0x160>)
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	7a92      	ldrb	r2, [r2, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8005ec4:	6879      	ldr	r1, [r7, #4]
 8005ec6:	8809      	ldrh	r1, [r1, #0]
 8005ec8:	0408      	lsls	r0, r1, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8005eca:	6879      	ldr	r1, [r7, #4]
 8005ecc:	8849      	ldrh	r1, [r1, #2]
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8005ece:	4301      	orrs	r1, r0
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8005ed0:	3248      	adds	r2, #72	; 0x48
 8005ed2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8005ed6:	492a      	ldr	r1, [pc, #168]	; (8005f80 <CAN_FilterInit+0x160>)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	7a9b      	ldrb	r3, [r3, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	8892      	ldrh	r2, [r2, #4]
 8005ee0:	0410      	lsls	r0, r2, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	88d2      	ldrh	r2, [r2, #6]
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8005ee6:	4302      	orrs	r2, r0
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8005ee8:	3348      	adds	r3, #72	; 0x48
 8005eea:	00db      	lsls	r3, r3, #3
 8005eec:	440b      	add	r3, r1
 8005eee:	605a      	str	r2, [r3, #4]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
  }

  /* Filter Mode */
  if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	7adb      	ldrb	r3, [r3, #11]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d109      	bne.n	8005f0c <CAN_FilterInit+0xec>
  {
    /*Id/Mask mode for the filter*/
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 8005ef8:	4b21      	ldr	r3, [pc, #132]	; (8005f80 <CAN_FilterInit+0x160>)
 8005efa:	4a21      	ldr	r2, [pc, #132]	; (8005f80 <CAN_FilterInit+0x160>)
 8005efc:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	43d2      	mvns	r2, r2
 8005f04:	400a      	ands	r2, r1
 8005f06:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005f0a:	e007      	b.n	8005f1c <CAN_FilterInit+0xfc>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 8005f0c:	4b1c      	ldr	r3, [pc, #112]	; (8005f80 <CAN_FilterInit+0x160>)
 8005f0e:	4a1c      	ldr	r2, [pc, #112]	; (8005f80 <CAN_FilterInit+0x160>)
 8005f10:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	430a      	orrs	r2, r1
 8005f18:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	891b      	ldrh	r3, [r3, #8]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d108      	bne.n	8005f36 <CAN_FilterInit+0x116>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 8005f24:	4b16      	ldr	r3, [pc, #88]	; (8005f80 <CAN_FilterInit+0x160>)
 8005f26:	4a16      	ldr	r2, [pc, #88]	; (8005f80 <CAN_FilterInit+0x160>)
 8005f28:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	43d2      	mvns	r2, r2
 8005f30:	400a      	ands	r2, r1
 8005f32:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }

  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	891b      	ldrh	r3, [r3, #8]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d107      	bne.n	8005f4e <CAN_FilterInit+0x12e>
  {
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 8005f3e:	4b10      	ldr	r3, [pc, #64]	; (8005f80 <CAN_FilterInit+0x160>)
 8005f40:	4a0f      	ldr	r2, [pc, #60]	; (8005f80 <CAN_FilterInit+0x160>)
 8005f42:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	430a      	orrs	r2, r1
 8005f4a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Filter activation */
  if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	7b5b      	ldrb	r3, [r3, #13]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d107      	bne.n	8005f66 <CAN_FilterInit+0x146>
  {
    CAN1->FA1R |= filter_number_bit_pos;
 8005f56:	4b0a      	ldr	r3, [pc, #40]	; (8005f80 <CAN_FilterInit+0x160>)
 8005f58:	4a09      	ldr	r2, [pc, #36]	; (8005f80 <CAN_FilterInit+0x160>)
 8005f5a:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	430a      	orrs	r2, r1
 8005f62:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 8005f66:	4b06      	ldr	r3, [pc, #24]	; (8005f80 <CAN_FilterInit+0x160>)
 8005f68:	4a05      	ldr	r2, [pc, #20]	; (8005f80 <CAN_FilterInit+0x160>)
 8005f6a:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8005f6e:	f022 0201 	bic.w	r2, r2, #1
 8005f72:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005f76:	3714      	adds	r7, #20
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr
 8005f80:	40006400 	.word	0x40006400

08005f84 <CAN_StructInit>:
  * @brief  Fills each CAN_InitStruct member with its default value.
  * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which ill be initialized.
  * @retval None
  */
void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  /* Reset CAN init structure parameters values */
  
  /* Initialize the time triggered communication mode */
  CAN_InitStruct->CAN_TTCM = DISABLE;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	719a      	strb	r2, [r3, #6]
  
  /* Initialize the automatic bus-off management */
  CAN_InitStruct->CAN_ABOM = DISABLE;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	71da      	strb	r2, [r3, #7]
  
  /* Initialize the automatic wake-up mode */
  CAN_InitStruct->CAN_AWUM = DISABLE;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	721a      	strb	r2, [r3, #8]
  
  /* Initialize the no automatic retransmission */
  CAN_InitStruct->CAN_NART = DISABLE;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	725a      	strb	r2, [r3, #9]
  
  /* Initialize the receive FIFO locked mode */
  CAN_InitStruct->CAN_RFLM = DISABLE;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	729a      	strb	r2, [r3, #10]
  
  /* Initialize the transmit FIFO priority */
  CAN_InitStruct->CAN_TXFP = DISABLE;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	72da      	strb	r2, [r3, #11]
  
  /* Initialize the CAN_Mode member */
  CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	709a      	strb	r2, [r3, #2]
  
  /* Initialize the CAN_SJW member */
  CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	70da      	strb	r2, [r3, #3]
  
  /* Initialize the CAN_BS1 member */
  CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2203      	movs	r2, #3
 8005fc0:	711a      	strb	r2, [r3, #4]
  
  /* Initialize the CAN_BS2 member */
  CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2202      	movs	r2, #2
 8005fc6:	715a      	strb	r2, [r3, #5]
  
  /* Initialize the CAN_Prescaler member */
  CAN_InitStruct->CAN_Prescaler = 1;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	801a      	strh	r2, [r3, #0]
}
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <CAN_SlaveStartBank>:
  * @brief  Select the start bank filter for slave CAN.
  * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
  * @retval None
  */
void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	4603      	mov	r3, r0
 8005fe0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
  
  /* Enter Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 8005fe2:	4b14      	ldr	r3, [pc, #80]	; (8006034 <CAN_SlaveStartBank+0x5c>)
 8005fe4:	4a13      	ldr	r2, [pc, #76]	; (8006034 <CAN_SlaveStartBank+0x5c>)
 8005fe6:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8005fea:	f042 0201 	orr.w	r2, r2, #1
 8005fee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Select the start slave bank */
  CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
 8005ff2:	4a10      	ldr	r2, [pc, #64]	; (8006034 <CAN_SlaveStartBank+0x5c>)
 8005ff4:	4b0f      	ldr	r3, [pc, #60]	; (8006034 <CAN_SlaveStartBank+0x5c>)
 8005ff6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ffa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005ffe:	f023 030e 	bic.w	r3, r3, #14
 8006002:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 8006006:	4b0b      	ldr	r3, [pc, #44]	; (8006034 <CAN_SlaveStartBank+0x5c>)
 8006008:	4a0a      	ldr	r2, [pc, #40]	; (8006034 <CAN_SlaveStartBank+0x5c>)
 800600a:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 800600e:	79fa      	ldrb	r2, [r7, #7]
 8006010:	0212      	lsls	r2, r2, #8
 8006012:	430a      	orrs	r2, r1
 8006014:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Leave Initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 8006018:	4b06      	ldr	r3, [pc, #24]	; (8006034 <CAN_SlaveStartBank+0x5c>)
 800601a:	4a06      	ldr	r2, [pc, #24]	; (8006034 <CAN_SlaveStartBank+0x5c>)
 800601c:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8006020:	f022 0201 	bic.w	r2, r2, #1
 8006024:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8006028:	370c      	adds	r7, #12
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	40006400 	.word	0x40006400

08006038 <CAN_DBGFreeze>:
  *          during debug. Reception FIFOs can still be accessed/controlled normally) 
  *          or DISABLE (CAN is working during debug).
  * @retval None
  */
void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	460b      	mov	r3, r1
 8006042:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006044:	78fb      	ldrb	r3, [r7, #3]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d006      	beq.n	8006058 <CAN_DBGFreeze+0x20>
  {
    /* Enable Debug Freeze  */
    CANx->MCR |= MCR_DBF;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	601a      	str	r2, [r3, #0]
 8006056:	e005      	b.n	8006064 <CAN_DBGFreeze+0x2c>
  }
  else
  {
    /* Disable Debug Freeze */
    CANx->MCR &= ~MCR_DBF;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	601a      	str	r2, [r3, #0]
  }
}
 8006064:	370c      	adds	r7, #12
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop

08006070 <CAN_TTComModeCmd>:
  *         data bytes of the 8-byte message: TIME[7:0] in data byte 6 and TIME[15:8] 
  *         in data byte 7. 
  * @retval None
  */
void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	460b      	mov	r3, r1
 800607a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800607c:	78fb      	ldrb	r3, [r7, #3]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d01e      	beq.n	80060c0 <CAN_TTComModeCmd+0x50>
  {
    /* Enable the TTCM mode */
    CANx->MCR |= CAN_MCR_TTCM;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	601a      	str	r2, [r3, #0]

    /* Set TGT bits */
    CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8006094:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80060a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80060b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
 80060be:	e01d      	b.n	80060fc <CAN_TTComModeCmd+0x8c>
  }
  else
  {
    /* Disable the TTCM mode */
    CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	601a      	str	r2, [r3, #0]

    /* Reset TGT bits */
    CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80060d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80060e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80060f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
  }
}
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop

08006108 <CAN_Transmit>:
  * @param  TxMessage: pointer to a structure which contains CAN Id, CAN DLC and CAN data.
  * @retval The number of the mailbox that is used for transmission or
  *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
  */
uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  uint8_t transmit_mailbox = 0;
 8006112:	2300      	movs	r3, #0
 8006114:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d002      	beq.n	8006128 <CAN_Transmit+0x20>
  {
    transmit_mailbox = 0;
 8006122:	2300      	movs	r3, #0
 8006124:	73fb      	strb	r3, [r7, #15]
 8006126:	e013      	b.n	8006150 <CAN_Transmit+0x48>
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d002      	beq.n	800613a <CAN_Transmit+0x32>
  {
    transmit_mailbox = 1;
 8006134:	2301      	movs	r3, #1
 8006136:	73fb      	strb	r3, [r7, #15]
 8006138:	e00a      	b.n	8006150 <CAN_Transmit+0x48>
  }
  else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d002      	beq.n	800614c <CAN_Transmit+0x44>
  {
    transmit_mailbox = 2;
 8006146:	2302      	movs	r3, #2
 8006148:	73fb      	strb	r3, [r7, #15]
 800614a:	e001      	b.n	8006150 <CAN_Transmit+0x48>
  }
  else
  {
    transmit_mailbox = CAN_TxStatus_NoMailBox;
 800614c:	2304      	movs	r3, #4
 800614e:	73fb      	strb	r3, [r7, #15]
  }

  if (transmit_mailbox != CAN_TxStatus_NoMailBox)
 8006150:	7bfb      	ldrb	r3, [r7, #15]
 8006152:	2b04      	cmp	r3, #4
 8006154:	f000 8098 	beq.w	8006288 <CAN_Transmit+0x180>
  {
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 8006158:	7bfb      	ldrb	r3, [r7, #15]
 800615a:	7bfa      	ldrb	r2, [r7, #15]
 800615c:	6879      	ldr	r1, [r7, #4]
 800615e:	3218      	adds	r2, #24
 8006160:	0112      	lsls	r2, r2, #4
 8006162:	440a      	add	r2, r1
 8006164:	6812      	ldr	r2, [r2, #0]
 8006166:	f002 0201 	and.w	r2, r2, #1
 800616a:	6879      	ldr	r1, [r7, #4]
 800616c:	3318      	adds	r3, #24
 800616e:	011b      	lsls	r3, r3, #4
 8006170:	440b      	add	r3, r1
 8006172:	601a      	str	r2, [r3, #0]
    if (TxMessage->IDE == CAN_Id_Standard)
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	7a1b      	ldrb	r3, [r3, #8]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d113      	bne.n	80061a4 <CAN_Transmit+0x9c>
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 800617c:	7bfb      	ldrb	r3, [r7, #15]
 800617e:	7bfa      	ldrb	r2, [r7, #15]
 8006180:	6879      	ldr	r1, [r7, #4]
 8006182:	3218      	adds	r2, #24
 8006184:	0112      	lsls	r2, r2, #4
 8006186:	440a      	add	r2, r1
 8006188:	6811      	ldr	r1, [r2, #0]
 800618a:	683a      	ldr	r2, [r7, #0]
 800618c:	6812      	ldr	r2, [r2, #0]
 800618e:	0550      	lsls	r0, r2, #21
                                                  TxMessage->RTR);
 8006190:	683a      	ldr	r2, [r7, #0]
 8006192:	7a52      	ldrb	r2, [r2, #9]
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
    if (TxMessage->IDE == CAN_Id_Standard)
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 8006194:	4302      	orrs	r2, r0
 8006196:	430a      	orrs	r2, r1
 8006198:	6879      	ldr	r1, [r7, #4]
 800619a:	3318      	adds	r3, #24
 800619c:	011b      	lsls	r3, r3, #4
 800619e:	440b      	add	r3, r1
 80061a0:	601a      	str	r2, [r3, #0]
 80061a2:	e015      	b.n	80061d0 <CAN_Transmit+0xc8>
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 80061a4:	7bfb      	ldrb	r3, [r7, #15]
 80061a6:	7bfa      	ldrb	r2, [r7, #15]
 80061a8:	6879      	ldr	r1, [r7, #4]
 80061aa:	3218      	adds	r2, #24
 80061ac:	0112      	lsls	r2, r2, #4
 80061ae:	440a      	add	r2, r1
 80061b0:	6811      	ldr	r1, [r2, #0]
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	6852      	ldr	r2, [r2, #4]
 80061b6:	00d0      	lsls	r0, r2, #3
                                                  TxMessage->IDE | \
 80061b8:	683a      	ldr	r2, [r7, #0]
 80061ba:	7a12      	ldrb	r2, [r2, #8]
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 80061bc:	4310      	orrs	r0, r2
                                                  TxMessage->IDE | \
                                                  TxMessage->RTR);
 80061be:	683a      	ldr	r2, [r7, #0]
 80061c0:	7a52      	ldrb	r2, [r2, #9]
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
                                                  TxMessage->IDE | \
 80061c2:	4302      	orrs	r2, r0
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 80061c4:	430a      	orrs	r2, r1
 80061c6:	6879      	ldr	r1, [r7, #4]
 80061c8:	3318      	adds	r3, #24
 80061ca:	011b      	lsls	r3, r3, #4
 80061cc:	440b      	add	r3, r1
 80061ce:	601a      	str	r2, [r3, #0]
                                                  TxMessage->IDE | \
                                                  TxMessage->RTR);
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	7a9b      	ldrb	r3, [r3, #10]
 80061d4:	f003 030f 	and.w	r3, r3, #15
 80061d8:	b2da      	uxtb	r2, r3
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	729a      	strb	r2, [r3, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 80061de:	7bfb      	ldrb	r3, [r7, #15]
 80061e0:	7bfa      	ldrb	r2, [r7, #15]
 80061e2:	6879      	ldr	r1, [r7, #4]
 80061e4:	3218      	adds	r2, #24
 80061e6:	0112      	lsls	r2, r2, #4
 80061e8:	440a      	add	r2, r1
 80061ea:	6852      	ldr	r2, [r2, #4]
 80061ec:	f022 020f 	bic.w	r2, r2, #15
 80061f0:	6879      	ldr	r1, [r7, #4]
 80061f2:	3318      	adds	r3, #24
 80061f4:	011b      	lsls	r3, r3, #4
 80061f6:	440b      	add	r3, r1
 80061f8:	605a      	str	r2, [r3, #4]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 80061fa:	7bfb      	ldrb	r3, [r7, #15]
 80061fc:	7bfa      	ldrb	r2, [r7, #15]
 80061fe:	6879      	ldr	r1, [r7, #4]
 8006200:	3218      	adds	r2, #24
 8006202:	0112      	lsls	r2, r2, #4
 8006204:	440a      	add	r2, r1
 8006206:	6851      	ldr	r1, [r2, #4]
 8006208:	683a      	ldr	r2, [r7, #0]
 800620a:	7a92      	ldrb	r2, [r2, #10]
 800620c:	430a      	orrs	r2, r1
 800620e:	6879      	ldr	r1, [r7, #4]
 8006210:	3318      	adds	r3, #24
 8006212:	011b      	lsls	r3, r3, #4
 8006214:	440b      	add	r3, r1
 8006216:	605a      	str	r2, [r3, #4]

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8006218:	7bfb      	ldrb	r3, [r7, #15]
 800621a:	683a      	ldr	r2, [r7, #0]
 800621c:	7b92      	ldrb	r2, [r2, #14]
 800621e:	0611      	lsls	r1, r2, #24
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 8006220:	683a      	ldr	r2, [r7, #0]
 8006222:	7b52      	ldrb	r2, [r2, #13]
 8006224:	0412      	lsls	r2, r2, #16
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8006226:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 8006228:	683a      	ldr	r2, [r7, #0]
 800622a:	7b12      	ldrb	r2, [r2, #12]
 800622c:	0212      	lsls	r2, r2, #8
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 800622e:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
 8006230:	683a      	ldr	r2, [r7, #0]
 8006232:	7ad2      	ldrb	r2, [r2, #11]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 8006234:	430a      	orrs	r2, r1
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8006236:	6879      	ldr	r1, [r7, #4]
 8006238:	011b      	lsls	r3, r3, #4
 800623a:	440b      	add	r3, r1
 800623c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8006240:	601a      	str	r2, [r3, #0]
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8006242:	7bfb      	ldrb	r3, [r7, #15]
 8006244:	683a      	ldr	r2, [r7, #0]
 8006246:	7c92      	ldrb	r2, [r2, #18]
 8006248:	0611      	lsls	r1, r2, #24
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 800624a:	683a      	ldr	r2, [r7, #0]
 800624c:	7c52      	ldrb	r2, [r2, #17]
 800624e:	0412      	lsls	r2, r2, #16
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8006250:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 8006252:	683a      	ldr	r2, [r7, #0]
 8006254:	7c12      	ldrb	r2, [r2, #16]
 8006256:	0212      	lsls	r2, r2, #8
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 8006258:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[5] << 8) |
                                             ((uint32_t)TxMessage->Data[4]));
 800625a:	683a      	ldr	r2, [r7, #0]
 800625c:	7bd2      	ldrb	r2, [r2, #15]
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 800625e:	430a      	orrs	r2, r1
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8006260:	6879      	ldr	r1, [r7, #4]
 8006262:	011b      	lsls	r3, r3, #4
 8006264:	440b      	add	r3, r1
 8006266:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800626a:	605a      	str	r2, [r3, #4]
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
                                             ((uint32_t)TxMessage->Data[4]));
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 800626c:	7bfb      	ldrb	r3, [r7, #15]
 800626e:	7bfa      	ldrb	r2, [r7, #15]
 8006270:	6879      	ldr	r1, [r7, #4]
 8006272:	3218      	adds	r2, #24
 8006274:	0112      	lsls	r2, r2, #4
 8006276:	440a      	add	r2, r1
 8006278:	6812      	ldr	r2, [r2, #0]
 800627a:	f042 0201 	orr.w	r2, r2, #1
 800627e:	6879      	ldr	r1, [r7, #4]
 8006280:	3318      	adds	r3, #24
 8006282:	011b      	lsls	r3, r3, #4
 8006284:	440b      	add	r3, r1
 8006286:	601a      	str	r2, [r3, #0]
  }
  return transmit_mailbox;
 8006288:	7bfb      	ldrb	r3, [r7, #15]
}
 800628a:	4618      	mov	r0, r3
 800628c:	3714      	adds	r7, #20
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop

08006298 <CAN_TransmitStatus>:
  * @param  TransmitMailbox: the number of the mailbox that is used for transmission.
  * @retval CAN_TxStatus_Ok if the CAN driver transmits the message, 
  *         CAN_TxStatus_Failed in an other case.
  */
uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	460b      	mov	r3, r1
 80062a2:	70fb      	strb	r3, [r7, #3]
  uint32_t state = 0;
 80062a4:	2300      	movs	r3, #0
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 
  switch (TransmitMailbox)
 80062a8:	78fb      	ldrb	r3, [r7, #3]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d009      	beq.n	80062c2 <CAN_TransmitStatus+0x2a>
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d00d      	beq.n	80062ce <CAN_TransmitStatus+0x36>
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d111      	bne.n	80062da <CAN_TransmitStatus+0x42>
  {
    case (CAN_TXMAILBOX_0): 
      state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	689a      	ldr	r2, [r3, #8]
 80062ba:	4b26      	ldr	r3, [pc, #152]	; (8006354 <CAN_TransmitStatus+0xbc>)
 80062bc:	4013      	ands	r3, r2
 80062be:	60fb      	str	r3, [r7, #12]
      break;
 80062c0:	e00e      	b.n	80062e0 <CAN_TransmitStatus+0x48>
    case (CAN_TXMAILBOX_1): 
      state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	689a      	ldr	r2, [r3, #8]
 80062c6:	4b24      	ldr	r3, [pc, #144]	; (8006358 <CAN_TransmitStatus+0xc0>)
 80062c8:	4013      	ands	r3, r2
 80062ca:	60fb      	str	r3, [r7, #12]
      break;
 80062cc:	e008      	b.n	80062e0 <CAN_TransmitStatus+0x48>
    case (CAN_TXMAILBOX_2): 
      state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	689a      	ldr	r2, [r3, #8]
 80062d2:	4b22      	ldr	r3, [pc, #136]	; (800635c <CAN_TransmitStatus+0xc4>)
 80062d4:	4013      	ands	r3, r2
 80062d6:	60fb      	str	r3, [r7, #12]
      break;
 80062d8:	e002      	b.n	80062e0 <CAN_TransmitStatus+0x48>
    default:
      state = CAN_TxStatus_Failed;
 80062da:	2300      	movs	r3, #0
 80062dc:	60fb      	str	r3, [r7, #12]
      break;
 80062de:	bf00      	nop
  }
  switch (state)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	4a1f      	ldr	r2, [pc, #124]	; (8006360 <CAN_TransmitStatus+0xc8>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d01b      	beq.n	8006320 <CAN_TransmitStatus+0x88>
 80062e8:	4a1d      	ldr	r2, [pc, #116]	; (8006360 <CAN_TransmitStatus+0xc8>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d808      	bhi.n	8006300 <CAN_TransmitStatus+0x68>
 80062ee:	4a1d      	ldr	r2, [pc, #116]	; (8006364 <CAN_TransmitStatus+0xcc>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d012      	beq.n	800631a <CAN_TransmitStatus+0x82>
 80062f4:	4a17      	ldr	r2, [pc, #92]	; (8006354 <CAN_TransmitStatus+0xbc>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d018      	beq.n	800632c <CAN_TransmitStatus+0x94>
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00a      	beq.n	8006314 <CAN_TransmitStatus+0x7c>
 80062fe:	e01e      	b.n	800633e <CAN_TransmitStatus+0xa6>
 8006300:	4a19      	ldr	r2, [pc, #100]	; (8006368 <CAN_TransmitStatus+0xd0>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d00f      	beq.n	8006326 <CAN_TransmitStatus+0x8e>
 8006306:	4a15      	ldr	r2, [pc, #84]	; (800635c <CAN_TransmitStatus+0xc4>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d015      	beq.n	8006338 <CAN_TransmitStatus+0xa0>
 800630c:	4a12      	ldr	r2, [pc, #72]	; (8006358 <CAN_TransmitStatus+0xc0>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d00f      	beq.n	8006332 <CAN_TransmitStatus+0x9a>
 8006312:	e014      	b.n	800633e <CAN_TransmitStatus+0xa6>
  {
      /* transmit pending  */
    case (0x0): state = CAN_TxStatus_Pending;
 8006314:	2302      	movs	r3, #2
 8006316:	60fb      	str	r3, [r7, #12]
      break;
 8006318:	e014      	b.n	8006344 <CAN_TransmitStatus+0xac>
      /* transmit failed  */
     case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
 800631a:	2300      	movs	r3, #0
 800631c:	60fb      	str	r3, [r7, #12]
      break;
 800631e:	e011      	b.n	8006344 <CAN_TransmitStatus+0xac>
     case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
 8006320:	2300      	movs	r3, #0
 8006322:	60fb      	str	r3, [r7, #12]
      break;
 8006324:	e00e      	b.n	8006344 <CAN_TransmitStatus+0xac>
     case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
 8006326:	2300      	movs	r3, #0
 8006328:	60fb      	str	r3, [r7, #12]
      break;
 800632a:	e00b      	b.n	8006344 <CAN_TransmitStatus+0xac>
      /* transmit succeeded  */
    case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
 800632c:	2301      	movs	r3, #1
 800632e:	60fb      	str	r3, [r7, #12]
      break;
 8006330:	e008      	b.n	8006344 <CAN_TransmitStatus+0xac>
    case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
 8006332:	2301      	movs	r3, #1
 8006334:	60fb      	str	r3, [r7, #12]
      break;
 8006336:	e005      	b.n	8006344 <CAN_TransmitStatus+0xac>
    case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 8006338:	2301      	movs	r3, #1
 800633a:	60fb      	str	r3, [r7, #12]
      break;
 800633c:	e002      	b.n	8006344 <CAN_TransmitStatus+0xac>
    default: state = CAN_TxStatus_Failed;
 800633e:	2300      	movs	r3, #0
 8006340:	60fb      	str	r3, [r7, #12]
      break;
 8006342:	bf00      	nop
  }
  return (uint8_t) state;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	b2db      	uxtb	r3, r3
}
 8006348:	4618      	mov	r0, r3
 800634a:	3714      	adds	r7, #20
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr
 8006354:	04000003 	.word	0x04000003
 8006358:	08000300 	.word	0x08000300
 800635c:	10030000 	.word	0x10030000
 8006360:	08000100 	.word	0x08000100
 8006364:	04000001 	.word	0x04000001
 8006368:	10010000 	.word	0x10010000

0800636c <CAN_CancelTransmit>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  Mailbox: Mailbox number.
  * @retval None
  */
void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	460b      	mov	r3, r1
 8006376:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
  /* abort transmission */
  switch (Mailbox)
 8006378:	78fb      	ldrb	r3, [r7, #3]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d00b      	beq.n	8006396 <CAN_CancelTransmit+0x2a>
 800637e:	2b02      	cmp	r3, #2
 8006380:	d010      	beq.n	80063a4 <CAN_CancelTransmit+0x38>
 8006382:	2b00      	cmp	r3, #0
 8006384:	d000      	beq.n	8006388 <CAN_CancelTransmit+0x1c>
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
      break;
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
      break;
    default:
      break;
 8006386:	e014      	b.n	80063b2 <CAN_CancelTransmit+0x46>
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
  /* abort transmission */
  switch (Mailbox)
  {
    case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	609a      	str	r2, [r3, #8]
      break;
 8006394:	e00d      	b.n	80063b2 <CAN_CancelTransmit+0x46>
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	609a      	str	r2, [r3, #8]
      break;
 80063a2:	e006      	b.n	80063b2 <CAN_CancelTransmit+0x46>
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	609a      	str	r2, [r3, #8]
      break;
 80063b0:	bf00      	nop
    default:
      break;
  }
}
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <CAN_Receive>:
  * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
  *         CAN DLC, CAN data and FMI number.
  * @retval None
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	460b      	mov	r3, r1
 80063c6:	607a      	str	r2, [r7, #4]
 80063c8:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 80063ca:	7afb      	ldrb	r3, [r7, #11]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	331b      	adds	r3, #27
 80063d0:	011b      	lsls	r3, r3, #4
 80063d2:	4413      	add	r3, r2
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	f003 0304 	and.w	r3, r3, #4
 80063dc:	b2da      	uxtb	r2, r3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	721a      	strb	r2, [r3, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	7a1b      	ldrb	r3, [r3, #8]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d109      	bne.n	80063fe <CAN_Receive+0x42>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 80063ea:	7afb      	ldrb	r3, [r7, #11]
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	331b      	adds	r3, #27
 80063f0:	011b      	lsls	r3, r3, #4
 80063f2:	4413      	add	r3, r2
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	0d5a      	lsrs	r2, r3, #21
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	601a      	str	r2, [r3, #0]
 80063fc:	e008      	b.n	8006410 <CAN_Receive+0x54>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 80063fe:	7afb      	ldrb	r3, [r7, #11]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	331b      	adds	r3, #27
 8006404:	011b      	lsls	r3, r3, #4
 8006406:	4413      	add	r3, r2
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	08da      	lsrs	r2, r3, #3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	605a      	str	r2, [r3, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8006410:	7afb      	ldrb	r3, [r7, #11]
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	331b      	adds	r3, #27
 8006416:	011b      	lsls	r3, r3, #4
 8006418:	4413      	add	r3, r2
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	b2db      	uxtb	r3, r3
 800641e:	f003 0302 	and.w	r3, r3, #2
 8006422:	b2da      	uxtb	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	725a      	strb	r2, [r3, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 8006428:	7afb      	ldrb	r3, [r7, #11]
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	331b      	adds	r3, #27
 800642e:	011b      	lsls	r3, r3, #4
 8006430:	4413      	add	r3, r2
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	b2db      	uxtb	r3, r3
 8006436:	f003 030f 	and.w	r3, r3, #15
 800643a:	b2da      	uxtb	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	729a      	strb	r2, [r3, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 8006440:	7afb      	ldrb	r3, [r7, #11]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	331b      	adds	r3, #27
 8006446:	011b      	lsls	r3, r3, #4
 8006448:	4413      	add	r3, r2
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	0a1b      	lsrs	r3, r3, #8
 800644e:	b2da      	uxtb	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	74da      	strb	r2, [r3, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 8006454:	7afb      	ldrb	r3, [r7, #11]
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	011b      	lsls	r3, r3, #4
 800645a:	4413      	add	r3, r2
 800645c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	b2da      	uxtb	r2, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	72da      	strb	r2, [r3, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 8006468:	7afb      	ldrb	r3, [r7, #11]
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	011b      	lsls	r3, r3, #4
 800646e:	4413      	add	r3, r2
 8006470:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	0a1b      	lsrs	r3, r3, #8
 8006478:	b2da      	uxtb	r2, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	731a      	strb	r2, [r3, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 800647e:	7afb      	ldrb	r3, [r7, #11]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	011b      	lsls	r3, r3, #4
 8006484:	4413      	add	r3, r2
 8006486:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	0c1b      	lsrs	r3, r3, #16
 800648e:	b2da      	uxtb	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	735a      	strb	r2, [r3, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 8006494:	7afb      	ldrb	r3, [r7, #11]
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	011b      	lsls	r3, r3, #4
 800649a:	4413      	add	r3, r2
 800649c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	0e1b      	lsrs	r3, r3, #24
 80064a4:	b2da      	uxtb	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	739a      	strb	r2, [r3, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 80064aa:	7afb      	ldrb	r3, [r7, #11]
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	011b      	lsls	r3, r3, #4
 80064b0:	4413      	add	r3, r2
 80064b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	b2da      	uxtb	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	73da      	strb	r2, [r3, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 80064be:	7afb      	ldrb	r3, [r7, #11]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	011b      	lsls	r3, r3, #4
 80064c4:	4413      	add	r3, r2
 80064c6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	0a1b      	lsrs	r3, r3, #8
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	741a      	strb	r2, [r3, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 80064d4:	7afb      	ldrb	r3, [r7, #11]
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	011b      	lsls	r3, r3, #4
 80064da:	4413      	add	r3, r2
 80064dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	0c1b      	lsrs	r3, r3, #16
 80064e4:	b2da      	uxtb	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	745a      	strb	r2, [r3, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 80064ea:	7afb      	ldrb	r3, [r7, #11]
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	011b      	lsls	r3, r3, #4
 80064f0:	4413      	add	r3, r2
 80064f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	0e1b      	lsrs	r3, r3, #24
 80064fa:	b2da      	uxtb	r2, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	749a      	strb	r2, [r3, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8006500:	7afb      	ldrb	r3, [r7, #11]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d106      	bne.n	8006514 <CAN_Receive+0x158>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	f043 0220 	orr.w	r2, r3, #32
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	60da      	str	r2, [r3, #12]
 8006512:	e005      	b.n	8006520 <CAN_Receive+0x164>
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	f043 0220 	orr.w	r2, r3, #32
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	611a      	str	r2, [r3, #16]
  }
}
 8006520:	3714      	adds	r7, #20
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop

0800652c <CAN_FIFORelease>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  FIFONumber: FIFO to release, CAN_FIFO0 or CAN_FIFO1.
  * @retval None
  */
void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	460b      	mov	r3, r1
 8006536:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8006538:	78fb      	ldrb	r3, [r7, #3]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d106      	bne.n	800654c <CAN_FIFORelease+0x20>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	f043 0220 	orr.w	r2, r3, #32
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	60da      	str	r2, [r3, #12]
 800654a:	e005      	b.n	8006558 <CAN_FIFORelease+0x2c>
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	f043 0220 	orr.w	r2, r3, #32
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	611a      	str	r2, [r3, #16]
  }
}
 8006558:	370c      	adds	r7, #12
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop

08006564 <CAN_MessagePending>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
  * @retval NbMessage : which is the number of pending message.
  */
uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	460b      	mov	r3, r1
 800656e:	70fb      	strb	r3, [r7, #3]
  uint8_t message_pending=0;
 8006570:	2300      	movs	r3, #0
 8006572:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  if (FIFONumber == CAN_FIFO0)
 8006574:	78fb      	ldrb	r3, [r7, #3]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d106      	bne.n	8006588 <CAN_MessagePending+0x24>
  {
    message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	b2db      	uxtb	r3, r3
 8006580:	f003 0303 	and.w	r3, r3, #3
 8006584:	73fb      	strb	r3, [r7, #15]
 8006586:	e00b      	b.n	80065a0 <CAN_MessagePending+0x3c>
  }
  else if (FIFONumber == CAN_FIFO1)
 8006588:	78fb      	ldrb	r3, [r7, #3]
 800658a:	2b01      	cmp	r3, #1
 800658c:	d106      	bne.n	800659c <CAN_MessagePending+0x38>
  {
    message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	b2db      	uxtb	r3, r3
 8006594:	f003 0303 	and.w	r3, r3, #3
 8006598:	73fb      	strb	r3, [r7, #15]
 800659a:	e001      	b.n	80065a0 <CAN_MessagePending+0x3c>
  }
  else
  {
    message_pending = 0;
 800659c:	2300      	movs	r3, #0
 800659e:	73fb      	strb	r3, [r7, #15]
  }
  return message_pending;
 80065a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3714      	adds	r7, #20
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop

080065b0 <CAN_OperatingModeRequest>:
  * @retval status of the requested mode which can be 
  *         - CAN_ModeStatus_Failed:  CAN failed entering the specific mode 
  *         - CAN_ModeStatus_Success: CAN Succeed entering the specific mode 
  */
uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	460b      	mov	r3, r1
 80065ba:	70fb      	strb	r3, [r7, #3]
  uint8_t status = CAN_ModeStatus_Failed;
 80065bc:	2300      	movs	r3, #0
 80065be:	73fb      	strb	r3, [r7, #15]
  
  /* Timeout for INAK or also for SLAK bits*/
  uint32_t timeout = INAK_TIMEOUT; 
 80065c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80065c4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));

  if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
 80065c6:	78fb      	ldrb	r3, [r7, #3]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d120      	bne.n	800660e <CAN_OperatingModeRequest+0x5e>
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f023 0303 	bic.w	r3, r3, #3
 80065d4:	f043 0201 	orr.w	r2, r3, #1
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 80065dc:	e002      	b.n	80065e4 <CAN_OperatingModeRequest+0x34>
    {
      timeout--;
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	3b01      	subs	r3, #1
 80065e2:	60bb      	str	r3, [r7, #8]
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	f003 0303 	and.w	r3, r3, #3
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d002      	beq.n	80065f6 <CAN_OperatingModeRequest+0x46>
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1f3      	bne.n	80065de <CAN_OperatingModeRequest+0x2e>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	f003 0303 	and.w	r3, r3, #3
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d002      	beq.n	8006608 <CAN_OperatingModeRequest+0x58>
    {
      status = CAN_ModeStatus_Failed;
 8006602:	2300      	movs	r3, #0
 8006604:	73fb      	strb	r3, [r7, #15]
 8006606:	e04a      	b.n	800669e <CAN_OperatingModeRequest+0xee>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8006608:	2301      	movs	r3, #1
 800660a:	73fb      	strb	r3, [r7, #15]
 800660c:	e047      	b.n	800669e <CAN_OperatingModeRequest+0xee>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
 800660e:	78fb      	ldrb	r3, [r7, #3]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d11e      	bne.n	8006652 <CAN_OperatingModeRequest+0xa2>
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f023 0203 	bic.w	r2, r3, #3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 8006620:	e002      	b.n	8006628 <CAN_OperatingModeRequest+0x78>
    {
      timeout--;
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	3b01      	subs	r3, #1
 8006626:	60bb      	str	r3, [r7, #8]
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	f003 0303 	and.w	r3, r3, #3
 8006630:	2b00      	cmp	r3, #0
 8006632:	d002      	beq.n	800663a <CAN_OperatingModeRequest+0x8a>
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1f3      	bne.n	8006622 <CAN_OperatingModeRequest+0x72>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != 0)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f003 0303 	and.w	r3, r3, #3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d002      	beq.n	800664c <CAN_OperatingModeRequest+0x9c>
    {
      status = CAN_ModeStatus_Failed;
 8006646:	2300      	movs	r3, #0
 8006648:	73fb      	strb	r3, [r7, #15]
 800664a:	e028      	b.n	800669e <CAN_OperatingModeRequest+0xee>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 800664c:	2301      	movs	r3, #1
 800664e:	73fb      	strb	r3, [r7, #15]
 8006650:	e025      	b.n	800669e <CAN_OperatingModeRequest+0xee>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
 8006652:	78fb      	ldrb	r3, [r7, #3]
 8006654:	2b02      	cmp	r3, #2
 8006656:	d120      	bne.n	800669a <CAN_OperatingModeRequest+0xea>
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f023 0303 	bic.w	r3, r3, #3
 8006660:	f043 0202 	orr.w	r2, r3, #2
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 8006668:	e002      	b.n	8006670 <CAN_OperatingModeRequest+0xc0>
    {
      timeout--;
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	3b01      	subs	r3, #1
 800666e:	60bb      	str	r3, [r7, #8]
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f003 0303 	and.w	r3, r3, #3
 8006678:	2b02      	cmp	r3, #2
 800667a:	d002      	beq.n	8006682 <CAN_OperatingModeRequest+0xd2>
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1f3      	bne.n	800666a <CAN_OperatingModeRequest+0xba>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f003 0303 	and.w	r3, r3, #3
 800668a:	2b02      	cmp	r3, #2
 800668c:	d002      	beq.n	8006694 <CAN_OperatingModeRequest+0xe4>
    {
      status = CAN_ModeStatus_Failed;
 800668e:	2300      	movs	r3, #0
 8006690:	73fb      	strb	r3, [r7, #15]
 8006692:	e004      	b.n	800669e <CAN_OperatingModeRequest+0xee>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8006694:	2301      	movs	r3, #1
 8006696:	73fb      	strb	r3, [r7, #15]
 8006698:	e001      	b.n	800669e <CAN_OperatingModeRequest+0xee>
    }
  }
  else
  {
    status = CAN_ModeStatus_Failed;
 800669a:	2300      	movs	r3, #0
 800669c:	73fb      	strb	r3, [r7, #15]
  }

  return  (uint8_t) status;
 800669e:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3714      	adds	r7, #20
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <CAN_Sleep>:
  * @brief  Enters the Sleep (low power) mode.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval CAN_Sleep_Ok if sleep entered, CAN_Sleep_Failed otherwise.
  */
uint8_t CAN_Sleep(CAN_TypeDef* CANx)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  uint8_t sleepstatus = CAN_Sleep_Failed;
 80066b4:	2300      	movs	r3, #0
 80066b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Request Sleep mode */
   CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f023 0303 	bic.w	r3, r3, #3
 80066c0:	f043 0202 	orr.w	r2, r3, #2
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	601a      	str	r2, [r3, #0]
   
  /* Sleep mode status */
  if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f003 0303 	and.w	r3, r3, #3
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d101      	bne.n	80066d8 <CAN_Sleep+0x2c>
  {
    /* Sleep mode not entered */
    sleepstatus =  CAN_Sleep_Ok;
 80066d4:	2301      	movs	r3, #1
 80066d6:	73fb      	strb	r3, [r7, #15]
  }
  /* return sleep mode status */
   return (uint8_t)sleepstatus;
 80066d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3714      	adds	r7, #20
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop

080066e8 <CAN_WakeUp>:
  * @brief  Wakes up the CAN peripheral from sleep mode .
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed otherwise.
  */
uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_slak = SLAK_TIMEOUT;
 80066f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80066f4:	60fb      	str	r3, [r7, #12]
  uint8_t wakeupstatus = CAN_WakeUp_Failed;
 80066f6:	2300      	movs	r3, #0
 80066f8:	72fb      	strb	r3, [r7, #11]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f023 0202 	bic.w	r2, r3, #2
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	601a      	str	r2, [r3, #0]
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 8006706:	e002      	b.n	800670e <CAN_WakeUp+0x26>
  {
   wait_slak--;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	3b01      	subs	r3, #1
 800670c:	60fb      	str	r3, [r7, #12]
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	f003 0302 	and.w	r3, r3, #2
 8006716:	2b00      	cmp	r3, #0
 8006718:	d002      	beq.n	8006720 <CAN_WakeUp+0x38>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1f3      	bne.n	8006708 <CAN_WakeUp+0x20>
  {
   wait_slak--;
  }
  if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	f003 0302 	and.w	r3, r3, #2
 8006728:	2b00      	cmp	r3, #0
 800672a:	d101      	bne.n	8006730 <CAN_WakeUp+0x48>
  {
   /* wake up done : Sleep mode exited */
    wakeupstatus = CAN_WakeUp_Ok;
 800672c:	2301      	movs	r3, #1
 800672e:	72fb      	strb	r3, [r7, #11]
  }
  /* return wakeup status */
  return (uint8_t)wakeupstatus;
 8006730:	7afb      	ldrb	r3, [r7, #11]
}
 8006732:	4618      	mov	r0, r3
 8006734:	3714      	adds	r7, #20
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop

08006740 <CAN_GetLastErrorCode>:
  *          - CAN_ERRORCODE_BitDominantErr: Bit Dominant Error
  *          - CAN_ERRORCODE_CRCErr: CRC Error
  *          - CAN_ERRORCODE_SoftwareSetErr: Software Set Error  
  */
uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
{
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  uint8_t errorcode=0;
 8006748:	2300      	movs	r3, #0
 800674a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the error code*/
  errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	b2db      	uxtb	r3, r3
 8006752:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006756:	73fb      	strb	r3, [r7, #15]
  
  /* Return the error code*/
  return errorcode;
 8006758:	7bfb      	ldrb	r3, [r7, #15]
}
 800675a:	4618      	mov	r0, r3
 800675c:	3714      	adds	r7, #20
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop

08006768 <CAN_GetReceiveErrorCounter>:
  *         error passive state.  
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.  
  * @retval CAN Receive Error Counter. 
  */
uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
 8006770:	2300      	movs	r3, #0
 8006772:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the Receive Error Counter*/
  counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	0e1b      	lsrs	r3, r3, #24
 800677a:	73fb      	strb	r3, [r7, #15]
  
  /* Return the Receive Error Counter*/
  return counter;
 800677c:	7bfb      	ldrb	r3, [r7, #15]
}
 800677e:	4618      	mov	r0, r3
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop

0800678c <CAN_GetLSBTransmitErrorCounter>:
  * @brief  Returns the LSB of the 9-bit CANx Transmit Error Counter(TEC).
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
  * @retval LSB of the 9-bit CAN Transmit Error Counter. 
  */
uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
 8006794:	2300      	movs	r3, #0
 8006796:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80067a0:	0c1b      	lsrs	r3, r3, #16
 80067a2:	73fb      	strb	r3, [r7, #15]
  
  /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  return counter;
 80067a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3714      	adds	r7, #20
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop

080067b4 <CAN_ITConfig>:
  * @param  NewState: new state of the CAN interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	4613      	mov	r3, r2
 80067c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80067c2:	79fb      	ldrb	r3, [r7, #7]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d006      	beq.n	80067d6 <CAN_ITConfig+0x22>
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	695a      	ldr	r2, [r3, #20]
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	431a      	orrs	r2, r3
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	615a      	str	r2, [r3, #20]
 80067d4:	e006      	b.n	80067e4 <CAN_ITConfig+0x30>
  }
  else
  {
    /* Disable the selected CANx interrupt */
    CANx->IER &= ~CAN_IT;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	695a      	ldr	r2, [r3, #20]
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	43db      	mvns	r3, r3
 80067de:	401a      	ands	r2, r3
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	615a      	str	r2, [r3, #20]
  }
}
 80067e4:	3714      	adds	r7, #20
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop

080067f0 <CAN_GetFlagStatus>:
  *            @arg CAN_FLAG_BOF: Bus-Off Flag    
  *            @arg CAN_FLAG_LEC: Last error code Flag      
  * @retval The new state of CAN_FLAG (SET or RESET).
  */
FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80067fa:	2300      	movs	r3, #0
 80067fc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
  

  if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8006804:	2b00      	cmp	r3, #0
 8006806:	d00d      	beq.n	8006824 <CAN_GetFlagStatus+0x34>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	699a      	ldr	r2, [r3, #24]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	4013      	ands	r3, r2
 8006810:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006814:	2b00      	cmp	r3, #0
 8006816:	d002      	beq.n	800681e <CAN_GetFlagStatus+0x2e>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8006818:	2301      	movs	r3, #1
 800681a:	73fb      	strb	r3, [r7, #15]
 800681c:	e048      	b.n	80068b0 <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 800681e:	2300      	movs	r3, #0
 8006820:	73fb      	strb	r3, [r7, #15]
 8006822:	e045      	b.n	80068b0 <CAN_GetFlagStatus+0xc0>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00d      	beq.n	800684a <CAN_GetFlagStatus+0x5a>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685a      	ldr	r2, [r3, #4]
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	4013      	ands	r3, r2
 8006836:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800683a:	2b00      	cmp	r3, #0
 800683c:	d002      	beq.n	8006844 <CAN_GetFlagStatus+0x54>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 800683e:	2301      	movs	r3, #1
 8006840:	73fb      	strb	r3, [r7, #15]
 8006842:	e035      	b.n	80068b0 <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8006844:	2300      	movs	r3, #0
 8006846:	73fb      	strb	r3, [r7, #15]
 8006848:	e032      	b.n	80068b0 <CAN_GetFlagStatus+0xc0>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00d      	beq.n	8006870 <CAN_GetFlagStatus+0x80>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	689a      	ldr	r2, [r3, #8]
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	4013      	ands	r3, r2
 800685c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006860:	2b00      	cmp	r3, #0
 8006862:	d002      	beq.n	800686a <CAN_GetFlagStatus+0x7a>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8006864:	2301      	movs	r3, #1
 8006866:	73fb      	strb	r3, [r7, #15]
 8006868:	e022      	b.n	80068b0 <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 800686a:	2300      	movs	r3, #0
 800686c:	73fb      	strb	r3, [r7, #15]
 800686e:	e01f      	b.n	80068b0 <CAN_GetFlagStatus+0xc0>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00d      	beq.n	8006896 <CAN_GetFlagStatus+0xa6>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	68da      	ldr	r2, [r3, #12]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	4013      	ands	r3, r2
 8006882:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006886:	2b00      	cmp	r3, #0
 8006888:	d002      	beq.n	8006890 <CAN_GetFlagStatus+0xa0>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 800688a:	2301      	movs	r3, #1
 800688c:	73fb      	strb	r3, [r7, #15]
 800688e:	e00f      	b.n	80068b0 <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8006890:	2300      	movs	r3, #0
 8006892:	73fb      	strb	r3, [r7, #15]
 8006894:	e00c      	b.n	80068b0 <CAN_GetFlagStatus+0xc0>
    }
  }
  else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
  { 
    /* Check the status of the specified CAN flag */
    if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	691a      	ldr	r2, [r3, #16]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	4013      	ands	r3, r2
 800689e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d002      	beq.n	80068ac <CAN_GetFlagStatus+0xbc>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 80068a6:	2301      	movs	r3, #1
 80068a8:	73fb      	strb	r3, [r7, #15]
 80068aa:	e001      	b.n	80068b0 <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 80068ac:	2300      	movs	r3, #0
 80068ae:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Return the CAN_FLAG status */
  return  bitstatus;
 80068b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3714      	adds	r7, #20
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop

080068c0 <CAN_ClearFlag>:
  *            @arg CAN_FLAG_SLAK: Sleep acknowledge Flag    
  *            @arg CAN_FLAG_LEC: Last error code Flag        
  * @retval None
  */
void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  uint32_t flagtmp=0;
 80068ca:	2300      	movs	r3, #0
 80068cc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
  
  if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
 80068ce:	683a      	ldr	r2, [r7, #0]
 80068d0:	4b16      	ldr	r3, [pc, #88]	; (800692c <CAN_ClearFlag+0x6c>)
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d103      	bne.n	80068de <CAN_ClearFlag+0x1e>
  {
    /* Clear the selected CAN flags */
    CANx->ESR = (uint32_t)RESET;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	619a      	str	r2, [r3, #24]
 80068dc:	e021      	b.n	8006922 <CAN_ClearFlag+0x62>
  }
  else /* MSR or TSR or RF0R or RF1R */
  {
    flagtmp = CAN_FLAG & 0x000FFFFF;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068e4:	60fb      	str	r3, [r7, #12]

    if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d003      	beq.n	80068f8 <CAN_ClearFlag+0x38>
    {
      /* Receive Flags */
      CANx->RF0R = (uint32_t)(flagtmp);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	60da      	str	r2, [r3, #12]
 80068f6:	e014      	b.n	8006922 <CAN_ClearFlag+0x62>
    }
    else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d003      	beq.n	800690a <CAN_ClearFlag+0x4a>
    {
      /* Receive Flags */
      CANx->RF1R = (uint32_t)(flagtmp);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	611a      	str	r2, [r3, #16]
 8006908:	e00b      	b.n	8006922 <CAN_ClearFlag+0x62>
    }
    else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006910:	2b00      	cmp	r3, #0
 8006912:	d003      	beq.n	800691c <CAN_ClearFlag+0x5c>
    {
      /* Transmit Flags */
      CANx->TSR = (uint32_t)(flagtmp);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	609a      	str	r2, [r3, #8]
 800691a:	e002      	b.n	8006922 <CAN_ClearFlag+0x62>
    }
    else /* If((CAN_FLAG & CAN_FLAGS_MSR)!=(uint32_t)RESET) */
    {
      /* Operating mode Flags */
      CANx->MSR = (uint32_t)(flagtmp);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	605a      	str	r2, [r3, #4]
    }
  }
}
 8006922:	3714      	adds	r7, #20
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr
 800692c:	30f00070 	.word	0x30f00070

08006930 <CAN_GetITStatus>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt
  * @retval The current state of CAN_IT (SET or RESET).
  */
ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  ITStatus itstatus = RESET;
 800693a:	2300      	movs	r3, #0
 800693c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  
  /* check the interrupt enable bit */
 if((CANx->IER & CAN_IT) != RESET)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	695a      	ldr	r2, [r3, #20]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	4013      	ands	r3, r2
 8006946:	2b00      	cmp	r3, #0
 8006948:	f000 80b2 	beq.w	8006ab0 <CAN_GetITStatus+0x180>
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	2b40      	cmp	r3, #64	; 0x40
 8006950:	d062      	beq.n	8006a18 <CAN_GetITStatus+0xe8>
 8006952:	2b40      	cmp	r3, #64	; 0x40
 8006954:	d80f      	bhi.n	8006976 <CAN_GetITStatus+0x46>
 8006956:	2b04      	cmp	r3, #4
 8006958:	d03a      	beq.n	80069d0 <CAN_GetITStatus+0xa0>
 800695a:	2b04      	cmp	r3, #4
 800695c:	d804      	bhi.n	8006968 <CAN_GetITStatus+0x38>
 800695e:	2b01      	cmp	r3, #1
 8006960:	d024      	beq.n	80069ac <CAN_GetITStatus+0x7c>
 8006962:	2b02      	cmp	r3, #2
 8006964:	d02b      	beq.n	80069be <CAN_GetITStatus+0x8e>
 8006966:	e09f      	b.n	8006aa8 <CAN_GetITStatus+0x178>
 8006968:	2b10      	cmp	r3, #16
 800696a:	d043      	beq.n	80069f4 <CAN_GetITStatus+0xc4>
 800696c:	2b20      	cmp	r3, #32
 800696e:	d04a      	beq.n	8006a06 <CAN_GetITStatus+0xd6>
 8006970:	2b08      	cmp	r3, #8
 8006972:	d036      	beq.n	80069e2 <CAN_GetITStatus+0xb2>
 8006974:	e098      	b.n	8006aa8 <CAN_GetITStatus+0x178>
 8006976:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800697a:	f000 8083 	beq.w	8006a84 <CAN_GetITStatus+0x154>
 800697e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006982:	d809      	bhi.n	8006998 <CAN_GetITStatus+0x68>
 8006984:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006988:	d06a      	beq.n	8006a60 <CAN_GetITStatus+0x130>
 800698a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800698e:	d070      	beq.n	8006a72 <CAN_GetITStatus+0x142>
 8006990:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006994:	d05b      	beq.n	8006a4e <CAN_GetITStatus+0x11e>
 8006996:	e087      	b.n	8006aa8 <CAN_GetITStatus+0x178>
 8006998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800699c:	d045      	beq.n	8006a2a <CAN_GetITStatus+0xfa>
 800699e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069a2:	d04b      	beq.n	8006a3c <CAN_GetITStatus+0x10c>
 80069a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069a8:	d075      	beq.n	8006a96 <CAN_GetITStatus+0x166>
 80069aa:	e07d      	b.n	8006aa8 <CAN_GetITStatus+0x178>
    {
      case CAN_IT_TME:
        /* Check CAN_TSR_RQCPx bits */
        itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	4618      	mov	r0, r3
 80069b2:	4943      	ldr	r1, [pc, #268]	; (8006ac0 <CAN_GetITStatus+0x190>)
 80069b4:	f000 f8f4 	bl	8006ba0 <CheckITStatus>
 80069b8:	4603      	mov	r3, r0
 80069ba:	73fb      	strb	r3, [r7, #15]
        break;
 80069bc:	e077      	b.n	8006aae <CAN_GetITStatus+0x17e>
      case CAN_IT_FMP0:
        /* Check CAN_RF0R_FMP0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	4618      	mov	r0, r3
 80069c4:	2103      	movs	r1, #3
 80069c6:	f000 f8eb 	bl	8006ba0 <CheckITStatus>
 80069ca:	4603      	mov	r3, r0
 80069cc:	73fb      	strb	r3, [r7, #15]
        break;
 80069ce:	e06e      	b.n	8006aae <CAN_GetITStatus+0x17e>
      case CAN_IT_FF0:
        /* Check CAN_RF0R_FULL0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	4618      	mov	r0, r3
 80069d6:	2108      	movs	r1, #8
 80069d8:	f000 f8e2 	bl	8006ba0 <CheckITStatus>
 80069dc:	4603      	mov	r3, r0
 80069de:	73fb      	strb	r3, [r7, #15]
        break;
 80069e0:	e065      	b.n	8006aae <CAN_GetITStatus+0x17e>
      case CAN_IT_FOV0:
        /* Check CAN_RF0R_FOVR0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	4618      	mov	r0, r3
 80069e8:	2110      	movs	r1, #16
 80069ea:	f000 f8d9 	bl	8006ba0 <CheckITStatus>
 80069ee:	4603      	mov	r3, r0
 80069f0:	73fb      	strb	r3, [r7, #15]
        break;
 80069f2:	e05c      	b.n	8006aae <CAN_GetITStatus+0x17e>
      case CAN_IT_FMP1:
        /* Check CAN_RF1R_FMP1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	4618      	mov	r0, r3
 80069fa:	2103      	movs	r1, #3
 80069fc:	f000 f8d0 	bl	8006ba0 <CheckITStatus>
 8006a00:	4603      	mov	r3, r0
 8006a02:	73fb      	strb	r3, [r7, #15]
        break;
 8006a04:	e053      	b.n	8006aae <CAN_GetITStatus+0x17e>
      case CAN_IT_FF1:
        /* Check CAN_RF1R_FULL1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	2108      	movs	r1, #8
 8006a0e:	f000 f8c7 	bl	8006ba0 <CheckITStatus>
 8006a12:	4603      	mov	r3, r0
 8006a14:	73fb      	strb	r3, [r7, #15]
        break;
 8006a16:	e04a      	b.n	8006aae <CAN_GetITStatus+0x17e>
      case CAN_IT_FOV1:
        /* Check CAN_RF1R_FOVR1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	2110      	movs	r1, #16
 8006a20:	f000 f8be 	bl	8006ba0 <CheckITStatus>
 8006a24:	4603      	mov	r3, r0
 8006a26:	73fb      	strb	r3, [r7, #15]
        break;
 8006a28:	e041      	b.n	8006aae <CAN_GetITStatus+0x17e>
      case CAN_IT_WKU:
        /* Check CAN_MSR_WKUI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	4618      	mov	r0, r3
 8006a30:	2108      	movs	r1, #8
 8006a32:	f000 f8b5 	bl	8006ba0 <CheckITStatus>
 8006a36:	4603      	mov	r3, r0
 8006a38:	73fb      	strb	r3, [r7, #15]
        break;
 8006a3a:	e038      	b.n	8006aae <CAN_GetITStatus+0x17e>
      case CAN_IT_SLK:
        /* Check CAN_MSR_SLAKI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	4618      	mov	r0, r3
 8006a42:	2110      	movs	r1, #16
 8006a44:	f000 f8ac 	bl	8006ba0 <CheckITStatus>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	73fb      	strb	r3, [r7, #15]
        break;
 8006a4c:	e02f      	b.n	8006aae <CAN_GetITStatus+0x17e>
      case CAN_IT_EWG:
        /* Check CAN_ESR_EWGF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	4618      	mov	r0, r3
 8006a54:	2101      	movs	r1, #1
 8006a56:	f000 f8a3 	bl	8006ba0 <CheckITStatus>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	73fb      	strb	r3, [r7, #15]
        break;
 8006a5e:	e026      	b.n	8006aae <CAN_GetITStatus+0x17e>
      case CAN_IT_EPV:
        /* Check CAN_ESR_EPVF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	4618      	mov	r0, r3
 8006a66:	2102      	movs	r1, #2
 8006a68:	f000 f89a 	bl	8006ba0 <CheckITStatus>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	73fb      	strb	r3, [r7, #15]
        break;
 8006a70:	e01d      	b.n	8006aae <CAN_GetITStatus+0x17e>
      case CAN_IT_BOF:
        /* Check CAN_ESR_BOFF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	4618      	mov	r0, r3
 8006a78:	2104      	movs	r1, #4
 8006a7a:	f000 f891 	bl	8006ba0 <CheckITStatus>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	73fb      	strb	r3, [r7, #15]
        break;
 8006a82:	e014      	b.n	8006aae <CAN_GetITStatus+0x17e>
      case CAN_IT_LEC:
        /* Check CAN_ESR_LEC bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	2170      	movs	r1, #112	; 0x70
 8006a8c:	f000 f888 	bl	8006ba0 <CheckITStatus>
 8006a90:	4603      	mov	r3, r0
 8006a92:	73fb      	strb	r3, [r7, #15]
        break;
 8006a94:	e00b      	b.n	8006aae <CAN_GetITStatus+0x17e>
      case CAN_IT_ERR:
        /* Check CAN_MSR_ERRI bit */ 
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	2104      	movs	r1, #4
 8006a9e:	f000 f87f 	bl	8006ba0 <CheckITStatus>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	73fb      	strb	r3, [r7, #15]
        break;
 8006aa6:	e002      	b.n	8006aae <CAN_GetITStatus+0x17e>
      default:
        /* in case of error, return RESET */
        itstatus = RESET;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	73fb      	strb	r3, [r7, #15]
        break;
 8006aac:	bf00      	nop
 8006aae:	e001      	b.n	8006ab4 <CAN_GetITStatus+0x184>
    }
  }
  else
  {
   /* in case the Interrupt is not enabled, return RESET */
    itstatus  = RESET;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the CAN_IT status */
  return  itstatus;
 8006ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	00010101 	.word	0x00010101

08006ac4 <CAN_ClearITPendingBit>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt 
  * @retval None
  */
void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ad4:	d043      	beq.n	8006b5e <CAN_ClearITPendingBit+0x9a>
 8006ad6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ada:	d80d      	bhi.n	8006af8 <CAN_ClearITPendingBit+0x34>
 8006adc:	2b08      	cmp	r3, #8
 8006ade:	d02a      	beq.n	8006b36 <CAN_ClearITPendingBit+0x72>
 8006ae0:	2b08      	cmp	r3, #8
 8006ae2:	d804      	bhi.n	8006aee <CAN_ClearITPendingBit+0x2a>
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d01e      	beq.n	8006b26 <CAN_ClearITPendingBit+0x62>
 8006ae8:	2b04      	cmp	r3, #4
 8006aea:	d020      	beq.n	8006b2e <CAN_ClearITPendingBit+0x6a>
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
    default:
       break;
 8006aec:	e051      	b.n	8006b92 <CAN_ClearITPendingBit+0xce>
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 8006aee:	2b20      	cmp	r3, #32
 8006af0:	d025      	beq.n	8006b3e <CAN_ClearITPendingBit+0x7a>
 8006af2:	2b40      	cmp	r3, #64	; 0x40
 8006af4:	d027      	beq.n	8006b46 <CAN_ClearITPendingBit+0x82>
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
    default:
       break;
 8006af6:	e04c      	b.n	8006b92 <CAN_ClearITPendingBit+0xce>
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 8006af8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006afc:	d03b      	beq.n	8006b76 <CAN_ClearITPendingBit+0xb2>
 8006afe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b02:	d806      	bhi.n	8006b12 <CAN_ClearITPendingBit+0x4e>
 8006b04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b08:	d02d      	beq.n	8006b66 <CAN_ClearITPendingBit+0xa2>
 8006b0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b0e:	d02e      	beq.n	8006b6e <CAN_ClearITPendingBit+0xaa>
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
    default:
       break;
 8006b10:	e03f      	b.n	8006b92 <CAN_ClearITPendingBit+0xce>
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 8006b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b16:	d01a      	beq.n	8006b4e <CAN_ClearITPendingBit+0x8a>
 8006b18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b1c:	d01b      	beq.n	8006b56 <CAN_ClearITPendingBit+0x92>
 8006b1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b22:	d02f      	beq.n	8006b84 <CAN_ClearITPendingBit+0xc0>
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
    default:
       break;
 8006b24:	e035      	b.n	8006b92 <CAN_ClearITPendingBit+0xce>

  switch (CAN_IT)
  {
    case CAN_IT_TME:
      /* Clear CAN_TSR_RQCPx (rc_w1)*/
      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a1c      	ldr	r2, [pc, #112]	; (8006b9c <CAN_ClearITPendingBit+0xd8>)
 8006b2a:	609a      	str	r2, [r3, #8]
      break;
 8006b2c:	e031      	b.n	8006b92 <CAN_ClearITPendingBit+0xce>
    case CAN_IT_FF0:
      /* Clear CAN_RF0R_FULL0 (rc_w1)*/
      CANx->RF0R = CAN_RF0R_FULL0; 
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2208      	movs	r2, #8
 8006b32:	60da      	str	r2, [r3, #12]
      break;
 8006b34:	e02d      	b.n	8006b92 <CAN_ClearITPendingBit+0xce>
    case CAN_IT_FOV0:
      /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
      CANx->RF0R = CAN_RF0R_FOVR0; 
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2210      	movs	r2, #16
 8006b3a:	60da      	str	r2, [r3, #12]
      break;
 8006b3c:	e029      	b.n	8006b92 <CAN_ClearITPendingBit+0xce>
    case CAN_IT_FF1:
      /* Clear CAN_RF1R_FULL1 (rc_w1)*/
      CANx->RF1R = CAN_RF1R_FULL1;  
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2208      	movs	r2, #8
 8006b42:	611a      	str	r2, [r3, #16]
      break;
 8006b44:	e025      	b.n	8006b92 <CAN_ClearITPendingBit+0xce>
    case CAN_IT_FOV1:
      /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
      CANx->RF1R = CAN_RF1R_FOVR1; 
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2210      	movs	r2, #16
 8006b4a:	611a      	str	r2, [r3, #16]
      break;
 8006b4c:	e021      	b.n	8006b92 <CAN_ClearITPendingBit+0xce>
    case CAN_IT_WKU:
      /* Clear CAN_MSR_WKUI (rc_w1)*/
      CANx->MSR = CAN_MSR_WKUI;  
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2208      	movs	r2, #8
 8006b52:	605a      	str	r2, [r3, #4]
      break;
 8006b54:	e01d      	b.n	8006b92 <CAN_ClearITPendingBit+0xce>
    case CAN_IT_SLK:
      /* Clear CAN_MSR_SLAKI (rc_w1)*/ 
      CANx->MSR = CAN_MSR_SLAKI;   
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2210      	movs	r2, #16
 8006b5a:	605a      	str	r2, [r3, #4]
      break;
 8006b5c:	e019      	b.n	8006b92 <CAN_ClearITPendingBit+0xce>
    case CAN_IT_EWG:
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2204      	movs	r2, #4
 8006b62:	605a      	str	r2, [r3, #4]
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/ 
      break;
 8006b64:	e015      	b.n	8006b92 <CAN_ClearITPendingBit+0xce>
    case CAN_IT_EPV:
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2204      	movs	r2, #4
 8006b6a:	605a      	str	r2, [r3, #4]
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
      break;
 8006b6c:	e011      	b.n	8006b92 <CAN_ClearITPendingBit+0xce>
    case CAN_IT_BOF:
      /* Clear CAN_MSR_ERRI (rc_w1) */ 
      CANx->MSR = CAN_MSR_ERRI; 
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2204      	movs	r2, #4
 8006b72:	605a      	str	r2, [r3, #4]
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
       break;
 8006b74:	e00d      	b.n	8006b92 <CAN_ClearITPendingBit+0xce>
    case CAN_IT_LEC:
      /*  Clear LEC bits */
      CANx->ESR = RESET; 
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	619a      	str	r2, [r3, #24]
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2204      	movs	r2, #4
 8006b80:	605a      	str	r2, [r3, #4]
      break;
 8006b82:	e006      	b.n	8006b92 <CAN_ClearITPendingBit+0xce>
    case CAN_IT_ERR:
      /*Clear LEC bits */
      CANx->ESR = RESET; 
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	619a      	str	r2, [r3, #24]
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2204      	movs	r2, #4
 8006b8e:	605a      	str	r2, [r3, #4]
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
 8006b90:	bf00      	nop
    default:
       break;
   }
}
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr
 8006b9c:	00010101 	.word	0x00010101

08006ba0 <CheckITStatus>:
  * @param  CAN_Reg: specifies the CAN interrupt register to check.
  * @param  It_Bit: specifies the interrupt source bit to check.
  * @retval The new state of the CAN Interrupt (SET or RESET).
  */
static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  ITStatus pendingbitstatus = RESET;
 8006baa:	2300      	movs	r3, #0
 8006bac:	73fb      	strb	r3, [r7, #15]
  
  if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d002      	beq.n	8006bbe <CheckITStatus+0x1e>
  {
    /* CAN_IT is set */
    pendingbitstatus = SET;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	73fb      	strb	r3, [r7, #15]
 8006bbc:	e001      	b.n	8006bc2 <CheckITStatus+0x22>
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	73fb      	strb	r3, [r7, #15]
  }
  return pendingbitstatus;
 8006bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3714      	adds	r7, #20
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <CRC_ResetDR>:
  * @brief  Resets the CRC Data register (DR).
  * @param  None
  * @retval None
  */
void CRC_ResetDR(void)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	af00      	add	r7, sp, #0
  /* Reset CRC generator */
  CRC->CR = CRC_CR_RESET;
 8006bd4:	4b03      	ldr	r3, [pc, #12]	; (8006be4 <CRC_ResetDR+0x14>)
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	609a      	str	r2, [r3, #8]
}
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	40023000 	.word	0x40023000

08006be8 <CRC_CalcCRC>:
  * @brief  Computes the 32-bit CRC of a given data word(32-bit).
  * @param  Data: data word(32-bit) to compute its CRC
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcCRC(uint32_t Data)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  CRC->DR = Data;
 8006bf0:	4b05      	ldr	r3, [pc, #20]	; (8006c08 <CRC_CalcCRC+0x20>)
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	601a      	str	r2, [r3, #0]
  
  return (CRC->DR);
 8006bf6:	4b04      	ldr	r3, [pc, #16]	; (8006c08 <CRC_CalcCRC+0x20>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	370c      	adds	r7, #12
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	40023000 	.word	0x40023000

08006c0c <CRC_CalcBlockCRC>:
  * @param  pBuffer: pointer to the buffer containing the data to be computed
  * @param  BufferLength: length of the buffer to be computed					
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
  uint32_t index = 0;
 8006c16:	2300      	movs	r3, #0
 8006c18:	60fb      	str	r3, [r7, #12]
  
  for(index = 0; index < BufferLength; index++)
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	60fb      	str	r3, [r7, #12]
 8006c1e:	e009      	b.n	8006c34 <CRC_CalcBlockCRC+0x28>
  {
    CRC->DR = pBuffer[index];
 8006c20:	4b0a      	ldr	r3, [pc, #40]	; (8006c4c <CRC_CalcBlockCRC+0x40>)
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	0092      	lsls	r2, r2, #2
 8006c26:	6879      	ldr	r1, [r7, #4]
 8006c28:	440a      	add	r2, r1
 8006c2a:	6812      	ldr	r2, [r2, #0]
 8006c2c:	601a      	str	r2, [r3, #0]
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
  uint32_t index = 0;
  
  for(index = 0; index < BufferLength; index++)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	3301      	adds	r3, #1
 8006c32:	60fb      	str	r3, [r7, #12]
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d3f1      	bcc.n	8006c20 <CRC_CalcBlockCRC+0x14>
  {
    CRC->DR = pBuffer[index];
  }
  return (CRC->DR);
 8006c3c:	4b03      	ldr	r3, [pc, #12]	; (8006c4c <CRC_CalcBlockCRC+0x40>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3714      	adds	r7, #20
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr
 8006c4c:	40023000 	.word	0x40023000

08006c50 <CRC_GetCRC>:
  * @brief  Returns the current CRC value.
  * @param  None
  * @retval 32-bit CRC
  */
uint32_t CRC_GetCRC(void)
{
 8006c50:	b480      	push	{r7}
 8006c52:	af00      	add	r7, sp, #0
  return (CRC->DR);
 8006c54:	4b03      	ldr	r3, [pc, #12]	; (8006c64 <CRC_GetCRC+0x14>)
 8006c56:	681b      	ldr	r3, [r3, #0]
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	40023000 	.word	0x40023000

08006c68 <CRC_SetIDRegister>:
  * @brief  Stores a 8-bit data in the Independent Data(ID) register.
  * @param  IDValue: 8-bit value to be stored in the ID register 					
  * @retval None
  */
void CRC_SetIDRegister(uint8_t IDValue)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	4603      	mov	r3, r0
 8006c70:	71fb      	strb	r3, [r7, #7]
  CRC->IDR = IDValue;
 8006c72:	4b04      	ldr	r3, [pc, #16]	; (8006c84 <CRC_SetIDRegister+0x1c>)
 8006c74:	79fa      	ldrb	r2, [r7, #7]
 8006c76:	711a      	strb	r2, [r3, #4]
}
 8006c78:	370c      	adds	r7, #12
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	40023000 	.word	0x40023000

08006c88 <CRC_GetIDRegister>:
  * @brief  Returns the 8-bit data stored in the Independent Data(ID) register
  * @param  None
  * @retval 8-bit value of the ID register 
  */
uint8_t CRC_GetIDRegister(void)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	af00      	add	r7, sp, #0
  return (CRC->IDR);
 8006c8c:	4b03      	ldr	r3, [pc, #12]	; (8006c9c <CRC_GetIDRegister+0x14>)
 8006c8e:	791b      	ldrb	r3, [r3, #4]
 8006c90:	b2db      	uxtb	r3, r3
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr
 8006c9c:	40023000 	.word	0x40023000

08006ca0 <CRYP_AES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_ECB(uint8_t Mode, uint8_t* Key, uint16_t Keysize,
                         uint8_t* Input, uint32_t Ilength, uint8_t* Output)
{
 8006ca0:	b590      	push	{r4, r7, lr}
 8006ca2:	b0ab      	sub	sp, #172	; 0xac
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60b9      	str	r1, [r7, #8]
 8006ca8:	607b      	str	r3, [r7, #4]
 8006caa:	4603      	mov	r3, r0
 8006cac:	73fb      	strb	r3, [r7, #15]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	81bb      	strh	r3, [r7, #12]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  ErrorStatus status = SUCCESS;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  uint32_t keyaddr    = (uint32_t)Key;
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  uint32_t inputaddr  = (uint32_t)Input;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  uint32_t outputaddr = (uint32_t)Output;
 8006cce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006cd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t i = 0;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8006cdc:	f107 0318 	add.w	r3, r7, #24
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f002 f9e5 	bl	80090b0 <CRYP_KeyStructInit>

  switch(Keysize)
 8006ce6:	89bb      	ldrh	r3, [r7, #12]
 8006ce8:	2bc0      	cmp	r3, #192	; 0xc0
 8006cea:	d03b      	beq.n	8006d64 <CRYP_AES_ECB+0xc4>
 8006cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cf0:	d07f      	beq.n	8006df2 <CRYP_AES_ECB+0x152>
 8006cf2:	2b80      	cmp	r3, #128	; 0x80
 8006cf4:	d000      	beq.n	8006cf8 <CRYP_AES_ECB+0x58>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    default:
    break;
 8006cf6:	e0db      	b.n	8006eb0 <CRYP_AES_ECB+0x210>
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);

  switch(Keysize)
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	647b      	str	r3, [r7, #68]	; 0x44
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8006cfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    \return               Reversed value
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
  return __builtin_bswap32(value);
 8006d06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d0a:	ba1b      	rev	r3, r3
 8006d0c:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8006d0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d12:	3304      	adds	r3, #4
 8006d14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8006d18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d26:	ba1b      	rev	r3, r3
 8006d28:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8006d2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d2e:	3304      	adds	r3, #4
 8006d30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8006d34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d42:	ba1b      	rev	r3, r3
 8006d44:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8006d46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d4a:	3304      	adds	r3, #4
 8006d4c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8006d50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006d5e:	ba1b      	rev	r3, r3
 8006d60:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8006d62:	e0a5      	b.n	8006eb0 <CRYP_AES_ECB+0x210>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 8006d64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d68:	647b      	str	r3, [r7, #68]	; 0x44
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8006d6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006d72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d74:	ba1b      	rev	r3, r3
 8006d76:	623b      	str	r3, [r7, #32]
    keyaddr+=4;
 8006d78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d7c:	3304      	adds	r3, #4
 8006d7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8006d82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d8c:	ba1b      	rev	r3, r3
 8006d8e:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 8006d90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d94:	3304      	adds	r3, #4
 8006d96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8006d9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	677b      	str	r3, [r7, #116]	; 0x74
 8006da2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006da4:	ba1b      	rev	r3, r3
 8006da6:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8006da8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006dac:	3304      	adds	r3, #4
 8006dae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8006db2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	673b      	str	r3, [r7, #112]	; 0x70
 8006dba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006dbc:	ba1b      	rev	r3, r3
 8006dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8006dc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006dc4:	3304      	adds	r3, #4
 8006dc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8006dca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dd4:	ba1b      	rev	r3, r3
 8006dd6:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8006dd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ddc:	3304      	adds	r3, #4
 8006dde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8006de2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	66bb      	str	r3, [r7, #104]	; 0x68
 8006dea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006dec:	ba1b      	rev	r3, r3
 8006dee:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8006df0:	e05e      	b.n	8006eb0 <CRYP_AES_ECB+0x210>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 8006df2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006df6:	647b      	str	r3, [r7, #68]	; 0x44
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8006df8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	667b      	str	r3, [r7, #100]	; 0x64
 8006e00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e02:	ba1b      	rev	r3, r3
 8006e04:	61bb      	str	r3, [r7, #24]
    keyaddr+=4;
 8006e06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e0a:	3304      	adds	r3, #4
 8006e0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8006e10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	663b      	str	r3, [r7, #96]	; 0x60
 8006e18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e1a:	ba1b      	rev	r3, r3
 8006e1c:	61fb      	str	r3, [r7, #28]
    keyaddr+=4;
 8006e1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e22:	3304      	adds	r3, #4
 8006e24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8006e28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e32:	ba1b      	rev	r3, r3
 8006e34:	623b      	str	r3, [r7, #32]
    keyaddr+=4;
 8006e36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e3a:	3304      	adds	r3, #4
 8006e3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8006e40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e4a:	ba1b      	rev	r3, r3
 8006e4c:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 8006e4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e52:	3304      	adds	r3, #4
 8006e54:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8006e58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	657b      	str	r3, [r7, #84]	; 0x54
 8006e60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e62:	ba1b      	rev	r3, r3
 8006e64:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8006e66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e6a:	3304      	adds	r3, #4
 8006e6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8006e70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	653b      	str	r3, [r7, #80]	; 0x50
 8006e78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e7a:	ba1b      	rev	r3, r3
 8006e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8006e7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e82:	3304      	adds	r3, #4
 8006e84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8006e88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e92:	ba1b      	rev	r3, r3
 8006e94:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8006e96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e9a:	3304      	adds	r3, #4
 8006e9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8006ea0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006eaa:	ba1b      	rev	r3, r3
 8006eac:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8006eae:	bf00      	nop
    default:
    break;
  }

  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 8006eb0:	7bfb      	ldrb	r3, [r7, #15]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d130      	bne.n	8006f18 <CRYP_AES_ECB+0x278>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 8006eb6:	f002 f96b 	bl	8009190 <CRYP_FIFOFlush>

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8006eba:	2304      	movs	r3, #4
 8006ebc:	63bb      	str	r3, [r7, #56]	; 0x38
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 8006ebe:	2338      	movs	r3, #56	; 0x38
 8006ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	643b      	str	r3, [r7, #64]	; 0x40
    CRYP_Init(&AES_CRYP_InitStructure);
 8006ec6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f002 f85c 	bl	8008f88 <CRYP_Init>

    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8006ed0:	f107 0318 	add.w	r3, r7, #24
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f002 f8bf 	bl	8009058 <CRYP_KeyInit>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8006eda:	2001      	movs	r0, #1
 8006edc:	f002 f966 	bl	80091ac <CRYP_Cmd>

    /* wait until the Busy flag is RESET */
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8006ee0:	2010      	movs	r0, #16
 8006ee2:	f002 fb61 	bl	80095a8 <CRYP_GetFlagStatus>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      counter++;
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	3301      	adds	r3, #1
 8006ef0:	617b      	str	r3, [r7, #20]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ef8:	d003      	beq.n	8006f02 <CRYP_AES_ECB+0x262>
 8006efa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1ee      	bne.n	8006ee0 <CRYP_AES_ECB+0x240>

    if (busystatus != RESET)
 8006f02:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d003      	beq.n	8006f12 <CRYP_AES_ECB+0x272>
   {
       status = ERROR;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8006f10:	e009      	b.n	8006f26 <CRYP_AES_ECB+0x286>
    }
    else
    {
      /* Crypto Init for decryption process */  
      AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8006f12:	2304      	movs	r3, #4
 8006f14:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f16:	e006      	b.n	8006f26 <CRYP_AES_ECB+0x286>
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {

    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8006f18:	f107 0318 	add.w	r3, r7, #24
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f002 f89b 	bl	8009058 <CRYP_KeyInit>

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 8006f22:	2300      	movs	r3, #0
 8006f24:	63bb      	str	r3, [r7, #56]	; 0x38
  }

  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
 8006f26:	2320      	movs	r3, #32
 8006f28:	63fb      	str	r3, [r7, #60]	; 0x3c
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8006f2a:	2380      	movs	r3, #128	; 0x80
 8006f2c:	643b      	str	r3, [r7, #64]	; 0x40
  CRYP_Init(&AES_CRYP_InitStructure);
 8006f2e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006f32:	4618      	mov	r0, r3
 8006f34:	f002 f828 	bl	8008f88 <CRYP_Init>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 8006f38:	f002 f92a 	bl	8009190 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8006f3c:	2001      	movs	r0, #1
 8006f3e:	f002 f935 	bl	80091ac <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 8006f42:	f002 fb17 	bl	8009574 <CRYP_GetCmdStatus>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d101      	bne.n	8006f50 <CRYP_AES_ECB+0x2b0>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	e08b      	b.n	8007068 <CRYP_AES_ECB+0x3c8>
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8006f50:	2300      	movs	r3, #0
 8006f52:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006f56:	e077      	b.n	8007048 <CRYP_AES_ECB+0x3a8>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8006f58:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f002 f940 	bl	80091e4 <CRYP_DataIn>
    inputaddr+=4;
 8006f64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f68:	3304      	adds	r3, #4
 8006f6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8006f6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4618      	mov	r0, r3
 8006f76:	f002 f935 	bl	80091e4 <CRYP_DataIn>
    inputaddr+=4;
 8006f7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f7e:	3304      	adds	r3, #4
 8006f80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8006f84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f002 f92a 	bl	80091e4 <CRYP_DataIn>
    inputaddr+=4;
 8006f90:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f94:	3304      	adds	r3, #4
 8006f96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8006f9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f002 f91f 	bl	80091e4 <CRYP_DataIn>
    inputaddr+=4;
 8006fa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006faa:	3304      	adds	r3, #4
 8006fac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    /* Wait until the complete message has been processed */
    counter = 0;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8006fb4:	2010      	movs	r0, #16
 8006fb6:	f002 faf7 	bl	80095a8 <CRYP_GetFlagStatus>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      counter++;
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	617b      	str	r3, [r7, #20]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fcc:	d003      	beq.n	8006fd6 <CRYP_AES_ECB+0x336>
 8006fce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1ee      	bne.n	8006fb4 <CRYP_AES_ECB+0x314>

    if (busystatus != RESET)
 8006fd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d003      	beq.n	8006fe6 <CRYP_AES_ECB+0x346>
   {
       status = ERROR;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8006fe4:	e02b      	b.n	800703e <CRYP_AES_ECB+0x39e>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8006fe6:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8006fea:	f002 f909 	bl	8009200 <CRYP_DataOut>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8006ff2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ff6:	3304      	adds	r3, #4
 8006ff8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8006ffc:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8007000:	f002 f8fe 	bl	8009200 <CRYP_DataOut>
 8007004:	4603      	mov	r3, r0
 8007006:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8007008:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800700c:	3304      	adds	r3, #4
 800700e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8007012:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8007016:	f002 f8f3 	bl	8009200 <CRYP_DataOut>
 800701a:	4603      	mov	r3, r0
 800701c:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800701e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007022:	3304      	adds	r3, #4
 8007024:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      *(uint32_t*)(outputaddr) = CRYP_DataOut(); 
 8007028:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 800702c:	f002 f8e8 	bl	8009200 <CRYP_DataOut>
 8007030:	4603      	mov	r3, r0
 8007032:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8007034:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007038:	3304      	adds	r3, #4
 800703a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 800703e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007042:	3310      	adds	r3, #16
 8007044:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007048:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800704c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007050:	429a      	cmp	r2, r3
 8007052:	d204      	bcs.n	800705e <CRYP_AES_ECB+0x3be>
 8007054:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8007058:	2b00      	cmp	r3, #0
 800705a:	f47f af7d 	bne.w	8006f58 <CRYP_AES_ECB+0x2b8>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 800705e:	2000      	movs	r0, #0
 8007060:	f002 f8a4 	bl	80091ac <CRYP_Cmd>

  return status; 
 8007064:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 8007068:	4618      	mov	r0, r3
 800706a:	37ac      	adds	r7, #172	; 0xac
 800706c:	46bd      	mov	sp, r7
 800706e:	bd90      	pop	{r4, r7, pc}

08007070 <CRYP_AES_CBC>:
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CBC(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key,
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 8007070:	b590      	push	{r4, r7, lr}
 8007072:	b0b3      	sub	sp, #204	; 0xcc
 8007074:	af00      	add	r7, sp, #0
 8007076:	60b9      	str	r1, [r7, #8]
 8007078:	607a      	str	r2, [r7, #4]
 800707a:	4602      	mov	r2, r0
 800707c:	73fa      	strb	r2, [r7, #15]
 800707e:	81bb      	strh	r3, [r7, #12]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8007080:	2300      	movs	r3, #0
 8007082:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 8007084:	2300      	movs	r3, #0
 8007086:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  ErrorStatus status = SUCCESS;
 800708a:	2301      	movs	r3, #1
 800708c:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
  uint32_t keyaddr    = (uint32_t)Key;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t inputaddr  = (uint32_t)Input;
 8007096:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800709a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  uint32_t outputaddr = (uint32_t)Output;
 800709e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t ivaddr = (uint32_t)InitVectors;
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t i = 0;
 80070ac:	2300      	movs	r3, #0
 80070ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 80070b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070b6:	4618      	mov	r0, r3
 80070b8:	f001 fffa 	bl	80090b0 <CRYP_KeyStructInit>

  switch(Keysize)
 80070bc:	89bb      	ldrh	r3, [r7, #12]
 80070be:	2bc0      	cmp	r3, #192	; 0xc0
 80070c0:	d03c      	beq.n	800713c <CRYP_AES_CBC+0xcc>
 80070c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070c6:	f000 808c 	beq.w	80071e2 <CRYP_AES_CBC+0x172>
 80070ca:	2b80      	cmp	r3, #128	; 0x80
 80070cc:	d000      	beq.n	80070d0 <CRYP_AES_CBC+0x60>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    default:
    break;
 80070ce:	e0e9      	b.n	80072a4 <CRYP_AES_CBC+0x234>
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);

  switch(Keysize)
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 80070d0:	2300      	movs	r3, #0
 80070d2:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80070d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80070de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80070e2:	ba1b      	rev	r3, r3
 80070e4:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 80070e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80070ea:	3304      	adds	r3, #4
 80070ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80070f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80070fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80070fe:	ba1b      	rev	r3, r3
 8007100:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8007102:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007106:	3304      	adds	r3, #4
 8007108:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 800710c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007116:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800711a:	ba1b      	rev	r3, r3
 800711c:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 800711e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007122:	3304      	adds	r3, #4
 8007124:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8007128:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007132:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007136:	ba1b      	rev	r3, r3
 8007138:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 800713a:	e0b3      	b.n	80072a4 <CRYP_AES_CBC+0x234>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 800713c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007140:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8007142:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800714c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007150:	ba1b      	rev	r3, r3
 8007152:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8007154:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007158:	3304      	adds	r3, #4
 800715a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800715e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007168:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800716c:	ba1b      	rev	r3, r3
 800716e:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8007170:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007174:	3304      	adds	r3, #4
 8007176:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800717a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007184:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007188:	ba1b      	rev	r3, r3
 800718a:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 800718c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007190:	3304      	adds	r3, #4
 8007192:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8007196:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80071a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80071a4:	ba1b      	rev	r3, r3
 80071a6:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 80071a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80071ac:	3304      	adds	r3, #4
 80071ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80071b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80071bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80071c0:	ba1b      	rev	r3, r3
 80071c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 80071c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80071c8:	3304      	adds	r3, #4
 80071ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80071ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80071d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071dc:	ba1b      	rev	r3, r3
 80071de:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 80071e0:	e060      	b.n	80072a4 <CRYP_AES_CBC+0x234>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 80071e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071e6:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 80071e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80071f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80071f6:	ba1b      	rev	r3, r3
 80071f8:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 80071fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80071fe:	3304      	adds	r3, #4
 8007200:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8007204:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800720c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800720e:	ba1b      	rev	r3, r3
 8007210:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8007212:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007216:	3304      	adds	r3, #4
 8007218:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 800721c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	67bb      	str	r3, [r7, #120]	; 0x78
 8007224:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007226:	ba1b      	rev	r3, r3
 8007228:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 800722a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800722e:	3304      	adds	r3, #4
 8007230:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8007234:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	677b      	str	r3, [r7, #116]	; 0x74
 800723c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800723e:	ba1b      	rev	r3, r3
 8007240:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8007242:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007246:	3304      	adds	r3, #4
 8007248:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800724c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	673b      	str	r3, [r7, #112]	; 0x70
 8007254:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007256:	ba1b      	rev	r3, r3
 8007258:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 800725a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800725e:	3304      	adds	r3, #4
 8007260:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8007264:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800726c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800726e:	ba1b      	rev	r3, r3
 8007270:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8007272:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007276:	3304      	adds	r3, #4
 8007278:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 800727c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	66bb      	str	r3, [r7, #104]	; 0x68
 8007284:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007286:	ba1b      	rev	r3, r3
 8007288:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 800728a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800728e:	3304      	adds	r3, #4
 8007290:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8007294:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	667b      	str	r3, [r7, #100]	; 0x64
 800729c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800729e:	ba1b      	rev	r3, r3
 80072a0:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 80072a2:	bf00      	nop
    default:
    break;
  }

  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 80072a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	663b      	str	r3, [r7, #96]	; 0x60
 80072ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072ae:	ba1b      	rev	r3, r3
 80072b0:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 80072b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072b6:	3304      	adds	r3, #4
 80072b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 80072bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072c6:	ba1b      	rev	r3, r3
 80072c8:	61bb      	str	r3, [r7, #24]
  ivaddr+=4;
 80072ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072ce:	3304      	adds	r3, #4
 80072d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 80072d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	65bb      	str	r3, [r7, #88]	; 0x58
 80072dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072de:	ba1b      	rev	r3, r3
 80072e0:	61fb      	str	r3, [r7, #28]
  ivaddr+=4;
 80072e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072e6:	3304      	adds	r3, #4
 80072e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 80072ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	657b      	str	r3, [r7, #84]	; 0x54
 80072f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072f6:	ba1b      	rev	r3, r3
 80072f8:	623b      	str	r3, [r7, #32]


  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 80072fa:	7bfb      	ldrb	r3, [r7, #15]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d130      	bne.n	8007362 <CRYP_AES_CBC+0x2f2>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 8007300:	f001 ff46 	bl	8009190 <CRYP_FIFOFlush>

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8007304:	2304      	movs	r3, #4
 8007306:	647b      	str	r3, [r7, #68]	; 0x44
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 8007308:	2338      	movs	r3, #56	; 0x38
 800730a:	64bb      	str	r3, [r7, #72]	; 0x48
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 800730c:	2300      	movs	r3, #0
 800730e:	64fb      	str	r3, [r7, #76]	; 0x4c

    CRYP_Init(&AES_CRYP_InitStructure);
 8007310:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007314:	4618      	mov	r0, r3
 8007316:	f001 fe37 	bl	8008f88 <CRYP_Init>

    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 800731a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800731e:	4618      	mov	r0, r3
 8007320:	f001 fe9a 	bl	8009058 <CRYP_KeyInit>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8007324:	2001      	movs	r0, #1
 8007326:	f001 ff41 	bl	80091ac <CRYP_Cmd>

    /* wait until the Busy flag is RESET */
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 800732a:	2010      	movs	r0, #16
 800732c:	f002 f93c 	bl	80095a8 <CRYP_GetFlagStatus>
 8007330:	4603      	mov	r3, r0
 8007332:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      counter++;
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	3301      	adds	r3, #1
 800733a:	613b      	str	r3, [r7, #16]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007342:	d003      	beq.n	800734c <CRYP_AES_CBC+0x2dc>
 8007344:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1ee      	bne.n	800732a <CRYP_AES_CBC+0x2ba>

    if (busystatus != RESET)
 800734c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007350:	2b00      	cmp	r3, #0
 8007352:	d003      	beq.n	800735c <CRYP_AES_CBC+0x2ec>
   {
       status = ERROR;
 8007354:	2300      	movs	r3, #0
 8007356:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 800735a:	e009      	b.n	8007370 <CRYP_AES_CBC+0x300>
    }
    else
    {
      /* Crypto Init for decryption process */  
      AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 800735c:	2304      	movs	r3, #4
 800735e:	647b      	str	r3, [r7, #68]	; 0x44
 8007360:	e006      	b.n	8007370 <CRYP_AES_CBC+0x300>
    }
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8007362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007366:	4618      	mov	r0, r3
 8007368:	f001 fe76 	bl	8009058 <CRYP_KeyInit>

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 800736c:	2300      	movs	r3, #0
 800736e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CBC;
 8007370:	2328      	movs	r3, #40	; 0x28
 8007372:	64bb      	str	r3, [r7, #72]	; 0x48
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8007374:	2380      	movs	r3, #128	; 0x80
 8007376:	64fb      	str	r3, [r7, #76]	; 0x4c
  CRYP_Init(&AES_CRYP_InitStructure);
 8007378:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800737c:	4618      	mov	r0, r3
 800737e:	f001 fe03 	bl	8008f88 <CRYP_Init>

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);
 8007382:	f107 0314 	add.w	r3, r7, #20
 8007386:	4618      	mov	r0, r3
 8007388:	f001 feb4 	bl	80090f4 <CRYP_IVInit>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 800738c:	f001 ff00 	bl	8009190 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8007390:	2001      	movs	r0, #1
 8007392:	f001 ff0b 	bl	80091ac <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 8007396:	f002 f8ed 	bl	8009574 <CRYP_GetCmdStatus>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d101      	bne.n	80073a4 <CRYP_AES_CBC+0x334>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 80073a0:	2300      	movs	r3, #0
 80073a2:	e08b      	b.n	80074bc <CRYP_AES_CBC+0x44c>
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80073a4:	2300      	movs	r3, #0
 80073a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073aa:	e077      	b.n	800749c <CRYP_AES_CBC+0x42c>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80073ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4618      	mov	r0, r3
 80073b4:	f001 ff16 	bl	80091e4 <CRYP_DataIn>
    inputaddr+=4;
 80073b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80073bc:	3304      	adds	r3, #4
 80073be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80073c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4618      	mov	r0, r3
 80073ca:	f001 ff0b 	bl	80091e4 <CRYP_DataIn>
    inputaddr+=4;
 80073ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80073d2:	3304      	adds	r3, #4
 80073d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80073d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4618      	mov	r0, r3
 80073e0:	f001 ff00 	bl	80091e4 <CRYP_DataIn>
    inputaddr+=4;
 80073e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80073e8:	3304      	adds	r3, #4
 80073ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80073ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4618      	mov	r0, r3
 80073f6:	f001 fef5 	bl	80091e4 <CRYP_DataIn>
    inputaddr+=4;
 80073fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80073fe:	3304      	adds	r3, #4
 8007400:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    /* Wait until the complete message has been processed */
    counter = 0;
 8007404:	2300      	movs	r3, #0
 8007406:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8007408:	2010      	movs	r0, #16
 800740a:	f002 f8cd 	bl	80095a8 <CRYP_GetFlagStatus>
 800740e:	4603      	mov	r3, r0
 8007410:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      counter++;
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	3301      	adds	r3, #1
 8007418:	613b      	str	r3, [r7, #16]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007420:	d003      	beq.n	800742a <CRYP_AES_CBC+0x3ba>
 8007422:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007426:	2b00      	cmp	r3, #0
 8007428:	d1ee      	bne.n	8007408 <CRYP_AES_CBC+0x398>

    if (busystatus != RESET)
 800742a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800742e:	2b00      	cmp	r3, #0
 8007430:	d003      	beq.n	800743a <CRYP_AES_CBC+0x3ca>
   {
       status = ERROR;
 8007432:	2300      	movs	r3, #0
 8007434:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 8007438:	e02b      	b.n	8007492 <CRYP_AES_CBC+0x422>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800743a:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 800743e:	f001 fedf 	bl	8009200 <CRYP_DataOut>
 8007442:	4603      	mov	r3, r0
 8007444:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8007446:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800744a:	3304      	adds	r3, #4
 800744c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8007450:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 8007454:	f001 fed4 	bl	8009200 <CRYP_DataOut>
 8007458:	4603      	mov	r3, r0
 800745a:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800745c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007460:	3304      	adds	r3, #4
 8007462:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8007466:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 800746a:	f001 fec9 	bl	8009200 <CRYP_DataOut>
 800746e:	4603      	mov	r3, r0
 8007470:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8007472:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007476:	3304      	adds	r3, #4
 8007478:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800747c:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 8007480:	f001 febe 	bl	8009200 <CRYP_DataOut>
 8007484:	4603      	mov	r3, r0
 8007486:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8007488:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800748c:	3304      	adds	r3, #4
 800748e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8007492:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007496:	3310      	adds	r3, #16
 8007498:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800749c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80074a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d204      	bcs.n	80074b2 <CRYP_AES_CBC+0x442>
 80074a8:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f47f af7d 	bne.w	80073ac <CRYP_AES_CBC+0x33c>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80074b2:	2000      	movs	r0, #0
 80074b4:	f001 fe7a 	bl	80091ac <CRYP_Cmd>

  return status;
 80074b8:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
}
 80074bc:	4618      	mov	r0, r3
 80074be:	37cc      	adds	r7, #204	; 0xcc
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd90      	pop	{r4, r7, pc}

080074c4 <CRYP_AES_CTR>:
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CTR(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key, 
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 80074c4:	b590      	push	{r4, r7, lr}
 80074c6:	b0b3      	sub	sp, #204	; 0xcc
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60b9      	str	r1, [r7, #8]
 80074cc:	607a      	str	r2, [r7, #4]
 80074ce:	4602      	mov	r2, r0
 80074d0:	73fa      	strb	r2, [r7, #15]
 80074d2:	81bb      	strh	r3, [r7, #12]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 80074d4:	2300      	movs	r3, #0
 80074d6:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 80074d8:	2300      	movs	r3, #0
 80074da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  ErrorStatus status = SUCCESS;
 80074de:	2301      	movs	r3, #1
 80074e0:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
  uint32_t keyaddr    = (uint32_t)Key;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t inputaddr  = (uint32_t)Input;
 80074ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  uint32_t outputaddr = (uint32_t)Output;
 80074f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t ivaddr     = (uint32_t)InitVectors;
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t i = 0;
 8007500:	2300      	movs	r3, #0
 8007502:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8007506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800750a:	4618      	mov	r0, r3
 800750c:	f001 fdd0 	bl	80090b0 <CRYP_KeyStructInit>

  switch(Keysize)
 8007510:	89bb      	ldrh	r3, [r7, #12]
 8007512:	2bc0      	cmp	r3, #192	; 0xc0
 8007514:	d03c      	beq.n	8007590 <CRYP_AES_CTR+0xcc>
 8007516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800751a:	f000 808c 	beq.w	8007636 <CRYP_AES_CTR+0x172>
 800751e:	2b80      	cmp	r3, #128	; 0x80
 8007520:	d000      	beq.n	8007524 <CRYP_AES_CTR+0x60>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    default:
    break;
 8007522:	e0e9      	b.n	80076f8 <CRYP_AES_CTR+0x234>
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);

  switch(Keysize)
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8007524:	2300      	movs	r3, #0
 8007526:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8007528:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007532:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007536:	ba1b      	rev	r3, r3
 8007538:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 800753a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800753e:	3304      	adds	r3, #4
 8007540:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8007544:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800754e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007552:	ba1b      	rev	r3, r3
 8007554:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8007556:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800755a:	3304      	adds	r3, #4
 800755c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8007560:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800756a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800756e:	ba1b      	rev	r3, r3
 8007570:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8007572:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007576:	3304      	adds	r3, #4
 8007578:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 800757c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007586:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800758a:	ba1b      	rev	r3, r3
 800758c:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 800758e:	e0b3      	b.n	80076f8 <CRYP_AES_CTR+0x234>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 8007590:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007594:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8007596:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80075a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075a4:	ba1b      	rev	r3, r3
 80075a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 80075a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80075ac:	3304      	adds	r3, #4
 80075ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80075b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80075bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80075c0:	ba1b      	rev	r3, r3
 80075c2:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 80075c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80075c8:	3304      	adds	r3, #4
 80075ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80075ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80075d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80075dc:	ba1b      	rev	r3, r3
 80075de:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 80075e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80075e4:	3304      	adds	r3, #4
 80075e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80075ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80075f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075f8:	ba1b      	rev	r3, r3
 80075fa:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 80075fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007600:	3304      	adds	r3, #4
 8007602:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8007606:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007610:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007614:	ba1b      	rev	r3, r3
 8007616:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8007618:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800761c:	3304      	adds	r3, #4
 800761e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8007622:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800762c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007630:	ba1b      	rev	r3, r3
 8007632:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8007634:	e060      	b.n	80076f8 <CRYP_AES_CTR+0x234>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 8007636:	f44f 7300 	mov.w	r3, #512	; 0x200
 800763a:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 800763c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007646:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800764a:	ba1b      	rev	r3, r3
 800764c:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 800764e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007652:	3304      	adds	r3, #4
 8007654:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8007658:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007660:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007662:	ba1b      	rev	r3, r3
 8007664:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8007666:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800766a:	3304      	adds	r3, #4
 800766c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8007670:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	67bb      	str	r3, [r7, #120]	; 0x78
 8007678:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800767a:	ba1b      	rev	r3, r3
 800767c:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 800767e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007682:	3304      	adds	r3, #4
 8007684:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8007688:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	677b      	str	r3, [r7, #116]	; 0x74
 8007690:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007692:	ba1b      	rev	r3, r3
 8007694:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8007696:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800769a:	3304      	adds	r3, #4
 800769c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80076a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	673b      	str	r3, [r7, #112]	; 0x70
 80076a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80076aa:	ba1b      	rev	r3, r3
 80076ac:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 80076ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80076b2:	3304      	adds	r3, #4
 80076b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80076b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80076c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076c2:	ba1b      	rev	r3, r3
 80076c4:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 80076c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80076ca:	3304      	adds	r3, #4
 80076cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80076d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80076d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076da:	ba1b      	rev	r3, r3
 80076dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 80076de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80076e2:	3304      	adds	r3, #4
 80076e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80076e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	667b      	str	r3, [r7, #100]	; 0x64
 80076f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076f2:	ba1b      	rev	r3, r3
 80076f4:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 80076f6:	bf00      	nop
    default:
    break;
  }
  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 80076f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	663b      	str	r3, [r7, #96]	; 0x60
 8007700:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007702:	ba1b      	rev	r3, r3
 8007704:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 8007706:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800770a:	3304      	adds	r3, #4
 800770c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8007710:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007718:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800771a:	ba1b      	rev	r3, r3
 800771c:	61bb      	str	r3, [r7, #24]
  ivaddr+=4;
 800771e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007722:	3304      	adds	r3, #4
 8007724:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 8007728:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007730:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007732:	ba1b      	rev	r3, r3
 8007734:	61fb      	str	r3, [r7, #28]
  ivaddr+=4;
 8007736:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800773a:	3304      	adds	r3, #4
 800773c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 8007740:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	657b      	str	r3, [r7, #84]	; 0x54
 8007748:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800774a:	ba1b      	rev	r3, r3
 800774c:	623b      	str	r3, [r7, #32]

  /* Key Initialisation */
  CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 800774e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007752:	4618      	mov	r0, r3
 8007754:	f001 fc80 	bl	8009058 <CRYP_KeyInit>

  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 8007758:	7bfb      	ldrb	r3, [r7, #15]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d102      	bne.n	8007764 <CRYP_AES_CTR+0x2a0>
  {
    /* Crypto Init for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 800775e:	2304      	movs	r3, #4
 8007760:	647b      	str	r3, [r7, #68]	; 0x44
 8007762:	e001      	b.n	8007768 <CRYP_AES_CTR+0x2a4>
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {
    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8007764:	2300      	movs	r3, #0
 8007766:	647b      	str	r3, [r7, #68]	; 0x44
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CTR;
 8007768:	2330      	movs	r3, #48	; 0x30
 800776a:	64bb      	str	r3, [r7, #72]	; 0x48
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 800776c:	2380      	movs	r3, #128	; 0x80
 800776e:	64fb      	str	r3, [r7, #76]	; 0x4c
  CRYP_Init(&AES_CRYP_InitStructure);
 8007770:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007774:	4618      	mov	r0, r3
 8007776:	f001 fc07 	bl	8008f88 <CRYP_Init>

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);
 800777a:	f107 0314 	add.w	r3, r7, #20
 800777e:	4618      	mov	r0, r3
 8007780:	f001 fcb8 	bl	80090f4 <CRYP_IVInit>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 8007784:	f001 fd04 	bl	8009190 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8007788:	2001      	movs	r0, #1
 800778a:	f001 fd0f 	bl	80091ac <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 800778e:	f001 fef1 	bl	8009574 <CRYP_GetCmdStatus>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d101      	bne.n	800779c <CRYP_AES_CTR+0x2d8>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 8007798:	2300      	movs	r3, #0
 800779a:	e08b      	b.n	80078b4 <CRYP_AES_CTR+0x3f0>
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 800779c:	2300      	movs	r3, #0
 800779e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80077a2:	e077      	b.n	8007894 <CRYP_AES_CTR+0x3d0>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80077a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4618      	mov	r0, r3
 80077ac:	f001 fd1a 	bl	80091e4 <CRYP_DataIn>
    inputaddr+=4;
 80077b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80077b4:	3304      	adds	r3, #4
 80077b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80077ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4618      	mov	r0, r3
 80077c2:	f001 fd0f 	bl	80091e4 <CRYP_DataIn>
    inputaddr+=4;
 80077c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80077ca:	3304      	adds	r3, #4
 80077cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80077d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4618      	mov	r0, r3
 80077d8:	f001 fd04 	bl	80091e4 <CRYP_DataIn>
    inputaddr+=4;
 80077dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80077e0:	3304      	adds	r3, #4
 80077e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80077e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4618      	mov	r0, r3
 80077ee:	f001 fcf9 	bl	80091e4 <CRYP_DataIn>
    inputaddr+=4;
 80077f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80077f6:	3304      	adds	r3, #4
 80077f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    /* Wait until the complete message has been processed */
    counter = 0;
 80077fc:	2300      	movs	r3, #0
 80077fe:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8007800:	2010      	movs	r0, #16
 8007802:	f001 fed1 	bl	80095a8 <CRYP_GetFlagStatus>
 8007806:	4603      	mov	r3, r0
 8007808:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      counter++;
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	3301      	adds	r3, #1
 8007810:	613b      	str	r3, [r7, #16]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007818:	d003      	beq.n	8007822 <CRYP_AES_CTR+0x35e>
 800781a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800781e:	2b00      	cmp	r3, #0
 8007820:	d1ee      	bne.n	8007800 <CRYP_AES_CTR+0x33c>

    if (busystatus != RESET)
 8007822:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007826:	2b00      	cmp	r3, #0
 8007828:	d003      	beq.n	8007832 <CRYP_AES_CTR+0x36e>
   {
       status = ERROR;
 800782a:	2300      	movs	r3, #0
 800782c:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 8007830:	e02b      	b.n	800788a <CRYP_AES_CTR+0x3c6>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8007832:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 8007836:	f001 fce3 	bl	8009200 <CRYP_DataOut>
 800783a:	4603      	mov	r3, r0
 800783c:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800783e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007842:	3304      	adds	r3, #4
 8007844:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8007848:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 800784c:	f001 fcd8 	bl	8009200 <CRYP_DataOut>
 8007850:	4603      	mov	r3, r0
 8007852:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8007854:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007858:	3304      	adds	r3, #4
 800785a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800785e:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 8007862:	f001 fccd 	bl	8009200 <CRYP_DataOut>
 8007866:	4603      	mov	r3, r0
 8007868:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800786a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800786e:	3304      	adds	r3, #4
 8007870:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8007874:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 8007878:	f001 fcc2 	bl	8009200 <CRYP_DataOut>
 800787c:	4603      	mov	r3, r0
 800787e:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8007880:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007884:	3304      	adds	r3, #4
 8007886:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 800788a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800788e:	3310      	adds	r3, #16
 8007890:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007894:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007898:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800789c:	429a      	cmp	r2, r3
 800789e:	d204      	bcs.n	80078aa <CRYP_AES_CTR+0x3e6>
 80078a0:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	f47f af7d 	bne.w	80077a4 <CRYP_AES_CTR+0x2e0>
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
    }
  }
  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80078aa:	2000      	movs	r0, #0
 80078ac:	f001 fc7e 	bl	80091ac <CRYP_Cmd>

  return status;
 80078b0:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	37cc      	adds	r7, #204	; 0xcc
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd90      	pop	{r4, r7, pc}

080078bc <CRYP_AES_GCM>:
ErrorStatus CRYP_AES_GCM(uint8_t Mode, uint8_t InitVectors[16],
                         uint8_t *Key, uint16_t Keysize,
                         uint8_t *Input, uint32_t ILength,
                         uint8_t *Header, uint32_t HLength,
                         uint8_t *Output, uint8_t *AuthTAG)
{
 80078bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c0:	b0c5      	sub	sp, #276	; 0x114
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	f107 0610 	add.w	r6, r7, #16
 80078c8:	6031      	str	r1, [r6, #0]
 80078ca:	f107 010c 	add.w	r1, r7, #12
 80078ce:	600a      	str	r2, [r1, #0]
 80078d0:	4602      	mov	r2, r0
 80078d2:	75fa      	strb	r2, [r7, #23]
 80078d4:	82bb      	strh	r3, [r7, #20]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 80078d6:	2300      	movs	r3, #0
 80078d8:	61fb      	str	r3, [r7, #28]
  uint32_t busystatus = 0;
 80078da:	2300      	movs	r3, #0
 80078dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  ErrorStatus status = SUCCESS;
 80078e0:	2301      	movs	r3, #1
 80078e2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  uint32_t keyaddr    = (uint32_t)Key;
 80078e6:	f107 030c 	add.w	r3, r7, #12
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  uint32_t inputaddr  = (uint32_t)Input;
 80078f0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80078f4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  uint32_t outputaddr = (uint32_t)Output;
 80078f8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80078fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  uint32_t ivaddr     = (uint32_t)InitVectors;
 8007900:	f107 0310 	add.w	r3, r7, #16
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  uint32_t headeraddr = (uint32_t)Header;
 800790a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800790e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  uint32_t tagaddr = (uint32_t)AuthTAG;
 8007912:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007916:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  uint64_t headerlength = HLength * 8;/* header length in bits */
 800791a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800791e:	00db      	lsls	r3, r3, #3
 8007920:	461a      	mov	r2, r3
 8007922:	f04f 0300 	mov.w	r3, #0
 8007926:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
  uint64_t inputlength = ILength * 8;/* input length in bits */
 800792a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800792e:	00db      	lsls	r3, r3, #3
 8007930:	461a      	mov	r2, r3
 8007932:	f04f 0300 	mov.w	r3, #0
 8007936:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
  uint32_t loopcounter = 0;
 800793a:	2300      	movs	r3, #0
 800793c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8007940:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007944:	4618      	mov	r0, r3
 8007946:	f001 fbb3 	bl	80090b0 <CRYP_KeyStructInit>

  switch(Keysize)
 800794a:	8abb      	ldrh	r3, [r7, #20]
 800794c:	2bc0      	cmp	r3, #192	; 0xc0
 800794e:	d03c      	beq.n	80079ca <CRYP_AES_GCM+0x10e>
 8007950:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007954:	f000 808c 	beq.w	8007a70 <CRYP_AES_GCM+0x1b4>
 8007958:	2b80      	cmp	r3, #128	; 0x80
 800795a:	d000      	beq.n	800795e <CRYP_AES_GCM+0xa2>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    default:
    break;
 800795c:	e0f7      	b.n	8007b4e <CRYP_AES_GCM+0x292>
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);

  switch(Keysize)
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 800795e:	2300      	movs	r3, #0
 8007960:	65fb      	str	r3, [r7, #92]	; 0x5c
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8007962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800796c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007970:	ba1b      	rev	r3, r3
 8007972:	643b      	str	r3, [r7, #64]	; 0x40
    keyaddr+=4;
 8007974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007978:	3304      	adds	r3, #4
 800797a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 800797e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007988:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800798c:	ba1b      	rev	r3, r3
 800798e:	647b      	str	r3, [r7, #68]	; 0x44
    keyaddr+=4;
 8007990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007994:	3304      	adds	r3, #4
 8007996:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 800799a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80079a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80079a8:	ba1b      	rev	r3, r3
 80079aa:	64bb      	str	r3, [r7, #72]	; 0x48
    keyaddr+=4;
 80079ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079b0:	3304      	adds	r3, #4
 80079b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80079b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80079c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80079c4:	ba1b      	rev	r3, r3
 80079c6:	64fb      	str	r3, [r7, #76]	; 0x4c
    break;
 80079c8:	e0c1      	b.n	8007b4e <CRYP_AES_GCM+0x292>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 80079ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079ce:	65fb      	str	r3, [r7, #92]	; 0x5c
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80079d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80079de:	ba1b      	rev	r3, r3
 80079e0:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 80079e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079e6:	3304      	adds	r3, #4
 80079e8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80079ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80079f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80079fa:	ba1b      	rev	r3, r3
 80079fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 80079fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a02:	3304      	adds	r3, #4
 8007a04:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8007a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007a12:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007a16:	ba1b      	rev	r3, r3
 8007a18:	643b      	str	r3, [r7, #64]	; 0x40
    keyaddr+=4;
 8007a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a1e:	3304      	adds	r3, #4
 8007a20:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8007a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a32:	ba1b      	rev	r3, r3
 8007a34:	647b      	str	r3, [r7, #68]	; 0x44
    keyaddr+=4;
 8007a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a3a:	3304      	adds	r3, #4
 8007a3c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8007a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007a4e:	ba1b      	rev	r3, r3
 8007a50:	64bb      	str	r3, [r7, #72]	; 0x48
    keyaddr+=4;
 8007a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a56:	3304      	adds	r3, #4
 8007a58:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8007a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007a6a:	ba1b      	rev	r3, r3
 8007a6c:	64fb      	str	r3, [r7, #76]	; 0x4c
    break;
 8007a6e:	e06e      	b.n	8007b4e <CRYP_AES_GCM+0x292>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 8007a70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a74:	65fb      	str	r3, [r7, #92]	; 0x5c
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8007a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a84:	ba1b      	rev	r3, r3
 8007a86:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8007a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a8c:	3304      	adds	r3, #4
 8007a8e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8007a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007a9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007aa0:	ba1b      	rev	r3, r3
 8007aa2:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8007aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aa8:	3304      	adds	r3, #4
 8007aaa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8007aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007ab8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007abc:	ba1b      	rev	r3, r3
 8007abe:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8007ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ac4:	3304      	adds	r3, #4
 8007ac6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8007aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007ad4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007ad8:	ba1b      	rev	r3, r3
 8007ada:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8007adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ae0:	3304      	adds	r3, #4
 8007ae2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8007ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007af0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007af4:	ba1b      	rev	r3, r3
 8007af6:	643b      	str	r3, [r7, #64]	; 0x40
    keyaddr+=4;
 8007af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007afc:	3304      	adds	r3, #4
 8007afe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8007b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007b0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b10:	ba1b      	rev	r3, r3
 8007b12:	647b      	str	r3, [r7, #68]	; 0x44
    keyaddr+=4;
 8007b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b18:	3304      	adds	r3, #4
 8007b1a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8007b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007b28:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007b2c:	ba1b      	rev	r3, r3
 8007b2e:	64bb      	str	r3, [r7, #72]	; 0x48
    keyaddr+=4;
 8007b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b34:	3304      	adds	r3, #4
 8007b36:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8007b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007b44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007b48:	ba1b      	rev	r3, r3
 8007b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
    break;
 8007b4c:	bf00      	nop
    default:
    break;
  }
  
  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8007b4e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007b58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b5c:	ba1b      	rev	r3, r3
 8007b5e:	623b      	str	r3, [r7, #32]
  ivaddr+=4;
 8007b60:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007b64:	3304      	adds	r3, #4
 8007b66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8007b6a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007b74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b78:	ba1b      	rev	r3, r3
 8007b7a:	627b      	str	r3, [r7, #36]	; 0x24
  ivaddr+=4;
 8007b7c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007b80:	3304      	adds	r3, #4
 8007b82:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 8007b86:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007b90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b94:	ba1b      	rev	r3, r3
 8007b96:	62bb      	str	r3, [r7, #40]	; 0x28
  ivaddr+=4;
 8007b98:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007b9c:	3304      	adds	r3, #4
 8007b9e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 8007ba2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007bac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007bb0:	ba1b      	rev	r3, r3
 8007bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /*------------------ AES Encryption ------------------*/
  if(Mode == MODE_ENCRYPT) /* AES encryption */
 8007bb4:	7dfb      	ldrb	r3, [r7, #23]
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	f040 81a9 	bne.w	8007f0e <CRYP_AES_GCM+0x652>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 8007bbc:	f001 fae8 	bl	8009190 <CRYP_FIFOFlush>
    
    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8007bc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f001 fa47 	bl	8009058 <CRYP_KeyInit>
    
    /* CRYP Initialization Vectors */
    CRYP_IVInit(&AES_CRYP_IVInitStructure);
 8007bca:	f107 0320 	add.w	r3, r7, #32
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f001 fa90 	bl	80090f4 <CRYP_IVInit>
    
    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_GCM;
 8007bd8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007bdc:	657b      	str	r3, [r7, #84]	; 0x54
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8007bde:	2380      	movs	r3, #128	; 0x80
 8007be0:	65bb      	str	r3, [r7, #88]	; 0x58
    CRYP_Init(&AES_CRYP_InitStructure);
 8007be2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007be6:	4618      	mov	r0, r3
 8007be8:	f001 f9ce 	bl	8008f88 <CRYP_Init>
    
    /***************************** Init phase *********************************/
    /* Select init phase */
    CRYP_PhaseConfig(CRYP_Phase_Init);
 8007bec:	2000      	movs	r0, #0
 8007bee:	f001 fab3 	bl	8009158 <CRYP_PhaseConfig>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8007bf2:	2001      	movs	r0, #1
 8007bf4:	f001 fada 	bl	80091ac <CRYP_Cmd>
    
    /* Wait for CRYPEN bit to be 0 */
    while(CRYP_GetCmdStatus() == ENABLE)
 8007bf8:	bf00      	nop
 8007bfa:	f001 fcbb 	bl	8009574 <CRYP_GetCmdStatus>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d0fa      	beq.n	8007bfa <CRYP_AES_GCM+0x33e>
    {
    }
    
    /***************************** header phase *******************************/
    if(HLength != 0)
 8007c04:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d069      	beq.n	8007ce0 <CRYP_AES_GCM+0x424>
    {
      /* Select header phase */
      CRYP_PhaseConfig(CRYP_Phase_Header);
 8007c0c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007c10:	f001 faa2 	bl	8009158 <CRYP_PhaseConfig>
      
      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 8007c14:	2001      	movs	r0, #1
 8007c16:	f001 fac9 	bl	80091ac <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 8007c1a:	f001 fcab 	bl	8009574 <CRYP_GetCmdStatus>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d101      	bne.n	8007c28 <CRYP_AES_GCM+0x36c>
      {
         /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
            the CRYP peripheral (please check the device sales type. */
         return(ERROR);
 8007c24:	2300      	movs	r3, #0
 8007c26:	e31d      	b.n	8008264 <CRYP_AES_GCM+0x9a8>
      }
      
      for(loopcounter = 0; (loopcounter < HLength); loopcounter+=16)
 8007c28:	2300      	movs	r3, #0
 8007c2a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007c2e:	e037      	b.n	8007ca0 <CRYP_AES_GCM+0x3e4>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 8007c30:	bf00      	nop
 8007c32:	2001      	movs	r0, #1
 8007c34:	f001 fcb8 	bl	80095a8 <CRYP_GetFlagStatus>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d0f9      	beq.n	8007c32 <CRYP_AES_GCM+0x376>
        {
        }
        
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8007c3e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4618      	mov	r0, r3
 8007c46:	f001 facd 	bl	80091e4 <CRYP_DataIn>
        headeraddr+=4;
 8007c4a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007c4e:	3304      	adds	r3, #4
 8007c50:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8007c54:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f001 fac2 	bl	80091e4 <CRYP_DataIn>
        headeraddr+=4;
 8007c60:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007c64:	3304      	adds	r3, #4
 8007c66:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8007c6a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4618      	mov	r0, r3
 8007c72:	f001 fab7 	bl	80091e4 <CRYP_DataIn>
        headeraddr+=4;
 8007c76:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007c7a:	3304      	adds	r3, #4
 8007c7c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8007c80:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4618      	mov	r0, r3
 8007c88:	f001 faac 	bl	80091e4 <CRYP_DataIn>
        headeraddr+=4;
 8007c8c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007c90:	3304      	adds	r3, #4
 8007c92:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
         /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
            the CRYP peripheral (please check the device sales type. */
         return(ERROR);
      }
      
      for(loopcounter = 0; (loopcounter < HLength); loopcounter+=16)
 8007c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c9a:	3310      	adds	r3, #16
 8007c9c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007ca0:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8007ca4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d3c1      	bcc.n	8007c30 <CRYP_AES_GCM+0x374>
        CRYP_DataIn(*(uint32_t*)(headeraddr));
        headeraddr+=4;
      }
      
      /* Wait until the complete message has been processed */
      counter = 0;
 8007cac:	2300      	movs	r3, #0
 8007cae:	61fb      	str	r3, [r7, #28]
      do
      {
        busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8007cb0:	2010      	movs	r0, #16
 8007cb2:	f001 fc79 	bl	80095a8 <CRYP_GetFlagStatus>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
        counter++;
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	61fb      	str	r3, [r7, #28]
      }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cc8:	d003      	beq.n	8007cd2 <CRYP_AES_GCM+0x416>
 8007cca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d1ee      	bne.n	8007cb0 <CRYP_AES_GCM+0x3f4>

      if (busystatus != RESET)
 8007cd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d002      	beq.n	8007ce0 <CRYP_AES_GCM+0x424>
      {
        status = ERROR;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
      }
    }
    
    /**************************** payload phase *******************************/
    if(ILength != 0)
 8007ce0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	f000 80a3 	beq.w	8007e30 <CRYP_AES_GCM+0x574>
    {
      /* Select payload phase */
      CRYP_PhaseConfig(CRYP_Phase_Payload);
 8007cea:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8007cee:	f001 fa33 	bl	8009158 <CRYP_PhaseConfig>
      
      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 8007cf2:	2001      	movs	r0, #1
 8007cf4:	f001 fa5a 	bl	80091ac <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 8007cf8:	f001 fc3c 	bl	8009574 <CRYP_GetCmdStatus>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d101      	bne.n	8007d06 <CRYP_AES_GCM+0x44a>
      {
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
 8007d02:	2300      	movs	r3, #0
 8007d04:	e2ae      	b.n	8008264 <CRYP_AES_GCM+0x9a8>
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 8007d06:	2300      	movs	r3, #0
 8007d08:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007d0c:	e085      	b.n	8007e1a <CRYP_AES_GCM+0x55e>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 8007d0e:	bf00      	nop
 8007d10:	2001      	movs	r0, #1
 8007d12:	f001 fc49 	bl	80095a8 <CRYP_GetFlagStatus>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d0f9      	beq.n	8007d10 <CRYP_AES_GCM+0x454>
        {
        }
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8007d1c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4618      	mov	r0, r3
 8007d24:	f001 fa5e 	bl	80091e4 <CRYP_DataIn>
        inputaddr+=4;
 8007d28:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007d2c:	3304      	adds	r3, #4
 8007d2e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8007d32:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f001 fa53 	bl	80091e4 <CRYP_DataIn>
        inputaddr+=4;
 8007d3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007d42:	3304      	adds	r3, #4
 8007d44:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8007d48:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f001 fa48 	bl	80091e4 <CRYP_DataIn>
        inputaddr+=4;
 8007d54:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007d58:	3304      	adds	r3, #4
 8007d5a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8007d5e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4618      	mov	r0, r3
 8007d66:	f001 fa3d 	bl	80091e4 <CRYP_DataIn>
        inputaddr+=4;
 8007d6a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007d6e:	3304      	adds	r3, #4
 8007d70:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        
        /* Wait until the complete message has been processed */
        counter = 0;
 8007d74:	2300      	movs	r3, #0
 8007d76:	61fb      	str	r3, [r7, #28]
        do
        {
          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8007d78:	2010      	movs	r0, #16
 8007d7a:	f001 fc15 	bl	80095a8 <CRYP_GetFlagStatus>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
          counter++;
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	3301      	adds	r3, #1
 8007d88:	61fb      	str	r3, [r7, #28]
        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d90:	d003      	beq.n	8007d9a <CRYP_AES_GCM+0x4de>
 8007d92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1ee      	bne.n	8007d78 <CRYP_AES_GCM+0x4bc>

        if (busystatus != RESET)
 8007d9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d003      	beq.n	8007daa <CRYP_AES_GCM+0x4ee>
        {
          status = ERROR;
 8007da2:	2300      	movs	r3, #0
 8007da4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8007da8:	e032      	b.n	8007e10 <CRYP_AES_GCM+0x554>
        }
        else
        {
          /* Wait until the OFNE flag is reset */
          while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 8007daa:	bf00      	nop
 8007dac:	2004      	movs	r0, #4
 8007dae:	f001 fbfb 	bl	80095a8 <CRYP_GetFlagStatus>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d0f9      	beq.n	8007dac <CRYP_AES_GCM+0x4f0>
          {
          }
          
          /* Read the Output block from the Output FIFO */
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8007db8:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8007dbc:	f001 fa20 	bl	8009200 <CRYP_DataOut>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8007dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dc8:	3304      	adds	r3, #4
 8007dca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8007dce:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8007dd2:	f001 fa15 	bl	8009200 <CRYP_DataOut>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8007dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dde:	3304      	adds	r3, #4
 8007de0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8007de4:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8007de8:	f001 fa0a 	bl	8009200 <CRYP_DataOut>
 8007dec:	4603      	mov	r3, r0
 8007dee:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8007df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007df4:	3304      	adds	r3, #4
 8007df6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8007dfa:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8007dfe:	f001 f9ff 	bl	8009200 <CRYP_DataOut>
 8007e02:	4603      	mov	r3, r0
 8007e04:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8007e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e0a:	3304      	adds	r3, #4
 8007e0c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 8007e10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e14:	3310      	adds	r3, #16
 8007e16:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007e1a:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8007e1e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d204      	bcs.n	8007e30 <CRYP_AES_GCM+0x574>
 8007e26:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f47f af6f 	bne.w	8007d0e <CRYP_AES_GCM+0x452>
      }
    }
    
    /***************************** final phase ********************************/
    /* Select final phase */
    CRYP_PhaseConfig(CRYP_Phase_Final);
 8007e30:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8007e34:	f001 f990 	bl	8009158 <CRYP_PhaseConfig>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8007e38:	2001      	movs	r0, #1
 8007e3a:	f001 f9b7 	bl	80091ac <CRYP_Cmd>
    
    if(CRYP_GetCmdStatus() == DISABLE)
 8007e3e:	f001 fb99 	bl	8009574 <CRYP_GetCmdStatus>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d101      	bne.n	8007e4c <CRYP_AES_GCM+0x590>
    {
      /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
         the CRYP peripheral (please check the device sales type. */
      return(ERROR);
 8007e48:	2300      	movs	r3, #0
 8007e4a:	e20b      	b.n	8008264 <CRYP_AES_GCM+0x9a8>
    }
    
    /* Write number of bits concatenated with header in the IN FIFO */
    CRYP_DataIn(__REV(headerlength>>32));
 8007e4c:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8007e50:	0019      	movs	r1, r3
 8007e52:	6039      	str	r1, [r7, #0]
 8007e54:	2300      	movs	r3, #0
 8007e56:	607b      	str	r3, [r7, #4]
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007e5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007e5e:	ba1b      	rev	r3, r3
 8007e60:	4618      	mov	r0, r3
 8007e62:	f001 f9bf 	bl	80091e4 <CRYP_DataIn>
    CRYP_DataIn(__REV(headerlength));
 8007e66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e6a:	67bb      	str	r3, [r7, #120]	; 0x78
 8007e6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e6e:	ba1b      	rev	r3, r3
 8007e70:	4618      	mov	r0, r3
 8007e72:	f001 f9b7 	bl	80091e4 <CRYP_DataIn>
    CRYP_DataIn(__REV(inputlength>>32));
 8007e76:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8007e7a:	469a      	mov	sl, r3
 8007e7c:	f04f 0b00 	mov.w	fp, #0
 8007e80:	4653      	mov	r3, sl
 8007e82:	677b      	str	r3, [r7, #116]	; 0x74
 8007e84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e86:	ba1b      	rev	r3, r3
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f001 f9ab 	bl	80091e4 <CRYP_DataIn>
    CRYP_DataIn(__REV(inputlength));
 8007e8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e92:	673b      	str	r3, [r7, #112]	; 0x70
 8007e94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e96:	ba1b      	rev	r3, r3
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f001 f9a3 	bl	80091e4 <CRYP_DataIn>
    /* Wait until the OFNE flag is reset */
    while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 8007e9e:	bf00      	nop
 8007ea0:	2004      	movs	r0, #4
 8007ea2:	f001 fb81 	bl	80095a8 <CRYP_GetFlagStatus>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d0f9      	beq.n	8007ea0 <CRYP_AES_GCM+0x5e4>
    {
    }
    
    tagaddr = (uint32_t)AuthTAG;
 8007eac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007eb0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    /* Read the Auth TAG in the IN FIFO */
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8007eb4:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8007eb8:	f001 f9a2 	bl	8009200 <CRYP_DataOut>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 8007ec0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007ec4:	3304      	adds	r3, #4
 8007ec6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8007eca:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8007ece:	f001 f997 	bl	8009200 <CRYP_DataOut>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 8007ed6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007eda:	3304      	adds	r3, #4
 8007edc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8007ee0:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8007ee4:	f001 f98c 	bl	8009200 <CRYP_DataOut>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 8007eec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007ef0:	3304      	adds	r3, #4
 8007ef2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8007ef6:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8007efa:	f001 f981 	bl	8009200 <CRYP_DataOut>
 8007efe:	4603      	mov	r3, r0
 8007f00:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 8007f02:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007f06:	3304      	adds	r3, #4
 8007f08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007f0c:	e1a5      	b.n	800825a <CRYP_AES_GCM+0x99e>
  }
  /*------------------ AES Decryption ------------------*/
  else /* AES decryption */
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 8007f0e:	f001 f93f 	bl	8009190 <CRYP_FIFOFlush>
    
    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8007f12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007f16:	4618      	mov	r0, r3
 8007f18:	f001 f89e 	bl	8009058 <CRYP_KeyInit>
    
    /* CRYP Initialization Vectors */
    CRYP_IVInit(&AES_CRYP_IVInitStructure);
 8007f1c:	f107 0320 	add.w	r3, r7, #32
 8007f20:	4618      	mov	r0, r3
 8007f22:	f001 f8e7 	bl	80090f4 <CRYP_IVInit>
    
    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8007f26:	2304      	movs	r3, #4
 8007f28:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_GCM;
 8007f2a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007f2e:	657b      	str	r3, [r7, #84]	; 0x54
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8007f30:	2380      	movs	r3, #128	; 0x80
 8007f32:	65bb      	str	r3, [r7, #88]	; 0x58
    CRYP_Init(&AES_CRYP_InitStructure);
 8007f34:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f001 f825 	bl	8008f88 <CRYP_Init>
    
    /***************************** Init phase *********************************/
    /* Select init phase */
    CRYP_PhaseConfig(CRYP_Phase_Init);
 8007f3e:	2000      	movs	r0, #0
 8007f40:	f001 f90a 	bl	8009158 <CRYP_PhaseConfig>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8007f44:	2001      	movs	r0, #1
 8007f46:	f001 f931 	bl	80091ac <CRYP_Cmd>
    
    /* Wait for CRYPEN bit to be 0 */
    while(CRYP_GetCmdStatus() == ENABLE)
 8007f4a:	bf00      	nop
 8007f4c:	f001 fb12 	bl	8009574 <CRYP_GetCmdStatus>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d0fa      	beq.n	8007f4c <CRYP_AES_GCM+0x690>
    {
    }
    
    /***************************** header phase *******************************/
    if(HLength != 0)
 8007f56:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d069      	beq.n	8008032 <CRYP_AES_GCM+0x776>
    {
      /* Select header phase */
      CRYP_PhaseConfig(CRYP_Phase_Header);
 8007f5e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007f62:	f001 f8f9 	bl	8009158 <CRYP_PhaseConfig>
      
      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 8007f66:	2001      	movs	r0, #1
 8007f68:	f001 f920 	bl	80091ac <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 8007f6c:	f001 fb02 	bl	8009574 <CRYP_GetCmdStatus>
 8007f70:	4603      	mov	r3, r0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d101      	bne.n	8007f7a <CRYP_AES_GCM+0x6be>
      {
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
 8007f76:	2300      	movs	r3, #0
 8007f78:	e174      	b.n	8008264 <CRYP_AES_GCM+0x9a8>
      }
      
      for(loopcounter = 0; (loopcounter < HLength); loopcounter+=16)
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007f80:	e037      	b.n	8007ff2 <CRYP_AES_GCM+0x736>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 8007f82:	bf00      	nop
 8007f84:	2001      	movs	r0, #1
 8007f86:	f001 fb0f 	bl	80095a8 <CRYP_GetFlagStatus>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d0f9      	beq.n	8007f84 <CRYP_AES_GCM+0x6c8>
        {
        }
        
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8007f90:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4618      	mov	r0, r3
 8007f98:	f001 f924 	bl	80091e4 <CRYP_DataIn>
        headeraddr+=4;
 8007f9c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007fa0:	3304      	adds	r3, #4
 8007fa2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8007fa6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4618      	mov	r0, r3
 8007fae:	f001 f919 	bl	80091e4 <CRYP_DataIn>
        headeraddr+=4;
 8007fb2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007fb6:	3304      	adds	r3, #4
 8007fb8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8007fbc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f001 f90e 	bl	80091e4 <CRYP_DataIn>
        headeraddr+=4;
 8007fc8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007fcc:	3304      	adds	r3, #4
 8007fce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8007fd2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f001 f903 	bl	80091e4 <CRYP_DataIn>
        headeraddr+=4;
 8007fde:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007fe2:	3304      	adds	r3, #4
 8007fe4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
      }
      
      for(loopcounter = 0; (loopcounter < HLength); loopcounter+=16)
 8007fe8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fec:	3310      	adds	r3, #16
 8007fee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007ff2:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8007ff6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d3c1      	bcc.n	8007f82 <CRYP_AES_GCM+0x6c6>
        CRYP_DataIn(*(uint32_t*)(headeraddr));
        headeraddr+=4;
      }
      
      /* Wait until the complete message has been processed */
      counter = 0;
 8007ffe:	2300      	movs	r3, #0
 8008000:	61fb      	str	r3, [r7, #28]
      do
      {
        busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8008002:	2010      	movs	r0, #16
 8008004:	f001 fad0 	bl	80095a8 <CRYP_GetFlagStatus>
 8008008:	4603      	mov	r3, r0
 800800a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
        counter++;
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	3301      	adds	r3, #1
 8008012:	61fb      	str	r3, [r7, #28]
      }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800801a:	d003      	beq.n	8008024 <CRYP_AES_GCM+0x768>
 800801c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008020:	2b00      	cmp	r3, #0
 8008022:	d1ee      	bne.n	8008002 <CRYP_AES_GCM+0x746>

      if (busystatus != RESET)
 8008024:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008028:	2b00      	cmp	r3, #0
 800802a:	d002      	beq.n	8008032 <CRYP_AES_GCM+0x776>
      {
        status = ERROR;
 800802c:	2300      	movs	r3, #0
 800802e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
      }
    }
    
    /**************************** payload phase *******************************/
    if(ILength != 0)
 8008032:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8008036:	2b00      	cmp	r3, #0
 8008038:	f000 80a3 	beq.w	8008182 <CRYP_AES_GCM+0x8c6>
    {
      /* Select payload phase */
      CRYP_PhaseConfig(CRYP_Phase_Payload);
 800803c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8008040:	f001 f88a 	bl	8009158 <CRYP_PhaseConfig>

      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 8008044:	2001      	movs	r0, #1
 8008046:	f001 f8b1 	bl	80091ac <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 800804a:	f001 fa93 	bl	8009574 <CRYP_GetCmdStatus>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d101      	bne.n	8008058 <CRYP_AES_GCM+0x79c>
      {
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
 8008054:	2300      	movs	r3, #0
 8008056:	e105      	b.n	8008264 <CRYP_AES_GCM+0x9a8>
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 8008058:	2300      	movs	r3, #0
 800805a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800805e:	e085      	b.n	800816c <CRYP_AES_GCM+0x8b0>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 8008060:	bf00      	nop
 8008062:	2001      	movs	r0, #1
 8008064:	f001 faa0 	bl	80095a8 <CRYP_GetFlagStatus>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d0f9      	beq.n	8008062 <CRYP_AES_GCM+0x7a6>
        {
        }
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 800806e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4618      	mov	r0, r3
 8008076:	f001 f8b5 	bl	80091e4 <CRYP_DataIn>
        inputaddr+=4;
 800807a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800807e:	3304      	adds	r3, #4
 8008080:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8008084:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4618      	mov	r0, r3
 800808c:	f001 f8aa 	bl	80091e4 <CRYP_DataIn>
        inputaddr+=4;
 8008090:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008094:	3304      	adds	r3, #4
 8008096:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 800809a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4618      	mov	r0, r3
 80080a2:	f001 f89f 	bl	80091e4 <CRYP_DataIn>
        inputaddr+=4;
 80080a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80080aa:	3304      	adds	r3, #4
 80080ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 80080b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4618      	mov	r0, r3
 80080b8:	f001 f894 	bl	80091e4 <CRYP_DataIn>
        inputaddr+=4;
 80080bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80080c0:	3304      	adds	r3, #4
 80080c2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        
        /* Wait until the complete message has been processed */
        counter = 0;
 80080c6:	2300      	movs	r3, #0
 80080c8:	61fb      	str	r3, [r7, #28]
        do
        {
          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80080ca:	2010      	movs	r0, #16
 80080cc:	f001 fa6c 	bl	80095a8 <CRYP_GetFlagStatus>
 80080d0:	4603      	mov	r3, r0
 80080d2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
          counter++;
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	3301      	adds	r3, #1
 80080da:	61fb      	str	r3, [r7, #28]
        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080e2:	d003      	beq.n	80080ec <CRYP_AES_GCM+0x830>
 80080e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d1ee      	bne.n	80080ca <CRYP_AES_GCM+0x80e>

        if (busystatus != RESET)
 80080ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d003      	beq.n	80080fc <CRYP_AES_GCM+0x840>
        {
          status = ERROR;
 80080f4:	2300      	movs	r3, #0
 80080f6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80080fa:	e032      	b.n	8008162 <CRYP_AES_GCM+0x8a6>
        }
        else
        {
          /* Wait until the OFNE flag is reset */
          while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 80080fc:	bf00      	nop
 80080fe:	2004      	movs	r0, #4
 8008100:	f001 fa52 	bl	80095a8 <CRYP_GetFlagStatus>
 8008104:	4603      	mov	r3, r0
 8008106:	2b00      	cmp	r3, #0
 8008108:	d0f9      	beq.n	80080fe <CRYP_AES_GCM+0x842>
          {
          }
          
          /* Read the Output block from the Output FIFO */
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800810a:	f8d7 6104 	ldr.w	r6, [r7, #260]	; 0x104
 800810e:	f001 f877 	bl	8009200 <CRYP_DataOut>
 8008112:	4603      	mov	r3, r0
 8008114:	6033      	str	r3, [r6, #0]
          outputaddr+=4;
 8008116:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800811a:	3304      	adds	r3, #4
 800811c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008120:	f8d7 6104 	ldr.w	r6, [r7, #260]	; 0x104
 8008124:	f001 f86c 	bl	8009200 <CRYP_DataOut>
 8008128:	4603      	mov	r3, r0
 800812a:	6033      	str	r3, [r6, #0]
          outputaddr+=4;
 800812c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008130:	3304      	adds	r3, #4
 8008132:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008136:	f8d7 6104 	ldr.w	r6, [r7, #260]	; 0x104
 800813a:	f001 f861 	bl	8009200 <CRYP_DataOut>
 800813e:	4603      	mov	r3, r0
 8008140:	6033      	str	r3, [r6, #0]
          outputaddr+=4;
 8008142:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008146:	3304      	adds	r3, #4
 8008148:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800814c:	f8d7 6104 	ldr.w	r6, [r7, #260]	; 0x104
 8008150:	f001 f856 	bl	8009200 <CRYP_DataOut>
 8008154:	4603      	mov	r3, r0
 8008156:	6033      	str	r3, [r6, #0]
          outputaddr+=4;
 8008158:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800815c:	3304      	adds	r3, #4
 800815e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 8008162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008166:	3310      	adds	r3, #16
 8008168:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800816c:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8008170:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8008174:	429a      	cmp	r2, r3
 8008176:	d204      	bcs.n	8008182 <CRYP_AES_GCM+0x8c6>
 8008178:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800817c:	2b00      	cmp	r3, #0
 800817e:	f47f af6f 	bne.w	8008060 <CRYP_AES_GCM+0x7a4>
      }
    }
    
    /***************************** final phase ********************************/
    /* Select final phase */
    CRYP_PhaseConfig(CRYP_Phase_Final);
 8008182:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8008186:	f000 ffe7 	bl	8009158 <CRYP_PhaseConfig>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 800818a:	2001      	movs	r0, #1
 800818c:	f001 f80e 	bl	80091ac <CRYP_Cmd>
    
    if(CRYP_GetCmdStatus() == DISABLE)
 8008190:	f001 f9f0 	bl	8009574 <CRYP_GetCmdStatus>
 8008194:	4603      	mov	r3, r0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d101      	bne.n	800819e <CRYP_AES_GCM+0x8e2>
    {
      /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
         the CRYP peripheral (please check the device sales type. */
      return(ERROR);
 800819a:	2300      	movs	r3, #0
 800819c:	e062      	b.n	8008264 <CRYP_AES_GCM+0x9a8>
    }
    
    /* Write number of bits concatenated with header in the IN FIFO */
    CRYP_DataIn(__REV(headerlength>>32));
 800819e:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80081a2:	4698      	mov	r8, r3
 80081a4:	f04f 0900 	mov.w	r9, #0
 80081a8:	4643      	mov	r3, r8
 80081aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80081ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081ae:	ba1b      	rev	r3, r3
 80081b0:	4618      	mov	r0, r3
 80081b2:	f001 f817 	bl	80091e4 <CRYP_DataIn>
    CRYP_DataIn(__REV(headerlength));
 80081b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80081bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80081be:	ba1b      	rev	r3, r3
 80081c0:	4618      	mov	r0, r3
 80081c2:	f001 f80f 	bl	80091e4 <CRYP_DataIn>
    CRYP_DataIn(__REV(inputlength>>32));
 80081c6:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80081ca:	001c      	movs	r4, r3
 80081cc:	2500      	movs	r5, #0
 80081ce:	4623      	mov	r3, r4
 80081d0:	667b      	str	r3, [r7, #100]	; 0x64
 80081d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081d4:	ba1b      	rev	r3, r3
 80081d6:	4618      	mov	r0, r3
 80081d8:	f001 f804 	bl	80091e4 <CRYP_DataIn>
    CRYP_DataIn(__REV(inputlength));
 80081dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081e0:	663b      	str	r3, [r7, #96]	; 0x60
 80081e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081e4:	ba1b      	rev	r3, r3
 80081e6:	4618      	mov	r0, r3
 80081e8:	f000 fffc 	bl	80091e4 <CRYP_DataIn>
    /* Wait until the OFNE flag is reset */
    while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 80081ec:	bf00      	nop
 80081ee:	2004      	movs	r0, #4
 80081f0:	f001 f9da 	bl	80095a8 <CRYP_GetFlagStatus>
 80081f4:	4603      	mov	r3, r0
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d0f9      	beq.n	80081ee <CRYP_AES_GCM+0x932>
    {
    }
    
    tagaddr = (uint32_t)AuthTAG;
 80081fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80081fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    /* Read the Auth TAG in the IN FIFO */
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8008202:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8008206:	f000 fffb 	bl	8009200 <CRYP_DataOut>
 800820a:	4603      	mov	r3, r0
 800820c:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 800820e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008212:	3304      	adds	r3, #4
 8008214:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8008218:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 800821c:	f000 fff0 	bl	8009200 <CRYP_DataOut>
 8008220:	4603      	mov	r3, r0
 8008222:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 8008224:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008228:	3304      	adds	r3, #4
 800822a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 800822e:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8008232:	f000 ffe5 	bl	8009200 <CRYP_DataOut>
 8008236:	4603      	mov	r3, r0
 8008238:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 800823a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800823e:	3304      	adds	r3, #4
 8008240:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8008244:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8008248:	f000 ffda 	bl	8009200 <CRYP_DataOut>
 800824c:	4603      	mov	r3, r0
 800824e:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 8008250:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008254:	3304      	adds	r3, #4
 8008256:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  }
  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 800825a:	2000      	movs	r0, #0
 800825c:	f000 ffa6 	bl	80091ac <CRYP_Cmd>

  return status;
 8008260:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
}
 8008264:	4618      	mov	r0, r3
 8008266:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800826a:	46bd      	mov	sp, r7
 800826c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008270 <CRYP_AES_CCM>:
                         uint8_t *Key, uint16_t Keysize,
                         uint8_t *Input, uint32_t ILength,
                         uint8_t *Header, uint32_t HLength, uint8_t *HBuffer,
                         uint8_t *Output,
                         uint8_t *AuthTAG, uint32_t TAGSize)
{
 8008270:	b590      	push	{r4, r7, lr}
 8008272:	b0c5      	sub	sp, #276	; 0x114
 8008274:	af00      	add	r7, sp, #0
 8008276:	f107 0408 	add.w	r4, r7, #8
 800827a:	6021      	str	r1, [r4, #0]
 800827c:	1d39      	adds	r1, r7, #4
 800827e:	600a      	str	r2, [r1, #0]
 8008280:	463a      	mov	r2, r7
 8008282:	6013      	str	r3, [r2, #0]
 8008284:	f107 030f 	add.w	r3, r7, #15
 8008288:	4602      	mov	r2, r0
 800828a:	701a      	strb	r2, [r3, #0]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 800828c:	2300      	movs	r3, #0
 800828e:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t busystatus = 0;
 8008290:	2300      	movs	r3, #0
 8008292:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  ErrorStatus status = SUCCESS;
 8008296:	2301      	movs	r3, #1
 8008298:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  uint32_t keyaddr    = (uint32_t)Key;
 800829c:	463b      	mov	r3, r7
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  uint32_t inputaddr  = (uint32_t)Input;
 80082a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80082a8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  uint32_t outputaddr = (uint32_t)Output;
 80082ac:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80082b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  uint32_t headeraddr = (uint32_t)Header;
 80082b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082b8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  uint32_t tagaddr = (uint32_t)AuthTAG;
 80082bc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80082c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  uint32_t headersize = HLength;
 80082c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80082c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  uint32_t loopcounter = 0;
 80082cc:	2300      	movs	r3, #0
 80082ce:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  uint32_t bufferidx = 0;
 80082d2:	2300      	movs	r3, #0
 80082d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  uint8_t blockb0[16] = {0};/* Block B0 */
 80082d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80082dc:	2200      	movs	r2, #0
 80082de:	601a      	str	r2, [r3, #0]
 80082e0:	3304      	adds	r3, #4
 80082e2:	2200      	movs	r2, #0
 80082e4:	601a      	str	r2, [r3, #0]
 80082e6:	3304      	adds	r3, #4
 80082e8:	2200      	movs	r2, #0
 80082ea:	601a      	str	r2, [r3, #0]
 80082ec:	3304      	adds	r3, #4
 80082ee:	2200      	movs	r2, #0
 80082f0:	601a      	str	r2, [r3, #0]
 80082f2:	3304      	adds	r3, #4
  uint8_t ctr[16] = {0}; /* Counter */
 80082f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082f8:	2200      	movs	r2, #0
 80082fa:	601a      	str	r2, [r3, #0]
 80082fc:	3304      	adds	r3, #4
 80082fe:	2200      	movs	r2, #0
 8008300:	601a      	str	r2, [r3, #0]
 8008302:	3304      	adds	r3, #4
 8008304:	2200      	movs	r2, #0
 8008306:	601a      	str	r2, [r3, #0]
 8008308:	3304      	adds	r3, #4
 800830a:	2200      	movs	r2, #0
 800830c:	601a      	str	r2, [r3, #0]
 800830e:	3304      	adds	r3, #4
  uint32_t temptag[4] = {0}; /* temporary TAG (MAC) */
 8008310:	f107 0314 	add.w	r3, r7, #20
 8008314:	2200      	movs	r2, #0
 8008316:	601a      	str	r2, [r3, #0]
 8008318:	3304      	adds	r3, #4
 800831a:	2200      	movs	r2, #0
 800831c:	601a      	str	r2, [r3, #0]
 800831e:	3304      	adds	r3, #4
 8008320:	2200      	movs	r2, #0
 8008322:	601a      	str	r2, [r3, #0]
 8008324:	3304      	adds	r3, #4
 8008326:	2200      	movs	r2, #0
 8008328:	601a      	str	r2, [r3, #0]
 800832a:	3304      	adds	r3, #4
  uint32_t ctraddr = (uint32_t)ctr;
 800832c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008330:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t b0addr = (uint32_t)blockb0;
 8008334:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008338:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  
  /************************ Formatting the header block ***********************/
  if(headersize != 0)
 800833c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008340:	2b00      	cmp	r3, #0
 8008342:	f000 80b0 	beq.w	80084a6 <CRYP_AES_CCM+0x236>
  {
    /* Check that the associated data (or header) length is lower than 2^16 - 2^8 = 65536 - 256 = 65280 */
    if(headersize < 65280)
 8008346:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800834a:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800834e:	d21e      	bcs.n	800838e <CRYP_AES_CCM+0x11e>
    {
      HBuffer[bufferidx++] = (uint8_t) ((headersize >> 8) & 0xFF);
 8008350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008354:	1c5a      	adds	r2, r3, #1
 8008356:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800835a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800835e:	4413      	add	r3, r2
 8008360:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8008364:	0a12      	lsrs	r2, r2, #8
 8008366:	b2d2      	uxtb	r2, r2
 8008368:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = (uint8_t) ((headersize) & 0xFF);
 800836a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800836e:	1c5a      	adds	r2, r3, #1
 8008370:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8008374:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8008378:	4413      	add	r3, r2
 800837a:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800837e:	b2d2      	uxtb	r2, r2
 8008380:	701a      	strb	r2, [r3, #0]
      headersize += 2;
 8008382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008386:	3302      	adds	r3, #2
 8008388:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800838c:	e042      	b.n	8008414 <CRYP_AES_CCM+0x1a4>
    }
    else
    {
      /* header is encoded as 0xff || 0xfe || [headersize]32, i.e., six octets */
      HBuffer[bufferidx++] = 0xFF;
 800838e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008392:	1c5a      	adds	r2, r3, #1
 8008394:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8008398:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800839c:	4413      	add	r3, r2
 800839e:	22ff      	movs	r2, #255	; 0xff
 80083a0:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = 0xFE;
 80083a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083a6:	1c5a      	adds	r2, r3, #1
 80083a8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80083ac:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80083b0:	4413      	add	r3, r2
 80083b2:	22fe      	movs	r2, #254	; 0xfe
 80083b4:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = headersize & 0xff000000;
 80083b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083ba:	1c5a      	adds	r2, r3, #1
 80083bc:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80083c0:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80083c4:	4413      	add	r3, r2
 80083c6:	2200      	movs	r2, #0
 80083c8:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = headersize & 0x00ff0000;
 80083ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083ce:	1c5a      	adds	r2, r3, #1
 80083d0:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80083d4:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80083d8:	4413      	add	r3, r2
 80083da:	2200      	movs	r2, #0
 80083dc:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = headersize & 0x0000ff00;
 80083de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083e2:	1c5a      	adds	r2, r3, #1
 80083e4:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80083e8:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80083ec:	4413      	add	r3, r2
 80083ee:	2200      	movs	r2, #0
 80083f0:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = headersize & 0x000000ff;
 80083f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083f6:	1c5a      	adds	r2, r3, #1
 80083f8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80083fc:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8008400:	4413      	add	r3, r2
 8008402:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8008406:	b2d2      	uxtb	r2, r2
 8008408:	701a      	strb	r2, [r3, #0]
      headersize += 6;
 800840a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800840e:	3306      	adds	r3, #6
 8008410:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    }
    /* Copy the header buffer in internal buffer "HBuffer" */
    for(loopcounter = 0; loopcounter < headersize; loopcounter++)
 8008414:	2300      	movs	r3, #0
 8008416:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800841a:	e013      	b.n	8008444 <CRYP_AES_CCM+0x1d4>
    {
      HBuffer[bufferidx++] = Header[loopcounter];
 800841c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008420:	1c5a      	adds	r2, r3, #1
 8008422:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8008426:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800842a:	4413      	add	r3, r2
 800842c:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8008430:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8008434:	440a      	add	r2, r1
 8008436:	7812      	ldrb	r2, [r2, #0]
 8008438:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = headersize & 0x0000ff00;
      HBuffer[bufferidx++] = headersize & 0x000000ff;
      headersize += 6;
    }
    /* Copy the header buffer in internal buffer "HBuffer" */
    for(loopcounter = 0; loopcounter < headersize; loopcounter++)
 800843a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800843e:	3301      	adds	r3, #1
 8008440:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008444:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8008448:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800844c:	429a      	cmp	r2, r3
 800844e:	d3e5      	bcc.n	800841c <CRYP_AES_CCM+0x1ac>
    {
      HBuffer[bufferidx++] = Header[loopcounter];
    }
    /* Check if the header size is modulo 16 */
    if ((headersize % 16) != 0)
 8008450:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008454:	f003 030f 	and.w	r3, r3, #15
 8008458:	2b00      	cmp	r3, #0
 800845a:	d020      	beq.n	800849e <CRYP_AES_CCM+0x22e>
    {
      /* Padd the header buffer with 0s till the HBuffer length is modulo 16 */
      for(loopcounter = headersize; loopcounter <= ((headersize/16) + 1) * 16; loopcounter++)
 800845c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008460:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008464:	e00b      	b.n	800847e <CRYP_AES_CCM+0x20e>
      {
        HBuffer[loopcounter] = 0;
 8008466:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800846a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800846e:	4413      	add	r3, r2
 8008470:	2200      	movs	r2, #0
 8008472:	701a      	strb	r2, [r3, #0]
    }
    /* Check if the header size is modulo 16 */
    if ((headersize % 16) != 0)
    {
      /* Padd the header buffer with 0s till the HBuffer length is modulo 16 */
      for(loopcounter = headersize; loopcounter <= ((headersize/16) + 1) * 16; loopcounter++)
 8008474:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008478:	3301      	adds	r3, #1
 800847a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800847e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008482:	091b      	lsrs	r3, r3, #4
 8008484:	3301      	adds	r3, #1
 8008486:	011a      	lsls	r2, r3, #4
 8008488:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800848c:	429a      	cmp	r2, r3
 800848e:	d2ea      	bcs.n	8008466 <CRYP_AES_CCM+0x1f6>
      {
        HBuffer[loopcounter] = 0;
      }
      /* Set the header size to modulo 16 */
      headersize = ((headersize/16) + 1) * 16;
 8008490:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008494:	091b      	lsrs	r3, r3, #4
 8008496:	3301      	adds	r3, #1
 8008498:	011b      	lsls	r3, r3, #4
 800849a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    }
    /* set the pointer headeraddr to HBuffer */
    headeraddr = (uint32_t)HBuffer;
 800849e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80084a2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  }
  /************************* Formatting the block B0 **************************/
  if(headersize != 0)
 80084a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d002      	beq.n	80084b4 <CRYP_AES_CCM+0x244>
  {
    blockb0[0] = 0x40;
 80084ae:	2340      	movs	r3, #64	; 0x40
 80084b0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  }
  /* Flags byte */
  blockb0[0] |= 0u | (((( (uint8_t) TAGSize - 2) / 2) & 0x07 ) << 3 ) | ( ( (uint8_t) (15 - NonceSize) - 1) & 0x07);
 80084b4:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80084b8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	3b02      	subs	r3, #2
 80084c0:	0fd9      	lsrs	r1, r3, #31
 80084c2:	440b      	add	r3, r1
 80084c4:	105b      	asrs	r3, r3, #1
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	f003 0307 	and.w	r3, r3, #7
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	00db      	lsls	r3, r3, #3
 80084d0:	b2d9      	uxtb	r1, r3
 80084d2:	1d3b      	adds	r3, r7, #4
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	f1c3 030e 	rsb	r3, r3, #14
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	f003 0307 	and.w	r3, r3, #7
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	430b      	orrs	r3, r1
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	4313      	orrs	r3, r2
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  
  for (loopcounter = 0; loopcounter < NonceSize; loopcounter++)
 80084f0:	2300      	movs	r3, #0
 80084f2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80084f6:	e013      	b.n	8008520 <CRYP_AES_CCM+0x2b0>
  {
    blockb0[loopcounter+1] = Nonce[loopcounter];
 80084f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80084fc:	3301      	adds	r3, #1
 80084fe:	f107 0208 	add.w	r2, r7, #8
 8008502:	6811      	ldr	r1, [r2, #0]
 8008504:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8008508:	440a      	add	r2, r1
 800850a:	7812      	ldrb	r2, [r2, #0]
 800850c:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8008510:	440b      	add	r3, r1
 8008512:	f803 2cdc 	strb.w	r2, [r3, #-220]
    blockb0[0] = 0x40;
  }
  /* Flags byte */
  blockb0[0] |= 0u | (((( (uint8_t) TAGSize - 2) / 2) & 0x07 ) << 3 ) | ( ( (uint8_t) (15 - NonceSize) - 1) & 0x07);
  
  for (loopcounter = 0; loopcounter < NonceSize; loopcounter++)
 8008516:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800851a:	3301      	adds	r3, #1
 800851c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008520:	1d3b      	adds	r3, r7, #4
 8008522:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	429a      	cmp	r2, r3
 800852a:	d3e5      	bcc.n	80084f8 <CRYP_AES_CCM+0x288>
  {
    blockb0[loopcounter+1] = Nonce[loopcounter];
  }
  for ( ; loopcounter < 13; loopcounter++)
 800852c:	e00d      	b.n	800854a <CRYP_AES_CCM+0x2da>
  {
    blockb0[loopcounter+1] = 0;
 800852e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008532:	3301      	adds	r3, #1
 8008534:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8008538:	4413      	add	r3, r2
 800853a:	2200      	movs	r2, #0
 800853c:	f803 2cdc 	strb.w	r2, [r3, #-220]
  
  for (loopcounter = 0; loopcounter < NonceSize; loopcounter++)
  {
    blockb0[loopcounter+1] = Nonce[loopcounter];
  }
  for ( ; loopcounter < 13; loopcounter++)
 8008540:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008544:	3301      	adds	r3, #1
 8008546:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800854a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800854e:	2b0c      	cmp	r3, #12
 8008550:	d9ed      	bls.n	800852e <CRYP_AES_CCM+0x2be>
  {
    blockb0[loopcounter+1] = 0;
  }
  
  blockb0[14] = ((ILength >> 8) & 0xFF);
 8008552:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008556:	0a1b      	lsrs	r3, r3, #8
 8008558:	b2db      	uxtb	r3, r3
 800855a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  blockb0[15] = (ILength & 0xFF);
 800855e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008562:	b2db      	uxtb	r3, r3
 8008564:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
     Bits 7 and 6 are reserved and shall be set to 0
     Bits 3, 4, and 5 shall also be set to 0, to ensure that all the counter blocks
     are distinct from B0
     Bits 0, 1, and 2 contain the same encoding of q as in B0
  */
  ctr[0] = blockb0[0] & 0x07;
 8008568:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800856c:	f003 0307 	and.w	r3, r3, #7
 8008570:	b2db      	uxtb	r3, r3
 8008572:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  /* byte 1 to NonceSize is the IV (Nonce) */
  for(loopcounter = 1; loopcounter < NonceSize + 1; loopcounter++)
 8008576:	2301      	movs	r3, #1
 8008578:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800857c:	e010      	b.n	80085a0 <CRYP_AES_CCM+0x330>
  {
    ctr[loopcounter] = blockb0[loopcounter];
 800857e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008582:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008586:	4413      	add	r3, r2
 8008588:	781a      	ldrb	r2, [r3, #0]
 800858a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800858e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008592:	440b      	add	r3, r1
 8008594:	701a      	strb	r2, [r3, #0]
     are distinct from B0
     Bits 0, 1, and 2 contain the same encoding of q as in B0
  */
  ctr[0] = blockb0[0] & 0x07;
  /* byte 1 to NonceSize is the IV (Nonce) */
  for(loopcounter = 1; loopcounter < NonceSize + 1; loopcounter++)
 8008596:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800859a:	3301      	adds	r3, #1
 800859c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80085a0:	1d3b      	adds	r3, r7, #4
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	1c5a      	adds	r2, r3, #1
 80085a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d8e7      	bhi.n	800857e <CRYP_AES_CCM+0x30e>
  {
    ctr[loopcounter] = blockb0[loopcounter];
  }
  /* Set the LSB to 1 */
  ctr[15] |= 0x01;
 80085ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80085b2:	f043 0301 	orr.w	r3, r3, #1
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  
  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 80085bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80085c0:	4618      	mov	r0, r3
 80085c2:	f000 fd75 	bl	80090b0 <CRYP_KeyStructInit>
  
  switch(Keysize)
 80085c6:	f8b7 3120 	ldrh.w	r3, [r7, #288]	; 0x120
 80085ca:	2bc0      	cmp	r3, #192	; 0xc0
 80085cc:	d03d      	beq.n	800864a <CRYP_AES_CCM+0x3da>
 80085ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085d2:	f000 808e 	beq.w	80086f2 <CRYP_AES_CCM+0x482>
 80085d6:	2b80      	cmp	r3, #128	; 0x80
 80085d8:	d000      	beq.n	80085dc <CRYP_AES_CCM+0x36c>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    default:
    break;
 80085da:	e0fa      	b.n	80087d2 <CRYP_AES_CCM+0x562>
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
  
  switch(Keysize)
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 80085dc:	2300      	movs	r3, #0
 80085de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80085e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80085ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085f0:	ba1b      	rev	r3, r3
 80085f2:	66bb      	str	r3, [r7, #104]	; 0x68
    keyaddr+=4;
 80085f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80085f8:	3304      	adds	r3, #4
 80085fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80085fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008608:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800860c:	ba1b      	rev	r3, r3
 800860e:	66fb      	str	r3, [r7, #108]	; 0x6c
    keyaddr+=4;
 8008610:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008614:	3304      	adds	r3, #4
 8008616:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 800861a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008624:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008628:	ba1b      	rev	r3, r3
 800862a:	673b      	str	r3, [r7, #112]	; 0x70
    keyaddr+=4;
 800862c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008630:	3304      	adds	r3, #4
 8008632:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8008636:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008640:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008644:	ba1b      	rev	r3, r3
 8008646:	677b      	str	r3, [r7, #116]	; 0x74
    break;
 8008648:	e0c3      	b.n	80087d2 <CRYP_AES_CCM+0x562>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 800864a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800864e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8008652:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800865c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008660:	ba1b      	rev	r3, r3
 8008662:	663b      	str	r3, [r7, #96]	; 0x60
    keyaddr+=4;
 8008664:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008668:	3304      	adds	r3, #4
 800866a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800866e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008678:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800867c:	ba1b      	rev	r3, r3
 800867e:	667b      	str	r3, [r7, #100]	; 0x64
    keyaddr+=4;
 8008680:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008684:	3304      	adds	r3, #4
 8008686:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800868a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008694:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008698:	ba1b      	rev	r3, r3
 800869a:	66bb      	str	r3, [r7, #104]	; 0x68
    keyaddr+=4;
 800869c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80086a0:	3304      	adds	r3, #4
 80086a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80086a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80086b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80086b4:	ba1b      	rev	r3, r3
 80086b6:	66fb      	str	r3, [r7, #108]	; 0x6c
    keyaddr+=4;
 80086b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80086bc:	3304      	adds	r3, #4
 80086be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80086c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80086cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80086d0:	ba1b      	rev	r3, r3
 80086d2:	673b      	str	r3, [r7, #112]	; 0x70
    keyaddr+=4;
 80086d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80086d8:	3304      	adds	r3, #4
 80086da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80086de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80086e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80086ec:	ba1b      	rev	r3, r3
 80086ee:	677b      	str	r3, [r7, #116]	; 0x74
    break;
 80086f0:	e06f      	b.n	80087d2 <CRYP_AES_CCM+0x562>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 80086f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 80086fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008704:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008708:	ba1b      	rev	r3, r3
 800870a:	65bb      	str	r3, [r7, #88]	; 0x58
    keyaddr+=4;
 800870c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008710:	3304      	adds	r3, #4
 8008712:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8008716:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008720:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008724:	ba1b      	rev	r3, r3
 8008726:	65fb      	str	r3, [r7, #92]	; 0x5c
    keyaddr+=4;
 8008728:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800872c:	3304      	adds	r3, #4
 800872e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8008732:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800873c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008740:	ba1b      	rev	r3, r3
 8008742:	663b      	str	r3, [r7, #96]	; 0x60
    keyaddr+=4;
 8008744:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008748:	3304      	adds	r3, #4
 800874a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800874e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008758:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800875c:	ba1b      	rev	r3, r3
 800875e:	667b      	str	r3, [r7, #100]	; 0x64
    keyaddr+=4;
 8008760:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008764:	3304      	adds	r3, #4
 8008766:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800876a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008774:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008778:	ba1b      	rev	r3, r3
 800877a:	66bb      	str	r3, [r7, #104]	; 0x68
    keyaddr+=4;
 800877c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008780:	3304      	adds	r3, #4
 8008782:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8008786:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008790:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008794:	ba1b      	rev	r3, r3
 8008796:	66fb      	str	r3, [r7, #108]	; 0x6c
    keyaddr+=4;
 8008798:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800879c:	3304      	adds	r3, #4
 800879e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80087a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80087ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80087b0:	ba1b      	rev	r3, r3
 80087b2:	673b      	str	r3, [r7, #112]	; 0x70
    keyaddr+=4;
 80087b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087b8:	3304      	adds	r3, #4
 80087ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80087be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80087c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80087cc:	ba1b      	rev	r3, r3
 80087ce:	677b      	str	r3, [r7, #116]	; 0x74
    break;
 80087d0:	bf00      	nop
    default:
    break;
  }
  
  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = (__REV(*(uint32_t*)(ctraddr)));
 80087d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80087dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80087e0:	ba1b      	rev	r3, r3
 80087e2:	64bb      	str	r3, [r7, #72]	; 0x48
  ctraddr+=4;
 80087e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087e8:	3304      	adds	r3, #4
 80087ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  AES_CRYP_IVInitStructure.CRYP_IV0Right= (__REV(*(uint32_t*)(ctraddr)));
 80087ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80087f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80087fc:	ba1b      	rev	r3, r3
 80087fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  ctraddr+=4;
 8008800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008804:	3304      	adds	r3, #4
 8008806:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  AES_CRYP_IVInitStructure.CRYP_IV1Left = (__REV(*(uint32_t*)(ctraddr)));
 800880a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008814:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008818:	ba1b      	rev	r3, r3
 800881a:	653b      	str	r3, [r7, #80]	; 0x50
  ctraddr+=4;
 800881c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008820:	3304      	adds	r3, #4
 8008822:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  AES_CRYP_IVInitStructure.CRYP_IV1Right= (__REV(*(uint32_t*)(ctraddr)));
 8008826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008830:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008834:	ba1b      	rev	r3, r3
 8008836:	657b      	str	r3, [r7, #84]	; 0x54
  
  /*------------------ AES Encryption ------------------*/
  if(Mode == MODE_ENCRYPT) /* AES encryption */
 8008838:	f107 030f 	add.w	r3, r7, #15
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	2b01      	cmp	r3, #1
 8008840:	f040 81b9 	bne.w	8008bb6 <CRYP_AES_CCM+0x946>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 8008844:	f000 fca4 	bl	8009190 <CRYP_FIFOFlush>
    
    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8008848:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800884c:	4618      	mov	r0, r3
 800884e:	f000 fc03 	bl	8009058 <CRYP_KeyInit>
    
    /* CRYP Initialization Vectors */
    CRYP_IVInit(&AES_CRYP_IVInitStructure);
 8008852:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008856:	4618      	mov	r0, r3
 8008858:	f000 fc4c 	bl	80090f4 <CRYP_IVInit>
    
    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 800885c:	2300      	movs	r3, #0
 800885e:	67bb      	str	r3, [r7, #120]	; 0x78
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CCM;
 8008860:	f04f 1308 	mov.w	r3, #524296	; 0x80008
 8008864:	67fb      	str	r3, [r7, #124]	; 0x7c
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8008866:	2380      	movs	r3, #128	; 0x80
 8008868:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    CRYP_Init(&AES_CRYP_InitStructure);
 800886c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8008870:	4618      	mov	r0, r3
 8008872:	f000 fb89 	bl	8008f88 <CRYP_Init>
    
    /***************************** Init phase *********************************/
    /* Select init phase */
    CRYP_PhaseConfig(CRYP_Phase_Init);
 8008876:	2000      	movs	r0, #0
 8008878:	f000 fc6e 	bl	8009158 <CRYP_PhaseConfig>
    
    b0addr = (uint32_t)blockb0;
 800887c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008880:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    /* Write the blockb0 block in the IN FIFO */
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 8008884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4618      	mov	r0, r3
 800888c:	f000 fcaa 	bl	80091e4 <CRYP_DataIn>
    b0addr+=4;
 8008890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008894:	3304      	adds	r3, #4
 8008896:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 800889a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4618      	mov	r0, r3
 80088a2:	f000 fc9f 	bl	80091e4 <CRYP_DataIn>
    b0addr+=4;
 80088a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088aa:	3304      	adds	r3, #4
 80088ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 80088b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4618      	mov	r0, r3
 80088b8:	f000 fc94 	bl	80091e4 <CRYP_DataIn>
    b0addr+=4;
 80088bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088c0:	3304      	adds	r3, #4
 80088c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 80088c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4618      	mov	r0, r3
 80088ce:	f000 fc89 	bl	80091e4 <CRYP_DataIn>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 80088d2:	2001      	movs	r0, #1
 80088d4:	f000 fc6a 	bl	80091ac <CRYP_Cmd>
    
    /* Wait for CRYPEN bit to be 0 */
    while(CRYP_GetCmdStatus() == ENABLE)
 80088d8:	bf00      	nop
 80088da:	f000 fe4b 	bl	8009574 <CRYP_GetCmdStatus>
 80088de:	4603      	mov	r3, r0
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d0fa      	beq.n	80088da <CRYP_AES_CCM+0x66a>
    {
    }
    /***************************** header phase *******************************/
    if(headersize != 0)
 80088e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d069      	beq.n	80089c0 <CRYP_AES_CCM+0x750>
    {
      /* Select header phase */
      CRYP_PhaseConfig(CRYP_Phase_Header);
 80088ec:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80088f0:	f000 fc32 	bl	8009158 <CRYP_PhaseConfig>
      
      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 80088f4:	2001      	movs	r0, #1
 80088f6:	f000 fc59 	bl	80091ac <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 80088fa:	f000 fe3b 	bl	8009574 <CRYP_GetCmdStatus>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d101      	bne.n	8008908 <CRYP_AES_CCM+0x698>
      {
         /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
            the CRYP peripheral (please check the device sales type. */
         return(ERROR);
 8008904:	2300      	movs	r3, #0
 8008906:	e32e      	b.n	8008f66 <CRYP_AES_CCM+0xcf6>
      }
      
      for(loopcounter = 0; (loopcounter < headersize); loopcounter+=16)
 8008908:	2300      	movs	r3, #0
 800890a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800890e:	e037      	b.n	8008980 <CRYP_AES_CCM+0x710>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 8008910:	bf00      	nop
 8008912:	2001      	movs	r0, #1
 8008914:	f000 fe48 	bl	80095a8 <CRYP_GetFlagStatus>
 8008918:	4603      	mov	r3, r0
 800891a:	2b00      	cmp	r3, #0
 800891c:	d0f9      	beq.n	8008912 <CRYP_AES_CCM+0x6a2>
        {
        }
        
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 800891e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4618      	mov	r0, r3
 8008926:	f000 fc5d 	bl	80091e4 <CRYP_DataIn>
        headeraddr+=4;
 800892a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800892e:	3304      	adds	r3, #4
 8008930:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8008934:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4618      	mov	r0, r3
 800893c:	f000 fc52 	bl	80091e4 <CRYP_DataIn>
        headeraddr+=4;
 8008940:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008944:	3304      	adds	r3, #4
 8008946:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 800894a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4618      	mov	r0, r3
 8008952:	f000 fc47 	bl	80091e4 <CRYP_DataIn>
        headeraddr+=4;
 8008956:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800895a:	3304      	adds	r3, #4
 800895c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8008960:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4618      	mov	r0, r3
 8008968:	f000 fc3c 	bl	80091e4 <CRYP_DataIn>
        headeraddr+=4;
 800896c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008970:	3304      	adds	r3, #4
 8008972:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
         /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
            the CRYP peripheral (please check the device sales type. */
         return(ERROR);
      }
      
      for(loopcounter = 0; (loopcounter < headersize); loopcounter+=16)
 8008976:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800897a:	3310      	adds	r3, #16
 800897c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008980:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8008984:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008988:	429a      	cmp	r2, r3
 800898a:	d3c1      	bcc.n	8008910 <CRYP_AES_CCM+0x6a0>
        CRYP_DataIn(*(uint32_t*)(headeraddr));
        headeraddr+=4;
      }
      
      /* Wait until the complete message has been processed */
      counter = 0;
 800898c:	2300      	movs	r3, #0
 800898e:	647b      	str	r3, [r7, #68]	; 0x44
      do
      {
        busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8008990:	2010      	movs	r0, #16
 8008992:	f000 fe09 	bl	80095a8 <CRYP_GetFlagStatus>
 8008996:	4603      	mov	r3, r0
 8008998:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
        counter++;
 800899c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800899e:	3301      	adds	r3, #1
 80089a0:	647b      	str	r3, [r7, #68]	; 0x44
      }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 80089a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089a8:	d003      	beq.n	80089b2 <CRYP_AES_CCM+0x742>
 80089aa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d1ee      	bne.n	8008990 <CRYP_AES_CCM+0x720>

      if (busystatus != RESET)
 80089b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d002      	beq.n	80089c0 <CRYP_AES_CCM+0x750>
      {
        status = ERROR;
 80089ba:	2300      	movs	r3, #0
 80089bc:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
      }
    }
    
    /**************************** payload phase *******************************/
    if(ILength != 0)
 80089c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	f000 80a3 	beq.w	8008b10 <CRYP_AES_CCM+0x8a0>
    {
      /* Select payload phase */
      CRYP_PhaseConfig(CRYP_Phase_Payload);
 80089ca:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80089ce:	f000 fbc3 	bl	8009158 <CRYP_PhaseConfig>
      
      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 80089d2:	2001      	movs	r0, #1
 80089d4:	f000 fbea 	bl	80091ac <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 80089d8:	f000 fdcc 	bl	8009574 <CRYP_GetCmdStatus>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d101      	bne.n	80089e6 <CRYP_AES_CCM+0x776>
      {
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
 80089e2:	2300      	movs	r3, #0
 80089e4:	e2bf      	b.n	8008f66 <CRYP_AES_CCM+0xcf6>
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 80089e6:	2300      	movs	r3, #0
 80089e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80089ec:	e085      	b.n	8008afa <CRYP_AES_CCM+0x88a>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 80089ee:	bf00      	nop
 80089f0:	2001      	movs	r0, #1
 80089f2:	f000 fdd9 	bl	80095a8 <CRYP_GetFlagStatus>
 80089f6:	4603      	mov	r3, r0
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d0f9      	beq.n	80089f0 <CRYP_AES_CCM+0x780>
        {
        }
        
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 80089fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4618      	mov	r0, r3
 8008a04:	f000 fbee 	bl	80091e4 <CRYP_DataIn>
        inputaddr+=4;
 8008a08:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008a0c:	3304      	adds	r3, #4
 8008a0e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8008a12:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f000 fbe3 	bl	80091e4 <CRYP_DataIn>
        inputaddr+=4;
 8008a1e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008a22:	3304      	adds	r3, #4
 8008a24:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8008a28:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f000 fbd8 	bl	80091e4 <CRYP_DataIn>
        inputaddr+=4;
 8008a34:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008a38:	3304      	adds	r3, #4
 8008a3a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8008a3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4618      	mov	r0, r3
 8008a46:	f000 fbcd 	bl	80091e4 <CRYP_DataIn>
        inputaddr+=4;
 8008a4a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008a4e:	3304      	adds	r3, #4
 8008a50:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        
        /* Wait until the complete message has been processed */
        counter = 0;
 8008a54:	2300      	movs	r3, #0
 8008a56:	647b      	str	r3, [r7, #68]	; 0x44
        do
        {
          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8008a58:	2010      	movs	r0, #16
 8008a5a:	f000 fda5 	bl	80095a8 <CRYP_GetFlagStatus>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
          counter++;
 8008a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a66:	3301      	adds	r3, #1
 8008a68:	647b      	str	r3, [r7, #68]	; 0x44
        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8008a6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a70:	d003      	beq.n	8008a7a <CRYP_AES_CCM+0x80a>
 8008a72:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d1ee      	bne.n	8008a58 <CRYP_AES_CCM+0x7e8>

        if (busystatus != RESET)
 8008a7a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d003      	beq.n	8008a8a <CRYP_AES_CCM+0x81a>
        {
          status = ERROR;
 8008a82:	2300      	movs	r3, #0
 8008a84:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8008a88:	e032      	b.n	8008af0 <CRYP_AES_CCM+0x880>
        }
        else
        {
          /* Wait until the OFNE flag is reset */
          while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 8008a8a:	bf00      	nop
 8008a8c:	2004      	movs	r0, #4
 8008a8e:	f000 fd8b 	bl	80095a8 <CRYP_GetFlagStatus>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d0f9      	beq.n	8008a8c <CRYP_AES_CCM+0x81c>
          {
          }
          
          /* Read the Output block from the Output FIFO */
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008a98:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8008a9c:	f000 fbb0 	bl	8009200 <CRYP_DataOut>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8008aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008aa8:	3304      	adds	r3, #4
 8008aaa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008aae:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8008ab2:	f000 fba5 	bl	8009200 <CRYP_DataOut>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8008aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008abe:	3304      	adds	r3, #4
 8008ac0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008ac4:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8008ac8:	f000 fb9a 	bl	8009200 <CRYP_DataOut>
 8008acc:	4603      	mov	r3, r0
 8008ace:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8008ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ad4:	3304      	adds	r3, #4
 8008ad6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008ada:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8008ade:	f000 fb8f 	bl	8009200 <CRYP_DataOut>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8008ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008aea:	3304      	adds	r3, #4
 8008aec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 8008af0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008af4:	3310      	adds	r3, #16
 8008af6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008afa:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8008afe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d204      	bcs.n	8008b10 <CRYP_AES_CCM+0x8a0>
 8008b06:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	f47f af6f 	bne.w	80089ee <CRYP_AES_CCM+0x77e>
      }
    }
    
    /***************************** final phase ********************************/
    /* Select final phase */
    CRYP_PhaseConfig(CRYP_Phase_Final);
 8008b10:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8008b14:	f000 fb20 	bl	8009158 <CRYP_PhaseConfig>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8008b18:	2001      	movs	r0, #1
 8008b1a:	f000 fb47 	bl	80091ac <CRYP_Cmd>
    
    if(CRYP_GetCmdStatus() == DISABLE)
 8008b1e:	f000 fd29 	bl	8009574 <CRYP_GetCmdStatus>
 8008b22:	4603      	mov	r3, r0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d101      	bne.n	8008b2c <CRYP_AES_CCM+0x8bc>
    {
      /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
         the CRYP peripheral (please check the device sales type. */
      return(ERROR);
 8008b28:	2300      	movs	r3, #0
 8008b2a:	e21c      	b.n	8008f66 <CRYP_AES_CCM+0xcf6>
    }
    
    ctraddr = (uint32_t)ctr;
 8008b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b30:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    /* Write the counter block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(ctraddr));
 8008b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f000 fb52 	bl	80091e4 <CRYP_DataIn>
    ctraddr+=4;
 8008b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b44:	3304      	adds	r3, #4
 8008b46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    CRYP_DataIn(*(uint32_t*)(ctraddr));
 8008b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4618      	mov	r0, r3
 8008b52:	f000 fb47 	bl	80091e4 <CRYP_DataIn>
    ctraddr+=4;
 8008b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b5a:	3304      	adds	r3, #4
 8008b5c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    CRYP_DataIn(*(uint32_t*)(ctraddr));
 8008b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4618      	mov	r0, r3
 8008b68:	f000 fb3c 	bl	80091e4 <CRYP_DataIn>
    ctraddr+=4;
 8008b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b70:	3304      	adds	r3, #4
 8008b72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    /* Reset bit 0 (after 8-bit swap) is equivalent to reset bit 24 (before 8-bit swap) */
    CRYP_DataIn(*(uint32_t*)(ctraddr) & 0xfeffffff);
 8008b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b80:	4618      	mov	r0, r3
 8008b82:	f000 fb2f 	bl	80091e4 <CRYP_DataIn>
    
    /* Wait until the OFNE flag is reset */
    while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 8008b86:	bf00      	nop
 8008b88:	2004      	movs	r0, #4
 8008b8a:	f000 fd0d 	bl	80095a8 <CRYP_GetFlagStatus>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d0f9      	beq.n	8008b88 <CRYP_AES_CCM+0x918>
    {
    }
    
    /* Read the Auth TAG in the IN FIFO */
    temptag[0] = CRYP_DataOut();
 8008b94:	f000 fb34 	bl	8009200 <CRYP_DataOut>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	617b      	str	r3, [r7, #20]
    temptag[1] = CRYP_DataOut();
 8008b9c:	f000 fb30 	bl	8009200 <CRYP_DataOut>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	61bb      	str	r3, [r7, #24]
    temptag[2] = CRYP_DataOut();
 8008ba4:	f000 fb2c 	bl	8009200 <CRYP_DataOut>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	61fb      	str	r3, [r7, #28]
    temptag[3] = CRYP_DataOut();
 8008bac:	f000 fb28 	bl	8009200 <CRYP_DataOut>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	623b      	str	r3, [r7, #32]
 8008bb4:	e1b7      	b.n	8008f26 <CRYP_AES_CCM+0xcb6>
  }
  /*------------------ AES Decryption ------------------*/
  else /* AES decryption */
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 8008bb6:	f000 faeb 	bl	8009190 <CRYP_FIFOFlush>
    
    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8008bba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f000 fa4a 	bl	8009058 <CRYP_KeyInit>
    
    /* CRYP Initialization Vectors */
    CRYP_IVInit(&AES_CRYP_IVInitStructure);
 8008bc4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f000 fa93 	bl	80090f4 <CRYP_IVInit>
    
    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8008bce:	2304      	movs	r3, #4
 8008bd0:	67bb      	str	r3, [r7, #120]	; 0x78
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CCM;
 8008bd2:	f04f 1308 	mov.w	r3, #524296	; 0x80008
 8008bd6:	67fb      	str	r3, [r7, #124]	; 0x7c
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8008bd8:	2380      	movs	r3, #128	; 0x80
 8008bda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    CRYP_Init(&AES_CRYP_InitStructure);
 8008bde:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8008be2:	4618      	mov	r0, r3
 8008be4:	f000 f9d0 	bl	8008f88 <CRYP_Init>
    
    /***************************** Init phase *********************************/
    /* Select init phase */
    CRYP_PhaseConfig(CRYP_Phase_Init);
 8008be8:	2000      	movs	r0, #0
 8008bea:	f000 fab5 	bl	8009158 <CRYP_PhaseConfig>
    
    b0addr = (uint32_t)blockb0;
 8008bee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008bf2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    /* Write the blockb0 block in the IN FIFO */
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 8008bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f000 faf1 	bl	80091e4 <CRYP_DataIn>
    b0addr+=4;
 8008c02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c06:	3304      	adds	r3, #4
 8008c08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 8008c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4618      	mov	r0, r3
 8008c14:	f000 fae6 	bl	80091e4 <CRYP_DataIn>
    b0addr+=4;
 8008c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c1c:	3304      	adds	r3, #4
 8008c1e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 8008c22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f000 fadb 	bl	80091e4 <CRYP_DataIn>
    b0addr+=4;
 8008c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c32:	3304      	adds	r3, #4
 8008c34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 8008c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f000 fad0 	bl	80091e4 <CRYP_DataIn>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8008c44:	2001      	movs	r0, #1
 8008c46:	f000 fab1 	bl	80091ac <CRYP_Cmd>
    
    /* Wait for CRYPEN bit to be 0 */
    while(CRYP_GetCmdStatus() == ENABLE)
 8008c4a:	bf00      	nop
 8008c4c:	f000 fc92 	bl	8009574 <CRYP_GetCmdStatus>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d0fa      	beq.n	8008c4c <CRYP_AES_CCM+0x9dc>
    {
    }
    
    /***************************** header phase *******************************/
    if(headersize != 0)
 8008c56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d069      	beq.n	8008d32 <CRYP_AES_CCM+0xac2>
    {
      /* Select header phase */
      CRYP_PhaseConfig(CRYP_Phase_Header);
 8008c5e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008c62:	f000 fa79 	bl	8009158 <CRYP_PhaseConfig>
      
      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 8008c66:	2001      	movs	r0, #1
 8008c68:	f000 faa0 	bl	80091ac <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 8008c6c:	f000 fc82 	bl	8009574 <CRYP_GetCmdStatus>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d101      	bne.n	8008c7a <CRYP_AES_CCM+0xa0a>
      {
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
 8008c76:	2300      	movs	r3, #0
 8008c78:	e175      	b.n	8008f66 <CRYP_AES_CCM+0xcf6>
      }
      
      for(loopcounter = 0; (loopcounter < headersize); loopcounter+=16)
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008c80:	e037      	b.n	8008cf2 <CRYP_AES_CCM+0xa82>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 8008c82:	bf00      	nop
 8008c84:	2001      	movs	r0, #1
 8008c86:	f000 fc8f 	bl	80095a8 <CRYP_GetFlagStatus>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d0f9      	beq.n	8008c84 <CRYP_AES_CCM+0xa14>
        {
        }
        
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8008c90:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4618      	mov	r0, r3
 8008c98:	f000 faa4 	bl	80091e4 <CRYP_DataIn>
        headeraddr+=4;
 8008c9c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008ca0:	3304      	adds	r3, #4
 8008ca2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8008ca6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4618      	mov	r0, r3
 8008cae:	f000 fa99 	bl	80091e4 <CRYP_DataIn>
        headeraddr+=4;
 8008cb2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008cb6:	3304      	adds	r3, #4
 8008cb8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8008cbc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f000 fa8e 	bl	80091e4 <CRYP_DataIn>
        headeraddr+=4;
 8008cc8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008ccc:	3304      	adds	r3, #4
 8008cce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8008cd2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f000 fa83 	bl	80091e4 <CRYP_DataIn>
        headeraddr+=4;
 8008cde:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008ce2:	3304      	adds	r3, #4
 8008ce4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
      }
      
      for(loopcounter = 0; (loopcounter < headersize); loopcounter+=16)
 8008ce8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008cec:	3310      	adds	r3, #16
 8008cee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008cf2:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8008cf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d3c1      	bcc.n	8008c82 <CRYP_AES_CCM+0xa12>
        CRYP_DataIn(*(uint32_t*)(headeraddr));
        headeraddr+=4;
      }
      
      /* Wait until the complete message has been processed */
      counter = 0;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	647b      	str	r3, [r7, #68]	; 0x44
      do
      {
        busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8008d02:	2010      	movs	r0, #16
 8008d04:	f000 fc50 	bl	80095a8 <CRYP_GetFlagStatus>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
        counter++;
 8008d0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d10:	3301      	adds	r3, #1
 8008d12:	647b      	str	r3, [r7, #68]	; 0x44
      }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8008d14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d1a:	d003      	beq.n	8008d24 <CRYP_AES_CCM+0xab4>
 8008d1c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d1ee      	bne.n	8008d02 <CRYP_AES_CCM+0xa92>

      if (busystatus != RESET)
 8008d24:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d002      	beq.n	8008d32 <CRYP_AES_CCM+0xac2>
      {
        status = ERROR;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
      }
    }
    
    /**************************** payload phase *******************************/
    if(ILength != 0)
 8008d32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	f000 80a3 	beq.w	8008e82 <CRYP_AES_CCM+0xc12>
    {
      /* Select payload phase */
      CRYP_PhaseConfig(CRYP_Phase_Payload);
 8008d3c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8008d40:	f000 fa0a 	bl	8009158 <CRYP_PhaseConfig>

      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 8008d44:	2001      	movs	r0, #1
 8008d46:	f000 fa31 	bl	80091ac <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 8008d4a:	f000 fc13 	bl	8009574 <CRYP_GetCmdStatus>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d101      	bne.n	8008d58 <CRYP_AES_CCM+0xae8>
      {
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
 8008d54:	2300      	movs	r3, #0
 8008d56:	e106      	b.n	8008f66 <CRYP_AES_CCM+0xcf6>
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 8008d58:	2300      	movs	r3, #0
 8008d5a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008d5e:	e085      	b.n	8008e6c <CRYP_AES_CCM+0xbfc>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 8008d60:	bf00      	nop
 8008d62:	2001      	movs	r0, #1
 8008d64:	f000 fc20 	bl	80095a8 <CRYP_GetFlagStatus>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d0f9      	beq.n	8008d62 <CRYP_AES_CCM+0xaf2>
        {
        }
        
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8008d6e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4618      	mov	r0, r3
 8008d76:	f000 fa35 	bl	80091e4 <CRYP_DataIn>
        inputaddr+=4;
 8008d7a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008d7e:	3304      	adds	r3, #4
 8008d80:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8008d84:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f000 fa2a 	bl	80091e4 <CRYP_DataIn>
        inputaddr+=4;
 8008d90:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008d94:	3304      	adds	r3, #4
 8008d96:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8008d9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4618      	mov	r0, r3
 8008da2:	f000 fa1f 	bl	80091e4 <CRYP_DataIn>
        inputaddr+=4;
 8008da6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008daa:	3304      	adds	r3, #4
 8008dac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8008db0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4618      	mov	r0, r3
 8008db8:	f000 fa14 	bl	80091e4 <CRYP_DataIn>
        inputaddr+=4;
 8008dbc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008dc0:	3304      	adds	r3, #4
 8008dc2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        
        /* Wait until the complete message has been processed */
        counter = 0;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	647b      	str	r3, [r7, #68]	; 0x44
        do
        {
          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8008dca:	2010      	movs	r0, #16
 8008dcc:	f000 fbec 	bl	80095a8 <CRYP_GetFlagStatus>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
          counter++;
 8008dd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dd8:	3301      	adds	r3, #1
 8008dda:	647b      	str	r3, [r7, #68]	; 0x44
        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8008ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008de2:	d003      	beq.n	8008dec <CRYP_AES_CCM+0xb7c>
 8008de4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d1ee      	bne.n	8008dca <CRYP_AES_CCM+0xb5a>

        if (busystatus != RESET)
 8008dec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d003      	beq.n	8008dfc <CRYP_AES_CCM+0xb8c>
        {
          status = ERROR;
 8008df4:	2300      	movs	r3, #0
 8008df6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8008dfa:	e032      	b.n	8008e62 <CRYP_AES_CCM+0xbf2>
        }
        else
        {
          /* Wait until the OFNE flag is reset */
          while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 8008dfc:	bf00      	nop
 8008dfe:	2004      	movs	r0, #4
 8008e00:	f000 fbd2 	bl	80095a8 <CRYP_GetFlagStatus>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d0f9      	beq.n	8008dfe <CRYP_AES_CCM+0xb8e>
          {
          }
          
          /* Read the Output block from the Output FIFO */
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008e0a:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8008e0e:	f000 f9f7 	bl	8009200 <CRYP_DataOut>
 8008e12:	4603      	mov	r3, r0
 8008e14:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8008e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e1a:	3304      	adds	r3, #4
 8008e1c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008e20:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8008e24:	f000 f9ec 	bl	8009200 <CRYP_DataOut>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8008e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e30:	3304      	adds	r3, #4
 8008e32:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008e36:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8008e3a:	f000 f9e1 	bl	8009200 <CRYP_DataOut>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8008e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e46:	3304      	adds	r3, #4
 8008e48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008e4c:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8008e50:	f000 f9d6 	bl	8009200 <CRYP_DataOut>
 8008e54:	4603      	mov	r3, r0
 8008e56:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8008e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e5c:	3304      	adds	r3, #4
 8008e5e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 8008e62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008e66:	3310      	adds	r3, #16
 8008e68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008e6c:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8008e70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d204      	bcs.n	8008e82 <CRYP_AES_CCM+0xc12>
 8008e78:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f47f af6f 	bne.w	8008d60 <CRYP_AES_CCM+0xaf0>
      }
    }
    
    /***************************** final phase ********************************/
    /* Select final phase */
    CRYP_PhaseConfig(CRYP_Phase_Final);
 8008e82:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8008e86:	f000 f967 	bl	8009158 <CRYP_PhaseConfig>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8008e8a:	2001      	movs	r0, #1
 8008e8c:	f000 f98e 	bl	80091ac <CRYP_Cmd>
    
    if(CRYP_GetCmdStatus() == DISABLE)
 8008e90:	f000 fb70 	bl	8009574 <CRYP_GetCmdStatus>
 8008e94:	4603      	mov	r3, r0
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d101      	bne.n	8008e9e <CRYP_AES_CCM+0xc2e>
    {
      /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
         the CRYP peripheral (please check the device sales type. */
      return(ERROR);
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	e063      	b.n	8008f66 <CRYP_AES_CCM+0xcf6>
    }
    
    ctraddr = (uint32_t)ctr;
 8008e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ea2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    /* Write the counter block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(ctraddr));
 8008ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4618      	mov	r0, r3
 8008eae:	f000 f999 	bl	80091e4 <CRYP_DataIn>
    ctraddr+=4;
 8008eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eb6:	3304      	adds	r3, #4
 8008eb8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    CRYP_DataIn(*(uint32_t*)(ctraddr));
 8008ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f000 f98e 	bl	80091e4 <CRYP_DataIn>
    ctraddr+=4;
 8008ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ecc:	3304      	adds	r3, #4
 8008ece:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    CRYP_DataIn(*(uint32_t*)(ctraddr));
 8008ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f000 f983 	bl	80091e4 <CRYP_DataIn>
    ctraddr+=4;
 8008ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ee2:	3304      	adds	r3, #4
 8008ee4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    /* Reset bit 0 (after 8-bit swap) is equivalent to reset bit 24 (before 8-bit swap) */
    CRYP_DataIn(*(uint32_t*)(ctraddr) & 0xfeffffff);
 8008ee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f000 f976 	bl	80091e4 <CRYP_DataIn>
    
    /* Wait until the OFNE flag is reset */
    while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 8008ef8:	bf00      	nop
 8008efa:	2004      	movs	r0, #4
 8008efc:	f000 fb54 	bl	80095a8 <CRYP_GetFlagStatus>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d0f9      	beq.n	8008efa <CRYP_AES_CCM+0xc8a>
    {
    }
    
    /* Read the Authentaication TAG (MAC) in the IN FIFO */
    temptag[0] = CRYP_DataOut();
 8008f06:	f000 f97b 	bl	8009200 <CRYP_DataOut>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	617b      	str	r3, [r7, #20]
    temptag[1] = CRYP_DataOut();
 8008f0e:	f000 f977 	bl	8009200 <CRYP_DataOut>
 8008f12:	4603      	mov	r3, r0
 8008f14:	61bb      	str	r3, [r7, #24]
    temptag[2] = CRYP_DataOut();
 8008f16:	f000 f973 	bl	8009200 <CRYP_DataOut>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	61fb      	str	r3, [r7, #28]
    temptag[3] = CRYP_DataOut();
 8008f1e:	f000 f96f 	bl	8009200 <CRYP_DataOut>
 8008f22:	4603      	mov	r3, r0
 8008f24:	623b      	str	r3, [r7, #32]
  }
  
  /* Copy temporary authentication TAG in user TAG buffer */
  for(loopcounter = 0; (loopcounter < TAGSize); loopcounter++)
 8008f26:	2300      	movs	r3, #0
 8008f28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008f2c:	e010      	b.n	8008f50 <CRYP_AES_CCM+0xce0>
  {
    /* Set the authentication TAG buffer */
    *((uint8_t*)tagaddr+loopcounter) = *((uint8_t*)temptag+loopcounter);
 8008f2e:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8008f32:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008f36:	4413      	add	r3, r2
 8008f38:	f107 0114 	add.w	r1, r7, #20
 8008f3c:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8008f40:	440a      	add	r2, r1
 8008f42:	7812      	ldrb	r2, [r2, #0]
 8008f44:	701a      	strb	r2, [r3, #0]
    temptag[2] = CRYP_DataOut();
    temptag[3] = CRYP_DataOut();
  }
  
  /* Copy temporary authentication TAG in user TAG buffer */
  for(loopcounter = 0; (loopcounter < TAGSize); loopcounter++)
 8008f46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008f50:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8008f54:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d3e8      	bcc.n	8008f2e <CRYP_AES_CCM+0xcbe>
    /* Set the authentication TAG buffer */
    *((uint8_t*)tagaddr+loopcounter) = *((uint8_t*)temptag+loopcounter);
  }
  
  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8008f5c:	2000      	movs	r0, #0
 8008f5e:	f000 f925 	bl	80091ac <CRYP_Cmd>

  return status;
 8008f62:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd90      	pop	{r4, r7, pc}

08008f70 <CRYP_DeInit>:
  * @brief  Deinitializes the CRYP peripheral registers to their default reset values
  * @param  None
  * @retval None
  */
void CRYP_DeInit(void)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	af00      	add	r7, sp, #0
  /* Enable CRYP reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, ENABLE);
 8008f74:	2010      	movs	r0, #16
 8008f76:	2101      	movs	r1, #1
 8008f78:	f006 fe7c 	bl	800fc74 <RCC_AHB2PeriphResetCmd>

  /* Release CRYP from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, DISABLE);
 8008f7c:	2010      	movs	r0, #16
 8008f7e:	2100      	movs	r1, #0
 8008f80:	f006 fe78 	bl	800fc74 <RCC_AHB2PeriphResetCmd>
}
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop

08008f88 <CRYP_Init>:
  * @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure that contains
  *         the configuration information for the CRYP peripheral.
  * @retval None
  */
void CRYP_Init(CRYP_InitTypeDef* CRYP_InitStruct)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b083      	sub	sp, #12
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_CRYP_ALGOMODE(CRYP_InitStruct->CRYP_AlgoMode));
  assert_param(IS_CRYP_DATATYPE(CRYP_InitStruct->CRYP_DataType));
  assert_param(IS_CRYP_ALGODIR(CRYP_InitStruct->CRYP_AlgoDir));

  /* Select Algorithm mode*/  
  CRYP->CR &= ~CRYP_CR_ALGOMODE;
 8008f90:	4a25      	ldr	r2, [pc, #148]	; (8009028 <CRYP_Init+0xa0>)
 8008f92:	4b25      	ldr	r3, [pc, #148]	; (8009028 <CRYP_Init+0xa0>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008f9a:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8008f9e:	6013      	str	r3, [r2, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoMode;
 8008fa0:	4b21      	ldr	r3, [pc, #132]	; (8009028 <CRYP_Init+0xa0>)
 8008fa2:	4a21      	ldr	r2, [pc, #132]	; (8009028 <CRYP_Init+0xa0>)
 8008fa4:	6811      	ldr	r1, [r2, #0]
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	6852      	ldr	r2, [r2, #4]
 8008faa:	430a      	orrs	r2, r1
 8008fac:	601a      	str	r2, [r3, #0]

  /* Select dataType */ 
  CRYP->CR &= ~CRYP_CR_DATATYPE;
 8008fae:	4b1e      	ldr	r3, [pc, #120]	; (8009028 <CRYP_Init+0xa0>)
 8008fb0:	4a1d      	ldr	r2, [pc, #116]	; (8009028 <CRYP_Init+0xa0>)
 8008fb2:	6812      	ldr	r2, [r2, #0]
 8008fb4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008fb8:	601a      	str	r2, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;
 8008fba:	4b1b      	ldr	r3, [pc, #108]	; (8009028 <CRYP_Init+0xa0>)
 8008fbc:	4a1a      	ldr	r2, [pc, #104]	; (8009028 <CRYP_Init+0xa0>)
 8008fbe:	6811      	ldr	r1, [r2, #0]
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	6892      	ldr	r2, [r2, #8]
 8008fc4:	430a      	orrs	r2, r1
 8008fc6:	601a      	str	r2, [r3, #0]

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_ECB) &&
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d018      	beq.n	8009002 <CRYP_Init+0x7a>
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_CBC) &&
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	685b      	ldr	r3, [r3, #4]
  /* Select dataType */ 
  CRYP->CR &= ~CRYP_CR_DATATYPE;
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_ECB) &&
 8008fd4:	2b08      	cmp	r3, #8
 8008fd6:	d014      	beq.n	8009002 <CRYP_Init+0x7a>
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_CBC) &&
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_DES_ECB) &&
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	685b      	ldr	r3, [r3, #4]
  CRYP->CR &= ~CRYP_CR_DATATYPE;
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_ECB) &&
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_CBC) &&
 8008fdc:	2b10      	cmp	r3, #16
 8008fde:	d010      	beq.n	8009002 <CRYP_Init+0x7a>
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_DES_ECB) &&
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_DES_CBC))
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	685b      	ldr	r3, [r3, #4]
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_ECB) &&
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_CBC) &&
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_DES_ECB) &&
 8008fe4:	2b18      	cmp	r3, #24
 8008fe6:	d00c      	beq.n	8009002 <CRYP_Init+0x7a>
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_DES_CBC))
  {
    assert_param(IS_CRYP_KEYSIZE(CRYP_InitStruct->CRYP_KeySize));
    CRYP->CR &= ~CRYP_CR_KEYSIZE;
 8008fe8:	4b0f      	ldr	r3, [pc, #60]	; (8009028 <CRYP_Init+0xa0>)
 8008fea:	4a0f      	ldr	r2, [pc, #60]	; (8009028 <CRYP_Init+0xa0>)
 8008fec:	6812      	ldr	r2, [r2, #0]
 8008fee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008ff2:	601a      	str	r2, [r3, #0]
    CRYP->CR |= CRYP_InitStruct->CRYP_KeySize; /* Key size and value must be 
 8008ff4:	4b0c      	ldr	r3, [pc, #48]	; (8009028 <CRYP_Init+0xa0>)
 8008ff6:	4a0c      	ldr	r2, [pc, #48]	; (8009028 <CRYP_Init+0xa0>)
 8008ff8:	6811      	ldr	r1, [r2, #0]
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	68d2      	ldr	r2, [r2, #12]
 8008ffe:	430a      	orrs	r2, r1
 8009000:	601a      	str	r2, [r3, #0]
                                                  configured once the key has 
                                                  been prepared */
  }

  /* Select data Direction */ 
  CRYP->CR &= ~CRYP_CR_ALGODIR;
 8009002:	4b09      	ldr	r3, [pc, #36]	; (8009028 <CRYP_Init+0xa0>)
 8009004:	4a08      	ldr	r2, [pc, #32]	; (8009028 <CRYP_Init+0xa0>)
 8009006:	6812      	ldr	r2, [r2, #0]
 8009008:	f022 0204 	bic.w	r2, r2, #4
 800900c:	601a      	str	r2, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoDir;
 800900e:	4b06      	ldr	r3, [pc, #24]	; (8009028 <CRYP_Init+0xa0>)
 8009010:	4a05      	ldr	r2, [pc, #20]	; (8009028 <CRYP_Init+0xa0>)
 8009012:	6811      	ldr	r1, [r2, #0]
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	6812      	ldr	r2, [r2, #0]
 8009018:	430a      	orrs	r2, r1
 800901a:	601a      	str	r2, [r3, #0]
}
 800901c:	370c      	adds	r7, #12
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr
 8009026:	bf00      	nop
 8009028:	50060000 	.word	0x50060000

0800902c <CRYP_StructInit>:
  * @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void CRYP_StructInit(CRYP_InitTypeDef* CRYP_InitStruct)
{
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  /* Initialize the CRYP_AlgoDir member */
  CRYP_InitStruct->CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	601a      	str	r2, [r3, #0]

  /* initialize the CRYP_AlgoMode member */
  CRYP_InitStruct->CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	605a      	str	r2, [r3, #4]

  /* initialize the CRYP_DataType member */
  CRYP_InitStruct->CRYP_DataType = CRYP_DataType_32b;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	609a      	str	r2, [r3, #8]
  
  /* Initialize the CRYP_KeySize member */
  CRYP_InitStruct->CRYP_KeySize = CRYP_KeySize_128b;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	60da      	str	r2, [r3, #12]
}
 800904c:	370c      	adds	r7, #12
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr
 8009056:	bf00      	nop

08009058 <CRYP_KeyInit>:
  * @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure that
  *         contains the configuration information for the CRYP Keys.
  * @retval None
  */
void CRYP_KeyInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  /* Key Initialisation */
  CRYP->K0LR = CRYP_KeyInitStruct->CRYP_Key0Left;
 8009060:	4b12      	ldr	r3, [pc, #72]	; (80090ac <CRYP_KeyInit+0x54>)
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	6812      	ldr	r2, [r2, #0]
 8009066:	621a      	str	r2, [r3, #32]
  CRYP->K0RR = CRYP_KeyInitStruct->CRYP_Key0Right;
 8009068:	4b10      	ldr	r3, [pc, #64]	; (80090ac <CRYP_KeyInit+0x54>)
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	6852      	ldr	r2, [r2, #4]
 800906e:	625a      	str	r2, [r3, #36]	; 0x24
  CRYP->K1LR = CRYP_KeyInitStruct->CRYP_Key1Left;
 8009070:	4b0e      	ldr	r3, [pc, #56]	; (80090ac <CRYP_KeyInit+0x54>)
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	6892      	ldr	r2, [r2, #8]
 8009076:	629a      	str	r2, [r3, #40]	; 0x28
  CRYP->K1RR = CRYP_KeyInitStruct->CRYP_Key1Right;
 8009078:	4b0c      	ldr	r3, [pc, #48]	; (80090ac <CRYP_KeyInit+0x54>)
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	68d2      	ldr	r2, [r2, #12]
 800907e:	62da      	str	r2, [r3, #44]	; 0x2c
  CRYP->K2LR = CRYP_KeyInitStruct->CRYP_Key2Left;
 8009080:	4b0a      	ldr	r3, [pc, #40]	; (80090ac <CRYP_KeyInit+0x54>)
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	6912      	ldr	r2, [r2, #16]
 8009086:	631a      	str	r2, [r3, #48]	; 0x30
  CRYP->K2RR = CRYP_KeyInitStruct->CRYP_Key2Right;
 8009088:	4b08      	ldr	r3, [pc, #32]	; (80090ac <CRYP_KeyInit+0x54>)
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	6952      	ldr	r2, [r2, #20]
 800908e:	635a      	str	r2, [r3, #52]	; 0x34
  CRYP->K3LR = CRYP_KeyInitStruct->CRYP_Key3Left;
 8009090:	4b06      	ldr	r3, [pc, #24]	; (80090ac <CRYP_KeyInit+0x54>)
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	6992      	ldr	r2, [r2, #24]
 8009096:	639a      	str	r2, [r3, #56]	; 0x38
  CRYP->K3RR = CRYP_KeyInitStruct->CRYP_Key3Right;
 8009098:	4b04      	ldr	r3, [pc, #16]	; (80090ac <CRYP_KeyInit+0x54>)
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	69d2      	ldr	r2, [r2, #28]
 800909e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80090a0:	370c      	adds	r7, #12
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr
 80090aa:	bf00      	nop
 80090ac:	50060000 	.word	0x50060000

080090b0 <CRYP_KeyStructInit>:
  * @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void CRYP_KeyStructInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  CRYP_KeyInitStruct->CRYP_Key0Left  = 0;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2200      	movs	r2, #0
 80090bc:	601a      	str	r2, [r3, #0]
  CRYP_KeyInitStruct->CRYP_Key0Right = 0;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2200      	movs	r2, #0
 80090c2:	605a      	str	r2, [r3, #4]
  CRYP_KeyInitStruct->CRYP_Key1Left  = 0;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	609a      	str	r2, [r3, #8]
  CRYP_KeyInitStruct->CRYP_Key1Right = 0;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	60da      	str	r2, [r3, #12]
  CRYP_KeyInitStruct->CRYP_Key2Left  = 0;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	611a      	str	r2, [r3, #16]
  CRYP_KeyInitStruct->CRYP_Key2Right = 0;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2200      	movs	r2, #0
 80090da:	615a      	str	r2, [r3, #20]
  CRYP_KeyInitStruct->CRYP_Key3Left  = 0;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	619a      	str	r2, [r3, #24]
  CRYP_KeyInitStruct->CRYP_Key3Right = 0;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2200      	movs	r2, #0
 80090e6:	61da      	str	r2, [r3, #28]
}
 80090e8:	370c      	adds	r7, #12
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop

080090f4 <CRYP_IVInit>:
  * @param  CRYP_IVInitStruct: pointer to a CRYP_IVInitTypeDef structure that contains
  *         the configuration information for the CRYP Initialization Vectors(IV).
  * @retval None
  */
void CRYP_IVInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  CRYP->IV0LR = CRYP_IVInitStruct->CRYP_IV0Left;
 80090fc:	4b0a      	ldr	r3, [pc, #40]	; (8009128 <CRYP_IVInit+0x34>)
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	6812      	ldr	r2, [r2, #0]
 8009102:	641a      	str	r2, [r3, #64]	; 0x40
  CRYP->IV0RR = CRYP_IVInitStruct->CRYP_IV0Right;
 8009104:	4b08      	ldr	r3, [pc, #32]	; (8009128 <CRYP_IVInit+0x34>)
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	6852      	ldr	r2, [r2, #4]
 800910a:	645a      	str	r2, [r3, #68]	; 0x44
  CRYP->IV1LR = CRYP_IVInitStruct->CRYP_IV1Left;
 800910c:	4b06      	ldr	r3, [pc, #24]	; (8009128 <CRYP_IVInit+0x34>)
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	6892      	ldr	r2, [r2, #8]
 8009112:	649a      	str	r2, [r3, #72]	; 0x48
  CRYP->IV1RR = CRYP_IVInitStruct->CRYP_IV1Right;
 8009114:	4b04      	ldr	r3, [pc, #16]	; (8009128 <CRYP_IVInit+0x34>)
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	68d2      	ldr	r2, [r2, #12]
 800911a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800911c:	370c      	adds	r7, #12
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr
 8009126:	bf00      	nop
 8009128:	50060000 	.word	0x50060000

0800912c <CRYP_IVStructInit>:
  * @param  CRYP_IVInitStruct: pointer to a CRYP_IVInitTypeDef Initialization 
  *         Vectors(IV) structure which will be initialized.
  * @retval None
  */
void CRYP_IVStructInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  CRYP_IVInitStruct->CRYP_IV0Left  = 0;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	601a      	str	r2, [r3, #0]
  CRYP_IVInitStruct->CRYP_IV0Right = 0;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2200      	movs	r2, #0
 800913e:	605a      	str	r2, [r3, #4]
  CRYP_IVInitStruct->CRYP_IV1Left  = 0;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	609a      	str	r2, [r3, #8]
  CRYP_IVInitStruct->CRYP_IV1Right = 0;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2200      	movs	r2, #0
 800914a:	60da      	str	r2, [r3, #12]
}
 800914c:	370c      	adds	r7, #12
 800914e:	46bd      	mov	sp, r7
 8009150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009154:	4770      	bx	lr
 8009156:	bf00      	nop

08009158 <CRYP_PhaseConfig>:
  *            @arg CRYP_Phase_Payload: Payload phase
  *            @arg CRYP_Phase_Final: Final phase 
  * @retval None
  */
void CRYP_PhaseConfig(uint32_t CRYP_Phase)
{ uint32_t tempcr = 0;
 8009158:	b480      	push	{r7}
 800915a:	b085      	sub	sp, #20
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	2300      	movs	r3, #0
 8009162:	60fb      	str	r3, [r7, #12]

  /* Check the parameter */
  assert_param(IS_CRYP_PHASE(CRYP_Phase));

  /* Get the CR register */
  tempcr = CRYP->CR;
 8009164:	4b09      	ldr	r3, [pc, #36]	; (800918c <CRYP_PhaseConfig+0x34>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	60fb      	str	r3, [r7, #12]
  
  /* Reset the phase configuration bits: GCMP_CCMPH */
  tempcr &= (uint32_t)(~CRYP_CR_GCM_CCMPH);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009170:	60fb      	str	r3, [r7, #12]
  /* Set the selected phase */
  tempcr |= (uint32_t)CRYP_Phase;
 8009172:	68fa      	ldr	r2, [r7, #12]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	4313      	orrs	r3, r2
 8009178:	60fb      	str	r3, [r7, #12]

  /* Set the CR register */ 
  CRYP->CR = tempcr;    
 800917a:	4b04      	ldr	r3, [pc, #16]	; (800918c <CRYP_PhaseConfig+0x34>)
 800917c:	68fa      	ldr	r2, [r7, #12]
 800917e:	601a      	str	r2, [r3, #0]
}
 8009180:	3714      	adds	r7, #20
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr
 800918a:	bf00      	nop
 800918c:	50060000 	.word	0x50060000

08009190 <CRYP_FIFOFlush>:
  * @note   The FIFOs must be flushed only when BUSY flag is reset.  
  * @param  None
  * @retval None
  */
void CRYP_FIFOFlush(void)
{
 8009190:	b480      	push	{r7}
 8009192:	af00      	add	r7, sp, #0
  /* Reset the read and write pointers of the FIFOs */
  CRYP->CR |= CRYP_CR_FFLUSH;
 8009194:	4b04      	ldr	r3, [pc, #16]	; (80091a8 <CRYP_FIFOFlush+0x18>)
 8009196:	4a04      	ldr	r2, [pc, #16]	; (80091a8 <CRYP_FIFOFlush+0x18>)
 8009198:	6812      	ldr	r2, [r2, #0]
 800919a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800919e:	601a      	str	r2, [r3, #0]
}
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr
 80091a8:	50060000 	.word	0x50060000

080091ac <CRYP_Cmd>:
  * @param  NewState: new state of the CRYP peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_Cmd(FunctionalState NewState)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	4603      	mov	r3, r0
 80091b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80091b6:	79fb      	ldrb	r3, [r7, #7]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d006      	beq.n	80091ca <CRYP_Cmd+0x1e>
  {
    /* Enable the Cryptographic processor */
    CRYP->CR |= CRYP_CR_CRYPEN;
 80091bc:	4b08      	ldr	r3, [pc, #32]	; (80091e0 <CRYP_Cmd+0x34>)
 80091be:	4a08      	ldr	r2, [pc, #32]	; (80091e0 <CRYP_Cmd+0x34>)
 80091c0:	6812      	ldr	r2, [r2, #0]
 80091c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80091c6:	601a      	str	r2, [r3, #0]
 80091c8:	e005      	b.n	80091d6 <CRYP_Cmd+0x2a>
  }
  else
  {
    /* Disable the Cryptographic processor */
    CRYP->CR &= ~CRYP_CR_CRYPEN;
 80091ca:	4b05      	ldr	r3, [pc, #20]	; (80091e0 <CRYP_Cmd+0x34>)
 80091cc:	4a04      	ldr	r2, [pc, #16]	; (80091e0 <CRYP_Cmd+0x34>)
 80091ce:	6812      	ldr	r2, [r2, #0]
 80091d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80091d4:	601a      	str	r2, [r3, #0]
  }
}
 80091d6:	370c      	adds	r7, #12
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr
 80091e0:	50060000 	.word	0x50060000

080091e4 <CRYP_DataIn>:
  *         the FIFO must be flushed (using CRYP_FIFOFlush() function).  
  * @param  Data: data to write in Data Input register
  * @retval None
  */
void CRYP_DataIn(uint32_t Data)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b083      	sub	sp, #12
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  CRYP->DR = Data;
 80091ec:	4b03      	ldr	r3, [pc, #12]	; (80091fc <CRYP_DataIn+0x18>)
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	609a      	str	r2, [r3, #8]
}
 80091f2:	370c      	adds	r7, #12
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr
 80091fc:	50060000 	.word	0x50060000

08009200 <CRYP_DataOut>:
  * @brief  Returns the last data entered into the output FIFO.
  * @param  None
  * @retval Last data entered into the output FIFO.
  */
uint32_t CRYP_DataOut(void)
{
 8009200:	b480      	push	{r7}
 8009202:	af00      	add	r7, sp, #0
  return CRYP->DOUT;
 8009204:	4b03      	ldr	r3, [pc, #12]	; (8009214 <CRYP_DataOut+0x14>)
 8009206:	68db      	ldr	r3, [r3, #12]
}
 8009208:	4618      	mov	r0, r3
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr
 8009212:	bf00      	nop
 8009214:	50060000 	.word	0x50060000

08009218 <CRYP_SaveContext>:
  *         contains the configuration information for the CRYP Keys.  
  * @retval None
  */
ErrorStatus CRYP_SaveContext(CRYP_Context* CRYP_ContextSave,
                             CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 8009218:	b480      	push	{r7}
 800921a:	b087      	sub	sp, #28
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
  __IO uint32_t timeout = 0;
 8009222:	2300      	movs	r3, #0
 8009224:	60bb      	str	r3, [r7, #8]
  uint32_t ckeckmask = 0, bitstatus;    
 8009226:	2300      	movs	r3, #0
 8009228:	617b      	str	r3, [r7, #20]
  ErrorStatus status = ERROR;
 800922a:	2300      	movs	r3, #0
 800922c:	74fb      	strb	r3, [r7, #19]

  /* Stop DMA transfers on the IN FIFO by clearing the DIEN bit in the CRYP_DMACR */
  CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DIEN;
 800922e:	4b5c      	ldr	r3, [pc, #368]	; (80093a0 <CRYP_SaveContext+0x188>)
 8009230:	4a5b      	ldr	r2, [pc, #364]	; (80093a0 <CRYP_SaveContext+0x188>)
 8009232:	6912      	ldr	r2, [r2, #16]
 8009234:	f022 0201 	bic.w	r2, r2, #1
 8009238:	611a      	str	r2, [r3, #16]
    
  /* Wait until both the IN and OUT FIFOs are empty  
    (IFEM=1 and OFNE=0 in the CRYP_SR register) and the 
     BUSY bit is cleared. */

  if ((CRYP->CR & (uint32_t)(CRYP_CR_ALGOMODE_TDES_ECB | CRYP_CR_ALGOMODE_TDES_CBC)) != (uint32_t)0 )/* TDES */
 800923a:	4b59      	ldr	r3, [pc, #356]	; (80093a0 <CRYP_SaveContext+0x188>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f003 0308 	and.w	r3, r3, #8
 8009242:	2b00      	cmp	r3, #0
 8009244:	d002      	beq.n	800924c <CRYP_SaveContext+0x34>
  { 
    ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY ;
 8009246:	2311      	movs	r3, #17
 8009248:	617b      	str	r3, [r7, #20]
 800924a:	e001      	b.n	8009250 <CRYP_SaveContext+0x38>
  }
  else /* AES or DES */
  {
    ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY | CRYP_SR_OFNE;
 800924c:	2315      	movs	r3, #21
 800924e:	617b      	str	r3, [r7, #20]
  }           
   
  do 
  {
    bitstatus = CRYP->SR & ckeckmask;
 8009250:	4b53      	ldr	r3, [pc, #332]	; (80093a0 <CRYP_SaveContext+0x188>)
 8009252:	685a      	ldr	r2, [r3, #4]
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	4013      	ands	r3, r2
 8009258:	60fb      	str	r3, [r7, #12]
    timeout++;
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	3301      	adds	r3, #1
 800925e:	60bb      	str	r3, [r7, #8]
  }
  while ((timeout != MAX_TIMEOUT) && (bitstatus != CRYP_SR_IFEM));
 8009260:	68ba      	ldr	r2, [r7, #8]
 8009262:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009266:	429a      	cmp	r2, r3
 8009268:	d002      	beq.n	8009270 <CRYP_SaveContext+0x58>
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2b01      	cmp	r3, #1
 800926e:	d1ef      	bne.n	8009250 <CRYP_SaveContext+0x38>
     
  if ((CRYP->SR & ckeckmask) != CRYP_SR_IFEM)
 8009270:	4b4b      	ldr	r3, [pc, #300]	; (80093a0 <CRYP_SaveContext+0x188>)
 8009272:	685a      	ldr	r2, [r3, #4]
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	4013      	ands	r3, r2
 8009278:	2b01      	cmp	r3, #1
 800927a:	d002      	beq.n	8009282 <CRYP_SaveContext+0x6a>
  {
    status = ERROR;
 800927c:	2300      	movs	r3, #0
 800927e:	74fb      	strb	r3, [r7, #19]
 8009280:	e087      	b.n	8009392 <CRYP_SaveContext+0x17a>
  {      
    /* Stop DMA transfers on the OUT FIFO by 
       - writing the DOEN bit to 0 in the CRYP_DMACR register 
       - and clear the CRYPEN bit. */

    CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DOEN;
 8009282:	4b47      	ldr	r3, [pc, #284]	; (80093a0 <CRYP_SaveContext+0x188>)
 8009284:	4a46      	ldr	r2, [pc, #280]	; (80093a0 <CRYP_SaveContext+0x188>)
 8009286:	6912      	ldr	r2, [r2, #16]
 8009288:	f022 0202 	bic.w	r2, r2, #2
 800928c:	611a      	str	r2, [r3, #16]
    CRYP->CR &= ~(uint32_t)CRYP_CR_CRYPEN;
 800928e:	4b44      	ldr	r3, [pc, #272]	; (80093a0 <CRYP_SaveContext+0x188>)
 8009290:	4a43      	ldr	r2, [pc, #268]	; (80093a0 <CRYP_SaveContext+0x188>)
 8009292:	6812      	ldr	r2, [r2, #0]
 8009294:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009298:	601a      	str	r2, [r3, #0]

    /* Save the current configuration (bit 19, bit[17:16] and bits [9:2] in the CRYP_CR register) */
    CRYP_ContextSave->CR_CurrentConfig  = CRYP->CR & (CRYP_CR_GCM_CCMPH |
 800929a:	4b41      	ldr	r3, [pc, #260]	; (80093a0 <CRYP_SaveContext+0x188>)
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	4b41      	ldr	r3, [pc, #260]	; (80093a4 <CRYP_SaveContext+0x18c>)
 80092a0:	4013      	ands	r3, r2
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	6013      	str	r3, [r2, #0]
                                                      CRYP_CR_DATATYPE |
                                                      CRYP_CR_ALGOMODE |
                                                      CRYP_CR_ALGODIR);

    /* and, if not in ECB mode, the initialization vectors. */
    CRYP_ContextSave->CRYP_IV0LR = CRYP->IV0LR;
 80092a6:	4b3e      	ldr	r3, [pc, #248]	; (80093a0 <CRYP_SaveContext+0x188>)
 80092a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	605a      	str	r2, [r3, #4]
    CRYP_ContextSave->CRYP_IV0RR = CRYP->IV0RR;
 80092ae:	4b3c      	ldr	r3, [pc, #240]	; (80093a0 <CRYP_SaveContext+0x188>)
 80092b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	609a      	str	r2, [r3, #8]
    CRYP_ContextSave->CRYP_IV1LR = CRYP->IV1LR;
 80092b6:	4b3a      	ldr	r3, [pc, #232]	; (80093a0 <CRYP_SaveContext+0x188>)
 80092b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	60da      	str	r2, [r3, #12]
    CRYP_ContextSave->CRYP_IV1RR = CRYP->IV1RR;
 80092be:	4b38      	ldr	r3, [pc, #224]	; (80093a0 <CRYP_SaveContext+0x188>)
 80092c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	611a      	str	r2, [r3, #16]

    /* save The key value */
    CRYP_ContextSave->CRYP_K0LR = CRYP_KeyInitStruct->CRYP_Key0Left; 
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	615a      	str	r2, [r3, #20]
    CRYP_ContextSave->CRYP_K0RR = CRYP_KeyInitStruct->CRYP_Key0Right; 
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	685a      	ldr	r2, [r3, #4]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	619a      	str	r2, [r3, #24]
    CRYP_ContextSave->CRYP_K1LR = CRYP_KeyInitStruct->CRYP_Key1Left; 
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	689a      	ldr	r2, [r3, #8]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	61da      	str	r2, [r3, #28]
    CRYP_ContextSave->CRYP_K1RR = CRYP_KeyInitStruct->CRYP_Key1Right; 
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	68da      	ldr	r2, [r3, #12]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	621a      	str	r2, [r3, #32]
    CRYP_ContextSave->CRYP_K2LR = CRYP_KeyInitStruct->CRYP_Key2Left; 
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	691a      	ldr	r2, [r3, #16]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	625a      	str	r2, [r3, #36]	; 0x24
    CRYP_ContextSave->CRYP_K2RR = CRYP_KeyInitStruct->CRYP_Key2Right; 
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	695a      	ldr	r2, [r3, #20]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	629a      	str	r2, [r3, #40]	; 0x28
    CRYP_ContextSave->CRYP_K3LR = CRYP_KeyInitStruct->CRYP_Key3Left; 
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	699a      	ldr	r2, [r3, #24]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	62da      	str	r2, [r3, #44]	; 0x2c
    CRYP_ContextSave->CRYP_K3RR = CRYP_KeyInitStruct->CRYP_Key3Right; 
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	69da      	ldr	r2, [r3, #28]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	631a      	str	r2, [r3, #48]	; 0x30

    /* Save the content of context swap registers */
    CRYP_ContextSave->CRYP_CSGCMCCMR[0] = CRYP->CSGCMCCM0R;
 8009306:	4b26      	ldr	r3, [pc, #152]	; (80093a0 <CRYP_SaveContext+0x188>)
 8009308:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	635a      	str	r2, [r3, #52]	; 0x34
    CRYP_ContextSave->CRYP_CSGCMCCMR[1] = CRYP->CSGCMCCM1R;
 800930e:	4b24      	ldr	r3, [pc, #144]	; (80093a0 <CRYP_SaveContext+0x188>)
 8009310:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	639a      	str	r2, [r3, #56]	; 0x38
    CRYP_ContextSave->CRYP_CSGCMCCMR[2] = CRYP->CSGCMCCM2R;
 8009316:	4b22      	ldr	r3, [pc, #136]	; (80093a0 <CRYP_SaveContext+0x188>)
 8009318:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	63da      	str	r2, [r3, #60]	; 0x3c
    CRYP_ContextSave->CRYP_CSGCMCCMR[3] = CRYP->CSGCMCCM3R;
 800931e:	4b20      	ldr	r3, [pc, #128]	; (80093a0 <CRYP_SaveContext+0x188>)
 8009320:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	641a      	str	r2, [r3, #64]	; 0x40
    CRYP_ContextSave->CRYP_CSGCMCCMR[4] = CRYP->CSGCMCCM4R;
 8009326:	4b1e      	ldr	r3, [pc, #120]	; (80093a0 <CRYP_SaveContext+0x188>)
 8009328:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	645a      	str	r2, [r3, #68]	; 0x44
    CRYP_ContextSave->CRYP_CSGCMCCMR[5] = CRYP->CSGCMCCM5R;
 800932e:	4b1c      	ldr	r3, [pc, #112]	; (80093a0 <CRYP_SaveContext+0x188>)
 8009330:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	649a      	str	r2, [r3, #72]	; 0x48
    CRYP_ContextSave->CRYP_CSGCMCCMR[6] = CRYP->CSGCMCCM6R;
 8009336:	4b1a      	ldr	r3, [pc, #104]	; (80093a0 <CRYP_SaveContext+0x188>)
 8009338:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	64da      	str	r2, [r3, #76]	; 0x4c
    CRYP_ContextSave->CRYP_CSGCMCCMR[7] = CRYP->CSGCMCCM7R;
 800933e:	4b18      	ldr	r3, [pc, #96]	; (80093a0 <CRYP_SaveContext+0x188>)
 8009340:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	651a      	str	r2, [r3, #80]	; 0x50
    
    CRYP_ContextSave->CRYP_CSGCMR[0] = CRYP->CSGCM0R;
 8009346:	4b16      	ldr	r3, [pc, #88]	; (80093a0 <CRYP_SaveContext+0x188>)
 8009348:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	655a      	str	r2, [r3, #84]	; 0x54
    CRYP_ContextSave->CRYP_CSGCMR[1] = CRYP->CSGCM1R;
 800934e:	4b14      	ldr	r3, [pc, #80]	; (80093a0 <CRYP_SaveContext+0x188>)
 8009350:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	659a      	str	r2, [r3, #88]	; 0x58
    CRYP_ContextSave->CRYP_CSGCMR[2] = CRYP->CSGCM2R;
 8009356:	4b12      	ldr	r3, [pc, #72]	; (80093a0 <CRYP_SaveContext+0x188>)
 8009358:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	65da      	str	r2, [r3, #92]	; 0x5c
    CRYP_ContextSave->CRYP_CSGCMR[3] = CRYP->CSGCM3R;
 800935e:	4b10      	ldr	r3, [pc, #64]	; (80093a0 <CRYP_SaveContext+0x188>)
 8009360:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	661a      	str	r2, [r3, #96]	; 0x60
    CRYP_ContextSave->CRYP_CSGCMR[4] = CRYP->CSGCM4R;
 8009366:	4b0e      	ldr	r3, [pc, #56]	; (80093a0 <CRYP_SaveContext+0x188>)
 8009368:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	665a      	str	r2, [r3, #100]	; 0x64
    CRYP_ContextSave->CRYP_CSGCMR[5] = CRYP->CSGCM5R;
 8009370:	4b0b      	ldr	r3, [pc, #44]	; (80093a0 <CRYP_SaveContext+0x188>)
 8009372:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	669a      	str	r2, [r3, #104]	; 0x68
    CRYP_ContextSave->CRYP_CSGCMR[6] = CRYP->CSGCM6R;
 800937a:	4b09      	ldr	r3, [pc, #36]	; (80093a0 <CRYP_SaveContext+0x188>)
 800937c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	66da      	str	r2, [r3, #108]	; 0x6c
    CRYP_ContextSave->CRYP_CSGCMR[7] = CRYP->CSGCM7R;
 8009384:	4b06      	ldr	r3, [pc, #24]	; (80093a0 <CRYP_SaveContext+0x188>)
 8009386:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	671a      	str	r2, [r3, #112]	; 0x70
    
   /* When needed, save the DMA status (pointers for IN and OUT messages, 
      number of remaining bytes, etc.) */
     
    status = SUCCESS;
 800938e:	2301      	movs	r3, #1
 8009390:	74fb      	strb	r3, [r7, #19]
  }

   return status;
 8009392:	7cfb      	ldrb	r3, [r7, #19]
}
 8009394:	4618      	mov	r0, r3
 8009396:	371c      	adds	r7, #28
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr
 80093a0:	50060000 	.word	0x50060000
 80093a4:	000b03fc 	.word	0x000b03fc

080093a8 <CRYP_RestoreContext>:
  * @note   The data that were saved during context saving must be rewrited into
  *         the IN FIFO.
  * @retval None
  */
void CRYP_RestoreContext(CRYP_Context* CRYP_ContextRestore)  
{
 80093a8:	b480      	push	{r7}
 80093aa:	b083      	sub	sp, #12
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]

  /* Configure the processor with the saved configuration */
  CRYP->CR = CRYP_ContextRestore->CR_CurrentConfig;
 80093b0:	4b41      	ldr	r3, [pc, #260]	; (80094b8 <CRYP_RestoreContext+0x110>)
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	6812      	ldr	r2, [r2, #0]
 80093b6:	601a      	str	r2, [r3, #0]

  /* restore The key value */
  CRYP->K0LR = CRYP_ContextRestore->CRYP_K0LR; 
 80093b8:	4b3f      	ldr	r3, [pc, #252]	; (80094b8 <CRYP_RestoreContext+0x110>)
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	6952      	ldr	r2, [r2, #20]
 80093be:	621a      	str	r2, [r3, #32]
  CRYP->K0RR = CRYP_ContextRestore->CRYP_K0RR;
 80093c0:	4b3d      	ldr	r3, [pc, #244]	; (80094b8 <CRYP_RestoreContext+0x110>)
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	6992      	ldr	r2, [r2, #24]
 80093c6:	625a      	str	r2, [r3, #36]	; 0x24
  CRYP->K1LR = CRYP_ContextRestore->CRYP_K1LR;
 80093c8:	4b3b      	ldr	r3, [pc, #236]	; (80094b8 <CRYP_RestoreContext+0x110>)
 80093ca:	687a      	ldr	r2, [r7, #4]
 80093cc:	69d2      	ldr	r2, [r2, #28]
 80093ce:	629a      	str	r2, [r3, #40]	; 0x28
  CRYP->K1RR = CRYP_ContextRestore->CRYP_K1RR;
 80093d0:	4b39      	ldr	r3, [pc, #228]	; (80094b8 <CRYP_RestoreContext+0x110>)
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	6a12      	ldr	r2, [r2, #32]
 80093d6:	62da      	str	r2, [r3, #44]	; 0x2c
  CRYP->K2LR = CRYP_ContextRestore->CRYP_K2LR;
 80093d8:	4b37      	ldr	r3, [pc, #220]	; (80094b8 <CRYP_RestoreContext+0x110>)
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80093de:	631a      	str	r2, [r3, #48]	; 0x30
  CRYP->K2RR = CRYP_ContextRestore->CRYP_K2RR;
 80093e0:	4b35      	ldr	r3, [pc, #212]	; (80094b8 <CRYP_RestoreContext+0x110>)
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80093e6:	635a      	str	r2, [r3, #52]	; 0x34
  CRYP->K3LR = CRYP_ContextRestore->CRYP_K3LR;
 80093e8:	4b33      	ldr	r3, [pc, #204]	; (80094b8 <CRYP_RestoreContext+0x110>)
 80093ea:	687a      	ldr	r2, [r7, #4]
 80093ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80093ee:	639a      	str	r2, [r3, #56]	; 0x38
  CRYP->K3RR = CRYP_ContextRestore->CRYP_K3RR;
 80093f0:	4b31      	ldr	r3, [pc, #196]	; (80094b8 <CRYP_RestoreContext+0x110>)
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80093f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* and the initialization vectors. */
  CRYP->IV0LR = CRYP_ContextRestore->CRYP_IV0LR;
 80093f8:	4b2f      	ldr	r3, [pc, #188]	; (80094b8 <CRYP_RestoreContext+0x110>)
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	6852      	ldr	r2, [r2, #4]
 80093fe:	641a      	str	r2, [r3, #64]	; 0x40
  CRYP->IV0RR = CRYP_ContextRestore->CRYP_IV0RR;
 8009400:	4b2d      	ldr	r3, [pc, #180]	; (80094b8 <CRYP_RestoreContext+0x110>)
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	6892      	ldr	r2, [r2, #8]
 8009406:	645a      	str	r2, [r3, #68]	; 0x44
  CRYP->IV1LR = CRYP_ContextRestore->CRYP_IV1LR;
 8009408:	4b2b      	ldr	r3, [pc, #172]	; (80094b8 <CRYP_RestoreContext+0x110>)
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	68d2      	ldr	r2, [r2, #12]
 800940e:	649a      	str	r2, [r3, #72]	; 0x48
  CRYP->IV1RR = CRYP_ContextRestore->CRYP_IV1RR;
 8009410:	4b29      	ldr	r3, [pc, #164]	; (80094b8 <CRYP_RestoreContext+0x110>)
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	6912      	ldr	r2, [r2, #16]
 8009416:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Restore the content of context swap registers */
  CRYP->CSGCMCCM0R = CRYP_ContextRestore->CRYP_CSGCMCCMR[0];
 8009418:	4b27      	ldr	r3, [pc, #156]	; (80094b8 <CRYP_RestoreContext+0x110>)
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800941e:	651a      	str	r2, [r3, #80]	; 0x50
  CRYP->CSGCMCCM1R = CRYP_ContextRestore->CRYP_CSGCMCCMR[1];
 8009420:	4b25      	ldr	r3, [pc, #148]	; (80094b8 <CRYP_RestoreContext+0x110>)
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009426:	655a      	str	r2, [r3, #84]	; 0x54
  CRYP->CSGCMCCM2R = CRYP_ContextRestore->CRYP_CSGCMCCMR[2];
 8009428:	4b23      	ldr	r3, [pc, #140]	; (80094b8 <CRYP_RestoreContext+0x110>)
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800942e:	659a      	str	r2, [r3, #88]	; 0x58
  CRYP->CSGCMCCM3R = CRYP_ContextRestore->CRYP_CSGCMCCMR[3];
 8009430:	4b21      	ldr	r3, [pc, #132]	; (80094b8 <CRYP_RestoreContext+0x110>)
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009436:	65da      	str	r2, [r3, #92]	; 0x5c
  CRYP->CSGCMCCM4R = CRYP_ContextRestore->CRYP_CSGCMCCMR[4];
 8009438:	4b1f      	ldr	r3, [pc, #124]	; (80094b8 <CRYP_RestoreContext+0x110>)
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800943e:	661a      	str	r2, [r3, #96]	; 0x60
  CRYP->CSGCMCCM5R = CRYP_ContextRestore->CRYP_CSGCMCCMR[5];
 8009440:	4b1d      	ldr	r3, [pc, #116]	; (80094b8 <CRYP_RestoreContext+0x110>)
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009446:	665a      	str	r2, [r3, #100]	; 0x64
  CRYP->CSGCMCCM6R = CRYP_ContextRestore->CRYP_CSGCMCCMR[6];
 8009448:	4b1b      	ldr	r3, [pc, #108]	; (80094b8 <CRYP_RestoreContext+0x110>)
 800944a:	687a      	ldr	r2, [r7, #4]
 800944c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800944e:	669a      	str	r2, [r3, #104]	; 0x68
  CRYP->CSGCMCCM7R = CRYP_ContextRestore->CRYP_CSGCMCCMR[7];
 8009450:	4b19      	ldr	r3, [pc, #100]	; (80094b8 <CRYP_RestoreContext+0x110>)
 8009452:	687a      	ldr	r2, [r7, #4]
 8009454:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009456:	66da      	str	r2, [r3, #108]	; 0x6c
  
  CRYP->CSGCM0R = CRYP_ContextRestore->CRYP_CSGCMR[0];
 8009458:	4b17      	ldr	r3, [pc, #92]	; (80094b8 <CRYP_RestoreContext+0x110>)
 800945a:	687a      	ldr	r2, [r7, #4]
 800945c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800945e:	671a      	str	r2, [r3, #112]	; 0x70
  CRYP->CSGCM1R = CRYP_ContextRestore->CRYP_CSGCMR[1];
 8009460:	4b15      	ldr	r3, [pc, #84]	; (80094b8 <CRYP_RestoreContext+0x110>)
 8009462:	687a      	ldr	r2, [r7, #4]
 8009464:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009466:	675a      	str	r2, [r3, #116]	; 0x74
  CRYP->CSGCM2R = CRYP_ContextRestore->CRYP_CSGCMR[2];
 8009468:	4b13      	ldr	r3, [pc, #76]	; (80094b8 <CRYP_RestoreContext+0x110>)
 800946a:	687a      	ldr	r2, [r7, #4]
 800946c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800946e:	679a      	str	r2, [r3, #120]	; 0x78
  CRYP->CSGCM3R = CRYP_ContextRestore->CRYP_CSGCMR[3];
 8009470:	4b11      	ldr	r3, [pc, #68]	; (80094b8 <CRYP_RestoreContext+0x110>)
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8009476:	67da      	str	r2, [r3, #124]	; 0x7c
  CRYP->CSGCM4R = CRYP_ContextRestore->CRYP_CSGCMR[4];
 8009478:	4b0f      	ldr	r3, [pc, #60]	; (80094b8 <CRYP_RestoreContext+0x110>)
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800947e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  CRYP->CSGCM5R = CRYP_ContextRestore->CRYP_CSGCMR[5];
 8009482:	4b0d      	ldr	r3, [pc, #52]	; (80094b8 <CRYP_RestoreContext+0x110>)
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009488:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  CRYP->CSGCM6R = CRYP_ContextRestore->CRYP_CSGCMR[6];
 800948c:	4b0a      	ldr	r3, [pc, #40]	; (80094b8 <CRYP_RestoreContext+0x110>)
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009492:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  CRYP->CSGCM7R = CRYP_ContextRestore->CRYP_CSGCMR[7];
 8009496:	4b08      	ldr	r3, [pc, #32]	; (80094b8 <CRYP_RestoreContext+0x110>)
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800949c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  
  /* Enable the cryptographic processor */
  CRYP->CR |= CRYP_CR_CRYPEN;
 80094a0:	4b05      	ldr	r3, [pc, #20]	; (80094b8 <CRYP_RestoreContext+0x110>)
 80094a2:	4a05      	ldr	r2, [pc, #20]	; (80094b8 <CRYP_RestoreContext+0x110>)
 80094a4:	6812      	ldr	r2, [r2, #0]
 80094a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80094aa:	601a      	str	r2, [r3, #0]
}
 80094ac:	370c      	adds	r7, #12
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr
 80094b6:	bf00      	nop
 80094b8:	50060000 	.word	0x50060000

080094bc <CRYP_DMACmd>:
  * @param  NewState: new state of the selected CRYP DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_DMACmd(uint8_t CRYP_DMAReq, FunctionalState NewState)
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	4602      	mov	r2, r0
 80094c4:	460b      	mov	r3, r1
 80094c6:	71fa      	strb	r2, [r7, #7]
 80094c8:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_CRYP_DMAREQ(CRYP_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80094ca:	79bb      	ldrb	r3, [r7, #6]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d006      	beq.n	80094de <CRYP_DMACmd+0x22>
  {
    /* Enable the selected CRYP DMA request */
    CRYP->DMACR |= CRYP_DMAReq;
 80094d0:	4b09      	ldr	r3, [pc, #36]	; (80094f8 <CRYP_DMACmd+0x3c>)
 80094d2:	4a09      	ldr	r2, [pc, #36]	; (80094f8 <CRYP_DMACmd+0x3c>)
 80094d4:	6911      	ldr	r1, [r2, #16]
 80094d6:	79fa      	ldrb	r2, [r7, #7]
 80094d8:	430a      	orrs	r2, r1
 80094da:	611a      	str	r2, [r3, #16]
 80094dc:	e007      	b.n	80094ee <CRYP_DMACmd+0x32>
  }
  else
  {
    /* Disable the selected CRYP DMA request */
    CRYP->DMACR &= (uint8_t)~CRYP_DMAReq;
 80094de:	4b06      	ldr	r3, [pc, #24]	; (80094f8 <CRYP_DMACmd+0x3c>)
 80094e0:	4a05      	ldr	r2, [pc, #20]	; (80094f8 <CRYP_DMACmd+0x3c>)
 80094e2:	6911      	ldr	r1, [r2, #16]
 80094e4:	79fa      	ldrb	r2, [r7, #7]
 80094e6:	43d2      	mvns	r2, r2
 80094e8:	b2d2      	uxtb	r2, r2
 80094ea:	400a      	ands	r2, r1
 80094ec:	611a      	str	r2, [r3, #16]
  }
}
 80094ee:	370c      	adds	r7, #12
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr
 80094f8:	50060000 	.word	0x50060000

080094fc <CRYP_ITConfig>:
  * @param  NewState: new state of the specified CRYP interrupt.
  *           This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_ITConfig(uint8_t CRYP_IT, FunctionalState NewState)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b083      	sub	sp, #12
 8009500:	af00      	add	r7, sp, #0
 8009502:	4602      	mov	r2, r0
 8009504:	460b      	mov	r3, r1
 8009506:	71fa      	strb	r2, [r7, #7]
 8009508:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_CRYP_CONFIG_IT(CRYP_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800950a:	79bb      	ldrb	r3, [r7, #6]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d006      	beq.n	800951e <CRYP_ITConfig+0x22>
  {
    /* Enable the selected CRYP interrupt */
    CRYP->IMSCR |= CRYP_IT;
 8009510:	4b09      	ldr	r3, [pc, #36]	; (8009538 <CRYP_ITConfig+0x3c>)
 8009512:	4a09      	ldr	r2, [pc, #36]	; (8009538 <CRYP_ITConfig+0x3c>)
 8009514:	6951      	ldr	r1, [r2, #20]
 8009516:	79fa      	ldrb	r2, [r7, #7]
 8009518:	430a      	orrs	r2, r1
 800951a:	615a      	str	r2, [r3, #20]
 800951c:	e007      	b.n	800952e <CRYP_ITConfig+0x32>
  }
  else
  {
    /* Disable the selected CRYP interrupt */
    CRYP->IMSCR &= (uint8_t)~CRYP_IT;
 800951e:	4b06      	ldr	r3, [pc, #24]	; (8009538 <CRYP_ITConfig+0x3c>)
 8009520:	4a05      	ldr	r2, [pc, #20]	; (8009538 <CRYP_ITConfig+0x3c>)
 8009522:	6951      	ldr	r1, [r2, #20]
 8009524:	79fa      	ldrb	r2, [r7, #7]
 8009526:	43d2      	mvns	r2, r2
 8009528:	b2d2      	uxtb	r2, r2
 800952a:	400a      	ands	r2, r1
 800952c:	615a      	str	r2, [r3, #20]
  }
}
 800952e:	370c      	adds	r7, #12
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr
 8009538:	50060000 	.word	0x50060000

0800953c <CRYP_GetITStatus>:
  *            @arg CRYP_IT_INI: Input FIFO interrupt
  *            @arg CRYP_IT_OUTI: Output FIFO interrupt
  * @retval The new state of CRYP_IT (SET or RESET).
  */
ITStatus CRYP_GetITStatus(uint8_t CRYP_IT)
{
 800953c:	b480      	push	{r7}
 800953e:	b085      	sub	sp, #20
 8009540:	af00      	add	r7, sp, #0
 8009542:	4603      	mov	r3, r0
 8009544:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8009546:	2300      	movs	r3, #0
 8009548:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CRYP_GET_IT(CRYP_IT));

  /* Check the status of the specified CRYP interrupt */
  if ((CRYP->MISR &  CRYP_IT) != (uint8_t)RESET)
 800954a:	4b09      	ldr	r3, [pc, #36]	; (8009570 <CRYP_GetITStatus+0x34>)
 800954c:	69da      	ldr	r2, [r3, #28]
 800954e:	79fb      	ldrb	r3, [r7, #7]
 8009550:	4013      	ands	r3, r2
 8009552:	2b00      	cmp	r3, #0
 8009554:	d002      	beq.n	800955c <CRYP_GetITStatus+0x20>
  {
    /* CRYP_IT is set */
    bitstatus = SET;
 8009556:	2301      	movs	r3, #1
 8009558:	73fb      	strb	r3, [r7, #15]
 800955a:	e001      	b.n	8009560 <CRYP_GetITStatus+0x24>
  }
  else
  {
    /* CRYP_IT is reset */
    bitstatus = RESET;
 800955c:	2300      	movs	r3, #0
 800955e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CRYP_IT status */
  return bitstatus;
 8009560:	7bfb      	ldrb	r3, [r7, #15]
}
 8009562:	4618      	mov	r0, r3
 8009564:	3714      	adds	r7, #20
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	50060000 	.word	0x50060000

08009574 <CRYP_GetCmdStatus>:
  * @brief  Returns whether CRYP peripheral is enabled or disabled.
  * @param  none.
  * @retval Current state of the CRYP peripheral (ENABLE or DISABLE).
  */
FunctionalState CRYP_GetCmdStatus(void)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
  FunctionalState state = DISABLE;
 800957a:	2300      	movs	r3, #0
 800957c:	71fb      	strb	r3, [r7, #7]

  if ((CRYP->CR & CRYP_CR_CRYPEN) != 0)
 800957e:	4b09      	ldr	r3, [pc, #36]	; (80095a4 <CRYP_GetCmdStatus+0x30>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009586:	2b00      	cmp	r3, #0
 8009588:	d002      	beq.n	8009590 <CRYP_GetCmdStatus+0x1c>
  {
    /* CRYPEN bit is set */
    state = ENABLE;
 800958a:	2301      	movs	r3, #1
 800958c:	71fb      	strb	r3, [r7, #7]
 800958e:	e001      	b.n	8009594 <CRYP_GetCmdStatus+0x20>
  }
  else
  {
    /* CRYPEN bit is reset */
    state = DISABLE;
 8009590:	2300      	movs	r3, #0
 8009592:	71fb      	strb	r3, [r7, #7]
  }
  return state;
 8009594:	79fb      	ldrb	r3, [r7, #7]
}
 8009596:	4618      	mov	r0, r3
 8009598:	370c      	adds	r7, #12
 800959a:	46bd      	mov	sp, r7
 800959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a0:	4770      	bx	lr
 80095a2:	bf00      	nop
 80095a4:	50060000 	.word	0x50060000

080095a8 <CRYP_GetFlagStatus>:
  *            @arg CRYP_FLAG_OUTRIS: Output FIFO raw interrupt flag.
  *            @arg CRYP_FLAG_INRIS: Input FIFO raw interrupt flag.
  * @retval The new state of CRYP_FLAG (SET or RESET).
  */
FlagStatus CRYP_GetFlagStatus(uint8_t CRYP_FLAG)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	4603      	mov	r3, r0
 80095b0:	71fb      	strb	r3, [r7, #7]
  FlagStatus bitstatus = RESET;
 80095b2:	2300      	movs	r3, #0
 80095b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tempreg = 0;
 80095b6:	2300      	movs	r3, #0
 80095b8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_CRYP_GET_FLAG(CRYP_FLAG));

  /* check if the FLAG is in RISR register */
  if ((CRYP_FLAG & FLAG_MASK) != 0x00) 
 80095ba:	79fb      	ldrb	r3, [r7, #7]
 80095bc:	f003 0320 	and.w	r3, r3, #32
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d003      	beq.n	80095cc <CRYP_GetFlagStatus+0x24>
  {
    tempreg = CRYP->RISR;
 80095c4:	4b0b      	ldr	r3, [pc, #44]	; (80095f4 <CRYP_GetFlagStatus+0x4c>)
 80095c6:	699b      	ldr	r3, [r3, #24]
 80095c8:	60bb      	str	r3, [r7, #8]
 80095ca:	e002      	b.n	80095d2 <CRYP_GetFlagStatus+0x2a>
  }
  else  /* The FLAG is in SR register */
  {
    tempreg = CRYP->SR;
 80095cc:	4b09      	ldr	r3, [pc, #36]	; (80095f4 <CRYP_GetFlagStatus+0x4c>)
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	60bb      	str	r3, [r7, #8]
  }


  /* Check the status of the specified CRYP flag */
  if ((tempreg & CRYP_FLAG ) != (uint8_t)RESET)
 80095d2:	79fa      	ldrb	r2, [r7, #7]
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	4013      	ands	r3, r2
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d002      	beq.n	80095e2 <CRYP_GetFlagStatus+0x3a>
  {
    /* CRYP_FLAG is set */
    bitstatus = SET;
 80095dc:	2301      	movs	r3, #1
 80095de:	73fb      	strb	r3, [r7, #15]
 80095e0:	e001      	b.n	80095e6 <CRYP_GetFlagStatus+0x3e>
  }
  else
  {
    /* CRYP_FLAG is reset */
    bitstatus = RESET;
 80095e2:	2300      	movs	r3, #0
 80095e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the CRYP_FLAG status */
  return  bitstatus;
 80095e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3714      	adds	r7, #20
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr
 80095f4:	50060000 	.word	0x50060000

080095f8 <CRYP_DES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
                         uint32_t Ilength, uint8_t *Output)
{
 80095f8:	b590      	push	{r4, r7, lr}
 80095fa:	b09b      	sub	sp, #108	; 0x6c
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60b9      	str	r1, [r7, #8]
 8009600:	607a      	str	r2, [r7, #4]
 8009602:	603b      	str	r3, [r7, #0]
 8009604:	4603      	mov	r3, r0
 8009606:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 8009608:	2300      	movs	r3, #0
 800960a:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 800960c:	2300      	movs	r3, #0
 800960e:	657b      	str	r3, [r7, #84]	; 0x54
  ErrorStatus status = SUCCESS;
 8009610:	2301      	movs	r3, #1
 8009612:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t keyaddr    = (uint32_t)Key;
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t inputaddr  = (uint32_t)Input;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t outputaddr = (uint32_t)Output;
 800961e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009620:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t i = 0;
 8009622:	2300      	movs	r3, #0
 8009624:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 8009626:	f107 0318 	add.w	r3, r7, #24
 800962a:	4618      	mov	r0, r3
 800962c:	f7ff fd40 	bl	80090b0 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if( Mode == MODE_ENCRYPT ) /* DES encryption */
 8009630:	7bfb      	ldrb	r3, [r7, #15]
 8009632:	2b01      	cmp	r3, #1
 8009634:	d102      	bne.n	800963c <CRYP_DES_ECB+0x44>
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 8009636:	2300      	movs	r3, #0
 8009638:	63bb      	str	r3, [r7, #56]	; 0x38
 800963a:	e001      	b.n	8009640 <CRYP_DES_ECB+0x48>
  }
  else/* if( Mode == MODE_DECRYPT )*/ /* DES decryption */
  {      
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 800963c:	2304      	movs	r3, #4
 800963e:	63bb      	str	r3, [r7, #56]	; 0x38
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_ECB;
 8009640:	2310      	movs	r3, #16
 8009642:	63fb      	str	r3, [r7, #60]	; 0x3c
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8009644:	2380      	movs	r3, #128	; 0x80
 8009646:	643b      	str	r3, [r7, #64]	; 0x40
  CRYP_Init(&DES_CRYP_InitStructure);
 8009648:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800964c:	4618      	mov	r0, r3
 800964e:	f7ff fc9b 	bl	8008f88 <CRYP_Init>

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8009652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800965a:	ba1b      	rev	r3, r3
 800965c:	623b      	str	r3, [r7, #32]
  keyaddr+=4;
 800965e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009660:	3304      	adds	r3, #4
 8009662:	653b      	str	r3, [r7, #80]	; 0x50
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8009664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	64bb      	str	r3, [r7, #72]	; 0x48
 800966a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800966c:	ba1b      	rev	r3, r3
 800966e:	627b      	str	r3, [r7, #36]	; 0x24
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 8009670:	f107 0318 	add.w	r3, r7, #24
 8009674:	4618      	mov	r0, r3
 8009676:	f7ff fcef 	bl	8009058 <CRYP_KeyInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 800967a:	f7ff fd89 	bl	8009190 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 800967e:	2001      	movs	r0, #1
 8009680:	f7ff fd94 	bl	80091ac <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 8009684:	f7ff ff76 	bl	8009574 <CRYP_GetCmdStatus>
 8009688:	4603      	mov	r3, r0
 800968a:	2b00      	cmp	r3, #0
 800968c:	d101      	bne.n	8009692 <CRYP_DES_ECB+0x9a>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 800968e:	2300      	movs	r3, #0
 8009690:	e04a      	b.n	8009728 <CRYP_DES_ECB+0x130>
  }
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8009692:	2300      	movs	r3, #0
 8009694:	65bb      	str	r3, [r7, #88]	; 0x58
 8009696:	e03a      	b.n	800970e <CRYP_DES_ECB+0x116>
  {

    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8009698:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4618      	mov	r0, r3
 800969e:	f7ff fda1 	bl	80091e4 <CRYP_DataIn>
    inputaddr+=4;
 80096a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096a4:	3304      	adds	r3, #4
 80096a6:	663b      	str	r3, [r7, #96]	; 0x60
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80096a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4618      	mov	r0, r3
 80096ae:	f7ff fd99 	bl	80091e4 <CRYP_DataIn>
    inputaddr+=4;
 80096b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096b4:	3304      	adds	r3, #4
 80096b6:	663b      	str	r3, [r7, #96]	; 0x60

/* Wait until the complete message has been processed */
    counter = 0;
 80096b8:	2300      	movs	r3, #0
 80096ba:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80096bc:	2010      	movs	r0, #16
 80096be:	f7ff ff73 	bl	80095a8 <CRYP_GetFlagStatus>
 80096c2:	4603      	mov	r3, r0
 80096c4:	657b      	str	r3, [r7, #84]	; 0x54
      counter++;
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	3301      	adds	r3, #1
 80096ca:	617b      	str	r3, [r7, #20]
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096d2:	d002      	beq.n	80096da <CRYP_DES_ECB+0xe2>
 80096d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d1f0      	bne.n	80096bc <CRYP_DES_ECB+0xc4>

    if (busystatus != RESET)
 80096da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d003      	beq.n	80096e8 <CRYP_DES_ECB+0xf0>
   {
       status = ERROR;
 80096e0:	2300      	movs	r3, #0
 80096e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80096e6:	e00f      	b.n	8009708 <CRYP_DES_ECB+0x110>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80096e8:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 80096ea:	f7ff fd89 	bl	8009200 <CRYP_DataOut>
 80096ee:	4603      	mov	r3, r0
 80096f0:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80096f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096f4:	3304      	adds	r3, #4
 80096f6:	65fb      	str	r3, [r7, #92]	; 0x5c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80096f8:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 80096fa:	f7ff fd81 	bl	8009200 <CRYP_DataOut>
 80096fe:	4603      	mov	r3, r0
 8009700:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8009702:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009704:	3304      	adds	r3, #4
 8009706:	65fb      	str	r3, [r7, #92]	; 0x5c
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
  }
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8009708:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800970a:	3308      	adds	r3, #8
 800970c:	65bb      	str	r3, [r7, #88]	; 0x58
 800970e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	429a      	cmp	r2, r3
 8009714:	d203      	bcs.n	800971e <CRYP_DES_ECB+0x126>
 8009716:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800971a:	2b00      	cmp	r3, #0
 800971c:	d1bc      	bne.n	8009698 <CRYP_DES_ECB+0xa0>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 800971e:	2000      	movs	r0, #0
 8009720:	f7ff fd44 	bl	80091ac <CRYP_Cmd>

  return status; 
 8009724:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8009728:	4618      	mov	r0, r3
 800972a:	376c      	adds	r7, #108	; 0x6c
 800972c:	46bd      	mov	sp, r7
 800972e:	bd90      	pop	{r4, r7, pc}

08009730 <CRYP_DES_CBC>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
                         uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 8009730:	b590      	push	{r4, r7, lr}
 8009732:	b0a1      	sub	sp, #132	; 0x84
 8009734:	af00      	add	r7, sp, #0
 8009736:	60b9      	str	r1, [r7, #8]
 8009738:	607a      	str	r2, [r7, #4]
 800973a:	603b      	str	r3, [r7, #0]
 800973c:	4603      	mov	r3, r0
 800973e:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8009740:	2300      	movs	r3, #0
 8009742:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 8009744:	2300      	movs	r3, #0
 8009746:	66fb      	str	r3, [r7, #108]	; 0x6c
  ErrorStatus status = SUCCESS;
 8009748:	2301      	movs	r3, #1
 800974a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t keyaddr    = (uint32_t)Key;
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	66bb      	str	r3, [r7, #104]	; 0x68
  uint32_t inputaddr  = (uint32_t)Input;
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	67bb      	str	r3, [r7, #120]	; 0x78
  uint32_t outputaddr = (uint32_t)Output;
 8009756:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800975a:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t ivaddr     = (uint32_t)InitVectors;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t i = 0;
 8009760:	2300      	movs	r3, #0
 8009762:	673b      	str	r3, [r7, #112]	; 0x70

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 8009764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009768:	4618      	mov	r0, r3
 800976a:	f7ff fca1 	bl	80090b0 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* DES encryption */
 800976e:	7bfb      	ldrb	r3, [r7, #15]
 8009770:	2b01      	cmp	r3, #1
 8009772:	d102      	bne.n	800977a <CRYP_DES_CBC+0x4a>
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 8009774:	2300      	movs	r3, #0
 8009776:	647b      	str	r3, [r7, #68]	; 0x44
 8009778:	e001      	b.n	800977e <CRYP_DES_CBC+0x4e>
  }
  else /*if(Mode == MODE_DECRYPT)*/ /* DES decryption */
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 800977a:	2304      	movs	r3, #4
 800977c:	647b      	str	r3, [r7, #68]	; 0x44
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_CBC;
 800977e:	2318      	movs	r3, #24
 8009780:	64bb      	str	r3, [r7, #72]	; 0x48
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8009782:	2380      	movs	r3, #128	; 0x80
 8009784:	64fb      	str	r3, [r7, #76]	; 0x4c
  CRYP_Init(&DES_CRYP_InitStructure);
 8009786:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800978a:	4618      	mov	r0, r3
 800978c:	f7ff fbfc 	bl	8008f88 <CRYP_Init>

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8009790:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	663b      	str	r3, [r7, #96]	; 0x60
 8009796:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009798:	ba1b      	rev	r3, r3
 800979a:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 800979c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800979e:	3304      	adds	r3, #4
 80097a0:	66bb      	str	r3, [r7, #104]	; 0x68
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80097a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80097a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097aa:	ba1b      	rev	r3, r3
 80097ac:	633b      	str	r3, [r7, #48]	; 0x30
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 80097ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7ff fc50 	bl	8009058 <CRYP_KeyInit>

  /* Initialization Vectors */
  DES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 80097b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80097be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80097c0:	ba1b      	rev	r3, r3
 80097c2:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 80097c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097c6:	3304      	adds	r3, #4
 80097c8:	667b      	str	r3, [r7, #100]	; 0x64
  DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 80097ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	657b      	str	r3, [r7, #84]	; 0x54
 80097d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097d2:	ba1b      	rev	r3, r3
 80097d4:	61bb      	str	r3, [r7, #24]
  CRYP_IVInit(&DES_CRYP_IVInitStructure);
 80097d6:	f107 0314 	add.w	r3, r7, #20
 80097da:	4618      	mov	r0, r3
 80097dc:	f7ff fc8a 	bl	80090f4 <CRYP_IVInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 80097e0:	f7ff fcd6 	bl	8009190 <CRYP_FIFOFlush>
  
  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 80097e4:	2001      	movs	r0, #1
 80097e6:	f7ff fce1 	bl	80091ac <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 80097ea:	f7ff fec3 	bl	8009574 <CRYP_GetCmdStatus>
 80097ee:	4603      	mov	r3, r0
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d101      	bne.n	80097f8 <CRYP_DES_CBC+0xc8>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 80097f4:	2300      	movs	r3, #0
 80097f6:	e04b      	b.n	8009890 <CRYP_DES_CBC+0x160>
  }
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 80097f8:	2300      	movs	r3, #0
 80097fa:	673b      	str	r3, [r7, #112]	; 0x70
 80097fc:	e03a      	b.n	8009874 <CRYP_DES_CBC+0x144>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80097fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4618      	mov	r0, r3
 8009804:	f7ff fcee 	bl	80091e4 <CRYP_DataIn>
    inputaddr+=4;
 8009808:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800980a:	3304      	adds	r3, #4
 800980c:	67bb      	str	r3, [r7, #120]	; 0x78
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800980e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4618      	mov	r0, r3
 8009814:	f7ff fce6 	bl	80091e4 <CRYP_DataIn>
    inputaddr+=4;
 8009818:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800981a:	3304      	adds	r3, #4
 800981c:	67bb      	str	r3, [r7, #120]	; 0x78

    /* Wait until the complete message has been processed */
    counter = 0;
 800981e:	2300      	movs	r3, #0
 8009820:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8009822:	2010      	movs	r0, #16
 8009824:	f7ff fec0 	bl	80095a8 <CRYP_GetFlagStatus>
 8009828:	4603      	mov	r3, r0
 800982a:	66fb      	str	r3, [r7, #108]	; 0x6c
      counter++;
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	3301      	adds	r3, #1
 8009830:	613b      	str	r3, [r7, #16]
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009838:	d002      	beq.n	8009840 <CRYP_DES_CBC+0x110>
 800983a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800983c:	2b00      	cmp	r3, #0
 800983e:	d1f0      	bne.n	8009822 <CRYP_DES_CBC+0xf2>

    if (busystatus != RESET)
 8009840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009842:	2b00      	cmp	r3, #0
 8009844:	d003      	beq.n	800984e <CRYP_DES_CBC+0x11e>
   {
       status = ERROR;
 8009846:	2300      	movs	r3, #0
 8009848:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800984c:	e00f      	b.n	800986e <CRYP_DES_CBC+0x13e>
    }
    else
    {
      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800984e:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 8009850:	f7ff fcd6 	bl	8009200 <CRYP_DataOut>
 8009854:	4603      	mov	r3, r0
 8009856:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8009858:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800985a:	3304      	adds	r3, #4
 800985c:	677b      	str	r3, [r7, #116]	; 0x74
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800985e:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 8009860:	f7ff fcce 	bl	8009200 <CRYP_DataOut>
 8009864:	4603      	mov	r3, r0
 8009866:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8009868:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800986a:	3304      	adds	r3, #4
 800986c:	677b      	str	r3, [r7, #116]	; 0x74
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
  }
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 800986e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009870:	3308      	adds	r3, #8
 8009872:	673b      	str	r3, [r7, #112]	; 0x70
 8009874:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009876:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800987a:	429a      	cmp	r2, r3
 800987c:	d203      	bcs.n	8009886 <CRYP_DES_CBC+0x156>
 800987e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009882:	2b00      	cmp	r3, #0
 8009884:	d1bb      	bne.n	80097fe <CRYP_DES_CBC+0xce>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8009886:	2000      	movs	r0, #0
 8009888:	f7ff fc90 	bl	80091ac <CRYP_Cmd>

  return status; 
 800988c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8009890:	4618      	mov	r0, r3
 8009892:	3784      	adds	r7, #132	; 0x84
 8009894:	46bd      	mov	sp, r7
 8009896:	bd90      	pop	{r4, r7, pc}

08009898 <CRYP_TDES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
                          uint32_t Ilength, uint8_t *Output)
{
 8009898:	b590      	push	{r4, r7, lr}
 800989a:	b09f      	sub	sp, #124	; 0x7c
 800989c:	af00      	add	r7, sp, #0
 800989e:	60b9      	str	r1, [r7, #8]
 80098a0:	607a      	str	r2, [r7, #4]
 80098a2:	603b      	str	r3, [r7, #0]
 80098a4:	4603      	mov	r3, r0
 80098a6:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 80098a8:	2300      	movs	r3, #0
 80098aa:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 80098ac:	2300      	movs	r3, #0
 80098ae:	667b      	str	r3, [r7, #100]	; 0x64
  ErrorStatus status = SUCCESS;
 80098b0:	2301      	movs	r3, #1
 80098b2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  uint32_t keyaddr    = (uint32_t)Key;
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t inputaddr  = (uint32_t)Input;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t outputaddr = (uint32_t)Output;
 80098be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80098c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t i = 0;
 80098c4:	2300      	movs	r3, #0
 80098c6:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 80098c8:	f107 0318 	add.w	r3, r7, #24
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7ff fbef 	bl	80090b0 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* TDES encryption */
 80098d2:	7bfb      	ldrb	r3, [r7, #15]
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d102      	bne.n	80098de <CRYP_TDES_ECB+0x46>
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 80098d8:	2300      	movs	r3, #0
 80098da:	63bb      	str	r3, [r7, #56]	; 0x38
 80098dc:	e001      	b.n	80098e2 <CRYP_TDES_ECB+0x4a>
  }
  else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 80098de:	2304      	movs	r3, #4
 80098e0:	63bb      	str	r3, [r7, #56]	; 0x38
  }

  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 80098e2:	2300      	movs	r3, #0
 80098e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 80098e6:	2380      	movs	r3, #128	; 0x80
 80098e8:	643b      	str	r3, [r7, #64]	; 0x40
  CRYP_Init(&TDES_CRYP_InitStructure);
 80098ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7ff fb4a 	bl	8008f88 <CRYP_Init>

  /* Key Initialisation */
  TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80098f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80098fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098fc:	ba1b      	rev	r3, r3
 80098fe:	623b      	str	r3, [r7, #32]
  keyaddr+=4;
 8009900:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009902:	3304      	adds	r3, #4
 8009904:	663b      	str	r3, [r7, #96]	; 0x60
  TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8009906:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	65bb      	str	r3, [r7, #88]	; 0x58
 800990c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800990e:	ba1b      	rev	r3, r3
 8009910:	627b      	str	r3, [r7, #36]	; 0x24
  keyaddr+=4;
 8009912:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009914:	3304      	adds	r3, #4
 8009916:	663b      	str	r3, [r7, #96]	; 0x60
  TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8009918:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	657b      	str	r3, [r7, #84]	; 0x54
 800991e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009920:	ba1b      	rev	r3, r3
 8009922:	62bb      	str	r3, [r7, #40]	; 0x28
  keyaddr+=4;
 8009924:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009926:	3304      	adds	r3, #4
 8009928:	663b      	str	r3, [r7, #96]	; 0x60
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 800992a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	653b      	str	r3, [r7, #80]	; 0x50
 8009930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009932:	ba1b      	rev	r3, r3
 8009934:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 8009936:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009938:	3304      	adds	r3, #4
 800993a:	663b      	str	r3, [r7, #96]	; 0x60
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 800993c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009944:	ba1b      	rev	r3, r3
 8009946:	633b      	str	r3, [r7, #48]	; 0x30
  keyaddr+=4;
 8009948:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800994a:	3304      	adds	r3, #4
 800994c:	663b      	str	r3, [r7, #96]	; 0x60
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 800994e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	64bb      	str	r3, [r7, #72]	; 0x48
 8009954:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009956:	ba1b      	rev	r3, r3
 8009958:	637b      	str	r3, [r7, #52]	; 0x34
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 800995a:	f107 0318 	add.w	r3, r7, #24
 800995e:	4618      	mov	r0, r3
 8009960:	f7ff fb7a 	bl	8009058 <CRYP_KeyInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8009964:	f7ff fc14 	bl	8009190 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8009968:	2001      	movs	r0, #1
 800996a:	f7ff fc1f 	bl	80091ac <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 800996e:	f7ff fe01 	bl	8009574 <CRYP_GetCmdStatus>
 8009972:	4603      	mov	r3, r0
 8009974:	2b00      	cmp	r3, #0
 8009976:	d101      	bne.n	800997c <CRYP_TDES_ECB+0xe4>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 8009978:	2300      	movs	r3, #0
 800997a:	e04a      	b.n	8009a12 <CRYP_TDES_ECB+0x17a>
  }
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 800997c:	2300      	movs	r3, #0
 800997e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009980:	e03a      	b.n	80099f8 <CRYP_TDES_ECB+0x160>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8009982:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4618      	mov	r0, r3
 8009988:	f7ff fc2c 	bl	80091e4 <CRYP_DataIn>
    inputaddr+=4;
 800998c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800998e:	3304      	adds	r3, #4
 8009990:	673b      	str	r3, [r7, #112]	; 0x70
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8009992:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4618      	mov	r0, r3
 8009998:	f7ff fc24 	bl	80091e4 <CRYP_DataIn>
    inputaddr+=4;
 800999c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800999e:	3304      	adds	r3, #4
 80099a0:	673b      	str	r3, [r7, #112]	; 0x70

    /* Wait until the complete message has been processed */
    counter = 0;
 80099a2:	2300      	movs	r3, #0
 80099a4:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80099a6:	2010      	movs	r0, #16
 80099a8:	f7ff fdfe 	bl	80095a8 <CRYP_GetFlagStatus>
 80099ac:	4603      	mov	r3, r0
 80099ae:	667b      	str	r3, [r7, #100]	; 0x64
      counter++;
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	3301      	adds	r3, #1
 80099b4:	617b      	str	r3, [r7, #20]
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099bc:	d002      	beq.n	80099c4 <CRYP_TDES_ECB+0x12c>
 80099be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d1f0      	bne.n	80099a6 <CRYP_TDES_ECB+0x10e>

    if (busystatus != RESET)
 80099c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d003      	beq.n	80099d2 <CRYP_TDES_ECB+0x13a>
    {
       status = ERROR;
 80099ca:	2300      	movs	r3, #0
 80099cc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80099d0:	e00f      	b.n	80099f2 <CRYP_TDES_ECB+0x15a>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80099d2:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80099d4:	f7ff fc14 	bl	8009200 <CRYP_DataOut>
 80099d8:	4603      	mov	r3, r0
 80099da:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80099dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099de:	3304      	adds	r3, #4
 80099e0:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80099e2:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80099e4:	f7ff fc0c 	bl	8009200 <CRYP_DataOut>
 80099e8:	4603      	mov	r3, r0
 80099ea:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80099ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099ee:	3304      	adds	r3, #4
 80099f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
  }
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 80099f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80099f4:	3308      	adds	r3, #8
 80099f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80099f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d203      	bcs.n	8009a08 <CRYP_TDES_ECB+0x170>
 8009a00:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d1bc      	bne.n	8009982 <CRYP_TDES_ECB+0xea>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8009a08:	2000      	movs	r0, #0
 8009a0a:	f7ff fbcf 	bl	80091ac <CRYP_Cmd>

  return status; 
 8009a0e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	377c      	adds	r7, #124	; 0x7c
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd90      	pop	{r4, r7, pc}
 8009a1a:	bf00      	nop

08009a1c <CRYP_TDES_CBC>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
                          uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 8009a1c:	b590      	push	{r4, r7, lr}
 8009a1e:	b0a5      	sub	sp, #148	; 0x94
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	60b9      	str	r1, [r7, #8]
 8009a24:	607a      	str	r2, [r7, #4]
 8009a26:	603b      	str	r3, [r7, #0]
 8009a28:	4603      	mov	r3, r0
 8009a2a:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 8009a30:	2300      	movs	r3, #0
 8009a32:	67fb      	str	r3, [r7, #124]	; 0x7c
  ErrorStatus status = SUCCESS;
 8009a34:	2301      	movs	r3, #1
 8009a36:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  uint32_t keyaddr    = (uint32_t)Key;
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	67bb      	str	r3, [r7, #120]	; 0x78
  uint32_t inputaddr  = (uint32_t)Input;
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t outputaddr = (uint32_t)Output;
 8009a44:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009a48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t ivaddr     = (uint32_t)InitVectors;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t i = 0;
 8009a50:	2300      	movs	r3, #0
 8009a52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 8009a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7ff fb28 	bl	80090b0 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* TDES encryption */
 8009a60:	7bfb      	ldrb	r3, [r7, #15]
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d102      	bne.n	8009a6c <CRYP_TDES_CBC+0x50>
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8009a66:	2300      	movs	r3, #0
 8009a68:	647b      	str	r3, [r7, #68]	; 0x44
 8009a6a:	e001      	b.n	8009a70 <CRYP_TDES_CBC+0x54>
  }
  else
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8009a6c:	2304      	movs	r3, #4
 8009a6e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
 8009a70:	2308      	movs	r3, #8
 8009a72:	64bb      	str	r3, [r7, #72]	; 0x48
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8009a74:	2380      	movs	r3, #128	; 0x80
 8009a76:	64fb      	str	r3, [r7, #76]	; 0x4c

  CRYP_Init(&TDES_CRYP_InitStructure);
 8009a78:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f7ff fa83 	bl	8008f88 <CRYP_Init>

  /* Key Initialisation */
  TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8009a82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	673b      	str	r3, [r7, #112]	; 0x70
 8009a88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009a8a:	ba1b      	rev	r3, r3
 8009a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 8009a8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a90:	3304      	adds	r3, #4
 8009a92:	67bb      	str	r3, [r7, #120]	; 0x78
  TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8009a94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a9c:	ba1b      	rev	r3, r3
 8009a9e:	633b      	str	r3, [r7, #48]	; 0x30
  keyaddr+=4;
 8009aa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009aa2:	3304      	adds	r3, #4
 8009aa4:	67bb      	str	r3, [r7, #120]	; 0x78
  TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8009aa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	66bb      	str	r3, [r7, #104]	; 0x68
 8009aac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009aae:	ba1b      	rev	r3, r3
 8009ab0:	637b      	str	r3, [r7, #52]	; 0x34
  keyaddr+=4;
 8009ab2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ab4:	3304      	adds	r3, #4
 8009ab6:	67bb      	str	r3, [r7, #120]	; 0x78
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8009ab8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	667b      	str	r3, [r7, #100]	; 0x64
 8009abe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ac0:	ba1b      	rev	r3, r3
 8009ac2:	63bb      	str	r3, [r7, #56]	; 0x38
  keyaddr+=4;
 8009ac4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ac6:	3304      	adds	r3, #4
 8009ac8:	67bb      	str	r3, [r7, #120]	; 0x78
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8009aca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	663b      	str	r3, [r7, #96]	; 0x60
 8009ad0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ad2:	ba1b      	rev	r3, r3
 8009ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
  keyaddr+=4;
 8009ad6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ad8:	3304      	adds	r3, #4
 8009ada:	67bb      	str	r3, [r7, #120]	; 0x78
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8009adc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ae4:	ba1b      	rev	r3, r3
 8009ae6:	643b      	str	r3, [r7, #64]	; 0x40
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 8009ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009aec:	4618      	mov	r0, r3
 8009aee:	f7ff fab3 	bl	8009058 <CRYP_KeyInit>

  /* Initialization Vectors */
  TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8009af2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	65bb      	str	r3, [r7, #88]	; 0x58
 8009af8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009afa:	ba1b      	rev	r3, r3
 8009afc:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 8009afe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b00:	3304      	adds	r3, #4
 8009b02:	677b      	str	r3, [r7, #116]	; 0x74
  TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8009b04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	657b      	str	r3, [r7, #84]	; 0x54
 8009b0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b0c:	ba1b      	rev	r3, r3
 8009b0e:	61bb      	str	r3, [r7, #24]
  CRYP_IVInit(&TDES_CRYP_IVInitStructure);
 8009b10:	f107 0314 	add.w	r3, r7, #20
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7ff faed 	bl	80090f4 <CRYP_IVInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8009b1a:	f7ff fb39 	bl	8009190 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8009b1e:	2001      	movs	r0, #1
 8009b20:	f7ff fb44 	bl	80091ac <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 8009b24:	f7ff fd26 	bl	8009574 <CRYP_GetCmdStatus>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d101      	bne.n	8009b32 <CRYP_TDES_CBC+0x116>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 8009b2e:	2300      	movs	r3, #0
 8009b30:	e05b      	b.n	8009bea <CRYP_TDES_CBC+0x1ce>
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8009b32:	2300      	movs	r3, #0
 8009b34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009b38:	e048      	b.n	8009bcc <CRYP_TDES_CBC+0x1b0>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8009b3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4618      	mov	r0, r3
 8009b42:	f7ff fb4f 	bl	80091e4 <CRYP_DataIn>
    inputaddr+=4;
 8009b46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009b4a:	3304      	adds	r3, #4
 8009b4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8009b50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7ff fb44 	bl	80091e4 <CRYP_DataIn>
    inputaddr+=4;
 8009b5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009b60:	3304      	adds	r3, #4
 8009b62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    /* Wait until the complete message has been processed */
    counter = 0;
 8009b66:	2300      	movs	r3, #0
 8009b68:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8009b6a:	2010      	movs	r0, #16
 8009b6c:	f7ff fd1c 	bl	80095a8 <CRYP_GetFlagStatus>
 8009b70:	4603      	mov	r3, r0
 8009b72:	67fb      	str	r3, [r7, #124]	; 0x7c
      counter++;
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	3301      	adds	r3, #1
 8009b78:	613b      	str	r3, [r7, #16]
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b80:	d002      	beq.n	8009b88 <CRYP_TDES_CBC+0x16c>
 8009b82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d1f0      	bne.n	8009b6a <CRYP_TDES_CBC+0x14e>

    if (busystatus != RESET)
 8009b88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d003      	beq.n	8009b96 <CRYP_TDES_CBC+0x17a>
   {
       status = ERROR;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8009b94:	e015      	b.n	8009bc2 <CRYP_TDES_CBC+0x1a6>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8009b96:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8009b9a:	f7ff fb31 	bl	8009200 <CRYP_DataOut>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8009ba2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009ba6:	3304      	adds	r3, #4
 8009ba8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8009bac:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8009bb0:	f7ff fb26 	bl	8009200 <CRYP_DataOut>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8009bb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009bbc:	3304      	adds	r3, #4
 8009bbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8009bc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009bc6:	3308      	adds	r3, #8
 8009bc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009bcc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009bd0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d203      	bcs.n	8009be0 <CRYP_TDES_CBC+0x1c4>
 8009bd8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d1ac      	bne.n	8009b3a <CRYP_TDES_CBC+0x11e>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8009be0:	2000      	movs	r0, #0
 8009be2:	f7ff fae3 	bl	80091ac <CRYP_Cmd>

  return status; 
 8009be6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3794      	adds	r7, #148	; 0x94
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd90      	pop	{r4, r7, pc}
 8009bf2:	bf00      	nop

08009bf4 <DAC_DeInit>:
  * @brief  Deinitializes the DAC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void DAC_DeInit(void)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	af00      	add	r7, sp, #0
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
 8009bf8:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8009bfc:	2101      	movs	r1, #1
 8009bfe:	f006 f875 	bl	800fcec <RCC_APB1PeriphResetCmd>
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
 8009c02:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8009c06:	2100      	movs	r1, #0
 8009c08:	f006 f870 	bl	800fcec <RCC_APB1PeriphResetCmd>
}
 8009c0c:	bd80      	pop	{r7, pc}
 8009c0e:	bf00      	nop

08009c10 <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b085      	sub	sp, #20
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	60fb      	str	r3, [r7, #12]
 8009c1e:	2300      	movs	r3, #0
 8009c20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8009c22:	4b13      	ldr	r3, [pc, #76]	; (8009c70 <DAC_Init+0x60>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8009c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c32:	43db      	mvns	r3, r3
 8009c34:	68fa      	ldr	r2, [r7, #12]
 8009c36:	4013      	ands	r3, r2
 8009c38:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	689b      	ldr	r3, [r3, #8]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8009c48:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	68db      	ldr	r3, [r3, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	60bb      	str	r3, [r7, #8]
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	68ba      	ldr	r2, [r7, #8]
 8009c56:	fa02 f303 	lsl.w	r3, r2, r3
 8009c5a:	68fa      	ldr	r2, [r7, #12]
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8009c60:	4b03      	ldr	r3, [pc, #12]	; (8009c70 <DAC_Init+0x60>)
 8009c62:	68fa      	ldr	r2, [r7, #12]
 8009c64:	601a      	str	r2, [r3, #0]
}
 8009c66:	3714      	adds	r7, #20
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr
 8009c70:	40007400 	.word	0x40007400

08009c74 <DAC_StructInit>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b083      	sub	sp, #12
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
/*--------------- Reset DAC init structure parameters values -----------------*/
  /* Initialize the DAC_Trigger member */
  DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	601a      	str	r2, [r3, #0]
  /* Initialize the DAC_WaveGeneration member */
  DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2200      	movs	r2, #0
 8009c86:	605a      	str	r2, [r3, #4]
  /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
  DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	609a      	str	r2, [r3, #8]
  /* Initialize the DAC_OutputBuffer member */
  DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2200      	movs	r2, #0
 8009c92:	60da      	str	r2, [r3, #12]
}
 8009c94:	370c      	adds	r7, #12
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr
 8009c9e:	bf00      	nop

08009ca0 <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	460b      	mov	r3, r1
 8009caa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009cac:	78fb      	ldrb	r3, [r7, #3]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d009      	beq.n	8009cc6 <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 8009cb2:	4b0c      	ldr	r3, [pc, #48]	; (8009ce4 <DAC_Cmd+0x44>)
 8009cb4:	4a0b      	ldr	r2, [pc, #44]	; (8009ce4 <DAC_Cmd+0x44>)
 8009cb6:	6811      	ldr	r1, [r2, #0]
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	2001      	movs	r0, #1
 8009cbc:	fa00 f202 	lsl.w	r2, r0, r2
 8009cc0:	430a      	orrs	r2, r1
 8009cc2:	601a      	str	r2, [r3, #0]
 8009cc4:	e009      	b.n	8009cda <DAC_Cmd+0x3a>
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 8009cc6:	4b07      	ldr	r3, [pc, #28]	; (8009ce4 <DAC_Cmd+0x44>)
 8009cc8:	4a06      	ldr	r2, [pc, #24]	; (8009ce4 <DAC_Cmd+0x44>)
 8009cca:	6811      	ldr	r1, [r2, #0]
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	2001      	movs	r0, #1
 8009cd0:	fa00 f202 	lsl.w	r2, r0, r2
 8009cd4:	43d2      	mvns	r2, r2
 8009cd6:	400a      	ands	r2, r1
 8009cd8:	601a      	str	r2, [r3, #0]
  }
}
 8009cda:	370c      	adds	r7, #12
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr
 8009ce4:	40007400 	.word	0x40007400

08009ce8 <DAC_SoftwareTriggerCmd>:
  * @param  NewState: new state of the selected DAC channel software trigger.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b083      	sub	sp, #12
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	460b      	mov	r3, r1
 8009cf2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009cf4:	78fb      	ldrb	r3, [r7, #3]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d00a      	beq.n	8009d10 <DAC_SoftwareTriggerCmd+0x28>
  {
    /* Enable software trigger for the selected DAC channel */
    DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
 8009cfa:	4b0d      	ldr	r3, [pc, #52]	; (8009d30 <DAC_SoftwareTriggerCmd+0x48>)
 8009cfc:	4a0c      	ldr	r2, [pc, #48]	; (8009d30 <DAC_SoftwareTriggerCmd+0x48>)
 8009cfe:	6851      	ldr	r1, [r2, #4]
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	0912      	lsrs	r2, r2, #4
 8009d04:	2001      	movs	r0, #1
 8009d06:	fa00 f202 	lsl.w	r2, r0, r2
 8009d0a:	430a      	orrs	r2, r1
 8009d0c:	605a      	str	r2, [r3, #4]
 8009d0e:	e00a      	b.n	8009d26 <DAC_SoftwareTriggerCmd+0x3e>
  }
  else
  {
    /* Disable software trigger for the selected DAC channel */
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
 8009d10:	4b07      	ldr	r3, [pc, #28]	; (8009d30 <DAC_SoftwareTriggerCmd+0x48>)
 8009d12:	4a07      	ldr	r2, [pc, #28]	; (8009d30 <DAC_SoftwareTriggerCmd+0x48>)
 8009d14:	6851      	ldr	r1, [r2, #4]
 8009d16:	687a      	ldr	r2, [r7, #4]
 8009d18:	0912      	lsrs	r2, r2, #4
 8009d1a:	2001      	movs	r0, #1
 8009d1c:	fa00 f202 	lsl.w	r2, r0, r2
 8009d20:	43d2      	mvns	r2, r2
 8009d22:	400a      	ands	r2, r1
 8009d24:	605a      	str	r2, [r3, #4]
  }
}
 8009d26:	370c      	adds	r7, #12
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr
 8009d30:	40007400 	.word	0x40007400

08009d34 <DAC_DualSoftwareTriggerCmd>:
  * @param  NewState: new state of the DAC channels software triggers.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009d3e:	79fb      	ldrb	r3, [r7, #7]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d006      	beq.n	8009d52 <DAC_DualSoftwareTriggerCmd+0x1e>
  {
    /* Enable software trigger for both DAC channels */
    DAC->SWTRIGR |= DUAL_SWTRIG_SET;
 8009d44:	4b08      	ldr	r3, [pc, #32]	; (8009d68 <DAC_DualSoftwareTriggerCmd+0x34>)
 8009d46:	4a08      	ldr	r2, [pc, #32]	; (8009d68 <DAC_DualSoftwareTriggerCmd+0x34>)
 8009d48:	6852      	ldr	r2, [r2, #4]
 8009d4a:	f042 0203 	orr.w	r2, r2, #3
 8009d4e:	605a      	str	r2, [r3, #4]
 8009d50:	e005      	b.n	8009d5e <DAC_DualSoftwareTriggerCmd+0x2a>
  }
  else
  {
    /* Disable software trigger for both DAC channels */
    DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
 8009d52:	4b05      	ldr	r3, [pc, #20]	; (8009d68 <DAC_DualSoftwareTriggerCmd+0x34>)
 8009d54:	4a04      	ldr	r2, [pc, #16]	; (8009d68 <DAC_DualSoftwareTriggerCmd+0x34>)
 8009d56:	6852      	ldr	r2, [r2, #4]
 8009d58:	f022 0203 	bic.w	r2, r2, #3
 8009d5c:	605a      	str	r2, [r3, #4]
  }
}
 8009d5e:	370c      	adds	r7, #12
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr
 8009d68:	40007400 	.word	0x40007400

08009d6c <DAC_WaveGenerationCmd>:
  * @param  NewState: new state of the selected DAC channel wave generation.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b085      	sub	sp, #20
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	60f8      	str	r0, [r7, #12]
 8009d74:	60b9      	str	r1, [r7, #8]
 8009d76:	4613      	mov	r3, r2
 8009d78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_WAVE(DAC_Wave)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009d7a:	79fb      	ldrb	r3, [r7, #7]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d009      	beq.n	8009d94 <DAC_WaveGenerationCmd+0x28>
  {
    /* Enable the selected wave generation for the selected DAC channel */
    DAC->CR |= DAC_Wave << DAC_Channel;
 8009d80:	4b0c      	ldr	r3, [pc, #48]	; (8009db4 <DAC_WaveGenerationCmd+0x48>)
 8009d82:	4a0c      	ldr	r2, [pc, #48]	; (8009db4 <DAC_WaveGenerationCmd+0x48>)
 8009d84:	6811      	ldr	r1, [r2, #0]
 8009d86:	68fa      	ldr	r2, [r7, #12]
 8009d88:	68b8      	ldr	r0, [r7, #8]
 8009d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8009d8e:	430a      	orrs	r2, r1
 8009d90:	601a      	str	r2, [r3, #0]
 8009d92:	e009      	b.n	8009da8 <DAC_WaveGenerationCmd+0x3c>
  }
  else
  {
    /* Disable the selected wave generation for the selected DAC channel */
    DAC->CR &= ~(DAC_Wave << DAC_Channel);
 8009d94:	4b07      	ldr	r3, [pc, #28]	; (8009db4 <DAC_WaveGenerationCmd+0x48>)
 8009d96:	4a07      	ldr	r2, [pc, #28]	; (8009db4 <DAC_WaveGenerationCmd+0x48>)
 8009d98:	6811      	ldr	r1, [r2, #0]
 8009d9a:	68fa      	ldr	r2, [r7, #12]
 8009d9c:	68b8      	ldr	r0, [r7, #8]
 8009d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8009da2:	43d2      	mvns	r2, r2
 8009da4:	400a      	ands	r2, r1
 8009da6:	601a      	str	r2, [r3, #0]
  }
}
 8009da8:	3714      	adds	r7, #20
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr
 8009db2:	bf00      	nop
 8009db4:	40007400 	.word	0x40007400

08009db8 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8009dc8:	4b07      	ldr	r3, [pc, #28]	; (8009de8 <DAC_SetChannel1Data+0x30>)
 8009dca:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8009dcc:	68fa      	ldr	r2, [r7, #12]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	4413      	add	r3, r2
 8009dd2:	3308      	adds	r3, #8
 8009dd4:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	887a      	ldrh	r2, [r7, #2]
 8009dda:	601a      	str	r2, [r3, #0]
}
 8009ddc:	3714      	adds	r7, #20
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr
 8009de6:	bf00      	nop
 8009de8:	40007400 	.word	0x40007400

08009dec <DAC_SetChannel2Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b085      	sub	sp, #20
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	460b      	mov	r3, r1
 8009df6:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE;
 8009dfc:	4b07      	ldr	r3, [pc, #28]	; (8009e1c <DAC_SetChannel2Data+0x30>)
 8009dfe:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R2_OFFSET + DAC_Align;
 8009e00:	68fa      	ldr	r2, [r7, #12]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	4413      	add	r3, r2
 8009e06:	3314      	adds	r3, #20
 8009e08:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel2 selected data holding register */
  *(__IO uint32_t *)tmp = Data;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	887a      	ldrh	r2, [r7, #2]
 8009e0e:	601a      	str	r2, [r3, #0]
}
 8009e10:	3714      	adds	r7, #20
 8009e12:	46bd      	mov	sp, r7
 8009e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e18:	4770      	bx	lr
 8009e1a:	bf00      	nop
 8009e1c:	40007400 	.word	0x40007400

08009e20 <DAC_SetDualChannelData>:
  * @note   In dual mode, a unique register access is required to write in both
  *          DAC channels at the same time.
  * @retval None
  */
void DAC_SetDualChannelData(uint32_t DAC_Align, uint16_t Data2, uint16_t Data1)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b085      	sub	sp, #20
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	4613      	mov	r3, r2
 8009e2a:	460a      	mov	r2, r1
 8009e2c:	807a      	strh	r2, [r7, #2]
 8009e2e:	803b      	strh	r3, [r7, #0]
  uint32_t data = 0, tmp = 0;
 8009e30:	2300      	movs	r3, #0
 8009e32:	60fb      	str	r3, [r7, #12]
 8009e34:	2300      	movs	r3, #0
 8009e36:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));
  
  /* Calculate and set dual DAC data holding register value */
  if (DAC_Align == DAC_Align_8b_R)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2b08      	cmp	r3, #8
 8009e3c:	d105      	bne.n	8009e4a <DAC_SetDualChannelData+0x2a>
  {
    data = ((uint32_t)Data2 << 8) | Data1; 
 8009e3e:	887b      	ldrh	r3, [r7, #2]
 8009e40:	021a      	lsls	r2, r3, #8
 8009e42:	883b      	ldrh	r3, [r7, #0]
 8009e44:	4313      	orrs	r3, r2
 8009e46:	60fb      	str	r3, [r7, #12]
 8009e48:	e004      	b.n	8009e54 <DAC_SetDualChannelData+0x34>
  }
  else
  {
    data = ((uint32_t)Data2 << 16) | Data1;
 8009e4a:	887b      	ldrh	r3, [r7, #2]
 8009e4c:	041a      	lsls	r2, r3, #16
 8009e4e:	883b      	ldrh	r3, [r7, #0]
 8009e50:	4313      	orrs	r3, r2
 8009e52:	60fb      	str	r3, [r7, #12]
  }
  
  tmp = (uint32_t)DAC_BASE;
 8009e54:	4b07      	ldr	r3, [pc, #28]	; (8009e74 <DAC_SetDualChannelData+0x54>)
 8009e56:	60bb      	str	r3, [r7, #8]
  tmp += DHR12RD_OFFSET + DAC_Align;
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	4413      	add	r3, r2
 8009e5e:	3320      	adds	r3, #32
 8009e60:	60bb      	str	r3, [r7, #8]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	68fa      	ldr	r2, [r7, #12]
 8009e66:	601a      	str	r2, [r3, #0]
}
 8009e68:	3714      	adds	r7, #20
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr
 8009e72:	bf00      	nop
 8009e74:	40007400 	.word	0x40007400

08009e78 <DAC_GetDataOutputValue>:
  *            @arg DAC_Channel_1: DAC Channel1 selected
  *            @arg DAC_Channel_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b085      	sub	sp, #20
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 8009e80:	2300      	movs	r3, #0
 8009e82:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  
  tmp = (uint32_t) DAC_BASE ;
 8009e84:	4b08      	ldr	r3, [pc, #32]	; (8009ea8 <DAC_GetDataOutputValue+0x30>)
 8009e86:	60fb      	str	r3, [r7, #12]
  tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	089a      	lsrs	r2, r3, #2
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	4413      	add	r3, r2
 8009e90:	332c      	adds	r3, #44	; 0x2c
 8009e92:	60fb      	str	r3, [r7, #12]
  
  /* Returns the DAC channel data output register value */
  return (uint16_t) (*(__IO uint32_t*) tmp);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	b29b      	uxth	r3, r3
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3714      	adds	r7, #20
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea4:	4770      	bx	lr
 8009ea6:	bf00      	nop
 8009ea8:	40007400 	.word	0x40007400

08009eac <DAC_DMACmd>:
  * @note   The DAC channel2 is mapped on DMA1 Stream 6 channel7 which must be
  *          already configured.    
  * @retval None
  */
void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b083      	sub	sp, #12
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009eb8:	78fb      	ldrb	r3, [r7, #3]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d00a      	beq.n	8009ed4 <DAC_DMACmd+0x28>
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 8009ebe:	4b0d      	ldr	r3, [pc, #52]	; (8009ef4 <DAC_DMACmd+0x48>)
 8009ec0:	4a0c      	ldr	r2, [pc, #48]	; (8009ef4 <DAC_DMACmd+0x48>)
 8009ec2:	6811      	ldr	r1, [r2, #0]
 8009ec4:	687a      	ldr	r2, [r7, #4]
 8009ec6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009eca:	fa00 f202 	lsl.w	r2, r0, r2
 8009ece:	430a      	orrs	r2, r1
 8009ed0:	601a      	str	r2, [r3, #0]
 8009ed2:	e00a      	b.n	8009eea <DAC_DMACmd+0x3e>
  }
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
 8009ed4:	4b07      	ldr	r3, [pc, #28]	; (8009ef4 <DAC_DMACmd+0x48>)
 8009ed6:	4a07      	ldr	r2, [pc, #28]	; (8009ef4 <DAC_DMACmd+0x48>)
 8009ed8:	6811      	ldr	r1, [r2, #0]
 8009eda:	687a      	ldr	r2, [r7, #4]
 8009edc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009ee0:	fa00 f202 	lsl.w	r2, r0, r2
 8009ee4:	43d2      	mvns	r2, r2
 8009ee6:	400a      	ands	r2, r1
 8009ee8:	601a      	str	r2, [r3, #0]
  }
}
 8009eea:	370c      	adds	r7, #12
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr
 8009ef4:	40007400 	.word	0x40007400

08009ef8 <DAC_ITConfig>:
  * @param  NewState: new state of the specified DAC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */ 
void DAC_ITConfig(uint32_t DAC_Channel, uint32_t DAC_IT, FunctionalState NewState)  
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b085      	sub	sp, #20
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	60f8      	str	r0, [r7, #12]
 8009f00:	60b9      	str	r1, [r7, #8]
 8009f02:	4613      	mov	r3, r2
 8009f04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_DAC_IT(DAC_IT)); 

  if (NewState != DISABLE)
 8009f06:	79fb      	ldrb	r3, [r7, #7]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d009      	beq.n	8009f20 <DAC_ITConfig+0x28>
  {
    /* Enable the selected DAC interrupts */
    DAC->CR |=  (DAC_IT << DAC_Channel);
 8009f0c:	4b0c      	ldr	r3, [pc, #48]	; (8009f40 <DAC_ITConfig+0x48>)
 8009f0e:	4a0c      	ldr	r2, [pc, #48]	; (8009f40 <DAC_ITConfig+0x48>)
 8009f10:	6811      	ldr	r1, [r2, #0]
 8009f12:	68fa      	ldr	r2, [r7, #12]
 8009f14:	68b8      	ldr	r0, [r7, #8]
 8009f16:	fa00 f202 	lsl.w	r2, r0, r2
 8009f1a:	430a      	orrs	r2, r1
 8009f1c:	601a      	str	r2, [r3, #0]
 8009f1e:	e009      	b.n	8009f34 <DAC_ITConfig+0x3c>
  }
  else
  {
    /* Disable the selected DAC interrupts */
    DAC->CR &= (~(uint32_t)(DAC_IT << DAC_Channel));
 8009f20:	4b07      	ldr	r3, [pc, #28]	; (8009f40 <DAC_ITConfig+0x48>)
 8009f22:	4a07      	ldr	r2, [pc, #28]	; (8009f40 <DAC_ITConfig+0x48>)
 8009f24:	6811      	ldr	r1, [r2, #0]
 8009f26:	68fa      	ldr	r2, [r7, #12]
 8009f28:	68b8      	ldr	r0, [r7, #8]
 8009f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8009f2e:	43d2      	mvns	r2, r2
 8009f30:	400a      	ands	r2, r1
 8009f32:	601a      	str	r2, [r3, #0]
  }
}
 8009f34:	3714      	adds	r7, #20
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr
 8009f3e:	bf00      	nop
 8009f40:	40007400 	.word	0x40007400

08009f44 <DAC_GetFlagStatus>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).
  * @retval The new state of DAC_FLAG (SET or RESET).
  */
FlagStatus DAC_GetFlagStatus(uint32_t DAC_Channel, uint32_t DAC_FLAG)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b085      	sub	sp, #20
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Check the status of the specified DAC flag */
  if ((DAC->SR & (DAC_FLAG << DAC_Channel)) != (uint8_t)RESET)
 8009f52:	4b0a      	ldr	r3, [pc, #40]	; (8009f7c <DAC_GetFlagStatus+0x38>)
 8009f54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6839      	ldr	r1, [r7, #0]
 8009f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8009f5e:	4013      	ands	r3, r2
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d002      	beq.n	8009f6a <DAC_GetFlagStatus+0x26>
  {
    /* DAC_FLAG is set */
    bitstatus = SET;
 8009f64:	2301      	movs	r3, #1
 8009f66:	73fb      	strb	r3, [r7, #15]
 8009f68:	e001      	b.n	8009f6e <DAC_GetFlagStatus+0x2a>
  }
  else
  {
    /* DAC_FLAG is reset */
    bitstatus = RESET;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DAC_FLAG status */
  return  bitstatus;
 8009f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3714      	adds	r7, #20
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr
 8009f7c:	40007400 	.word	0x40007400

08009f80 <DAC_ClearFlag>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).                           
  * @retval None
  */
void DAC_ClearFlag(uint32_t DAC_Channel, uint32_t DAC_FLAG)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b083      	sub	sp, #12
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Clear the selected DAC flags */
  DAC->SR = (DAC_FLAG << DAC_Channel);
 8009f8a:	4b05      	ldr	r3, [pc, #20]	; (8009fa0 <DAC_ClearFlag+0x20>)
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	6839      	ldr	r1, [r7, #0]
 8009f90:	fa01 f202 	lsl.w	r2, r1, r2
 8009f94:	635a      	str	r2, [r3, #52]	; 0x34
}
 8009f96:	370c      	adds	r7, #12
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr
 8009fa0:	40007400 	.word	0x40007400

08009fa4 <DAC_GetITStatus>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).
  * @retval The new state of DAC_IT (SET or RESET).
  */
ITStatus DAC_GetITStatus(uint32_t DAC_Channel, uint32_t DAC_IT)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b085      	sub	sp, #20
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT));

  /* Get the DAC_IT enable bit status */
  enablestatus = (DAC->CR & (DAC_IT << DAC_Channel)) ;
 8009fb6:	4b10      	ldr	r3, [pc, #64]	; (8009ff8 <DAC_GetITStatus+0x54>)
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6839      	ldr	r1, [r7, #0]
 8009fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8009fc2:	4013      	ands	r3, r2
 8009fc4:	60bb      	str	r3, [r7, #8]
  
  /* Check the status of the specified DAC interrupt */
  if (((DAC->SR & (DAC_IT << DAC_Channel)) != (uint32_t)RESET) && enablestatus)
 8009fc6:	4b0c      	ldr	r3, [pc, #48]	; (8009ff8 <DAC_GetITStatus+0x54>)
 8009fc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6839      	ldr	r1, [r7, #0]
 8009fce:	fa01 f303 	lsl.w	r3, r1, r3
 8009fd2:	4013      	ands	r3, r2
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d005      	beq.n	8009fe4 <DAC_GetITStatus+0x40>
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d002      	beq.n	8009fe4 <DAC_GetITStatus+0x40>
  {
    /* DAC_IT is set */
    bitstatus = SET;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	73fb      	strb	r3, [r7, #15]
 8009fe2:	e001      	b.n	8009fe8 <DAC_GetITStatus+0x44>
  }
  else
  {
    /* DAC_IT is reset */
    bitstatus = RESET;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DAC_IT status */
  return  bitstatus;
 8009fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3714      	adds	r7, #20
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr
 8009ff6:	bf00      	nop
 8009ff8:	40007400 	.word	0x40007400

08009ffc <DAC_ClearITPendingBit>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).                           
  * @retval None
  */
void DAC_ClearITPendingBit(uint32_t DAC_Channel, uint32_t DAC_IT)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b083      	sub	sp, #12
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT)); 

  /* Clear the selected DAC interrupt pending bits */
  DAC->SR = (DAC_IT << DAC_Channel);
 800a006:	4b05      	ldr	r3, [pc, #20]	; (800a01c <DAC_ClearITPendingBit+0x20>)
 800a008:	687a      	ldr	r2, [r7, #4]
 800a00a:	6839      	ldr	r1, [r7, #0]
 800a00c:	fa01 f202 	lsl.w	r2, r1, r2
 800a010:	635a      	str	r2, [r3, #52]	; 0x34
}
 800a012:	370c      	adds	r7, #12
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr
 800a01c:	40007400 	.word	0x40007400

0800a020 <DBGMCU_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @param  None
  * @retval Device revision identifier
  */
uint32_t DBGMCU_GetREVID(void)
{
 800a020:	b480      	push	{r7}
 800a022:	af00      	add	r7, sp, #0
   return(DBGMCU->IDCODE >> 16);
 800a024:	4b03      	ldr	r3, [pc, #12]	; (800a034 <DBGMCU_GetREVID+0x14>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	0c1b      	lsrs	r3, r3, #16
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr
 800a034:	e0042000 	.word	0xe0042000

0800a038 <DBGMCU_GetDEVID>:
  * @brief  Returns the device identifier.
  * @param  None
  * @retval Device identifier
  */
uint32_t DBGMCU_GetDEVID(void)
{
 800a038:	b480      	push	{r7}
 800a03a:	af00      	add	r7, sp, #0
   return(DBGMCU->IDCODE & IDCODE_DEVID_MASK);
 800a03c:	4b04      	ldr	r3, [pc, #16]	; (800a050 <DBGMCU_GetDEVID+0x18>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800a044:	4618      	mov	r0, r3
 800a046:	46bd      	mov	sp, r7
 800a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04c:	4770      	bx	lr
 800a04e:	bf00      	nop
 800a050:	e0042000 	.word	0xe0042000

0800a054 <DBGMCU_Config>:
  * @param  NewState: new state of the specified low power mode in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 800a054:	b480      	push	{r7}
 800a056:	b083      	sub	sp, #12
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	460b      	mov	r3, r1
 800a05e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800a060:	78fb      	ldrb	r3, [r7, #3]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d006      	beq.n	800a074 <DBGMCU_Config+0x20>
  {
    DBGMCU->CR |= DBGMCU_Periph;
 800a066:	4b09      	ldr	r3, [pc, #36]	; (800a08c <DBGMCU_Config+0x38>)
 800a068:	4a08      	ldr	r2, [pc, #32]	; (800a08c <DBGMCU_Config+0x38>)
 800a06a:	6851      	ldr	r1, [r2, #4]
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	430a      	orrs	r2, r1
 800a070:	605a      	str	r2, [r3, #4]
 800a072:	e006      	b.n	800a082 <DBGMCU_Config+0x2e>
  }
  else
  {
    DBGMCU->CR &= ~DBGMCU_Periph;
 800a074:	4b05      	ldr	r3, [pc, #20]	; (800a08c <DBGMCU_Config+0x38>)
 800a076:	4a05      	ldr	r2, [pc, #20]	; (800a08c <DBGMCU_Config+0x38>)
 800a078:	6851      	ldr	r1, [r2, #4]
 800a07a:	687a      	ldr	r2, [r7, #4]
 800a07c:	43d2      	mvns	r2, r2
 800a07e:	400a      	ands	r2, r1
 800a080:	605a      	str	r2, [r3, #4]
  }
}
 800a082:	370c      	adds	r7, #12
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr
 800a08c:	e0042000 	.word	0xe0042000

0800a090 <DBGMCU_APB1PeriphConfig>:
  *     @arg DBGMCU_CAN1_STOP: Debug CAN2 stopped when Core is halted        
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_APB1PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 800a090:	b480      	push	{r7}
 800a092:	b083      	sub	sp, #12
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	460b      	mov	r3, r1
 800a09a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB1PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a09c:	78fb      	ldrb	r3, [r7, #3]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d006      	beq.n	800a0b0 <DBGMCU_APB1PeriphConfig+0x20>
  {
    DBGMCU->APB1FZ |= DBGMCU_Periph;
 800a0a2:	4b09      	ldr	r3, [pc, #36]	; (800a0c8 <DBGMCU_APB1PeriphConfig+0x38>)
 800a0a4:	4a08      	ldr	r2, [pc, #32]	; (800a0c8 <DBGMCU_APB1PeriphConfig+0x38>)
 800a0a6:	6891      	ldr	r1, [r2, #8]
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	430a      	orrs	r2, r1
 800a0ac:	609a      	str	r2, [r3, #8]
 800a0ae:	e006      	b.n	800a0be <DBGMCU_APB1PeriphConfig+0x2e>
  }
  else
  {
    DBGMCU->APB1FZ &= ~DBGMCU_Periph;
 800a0b0:	4b05      	ldr	r3, [pc, #20]	; (800a0c8 <DBGMCU_APB1PeriphConfig+0x38>)
 800a0b2:	4a05      	ldr	r2, [pc, #20]	; (800a0c8 <DBGMCU_APB1PeriphConfig+0x38>)
 800a0b4:	6891      	ldr	r1, [r2, #8]
 800a0b6:	687a      	ldr	r2, [r7, #4]
 800a0b8:	43d2      	mvns	r2, r2
 800a0ba:	400a      	ands	r2, r1
 800a0bc:	609a      	str	r2, [r3, #8]
  }
}
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr
 800a0c8:	e0042000 	.word	0xe0042000

0800a0cc <DBGMCU_APB2PeriphConfig>:
  * @param  NewState: new state of the specified peripheral in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_APB2PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB2PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a0d8:	78fb      	ldrb	r3, [r7, #3]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d006      	beq.n	800a0ec <DBGMCU_APB2PeriphConfig+0x20>
  {
    DBGMCU->APB2FZ |= DBGMCU_Periph;
 800a0de:	4b09      	ldr	r3, [pc, #36]	; (800a104 <DBGMCU_APB2PeriphConfig+0x38>)
 800a0e0:	4a08      	ldr	r2, [pc, #32]	; (800a104 <DBGMCU_APB2PeriphConfig+0x38>)
 800a0e2:	68d1      	ldr	r1, [r2, #12]
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	430a      	orrs	r2, r1
 800a0e8:	60da      	str	r2, [r3, #12]
 800a0ea:	e006      	b.n	800a0fa <DBGMCU_APB2PeriphConfig+0x2e>
  }
  else
  {
    DBGMCU->APB2FZ &= ~DBGMCU_Periph;
 800a0ec:	4b05      	ldr	r3, [pc, #20]	; (800a104 <DBGMCU_APB2PeriphConfig+0x38>)
 800a0ee:	4a05      	ldr	r2, [pc, #20]	; (800a104 <DBGMCU_APB2PeriphConfig+0x38>)
 800a0f0:	68d1      	ldr	r1, [r2, #12]
 800a0f2:	687a      	ldr	r2, [r7, #4]
 800a0f4:	43d2      	mvns	r2, r2
 800a0f6:	400a      	ands	r2, r1
 800a0f8:	60da      	str	r2, [r3, #12]
  }
}
 800a0fa:	370c      	adds	r7, #12
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr
 800a104:	e0042000 	.word	0xe0042000

0800a108 <DCMI_DeInit>:
  * @brief  Deinitializes the DCMI registers to their default reset values.
  * @param  None
  * @retval None
  */
void DCMI_DeInit(void)
{
 800a108:	b480      	push	{r7}
 800a10a:	af00      	add	r7, sp, #0
  DCMI->CR = 0x0;
 800a10c:	4b0c      	ldr	r3, [pc, #48]	; (800a140 <DCMI_DeInit+0x38>)
 800a10e:	2200      	movs	r2, #0
 800a110:	601a      	str	r2, [r3, #0]
  DCMI->IER = 0x0;
 800a112:	4b0b      	ldr	r3, [pc, #44]	; (800a140 <DCMI_DeInit+0x38>)
 800a114:	2200      	movs	r2, #0
 800a116:	60da      	str	r2, [r3, #12]
  DCMI->ICR = 0x1F;
 800a118:	4b09      	ldr	r3, [pc, #36]	; (800a140 <DCMI_DeInit+0x38>)
 800a11a:	221f      	movs	r2, #31
 800a11c:	615a      	str	r2, [r3, #20]
  DCMI->ESCR = 0x0;
 800a11e:	4b08      	ldr	r3, [pc, #32]	; (800a140 <DCMI_DeInit+0x38>)
 800a120:	2200      	movs	r2, #0
 800a122:	619a      	str	r2, [r3, #24]
  DCMI->ESUR = 0x0;
 800a124:	4b06      	ldr	r3, [pc, #24]	; (800a140 <DCMI_DeInit+0x38>)
 800a126:	2200      	movs	r2, #0
 800a128:	61da      	str	r2, [r3, #28]
  DCMI->CWSTRTR = 0x0;
 800a12a:	4b05      	ldr	r3, [pc, #20]	; (800a140 <DCMI_DeInit+0x38>)
 800a12c:	2200      	movs	r2, #0
 800a12e:	621a      	str	r2, [r3, #32]
  DCMI->CWSIZER = 0x0;
 800a130:	4b03      	ldr	r3, [pc, #12]	; (800a140 <DCMI_DeInit+0x38>)
 800a132:	2200      	movs	r2, #0
 800a134:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a136:	46bd      	mov	sp, r7
 800a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13c:	4770      	bx	lr
 800a13e:	bf00      	nop
 800a140:	50050000 	.word	0x50050000

0800a144 <DCMI_Init>:
  * @param  DCMI_InitStruct: pointer to a DCMI_InitTypeDef structure that contains 
  *         the configuration information for the DCMI.
  * @retval None
  */
void DCMI_Init(DCMI_InitTypeDef* DCMI_InitStruct)
{
 800a144:	b480      	push	{r7}
 800a146:	b085      	sub	sp, #20
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  uint32_t temp = 0x0;
 800a14c:	2300      	movs	r3, #0
 800a14e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DCMI_CAPTURE_RATE(DCMI_InitStruct->DCMI_CaptureRate));
  assert_param(IS_DCMI_EXTENDED_DATA(DCMI_InitStruct->DCMI_ExtendedDataMode));

  /* The DCMI configuration registers should be programmed correctly before 
  enabling the CR_ENABLE Bit and the CR_CAPTURE Bit */
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
 800a150:	4a1a      	ldr	r2, [pc, #104]	; (800a1bc <DCMI_Init+0x78>)
 800a152:	4b1a      	ldr	r3, [pc, #104]	; (800a1bc <DCMI_Init+0x78>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a15a:	f023 0301 	bic.w	r3, r3, #1
 800a15e:	6013      	str	r3, [r2, #0]
   
  /* Reset the old DCMI configuration */
  temp = DCMI->CR;
 800a160:	4b16      	ldr	r3, [pc, #88]	; (800a1bc <DCMI_Init+0x78>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	60fb      	str	r3, [r7, #12]
  
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a16c:	f023 0302 	bic.w	r3, r3, #2
 800a170:	60fb      	str	r3, [r7, #12]
                      DCMI_CR_HSPOL  | DCMI_CR_VSPOL | DCMI_CR_FCRC_0 | 
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	881a      	ldrh	r2, [r3, #0]
                     DCMI_InitStruct->DCMI_SynchroMode |
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	885b      	ldrh	r3, [r3, #2]
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 800a17a:	4313      	orrs	r3, r2
 800a17c:	b29a      	uxth	r2, r3
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	889b      	ldrh	r3, [r3, #4]
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 800a182:	4313      	orrs	r3, r2
 800a184:	b29a      	uxth	r2, r3
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	88db      	ldrh	r3, [r3, #6]
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 800a18a:	4313      	orrs	r3, r2
 800a18c:	b29a      	uxth	r2, r3
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	891b      	ldrh	r3, [r3, #8]
                     DCMI_InitStruct->DCMI_CaptureRate |
 800a192:	4313      	orrs	r3, r2
 800a194:	b29a      	uxth	r2, r3
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	895b      	ldrh	r3, [r3, #10]
 800a19a:	4313      	orrs	r3, r2
 800a19c:	b29a      	uxth	r2, r3
                     DCMI_InitStruct->DCMI_ExtendedDataMode);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	899b      	ldrh	r3, [r3, #12]
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	b29b      	uxth	r3, r3
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
                      DCMI_CR_HSPOL  | DCMI_CR_VSPOL | DCMI_CR_FCRC_0 | 
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
 800a1a6:	68fa      	ldr	r2, [r7, #12]
 800a1a8:	4313      	orrs	r3, r2
 800a1aa:	60fb      	str	r3, [r7, #12]
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
                     DCMI_InitStruct->DCMI_ExtendedDataMode);

  DCMI->CR = temp;                              
 800a1ac:	4b03      	ldr	r3, [pc, #12]	; (800a1bc <DCMI_Init+0x78>)
 800a1ae:	68fa      	ldr	r2, [r7, #12]
 800a1b0:	601a      	str	r2, [r3, #0]
}
 800a1b2:	3714      	adds	r7, #20
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr
 800a1bc:	50050000 	.word	0x50050000

0800a1c0 <DCMI_StructInit>:
  * @param  DCMI_InitStruct : pointer to a DCMI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DCMI_StructInit(DCMI_InitTypeDef* DCMI_InitStruct)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b083      	sub	sp, #12
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  DCMI_InitStruct->DCMI_CaptureMode = DCMI_CaptureMode_Continuous;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	801a      	strh	r2, [r3, #0]
  DCMI_InitStruct->DCMI_SynchroMode = DCMI_SynchroMode_Hardware;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	805a      	strh	r2, [r3, #2]
  DCMI_InitStruct->DCMI_PCKPolarity = DCMI_PCKPolarity_Falling;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	809a      	strh	r2, [r3, #4]
  DCMI_InitStruct->DCMI_VSPolarity = DCMI_VSPolarity_Low;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	80da      	strh	r2, [r3, #6]
  DCMI_InitStruct->DCMI_HSPolarity = DCMI_HSPolarity_Low;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	811a      	strh	r2, [r3, #8]
  DCMI_InitStruct->DCMI_CaptureRate = DCMI_CaptureRate_All_Frame;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	815a      	strh	r2, [r3, #10]
  DCMI_InitStruct->DCMI_ExtendedDataMode = DCMI_ExtendedDataMode_8b;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	819a      	strh	r2, [r3, #12]
}
 800a1f2:	370c      	adds	r7, #12
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr

0800a1fc <DCMI_CROPConfig>:
  * @param  DCMI_CROPInitStruct:  pointer to a DCMI_CROPInitTypeDef structure that 
  *         contains the configuration information for the DCMI peripheral CROP mode.
  * @retval None
  */
void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
{  
 800a1fc:	b480      	push	{r7}
 800a1fe:	b083      	sub	sp, #12
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 800a204:	4b0b      	ldr	r3, [pc, #44]	; (800a234 <DCMI_CROPConfig+0x38>)
 800a206:	687a      	ldr	r2, [r7, #4]
 800a208:	8852      	ldrh	r2, [r2, #2]
 800a20a:	4611      	mov	r1, r2
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));
 800a20c:	687a      	ldr	r2, [r7, #4]
 800a20e:	8812      	ldrh	r2, [r2, #0]
 800a210:	0412      	lsls	r2, r2, #16
  * @retval None
  */
void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
{  
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 800a212:	430a      	orrs	r2, r1
 800a214:	621a      	str	r2, [r3, #32]
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));

  /* Sets the CROP window size */
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 800a216:	4b07      	ldr	r3, [pc, #28]	; (800a234 <DCMI_CROPConfig+0x38>)
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	88d2      	ldrh	r2, [r2, #6]
 800a21c:	4611      	mov	r1, r2
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	8892      	ldrh	r2, [r2, #4]
 800a222:	0412      	lsls	r2, r2, #16
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));

  /* Sets the CROP window size */
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 800a224:	430a      	orrs	r2, r1
 800a226:	625a      	str	r2, [r3, #36]	; 0x24
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
}
 800a228:	370c      	adds	r7, #12
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr
 800a232:	bf00      	nop
 800a234:	50050000 	.word	0x50050000

0800a238 <DCMI_CROPCmd>:
  * @param  NewState: new state of the DCMI Crop feature. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_CROPCmd(FunctionalState NewState)
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	4603      	mov	r3, r0
 800a240:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800a242:	79fb      	ldrb	r3, [r7, #7]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d006      	beq.n	800a256 <DCMI_CROPCmd+0x1e>
  {
    /* Enable the DCMI Crop feature */
    DCMI->CR |= (uint32_t)DCMI_CR_CROP;
 800a248:	4b08      	ldr	r3, [pc, #32]	; (800a26c <DCMI_CROPCmd+0x34>)
 800a24a:	4a08      	ldr	r2, [pc, #32]	; (800a26c <DCMI_CROPCmd+0x34>)
 800a24c:	6812      	ldr	r2, [r2, #0]
 800a24e:	f042 0204 	orr.w	r2, r2, #4
 800a252:	601a      	str	r2, [r3, #0]
 800a254:	e005      	b.n	800a262 <DCMI_CROPCmd+0x2a>
  }
  else
  {
    /* Disable the DCMI Crop feature */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CROP;
 800a256:	4b05      	ldr	r3, [pc, #20]	; (800a26c <DCMI_CROPCmd+0x34>)
 800a258:	4a04      	ldr	r2, [pc, #16]	; (800a26c <DCMI_CROPCmd+0x34>)
 800a25a:	6812      	ldr	r2, [r2, #0]
 800a25c:	f022 0204 	bic.w	r2, r2, #4
 800a260:	601a      	str	r2, [r3, #0]
  }
}
 800a262:	370c      	adds	r7, #12
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr
 800a26c:	50050000 	.word	0x50050000

0800a270 <DCMI_SetEmbeddedSynchroCodes>:
  * @param  DCMI_CodesInitTypeDef: pointer to a DCMI_CodesInitTypeDef structure that
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
 800a270:	b480      	push	{r7}
 800a272:	b083      	sub	sp, #12
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 800a278:	4b0a      	ldr	r3, [pc, #40]	; (800a2a4 <DCMI_SetEmbeddedSynchroCodes+0x34>)
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	7812      	ldrb	r2, [r2, #0]
 800a27e:	4611      	mov	r1, r2
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 800a280:	687a      	ldr	r2, [r7, #4]
 800a282:	7852      	ldrb	r2, [r2, #1]
 800a284:	0212      	lsls	r2, r2, #8
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 800a286:	4311      	orrs	r1, r2
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	7892      	ldrb	r2, [r2, #2]
 800a28c:	0412      	lsls	r2, r2, #16
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 800a28e:	4311      	orrs	r1, r2
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
 800a290:	687a      	ldr	r2, [r7, #4]
 800a292:	78d2      	ldrb	r2, [r2, #3]
 800a294:	0612      	lsls	r2, r2, #24
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 800a296:	430a      	orrs	r2, r1
 800a298:	619a      	str	r2, [r3, #24]
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
}
 800a29a:	370c      	adds	r7, #12
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr
 800a2a4:	50050000 	.word	0x50050000

0800a2a8 <DCMI_JPEGCmd>:
  * @param  NewState: new state of the DCMI JPEG format. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_JPEGCmd(FunctionalState NewState)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b083      	sub	sp, #12
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 
  if (NewState != DISABLE)
 800a2b2:	79fb      	ldrb	r3, [r7, #7]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d006      	beq.n	800a2c6 <DCMI_JPEGCmd+0x1e>
  {
    /* Enable the DCMI JPEG format */
    DCMI->CR |= (uint32_t)DCMI_CR_JPEG;
 800a2b8:	4b08      	ldr	r3, [pc, #32]	; (800a2dc <DCMI_JPEGCmd+0x34>)
 800a2ba:	4a08      	ldr	r2, [pc, #32]	; (800a2dc <DCMI_JPEGCmd+0x34>)
 800a2bc:	6812      	ldr	r2, [r2, #0]
 800a2be:	f042 0208 	orr.w	r2, r2, #8
 800a2c2:	601a      	str	r2, [r3, #0]
 800a2c4:	e005      	b.n	800a2d2 <DCMI_JPEGCmd+0x2a>
  }
  else
  {
    /* Disable the DCMI JPEG format */
    DCMI->CR &= ~(uint32_t)DCMI_CR_JPEG;
 800a2c6:	4b05      	ldr	r3, [pc, #20]	; (800a2dc <DCMI_JPEGCmd+0x34>)
 800a2c8:	4a04      	ldr	r2, [pc, #16]	; (800a2dc <DCMI_JPEGCmd+0x34>)
 800a2ca:	6812      	ldr	r2, [r2, #0]
 800a2cc:	f022 0208 	bic.w	r2, r2, #8
 800a2d0:	601a      	str	r2, [r3, #0]
  }
}
 800a2d2:	370c      	adds	r7, #12
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr
 800a2dc:	50050000 	.word	0x50050000

0800a2e0 <DCMI_Cmd>:
  * @param  NewState: new state of the DCMI interface. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_Cmd(FunctionalState NewState)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b083      	sub	sp, #12
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800a2ea:	79fb      	ldrb	r3, [r7, #7]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d006      	beq.n	800a2fe <DCMI_Cmd+0x1e>
  {
    /* Enable the DCMI by setting ENABLE bit */
    DCMI->CR |= (uint32_t)DCMI_CR_ENABLE;
 800a2f0:	4b08      	ldr	r3, [pc, #32]	; (800a314 <DCMI_Cmd+0x34>)
 800a2f2:	4a08      	ldr	r2, [pc, #32]	; (800a314 <DCMI_Cmd+0x34>)
 800a2f4:	6812      	ldr	r2, [r2, #0]
 800a2f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a2fa:	601a      	str	r2, [r3, #0]
 800a2fc:	e005      	b.n	800a30a <DCMI_Cmd+0x2a>
  }
  else
  {
    /* Disable the DCMI by clearing ENABLE bit */
    DCMI->CR &= ~(uint32_t)DCMI_CR_ENABLE;
 800a2fe:	4b05      	ldr	r3, [pc, #20]	; (800a314 <DCMI_Cmd+0x34>)
 800a300:	4a04      	ldr	r2, [pc, #16]	; (800a314 <DCMI_Cmd+0x34>)
 800a302:	6812      	ldr	r2, [r2, #0]
 800a304:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a308:	601a      	str	r2, [r3, #0]
  }
}
 800a30a:	370c      	adds	r7, #12
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr
 800a314:	50050000 	.word	0x50050000

0800a318 <DCMI_CaptureCmd>:
  * @param  NewState: new state of the DCMI capture. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_CaptureCmd(FunctionalState NewState)
{
 800a318:	b480      	push	{r7}
 800a31a:	b083      	sub	sp, #12
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	4603      	mov	r3, r0
 800a320:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800a322:	79fb      	ldrb	r3, [r7, #7]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d006      	beq.n	800a336 <DCMI_CaptureCmd+0x1e>
  {
    /* Enable the DCMI Capture */
    DCMI->CR |= (uint32_t)DCMI_CR_CAPTURE;
 800a328:	4b08      	ldr	r3, [pc, #32]	; (800a34c <DCMI_CaptureCmd+0x34>)
 800a32a:	4a08      	ldr	r2, [pc, #32]	; (800a34c <DCMI_CaptureCmd+0x34>)
 800a32c:	6812      	ldr	r2, [r2, #0]
 800a32e:	f042 0201 	orr.w	r2, r2, #1
 800a332:	601a      	str	r2, [r3, #0]
 800a334:	e005      	b.n	800a342 <DCMI_CaptureCmd+0x2a>
  }
  else
  {
    /* Disable the DCMI Capture */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CAPTURE;
 800a336:	4b05      	ldr	r3, [pc, #20]	; (800a34c <DCMI_CaptureCmd+0x34>)
 800a338:	4a04      	ldr	r2, [pc, #16]	; (800a34c <DCMI_CaptureCmd+0x34>)
 800a33a:	6812      	ldr	r2, [r2, #0]
 800a33c:	f022 0201 	bic.w	r2, r2, #1
 800a340:	601a      	str	r2, [r3, #0]
  }
}
 800a342:	370c      	adds	r7, #12
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr
 800a34c:	50050000 	.word	0x50050000

0800a350 <DCMI_ReadData>:
  * @brief  Reads the data stored in the DR register.
  * @param  None 
  * @retval Data register value
  */
uint32_t DCMI_ReadData(void)
{
 800a350:	b480      	push	{r7}
 800a352:	af00      	add	r7, sp, #0
  return DCMI->DR;
 800a354:	4b03      	ldr	r3, [pc, #12]	; (800a364 <DCMI_ReadData+0x14>)
 800a356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800a358:	4618      	mov	r0, r3
 800a35a:	46bd      	mov	sp, r7
 800a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a360:	4770      	bx	lr
 800a362:	bf00      	nop
 800a364:	50050000 	.word	0x50050000

0800a368 <DCMI_ITConfig>:
  * @param  NewState: new state of the specified DCMI interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_ITConfig(uint16_t DCMI_IT, FunctionalState NewState)
{
 800a368:	b480      	push	{r7}
 800a36a:	b083      	sub	sp, #12
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	4602      	mov	r2, r0
 800a370:	460b      	mov	r3, r1
 800a372:	80fa      	strh	r2, [r7, #6]
 800a374:	717b      	strb	r3, [r7, #5]
  /* Check the parameters */
  assert_param(IS_DCMI_CONFIG_IT(DCMI_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800a376:	797b      	ldrb	r3, [r7, #5]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d006      	beq.n	800a38a <DCMI_ITConfig+0x22>
  {
    /* Enable the Interrupt sources */
    DCMI->IER |= DCMI_IT;
 800a37c:	4b09      	ldr	r3, [pc, #36]	; (800a3a4 <DCMI_ITConfig+0x3c>)
 800a37e:	4a09      	ldr	r2, [pc, #36]	; (800a3a4 <DCMI_ITConfig+0x3c>)
 800a380:	68d1      	ldr	r1, [r2, #12]
 800a382:	88fa      	ldrh	r2, [r7, #6]
 800a384:	430a      	orrs	r2, r1
 800a386:	60da      	str	r2, [r3, #12]
 800a388:	e007      	b.n	800a39a <DCMI_ITConfig+0x32>
  }
  else
  {
    /* Disable the Interrupt sources */
    DCMI->IER &= (uint16_t)(~DCMI_IT);
 800a38a:	4b06      	ldr	r3, [pc, #24]	; (800a3a4 <DCMI_ITConfig+0x3c>)
 800a38c:	4a05      	ldr	r2, [pc, #20]	; (800a3a4 <DCMI_ITConfig+0x3c>)
 800a38e:	68d1      	ldr	r1, [r2, #12]
 800a390:	88fa      	ldrh	r2, [r7, #6]
 800a392:	43d2      	mvns	r2, r2
 800a394:	b292      	uxth	r2, r2
 800a396:	400a      	ands	r2, r1
 800a398:	60da      	str	r2, [r3, #12]
  }  
}
 800a39a:	370c      	adds	r7, #12
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr
 800a3a4:	50050000 	.word	0x50050000

0800a3a8 <DCMI_GetFlagStatus>:
  *            @arg DCMI_FLAG_VSYNC: VSYNC flag mask
  *            @arg DCMI_FLAG_FNE: Fifo not empty flag mask
  * @retval The new state of DCMI_FLAG (SET or RESET).
  */
FlagStatus DCMI_GetFlagStatus(uint16_t DCMI_FLAG)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b087      	sub	sp, #28
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	75fb      	strb	r3, [r7, #23]
  uint32_t dcmireg, tempreg = 0;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_DCMI_GET_FLAG(DCMI_FLAG));
  
  /* Get the DCMI register index */
  dcmireg = (((uint16_t)DCMI_FLAG) >> 12);
 800a3ba:	88fb      	ldrh	r3, [r7, #6]
 800a3bc:	0b1b      	lsrs	r3, r3, #12
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	60fb      	str	r3, [r7, #12]
  
  if (dcmireg == 0x00) /* The FLAG is in RISR register */
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d103      	bne.n	800a3d0 <DCMI_GetFlagStatus+0x28>
  {
    tempreg= DCMI->RISR;
 800a3c8:	4b0f      	ldr	r3, [pc, #60]	; (800a408 <DCMI_GetFlagStatus+0x60>)
 800a3ca:	689b      	ldr	r3, [r3, #8]
 800a3cc:	613b      	str	r3, [r7, #16]
 800a3ce:	e009      	b.n	800a3e4 <DCMI_GetFlagStatus+0x3c>
  }
  else if (dcmireg == 0x02) /* The FLAG is in SR register */
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2b02      	cmp	r3, #2
 800a3d4:	d103      	bne.n	800a3de <DCMI_GetFlagStatus+0x36>
  {
    tempreg = DCMI->SR;
 800a3d6:	4b0c      	ldr	r3, [pc, #48]	; (800a408 <DCMI_GetFlagStatus+0x60>)
 800a3d8:	685b      	ldr	r3, [r3, #4]
 800a3da:	613b      	str	r3, [r7, #16]
 800a3dc:	e002      	b.n	800a3e4 <DCMI_GetFlagStatus+0x3c>
  }
  else /* The FLAG is in MISR register */
  {
    tempreg = DCMI->MISR;
 800a3de:	4b0a      	ldr	r3, [pc, #40]	; (800a408 <DCMI_GetFlagStatus+0x60>)
 800a3e0:	691b      	ldr	r3, [r3, #16]
 800a3e2:	613b      	str	r3, [r7, #16]
  }
  
  if ((tempreg & DCMI_FLAG) != (uint16_t)RESET )
 800a3e4:	88fa      	ldrh	r2, [r7, #6]
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	4013      	ands	r3, r2
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d002      	beq.n	800a3f4 <DCMI_GetFlagStatus+0x4c>
  {
    bitstatus = SET;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	75fb      	strb	r3, [r7, #23]
 800a3f2:	e001      	b.n	800a3f8 <DCMI_GetFlagStatus+0x50>
  }
  else
  {
    bitstatus = RESET;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the DCMI_FLAG status */
  return  bitstatus;
 800a3f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	371c      	adds	r7, #28
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr
 800a406:	bf00      	nop
 800a408:	50050000 	.word	0x50050000

0800a40c <DCMI_ClearFlag>:
  *            @arg DCMI_FLAG_VSYNCRI: VSYNC Raw flag mask
  *            @arg DCMI_FLAG_LINERI: Line Raw flag mask
  * @retval None
  */
void DCMI_ClearFlag(uint16_t DCMI_FLAG)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b083      	sub	sp, #12
 800a410:	af00      	add	r7, sp, #0
 800a412:	4603      	mov	r3, r0
 800a414:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_DCMI_CLEAR_FLAG(DCMI_FLAG));
  
  /* Clear the flag by writing in the ICR register 1 in the corresponding 
  Flag position*/
  
  DCMI->ICR = DCMI_FLAG;
 800a416:	4b04      	ldr	r3, [pc, #16]	; (800a428 <DCMI_ClearFlag+0x1c>)
 800a418:	88fa      	ldrh	r2, [r7, #6]
 800a41a:	615a      	str	r2, [r3, #20]
}
 800a41c:	370c      	adds	r7, #12
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr
 800a426:	bf00      	nop
 800a428:	50050000 	.word	0x50050000

0800a42c <DCMI_GetITStatus>:
  *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
  *            @arg DCMI_IT_LINE: Line interrupt mask
  * @retval The new state of DCMI_IT (SET or RESET).
  */
ITStatus DCMI_GetITStatus(uint16_t DCMI_IT)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b085      	sub	sp, #20
 800a430:	af00      	add	r7, sp, #0
 800a432:	4603      	mov	r3, r0
 800a434:	80fb      	strh	r3, [r7, #6]
  ITStatus bitstatus = RESET;
 800a436:	2300      	movs	r3, #0
 800a438:	73fb      	strb	r3, [r7, #15]
  uint32_t itstatus = 0;
 800a43a:	2300      	movs	r3, #0
 800a43c:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DCMI_GET_IT(DCMI_IT));
  
  itstatus = DCMI->MISR & DCMI_IT; /* Only masked interrupts are checked */
 800a43e:	4b0a      	ldr	r3, [pc, #40]	; (800a468 <DCMI_GetITStatus+0x3c>)
 800a440:	691a      	ldr	r2, [r3, #16]
 800a442:	88fb      	ldrh	r3, [r7, #6]
 800a444:	4013      	ands	r3, r2
 800a446:	60bb      	str	r3, [r7, #8]
  
  if ((itstatus != (uint16_t)RESET))
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d002      	beq.n	800a454 <DCMI_GetITStatus+0x28>
  {
    bitstatus = SET;
 800a44e:	2301      	movs	r3, #1
 800a450:	73fb      	strb	r3, [r7, #15]
 800a452:	e001      	b.n	800a458 <DCMI_GetITStatus+0x2c>
  }
  else
  {
    bitstatus = RESET;
 800a454:	2300      	movs	r3, #0
 800a456:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a458:	7bfb      	ldrb	r3, [r7, #15]
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3714      	adds	r7, #20
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr
 800a466:	bf00      	nop
 800a468:	50050000 	.word	0x50050000

0800a46c <DCMI_ClearITPendingBit>:
  *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
  *            @arg DCMI_IT_LINE: Line interrupt mask
  * @retval None
  */
void DCMI_ClearITPendingBit(uint16_t DCMI_IT)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b083      	sub	sp, #12
 800a470:	af00      	add	r7, sp, #0
 800a472:	4603      	mov	r3, r0
 800a474:	80fb      	strh	r3, [r7, #6]
  /* Clear the interrupt pending Bit by writing in the ICR register 1 in the 
  corresponding pending Bit position*/
  
  DCMI->ICR = DCMI_IT;
 800a476:	4b04      	ldr	r3, [pc, #16]	; (800a488 <DCMI_ClearITPendingBit+0x1c>)
 800a478:	88fa      	ldrh	r2, [r7, #6]
 800a47a:	615a      	str	r2, [r3, #20]
}
 800a47c:	370c      	adds	r7, #12
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr
 800a486:	bf00      	nop
 800a488:	50050000 	.word	0x50050000

0800a48c <DMA2D_DeInit>:
  * @param  None
  * @retval None
  */

void DMA2D_DeInit(void)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	af00      	add	r7, sp, #0
  /* Enable DMA2D reset state */
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2D, ENABLE);
 800a490:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800a494:	2101      	movs	r1, #1
 800a496:	f005 fbcf 	bl	800fc38 <RCC_AHB1PeriphResetCmd>
  /* Release DMA2D from reset state */
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2D, DISABLE);
 800a49a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800a49e:	2100      	movs	r1, #0
 800a4a0:	f005 fbca 	bl	800fc38 <RCC_AHB1PeriphResetCmd>
}
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop

0800a4a8 <DMA2D_Init>:
  * @param  DMA2D_InitStruct: pointer to a DMA2D_InitTypeDef structure that contains
  *         the configuration information for the specified DMA2D peripheral.
  * @retval None
  */
void DMA2D_Init(DMA2D_InitTypeDef* DMA2D_InitStruct)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b087      	sub	sp, #28
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]

  uint32_t outgreen = 0;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	617b      	str	r3, [r7, #20]
  uint32_t outred   = 0;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	613b      	str	r3, [r7, #16]
  uint32_t outalpha = 0;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	60fb      	str	r3, [r7, #12]
  uint32_t pixline  = 0;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA2D_OUTPUT_OFFSET(DMA2D_InitStruct->DMA2D_OutputOffset));
  assert_param(IS_DMA2D_LINE(DMA2D_InitStruct->DMA2D_NumberOfLine));
  assert_param(IS_DMA2D_PIXEL(DMA2D_InitStruct->DMA2D_PixelPerLine));

  /* Configures the DMA2D operation mode */
  DMA2D->CR &= (uint32_t)CR_MASK;
 800a4c0:	4a4f      	ldr	r2, [pc, #316]	; (800a600 <DMA2D_Init+0x158>)
 800a4c2:	4b4f      	ldr	r3, [pc, #316]	; (800a600 <DMA2D_Init+0x158>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f023 1303 	bic.w	r3, r3, #196611	; 0x30003
 800a4ca:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800a4ce:	6013      	str	r3, [r2, #0]
  DMA2D->CR |= (DMA2D_InitStruct->DMA2D_Mode);
 800a4d0:	4b4b      	ldr	r3, [pc, #300]	; (800a600 <DMA2D_Init+0x158>)
 800a4d2:	4a4b      	ldr	r2, [pc, #300]	; (800a600 <DMA2D_Init+0x158>)
 800a4d4:	6811      	ldr	r1, [r2, #0]
 800a4d6:	687a      	ldr	r2, [r7, #4]
 800a4d8:	6812      	ldr	r2, [r2, #0]
 800a4da:	430a      	orrs	r2, r1
 800a4dc:	601a      	str	r2, [r3, #0]

  /* Configures the color mode of the output image */
  DMA2D->OPFCCR &= ~(uint32_t)DMA2D_OPFCCR_CM;
 800a4de:	4b48      	ldr	r3, [pc, #288]	; (800a600 <DMA2D_Init+0x158>)
 800a4e0:	4a47      	ldr	r2, [pc, #284]	; (800a600 <DMA2D_Init+0x158>)
 800a4e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a4e4:	f022 0207 	bic.w	r2, r2, #7
 800a4e8:	635a      	str	r2, [r3, #52]	; 0x34
  DMA2D->OPFCCR |= (DMA2D_InitStruct->DMA2D_CMode);
 800a4ea:	4b45      	ldr	r3, [pc, #276]	; (800a600 <DMA2D_Init+0x158>)
 800a4ec:	4a44      	ldr	r2, [pc, #272]	; (800a600 <DMA2D_Init+0x158>)
 800a4ee:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	6852      	ldr	r2, [r2, #4]
 800a4f4:	430a      	orrs	r2, r1
 800a4f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Configures the output color */

  if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_ARGB8888)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d10c      	bne.n	800a51a <DMA2D_Init+0x72>
  {
    outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 8;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	021b      	lsls	r3, r3, #8
 800a506:	617b      	str	r3, [r7, #20]
    outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	691b      	ldr	r3, [r3, #16]
 800a50c:	041b      	lsls	r3, r3, #16
 800a50e:	613b      	str	r3, [r7, #16]
    outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 24;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	695b      	ldr	r3, [r3, #20]
 800a514:	061b      	lsls	r3, r3, #24
 800a516:	60fb      	str	r3, [r7, #12]
 800a518:	e03a      	b.n	800a590 <DMA2D_Init+0xe8>
  }
  else
  
    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_RGB888)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d10a      	bne.n	800a538 <DMA2D_Init+0x90>
    {
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 8;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	021b      	lsls	r3, r3, #8
 800a528:	617b      	str	r3, [r7, #20]
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	691b      	ldr	r3, [r3, #16]
 800a52e:	041b      	lsls	r3, r3, #16
 800a530:	613b      	str	r3, [r7, #16]
      outalpha = (uint32_t)0x00000000;
 800a532:	2300      	movs	r3, #0
 800a534:	60fb      	str	r3, [r7, #12]
 800a536:	e02b      	b.n	800a590 <DMA2D_Init+0xe8>
    }
     
  else

    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_RGB565)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	2b02      	cmp	r3, #2
 800a53e:	d10a      	bne.n	800a556 <DMA2D_Init+0xae>
    {
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 5;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	68db      	ldr	r3, [r3, #12]
 800a544:	015b      	lsls	r3, r3, #5
 800a546:	617b      	str	r3, [r7, #20]
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 11;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	691b      	ldr	r3, [r3, #16]
 800a54c:	02db      	lsls	r3, r3, #11
 800a54e:	613b      	str	r3, [r7, #16]
      outalpha = (uint32_t)0x00000000;
 800a550:	2300      	movs	r3, #0
 800a552:	60fb      	str	r3, [r7, #12]
 800a554:	e01c      	b.n	800a590 <DMA2D_Init+0xe8>
    }

  else

    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_ARGB1555)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	2b03      	cmp	r3, #3
 800a55c:	d10c      	bne.n	800a578 <DMA2D_Init+0xd0>
    {  
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 5;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	68db      	ldr	r3, [r3, #12]
 800a562:	015b      	lsls	r3, r3, #5
 800a564:	617b      	str	r3, [r7, #20]
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 10;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	691b      	ldr	r3, [r3, #16]
 800a56a:	029b      	lsls	r3, r3, #10
 800a56c:	613b      	str	r3, [r7, #16]
      outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 15;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	695b      	ldr	r3, [r3, #20]
 800a572:	03db      	lsls	r3, r3, #15
 800a574:	60fb      	str	r3, [r7, #12]
 800a576:	e00b      	b.n	800a590 <DMA2D_Init+0xe8>
    }

  else /* DMA2D_CMode = DMA2D_ARGB4444 */
  {
    outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 4;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	68db      	ldr	r3, [r3, #12]
 800a57c:	011b      	lsls	r3, r3, #4
 800a57e:	617b      	str	r3, [r7, #20]
    outred = DMA2D_InitStruct->DMA2D_OutputRed << 8;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	691b      	ldr	r3, [r3, #16]
 800a584:	021b      	lsls	r3, r3, #8
 800a586:	613b      	str	r3, [r7, #16]
    outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 12;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	695b      	ldr	r3, [r3, #20]
 800a58c:	031b      	lsls	r3, r3, #12
 800a58e:	60fb      	str	r3, [r7, #12]
  }  
  DMA2D->OCOLR |= ((outgreen) | (outred) | (DMA2D_InitStruct->DMA2D_OutputBlue) | (outalpha));
 800a590:	4b1b      	ldr	r3, [pc, #108]	; (800a600 <DMA2D_Init+0x158>)
 800a592:	4a1b      	ldr	r2, [pc, #108]	; (800a600 <DMA2D_Init+0x158>)
 800a594:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800a596:	6978      	ldr	r0, [r7, #20]
 800a598:	693a      	ldr	r2, [r7, #16]
 800a59a:	4310      	orrs	r0, r2
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	6892      	ldr	r2, [r2, #8]
 800a5a0:	4310      	orrs	r0, r2
 800a5a2:	68fa      	ldr	r2, [r7, #12]
 800a5a4:	4302      	orrs	r2, r0
 800a5a6:	430a      	orrs	r2, r1
 800a5a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configures the output memory address */
  DMA2D->OMAR = (DMA2D_InitStruct->DMA2D_OutputMemoryAdd);
 800a5aa:	4b15      	ldr	r3, [pc, #84]	; (800a600 <DMA2D_Init+0x158>)
 800a5ac:	687a      	ldr	r2, [r7, #4]
 800a5ae:	6992      	ldr	r2, [r2, #24]
 800a5b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Configure  the line Offset */
  DMA2D->OOR &= ~(uint32_t)DMA2D_OOR_LO;
 800a5b2:	4a13      	ldr	r2, [pc, #76]	; (800a600 <DMA2D_Init+0x158>)
 800a5b4:	4b12      	ldr	r3, [pc, #72]	; (800a600 <DMA2D_Init+0x158>)
 800a5b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800a5bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a5c0:	6413      	str	r3, [r2, #64]	; 0x40
  DMA2D->OOR |= (DMA2D_InitStruct->DMA2D_OutputOffset);
 800a5c2:	4b0f      	ldr	r3, [pc, #60]	; (800a600 <DMA2D_Init+0x158>)
 800a5c4:	4a0e      	ldr	r2, [pc, #56]	; (800a600 <DMA2D_Init+0x158>)
 800a5c6:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800a5c8:	687a      	ldr	r2, [r7, #4]
 800a5ca:	69d2      	ldr	r2, [r2, #28]
 800a5cc:	430a      	orrs	r2, r1
 800a5ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the number of line and pixel per line */
  pixline = DMA2D_InitStruct->DMA2D_PixelPerLine << 16; 
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d4:	041b      	lsls	r3, r3, #16
 800a5d6:	60bb      	str	r3, [r7, #8]
  DMA2D->NLR &= ~(DMA2D_NLR_NL | DMA2D_NLR_PL);
 800a5d8:	4b09      	ldr	r3, [pc, #36]	; (800a600 <DMA2D_Init+0x158>)
 800a5da:	4a09      	ldr	r2, [pc, #36]	; (800a600 <DMA2D_Init+0x158>)
 800a5dc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800a5de:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 800a5e2:	645a      	str	r2, [r3, #68]	; 0x44
  DMA2D->NLR |= ((DMA2D_InitStruct->DMA2D_NumberOfLine) | (pixline));
 800a5e4:	4b06      	ldr	r3, [pc, #24]	; (800a600 <DMA2D_Init+0x158>)
 800a5e6:	4a06      	ldr	r2, [pc, #24]	; (800a600 <DMA2D_Init+0x158>)
 800a5e8:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800a5ea:	687a      	ldr	r2, [r7, #4]
 800a5ec:	6a10      	ldr	r0, [r2, #32]
 800a5ee:	68ba      	ldr	r2, [r7, #8]
 800a5f0:	4302      	orrs	r2, r0
 800a5f2:	430a      	orrs	r2, r1
 800a5f4:	645a      	str	r2, [r3, #68]	; 0x44
  * @brief  Fills each DMA2D_InitStruct member with its default value.
  * @param  DMA2D_InitStruct: pointer to a DMA2D_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
}
 800a5f6:	371c      	adds	r7, #28
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr
 800a600:	4002b000 	.word	0x4002b000

0800a604 <DMA2D_StructInit>:
void DMA2D_StructInit(DMA2D_InitTypeDef* DMA2D_InitStruct)
{
 800a604:	b480      	push	{r7}
 800a606:	b083      	sub	sp, #12
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  /* Initialize the transfer mode member */
  DMA2D_InitStruct->DMA2D_Mode = DMA2D_M2M;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2200      	movs	r2, #0
 800a610:	601a      	str	r2, [r3, #0]

  /* Initialize the output color mode members */
  DMA2D_InitStruct->DMA2D_CMode = DMA2D_ARGB8888;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2200      	movs	r2, #0
 800a616:	605a      	str	r2, [r3, #4]

  /* Initialize the alpha and RGB values */
  DMA2D_InitStruct->DMA2D_OutputGreen = 0x00;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2200      	movs	r2, #0
 800a61c:	60da      	str	r2, [r3, #12]
  DMA2D_InitStruct->DMA2D_OutputBlue = 0x00;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2200      	movs	r2, #0
 800a622:	609a      	str	r2, [r3, #8]
  DMA2D_InitStruct->DMA2D_OutputRed = 0x00;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	611a      	str	r2, [r3, #16]
  DMA2D_InitStruct->DMA2D_OutputAlpha = 0x00;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2200      	movs	r2, #0
 800a62e:	615a      	str	r2, [r3, #20]

  /* Initialize the output memory address */
  DMA2D_InitStruct->DMA2D_OutputMemoryAdd = 0x00;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2200      	movs	r2, #0
 800a634:	619a      	str	r2, [r3, #24]

  /* Initialize the output offset */
  DMA2D_InitStruct->DMA2D_OutputOffset = 0x00;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2200      	movs	r2, #0
 800a63a:	61da      	str	r2, [r3, #28]

  /* Initialize the number of line and the number of pixel per line */
  DMA2D_InitStruct->DMA2D_NumberOfLine = 0x00;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2200      	movs	r2, #0
 800a640:	621a      	str	r2, [r3, #32]
  DMA2D_InitStruct->DMA2D_PixelPerLine = 0x00;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2200      	movs	r2, #0
 800a646:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a648:	370c      	adds	r7, #12
 800a64a:	46bd      	mov	sp, r7
 800a64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a650:	4770      	bx	lr
 800a652:	bf00      	nop

0800a654 <DMA2D_StartTransfer>:
  * @param 
  * @retval None
  */

void DMA2D_StartTransfer(void)
{
 800a654:	b480      	push	{r7}
 800a656:	af00      	add	r7, sp, #0
    /* Start DMA2D transfer by setting START bit */
    DMA2D->CR |= (uint32_t)DMA2D_CR_START;
 800a658:	4b04      	ldr	r3, [pc, #16]	; (800a66c <DMA2D_StartTransfer+0x18>)
 800a65a:	4a04      	ldr	r2, [pc, #16]	; (800a66c <DMA2D_StartTransfer+0x18>)
 800a65c:	6812      	ldr	r2, [r2, #0]
 800a65e:	f042 0201 	orr.w	r2, r2, #1
 800a662:	601a      	str	r2, [r3, #0]
}
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr
 800a66c:	4002b000 	.word	0x4002b000

0800a670 <DMA2D_AbortTransfer>:
  * @param
  * @retval None
  */

void DMA2D_AbortTransfer(void)
{
 800a670:	b480      	push	{r7}
 800a672:	af00      	add	r7, sp, #0
    /* Start DMA2D transfer by setting START bit */
    DMA2D->CR |= (uint32_t)DMA2D_CR_ABORT;
 800a674:	4b04      	ldr	r3, [pc, #16]	; (800a688 <DMA2D_AbortTransfer+0x18>)
 800a676:	4a04      	ldr	r2, [pc, #16]	; (800a688 <DMA2D_AbortTransfer+0x18>)
 800a678:	6812      	ldr	r2, [r2, #0]
 800a67a:	f042 0204 	orr.w	r2, r2, #4
 800a67e:	601a      	str	r2, [r3, #0]

}
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr
 800a688:	4002b000 	.word	0x4002b000

0800a68c <DMA2D_Suspend>:
  * @param  NewState: new state of the DMA2D peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA2D_Suspend(FunctionalState NewState)
{
 800a68c:	b480      	push	{r7}
 800a68e:	b083      	sub	sp, #12
 800a690:	af00      	add	r7, sp, #0
 800a692:	4603      	mov	r3, r0
 800a694:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a696:	79fb      	ldrb	r3, [r7, #7]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d006      	beq.n	800a6aa <DMA2D_Suspend+0x1e>
  {
    /* Suspend DMA2D transfer by setting STOP bit */
    DMA2D->CR |= (uint32_t)DMA2D_CR_SUSP;
 800a69c:	4b08      	ldr	r3, [pc, #32]	; (800a6c0 <DMA2D_Suspend+0x34>)
 800a69e:	4a08      	ldr	r2, [pc, #32]	; (800a6c0 <DMA2D_Suspend+0x34>)
 800a6a0:	6812      	ldr	r2, [r2, #0]
 800a6a2:	f042 0202 	orr.w	r2, r2, #2
 800a6a6:	601a      	str	r2, [r3, #0]
 800a6a8:	e005      	b.n	800a6b6 <DMA2D_Suspend+0x2a>
  }
  else
  {
    /* Continue DMA2D transfer by clearing STOP bit */
    DMA2D->CR &= ~(uint32_t)DMA2D_CR_SUSP;
 800a6aa:	4b05      	ldr	r3, [pc, #20]	; (800a6c0 <DMA2D_Suspend+0x34>)
 800a6ac:	4a04      	ldr	r2, [pc, #16]	; (800a6c0 <DMA2D_Suspend+0x34>)
 800a6ae:	6812      	ldr	r2, [r2, #0]
 800a6b0:	f022 0202 	bic.w	r2, r2, #2
 800a6b4:	601a      	str	r2, [r3, #0]
  }
}
 800a6b6:	370c      	adds	r7, #12
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr
 800a6c0:	4002b000 	.word	0x4002b000

0800a6c4 <DMA2D_FGConfig>:
  * @param  DMA2D_FGStruct: pointer to a DMA2D_FGTypeDef structure that contains
  *         the configuration information for the specified Background.
  * @retval None
  */
void DMA2D_FGConfig(DMA2D_FG_InitTypeDef* DMA2D_FG_InitStruct)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b089      	sub	sp, #36	; 0x24
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]

  uint32_t fg_clutcolormode = 0;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	61fb      	str	r3, [r7, #28]
  uint32_t fg_clutsize = 0;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	61bb      	str	r3, [r7, #24]
  uint32_t fg_alpha_mode = 0;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	617b      	str	r3, [r7, #20]
  uint32_t fg_alphavalue = 0;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	613b      	str	r3, [r7, #16]
  uint32_t fg_colorgreen = 0;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	60fb      	str	r3, [r7, #12]
  uint32_t fg_colorred = 0;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA2D_FGC_BLUE(DMA2D_FG_InitStruct->DMA2D_FGC_BLUE));
  assert_param(IS_DMA2D_FGC_GREEN(DMA2D_FG_InitStruct->DMA2D_FGC_GREEN));
  assert_param(IS_DMA2D_FGC_RED(DMA2D_FG_InitStruct->DMA2D_FGC_RED));

  /* Configures the FG memory address */
  DMA2D->FGMAR = (DMA2D_FG_InitStruct->DMA2D_FGMA);
 800a6e4:	4b2c      	ldr	r3, [pc, #176]	; (800a798 <DMA2D_FGConfig+0xd4>)
 800a6e6:	687a      	ldr	r2, [r7, #4]
 800a6e8:	6812      	ldr	r2, [r2, #0]
 800a6ea:	60da      	str	r2, [r3, #12]

  /* Configures the FG offset */
  DMA2D->FGOR &= ~(uint32_t)DMA2D_FGOR_LO;
 800a6ec:	4a2a      	ldr	r2, [pc, #168]	; (800a798 <DMA2D_FGConfig+0xd4>)
 800a6ee:	4b2a      	ldr	r3, [pc, #168]	; (800a798 <DMA2D_FGConfig+0xd4>)
 800a6f0:	691b      	ldr	r3, [r3, #16]
 800a6f2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800a6f6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a6fa:	6113      	str	r3, [r2, #16]
  DMA2D->FGOR |= (DMA2D_FG_InitStruct->DMA2D_FGO);
 800a6fc:	4b26      	ldr	r3, [pc, #152]	; (800a798 <DMA2D_FGConfig+0xd4>)
 800a6fe:	4a26      	ldr	r2, [pc, #152]	; (800a798 <DMA2D_FGConfig+0xd4>)
 800a700:	6911      	ldr	r1, [r2, #16]
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	6852      	ldr	r2, [r2, #4]
 800a706:	430a      	orrs	r2, r1
 800a708:	611a      	str	r2, [r3, #16]

  /* Configures foreground Pixel Format Convertor */
  DMA2D->FGPFCCR &= (uint32_t)PFCCR_MASK;
 800a70a:	4a23      	ldr	r2, [pc, #140]	; (800a798 <DMA2D_FGConfig+0xd4>)
 800a70c:	4b22      	ldr	r3, [pc, #136]	; (800a798 <DMA2D_FGConfig+0xd4>)
 800a70e:	69d9      	ldr	r1, [r3, #28]
 800a710:	4b22      	ldr	r3, [pc, #136]	; (800a79c <DMA2D_FGConfig+0xd8>)
 800a712:	400b      	ands	r3, r1
 800a714:	61d3      	str	r3, [r2, #28]
  fg_clutcolormode = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_CM << 4;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	68db      	ldr	r3, [r3, #12]
 800a71a:	011b      	lsls	r3, r3, #4
 800a71c:	61fb      	str	r3, [r7, #28]
  fg_clutsize = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_SIZE << 8;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	691b      	ldr	r3, [r3, #16]
 800a722:	021b      	lsls	r3, r3, #8
 800a724:	61bb      	str	r3, [r7, #24]
  fg_alpha_mode = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_MODE << 16;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	695b      	ldr	r3, [r3, #20]
 800a72a:	041b      	lsls	r3, r3, #16
 800a72c:	617b      	str	r3, [r7, #20]
  fg_alphavalue = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_VALUE << 24;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	699b      	ldr	r3, [r3, #24]
 800a732:	061b      	lsls	r3, r3, #24
 800a734:	613b      	str	r3, [r7, #16]
  DMA2D->FGPFCCR |= (DMA2D_FG_InitStruct->DMA2D_FGCM | fg_clutcolormode | fg_clutsize | \
 800a736:	4b18      	ldr	r3, [pc, #96]	; (800a798 <DMA2D_FGConfig+0xd4>)
 800a738:	4a17      	ldr	r2, [pc, #92]	; (800a798 <DMA2D_FGConfig+0xd4>)
 800a73a:	69d1      	ldr	r1, [r2, #28]
 800a73c:	687a      	ldr	r2, [r7, #4]
 800a73e:	6890      	ldr	r0, [r2, #8]
 800a740:	69fa      	ldr	r2, [r7, #28]
 800a742:	4310      	orrs	r0, r2
 800a744:	69ba      	ldr	r2, [r7, #24]
 800a746:	4310      	orrs	r0, r2
 800a748:	697a      	ldr	r2, [r7, #20]
 800a74a:	4310      	orrs	r0, r2
                    fg_alpha_mode | fg_alphavalue);
 800a74c:	693a      	ldr	r2, [r7, #16]
 800a74e:	4302      	orrs	r2, r0
  DMA2D->FGPFCCR &= (uint32_t)PFCCR_MASK;
  fg_clutcolormode = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_CM << 4;
  fg_clutsize = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_SIZE << 8;
  fg_alpha_mode = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_MODE << 16;
  fg_alphavalue = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_VALUE << 24;
  DMA2D->FGPFCCR |= (DMA2D_FG_InitStruct->DMA2D_FGCM | fg_clutcolormode | fg_clutsize | \
 800a750:	430a      	orrs	r2, r1
 800a752:	61da      	str	r2, [r3, #28]
                    fg_alpha_mode | fg_alphavalue);

  /* Configures foreground color */
  DMA2D->FGCOLR &= ~(DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED);
 800a754:	4b10      	ldr	r3, [pc, #64]	; (800a798 <DMA2D_FGConfig+0xd4>)
 800a756:	4a10      	ldr	r2, [pc, #64]	; (800a798 <DMA2D_FGConfig+0xd4>)
 800a758:	6a12      	ldr	r2, [r2, #32]
 800a75a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800a75e:	621a      	str	r2, [r3, #32]
  fg_colorgreen = DMA2D_FG_InitStruct->DMA2D_FGC_GREEN << 8;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6a1b      	ldr	r3, [r3, #32]
 800a764:	021b      	lsls	r3, r3, #8
 800a766:	60fb      	str	r3, [r7, #12]
  fg_colorred = DMA2D_FG_InitStruct->DMA2D_FGC_RED << 16;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76c:	041b      	lsls	r3, r3, #16
 800a76e:	60bb      	str	r3, [r7, #8]
  DMA2D->FGCOLR |= (DMA2D_FG_InitStruct->DMA2D_FGC_BLUE | fg_colorgreen | fg_colorred);
 800a770:	4b09      	ldr	r3, [pc, #36]	; (800a798 <DMA2D_FGConfig+0xd4>)
 800a772:	4a09      	ldr	r2, [pc, #36]	; (800a798 <DMA2D_FGConfig+0xd4>)
 800a774:	6a11      	ldr	r1, [r2, #32]
 800a776:	687a      	ldr	r2, [r7, #4]
 800a778:	69d0      	ldr	r0, [r2, #28]
 800a77a:	68fa      	ldr	r2, [r7, #12]
 800a77c:	4310      	orrs	r0, r2
 800a77e:	68ba      	ldr	r2, [r7, #8]
 800a780:	4302      	orrs	r2, r0
 800a782:	430a      	orrs	r2, r1
 800a784:	621a      	str	r2, [r3, #32]

  /* Configures foreground CLUT memory address */
  DMA2D->FGCMAR = DMA2D_FG_InitStruct->DMA2D_FGCMAR;
 800a786:	4b04      	ldr	r3, [pc, #16]	; (800a798 <DMA2D_FGConfig+0xd4>)
 800a788:	687a      	ldr	r2, [r7, #4]
 800a78a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a78c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800a78e:	3724      	adds	r7, #36	; 0x24
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr
 800a798:	4002b000 	.word	0x4002b000
 800a79c:	00fc00c0 	.word	0x00fc00c0

0800a7a0 <DMA2D_FG_StructInit>:
  * @param  DMA2D_FGStruct: pointer to a DMA2D_FGTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DMA2D_FG_StructInit(DMA2D_FG_InitTypeDef* DMA2D_FG_InitStruct)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b083      	sub	sp, #12
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  /*!< Initialize the DMA2D foreground memory address */
  DMA2D_FG_InitStruct->DMA2D_FGMA = 0x00;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	601a      	str	r2, [r3, #0]

  /*!< Initialize the DMA2D foreground offset */
  DMA2D_FG_InitStruct->DMA2D_FGO = 0x00;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	605a      	str	r2, [r3, #4]

  /*!< Initialize the DMA2D foreground color mode */
  DMA2D_FG_InitStruct->DMA2D_FGCM = CM_ARGB8888;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	609a      	str	r2, [r3, #8]

  /*!< Initialize the DMA2D foreground CLUT color mode */
  DMA2D_FG_InitStruct->DMA2D_FG_CLUT_CM = CLUT_CM_ARGB8888;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	60da      	str	r2, [r3, #12]

  /*!< Initialize the DMA2D foreground CLUT size */
  DMA2D_FG_InitStruct->DMA2D_FG_CLUT_SIZE = 0x00;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	611a      	str	r2, [r3, #16]

  /*!< Initialize the DMA2D foreground alpha mode */
  DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_MODE = NO_MODIF_ALPHA_VALUE;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	615a      	str	r2, [r3, #20]

  /*!< Initialize the DMA2D foreground alpha value */
  DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_VALUE = 0x00;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	619a      	str	r2, [r3, #24]

  /*!< Initialize the DMA2D foreground blue value */
  DMA2D_FG_InitStruct->DMA2D_FGC_BLUE = 0x00;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	61da      	str	r2, [r3, #28]

  /*!< Initialize the DMA2D foreground green value */
  DMA2D_FG_InitStruct->DMA2D_FGC_GREEN = 0x00;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	621a      	str	r2, [r3, #32]

  /*!< Initialize the DMA2D foreground red value */
  DMA2D_FG_InitStruct->DMA2D_FGC_RED = 0x00;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	625a      	str	r2, [r3, #36]	; 0x24

  /*!< Initialize the DMA2D foreground CLUT memory address */
  DMA2D_FG_InitStruct->DMA2D_FGCMAR = 0x00;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a7ea:	370c      	adds	r7, #12
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr

0800a7f4 <DMA2D_BGConfig>:
  * @param  DMA2D_BGStruct: pointer to a DMA2D_BGTypeDef structure that contains
  *         the configuration information for the specified Background.
  * @retval None
  */
void DMA2D_BGConfig(DMA2D_BG_InitTypeDef* DMA2D_BG_InitStruct)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b089      	sub	sp, #36	; 0x24
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]

  uint32_t bg_clutcolormode = 0;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	61fb      	str	r3, [r7, #28]
  uint32_t bg_clutsize = 0;
 800a800:	2300      	movs	r3, #0
 800a802:	61bb      	str	r3, [r7, #24]
  uint32_t bg_alpha_mode = 0;
 800a804:	2300      	movs	r3, #0
 800a806:	617b      	str	r3, [r7, #20]
  uint32_t bg_alphavalue = 0;
 800a808:	2300      	movs	r3, #0
 800a80a:	613b      	str	r3, [r7, #16]
  uint32_t bg_colorgreen = 0;
 800a80c:	2300      	movs	r3, #0
 800a80e:	60fb      	str	r3, [r7, #12]
  uint32_t bg_colorred = 0;
 800a810:	2300      	movs	r3, #0
 800a812:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA2D_BGC_BLUE(DMA2D_BG_InitStruct->DMA2D_BGC_BLUE));
  assert_param(IS_DMA2D_BGC_GREEN(DMA2D_BG_InitStruct->DMA2D_BGC_GREEN));
  assert_param(IS_DMA2D_BGC_RED(DMA2D_BG_InitStruct->DMA2D_BGC_RED));

  /* Configures the BG memory address */
  DMA2D->BGMAR = (DMA2D_BG_InitStruct->DMA2D_BGMA);
 800a814:	4b2c      	ldr	r3, [pc, #176]	; (800a8c8 <DMA2D_BGConfig+0xd4>)
 800a816:	687a      	ldr	r2, [r7, #4]
 800a818:	6812      	ldr	r2, [r2, #0]
 800a81a:	615a      	str	r2, [r3, #20]

  /* Configures the BG offset */
  DMA2D->BGOR &= ~(uint32_t)DMA2D_BGOR_LO;
 800a81c:	4a2a      	ldr	r2, [pc, #168]	; (800a8c8 <DMA2D_BGConfig+0xd4>)
 800a81e:	4b2a      	ldr	r3, [pc, #168]	; (800a8c8 <DMA2D_BGConfig+0xd4>)
 800a820:	699b      	ldr	r3, [r3, #24]
 800a822:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800a826:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a82a:	6193      	str	r3, [r2, #24]
  DMA2D->BGOR |= (DMA2D_BG_InitStruct->DMA2D_BGO);
 800a82c:	4b26      	ldr	r3, [pc, #152]	; (800a8c8 <DMA2D_BGConfig+0xd4>)
 800a82e:	4a26      	ldr	r2, [pc, #152]	; (800a8c8 <DMA2D_BGConfig+0xd4>)
 800a830:	6991      	ldr	r1, [r2, #24]
 800a832:	687a      	ldr	r2, [r7, #4]
 800a834:	6852      	ldr	r2, [r2, #4]
 800a836:	430a      	orrs	r2, r1
 800a838:	619a      	str	r2, [r3, #24]

  /* Configures background Pixel Format Convertor */
  DMA2D->BGPFCCR &= (uint32_t)PFCCR_MASK;
 800a83a:	4a23      	ldr	r2, [pc, #140]	; (800a8c8 <DMA2D_BGConfig+0xd4>)
 800a83c:	4b22      	ldr	r3, [pc, #136]	; (800a8c8 <DMA2D_BGConfig+0xd4>)
 800a83e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a840:	4b22      	ldr	r3, [pc, #136]	; (800a8cc <DMA2D_BGConfig+0xd8>)
 800a842:	400b      	ands	r3, r1
 800a844:	6253      	str	r3, [r2, #36]	; 0x24
  bg_clutcolormode = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_CM << 4;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	68db      	ldr	r3, [r3, #12]
 800a84a:	011b      	lsls	r3, r3, #4
 800a84c:	61fb      	str	r3, [r7, #28]
  bg_clutsize = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_SIZE << 8;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	691b      	ldr	r3, [r3, #16]
 800a852:	021b      	lsls	r3, r3, #8
 800a854:	61bb      	str	r3, [r7, #24]
  bg_alpha_mode = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_MODE << 16;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	695b      	ldr	r3, [r3, #20]
 800a85a:	041b      	lsls	r3, r3, #16
 800a85c:	617b      	str	r3, [r7, #20]
  bg_alphavalue = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_VALUE << 24;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	699b      	ldr	r3, [r3, #24]
 800a862:	061b      	lsls	r3, r3, #24
 800a864:	613b      	str	r3, [r7, #16]
  DMA2D->BGPFCCR |= (DMA2D_BG_InitStruct->DMA2D_BGCM | bg_clutcolormode | bg_clutsize | \
 800a866:	4b18      	ldr	r3, [pc, #96]	; (800a8c8 <DMA2D_BGConfig+0xd4>)
 800a868:	4a17      	ldr	r2, [pc, #92]	; (800a8c8 <DMA2D_BGConfig+0xd4>)
 800a86a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800a86c:	687a      	ldr	r2, [r7, #4]
 800a86e:	6890      	ldr	r0, [r2, #8]
 800a870:	69fa      	ldr	r2, [r7, #28]
 800a872:	4310      	orrs	r0, r2
 800a874:	69ba      	ldr	r2, [r7, #24]
 800a876:	4310      	orrs	r0, r2
 800a878:	697a      	ldr	r2, [r7, #20]
 800a87a:	4310      	orrs	r0, r2
                    bg_alpha_mode | bg_alphavalue);
 800a87c:	693a      	ldr	r2, [r7, #16]
 800a87e:	4302      	orrs	r2, r0
  DMA2D->BGPFCCR &= (uint32_t)PFCCR_MASK;
  bg_clutcolormode = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_CM << 4;
  bg_clutsize = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_SIZE << 8;
  bg_alpha_mode = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_MODE << 16;
  bg_alphavalue = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_VALUE << 24;
  DMA2D->BGPFCCR |= (DMA2D_BG_InitStruct->DMA2D_BGCM | bg_clutcolormode | bg_clutsize | \
 800a880:	430a      	orrs	r2, r1
 800a882:	625a      	str	r2, [r3, #36]	; 0x24
                    bg_alpha_mode | bg_alphavalue);

  /* Configures background color */
  DMA2D->BGCOLR &= ~(DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | DMA2D_BGCOLR_RED);
 800a884:	4b10      	ldr	r3, [pc, #64]	; (800a8c8 <DMA2D_BGConfig+0xd4>)
 800a886:	4a10      	ldr	r2, [pc, #64]	; (800a8c8 <DMA2D_BGConfig+0xd4>)
 800a888:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a88a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800a88e:	629a      	str	r2, [r3, #40]	; 0x28
  bg_colorgreen = DMA2D_BG_InitStruct->DMA2D_BGC_GREEN << 8;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6a1b      	ldr	r3, [r3, #32]
 800a894:	021b      	lsls	r3, r3, #8
 800a896:	60fb      	str	r3, [r7, #12]
  bg_colorred = DMA2D_BG_InitStruct->DMA2D_BGC_RED << 16;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a89c:	041b      	lsls	r3, r3, #16
 800a89e:	60bb      	str	r3, [r7, #8]
  DMA2D->BGCOLR |= (DMA2D_BG_InitStruct->DMA2D_BGC_BLUE | bg_colorgreen | bg_colorred);
 800a8a0:	4b09      	ldr	r3, [pc, #36]	; (800a8c8 <DMA2D_BGConfig+0xd4>)
 800a8a2:	4a09      	ldr	r2, [pc, #36]	; (800a8c8 <DMA2D_BGConfig+0xd4>)
 800a8a4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a8a6:	687a      	ldr	r2, [r7, #4]
 800a8a8:	69d0      	ldr	r0, [r2, #28]
 800a8aa:	68fa      	ldr	r2, [r7, #12]
 800a8ac:	4310      	orrs	r0, r2
 800a8ae:	68ba      	ldr	r2, [r7, #8]
 800a8b0:	4302      	orrs	r2, r0
 800a8b2:	430a      	orrs	r2, r1
 800a8b4:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Configures background CLUT memory address */
  DMA2D->BGCMAR = DMA2D_BG_InitStruct->DMA2D_BGCMAR;
 800a8b6:	4b04      	ldr	r3, [pc, #16]	; (800a8c8 <DMA2D_BGConfig+0xd4>)
 800a8b8:	687a      	ldr	r2, [r7, #4]
 800a8ba:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a8bc:	631a      	str	r2, [r3, #48]	; 0x30

}
 800a8be:	3724      	adds	r7, #36	; 0x24
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr
 800a8c8:	4002b000 	.word	0x4002b000
 800a8cc:	00fc00c0 	.word	0x00fc00c0

0800a8d0 <DMA2D_BG_StructInit>:
  * @param  DMA2D_BGStruct: pointer to a DMA2D_BGTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DMA2D_BG_StructInit(DMA2D_BG_InitTypeDef* DMA2D_BG_InitStruct)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b083      	sub	sp, #12
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  /*!< Initialize the DMA2D background memory address */
  DMA2D_BG_InitStruct->DMA2D_BGMA = 0x00;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	601a      	str	r2, [r3, #0]

  /*!< Initialize the DMA2D background offset */
  DMA2D_BG_InitStruct->DMA2D_BGO = 0x00;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	605a      	str	r2, [r3, #4]

  /*!< Initialize the DMA2D background color mode */
  DMA2D_BG_InitStruct->DMA2D_BGCM = CM_ARGB8888;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	609a      	str	r2, [r3, #8]

  /*!< Initialize the DMA2D background CLUT color mode */
  DMA2D_BG_InitStruct->DMA2D_BG_CLUT_CM = CLUT_CM_ARGB8888;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	60da      	str	r2, [r3, #12]

  /*!< Initialize the DMA2D background CLUT size */
  DMA2D_BG_InitStruct->DMA2D_BG_CLUT_SIZE = 0x00;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	611a      	str	r2, [r3, #16]

  /*!< Initialize the DMA2D background alpha mode */
  DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_MODE = NO_MODIF_ALPHA_VALUE;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	615a      	str	r2, [r3, #20]

  /*!< Initialize the DMA2D background alpha value */
  DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_VALUE = 0x00;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	619a      	str	r2, [r3, #24]

  /*!< Initialize the DMA2D background blue value */
  DMA2D_BG_InitStruct->DMA2D_BGC_BLUE = 0x00;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2200      	movs	r2, #0
 800a906:	61da      	str	r2, [r3, #28]

  /*!< Initialize the DMA2D background green value */
  DMA2D_BG_InitStruct->DMA2D_BGC_GREEN = 0x00;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2200      	movs	r2, #0
 800a90c:	621a      	str	r2, [r3, #32]

  /*!< Initialize the DMA2D background red value */
  DMA2D_BG_InitStruct->DMA2D_BGC_RED = 0x00;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2200      	movs	r2, #0
 800a912:	625a      	str	r2, [r3, #36]	; 0x24

  /*!< Initialize the DMA2D background CLUT memory address */
  DMA2D_BG_InitStruct->DMA2D_BGCMAR = 0x00;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2200      	movs	r2, #0
 800a918:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a91a:	370c      	adds	r7, #12
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr

0800a924 <DMA2D_FGStart>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void DMA2D_FGStart(FunctionalState NewState) 
{
 800a924:	b480      	push	{r7}
 800a926:	b083      	sub	sp, #12
 800a928:	af00      	add	r7, sp, #0
 800a92a:	4603      	mov	r3, r0
 800a92c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a92e:	79fb      	ldrb	r3, [r7, #7]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d006      	beq.n	800a942 <DMA2D_FGStart+0x1e>
  {
    /* Start the automatic loading of the CLUT */
    DMA2D->FGPFCCR |= DMA2D_FGPFCCR_START;
 800a934:	4b08      	ldr	r3, [pc, #32]	; (800a958 <DMA2D_FGStart+0x34>)
 800a936:	4a08      	ldr	r2, [pc, #32]	; (800a958 <DMA2D_FGStart+0x34>)
 800a938:	69d2      	ldr	r2, [r2, #28]
 800a93a:	f042 0220 	orr.w	r2, r2, #32
 800a93e:	61da      	str	r2, [r3, #28]
 800a940:	e005      	b.n	800a94e <DMA2D_FGStart+0x2a>
  }
  else
  {
    /* abort the transfer */
    DMA2D->FGPFCCR &= (uint32_t)~DMA2D_FGPFCCR_START;
 800a942:	4b05      	ldr	r3, [pc, #20]	; (800a958 <DMA2D_FGStart+0x34>)
 800a944:	4a04      	ldr	r2, [pc, #16]	; (800a958 <DMA2D_FGStart+0x34>)
 800a946:	69d2      	ldr	r2, [r2, #28]
 800a948:	f022 0220 	bic.w	r2, r2, #32
 800a94c:	61da      	str	r2, [r3, #28]
  }
}
 800a94e:	370c      	adds	r7, #12
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr
 800a958:	4002b000 	.word	0x4002b000

0800a95c <DMA2D_BGStart>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
  
void DMA2D_BGStart(FunctionalState NewState) 
{
 800a95c:	b480      	push	{r7}
 800a95e:	b083      	sub	sp, #12
 800a960:	af00      	add	r7, sp, #0
 800a962:	4603      	mov	r3, r0
 800a964:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800a966:	79fb      	ldrb	r3, [r7, #7]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d006      	beq.n	800a97a <DMA2D_BGStart+0x1e>
  {
    /* Start the automatic loading of the CLUT */
    DMA2D->BGPFCCR |= DMA2D_BGPFCCR_START;
 800a96c:	4b08      	ldr	r3, [pc, #32]	; (800a990 <DMA2D_BGStart+0x34>)
 800a96e:	4a08      	ldr	r2, [pc, #32]	; (800a990 <DMA2D_BGStart+0x34>)
 800a970:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a972:	f042 0220 	orr.w	r2, r2, #32
 800a976:	625a      	str	r2, [r3, #36]	; 0x24
 800a978:	e005      	b.n	800a986 <DMA2D_BGStart+0x2a>
  }
  else
  {
    /* abort the transfer */
    DMA2D->BGPFCCR &= (uint32_t)~DMA2D_BGPFCCR_START;
 800a97a:	4b05      	ldr	r3, [pc, #20]	; (800a990 <DMA2D_BGStart+0x34>)
 800a97c:	4a04      	ldr	r2, [pc, #16]	; (800a990 <DMA2D_BGStart+0x34>)
 800a97e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a980:	f022 0220 	bic.w	r2, r2, #32
 800a984:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800a986:	370c      	adds	r7, #12
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr
 800a990:	4002b000 	.word	0x4002b000

0800a994 <DMA2D_DeadTimeConfig>:
  * @param  DMA2D_DeadTime: specifies the DMA2D dead time.
  *   This parameter can be one of the following values:
  * @retval None
  */
void DMA2D_DeadTimeConfig(uint32_t DMA2D_DeadTime, FunctionalState NewState)
{
 800a994:	b480      	push	{r7}
 800a996:	b085      	sub	sp, #20
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	460b      	mov	r3, r1
 800a99e:	70fb      	strb	r3, [r7, #3]

  /* Check the parameters */
  assert_param(IS_DMA2D_DEAD_TIME(DMA2D_DeadTime));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a9a0:	78fb      	ldrb	r3, [r7, #3]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d013      	beq.n	800a9ce <DMA2D_DeadTimeConfig+0x3a>
  {
    /* Enable and Configures the dead time */
    DMA2D->AMTCR &= (uint32_t)DEAD_MASK;
 800a9a6:	4a0f      	ldr	r2, [pc, #60]	; (800a9e4 <DMA2D_DeadTimeConfig+0x50>)
 800a9a8:	4b0e      	ldr	r3, [pc, #56]	; (800a9e4 <DMA2D_DeadTimeConfig+0x50>)
 800a9aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a9b0:	f023 0301 	bic.w	r3, r3, #1
 800a9b4:	64d3      	str	r3, [r2, #76]	; 0x4c
    DeadTime = DMA2D_DeadTime << 8;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	021b      	lsls	r3, r3, #8
 800a9ba:	60fb      	str	r3, [r7, #12]
    DMA2D->AMTCR |= (DeadTime | DMA2D_AMTCR_EN);
 800a9bc:	4b09      	ldr	r3, [pc, #36]	; (800a9e4 <DMA2D_DeadTimeConfig+0x50>)
 800a9be:	4a09      	ldr	r2, [pc, #36]	; (800a9e4 <DMA2D_DeadTimeConfig+0x50>)
 800a9c0:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 800a9c2:	68fa      	ldr	r2, [r7, #12]
 800a9c4:	430a      	orrs	r2, r1
 800a9c6:	f042 0201 	orr.w	r2, r2, #1
 800a9ca:	64da      	str	r2, [r3, #76]	; 0x4c
 800a9cc:	e005      	b.n	800a9da <DMA2D_DeadTimeConfig+0x46>
  }
  else
  {
     DMA2D->AMTCR &= ~(uint32_t)DMA2D_AMTCR_EN;
 800a9ce:	4b05      	ldr	r3, [pc, #20]	; (800a9e4 <DMA2D_DeadTimeConfig+0x50>)
 800a9d0:	4a04      	ldr	r2, [pc, #16]	; (800a9e4 <DMA2D_DeadTimeConfig+0x50>)
 800a9d2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800a9d4:	f022 0201 	bic.w	r2, r2, #1
 800a9d8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
}
 800a9da:	3714      	adds	r7, #20
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr
 800a9e4:	4002b000 	.word	0x4002b000

0800a9e8 <DMA2D_LineWatermarkConfig>:
  * @param  DMA2D_LWatermarkConfig: Line Watermark configuration.
  * @retval None
  */

void DMA2D_LineWatermarkConfig(uint32_t DMA2D_LWatermarkConfig)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b083      	sub	sp, #12
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA2D_LineWatermark(DMA2D_LWatermarkConfig));

  /* Sets the Line watermark configuration */
  DMA2D->LWR = (uint32_t)DMA2D_LWatermarkConfig;
 800a9f0:	4b03      	ldr	r3, [pc, #12]	; (800aa00 <DMA2D_LineWatermarkConfig+0x18>)
 800a9f2:	687a      	ldr	r2, [r7, #4]
 800a9f4:	649a      	str	r2, [r3, #72]	; 0x48
}
 800a9f6:	370c      	adds	r7, #12
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr
 800aa00:	4002b000 	.word	0x4002b000

0800aa04 <DMA2D_ITConfig>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void DMA2D_ITConfig(uint32_t DMA2D_IT, FunctionalState NewState)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b083      	sub	sp, #12
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	460b      	mov	r3, r1
 800aa0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA2D_IT(DMA2D_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800aa10:	78fb      	ldrb	r3, [r7, #3]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d006      	beq.n	800aa24 <DMA2D_ITConfig+0x20>
  {
    /* Enable the selected DMA2D interrupts */
    DMA2D->CR |= DMA2D_IT;
 800aa16:	4b09      	ldr	r3, [pc, #36]	; (800aa3c <DMA2D_ITConfig+0x38>)
 800aa18:	4a08      	ldr	r2, [pc, #32]	; (800aa3c <DMA2D_ITConfig+0x38>)
 800aa1a:	6811      	ldr	r1, [r2, #0]
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	430a      	orrs	r2, r1
 800aa20:	601a      	str	r2, [r3, #0]
 800aa22:	e006      	b.n	800aa32 <DMA2D_ITConfig+0x2e>
  }
  else
  {
    /* Disable the selected DMA2D interrupts */
    DMA2D->CR &= (uint32_t)~DMA2D_IT;
 800aa24:	4b05      	ldr	r3, [pc, #20]	; (800aa3c <DMA2D_ITConfig+0x38>)
 800aa26:	4a05      	ldr	r2, [pc, #20]	; (800aa3c <DMA2D_ITConfig+0x38>)
 800aa28:	6811      	ldr	r1, [r2, #0]
 800aa2a:	687a      	ldr	r2, [r7, #4]
 800aa2c:	43d2      	mvns	r2, r2
 800aa2e:	400a      	ands	r2, r1
 800aa30:	601a      	str	r2, [r3, #0]
  }
}
 800aa32:	370c      	adds	r7, #12
 800aa34:	46bd      	mov	sp, r7
 800aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3a:	4770      	bx	lr
 800aa3c:	4002b000 	.word	0x4002b000

0800aa40 <DMA2D_GetFlagStatus>:
  *     @arg DMA2D_FLAG_TE:   Transfer Error interrupt flag.
  * @retval The new state of DMA2D_FLAG (SET or RESET).
  */

FlagStatus DMA2D_GetFlagStatus(uint32_t DMA2D_FLAG)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b085      	sub	sp, #20
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_DMA2D_GET_FLAG(DMA2D_FLAG));
  
  /* Check the status of the specified DMA2D flag */
  if (((DMA2D->ISR) & DMA2D_FLAG) != (uint32_t)RESET)
 800aa4c:	4b08      	ldr	r3, [pc, #32]	; (800aa70 <DMA2D_GetFlagStatus+0x30>)
 800aa4e:	685a      	ldr	r2, [r3, #4]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	4013      	ands	r3, r2
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d002      	beq.n	800aa5e <DMA2D_GetFlagStatus+0x1e>
  {
    /* DMA2D_FLAG is set */
    bitstatus = SET;
 800aa58:	2301      	movs	r3, #1
 800aa5a:	73fb      	strb	r3, [r7, #15]
 800aa5c:	e001      	b.n	800aa62 <DMA2D_GetFlagStatus+0x22>
  }
  else
  {
    /* DMA2D_FLAG is reset */
    bitstatus = RESET;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DMA2D_FLAG status */
  return bitstatus;
 800aa62:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3714      	adds	r7, #20
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr
 800aa70:	4002b000 	.word	0x4002b000

0800aa74 <DMA2D_ClearFlag>:
  *     @arg DMA2D_FLAG_TC:   Transfer Complete interrupt flag.
  *     @arg DMA2D_FLAG_TE:   Transfer Error interrupt flag.
  * @retval None
  */
void DMA2D_ClearFlag(uint32_t DMA2D_FLAG)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b083      	sub	sp, #12
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA2D_GET_FLAG(DMA2D_FLAG));
    
  /* Clear the corresponding DMA2D flag */
  DMA2D->IFCR = (uint32_t)DMA2D_FLAG;
 800aa7c:	4b03      	ldr	r3, [pc, #12]	; (800aa8c <DMA2D_ClearFlag+0x18>)
 800aa7e:	687a      	ldr	r2, [r7, #4]
 800aa80:	609a      	str	r2, [r3, #8]
}
 800aa82:	370c      	adds	r7, #12
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr
 800aa8c:	4002b000 	.word	0x4002b000

0800aa90 <DMA2D_GetITStatus>:
  *     @arg DMA2D_IT_TC:   Transfer Complete interrupt enable.
  *     @arg DMA2D_IT_TE:   Transfer Error interrupt enable.
  * @retval The new state of the DMA2D_IT (SET or RESET).
  */
ITStatus DMA2D_GetITStatus(uint32_t DMA2D_IT)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b085      	sub	sp, #20
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	73fb      	strb	r3, [r7, #15]
  uint32_t DMA2D_IT_FLAG = DMA2D_IT >> 8;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	0a1b      	lsrs	r3, r3, #8
 800aaa0:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DMA2D_IT(DMA2D_IT));

  if ((DMA2D->ISR & DMA2D_IT_FLAG) != (uint32_t)RESET)
 800aaa2:	4b10      	ldr	r3, [pc, #64]	; (800aae4 <DMA2D_GetITStatus+0x54>)
 800aaa4:	685a      	ldr	r2, [r3, #4]
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	4013      	ands	r3, r2
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d002      	beq.n	800aab4 <DMA2D_GetITStatus+0x24>
  {
    bitstatus = SET;
 800aaae:	2301      	movs	r3, #1
 800aab0:	73fb      	strb	r3, [r7, #15]
 800aab2:	e001      	b.n	800aab8 <DMA2D_GetITStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
 800aab4:	2300      	movs	r3, #0
 800aab6:	73fb      	strb	r3, [r7, #15]
  }
  
  if (((DMA2D->CR & DMA2D_IT) != (uint32_t)RESET) && (bitstatus != (uint32_t)RESET))
 800aab8:	4b0a      	ldr	r3, [pc, #40]	; (800aae4 <DMA2D_GetITStatus+0x54>)
 800aaba:	681a      	ldr	r2, [r3, #0]
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	4013      	ands	r3, r2
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d005      	beq.n	800aad0 <DMA2D_GetITStatus+0x40>
 800aac4:	7bfb      	ldrb	r3, [r7, #15]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d002      	beq.n	800aad0 <DMA2D_GetITStatus+0x40>
  {
    bitstatus = SET;
 800aaca:	2301      	movs	r3, #1
 800aacc:	73fb      	strb	r3, [r7, #15]
 800aace:	e001      	b.n	800aad4 <DMA2D_GetITStatus+0x44>
  }
  else
  {
    bitstatus = RESET;
 800aad0:	2300      	movs	r3, #0
 800aad2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800aad4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3714      	adds	r7, #20
 800aada:	46bd      	mov	sp, r7
 800aadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae0:	4770      	bx	lr
 800aae2:	bf00      	nop
 800aae4:	4002b000 	.word	0x4002b000

0800aae8 <DMA2D_ClearITPendingBit>:
  *     @arg DMA2D_IT_TC:   Transfer Complete interrupt.
  *     @arg DMA2D_IT_TE:   Transfer Error interrupt.
  * @retval None
  */
void DMA2D_ClearITPendingBit(uint32_t DMA2D_IT)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b083      	sub	sp, #12
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA2D_IT(DMA2D_IT));
  DMA2D_IT = DMA2D_IT >> 8;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	0a1b      	lsrs	r3, r3, #8
 800aaf4:	607b      	str	r3, [r7, #4]
    
  /* Clear the corresponding DMA2D Interrupt */
  DMA2D->IFCR = (uint32_t)DMA2D_IT;
 800aaf6:	4b04      	ldr	r3, [pc, #16]	; (800ab08 <DMA2D_ClearITPendingBit+0x20>)
 800aaf8:	687a      	ldr	r2, [r7, #4]
 800aafa:	609a      	str	r2, [r3, #8]
}
 800aafc:	370c      	adds	r7, #12
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr
 800ab06:	bf00      	nop
 800ab08:	4002b000 	.word	0x4002b000

0800ab0c <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b083      	sub	sp, #12
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f023 0201 	bic.w	r2, r3, #1
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2200      	movs	r2, #0
 800ab24:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2200      	movs	r2, #0
 800ab36:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2221      	movs	r2, #33	; 0x21
 800ab42:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	4b45      	ldr	r3, [pc, #276]	; (800ac5c <DMA_DeInit+0x150>)
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d103      	bne.n	800ab54 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 800ab4c:	4b44      	ldr	r3, [pc, #272]	; (800ac60 <DMA_DeInit+0x154>)
 800ab4e:	223d      	movs	r2, #61	; 0x3d
 800ab50:	609a      	str	r2, [r3, #8]
 800ab52:	e07e      	b.n	800ac52 <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 800ab54:	687a      	ldr	r2, [r7, #4]
 800ab56:	4b43      	ldr	r3, [pc, #268]	; (800ac64 <DMA_DeInit+0x158>)
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d104      	bne.n	800ab66 <DMA_DeInit+0x5a>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 800ab5c:	4b40      	ldr	r3, [pc, #256]	; (800ac60 <DMA_DeInit+0x154>)
 800ab5e:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800ab62:	609a      	str	r2, [r3, #8]
 800ab64:	e075      	b.n	800ac52 <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 800ab66:	687a      	ldr	r2, [r7, #4]
 800ab68:	4b3f      	ldr	r3, [pc, #252]	; (800ac68 <DMA_DeInit+0x15c>)
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d104      	bne.n	800ab78 <DMA_DeInit+0x6c>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 800ab6e:	4b3c      	ldr	r3, [pc, #240]	; (800ac60 <DMA_DeInit+0x154>)
 800ab70:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 800ab74:	609a      	str	r2, [r3, #8]
 800ab76:	e06c      	b.n	800ac52 <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 800ab78:	687a      	ldr	r2, [r7, #4]
 800ab7a:	4b3c      	ldr	r3, [pc, #240]	; (800ac6c <DMA_DeInit+0x160>)
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d104      	bne.n	800ab8a <DMA_DeInit+0x7e>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 800ab80:	4b37      	ldr	r3, [pc, #220]	; (800ac60 <DMA_DeInit+0x154>)
 800ab82:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800ab86:	609a      	str	r2, [r3, #8]
 800ab88:	e063      	b.n	800ac52 <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 800ab8a:	687a      	ldr	r2, [r7, #4]
 800ab8c:	4b38      	ldr	r3, [pc, #224]	; (800ac70 <DMA_DeInit+0x164>)
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d103      	bne.n	800ab9a <DMA_DeInit+0x8e>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 800ab92:	4b33      	ldr	r3, [pc, #204]	; (800ac60 <DMA_DeInit+0x154>)
 800ab94:	4a37      	ldr	r2, [pc, #220]	; (800ac74 <DMA_DeInit+0x168>)
 800ab96:	60da      	str	r2, [r3, #12]
 800ab98:	e05b      	b.n	800ac52 <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 800ab9a:	687a      	ldr	r2, [r7, #4]
 800ab9c:	4b36      	ldr	r3, [pc, #216]	; (800ac78 <DMA_DeInit+0x16c>)
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d103      	bne.n	800abaa <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 800aba2:	4b2f      	ldr	r3, [pc, #188]	; (800ac60 <DMA_DeInit+0x154>)
 800aba4:	4a35      	ldr	r2, [pc, #212]	; (800ac7c <DMA_DeInit+0x170>)
 800aba6:	60da      	str	r2, [r3, #12]
 800aba8:	e053      	b.n	800ac52 <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 800abaa:	687a      	ldr	r2, [r7, #4]
 800abac:	4b34      	ldr	r3, [pc, #208]	; (800ac80 <DMA_DeInit+0x174>)
 800abae:	429a      	cmp	r2, r3
 800abb0:	d103      	bne.n	800abba <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 800abb2:	4b2b      	ldr	r3, [pc, #172]	; (800ac60 <DMA_DeInit+0x154>)
 800abb4:	4a33      	ldr	r2, [pc, #204]	; (800ac84 <DMA_DeInit+0x178>)
 800abb6:	60da      	str	r2, [r3, #12]
 800abb8:	e04b      	b.n	800ac52 <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 800abba:	687a      	ldr	r2, [r7, #4]
 800abbc:	4b32      	ldr	r3, [pc, #200]	; (800ac88 <DMA_DeInit+0x17c>)
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d104      	bne.n	800abcc <DMA_DeInit+0xc0>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 800abc2:	4b27      	ldr	r3, [pc, #156]	; (800ac60 <DMA_DeInit+0x154>)
 800abc4:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 800abc8:	60da      	str	r2, [r3, #12]
 800abca:	e042      	b.n	800ac52 <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	4b2f      	ldr	r3, [pc, #188]	; (800ac8c <DMA_DeInit+0x180>)
 800abd0:	429a      	cmp	r2, r3
 800abd2:	d103      	bne.n	800abdc <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 800abd4:	4b2e      	ldr	r3, [pc, #184]	; (800ac90 <DMA_DeInit+0x184>)
 800abd6:	223d      	movs	r2, #61	; 0x3d
 800abd8:	609a      	str	r2, [r3, #8]
 800abda:	e03a      	b.n	800ac52 <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	4b2d      	ldr	r3, [pc, #180]	; (800ac94 <DMA_DeInit+0x188>)
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d104      	bne.n	800abee <DMA_DeInit+0xe2>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 800abe4:	4b2a      	ldr	r3, [pc, #168]	; (800ac90 <DMA_DeInit+0x184>)
 800abe6:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800abea:	609a      	str	r2, [r3, #8]
 800abec:	e031      	b.n	800ac52 <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 800abee:	687a      	ldr	r2, [r7, #4]
 800abf0:	4b29      	ldr	r3, [pc, #164]	; (800ac98 <DMA_DeInit+0x18c>)
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d104      	bne.n	800ac00 <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 800abf6:	4b26      	ldr	r3, [pc, #152]	; (800ac90 <DMA_DeInit+0x184>)
 800abf8:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 800abfc:	609a      	str	r2, [r3, #8]
 800abfe:	e028      	b.n	800ac52 <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 800ac00:	687a      	ldr	r2, [r7, #4]
 800ac02:	4b26      	ldr	r3, [pc, #152]	; (800ac9c <DMA_DeInit+0x190>)
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d104      	bne.n	800ac12 <DMA_DeInit+0x106>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 800ac08:	4b21      	ldr	r3, [pc, #132]	; (800ac90 <DMA_DeInit+0x184>)
 800ac0a:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800ac0e:	609a      	str	r2, [r3, #8]
 800ac10:	e01f      	b.n	800ac52 <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 800ac12:	687a      	ldr	r2, [r7, #4]
 800ac14:	4b22      	ldr	r3, [pc, #136]	; (800aca0 <DMA_DeInit+0x194>)
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d103      	bne.n	800ac22 <DMA_DeInit+0x116>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 800ac1a:	4b1d      	ldr	r3, [pc, #116]	; (800ac90 <DMA_DeInit+0x184>)
 800ac1c:	4a15      	ldr	r2, [pc, #84]	; (800ac74 <DMA_DeInit+0x168>)
 800ac1e:	60da      	str	r2, [r3, #12]
 800ac20:	e017      	b.n	800ac52 <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 800ac22:	687a      	ldr	r2, [r7, #4]
 800ac24:	4b1f      	ldr	r3, [pc, #124]	; (800aca4 <DMA_DeInit+0x198>)
 800ac26:	429a      	cmp	r2, r3
 800ac28:	d103      	bne.n	800ac32 <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 800ac2a:	4b19      	ldr	r3, [pc, #100]	; (800ac90 <DMA_DeInit+0x184>)
 800ac2c:	4a13      	ldr	r2, [pc, #76]	; (800ac7c <DMA_DeInit+0x170>)
 800ac2e:	60da      	str	r2, [r3, #12]
 800ac30:	e00f      	b.n	800ac52 <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 800ac32:	687a      	ldr	r2, [r7, #4]
 800ac34:	4b1c      	ldr	r3, [pc, #112]	; (800aca8 <DMA_DeInit+0x19c>)
 800ac36:	429a      	cmp	r2, r3
 800ac38:	d103      	bne.n	800ac42 <DMA_DeInit+0x136>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 800ac3a:	4b15      	ldr	r3, [pc, #84]	; (800ac90 <DMA_DeInit+0x184>)
 800ac3c:	4a11      	ldr	r2, [pc, #68]	; (800ac84 <DMA_DeInit+0x178>)
 800ac3e:	60da      	str	r2, [r3, #12]
 800ac40:	e007      	b.n	800ac52 <DMA_DeInit+0x146>
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	4b19      	ldr	r3, [pc, #100]	; (800acac <DMA_DeInit+0x1a0>)
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d103      	bne.n	800ac52 <DMA_DeInit+0x146>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 800ac4a:	4b11      	ldr	r3, [pc, #68]	; (800ac90 <DMA_DeInit+0x184>)
 800ac4c:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 800ac50:	60da      	str	r2, [r3, #12]
    }
  }
}
 800ac52:	370c      	adds	r7, #12
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr
 800ac5c:	40026010 	.word	0x40026010
 800ac60:	40026000 	.word	0x40026000
 800ac64:	40026028 	.word	0x40026028
 800ac68:	40026040 	.word	0x40026040
 800ac6c:	40026058 	.word	0x40026058
 800ac70:	40026070 	.word	0x40026070
 800ac74:	2000003d 	.word	0x2000003d
 800ac78:	40026088 	.word	0x40026088
 800ac7c:	20000f40 	.word	0x20000f40
 800ac80:	400260a0 	.word	0x400260a0
 800ac84:	203d0000 	.word	0x203d0000
 800ac88:	400260b8 	.word	0x400260b8
 800ac8c:	40026410 	.word	0x40026410
 800ac90:	40026400 	.word	0x40026400
 800ac94:	40026428 	.word	0x40026428
 800ac98:	40026440 	.word	0x40026440
 800ac9c:	40026458 	.word	0x40026458
 800aca0:	40026470 	.word	0x40026470
 800aca4:	40026488 	.word	0x40026488
 800aca8:	400264a0 	.word	0x400264a0
 800acac:	400264b8 	.word	0x400264b8

0800acb0 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 800acb0:	b480      	push	{r7}
 800acb2:	b085      	sub	sp, #20
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800acba:	2300      	movs	r3, #0
 800acbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800acc4:	68fa      	ldr	r2, [r7, #12]
 800acc6:	4b24      	ldr	r3, [pc, #144]	; (800ad58 <DMA_Init+0xa8>)
 800acc8:	4013      	ands	r3, r2
 800acca:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	681a      	ldr	r2, [r3, #0]
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	68db      	ldr	r3, [r3, #12]
 800acd4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800acda:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	699b      	ldr	r3, [r3, #24]
 800ace0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800ace6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	6a1b      	ldr	r3, [r3, #32]
 800acec:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800acf2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acf8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800acfe:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad04:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800ad06:	68fa      	ldr	r2, [r7, #12]
 800ad08:	4313      	orrs	r3, r2
 800ad0a:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	68fa      	ldr	r2, [r7, #12]
 800ad10:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	695b      	ldr	r3, [r3, #20]
 800ad16:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f023 0307 	bic.w	r3, r3, #7
 800ad1e:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	68fa      	ldr	r2, [r7, #12]
 800ad2c:	4313      	orrs	r3, r2
 800ad2e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	68fa      	ldr	r2, [r7, #12]
 800ad34:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	691a      	ldr	r2, [r3, #16]
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	685a      	ldr	r2, [r3, #4]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	689a      	ldr	r2, [r3, #8]
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	60da      	str	r2, [r3, #12]
}
 800ad4e:	3714      	adds	r7, #20
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr
 800ad58:	f01c803f 	.word	0xf01c803f

0800ad5c <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b083      	sub	sp, #12
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2200      	movs	r2, #0
 800ad68:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2200      	movs	r2, #0
 800ad74:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2200      	movs	r2, #0
 800ad86:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2200      	movs	r2, #0
 800ad92:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2200      	movs	r2, #0
 800ad98:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2200      	movs	r2, #0
 800ada4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2200      	movs	r2, #0
 800adaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2200      	movs	r2, #0
 800adb0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2200      	movs	r2, #0
 800adb6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2200      	movs	r2, #0
 800adbc:	639a      	str	r2, [r3, #56]	; 0x38
}
 800adbe:	370c      	adds	r7, #12
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr

0800adc8 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 800adc8:	b480      	push	{r7}
 800adca:	b083      	sub	sp, #12
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	460b      	mov	r3, r1
 800add2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800add4:	78fb      	ldrb	r3, [r7, #3]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d006      	beq.n	800ade8 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f043 0201 	orr.w	r2, r3, #1
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	601a      	str	r2, [r3, #0]
 800ade6:	e005      	b.n	800adf4 <DMA_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f023 0201 	bic.w	r2, r3, #1
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	601a      	str	r2, [r3, #0]
  }
}
 800adf4:	370c      	adds	r7, #12
 800adf6:	46bd      	mov	sp, r7
 800adf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfc:	4770      	bx	lr
 800adfe:	bf00      	nop

0800ae00 <DMA_PeriphIncOffsetSizeConfig>:
  *            @arg DMA_PINCOS_WordAligned: Peripheral address increment offset is 
  *                                         fixed to 4 (32-bit aligned addresses). 
  * @retval None
  */
void DMA_PeriphIncOffsetSizeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_Pincos)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b083      	sub	sp, #12
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d006      	beq.n	800ae1e <DMA_PeriphIncOffsetSizeConfig+0x1e>
  {
    /* Configure DMA_SxCR_PINCOS bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	601a      	str	r2, [r3, #0]
 800ae1c:	e005      	b.n	800ae2a <DMA_PeriphIncOffsetSizeConfig+0x2a>
  }
  else
  {
    /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	601a      	str	r2, [r3, #0]
  }
}
 800ae2a:	370c      	adds	r7, #12
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae32:	4770      	bx	lr

0800ae34 <DMA_FlowControllerConfig>:
  *            @arg DMA_FlowCtrl_Peripheral: DMAy_Streamx transactions flow controller 
  *                                          is the peripheral.    
  * @retval None
  */
void DMA_FlowControllerConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FlowCtrl)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b083      	sub	sp, #12
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d006      	beq.n	800ae52 <DMA_FlowControllerConfig+0x1e>
  {
    /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f043 0220 	orr.w	r2, r3, #32
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	601a      	str	r2, [r3, #0]
 800ae50:	e005      	b.n	800ae5e <DMA_FlowControllerConfig+0x2a>
  }
  else
  {
    /* Clear the PFCTRL bit: Memory is the flow controller */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f023 0220 	bic.w	r2, r3, #32
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	601a      	str	r2, [r3, #0]
  }
}
 800ae5e:	370c      	adds	r7, #12
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr

0800ae68 <DMA_SetCurrDataCounter>:
  *         DMAy_SxPAR register is considered as Peripheral.
  *      
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b083      	sub	sp, #12
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	460b      	mov	r3, r1
 800ae72:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Write the number of data units to be transferred */
  DMAy_Streamx->NDTR = (uint16_t)Counter;
 800ae74:	887a      	ldrh	r2, [r7, #2]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	605a      	str	r2, [r3, #4]
}
 800ae7a:	370c      	adds	r7, #12
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr

0800ae84 <DMA_GetCurrDataCounter>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800ae84:	b480      	push	{r7}
 800ae86:	b083      	sub	sp, #12
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	b29b      	uxth	r3, r3
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	370c      	adds	r7, #12
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr
 800ae9e:	bf00      	nop

0800aea0 <DMA_DoubleBufferModeConfig>:
  *   
  * @retval None
  */
void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
                                uint32_t DMA_CurrentMemory)
{  
 800aea0:	b480      	push	{r7}
 800aea2:	b085      	sub	sp, #20
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	60f8      	str	r0, [r7, #12]
 800aea8:	60b9      	str	r1, [r7, #8]
 800aeaa:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d006      	beq.n	800aec0 <DMA_DoubleBufferModeConfig+0x20>
  {
    /* Set Memory 1 as current memory address */
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	601a      	str	r2, [r3, #0]
 800aebe:	e005      	b.n	800aecc <DMA_DoubleBufferModeConfig+0x2c>
  }
  else
  {
    /* Set Memory 0 as current memory address */
    DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	601a      	str	r2, [r3, #0]
  }

  /* Write to DMAy Streamx M1AR */
  DMAy_Streamx->M1AR = Memory1BaseAddr;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	68ba      	ldr	r2, [r7, #8]
 800aed0:	611a      	str	r2, [r3, #16]
}
 800aed2:	3714      	adds	r7, #20
 800aed4:	46bd      	mov	sp, r7
 800aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeda:	4770      	bx	lr

0800aedc <DMA_DoubleBufferModeCmd>:
  * @param  NewState: new state of the DMAy Streamx double buffer mode. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{  
 800aedc:	b480      	push	{r7}
 800aede:	b083      	sub	sp, #12
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	460b      	mov	r3, r1
 800aee6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
 800aee8:	78fb      	ldrb	r3, [r7, #3]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d006      	beq.n	800aefc <DMA_DoubleBufferModeCmd+0x20>
  {
    /* Enable the Double buffer mode */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	601a      	str	r2, [r3, #0]
 800aefa:	e005      	b.n	800af08 <DMA_DoubleBufferModeCmd+0x2c>
  }
  else
  {
    /* Disable the Double buffer mode */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	601a      	str	r2, [r3, #0]
  }
}
 800af08:	370c      	adds	r7, #12
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr
 800af12:	bf00      	nop

0800af14 <DMA_MemoryTargetConfig>:
  *  
  * @retval None
  */
void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
                           uint32_t DMA_MemoryTarget)
{
 800af14:	b480      	push	{r7}
 800af16:	b085      	sub	sp, #20
 800af18:	af00      	add	r7, sp, #0
 800af1a:	60f8      	str	r0, [r7, #12]
 800af1c:	60b9      	str	r1, [r7, #8]
 800af1e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
    
  /* Check the Memory target to be configured */
  if (DMA_MemoryTarget != DMA_Memory_0)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d003      	beq.n	800af2e <DMA_MemoryTargetConfig+0x1a>
  {
    /* Write to DMAy Streamx M1AR */
    DMAy_Streamx->M1AR = MemoryBaseAddr;    
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	68ba      	ldr	r2, [r7, #8]
 800af2a:	611a      	str	r2, [r3, #16]
 800af2c:	e002      	b.n	800af34 <DMA_MemoryTargetConfig+0x20>
  }  
  else
  {
    /* Write to DMAy Streamx M0AR */
    DMAy_Streamx->M0AR = MemoryBaseAddr;  
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	68ba      	ldr	r2, [r7, #8]
 800af32:	60da      	str	r2, [r3, #12]
  }
}
 800af34:	3714      	adds	r7, #20
 800af36:	46bd      	mov	sp, r7
 800af38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3c:	4770      	bx	lr
 800af3e:	bf00      	nop

0800af40 <DMA_GetCurrentMemoryTarget>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The memory target number: 0 for Memory0 or 1 for Memory1. 
  */
uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800af40:	b480      	push	{r7}
 800af42:	b085      	sub	sp, #20
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 800af48:	2300      	movs	r3, #0
 800af4a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Get the current memory target */
  if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800af54:	2b00      	cmp	r3, #0
 800af56:	d002      	beq.n	800af5e <DMA_GetCurrentMemoryTarget+0x1e>
  {
    /* Current memory buffer used is Memory 1 */
    tmp = 1;
 800af58:	2301      	movs	r3, #1
 800af5a:	60fb      	str	r3, [r7, #12]
 800af5c:	e001      	b.n	800af62 <DMA_GetCurrentMemoryTarget+0x22>
  }  
  else
  {
    /* Current memory buffer used is Memory 0 */
    tmp = 0;    
 800af5e:	2300      	movs	r3, #0
 800af60:	60fb      	str	r3, [r7, #12]
  }
  return tmp;
 800af62:	68fb      	ldr	r3, [r7, #12]
}
 800af64:	4618      	mov	r0, r3
 800af66:	3714      	adds	r7, #20
 800af68:	46bd      	mov	sp, r7
 800af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6e:	4770      	bx	lr

0800af70 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800af70:	b480      	push	{r7}
 800af72:	b085      	sub	sp, #20
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 800af78:	2300      	movs	r3, #0
 800af7a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f003 0301 	and.w	r3, r3, #1
 800af84:	2b00      	cmp	r3, #0
 800af86:	d002      	beq.n	800af8e <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 800af88:	2301      	movs	r3, #1
 800af8a:	73fb      	strb	r3, [r7, #15]
 800af8c:	e001      	b.n	800af92 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 800af8e:	2300      	movs	r3, #0
 800af90:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800af92:	7bfb      	ldrb	r3, [r7, #15]
}
 800af94:	4618      	mov	r0, r3
 800af96:	3714      	adds	r7, #20
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr

0800afa0 <DMA_GetFIFOStatus>:
  *           - DMA_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
  *           - DMA_FIFOStatus_Empty: when FIFO is empty
  *           - DMA_FIFOStatus_Full: when FIFO is full
  */
uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b085      	sub	sp, #20
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800afa8:	2300      	movs	r3, #0
 800afaa:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  
  /* Get the FIFO level bits */
  tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	695b      	ldr	r3, [r3, #20]
 800afb0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800afb4:	60fb      	str	r3, [r7, #12]
  
  return tmpreg;
 800afb6:	68fb      	ldr	r3, [r7, #12]
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3714      	adds	r7, #20
 800afbc:	46bd      	mov	sp, r7
 800afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc2:	4770      	bx	lr

0800afc4 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b087      	sub	sp, #28
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800afce:	2300      	movs	r3, #0
 800afd0:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 800afd2:	2300      	movs	r3, #0
 800afd4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800afd6:	687a      	ldr	r2, [r7, #4]
 800afd8:	4b15      	ldr	r3, [pc, #84]	; (800b030 <DMA_GetFlagStatus+0x6c>)
 800afda:	429a      	cmp	r2, r3
 800afdc:	d802      	bhi.n	800afe4 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800afde:	4b15      	ldr	r3, [pc, #84]	; (800b034 <DMA_GetFlagStatus+0x70>)
 800afe0:	613b      	str	r3, [r7, #16]
 800afe2:	e001      	b.n	800afe8 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800afe4:	4b14      	ldr	r3, [pc, #80]	; (800b038 <DMA_GetFlagStatus+0x74>)
 800afe6:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d003      	beq.n	800affa <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	60fb      	str	r3, [r7, #12]
 800aff8:	e002      	b.n	800b000 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800b006:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800b00a:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 800b00c:	68fa      	ldr	r2, [r7, #12]
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	4013      	ands	r3, r2
 800b012:	2b00      	cmp	r3, #0
 800b014:	d002      	beq.n	800b01c <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800b016:	2301      	movs	r3, #1
 800b018:	75fb      	strb	r3, [r7, #23]
 800b01a:	e001      	b.n	800b020 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 800b01c:	2300      	movs	r3, #0
 800b01e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 800b020:	7dfb      	ldrb	r3, [r7, #23]
}
 800b022:	4618      	mov	r0, r3
 800b024:	371c      	adds	r7, #28
 800b026:	46bd      	mov	sp, r7
 800b028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02c:	4770      	bx	lr
 800b02e:	bf00      	nop
 800b030:	4002640f 	.word	0x4002640f
 800b034:	40026000 	.word	0x40026000
 800b038:	40026400 	.word	0x40026400

0800b03c <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 800b03c:	b480      	push	{r7}
 800b03e:	b085      	sub	sp, #20
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800b046:	687a      	ldr	r2, [r7, #4]
 800b048:	4b10      	ldr	r3, [pc, #64]	; (800b08c <DMA_ClearFlag+0x50>)
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d802      	bhi.n	800b054 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800b04e:	4b10      	ldr	r3, [pc, #64]	; (800b090 <DMA_ClearFlag+0x54>)
 800b050:	60fb      	str	r3, [r7, #12]
 800b052:	e001      	b.n	800b058 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800b054:	4b0f      	ldr	r3, [pc, #60]	; (800b094 <DMA_ClearFlag+0x58>)
 800b056:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d007      	beq.n	800b072 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800b068:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800b06c:	68fa      	ldr	r2, [r7, #12]
 800b06e:	60d3      	str	r3, [r2, #12]
 800b070:	e006      	b.n	800b080 <DMA_ClearFlag+0x44>
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800b078:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800b07c:	68fa      	ldr	r2, [r7, #12]
 800b07e:	6093      	str	r3, [r2, #8]
  }    
}
 800b080:	3714      	adds	r7, #20
 800b082:	46bd      	mov	sp, r7
 800b084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b088:	4770      	bx	lr
 800b08a:	bf00      	nop
 800b08c:	4002640f 	.word	0x4002640f
 800b090:	40026000 	.word	0x40026000
 800b094:	40026400 	.word	0x40026400

0800b098 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 800b098:	b480      	push	{r7}
 800b09a:	b085      	sub	sp, #20
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	60f8      	str	r0, [r7, #12]
 800b0a0:	60b9      	str	r1, [r7, #8]
 800b0a2:	4613      	mov	r3, r2
 800b0a4:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d00f      	beq.n	800b0d0 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 800b0b0:	79fb      	ldrb	r3, [r7, #7]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d006      	beq.n	800b0c4 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	695b      	ldr	r3, [r3, #20]
 800b0ba:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	615a      	str	r2, [r3, #20]
 800b0c2:	e005      	b.n	800b0d0 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	695b      	ldr	r3, [r3, #20]
 800b0c8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	2b80      	cmp	r3, #128	; 0x80
 800b0d4:	d014      	beq.n	800b100 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 800b0d6:	79fb      	ldrb	r3, [r7, #7]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d008      	beq.n	800b0ee <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	681a      	ldr	r2, [r3, #0]
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	f003 031e 	and.w	r3, r3, #30
 800b0e6:	431a      	orrs	r2, r3
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	601a      	str	r2, [r3, #0]
 800b0ec:	e008      	b.n	800b100 <DMA_ITConfig+0x68>
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	681a      	ldr	r2, [r3, #0]
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	f003 031e 	and.w	r3, r3, #30
 800b0f8:	43db      	mvns	r3, r3
 800b0fa:	401a      	ands	r2, r3
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	601a      	str	r2, [r3, #0]
    }    
  }
}
 800b100:	3714      	adds	r7, #20
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr
 800b10a:	bf00      	nop

0800b10c <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b087      	sub	sp, #28
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800b116:	2300      	movs	r3, #0
 800b118:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 800b11a:	2300      	movs	r3, #0
 800b11c:	60fb      	str	r3, [r7, #12]
 800b11e:	2300      	movs	r3, #0
 800b120:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800b122:	687a      	ldr	r2, [r7, #4]
 800b124:	4b22      	ldr	r3, [pc, #136]	; (800b1b0 <DMA_GetITStatus+0xa4>)
 800b126:	429a      	cmp	r2, r3
 800b128:	d802      	bhi.n	800b130 <DMA_GetITStatus+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800b12a:	4b22      	ldr	r3, [pc, #136]	; (800b1b4 <DMA_GetITStatus+0xa8>)
 800b12c:	613b      	str	r3, [r7, #16]
 800b12e:	e001      	b.n	800b134 <DMA_GetITStatus+0x28>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800b130:	4b21      	ldr	r3, [pc, #132]	; (800b1b8 <DMA_GetITStatus+0xac>)
 800b132:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800b13a:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d00a      	beq.n	800b158 <DMA_GetITStatus+0x4c>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	0adb      	lsrs	r3, r3, #11
 800b146:	f003 031e 	and.w	r3, r3, #30
 800b14a:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681a      	ldr	r2, [r3, #0]
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	4013      	ands	r3, r2
 800b154:	60bb      	str	r3, [r7, #8]
 800b156:	e004      	b.n	800b162 <DMA_GetITStatus+0x56>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	695b      	ldr	r3, [r3, #20]
 800b15c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b160:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d003      	beq.n	800b174 <DMA_GetITStatus+0x68>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	60fb      	str	r3, [r7, #12]
 800b172:	e002      	b.n	800b17a <DMA_GetITStatus+0x6e>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800b180:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800b184:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800b186:	68fa      	ldr	r2, [r7, #12]
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	4013      	ands	r3, r2
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d005      	beq.n	800b19c <DMA_GetITStatus+0x90>
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d002      	beq.n	800b19c <DMA_GetITStatus+0x90>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 800b196:	2301      	movs	r3, #1
 800b198:	75fb      	strb	r3, [r7, #23]
 800b19a:	e001      	b.n	800b1a0 <DMA_GetITStatus+0x94>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 800b19c:	2300      	movs	r3, #0
 800b19e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 800b1a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	371c      	adds	r7, #28
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ac:	4770      	bx	lr
 800b1ae:	bf00      	nop
 800b1b0:	4002640f 	.word	0x4002640f
 800b1b4:	40026000 	.word	0x40026000
 800b1b8:	40026400 	.word	0x40026400

0800b1bc <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b085      	sub	sp, #20
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800b1c6:	687a      	ldr	r2, [r7, #4]
 800b1c8:	4b10      	ldr	r3, [pc, #64]	; (800b20c <DMA_ClearITPendingBit+0x50>)
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	d802      	bhi.n	800b1d4 <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800b1ce:	4b10      	ldr	r3, [pc, #64]	; (800b210 <DMA_ClearITPendingBit+0x54>)
 800b1d0:	60fb      	str	r3, [r7, #12]
 800b1d2:	e001      	b.n	800b1d8 <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800b1d4:	4b0f      	ldr	r3, [pc, #60]	; (800b214 <DMA_ClearITPendingBit+0x58>)
 800b1d6:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d007      	beq.n	800b1f2 <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800b1e8:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800b1ec:	68fa      	ldr	r2, [r7, #12]
 800b1ee:	60d3      	str	r3, [r2, #12]
 800b1f0:	e006      	b.n	800b200 <DMA_ClearITPendingBit+0x44>
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800b1f8:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800b1fc:	68fa      	ldr	r2, [r7, #12]
 800b1fe:	6093      	str	r3, [r2, #8]
  }   
}
 800b200:	3714      	adds	r7, #20
 800b202:	46bd      	mov	sp, r7
 800b204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b208:	4770      	bx	lr
 800b20a:	bf00      	nop
 800b20c:	4002640f 	.word	0x4002640f
 800b210:	40026000 	.word	0x40026000
 800b214:	40026400 	.word	0x40026400

0800b218 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
 800b218:	b480      	push	{r7}
 800b21a:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
 800b21c:	4b09      	ldr	r3, [pc, #36]	; (800b244 <EXTI_DeInit+0x2c>)
 800b21e:	2200      	movs	r2, #0
 800b220:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 800b222:	4b08      	ldr	r3, [pc, #32]	; (800b244 <EXTI_DeInit+0x2c>)
 800b224:	2200      	movs	r2, #0
 800b226:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 800b228:	4b06      	ldr	r3, [pc, #24]	; (800b244 <EXTI_DeInit+0x2c>)
 800b22a:	2200      	movs	r2, #0
 800b22c:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 800b22e:	4b05      	ldr	r3, [pc, #20]	; (800b244 <EXTI_DeInit+0x2c>)
 800b230:	2200      	movs	r2, #0
 800b232:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 800b234:	4b03      	ldr	r3, [pc, #12]	; (800b244 <EXTI_DeInit+0x2c>)
 800b236:	4a04      	ldr	r2, [pc, #16]	; (800b248 <EXTI_DeInit+0x30>)
 800b238:	615a      	str	r2, [r3, #20]
}
 800b23a:	46bd      	mov	sp, r7
 800b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b240:	4770      	bx	lr
 800b242:	bf00      	nop
 800b244:	40013c00 	.word	0x40013c00
 800b248:	007fffff 	.word	0x007fffff

0800b24c <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b085      	sub	sp, #20
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 800b254:	2300      	movs	r3, #0
 800b256:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 800b258:	4b32      	ldr	r3, [pc, #200]	; (800b324 <EXTI_Init+0xd8>)
 800b25a:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	799b      	ldrb	r3, [r3, #6]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d04d      	beq.n	800b300 <EXTI_Init+0xb4>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 800b264:	4b2f      	ldr	r3, [pc, #188]	; (800b324 <EXTI_Init+0xd8>)
 800b266:	4a2f      	ldr	r2, [pc, #188]	; (800b324 <EXTI_Init+0xd8>)
 800b268:	6811      	ldr	r1, [r2, #0]
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	6812      	ldr	r2, [r2, #0]
 800b26e:	43d2      	mvns	r2, r2
 800b270:	400a      	ands	r2, r1
 800b272:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 800b274:	4b2b      	ldr	r3, [pc, #172]	; (800b324 <EXTI_Init+0xd8>)
 800b276:	4a2b      	ldr	r2, [pc, #172]	; (800b324 <EXTI_Init+0xd8>)
 800b278:	6851      	ldr	r1, [r2, #4]
 800b27a:	687a      	ldr	r2, [r7, #4]
 800b27c:	6812      	ldr	r2, [r2, #0]
 800b27e:	43d2      	mvns	r2, r2
 800b280:	400a      	ands	r2, r1
 800b282:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	791b      	ldrb	r3, [r3, #4]
 800b288:	68fa      	ldr	r2, [r7, #12]
 800b28a:	4413      	add	r3, r2
 800b28c:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	68fa      	ldr	r2, [r7, #12]
 800b292:	6811      	ldr	r1, [r2, #0]
 800b294:	687a      	ldr	r2, [r7, #4]
 800b296:	6812      	ldr	r2, [r2, #0]
 800b298:	430a      	orrs	r2, r1
 800b29a:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800b29c:	4b21      	ldr	r3, [pc, #132]	; (800b324 <EXTI_Init+0xd8>)
 800b29e:	4a21      	ldr	r2, [pc, #132]	; (800b324 <EXTI_Init+0xd8>)
 800b2a0:	6891      	ldr	r1, [r2, #8]
 800b2a2:	687a      	ldr	r2, [r7, #4]
 800b2a4:	6812      	ldr	r2, [r2, #0]
 800b2a6:	43d2      	mvns	r2, r2
 800b2a8:	400a      	ands	r2, r1
 800b2aa:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800b2ac:	4b1d      	ldr	r3, [pc, #116]	; (800b324 <EXTI_Init+0xd8>)
 800b2ae:	4a1d      	ldr	r2, [pc, #116]	; (800b324 <EXTI_Init+0xd8>)
 800b2b0:	68d1      	ldr	r1, [r2, #12]
 800b2b2:	687a      	ldr	r2, [r7, #4]
 800b2b4:	6812      	ldr	r2, [r2, #0]
 800b2b6:	43d2      	mvns	r2, r2
 800b2b8:	400a      	ands	r2, r1
 800b2ba:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	795b      	ldrb	r3, [r3, #5]
 800b2c0:	2b10      	cmp	r3, #16
 800b2c2:	d10e      	bne.n	800b2e2 <EXTI_Init+0x96>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 800b2c4:	4b17      	ldr	r3, [pc, #92]	; (800b324 <EXTI_Init+0xd8>)
 800b2c6:	4a17      	ldr	r2, [pc, #92]	; (800b324 <EXTI_Init+0xd8>)
 800b2c8:	6891      	ldr	r1, [r2, #8]
 800b2ca:	687a      	ldr	r2, [r7, #4]
 800b2cc:	6812      	ldr	r2, [r2, #0]
 800b2ce:	430a      	orrs	r2, r1
 800b2d0:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 800b2d2:	4b14      	ldr	r3, [pc, #80]	; (800b324 <EXTI_Init+0xd8>)
 800b2d4:	4a13      	ldr	r2, [pc, #76]	; (800b324 <EXTI_Init+0xd8>)
 800b2d6:	68d1      	ldr	r1, [r2, #12]
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	6812      	ldr	r2, [r2, #0]
 800b2dc:	430a      	orrs	r2, r1
 800b2de:	60da      	str	r2, [r3, #12]
 800b2e0:	e01b      	b.n	800b31a <EXTI_Init+0xce>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 800b2e2:	4b10      	ldr	r3, [pc, #64]	; (800b324 <EXTI_Init+0xd8>)
 800b2e4:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	795b      	ldrb	r3, [r3, #5]
 800b2ea:	68fa      	ldr	r2, [r7, #12]
 800b2ec:	4413      	add	r3, r2
 800b2ee:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	68fa      	ldr	r2, [r7, #12]
 800b2f4:	6811      	ldr	r1, [r2, #0]
 800b2f6:	687a      	ldr	r2, [r7, #4]
 800b2f8:	6812      	ldr	r2, [r2, #0]
 800b2fa:	430a      	orrs	r2, r1
 800b2fc:	601a      	str	r2, [r3, #0]
 800b2fe:	e00c      	b.n	800b31a <EXTI_Init+0xce>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	791b      	ldrb	r3, [r3, #4]
 800b304:	68fa      	ldr	r2, [r7, #12]
 800b306:	4413      	add	r3, r2
 800b308:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	68fa      	ldr	r2, [r7, #12]
 800b30e:	6811      	ldr	r1, [r2, #0]
 800b310:	687a      	ldr	r2, [r7, #4]
 800b312:	6812      	ldr	r2, [r2, #0]
 800b314:	43d2      	mvns	r2, r2
 800b316:	400a      	ands	r2, r1
 800b318:	601a      	str	r2, [r3, #0]
  }
}
 800b31a:	3714      	adds	r7, #20
 800b31c:	46bd      	mov	sp, r7
 800b31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b322:	4770      	bx	lr
 800b324:	40013c00 	.word	0x40013c00

0800b328 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800b328:	b480      	push	{r7}
 800b32a:	b083      	sub	sp, #12
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2200      	movs	r2, #0
 800b334:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2200      	movs	r2, #0
 800b33a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	220c      	movs	r2, #12
 800b340:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2200      	movs	r2, #0
 800b346:	719a      	strb	r2, [r3, #6]
}
 800b348:	370c      	adds	r7, #12
 800b34a:	46bd      	mov	sp, r7
 800b34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b350:	4770      	bx	lr
 800b352:	bf00      	nop

0800b354 <EXTI_GenerateSWInterrupt>:
  *         will be generated.
  *         This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
 800b354:	b480      	push	{r7}
 800b356:	b083      	sub	sp, #12
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 800b35c:	4b05      	ldr	r3, [pc, #20]	; (800b374 <EXTI_GenerateSWInterrupt+0x20>)
 800b35e:	4a05      	ldr	r2, [pc, #20]	; (800b374 <EXTI_GenerateSWInterrupt+0x20>)
 800b360:	6911      	ldr	r1, [r2, #16]
 800b362:	687a      	ldr	r2, [r7, #4]
 800b364:	430a      	orrs	r2, r1
 800b366:	611a      	str	r2, [r3, #16]
}
 800b368:	370c      	adds	r7, #12
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr
 800b372:	bf00      	nop
 800b374:	40013c00 	.word	0x40013c00

0800b378 <EXTI_GetFlagStatus>:
  * @param  EXTI_Line: specifies the EXTI line flag to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 800b378:	b480      	push	{r7}
 800b37a:	b085      	sub	sp, #20
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800b380:	2300      	movs	r3, #0
 800b382:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 800b384:	4b08      	ldr	r3, [pc, #32]	; (800b3a8 <EXTI_GetFlagStatus+0x30>)
 800b386:	695a      	ldr	r2, [r3, #20]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	4013      	ands	r3, r2
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d002      	beq.n	800b396 <EXTI_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 800b390:	2301      	movs	r3, #1
 800b392:	73fb      	strb	r3, [r7, #15]
 800b394:	e001      	b.n	800b39a <EXTI_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800b396:	2300      	movs	r3, #0
 800b398:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b39a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3714      	adds	r7, #20
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr
 800b3a8:	40013c00 	.word	0x40013c00

0800b3ac <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b083      	sub	sp, #12
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 800b3b4:	4b03      	ldr	r3, [pc, #12]	; (800b3c4 <EXTI_ClearFlag+0x18>)
 800b3b6:	687a      	ldr	r2, [r7, #4]
 800b3b8:	615a      	str	r2, [r3, #20]
}
 800b3ba:	370c      	adds	r7, #12
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr
 800b3c4:	40013c00 	.word	0x40013c00

0800b3c8 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b085      	sub	sp, #20
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 800b3d4:	4b08      	ldr	r3, [pc, #32]	; (800b3f8 <EXTI_GetITStatus+0x30>)
 800b3d6:	695a      	ldr	r2, [r3, #20]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	4013      	ands	r3, r2
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d002      	beq.n	800b3e6 <EXTI_GetITStatus+0x1e>
  {
    bitstatus = SET;
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	73fb      	strb	r3, [r7, #15]
 800b3e4:	e001      	b.n	800b3ea <EXTI_GetITStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b3ea:	7bfb      	ldrb	r3, [r7, #15]
  
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3714      	adds	r7, #20
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f6:	4770      	bx	lr
 800b3f8:	40013c00 	.word	0x40013c00

0800b3fc <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b083      	sub	sp, #12
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 800b404:	4b03      	ldr	r3, [pc, #12]	; (800b414 <EXTI_ClearITPendingBit+0x18>)
 800b406:	687a      	ldr	r2, [r7, #4]
 800b408:	615a      	str	r2, [r3, #20]
}
 800b40a:	370c      	adds	r7, #12
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr
 800b414:	40013c00 	.word	0x40013c00

0800b418 <FLASH_SetLatency>:
  *       FLASH_Latency_0 and FLASH_Latency_15. 
  *         
  * @retval None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
 800b418:	b480      	push	{r7}
 800b41a:	b083      	sub	sp, #12
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
  *(__IO uint8_t *)ACR_BYTE0_ADDRESS = (uint8_t)FLASH_Latency;
 800b420:	4b04      	ldr	r3, [pc, #16]	; (800b434 <FLASH_SetLatency+0x1c>)
 800b422:	687a      	ldr	r2, [r7, #4]
 800b424:	b2d2      	uxtb	r2, r2
 800b426:	701a      	strb	r2, [r3, #0]
}
 800b428:	370c      	adds	r7, #12
 800b42a:	46bd      	mov	sp, r7
 800b42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b430:	4770      	bx	lr
 800b432:	bf00      	nop
 800b434:	40023c00 	.word	0x40023c00

0800b438 <FLASH_PrefetchBufferCmd>:
  * @param  NewState: new state of the Prefetch Buffer.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_PrefetchBufferCmd(FunctionalState NewState)
{
 800b438:	b480      	push	{r7}
 800b43a:	b083      	sub	sp, #12
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	4603      	mov	r3, r0
 800b440:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Enable or disable the Prefetch Buffer */
  if(NewState != DISABLE)
 800b442:	79fb      	ldrb	r3, [r7, #7]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d006      	beq.n	800b456 <FLASH_PrefetchBufferCmd+0x1e>
  {
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 800b448:	4b08      	ldr	r3, [pc, #32]	; (800b46c <FLASH_PrefetchBufferCmd+0x34>)
 800b44a:	4a08      	ldr	r2, [pc, #32]	; (800b46c <FLASH_PrefetchBufferCmd+0x34>)
 800b44c:	6812      	ldr	r2, [r2, #0]
 800b44e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b452:	601a      	str	r2, [r3, #0]
 800b454:	e005      	b.n	800b462 <FLASH_PrefetchBufferCmd+0x2a>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_PRFTEN);
 800b456:	4b05      	ldr	r3, [pc, #20]	; (800b46c <FLASH_PrefetchBufferCmd+0x34>)
 800b458:	4a04      	ldr	r2, [pc, #16]	; (800b46c <FLASH_PrefetchBufferCmd+0x34>)
 800b45a:	6812      	ldr	r2, [r2, #0]
 800b45c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b460:	601a      	str	r2, [r3, #0]
  }
}
 800b462:	370c      	adds	r7, #12
 800b464:	46bd      	mov	sp, r7
 800b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46a:	4770      	bx	lr
 800b46c:	40023c00 	.word	0x40023c00

0800b470 <FLASH_InstructionCacheCmd>:
  * @param  NewState: new state of the Instruction Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_InstructionCacheCmd(FunctionalState NewState)
{
 800b470:	b480      	push	{r7}
 800b472:	b083      	sub	sp, #12
 800b474:	af00      	add	r7, sp, #0
 800b476:	4603      	mov	r3, r0
 800b478:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 800b47a:	79fb      	ldrb	r3, [r7, #7]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d006      	beq.n	800b48e <FLASH_InstructionCacheCmd+0x1e>
  {
    FLASH->ACR |= FLASH_ACR_ICEN;
 800b480:	4b08      	ldr	r3, [pc, #32]	; (800b4a4 <FLASH_InstructionCacheCmd+0x34>)
 800b482:	4a08      	ldr	r2, [pc, #32]	; (800b4a4 <FLASH_InstructionCacheCmd+0x34>)
 800b484:	6812      	ldr	r2, [r2, #0]
 800b486:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b48a:	601a      	str	r2, [r3, #0]
 800b48c:	e005      	b.n	800b49a <FLASH_InstructionCacheCmd+0x2a>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_ICEN);
 800b48e:	4b05      	ldr	r3, [pc, #20]	; (800b4a4 <FLASH_InstructionCacheCmd+0x34>)
 800b490:	4a04      	ldr	r2, [pc, #16]	; (800b4a4 <FLASH_InstructionCacheCmd+0x34>)
 800b492:	6812      	ldr	r2, [r2, #0]
 800b494:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b498:	601a      	str	r2, [r3, #0]
  }
}
 800b49a:	370c      	adds	r7, #12
 800b49c:	46bd      	mov	sp, r7
 800b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a2:	4770      	bx	lr
 800b4a4:	40023c00 	.word	0x40023c00

0800b4a8 <FLASH_DataCacheCmd>:
  * @param  NewState: new state of the Data Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_DataCacheCmd(FunctionalState NewState)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b083      	sub	sp, #12
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 800b4b2:	79fb      	ldrb	r3, [r7, #7]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d006      	beq.n	800b4c6 <FLASH_DataCacheCmd+0x1e>
  {
    FLASH->ACR |= FLASH_ACR_DCEN;
 800b4b8:	4b08      	ldr	r3, [pc, #32]	; (800b4dc <FLASH_DataCacheCmd+0x34>)
 800b4ba:	4a08      	ldr	r2, [pc, #32]	; (800b4dc <FLASH_DataCacheCmd+0x34>)
 800b4bc:	6812      	ldr	r2, [r2, #0]
 800b4be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b4c2:	601a      	str	r2, [r3, #0]
 800b4c4:	e005      	b.n	800b4d2 <FLASH_DataCacheCmd+0x2a>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_DCEN);
 800b4c6:	4b05      	ldr	r3, [pc, #20]	; (800b4dc <FLASH_DataCacheCmd+0x34>)
 800b4c8:	4a04      	ldr	r2, [pc, #16]	; (800b4dc <FLASH_DataCacheCmd+0x34>)
 800b4ca:	6812      	ldr	r2, [r2, #0]
 800b4cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b4d0:	601a      	str	r2, [r3, #0]
  }
}
 800b4d2:	370c      	adds	r7, #12
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4da:	4770      	bx	lr
 800b4dc:	40023c00 	.word	0x40023c00

0800b4e0 <FLASH_InstructionCacheReset>:
  * @note   This function must be used only when the Instruction Cache is disabled.  
  * @param  None
  * @retval None
  */
void FLASH_InstructionCacheReset(void)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	af00      	add	r7, sp, #0
  FLASH->ACR |= FLASH_ACR_ICRST;
 800b4e4:	4b04      	ldr	r3, [pc, #16]	; (800b4f8 <FLASH_InstructionCacheReset+0x18>)
 800b4e6:	4a04      	ldr	r2, [pc, #16]	; (800b4f8 <FLASH_InstructionCacheReset+0x18>)
 800b4e8:	6812      	ldr	r2, [r2, #0]
 800b4ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b4ee:	601a      	str	r2, [r3, #0]
}
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr
 800b4f8:	40023c00 	.word	0x40023c00

0800b4fc <FLASH_DataCacheReset>:
  * @note   This function must be used only when the Data Cache is disabled.  
  * @param  None
  * @retval None
  */
void FLASH_DataCacheReset(void)
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	af00      	add	r7, sp, #0
  FLASH->ACR |= FLASH_ACR_DCRST;
 800b500:	4b04      	ldr	r3, [pc, #16]	; (800b514 <FLASH_DataCacheReset+0x18>)
 800b502:	4a04      	ldr	r2, [pc, #16]	; (800b514 <FLASH_DataCacheReset+0x18>)
 800b504:	6812      	ldr	r2, [r2, #0]
 800b506:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b50a:	601a      	str	r2, [r3, #0]
}
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr
 800b514:	40023c00 	.word	0x40023c00

0800b518 <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 800b518:	b480      	push	{r7}
 800b51a:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 800b51c:	4b06      	ldr	r3, [pc, #24]	; (800b538 <FLASH_Unlock+0x20>)
 800b51e:	691b      	ldr	r3, [r3, #16]
 800b520:	2b00      	cmp	r3, #0
 800b522:	da05      	bge.n	800b530 <FLASH_Unlock+0x18>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 800b524:	4b04      	ldr	r3, [pc, #16]	; (800b538 <FLASH_Unlock+0x20>)
 800b526:	4a05      	ldr	r2, [pc, #20]	; (800b53c <FLASH_Unlock+0x24>)
 800b528:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 800b52a:	4b03      	ldr	r3, [pc, #12]	; (800b538 <FLASH_Unlock+0x20>)
 800b52c:	4a04      	ldr	r2, [pc, #16]	; (800b540 <FLASH_Unlock+0x28>)
 800b52e:	605a      	str	r2, [r3, #4]
  }  
}
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr
 800b538:	40023c00 	.word	0x40023c00
 800b53c:	45670123 	.word	0x45670123
 800b540:	cdef89ab 	.word	0xcdef89ab

0800b544 <FLASH_Lock>:
  * @brief  Locks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 800b544:	b480      	push	{r7}
 800b546:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800b548:	4b04      	ldr	r3, [pc, #16]	; (800b55c <FLASH_Lock+0x18>)
 800b54a:	4a04      	ldr	r2, [pc, #16]	; (800b55c <FLASH_Lock+0x18>)
 800b54c:	6912      	ldr	r2, [r2, #16]
 800b54e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800b552:	611a      	str	r2, [r3, #16]
}
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr
 800b55c:	40023c00 	.word	0x40023c00

0800b560 <FLASH_EraseSector>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b084      	sub	sp, #16
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	460b      	mov	r3, r1
 800b56a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0x0;
 800b56c:	2300      	movs	r3, #0
 800b56e:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 800b570:	2309      	movs	r3, #9
 800b572:	72fb      	strb	r3, [r7, #11]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 800b574:	78fb      	ldrb	r3, [r7, #3]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d102      	bne.n	800b580 <FLASH_EraseSector+0x20>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800b57a:	2300      	movs	r3, #0
 800b57c:	60fb      	str	r3, [r7, #12]
 800b57e:	e010      	b.n	800b5a2 <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_2)
 800b580:	78fb      	ldrb	r3, [r7, #3]
 800b582:	2b01      	cmp	r3, #1
 800b584:	d103      	bne.n	800b58e <FLASH_EraseSector+0x2e>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800b586:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b58a:	60fb      	str	r3, [r7, #12]
 800b58c:	e009      	b.n	800b5a2 <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_3)
 800b58e:	78fb      	ldrb	r3, [r7, #3]
 800b590:	2b02      	cmp	r3, #2
 800b592:	d103      	bne.n	800b59c <FLASH_EraseSector+0x3c>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800b594:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b598:	60fb      	str	r3, [r7, #12]
 800b59a:	e002      	b.n	800b5a2 <FLASH_EraseSector+0x42>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800b59c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b5a0:	60fb      	str	r3, [r7, #12]
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800b5a2:	f000 fc73 	bl	800be8c <FLASH_WaitForLastOperation>
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	72fb      	strb	r3, [r7, #11]
  
  if(status == FLASH_COMPLETE)
 800b5aa:	7afb      	ldrb	r3, [r7, #11]
 800b5ac:	2b09      	cmp	r3, #9
 800b5ae:	d12f      	bne.n	800b610 <FLASH_EraseSector+0xb0>
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 800b5b0:	4b1a      	ldr	r3, [pc, #104]	; (800b61c <FLASH_EraseSector+0xbc>)
 800b5b2:	4a1a      	ldr	r2, [pc, #104]	; (800b61c <FLASH_EraseSector+0xbc>)
 800b5b4:	6912      	ldr	r2, [r2, #16]
 800b5b6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b5ba:	611a      	str	r2, [r3, #16]
    FLASH->CR |= tmp_psize;
 800b5bc:	4b17      	ldr	r3, [pc, #92]	; (800b61c <FLASH_EraseSector+0xbc>)
 800b5be:	4a17      	ldr	r2, [pc, #92]	; (800b61c <FLASH_EraseSector+0xbc>)
 800b5c0:	6911      	ldr	r1, [r2, #16]
 800b5c2:	68fa      	ldr	r2, [r7, #12]
 800b5c4:	430a      	orrs	r2, r1
 800b5c6:	611a      	str	r2, [r3, #16]
    FLASH->CR &= SECTOR_MASK;
 800b5c8:	4b14      	ldr	r3, [pc, #80]	; (800b61c <FLASH_EraseSector+0xbc>)
 800b5ca:	4a14      	ldr	r2, [pc, #80]	; (800b61c <FLASH_EraseSector+0xbc>)
 800b5cc:	6912      	ldr	r2, [r2, #16]
 800b5ce:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800b5d2:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 800b5d4:	4b11      	ldr	r3, [pc, #68]	; (800b61c <FLASH_EraseSector+0xbc>)
 800b5d6:	4a11      	ldr	r2, [pc, #68]	; (800b61c <FLASH_EraseSector+0xbc>)
 800b5d8:	6911      	ldr	r1, [r2, #16]
 800b5da:	687a      	ldr	r2, [r7, #4]
 800b5dc:	430a      	orrs	r2, r1
 800b5de:	f042 0202 	orr.w	r2, r2, #2
 800b5e2:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_STRT;
 800b5e4:	4b0d      	ldr	r3, [pc, #52]	; (800b61c <FLASH_EraseSector+0xbc>)
 800b5e6:	4a0d      	ldr	r2, [pc, #52]	; (800b61c <FLASH_EraseSector+0xbc>)
 800b5e8:	6912      	ldr	r2, [r2, #16]
 800b5ea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b5ee:	611a      	str	r2, [r3, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800b5f0:	f000 fc4c 	bl	800be8c <FLASH_WaitForLastOperation>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	72fb      	strb	r3, [r7, #11]
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 800b5f8:	4b08      	ldr	r3, [pc, #32]	; (800b61c <FLASH_EraseSector+0xbc>)
 800b5fa:	4a08      	ldr	r2, [pc, #32]	; (800b61c <FLASH_EraseSector+0xbc>)
 800b5fc:	6912      	ldr	r2, [r2, #16]
 800b5fe:	f022 0202 	bic.w	r2, r2, #2
 800b602:	611a      	str	r2, [r3, #16]
    FLASH->CR &= SECTOR_MASK; 
 800b604:	4b05      	ldr	r3, [pc, #20]	; (800b61c <FLASH_EraseSector+0xbc>)
 800b606:	4a05      	ldr	r2, [pc, #20]	; (800b61c <FLASH_EraseSector+0xbc>)
 800b608:	6912      	ldr	r2, [r2, #16]
 800b60a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800b60e:	611a      	str	r2, [r3, #16]
  }
  /* Return the Erase Status */
  return status;
 800b610:	7afb      	ldrb	r3, [r7, #11]
}
 800b612:	4618      	mov	r0, r3
 800b614:	3710      	adds	r7, #16
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}
 800b61a:	bf00      	nop
 800b61c:	40023c00 	.word	0x40023c00

0800b620 <FLASH_EraseAllSectors>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseAllSectors(uint8_t VoltageRange)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b084      	sub	sp, #16
 800b624:	af00      	add	r7, sp, #0
 800b626:	4603      	mov	r3, r0
 800b628:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp_psize = 0x0;
 800b62a:	2300      	movs	r3, #0
 800b62c:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 800b62e:	2309      	movs	r3, #9
 800b630:	72fb      	strb	r3, [r7, #11]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800b632:	f000 fc2b 	bl	800be8c <FLASH_WaitForLastOperation>
 800b636:	4603      	mov	r3, r0
 800b638:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 800b63a:	79fb      	ldrb	r3, [r7, #7]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d102      	bne.n	800b646 <FLASH_EraseAllSectors+0x26>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800b640:	2300      	movs	r3, #0
 800b642:	60fb      	str	r3, [r7, #12]
 800b644:	e010      	b.n	800b668 <FLASH_EraseAllSectors+0x48>
  }
  else if(VoltageRange == VoltageRange_2)
 800b646:	79fb      	ldrb	r3, [r7, #7]
 800b648:	2b01      	cmp	r3, #1
 800b64a:	d103      	bne.n	800b654 <FLASH_EraseAllSectors+0x34>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800b64c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b650:	60fb      	str	r3, [r7, #12]
 800b652:	e009      	b.n	800b668 <FLASH_EraseAllSectors+0x48>
  }
  else if(VoltageRange == VoltageRange_3)
 800b654:	79fb      	ldrb	r3, [r7, #7]
 800b656:	2b02      	cmp	r3, #2
 800b658:	d103      	bne.n	800b662 <FLASH_EraseAllSectors+0x42>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800b65a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b65e:	60fb      	str	r3, [r7, #12]
 800b660:	e002      	b.n	800b668 <FLASH_EraseAllSectors+0x48>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800b662:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b666:	60fb      	str	r3, [r7, #12]
  }  
  if(status == FLASH_COMPLETE)
 800b668:	7afb      	ldrb	r3, [r7, #11]
 800b66a:	2b09      	cmp	r3, #9
 800b66c:	d125      	bne.n	800b6ba <FLASH_EraseAllSectors+0x9a>
  {
    /* if the previous operation is completed, proceed to erase all sectors */
#if defined (STM32F427_437xx) || defined (STM32F429_439xx)    
    FLASH->CR &= CR_PSIZE_MASK;
 800b66e:	4b15      	ldr	r3, [pc, #84]	; (800b6c4 <FLASH_EraseAllSectors+0xa4>)
 800b670:	4a14      	ldr	r2, [pc, #80]	; (800b6c4 <FLASH_EraseAllSectors+0xa4>)
 800b672:	6912      	ldr	r2, [r2, #16]
 800b674:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b678:	611a      	str	r2, [r3, #16]
    FLASH->CR |= tmp_psize;
 800b67a:	4b12      	ldr	r3, [pc, #72]	; (800b6c4 <FLASH_EraseAllSectors+0xa4>)
 800b67c:	4a11      	ldr	r2, [pc, #68]	; (800b6c4 <FLASH_EraseAllSectors+0xa4>)
 800b67e:	6911      	ldr	r1, [r2, #16]
 800b680:	68fa      	ldr	r2, [r7, #12]
 800b682:	430a      	orrs	r2, r1
 800b684:	611a      	str	r2, [r3, #16]
    FLASH->CR |= (FLASH_CR_MER1 | FLASH_CR_MER2);
 800b686:	4a0f      	ldr	r2, [pc, #60]	; (800b6c4 <FLASH_EraseAllSectors+0xa4>)
 800b688:	4b0e      	ldr	r3, [pc, #56]	; (800b6c4 <FLASH_EraseAllSectors+0xa4>)
 800b68a:	691b      	ldr	r3, [r3, #16]
 800b68c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b690:	f043 0304 	orr.w	r3, r3, #4
 800b694:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_STRT;
 800b696:	4b0b      	ldr	r3, [pc, #44]	; (800b6c4 <FLASH_EraseAllSectors+0xa4>)
 800b698:	4a0a      	ldr	r2, [pc, #40]	; (800b6c4 <FLASH_EraseAllSectors+0xa4>)
 800b69a:	6912      	ldr	r2, [r2, #16]
 800b69c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b6a0:	611a      	str	r2, [r3, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800b6a2:	f000 fbf3 	bl	800be8c <FLASH_WaitForLastOperation>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	72fb      	strb	r3, [r7, #11]

    /* if the erase operation is completed, disable the MER Bit */
    FLASH->CR &= ~(FLASH_CR_MER1 | FLASH_CR_MER2);
 800b6aa:	4a06      	ldr	r2, [pc, #24]	; (800b6c4 <FLASH_EraseAllSectors+0xa4>)
 800b6ac:	4b05      	ldr	r3, [pc, #20]	; (800b6c4 <FLASH_EraseAllSectors+0xa4>)
 800b6ae:	691b      	ldr	r3, [r3, #16]
 800b6b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b6b4:	f023 0304 	bic.w	r3, r3, #4
 800b6b8:	6113      	str	r3, [r2, #16]
    FLASH->CR &= (~FLASH_CR_MER);
#endif /* STM32F40_41xxx || STM32F401xx */

  }   
  /* Return the Erase Status */
  return status;
 800b6ba:	7afb      	ldrb	r3, [r7, #11]
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3710      	adds	r7, #16
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}
 800b6c4:	40023c00 	.word	0x40023c00

0800b6c8 <FLASH_EraseAllBank1Sectors>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseAllBank1Sectors(uint8_t VoltageRange)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b084      	sub	sp, #16
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp_psize = 0x0;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 800b6d6:	2309      	movs	r3, #9
 800b6d8:	72fb      	strb	r3, [r7, #11]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800b6da:	f000 fbd7 	bl	800be8c <FLASH_WaitForLastOperation>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 800b6e2:	79fb      	ldrb	r3, [r7, #7]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d102      	bne.n	800b6ee <FLASH_EraseAllBank1Sectors+0x26>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	60fb      	str	r3, [r7, #12]
 800b6ec:	e010      	b.n	800b710 <FLASH_EraseAllBank1Sectors+0x48>
  }
  else if(VoltageRange == VoltageRange_2)
 800b6ee:	79fb      	ldrb	r3, [r7, #7]
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d103      	bne.n	800b6fc <FLASH_EraseAllBank1Sectors+0x34>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800b6f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6f8:	60fb      	str	r3, [r7, #12]
 800b6fa:	e009      	b.n	800b710 <FLASH_EraseAllBank1Sectors+0x48>
  }
  else if(VoltageRange == VoltageRange_3)
 800b6fc:	79fb      	ldrb	r3, [r7, #7]
 800b6fe:	2b02      	cmp	r3, #2
 800b700:	d103      	bne.n	800b70a <FLASH_EraseAllBank1Sectors+0x42>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800b702:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b706:	60fb      	str	r3, [r7, #12]
 800b708:	e002      	b.n	800b710 <FLASH_EraseAllBank1Sectors+0x48>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800b70a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b70e:	60fb      	str	r3, [r7, #12]
  }  
  if(status == FLASH_COMPLETE)
 800b710:	7afb      	ldrb	r3, [r7, #11]
 800b712:	2b09      	cmp	r3, #9
 800b714:	d121      	bne.n	800b75a <FLASH_EraseAllBank1Sectors+0x92>
  {
    /* if the previous operation is completed, proceed to erase all sectors */
     FLASH->CR &= CR_PSIZE_MASK;
 800b716:	4b13      	ldr	r3, [pc, #76]	; (800b764 <FLASH_EraseAllBank1Sectors+0x9c>)
 800b718:	4a12      	ldr	r2, [pc, #72]	; (800b764 <FLASH_EraseAllBank1Sectors+0x9c>)
 800b71a:	6912      	ldr	r2, [r2, #16]
 800b71c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b720:	611a      	str	r2, [r3, #16]
     FLASH->CR |= tmp_psize;
 800b722:	4b10      	ldr	r3, [pc, #64]	; (800b764 <FLASH_EraseAllBank1Sectors+0x9c>)
 800b724:	4a0f      	ldr	r2, [pc, #60]	; (800b764 <FLASH_EraseAllBank1Sectors+0x9c>)
 800b726:	6911      	ldr	r1, [r2, #16]
 800b728:	68fa      	ldr	r2, [r7, #12]
 800b72a:	430a      	orrs	r2, r1
 800b72c:	611a      	str	r2, [r3, #16]
     FLASH->CR |= FLASH_CR_MER1;
 800b72e:	4b0d      	ldr	r3, [pc, #52]	; (800b764 <FLASH_EraseAllBank1Sectors+0x9c>)
 800b730:	4a0c      	ldr	r2, [pc, #48]	; (800b764 <FLASH_EraseAllBank1Sectors+0x9c>)
 800b732:	6912      	ldr	r2, [r2, #16]
 800b734:	f042 0204 	orr.w	r2, r2, #4
 800b738:	611a      	str	r2, [r3, #16]
     FLASH->CR |= FLASH_CR_STRT;
 800b73a:	4b0a      	ldr	r3, [pc, #40]	; (800b764 <FLASH_EraseAllBank1Sectors+0x9c>)
 800b73c:	4a09      	ldr	r2, [pc, #36]	; (800b764 <FLASH_EraseAllBank1Sectors+0x9c>)
 800b73e:	6912      	ldr	r2, [r2, #16]
 800b740:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b744:	611a      	str	r2, [r3, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800b746:	f000 fba1 	bl	800be8c <FLASH_WaitForLastOperation>
 800b74a:	4603      	mov	r3, r0
 800b74c:	72fb      	strb	r3, [r7, #11]

    /* if the erase operation is completed, disable the MER Bit */
    FLASH->CR &= (~FLASH_CR_MER1);
 800b74e:	4b05      	ldr	r3, [pc, #20]	; (800b764 <FLASH_EraseAllBank1Sectors+0x9c>)
 800b750:	4a04      	ldr	r2, [pc, #16]	; (800b764 <FLASH_EraseAllBank1Sectors+0x9c>)
 800b752:	6912      	ldr	r2, [r2, #16]
 800b754:	f022 0204 	bic.w	r2, r2, #4
 800b758:	611a      	str	r2, [r3, #16]

  }   
  /* Return the Erase Status */
  return status;
 800b75a:	7afb      	ldrb	r3, [r7, #11]
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3710      	adds	r7, #16
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}
 800b764:	40023c00 	.word	0x40023c00

0800b768 <FLASH_EraseAllBank2Sectors>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseAllBank2Sectors(uint8_t VoltageRange)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b084      	sub	sp, #16
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	4603      	mov	r3, r0
 800b770:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp_psize = 0x0;
 800b772:	2300      	movs	r3, #0
 800b774:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 800b776:	2309      	movs	r3, #9
 800b778:	72fb      	strb	r3, [r7, #11]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800b77a:	f000 fb87 	bl	800be8c <FLASH_WaitForLastOperation>
 800b77e:	4603      	mov	r3, r0
 800b780:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 800b782:	79fb      	ldrb	r3, [r7, #7]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d102      	bne.n	800b78e <FLASH_EraseAllBank2Sectors+0x26>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800b788:	2300      	movs	r3, #0
 800b78a:	60fb      	str	r3, [r7, #12]
 800b78c:	e010      	b.n	800b7b0 <FLASH_EraseAllBank2Sectors+0x48>
  }
  else if(VoltageRange == VoltageRange_2)
 800b78e:	79fb      	ldrb	r3, [r7, #7]
 800b790:	2b01      	cmp	r3, #1
 800b792:	d103      	bne.n	800b79c <FLASH_EraseAllBank2Sectors+0x34>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800b794:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b798:	60fb      	str	r3, [r7, #12]
 800b79a:	e009      	b.n	800b7b0 <FLASH_EraseAllBank2Sectors+0x48>
  }
  else if(VoltageRange == VoltageRange_3)
 800b79c:	79fb      	ldrb	r3, [r7, #7]
 800b79e:	2b02      	cmp	r3, #2
 800b7a0:	d103      	bne.n	800b7aa <FLASH_EraseAllBank2Sectors+0x42>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800b7a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b7a6:	60fb      	str	r3, [r7, #12]
 800b7a8:	e002      	b.n	800b7b0 <FLASH_EraseAllBank2Sectors+0x48>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800b7aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b7ae:	60fb      	str	r3, [r7, #12]
  }  
  if(status == FLASH_COMPLETE)
 800b7b0:	7afb      	ldrb	r3, [r7, #11]
 800b7b2:	2b09      	cmp	r3, #9
 800b7b4:	d121      	bne.n	800b7fa <FLASH_EraseAllBank2Sectors+0x92>
  {
    /* if the previous operation is completed, proceed to erase all sectors */
     FLASH->CR &= CR_PSIZE_MASK;
 800b7b6:	4b13      	ldr	r3, [pc, #76]	; (800b804 <FLASH_EraseAllBank2Sectors+0x9c>)
 800b7b8:	4a12      	ldr	r2, [pc, #72]	; (800b804 <FLASH_EraseAllBank2Sectors+0x9c>)
 800b7ba:	6912      	ldr	r2, [r2, #16]
 800b7bc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b7c0:	611a      	str	r2, [r3, #16]
     FLASH->CR |= tmp_psize;
 800b7c2:	4b10      	ldr	r3, [pc, #64]	; (800b804 <FLASH_EraseAllBank2Sectors+0x9c>)
 800b7c4:	4a0f      	ldr	r2, [pc, #60]	; (800b804 <FLASH_EraseAllBank2Sectors+0x9c>)
 800b7c6:	6911      	ldr	r1, [r2, #16]
 800b7c8:	68fa      	ldr	r2, [r7, #12]
 800b7ca:	430a      	orrs	r2, r1
 800b7cc:	611a      	str	r2, [r3, #16]
     FLASH->CR |= FLASH_CR_MER2;
 800b7ce:	4b0d      	ldr	r3, [pc, #52]	; (800b804 <FLASH_EraseAllBank2Sectors+0x9c>)
 800b7d0:	4a0c      	ldr	r2, [pc, #48]	; (800b804 <FLASH_EraseAllBank2Sectors+0x9c>)
 800b7d2:	6912      	ldr	r2, [r2, #16]
 800b7d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b7d8:	611a      	str	r2, [r3, #16]
     FLASH->CR |= FLASH_CR_STRT;
 800b7da:	4b0a      	ldr	r3, [pc, #40]	; (800b804 <FLASH_EraseAllBank2Sectors+0x9c>)
 800b7dc:	4a09      	ldr	r2, [pc, #36]	; (800b804 <FLASH_EraseAllBank2Sectors+0x9c>)
 800b7de:	6912      	ldr	r2, [r2, #16]
 800b7e0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b7e4:	611a      	str	r2, [r3, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800b7e6:	f000 fb51 	bl	800be8c <FLASH_WaitForLastOperation>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	72fb      	strb	r3, [r7, #11]

    /* if the erase operation is completed, disable the MER Bit */
    FLASH->CR &= (~FLASH_CR_MER2);
 800b7ee:	4b05      	ldr	r3, [pc, #20]	; (800b804 <FLASH_EraseAllBank2Sectors+0x9c>)
 800b7f0:	4a04      	ldr	r2, [pc, #16]	; (800b804 <FLASH_EraseAllBank2Sectors+0x9c>)
 800b7f2:	6912      	ldr	r2, [r2, #16]
 800b7f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b7f8:	611a      	str	r2, [r3, #16]

  }   
  /* Return the Erase Status */
  return status;
 800b7fa:	7afb      	ldrb	r3, [r7, #11]
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	3710      	adds	r7, #16
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}
 800b804:	40023c00 	.word	0x40023c00

0800b808 <FLASH_ProgramDoubleWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b086      	sub	sp, #24
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	60f8      	str	r0, [r7, #12]
 800b810:	e9c7 2300 	strd	r2, r3, [r7]
  FLASH_Status status = FLASH_COMPLETE;
 800b814:	2309      	movs	r3, #9
 800b816:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800b818:	f000 fb38 	bl	800be8c <FLASH_WaitForLastOperation>
 800b81c:	4603      	mov	r3, r0
 800b81e:	75fb      	strb	r3, [r7, #23]
  
  if(status == FLASH_COMPLETE)
 800b820:	7dfb      	ldrb	r3, [r7, #23]
 800b822:	2b09      	cmp	r3, #9
 800b824:	d120      	bne.n	800b868 <FLASH_ProgramDoubleWord+0x60>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 800b826:	4b13      	ldr	r3, [pc, #76]	; (800b874 <FLASH_ProgramDoubleWord+0x6c>)
 800b828:	4a12      	ldr	r2, [pc, #72]	; (800b874 <FLASH_ProgramDoubleWord+0x6c>)
 800b82a:	6912      	ldr	r2, [r2, #16]
 800b82c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b830:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800b832:	4b10      	ldr	r3, [pc, #64]	; (800b874 <FLASH_ProgramDoubleWord+0x6c>)
 800b834:	4a0f      	ldr	r2, [pc, #60]	; (800b874 <FLASH_ProgramDoubleWord+0x6c>)
 800b836:	6912      	ldr	r2, [r2, #16]
 800b838:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800b83c:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 800b83e:	4b0d      	ldr	r3, [pc, #52]	; (800b874 <FLASH_ProgramDoubleWord+0x6c>)
 800b840:	4a0c      	ldr	r2, [pc, #48]	; (800b874 <FLASH_ProgramDoubleWord+0x6c>)
 800b842:	6912      	ldr	r2, [r2, #16]
 800b844:	f042 0201 	orr.w	r2, r2, #1
 800b848:	611a      	str	r2, [r3, #16]
  
    *(__IO uint64_t*)Address = Data;
 800b84a:	68f9      	ldr	r1, [r7, #12]
 800b84c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b850:	e9c1 2300 	strd	r2, r3, [r1]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800b854:	f000 fb1a 	bl	800be8c <FLASH_WaitForLastOperation>
 800b858:	4603      	mov	r3, r0
 800b85a:	75fb      	strb	r3, [r7, #23]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800b85c:	4b05      	ldr	r3, [pc, #20]	; (800b874 <FLASH_ProgramDoubleWord+0x6c>)
 800b85e:	4a05      	ldr	r2, [pc, #20]	; (800b874 <FLASH_ProgramDoubleWord+0x6c>)
 800b860:	6912      	ldr	r2, [r2, #16]
 800b862:	f022 0201 	bic.w	r2, r2, #1
 800b866:	611a      	str	r2, [r3, #16]
  } 
  /* Return the Program Status */
  return status;
 800b868:	7dfb      	ldrb	r3, [r7, #23]
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3718      	adds	r7, #24
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop
 800b874:	40023c00 	.word	0x40023c00

0800b878 <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b084      	sub	sp, #16
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
 800b880:	6039      	str	r1, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE;
 800b882:	2309      	movs	r3, #9
 800b884:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800b886:	f000 fb01 	bl	800be8c <FLASH_WaitForLastOperation>
 800b88a:	4603      	mov	r3, r0
 800b88c:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 800b88e:	7bfb      	ldrb	r3, [r7, #15]
 800b890:	2b09      	cmp	r3, #9
 800b892:	d11e      	bne.n	800b8d2 <FLASH_ProgramWord+0x5a>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 800b894:	4b11      	ldr	r3, [pc, #68]	; (800b8dc <FLASH_ProgramWord+0x64>)
 800b896:	4a11      	ldr	r2, [pc, #68]	; (800b8dc <FLASH_ProgramWord+0x64>)
 800b898:	6912      	ldr	r2, [r2, #16]
 800b89a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b89e:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_WORD;
 800b8a0:	4b0e      	ldr	r3, [pc, #56]	; (800b8dc <FLASH_ProgramWord+0x64>)
 800b8a2:	4a0e      	ldr	r2, [pc, #56]	; (800b8dc <FLASH_ProgramWord+0x64>)
 800b8a4:	6912      	ldr	r2, [r2, #16]
 800b8a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b8aa:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 800b8ac:	4b0b      	ldr	r3, [pc, #44]	; (800b8dc <FLASH_ProgramWord+0x64>)
 800b8ae:	4a0b      	ldr	r2, [pc, #44]	; (800b8dc <FLASH_ProgramWord+0x64>)
 800b8b0:	6912      	ldr	r2, [r2, #16]
 800b8b2:	f042 0201 	orr.w	r2, r2, #1
 800b8b6:	611a      	str	r2, [r3, #16]
  
    *(__IO uint32_t*)Address = Data;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	683a      	ldr	r2, [r7, #0]
 800b8bc:	601a      	str	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800b8be:	f000 fae5 	bl	800be8c <FLASH_WaitForLastOperation>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800b8c6:	4b05      	ldr	r3, [pc, #20]	; (800b8dc <FLASH_ProgramWord+0x64>)
 800b8c8:	4a04      	ldr	r2, [pc, #16]	; (800b8dc <FLASH_ProgramWord+0x64>)
 800b8ca:	6912      	ldr	r2, [r2, #16]
 800b8cc:	f022 0201 	bic.w	r2, r2, #1
 800b8d0:	611a      	str	r2, [r3, #16]
  } 
  /* Return the Program Status */
  return status;
 800b8d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3710      	adds	r7, #16
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}
 800b8dc:	40023c00 	.word	0x40023c00

0800b8e0 <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	807b      	strh	r3, [r7, #2]
  FLASH_Status status = FLASH_COMPLETE;
 800b8ec:	2309      	movs	r3, #9
 800b8ee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800b8f0:	f000 facc 	bl	800be8c <FLASH_WaitForLastOperation>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 800b8f8:	7bfb      	ldrb	r3, [r7, #15]
 800b8fa:	2b09      	cmp	r3, #9
 800b8fc:	d11e      	bne.n	800b93c <FLASH_ProgramHalfWord+0x5c>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 800b8fe:	4b12      	ldr	r3, [pc, #72]	; (800b948 <FLASH_ProgramHalfWord+0x68>)
 800b900:	4a11      	ldr	r2, [pc, #68]	; (800b948 <FLASH_ProgramHalfWord+0x68>)
 800b902:	6912      	ldr	r2, [r2, #16]
 800b904:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b908:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800b90a:	4b0f      	ldr	r3, [pc, #60]	; (800b948 <FLASH_ProgramHalfWord+0x68>)
 800b90c:	4a0e      	ldr	r2, [pc, #56]	; (800b948 <FLASH_ProgramHalfWord+0x68>)
 800b90e:	6912      	ldr	r2, [r2, #16]
 800b910:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b914:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 800b916:	4b0c      	ldr	r3, [pc, #48]	; (800b948 <FLASH_ProgramHalfWord+0x68>)
 800b918:	4a0b      	ldr	r2, [pc, #44]	; (800b948 <FLASH_ProgramHalfWord+0x68>)
 800b91a:	6912      	ldr	r2, [r2, #16]
 800b91c:	f042 0201 	orr.w	r2, r2, #1
 800b920:	611a      	str	r2, [r3, #16]
  
    *(__IO uint16_t*)Address = Data;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	887a      	ldrh	r2, [r7, #2]
 800b926:	801a      	strh	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800b928:	f000 fab0 	bl	800be8c <FLASH_WaitForLastOperation>
 800b92c:	4603      	mov	r3, r0
 800b92e:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800b930:	4b05      	ldr	r3, [pc, #20]	; (800b948 <FLASH_ProgramHalfWord+0x68>)
 800b932:	4a05      	ldr	r2, [pc, #20]	; (800b948 <FLASH_ProgramHalfWord+0x68>)
 800b934:	6912      	ldr	r2, [r2, #16]
 800b936:	f022 0201 	bic.w	r2, r2, #1
 800b93a:	611a      	str	r2, [r3, #16]
  } 
  /* Return the Program Status */
  return status;
 800b93c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3710      	adds	r7, #16
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
 800b946:	bf00      	nop
 800b948:	40023c00 	.word	0x40023c00

0800b94c <FLASH_ProgramByte>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b084      	sub	sp, #16
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
 800b954:	460b      	mov	r3, r1
 800b956:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 800b958:	2309      	movs	r3, #9
 800b95a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800b95c:	f000 fa96 	bl	800be8c <FLASH_WaitForLastOperation>
 800b960:	4603      	mov	r3, r0
 800b962:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 800b964:	7bfb      	ldrb	r3, [r7, #15]
 800b966:	2b09      	cmp	r3, #9
 800b968:	d11c      	bne.n	800b9a4 <FLASH_ProgramByte+0x58>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 800b96a:	4b11      	ldr	r3, [pc, #68]	; (800b9b0 <FLASH_ProgramByte+0x64>)
 800b96c:	4a10      	ldr	r2, [pc, #64]	; (800b9b0 <FLASH_ProgramByte+0x64>)
 800b96e:	6912      	ldr	r2, [r2, #16]
 800b970:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b974:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_BYTE;
 800b976:	4b0e      	ldr	r3, [pc, #56]	; (800b9b0 <FLASH_ProgramByte+0x64>)
 800b978:	4a0d      	ldr	r2, [pc, #52]	; (800b9b0 <FLASH_ProgramByte+0x64>)
 800b97a:	6912      	ldr	r2, [r2, #16]
 800b97c:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 800b97e:	4b0c      	ldr	r3, [pc, #48]	; (800b9b0 <FLASH_ProgramByte+0x64>)
 800b980:	4a0b      	ldr	r2, [pc, #44]	; (800b9b0 <FLASH_ProgramByte+0x64>)
 800b982:	6912      	ldr	r2, [r2, #16]
 800b984:	f042 0201 	orr.w	r2, r2, #1
 800b988:	611a      	str	r2, [r3, #16]
  
    *(__IO uint8_t*)Address = Data;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	78fa      	ldrb	r2, [r7, #3]
 800b98e:	701a      	strb	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800b990:	f000 fa7c 	bl	800be8c <FLASH_WaitForLastOperation>
 800b994:	4603      	mov	r3, r0
 800b996:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800b998:	4b05      	ldr	r3, [pc, #20]	; (800b9b0 <FLASH_ProgramByte+0x64>)
 800b99a:	4a05      	ldr	r2, [pc, #20]	; (800b9b0 <FLASH_ProgramByte+0x64>)
 800b99c:	6912      	ldr	r2, [r2, #16]
 800b99e:	f022 0201 	bic.w	r2, r2, #1
 800b9a2:	611a      	str	r2, [r3, #16]
  } 

  /* Return the Program Status */
  return status;
 800b9a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3710      	adds	r7, #16
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}
 800b9ae:	bf00      	nop
 800b9b0:	40023c00 	.word	0x40023c00

0800b9b4 <FLASH_OB_Unlock>:
  * @brief  Unlocks the FLASH Option Control Registers access.
  * @param  None
  * @retval None
  */
void FLASH_OB_Unlock(void)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 800b9b8:	4b07      	ldr	r3, [pc, #28]	; (800b9d8 <FLASH_OB_Unlock+0x24>)
 800b9ba:	695b      	ldr	r3, [r3, #20]
 800b9bc:	f003 0301 	and.w	r3, r3, #1
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d005      	beq.n	800b9d0 <FLASH_OB_Unlock+0x1c>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800b9c4:	4b04      	ldr	r3, [pc, #16]	; (800b9d8 <FLASH_OB_Unlock+0x24>)
 800b9c6:	4a05      	ldr	r2, [pc, #20]	; (800b9dc <FLASH_OB_Unlock+0x28>)
 800b9c8:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800b9ca:	4b03      	ldr	r3, [pc, #12]	; (800b9d8 <FLASH_OB_Unlock+0x24>)
 800b9cc:	4a04      	ldr	r2, [pc, #16]	; (800b9e0 <FLASH_OB_Unlock+0x2c>)
 800b9ce:	609a      	str	r2, [r3, #8]
  }  
}
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d6:	4770      	bx	lr
 800b9d8:	40023c00 	.word	0x40023c00
 800b9dc:	08192a3b 	.word	0x08192a3b
 800b9e0:	4c5d6e7f 	.word	0x4c5d6e7f

0800b9e4 <FLASH_OB_Lock>:
  * @brief  Locks the FLASH Option Control Registers access.
  * @param  None
  * @retval None
  */
void FLASH_OB_Lock(void)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800b9e8:	4b04      	ldr	r3, [pc, #16]	; (800b9fc <FLASH_OB_Lock+0x18>)
 800b9ea:	4a04      	ldr	r2, [pc, #16]	; (800b9fc <FLASH_OB_Lock+0x18>)
 800b9ec:	6952      	ldr	r2, [r2, #20]
 800b9ee:	f042 0201 	orr.w	r2, r2, #1
 800b9f2:	615a      	str	r2, [r3, #20]
}
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fa:	4770      	bx	lr
 800b9fc:	40023c00 	.word	0x40023c00

0800ba00 <FLASH_OB_WRPConfig>:
  * @param  Newstate: new state of the Write Protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None  
  */
void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState)
{ 
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b084      	sub	sp, #16
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	460b      	mov	r3, r1
 800ba0a:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 800ba0c:	2309      	movs	r3, #9
 800ba0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(OB_WRP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  status = FLASH_WaitForLastOperation();
 800ba10:	f000 fa3c 	bl	800be8c <FLASH_WaitForLastOperation>
 800ba14:	4603      	mov	r3, r0
 800ba16:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 800ba18:	7bfb      	ldrb	r3, [r7, #15]
 800ba1a:	2b09      	cmp	r3, #9
 800ba1c:	d117      	bne.n	800ba4e <FLASH_OB_WRPConfig+0x4e>
  { 
    if(NewState != DISABLE)
 800ba1e:	78fb      	ldrb	r3, [r7, #3]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d00b      	beq.n	800ba3c <FLASH_OB_WRPConfig+0x3c>
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_WRP);
 800ba24:	4b0b      	ldr	r3, [pc, #44]	; (800ba54 <FLASH_OB_WRPConfig+0x54>)
 800ba26:	4a0b      	ldr	r2, [pc, #44]	; (800ba54 <FLASH_OB_WRPConfig+0x54>)
 800ba28:	8812      	ldrh	r2, [r2, #0]
 800ba2a:	b291      	uxth	r1, r2
 800ba2c:	687a      	ldr	r2, [r7, #4]
 800ba2e:	b292      	uxth	r2, r2
 800ba30:	43d2      	mvns	r2, r2
 800ba32:	b292      	uxth	r2, r2
 800ba34:	400a      	ands	r2, r1
 800ba36:	b292      	uxth	r2, r2
 800ba38:	801a      	strh	r2, [r3, #0]
 800ba3a:	e008      	b.n	800ba4e <FLASH_OB_WRPConfig+0x4e>
    }
    else
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
 800ba3c:	4b05      	ldr	r3, [pc, #20]	; (800ba54 <FLASH_OB_WRPConfig+0x54>)
 800ba3e:	4a05      	ldr	r2, [pc, #20]	; (800ba54 <FLASH_OB_WRPConfig+0x54>)
 800ba40:	8812      	ldrh	r2, [r2, #0]
 800ba42:	b291      	uxth	r1, r2
 800ba44:	687a      	ldr	r2, [r7, #4]
 800ba46:	b292      	uxth	r2, r2
 800ba48:	430a      	orrs	r2, r1
 800ba4a:	b292      	uxth	r2, r2
 800ba4c:	801a      	strh	r2, [r3, #0]
    }
  }
}
 800ba4e:	3710      	adds	r7, #16
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}
 800ba54:	40023c16 	.word	0x40023c16

0800ba58 <FLASH_OB_WRP1Config>:
  * @param  Newstate: new state of the Write Protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None  
  */
void FLASH_OB_WRP1Config(uint32_t OB_WRP, FunctionalState NewState)
{ 
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b084      	sub	sp, #16
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	460b      	mov	r3, r1
 800ba62:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 800ba64:	2309      	movs	r3, #9
 800ba66:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(OB_WRP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  status = FLASH_WaitForLastOperation();
 800ba68:	f000 fa10 	bl	800be8c <FLASH_WaitForLastOperation>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 800ba70:	7bfb      	ldrb	r3, [r7, #15]
 800ba72:	2b09      	cmp	r3, #9
 800ba74:	d117      	bne.n	800baa6 <FLASH_OB_WRP1Config+0x4e>
  { 
    if(NewState != DISABLE)
 800ba76:	78fb      	ldrb	r3, [r7, #3]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d00b      	beq.n	800ba94 <FLASH_OB_WRP1Config+0x3c>
    {
      *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~OB_WRP);
 800ba7c:	4b0b      	ldr	r3, [pc, #44]	; (800baac <FLASH_OB_WRP1Config+0x54>)
 800ba7e:	4a0b      	ldr	r2, [pc, #44]	; (800baac <FLASH_OB_WRP1Config+0x54>)
 800ba80:	8812      	ldrh	r2, [r2, #0]
 800ba82:	b291      	uxth	r1, r2
 800ba84:	687a      	ldr	r2, [r7, #4]
 800ba86:	b292      	uxth	r2, r2
 800ba88:	43d2      	mvns	r2, r2
 800ba8a:	b292      	uxth	r2, r2
 800ba8c:	400a      	ands	r2, r1
 800ba8e:	b292      	uxth	r2, r2
 800ba90:	801a      	strh	r2, [r3, #0]
 800ba92:	e008      	b.n	800baa6 <FLASH_OB_WRP1Config+0x4e>
    }
    else
    {
      *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
 800ba94:	4b05      	ldr	r3, [pc, #20]	; (800baac <FLASH_OB_WRP1Config+0x54>)
 800ba96:	4a05      	ldr	r2, [pc, #20]	; (800baac <FLASH_OB_WRP1Config+0x54>)
 800ba98:	8812      	ldrh	r2, [r2, #0]
 800ba9a:	b291      	uxth	r1, r2
 800ba9c:	687a      	ldr	r2, [r7, #4]
 800ba9e:	b292      	uxth	r2, r2
 800baa0:	430a      	orrs	r2, r1
 800baa2:	b292      	uxth	r2, r2
 800baa4:	801a      	strh	r2, [r3, #0]
    }
  }
}
 800baa6:	3710      	adds	r7, #16
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}
 800baac:	40023c1a 	.word	0x40023c1a

0800bab0 <FLASH_OB_PCROPSelectionConfig>:
  *            @arg OB_PcROP_Disable: nWRPi control the write protection of respective user sectors.
  *            @arg OB_PcROP_Enable: nWRPi control the  read&write protection (PCROP) of respective user sectors.
  * @retval None
  */
void FLASH_OB_PCROPSelectionConfig(uint8_t OB_PcROP)
{  
 800bab0:	b480      	push	{r7}
 800bab2:	b085      	sub	sp, #20
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	4603      	mov	r3, r0
 800bab8:	71fb      	strb	r3, [r7, #7]
  uint8_t optiontmp = 0xFF;
 800baba:	23ff      	movs	r3, #255	; 0xff
 800babc:	73fb      	strb	r3, [r7, #15]
      
  /* Check the parameters */
  assert_param(IS_OB_PCROP_SELECT(OB_PcROP));
  
  /* Mask SPRMOD bit */
  optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE3_ADDRESS) & (uint8_t)0x7F); 
 800babe:	4b08      	ldr	r3, [pc, #32]	; (800bae0 <FLASH_OB_PCROPSelectionConfig+0x30>)
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	b2db      	uxtb	r3, r3
 800bac4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bac8:	73fb      	strb	r3, [r7, #15]
  /* Update Option Byte */
  *(__IO uint8_t *)OPTCR_BYTE3_ADDRESS = (uint8_t)(OB_PcROP | optiontmp); 
 800baca:	4b05      	ldr	r3, [pc, #20]	; (800bae0 <FLASH_OB_PCROPSelectionConfig+0x30>)
 800bacc:	79f9      	ldrb	r1, [r7, #7]
 800bace:	7bfa      	ldrb	r2, [r7, #15]
 800bad0:	430a      	orrs	r2, r1
 800bad2:	b2d2      	uxtb	r2, r2
 800bad4:	701a      	strb	r2, [r3, #0]
    
}
 800bad6:	3714      	adds	r7, #20
 800bad8:	46bd      	mov	sp, r7
 800bada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bade:	4770      	bx	lr
 800bae0:	40023c17 	.word	0x40023c17

0800bae4 <FLASH_OB_PCROPConfig>:
  * @param  Newstate: new state of the Write Protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None  
  */
void FLASH_OB_PCROPConfig(uint32_t OB_PCROP, FunctionalState NewState)
{ 
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b084      	sub	sp, #16
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	460b      	mov	r3, r1
 800baee:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 800baf0:	2309      	movs	r3, #9
 800baf2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_PCROP(OB_PCROP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  status = FLASH_WaitForLastOperation();
 800baf4:	f000 f9ca 	bl	800be8c <FLASH_WaitForLastOperation>
 800baf8:	4603      	mov	r3, r0
 800bafa:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 800bafc:	7bfb      	ldrb	r3, [r7, #15]
 800bafe:	2b09      	cmp	r3, #9
 800bb00:	d117      	bne.n	800bb32 <FLASH_OB_PCROPConfig+0x4e>
  { 
    if(NewState != DISABLE)
 800bb02:	78fb      	ldrb	r3, [r7, #3]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d009      	beq.n	800bb1c <FLASH_OB_PCROPConfig+0x38>
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_PCROP;    
 800bb08:	4b0b      	ldr	r3, [pc, #44]	; (800bb38 <FLASH_OB_PCROPConfig+0x54>)
 800bb0a:	4a0b      	ldr	r2, [pc, #44]	; (800bb38 <FLASH_OB_PCROPConfig+0x54>)
 800bb0c:	8812      	ldrh	r2, [r2, #0]
 800bb0e:	b291      	uxth	r1, r2
 800bb10:	687a      	ldr	r2, [r7, #4]
 800bb12:	b292      	uxth	r2, r2
 800bb14:	430a      	orrs	r2, r1
 800bb16:	b292      	uxth	r2, r2
 800bb18:	801a      	strh	r2, [r3, #0]
 800bb1a:	e00a      	b.n	800bb32 <FLASH_OB_PCROPConfig+0x4e>
    }
    else
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_PCROP);
 800bb1c:	4b06      	ldr	r3, [pc, #24]	; (800bb38 <FLASH_OB_PCROPConfig+0x54>)
 800bb1e:	4a06      	ldr	r2, [pc, #24]	; (800bb38 <FLASH_OB_PCROPConfig+0x54>)
 800bb20:	8812      	ldrh	r2, [r2, #0]
 800bb22:	b291      	uxth	r1, r2
 800bb24:	687a      	ldr	r2, [r7, #4]
 800bb26:	b292      	uxth	r2, r2
 800bb28:	43d2      	mvns	r2, r2
 800bb2a:	b292      	uxth	r2, r2
 800bb2c:	400a      	ands	r2, r1
 800bb2e:	b292      	uxth	r2, r2
 800bb30:	801a      	strh	r2, [r3, #0]
    }
  }
}
 800bb32:	3710      	adds	r7, #16
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}
 800bb38:	40023c16 	.word	0x40023c16

0800bb3c <FLASH_OB_PCROP1Config>:
  * @param  Newstate: new state of the Write Protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None  
  */
void FLASH_OB_PCROP1Config(uint32_t OB_PCROP, FunctionalState NewState)
{ 
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b084      	sub	sp, #16
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
 800bb44:	460b      	mov	r3, r1
 800bb46:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 800bb48:	2309      	movs	r3, #9
 800bb4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_PCROP(OB_PCROP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  status = FLASH_WaitForLastOperation();
 800bb4c:	f000 f99e 	bl	800be8c <FLASH_WaitForLastOperation>
 800bb50:	4603      	mov	r3, r0
 800bb52:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 800bb54:	7bfb      	ldrb	r3, [r7, #15]
 800bb56:	2b09      	cmp	r3, #9
 800bb58:	d117      	bne.n	800bb8a <FLASH_OB_PCROP1Config+0x4e>
  { 
    if(NewState != DISABLE)
 800bb5a:	78fb      	ldrb	r3, [r7, #3]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d009      	beq.n	800bb74 <FLASH_OB_PCROP1Config+0x38>
    {
      *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)OB_PCROP;
 800bb60:	4b0b      	ldr	r3, [pc, #44]	; (800bb90 <FLASH_OB_PCROP1Config+0x54>)
 800bb62:	4a0b      	ldr	r2, [pc, #44]	; (800bb90 <FLASH_OB_PCROP1Config+0x54>)
 800bb64:	8812      	ldrh	r2, [r2, #0]
 800bb66:	b291      	uxth	r1, r2
 800bb68:	687a      	ldr	r2, [r7, #4]
 800bb6a:	b292      	uxth	r2, r2
 800bb6c:	430a      	orrs	r2, r1
 800bb6e:	b292      	uxth	r2, r2
 800bb70:	801a      	strh	r2, [r3, #0]
 800bb72:	e00a      	b.n	800bb8a <FLASH_OB_PCROP1Config+0x4e>
    }
    else
    {
      *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~OB_PCROP);
 800bb74:	4b06      	ldr	r3, [pc, #24]	; (800bb90 <FLASH_OB_PCROP1Config+0x54>)
 800bb76:	4a06      	ldr	r2, [pc, #24]	; (800bb90 <FLASH_OB_PCROP1Config+0x54>)
 800bb78:	8812      	ldrh	r2, [r2, #0]
 800bb7a:	b291      	uxth	r1, r2
 800bb7c:	687a      	ldr	r2, [r7, #4]
 800bb7e:	b292      	uxth	r2, r2
 800bb80:	43d2      	mvns	r2, r2
 800bb82:	b292      	uxth	r2, r2
 800bb84:	400a      	ands	r2, r1
 800bb86:	b292      	uxth	r2, r2
 800bb88:	801a      	strh	r2, [r3, #0]
    }
  }
}
 800bb8a:	3710      	adds	r7, #16
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}
 800bb90:	40023c1a 	.word	0x40023c1a

0800bb94 <FLASH_OB_RDPConfig>:
  * /!\ Warning /!\ When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *    
  * @retval None
  */
void FLASH_OB_RDPConfig(uint8_t OB_RDP)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b084      	sub	sp, #16
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	71fb      	strb	r3, [r7, #7]
  FLASH_Status status = FLASH_COMPLETE;
 800bb9e:	2309      	movs	r3, #9
 800bba0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP(OB_RDP));

  status = FLASH_WaitForLastOperation();
 800bba2:	f000 f973 	bl	800be8c <FLASH_WaitForLastOperation>
 800bba6:	4603      	mov	r3, r0
 800bba8:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 800bbaa:	7bfb      	ldrb	r3, [r7, #15]
 800bbac:	2b09      	cmp	r3, #9
 800bbae:	d102      	bne.n	800bbb6 <FLASH_OB_RDPConfig+0x22>
  {
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = OB_RDP;
 800bbb0:	4b02      	ldr	r3, [pc, #8]	; (800bbbc <FLASH_OB_RDPConfig+0x28>)
 800bbb2:	79fa      	ldrb	r2, [r7, #7]
 800bbb4:	701a      	strb	r2, [r3, #0]

  }
}
 800bbb6:	3710      	adds	r7, #16
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}
 800bbbc:	40023c15 	.word	0x40023c15

0800bbc0 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NoRST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval None
  */
void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b084      	sub	sp, #16
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	4613      	mov	r3, r2
 800bbc8:	4602      	mov	r2, r0
 800bbca:	71fa      	strb	r2, [r7, #7]
 800bbcc:	460a      	mov	r2, r1
 800bbce:	71ba      	strb	r2, [r7, #6]
 800bbd0:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 800bbd2:	23ff      	movs	r3, #255	; 0xff
 800bbd4:	73fb      	strb	r3, [r7, #15]
  FLASH_Status status = FLASH_COMPLETE; 
 800bbd6:	2309      	movs	r3, #9
 800bbd8:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800bbda:	f000 f957 	bl	800be8c <FLASH_WaitForLastOperation>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	73bb      	strb	r3, [r7, #14]
  
  if(status == FLASH_COMPLETE)
 800bbe2:	7bbb      	ldrb	r3, [r7, #14]
 800bbe4:	2b09      	cmp	r3, #9
 800bbe6:	d111      	bne.n	800bc0c <FLASH_OB_UserConfig+0x4c>
  { 
#if defined (STM32F427_437xx) || defined (STM32F429_439xx)     
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 800bbe8:	4b0a      	ldr	r3, [pc, #40]	; (800bc14 <FLASH_OB_UserConfig+0x54>)
 800bbea:	781b      	ldrb	r3, [r3, #0]
 800bbec:	b2db      	uxtb	r3, r3
 800bbee:	f003 031f 	and.w	r3, r3, #31
 800bbf2:	73fb      	strb	r3, [r7, #15]
    /* Mask OPTLOCK, OPTSTRT and BOR_LEV bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0F); 
#endif /* STM32F40_41xxx || STM32F401xx */ 

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = OB_IWDG | (uint8_t)(OB_STDBY | (uint8_t)(OB_STOP | ((uint8_t)optiontmp))); 
 800bbf4:	4b07      	ldr	r3, [pc, #28]	; (800bc14 <FLASH_OB_UserConfig+0x54>)
 800bbf6:	79b9      	ldrb	r1, [r7, #6]
 800bbf8:	7bfa      	ldrb	r2, [r7, #15]
 800bbfa:	430a      	orrs	r2, r1
 800bbfc:	b2d1      	uxtb	r1, r2
 800bbfe:	797a      	ldrb	r2, [r7, #5]
 800bc00:	430a      	orrs	r2, r1
 800bc02:	b2d1      	uxtb	r1, r2
 800bc04:	79fa      	ldrb	r2, [r7, #7]
 800bc06:	430a      	orrs	r2, r1
 800bc08:	b2d2      	uxtb	r2, r2
 800bc0a:	701a      	strb	r2, [r3, #0]
  }  
}
 800bc0c:	3710      	adds	r7, #16
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}
 800bc12:	bf00      	nop
 800bc14:	40023c14 	.word	0x40023c14

0800bc18 <FLASH_OB_BootConfig>:
  *            @arg OB_Dual_BootEnabled: Dual Bank Boot Enable
  *            @arg OB_Dual_BootDisabled: Dual Bank Boot Disabled
  * @retval None
  */
void FLASH_OB_BootConfig(uint8_t OB_BOOT)
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b083      	sub	sp, #12
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	4603      	mov	r3, r0
 800bc20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOOT(OB_BOOT));

  /* Set Dual Bank Boot */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BFB2);
 800bc22:	4b0a      	ldr	r3, [pc, #40]	; (800bc4c <FLASH_OB_BootConfig+0x34>)
 800bc24:	4a09      	ldr	r2, [pc, #36]	; (800bc4c <FLASH_OB_BootConfig+0x34>)
 800bc26:	7812      	ldrb	r2, [r2, #0]
 800bc28:	b2d2      	uxtb	r2, r2
 800bc2a:	f022 0210 	bic.w	r2, r2, #16
 800bc2e:	b2d2      	uxtb	r2, r2
 800bc30:	701a      	strb	r2, [r3, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOOT;
 800bc32:	4b06      	ldr	r3, [pc, #24]	; (800bc4c <FLASH_OB_BootConfig+0x34>)
 800bc34:	4a05      	ldr	r2, [pc, #20]	; (800bc4c <FLASH_OB_BootConfig+0x34>)
 800bc36:	7812      	ldrb	r2, [r2, #0]
 800bc38:	b2d1      	uxtb	r1, r2
 800bc3a:	79fa      	ldrb	r2, [r7, #7]
 800bc3c:	430a      	orrs	r2, r1
 800bc3e:	b2d2      	uxtb	r2, r2
 800bc40:	701a      	strb	r2, [r3, #0]

}
 800bc42:	370c      	adds	r7, #12
 800bc44:	46bd      	mov	sp, r7
 800bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4a:	4770      	bx	lr
 800bc4c:	40023c14 	.word	0x40023c14

0800bc50 <FLASH_OB_BORConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval None
  */
void FLASH_OB_BORConfig(uint8_t OB_BOR)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b083      	sub	sp, #12
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	4603      	mov	r3, r0
 800bc58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR(OB_BOR));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 800bc5a:	4b0a      	ldr	r3, [pc, #40]	; (800bc84 <FLASH_OB_BORConfig+0x34>)
 800bc5c:	4a09      	ldr	r2, [pc, #36]	; (800bc84 <FLASH_OB_BORConfig+0x34>)
 800bc5e:	7812      	ldrb	r2, [r2, #0]
 800bc60:	b2d2      	uxtb	r2, r2
 800bc62:	f022 020c 	bic.w	r2, r2, #12
 800bc66:	b2d2      	uxtb	r2, r2
 800bc68:	701a      	strb	r2, [r3, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOR;
 800bc6a:	4b06      	ldr	r3, [pc, #24]	; (800bc84 <FLASH_OB_BORConfig+0x34>)
 800bc6c:	4a05      	ldr	r2, [pc, #20]	; (800bc84 <FLASH_OB_BORConfig+0x34>)
 800bc6e:	7812      	ldrb	r2, [r2, #0]
 800bc70:	b2d1      	uxtb	r1, r2
 800bc72:	79fa      	ldrb	r2, [r7, #7]
 800bc74:	430a      	orrs	r2, r1
 800bc76:	b2d2      	uxtb	r2, r2
 800bc78:	701a      	strb	r2, [r3, #0]

}
 800bc7a:	370c      	adds	r7, #12
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr
 800bc84:	40023c14 	.word	0x40023c14

0800bc88 <FLASH_OB_Launch>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_OB_Launch(void)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b082      	sub	sp, #8
 800bc8c:	af00      	add	r7, sp, #0
  FLASH_Status status = FLASH_COMPLETE;
 800bc8e:	2309      	movs	r3, #9
 800bc90:	71fb      	strb	r3, [r7, #7]

  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 800bc92:	4b08      	ldr	r3, [pc, #32]	; (800bcb4 <FLASH_OB_Launch+0x2c>)
 800bc94:	4a07      	ldr	r2, [pc, #28]	; (800bcb4 <FLASH_OB_Launch+0x2c>)
 800bc96:	7812      	ldrb	r2, [r2, #0]
 800bc98:	b2d2      	uxtb	r2, r2
 800bc9a:	f042 0202 	orr.w	r2, r2, #2
 800bc9e:	b2d2      	uxtb	r2, r2
 800bca0:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800bca2:	f000 f8f3 	bl	800be8c <FLASH_WaitForLastOperation>
 800bca6:	4603      	mov	r3, r0
 800bca8:	71fb      	strb	r3, [r7, #7]

  return status;
 800bcaa:	79fb      	ldrb	r3, [r7, #7]
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3708      	adds	r7, #8
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}
 800bcb4:	40023c14 	.word	0x40023c14

0800bcb8 <FLASH_OB_GetUser>:
  * @param  None
  * @retval The FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
uint8_t FLASH_OB_GetUser(void)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return (uint8_t)(FLASH->OPTCR >> 5);
 800bcbc:	4b04      	ldr	r3, [pc, #16]	; (800bcd0 <FLASH_OB_GetUser+0x18>)
 800bcbe:	695b      	ldr	r3, [r3, #20]
 800bcc0:	095b      	lsrs	r3, r3, #5
 800bcc2:	b2db      	uxtb	r3, r3
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bccc:	4770      	bx	lr
 800bcce:	bf00      	nop
 800bcd0:	40023c00 	.word	0x40023c00

0800bcd4 <FLASH_OB_GetWRP>:
  * @brief  Returns the FLASH Write Protection Option Bytes value.
  * @param  None
  * @retval The FLASH Write Protection  Option Bytes value
  */
uint16_t FLASH_OB_GetWRP(void)
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 800bcd8:	4b03      	ldr	r3, [pc, #12]	; (800bce8 <FLASH_OB_GetWRP+0x14>)
 800bcda:	881b      	ldrh	r3, [r3, #0]
 800bcdc:	b29b      	uxth	r3, r3
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr
 800bce8:	40023c16 	.word	0x40023c16

0800bcec <FLASH_OB_GetWRP1>:
  *   
  * @param  None
  * @retval The FLASH Write Protection  Option Bytes value
  */
uint16_t FLASH_OB_GetWRP1(void)
{
 800bcec:	b480      	push	{r7}
 800bcee:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
 800bcf0:	4b03      	ldr	r3, [pc, #12]	; (800bd00 <FLASH_OB_GetWRP1+0x14>)
 800bcf2:	881b      	ldrh	r3, [r3, #0]
 800bcf4:	b29b      	uxth	r3, r3
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfe:	4770      	bx	lr
 800bd00:	40023c1a 	.word	0x40023c1a

0800bd04 <FLASH_OB_GetPCROP>:
  *   
  * @param  None
  * @retval The FLASH PC Read/Write Protection Option Bytes value
  */
uint16_t FLASH_OB_GetPCROP(void)
{
 800bd04:	b480      	push	{r7}
 800bd06:	af00      	add	r7, sp, #0
  /* Return the FLASH PC Read/write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 800bd08:	4b03      	ldr	r3, [pc, #12]	; (800bd18 <FLASH_OB_GetPCROP+0x14>)
 800bd0a:	881b      	ldrh	r3, [r3, #0]
 800bd0c:	b29b      	uxth	r3, r3
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr
 800bd18:	40023c16 	.word	0x40023c16

0800bd1c <FLASH_OB_GetPCROP1>:
  *     
  * @param  None
  * @retval The FLASH PC Read/Write Protection Option Bytes value
  */
uint16_t FLASH_OB_GetPCROP1(void)
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
 800bd20:	4b03      	ldr	r3, [pc, #12]	; (800bd30 <FLASH_OB_GetPCROP1+0x14>)
 800bd22:	881b      	ldrh	r3, [r3, #0]
 800bd24:	b29b      	uxth	r3, r3
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2e:	4770      	bx	lr
 800bd30:	40023c1a 	.word	0x40023c1a

0800bd34 <FLASH_OB_GetRDP>:
  * @retval FLASH ReadOut Protection Status:
  *           - SET, when OB_RDP_Level_1 or OB_RDP_Level_2 is set
  *           - RESET, when OB_RDP_Level_0 is set
  */
FlagStatus FLASH_OB_GetRDP(void)
{
 800bd34:	b480      	push	{r7}
 800bd36:	b083      	sub	sp, #12
 800bd38:	af00      	add	r7, sp, #0
  FlagStatus readstatus = RESET;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	71fb      	strb	r3, [r7, #7]

  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) != (uint8_t)OB_RDP_Level_0))
 800bd3e:	4b08      	ldr	r3, [pc, #32]	; (800bd60 <FLASH_OB_GetRDP+0x2c>)
 800bd40:	781b      	ldrb	r3, [r3, #0]
 800bd42:	b2db      	uxtb	r3, r3
 800bd44:	2baa      	cmp	r3, #170	; 0xaa
 800bd46:	d002      	beq.n	800bd4e <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = SET;
 800bd48:	2301      	movs	r3, #1
 800bd4a:	71fb      	strb	r3, [r7, #7]
 800bd4c:	e001      	b.n	800bd52 <FLASH_OB_GetRDP+0x1e>
  }
  else
  {
    readstatus = RESET;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	71fb      	strb	r3, [r7, #7]
  }
  return readstatus;
 800bd52:	79fb      	ldrb	r3, [r7, #7]
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	370c      	adds	r7, #12
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr
 800bd60:	40023c15 	.word	0x40023c15

0800bd64 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
uint8_t FLASH_OB_GetBOR(void)
{
 800bd64:	b480      	push	{r7}
 800bd66:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 800bd68:	4b05      	ldr	r3, [pc, #20]	; (800bd80 <FLASH_OB_GetBOR+0x1c>)
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	b2db      	uxtb	r3, r3
 800bd6e:	f003 030c 	and.w	r3, r3, #12
 800bd72:	b2db      	uxtb	r3, r3
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	46bd      	mov	sp, r7
 800bd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7c:	4770      	bx	lr
 800bd7e:	bf00      	nop
 800bd80:	40023c14 	.word	0x40023c14

0800bd84 <FLASH_ITConfig>:
  *            @arg FLASH_IT_ERR: FLASH Error Interrupt
  *            @arg FLASH_IT_EOP: FLASH end of operation Interrupt
  * @retval None 
  */
void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
{
 800bd84:	b480      	push	{r7}
 800bd86:	b083      	sub	sp, #12
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
 800bd8c:	460b      	mov	r3, r1
 800bd8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
 800bd90:	78fb      	ldrb	r3, [r7, #3]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d006      	beq.n	800bda4 <FLASH_ITConfig+0x20>
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 800bd96:	4b09      	ldr	r3, [pc, #36]	; (800bdbc <FLASH_ITConfig+0x38>)
 800bd98:	4a08      	ldr	r2, [pc, #32]	; (800bdbc <FLASH_ITConfig+0x38>)
 800bd9a:	6911      	ldr	r1, [r2, #16]
 800bd9c:	687a      	ldr	r2, [r7, #4]
 800bd9e:	430a      	orrs	r2, r1
 800bda0:	611a      	str	r2, [r3, #16]
 800bda2:	e006      	b.n	800bdb2 <FLASH_ITConfig+0x2e>
  }
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(uint32_t)FLASH_IT;
 800bda4:	4b05      	ldr	r3, [pc, #20]	; (800bdbc <FLASH_ITConfig+0x38>)
 800bda6:	4a05      	ldr	r2, [pc, #20]	; (800bdbc <FLASH_ITConfig+0x38>)
 800bda8:	6911      	ldr	r1, [r2, #16]
 800bdaa:	687a      	ldr	r2, [r7, #4]
 800bdac:	43d2      	mvns	r2, r2
 800bdae:	400a      	ands	r2, r1
 800bdb0:	611a      	str	r2, [r3, #16]
  }
}
 800bdb2:	370c      	adds	r7, #12
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr
 800bdbc:	40023c00 	.word	0x40023c00

0800bdc0 <FLASH_GetFlagStatus>:
  *            @arg FLASH_FLAG_RDERR: FLASH (PCROP) Read Protection error flag (STM32F42/43xxx and STM32F401xx devices) 
  *            @arg FLASH_FLAG_BSY: FLASH Busy flag
  * @retval The new state of FLASH_FLAG (SET or RESET).
  */
FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
{
 800bdc0:	b480      	push	{r7}
 800bdc2:	b085      	sub	sp, #20
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800bdc8:	2300      	movs	r3, #0
 800bdca:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));

  if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 800bdcc:	4b08      	ldr	r3, [pc, #32]	; (800bdf0 <FLASH_GetFlagStatus+0x30>)
 800bdce:	68da      	ldr	r2, [r3, #12]
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	4013      	ands	r3, r2
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d002      	beq.n	800bdde <FLASH_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 800bdd8:	2301      	movs	r3, #1
 800bdda:	73fb      	strb	r3, [r7, #15]
 800bddc:	e001      	b.n	800bde2 <FLASH_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800bdde:	2300      	movs	r3, #0
 800bde0:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus; 
 800bde2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	3714      	adds	r7, #20
 800bde8:	46bd      	mov	sp, r7
 800bdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdee:	4770      	bx	lr
 800bdf0:	40023c00 	.word	0x40023c00

0800bdf4 <FLASH_ClearFlag>:
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
  *            @arg FLASH_FLAG_RDERR: FLASH Read Protection error flag (STM32F42/43xxx and STM32F401xx devices)   
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b083      	sub	sp, #12
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 800bdfc:	4b03      	ldr	r3, [pc, #12]	; (800be0c <FLASH_ClearFlag+0x18>)
 800bdfe:	687a      	ldr	r2, [r7, #4]
 800be00:	60da      	str	r2, [r3, #12]
}
 800be02:	370c      	adds	r7, #12
 800be04:	46bd      	mov	sp, r7
 800be06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0a:	4770      	bx	lr
 800be0c:	40023c00 	.word	0x40023c00

0800be10 <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_RD, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_GetStatus(void)
{
 800be10:	b480      	push	{r7}
 800be12:	b083      	sub	sp, #12
 800be14:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE;
 800be16:	2309      	movs	r3, #9
 800be18:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 800be1a:	4b1b      	ldr	r3, [pc, #108]	; (800be88 <FLASH_GetStatus+0x78>)
 800be1c:	68db      	ldr	r3, [r3, #12]
 800be1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800be22:	2b00      	cmp	r3, #0
 800be24:	d002      	beq.n	800be2c <FLASH_GetStatus+0x1c>
  {
    flashstatus = FLASH_BUSY;
 800be26:	2301      	movs	r3, #1
 800be28:	71fb      	strb	r3, [r7, #7]
 800be2a:	e025      	b.n	800be78 <FLASH_GetStatus+0x68>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 800be2c:	4b16      	ldr	r3, [pc, #88]	; (800be88 <FLASH_GetStatus+0x78>)
 800be2e:	68db      	ldr	r3, [r3, #12]
 800be30:	f003 0310 	and.w	r3, r3, #16
 800be34:	2b00      	cmp	r3, #0
 800be36:	d002      	beq.n	800be3e <FLASH_GetStatus+0x2e>
    { 
      flashstatus = FLASH_ERROR_WRP;
 800be38:	2306      	movs	r3, #6
 800be3a:	71fb      	strb	r3, [r7, #7]
 800be3c:	e01c      	b.n	800be78 <FLASH_GetStatus+0x68>
    }
    else
    {
      if((FLASH->SR & FLASH_FLAG_RDERR) != (uint32_t)0x00)
 800be3e:	4b12      	ldr	r3, [pc, #72]	; (800be88 <FLASH_GetStatus+0x78>)
 800be40:	68db      	ldr	r3, [r3, #12]
 800be42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be46:	2b00      	cmp	r3, #0
 800be48:	d002      	beq.n	800be50 <FLASH_GetStatus+0x40>
      { 
        flashstatus = FLASH_ERROR_RD;
 800be4a:	2302      	movs	r3, #2
 800be4c:	71fb      	strb	r3, [r7, #7]
 800be4e:	e013      	b.n	800be78 <FLASH_GetStatus+0x68>
      } 
      else 
      {
        if((FLASH->SR & (uint32_t)0xEF) != (uint32_t)0x00)
 800be50:	4b0d      	ldr	r3, [pc, #52]	; (800be88 <FLASH_GetStatus+0x78>)
 800be52:	68db      	ldr	r3, [r3, #12]
 800be54:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d002      	beq.n	800be62 <FLASH_GetStatus+0x52>
        {
          flashstatus = FLASH_ERROR_PROGRAM; 
 800be5c:	2307      	movs	r3, #7
 800be5e:	71fb      	strb	r3, [r7, #7]
 800be60:	e00a      	b.n	800be78 <FLASH_GetStatus+0x68>
        }
        else
        {
          if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 800be62:	4b09      	ldr	r3, [pc, #36]	; (800be88 <FLASH_GetStatus+0x78>)
 800be64:	68db      	ldr	r3, [r3, #12]
 800be66:	f003 0302 	and.w	r3, r3, #2
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d002      	beq.n	800be74 <FLASH_GetStatus+0x64>
          {
            flashstatus = FLASH_ERROR_OPERATION;
 800be6e:	2308      	movs	r3, #8
 800be70:	71fb      	strb	r3, [r7, #7]
 800be72:	e001      	b.n	800be78 <FLASH_GetStatus+0x68>
          }
          else
          {
            flashstatus = FLASH_COMPLETE;
 800be74:	2309      	movs	r3, #9
 800be76:	71fb      	strb	r3, [r7, #7]
        }
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
 800be78:	79fb      	ldrb	r3, [r7, #7]
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	370c      	adds	r7, #12
 800be7e:	46bd      	mov	sp, r7
 800be80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be84:	4770      	bx	lr
 800be86:	bf00      	nop
 800be88:	40023c00 	.word	0x40023c00

0800be8c <FLASH_WaitForLastOperation>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_WaitForLastOperation(void)
{ 
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b082      	sub	sp, #8
 800be90:	af00      	add	r7, sp, #0
  __IO FLASH_Status status = FLASH_COMPLETE;
 800be92:	2309      	movs	r3, #9
 800be94:	71fb      	strb	r3, [r7, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 800be96:	f7ff ffbb 	bl	800be10 <FLASH_GetStatus>
 800be9a:	4603      	mov	r3, r0
 800be9c:	71fb      	strb	r3, [r7, #7]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 800be9e:	e003      	b.n	800bea8 <FLASH_WaitForLastOperation+0x1c>
  {
    status = FLASH_GetStatus();
 800bea0:	f7ff ffb6 	bl	800be10 <FLASH_GetStatus>
 800bea4:	4603      	mov	r3, r0
 800bea6:	71fb      	strb	r3, [r7, #7]
  status = FLASH_GetStatus();

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 800bea8:	79fb      	ldrb	r3, [r7, #7]
 800beaa:	b2db      	uxtb	r3, r3
 800beac:	2b01      	cmp	r3, #1
 800beae:	d0f7      	beq.n	800bea0 <FLASH_WaitForLastOperation+0x14>
  {
    status = FLASH_GetStatus();
  }
  /* Return the operation status */
  return status;
 800beb0:	79fb      	ldrb	r3, [r7, #7]
 800beb2:	b2db      	uxtb	r3, r3
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	3708      	adds	r7, #8
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}

0800bebc <FMC_NORSRAMDeInit>:
  *            @arg FMC_Bank1_NORSRAM3: FMC Bank1 NOR/SRAM3 
  *            @arg FMC_Bank1_NORSRAM4: FMC Bank1 NOR/SRAM4 
  * @retval None
  */
void FMC_NORSRAMDeInit(uint32_t FMC_Bank)
{
 800bebc:	b480      	push	{r7}
 800bebe:	b083      	sub	sp, #12
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_NORSRAM_BANK(FMC_Bank));
  
  /* FMC_Bank1_NORSRAM1 */
  if(FMC_Bank == FMC_Bank1_NORSRAM1)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d107      	bne.n	800beda <FMC_NORSRAMDeInit+0x1e>
  {
    FMC_Bank1->BTCR[FMC_Bank] = 0x000030DB;    
 800beca:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800bece:	687a      	ldr	r2, [r7, #4]
 800bed0:	f243 01db 	movw	r1, #12507	; 0x30db
 800bed4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bed8:	e006      	b.n	800bee8 <FMC_NORSRAMDeInit+0x2c>
  }
  /* FMC_Bank1_NORSRAM2,  FMC_Bank1_NORSRAM3 or FMC_Bank1_NORSRAM4 */
  else
  {   
    FMC_Bank1->BTCR[FMC_Bank] = 0x000030D2; 
 800beda:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800bede:	687a      	ldr	r2, [r7, #4]
 800bee0:	f243 01d2 	movw	r1, #12498	; 0x30d2
 800bee4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  FMC_Bank1->BTCR[FMC_Bank + 1] = 0x0FFFFFFF;
 800bee8:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	3201      	adds	r2, #1
 800bef0:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800bef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  FMC_Bank1E->BWTR[FMC_Bank] = 0x0FFFFFFF;  
 800bef8:	4b05      	ldr	r3, [pc, #20]	; (800bf10 <FMC_NORSRAMDeInit+0x54>)
 800befa:	687a      	ldr	r2, [r7, #4]
 800befc:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800bf00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800bf04:	370c      	adds	r7, #12
 800bf06:	46bd      	mov	sp, r7
 800bf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0c:	4770      	bx	lr
 800bf0e:	bf00      	nop
 800bf10:	a0000104 	.word	0xa0000104

0800bf14 <FMC_NORSRAMInit>:
  *         that contains the configuration information for the FMC NOR/SRAM 
  *         specified Banks.                       
  * @retval None
  */
void FMC_NORSRAMInit(FMC_NORSRAMInitTypeDef* FMC_NORSRAMInitStruct)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b085      	sub	sp, #20
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpr = 0;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision));
  assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode)); 
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 800bf20:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800bf24:	687a      	ldr	r2, [r7, #4]
 800bf26:	6812      	ldr	r2, [r2, #0]
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
 800bf28:	6879      	ldr	r1, [r7, #4]
 800bf2a:	6848      	ldr	r0, [r1, #4]
            FMC_NORSRAMInitStruct->FMC_MemoryType |
 800bf2c:	6879      	ldr	r1, [r7, #4]
 800bf2e:	6889      	ldr	r1, [r1, #8]
  assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode)); 
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
 800bf30:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_MemoryType |
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
 800bf32:	6879      	ldr	r1, [r7, #4]
 800bf34:	68c9      	ldr	r1, [r1, #12]
  assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode)); 
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
            FMC_NORSRAMInitStruct->FMC_MemoryType |
 800bf36:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
 800bf38:	6879      	ldr	r1, [r7, #4]
 800bf3a:	6909      	ldr	r1, [r1, #16]
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
            FMC_NORSRAMInitStruct->FMC_MemoryType |
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
 800bf3c:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
 800bf3e:	6879      	ldr	r1, [r7, #4]
 800bf40:	6949      	ldr	r1, [r1, #20]
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
            FMC_NORSRAMInitStruct->FMC_MemoryType |
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
 800bf42:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
 800bf44:	6879      	ldr	r1, [r7, #4]
 800bf46:	6989      	ldr	r1, [r1, #24]
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
            FMC_NORSRAMInitStruct->FMC_MemoryType |
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
 800bf48:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
 800bf4a:	6879      	ldr	r1, [r7, #4]
 800bf4c:	69c9      	ldr	r1, [r1, #28]
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
            FMC_NORSRAMInitStruct->FMC_MemoryType |
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
 800bf4e:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
 800bf50:	6879      	ldr	r1, [r7, #4]
 800bf52:	6a09      	ldr	r1, [r1, #32]
            FMC_NORSRAMInitStruct->FMC_MemoryType |
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
 800bf54:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
 800bf56:	6879      	ldr	r1, [r7, #4]
 800bf58:	6a49      	ldr	r1, [r1, #36]	; 0x24
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
 800bf5a:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
 800bf5c:	6879      	ldr	r1, [r7, #4]
 800bf5e:	6a89      	ldr	r1, [r1, #40]	; 0x28
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
 800bf60:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
 800bf62:	6879      	ldr	r1, [r7, #4]
 800bf64:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
 800bf66:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
            FMC_NORSRAMInitStruct->FMC_WriteBurst |
 800bf68:	6879      	ldr	r1, [r7, #4]
 800bf6a:	6b09      	ldr	r1, [r1, #48]	; 0x30
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
 800bf6c:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_WriteBurst |
            FMC_NORSRAMInitStruct->FMC_ContinousClock;
 800bf6e:	6879      	ldr	r1, [r7, #4]
 800bf70:	6b49      	ldr	r1, [r1, #52]	; 0x34
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
            FMC_NORSRAMInitStruct->FMC_WriteBurst |
 800bf72:	4301      	orrs	r1, r0
  assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision));
  assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode)); 
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 800bf74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
            FMC_NORSRAMInitStruct->FMC_WriteBurst |
            FMC_NORSRAMInitStruct->FMC_ContinousClock;

            
  if(FMC_NORSRAMInitStruct->FMC_MemoryType == FMC_MemoryType_NOR)
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	689b      	ldr	r3, [r3, #8]
 800bf7c:	2b08      	cmp	r3, #8
 800bf7e:	d10d      	bne.n	800bf9c <FMC_NORSRAMInit+0x88>
  {
    FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
 800bf80:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800bf84:	687a      	ldr	r2, [r7, #4]
 800bf86:	6812      	ldr	r2, [r2, #0]
 800bf88:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	6800      	ldr	r0, [r0, #0]
 800bf90:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800bf94:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800bf98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Configure Continuous clock feature when bank2..4 is used */
  if((FMC_NORSRAMInitStruct->FMC_ContinousClock == FMC_CClock_SyncAsync) && (FMC_NORSRAMInitStruct->FMC_Bank != FMC_Bank1_NORSRAM1))
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfa0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bfa4:	d124      	bne.n	800bff0 <FMC_NORSRAMInit+0xdc>
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d020      	beq.n	800bff0 <FMC_NORSRAMInit+0xdc>
  {
    tmpr = (uint32_t)((FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1]) & ~(((uint32_t)0x0F) << 20));    
 800bfae:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800bfb2:	685b      	ldr	r3, [r3, #4]
 800bfb4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bfb8:	60fb      	str	r3, [r7, #12]
    
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_NORSRAMInitStruct->FMC_ContinousClock;
 800bfba:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800bfbe:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800bfc2:	6811      	ldr	r1, [r2, #0]
 800bfc4:	687a      	ldr	r2, [r7, #4]
 800bfc6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800bfc8:	430a      	orrs	r2, r1
 800bfca:	601a      	str	r2, [r3, #0]
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_BurstAccessMode_Enable;
 800bfcc:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800bfd0:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800bfd4:	6812      	ldr	r2, [r2, #0]
 800bfd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bfda:	601a      	str	r2, [r3, #0]
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1] = (uint32_t)(tmpr | (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision)-1) << 20));
 800bfdc:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800bfe0:	687a      	ldr	r2, [r7, #4]
 800bfe2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bfe4:	6912      	ldr	r2, [r2, #16]
 800bfe6:	3a01      	subs	r2, #1
 800bfe8:	0511      	lsls	r1, r2, #20
 800bfea:	68fa      	ldr	r2, [r7, #12]
 800bfec:	430a      	orrs	r2, r1
 800bfee:	605a      	str	r2, [r3, #4]
  }
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
 800bff0:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800bff4:	687a      	ldr	r2, [r7, #4]
 800bff6:	6812      	ldr	r2, [r2, #0]
 800bff8:	3201      	adds	r2, #1
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
 800bffa:	6879      	ldr	r1, [r7, #4]
 800bffc:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800bffe:	6808      	ldr	r0, [r1, #0]
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
 800c000:	6879      	ldr	r1, [r7, #4]
 800c002:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800c004:	6849      	ldr	r1, [r1, #4]
 800c006:	0109      	lsls	r1, r1, #4
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1] = (uint32_t)(tmpr | (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision)-1) << 20));
  }
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
 800c008:	4308      	orrs	r0, r1
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
 800c00a:	6879      	ldr	r1, [r7, #4]
 800c00c:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800c00e:	6889      	ldr	r1, [r1, #8]
 800c010:	0209      	lsls	r1, r1, #8
  }
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
 800c012:	4308      	orrs	r0, r1
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
 800c014:	6879      	ldr	r1, [r7, #4]
 800c016:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800c018:	68c9      	ldr	r1, [r1, #12]
 800c01a:	0409      	lsls	r1, r1, #16
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
 800c01c:	4308      	orrs	r0, r1
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
 800c01e:	6879      	ldr	r1, [r7, #4]
 800c020:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800c022:	6909      	ldr	r1, [r1, #16]
 800c024:	0509      	lsls	r1, r1, #20
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
 800c026:	4308      	orrs	r0, r1
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency) << 24) |
 800c028:	6879      	ldr	r1, [r7, #4]
 800c02a:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800c02c:	6949      	ldr	r1, [r1, #20]
 800c02e:	0609      	lsls	r1, r1, #24
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
 800c030:	4308      	orrs	r0, r1
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency) << 24) |
             FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode;
 800c032:	6879      	ldr	r1, [r7, #4]
 800c034:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800c036:	6989      	ldr	r1, [r1, #24]
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency) << 24) |
 800c038:	4301      	orrs	r1, r0
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_BurstAccessMode_Enable;
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1] = (uint32_t)(tmpr | (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision)-1) << 20));
  }
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
 800c03a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency) << 24) |
             FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode;
     
  /* NOR/SRAM Bank timing register for write configuration, if extended mode is used */
  if(FMC_NORSRAMInitStruct->FMC_ExtendedMode == FMC_ExtendedMode_Enable)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c042:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c046:	d120      	bne.n	800c08a <FMC_NORSRAMInit+0x176>
    assert_param(IS_FMC_DATASETUP_TIME(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime));
    assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision));
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 800c048:	4b16      	ldr	r3, [pc, #88]	; (800c0a4 <FMC_NORSRAMInit+0x190>)
 800c04a:	687a      	ldr	r2, [r7, #4]
 800c04c:	6812      	ldr	r2, [r2, #0]
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
 800c04e:	6879      	ldr	r1, [r7, #4]
 800c050:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800c052:	6808      	ldr	r0, [r1, #0]
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
 800c054:	6879      	ldr	r1, [r7, #4]
 800c056:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800c058:	6849      	ldr	r1, [r1, #4]
 800c05a:	0109      	lsls	r1, r1, #4
    assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision));
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
 800c05c:	4308      	orrs	r0, r1
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
 800c05e:	6879      	ldr	r1, [r7, #4]
 800c060:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800c062:	6889      	ldr	r1, [r1, #8]
 800c064:	0209      	lsls	r1, r1, #8
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
 800c066:	4308      	orrs	r0, r1
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision) << 20) |
 800c068:	6879      	ldr	r1, [r7, #4]
 800c06a:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800c06c:	6909      	ldr	r1, [r1, #16]
 800c06e:	0509      	lsls	r1, r1, #20
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
 800c070:	4308      	orrs	r0, r1
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision) << 20) |
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency) << 24) |
 800c072:	6879      	ldr	r1, [r7, #4]
 800c074:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800c076:	6949      	ldr	r1, [r1, #20]
 800c078:	0609      	lsls	r1, r1, #24
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision) << 20) |
 800c07a:	4308      	orrs	r0, r1
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency) << 24) |
               FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode;
 800c07c:	6879      	ldr	r1, [r7, #4]
 800c07e:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800c080:	6989      	ldr	r1, [r1, #24]
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision) << 20) |
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency) << 24) |
 800c082:	4301      	orrs	r1, r0
    assert_param(IS_FMC_DATASETUP_TIME(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime));
    assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision));
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 800c084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c088:	e006      	b.n	800c098 <FMC_NORSRAMInit+0x184>
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency) << 24) |
               FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode;
  }
  else
  {
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] = 0x0FFFFFFF;
 800c08a:	4b06      	ldr	r3, [pc, #24]	; (800c0a4 <FMC_NORSRAMInit+0x190>)
 800c08c:	687a      	ldr	r2, [r7, #4]
 800c08e:	6812      	ldr	r2, [r2, #0]
 800c090:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800c094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  
}
 800c098:	3714      	adds	r7, #20
 800c09a:	46bd      	mov	sp, r7
 800c09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a0:	4770      	bx	lr
 800c0a2:	bf00      	nop
 800c0a4:	a0000104 	.word	0xa0000104

0800c0a8 <FMC_NORSRAMStructInit>:
  * @param  FMC_NORSRAMInitStruct: pointer to a FMC_NORSRAMInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void FMC_NORSRAMStructInit(FMC_NORSRAMInitTypeDef* FMC_NORSRAMInitStruct)
{  
 800c0a8:	b480      	push	{r7}
 800c0aa:	b083      	sub	sp, #12
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
  /* Reset NOR/SRAM Init structure parameters values */
  FMC_NORSRAMInitStruct->FMC_Bank = FMC_Bank1_NORSRAM1;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	601a      	str	r2, [r3, #0]
  FMC_NORSRAMInitStruct->FMC_DataAddressMux = FMC_DataAddressMux_Enable;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2202      	movs	r2, #2
 800c0ba:	605a      	str	r2, [r3, #4]
  FMC_NORSRAMInitStruct->FMC_MemoryType = FMC_MemoryType_SRAM;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	609a      	str	r2, [r3, #8]
  FMC_NORSRAMInitStruct->FMC_MemoryDataWidth = FMC_NORSRAM_MemoryDataWidth_16b;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2210      	movs	r2, #16
 800c0c6:	60da      	str	r2, [r3, #12]
  FMC_NORSRAMInitStruct->FMC_BurstAccessMode = FMC_BurstAccessMode_Disable;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	611a      	str	r2, [r3, #16]
  FMC_NORSRAMInitStruct->FMC_AsynchronousWait = FMC_AsynchronousWait_Disable;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	62da      	str	r2, [r3, #44]	; 0x2c
  FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity = FMC_WaitSignalPolarity_Low;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	615a      	str	r2, [r3, #20]
  FMC_NORSRAMInitStruct->FMC_WrapMode = FMC_WrapMode_Disable;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	619a      	str	r2, [r3, #24]
  FMC_NORSRAMInitStruct->FMC_WaitSignalActive = FMC_WaitSignalActive_BeforeWaitState;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	61da      	str	r2, [r3, #28]
  FMC_NORSRAMInitStruct->FMC_WriteOperation = FMC_WriteOperation_Enable;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c0ec:	621a      	str	r2, [r3, #32]
  FMC_NORSRAMInitStruct->FMC_WaitSignal = FMC_WaitSignal_Enable;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c0f4:	625a      	str	r2, [r3, #36]	; 0x24
  FMC_NORSRAMInitStruct->FMC_ExtendedMode = FMC_ExtendedMode_Disable;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	629a      	str	r2, [r3, #40]	; 0x28
  FMC_NORSRAMInitStruct->FMC_WriteBurst = FMC_WriteBurst_Disable;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2200      	movs	r2, #0
 800c100:	631a      	str	r2, [r3, #48]	; 0x30
  FMC_NORSRAMInitStruct->FMC_ContinousClock = FMC_CClock_SyncOnly;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2200      	movs	r2, #0
 800c106:	635a      	str	r2, [r3, #52]	; 0x34
  
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime = 15;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c10c:	220f      	movs	r2, #15
 800c10e:	601a      	str	r2, [r3, #0]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime = 15;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c114:	220f      	movs	r2, #15
 800c116:	605a      	str	r2, [r3, #4]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime = 255;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c11c:	22ff      	movs	r2, #255	; 0xff
 800c11e:	609a      	str	r2, [r3, #8]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration = 15;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c124:	220f      	movs	r2, #15
 800c126:	60da      	str	r2, [r3, #12]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision = 15;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c12c:	220f      	movs	r2, #15
 800c12e:	611a      	str	r2, [r3, #16]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency = 15;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c134:	220f      	movs	r2, #15
 800c136:	615a      	str	r2, [r3, #20]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode = FMC_AccessMode_A; 
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c13c:	2200      	movs	r2, #0
 800c13e:	619a      	str	r2, [r3, #24]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime = 15;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c144:	220f      	movs	r2, #15
 800c146:	601a      	str	r2, [r3, #0]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime = 15;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c14c:	220f      	movs	r2, #15
 800c14e:	605a      	str	r2, [r3, #4]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime = 255;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c154:	22ff      	movs	r2, #255	; 0xff
 800c156:	609a      	str	r2, [r3, #8]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_BusTurnAroundDuration = 15;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c15c:	220f      	movs	r2, #15
 800c15e:	60da      	str	r2, [r3, #12]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision = 15;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c164:	220f      	movs	r2, #15
 800c166:	611a      	str	r2, [r3, #16]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency = 15;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c16c:	220f      	movs	r2, #15
 800c16e:	615a      	str	r2, [r3, #20]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode = FMC_AccessMode_A;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c174:	2200      	movs	r2, #0
 800c176:	619a      	str	r2, [r3, #24]
}
 800c178:	370c      	adds	r7, #12
 800c17a:	46bd      	mov	sp, r7
 800c17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c180:	4770      	bx	lr
 800c182:	bf00      	nop

0800c184 <FMC_NORSRAMCmd>:
  *            @arg FMC_Bank1_NORSRAM4: FMC Bank1 NOR/SRAM4 
  * @param  NewState: new state of the FMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_NORSRAMCmd(uint32_t FMC_Bank, FunctionalState NewState)
{
 800c184:	b480      	push	{r7}
 800c186:	b083      	sub	sp, #12
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
 800c18c:	460b      	mov	r3, r1
 800c18e:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FMC_NORSRAM_BANK(FMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800c190:	78fb      	ldrb	r3, [r7, #3]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d00c      	beq.n	800c1b0 <FMC_NORSRAMCmd+0x2c>
  {
    /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
    FMC_Bank1->BTCR[FMC_Bank] |= BCR_MBKEN_SET;
 800c196:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800c19a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800c19e:	6879      	ldr	r1, [r7, #4]
 800c1a0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c1a4:	f042 0101 	orr.w	r1, r2, #1
 800c1a8:	687a      	ldr	r2, [r7, #4]
 800c1aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c1ae:	e00b      	b.n	800c1c8 <FMC_NORSRAMCmd+0x44>
  }
  else
  {
    /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
    FMC_Bank1->BTCR[FMC_Bank] &= BCR_MBKEN_RESET;
 800c1b0:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800c1b4:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800c1b8:	6879      	ldr	r1, [r7, #4]
 800c1ba:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800c1be:	4b05      	ldr	r3, [pc, #20]	; (800c1d4 <FMC_NORSRAMCmd+0x50>)
 800c1c0:	400b      	ands	r3, r1
 800c1c2:	6879      	ldr	r1, [r7, #4]
 800c1c4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  }
}
 800c1c8:	370c      	adds	r7, #12
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d0:	4770      	bx	lr
 800c1d2:	bf00      	nop
 800c1d4:	000ffffe 	.word	0x000ffffe

0800c1d8 <FMC_NANDDeInit>:
  *            @arg FMC_Bank2_NAND: FMC Bank2 NAND 
  *            @arg FMC_Bank3_NAND: FMC Bank3 NAND 
  * @retval None
  */
void FMC_NANDDeInit(uint32_t FMC_Bank)
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b083      	sub	sp, #12
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_NAND_BANK(FMC_Bank));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2b10      	cmp	r3, #16
 800c1e4:	d10e      	bne.n	800c204 <FMC_NANDDeInit+0x2c>
  {
    /* Set the FMC_Bank2 registers to their reset values */
    FMC_Bank2->PCR2 = 0x00000018;
 800c1e6:	4b11      	ldr	r3, [pc, #68]	; (800c22c <FMC_NANDDeInit+0x54>)
 800c1e8:	2218      	movs	r2, #24
 800c1ea:	601a      	str	r2, [r3, #0]
    FMC_Bank2->SR2 = 0x00000040;
 800c1ec:	4b0f      	ldr	r3, [pc, #60]	; (800c22c <FMC_NANDDeInit+0x54>)
 800c1ee:	2240      	movs	r2, #64	; 0x40
 800c1f0:	605a      	str	r2, [r3, #4]
    FMC_Bank2->PMEM2 = 0xFCFCFCFC;
 800c1f2:	4b0e      	ldr	r3, [pc, #56]	; (800c22c <FMC_NANDDeInit+0x54>)
 800c1f4:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800c1f8:	609a      	str	r2, [r3, #8]
    FMC_Bank2->PATT2 = 0xFCFCFCFC;  
 800c1fa:	4b0c      	ldr	r3, [pc, #48]	; (800c22c <FMC_NANDDeInit+0x54>)
 800c1fc:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800c200:	60da      	str	r2, [r3, #12]
 800c202:	e00d      	b.n	800c220 <FMC_NANDDeInit+0x48>
  }
  /* FMC_Bank3_NAND */  
  else
  {
    /* Set the FMC_Bank3 registers to their reset values */
    FMC_Bank3->PCR3 = 0x00000018;
 800c204:	4b0a      	ldr	r3, [pc, #40]	; (800c230 <FMC_NANDDeInit+0x58>)
 800c206:	2218      	movs	r2, #24
 800c208:	601a      	str	r2, [r3, #0]
    FMC_Bank3->SR3 = 0x00000040;
 800c20a:	4b09      	ldr	r3, [pc, #36]	; (800c230 <FMC_NANDDeInit+0x58>)
 800c20c:	2240      	movs	r2, #64	; 0x40
 800c20e:	605a      	str	r2, [r3, #4]
    FMC_Bank3->PMEM3 = 0xFCFCFCFC;
 800c210:	4b07      	ldr	r3, [pc, #28]	; (800c230 <FMC_NANDDeInit+0x58>)
 800c212:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800c216:	609a      	str	r2, [r3, #8]
    FMC_Bank3->PATT3 = 0xFCFCFCFC; 
 800c218:	4b05      	ldr	r3, [pc, #20]	; (800c230 <FMC_NANDDeInit+0x58>)
 800c21a:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800c21e:	60da      	str	r2, [r3, #12]
  }  
}
 800c220:	370c      	adds	r7, #12
 800c222:	46bd      	mov	sp, r7
 800c224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c228:	4770      	bx	lr
 800c22a:	bf00      	nop
 800c22c:	a0000060 	.word	0xa0000060
 800c230:	a0000080 	.word	0xa0000080

0800c234 <FMC_NANDInit>:
  * @param  FMC_NANDInitStruct : pointer to a FMC_NANDInitTypeDef structure that
  *         contains the configuration information for the FMC NAND specified Banks.                       
  * @retval None
  */
void FMC_NANDInit(FMC_NANDInitTypeDef* FMC_NANDInitStruct)
{
 800c234:	b480      	push	{r7}
 800c236:	b087      	sub	sp, #28
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
  uint32_t tmppcr = 0x00000000, tmppmem = 0x00000000, tmppatt = 0x00000000; 
 800c23c:	2300      	movs	r3, #0
 800c23e:	617b      	str	r3, [r7, #20]
 800c240:	2300      	movs	r3, #0
 800c242:	613b      	str	r3, [r7, #16]
 800c244:	2300      	movs	r3, #0
 800c246:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FMC_WAIT_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	685a      	ldr	r2, [r3, #4]
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	689b      	ldr	r3, [r3, #8]
  assert_param(IS_FMC_HOLD_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
 800c250:	431a      	orrs	r2, r3
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
            FMC_NANDInitStruct->FMC_ECC |
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	68db      	ldr	r3, [r3, #12]
  assert_param(IS_FMC_HIZ_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
 800c256:	431a      	orrs	r2, r3
            FMC_NANDInitStruct->FMC_ECC |
            FMC_NANDInitStruct->FMC_ECCPageSize |
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	691b      	ldr	r3, [r3, #16]
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
            FMC_NANDInitStruct->FMC_ECC |
 800c25c:	431a      	orrs	r2, r3
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	695b      	ldr	r3, [r3, #20]
 800c262:	025b      	lsls	r3, r3, #9
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
            FMC_NANDInitStruct->FMC_ECC |
            FMC_NANDInitStruct->FMC_ECCPageSize |
 800c264:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	699b      	ldr	r3, [r3, #24]
 800c26a:	035b      	lsls	r3, r3, #13
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
            FMC_NANDInitStruct->FMC_ECC |
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
 800c26c:	4313      	orrs	r3, r2
  assert_param(IS_FMC_WAIT_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
 800c26e:	f043 0308 	orr.w	r3, r3, #8
 800c272:	617b      	str	r3, [r7, #20]
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	69db      	ldr	r3, [r3, #28]
 800c278:	681a      	ldr	r2, [r3, #0]
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	69db      	ldr	r3, [r3, #28]
 800c27e:	685b      	ldr	r3, [r3, #4]
 800c280:	021b      	lsls	r3, r3, #8
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 800c282:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	69db      	ldr	r3, [r3, #28]
 800c288:	689b      	ldr	r3, [r3, #8]
 800c28a:	041b      	lsls	r3, r3, #16
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800c28c:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	69db      	ldr	r3, [r3, #28]
 800c292:	68db      	ldr	r3, [r3, #12]
 800c294:	061b      	lsls	r3, r3, #24
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 800c296:	4313      	orrs	r3, r2
 800c298:	613b      	str	r3, [r7, #16]
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6a1b      	ldr	r3, [r3, #32]
 800c29e:	681a      	ldr	r2, [r3, #0]
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6a1b      	ldr	r3, [r3, #32]
 800c2a4:	685b      	ldr	r3, [r3, #4]
 800c2a6:	021b      	lsls	r3, r3, #8
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 800c2a8:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6a1b      	ldr	r3, [r3, #32]
 800c2ae:	689b      	ldr	r3, [r3, #8]
 800c2b0:	041b      	lsls	r3, r3, #16
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800c2b2:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	6a1b      	ldr	r3, [r3, #32]
 800c2b8:	68db      	ldr	r3, [r3, #12]
 800c2ba:	061b      	lsls	r3, r3, #24
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 800c2bc:	4313      	orrs	r3, r2
 800c2be:	60fb      	str	r3, [r7, #12]
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);
  
  if(FMC_NANDInitStruct->FMC_Bank == FMC_Bank2_NAND)
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	2b10      	cmp	r3, #16
 800c2c6:	d109      	bne.n	800c2dc <FMC_NANDInit+0xa8>
  {
    /* FMC_Bank2_NAND registers configuration */
    FMC_Bank2->PCR2 = tmppcr;
 800c2c8:	4b0b      	ldr	r3, [pc, #44]	; (800c2f8 <FMC_NANDInit+0xc4>)
 800c2ca:	697a      	ldr	r2, [r7, #20]
 800c2cc:	601a      	str	r2, [r3, #0]
    FMC_Bank2->PMEM2 = tmppmem;
 800c2ce:	4b0a      	ldr	r3, [pc, #40]	; (800c2f8 <FMC_NANDInit+0xc4>)
 800c2d0:	693a      	ldr	r2, [r7, #16]
 800c2d2:	609a      	str	r2, [r3, #8]
    FMC_Bank2->PATT2 = tmppatt;
 800c2d4:	4b08      	ldr	r3, [pc, #32]	; (800c2f8 <FMC_NANDInit+0xc4>)
 800c2d6:	68fa      	ldr	r2, [r7, #12]
 800c2d8:	60da      	str	r2, [r3, #12]
 800c2da:	e008      	b.n	800c2ee <FMC_NANDInit+0xba>
  }
  else
  {
    /* FMC_Bank3_NAND registers configuration */
    FMC_Bank3->PCR3 = tmppcr;
 800c2dc:	4b07      	ldr	r3, [pc, #28]	; (800c2fc <FMC_NANDInit+0xc8>)
 800c2de:	697a      	ldr	r2, [r7, #20]
 800c2e0:	601a      	str	r2, [r3, #0]
    FMC_Bank3->PMEM3 = tmppmem;
 800c2e2:	4b06      	ldr	r3, [pc, #24]	; (800c2fc <FMC_NANDInit+0xc8>)
 800c2e4:	693a      	ldr	r2, [r7, #16]
 800c2e6:	609a      	str	r2, [r3, #8]
    FMC_Bank3->PATT3 = tmppatt;
 800c2e8:	4b04      	ldr	r3, [pc, #16]	; (800c2fc <FMC_NANDInit+0xc8>)
 800c2ea:	68fa      	ldr	r2, [r7, #12]
 800c2ec:	60da      	str	r2, [r3, #12]
  }
}
 800c2ee:	371c      	adds	r7, #28
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f6:	4770      	bx	lr
 800c2f8:	a0000060 	.word	0xa0000060
 800c2fc:	a0000080 	.word	0xa0000080

0800c300 <FMC_NANDStructInit>:
  * @param  FMC_NANDInitStruct: pointer to a FMC_NANDInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void FMC_NANDStructInit(FMC_NANDInitTypeDef* FMC_NANDInitStruct)
{ 
 800c300:	b480      	push	{r7}
 800c302:	b083      	sub	sp, #12
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
  /* Reset NAND Init structure parameters values */
  FMC_NANDInitStruct->FMC_Bank = FMC_Bank2_NAND;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2210      	movs	r2, #16
 800c30c:	601a      	str	r2, [r3, #0]
  FMC_NANDInitStruct->FMC_Waitfeature = FMC_Waitfeature_Disable;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2200      	movs	r2, #0
 800c312:	605a      	str	r2, [r3, #4]
  FMC_NANDInitStruct->FMC_MemoryDataWidth = FMC_NAND_MemoryDataWidth_16b;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2210      	movs	r2, #16
 800c318:	609a      	str	r2, [r3, #8]
  FMC_NANDInitStruct->FMC_ECC = FMC_ECC_Disable;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2200      	movs	r2, #0
 800c31e:	60da      	str	r2, [r3, #12]
  FMC_NANDInitStruct->FMC_ECCPageSize = FMC_ECCPageSize_256Bytes;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2200      	movs	r2, #0
 800c324:	611a      	str	r2, [r3, #16]
  FMC_NANDInitStruct->FMC_TCLRSetupTime = 0x0;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2200      	movs	r2, #0
 800c32a:	615a      	str	r2, [r3, #20]
  FMC_NANDInitStruct->FMC_TARSetupTime = 0x0;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2200      	movs	r2, #0
 800c330:	619a      	str	r2, [r3, #24]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime = 252;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	69db      	ldr	r3, [r3, #28]
 800c336:	22fc      	movs	r2, #252	; 0xfc
 800c338:	601a      	str	r2, [r3, #0]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime = 252;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	69db      	ldr	r3, [r3, #28]
 800c33e:	22fc      	movs	r2, #252	; 0xfc
 800c340:	605a      	str	r2, [r3, #4]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime = 252;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	69db      	ldr	r3, [r3, #28]
 800c346:	22fc      	movs	r2, #252	; 0xfc
 800c348:	609a      	str	r2, [r3, #8]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime = 252;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	69db      	ldr	r3, [r3, #28]
 800c34e:	22fc      	movs	r2, #252	; 0xfc
 800c350:	60da      	str	r2, [r3, #12]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime = 252;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6a1b      	ldr	r3, [r3, #32]
 800c356:	22fc      	movs	r2, #252	; 0xfc
 800c358:	601a      	str	r2, [r3, #0]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime = 252;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6a1b      	ldr	r3, [r3, #32]
 800c35e:	22fc      	movs	r2, #252	; 0xfc
 800c360:	605a      	str	r2, [r3, #4]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime = 252;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6a1b      	ldr	r3, [r3, #32]
 800c366:	22fc      	movs	r2, #252	; 0xfc
 800c368:	609a      	str	r2, [r3, #8]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime = 252;	  
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6a1b      	ldr	r3, [r3, #32]
 800c36e:	22fc      	movs	r2, #252	; 0xfc
 800c370:	60da      	str	r2, [r3, #12]
}
 800c372:	370c      	adds	r7, #12
 800c374:	46bd      	mov	sp, r7
 800c376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37a:	4770      	bx	lr

0800c37c <FMC_NANDCmd>:
  *            @arg FMC_Bank3_NAND: FMC Bank3 NAND
  * @param  NewState: new state of the FMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_NANDCmd(uint32_t FMC_Bank, FunctionalState NewState)
{
 800c37c:	b480      	push	{r7}
 800c37e:	b083      	sub	sp, #12
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
 800c384:	460b      	mov	r3, r1
 800c386:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FMC_NAND_BANK(FMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800c388:	78fb      	ldrb	r3, [r7, #3]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d010      	beq.n	800c3b0 <FMC_NANDCmd+0x34>
  {
    /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
    if(FMC_Bank == FMC_Bank2_NAND)
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2b10      	cmp	r3, #16
 800c392:	d106      	bne.n	800c3a2 <FMC_NANDCmd+0x26>
    {
      FMC_Bank2->PCR2 |= PCR_PBKEN_SET;
 800c394:	4b11      	ldr	r3, [pc, #68]	; (800c3dc <FMC_NANDCmd+0x60>)
 800c396:	4a11      	ldr	r2, [pc, #68]	; (800c3dc <FMC_NANDCmd+0x60>)
 800c398:	6812      	ldr	r2, [r2, #0]
 800c39a:	f042 0204 	orr.w	r2, r2, #4
 800c39e:	601a      	str	r2, [r3, #0]
 800c3a0:	e016      	b.n	800c3d0 <FMC_NANDCmd+0x54>
    }
    else
    {
      FMC_Bank3->PCR3 |= PCR_PBKEN_SET;
 800c3a2:	4b0f      	ldr	r3, [pc, #60]	; (800c3e0 <FMC_NANDCmd+0x64>)
 800c3a4:	4a0e      	ldr	r2, [pc, #56]	; (800c3e0 <FMC_NANDCmd+0x64>)
 800c3a6:	6812      	ldr	r2, [r2, #0]
 800c3a8:	f042 0204 	orr.w	r2, r2, #4
 800c3ac:	601a      	str	r2, [r3, #0]
 800c3ae:	e00f      	b.n	800c3d0 <FMC_NANDCmd+0x54>
    }
  }
  else
  {
    /* Disable the selected NAND Bank by clearing the PBKEN bit in the PCRx register */
    if(FMC_Bank == FMC_Bank2_NAND)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2b10      	cmp	r3, #16
 800c3b4:	d106      	bne.n	800c3c4 <FMC_NANDCmd+0x48>
    {
      FMC_Bank2->PCR2 &= PCR_PBKEN_RESET;
 800c3b6:	4a09      	ldr	r2, [pc, #36]	; (800c3dc <FMC_NANDCmd+0x60>)
 800c3b8:	4b08      	ldr	r3, [pc, #32]	; (800c3dc <FMC_NANDCmd+0x60>)
 800c3ba:	6819      	ldr	r1, [r3, #0]
 800c3bc:	4b09      	ldr	r3, [pc, #36]	; (800c3e4 <FMC_NANDCmd+0x68>)
 800c3be:	400b      	ands	r3, r1
 800c3c0:	6013      	str	r3, [r2, #0]
 800c3c2:	e005      	b.n	800c3d0 <FMC_NANDCmd+0x54>
    }
    else
    {
      FMC_Bank3->PCR3 &= PCR_PBKEN_RESET;
 800c3c4:	4a06      	ldr	r2, [pc, #24]	; (800c3e0 <FMC_NANDCmd+0x64>)
 800c3c6:	4b06      	ldr	r3, [pc, #24]	; (800c3e0 <FMC_NANDCmd+0x64>)
 800c3c8:	6819      	ldr	r1, [r3, #0]
 800c3ca:	4b06      	ldr	r3, [pc, #24]	; (800c3e4 <FMC_NANDCmd+0x68>)
 800c3cc:	400b      	ands	r3, r1
 800c3ce:	6013      	str	r3, [r2, #0]
    }
  }
}
 800c3d0:	370c      	adds	r7, #12
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d8:	4770      	bx	lr
 800c3da:	bf00      	nop
 800c3dc:	a0000060 	.word	0xa0000060
 800c3e0:	a0000080 	.word	0xa0000080
 800c3e4:	000ffffb 	.word	0x000ffffb

0800c3e8 <FMC_NANDECCCmd>:
  * @param  NewState: new state of the FMC NAND ECC feature.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_NANDECCCmd(uint32_t FMC_Bank, FunctionalState NewState)
{
 800c3e8:	b480      	push	{r7}
 800c3ea:	b083      	sub	sp, #12
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FMC_NAND_BANK(FMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800c3f4:	78fb      	ldrb	r3, [r7, #3]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d010      	beq.n	800c41c <FMC_NANDECCCmd+0x34>
  {
    /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
    if(FMC_Bank == FMC_Bank2_NAND)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2b10      	cmp	r3, #16
 800c3fe:	d106      	bne.n	800c40e <FMC_NANDECCCmd+0x26>
    {
      FMC_Bank2->PCR2 |= PCR_ECCEN_SET;
 800c400:	4b11      	ldr	r3, [pc, #68]	; (800c448 <FMC_NANDECCCmd+0x60>)
 800c402:	4a11      	ldr	r2, [pc, #68]	; (800c448 <FMC_NANDECCCmd+0x60>)
 800c404:	6812      	ldr	r2, [r2, #0]
 800c406:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c40a:	601a      	str	r2, [r3, #0]
 800c40c:	e016      	b.n	800c43c <FMC_NANDECCCmd+0x54>
    }
    else
    {
      FMC_Bank3->PCR3 |= PCR_ECCEN_SET;
 800c40e:	4b0f      	ldr	r3, [pc, #60]	; (800c44c <FMC_NANDECCCmd+0x64>)
 800c410:	4a0e      	ldr	r2, [pc, #56]	; (800c44c <FMC_NANDECCCmd+0x64>)
 800c412:	6812      	ldr	r2, [r2, #0]
 800c414:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c418:	601a      	str	r2, [r3, #0]
 800c41a:	e00f      	b.n	800c43c <FMC_NANDECCCmd+0x54>
    }
  }
  else
  {
    /* Disable the selected NAND Bank ECC function by clearing the ECCEN bit in the PCRx register */
    if(FMC_Bank == FMC_Bank2_NAND)
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2b10      	cmp	r3, #16
 800c420:	d106      	bne.n	800c430 <FMC_NANDECCCmd+0x48>
    {
      FMC_Bank2->PCR2 &= PCR_ECCEN_RESET;
 800c422:	4a09      	ldr	r2, [pc, #36]	; (800c448 <FMC_NANDECCCmd+0x60>)
 800c424:	4b08      	ldr	r3, [pc, #32]	; (800c448 <FMC_NANDECCCmd+0x60>)
 800c426:	6819      	ldr	r1, [r3, #0]
 800c428:	4b09      	ldr	r3, [pc, #36]	; (800c450 <FMC_NANDECCCmd+0x68>)
 800c42a:	400b      	ands	r3, r1
 800c42c:	6013      	str	r3, [r2, #0]
 800c42e:	e005      	b.n	800c43c <FMC_NANDECCCmd+0x54>
    }
    else
    {
      FMC_Bank3->PCR3 &= PCR_ECCEN_RESET;
 800c430:	4a06      	ldr	r2, [pc, #24]	; (800c44c <FMC_NANDECCCmd+0x64>)
 800c432:	4b06      	ldr	r3, [pc, #24]	; (800c44c <FMC_NANDECCCmd+0x64>)
 800c434:	6819      	ldr	r1, [r3, #0]
 800c436:	4b06      	ldr	r3, [pc, #24]	; (800c450 <FMC_NANDECCCmd+0x68>)
 800c438:	400b      	ands	r3, r1
 800c43a:	6013      	str	r3, [r2, #0]
    }
  }
}
 800c43c:	370c      	adds	r7, #12
 800c43e:	46bd      	mov	sp, r7
 800c440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c444:	4770      	bx	lr
 800c446:	bf00      	nop
 800c448:	a0000060 	.word	0xa0000060
 800c44c:	a0000080 	.word	0xa0000080
 800c450:	000fffbf 	.word	0x000fffbf

0800c454 <FMC_GetECC>:
  *            @arg FMC_Bank2_NAND: FMC Bank2 NAND 
  *            @arg FMC_Bank3_NAND: FMC Bank3 NAND
  * @retval The Error Correction Code (ECC) value.
  */
uint32_t FMC_GetECC(uint32_t FMC_Bank)
{
 800c454:	b480      	push	{r7}
 800c456:	b085      	sub	sp, #20
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
  uint32_t eccval = 0x00000000;
 800c45c:	2300      	movs	r3, #0
 800c45e:	60fb      	str	r3, [r7, #12]
  
  if(FMC_Bank == FMC_Bank2_NAND)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2b10      	cmp	r3, #16
 800c464:	d103      	bne.n	800c46e <FMC_GetECC+0x1a>
  {
    /* Get the ECCR2 register value */
    eccval = FMC_Bank2->ECCR2;
 800c466:	4b07      	ldr	r3, [pc, #28]	; (800c484 <FMC_GetECC+0x30>)
 800c468:	695b      	ldr	r3, [r3, #20]
 800c46a:	60fb      	str	r3, [r7, #12]
 800c46c:	e002      	b.n	800c474 <FMC_GetECC+0x20>
  }
  else
  {
    /* Get the ECCR3 register value */
    eccval = FMC_Bank3->ECCR3;
 800c46e:	4b06      	ldr	r3, [pc, #24]	; (800c488 <FMC_GetECC+0x34>)
 800c470:	695b      	ldr	r3, [r3, #20]
 800c472:	60fb      	str	r3, [r7, #12]
  }
  /* Return the error correction code value */
  return(eccval);
 800c474:	68fb      	ldr	r3, [r7, #12]
}
 800c476:	4618      	mov	r0, r3
 800c478:	3714      	adds	r7, #20
 800c47a:	46bd      	mov	sp, r7
 800c47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c480:	4770      	bx	lr
 800c482:	bf00      	nop
 800c484:	a0000060 	.word	0xa0000060
 800c488:	a0000080 	.word	0xa0000080

0800c48c <FMC_PCCARDDeInit>:
  * @brief  De-initializes the FMC PCCARD Bank registers to their default reset values.
  * @param  None                       
  * @retval None
  */
void FMC_PCCARDDeInit(void)
{
 800c48c:	b480      	push	{r7}
 800c48e:	af00      	add	r7, sp, #0
  /* Set the FMC_Bank4 registers to their reset values */
  FMC_Bank4->PCR4 = 0x00000018; 
 800c490:	4b0a      	ldr	r3, [pc, #40]	; (800c4bc <FMC_PCCARDDeInit+0x30>)
 800c492:	2218      	movs	r2, #24
 800c494:	601a      	str	r2, [r3, #0]
  FMC_Bank4->SR4 = 0x00000000;	
 800c496:	4b09      	ldr	r3, [pc, #36]	; (800c4bc <FMC_PCCARDDeInit+0x30>)
 800c498:	2200      	movs	r2, #0
 800c49a:	605a      	str	r2, [r3, #4]
  FMC_Bank4->PMEM4 = 0xFCFCFCFC;
 800c49c:	4b07      	ldr	r3, [pc, #28]	; (800c4bc <FMC_PCCARDDeInit+0x30>)
 800c49e:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800c4a2:	609a      	str	r2, [r3, #8]
  FMC_Bank4->PATT4 = 0xFCFCFCFC;
 800c4a4:	4b05      	ldr	r3, [pc, #20]	; (800c4bc <FMC_PCCARDDeInit+0x30>)
 800c4a6:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800c4aa:	60da      	str	r2, [r3, #12]
  FMC_Bank4->PIO4 = 0xFCFCFCFC;
 800c4ac:	4b03      	ldr	r3, [pc, #12]	; (800c4bc <FMC_PCCARDDeInit+0x30>)
 800c4ae:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800c4b2:	611a      	str	r2, [r3, #16]
}
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr
 800c4bc:	a00000a0 	.word	0xa00000a0

0800c4c0 <FMC_PCCARDInit>:
  * @param  FMC_PCCARDInitStruct : pointer to a FMC_PCCARDInitTypeDef structure
  *         that contains the configuration information for the FMC PCCARD Bank.                       
  * @retval None
  */
void FMC_PCCARDInit(FMC_PCCARDInitTypeDef* FMC_PCCARDInitStruct)
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b083      	sub	sp, #12
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_FMC_WAIT_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FMC_PCCARDInitStruct parameters */
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
 800c4c8:	4b27      	ldr	r3, [pc, #156]	; (800c568 <FMC_PCCARDInit+0xa8>)
 800c4ca:	687a      	ldr	r2, [r7, #4]
 800c4cc:	6811      	ldr	r1, [r2, #0]
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
 800c4ce:	687a      	ldr	r2, [r7, #4]
 800c4d0:	6852      	ldr	r2, [r2, #4]
 800c4d2:	0252      	lsls	r2, r2, #9
  assert_param(IS_FMC_HOLD_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FMC_PCCARDInitStruct parameters */
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
                     FMC_NAND_MemoryDataWidth_16b |  
 800c4d4:	4311      	orrs	r1, r2
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
 800c4d6:	687a      	ldr	r2, [r7, #4]
 800c4d8:	6892      	ldr	r2, [r2, #8]
 800c4da:	0352      	lsls	r2, r2, #13
  assert_param(IS_FMC_HIZ_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FMC_PCCARDInitStruct parameters */
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
 800c4dc:	430a      	orrs	r2, r1
 800c4de:	f042 0210 	orr.w	r2, r2, #16
  assert_param(IS_FMC_WAIT_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FMC_PCCARDInitStruct parameters */
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
 800c4e2:	601a      	str	r2, [r3, #0]
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 800c4e4:	4b20      	ldr	r3, [pc, #128]	; (800c568 <FMC_PCCARDInit+0xa8>)
 800c4e6:	687a      	ldr	r2, [r7, #4]
 800c4e8:	68d2      	ldr	r2, [r2, #12]
 800c4ea:	6811      	ldr	r1, [r2, #0]
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800c4ec:	687a      	ldr	r2, [r7, #4]
 800c4ee:	68d2      	ldr	r2, [r2, #12]
 800c4f0:	6852      	ldr	r2, [r2, #4]
 800c4f2:	0212      	lsls	r2, r2, #8
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 800c4f4:	4311      	orrs	r1, r2
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 800c4f6:	687a      	ldr	r2, [r7, #4]
 800c4f8:	68d2      	ldr	r2, [r2, #12]
 800c4fa:	6892      	ldr	r2, [r2, #8]
 800c4fc:	0412      	lsls	r2, r2, #16
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800c4fe:	4311      	orrs	r1, r2
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
 800c500:	687a      	ldr	r2, [r7, #4]
 800c502:	68d2      	ldr	r2, [r2, #12]
 800c504:	68d2      	ldr	r2, [r2, #12]
 800c506:	0612      	lsls	r2, r2, #24
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 800c508:	430a      	orrs	r2, r1
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 800c50a:	609a      	str	r2, [r3, #8]
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 800c50c:	4b16      	ldr	r3, [pc, #88]	; (800c568 <FMC_PCCARDInit+0xa8>)
 800c50e:	687a      	ldr	r2, [r7, #4]
 800c510:	6912      	ldr	r2, [r2, #16]
 800c512:	6811      	ldr	r1, [r2, #0]
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800c514:	687a      	ldr	r2, [r7, #4]
 800c516:	6912      	ldr	r2, [r2, #16]
 800c518:	6852      	ldr	r2, [r2, #4]
 800c51a:	0212      	lsls	r2, r2, #8
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 800c51c:	4311      	orrs	r1, r2
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 800c51e:	687a      	ldr	r2, [r7, #4]
 800c520:	6912      	ldr	r2, [r2, #16]
 800c522:	6892      	ldr	r2, [r2, #8]
 800c524:	0412      	lsls	r2, r2, #16
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800c526:	4311      	orrs	r1, r2
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
 800c528:	687a      	ldr	r2, [r7, #4]
 800c52a:	6912      	ldr	r2, [r2, #16]
 800c52c:	68d2      	ldr	r2, [r2, #12]
 800c52e:	0612      	lsls	r2, r2, #24
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 800c530:	430a      	orrs	r2, r1
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 800c532:	60da      	str	r2, [r3, #12]
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
 800c534:	4b0c      	ldr	r3, [pc, #48]	; (800c568 <FMC_PCCARDInit+0xa8>)
 800c536:	687a      	ldr	r2, [r7, #4]
 800c538:	6952      	ldr	r2, [r2, #20]
 800c53a:	6811      	ldr	r1, [r2, #0]
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800c53c:	687a      	ldr	r2, [r7, #4]
 800c53e:	6952      	ldr	r2, [r2, #20]
 800c540:	6852      	ldr	r2, [r2, #4]
 800c542:	0212      	lsls	r2, r2, #8
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
 800c544:	4311      	orrs	r1, r2
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 800c546:	687a      	ldr	r2, [r7, #4]
 800c548:	6952      	ldr	r2, [r2, #20]
 800c54a:	6892      	ldr	r2, [r2, #8]
 800c54c:	0412      	lsls	r2, r2, #16
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800c54e:	4311      	orrs	r1, r2
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime << 24);             
 800c550:	687a      	ldr	r2, [r7, #4]
 800c552:	6952      	ldr	r2, [r2, #20]
 800c554:	68d2      	ldr	r2, [r2, #12]
 800c556:	0612      	lsls	r2, r2, #24
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 800c558:	430a      	orrs	r2, r1
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
 800c55a:	611a      	str	r2, [r3, #16]
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime << 24);             
}
 800c55c:	370c      	adds	r7, #12
 800c55e:	46bd      	mov	sp, r7
 800c560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c564:	4770      	bx	lr
 800c566:	bf00      	nop
 800c568:	a00000a0 	.word	0xa00000a0

0800c56c <FMC_PCCARDStructInit>:
  * @param  FMC_PCCARDInitStruct: pointer to a FMC_PCCARDInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void FMC_PCCARDStructInit(FMC_PCCARDInitTypeDef* FMC_PCCARDInitStruct)
{
 800c56c:	b480      	push	{r7}
 800c56e:	b083      	sub	sp, #12
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
  /* Reset PCCARD Init structure parameters values */
  FMC_PCCARDInitStruct->FMC_Waitfeature = FMC_Waitfeature_Disable;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2200      	movs	r2, #0
 800c578:	601a      	str	r2, [r3, #0]
  FMC_PCCARDInitStruct->FMC_TCLRSetupTime = 0;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2200      	movs	r2, #0
 800c57e:	605a      	str	r2, [r3, #4]
  FMC_PCCARDInitStruct->FMC_TARSetupTime = 0;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2200      	movs	r2, #0
 800c584:	609a      	str	r2, [r3, #8]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime = 252;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	68db      	ldr	r3, [r3, #12]
 800c58a:	22fc      	movs	r2, #252	; 0xfc
 800c58c:	601a      	str	r2, [r3, #0]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime = 252;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	68db      	ldr	r3, [r3, #12]
 800c592:	22fc      	movs	r2, #252	; 0xfc
 800c594:	605a      	str	r2, [r3, #4]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime = 252;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	68db      	ldr	r3, [r3, #12]
 800c59a:	22fc      	movs	r2, #252	; 0xfc
 800c59c:	609a      	str	r2, [r3, #8]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime = 252;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	68db      	ldr	r3, [r3, #12]
 800c5a2:	22fc      	movs	r2, #252	; 0xfc
 800c5a4:	60da      	str	r2, [r3, #12]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime = 252;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	691b      	ldr	r3, [r3, #16]
 800c5aa:	22fc      	movs	r2, #252	; 0xfc
 800c5ac:	601a      	str	r2, [r3, #0]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime = 252;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	691b      	ldr	r3, [r3, #16]
 800c5b2:	22fc      	movs	r2, #252	; 0xfc
 800c5b4:	605a      	str	r2, [r3, #4]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime = 252;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	691b      	ldr	r3, [r3, #16]
 800c5ba:	22fc      	movs	r2, #252	; 0xfc
 800c5bc:	609a      	str	r2, [r3, #8]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime = 252;	
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	691b      	ldr	r3, [r3, #16]
 800c5c2:	22fc      	movs	r2, #252	; 0xfc
 800c5c4:	60da      	str	r2, [r3, #12]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime = 252;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	695b      	ldr	r3, [r3, #20]
 800c5ca:	22fc      	movs	r2, #252	; 0xfc
 800c5cc:	601a      	str	r2, [r3, #0]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime = 252;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	695b      	ldr	r3, [r3, #20]
 800c5d2:	22fc      	movs	r2, #252	; 0xfc
 800c5d4:	605a      	str	r2, [r3, #4]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime = 252;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	695b      	ldr	r3, [r3, #20]
 800c5da:	22fc      	movs	r2, #252	; 0xfc
 800c5dc:	609a      	str	r2, [r3, #8]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime = 252;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	695b      	ldr	r3, [r3, #20]
 800c5e2:	22fc      	movs	r2, #252	; 0xfc
 800c5e4:	60da      	str	r2, [r3, #12]
}
 800c5e6:	370c      	adds	r7, #12
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ee:	4770      	bx	lr

0800c5f0 <FMC_PCCARDCmd>:
  * @param  NewState: new state of the PCCARD Memory Bank.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_PCCARDCmd(FunctionalState NewState)
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b083      	sub	sp, #12
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800c5fa:	79fb      	ldrb	r3, [r7, #7]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d006      	beq.n	800c60e <FMC_PCCARDCmd+0x1e>
  {
    /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
    FMC_Bank4->PCR4 |= PCR_PBKEN_SET;
 800c600:	4b08      	ldr	r3, [pc, #32]	; (800c624 <FMC_PCCARDCmd+0x34>)
 800c602:	4a08      	ldr	r2, [pc, #32]	; (800c624 <FMC_PCCARDCmd+0x34>)
 800c604:	6812      	ldr	r2, [r2, #0]
 800c606:	f042 0204 	orr.w	r2, r2, #4
 800c60a:	601a      	str	r2, [r3, #0]
 800c60c:	e005      	b.n	800c61a <FMC_PCCARDCmd+0x2a>
  }
  else
  {
    /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
    FMC_Bank4->PCR4 &= PCR_PBKEN_RESET;
 800c60e:	4a05      	ldr	r2, [pc, #20]	; (800c624 <FMC_PCCARDCmd+0x34>)
 800c610:	4b04      	ldr	r3, [pc, #16]	; (800c624 <FMC_PCCARDCmd+0x34>)
 800c612:	6819      	ldr	r1, [r3, #0]
 800c614:	4b04      	ldr	r3, [pc, #16]	; (800c628 <FMC_PCCARDCmd+0x38>)
 800c616:	400b      	ands	r3, r1
 800c618:	6013      	str	r3, [r2, #0]
  }
}
 800c61a:	370c      	adds	r7, #12
 800c61c:	46bd      	mov	sp, r7
 800c61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c622:	4770      	bx	lr
 800c624:	a00000a0 	.word	0xa00000a0
 800c628:	000ffffb 	.word	0x000ffffb

0800c62c <FMC_SDRAMDeInit>:
  *            @arg FMC_Bank1_SDRAM: FMC Bank1 SDRAM 
  *            @arg FMC_Bank2_SDRAM: FMC Bank2 SDRAM 
  * @retval None
  */
void FMC_SDRAMDeInit(uint32_t FMC_Bank)
{
 800c62c:	b480      	push	{r7}
 800c62e:	b083      	sub	sp, #12
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_SDRAM_BANK(FMC_Bank));
  
  FMC_Bank5_6->SDCR[FMC_Bank] = 0x000002D0;
 800c634:	4b0d      	ldr	r3, [pc, #52]	; (800c66c <FMC_SDRAMDeInit+0x40>)
 800c636:	687a      	ldr	r2, [r7, #4]
 800c638:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 800c63c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  FMC_Bank5_6->SDTR[FMC_Bank] = 0x0FFFFFFF;    
 800c640:	4b0a      	ldr	r3, [pc, #40]	; (800c66c <FMC_SDRAMDeInit+0x40>)
 800c642:	687a      	ldr	r2, [r7, #4]
 800c644:	3202      	adds	r2, #2
 800c646:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800c64a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  FMC_Bank5_6->SDCMR = 0x00000000;
 800c64e:	4b07      	ldr	r3, [pc, #28]	; (800c66c <FMC_SDRAMDeInit+0x40>)
 800c650:	2200      	movs	r2, #0
 800c652:	611a      	str	r2, [r3, #16]
  FMC_Bank5_6->SDRTR = 0x00000000;
 800c654:	4b05      	ldr	r3, [pc, #20]	; (800c66c <FMC_SDRAMDeInit+0x40>)
 800c656:	2200      	movs	r2, #0
 800c658:	615a      	str	r2, [r3, #20]
  FMC_Bank5_6->SDSR = 0x00000000; 
 800c65a:	4b04      	ldr	r3, [pc, #16]	; (800c66c <FMC_SDRAMDeInit+0x40>)
 800c65c:	2200      	movs	r2, #0
 800c65e:	619a      	str	r2, [r3, #24]
}  
 800c660:	370c      	adds	r7, #12
 800c662:	46bd      	mov	sp, r7
 800c664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c668:	4770      	bx	lr
 800c66a:	bf00      	nop
 800c66c:	a0000140 	.word	0xa0000140

0800c670 <FMC_SDRAMInit>:
  *         that contains the configuration information for the FMC SDRAM 
  *         specified Banks.                       
  * @retval None
  */
void FMC_SDRAMInit(FMC_SDRAMInitTypeDef* FMC_SDRAMInitStruct)
{ 
 800c670:	b480      	push	{r7}
 800c672:	b087      	sub	sp, #28
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
  /* temporary registers */
  uint32_t tmpr1 = 0;
 800c678:	2300      	movs	r3, #0
 800c67a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800c67c:	2300      	movs	r3, #0
 800c67e:	613b      	str	r3, [r7, #16]
  uint32_t tmpr3 = 0;
 800c680:	2300      	movs	r3, #0
 800c682:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr4 = 0;
 800c684:	2300      	movs	r3, #0
 800c686:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)); 
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	685a      	ldr	r2, [r3, #4]
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	689b      	ldr	r3, [r3, #8]
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)); 
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 800c690:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	68db      	ldr	r3, [r3, #12]
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
 800c696:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	691b      	ldr	r3, [r3, #16]
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
 800c69c:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
             FMC_SDRAMInitStruct->FMC_CASLatency |
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	695b      	ldr	r3, [r3, #20]
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
 800c6a2:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_CASLatency |
             FMC_SDRAMInitStruct->FMC_WriteProtection |
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	699b      	ldr	r3, [r3, #24]
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
             FMC_SDRAMInitStruct->FMC_CASLatency |
 800c6a8:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_WriteProtection |
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	69db      	ldr	r3, [r3, #28]
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
             FMC_SDRAMInitStruct->FMC_CASLatency |
             FMC_SDRAMInitStruct->FMC_WriteProtection |
 800c6ae:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6a1b      	ldr	r3, [r3, #32]
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
             FMC_SDRAMInitStruct->FMC_CASLatency |
             FMC_SDRAMInitStruct->FMC_WriteProtection |
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 800c6b4:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)); 
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 800c6ba:	4313      	orrs	r3, r2
 800c6bc:	617b      	str	r3, [r7, #20]
             FMC_SDRAMInitStruct->FMC_WriteProtection |
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
            
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d106      	bne.n	800c6d4 <FMC_SDRAMInit+0x64>
  {
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
 800c6c6:	4b40      	ldr	r3, [pc, #256]	; (800c7c8 <FMC_SDRAMInit+0x158>)
 800c6c8:	687a      	ldr	r2, [r7, #4]
 800c6ca:	6812      	ldr	r2, [r2, #0]
 800c6cc:	6979      	ldr	r1, [r7, #20]
 800c6ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c6d2:	e011      	b.n	800c6f8 <FMC_SDRAMInit+0x88>
  }
  else   /* SDCR2 "don't care" bits configuration */
  {
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	69da      	ldr	r2, [r3, #28]
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	6a1b      	ldr	r3, [r3, #32]
  {
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  else   /* SDCR2 "don't care" bits configuration */
  {
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 800c6dc:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  {
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  else   /* SDCR2 "don't care" bits configuration */
  {
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 800c6e2:	4313      	orrs	r3, r2
 800c6e4:	60fb      	str	r3, [r7, #12]
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
    
    FMC_Bank5_6->SDCR[FMC_Bank1_SDRAM] = tmpr3;
 800c6e6:	4b38      	ldr	r3, [pc, #224]	; (800c7c8 <FMC_SDRAMInit+0x158>)
 800c6e8:	68fa      	ldr	r2, [r7, #12]
 800c6ea:	601a      	str	r2, [r3, #0]
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
 800c6ec:	4b36      	ldr	r3, [pc, #216]	; (800c7c8 <FMC_SDRAMInit+0x158>)
 800c6ee:	687a      	ldr	r2, [r7, #4]
 800c6f0:	6812      	ldr	r2, [r2, #0]
 800c6f2:	6979      	ldr	r1, [r7, #20]
 800c6f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d130      	bne.n	800c762 <FMC_SDRAMInit+0xf2>
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	1e5a      	subs	r2, r3, #1
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c70c:	685b      	ldr	r3, [r3, #4]
 800c70e:	3b01      	subs	r3, #1
 800c710:	011b      	lsls	r3, r3, #4
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 800c712:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c718:	689b      	ldr	r3, [r3, #8]
 800c71a:	3b01      	subs	r3, #1
 800c71c:	021b      	lsls	r3, r3, #8
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 800c71e:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c724:	68db      	ldr	r3, [r3, #12]
 800c726:	3b01      	subs	r3, #1
 800c728:	031b      	lsls	r3, r3, #12
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 800c72a:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c730:	691b      	ldr	r3, [r3, #16]
 800c732:	3b01      	subs	r3, #1
 800c734:	041b      	lsls	r3, r3, #16
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 800c736:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20) |
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c73c:	695b      	ldr	r3, [r3, #20]
 800c73e:	3b01      	subs	r3, #1
 800c740:	051b      	lsls	r3, r3, #20
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
 800c742:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay)-1) << 24);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c748:	699b      	ldr	r3, [r3, #24]
 800c74a:	3b01      	subs	r3, #1
 800c74c:	061b      	lsls	r3, r3, #24
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 800c74e:	4313      	orrs	r3, r2
 800c750:	613b      	str	r3, [r7, #16]
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay)-1) << 24);
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
 800c752:	4b1d      	ldr	r3, [pc, #116]	; (800c7c8 <FMC_SDRAMInit+0x158>)
 800c754:	687a      	ldr	r2, [r7, #4]
 800c756:	6812      	ldr	r2, [r2, #0]
 800c758:	3202      	adds	r2, #2
 800c75a:	6939      	ldr	r1, [r7, #16]
 800c75c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c760:	e02c      	b.n	800c7bc <FMC_SDRAMInit+0x14c>
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	1e5a      	subs	r2, r3, #1
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	3b01      	subs	r3, #1
 800c772:	011b      	lsls	r3, r3, #4
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 800c774:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c77a:	689b      	ldr	r3, [r3, #8]
 800c77c:	3b01      	subs	r3, #1
 800c77e:	021b      	lsls	r3, r3, #8
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 800c780:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c786:	691b      	ldr	r3, [r3, #16]
 800c788:	3b01      	subs	r3, #1
 800c78a:	041b      	lsls	r3, r3, #16
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 800c78c:	4313      	orrs	r3, r2
 800c78e:	613b      	str	r3, [r7, #16]
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
            
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c794:	68db      	ldr	r3, [r3, #12]
 800c796:	3b01      	subs	r3, #1
 800c798:	031a      	lsls	r2, r3, #12
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c79e:	695b      	ldr	r3, [r3, #20]
 800c7a0:	3b01      	subs	r3, #1
 800c7a2:	051b      	lsls	r3, r3, #20
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
            
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 800c7a4:	4313      	orrs	r3, r2
 800c7a6:	60bb      	str	r3, [r7, #8]
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20);
            
            FMC_Bank5_6->SDTR[FMC_Bank1_SDRAM] = tmpr4;
 800c7a8:	4b07      	ldr	r3, [pc, #28]	; (800c7c8 <FMC_SDRAMInit+0x158>)
 800c7aa:	68ba      	ldr	r2, [r7, #8]
 800c7ac:	609a      	str	r2, [r3, #8]
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
 800c7ae:	4b06      	ldr	r3, [pc, #24]	; (800c7c8 <FMC_SDRAMInit+0x158>)
 800c7b0:	687a      	ldr	r2, [r7, #4]
 800c7b2:	6812      	ldr	r2, [r2, #0]
 800c7b4:	3202      	adds	r2, #2
 800c7b6:	6939      	ldr	r1, [r7, #16]
 800c7b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  
}
 800c7bc:	371c      	adds	r7, #28
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c4:	4770      	bx	lr
 800c7c6:	bf00      	nop
 800c7c8:	a0000140 	.word	0xa0000140

0800c7cc <FMC_SDRAMStructInit>:
  * @param  FMC_SDRAMInitStruct: pointer to a FMC_SDRAMInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void FMC_SDRAMStructInit(FMC_SDRAMInitTypeDef* FMC_SDRAMInitStruct)  
{  
 800c7cc:	b480      	push	{r7}
 800c7ce:	b083      	sub	sp, #12
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
  /* Reset SDRAM Init structure parameters values */
  FMC_SDRAMInitStruct->FMC_Bank = FMC_Bank1_SDRAM;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	601a      	str	r2, [r3, #0]
  FMC_SDRAMInitStruct->FMC_ColumnBitsNumber = FMC_ColumnBits_Number_8b;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2200      	movs	r2, #0
 800c7de:	605a      	str	r2, [r3, #4]
  FMC_SDRAMInitStruct->FMC_RowBitsNumber = FMC_RowBits_Number_11b; 
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	609a      	str	r2, [r3, #8]
  FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth = FMC_SDMemory_Width_16b;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2210      	movs	r2, #16
 800c7ea:	60da      	str	r2, [r3, #12]
  FMC_SDRAMInitStruct->FMC_InternalBankNumber = FMC_InternalBank_Number_4; 
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2240      	movs	r2, #64	; 0x40
 800c7f0:	611a      	str	r2, [r3, #16]
  FMC_SDRAMInitStruct->FMC_CASLatency = FMC_CAS_Latency_1;  
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2280      	movs	r2, #128	; 0x80
 800c7f6:	615a      	str	r2, [r3, #20]
  FMC_SDRAMInitStruct->FMC_WriteProtection = FMC_Write_Protection_Enable;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c7fe:	619a      	str	r2, [r3, #24]
  FMC_SDRAMInitStruct->FMC_SDClockPeriod = FMC_SDClock_Disable;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2200      	movs	r2, #0
 800c804:	61da      	str	r2, [r3, #28]
  FMC_SDRAMInitStruct->FMC_ReadBurst = FMC_Read_Burst_Disable;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2200      	movs	r2, #0
 800c80a:	621a      	str	r2, [r3, #32]
  FMC_SDRAMInitStruct->FMC_ReadPipeDelay = FMC_ReadPipe_Delay_0; 
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2200      	movs	r2, #0
 800c810:	625a      	str	r2, [r3, #36]	; 0x24
   
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay = 16;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c816:	2210      	movs	r2, #16
 800c818:	601a      	str	r2, [r3, #0]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay = 16;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c81e:	2210      	movs	r2, #16
 800c820:	605a      	str	r2, [r3, #4]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime = 16;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c826:	2210      	movs	r2, #16
 800c828:	609a      	str	r2, [r3, #8]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay = 16;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c82e:	2210      	movs	r2, #16
 800c830:	60da      	str	r2, [r3, #12]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime = 16;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c836:	2210      	movs	r2, #16
 800c838:	611a      	str	r2, [r3, #16]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay = 16;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c83e:	2210      	movs	r2, #16
 800c840:	615a      	str	r2, [r3, #20]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay = 16;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c846:	2210      	movs	r2, #16
 800c848:	619a      	str	r2, [r3, #24]
  
}
 800c84a:	370c      	adds	r7, #12
 800c84c:	46bd      	mov	sp, r7
 800c84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c852:	4770      	bx	lr

0800c854 <FMC_SDRAMCmdConfig>:
  * @param  FMC_SDRAMCommandStruct: pointer to a FMC_SDRAMCommandTypeDef structure 
  *         which will be configured.
  * @retval None
  */
void FMC_SDRAMCmdConfig(FMC_SDRAMCommandTypeDef* FMC_SDRAMCommandStruct)
{
 800c854:	b480      	push	{r7}
 800c856:	b085      	sub	sp, #20
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
  uint32_t tmpr = 0x0;
 800c85c:	2300      	movs	r3, #0
 800c85e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FMC_COMMAND_MODE(FMC_SDRAMCommandStruct->FMC_CommandMode));
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681a      	ldr	r2, [r3, #0]
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	685b      	ldr	r3, [r3, #4]
  assert_param(IS_FMC_COMMAND_MODE(FMC_SDRAMCommandStruct->FMC_CommandMode));
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 800c868:	431a      	orrs	r2, r3
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	689b      	ldr	r3, [r3, #8]
 800c86e:	3b01      	subs	r3, #1
 800c870:	015b      	lsls	r3, r3, #5
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
 800c872:	431a      	orrs	r2, r3
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
                     ((FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition)<<9));
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	68db      	ldr	r3, [r3, #12]
 800c878:	025b      	lsls	r3, r3, #9
  assert_param(IS_FMC_COMMAND_MODE(FMC_SDRAMCommandStruct->FMC_CommandMode));
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 800c87a:	4313      	orrs	r3, r2
 800c87c:	60fb      	str	r3, [r7, #12]
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
                     ((FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition)<<9));
  
  FMC_Bank5_6->SDCMR = tmpr;
 800c87e:	4b04      	ldr	r3, [pc, #16]	; (800c890 <FMC_SDRAMCmdConfig+0x3c>)
 800c880:	68fa      	ldr	r2, [r7, #12]
 800c882:	611a      	str	r2, [r3, #16]

}
 800c884:	3714      	adds	r7, #20
 800c886:	46bd      	mov	sp, r7
 800c888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88c:	4770      	bx	lr
 800c88e:	bf00      	nop
 800c890:	a0000140 	.word	0xa0000140

0800c894 <FMC_GetModeStatus>:
  * @param  SDRAM_Bank: Defines the FMC SDRAM bank. This parameter can be 
  *                     FMC_Bank1_SDRAM or FMC_Bank2_SDRAM. 
  * @retval The FMC SDRAM bank mode status         
  */
uint32_t FMC_GetModeStatus(uint32_t SDRAM_Bank)
{
 800c894:	b480      	push	{r7}
 800c896:	b085      	sub	sp, #20
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800c89c:	2300      	movs	r3, #0
 800c89e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameter */
  assert_param(IS_FMC_SDRAM_BANK(SDRAM_Bank));

  /* Get the busy flag status */
  if(SDRAM_Bank == FMC_Bank1_SDRAM)
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d105      	bne.n	800c8b2 <FMC_GetModeStatus+0x1e>
  {
    tmpreg = (uint32_t)(FMC_Bank5_6->SDSR & FMC_SDSR_MODES1); 
 800c8a6:	4b09      	ldr	r3, [pc, #36]	; (800c8cc <FMC_GetModeStatus+0x38>)
 800c8a8:	699b      	ldr	r3, [r3, #24]
 800c8aa:	f003 0306 	and.w	r3, r3, #6
 800c8ae:	60fb      	str	r3, [r7, #12]
 800c8b0:	e005      	b.n	800c8be <FMC_GetModeStatus+0x2a>
  }
  else
  {
    tmpreg = ((uint32_t)(FMC_Bank5_6->SDSR & FMC_SDSR_MODES2) >> 2);
 800c8b2:	4b06      	ldr	r3, [pc, #24]	; (800c8cc <FMC_GetModeStatus+0x38>)
 800c8b4:	699b      	ldr	r3, [r3, #24]
 800c8b6:	f003 0318 	and.w	r3, r3, #24
 800c8ba:	089b      	lsrs	r3, r3, #2
 800c8bc:	60fb      	str	r3, [r7, #12]
  }
  
  /* Return the mode status */
  return tmpreg;
 800c8be:	68fb      	ldr	r3, [r7, #12]
}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	3714      	adds	r7, #20
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ca:	4770      	bx	lr
 800c8cc:	a0000140 	.word	0xa0000140

0800c8d0 <FMC_SetRefreshCount>:
  * @brief  defines the SDRAM Memory Refresh rate.
  * @param  FMC_Count: specifies the Refresh timer count.       
  * @retval None
  */
void FMC_SetRefreshCount(uint32_t FMC_Count)
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b083      	sub	sp, #12
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
  /* check the parameters */
  assert_param(IS_FMC_REFRESH_COUNT(FMC_Count));
  
  FMC_Bank5_6->SDRTR |= (FMC_Count<<1);
 800c8d8:	4b05      	ldr	r3, [pc, #20]	; (800c8f0 <FMC_SetRefreshCount+0x20>)
 800c8da:	4a05      	ldr	r2, [pc, #20]	; (800c8f0 <FMC_SetRefreshCount+0x20>)
 800c8dc:	6951      	ldr	r1, [r2, #20]
 800c8de:	687a      	ldr	r2, [r7, #4]
 800c8e0:	0052      	lsls	r2, r2, #1
 800c8e2:	430a      	orrs	r2, r1
 800c8e4:	615a      	str	r2, [r3, #20]
   
}
 800c8e6:	370c      	adds	r7, #12
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ee:	4770      	bx	lr
 800c8f0:	a0000140 	.word	0xa0000140

0800c8f4 <FMC_SetAutoRefresh_Number>:
  * @brief  Sets the Number of consecutive SDRAM Memory auto Refresh commands.
  * @param  FMC_Number: specifies the auto Refresh number.       
  * @retval None
  */
void FMC_SetAutoRefresh_Number(uint32_t FMC_Number)
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b083      	sub	sp, #12
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
  /* check the parameters */
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_Number));
  
  FMC_Bank5_6->SDCMR |= (FMC_Number << 5);   
 800c8fc:	4b05      	ldr	r3, [pc, #20]	; (800c914 <FMC_SetAutoRefresh_Number+0x20>)
 800c8fe:	4a05      	ldr	r2, [pc, #20]	; (800c914 <FMC_SetAutoRefresh_Number+0x20>)
 800c900:	6911      	ldr	r1, [r2, #16]
 800c902:	687a      	ldr	r2, [r7, #4]
 800c904:	0152      	lsls	r2, r2, #5
 800c906:	430a      	orrs	r2, r1
 800c908:	611a      	str	r2, [r3, #16]
}
 800c90a:	370c      	adds	r7, #12
 800c90c:	46bd      	mov	sp, r7
 800c90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c912:	4770      	bx	lr
 800c914:	a0000140 	.word	0xa0000140

0800c918 <FMC_SDRAMWriteProtectionConfig>:
  * @param  NewState: new state of the write protection flag.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_SDRAMWriteProtectionConfig(uint32_t SDRAM_Bank, FunctionalState NewState)
{
 800c918:	b480      	push	{r7}
 800c91a:	b083      	sub	sp, #12
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
 800c920:	460b      	mov	r3, r1
 800c922:	70fb      	strb	r3, [r7, #3]
  /* Check the parameter */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_FMC_SDRAM_BANK(SDRAM_Bank));
  
  if (NewState != DISABLE)
 800c924:	78fb      	ldrb	r3, [r7, #3]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d00a      	beq.n	800c940 <FMC_SDRAMWriteProtectionConfig+0x28>
  {
    FMC_Bank5_6->SDCR[SDRAM_Bank] |= FMC_Write_Protection_Enable;    
 800c92a:	4b0d      	ldr	r3, [pc, #52]	; (800c960 <FMC_SDRAMWriteProtectionConfig+0x48>)
 800c92c:	4a0c      	ldr	r2, [pc, #48]	; (800c960 <FMC_SDRAMWriteProtectionConfig+0x48>)
 800c92e:	6879      	ldr	r1, [r7, #4]
 800c930:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c934:	f442 7100 	orr.w	r1, r2, #512	; 0x200
 800c938:	687a      	ldr	r2, [r7, #4]
 800c93a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c93e:	e00a      	b.n	800c956 <FMC_SDRAMWriteProtectionConfig+0x3e>
  }
  else
  {
    FMC_Bank5_6->SDCR[SDRAM_Bank] &= SDCR_WriteProtection_RESET;
 800c940:	4a07      	ldr	r2, [pc, #28]	; (800c960 <FMC_SDRAMWriteProtectionConfig+0x48>)
 800c942:	4b07      	ldr	r3, [pc, #28]	; (800c960 <FMC_SDRAMWriteProtectionConfig+0x48>)
 800c944:	6879      	ldr	r1, [r7, #4]
 800c946:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800c94a:	f647 53ff 	movw	r3, #32255	; 0x7dff
 800c94e:	400b      	ands	r3, r1
 800c950:	6879      	ldr	r1, [r7, #4]
 800c952:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  } 
  
}
 800c956:	370c      	adds	r7, #12
 800c958:	46bd      	mov	sp, r7
 800c95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95e:	4770      	bx	lr
 800c960:	a0000140 	.word	0xa0000140

0800c964 <FMC_ITConfig>:
  * @param  NewState: new state of the specified FMC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_ITConfig(uint32_t FMC_Bank, uint32_t FMC_IT, FunctionalState NewState)
{
 800c964:	b480      	push	{r7}
 800c966:	b085      	sub	sp, #20
 800c968:	af00      	add	r7, sp, #0
 800c96a:	60f8      	str	r0, [r7, #12]
 800c96c:	60b9      	str	r1, [r7, #8]
 800c96e:	4613      	mov	r3, r2
 800c970:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FMC_IT_BANK(FMC_Bank));
  assert_param(IS_FMC_IT(FMC_IT));	
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800c972:	79fb      	ldrb	r3, [r7, #7]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d026      	beq.n	800c9c6 <FMC_ITConfig+0x62>
  {
    /* Enable the selected FMC_Bank2 interrupts */
    if(FMC_Bank == FMC_Bank2_NAND)
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	2b10      	cmp	r3, #16
 800c97c:	d106      	bne.n	800c98c <FMC_ITConfig+0x28>
    {
      FMC_Bank2->SR2 |= FMC_IT;
 800c97e:	4b29      	ldr	r3, [pc, #164]	; (800ca24 <FMC_ITConfig+0xc0>)
 800c980:	4a28      	ldr	r2, [pc, #160]	; (800ca24 <FMC_ITConfig+0xc0>)
 800c982:	6851      	ldr	r1, [r2, #4]
 800c984:	68ba      	ldr	r2, [r7, #8]
 800c986:	430a      	orrs	r2, r1
 800c988:	605a      	str	r2, [r3, #4]
 800c98a:	e046      	b.n	800ca1a <FMC_ITConfig+0xb6>
    }
    /* Enable the selected FMC_Bank3 interrupts */
    else if (FMC_Bank == FMC_Bank3_NAND)
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c992:	d106      	bne.n	800c9a2 <FMC_ITConfig+0x3e>
    {
      FMC_Bank3->SR3 |= FMC_IT;
 800c994:	4b24      	ldr	r3, [pc, #144]	; (800ca28 <FMC_ITConfig+0xc4>)
 800c996:	4a24      	ldr	r2, [pc, #144]	; (800ca28 <FMC_ITConfig+0xc4>)
 800c998:	6851      	ldr	r1, [r2, #4]
 800c99a:	68ba      	ldr	r2, [r7, #8]
 800c99c:	430a      	orrs	r2, r1
 800c99e:	605a      	str	r2, [r3, #4]
 800c9a0:	e03b      	b.n	800ca1a <FMC_ITConfig+0xb6>
    }
    /* Enable the selected FMC_Bank4 interrupts */
    else if (FMC_Bank == FMC_Bank4_PCCARD)
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9a8:	d106      	bne.n	800c9b8 <FMC_ITConfig+0x54>
    {
      FMC_Bank4->SR4 |= FMC_IT;    
 800c9aa:	4b20      	ldr	r3, [pc, #128]	; (800ca2c <FMC_ITConfig+0xc8>)
 800c9ac:	4a1f      	ldr	r2, [pc, #124]	; (800ca2c <FMC_ITConfig+0xc8>)
 800c9ae:	6851      	ldr	r1, [r2, #4]
 800c9b0:	68ba      	ldr	r2, [r7, #8]
 800c9b2:	430a      	orrs	r2, r1
 800c9b4:	605a      	str	r2, [r3, #4]
 800c9b6:	e030      	b.n	800ca1a <FMC_ITConfig+0xb6>
    }
    /* Enable the selected FMC_Bank5_6 interrupt */
    else
    {
      /* Enables the interrupt if the refresh error flag is set */
      FMC_Bank5_6->SDRTR |= FMC_IT; 
 800c9b8:	4b1d      	ldr	r3, [pc, #116]	; (800ca30 <FMC_ITConfig+0xcc>)
 800c9ba:	4a1d      	ldr	r2, [pc, #116]	; (800ca30 <FMC_ITConfig+0xcc>)
 800c9bc:	6951      	ldr	r1, [r2, #20]
 800c9be:	68ba      	ldr	r2, [r7, #8]
 800c9c0:	430a      	orrs	r2, r1
 800c9c2:	615a      	str	r2, [r3, #20]
 800c9c4:	e029      	b.n	800ca1a <FMC_ITConfig+0xb6>
    }
  }
  else
  {
    /* Disable the selected FMC_Bank2 interrupts */
    if(FMC_Bank == FMC_Bank2_NAND)
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	2b10      	cmp	r3, #16
 800c9ca:	d107      	bne.n	800c9dc <FMC_ITConfig+0x78>
    {
      
      FMC_Bank2->SR2 &= (uint32_t)~FMC_IT;
 800c9cc:	4b15      	ldr	r3, [pc, #84]	; (800ca24 <FMC_ITConfig+0xc0>)
 800c9ce:	4a15      	ldr	r2, [pc, #84]	; (800ca24 <FMC_ITConfig+0xc0>)
 800c9d0:	6851      	ldr	r1, [r2, #4]
 800c9d2:	68ba      	ldr	r2, [r7, #8]
 800c9d4:	43d2      	mvns	r2, r2
 800c9d6:	400a      	ands	r2, r1
 800c9d8:	605a      	str	r2, [r3, #4]
 800c9da:	e01e      	b.n	800ca1a <FMC_ITConfig+0xb6>
    }
    /* Disable the selected FMC_Bank3 interrupts */
    else if (FMC_Bank == FMC_Bank3_NAND)
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9e2:	d107      	bne.n	800c9f4 <FMC_ITConfig+0x90>
    {
      FMC_Bank3->SR3 &= (uint32_t)~FMC_IT;
 800c9e4:	4b10      	ldr	r3, [pc, #64]	; (800ca28 <FMC_ITConfig+0xc4>)
 800c9e6:	4a10      	ldr	r2, [pc, #64]	; (800ca28 <FMC_ITConfig+0xc4>)
 800c9e8:	6851      	ldr	r1, [r2, #4]
 800c9ea:	68ba      	ldr	r2, [r7, #8]
 800c9ec:	43d2      	mvns	r2, r2
 800c9ee:	400a      	ands	r2, r1
 800c9f0:	605a      	str	r2, [r3, #4]
 800c9f2:	e012      	b.n	800ca1a <FMC_ITConfig+0xb6>
    }
    /* Disable the selected FMC_Bank4 interrupts */
    else if(FMC_Bank == FMC_Bank4_PCCARD)
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9fa:	d107      	bne.n	800ca0c <FMC_ITConfig+0xa8>
    {
      FMC_Bank4->SR4 &= (uint32_t)~FMC_IT;    
 800c9fc:	4b0b      	ldr	r3, [pc, #44]	; (800ca2c <FMC_ITConfig+0xc8>)
 800c9fe:	4a0b      	ldr	r2, [pc, #44]	; (800ca2c <FMC_ITConfig+0xc8>)
 800ca00:	6851      	ldr	r1, [r2, #4]
 800ca02:	68ba      	ldr	r2, [r7, #8]
 800ca04:	43d2      	mvns	r2, r2
 800ca06:	400a      	ands	r2, r1
 800ca08:	605a      	str	r2, [r3, #4]
 800ca0a:	e006      	b.n	800ca1a <FMC_ITConfig+0xb6>
    }
    /* Disable the selected FMC_Bank5_6 interrupt */
    else
    {
      /* Disables the interrupt if the refresh error flag is not set */
      FMC_Bank5_6->SDRTR &= (uint32_t)~FMC_IT; 
 800ca0c:	4b08      	ldr	r3, [pc, #32]	; (800ca30 <FMC_ITConfig+0xcc>)
 800ca0e:	4a08      	ldr	r2, [pc, #32]	; (800ca30 <FMC_ITConfig+0xcc>)
 800ca10:	6951      	ldr	r1, [r2, #20]
 800ca12:	68ba      	ldr	r2, [r7, #8]
 800ca14:	43d2      	mvns	r2, r2
 800ca16:	400a      	ands	r2, r1
 800ca18:	615a      	str	r2, [r3, #20]
    }
  }
}
 800ca1a:	3714      	adds	r7, #20
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca22:	4770      	bx	lr
 800ca24:	a0000060 	.word	0xa0000060
 800ca28:	a0000080 	.word	0xa0000080
 800ca2c:	a00000a0 	.word	0xa00000a0
 800ca30:	a0000140 	.word	0xa0000140

0800ca34 <FMC_GetFlagStatus>:
  *            @arg FMC_FLAG_Refresh: Refresh error Flag.
  *            @arg FMC_FLAG_Busy: Busy status Flag.     
  * @retval The new state of FMC_FLAG (SET or RESET).
  */
FlagStatus FMC_GetFlagStatus(uint32_t FMC_Bank, uint32_t FMC_FLAG)
{
 800ca34:	b480      	push	{r7}
 800ca36:	b085      	sub	sp, #20
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsr = 0x00000000;
 800ca42:	2300      	movs	r3, #0
 800ca44:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FMC_GETFLAG_BANK(FMC_Bank));
  assert_param(IS_FMC_GET_FLAG(FMC_FLAG));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2b10      	cmp	r3, #16
 800ca4a:	d103      	bne.n	800ca54 <FMC_GetFlagStatus+0x20>
  {
    tmpsr = FMC_Bank2->SR2;
 800ca4c:	4b14      	ldr	r3, [pc, #80]	; (800caa0 <FMC_GetFlagStatus+0x6c>)
 800ca4e:	685b      	ldr	r3, [r3, #4]
 800ca50:	60bb      	str	r3, [r7, #8]
 800ca52:	e012      	b.n	800ca7a <FMC_GetFlagStatus+0x46>
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca5a:	d103      	bne.n	800ca64 <FMC_GetFlagStatus+0x30>
  {
    tmpsr = FMC_Bank3->SR3;
 800ca5c:	4b11      	ldr	r3, [pc, #68]	; (800caa4 <FMC_GetFlagStatus+0x70>)
 800ca5e:	685b      	ldr	r3, [r3, #4]
 800ca60:	60bb      	str	r3, [r7, #8]
 800ca62:	e00a      	b.n	800ca7a <FMC_GetFlagStatus+0x46>
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca6a:	d103      	bne.n	800ca74 <FMC_GetFlagStatus+0x40>
  {
    tmpsr = FMC_Bank4->SR4;
 800ca6c:	4b0e      	ldr	r3, [pc, #56]	; (800caa8 <FMC_GetFlagStatus+0x74>)
 800ca6e:	685b      	ldr	r3, [r3, #4]
 800ca70:	60bb      	str	r3, [r7, #8]
 800ca72:	e002      	b.n	800ca7a <FMC_GetFlagStatus+0x46>
  }
  else 
  {
    tmpsr = FMC_Bank5_6->SDSR;
 800ca74:	4b0d      	ldr	r3, [pc, #52]	; (800caac <FMC_GetFlagStatus+0x78>)
 800ca76:	699b      	ldr	r3, [r3, #24]
 800ca78:	60bb      	str	r3, [r7, #8]
  }
  
  /* Get the flag status */
  if ((tmpsr & FMC_FLAG) != FMC_FLAG )
 800ca7a:	68ba      	ldr	r2, [r7, #8]
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	401a      	ands	r2, r3
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	429a      	cmp	r2, r3
 800ca84:	d002      	beq.n	800ca8c <FMC_GetFlagStatus+0x58>
  {
    bitstatus = RESET;
 800ca86:	2300      	movs	r3, #0
 800ca88:	73fb      	strb	r3, [r7, #15]
 800ca8a:	e001      	b.n	800ca90 <FMC_GetFlagStatus+0x5c>
  }
  else
  {
    bitstatus = SET;
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 800ca90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	3714      	adds	r7, #20
 800ca96:	46bd      	mov	sp, r7
 800ca98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9c:	4770      	bx	lr
 800ca9e:	bf00      	nop
 800caa0:	a0000060 	.word	0xa0000060
 800caa4:	a0000080 	.word	0xa0000080
 800caa8:	a00000a0 	.word	0xa00000a0
 800caac:	a0000140 	.word	0xa0000140

0800cab0 <FMC_ClearFlag>:
  *            @arg FMC_FLAG_FallingEdge: Falling edge detection Flag.
  *            @arg FMC_FLAG_Refresh: Refresh error Flag.  
  * @retval None
  */
void FMC_ClearFlag(uint32_t FMC_Bank, uint32_t FMC_FLAG)
{
 800cab0:	b480      	push	{r7}
 800cab2:	b083      	sub	sp, #12
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
 800cab8:	6039      	str	r1, [r7, #0]
 /* Check the parameters */
  assert_param(IS_FMC_GETFLAG_BANK(FMC_Bank));
  assert_param(IS_FMC_CLEAR_FLAG(FMC_FLAG)) ;
    
  if(FMC_Bank == FMC_Bank2_NAND)
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2b10      	cmp	r3, #16
 800cabe:	d107      	bne.n	800cad0 <FMC_ClearFlag+0x20>
  {
    FMC_Bank2->SR2 &= (~FMC_FLAG); 
 800cac0:	4b15      	ldr	r3, [pc, #84]	; (800cb18 <FMC_ClearFlag+0x68>)
 800cac2:	4a15      	ldr	r2, [pc, #84]	; (800cb18 <FMC_ClearFlag+0x68>)
 800cac4:	6851      	ldr	r1, [r2, #4]
 800cac6:	683a      	ldr	r2, [r7, #0]
 800cac8:	43d2      	mvns	r2, r2
 800caca:	400a      	ands	r2, r1
 800cacc:	605a      	str	r2, [r3, #4]
 800cace:	e01e      	b.n	800cb0e <FMC_ClearFlag+0x5e>
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cad6:	d107      	bne.n	800cae8 <FMC_ClearFlag+0x38>
  {
    FMC_Bank3->SR3 &= (~FMC_FLAG);
 800cad8:	4b10      	ldr	r3, [pc, #64]	; (800cb1c <FMC_ClearFlag+0x6c>)
 800cada:	4a10      	ldr	r2, [pc, #64]	; (800cb1c <FMC_ClearFlag+0x6c>)
 800cadc:	6851      	ldr	r1, [r2, #4]
 800cade:	683a      	ldr	r2, [r7, #0]
 800cae0:	43d2      	mvns	r2, r2
 800cae2:	400a      	ands	r2, r1
 800cae4:	605a      	str	r2, [r3, #4]
 800cae6:	e012      	b.n	800cb0e <FMC_ClearFlag+0x5e>
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800caee:	d107      	bne.n	800cb00 <FMC_ClearFlag+0x50>
  {
    FMC_Bank4->SR4 &= (~FMC_FLAG);
 800caf0:	4b0b      	ldr	r3, [pc, #44]	; (800cb20 <FMC_ClearFlag+0x70>)
 800caf2:	4a0b      	ldr	r2, [pc, #44]	; (800cb20 <FMC_ClearFlag+0x70>)
 800caf4:	6851      	ldr	r1, [r2, #4]
 800caf6:	683a      	ldr	r2, [r7, #0]
 800caf8:	43d2      	mvns	r2, r2
 800cafa:	400a      	ands	r2, r1
 800cafc:	605a      	str	r2, [r3, #4]
 800cafe:	e006      	b.n	800cb0e <FMC_ClearFlag+0x5e>
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    FMC_Bank5_6->SDRTR &= (~FMC_FLAG);
 800cb00:	4b08      	ldr	r3, [pc, #32]	; (800cb24 <FMC_ClearFlag+0x74>)
 800cb02:	4a08      	ldr	r2, [pc, #32]	; (800cb24 <FMC_ClearFlag+0x74>)
 800cb04:	6951      	ldr	r1, [r2, #20]
 800cb06:	683a      	ldr	r2, [r7, #0]
 800cb08:	43d2      	mvns	r2, r2
 800cb0a:	400a      	ands	r2, r1
 800cb0c:	615a      	str	r2, [r3, #20]
  }
  
}
 800cb0e:	370c      	adds	r7, #12
 800cb10:	46bd      	mov	sp, r7
 800cb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb16:	4770      	bx	lr
 800cb18:	a0000060 	.word	0xa0000060
 800cb1c:	a0000080 	.word	0xa0000080
 800cb20:	a00000a0 	.word	0xa00000a0
 800cb24:	a0000140 	.word	0xa0000140

0800cb28 <FMC_GetITStatus>:
  *            @arg FMC_IT_FallingEdge: Falling edge detection interrupt.
  *            @arg FMC_IT_Refresh: Refresh error detection interrupt.    
  * @retval The new state of FMC_IT (SET or RESET).
  */
ITStatus FMC_GetITStatus(uint32_t FMC_Bank, uint32_t FMC_IT)
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b089      	sub	sp, #36	; 0x24
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
 800cb30:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800cb32:	2300      	movs	r3, #0
 800cb34:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpsr = 0x0;
 800cb36:	2300      	movs	r3, #0
 800cb38:	61bb      	str	r3, [r7, #24]
  uint32_t tmpsr2 = 0x0;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	617b      	str	r3, [r7, #20]
  uint32_t itstatus = 0x0;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	613b      	str	r3, [r7, #16]
  uint32_t itenable = 0x0; 
 800cb42:	2300      	movs	r3, #0
 800cb44:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_FMC_IT_BANK(FMC_Bank));
  assert_param(IS_FMC_GET_IT(FMC_IT));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2b10      	cmp	r3, #16
 800cb4a:	d103      	bne.n	800cb54 <FMC_GetITStatus+0x2c>
  {
    tmpsr = FMC_Bank2->SR2;
 800cb4c:	4b1f      	ldr	r3, [pc, #124]	; (800cbcc <FMC_GetITStatus+0xa4>)
 800cb4e:	685b      	ldr	r3, [r3, #4]
 800cb50:	61bb      	str	r3, [r7, #24]
 800cb52:	e015      	b.n	800cb80 <FMC_GetITStatus+0x58>
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb5a:	d103      	bne.n	800cb64 <FMC_GetITStatus+0x3c>
  {
    tmpsr = FMC_Bank3->SR3;
 800cb5c:	4b1c      	ldr	r3, [pc, #112]	; (800cbd0 <FMC_GetITStatus+0xa8>)
 800cb5e:	685b      	ldr	r3, [r3, #4]
 800cb60:	61bb      	str	r3, [r7, #24]
 800cb62:	e00d      	b.n	800cb80 <FMC_GetITStatus+0x58>
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb6a:	d103      	bne.n	800cb74 <FMC_GetITStatus+0x4c>
  {
    tmpsr = FMC_Bank4->SR4;
 800cb6c:	4b19      	ldr	r3, [pc, #100]	; (800cbd4 <FMC_GetITStatus+0xac>)
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	61bb      	str	r3, [r7, #24]
 800cb72:	e005      	b.n	800cb80 <FMC_GetITStatus+0x58>
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    tmpsr = FMC_Bank5_6->SDRTR;
 800cb74:	4b18      	ldr	r3, [pc, #96]	; (800cbd8 <FMC_GetITStatus+0xb0>)
 800cb76:	695b      	ldr	r3, [r3, #20]
 800cb78:	61bb      	str	r3, [r7, #24]
    tmpsr2 = FMC_Bank5_6->SDSR;
 800cb7a:	4b17      	ldr	r3, [pc, #92]	; (800cbd8 <FMC_GetITStatus+0xb0>)
 800cb7c:	699b      	ldr	r3, [r3, #24]
 800cb7e:	617b      	str	r3, [r7, #20]
  } 
  
  /* get the IT enable bit status*/
  itenable = tmpsr & FMC_IT;
 800cb80:	69ba      	ldr	r2, [r7, #24]
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	4013      	ands	r3, r2
 800cb86:	60fb      	str	r3, [r7, #12]
  
  /* get the corresponding IT Flag status*/
  if((FMC_Bank == FMC_Bank1_SDRAM) || (FMC_Bank == FMC_Bank2_SDRAM))
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d002      	beq.n	800cb94 <FMC_GetITStatus+0x6c>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d104      	bne.n	800cb9e <FMC_GetITStatus+0x76>
  {
    itstatus = tmpsr2 & FMC_SDSR_RE;  
 800cb94:	697b      	ldr	r3, [r7, #20]
 800cb96:	f003 0301 	and.w	r3, r3, #1
 800cb9a:	613b      	str	r3, [r7, #16]
 800cb9c:	e004      	b.n	800cba8 <FMC_GetITStatus+0x80>
  }           
  else
  {
    itstatus = tmpsr & (FMC_IT >> 3);  
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	08da      	lsrs	r2, r3, #3
 800cba2:	69bb      	ldr	r3, [r7, #24]
 800cba4:	4013      	ands	r3, r2
 800cba6:	613b      	str	r3, [r7, #16]
  }  
  
  if ((itstatus != (uint32_t)RESET)  && (itenable != (uint32_t)RESET))
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d005      	beq.n	800cbba <FMC_GetITStatus+0x92>
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d002      	beq.n	800cbba <FMC_GetITStatus+0x92>
  {
    bitstatus = SET;
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	77fb      	strb	r3, [r7, #31]
 800cbb8:	e001      	b.n	800cbbe <FMC_GetITStatus+0x96>
  }
  else
  {
    bitstatus = RESET;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	77fb      	strb	r3, [r7, #31]
  }
  return bitstatus; 
 800cbbe:	7ffb      	ldrb	r3, [r7, #31]
}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	3724      	adds	r7, #36	; 0x24
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbca:	4770      	bx	lr
 800cbcc:	a0000060 	.word	0xa0000060
 800cbd0:	a0000080 	.word	0xa0000080
 800cbd4:	a00000a0 	.word	0xa00000a0
 800cbd8:	a0000140 	.word	0xa0000140

0800cbdc <FMC_ClearITPendingBit>:
  *            @arg FMC_IT_FallingEdge: Falling edge detection interrupt.
  *            @arg FMC_IT_Refresh: Refresh error detection interrupt.  
  * @retval None
  */
void FMC_ClearITPendingBit(uint32_t FMC_Bank, uint32_t FMC_IT)
{
 800cbdc:	b480      	push	{r7}
 800cbde:	b083      	sub	sp, #12
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
 800cbe4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_IT_BANK(FMC_Bank));
  assert_param(IS_FMC_IT(FMC_IT));
    
  if(FMC_Bank == FMC_Bank2_NAND)
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2b10      	cmp	r3, #16
 800cbea:	d108      	bne.n	800cbfe <FMC_ClearITPendingBit+0x22>
  {
    FMC_Bank2->SR2 &= ~(FMC_IT >> 3); 
 800cbec:	4b16      	ldr	r3, [pc, #88]	; (800cc48 <FMC_ClearITPendingBit+0x6c>)
 800cbee:	4a16      	ldr	r2, [pc, #88]	; (800cc48 <FMC_ClearITPendingBit+0x6c>)
 800cbf0:	6851      	ldr	r1, [r2, #4]
 800cbf2:	683a      	ldr	r2, [r7, #0]
 800cbf4:	08d2      	lsrs	r2, r2, #3
 800cbf6:	43d2      	mvns	r2, r2
 800cbf8:	400a      	ands	r2, r1
 800cbfa:	605a      	str	r2, [r3, #4]
 800cbfc:	e01f      	b.n	800cc3e <FMC_ClearITPendingBit+0x62>
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc04:	d108      	bne.n	800cc18 <FMC_ClearITPendingBit+0x3c>
  {
    FMC_Bank3->SR3 &= ~(FMC_IT >> 3);
 800cc06:	4b11      	ldr	r3, [pc, #68]	; (800cc4c <FMC_ClearITPendingBit+0x70>)
 800cc08:	4a10      	ldr	r2, [pc, #64]	; (800cc4c <FMC_ClearITPendingBit+0x70>)
 800cc0a:	6851      	ldr	r1, [r2, #4]
 800cc0c:	683a      	ldr	r2, [r7, #0]
 800cc0e:	08d2      	lsrs	r2, r2, #3
 800cc10:	43d2      	mvns	r2, r2
 800cc12:	400a      	ands	r2, r1
 800cc14:	605a      	str	r2, [r3, #4]
 800cc16:	e012      	b.n	800cc3e <FMC_ClearITPendingBit+0x62>
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc1e:	d108      	bne.n	800cc32 <FMC_ClearITPendingBit+0x56>
  {
    FMC_Bank4->SR4 &= ~(FMC_IT >> 3);
 800cc20:	4b0b      	ldr	r3, [pc, #44]	; (800cc50 <FMC_ClearITPendingBit+0x74>)
 800cc22:	4a0b      	ldr	r2, [pc, #44]	; (800cc50 <FMC_ClearITPendingBit+0x74>)
 800cc24:	6851      	ldr	r1, [r2, #4]
 800cc26:	683a      	ldr	r2, [r7, #0]
 800cc28:	08d2      	lsrs	r2, r2, #3
 800cc2a:	43d2      	mvns	r2, r2
 800cc2c:	400a      	ands	r2, r1
 800cc2e:	605a      	str	r2, [r3, #4]
 800cc30:	e005      	b.n	800cc3e <FMC_ClearITPendingBit+0x62>
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    FMC_Bank5_6->SDRTR |= FMC_SDRTR_CRE;
 800cc32:	4b08      	ldr	r3, [pc, #32]	; (800cc54 <FMC_ClearITPendingBit+0x78>)
 800cc34:	4a07      	ldr	r2, [pc, #28]	; (800cc54 <FMC_ClearITPendingBit+0x78>)
 800cc36:	6952      	ldr	r2, [r2, #20]
 800cc38:	f042 0201 	orr.w	r2, r2, #1
 800cc3c:	615a      	str	r2, [r3, #20]
  }
}
 800cc3e:	370c      	adds	r7, #12
 800cc40:	46bd      	mov	sp, r7
 800cc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc46:	4770      	bx	lr
 800cc48:	a0000060 	.word	0xa0000060
 800cc4c:	a0000080 	.word	0xa0000080
 800cc50:	a00000a0 	.word	0xa00000a0
 800cc54:	a0000140 	.word	0xa0000140

0800cc58 <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b082      	sub	sp, #8
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 800cc60:	687a      	ldr	r2, [r7, #4]
 800cc62:	4b4b      	ldr	r3, [pc, #300]	; (800cd90 <GPIO_DeInit+0x138>)
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d108      	bne.n	800cc7a <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800cc68:	2001      	movs	r0, #1
 800cc6a:	2101      	movs	r1, #1
 800cc6c:	f002 ffe4 	bl	800fc38 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 800cc70:	2001      	movs	r0, #1
 800cc72:	2100      	movs	r1, #0
 800cc74:	f002 ffe0 	bl	800fc38 <RCC_AHB1PeriphResetCmd>
 800cc78:	e086      	b.n	800cd88 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOB)
 800cc7a:	687a      	ldr	r2, [r7, #4]
 800cc7c:	4b45      	ldr	r3, [pc, #276]	; (800cd94 <GPIO_DeInit+0x13c>)
 800cc7e:	429a      	cmp	r2, r3
 800cc80:	d108      	bne.n	800cc94 <GPIO_DeInit+0x3c>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800cc82:	2002      	movs	r0, #2
 800cc84:	2101      	movs	r1, #1
 800cc86:	f002 ffd7 	bl	800fc38 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 800cc8a:	2002      	movs	r0, #2
 800cc8c:	2100      	movs	r1, #0
 800cc8e:	f002 ffd3 	bl	800fc38 <RCC_AHB1PeriphResetCmd>
 800cc92:	e079      	b.n	800cd88 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOC)
 800cc94:	687a      	ldr	r2, [r7, #4]
 800cc96:	4b40      	ldr	r3, [pc, #256]	; (800cd98 <GPIO_DeInit+0x140>)
 800cc98:	429a      	cmp	r2, r3
 800cc9a:	d108      	bne.n	800ccae <GPIO_DeInit+0x56>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 800cc9c:	2004      	movs	r0, #4
 800cc9e:	2101      	movs	r1, #1
 800cca0:	f002 ffca 	bl	800fc38 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 800cca4:	2004      	movs	r0, #4
 800cca6:	2100      	movs	r1, #0
 800cca8:	f002 ffc6 	bl	800fc38 <RCC_AHB1PeriphResetCmd>
 800ccac:	e06c      	b.n	800cd88 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOD)
 800ccae:	687a      	ldr	r2, [r7, #4]
 800ccb0:	4b3a      	ldr	r3, [pc, #232]	; (800cd9c <GPIO_DeInit+0x144>)
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	d108      	bne.n	800ccc8 <GPIO_DeInit+0x70>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 800ccb6:	2008      	movs	r0, #8
 800ccb8:	2101      	movs	r1, #1
 800ccba:	f002 ffbd 	bl	800fc38 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 800ccbe:	2008      	movs	r0, #8
 800ccc0:	2100      	movs	r1, #0
 800ccc2:	f002 ffb9 	bl	800fc38 <RCC_AHB1PeriphResetCmd>
 800ccc6:	e05f      	b.n	800cd88 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOE)
 800ccc8:	687a      	ldr	r2, [r7, #4]
 800ccca:	4b35      	ldr	r3, [pc, #212]	; (800cda0 <GPIO_DeInit+0x148>)
 800cccc:	429a      	cmp	r2, r3
 800ccce:	d108      	bne.n	800cce2 <GPIO_DeInit+0x8a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 800ccd0:	2010      	movs	r0, #16
 800ccd2:	2101      	movs	r1, #1
 800ccd4:	f002 ffb0 	bl	800fc38 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 800ccd8:	2010      	movs	r0, #16
 800ccda:	2100      	movs	r1, #0
 800ccdc:	f002 ffac 	bl	800fc38 <RCC_AHB1PeriphResetCmd>
 800cce0:	e052      	b.n	800cd88 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOF)
 800cce2:	687a      	ldr	r2, [r7, #4]
 800cce4:	4b2f      	ldr	r3, [pc, #188]	; (800cda4 <GPIO_DeInit+0x14c>)
 800cce6:	429a      	cmp	r2, r3
 800cce8:	d108      	bne.n	800ccfc <GPIO_DeInit+0xa4>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 800ccea:	2020      	movs	r0, #32
 800ccec:	2101      	movs	r1, #1
 800ccee:	f002 ffa3 	bl	800fc38 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 800ccf2:	2020      	movs	r0, #32
 800ccf4:	2100      	movs	r1, #0
 800ccf6:	f002 ff9f 	bl	800fc38 <RCC_AHB1PeriphResetCmd>
 800ccfa:	e045      	b.n	800cd88 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOG)
 800ccfc:	687a      	ldr	r2, [r7, #4]
 800ccfe:	4b2a      	ldr	r3, [pc, #168]	; (800cda8 <GPIO_DeInit+0x150>)
 800cd00:	429a      	cmp	r2, r3
 800cd02:	d108      	bne.n	800cd16 <GPIO_DeInit+0xbe>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 800cd04:	2040      	movs	r0, #64	; 0x40
 800cd06:	2101      	movs	r1, #1
 800cd08:	f002 ff96 	bl	800fc38 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 800cd0c:	2040      	movs	r0, #64	; 0x40
 800cd0e:	2100      	movs	r1, #0
 800cd10:	f002 ff92 	bl	800fc38 <RCC_AHB1PeriphResetCmd>
 800cd14:	e038      	b.n	800cd88 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOH)
 800cd16:	687a      	ldr	r2, [r7, #4]
 800cd18:	4b24      	ldr	r3, [pc, #144]	; (800cdac <GPIO_DeInit+0x154>)
 800cd1a:	429a      	cmp	r2, r3
 800cd1c:	d108      	bne.n	800cd30 <GPIO_DeInit+0xd8>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 800cd1e:	2080      	movs	r0, #128	; 0x80
 800cd20:	2101      	movs	r1, #1
 800cd22:	f002 ff89 	bl	800fc38 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 800cd26:	2080      	movs	r0, #128	; 0x80
 800cd28:	2100      	movs	r1, #0
 800cd2a:	f002 ff85 	bl	800fc38 <RCC_AHB1PeriphResetCmd>
 800cd2e:	e02b      	b.n	800cd88 <GPIO_DeInit+0x130>
  }

  else if (GPIOx == GPIOI)
 800cd30:	687a      	ldr	r2, [r7, #4]
 800cd32:	4b1f      	ldr	r3, [pc, #124]	; (800cdb0 <GPIO_DeInit+0x158>)
 800cd34:	429a      	cmp	r2, r3
 800cd36:	d10a      	bne.n	800cd4e <GPIO_DeInit+0xf6>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 800cd38:	f44f 7080 	mov.w	r0, #256	; 0x100
 800cd3c:	2101      	movs	r1, #1
 800cd3e:	f002 ff7b 	bl	800fc38 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 800cd42:	f44f 7080 	mov.w	r0, #256	; 0x100
 800cd46:	2100      	movs	r1, #0
 800cd48:	f002 ff76 	bl	800fc38 <RCC_AHB1PeriphResetCmd>
 800cd4c:	e01c      	b.n	800cd88 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOJ)
 800cd4e:	687a      	ldr	r2, [r7, #4]
 800cd50:	4b18      	ldr	r3, [pc, #96]	; (800cdb4 <GPIO_DeInit+0x15c>)
 800cd52:	429a      	cmp	r2, r3
 800cd54:	d10a      	bne.n	800cd6c <GPIO_DeInit+0x114>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
 800cd56:	f44f 7000 	mov.w	r0, #512	; 0x200
 800cd5a:	2101      	movs	r1, #1
 800cd5c:	f002 ff6c 	bl	800fc38 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
 800cd60:	f44f 7000 	mov.w	r0, #512	; 0x200
 800cd64:	2100      	movs	r1, #0
 800cd66:	f002 ff67 	bl	800fc38 <RCC_AHB1PeriphResetCmd>
 800cd6a:	e00d      	b.n	800cd88 <GPIO_DeInit+0x130>
  }
  else
  {
    if (GPIOx == GPIOK)
 800cd6c:	687a      	ldr	r2, [r7, #4]
 800cd6e:	4b12      	ldr	r3, [pc, #72]	; (800cdb8 <GPIO_DeInit+0x160>)
 800cd70:	429a      	cmp	r2, r3
 800cd72:	d109      	bne.n	800cd88 <GPIO_DeInit+0x130>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
 800cd74:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800cd78:	2101      	movs	r1, #1
 800cd7a:	f002 ff5d 	bl	800fc38 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
 800cd7e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800cd82:	2100      	movs	r1, #0
 800cd84:	f002 ff58 	bl	800fc38 <RCC_AHB1PeriphResetCmd>
    }
  }
}
 800cd88:	3708      	adds	r7, #8
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}
 800cd8e:	bf00      	nop
 800cd90:	40020000 	.word	0x40020000
 800cd94:	40020400 	.word	0x40020400
 800cd98:	40020800 	.word	0x40020800
 800cd9c:	40020c00 	.word	0x40020c00
 800cda0:	40021000 	.word	0x40021000
 800cda4:	40021400 	.word	0x40021400
 800cda8:	40021800 	.word	0x40021800
 800cdac:	40021c00 	.word	0x40021c00
 800cdb0:	40022000 	.word	0x40022000
 800cdb4:	40022400 	.word	0x40022400
 800cdb8:	40022800 	.word	0x40022800

0800cdbc <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b087      	sub	sp, #28
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
 800cdc4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	617b      	str	r3, [r7, #20]
 800cdca:	2300      	movs	r3, #0
 800cdcc:	613b      	str	r3, [r7, #16]
 800cdce:	2300      	movs	r3, #0
 800cdd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	617b      	str	r3, [r7, #20]
 800cdd6:	e076      	b.n	800cec6 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	2201      	movs	r2, #1
 800cddc:	fa02 f303 	lsl.w	r3, r2, r3
 800cde0:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	681a      	ldr	r2, [r3, #0]
 800cde6:	693b      	ldr	r3, [r7, #16]
 800cde8:	4013      	ands	r3, r2
 800cdea:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800cdec:	68fa      	ldr	r2, [r7, #12]
 800cdee:	693b      	ldr	r3, [r7, #16]
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	d165      	bne.n	800cec0 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681a      	ldr	r2, [r3, #0]
 800cdf8:	697b      	ldr	r3, [r7, #20]
 800cdfa:	005b      	lsls	r3, r3, #1
 800cdfc:	2103      	movs	r1, #3
 800cdfe:	fa01 f303 	lsl.w	r3, r1, r3
 800ce02:	43db      	mvns	r3, r3
 800ce04:	401a      	ands	r2, r3
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681a      	ldr	r2, [r3, #0]
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	791b      	ldrb	r3, [r3, #4]
 800ce12:	4619      	mov	r1, r3
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	005b      	lsls	r3, r3, #1
 800ce18:	fa01 f303 	lsl.w	r3, r1, r3
 800ce1c:	431a      	orrs	r2, r3
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	791b      	ldrb	r3, [r3, #4]
 800ce26:	2b01      	cmp	r3, #1
 800ce28:	d003      	beq.n	800ce32 <GPIO_Init+0x76>
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	791b      	ldrb	r3, [r3, #4]
 800ce2e:	2b02      	cmp	r3, #2
 800ce30:	d12e      	bne.n	800ce90 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	689a      	ldr	r2, [r3, #8]
 800ce36:	697b      	ldr	r3, [r7, #20]
 800ce38:	005b      	lsls	r3, r3, #1
 800ce3a:	2103      	movs	r1, #3
 800ce3c:	fa01 f303 	lsl.w	r3, r1, r3
 800ce40:	43db      	mvns	r3, r3
 800ce42:	401a      	ands	r2, r3
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	689a      	ldr	r2, [r3, #8]
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	795b      	ldrb	r3, [r3, #5]
 800ce50:	4619      	mov	r1, r3
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	005b      	lsls	r3, r3, #1
 800ce56:	fa01 f303 	lsl.w	r3, r1, r3
 800ce5a:	431a      	orrs	r2, r3
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	685a      	ldr	r2, [r3, #4]
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	b29b      	uxth	r3, r3
 800ce68:	2101      	movs	r1, #1
 800ce6a:	fa01 f303 	lsl.w	r3, r1, r3
 800ce6e:	43db      	mvns	r3, r3
 800ce70:	401a      	ands	r2, r3
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	685a      	ldr	r2, [r3, #4]
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	799b      	ldrb	r3, [r3, #6]
 800ce7e:	4619      	mov	r1, r3
 800ce80:	697b      	ldr	r3, [r7, #20]
 800ce82:	b29b      	uxth	r3, r3
 800ce84:	fa01 f303 	lsl.w	r3, r1, r3
 800ce88:	b29b      	uxth	r3, r3
 800ce8a:	431a      	orrs	r2, r3
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	68da      	ldr	r2, [r3, #12]
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	b29b      	uxth	r3, r3
 800ce98:	005b      	lsls	r3, r3, #1
 800ce9a:	2103      	movs	r1, #3
 800ce9c:	fa01 f303 	lsl.w	r3, r1, r3
 800cea0:	43db      	mvns	r3, r3
 800cea2:	401a      	ands	r2, r3
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	68da      	ldr	r2, [r3, #12]
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	79db      	ldrb	r3, [r3, #7]
 800ceb0:	4619      	mov	r1, r3
 800ceb2:	697b      	ldr	r3, [r7, #20]
 800ceb4:	005b      	lsls	r3, r3, #1
 800ceb6:	fa01 f303 	lsl.w	r3, r1, r3
 800ceba:	431a      	orrs	r2, r3
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800cec0:	697b      	ldr	r3, [r7, #20]
 800cec2:	3301      	adds	r3, #1
 800cec4:	617b      	str	r3, [r7, #20]
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	2b0f      	cmp	r3, #15
 800ceca:	d985      	bls.n	800cdd8 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800cecc:	371c      	adds	r7, #28
 800cece:	46bd      	mov	sp, r7
 800ced0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced4:	4770      	bx	lr
 800ced6:	bf00      	nop

0800ced8 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 800ced8:	b480      	push	{r7}
 800ceda:	b083      	sub	sp, #12
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cee6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2200      	movs	r2, #0
 800ceec:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2200      	movs	r2, #0
 800cef2:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2200      	movs	r2, #0
 800cef8:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	2200      	movs	r2, #0
 800cefe:	71da      	strb	r2, [r3, #7]
}
 800cf00:	370c      	adds	r7, #12
 800cf02:	46bd      	mov	sp, r7
 800cf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf08:	4770      	bx	lr
 800cf0a:	bf00      	nop

0800cf0c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	b085      	sub	sp, #20
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
 800cf14:	460b      	mov	r3, r1
 800cf16:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0x00010000;
 800cf18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800cf1c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 800cf1e:	887a      	ldrh	r2, [r7, #2]
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	4313      	orrs	r3, r2
 800cf24:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800cf26:	68fa      	ldr	r2, [r7, #12]
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 800cf2c:	887a      	ldrh	r2, [r7, #2]
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800cf32:	68fa      	ldr	r2, [r7, #12]
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	69db      	ldr	r3, [r3, #28]
 800cf3c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	69db      	ldr	r3, [r3, #28]
 800cf42:	60fb      	str	r3, [r7, #12]
}
 800cf44:	3714      	adds	r7, #20
 800cf46:	46bd      	mov	sp, r7
 800cf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4c:	4770      	bx	lr
 800cf4e:	bf00      	nop

0800cf50 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800cf50:	b480      	push	{r7}
 800cf52:	b085      	sub	sp, #20
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
 800cf58:	460b      	mov	r3, r1
 800cf5a:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	691a      	ldr	r2, [r3, #16]
 800cf64:	887b      	ldrh	r3, [r7, #2]
 800cf66:	4013      	ands	r3, r2
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d002      	beq.n	800cf72 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	73fb      	strb	r3, [r7, #15]
 800cf70:	e001      	b.n	800cf76 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800cf72:	2300      	movs	r3, #0
 800cf74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800cf76:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3714      	adds	r7, #20
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf82:	4770      	bx	lr

0800cf84 <GPIO_ReadInputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 800cf84:	b480      	push	{r7}
 800cf86:	b083      	sub	sp, #12
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	691b      	ldr	r3, [r3, #16]
 800cf90:	b29b      	uxth	r3, r3
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	370c      	adds	r7, #12
 800cf96:	46bd      	mov	sp, r7
 800cf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9c:	4770      	bx	lr
 800cf9e:	bf00      	nop

0800cfa0 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800cfa0:	b480      	push	{r7}
 800cfa2:	b085      	sub	sp, #20
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
 800cfa8:	460b      	mov	r3, r1
 800cfaa:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800cfac:	2300      	movs	r3, #0
 800cfae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	695a      	ldr	r2, [r3, #20]
 800cfb4:	887b      	ldrh	r3, [r7, #2]
 800cfb6:	4013      	ands	r3, r2
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d002      	beq.n	800cfc2 <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	73fb      	strb	r3, [r7, #15]
 800cfc0:	e001      	b.n	800cfc6 <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800cfc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3714      	adds	r7, #20
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd2:	4770      	bx	lr

0800cfd4 <GPIO_ReadOutputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b083      	sub	sp, #12
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	695b      	ldr	r3, [r3, #20]
 800cfe0:	b29b      	uxth	r3, r3
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	370c      	adds	r7, #12
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfec:	4770      	bx	lr
 800cfee:	bf00      	nop

0800cff0 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800cff0:	b480      	push	{r7}
 800cff2:	b083      	sub	sp, #12
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
 800cff8:	460b      	mov	r3, r1
 800cffa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	887a      	ldrh	r2, [r7, #2]
 800d000:	831a      	strh	r2, [r3, #24]
}
 800d002:	370c      	adds	r7, #12
 800d004:	46bd      	mov	sp, r7
 800d006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00a:	4770      	bx	lr

0800d00c <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d00c:	b480      	push	{r7}
 800d00e:	b083      	sub	sp, #12
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	460b      	mov	r3, r1
 800d016:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	887a      	ldrh	r2, [r7, #2]
 800d01c:	835a      	strh	r2, [r3, #26]
}
 800d01e:	370c      	adds	r7, #12
 800d020:	46bd      	mov	sp, r7
 800d022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d026:	4770      	bx	lr

0800d028 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 800d028:	b480      	push	{r7}
 800d02a:	b083      	sub	sp, #12
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
 800d030:	4613      	mov	r3, r2
 800d032:	460a      	mov	r2, r1
 800d034:	807a      	strh	r2, [r7, #2]
 800d036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 800d038:	787b      	ldrb	r3, [r7, #1]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d003      	beq.n	800d046 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	887a      	ldrh	r2, [r7, #2]
 800d042:	831a      	strh	r2, [r3, #24]
 800d044:	e002      	b.n	800d04c <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	887a      	ldrh	r2, [r7, #2]
 800d04a:	835a      	strh	r2, [r3, #26]
  }
}
 800d04c:	370c      	adds	r7, #12
 800d04e:	46bd      	mov	sp, r7
 800d050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d054:	4770      	bx	lr
 800d056:	bf00      	nop

0800d058 <GPIO_Write>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 800d058:	b480      	push	{r7}
 800d05a:	b083      	sub	sp, #12
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
 800d060:	460b      	mov	r3, r1
 800d062:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 800d064:	887a      	ldrh	r2, [r7, #2]
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	615a      	str	r2, [r3, #20]
}
 800d06a:	370c      	adds	r7, #12
 800d06c:	46bd      	mov	sp, r7
 800d06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d072:	4770      	bx	lr

0800d074 <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d074:	b480      	push	{r7}
 800d076:	b083      	sub	sp, #12
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
 800d07c:	460b      	mov	r3, r1
 800d07e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	695a      	ldr	r2, [r3, #20]
 800d084:	887b      	ldrh	r3, [r7, #2]
 800d086:	405a      	eors	r2, r3
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	615a      	str	r2, [r3, #20]
}
 800d08c:	370c      	adds	r7, #12
 800d08e:	46bd      	mov	sp, r7
 800d090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d094:	4770      	bx	lr
 800d096:	bf00      	nop

0800d098 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800d098:	b480      	push	{r7}
 800d09a:	b085      	sub	sp, #20
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
 800d0a0:	4613      	mov	r3, r2
 800d0a2:	460a      	mov	r2, r1
 800d0a4:	807a      	strh	r2, [r7, #2]
 800d0a6:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800d0b0:	787a      	ldrb	r2, [r7, #1]
 800d0b2:	887b      	ldrh	r3, [r7, #2]
 800d0b4:	f003 0307 	and.w	r3, r3, #7
 800d0b8:	009b      	lsls	r3, r3, #2
 800d0ba:	fa02 f303 	lsl.w	r3, r2, r3
 800d0be:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800d0c0:	887b      	ldrh	r3, [r7, #2]
 800d0c2:	08db      	lsrs	r3, r3, #3
 800d0c4:	b29b      	uxth	r3, r3
 800d0c6:	461a      	mov	r2, r3
 800d0c8:	887b      	ldrh	r3, [r7, #2]
 800d0ca:	08db      	lsrs	r3, r3, #3
 800d0cc:	b29b      	uxth	r3, r3
 800d0ce:	4619      	mov	r1, r3
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	3108      	adds	r1, #8
 800d0d4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800d0d8:	887b      	ldrh	r3, [r7, #2]
 800d0da:	f003 0307 	and.w	r3, r3, #7
 800d0de:	009b      	lsls	r3, r3, #2
 800d0e0:	200f      	movs	r0, #15
 800d0e2:	fa00 f303 	lsl.w	r3, r0, r3
 800d0e6:	43db      	mvns	r3, r3
 800d0e8:	4019      	ands	r1, r3
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	3208      	adds	r2, #8
 800d0ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800d0f2:	887b      	ldrh	r3, [r7, #2]
 800d0f4:	08db      	lsrs	r3, r3, #3
 800d0f6:	b29b      	uxth	r3, r3
 800d0f8:	461a      	mov	r2, r3
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	3208      	adds	r2, #8
 800d0fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	4313      	orrs	r3, r2
 800d106:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800d108:	887b      	ldrh	r3, [r7, #2]
 800d10a:	08db      	lsrs	r3, r3, #3
 800d10c:	b29b      	uxth	r3, r3
 800d10e:	461a      	mov	r2, r3
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	3208      	adds	r2, #8
 800d114:	68b9      	ldr	r1, [r7, #8]
 800d116:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800d11a:	3714      	adds	r7, #20
 800d11c:	46bd      	mov	sp, r7
 800d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d122:	4770      	bx	lr

0800d124 <HASH_DeInit>:
  * @brief  De-initializes the HASH peripheral registers to their default reset values
  * @param  None
  * @retval None
  */
void HASH_DeInit(void)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	af00      	add	r7, sp, #0
  /* Enable HASH reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, ENABLE);
 800d128:	2020      	movs	r0, #32
 800d12a:	2101      	movs	r1, #1
 800d12c:	f002 fda2 	bl	800fc74 <RCC_AHB2PeriphResetCmd>
  /* Release HASH from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, DISABLE);
 800d130:	2020      	movs	r0, #32
 800d132:	2100      	movs	r1, #0
 800d134:	f002 fd9e 	bl	800fc74 <RCC_AHB2PeriphResetCmd>
}
 800d138:	bd80      	pop	{r7, pc}
 800d13a:	bf00      	nop

0800d13c <HASH_Init>:
  * @note   The field HASH_HMACKeyType in HASH_InitTypeDef must be filled only 
  *          if the algorithm mode is HMAC.       
  * @retval None
  */
void HASH_Init(HASH_InitTypeDef* HASH_InitStruct)
{
 800d13c:	b480      	push	{r7}
 800d13e:	b083      	sub	sp, #12
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
  assert_param(IS_HASH_ALGOSELECTION(HASH_InitStruct->HASH_AlgoSelection));
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
 800d144:	4a18      	ldr	r2, [pc, #96]	; (800d1a8 <HASH_Init+0x6c>)
 800d146:	4b18      	ldr	r3, [pc, #96]	; (800d1a8 <HASH_Init+0x6c>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d14e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d152:	6013      	str	r3, [r2, #0]
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 800d154:	4b14      	ldr	r3, [pc, #80]	; (800d1a8 <HASH_Init+0x6c>)
 800d156:	4a14      	ldr	r2, [pc, #80]	; (800d1a8 <HASH_Init+0x6c>)
 800d158:	6811      	ldr	r1, [r2, #0]
 800d15a:	687a      	ldr	r2, [r7, #4]
 800d15c:	6810      	ldr	r0, [r2, #0]
               HASH_InitStruct->HASH_DataType | \
 800d15e:	687a      	ldr	r2, [r7, #4]
 800d160:	6892      	ldr	r2, [r2, #8]
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 800d162:	4310      	orrs	r0, r2
               HASH_InitStruct->HASH_DataType | \
               HASH_InitStruct->HASH_AlgoMode);
 800d164:	687a      	ldr	r2, [r7, #4]
 800d166:	6852      	ldr	r2, [r2, #4]
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
               HASH_InitStruct->HASH_DataType | \
 800d168:	4302      	orrs	r2, r0
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 800d16a:	430a      	orrs	r2, r1
 800d16c:	601a      	str	r2, [r3, #0]
               HASH_InitStruct->HASH_DataType | \
               HASH_InitStruct->HASH_AlgoMode);
  
  /* if algorithm mode is HMAC, set the Key */  
  if(HASH_InitStruct->HASH_AlgoMode == HASH_AlgoMode_HMAC) 
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	685b      	ldr	r3, [r3, #4]
 800d172:	2b40      	cmp	r3, #64	; 0x40
 800d174:	d10c      	bne.n	800d190 <HASH_Init+0x54>
  {
    assert_param(IS_HASH_HMAC_KEYTYPE(HASH_InitStruct->HASH_HMACKeyType));
    HASH->CR &= ~HASH_CR_LKEY;
 800d176:	4b0c      	ldr	r3, [pc, #48]	; (800d1a8 <HASH_Init+0x6c>)
 800d178:	4a0b      	ldr	r2, [pc, #44]	; (800d1a8 <HASH_Init+0x6c>)
 800d17a:	6812      	ldr	r2, [r2, #0]
 800d17c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d180:	601a      	str	r2, [r3, #0]
    HASH->CR |= HASH_InitStruct->HASH_HMACKeyType;
 800d182:	4b09      	ldr	r3, [pc, #36]	; (800d1a8 <HASH_Init+0x6c>)
 800d184:	4a08      	ldr	r2, [pc, #32]	; (800d1a8 <HASH_Init+0x6c>)
 800d186:	6811      	ldr	r1, [r2, #0]
 800d188:	687a      	ldr	r2, [r7, #4]
 800d18a:	68d2      	ldr	r2, [r2, #12]
 800d18c:	430a      	orrs	r2, r1
 800d18e:	601a      	str	r2, [r3, #0]
  }

  /* Reset the HASH processor core, so that the HASH will be ready to compute 
     the message digest of a new message */
  HASH->CR |= HASH_CR_INIT;  
 800d190:	4b05      	ldr	r3, [pc, #20]	; (800d1a8 <HASH_Init+0x6c>)
 800d192:	4a05      	ldr	r2, [pc, #20]	; (800d1a8 <HASH_Init+0x6c>)
 800d194:	6812      	ldr	r2, [r2, #0]
 800d196:	f042 0204 	orr.w	r2, r2, #4
 800d19a:	601a      	str	r2, [r3, #0]
}
 800d19c:	370c      	adds	r7, #12
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a4:	4770      	bx	lr
 800d1a6:	bf00      	nop
 800d1a8:	50060400 	.word	0x50060400

0800d1ac <HASH_StructInit>:
  *  @note  The default values set are : Processor mode is HASH, Algorithm selected is SHA1,
  *          Data type selected is 32b and HMAC Key Type is short key.  
  * @retval None
  */
void HASH_StructInit(HASH_InitTypeDef* HASH_InitStruct)
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	b083      	sub	sp, #12
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
  /* Initialize the HASH_AlgoSelection member */
  HASH_InitStruct->HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	601a      	str	r2, [r3, #0]

  /* Initialize the HASH_AlgoMode member */
  HASH_InitStruct->HASH_AlgoMode = HASH_AlgoMode_HASH;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2200      	movs	r2, #0
 800d1be:	605a      	str	r2, [r3, #4]

  /* Initialize the HASH_DataType member */
  HASH_InitStruct->HASH_DataType = HASH_DataType_32b;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	609a      	str	r2, [r3, #8]

  /* Initialize the HASH_HMACKeyType member */
  HASH_InitStruct->HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	60da      	str	r2, [r3, #12]
}
 800d1cc:	370c      	adds	r7, #12
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d4:	4770      	bx	lr
 800d1d6:	bf00      	nop

0800d1d8 <HASH_Reset>:
  *         interrupt and HASH_FLAG_DCIS flag. 
  * @param  None
  * @retval None
  */
void HASH_Reset(void)
{
 800d1d8:	b480      	push	{r7}
 800d1da:	af00      	add	r7, sp, #0
  /* Reset the HASH processor core */
  HASH->CR |= HASH_CR_INIT;
 800d1dc:	4b04      	ldr	r3, [pc, #16]	; (800d1f0 <HASH_Reset+0x18>)
 800d1de:	4a04      	ldr	r2, [pc, #16]	; (800d1f0 <HASH_Reset+0x18>)
 800d1e0:	6812      	ldr	r2, [r2, #0]
 800d1e2:	f042 0204 	orr.w	r2, r2, #4
 800d1e6:	601a      	str	r2, [r3, #0]
}
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ee:	4770      	bx	lr
 800d1f0:	50060400 	.word	0x50060400

0800d1f4 <HASH_SetLastWordValidBitsNbr>:
  * @note   The Number of valid bits must be set before to start the message 
  *         digest competition (in Hash and HMAC) and key treatment(in HMAC).    
  * @retval None
  */
void HASH_SetLastWordValidBitsNbr(uint16_t ValidNumber)
{
 800d1f4:	b480      	push	{r7}
 800d1f6:	b083      	sub	sp, #12
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_HASH_VALIDBITSNUMBER(ValidNumber));
  
  /* Configure the Number of valid bits in last word of the message */
  HASH->STR &= ~(HASH_STR_NBW);
 800d1fe:	4b08      	ldr	r3, [pc, #32]	; (800d220 <HASH_SetLastWordValidBitsNbr+0x2c>)
 800d200:	4a07      	ldr	r2, [pc, #28]	; (800d220 <HASH_SetLastWordValidBitsNbr+0x2c>)
 800d202:	6892      	ldr	r2, [r2, #8]
 800d204:	f022 021f 	bic.w	r2, r2, #31
 800d208:	609a      	str	r2, [r3, #8]
  HASH->STR |= ValidNumber;
 800d20a:	4b05      	ldr	r3, [pc, #20]	; (800d220 <HASH_SetLastWordValidBitsNbr+0x2c>)
 800d20c:	4a04      	ldr	r2, [pc, #16]	; (800d220 <HASH_SetLastWordValidBitsNbr+0x2c>)
 800d20e:	6891      	ldr	r1, [r2, #8]
 800d210:	88fa      	ldrh	r2, [r7, #6]
 800d212:	430a      	orrs	r2, r1
 800d214:	609a      	str	r2, [r3, #8]
}
 800d216:	370c      	adds	r7, #12
 800d218:	46bd      	mov	sp, r7
 800d21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21e:	4770      	bx	lr
 800d220:	50060400 	.word	0x50060400

0800d224 <HASH_DataIn>:
  * @brief  Writes data in the Data Input FIFO
  * @param  Data: new data of the message to be processed.
  * @retval None
  */
void HASH_DataIn(uint32_t Data)
{
 800d224:	b480      	push	{r7}
 800d226:	b083      	sub	sp, #12
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
  /* Write in the DIN register a new data */
  HASH->DIN = Data;
 800d22c:	4b03      	ldr	r3, [pc, #12]	; (800d23c <HASH_DataIn+0x18>)
 800d22e:	687a      	ldr	r2, [r7, #4]
 800d230:	605a      	str	r2, [r3, #4]
}
 800d232:	370c      	adds	r7, #12
 800d234:	46bd      	mov	sp, r7
 800d236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23a:	4770      	bx	lr
 800d23c:	50060400 	.word	0x50060400

0800d240 <HASH_GetInFIFOWordsNbr>:
  * @brief  Returns the number of words already pushed into the IN FIFO.
  * @param  None
  * @retval The value of words already pushed into the IN FIFO.
  */
uint8_t HASH_GetInFIFOWordsNbr(void)
{
 800d240:	b480      	push	{r7}
 800d242:	af00      	add	r7, sp, #0
  /* Return the value of NBW bits */
  return ((HASH->CR & HASH_CR_NBW) >> 8);
 800d244:	4b05      	ldr	r3, [pc, #20]	; (800d25c <HASH_GetInFIFOWordsNbr+0x1c>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800d24c:	0a1b      	lsrs	r3, r3, #8
 800d24e:	b2db      	uxtb	r3, r3
}
 800d250:	4618      	mov	r0, r3
 800d252:	46bd      	mov	sp, r7
 800d254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d258:	4770      	bx	lr
 800d25a:	bf00      	nop
 800d25c:	50060400 	.word	0x50060400

0800d260 <HASH_GetDigest>:
  * @param  HASH_MessageDigest: pointer to a HASH_MsgDigest structure which will 
  *         hold the message digest result 
  * @retval None
  */
void HASH_GetDigest(HASH_MsgDigest* HASH_MessageDigest)
{
 800d260:	b480      	push	{r7}
 800d262:	b083      	sub	sp, #12
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
  /* Get the data field */
  HASH_MessageDigest->Data[0] = HASH->HR[0];
 800d268:	4b12      	ldr	r3, [pc, #72]	; (800d2b4 <HASH_GetDigest+0x54>)
 800d26a:	68da      	ldr	r2, [r3, #12]
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	601a      	str	r2, [r3, #0]
  HASH_MessageDigest->Data[1] = HASH->HR[1];
 800d270:	4b10      	ldr	r3, [pc, #64]	; (800d2b4 <HASH_GetDigest+0x54>)
 800d272:	691a      	ldr	r2, [r3, #16]
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	605a      	str	r2, [r3, #4]
  HASH_MessageDigest->Data[2] = HASH->HR[2];
 800d278:	4b0e      	ldr	r3, [pc, #56]	; (800d2b4 <HASH_GetDigest+0x54>)
 800d27a:	695a      	ldr	r2, [r3, #20]
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	609a      	str	r2, [r3, #8]
  HASH_MessageDigest->Data[3] = HASH->HR[3];
 800d280:	4b0c      	ldr	r3, [pc, #48]	; (800d2b4 <HASH_GetDigest+0x54>)
 800d282:	699a      	ldr	r2, [r3, #24]
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	60da      	str	r2, [r3, #12]
  HASH_MessageDigest->Data[4] = HASH->HR[4];
 800d288:	4b0a      	ldr	r3, [pc, #40]	; (800d2b4 <HASH_GetDigest+0x54>)
 800d28a:	69da      	ldr	r2, [r3, #28]
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	611a      	str	r2, [r3, #16]
  HASH_MessageDigest->Data[5] = HASH_DIGEST->HR[5];
 800d290:	4b09      	ldr	r3, [pc, #36]	; (800d2b8 <HASH_GetDigest+0x58>)
 800d292:	695a      	ldr	r2, [r3, #20]
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	615a      	str	r2, [r3, #20]
  HASH_MessageDigest->Data[6] = HASH_DIGEST->HR[6];
 800d298:	4b07      	ldr	r3, [pc, #28]	; (800d2b8 <HASH_GetDigest+0x58>)
 800d29a:	699a      	ldr	r2, [r3, #24]
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	619a      	str	r2, [r3, #24]
  HASH_MessageDigest->Data[7] = HASH_DIGEST->HR[7];
 800d2a0:	4b05      	ldr	r3, [pc, #20]	; (800d2b8 <HASH_GetDigest+0x58>)
 800d2a2:	69da      	ldr	r2, [r3, #28]
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	61da      	str	r2, [r3, #28]
}
 800d2a8:	370c      	adds	r7, #12
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b0:	4770      	bx	lr
 800d2b2:	bf00      	nop
 800d2b4:	50060400 	.word	0x50060400
 800d2b8:	50060710 	.word	0x50060710

0800d2bc <HASH_StartDigest>:
  * @brief  Starts the message padding and calculation of the final message     
  * @param  None
  * @retval None
  */
void HASH_StartDigest(void)
{
 800d2bc:	b480      	push	{r7}
 800d2be:	af00      	add	r7, sp, #0
  /* Start the Digest calculation */
  HASH->STR |= HASH_STR_DCAL;
 800d2c0:	4b04      	ldr	r3, [pc, #16]	; (800d2d4 <HASH_StartDigest+0x18>)
 800d2c2:	4a04      	ldr	r2, [pc, #16]	; (800d2d4 <HASH_StartDigest+0x18>)
 800d2c4:	6892      	ldr	r2, [r2, #8]
 800d2c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d2ca:	609a      	str	r2, [r3, #8]
}
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d2:	4770      	bx	lr
 800d2d4:	50060400 	.word	0x50060400

0800d2d8 <HASH_SaveContext>:
  * @param  HASH_ContextSave: pointer to a HASH_Context structure that contains
  *         the repository for current context.
  * @retval None
  */
void HASH_SaveContext(HASH_Context* HASH_ContextSave)
{
 800d2d8:	b480      	push	{r7}
 800d2da:	b085      	sub	sp, #20
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	73fb      	strb	r3, [r7, #15]
  
  /* save context registers */
  HASH_ContextSave->HASH_IMR = HASH->IMR;  
 800d2e4:	4b12      	ldr	r3, [pc, #72]	; (800d330 <HASH_SaveContext+0x58>)
 800d2e6:	6a1a      	ldr	r2, [r3, #32]
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	601a      	str	r2, [r3, #0]
  HASH_ContextSave->HASH_STR = HASH->STR;      
 800d2ec:	4b10      	ldr	r3, [pc, #64]	; (800d330 <HASH_SaveContext+0x58>)
 800d2ee:	689a      	ldr	r2, [r3, #8]
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	605a      	str	r2, [r3, #4]
  HASH_ContextSave->HASH_CR  = HASH->CR;     
 800d2f4:	4b0e      	ldr	r3, [pc, #56]	; (800d330 <HASH_SaveContext+0x58>)
 800d2f6:	681a      	ldr	r2, [r3, #0]
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	609a      	str	r2, [r3, #8]
  for(i=0; i<=53;i++)
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	73fb      	strb	r3, [r7, #15]
 800d300:	e00d      	b.n	800d31e <HASH_SaveContext+0x46>
  {
     HASH_ContextSave->HASH_CSR[i] = HASH->CSR[i];
 800d302:	7bfb      	ldrb	r3, [r7, #15]
 800d304:	4a0a      	ldr	r2, [pc, #40]	; (800d330 <HASH_SaveContext+0x58>)
 800d306:	7bf9      	ldrb	r1, [r7, #15]
 800d308:	313e      	adds	r1, #62	; 0x3e
 800d30a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800d30e:	6879      	ldr	r1, [r7, #4]
 800d310:	3302      	adds	r3, #2
 800d312:	009b      	lsls	r3, r3, #2
 800d314:	440b      	add	r3, r1
 800d316:	605a      	str	r2, [r3, #4]
  
  /* save context registers */
  HASH_ContextSave->HASH_IMR = HASH->IMR;  
  HASH_ContextSave->HASH_STR = HASH->STR;      
  HASH_ContextSave->HASH_CR  = HASH->CR;     
  for(i=0; i<=53;i++)
 800d318:	7bfb      	ldrb	r3, [r7, #15]
 800d31a:	3301      	adds	r3, #1
 800d31c:	73fb      	strb	r3, [r7, #15]
 800d31e:	7bfb      	ldrb	r3, [r7, #15]
 800d320:	2b35      	cmp	r3, #53	; 0x35
 800d322:	d9ee      	bls.n	800d302 <HASH_SaveContext+0x2a>
  {
     HASH_ContextSave->HASH_CSR[i] = HASH->CSR[i];
  }   
}
 800d324:	3714      	adds	r7, #20
 800d326:	46bd      	mov	sp, r7
 800d328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32c:	4770      	bx	lr
 800d32e:	bf00      	nop
 800d330:	50060400 	.word	0x50060400

0800d334 <HASH_RestoreContext>:
  * @param  HASH_ContextRestore: pointer to a HASH_Context structure that contains
  *         the repository for saved context.
  * @retval None
  */
void HASH_RestoreContext(HASH_Context* HASH_ContextRestore)  
{
 800d334:	b480      	push	{r7}
 800d336:	b085      	sub	sp, #20
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 800d33c:	2300      	movs	r3, #0
 800d33e:	73fb      	strb	r3, [r7, #15]
  
  /* restore context registers */
  HASH->IMR = HASH_ContextRestore->HASH_IMR;   
 800d340:	4b15      	ldr	r3, [pc, #84]	; (800d398 <HASH_RestoreContext+0x64>)
 800d342:	687a      	ldr	r2, [r7, #4]
 800d344:	6812      	ldr	r2, [r2, #0]
 800d346:	621a      	str	r2, [r3, #32]
  HASH->STR = HASH_ContextRestore->HASH_STR;     
 800d348:	4b13      	ldr	r3, [pc, #76]	; (800d398 <HASH_RestoreContext+0x64>)
 800d34a:	687a      	ldr	r2, [r7, #4]
 800d34c:	6852      	ldr	r2, [r2, #4]
 800d34e:	609a      	str	r2, [r3, #8]
  HASH->CR = HASH_ContextRestore->HASH_CR;
 800d350:	4b11      	ldr	r3, [pc, #68]	; (800d398 <HASH_RestoreContext+0x64>)
 800d352:	687a      	ldr	r2, [r7, #4]
 800d354:	6892      	ldr	r2, [r2, #8]
 800d356:	601a      	str	r2, [r3, #0]
  
  /* Initialize the hash processor */
  HASH->CR |= HASH_CR_INIT; 
 800d358:	4b0f      	ldr	r3, [pc, #60]	; (800d398 <HASH_RestoreContext+0x64>)
 800d35a:	4a0f      	ldr	r2, [pc, #60]	; (800d398 <HASH_RestoreContext+0x64>)
 800d35c:	6812      	ldr	r2, [r2, #0]
 800d35e:	f042 0204 	orr.w	r2, r2, #4
 800d362:	601a      	str	r2, [r3, #0]
  
   /* continue restoring context registers */     
  for(i=0; i<=53;i++)
 800d364:	2300      	movs	r3, #0
 800d366:	73fb      	strb	r3, [r7, #15]
 800d368:	e00e      	b.n	800d388 <HASH_RestoreContext+0x54>
  {
     HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
 800d36a:	4a0b      	ldr	r2, [pc, #44]	; (800d398 <HASH_RestoreContext+0x64>)
 800d36c:	7bf8      	ldrb	r0, [r7, #15]
 800d36e:	7bfb      	ldrb	r3, [r7, #15]
 800d370:	6879      	ldr	r1, [r7, #4]
 800d372:	3302      	adds	r3, #2
 800d374:	009b      	lsls	r3, r3, #2
 800d376:	440b      	add	r3, r1
 800d378:	6859      	ldr	r1, [r3, #4]
 800d37a:	f100 033e 	add.w	r3, r0, #62	; 0x3e
 800d37e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  
  /* Initialize the hash processor */
  HASH->CR |= HASH_CR_INIT; 
  
   /* continue restoring context registers */     
  for(i=0; i<=53;i++)
 800d382:	7bfb      	ldrb	r3, [r7, #15]
 800d384:	3301      	adds	r3, #1
 800d386:	73fb      	strb	r3, [r7, #15]
 800d388:	7bfb      	ldrb	r3, [r7, #15]
 800d38a:	2b35      	cmp	r3, #53	; 0x35
 800d38c:	d9ed      	bls.n	800d36a <HASH_RestoreContext+0x36>
  {
     HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
  }   
}
 800d38e:	3714      	adds	r7, #20
 800d390:	46bd      	mov	sp, r7
 800d392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d396:	4770      	bx	lr
 800d398:	50060400 	.word	0x50060400

0800d39c <HASH_AutoStartDigest>:
  * @param  NewState: new state of the selected HASH DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HASH_AutoStartDigest(FunctionalState NewState)
{
 800d39c:	b480      	push	{r7}
 800d39e:	b083      	sub	sp, #12
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800d3a6:	79fb      	ldrb	r3, [r7, #7]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d006      	beq.n	800d3ba <HASH_AutoStartDigest+0x1e>
  {
    /* Enable the auto start of the final message digest at the end of DMA transfer */
    HASH->CR &= ~HASH_CR_MDMAT;
 800d3ac:	4b08      	ldr	r3, [pc, #32]	; (800d3d0 <HASH_AutoStartDigest+0x34>)
 800d3ae:	4a08      	ldr	r2, [pc, #32]	; (800d3d0 <HASH_AutoStartDigest+0x34>)
 800d3b0:	6812      	ldr	r2, [r2, #0]
 800d3b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d3b6:	601a      	str	r2, [r3, #0]
 800d3b8:	e005      	b.n	800d3c6 <HASH_AutoStartDigest+0x2a>
  }
  else
  {
    /* Disable the auto start of the final message digest at the end of DMA transfer */
    HASH->CR |= HASH_CR_MDMAT;
 800d3ba:	4b05      	ldr	r3, [pc, #20]	; (800d3d0 <HASH_AutoStartDigest+0x34>)
 800d3bc:	4a04      	ldr	r2, [pc, #16]	; (800d3d0 <HASH_AutoStartDigest+0x34>)
 800d3be:	6812      	ldr	r2, [r2, #0]
 800d3c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d3c4:	601a      	str	r2, [r3, #0]
  }
}
 800d3c6:	370c      	adds	r7, #12
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ce:	4770      	bx	lr
 800d3d0:	50060400 	.word	0x50060400

0800d3d4 <HASH_DMACmd>:
  * @param  NewState: new state of the selected HASH DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HASH_DMACmd(FunctionalState NewState)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b083      	sub	sp, #12
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	4603      	mov	r3, r0
 800d3dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800d3de:	79fb      	ldrb	r3, [r7, #7]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d006      	beq.n	800d3f2 <HASH_DMACmd+0x1e>
  {
    /* Enable the HASH DMA request */
    HASH->CR |= HASH_CR_DMAE;
 800d3e4:	4b08      	ldr	r3, [pc, #32]	; (800d408 <HASH_DMACmd+0x34>)
 800d3e6:	4a08      	ldr	r2, [pc, #32]	; (800d408 <HASH_DMACmd+0x34>)
 800d3e8:	6812      	ldr	r2, [r2, #0]
 800d3ea:	f042 0208 	orr.w	r2, r2, #8
 800d3ee:	601a      	str	r2, [r3, #0]
 800d3f0:	e005      	b.n	800d3fe <HASH_DMACmd+0x2a>
  }
  else
  {
    /* Disable the HASH DMA request */
    HASH->CR &= ~HASH_CR_DMAE;
 800d3f2:	4b05      	ldr	r3, [pc, #20]	; (800d408 <HASH_DMACmd+0x34>)
 800d3f4:	4a04      	ldr	r2, [pc, #16]	; (800d408 <HASH_DMACmd+0x34>)
 800d3f6:	6812      	ldr	r2, [r2, #0]
 800d3f8:	f022 0208 	bic.w	r2, r2, #8
 800d3fc:	601a      	str	r2, [r3, #0]
  }
}
 800d3fe:	370c      	adds	r7, #12
 800d400:	46bd      	mov	sp, r7
 800d402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d406:	4770      	bx	lr
 800d408:	50060400 	.word	0x50060400

0800d40c <HASH_ITConfig>:
  * @param  NewState: new state of the specified HASH interrupt.
  *           This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HASH_ITConfig(uint32_t HASH_IT, FunctionalState NewState)
{
 800d40c:	b480      	push	{r7}
 800d40e:	b083      	sub	sp, #12
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	460b      	mov	r3, r1
 800d416:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_HASH_IT(HASH_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800d418:	78fb      	ldrb	r3, [r7, #3]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d006      	beq.n	800d42c <HASH_ITConfig+0x20>
  {
    /* Enable the selected HASH interrupt */
    HASH->IMR |= HASH_IT;
 800d41e:	4b09      	ldr	r3, [pc, #36]	; (800d444 <HASH_ITConfig+0x38>)
 800d420:	4a08      	ldr	r2, [pc, #32]	; (800d444 <HASH_ITConfig+0x38>)
 800d422:	6a11      	ldr	r1, [r2, #32]
 800d424:	687a      	ldr	r2, [r7, #4]
 800d426:	430a      	orrs	r2, r1
 800d428:	621a      	str	r2, [r3, #32]
 800d42a:	e006      	b.n	800d43a <HASH_ITConfig+0x2e>
  }
  else
  {
    /* Disable the selected HASH interrupt */
    HASH->IMR &= (uint32_t)(~HASH_IT);
 800d42c:	4b05      	ldr	r3, [pc, #20]	; (800d444 <HASH_ITConfig+0x38>)
 800d42e:	4a05      	ldr	r2, [pc, #20]	; (800d444 <HASH_ITConfig+0x38>)
 800d430:	6a11      	ldr	r1, [r2, #32]
 800d432:	687a      	ldr	r2, [r7, #4]
 800d434:	43d2      	mvns	r2, r2
 800d436:	400a      	ands	r2, r1
 800d438:	621a      	str	r2, [r3, #32]
  }
}
 800d43a:	370c      	adds	r7, #12
 800d43c:	46bd      	mov	sp, r7
 800d43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d442:	4770      	bx	lr
 800d444:	50060400 	.word	0x50060400

0800d448 <HASH_GetFlagStatus>:
  *            @arg HASH_FLAG_DMAS: DMAS Status flag
  *            @arg HASH_FLAG_DINNE: Data Input register (DIN) not empty status flag
  * @retval The new state of HASH_FLAG (SET or RESET)
  */
FlagStatus HASH_GetFlagStatus(uint32_t HASH_FLAG)
{
 800d448:	b480      	push	{r7}
 800d44a:	b085      	sub	sp, #20
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800d450:	2300      	movs	r3, #0
 800d452:	73fb      	strb	r3, [r7, #15]
  uint32_t tempreg = 0;
 800d454:	2300      	movs	r3, #0
 800d456:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HASH_GET_FLAG(HASH_FLAG));

  /* check if the FLAG is in CR register */
  if ((HASH_FLAG & HASH_FLAG_DINNE) != (uint32_t)RESET ) 
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d003      	beq.n	800d46a <HASH_GetFlagStatus+0x22>
  {
    tempreg = HASH->CR;
 800d462:	4b0c      	ldr	r3, [pc, #48]	; (800d494 <HASH_GetFlagStatus+0x4c>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	60bb      	str	r3, [r7, #8]
 800d468:	e002      	b.n	800d470 <HASH_GetFlagStatus+0x28>
  }
  else /* The FLAG is in SR register */
  {
    tempreg = HASH->SR;
 800d46a:	4b0a      	ldr	r3, [pc, #40]	; (800d494 <HASH_GetFlagStatus+0x4c>)
 800d46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d46e:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified HASH flag */
  if ((tempreg & HASH_FLAG) != (uint32_t)RESET)
 800d470:	68ba      	ldr	r2, [r7, #8]
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	4013      	ands	r3, r2
 800d476:	2b00      	cmp	r3, #0
 800d478:	d002      	beq.n	800d480 <HASH_GetFlagStatus+0x38>
  {
    /* HASH is set */
    bitstatus = SET;
 800d47a:	2301      	movs	r3, #1
 800d47c:	73fb      	strb	r3, [r7, #15]
 800d47e:	e001      	b.n	800d484 <HASH_GetFlagStatus+0x3c>
  }
  else
  {
    /* HASH_FLAG is reset */
    bitstatus = RESET;
 800d480:	2300      	movs	r3, #0
 800d482:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the HASH_FLAG status */
  return  bitstatus;
 800d484:	7bfb      	ldrb	r3, [r7, #15]
}
 800d486:	4618      	mov	r0, r3
 800d488:	3714      	adds	r7, #20
 800d48a:	46bd      	mov	sp, r7
 800d48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d490:	4770      	bx	lr
 800d492:	bf00      	nop
 800d494:	50060400 	.word	0x50060400

0800d498 <HASH_ClearFlag>:
  *            @arg HASH_FLAG_DINIS: Data Input Flag
  *            @arg HASH_FLAG_DCIS: Digest Calculation Completion Flag                       
  * @retval None
  */
void HASH_ClearFlag(uint32_t HASH_FLAG)
{
 800d498:	b480      	push	{r7}
 800d49a:	b083      	sub	sp, #12
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HASH_CLEAR_FLAG(HASH_FLAG));
  
  /* Clear the selected HASH flags */
  HASH->SR = ~(uint32_t)HASH_FLAG;
 800d4a0:	4b04      	ldr	r3, [pc, #16]	; (800d4b4 <HASH_ClearFlag+0x1c>)
 800d4a2:	687a      	ldr	r2, [r7, #4]
 800d4a4:	43d2      	mvns	r2, r2
 800d4a6:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d4a8:	370c      	adds	r7, #12
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b0:	4770      	bx	lr
 800d4b2:	bf00      	nop
 800d4b4:	50060400 	.word	0x50060400

0800d4b8 <HASH_GetITStatus>:
  *            @arg HASH_IT_DINI: Data Input interrupt
  *            @arg HASH_IT_DCI: Digest Calculation Completion Interrupt
  * @retval The new state of HASH_IT (SET or RESET).
  */
ITStatus HASH_GetITStatus(uint32_t HASH_IT)
{
 800d4b8:	b480      	push	{r7}
 800d4ba:	b085      	sub	sp, #20
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_HASH_GET_IT(HASH_IT));  


  /* Check the status of the specified HASH interrupt */
  tmpreg =  HASH->SR;
 800d4c8:	4b0b      	ldr	r3, [pc, #44]	; (800d4f8 <HASH_GetITStatus+0x40>)
 800d4ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4cc:	60bb      	str	r3, [r7, #8]

  if (((HASH->IMR & tmpreg) & HASH_IT) != RESET)
 800d4ce:	4b0a      	ldr	r3, [pc, #40]	; (800d4f8 <HASH_GetITStatus+0x40>)
 800d4d0:	6a1a      	ldr	r2, [r3, #32]
 800d4d2:	68bb      	ldr	r3, [r7, #8]
 800d4d4:	401a      	ands	r2, r3
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	4013      	ands	r3, r2
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d002      	beq.n	800d4e4 <HASH_GetITStatus+0x2c>
  {
    /* HASH_IT is set */
    bitstatus = SET;
 800d4de:	2301      	movs	r3, #1
 800d4e0:	73fb      	strb	r3, [r7, #15]
 800d4e2:	e001      	b.n	800d4e8 <HASH_GetITStatus+0x30>
  }
  else
  {
    /* HASH_IT is reset */
    bitstatus = RESET;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the HASH_IT status */
  return bitstatus;
 800d4e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	3714      	adds	r7, #20
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f4:	4770      	bx	lr
 800d4f6:	bf00      	nop
 800d4f8:	50060400 	.word	0x50060400

0800d4fc <HASH_ClearITPendingBit>:
  *            @arg HASH_IT_DINI: Data Input interrupt
  *            @arg HASH_IT_DCI: Digest Calculation Completion Interrupt
  * @retval None
  */
void HASH_ClearITPendingBit(uint32_t HASH_IT)
{
 800d4fc:	b480      	push	{r7}
 800d4fe:	b083      	sub	sp, #12
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HASH_IT(HASH_IT));

  /* Clear the selected HASH interrupt pending bit */
  HASH->SR = (uint32_t)(~HASH_IT);
 800d504:	4b04      	ldr	r3, [pc, #16]	; (800d518 <HASH_ClearITPendingBit+0x1c>)
 800d506:	687a      	ldr	r2, [r7, #4]
 800d508:	43d2      	mvns	r2, r2
 800d50a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d50c:	370c      	adds	r7, #12
 800d50e:	46bd      	mov	sp, r7
 800d510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d514:	4770      	bx	lr
 800d516:	bf00      	nop
 800d518:	50060400 	.word	0x50060400

0800d51c <HASH_MD5>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b09c      	sub	sp, #112	; 0x70
 800d520:	af00      	add	r7, sp, #0
 800d522:	60f8      	str	r0, [r7, #12]
 800d524:	60b9      	str	r1, [r7, #8]
 800d526:	607a      	str	r2, [r7, #4]
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 800d528:	2300      	movs	r3, #0
 800d52a:	837b      	strh	r3, [r7, #26]
  uint32_t i = 0;
 800d52c:	2300      	movs	r3, #0
 800d52e:	66fb      	str	r3, [r7, #108]	; 0x6c
  __IO uint32_t counter = 0;
 800d530:	2300      	movs	r3, #0
 800d532:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 800d534:	2300      	movs	r3, #0
 800d536:	663b      	str	r3, [r7, #96]	; 0x60
  ErrorStatus status = SUCCESS;
 800d538:	2301      	movs	r3, #1
 800d53a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  uint32_t inputaddr  = (uint32_t)Input;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t outputaddr = (uint32_t)Output;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	65fb      	str	r3, [r7, #92]	; 0x5c


  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	b29b      	uxth	r3, r3
 800d54a:	f003 0303 	and.w	r3, r3, #3
 800d54e:	b29b      	uxth	r3, r3
 800d550:	00db      	lsls	r3, r3, #3
 800d552:	b29b      	uxth	r3, r3
 800d554:	837b      	strh	r3, [r7, #26]

  /* HASH peripheral initialization */
  HASH_DeInit();
 800d556:	f7ff fde5 	bl	800d124 <HASH_DeInit>

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 800d55a:	2380      	movs	r3, #128	; 0x80
 800d55c:	63fb      	str	r3, [r7, #60]	; 0x3c
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
 800d55e:	2300      	movs	r3, #0
 800d560:	643b      	str	r3, [r7, #64]	; 0x40
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 800d562:	2320      	movs	r3, #32
 800d564:	647b      	str	r3, [r7, #68]	; 0x44
  HASH_Init(&MD5_HASH_InitStructure);
 800d566:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d56a:	4618      	mov	r0, r3
 800d56c:	f7ff fde6 	bl	800d13c <HASH_Init>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 800d570:	8b7b      	ldrh	r3, [r7, #26]
 800d572:	b29b      	uxth	r3, r3
 800d574:	4618      	mov	r0, r3
 800d576:	f7ff fe3d 	bl	800d1f4 <HASH_SetLastWordValidBitsNbr>

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 800d57a:	2300      	movs	r3, #0
 800d57c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d57e:	e00a      	b.n	800d596 <HASH_MD5+0x7a>
  {
    HASH_DataIn(*(uint32_t*)inputaddr);
 800d580:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	4618      	mov	r0, r3
 800d586:	f7ff fe4d 	bl	800d224 <HASH_DataIn>
    inputaddr+=4;
 800d58a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d58c:	3304      	adds	r3, #4
 800d58e:	667b      	str	r3, [r7, #100]	; 0x64

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 800d590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d592:	3304      	adds	r3, #4
 800d594:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d596:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	429a      	cmp	r2, r3
 800d59c:	d3f0      	bcc.n	800d580 <HASH_MD5+0x64>
    HASH_DataIn(*(uint32_t*)inputaddr);
    inputaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 800d59e:	f7ff fe8d 	bl	800d2bc <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800d5a2:	2008      	movs	r0, #8
 800d5a4:	f7ff ff50 	bl	800d448 <HASH_GetFlagStatus>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	663b      	str	r3, [r7, #96]	; 0x60
    counter++;
 800d5ac:	697b      	ldr	r3, [r7, #20]
 800d5ae:	3301      	adds	r3, #1
 800d5b0:	617b      	str	r3, [r7, #20]
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5b8:	d002      	beq.n	800d5c0 <HASH_MD5+0xa4>
 800d5ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d1f0      	bne.n	800d5a2 <HASH_MD5+0x86>

  if (busystatus != RESET)
 800d5c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d003      	beq.n	800d5ce <HASH_MD5+0xb2>
  {
     status = ERROR;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800d5cc:	e025      	b.n	800d61a <HASH_MD5+0xfe>
  }
  else
  {
    /* Read the message digest */
    HASH_GetDigest(&MD5_MessageDigest);
 800d5ce:	f107 031c 	add.w	r3, r7, #28
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f7ff fe44 	bl	800d260 <HASH_GetDigest>
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 800d5d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5da:	69fa      	ldr	r2, [r7, #28]
 800d5dc:	65ba      	str	r2, [r7, #88]	; 0x58
 800d5de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d5e0:	ba12      	rev	r2, r2
 800d5e2:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800d5e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5e6:	3304      	adds	r3, #4
 800d5e8:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 800d5ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5ec:	6a3a      	ldr	r2, [r7, #32]
 800d5ee:	657a      	str	r2, [r7, #84]	; 0x54
 800d5f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d5f2:	ba12      	rev	r2, r2
 800d5f4:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800d5f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5f8:	3304      	adds	r3, #4
 800d5fa:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 800d5fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d600:	653a      	str	r2, [r7, #80]	; 0x50
 800d602:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d604:	ba12      	rev	r2, r2
 800d606:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800d608:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d60a:	3304      	adds	r3, #4
 800d60c:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 800d60e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d610:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d612:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d614:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d616:	ba12      	rev	r2, r2
 800d618:	601a      	str	r2, [r3, #0]
  }
  return status; 
 800d61a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
}
 800d61e:	4618      	mov	r0, r3
 800d620:	3770      	adds	r7, #112	; 0x70
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}
 800d626:	bf00      	nop

0800d628 <HMAC_MD5>:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
                     uint32_t Ilen, uint8_t Output[16])
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b09c      	sub	sp, #112	; 0x70
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	60f8      	str	r0, [r7, #12]
 800d630:	60b9      	str	r1, [r7, #8]
 800d632:	607a      	str	r2, [r7, #4]
 800d634:	603b      	str	r3, [r7, #0]
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 800d636:	2300      	movs	r3, #0
 800d638:	82fb      	strh	r3, [r7, #22]
  __IO uint16_t nbvalidbitskey = 0;
 800d63a:	2300      	movs	r3, #0
 800d63c:	82bb      	strh	r3, [r7, #20]
  uint32_t i = 0;
 800d63e:	2300      	movs	r3, #0
 800d640:	66fb      	str	r3, [r7, #108]	; 0x6c
  __IO uint32_t counter = 0;
 800d642:	2300      	movs	r3, #0
 800d644:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 800d646:	2300      	movs	r3, #0
 800d648:	65fb      	str	r3, [r7, #92]	; 0x5c
  ErrorStatus status = SUCCESS;
 800d64a:	2301      	movs	r3, #1
 800d64c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  uint32_t keyaddr    = (uint32_t)Key;
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t inputaddr  = (uint32_t)Input;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t outputaddr = (uint32_t)Output;
 800d658:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d65a:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	b29b      	uxth	r3, r3
 800d660:	f003 0303 	and.w	r3, r3, #3
 800d664:	b29b      	uxth	r3, r3
 800d666:	00db      	lsls	r3, r3, #3
 800d668:	b29b      	uxth	r3, r3
 800d66a:	82fb      	strh	r3, [r7, #22]

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	b29b      	uxth	r3, r3
 800d670:	f003 0303 	and.w	r3, r3, #3
 800d674:	b29b      	uxth	r3, r3
 800d676:	00db      	lsls	r3, r3, #3
 800d678:	b29b      	uxth	r3, r3
 800d67a:	82bb      	strh	r3, [r7, #20]
   
  /* HASH peripheral initialization */
  HASH_DeInit();
 800d67c:	f7ff fd52 	bl	800d124 <HASH_DeInit>

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 800d680:	2380      	movs	r3, #128	; 0x80
 800d682:	63bb      	str	r3, [r7, #56]	; 0x38
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 800d684:	2340      	movs	r3, #64	; 0x40
 800d686:	63fb      	str	r3, [r7, #60]	; 0x3c
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 800d688:	2320      	movs	r3, #32
 800d68a:	643b      	str	r3, [r7, #64]	; 0x40
  if(Keylen > 64)
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	2b40      	cmp	r3, #64	; 0x40
 800d690:	d903      	bls.n	800d69a <HMAC_MD5+0x72>
  {
    /* HMAC long Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 800d692:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d696:	647b      	str	r3, [r7, #68]	; 0x44
 800d698:	e001      	b.n	800d69e <HMAC_MD5+0x76>
  }
  else
  {
    /* HMAC short Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 800d69a:	2300      	movs	r3, #0
 800d69c:	647b      	str	r3, [r7, #68]	; 0x44
  }
  HASH_Init(&MD5_HASH_InitStructure);
 800d69e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f7ff fd4a 	bl	800d13c <HASH_Init>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 800d6a8:	8abb      	ldrh	r3, [r7, #20]
 800d6aa:	b29b      	uxth	r3, r3
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f7ff fda1 	bl	800d1f4 <HASH_SetLastWordValidBitsNbr>

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d6b6:	e00a      	b.n	800d6ce <HMAC_MD5+0xa6>
  {
    HASH_DataIn(*(uint32_t*)keyaddr);
 800d6b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f7ff fdb1 	bl	800d224 <HASH_DataIn>
    keyaddr+=4;
 800d6c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d6c4:	3304      	adds	r3, #4
 800d6c6:	667b      	str	r3, [r7, #100]	; 0x64

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 800d6c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6ca:	3304      	adds	r3, #4
 800d6cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d6ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	429a      	cmp	r2, r3
 800d6d4:	d3f0      	bcc.n	800d6b8 <HMAC_MD5+0x90>
    HASH_DataIn(*(uint32_t*)keyaddr);
    keyaddr+=4;
  }
  
  /* Start the HASH processor */
  HASH_StartDigest();
 800d6d6:	f7ff fdf1 	bl	800d2bc <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800d6da:	2008      	movs	r0, #8
 800d6dc:	f7ff feb4 	bl	800d448 <HASH_GetFlagStatus>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	65fb      	str	r3, [r7, #92]	; 0x5c
    counter++;
 800d6e4:	693b      	ldr	r3, [r7, #16]
 800d6e6:	3301      	adds	r3, #1
 800d6e8:	613b      	str	r3, [r7, #16]
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 800d6ea:	693b      	ldr	r3, [r7, #16]
 800d6ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d6f0:	d002      	beq.n	800d6f8 <HMAC_MD5+0xd0>
 800d6f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d1f0      	bne.n	800d6da <HMAC_MD5+0xb2>

  if (busystatus != RESET)
 800d6f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d003      	beq.n	800d706 <HMAC_MD5+0xde>
  {
     status = ERROR;
 800d6fe:	2300      	movs	r3, #0
 800d700:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800d704:	e089      	b.n	800d81a <HMAC_MD5+0x1f2>
  }
  else
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 800d706:	8afb      	ldrh	r3, [r7, #22]
 800d708:	b29b      	uxth	r3, r3
 800d70a:	4618      	mov	r0, r3
 800d70c:	f7ff fd72 	bl	800d1f4 <HASH_SetLastWordValidBitsNbr>

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 800d710:	2300      	movs	r3, #0
 800d712:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d714:	e00a      	b.n	800d72c <HMAC_MD5+0x104>
    {
      HASH_DataIn(*(uint32_t*)inputaddr);
 800d716:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	4618      	mov	r0, r3
 800d71c:	f7ff fd82 	bl	800d224 <HASH_DataIn>
      inputaddr+=4;
 800d720:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d722:	3304      	adds	r3, #4
 800d724:	663b      	str	r3, [r7, #96]	; 0x60
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 800d726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d728:	3304      	adds	r3, #4
 800d72a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d72c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	429a      	cmp	r2, r3
 800d732:	d3f0      	bcc.n	800d716 <HMAC_MD5+0xee>
      HASH_DataIn(*(uint32_t*)inputaddr);
      inputaddr+=4;
    }

    /* Start the HASH processor */
    HASH_StartDigest();
 800d734:	f7ff fdc2 	bl	800d2bc <HASH_StartDigest>

    /* wait until the Busy flag is RESET */
    counter =0;
 800d738:	2300      	movs	r3, #0
 800d73a:	613b      	str	r3, [r7, #16]
    do
    {
       busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800d73c:	2008      	movs	r0, #8
 800d73e:	f7ff fe83 	bl	800d448 <HASH_GetFlagStatus>
 800d742:	4603      	mov	r3, r0
 800d744:	65fb      	str	r3, [r7, #92]	; 0x5c
       counter++;
 800d746:	693b      	ldr	r3, [r7, #16]
 800d748:	3301      	adds	r3, #1
 800d74a:	613b      	str	r3, [r7, #16]
    }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 800d74c:	693b      	ldr	r3, [r7, #16]
 800d74e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d752:	d002      	beq.n	800d75a <HMAC_MD5+0x132>
 800d754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d756:	2b00      	cmp	r3, #0
 800d758:	d1f0      	bne.n	800d73c <HMAC_MD5+0x114>

    if (busystatus != RESET)
 800d75a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d003      	beq.n	800d768 <HMAC_MD5+0x140>
    {
      status = ERROR;
 800d760:	2300      	movs	r3, #0
 800d762:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800d766:	e058      	b.n	800d81a <HMAC_MD5+0x1f2>
    }
    else
    {  
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 800d768:	8abb      	ldrh	r3, [r7, #20]
 800d76a:	b29b      	uxth	r3, r3
 800d76c:	4618      	mov	r0, r3
 800d76e:	f7ff fd41 	bl	800d1f4 <HASH_SetLastWordValidBitsNbr>

      /* Write the Key */
      keyaddr = (uint32_t)Key;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	667b      	str	r3, [r7, #100]	; 0x64
      for(i=0; i<Keylen; i+=4)
 800d776:	2300      	movs	r3, #0
 800d778:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d77a:	e00a      	b.n	800d792 <HMAC_MD5+0x16a>
      {
        HASH_DataIn(*(uint32_t*)keyaddr);
 800d77c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	4618      	mov	r0, r3
 800d782:	f7ff fd4f 	bl	800d224 <HASH_DataIn>
        keyaddr+=4;
 800d786:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d788:	3304      	adds	r3, #4
 800d78a:	667b      	str	r3, [r7, #100]	; 0x64
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 800d78c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d78e:	3304      	adds	r3, #4
 800d790:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d792:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	429a      	cmp	r2, r3
 800d798:	d3f0      	bcc.n	800d77c <HMAC_MD5+0x154>
        HASH_DataIn(*(uint32_t*)keyaddr);
        keyaddr+=4;
      }
  
       /* Start the HASH processor */
       HASH_StartDigest();
 800d79a:	f7ff fd8f 	bl	800d2bc <HASH_StartDigest>

       /* wait until the Busy flag is RESET */
       counter =0;
 800d79e:	2300      	movs	r3, #0
 800d7a0:	613b      	str	r3, [r7, #16]
       do
       {
          busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800d7a2:	2008      	movs	r0, #8
 800d7a4:	f7ff fe50 	bl	800d448 <HASH_GetFlagStatus>
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	65fb      	str	r3, [r7, #92]	; 0x5c
          counter++;
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	3301      	adds	r3, #1
 800d7b0:	613b      	str	r3, [r7, #16]
      }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d7b8:	d002      	beq.n	800d7c0 <HMAC_MD5+0x198>
 800d7ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d1f0      	bne.n	800d7a2 <HMAC_MD5+0x17a>

      if (busystatus != RESET)
 800d7c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d003      	beq.n	800d7ce <HMAC_MD5+0x1a6>
      {
         status = ERROR;
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800d7cc:	e025      	b.n	800d81a <HMAC_MD5+0x1f2>
      }
      else
      {
         /* Read the message digest */
         HASH_GetDigest(&MD5_MessageDigest);
 800d7ce:	f107 0318 	add.w	r3, r7, #24
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f7ff fd44 	bl	800d260 <HASH_GetDigest>
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 800d7d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d7da:	69ba      	ldr	r2, [r7, #24]
 800d7dc:	657a      	str	r2, [r7, #84]	; 0x54
 800d7de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d7e0:	ba12      	rev	r2, r2
 800d7e2:	601a      	str	r2, [r3, #0]
         outputaddr+=4;
 800d7e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d7e6:	3304      	adds	r3, #4
 800d7e8:	65bb      	str	r3, [r7, #88]	; 0x58
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 800d7ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d7ec:	69fa      	ldr	r2, [r7, #28]
 800d7ee:	653a      	str	r2, [r7, #80]	; 0x50
 800d7f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d7f2:	ba12      	rev	r2, r2
 800d7f4:	601a      	str	r2, [r3, #0]
         outputaddr+=4;
 800d7f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d7f8:	3304      	adds	r3, #4
 800d7fa:	65bb      	str	r3, [r7, #88]	; 0x58
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 800d7fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d7fe:	6a3a      	ldr	r2, [r7, #32]
 800d800:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d802:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d804:	ba12      	rev	r2, r2
 800d806:	601a      	str	r2, [r3, #0]
         outputaddr+=4;
 800d808:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d80a:	3304      	adds	r3, #4
 800d80c:	65bb      	str	r3, [r7, #88]	; 0x58
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 800d80e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d812:	64ba      	str	r2, [r7, #72]	; 0x48
 800d814:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d816:	ba12      	rev	r2, r2
 800d818:	601a      	str	r2, [r3, #0]
      }
    }
  }
  return status;  
 800d81a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
}
 800d81e:	4618      	mov	r0, r3
 800d820:	3770      	adds	r7, #112	; 0x70
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}
 800d826:	bf00      	nop

0800d828 <HASH_SHA1>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_SHA1(uint8_t *Input, uint32_t Ilen, uint8_t Output[20])
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b09c      	sub	sp, #112	; 0x70
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	60f8      	str	r0, [r7, #12]
 800d830:	60b9      	str	r1, [r7, #8]
 800d832:	607a      	str	r2, [r7, #4]
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 800d834:	2300      	movs	r3, #0
 800d836:	82fb      	strh	r3, [r7, #22]
  uint32_t i = 0;
 800d838:	2300      	movs	r3, #0
 800d83a:	66fb      	str	r3, [r7, #108]	; 0x6c
  __IO uint32_t counter = 0;
 800d83c:	2300      	movs	r3, #0
 800d83e:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 800d840:	2300      	movs	r3, #0
 800d842:	663b      	str	r3, [r7, #96]	; 0x60
  ErrorStatus status = SUCCESS;
 800d844:	2301      	movs	r3, #1
 800d846:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  uint32_t inputaddr  = (uint32_t)Input;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t outputaddr = (uint32_t)Output;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	b29b      	uxth	r3, r3
 800d856:	f003 0303 	and.w	r3, r3, #3
 800d85a:	b29b      	uxth	r3, r3
 800d85c:	00db      	lsls	r3, r3, #3
 800d85e:	b29b      	uxth	r3, r3
 800d860:	82fb      	strh	r3, [r7, #22]

  /* HASH peripheral initialization */
  HASH_DeInit();
 800d862:	f7ff fc5f 	bl	800d124 <HASH_DeInit>

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 800d866:	2300      	movs	r3, #0
 800d868:	63bb      	str	r3, [r7, #56]	; 0x38
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
 800d86a:	2300      	movs	r3, #0
 800d86c:	63fb      	str	r3, [r7, #60]	; 0x3c
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 800d86e:	2320      	movs	r3, #32
 800d870:	643b      	str	r3, [r7, #64]	; 0x40
  HASH_Init(&SHA1_HASH_InitStructure);
 800d872:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d876:	4618      	mov	r0, r3
 800d878:	f7ff fc60 	bl	800d13c <HASH_Init>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 800d87c:	8afb      	ldrh	r3, [r7, #22]
 800d87e:	b29b      	uxth	r3, r3
 800d880:	4618      	mov	r0, r3
 800d882:	f7ff fcb7 	bl	800d1f4 <HASH_SetLastWordValidBitsNbr>

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 800d886:	2300      	movs	r3, #0
 800d888:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d88a:	e00a      	b.n	800d8a2 <HASH_SHA1+0x7a>
  {
    HASH_DataIn(*(uint32_t*)inputaddr);
 800d88c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	4618      	mov	r0, r3
 800d892:	f7ff fcc7 	bl	800d224 <HASH_DataIn>
    inputaddr+=4;
 800d896:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d898:	3304      	adds	r3, #4
 800d89a:	667b      	str	r3, [r7, #100]	; 0x64

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 800d89c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d89e:	3304      	adds	r3, #4
 800d8a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d8a2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	429a      	cmp	r2, r3
 800d8a8:	d3f0      	bcc.n	800d88c <HASH_SHA1+0x64>
    HASH_DataIn(*(uint32_t*)inputaddr);
    inputaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 800d8aa:	f7ff fd07 	bl	800d2bc <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800d8ae:	2008      	movs	r0, #8
 800d8b0:	f7ff fdca 	bl	800d448 <HASH_GetFlagStatus>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	663b      	str	r3, [r7, #96]	; 0x60
    counter++;
 800d8b8:	693b      	ldr	r3, [r7, #16]
 800d8ba:	3301      	adds	r3, #1
 800d8bc:	613b      	str	r3, [r7, #16]
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 800d8be:	693b      	ldr	r3, [r7, #16]
 800d8c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d8c4:	d002      	beq.n	800d8cc <HASH_SHA1+0xa4>
 800d8c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d1f0      	bne.n	800d8ae <HASH_SHA1+0x86>

  if (busystatus != RESET)
 800d8cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d003      	beq.n	800d8da <HASH_SHA1+0xb2>
  {
     status = ERROR;
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800d8d8:	e02e      	b.n	800d938 <HASH_SHA1+0x110>
  }
  else
  {
    /* Read the message digest */
    HASH_GetDigest(&SHA1_MessageDigest);
 800d8da:	f107 0318 	add.w	r3, r7, #24
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f7ff fcbe 	bl	800d260 <HASH_GetDigest>
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 800d8e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d8e6:	69ba      	ldr	r2, [r7, #24]
 800d8e8:	65ba      	str	r2, [r7, #88]	; 0x58
 800d8ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d8ec:	ba12      	rev	r2, r2
 800d8ee:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800d8f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d8f2:	3304      	adds	r3, #4
 800d8f4:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 800d8f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d8f8:	69fa      	ldr	r2, [r7, #28]
 800d8fa:	657a      	str	r2, [r7, #84]	; 0x54
 800d8fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d8fe:	ba12      	rev	r2, r2
 800d900:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800d902:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d904:	3304      	adds	r3, #4
 800d906:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 800d908:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d90a:	6a3a      	ldr	r2, [r7, #32]
 800d90c:	653a      	str	r2, [r7, #80]	; 0x50
 800d90e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d910:	ba12      	rev	r2, r2
 800d912:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800d914:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d916:	3304      	adds	r3, #4
 800d918:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 800d91a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d91c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d91e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d920:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d922:	ba12      	rev	r2, r2
 800d924:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800d926:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d928:	3304      	adds	r3, #4
 800d92a:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 800d92c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d92e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d930:	64ba      	str	r2, [r7, #72]	; 0x48
 800d932:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d934:	ba12      	rev	r2, r2
 800d936:	601a      	str	r2, [r3, #0]
  }
  return status;
 800d938:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
}
 800d93c:	4618      	mov	r0, r3
 800d93e:	3770      	adds	r7, #112	; 0x70
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}

0800d944 <HMAC_SHA1>:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
                      uint32_t Ilen, uint8_t Output[20])
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b09e      	sub	sp, #120	; 0x78
 800d948:	af00      	add	r7, sp, #0
 800d94a:	60f8      	str	r0, [r7, #12]
 800d94c:	60b9      	str	r1, [r7, #8]
 800d94e:	607a      	str	r2, [r7, #4]
 800d950:	603b      	str	r3, [r7, #0]
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 800d952:	2300      	movs	r3, #0
 800d954:	837b      	strh	r3, [r7, #26]
  __IO uint16_t nbvalidbitskey = 0;
 800d956:	2300      	movs	r3, #0
 800d958:	833b      	strh	r3, [r7, #24]
  uint32_t i = 0;
 800d95a:	2300      	movs	r3, #0
 800d95c:	677b      	str	r3, [r7, #116]	; 0x74
  __IO uint32_t counter = 0;
 800d95e:	2300      	movs	r3, #0
 800d960:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 800d962:	2300      	movs	r3, #0
 800d964:	667b      	str	r3, [r7, #100]	; 0x64
  ErrorStatus status = SUCCESS;
 800d966:	2301      	movs	r3, #1
 800d968:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  uint32_t keyaddr    = (uint32_t)Key;
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t inputaddr  = (uint32_t)Input;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	66bb      	str	r3, [r7, #104]	; 0x68
  uint32_t outputaddr = (uint32_t)Output;
 800d974:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d978:	663b      	str	r3, [r7, #96]	; 0x60

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	b29b      	uxth	r3, r3
 800d97e:	f003 0303 	and.w	r3, r3, #3
 800d982:	b29b      	uxth	r3, r3
 800d984:	00db      	lsls	r3, r3, #3
 800d986:	b29b      	uxth	r3, r3
 800d988:	837b      	strh	r3, [r7, #26]

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	b29b      	uxth	r3, r3
 800d98e:	f003 0303 	and.w	r3, r3, #3
 800d992:	b29b      	uxth	r3, r3
 800d994:	00db      	lsls	r3, r3, #3
 800d996:	b29b      	uxth	r3, r3
 800d998:	833b      	strh	r3, [r7, #24]

  /* HASH peripheral initialization */
  HASH_DeInit();
 800d99a:	f7ff fbc3 	bl	800d124 <HASH_DeInit>

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 800d9a2:	2340      	movs	r3, #64	; 0x40
 800d9a4:	643b      	str	r3, [r7, #64]	; 0x40
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 800d9a6:	2320      	movs	r3, #32
 800d9a8:	647b      	str	r3, [r7, #68]	; 0x44
  if(Keylen > 64)
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	2b40      	cmp	r3, #64	; 0x40
 800d9ae:	d903      	bls.n	800d9b8 <HMAC_SHA1+0x74>
  {
    /* HMAC long Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 800d9b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d9b4:	64bb      	str	r3, [r7, #72]	; 0x48
 800d9b6:	e001      	b.n	800d9bc <HMAC_SHA1+0x78>
  }
  else
  {
    /* HMAC short Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	64bb      	str	r3, [r7, #72]	; 0x48
  }
  HASH_Init(&SHA1_HASH_InitStructure);
 800d9bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f7ff fbbb 	bl	800d13c <HASH_Init>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 800d9c6:	8b3b      	ldrh	r3, [r7, #24]
 800d9c8:	b29b      	uxth	r3, r3
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f7ff fc12 	bl	800d1f4 <HASH_SetLastWordValidBitsNbr>

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	677b      	str	r3, [r7, #116]	; 0x74
 800d9d4:	e00a      	b.n	800d9ec <HMAC_SHA1+0xa8>
  {
    HASH_DataIn(*(uint32_t*)keyaddr);
 800d9d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	4618      	mov	r0, r3
 800d9dc:	f7ff fc22 	bl	800d224 <HASH_DataIn>
    keyaddr+=4;
 800d9e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9e2:	3304      	adds	r3, #4
 800d9e4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 800d9e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d9e8:	3304      	adds	r3, #4
 800d9ea:	677b      	str	r3, [r7, #116]	; 0x74
 800d9ec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d9ee:	68bb      	ldr	r3, [r7, #8]
 800d9f0:	429a      	cmp	r2, r3
 800d9f2:	d3f0      	bcc.n	800d9d6 <HMAC_SHA1+0x92>
    HASH_DataIn(*(uint32_t*)keyaddr);
    keyaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 800d9f4:	f7ff fc62 	bl	800d2bc <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800d9f8:	2008      	movs	r0, #8
 800d9fa:	f7ff fd25 	bl	800d448 <HASH_GetFlagStatus>
 800d9fe:	4603      	mov	r3, r0
 800da00:	667b      	str	r3, [r7, #100]	; 0x64
    counter++;
 800da02:	697b      	ldr	r3, [r7, #20]
 800da04:	3301      	adds	r3, #1
 800da06:	617b      	str	r3, [r7, #20]
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da0e:	d002      	beq.n	800da16 <HMAC_SHA1+0xd2>
 800da10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800da12:	2b00      	cmp	r3, #0
 800da14:	d1f0      	bne.n	800d9f8 <HMAC_SHA1+0xb4>

  if (busystatus != RESET)
 800da16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d003      	beq.n	800da24 <HMAC_SHA1+0xe0>
  {
     status = ERROR;
 800da1c:	2300      	movs	r3, #0
 800da1e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800da22:	e092      	b.n	800db4a <HMAC_SHA1+0x206>
  }
  else
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 800da24:	8b7b      	ldrh	r3, [r7, #26]
 800da26:	b29b      	uxth	r3, r3
 800da28:	4618      	mov	r0, r3
 800da2a:	f7ff fbe3 	bl	800d1f4 <HASH_SetLastWordValidBitsNbr>

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 800da2e:	2300      	movs	r3, #0
 800da30:	677b      	str	r3, [r7, #116]	; 0x74
 800da32:	e00a      	b.n	800da4a <HMAC_SHA1+0x106>
    {
      HASH_DataIn(*(uint32_t*)inputaddr);
 800da34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	4618      	mov	r0, r3
 800da3a:	f7ff fbf3 	bl	800d224 <HASH_DataIn>
      inputaddr+=4;
 800da3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800da40:	3304      	adds	r3, #4
 800da42:	66bb      	str	r3, [r7, #104]	; 0x68
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 800da44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800da46:	3304      	adds	r3, #4
 800da48:	677b      	str	r3, [r7, #116]	; 0x74
 800da4a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	429a      	cmp	r2, r3
 800da50:	d3f0      	bcc.n	800da34 <HMAC_SHA1+0xf0>
      HASH_DataIn(*(uint32_t*)inputaddr);
      inputaddr+=4;
    }

    /* Start the HASH processor */
    HASH_StartDigest();
 800da52:	f7ff fc33 	bl	800d2bc <HASH_StartDigest>


    /* wait until the Busy flag is RESET */
    counter =0;
 800da56:	2300      	movs	r3, #0
 800da58:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800da5a:	2008      	movs	r0, #8
 800da5c:	f7ff fcf4 	bl	800d448 <HASH_GetFlagStatus>
 800da60:	4603      	mov	r3, r0
 800da62:	667b      	str	r3, [r7, #100]	; 0x64
      counter++;
 800da64:	697b      	ldr	r3, [r7, #20]
 800da66:	3301      	adds	r3, #1
 800da68:	617b      	str	r3, [r7, #20]
    }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da70:	d002      	beq.n	800da78 <HMAC_SHA1+0x134>
 800da72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800da74:	2b00      	cmp	r3, #0
 800da76:	d1f0      	bne.n	800da5a <HMAC_SHA1+0x116>

    if (busystatus != RESET)
 800da78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d003      	beq.n	800da86 <HMAC_SHA1+0x142>
    {
      status = ERROR;
 800da7e:	2300      	movs	r3, #0
 800da80:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800da84:	e061      	b.n	800db4a <HMAC_SHA1+0x206>
    }
    else
    {  
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 800da86:	8b3b      	ldrh	r3, [r7, #24]
 800da88:	b29b      	uxth	r3, r3
 800da8a:	4618      	mov	r0, r3
 800da8c:	f7ff fbb2 	bl	800d1f4 <HASH_SetLastWordValidBitsNbr>

      /* Write the Key */
      keyaddr = (uint32_t)Key;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	66fb      	str	r3, [r7, #108]	; 0x6c
      for(i=0; i<Keylen; i+=4)
 800da94:	2300      	movs	r3, #0
 800da96:	677b      	str	r3, [r7, #116]	; 0x74
 800da98:	e00a      	b.n	800dab0 <HMAC_SHA1+0x16c>
      {
        HASH_DataIn(*(uint32_t*)keyaddr);
 800da9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	4618      	mov	r0, r3
 800daa0:	f7ff fbc0 	bl	800d224 <HASH_DataIn>
        keyaddr+=4;
 800daa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800daa6:	3304      	adds	r3, #4
 800daa8:	66fb      	str	r3, [r7, #108]	; 0x6c
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 800daaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800daac:	3304      	adds	r3, #4
 800daae:	677b      	str	r3, [r7, #116]	; 0x74
 800dab0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	429a      	cmp	r2, r3
 800dab6:	d3f0      	bcc.n	800da9a <HMAC_SHA1+0x156>
        HASH_DataIn(*(uint32_t*)keyaddr);
        keyaddr+=4;
      }

      /* Start the HASH processor */
      HASH_StartDigest();
 800dab8:	f7ff fc00 	bl	800d2bc <HASH_StartDigest>

      /* wait until the Busy flag is RESET */
      counter =0;
 800dabc:	2300      	movs	r3, #0
 800dabe:	617b      	str	r3, [r7, #20]
      do
      {
        busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800dac0:	2008      	movs	r0, #8
 800dac2:	f7ff fcc1 	bl	800d448 <HASH_GetFlagStatus>
 800dac6:	4603      	mov	r3, r0
 800dac8:	667b      	str	r3, [r7, #100]	; 0x64
        counter++;
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	3301      	adds	r3, #1
 800dace:	617b      	str	r3, [r7, #20]
      }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 800dad0:	697b      	ldr	r3, [r7, #20]
 800dad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dad6:	d002      	beq.n	800dade <HMAC_SHA1+0x19a>
 800dad8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d1f0      	bne.n	800dac0 <HMAC_SHA1+0x17c>

      if (busystatus != RESET)
 800dade:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d003      	beq.n	800daec <HMAC_SHA1+0x1a8>
      {
        status = ERROR;
 800dae4:	2300      	movs	r3, #0
 800dae6:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800daea:	e02e      	b.n	800db4a <HMAC_SHA1+0x206>
      }
      else
      {
        /* Read the message digest */
        HASH_GetDigest(&SHA1_MessageDigest);
 800daec:	f107 031c 	add.w	r3, r7, #28
 800daf0:	4618      	mov	r0, r3
 800daf2:	f7ff fbb5 	bl	800d260 <HASH_GetDigest>
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 800daf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800daf8:	69fa      	ldr	r2, [r7, #28]
 800dafa:	65fa      	str	r2, [r7, #92]	; 0x5c
 800dafc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dafe:	ba12      	rev	r2, r2
 800db00:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 800db02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db04:	3304      	adds	r3, #4
 800db06:	663b      	str	r3, [r7, #96]	; 0x60
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 800db08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db0a:	6a3a      	ldr	r2, [r7, #32]
 800db0c:	65ba      	str	r2, [r7, #88]	; 0x58
 800db0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800db10:	ba12      	rev	r2, r2
 800db12:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 800db14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db16:	3304      	adds	r3, #4
 800db18:	663b      	str	r3, [r7, #96]	; 0x60
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 800db1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db1e:	657a      	str	r2, [r7, #84]	; 0x54
 800db20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800db22:	ba12      	rev	r2, r2
 800db24:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 800db26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db28:	3304      	adds	r3, #4
 800db2a:	663b      	str	r3, [r7, #96]	; 0x60
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 800db2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db30:	653a      	str	r2, [r7, #80]	; 0x50
 800db32:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800db34:	ba12      	rev	r2, r2
 800db36:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 800db38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db3a:	3304      	adds	r3, #4
 800db3c:	663b      	str	r3, [r7, #96]	; 0x60
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 800db3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db42:	64fa      	str	r2, [r7, #76]	; 0x4c
 800db44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800db46:	ba12      	rev	r2, r2
 800db48:	601a      	str	r2, [r3, #0]
      }
    }  
  }
  return status;  
 800db4a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
}
 800db4e:	4618      	mov	r0, r3
 800db50:	3778      	adds	r7, #120	; 0x78
 800db52:	46bd      	mov	sp, r7
 800db54:	bd80      	pop	{r7, pc}
 800db56:	bf00      	nop

0800db58 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b082      	sub	sp, #8
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 800db60:	687a      	ldr	r2, [r7, #4]
 800db62:	4b17      	ldr	r3, [pc, #92]	; (800dbc0 <I2C_DeInit+0x68>)
 800db64:	429a      	cmp	r2, r3
 800db66:	d10a      	bne.n	800db7e <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 800db68:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800db6c:	2101      	movs	r1, #1
 800db6e:	f002 f8bd 	bl	800fcec <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 800db72:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800db76:	2100      	movs	r1, #0
 800db78:	f002 f8b8 	bl	800fcec <RCC_APB1PeriphResetCmd>
 800db7c:	e01c      	b.n	800dbb8 <I2C_DeInit+0x60>
  }
  else if (I2Cx == I2C2)
 800db7e:	687a      	ldr	r2, [r7, #4]
 800db80:	4b10      	ldr	r3, [pc, #64]	; (800dbc4 <I2C_DeInit+0x6c>)
 800db82:	429a      	cmp	r2, r3
 800db84:	d10a      	bne.n	800db9c <I2C_DeInit+0x44>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 800db86:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800db8a:	2101      	movs	r1, #1
 800db8c:	f002 f8ae 	bl	800fcec <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 800db90:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800db94:	2100      	movs	r1, #0
 800db96:	f002 f8a9 	bl	800fcec <RCC_APB1PeriphResetCmd>
 800db9a:	e00d      	b.n	800dbb8 <I2C_DeInit+0x60>
  }
  else 
  {
    if (I2Cx == I2C3)
 800db9c:	687a      	ldr	r2, [r7, #4]
 800db9e:	4b0a      	ldr	r3, [pc, #40]	; (800dbc8 <I2C_DeInit+0x70>)
 800dba0:	429a      	cmp	r2, r3
 800dba2:	d109      	bne.n	800dbb8 <I2C_DeInit+0x60>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 800dba4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800dba8:	2101      	movs	r1, #1
 800dbaa:	f002 f89f 	bl	800fcec <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 800dbae:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800dbb2:	2100      	movs	r1, #0
 800dbb4:	f002 f89a 	bl	800fcec <RCC_APB1PeriphResetCmd>
    }
  }
}
 800dbb8:	3708      	adds	r7, #8
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}
 800dbbe:	bf00      	nop
 800dbc0:	40005400 	.word	0x40005400
 800dbc4:	40005800 	.word	0x40005800
 800dbc8:	40005c00 	.word	0x40005c00

0800dbcc <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b08a      	sub	sp, #40	; 0x28
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
 800dbd4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800dbda:	2300      	movs	r3, #0
 800dbdc:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 800dbde:	2304      	movs	r3, #4
 800dbe0:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 800dbe2:	4b57      	ldr	r3, [pc, #348]	; (800dd40 <I2C_Init+0x174>)
 800dbe4:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	889b      	ldrh	r3, [r3, #4]
 800dbea:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 800dbec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dbee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800dbf2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 800dbf4:	f107 030c 	add.w	r3, r7, #12
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	f001 fddb 	bl	800f7b4 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 800dbfe:	697b      	ldr	r3, [r7, #20]
 800dc00:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800dc02:	69fa      	ldr	r2, [r7, #28]
 800dc04:	4b4f      	ldr	r3, [pc, #316]	; (800dd44 <I2C_Init+0x178>)
 800dc06:	fba3 1302 	umull	r1, r3, r3, r2
 800dc0a:	0c9b      	lsrs	r3, r3, #18
 800dc0c:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 800dc0e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dc10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dc12:	4313      	orrs	r3, r2
 800dc14:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dc1a:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	881b      	ldrh	r3, [r3, #0]
 800dc20:	b29b      	uxth	r3, r3
 800dc22:	f023 0301 	bic.w	r3, r3, #1
 800dc26:	b29a      	uxth	r2, r3
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 800dc30:	683b      	ldr	r3, [r7, #0]
 800dc32:	681a      	ldr	r2, [r3, #0]
 800dc34:	4b44      	ldr	r3, [pc, #272]	; (800dd48 <I2C_Init+0x17c>)
 800dc36:	429a      	cmp	r2, r3
 800dc38:	d815      	bhi.n	800dc66 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 800dc3a:	683b      	ldr	r3, [r7, #0]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	005b      	lsls	r3, r3, #1
 800dc40:	69fa      	ldr	r2, [r7, #28]
 800dc42:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc46:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 800dc48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc4a:	2b03      	cmp	r3, #3
 800dc4c:	d801      	bhi.n	800dc52 <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 800dc4e:	2304      	movs	r3, #4
 800dc50:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 800dc52:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dc54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc56:	4313      	orrs	r3, r2
 800dc58:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 800dc5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dc5c:	3301      	adds	r3, #1
 800dc5e:	b29a      	uxth	r2, r3
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	841a      	strh	r2, [r3, #32]
 800dc64:	e040      	b.n	800dce8 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	88da      	ldrh	r2, [r3, #6]
 800dc6a:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 800dc6e:	429a      	cmp	r2, r3
 800dc70:	d109      	bne.n	800dc86 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	681a      	ldr	r2, [r3, #0]
 800dc76:	4613      	mov	r3, r2
 800dc78:	005b      	lsls	r3, r3, #1
 800dc7a:	4413      	add	r3, r2
 800dc7c:	69fa      	ldr	r2, [r7, #28]
 800dc7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc82:	84bb      	strh	r3, [r7, #36]	; 0x24
 800dc84:	e00e      	b.n	800dca4 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	681a      	ldr	r2, [r3, #0]
 800dc8a:	4613      	mov	r3, r2
 800dc8c:	009b      	lsls	r3, r3, #2
 800dc8e:	4413      	add	r3, r2
 800dc90:	009a      	lsls	r2, r3, #2
 800dc92:	4413      	add	r3, r2
 800dc94:	69fa      	ldr	r2, [r7, #28]
 800dc96:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc9a:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 800dc9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800dca2:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 800dca4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dca6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d103      	bne.n	800dcb6 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 800dcae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dcb0:	f043 0301 	orr.w	r3, r3, #1
 800dcb4:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 800dcb6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dcb8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dcba:	4313      	orrs	r3, r2
 800dcbc:	b29b      	uxth	r3, r3
 800dcbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dcc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dcc6:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 800dcc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dcca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800dcce:	fb02 f303 	mul.w	r3, r2, r3
 800dcd2:	4a1e      	ldr	r2, [pc, #120]	; (800dd4c <I2C_Init+0x180>)
 800dcd4:	fb82 1203 	smull	r1, r2, r2, r3
 800dcd8:	1192      	asrs	r2, r2, #6
 800dcda:	17db      	asrs	r3, r3, #31
 800dcdc:	1ad3      	subs	r3, r2, r3
 800dcde:	b29b      	uxth	r3, r3
 800dce0:	3301      	adds	r3, #1
 800dce2:	b29a      	uxth	r2, r3
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dcec:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	881b      	ldrh	r3, [r3, #0]
 800dcf2:	b29b      	uxth	r3, r3
 800dcf4:	f043 0301 	orr.w	r3, r3, #1
 800dcf8:	b29a      	uxth	r2, r3
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	881b      	ldrh	r3, [r3, #0]
 800dd02:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 800dd04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dd06:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 800dd0a:	f023 0302 	bic.w	r3, r3, #2
 800dd0e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	889a      	ldrh	r2, [r3, #4]
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	895b      	ldrh	r3, [r3, #10]
 800dd18:	4313      	orrs	r3, r2
 800dd1a:	b29a      	uxth	r2, r3
 800dd1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dd1e:	4313      	orrs	r3, r2
 800dd20:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dd26:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	899a      	ldrh	r2, [r3, #12]
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	891b      	ldrh	r3, [r3, #8]
 800dd30:	4313      	orrs	r3, r2
 800dd32:	b29a      	uxth	r2, r3
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	811a      	strh	r2, [r3, #8]
}
 800dd38:	3728      	adds	r7, #40	; 0x28
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	bd80      	pop	{r7, pc}
 800dd3e:	bf00      	nop
 800dd40:	007a1200 	.word	0x007a1200
 800dd44:	431bde83 	.word	0x431bde83
 800dd48:	000186a0 	.word	0x000186a0
 800dd4c:	10624dd3 	.word	0x10624dd3

0800dd50 <I2C_StructInit>:
  * @brief  Fills each I2C_InitStruct member with its default value.
  * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
 800dd50:	b480      	push	{r7}
 800dd52:	b083      	sub	sp, #12
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd5e:	601a      	str	r2, [r3, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2200      	movs	r2, #0
 800dd64:	809a      	strh	r2, [r3, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 800dd6c:	80da      	strh	r2, [r3, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	2200      	movs	r2, #0
 800dd72:	811a      	strh	r2, [r3, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2200      	movs	r2, #0
 800dd78:	815a      	strh	r2, [r3, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800dd80:	819a      	strh	r2, [r3, #12]
}
 800dd82:	370c      	adds	r7, #12
 800dd84:	46bd      	mov	sp, r7
 800dd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8a:	4770      	bx	lr

0800dd8c <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800dd8c:	b480      	push	{r7}
 800dd8e:	b083      	sub	sp, #12
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
 800dd94:	460b      	mov	r3, r1
 800dd96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800dd98:	78fb      	ldrb	r3, [r7, #3]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d008      	beq.n	800ddb0 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	881b      	ldrh	r3, [r3, #0]
 800dda2:	b29b      	uxth	r3, r3
 800dda4:	f043 0301 	orr.w	r3, r3, #1
 800dda8:	b29a      	uxth	r2, r3
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	801a      	strh	r2, [r3, #0]
 800ddae:	e007      	b.n	800ddc0 <I2C_Cmd+0x34>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	881b      	ldrh	r3, [r3, #0]
 800ddb4:	b29b      	uxth	r3, r3
 800ddb6:	f023 0301 	bic.w	r3, r3, #1
 800ddba:	b29a      	uxth	r2, r3
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	801a      	strh	r2, [r3, #0]
  }
}
 800ddc0:	370c      	adds	r7, #12
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc8:	4770      	bx	lr
 800ddca:	bf00      	nop

0800ddcc <I2C_AnalogFilterCmd>:
  * @note   This function should be called before initializing and enabling
            the I2C Peripheral.
  * @retval None
  */
void I2C_AnalogFilterCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800ddcc:	b480      	push	{r7}
 800ddce:	b083      	sub	sp, #12
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
 800ddd4:	460b      	mov	r3, r1
 800ddd6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800ddd8:	78fb      	ldrb	r3, [r7, #3]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d008      	beq.n	800ddf0 <I2C_AnalogFilterCmd+0x24>
  {
    /* Enable the analog filter */
    I2Cx->FLTR &= (uint16_t)~((uint16_t)I2C_FLTR_ANOFF);    
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dde2:	b29b      	uxth	r3, r3
 800dde4:	f023 0310 	bic.w	r3, r3, #16
 800dde8:	b29a      	uxth	r2, r3
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	849a      	strh	r2, [r3, #36]	; 0x24
 800ddee:	e007      	b.n	800de00 <I2C_AnalogFilterCmd+0x34>
  }
  else
  {
    /* Disable the analog filter */
    I2Cx->FLTR |= I2C_FLTR_ANOFF;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ddf4:	b29b      	uxth	r3, r3
 800ddf6:	f043 0310 	orr.w	r3, r3, #16
 800ddfa:	b29a      	uxth	r2, r3
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	849a      	strh	r2, [r3, #36]	; 0x24
  }
}
 800de00:	370c      	adds	r7, #12
 800de02:	46bd      	mov	sp, r7
 800de04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de08:	4770      	bx	lr
 800de0a:	bf00      	nop

0800de0c <I2C_DigitalFilterConfig>:
  * @note   This function should be called before initializing and enabling
            the I2C Peripheral.
  * @retval None
  */
void I2C_DigitalFilterConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DigitalFilter)
{
 800de0c:	b480      	push	{r7}
 800de0e:	b085      	sub	sp, #20
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
 800de14:	460b      	mov	r3, r1
 800de16:	807b      	strh	r3, [r7, #2]
  uint16_t tmpreg = 0;
 800de18:	2300      	movs	r3, #0
 800de1a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIGITAL_FILTER(I2C_DigitalFilter));
  
  /* Get the old register value */
  tmpreg = I2Cx->FLTR;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800de20:	81fb      	strh	r3, [r7, #14]
  
  /* Reset I2Cx DNF bit [3:0] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_FLTR_DNF);
 800de22:	89fb      	ldrh	r3, [r7, #14]
 800de24:	f023 030f 	bic.w	r3, r3, #15
 800de28:	81fb      	strh	r3, [r7, #14]
  
  /* Set I2Cx DNF coefficient */
  tmpreg |= (uint16_t)((uint16_t)I2C_DigitalFilter & I2C_FLTR_DNF);
 800de2a:	887b      	ldrh	r3, [r7, #2]
 800de2c:	f003 030f 	and.w	r3, r3, #15
 800de30:	b29a      	uxth	r2, r3
 800de32:	89fb      	ldrh	r3, [r7, #14]
 800de34:	4313      	orrs	r3, r2
 800de36:	b29b      	uxth	r3, r3
 800de38:	81fb      	strh	r3, [r7, #14]
  
  /* Store the new register value */
  I2Cx->FLTR = tmpreg;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	89fa      	ldrh	r2, [r7, #14]
 800de3e:	849a      	strh	r2, [r3, #36]	; 0x24
}
 800de40:	3714      	adds	r7, #20
 800de42:	46bd      	mov	sp, r7
 800de44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de48:	4770      	bx	lr
 800de4a:	bf00      	nop

0800de4c <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800de4c:	b480      	push	{r7}
 800de4e:	b083      	sub	sp, #12
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
 800de54:	460b      	mov	r3, r1
 800de56:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800de58:	78fb      	ldrb	r3, [r7, #3]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d008      	beq.n	800de70 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	881b      	ldrh	r3, [r3, #0]
 800de62:	b29b      	uxth	r3, r3
 800de64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800de68:	b29a      	uxth	r2, r3
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	801a      	strh	r2, [r3, #0]
 800de6e:	e007      	b.n	800de80 <I2C_GenerateSTART+0x34>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	881b      	ldrh	r3, [r3, #0]
 800de74:	b29b      	uxth	r3, r3
 800de76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800de7a:	b29a      	uxth	r2, r3
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	801a      	strh	r2, [r3, #0]
  }
}
 800de80:	370c      	adds	r7, #12
 800de82:	46bd      	mov	sp, r7
 800de84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de88:	4770      	bx	lr
 800de8a:	bf00      	nop

0800de8c <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800de8c:	b480      	push	{r7}
 800de8e:	b083      	sub	sp, #12
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
 800de94:	460b      	mov	r3, r1
 800de96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800de98:	78fb      	ldrb	r3, [r7, #3]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d008      	beq.n	800deb0 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	881b      	ldrh	r3, [r3, #0]
 800dea2:	b29b      	uxth	r3, r3
 800dea4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dea8:	b29a      	uxth	r2, r3
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	801a      	strh	r2, [r3, #0]
 800deae:	e007      	b.n	800dec0 <I2C_GenerateSTOP+0x34>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	881b      	ldrh	r3, [r3, #0]
 800deb4:	b29b      	uxth	r3, r3
 800deb6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800deba:	b29a      	uxth	r2, r3
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	801a      	strh	r2, [r3, #0]
  }
}
 800dec0:	370c      	adds	r7, #12
 800dec2:	46bd      	mov	sp, r7
 800dec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec8:	4770      	bx	lr
 800deca:	bf00      	nop

0800decc <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 800decc:	b480      	push	{r7}
 800dece:	b083      	sub	sp, #12
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
 800ded4:	4613      	mov	r3, r2
 800ded6:	460a      	mov	r2, r1
 800ded8:	70fa      	strb	r2, [r7, #3]
 800deda:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 800dedc:	78bb      	ldrb	r3, [r7, #2]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d004      	beq.n	800deec <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 800dee2:	78fb      	ldrb	r3, [r7, #3]
 800dee4:	f043 0301 	orr.w	r3, r3, #1
 800dee8:	70fb      	strb	r3, [r7, #3]
 800deea:	e003      	b.n	800def4 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 800deec:	78fb      	ldrb	r3, [r7, #3]
 800deee:	f023 0301 	bic.w	r3, r3, #1
 800def2:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 800def4:	78fb      	ldrb	r3, [r7, #3]
 800def6:	b29a      	uxth	r2, r3
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	821a      	strh	r2, [r3, #16]
}
 800defc:	370c      	adds	r7, #12
 800defe:	46bd      	mov	sp, r7
 800df00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df04:	4770      	bx	lr
 800df06:	bf00      	nop

0800df08 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800df08:	b480      	push	{r7}
 800df0a:	b083      	sub	sp, #12
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
 800df10:	460b      	mov	r3, r1
 800df12:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800df14:	78fb      	ldrb	r3, [r7, #3]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d008      	beq.n	800df2c <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	881b      	ldrh	r3, [r3, #0]
 800df1e:	b29b      	uxth	r3, r3
 800df20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800df24:	b29a      	uxth	r2, r3
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	801a      	strh	r2, [r3, #0]
 800df2a:	e007      	b.n	800df3c <I2C_AcknowledgeConfig+0x34>
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	881b      	ldrh	r3, [r3, #0]
 800df30:	b29b      	uxth	r3, r3
 800df32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800df36:	b29a      	uxth	r2, r3
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	801a      	strh	r2, [r3, #0]
  }
}
 800df3c:	370c      	adds	r7, #12
 800df3e:	46bd      	mov	sp, r7
 800df40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df44:	4770      	bx	lr
 800df46:	bf00      	nop

0800df48 <I2C_OwnAddress2Config>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Address: specifies the 7bit I2C own address2.
  * @retval None.
  */
void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address)
{
 800df48:	b480      	push	{r7}
 800df4a:	b085      	sub	sp, #20
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
 800df50:	460b      	mov	r3, r1
 800df52:	70fb      	strb	r3, [r7, #3]
  uint16_t tmpreg = 0;
 800df54:	2300      	movs	r3, #0
 800df56:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	899b      	ldrh	r3, [r3, #12]
 800df5c:	81fb      	strh	r3, [r7, #14]

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 800df5e:	89fb      	ldrh	r3, [r7, #14]
 800df60:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800df64:	81fb      	strh	r3, [r7, #14]

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 800df66:	78fb      	ldrb	r3, [r7, #3]
 800df68:	b29b      	uxth	r3, r3
 800df6a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800df6e:	b29a      	uxth	r2, r3
 800df70:	89fb      	ldrh	r3, [r7, #14]
 800df72:	4313      	orrs	r3, r2
 800df74:	b29b      	uxth	r3, r3
 800df76:	81fb      	strh	r3, [r7, #14]

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	89fa      	ldrh	r2, [r7, #14]
 800df7c:	819a      	strh	r2, [r3, #12]
}
 800df7e:	3714      	adds	r7, #20
 800df80:	46bd      	mov	sp, r7
 800df82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df86:	4770      	bx	lr

0800df88 <I2C_DualAddressCmd>:
  * @param  NewState: new state of the I2C dual addressing mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800df88:	b480      	push	{r7}
 800df8a:	b083      	sub	sp, #12
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
 800df90:	460b      	mov	r3, r1
 800df92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800df94:	78fb      	ldrb	r3, [r7, #3]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d008      	beq.n	800dfac <I2C_DualAddressCmd+0x24>
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	899b      	ldrh	r3, [r3, #12]
 800df9e:	b29b      	uxth	r3, r3
 800dfa0:	f043 0301 	orr.w	r3, r3, #1
 800dfa4:	b29a      	uxth	r2, r3
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	819a      	strh	r2, [r3, #12]
 800dfaa:	e007      	b.n	800dfbc <I2C_DualAddressCmd+0x34>
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	899b      	ldrh	r3, [r3, #12]
 800dfb0:	b29b      	uxth	r3, r3
 800dfb2:	f023 0301 	bic.w	r3, r3, #1
 800dfb6:	b29a      	uxth	r2, r3
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	819a      	strh	r2, [r3, #12]
  }
}
 800dfbc:	370c      	adds	r7, #12
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc4:	4770      	bx	lr
 800dfc6:	bf00      	nop

0800dfc8 <I2C_GeneralCallCmd>:
  * @param  NewState: new state of the I2C General call.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800dfc8:	b480      	push	{r7}
 800dfca:	b083      	sub	sp, #12
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
 800dfd0:	460b      	mov	r3, r1
 800dfd2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800dfd4:	78fb      	ldrb	r3, [r7, #3]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d008      	beq.n	800dfec <I2C_GeneralCallCmd+0x24>
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	881b      	ldrh	r3, [r3, #0]
 800dfde:	b29b      	uxth	r3, r3
 800dfe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dfe4:	b29a      	uxth	r2, r3
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	801a      	strh	r2, [r3, #0]
 800dfea:	e007      	b.n	800dffc <I2C_GeneralCallCmd+0x34>
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	881b      	ldrh	r3, [r3, #0]
 800dff0:	b29b      	uxth	r3, r3
 800dff2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dff6:	b29a      	uxth	r2, r3
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	801a      	strh	r2, [r3, #0]
  }
}
 800dffc:	370c      	adds	r7, #12
 800dffe:	46bd      	mov	sp, r7
 800e000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e004:	4770      	bx	lr
 800e006:	bf00      	nop

0800e008 <I2C_SoftwareResetCmd>:
  * @param  NewState: new state of the I2C software reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e008:	b480      	push	{r7}
 800e00a:	b083      	sub	sp, #12
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
 800e010:	460b      	mov	r3, r1
 800e012:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e014:	78fb      	ldrb	r3, [r7, #3]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d00a      	beq.n	800e030 <I2C_SoftwareResetCmd+0x28>
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	881b      	ldrh	r3, [r3, #0]
 800e01e:	b29b      	uxth	r3, r3
 800e020:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e024:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e028:	b29a      	uxth	r2, r3
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	801a      	strh	r2, [r3, #0]
 800e02e:	e007      	b.n	800e040 <I2C_SoftwareResetCmd+0x38>
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	881b      	ldrh	r3, [r3, #0]
 800e034:	b29b      	uxth	r3, r3
 800e036:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800e03a:	b29a      	uxth	r2, r3
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	801a      	strh	r2, [r3, #0]
  }
}
 800e040:	370c      	adds	r7, #12
 800e042:	46bd      	mov	sp, r7
 800e044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e048:	4770      	bx	lr
 800e04a:	bf00      	nop

0800e04c <I2C_StretchClockCmd>:
  * @param  NewState: new state of the I2Cx Clock stretching.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e04c:	b480      	push	{r7}
 800e04e:	b083      	sub	sp, #12
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
 800e054:	460b      	mov	r3, r1
 800e056:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 800e058:	78fb      	ldrb	r3, [r7, #3]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d108      	bne.n	800e070 <I2C_StretchClockCmd+0x24>
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	881b      	ldrh	r3, [r3, #0]
 800e062:	b29b      	uxth	r3, r3
 800e064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e068:	b29a      	uxth	r2, r3
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	801a      	strh	r2, [r3, #0]
 800e06e:	e007      	b.n	800e080 <I2C_StretchClockCmd+0x34>
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	881b      	ldrh	r3, [r3, #0]
 800e074:	b29b      	uxth	r3, r3
 800e076:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e07a:	b29a      	uxth	r2, r3
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	801a      	strh	r2, [r3, #0]
  }
}
 800e080:	370c      	adds	r7, #12
 800e082:	46bd      	mov	sp, r7
 800e084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e088:	4770      	bx	lr
 800e08a:	bf00      	nop

0800e08c <I2C_FastModeDutyCycleConfig>:
  *            @arg I2C_DutyCycle_2: I2C fast mode Tlow/Thigh = 2
  *            @arg I2C_DutyCycle_16_9: I2C fast mode Tlow/Thigh = 16/9
  * @retval None
  */
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
 800e08c:	b480      	push	{r7}
 800e08e:	b083      	sub	sp, #12
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
 800e094:	460b      	mov	r3, r1
 800e096:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 800e098:	887b      	ldrh	r3, [r7, #2]
 800e09a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e09e:	d008      	beq.n	800e0b2 <I2C_FastModeDutyCycleConfig+0x26>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	8b9b      	ldrh	r3, [r3, #28]
 800e0a4:	b29b      	uxth	r3, r3
 800e0a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e0aa:	b29a      	uxth	r2, r3
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	839a      	strh	r2, [r3, #28]
 800e0b0:	e007      	b.n	800e0c2 <I2C_FastModeDutyCycleConfig+0x36>
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	8b9b      	ldrh	r3, [r3, #28]
 800e0b6:	b29b      	uxth	r3, r3
 800e0b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e0bc:	b29a      	uxth	r2, r3
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	839a      	strh	r2, [r3, #28]
  }
}
 800e0c2:	370c      	adds	r7, #12
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ca:	4770      	bx	lr

0800e0cc <I2C_NACKPositionConfig>:
  *          is intended to used in SMBUS mode. 
  *            
  * @retval None
  */
void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
{
 800e0cc:	b480      	push	{r7}
 800e0ce:	b083      	sub	sp, #12
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
 800e0d4:	460b      	mov	r3, r1
 800e0d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 800e0d8:	887b      	ldrh	r3, [r7, #2]
 800e0da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e0de:	d108      	bne.n	800e0f2 <I2C_NACKPositionConfig+0x26>
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	881b      	ldrh	r3, [r3, #0]
 800e0e4:	b29b      	uxth	r3, r3
 800e0e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e0ea:	b29a      	uxth	r2, r3
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	801a      	strh	r2, [r3, #0]
 800e0f0:	e007      	b.n	800e102 <I2C_NACKPositionConfig+0x36>
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	881b      	ldrh	r3, [r3, #0]
 800e0f6:	b29b      	uxth	r3, r3
 800e0f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e0fc:	b29a      	uxth	r2, r3
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	801a      	strh	r2, [r3, #0]
  }
}
 800e102:	370c      	adds	r7, #12
 800e104:	46bd      	mov	sp, r7
 800e106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10a:	4770      	bx	lr

0800e10c <I2C_SMBusAlertConfig>:
  *            @arg I2C_SMBusAlert_Low: SMBAlert pin driven low
  *            @arg I2C_SMBusAlert_High: SMBAlert pin driven high
  * @retval None
  */
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
 800e10c:	b480      	push	{r7}
 800e10e:	b083      	sub	sp, #12
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
 800e114:	460b      	mov	r3, r1
 800e116:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 800e118:	887b      	ldrh	r3, [r7, #2]
 800e11a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e11e:	d108      	bne.n	800e132 <I2C_SMBusAlertConfig+0x26>
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	881b      	ldrh	r3, [r3, #0]
 800e124:	b29b      	uxth	r3, r3
 800e126:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e12a:	b29a      	uxth	r2, r3
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	801a      	strh	r2, [r3, #0]
 800e130:	e007      	b.n	800e142 <I2C_SMBusAlertConfig+0x36>
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	881b      	ldrh	r3, [r3, #0]
 800e136:	b29b      	uxth	r3, r3
 800e138:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e13c:	b29a      	uxth	r2, r3
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	801a      	strh	r2, [r3, #0]
  }
}
 800e142:	370c      	adds	r7, #12
 800e144:	46bd      	mov	sp, r7
 800e146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14a:	4770      	bx	lr

0800e14c <I2C_ARPCmd>:
  * @param  NewState: new state of the I2Cx ARP. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e14c:	b480      	push	{r7}
 800e14e:	b083      	sub	sp, #12
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
 800e154:	460b      	mov	r3, r1
 800e156:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e158:	78fb      	ldrb	r3, [r7, #3]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d008      	beq.n	800e170 <I2C_ARPCmd+0x24>
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	881b      	ldrh	r3, [r3, #0]
 800e162:	b29b      	uxth	r3, r3
 800e164:	f043 0310 	orr.w	r3, r3, #16
 800e168:	b29a      	uxth	r2, r3
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	801a      	strh	r2, [r3, #0]
 800e16e:	e007      	b.n	800e180 <I2C_ARPCmd+0x34>
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	881b      	ldrh	r3, [r3, #0]
 800e174:	b29b      	uxth	r3, r3
 800e176:	f023 0310 	bic.w	r3, r3, #16
 800e17a:	b29a      	uxth	r2, r3
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	801a      	strh	r2, [r3, #0]
  }
}
 800e180:	370c      	adds	r7, #12
 800e182:	46bd      	mov	sp, r7
 800e184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e188:	4770      	bx	lr
 800e18a:	bf00      	nop

0800e18c <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 800e18c:	b480      	push	{r7}
 800e18e:	b083      	sub	sp, #12
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
 800e194:	460b      	mov	r3, r1
 800e196:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 800e198:	78fb      	ldrb	r3, [r7, #3]
 800e19a:	b29a      	uxth	r2, r3
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	821a      	strh	r2, [r3, #16]
}
 800e1a0:	370c      	adds	r7, #12
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a8:	4770      	bx	lr
 800e1aa:	bf00      	nop

0800e1ac <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 800e1ac:	b480      	push	{r7}
 800e1ae:	b083      	sub	sp, #12
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	8a1b      	ldrh	r3, [r3, #16]
 800e1b8:	b29b      	uxth	r3, r3
 800e1ba:	b2db      	uxtb	r3, r3
}
 800e1bc:	4618      	mov	r0, r3
 800e1be:	370c      	adds	r7, #12
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c6:	4770      	bx	lr

0800e1c8 <I2C_TransmitPEC>:
  * @param  NewState: new state of the I2C PEC transmission.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e1c8:	b480      	push	{r7}
 800e1ca:	b083      	sub	sp, #12
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
 800e1d0:	460b      	mov	r3, r1
 800e1d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e1d4:	78fb      	ldrb	r3, [r7, #3]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d008      	beq.n	800e1ec <I2C_TransmitPEC+0x24>
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	881b      	ldrh	r3, [r3, #0]
 800e1de:	b29b      	uxth	r3, r3
 800e1e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e1e4:	b29a      	uxth	r2, r3
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	801a      	strh	r2, [r3, #0]
 800e1ea:	e007      	b.n	800e1fc <I2C_TransmitPEC+0x34>
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	881b      	ldrh	r3, [r3, #0]
 800e1f0:	b29b      	uxth	r3, r3
 800e1f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e1f6:	b29a      	uxth	r2, r3
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	801a      	strh	r2, [r3, #0]
  }
}
 800e1fc:	370c      	adds	r7, #12
 800e1fe:	46bd      	mov	sp, r7
 800e200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e204:	4770      	bx	lr
 800e206:	bf00      	nop

0800e208 <I2C_PECPositionConfig>:
  *          is intended to used in I2C mode.
  *                
  * @retval None
  */
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
 800e208:	b480      	push	{r7}
 800e20a:	b083      	sub	sp, #12
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
 800e210:	460b      	mov	r3, r1
 800e212:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 800e214:	887b      	ldrh	r3, [r7, #2]
 800e216:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e21a:	d108      	bne.n	800e22e <I2C_PECPositionConfig+0x26>
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	881b      	ldrh	r3, [r3, #0]
 800e220:	b29b      	uxth	r3, r3
 800e222:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e226:	b29a      	uxth	r2, r3
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	801a      	strh	r2, [r3, #0]
 800e22c:	e007      	b.n	800e23e <I2C_PECPositionConfig+0x36>
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	881b      	ldrh	r3, [r3, #0]
 800e232:	b29b      	uxth	r3, r3
 800e234:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e238:	b29a      	uxth	r2, r3
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	801a      	strh	r2, [r3, #0]
  }
}
 800e23e:	370c      	adds	r7, #12
 800e240:	46bd      	mov	sp, r7
 800e242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e246:	4770      	bx	lr

0800e248 <I2C_CalculatePEC>:
  * @param  NewState: new state of the I2Cx PEC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e248:	b480      	push	{r7}
 800e24a:	b083      	sub	sp, #12
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
 800e250:	460b      	mov	r3, r1
 800e252:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e254:	78fb      	ldrb	r3, [r7, #3]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d008      	beq.n	800e26c <I2C_CalculatePEC+0x24>
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	881b      	ldrh	r3, [r3, #0]
 800e25e:	b29b      	uxth	r3, r3
 800e260:	f043 0320 	orr.w	r3, r3, #32
 800e264:	b29a      	uxth	r2, r3
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	801a      	strh	r2, [r3, #0]
 800e26a:	e007      	b.n	800e27c <I2C_CalculatePEC+0x34>
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	881b      	ldrh	r3, [r3, #0]
 800e270:	b29b      	uxth	r3, r3
 800e272:	f023 0320 	bic.w	r3, r3, #32
 800e276:	b29a      	uxth	r2, r3
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	801a      	strh	r2, [r3, #0]
  }
}
 800e27c:	370c      	adds	r7, #12
 800e27e:	46bd      	mov	sp, r7
 800e280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e284:	4770      	bx	lr
 800e286:	bf00      	nop

0800e288 <I2C_GetPEC>:
  * @brief  Returns the PEC value for the specified I2C.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The PEC value.
  */
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
 800e288:	b480      	push	{r7}
 800e28a:	b083      	sub	sp, #12
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	8b1b      	ldrh	r3, [r3, #24]
 800e294:	b29b      	uxth	r3, r3
 800e296:	0a1b      	lsrs	r3, r3, #8
 800e298:	b29b      	uxth	r3, r3
 800e29a:	b2db      	uxtb	r3, r3
}
 800e29c:	4618      	mov	r0, r3
 800e29e:	370c      	adds	r7, #12
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a6:	4770      	bx	lr

0800e2a8 <I2C_DMACmd>:
  * @param  NewState: new state of the I2C DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	b083      	sub	sp, #12
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
 800e2b0:	460b      	mov	r3, r1
 800e2b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e2b4:	78fb      	ldrb	r3, [r7, #3]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d008      	beq.n	800e2cc <I2C_DMACmd+0x24>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	889b      	ldrh	r3, [r3, #4]
 800e2be:	b29b      	uxth	r3, r3
 800e2c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e2c4:	b29a      	uxth	r2, r3
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	809a      	strh	r2, [r3, #4]
 800e2ca:	e007      	b.n	800e2dc <I2C_DMACmd+0x34>
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	889b      	ldrh	r3, [r3, #4]
 800e2d0:	b29b      	uxth	r3, r3
 800e2d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e2d6:	b29a      	uxth	r2, r3
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	809a      	strh	r2, [r3, #4]
  }
}
 800e2dc:	370c      	adds	r7, #12
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e4:	4770      	bx	lr
 800e2e6:	bf00      	nop

0800e2e8 <I2C_DMALastTransferCmd>:
  * @param  NewState: new state of the I2C DMA last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b083      	sub	sp, #12
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
 800e2f0:	460b      	mov	r3, r1
 800e2f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e2f4:	78fb      	ldrb	r3, [r7, #3]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d008      	beq.n	800e30c <I2C_DMALastTransferCmd+0x24>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	889b      	ldrh	r3, [r3, #4]
 800e2fe:	b29b      	uxth	r3, r3
 800e300:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e304:	b29a      	uxth	r2, r3
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	809a      	strh	r2, [r3, #4]
 800e30a:	e007      	b.n	800e31c <I2C_DMALastTransferCmd+0x34>
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	889b      	ldrh	r3, [r3, #4]
 800e310:	b29b      	uxth	r3, r3
 800e312:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e316:	b29a      	uxth	r2, r3
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	809a      	strh	r2, [r3, #4]
  }
}
 800e31c:	370c      	adds	r7, #12
 800e31e:	46bd      	mov	sp, r7
 800e320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e324:	4770      	bx	lr
 800e326:	bf00      	nop

0800e328 <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 800e328:	b480      	push	{r7}
 800e32a:	b085      	sub	sp, #20
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
 800e330:	460b      	mov	r3, r1
 800e332:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 800e334:	2300      	movs	r3, #0
 800e336:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	60fb      	str	r3, [r7, #12]
  tmp += I2C_Register;
 800e33c:	78fa      	ldrb	r2, [r7, #3]
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	4413      	add	r3, r2
 800e342:	60fb      	str	r3, [r7, #12]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	881b      	ldrh	r3, [r3, #0]
 800e348:	b29b      	uxth	r3, r3
}
 800e34a:	4618      	mov	r0, r3
 800e34c:	3714      	adds	r7, #20
 800e34e:	46bd      	mov	sp, r7
 800e350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e354:	4770      	bx	lr
 800e356:	bf00      	nop

0800e358 <I2C_ITConfig>:
  * @param  NewState: new state of the specified I2C interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
{
 800e358:	b480      	push	{r7}
 800e35a:	b083      	sub	sp, #12
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
 800e360:	4613      	mov	r3, r2
 800e362:	460a      	mov	r2, r1
 800e364:	807a      	strh	r2, [r7, #2]
 800e366:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 800e368:	787b      	ldrb	r3, [r7, #1]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d008      	beq.n	800e380 <I2C_ITConfig+0x28>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	889b      	ldrh	r3, [r3, #4]
 800e372:	b29a      	uxth	r2, r3
 800e374:	887b      	ldrh	r3, [r7, #2]
 800e376:	4313      	orrs	r3, r2
 800e378:	b29a      	uxth	r2, r3
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	809a      	strh	r2, [r3, #4]
 800e37e:	e009      	b.n	800e394 <I2C_ITConfig+0x3c>
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	889b      	ldrh	r3, [r3, #4]
 800e384:	b29a      	uxth	r2, r3
 800e386:	887b      	ldrh	r3, [r7, #2]
 800e388:	43db      	mvns	r3, r3
 800e38a:	b29b      	uxth	r3, r3
 800e38c:	4013      	ands	r3, r2
 800e38e:	b29a      	uxth	r2, r3
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	809a      	strh	r2, [r3, #4]
  }
}
 800e394:	370c      	adds	r7, #12
 800e396:	46bd      	mov	sp, r7
 800e398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39c:	4770      	bx	lr
 800e39e:	bf00      	nop

0800e3a0 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 800e3a0:	b480      	push	{r7}
 800e3a2:	b087      	sub	sp, #28
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
 800e3a8:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	60fb      	str	r3, [r7, #12]
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	8a9b      	ldrh	r3, [r3, #20]
 800e3be:	b29b      	uxth	r3, r3
 800e3c0:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	8b1b      	ldrh	r3, [r3, #24]
 800e3c6:	b29b      	uxth	r3, r3
 800e3c8:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 800e3ca:	68bb      	ldr	r3, [r7, #8]
 800e3cc:	041b      	lsls	r3, r3, #16
 800e3ce:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 800e3d0:	68fa      	ldr	r2, [r7, #12]
 800e3d2:	68bb      	ldr	r3, [r7, #8]
 800e3d4:	4313      	orrs	r3, r2
 800e3d6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e3da:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 800e3dc:	693a      	ldr	r2, [r7, #16]
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	401a      	ands	r2, r3
 800e3e2:	683b      	ldr	r3, [r7, #0]
 800e3e4:	429a      	cmp	r2, r3
 800e3e6:	d102      	bne.n	800e3ee <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 800e3e8:	2301      	movs	r3, #1
 800e3ea:	75fb      	strb	r3, [r7, #23]
 800e3ec:	e001      	b.n	800e3f2 <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 800e3f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	371c      	adds	r7, #28
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fe:	4770      	bx	lr

0800e400 <I2C_GetLastEvent>:
  *         in stm32f4xx_i2c.h file.
  *    
  * @retval The last event
  */
uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
{
 800e400:	b480      	push	{r7}
 800e402:	b087      	sub	sp, #28
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
  uint32_t lastevent = 0;
 800e408:	2300      	movs	r3, #0
 800e40a:	617b      	str	r3, [r7, #20]
  uint32_t flag1 = 0, flag2 = 0;
 800e40c:	2300      	movs	r3, #0
 800e40e:	613b      	str	r3, [r7, #16]
 800e410:	2300      	movs	r3, #0
 800e412:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	8a9b      	ldrh	r3, [r3, #20]
 800e418:	b29b      	uxth	r3, r3
 800e41a:	613b      	str	r3, [r7, #16]
  flag2 = I2Cx->SR2;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	8b1b      	ldrh	r3, [r3, #24]
 800e420:	b29b      	uxth	r3, r3
 800e422:	60fb      	str	r3, [r7, #12]
  flag2 = flag2 << 16;
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	041b      	lsls	r3, r3, #16
 800e428:	60fb      	str	r3, [r7, #12]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 800e42a:	693a      	ldr	r2, [r7, #16]
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	4313      	orrs	r3, r2
 800e430:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e434:	617b      	str	r3, [r7, #20]

  /* Return status */
  return lastevent;
 800e436:	697b      	ldr	r3, [r7, #20]
}
 800e438:	4618      	mov	r0, r3
 800e43a:	371c      	adds	r7, #28
 800e43c:	46bd      	mov	sp, r7
 800e43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e442:	4770      	bx	lr

0800e444 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 800e444:	b480      	push	{r7}
 800e446:	b087      	sub	sp, #28
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
 800e44c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800e44e:	2300      	movs	r3, #0
 800e450:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 800e452:	2300      	movs	r3, #0
 800e454:	613b      	str	r3, [r7, #16]
 800e456:	2300      	movs	r3, #0
 800e458:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	0f1b      	lsrs	r3, r3, #28
 800e462:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 800e464:	683b      	ldr	r3, [r7, #0]
 800e466:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e46a:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 800e46c:	693b      	ldr	r3, [r7, #16]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d003      	beq.n	800e47a <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	3314      	adds	r3, #20
 800e476:	60fb      	str	r3, [r7, #12]
 800e478:	e005      	b.n	800e486 <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	0c1b      	lsrs	r3, r3, #16
 800e47e:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	3318      	adds	r3, #24
 800e484:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	681a      	ldr	r2, [r3, #0]
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	4013      	ands	r3, r2
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d002      	beq.n	800e498 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 800e492:	2301      	movs	r3, #1
 800e494:	75fb      	strb	r3, [r7, #23]
 800e496:	e001      	b.n	800e49c <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 800e498:	2300      	movs	r3, #0
 800e49a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 800e49c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e49e:	4618      	mov	r0, r3
 800e4a0:	371c      	adds	r7, #28
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a8:	4770      	bx	lr
 800e4aa:	bf00      	nop

0800e4ac <I2C_ClearFlag>:
  *          register (I2C_SendData()).
  *  
  * @retval None
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 800e4ac:	b480      	push	{r7}
 800e4ae:	b085      	sub	sp, #20
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
 800e4b4:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e4c0:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	b29b      	uxth	r3, r3
 800e4c6:	43db      	mvns	r3, r3
 800e4c8:	b29a      	uxth	r2, r3
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	829a      	strh	r2, [r3, #20]
}
 800e4ce:	3714      	adds	r7, #20
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d6:	4770      	bx	lr

0800e4d8 <I2C_GetITStatus>:
  *                              Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 800e4d8:	b480      	push	{r7}
 800e4da:	b085      	sub	sp, #20
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
 800e4e0:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800e4f0:	0c1a      	lsrs	r2, r3, #16
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	889b      	ldrh	r3, [r3, #4]
 800e4f6:	b29b      	uxth	r3, r3
 800e4f8:	4013      	ands	r3, r2
 800e4fa:	60bb      	str	r3, [r7, #8]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e502:	603b      	str	r3, [r7, #0]

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	8a9b      	ldrh	r3, [r3, #20]
 800e508:	b29b      	uxth	r3, r3
 800e50a:	461a      	mov	r2, r3
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	4013      	ands	r3, r2
 800e510:	2b00      	cmp	r3, #0
 800e512:	d005      	beq.n	800e520 <I2C_GetITStatus+0x48>
 800e514:	68bb      	ldr	r3, [r7, #8]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d002      	beq.n	800e520 <I2C_GetITStatus+0x48>
  {
    /* I2C_IT is set */
    bitstatus = SET;
 800e51a:	2301      	movs	r3, #1
 800e51c:	73fb      	strb	r3, [r7, #15]
 800e51e:	e001      	b.n	800e524 <I2C_GetITStatus+0x4c>
  }
  else
  {
    /* I2C_IT is reset */
    bitstatus = RESET;
 800e520:	2300      	movs	r3, #0
 800e522:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the I2C_IT status */
  return  bitstatus;
 800e524:	7bfb      	ldrb	r3, [r7, #15]
}
 800e526:	4618      	mov	r0, r3
 800e528:	3714      	adds	r7, #20
 800e52a:	46bd      	mov	sp, r7
 800e52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e530:	4770      	bx	lr
 800e532:	bf00      	nop

0800e534 <I2C_ClearITPendingBit>:
  *          I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
  *          I2C_DR register (I2C_SendData()).
  * @retval None
  */
void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 800e534:	b480      	push	{r7}
 800e536:	b085      	sub	sp, #20
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
 800e53c:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 800e53e:	2300      	movs	r3, #0
 800e540:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;
 800e542:	683b      	ldr	r3, [r7, #0]
 800e544:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e548:	60fb      	str	r3, [r7, #12]

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	b29b      	uxth	r3, r3
 800e54e:	43db      	mvns	r3, r3
 800e550:	b29a      	uxth	r2, r3
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	829a      	strh	r2, [r3, #20]
}
 800e556:	3714      	adds	r7, #20
 800e558:	46bd      	mov	sp, r7
 800e55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55e:	4770      	bx	lr

0800e560 <IWDG_WriteAccessCmd>:
  *            @arg IWDG_WriteAccess_Enable: Enable write access to IWDG_PR and IWDG_RLR registers
  *            @arg IWDG_WriteAccess_Disable: Disable write access to IWDG_PR and IWDG_RLR registers
  * @retval None
  */
void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
{
 800e560:	b480      	push	{r7}
 800e562:	b083      	sub	sp, #12
 800e564:	af00      	add	r7, sp, #0
 800e566:	4603      	mov	r3, r0
 800e568:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
  IWDG->KR = IWDG_WriteAccess;
 800e56a:	4b04      	ldr	r3, [pc, #16]	; (800e57c <IWDG_WriteAccessCmd+0x1c>)
 800e56c:	88fa      	ldrh	r2, [r7, #6]
 800e56e:	601a      	str	r2, [r3, #0]
}
 800e570:	370c      	adds	r7, #12
 800e572:	46bd      	mov	sp, r7
 800e574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e578:	4770      	bx	lr
 800e57a:	bf00      	nop
 800e57c:	40003000 	.word	0x40003000

0800e580 <IWDG_SetPrescaler>:
  *            @arg IWDG_Prescaler_128: IWDG prescaler set to 128
  *            @arg IWDG_Prescaler_256: IWDG prescaler set to 256
  * @retval None
  */
void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
{
 800e580:	b480      	push	{r7}
 800e582:	b083      	sub	sp, #12
 800e584:	af00      	add	r7, sp, #0
 800e586:	4603      	mov	r3, r0
 800e588:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
  IWDG->PR = IWDG_Prescaler;
 800e58a:	4b04      	ldr	r3, [pc, #16]	; (800e59c <IWDG_SetPrescaler+0x1c>)
 800e58c:	79fa      	ldrb	r2, [r7, #7]
 800e58e:	605a      	str	r2, [r3, #4]
}
 800e590:	370c      	adds	r7, #12
 800e592:	46bd      	mov	sp, r7
 800e594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e598:	4770      	bx	lr
 800e59a:	bf00      	nop
 800e59c:	40003000 	.word	0x40003000

0800e5a0 <IWDG_SetReload>:
  * @param  Reload: specifies the IWDG Reload value.
  *          This parameter must be a number between 0 and 0x0FFF.
  * @retval None
  */
void IWDG_SetReload(uint16_t Reload)
{
 800e5a0:	b480      	push	{r7}
 800e5a2:	b083      	sub	sp, #12
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_RELOAD(Reload));
  IWDG->RLR = Reload;
 800e5aa:	4b04      	ldr	r3, [pc, #16]	; (800e5bc <IWDG_SetReload+0x1c>)
 800e5ac:	88fa      	ldrh	r2, [r7, #6]
 800e5ae:	609a      	str	r2, [r3, #8]
}
 800e5b0:	370c      	adds	r7, #12
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b8:	4770      	bx	lr
 800e5ba:	bf00      	nop
 800e5bc:	40003000 	.word	0x40003000

0800e5c0 <IWDG_ReloadCounter>:
  *         (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_ReloadCounter(void)
{
 800e5c0:	b480      	push	{r7}
 800e5c2:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_RELOAD;
 800e5c4:	4b03      	ldr	r3, [pc, #12]	; (800e5d4 <IWDG_ReloadCounter+0x14>)
 800e5c6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800e5ca:	601a      	str	r2, [r3, #0]
}
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d2:	4770      	bx	lr
 800e5d4:	40003000 	.word	0x40003000

0800e5d8 <IWDG_Enable>:
  * @brief  Enables IWDG (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_Enable(void)
{
 800e5d8:	b480      	push	{r7}
 800e5da:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_ENABLE;
 800e5dc:	4b03      	ldr	r3, [pc, #12]	; (800e5ec <IWDG_Enable+0x14>)
 800e5de:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800e5e2:	601a      	str	r2, [r3, #0]
}
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ea:	4770      	bx	lr
 800e5ec:	40003000 	.word	0x40003000

0800e5f0 <IWDG_GetFlagStatus>:
  *            @arg IWDG_FLAG_PVU: Prescaler Value Update on going
  *            @arg IWDG_FLAG_RVU: Reload Value Update on going
  * @retval The new state of IWDG_FLAG (SET or RESET).
  */
FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
{
 800e5f0:	b480      	push	{r7}
 800e5f2:	b085      	sub	sp, #20
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_IWDG_FLAG(IWDG_FLAG));
  if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
 800e5fe:	4b09      	ldr	r3, [pc, #36]	; (800e624 <IWDG_GetFlagStatus+0x34>)
 800e600:	68da      	ldr	r2, [r3, #12]
 800e602:	88fb      	ldrh	r3, [r7, #6]
 800e604:	4013      	ands	r3, r2
 800e606:	2b00      	cmp	r3, #0
 800e608:	d002      	beq.n	800e610 <IWDG_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 800e60a:	2301      	movs	r3, #1
 800e60c:	73fb      	strb	r3, [r7, #15]
 800e60e:	e001      	b.n	800e614 <IWDG_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 800e610:	2300      	movs	r3, #0
 800e612:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 800e614:	7bfb      	ldrb	r3, [r7, #15]
}
 800e616:	4618      	mov	r0, r3
 800e618:	3714      	adds	r7, #20
 800e61a:	46bd      	mov	sp, r7
 800e61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e620:	4770      	bx	lr
 800e622:	bf00      	nop
 800e624:	40003000 	.word	0x40003000

0800e628 <LTDC_DeInit>:
  * @param  None
  * @retval None
  */

void LTDC_DeInit(void)
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	af00      	add	r7, sp, #0
  /* Enable LTDC reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_LTDC, ENABLE);
 800e62c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800e630:	2101      	movs	r1, #1
 800e632:	f001 fb79 	bl	800fd28 <RCC_APB2PeriphResetCmd>
  /* Release LTDC from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_LTDC, DISABLE);
 800e636:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800e63a:	2100      	movs	r1, #0
 800e63c:	f001 fb74 	bl	800fd28 <RCC_APB2PeriphResetCmd>
}
 800e640:	bd80      	pop	{r7, pc}
 800e642:	bf00      	nop

0800e644 <LTDC_Init>:
  *         the configuration information for the specified LTDC peripheral.
  * @retval None
  */

void LTDC_Init(LTDC_InitTypeDef* LTDC_InitStruct)
{
 800e644:	b480      	push	{r7}
 800e646:	b089      	sub	sp, #36	; 0x24
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
  uint32_t horizontalsync = 0;
 800e64c:	2300      	movs	r3, #0
 800e64e:	61fb      	str	r3, [r7, #28]
  uint32_t accumulatedHBP = 0;
 800e650:	2300      	movs	r3, #0
 800e652:	61bb      	str	r3, [r7, #24]
  uint32_t accumulatedactiveW = 0;
 800e654:	2300      	movs	r3, #0
 800e656:	617b      	str	r3, [r7, #20]
  uint32_t totalwidth = 0;
 800e658:	2300      	movs	r3, #0
 800e65a:	613b      	str	r3, [r7, #16]
  uint32_t backgreen = 0;
 800e65c:	2300      	movs	r3, #0
 800e65e:	60fb      	str	r3, [r7, #12]
  uint32_t backred = 0;
 800e660:	2300      	movs	r3, #0
 800e662:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LTDC_BackBlueValue(LTDC_InitStruct->LTDC_BackgroundBlueValue));
  assert_param(IS_LTDC_BackGreenValue(LTDC_InitStruct->LTDC_BackgroundGreenValue));
  assert_param(IS_LTDC_BackRedValue(LTDC_InitStruct->LTDC_BackgroundRedValue));

  /* Sets Synchronization size */
  LTDC->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800e664:	4a3f      	ldr	r2, [pc, #252]	; (800e764 <LTDC_Init+0x120>)
 800e666:	4b3f      	ldr	r3, [pc, #252]	; (800e764 <LTDC_Init+0x120>)
 800e668:	6899      	ldr	r1, [r3, #8]
 800e66a:	4b3f      	ldr	r3, [pc, #252]	; (800e768 <LTDC_Init+0x124>)
 800e66c:	400b      	ands	r3, r1
 800e66e:	6093      	str	r3, [r2, #8]
  horizontalsync = (LTDC_InitStruct->LTDC_HorizontalSync << 16);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	691b      	ldr	r3, [r3, #16]
 800e674:	041b      	lsls	r3, r3, #16
 800e676:	61fb      	str	r3, [r7, #28]
  LTDC->SSCR |= (horizontalsync | LTDC_InitStruct->LTDC_VerticalSync);
 800e678:	4b3a      	ldr	r3, [pc, #232]	; (800e764 <LTDC_Init+0x120>)
 800e67a:	4a3a      	ldr	r2, [pc, #232]	; (800e764 <LTDC_Init+0x120>)
 800e67c:	6891      	ldr	r1, [r2, #8]
 800e67e:	687a      	ldr	r2, [r7, #4]
 800e680:	6950      	ldr	r0, [r2, #20]
 800e682:	69fa      	ldr	r2, [r7, #28]
 800e684:	4302      	orrs	r2, r0
 800e686:	430a      	orrs	r2, r1
 800e688:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  LTDC->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800e68a:	4a36      	ldr	r2, [pc, #216]	; (800e764 <LTDC_Init+0x120>)
 800e68c:	4b35      	ldr	r3, [pc, #212]	; (800e764 <LTDC_Init+0x120>)
 800e68e:	68d9      	ldr	r1, [r3, #12]
 800e690:	4b35      	ldr	r3, [pc, #212]	; (800e768 <LTDC_Init+0x124>)
 800e692:	400b      	ands	r3, r1
 800e694:	60d3      	str	r3, [r2, #12]
  accumulatedHBP = (LTDC_InitStruct->LTDC_AccumulatedHBP << 16);
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	699b      	ldr	r3, [r3, #24]
 800e69a:	041b      	lsls	r3, r3, #16
 800e69c:	61bb      	str	r3, [r7, #24]
  LTDC->BPCR |= (accumulatedHBP | LTDC_InitStruct->LTDC_AccumulatedVBP);
 800e69e:	4b31      	ldr	r3, [pc, #196]	; (800e764 <LTDC_Init+0x120>)
 800e6a0:	4a30      	ldr	r2, [pc, #192]	; (800e764 <LTDC_Init+0x120>)
 800e6a2:	68d1      	ldr	r1, [r2, #12]
 800e6a4:	687a      	ldr	r2, [r7, #4]
 800e6a6:	69d0      	ldr	r0, [r2, #28]
 800e6a8:	69ba      	ldr	r2, [r7, #24]
 800e6aa:	4302      	orrs	r2, r0
 800e6ac:	430a      	orrs	r2, r1
 800e6ae:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  LTDC->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800e6b0:	4a2c      	ldr	r2, [pc, #176]	; (800e764 <LTDC_Init+0x120>)
 800e6b2:	4b2c      	ldr	r3, [pc, #176]	; (800e764 <LTDC_Init+0x120>)
 800e6b4:	6919      	ldr	r1, [r3, #16]
 800e6b6:	4b2c      	ldr	r3, [pc, #176]	; (800e768 <LTDC_Init+0x124>)
 800e6b8:	400b      	ands	r3, r1
 800e6ba:	6113      	str	r3, [r2, #16]
  accumulatedactiveW = (LTDC_InitStruct->LTDC_AccumulatedActiveW << 16);
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	6a1b      	ldr	r3, [r3, #32]
 800e6c0:	041b      	lsls	r3, r3, #16
 800e6c2:	617b      	str	r3, [r7, #20]
  LTDC->AWCR |= (accumulatedactiveW | LTDC_InitStruct->LTDC_AccumulatedActiveH);
 800e6c4:	4b27      	ldr	r3, [pc, #156]	; (800e764 <LTDC_Init+0x120>)
 800e6c6:	4a27      	ldr	r2, [pc, #156]	; (800e764 <LTDC_Init+0x120>)
 800e6c8:	6911      	ldr	r1, [r2, #16]
 800e6ca:	687a      	ldr	r2, [r7, #4]
 800e6cc:	6a50      	ldr	r0, [r2, #36]	; 0x24
 800e6ce:	697a      	ldr	r2, [r7, #20]
 800e6d0:	4302      	orrs	r2, r0
 800e6d2:	430a      	orrs	r2, r1
 800e6d4:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  LTDC->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800e6d6:	4a23      	ldr	r2, [pc, #140]	; (800e764 <LTDC_Init+0x120>)
 800e6d8:	4b22      	ldr	r3, [pc, #136]	; (800e764 <LTDC_Init+0x120>)
 800e6da:	6959      	ldr	r1, [r3, #20]
 800e6dc:	4b22      	ldr	r3, [pc, #136]	; (800e768 <LTDC_Init+0x124>)
 800e6de:	400b      	ands	r3, r1
 800e6e0:	6153      	str	r3, [r2, #20]
  totalwidth = (LTDC_InitStruct->LTDC_TotalWidth << 16);
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6e6:	041b      	lsls	r3, r3, #16
 800e6e8:	613b      	str	r3, [r7, #16]
  LTDC->TWCR |= (totalwidth | LTDC_InitStruct->LTDC_TotalHeigh);
 800e6ea:	4b1e      	ldr	r3, [pc, #120]	; (800e764 <LTDC_Init+0x120>)
 800e6ec:	4a1d      	ldr	r2, [pc, #116]	; (800e764 <LTDC_Init+0x120>)
 800e6ee:	6951      	ldr	r1, [r2, #20]
 800e6f0:	687a      	ldr	r2, [r7, #4]
 800e6f2:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800e6f4:	693a      	ldr	r2, [r7, #16]
 800e6f6:	4302      	orrs	r2, r0
 800e6f8:	430a      	orrs	r2, r1
 800e6fa:	615a      	str	r2, [r3, #20]

  LTDC->GCR &= (uint32_t)GCR_MASK;
 800e6fc:	4a19      	ldr	r2, [pc, #100]	; (800e764 <LTDC_Init+0x120>)
 800e6fe:	4b19      	ldr	r3, [pc, #100]	; (800e764 <LTDC_Init+0x120>)
 800e700:	6999      	ldr	r1, [r3, #24]
 800e702:	4b1a      	ldr	r3, [pc, #104]	; (800e76c <LTDC_Init+0x128>)
 800e704:	400b      	ands	r3, r1
 800e706:	6193      	str	r3, [r2, #24]
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 800e708:	4b16      	ldr	r3, [pc, #88]	; (800e764 <LTDC_Init+0x120>)
 800e70a:	4a16      	ldr	r2, [pc, #88]	; (800e764 <LTDC_Init+0x120>)
 800e70c:	6991      	ldr	r1, [r2, #24]
 800e70e:	687a      	ldr	r2, [r7, #4]
 800e710:	6810      	ldr	r0, [r2, #0]
 800e712:	687a      	ldr	r2, [r7, #4]
 800e714:	6852      	ldr	r2, [r2, #4]
 800e716:	4310      	orrs	r0, r2
                           LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);
 800e718:	687a      	ldr	r2, [r7, #4]
 800e71a:	6892      	ldr	r2, [r2, #8]
  LTDC->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
  totalwidth = (LTDC_InitStruct->LTDC_TotalWidth << 16);
  LTDC->TWCR |= (totalwidth | LTDC_InitStruct->LTDC_TotalHeigh);

  LTDC->GCR &= (uint32_t)GCR_MASK;
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 800e71c:	4310      	orrs	r0, r2
                           LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);
 800e71e:	687a      	ldr	r2, [r7, #4]
 800e720:	68d2      	ldr	r2, [r2, #12]
  LTDC->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
  totalwidth = (LTDC_InitStruct->LTDC_TotalWidth << 16);
  LTDC->TWCR |= (totalwidth | LTDC_InitStruct->LTDC_TotalHeigh);

  LTDC->GCR &= (uint32_t)GCR_MASK;
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 800e722:	4302      	orrs	r2, r0
 800e724:	430a      	orrs	r2, r1
 800e726:	619a      	str	r2, [r3, #24]
                           LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);

  /* sets the background color value */
  backgreen = (LTDC_InitStruct->LTDC_BackgroundGreenValue << 8);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e72c:	021b      	lsls	r3, r3, #8
 800e72e:	60fb      	str	r3, [r7, #12]
  backred = (LTDC_InitStruct->LTDC_BackgroundRedValue << 16);
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e734:	041b      	lsls	r3, r3, #16
 800e736:	60bb      	str	r3, [r7, #8]

  LTDC->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800e738:	4b0a      	ldr	r3, [pc, #40]	; (800e764 <LTDC_Init+0x120>)
 800e73a:	4a0a      	ldr	r2, [pc, #40]	; (800e764 <LTDC_Init+0x120>)
 800e73c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e73e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800e742:	62da      	str	r2, [r3, #44]	; 0x2c
  LTDC->BCCR |= (backred | backgreen | LTDC_InitStruct->LTDC_BackgroundBlueValue);
 800e744:	4b07      	ldr	r3, [pc, #28]	; (800e764 <LTDC_Init+0x120>)
 800e746:	4a07      	ldr	r2, [pc, #28]	; (800e764 <LTDC_Init+0x120>)
 800e748:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800e74a:	68b8      	ldr	r0, [r7, #8]
 800e74c:	68fa      	ldr	r2, [r7, #12]
 800e74e:	4310      	orrs	r0, r2
 800e750:	687a      	ldr	r2, [r7, #4]
 800e752:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e754:	4302      	orrs	r2, r0
 800e756:	430a      	orrs	r2, r1
 800e758:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800e75a:	3724      	adds	r7, #36	; 0x24
 800e75c:	46bd      	mov	sp, r7
 800e75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e762:	4770      	bx	lr
 800e764:	40016800 	.word	0x40016800
 800e768:	f000f800 	.word	0xf000f800
 800e76c:	0ffe888f 	.word	0x0ffe888f

0800e770 <LTDC_StructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_StructInit(LTDC_InitTypeDef* LTDC_InitStruct)
{
 800e770:	b480      	push	{r7}
 800e772:	b083      	sub	sp, #12
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
  /*--------------- Reset LTDC init structure parameters values ----------------*/
  LTDC_InitStruct->LTDC_HSPolarity = LTDC_HSPolarity_AL;      /*!< Initialize the LTDC_HSPolarity member */ 
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2200      	movs	r2, #0
 800e77c:	601a      	str	r2, [r3, #0]
  LTDC_InitStruct->LTDC_VSPolarity = LTDC_VSPolarity_AL;      /*!< Initialize the LTDC_VSPolarity member */
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	2200      	movs	r2, #0
 800e782:	605a      	str	r2, [r3, #4]
  LTDC_InitStruct->LTDC_DEPolarity = LTDC_DEPolarity_AL;      /*!< Initialize the LTDC_DEPolarity member */
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2200      	movs	r2, #0
 800e788:	609a      	str	r2, [r3, #8]
  LTDC_InitStruct->LTDC_PCPolarity = LTDC_PCPolarity_IPC;     /*!< Initialize the LTDC_PCPolarity member */
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	2200      	movs	r2, #0
 800e78e:	60da      	str	r2, [r3, #12]
  LTDC_InitStruct->LTDC_HorizontalSync = 0x00;                /*!< Initialize the LTDC_HorizontalSync member */
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	2200      	movs	r2, #0
 800e794:	611a      	str	r2, [r3, #16]
  LTDC_InitStruct->LTDC_VerticalSync = 0x00;                  /*!< Initialize the LTDC_VerticalSync member */
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	2200      	movs	r2, #0
 800e79a:	615a      	str	r2, [r3, #20]
  LTDC_InitStruct->LTDC_AccumulatedHBP = 0x00;                /*!< Initialize the LTDC_AccumulatedHBP member */
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	2200      	movs	r2, #0
 800e7a0:	619a      	str	r2, [r3, #24]
  LTDC_InitStruct->LTDC_AccumulatedVBP = 0x00;                /*!< Initialize the LTDC_AccumulatedVBP member */
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	61da      	str	r2, [r3, #28]
  LTDC_InitStruct->LTDC_AccumulatedActiveW = 0x00;            /*!< Initialize the LTDC_AccumulatedActiveW member */
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	621a      	str	r2, [r3, #32]
  LTDC_InitStruct->LTDC_AccumulatedActiveH = 0x00;            /*!< Initialize the LTDC_AccumulatedActiveH member */
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	625a      	str	r2, [r3, #36]	; 0x24
  LTDC_InitStruct->LTDC_TotalWidth = 0x00;                    /*!< Initialize the LTDC_TotalWidth member */
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	629a      	str	r2, [r3, #40]	; 0x28
  LTDC_InitStruct->LTDC_TotalHeigh = 0x00;                    /*!< Initialize the LTDC_TotalHeigh member */
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	2200      	movs	r2, #0
 800e7be:	62da      	str	r2, [r3, #44]	; 0x2c
  LTDC_InitStruct->LTDC_BackgroundRedValue = 0x00;            /*!< Initialize the LTDC_BackgroundRedValue member */
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	631a      	str	r2, [r3, #48]	; 0x30
  LTDC_InitStruct->LTDC_BackgroundGreenValue = 0x00;          /*!< Initialize the LTDC_BackgroundGreenValue member */
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC_InitStruct->LTDC_BackgroundBlueValue = 0x00;           /*!< Initialize the LTDC_BackgroundBlueValue member */
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	639a      	str	r2, [r3, #56]	; 0x38
}
 800e7d2:	370c      	adds	r7, #12
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7da:	4770      	bx	lr

0800e7dc <LTDC_Cmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_Cmd(FunctionalState NewState)
{
 800e7dc:	b480      	push	{r7}
 800e7de:	b083      	sub	sp, #12
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800e7e6:	79fb      	ldrb	r3, [r7, #7]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d006      	beq.n	800e7fa <LTDC_Cmd+0x1e>
  {
    /* Enable LTDC by setting LTDCEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_LTDCEN;
 800e7ec:	4b08      	ldr	r3, [pc, #32]	; (800e810 <LTDC_Cmd+0x34>)
 800e7ee:	4a08      	ldr	r2, [pc, #32]	; (800e810 <LTDC_Cmd+0x34>)
 800e7f0:	6992      	ldr	r2, [r2, #24]
 800e7f2:	f042 0201 	orr.w	r2, r2, #1
 800e7f6:	619a      	str	r2, [r3, #24]
 800e7f8:	e005      	b.n	800e806 <LTDC_Cmd+0x2a>
  }
  else
  {
    /* Disable LTDC by clearing LTDCEN bit */
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_LTDCEN;
 800e7fa:	4b05      	ldr	r3, [pc, #20]	; (800e810 <LTDC_Cmd+0x34>)
 800e7fc:	4a04      	ldr	r2, [pc, #16]	; (800e810 <LTDC_Cmd+0x34>)
 800e7fe:	6992      	ldr	r2, [r2, #24]
 800e800:	f022 0201 	bic.w	r2, r2, #1
 800e804:	619a      	str	r2, [r3, #24]
  }
}
 800e806:	370c      	adds	r7, #12
 800e808:	46bd      	mov	sp, r7
 800e80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80e:	4770      	bx	lr
 800e810:	40016800 	.word	0x40016800

0800e814 <LTDC_DitherCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_DitherCmd(FunctionalState NewState)
{
 800e814:	b480      	push	{r7}
 800e816:	b083      	sub	sp, #12
 800e818:	af00      	add	r7, sp, #0
 800e81a:	4603      	mov	r3, r0
 800e81c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800e81e:	79fb      	ldrb	r3, [r7, #7]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d006      	beq.n	800e832 <LTDC_DitherCmd+0x1e>
  {
    /* Enable Dither by setting DTEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_DTEN;
 800e824:	4b08      	ldr	r3, [pc, #32]	; (800e848 <LTDC_DitherCmd+0x34>)
 800e826:	4a08      	ldr	r2, [pc, #32]	; (800e848 <LTDC_DitherCmd+0x34>)
 800e828:	6992      	ldr	r2, [r2, #24]
 800e82a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800e82e:	619a      	str	r2, [r3, #24]
 800e830:	e005      	b.n	800e83e <LTDC_DitherCmd+0x2a>
  }
  else
  {
    /* Disable Dither by clearing DTEN bit */
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_DTEN;
 800e832:	4b05      	ldr	r3, [pc, #20]	; (800e848 <LTDC_DitherCmd+0x34>)
 800e834:	4a04      	ldr	r2, [pc, #16]	; (800e848 <LTDC_DitherCmd+0x34>)
 800e836:	6992      	ldr	r2, [r2, #24]
 800e838:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800e83c:	619a      	str	r2, [r3, #24]
  }
}
 800e83e:	370c      	adds	r7, #12
 800e840:	46bd      	mov	sp, r7
 800e842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e846:	4770      	bx	lr
 800e848:	40016800 	.word	0x40016800

0800e84c <LTDC_GetRGBWidth>:
  *         the Dither RGB width.
  * @retval None
  */

LTDC_RGBTypeDef LTDC_GetRGBWidth(void)
{
 800e84c:	b480      	push	{r7}
 800e84e:	b087      	sub	sp, #28
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
  LTDC_RGBTypeDef LTDC_RGB_InitStruct;

  LTDC->GCR &= (uint32_t)GCR_MASK;
 800e854:	4a11      	ldr	r2, [pc, #68]	; (800e89c <LTDC_GetRGBWidth+0x50>)
 800e856:	4b11      	ldr	r3, [pc, #68]	; (800e89c <LTDC_GetRGBWidth+0x50>)
 800e858:	6999      	ldr	r1, [r3, #24]
 800e85a:	4b11      	ldr	r3, [pc, #68]	; (800e8a0 <LTDC_GetRGBWidth+0x54>)
 800e85c:	400b      	ands	r3, r1
 800e85e:	6193      	str	r3, [r2, #24]

  LTDC_RGB_InitStruct.LTDC_BlueWidth = (uint32_t)((LTDC->GCR >> 4) & 0x7);
 800e860:	4b0e      	ldr	r3, [pc, #56]	; (800e89c <LTDC_GetRGBWidth+0x50>)
 800e862:	699b      	ldr	r3, [r3, #24]
 800e864:	091b      	lsrs	r3, r3, #4
 800e866:	f003 0307 	and.w	r3, r3, #7
 800e86a:	60fb      	str	r3, [r7, #12]
  LTDC_RGB_InitStruct.LTDC_GreenWidth = (uint32_t)((LTDC->GCR >> 8) & 0x7);
 800e86c:	4b0b      	ldr	r3, [pc, #44]	; (800e89c <LTDC_GetRGBWidth+0x50>)
 800e86e:	699b      	ldr	r3, [r3, #24]
 800e870:	0a1b      	lsrs	r3, r3, #8
 800e872:	f003 0307 	and.w	r3, r3, #7
 800e876:	613b      	str	r3, [r7, #16]
  LTDC_RGB_InitStruct.LTDC_RedWidth = (uint32_t)((LTDC->GCR >> 12) & 0x7);
 800e878:	4b08      	ldr	r3, [pc, #32]	; (800e89c <LTDC_GetRGBWidth+0x50>)
 800e87a:	699b      	ldr	r3, [r3, #24]
 800e87c:	0b1b      	lsrs	r3, r3, #12
 800e87e:	f003 0307 	and.w	r3, r3, #7
 800e882:	617b      	str	r3, [r7, #20]

  return LTDC_RGB_InitStruct;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	f107 020c 	add.w	r2, r7, #12
 800e88a:	ca07      	ldmia	r2, {r0, r1, r2}
 800e88c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800e890:	6878      	ldr	r0, [r7, #4]
 800e892:	371c      	adds	r7, #28
 800e894:	46bd      	mov	sp, r7
 800e896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89a:	4770      	bx	lr
 800e89c:	40016800 	.word	0x40016800
 800e8a0:	0ffe888f 	.word	0x0ffe888f

0800e8a4 <LTDC_RGBStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_RGBStructInit(LTDC_RGBTypeDef* LTDC_RGB_InitStruct)
{
 800e8a4:	b480      	push	{r7}
 800e8a6:	b083      	sub	sp, #12
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
  LTDC_RGB_InitStruct->LTDC_BlueWidth = 0x02;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	2202      	movs	r2, #2
 800e8b0:	601a      	str	r2, [r3, #0]
  LTDC_RGB_InitStruct->LTDC_GreenWidth = 0x02;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	2202      	movs	r2, #2
 800e8b6:	605a      	str	r2, [r3, #4]
  LTDC_RGB_InitStruct->LTDC_RedWidth = 0x02;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2202      	movs	r2, #2
 800e8bc:	609a      	str	r2, [r3, #8]
}
 800e8be:	370c      	adds	r7, #12
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c6:	4770      	bx	lr

0800e8c8 <LTDC_LIPConfig>:
  * @param  LTDC_LIPositionConfig: Line Interrupt Position.
  * @retval None
  */

void LTDC_LIPConfig(uint32_t LTDC_LIPositionConfig)
{
 800e8c8:	b480      	push	{r7}
 800e8ca:	b083      	sub	sp, #12
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(LTDC_LIPositionConfig));

  /* Sets the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)LTDC_LIPositionConfig;
 800e8d0:	4b03      	ldr	r3, [pc, #12]	; (800e8e0 <LTDC_LIPConfig+0x18>)
 800e8d2:	687a      	ldr	r2, [r7, #4]
 800e8d4:	641a      	str	r2, [r3, #64]	; 0x40
}
 800e8d6:	370c      	adds	r7, #12
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8de:	4770      	bx	lr
 800e8e0:	40016800 	.word	0x40016800

0800e8e4 <LTDC_ReloadConfig>:
  *     @arg LTDC_VBReload: Immediate reload.  
  * @retval None
  */

void LTDC_ReloadConfig(uint32_t LTDC_Reload)
{
 800e8e4:	b480      	push	{r7}
 800e8e6:	b083      	sub	sp, #12
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(LTDC_Reload));

  /* Sets the Reload type */
  LTDC->SRCR = (uint32_t)LTDC_Reload;
 800e8ec:	4b03      	ldr	r3, [pc, #12]	; (800e8fc <LTDC_ReloadConfig+0x18>)
 800e8ee:	687a      	ldr	r2, [r7, #4]
 800e8f0:	625a      	str	r2, [r3, #36]	; 0x24
}
 800e8f2:	370c      	adds	r7, #12
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fa:	4770      	bx	lr
 800e8fc:	40016800 	.word	0x40016800

0800e900 <LTDC_LayerInit>:
  *         the configuration information for the specified LTDC peripheral.
  * @retval None
  */

void LTDC_LayerInit(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_Layer_InitTypeDef* LTDC_Layer_InitStruct)
{
 800e900:	b480      	push	{r7}
 800e902:	b089      	sub	sp, #36	; 0x24
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
 800e908:	6039      	str	r1, [r7, #0]

  uint32_t whsppos = 0;
 800e90a:	2300      	movs	r3, #0
 800e90c:	61fb      	str	r3, [r7, #28]
  uint32_t wvsppos = 0;
 800e90e:	2300      	movs	r3, #0
 800e910:	61bb      	str	r3, [r7, #24]
  uint32_t dcgreen = 0;
 800e912:	2300      	movs	r3, #0
 800e914:	617b      	str	r3, [r7, #20]
  uint32_t dcred = 0;
 800e916:	2300      	movs	r3, #0
 800e918:	613b      	str	r3, [r7, #16]
  uint32_t dcalpha = 0;
 800e91a:	2300      	movs	r3, #0
 800e91c:	60fb      	str	r3, [r7, #12]
  uint32_t cfbp = 0;
 800e91e:	2300      	movs	r3, #0
 800e920:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LTDC_CFBP(LTDC_Layer_InitStruct->LTDC_CFBPitch));
  assert_param(IS_LTDC_CFBLL(LTDC_Layer_InitStruct->LTDC_CFBLineLength));
  assert_param(IS_LTDC_CFBLNBR(LTDC_Layer_InitStruct->LTDC_CFBLineNumber));

  /* Configures the horizontal start and stop position */
  whsppos = LTDC_Layer_InitStruct->LTDC_HorizontalStop << 16;
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	685b      	ldr	r3, [r3, #4]
 800e926:	041b      	lsls	r3, r3, #16
 800e928:	61fb      	str	r3, [r7, #28]
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	685b      	ldr	r3, [r3, #4]
 800e92e:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WHPCR = (LTDC_Layer_InitStruct->LTDC_HorizontalStart | whsppos);
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	681a      	ldr	r2, [r3, #0]
 800e93a:	69fb      	ldr	r3, [r7, #28]
 800e93c:	431a      	orrs	r2, r3
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	605a      	str	r2, [r3, #4]

  /* Configures the vertical start and stop position */
  wvsppos = LTDC_Layer_InitStruct->LTDC_VerticalStop << 16;
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	68db      	ldr	r3, [r3, #12]
 800e946:	041b      	lsls	r3, r3, #16
 800e948:	61bb      	str	r3, [r7, #24]
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	689b      	ldr	r3, [r3, #8]
 800e94e:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	609a      	str	r2, [r3, #8]
  LTDC_Layerx->WVPCR  = (LTDC_Layer_InitStruct->LTDC_VerticalStart | wvsppos);
 800e956:	683b      	ldr	r3, [r7, #0]
 800e958:	689a      	ldr	r2, [r3, #8]
 800e95a:	69bb      	ldr	r3, [r7, #24]
 800e95c:	431a      	orrs	r2, r3
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	609a      	str	r2, [r3, #8]

  /* Specifies the pixel format */
  LTDC_Layerx->PFCR &= ~(LTDC_LxPFCR_PF);
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	691b      	ldr	r3, [r3, #16]
 800e966:	f023 0207 	bic.w	r2, r3, #7
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	611a      	str	r2, [r3, #16]
  LTDC_Layerx->PFCR = (LTDC_Layer_InitStruct->LTDC_PixelFormat);
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	691a      	ldr	r2, [r3, #16]
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	611a      	str	r2, [r3, #16]

  /* Configures the default color values */
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	69db      	ldr	r3, [r3, #28]
 800e97a:	021b      	lsls	r3, r3, #8
 800e97c:	617b      	str	r3, [r7, #20]
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	6a1b      	ldr	r3, [r3, #32]
 800e982:	041b      	lsls	r3, r3, #16
 800e984:	613b      	str	r3, [r7, #16]
  dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
 800e986:	683b      	ldr	r3, [r7, #0]
 800e988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e98a:	061b      	lsls	r3, r3, #24
 800e98c:	60fb      	str	r3, [r7, #12]
  LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	699b      	ldr	r3, [r3, #24]
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2200      	movs	r2, #0
 800e996:	619a      	str	r2, [r3, #24]
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	699a      	ldr	r2, [r3, #24]
 800e99c:	697b      	ldr	r3, [r7, #20]
 800e99e:	431a      	orrs	r2, r3
 800e9a0:	693b      	ldr	r3, [r7, #16]
 800e9a2:	431a      	orrs	r2, r3
                        dcred | dcalpha);
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	431a      	orrs	r2, r3
  /* Configures the default color values */
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
  dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
  LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	619a      	str	r2, [r3, #24]
                        dcred | dcalpha);

  /* Specifies the constant alpha value */      
  LTDC_Layerx->CACR &= ~(LTDC_LxCACR_CONSTA);
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	695b      	ldr	r3, [r3, #20]
 800e9b0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	615a      	str	r2, [r3, #20]
  LTDC_Layerx->CACR = (LTDC_Layer_InitStruct->LTDC_ConstantAlpha);
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	695a      	ldr	r2, [r3, #20]
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	615a      	str	r2, [r3, #20]

  /* Specifies the blending factors */
  LTDC_Layerx->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	69db      	ldr	r3, [r3, #28]
 800e9c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800e9c8:	f023 0307 	bic.w	r3, r3, #7
 800e9cc:	687a      	ldr	r2, [r7, #4]
 800e9ce:	61d3      	str	r3, [r2, #28]
  LTDC_Layerx->BFCR = (LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 | LTDC_Layer_InitStruct->LTDC_BlendingFactor_2);
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9d8:	431a      	orrs	r2, r3
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	61da      	str	r2, [r3, #28]

  /* Configures the color frame buffer start address */
  LTDC_Layerx->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	629a      	str	r2, [r3, #40]	; 0x28
  LTDC_Layerx->CFBAR = (LTDC_Layer_InitStruct->LTDC_CFBStartAdress);
 800e9e8:	683b      	ldr	r3, [r7, #0]
 800e9ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	629a      	str	r2, [r3, #40]	; 0x28

  /* Configures the color frame buffer pitch in byte */
  cfbp = (LTDC_Layer_InitStruct->LTDC_CFBPitch << 16);
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9f4:	041b      	lsls	r3, r3, #16
 800e9f6:	60bb      	str	r3, [r7, #8]
  LTDC_Layerx->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9fc:	f003 22e0 	and.w	r2, r3, #3758153728	; 0xe000e000
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	62da      	str	r2, [r3, #44]	; 0x2c
  LTDC_Layerx->CFBLR  = (LTDC_Layer_InitStruct->LTDC_CFBLineLength | cfbp);
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea08:	68bb      	ldr	r3, [r7, #8]
 800ea0a:	431a      	orrs	r2, r3
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_Layerx->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea14:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ea18:	f023 0307 	bic.w	r3, r3, #7
 800ea1c:	687a      	ldr	r2, [r7, #4]
 800ea1e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_Layerx->CFBLNR  = (LTDC_Layer_InitStruct->LTDC_CFBLineNumber);
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	631a      	str	r2, [r3, #48]	; 0x30

}
 800ea28:	3724      	adds	r7, #36	; 0x24
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea30:	4770      	bx	lr
 800ea32:	bf00      	nop

0800ea34 <LTDC_LayerStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_LayerStructInit(LTDC_Layer_InitTypeDef * LTDC_Layer_InitStruct)
{
 800ea34:	b480      	push	{r7}
 800ea36:	b083      	sub	sp, #12
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
  /*--------------- Reset Layer structure parameters values -------------------*/

  /*!< Initialize the horizontal limit member */
  LTDC_Layer_InitStruct->LTDC_HorizontalStart = 0x00;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	2200      	movs	r2, #0
 800ea40:	601a      	str	r2, [r3, #0]
  LTDC_Layer_InitStruct->LTDC_HorizontalStop = 0x00;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	2200      	movs	r2, #0
 800ea46:	605a      	str	r2, [r3, #4]

  /*!< Initialize the vertical limit member */
  LTDC_Layer_InitStruct->LTDC_VerticalStart = 0x00;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	609a      	str	r2, [r3, #8]
  LTDC_Layer_InitStruct->LTDC_VerticalStop = 0x00;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	2200      	movs	r2, #0
 800ea52:	60da      	str	r2, [r3, #12]

  /*!< Initialize the pixel format member */
  LTDC_Layer_InitStruct->LTDC_PixelFormat = LTDC_Pixelformat_ARGB8888;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2200      	movs	r2, #0
 800ea58:	611a      	str	r2, [r3, #16]

  /*!< Initialize the constant alpha value */
  LTDC_Layer_InitStruct->LTDC_ConstantAlpha = 0xFF;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	22ff      	movs	r2, #255	; 0xff
 800ea5e:	615a      	str	r2, [r3, #20]

  /*!< Initialize the default color values */
  LTDC_Layer_InitStruct->LTDC_DefaultColorBlue = 0x00;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	2200      	movs	r2, #0
 800ea64:	619a      	str	r2, [r3, #24]
  LTDC_Layer_InitStruct->LTDC_DefaultColorGreen = 0x00;
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	2200      	movs	r2, #0
 800ea6a:	61da      	str	r2, [r3, #28]
  LTDC_Layer_InitStruct->LTDC_DefaultColorRed = 0x00;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2200      	movs	r2, #0
 800ea70:	621a      	str	r2, [r3, #32]
  LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha = 0x00;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	2200      	movs	r2, #0
 800ea76:	625a      	str	r2, [r3, #36]	; 0x24

  /*!< Initialize the blending factors */
  LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_PAxCA;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800ea7e:	629a      	str	r2, [r3, #40]	; 0x28
  LTDC_Layer_InitStruct->LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_PAxCA;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	2207      	movs	r2, #7
 800ea84:	62da      	str	r2, [r3, #44]	; 0x2c

  /*!< Initialize the frame buffer start address */
  LTDC_Layer_InitStruct->LTDC_CFBStartAdress = 0x00;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	2200      	movs	r2, #0
 800ea8a:	631a      	str	r2, [r3, #48]	; 0x30

  /*!< Initialize the frame buffer pitch and line length */
  LTDC_Layer_InitStruct->LTDC_CFBLineLength = 0x00;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2200      	movs	r2, #0
 800ea90:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC_Layer_InitStruct->LTDC_CFBPitch = 0x00;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	2200      	movs	r2, #0
 800ea96:	639a      	str	r2, [r3, #56]	; 0x38

  /*!< Initialize the frame buffer line number */
  LTDC_Layer_InitStruct->LTDC_CFBLineNumber = 0x00;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800ea9e:	370c      	adds	r7, #12
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa6:	4770      	bx	lr

0800eaa8 <LTDC_LayerCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_LayerCmd(LTDC_Layer_TypeDef* LTDC_Layerx, FunctionalState NewState)
{
 800eaa8:	b480      	push	{r7}
 800eaaa:	b083      	sub	sp, #12
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
 800eab0:	460b      	mov	r3, r1
 800eab2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800eab4:	78fb      	ldrb	r3, [r7, #3]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d006      	beq.n	800eac8 <LTDC_LayerCmd+0x20>
  {
    /* Enable LTDC_Layer by setting LEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_LEN;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	f043 0201 	orr.w	r2, r3, #1
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	601a      	str	r2, [r3, #0]
 800eac6:	e005      	b.n	800ead4 <LTDC_LayerCmd+0x2c>
  }
  else
  {
    /* Disable LTDC_Layer by clearing LEN bit */
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_LEN;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	f023 0201 	bic.w	r2, r3, #1
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	601a      	str	r2, [r3, #0]
  }
}
 800ead4:	370c      	adds	r7, #12
 800ead6:	46bd      	mov	sp, r7
 800ead8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eadc:	4770      	bx	lr
 800eade:	bf00      	nop

0800eae0 <LTDC_GetPosStatus>:
  *         the current position.
  * @retval None
  */

LTDC_PosTypeDef LTDC_GetPosStatus(void)
{
 800eae0:	b480      	push	{r7}
 800eae2:	b085      	sub	sp, #20
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
  LTDC_PosTypeDef LTDC_Pos_InitStruct;

  LTDC->CPSR &= ~(LTDC_CPSR_CYPOS | LTDC_CPSR_CXPOS);
 800eae8:	4b0c      	ldr	r3, [pc, #48]	; (800eb1c <LTDC_GetPosStatus+0x3c>)
 800eaea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eaec:	4b0b      	ldr	r3, [pc, #44]	; (800eb1c <LTDC_GetPosStatus+0x3c>)
 800eaee:	2200      	movs	r2, #0
 800eaf0:	645a      	str	r2, [r3, #68]	; 0x44

  LTDC_Pos_InitStruct.LTDC_POSX = (uint32_t)(LTDC->CPSR >> 16);
 800eaf2:	4b0a      	ldr	r3, [pc, #40]	; (800eb1c <LTDC_GetPosStatus+0x3c>)
 800eaf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eaf6:	0c1b      	lsrs	r3, r3, #16
 800eaf8:	60bb      	str	r3, [r7, #8]
  LTDC_Pos_InitStruct.LTDC_POSY = (uint32_t)(LTDC->CPSR & 0xFFFF);
 800eafa:	4b08      	ldr	r3, [pc, #32]	; (800eb1c <LTDC_GetPosStatus+0x3c>)
 800eafc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eafe:	b29b      	uxth	r3, r3
 800eb00:	60fb      	str	r3, [r7, #12]

  return LTDC_Pos_InitStruct;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	f107 0208 	add.w	r2, r7, #8
 800eb08:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eb0c:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800eb10:	6878      	ldr	r0, [r7, #4]
 800eb12:	3714      	adds	r7, #20
 800eb14:	46bd      	mov	sp, r7
 800eb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1a:	4770      	bx	lr
 800eb1c:	40016800 	.word	0x40016800

0800eb20 <LTDC_PosStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_PosStructInit(LTDC_PosTypeDef* LTDC_Pos_InitStruct)
{
 800eb20:	b480      	push	{r7}
 800eb22:	b083      	sub	sp, #12
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
  LTDC_Pos_InitStruct->LTDC_POSX = 0x00;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	601a      	str	r2, [r3, #0]
  LTDC_Pos_InitStruct->LTDC_POSY = 0x00;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	2200      	movs	r2, #0
 800eb32:	605a      	str	r2, [r3, #4]
}
 800eb34:	370c      	adds	r7, #12
 800eb36:	46bd      	mov	sp, r7
 800eb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3c:	4770      	bx	lr
 800eb3e:	bf00      	nop

0800eb40 <LTDC_GetCDStatus>:
  *     @arg LTDC_CD_HSYNC:  Horizontal Synchronization current status.
  * @retval The new state of LTDC_CD (SET or RESET).
  */

FlagStatus LTDC_GetCDStatus(uint32_t LTDC_CD)
{
 800eb40:	b480      	push	{r7}
 800eb42:	b085      	sub	sp, #20
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus;

  /* Check the parameters */
  assert_param(IS_LTDC_GET_CD(LTDC_CD));

  if ((LTDC->CDSR & LTDC_CD) != (uint32_t)RESET)
 800eb48:	4b08      	ldr	r3, [pc, #32]	; (800eb6c <LTDC_GetCDStatus+0x2c>)
 800eb4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	4013      	ands	r3, r2
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d002      	beq.n	800eb5a <LTDC_GetCDStatus+0x1a>
  {
    bitstatus = SET;
 800eb54:	2301      	movs	r3, #1
 800eb56:	73fb      	strb	r3, [r7, #15]
 800eb58:	e001      	b.n	800eb5e <LTDC_GetCDStatus+0x1e>
  }
  else
  {
    bitstatus = RESET;
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800eb5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb60:	4618      	mov	r0, r3
 800eb62:	3714      	adds	r7, #20
 800eb64:	46bd      	mov	sp, r7
 800eb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6a:	4770      	bx	lr
 800eb6c:	40016800 	.word	0x40016800

0800eb70 <LTDC_ColorKeyingConfig>:
  *         one of the following values: LTDC_Layer1, LTDC_Layer2   
  * @retval None
  */

void LTDC_ColorKeyingConfig(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_ColorKeying_InitTypeDef* LTDC_colorkeying_InitStruct, FunctionalState NewState)
{ 
 800eb70:	b480      	push	{r7}
 800eb72:	b087      	sub	sp, #28
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	60f8      	str	r0, [r7, #12]
 800eb78:	60b9      	str	r1, [r7, #8]
 800eb7a:	4613      	mov	r3, r2
 800eb7c:	71fb      	strb	r3, [r7, #7]
  uint32_t ckgreen = 0;
 800eb7e:	2300      	movs	r3, #0
 800eb80:	617b      	str	r3, [r7, #20]
  uint32_t ckred = 0;
 800eb82:	2300      	movs	r3, #0
 800eb84:	613b      	str	r3, [r7, #16]
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue));
  assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyGreen));
  assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed));
  
  if (NewState != DISABLE)
 800eb86:	79fb      	ldrb	r3, [r7, #7]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d01f      	beq.n	800ebcc <LTDC_ColorKeyingConfig+0x5c>
  {
    /* Enable LTDC color keying by setting COLKEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	f043 0202 	orr.w	r2, r3, #2
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	601a      	str	r2, [r3, #0]
    
    /* Sets the color keying values */
    ckgreen = (LTDC_colorkeying_InitStruct->LTDC_ColorKeyGreen << 8);
 800eb98:	68bb      	ldr	r3, [r7, #8]
 800eb9a:	685b      	ldr	r3, [r3, #4]
 800eb9c:	021b      	lsls	r3, r3, #8
 800eb9e:	617b      	str	r3, [r7, #20]
    ckred = (LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed << 16);
 800eba0:	68bb      	ldr	r3, [r7, #8]
 800eba2:	689b      	ldr	r3, [r3, #8]
 800eba4:	041b      	lsls	r3, r3, #16
 800eba6:	613b      	str	r3, [r7, #16]
    LTDC_Layerx->CKCR  &= ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	68db      	ldr	r3, [r3, #12]
 800ebac:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	60da      	str	r2, [r3, #12]
    LTDC_Layerx->CKCR |= (LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue | ckgreen | ckred);
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	68da      	ldr	r2, [r3, #12]
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	6819      	ldr	r1, [r3, #0]
 800ebbc:	697b      	ldr	r3, [r7, #20]
 800ebbe:	4319      	orrs	r1, r3
 800ebc0:	693b      	ldr	r3, [r7, #16]
 800ebc2:	430b      	orrs	r3, r1
 800ebc4:	431a      	orrs	r2, r3
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	60da      	str	r2, [r3, #12]
 800ebca:	e005      	b.n	800ebd8 <LTDC_ColorKeyingConfig+0x68>
  }
  else
  {
    /* Disable LTDC color keying by clearing COLKEN bit */
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	f023 0202 	bic.w	r2, r3, #2
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	601a      	str	r2, [r3, #0]
  }
  
  /* Reload shadow register */
  LTDC->SRCR = LTDC_IMReload;
 800ebd8:	4b03      	ldr	r3, [pc, #12]	; (800ebe8 <LTDC_ColorKeyingConfig+0x78>)
 800ebda:	2201      	movs	r2, #1
 800ebdc:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ebde:	371c      	adds	r7, #28
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe6:	4770      	bx	lr
 800ebe8:	40016800 	.word	0x40016800

0800ebec <LTDC_ColorKeyingStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_ColorKeyingStructInit(LTDC_ColorKeying_InitTypeDef* LTDC_colorkeying_InitStruct)
{
 800ebec:	b480      	push	{r7}
 800ebee:	b083      	sub	sp, #12
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
  /*!< Initialize the color keying values */
  LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue = 0x00;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	601a      	str	r2, [r3, #0]
  LTDC_colorkeying_InitStruct->LTDC_ColorKeyGreen = 0x00;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	605a      	str	r2, [r3, #4]
  LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed = 0x00;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	2200      	movs	r2, #0
 800ec04:	609a      	str	r2, [r3, #8]
}
 800ec06:	370c      	adds	r7, #12
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0e:	4770      	bx	lr

0800ec10 <LTDC_CLUTCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_CLUTCmd(LTDC_Layer_TypeDef* LTDC_Layerx, FunctionalState NewState)
{
 800ec10:	b480      	push	{r7}
 800ec12:	b083      	sub	sp, #12
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
 800ec18:	460b      	mov	r3, r1
 800ec1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800ec1c:	78fb      	ldrb	r3, [r7, #3]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d006      	beq.n	800ec30 <LTDC_CLUTCmd+0x20>
  {
    /* Enable CLUT by setting CLUTEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	f043 0210 	orr.w	r2, r3, #16
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	601a      	str	r2, [r3, #0]
 800ec2e:	e005      	b.n	800ec3c <LTDC_CLUTCmd+0x2c>
  }
  else
  {
    /* Disable CLUT by clearing CLUTEN bit */
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_CLUTEN;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	f023 0210 	bic.w	r2, r3, #16
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	601a      	str	r2, [r3, #0]
  }
  
  /* Reload shadow register */
  LTDC->SRCR = LTDC_IMReload;
 800ec3c:	4b03      	ldr	r3, [pc, #12]	; (800ec4c <LTDC_CLUTCmd+0x3c>)
 800ec3e:	2201      	movs	r2, #1
 800ec40:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ec42:	370c      	adds	r7, #12
 800ec44:	46bd      	mov	sp, r7
 800ec46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4a:	4770      	bx	lr
 800ec4c:	40016800 	.word	0x40016800

0800ec50 <LTDC_CLUTInit>:
  *         one of the following values: LTDC_Layer1, LTDC_Layer2   
  * @retval None
  */

void LTDC_CLUTInit(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_CLUT_InitTypeDef* LTDC_CLUT_InitStruct)
{  
 800ec50:	b480      	push	{r7}
 800ec52:	b087      	sub	sp, #28
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
 800ec58:	6039      	str	r1, [r7, #0]
  uint32_t green = 0;
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	617b      	str	r3, [r7, #20]
  uint32_t red = 0;
 800ec5e:	2300      	movs	r3, #0
 800ec60:	613b      	str	r3, [r7, #16]
  uint32_t clutadd = 0;
 800ec62:	2300      	movs	r3, #0
 800ec64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LTDC_CLUTWR(LTDC_CLUT_InitStruct->LTDC_RedValue));
  assert_param(IS_LTDC_CLUTWR(LTDC_CLUT_InitStruct->LTDC_GreenValue));
  assert_param(IS_LTDC_CLUTWR(LTDC_CLUT_InitStruct->LTDC_BlueValue));
    
  /* Specifies the CLUT address and RGB value */
  green = (LTDC_CLUT_InitStruct->LTDC_GreenValue << 8);
 800ec66:	683b      	ldr	r3, [r7, #0]
 800ec68:	689b      	ldr	r3, [r3, #8]
 800ec6a:	021b      	lsls	r3, r3, #8
 800ec6c:	617b      	str	r3, [r7, #20]
  red = (LTDC_CLUT_InitStruct->LTDC_RedValue << 16);
 800ec6e:	683b      	ldr	r3, [r7, #0]
 800ec70:	68db      	ldr	r3, [r3, #12]
 800ec72:	041b      	lsls	r3, r3, #16
 800ec74:	613b      	str	r3, [r7, #16]
  clutadd = (LTDC_CLUT_InitStruct->LTDC_CLUTAdress << 24);
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	061b      	lsls	r3, r3, #24
 800ec7c:	60fb      	str	r3, [r7, #12]
  LTDC_Layerx->CLUTWR  = (clutadd | LTDC_CLUT_InitStruct->LTDC_BlueValue | \
 800ec7e:	683b      	ldr	r3, [r7, #0]
 800ec80:	685a      	ldr	r2, [r3, #4]
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	431a      	orrs	r2, r3
 800ec86:	697b      	ldr	r3, [r7, #20]
 800ec88:	431a      	orrs	r2, r3
                              green | red);
 800ec8a:	693b      	ldr	r3, [r7, #16]
 800ec8c:	431a      	orrs	r2, r3
    
  /* Specifies the CLUT address and RGB value */
  green = (LTDC_CLUT_InitStruct->LTDC_GreenValue << 8);
  red = (LTDC_CLUT_InitStruct->LTDC_RedValue << 16);
  clutadd = (LTDC_CLUT_InitStruct->LTDC_CLUTAdress << 24);
  LTDC_Layerx->CLUTWR  = (clutadd | LTDC_CLUT_InitStruct->LTDC_BlueValue | \
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	641a      	str	r2, [r3, #64]	; 0x40
                              green | red);
}
 800ec92:	371c      	adds	r7, #28
 800ec94:	46bd      	mov	sp, r7
 800ec96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9a:	4770      	bx	lr

0800ec9c <LTDC_CLUTStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_CLUTStructInit(LTDC_CLUT_InitTypeDef* LTDC_CLUT_InitStruct)
{
 800ec9c:	b480      	push	{r7}
 800ec9e:	b083      	sub	sp, #12
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
  /*!< Initialize the CLUT adress and RGB values */
  LTDC_CLUT_InitStruct->LTDC_CLUTAdress = 0x00;
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	2200      	movs	r2, #0
 800eca8:	601a      	str	r2, [r3, #0]
  LTDC_CLUT_InitStruct->LTDC_BlueValue = 0x00;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2200      	movs	r2, #0
 800ecae:	605a      	str	r2, [r3, #4]
  LTDC_CLUT_InitStruct->LTDC_GreenValue = 0x00;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	609a      	str	r2, [r3, #8]
  LTDC_CLUT_InitStruct->LTDC_RedValue = 0x00;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	2200      	movs	r2, #0
 800ecba:	60da      	str	r2, [r3, #12]
}
 800ecbc:	370c      	adds	r7, #12
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc4:	4770      	bx	lr
 800ecc6:	bf00      	nop

0800ecc8 <LTDC_LayerPosition>:
  * @retval Reload of the shadow registers values must be applied after layer 
  *         position reconfiguration.
  */

void LTDC_LayerPosition(LTDC_Layer_TypeDef* LTDC_Layerx, uint16_t OffsetX, uint16_t OffsetY)
{
 800ecc8:	b480      	push	{r7}
 800ecca:	b089      	sub	sp, #36	; 0x24
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
 800ecd0:	4613      	mov	r3, r2
 800ecd2:	460a      	mov	r2, r1
 800ecd4:	807a      	strh	r2, [r7, #2]
 800ecd6:	803b      	strh	r3, [r7, #0]
  uint32_t horizontal_start;
  uint32_t horizontal_stop;
  uint32_t vertical_start;
  uint32_t vertical_stop;
  
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	685b      	ldr	r3, [r3, #4]
 800ecdc:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	689b      	ldr	r3, [r3, #8]
 800ece8:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	609a      	str	r2, [r3, #8]
  
  /* Reconfigures the horizontal and vertical start position */
  tempreg = LTDC->BPCR;
 800ecf0:	4b2b      	ldr	r3, [pc, #172]	; (800eda0 <LTDC_LayerPosition+0xd8>)
 800ecf2:	68db      	ldr	r3, [r3, #12]
 800ecf4:	61bb      	str	r3, [r7, #24]
  horizontal_start = (tempreg >> 16) + 1 + OffsetX;
 800ecf6:	69bb      	ldr	r3, [r7, #24]
 800ecf8:	0c1a      	lsrs	r2, r3, #16
 800ecfa:	887b      	ldrh	r3, [r7, #2]
 800ecfc:	4413      	add	r3, r2
 800ecfe:	3301      	adds	r3, #1
 800ed00:	617b      	str	r3, [r7, #20]
  vertical_start = (tempreg & 0xFFFF) + 1 + OffsetY;
 800ed02:	69bb      	ldr	r3, [r7, #24]
 800ed04:	b29a      	uxth	r2, r3
 800ed06:	883b      	ldrh	r3, [r7, #0]
 800ed08:	4413      	add	r3, r2
 800ed0a:	3301      	adds	r3, #1
 800ed0c:	613b      	str	r3, [r7, #16]
  
  /* Reconfigures the horizontal and vertical stop position */
  /* Get the number of byte per pixel */
  
  tempreg = LTDC_Layerx->PFCR;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	691b      	ldr	r3, [r3, #16]
 800ed12:	61bb      	str	r3, [r7, #24]
  
  if (tempreg == LTDC_Pixelformat_ARGB8888)
 800ed14:	69bb      	ldr	r3, [r7, #24]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d102      	bne.n	800ed20 <LTDC_LayerPosition+0x58>
  {
    temp = 4;
 800ed1a:	2304      	movs	r3, #4
 800ed1c:	61fb      	str	r3, [r7, #28]
 800ed1e:	e016      	b.n	800ed4e <LTDC_LayerPosition+0x86>
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
 800ed20:	69bb      	ldr	r3, [r7, #24]
 800ed22:	2b01      	cmp	r3, #1
 800ed24:	d102      	bne.n	800ed2c <LTDC_LayerPosition+0x64>
  {
    temp = 3;
 800ed26:	2303      	movs	r3, #3
 800ed28:	61fb      	str	r3, [r7, #28]
 800ed2a:	e010      	b.n	800ed4e <LTDC_LayerPosition+0x86>
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || 
 800ed2c:	69bb      	ldr	r3, [r7, #24]
 800ed2e:	2b04      	cmp	r3, #4
 800ed30:	d008      	beq.n	800ed44 <LTDC_LayerPosition+0x7c>
 800ed32:	69bb      	ldr	r3, [r7, #24]
 800ed34:	2b02      	cmp	r3, #2
 800ed36:	d005      	beq.n	800ed44 <LTDC_LayerPosition+0x7c>
          (tempreg == LTDC_Pixelformat_RGB565)    ||  
 800ed38:	69bb      	ldr	r3, [r7, #24]
 800ed3a:	2b03      	cmp	r3, #3
 800ed3c:	d002      	beq.n	800ed44 <LTDC_LayerPosition+0x7c>
          (tempreg == LTDC_Pixelformat_ARGB1555)  ||
 800ed3e:	69bb      	ldr	r3, [r7, #24]
 800ed40:	2b07      	cmp	r3, #7
 800ed42:	d102      	bne.n	800ed4a <LTDC_LayerPosition+0x82>
          (tempreg == LTDC_Pixelformat_AL88))
  {
    temp = 2;  
 800ed44:	2302      	movs	r3, #2
 800ed46:	61fb      	str	r3, [r7, #28]
 800ed48:	e001      	b.n	800ed4e <LTDC_LayerPosition+0x86>
  }
  else
  {
    temp = 1;
 800ed4a:	2301      	movs	r3, #1
 800ed4c:	61fb      	str	r3, [r7, #28]
  }  
    
  tempreg = LTDC_Layerx->CFBLR;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed52:	61bb      	str	r3, [r7, #24]
  horizontal_stop = (((tempreg & 0x1FFF) - 3)/temp) + horizontal_start - 1;
 800ed54:	69bb      	ldr	r3, [r7, #24]
 800ed56:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ed5a:	1eda      	subs	r2, r3, #3
 800ed5c:	69fb      	ldr	r3, [r7, #28]
 800ed5e:	fbb2 f2f3 	udiv	r2, r2, r3
 800ed62:	697b      	ldr	r3, [r7, #20]
 800ed64:	4413      	add	r3, r2
 800ed66:	3b01      	subs	r3, #1
 800ed68:	60fb      	str	r3, [r7, #12]
  
  tempreg = LTDC_Layerx->CFBLNR;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed6e:	61bb      	str	r3, [r7, #24]
  vertical_stop = (tempreg & 0x7FF) + vertical_start - 1;  
 800ed70:	69bb      	ldr	r3, [r7, #24]
 800ed72:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800ed76:	693b      	ldr	r3, [r7, #16]
 800ed78:	4413      	add	r3, r2
 800ed7a:	3b01      	subs	r3, #1
 800ed7c:	60bb      	str	r3, [r7, #8]
  
  LTDC_Layerx->WHPCR = horizontal_start | (horizontal_stop << 16);
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	041a      	lsls	r2, r3, #16
 800ed82:	697b      	ldr	r3, [r7, #20]
 800ed84:	431a      	orrs	r2, r3
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WVPCR = vertical_start | (vertical_stop << 16);  
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	041a      	lsls	r2, r3, #16
 800ed8e:	693b      	ldr	r3, [r7, #16]
 800ed90:	431a      	orrs	r2, r3
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	609a      	str	r2, [r3, #8]
}
 800ed96:	3724      	adds	r7, #36	; 0x24
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9e:	4770      	bx	lr
 800eda0:	40016800 	.word	0x40016800

0800eda4 <LTDC_LayerAlpha>:
  * @retval Reload of the shadow registers values must be applied after constant 
  *         alpha reconfiguration.         
  */

void LTDC_LayerAlpha(LTDC_Layer_TypeDef* LTDC_Layerx, uint8_t ConstantAlpha)
{  
 800eda4:	b480      	push	{r7}
 800eda6:	b083      	sub	sp, #12
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
 800edac:	460b      	mov	r3, r1
 800edae:	70fb      	strb	r3, [r7, #3]
  /* reconfigure the constant alpha value */      
  LTDC_Layerx->CACR = ConstantAlpha;
 800edb0:	78fa      	ldrb	r2, [r7, #3]
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	615a      	str	r2, [r3, #20]
}
 800edb6:	370c      	adds	r7, #12
 800edb8:	46bd      	mov	sp, r7
 800edba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edbe:	4770      	bx	lr

0800edc0 <LTDC_LayerAddress>:
  * @retval Reload of the shadow registers values must be applied after layer 
  *         address reconfiguration.
  */

void LTDC_LayerAddress(LTDC_Layer_TypeDef* LTDC_Layerx, uint32_t Address)
{
 800edc0:	b480      	push	{r7}
 800edc2:	b083      	sub	sp, #12
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
 800edc8:	6039      	str	r1, [r7, #0]
  /* Reconfigures the color frame buffer start address */
  LTDC_Layerx->CFBAR = Address;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	683a      	ldr	r2, [r7, #0]
 800edce:	629a      	str	r2, [r3, #40]	; 0x28
}
 800edd0:	370c      	adds	r7, #12
 800edd2:	46bd      	mov	sp, r7
 800edd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd8:	4770      	bx	lr
 800edda:	bf00      	nop

0800eddc <LTDC_LayerSize>:
  * @retval Reload of the shadow registers values must be applied after layer 
  *         size reconfiguration.
  */

void LTDC_LayerSize(LTDC_Layer_TypeDef* LTDC_Layerx, uint32_t Width, uint32_t Height)
{
 800eddc:	b480      	push	{r7}
 800edde:	b08b      	sub	sp, #44	; 0x2c
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	60f8      	str	r0, [r7, #12]
 800ede4:	60b9      	str	r1, [r7, #8]
 800ede6:	607a      	str	r2, [r7, #4]
  uint32_t horizontal_start;
  uint32_t horizontal_stop;
  uint32_t vertical_start;
  uint32_t vertical_stop;  
  
  tempreg = LTDC_Layerx->PFCR;
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	691b      	ldr	r3, [r3, #16]
 800edec:	623b      	str	r3, [r7, #32]
  
  if (tempreg == LTDC_Pixelformat_ARGB8888)
 800edee:	6a3b      	ldr	r3, [r7, #32]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d103      	bne.n	800edfc <LTDC_LayerSize+0x20>
  {
    temp = 4;
 800edf4:	2304      	movs	r3, #4
 800edf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800edfa:	e019      	b.n	800ee30 <LTDC_LayerSize+0x54>
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
 800edfc:	6a3b      	ldr	r3, [r7, #32]
 800edfe:	2b01      	cmp	r3, #1
 800ee00:	d103      	bne.n	800ee0a <LTDC_LayerSize+0x2e>
  {
    temp = 3;
 800ee02:	2303      	movs	r3, #3
 800ee04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ee08:	e012      	b.n	800ee30 <LTDC_LayerSize+0x54>
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || \
 800ee0a:	6a3b      	ldr	r3, [r7, #32]
 800ee0c:	2b04      	cmp	r3, #4
 800ee0e:	d008      	beq.n	800ee22 <LTDC_LayerSize+0x46>
 800ee10:	6a3b      	ldr	r3, [r7, #32]
 800ee12:	2b02      	cmp	r3, #2
 800ee14:	d005      	beq.n	800ee22 <LTDC_LayerSize+0x46>
          (tempreg == LTDC_Pixelformat_RGB565)    || \
 800ee16:	6a3b      	ldr	r3, [r7, #32]
 800ee18:	2b03      	cmp	r3, #3
 800ee1a:	d002      	beq.n	800ee22 <LTDC_LayerSize+0x46>
          (tempreg == LTDC_Pixelformat_ARGB1555)  || \
 800ee1c:	6a3b      	ldr	r3, [r7, #32]
 800ee1e:	2b07      	cmp	r3, #7
 800ee20:	d103      	bne.n	800ee2a <LTDC_LayerSize+0x4e>
          (tempreg == LTDC_Pixelformat_AL88))
  {
    temp = 2;  
 800ee22:	2302      	movs	r3, #2
 800ee24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ee28:	e002      	b.n	800ee30 <LTDC_LayerSize+0x54>
  }
  else
  {
    temp = 1;
 800ee2a:	2301      	movs	r3, #1
 800ee2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* update horizontal and vertical stop */
  tempreg = LTDC_Layerx->WHPCR;
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	685b      	ldr	r3, [r3, #4]
 800ee34:	623b      	str	r3, [r7, #32]
  horizontal_start = (tempreg & 0x1FFF);
 800ee36:	6a3b      	ldr	r3, [r7, #32]
 800ee38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ee3c:	61fb      	str	r3, [r7, #28]
  horizontal_stop = Width + horizontal_start - 1;  
 800ee3e:	68ba      	ldr	r2, [r7, #8]
 800ee40:	69fb      	ldr	r3, [r7, #28]
 800ee42:	4413      	add	r3, r2
 800ee44:	3b01      	subs	r3, #1
 800ee46:	61bb      	str	r3, [r7, #24]

  tempreg = LTDC_Layerx->WVPCR;
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	689b      	ldr	r3, [r3, #8]
 800ee4c:	623b      	str	r3, [r7, #32]
  vertical_start = (tempreg & 0x1FFF);
 800ee4e:	6a3b      	ldr	r3, [r7, #32]
 800ee50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ee54:	617b      	str	r3, [r7, #20]
  vertical_stop = Height + vertical_start - 1;  
 800ee56:	687a      	ldr	r2, [r7, #4]
 800ee58:	697b      	ldr	r3, [r7, #20]
 800ee5a:	4413      	add	r3, r2
 800ee5c:	3b01      	subs	r3, #1
 800ee5e:	613b      	str	r3, [r7, #16]
  
  LTDC_Layerx->WHPCR = horizontal_start | (horizontal_stop << 16);
 800ee60:	69bb      	ldr	r3, [r7, #24]
 800ee62:	041a      	lsls	r2, r3, #16
 800ee64:	69fb      	ldr	r3, [r7, #28]
 800ee66:	431a      	orrs	r2, r3
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WVPCR = vertical_start | (vertical_stop << 16);  
 800ee6c:	693b      	ldr	r3, [r7, #16]
 800ee6e:	041a      	lsls	r2, r3, #16
 800ee70:	697b      	ldr	r3, [r7, #20]
 800ee72:	431a      	orrs	r2, r3
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	609a      	str	r2, [r3, #8]

  /* Reconfigures the color frame buffer pitch in byte */
  LTDC_Layerx->CFBLR  = ((Width * temp) << 16) | ((Width * temp) + 3);  
 800ee78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee7c:	68ba      	ldr	r2, [r7, #8]
 800ee7e:	fb02 f303 	mul.w	r3, r2, r3
 800ee82:	041a      	lsls	r2, r3, #16
 800ee84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee88:	68b9      	ldr	r1, [r7, #8]
 800ee8a:	fb01 f303 	mul.w	r3, r1, r3
 800ee8e:	3303      	adds	r3, #3
 800ee90:	431a      	orrs	r2, r3
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reconfigures the frame buffer line number */
  LTDC_Layerx->CFBLNR  = Height;  
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	687a      	ldr	r2, [r7, #4]
 800ee9a:	631a      	str	r2, [r3, #48]	; 0x30
  
}
 800ee9c:	372c      	adds	r7, #44	; 0x2c
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea4:	4770      	bx	lr
 800eea6:	bf00      	nop

0800eea8 <LTDC_LayerPixelFormat>:
  * @retval Reload of the shadow registers values must be applied after layer 
  *         pixel format reconfiguration.
  */

void LTDC_LayerPixelFormat(LTDC_Layer_TypeDef* LTDC_Layerx, uint32_t PixelFormat)
{
 800eea8:	b480      	push	{r7}
 800eeaa:	b085      	sub	sp, #20
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
 800eeb0:	6039      	str	r1, [r7, #0]

  uint8_t temp;
  uint32_t tempreg;
  
  tempreg = LTDC_Layerx->PFCR;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	691b      	ldr	r3, [r3, #16]
 800eeb6:	60bb      	str	r3, [r7, #8]
  
  if (tempreg == LTDC_Pixelformat_ARGB8888)
 800eeb8:	68bb      	ldr	r3, [r7, #8]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d102      	bne.n	800eec4 <LTDC_LayerPixelFormat+0x1c>
  {
    temp = 4;
 800eebe:	2304      	movs	r3, #4
 800eec0:	73fb      	strb	r3, [r7, #15]
 800eec2:	e016      	b.n	800eef2 <LTDC_LayerPixelFormat+0x4a>
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	2b01      	cmp	r3, #1
 800eec8:	d102      	bne.n	800eed0 <LTDC_LayerPixelFormat+0x28>
  {
    temp = 3;
 800eeca:	2303      	movs	r3, #3
 800eecc:	73fb      	strb	r3, [r7, #15]
 800eece:	e010      	b.n	800eef2 <LTDC_LayerPixelFormat+0x4a>
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || \
 800eed0:	68bb      	ldr	r3, [r7, #8]
 800eed2:	2b04      	cmp	r3, #4
 800eed4:	d008      	beq.n	800eee8 <LTDC_LayerPixelFormat+0x40>
 800eed6:	68bb      	ldr	r3, [r7, #8]
 800eed8:	2b02      	cmp	r3, #2
 800eeda:	d005      	beq.n	800eee8 <LTDC_LayerPixelFormat+0x40>
          (tempreg == LTDC_Pixelformat_RGB565)    || \
 800eedc:	68bb      	ldr	r3, [r7, #8]
 800eede:	2b03      	cmp	r3, #3
 800eee0:	d002      	beq.n	800eee8 <LTDC_LayerPixelFormat+0x40>
          (tempreg == LTDC_Pixelformat_ARGB1555)  || \
 800eee2:	68bb      	ldr	r3, [r7, #8]
 800eee4:	2b07      	cmp	r3, #7
 800eee6:	d102      	bne.n	800eeee <LTDC_LayerPixelFormat+0x46>
          (tempreg == LTDC_Pixelformat_AL88))  
  {
    temp = 2;  
 800eee8:	2302      	movs	r3, #2
 800eeea:	73fb      	strb	r3, [r7, #15]
 800eeec:	e001      	b.n	800eef2 <LTDC_LayerPixelFormat+0x4a>
  }
  else
  {
    temp = 1;
 800eeee:	2301      	movs	r3, #1
 800eef0:	73fb      	strb	r3, [r7, #15]
  }
  
  tempreg = (LTDC_Layerx->CFBLR >> 16);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eef6:	0c1b      	lsrs	r3, r3, #16
 800eef8:	60bb      	str	r3, [r7, #8]
  tempreg = (tempreg / temp); 
 800eefa:	7bfb      	ldrb	r3, [r7, #15]
 800eefc:	68ba      	ldr	r2, [r7, #8]
 800eefe:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef02:	60bb      	str	r3, [r7, #8]
  
  if (PixelFormat == LTDC_Pixelformat_ARGB8888)
 800ef04:	683b      	ldr	r3, [r7, #0]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d102      	bne.n	800ef10 <LTDC_LayerPixelFormat+0x68>
  {
    temp = 4;
 800ef0a:	2304      	movs	r3, #4
 800ef0c:	73fb      	strb	r3, [r7, #15]
 800ef0e:	e016      	b.n	800ef3e <LTDC_LayerPixelFormat+0x96>
  }
  else if (PixelFormat == LTDC_Pixelformat_RGB888)
 800ef10:	683b      	ldr	r3, [r7, #0]
 800ef12:	2b01      	cmp	r3, #1
 800ef14:	d102      	bne.n	800ef1c <LTDC_LayerPixelFormat+0x74>
  {
    temp = 3;
 800ef16:	2303      	movs	r3, #3
 800ef18:	73fb      	strb	r3, [r7, #15]
 800ef1a:	e010      	b.n	800ef3e <LTDC_LayerPixelFormat+0x96>
  }
  else if ((PixelFormat == LTDC_Pixelformat_ARGB4444) || \
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	2b04      	cmp	r3, #4
 800ef20:	d008      	beq.n	800ef34 <LTDC_LayerPixelFormat+0x8c>
 800ef22:	683b      	ldr	r3, [r7, #0]
 800ef24:	2b02      	cmp	r3, #2
 800ef26:	d005      	beq.n	800ef34 <LTDC_LayerPixelFormat+0x8c>
          (PixelFormat == LTDC_Pixelformat_RGB565)    || \
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	2b03      	cmp	r3, #3
 800ef2c:	d002      	beq.n	800ef34 <LTDC_LayerPixelFormat+0x8c>
          (PixelFormat == LTDC_Pixelformat_ARGB1555)  || \
 800ef2e:	683b      	ldr	r3, [r7, #0]
 800ef30:	2b07      	cmp	r3, #7
 800ef32:	d102      	bne.n	800ef3a <LTDC_LayerPixelFormat+0x92>
          (PixelFormat == LTDC_Pixelformat_AL88))
  {
    temp = 2;  
 800ef34:	2302      	movs	r3, #2
 800ef36:	73fb      	strb	r3, [r7, #15]
 800ef38:	e001      	b.n	800ef3e <LTDC_LayerPixelFormat+0x96>
  }
  else
  {
    temp = 1;
 800ef3a:	2301      	movs	r3, #1
 800ef3c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Reconfigures the color frame buffer pitch in byte */
  LTDC_Layerx->CFBLR  = ((tempreg * temp) << 16) | ((tempreg * temp) + 3);  
 800ef3e:	7bfb      	ldrb	r3, [r7, #15]
 800ef40:	68ba      	ldr	r2, [r7, #8]
 800ef42:	fb02 f303 	mul.w	r3, r2, r3
 800ef46:	041a      	lsls	r2, r3, #16
 800ef48:	7bfb      	ldrb	r3, [r7, #15]
 800ef4a:	68b9      	ldr	r1, [r7, #8]
 800ef4c:	fb01 f303 	mul.w	r3, r1, r3
 800ef50:	3303      	adds	r3, #3
 800ef52:	431a      	orrs	r2, r3
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reconfigures the color frame buffer start address */
  LTDC_Layerx->PFCR = PixelFormat;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	683a      	ldr	r2, [r7, #0]
 800ef5c:	611a      	str	r2, [r3, #16]
    
}
 800ef5e:	3714      	adds	r7, #20
 800ef60:	46bd      	mov	sp, r7
 800ef62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef66:	4770      	bx	lr

0800ef68 <LTDC_ITConfig>:
  * @param NewState: new state of the specified LTDC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void LTDC_ITConfig(uint32_t LTDC_IT, FunctionalState NewState)
{
 800ef68:	b480      	push	{r7}
 800ef6a:	b083      	sub	sp, #12
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
 800ef70:	460b      	mov	r3, r1
 800ef72:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_LTDC_IT(LTDC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800ef74:	78fb      	ldrb	r3, [r7, #3]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d006      	beq.n	800ef88 <LTDC_ITConfig+0x20>
  {
    LTDC->IER |= LTDC_IT;
 800ef7a:	4b09      	ldr	r3, [pc, #36]	; (800efa0 <LTDC_ITConfig+0x38>)
 800ef7c:	4a08      	ldr	r2, [pc, #32]	; (800efa0 <LTDC_ITConfig+0x38>)
 800ef7e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800ef80:	687a      	ldr	r2, [r7, #4]
 800ef82:	430a      	orrs	r2, r1
 800ef84:	635a      	str	r2, [r3, #52]	; 0x34
 800ef86:	e006      	b.n	800ef96 <LTDC_ITConfig+0x2e>
  }
  else
  {
    LTDC->IER &= (uint32_t)~LTDC_IT;
 800ef88:	4b05      	ldr	r3, [pc, #20]	; (800efa0 <LTDC_ITConfig+0x38>)
 800ef8a:	4a05      	ldr	r2, [pc, #20]	; (800efa0 <LTDC_ITConfig+0x38>)
 800ef8c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800ef8e:	687a      	ldr	r2, [r7, #4]
 800ef90:	43d2      	mvns	r2, r2
 800ef92:	400a      	ands	r2, r1
 800ef94:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 800ef96:	370c      	adds	r7, #12
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9e:	4770      	bx	lr
 800efa0:	40016800 	.word	0x40016800

0800efa4 <LTDC_GetFlagStatus>:
  *     @arg LTDC_FLAG_TERR: Transfer Error Interrupt flag.
  *     @arg LTDC_FLAG_RR:   Register Reload interrupt flag.
  * @retval The new state of LTDC_FLAG (SET or RESET).
  */
FlagStatus LTDC_GetFlagStatus(uint32_t LTDC_FLAG)
{
 800efa4:	b480      	push	{r7}
 800efa6:	b085      	sub	sp, #20
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800efac:	2300      	movs	r3, #0
 800efae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_LTDC_FLAG(LTDC_FLAG));

  if ((LTDC->ISR & LTDC_FLAG) != (uint32_t)RESET)
 800efb0:	4b08      	ldr	r3, [pc, #32]	; (800efd4 <LTDC_GetFlagStatus+0x30>)
 800efb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	4013      	ands	r3, r2
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d002      	beq.n	800efc2 <LTDC_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 800efbc:	2301      	movs	r3, #1
 800efbe:	73fb      	strb	r3, [r7, #15]
 800efc0:	e001      	b.n	800efc6 <LTDC_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800efc2:	2300      	movs	r3, #0
 800efc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800efc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800efc8:	4618      	mov	r0, r3
 800efca:	3714      	adds	r7, #20
 800efcc:	46bd      	mov	sp, r7
 800efce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd2:	4770      	bx	lr
 800efd4:	40016800 	.word	0x40016800

0800efd8 <LTDC_ClearFlag>:
  *     @arg LTDC_FLAG_TERR: Transfer Error Interrupt flag.
  *     @arg LTDC_FLAG_RR:   Register Reload interrupt flag.  
  * @retval None
  */
void LTDC_ClearFlag(uint32_t LTDC_FLAG)
{
 800efd8:	b480      	push	{r7}
 800efda:	b083      	sub	sp, #12
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_FLAG(LTDC_FLAG));

  /* Clear the corresponding LTDC flag */
  LTDC->ICR = (uint32_t)LTDC_FLAG;
 800efe0:	4b03      	ldr	r3, [pc, #12]	; (800eff0 <LTDC_ClearFlag+0x18>)
 800efe2:	687a      	ldr	r2, [r7, #4]
 800efe4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800efe6:	370c      	adds	r7, #12
 800efe8:	46bd      	mov	sp, r7
 800efea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efee:	4770      	bx	lr
 800eff0:	40016800 	.word	0x40016800

0800eff4 <LTDC_GetITStatus>:
  *     @arg LTDC_IT_TERR: Transfer Error Interrupt Enable.
  *     @arg LTDC_IT_RR:   Register Reload interrupt Enable.
  * @retval The new state of the LTDC_IT (SET or RESET).
  */
ITStatus LTDC_GetITStatus(uint32_t LTDC_IT)
{
 800eff4:	b480      	push	{r7}
 800eff6:	b085      	sub	sp, #20
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800effc:	2300      	movs	r3, #0
 800effe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_LTDC_IT(LTDC_IT));

  if ((LTDC->ISR & LTDC_IT) != (uint32_t)RESET)
 800f000:	4b0f      	ldr	r3, [pc, #60]	; (800f040 <LTDC_GetITStatus+0x4c>)
 800f002:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	4013      	ands	r3, r2
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d002      	beq.n	800f012 <LTDC_GetITStatus+0x1e>
  {
    bitstatus = SET;
 800f00c:	2301      	movs	r3, #1
 800f00e:	73fb      	strb	r3, [r7, #15]
 800f010:	e001      	b.n	800f016 <LTDC_GetITStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800f012:	2300      	movs	r3, #0
 800f014:	73fb      	strb	r3, [r7, #15]
  }

  if (((LTDC->IER & LTDC_IT) != (uint32_t)RESET) && (bitstatus != (uint32_t)RESET))
 800f016:	4b0a      	ldr	r3, [pc, #40]	; (800f040 <LTDC_GetITStatus+0x4c>)
 800f018:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	4013      	ands	r3, r2
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d005      	beq.n	800f02e <LTDC_GetITStatus+0x3a>
 800f022:	7bfb      	ldrb	r3, [r7, #15]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d002      	beq.n	800f02e <LTDC_GetITStatus+0x3a>
  {
    bitstatus = SET;
 800f028:	2301      	movs	r3, #1
 800f02a:	73fb      	strb	r3, [r7, #15]
 800f02c:	e001      	b.n	800f032 <LTDC_GetITStatus+0x3e>
  }
  else
  {
    bitstatus = RESET;
 800f02e:	2300      	movs	r3, #0
 800f030:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800f032:	7bfb      	ldrb	r3, [r7, #15]
}
 800f034:	4618      	mov	r0, r3
 800f036:	3714      	adds	r7, #20
 800f038:	46bd      	mov	sp, r7
 800f03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03e:	4770      	bx	lr
 800f040:	40016800 	.word	0x40016800

0800f044 <LTDC_ClearITPendingBit>:
  *     @arg LTDC_IT_TERRIE: Transfer Error Interrupt.
  *     @arg LTDC_IT_RRIE:   Register Reload interrupt.
  * @retval None
  */
void LTDC_ClearITPendingBit(uint32_t LTDC_IT)
{
 800f044:	b480      	push	{r7}
 800f046:	b083      	sub	sp, #12
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_IT(LTDC_IT));

  /* Clear the corresponding LTDC Interrupt */
  LTDC->ICR = (uint32_t)LTDC_IT;
 800f04c:	4b03      	ldr	r3, [pc, #12]	; (800f05c <LTDC_ClearITPendingBit+0x18>)
 800f04e:	687a      	ldr	r2, [r7, #4]
 800f050:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800f052:	370c      	adds	r7, #12
 800f054:	46bd      	mov	sp, r7
 800f056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05a:	4770      	bx	lr
 800f05c:	40016800 	.word	0x40016800

0800f060 <PWR_DeInit>:
  * @brief  Deinitializes the PWR peripheral registers to their default reset values.     
  * @param  None
  * @retval None
  */
void PWR_DeInit(void)
{
 800f060:	b580      	push	{r7, lr}
 800f062:	af00      	add	r7, sp, #0
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 800f064:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800f068:	2101      	movs	r1, #1
 800f06a:	f000 fe3f 	bl	800fcec <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 800f06e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800f072:	2100      	movs	r1, #0
 800f074:	f000 fe3a 	bl	800fcec <RCC_APB1PeriphResetCmd>
}
 800f078:	bd80      	pop	{r7, pc}
 800f07a:	bf00      	nop

0800f07c <PWR_BackupAccessCmd>:
  * @param  NewState: new state of the access to the backup domain.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupAccessCmd(FunctionalState NewState)
{
 800f07c:	b480      	push	{r7}
 800f07e:	b083      	sub	sp, #12
 800f080:	af00      	add	r7, sp, #0
 800f082:	4603      	mov	r3, r0
 800f084:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 800f086:	4b04      	ldr	r3, [pc, #16]	; (800f098 <PWR_BackupAccessCmd+0x1c>)
 800f088:	79fa      	ldrb	r2, [r7, #7]
 800f08a:	601a      	str	r2, [r3, #0]
}
 800f08c:	370c      	adds	r7, #12
 800f08e:	46bd      	mov	sp, r7
 800f090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f094:	4770      	bx	lr
 800f096:	bf00      	nop
 800f098:	420e0020 	.word	0x420e0020

0800f09c <PWR_PVDLevelConfig>:
  *         more details about the voltage threshold corresponding to each 
  *         detection level.
  * @retval None
  */
void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
{
 800f09c:	b480      	push	{r7}
 800f09e:	b085      	sub	sp, #20
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
  
  tmpreg = PWR->CR;
 800f0a8:	4b09      	ldr	r3, [pc, #36]	; (800f0d0 <PWR_PVDLevelConfig+0x34>)
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	60fb      	str	r3, [r7, #12]
  
  /* Clear PLS[7:5] bits */
  tmpreg &= CR_PLS_MASK;
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800f0b4:	60fb      	str	r3, [r7, #12]
  
  /* Set PLS[7:5] bits according to PWR_PVDLevel value */
  tmpreg |= PWR_PVDLevel;
 800f0b6:	68fa      	ldr	r2, [r7, #12]
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	4313      	orrs	r3, r2
 800f0bc:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 800f0be:	4b04      	ldr	r3, [pc, #16]	; (800f0d0 <PWR_PVDLevelConfig+0x34>)
 800f0c0:	68fa      	ldr	r2, [r7, #12]
 800f0c2:	601a      	str	r2, [r3, #0]
}
 800f0c4:	3714      	adds	r7, #20
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0cc:	4770      	bx	lr
 800f0ce:	bf00      	nop
 800f0d0:	40007000 	.word	0x40007000

0800f0d4 <PWR_PVDCmd>:
  * @param  NewState: new state of the PVD.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_PVDCmd(FunctionalState NewState)
{
 800f0d4:	b480      	push	{r7}
 800f0d6:	b083      	sub	sp, #12
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	4603      	mov	r3, r0
 800f0dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 800f0de:	4b04      	ldr	r3, [pc, #16]	; (800f0f0 <PWR_PVDCmd+0x1c>)
 800f0e0:	79fa      	ldrb	r2, [r7, #7]
 800f0e2:	601a      	str	r2, [r3, #0]
}
 800f0e4:	370c      	adds	r7, #12
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ec:	4770      	bx	lr
 800f0ee:	bf00      	nop
 800f0f0:	420e0010 	.word	0x420e0010

0800f0f4 <PWR_WakeUpPinCmd>:
  * @param  NewState: new state of the WakeUp Pin functionality.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_WakeUpPinCmd(FunctionalState NewState)
{
 800f0f4:	b480      	push	{r7}
 800f0f6:	b083      	sub	sp, #12
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 800f0fe:	4b04      	ldr	r3, [pc, #16]	; (800f110 <PWR_WakeUpPinCmd+0x1c>)
 800f100:	79fa      	ldrb	r2, [r7, #7]
 800f102:	601a      	str	r2, [r3, #0]
}
 800f104:	370c      	adds	r7, #12
 800f106:	46bd      	mov	sp, r7
 800f108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10c:	4770      	bx	lr
 800f10e:	bf00      	nop
 800f110:	420e00a0 	.word	0x420e00a0

0800f114 <PWR_BackupRegulatorCmd>:
  * @param  NewState: new state of the Backup Regulator.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupRegulatorCmd(FunctionalState NewState)
{
 800f114:	b480      	push	{r7}
 800f116:	b083      	sub	sp, #12
 800f118:	af00      	add	r7, sp, #0
 800f11a:	4603      	mov	r3, r0
 800f11c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)NewState;
 800f11e:	4b04      	ldr	r3, [pc, #16]	; (800f130 <PWR_BackupRegulatorCmd+0x1c>)
 800f120:	79fa      	ldrb	r2, [r7, #7]
 800f122:	601a      	str	r2, [r3, #0]
}
 800f124:	370c      	adds	r7, #12
 800f126:	46bd      	mov	sp, r7
 800f128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12c:	4770      	bx	lr
 800f12e:	bf00      	nop
 800f130:	420e00a4 	.word	0x420e00a4

0800f134 <PWR_MainRegulatorModeConfig>:
  *            @arg PWR_Regulator_Voltage_Scale3: Regulator voltage output Scale 3 mode, 
  *                                                System frequency up to 120 MHz (only for STM32F42xxx/43xxx devices)
  * @retval None
  */
void PWR_MainRegulatorModeConfig(uint32_t PWR_Regulator_Voltage)
{
 800f134:	b480      	push	{r7}
 800f136:	b085      	sub	sp, #20
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800f13c:	2300      	movs	r3, #0
 800f13e:	60fb      	str	r3, [r7, #12]
	
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_VOLTAGE(PWR_Regulator_Voltage));

  tmpreg = PWR->CR;
 800f140:	4b09      	ldr	r3, [pc, #36]	; (800f168 <PWR_MainRegulatorModeConfig+0x34>)
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	60fb      	str	r3, [r7, #12]
  
  /* Clear VOS[15:14] bits */
  tmpreg &= CR_VOS_MASK;
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800f14c:	60fb      	str	r3, [r7, #12]
  
  /* Set VOS[15:14] bits according to PWR_Regulator_Voltage value */
  tmpreg |= PWR_Regulator_Voltage;
 800f14e:	68fa      	ldr	r2, [r7, #12]
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	4313      	orrs	r3, r2
 800f154:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 800f156:	4b04      	ldr	r3, [pc, #16]	; (800f168 <PWR_MainRegulatorModeConfig+0x34>)
 800f158:	68fa      	ldr	r2, [r7, #12]
 800f15a:	601a      	str	r2, [r3, #0]
}
 800f15c:	3714      	adds	r7, #20
 800f15e:	46bd      	mov	sp, r7
 800f160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f164:	4770      	bx	lr
 800f166:	bf00      	nop
 800f168:	40007000 	.word	0x40007000

0800f16c <PWR_OverDriveCmd>:
  * @param  NewState: new state of the Over Drive mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_OverDriveCmd(FunctionalState NewState)
{
 800f16c:	b480      	push	{r7}
 800f16e:	b083      	sub	sp, #12
 800f170:	af00      	add	r7, sp, #0
 800f172:	4603      	mov	r3, r0
 800f174:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Set/Reset the ODEN bit to enable/disable the Over Drive mode */
  *(__IO uint32_t *) CR_ODEN_BB = (uint32_t)NewState;
 800f176:	4b04      	ldr	r3, [pc, #16]	; (800f188 <PWR_OverDriveCmd+0x1c>)
 800f178:	79fa      	ldrb	r2, [r7, #7]
 800f17a:	601a      	str	r2, [r3, #0]
}
 800f17c:	370c      	adds	r7, #12
 800f17e:	46bd      	mov	sp, r7
 800f180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f184:	4770      	bx	lr
 800f186:	bf00      	nop
 800f188:	420e0040 	.word	0x420e0040

0800f18c <PWR_OverDriveSWCmd>:
  * @param  NewState: new state of the Over Drive switching mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_OverDriveSWCmd(FunctionalState NewState)
{
 800f18c:	b480      	push	{r7}
 800f18e:	b083      	sub	sp, #12
 800f190:	af00      	add	r7, sp, #0
 800f192:	4603      	mov	r3, r0
 800f194:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Set/Reset the ODSWEN bit to enable/disable the Over Drive switching mode */
  *(__IO uint32_t *) CR_ODSWEN_BB = (uint32_t)NewState;
 800f196:	4b04      	ldr	r3, [pc, #16]	; (800f1a8 <PWR_OverDriveSWCmd+0x1c>)
 800f198:	79fa      	ldrb	r2, [r7, #7]
 800f19a:	601a      	str	r2, [r3, #0]
}
 800f19c:	370c      	adds	r7, #12
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a4:	4770      	bx	lr
 800f1a6:	bf00      	nop
 800f1a8:	420e0044 	.word	0x420e0044

0800f1ac <PWR_UnderDriveCmd>:
  * @param  NewState: new state of the Under Drive mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_UnderDriveCmd(FunctionalState NewState)
{
 800f1ac:	b480      	push	{r7}
 800f1ae:	b083      	sub	sp, #12
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800f1b6:	79fb      	ldrb	r3, [r7, #7]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d006      	beq.n	800f1ca <PWR_UnderDriveCmd+0x1e>
  {
    /* Set the UDEN[1:0] bits to enable the Under Drive mode */
    PWR->CR |= (uint32_t)PWR_CR_UDEN;
 800f1bc:	4b08      	ldr	r3, [pc, #32]	; (800f1e0 <PWR_UnderDriveCmd+0x34>)
 800f1be:	4a08      	ldr	r2, [pc, #32]	; (800f1e0 <PWR_UnderDriveCmd+0x34>)
 800f1c0:	6812      	ldr	r2, [r2, #0]
 800f1c2:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 800f1c6:	601a      	str	r2, [r3, #0]
 800f1c8:	e005      	b.n	800f1d6 <PWR_UnderDriveCmd+0x2a>
  }
  else
  {
    /* Reset the UDEN[1:0] bits to disable the Under Drive mode */
    PWR->CR &= (uint32_t)(~PWR_CR_UDEN);
 800f1ca:	4b05      	ldr	r3, [pc, #20]	; (800f1e0 <PWR_UnderDriveCmd+0x34>)
 800f1cc:	4a04      	ldr	r2, [pc, #16]	; (800f1e0 <PWR_UnderDriveCmd+0x34>)
 800f1ce:	6812      	ldr	r2, [r2, #0]
 800f1d0:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800f1d4:	601a      	str	r2, [r3, #0]
  }
}
 800f1d6:	370c      	adds	r7, #12
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1de:	4770      	bx	lr
 800f1e0:	40007000 	.word	0x40007000

0800f1e4 <PWR_FlashPowerDownCmd>:
  * @param  NewState: new state of the Flash power mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_FlashPowerDownCmd(FunctionalState NewState)
{
 800f1e4:	b480      	push	{r7}
 800f1e6:	b083      	sub	sp, #12
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	4603      	mov	r3, r0
 800f1ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)NewState;
 800f1ee:	4b04      	ldr	r3, [pc, #16]	; (800f200 <PWR_FlashPowerDownCmd+0x1c>)
 800f1f0:	79fa      	ldrb	r2, [r7, #7]
 800f1f2:	601a      	str	r2, [r3, #0]
}
 800f1f4:	370c      	adds	r7, #12
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fc:	4770      	bx	lr
 800f1fe:	bf00      	nop
 800f200:	420e0024 	.word	0x420e0024

0800f204 <PWR_EnterSTOPMode>:
  *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
  *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
  * @retval None
  */
void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
{
 800f204:	b480      	push	{r7}
 800f206:	b085      	sub	sp, #20
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
 800f20c:	460b      	mov	r3, r1
 800f20e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 800f210:	2300      	movs	r3, #0
 800f212:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 800f214:	4b13      	ldr	r3, [pc, #76]	; (800f264 <PWR_EnterSTOPMode+0x60>)
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	60fb      	str	r3, [r7, #12]
  /* Clear PDDS and LPDS bits */
  tmpreg &= CR_DS_MASK;
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f220:	f023 0303 	bic.w	r3, r3, #3
 800f224:	60fb      	str	r3, [r7, #12]
  
  /* Set LPDS, MRLVDS and LPLVDS bits according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 800f226:	68fa      	ldr	r2, [r7, #12]
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	4313      	orrs	r3, r2
 800f22c:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 800f22e:	4b0d      	ldr	r3, [pc, #52]	; (800f264 <PWR_EnterSTOPMode+0x60>)
 800f230:	68fa      	ldr	r2, [r7, #12]
 800f232:	601a      	str	r2, [r3, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 800f234:	4b0c      	ldr	r3, [pc, #48]	; (800f268 <PWR_EnterSTOPMode+0x64>)
 800f236:	4a0c      	ldr	r2, [pc, #48]	; (800f268 <PWR_EnterSTOPMode+0x64>)
 800f238:	6912      	ldr	r2, [r2, #16]
 800f23a:	f042 0204 	orr.w	r2, r2, #4
 800f23e:	611a      	str	r2, [r3, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 800f240:	78fb      	ldrb	r3, [r7, #3]
 800f242:	2b01      	cmp	r3, #1
 800f244:	d101      	bne.n	800f24a <PWR_EnterSTOPMode+0x46>
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 800f246:	bf30      	wfi
 800f248:	e000      	b.n	800f24c <PWR_EnterSTOPMode+0x48>
    Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
 800f24a:	bf20      	wfe
  {
    /* Request Wait For Event */
    __WFE();
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 800f24c:	4b06      	ldr	r3, [pc, #24]	; (800f268 <PWR_EnterSTOPMode+0x64>)
 800f24e:	4a06      	ldr	r2, [pc, #24]	; (800f268 <PWR_EnterSTOPMode+0x64>)
 800f250:	6912      	ldr	r2, [r2, #16]
 800f252:	f022 0204 	bic.w	r2, r2, #4
 800f256:	611a      	str	r2, [r3, #16]
}
 800f258:	3714      	adds	r7, #20
 800f25a:	46bd      	mov	sp, r7
 800f25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f260:	4770      	bx	lr
 800f262:	bf00      	nop
 800f264:	40007000 	.word	0x40007000
 800f268:	e000ed00 	.word	0xe000ed00

0800f26c <PWR_EnterUnderDriveSTOPMode>:
  *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
  *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
  * @retval None
  */
void PWR_EnterUnderDriveSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
{
 800f26c:	b480      	push	{r7}
 800f26e:	b085      	sub	sp, #20
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
 800f274:	460b      	mov	r3, r1
 800f276:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 800f278:	2300      	movs	r3, #0
 800f27a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_UNDERDRIVE(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 800f27c:	4b13      	ldr	r3, [pc, #76]	; (800f2cc <PWR_EnterUnderDriveSTOPMode+0x60>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	60fb      	str	r3, [r7, #12]
  /* Clear PDDS and LPDS bits */
  tmpreg &= CR_DS_MASK;
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f288:	f023 0303 	bic.w	r3, r3, #3
 800f28c:	60fb      	str	r3, [r7, #12]
  
  /* Set LPDS, MRLUDS and LPLUDS bits according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 800f28e:	68fa      	ldr	r2, [r7, #12]
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	4313      	orrs	r3, r2
 800f294:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 800f296:	4b0d      	ldr	r3, [pc, #52]	; (800f2cc <PWR_EnterUnderDriveSTOPMode+0x60>)
 800f298:	68fa      	ldr	r2, [r7, #12]
 800f29a:	601a      	str	r2, [r3, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 800f29c:	4b0c      	ldr	r3, [pc, #48]	; (800f2d0 <PWR_EnterUnderDriveSTOPMode+0x64>)
 800f29e:	4a0c      	ldr	r2, [pc, #48]	; (800f2d0 <PWR_EnterUnderDriveSTOPMode+0x64>)
 800f2a0:	6912      	ldr	r2, [r2, #16]
 800f2a2:	f042 0204 	orr.w	r2, r2, #4
 800f2a6:	611a      	str	r2, [r3, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 800f2a8:	78fb      	ldrb	r3, [r7, #3]
 800f2aa:	2b01      	cmp	r3, #1
 800f2ac:	d101      	bne.n	800f2b2 <PWR_EnterUnderDriveSTOPMode+0x46>
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 800f2ae:	bf30      	wfi
 800f2b0:	e000      	b.n	800f2b4 <PWR_EnterUnderDriveSTOPMode+0x48>
    Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
 800f2b2:	bf20      	wfe
  {
    /* Request Wait For Event */
    __WFE();
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 800f2b4:	4b06      	ldr	r3, [pc, #24]	; (800f2d0 <PWR_EnterUnderDriveSTOPMode+0x64>)
 800f2b6:	4a06      	ldr	r2, [pc, #24]	; (800f2d0 <PWR_EnterUnderDriveSTOPMode+0x64>)
 800f2b8:	6912      	ldr	r2, [r2, #16]
 800f2ba:	f022 0204 	bic.w	r2, r2, #4
 800f2be:	611a      	str	r2, [r3, #16]
}
 800f2c0:	3714      	adds	r7, #20
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c8:	4770      	bx	lr
 800f2ca:	bf00      	nop
 800f2cc:	40007000 	.word	0x40007000
 800f2d0:	e000ed00 	.word	0xe000ed00

0800f2d4 <PWR_EnterSTANDBYMode>:
  *          - WKUP pin 1 (PA0) if enabled.       
  * @param  None
  * @retval None
  */
void PWR_EnterSTANDBYMode(void)
{
 800f2d4:	b480      	push	{r7}
 800f2d6:	af00      	add	r7, sp, #0
  /* Clear Wakeup flag */
  PWR->CR |= PWR_CR_CWUF;
 800f2d8:	4b0b      	ldr	r3, [pc, #44]	; (800f308 <PWR_EnterSTANDBYMode+0x34>)
 800f2da:	4a0b      	ldr	r2, [pc, #44]	; (800f308 <PWR_EnterSTANDBYMode+0x34>)
 800f2dc:	6812      	ldr	r2, [r2, #0]
 800f2de:	f042 0204 	orr.w	r2, r2, #4
 800f2e2:	601a      	str	r2, [r3, #0]
  
  /* Select STANDBY mode */
  PWR->CR |= PWR_CR_PDDS;
 800f2e4:	4b08      	ldr	r3, [pc, #32]	; (800f308 <PWR_EnterSTANDBYMode+0x34>)
 800f2e6:	4a08      	ldr	r2, [pc, #32]	; (800f308 <PWR_EnterSTANDBYMode+0x34>)
 800f2e8:	6812      	ldr	r2, [r2, #0]
 800f2ea:	f042 0202 	orr.w	r2, r2, #2
 800f2ee:	601a      	str	r2, [r3, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 800f2f0:	4b06      	ldr	r3, [pc, #24]	; (800f30c <PWR_EnterSTANDBYMode+0x38>)
 800f2f2:	4a06      	ldr	r2, [pc, #24]	; (800f30c <PWR_EnterSTANDBYMode+0x38>)
 800f2f4:	6912      	ldr	r2, [r2, #16]
 800f2f6:	f042 0204 	orr.w	r2, r2, #4
 800f2fa:	611a      	str	r2, [r3, #16]
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 800f2fc:	bf30      	wfi
#if defined ( __CC_ARM   )
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
}
 800f2fe:	46bd      	mov	sp, r7
 800f300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f304:	4770      	bx	lr
 800f306:	bf00      	nop
 800f308:	40007000 	.word	0x40007000
 800f30c:	e000ed00 	.word	0xe000ed00

0800f310 <PWR_GetFlagStatus>:
  *            @arg PWR_FLAG_UDRDY: This flag indicates that the Under-drive mode
  *                 is enabled in Stop mode (STM32F42xxx/43xxx devices)
  * @retval The new state of PWR_FLAG (SET or RESET).
  */
FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
{
 800f310:	b480      	push	{r7}
 800f312:	b085      	sub	sp, #20
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800f318:	2300      	movs	r3, #0
 800f31a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 800f31c:	4b08      	ldr	r3, [pc, #32]	; (800f340 <PWR_GetFlagStatus+0x30>)
 800f31e:	685a      	ldr	r2, [r3, #4]
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	4013      	ands	r3, r2
 800f324:	2b00      	cmp	r3, #0
 800f326:	d002      	beq.n	800f32e <PWR_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 800f328:	2301      	movs	r3, #1
 800f32a:	73fb      	strb	r3, [r7, #15]
 800f32c:	e001      	b.n	800f332 <PWR_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800f32e:	2300      	movs	r3, #0
 800f330:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 800f332:	7bfb      	ldrb	r3, [r7, #15]
}
 800f334:	4618      	mov	r0, r3
 800f336:	3714      	adds	r7, #20
 800f338:	46bd      	mov	sp, r7
 800f33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33e:	4770      	bx	lr
 800f340:	40007000 	.word	0x40007000

0800f344 <PWR_ClearFlag>:
  *            @arg PWR_FLAG_SB: StandBy flag
  *            @arg PWR_FLAG_UDRDY: Under-drive ready flag (STM32F42xxx/43xxx devices)
  * @retval None
  */
void PWR_ClearFlag(uint32_t PWR_FLAG)
{
 800f344:	b480      	push	{r7}
 800f346:	b083      	sub	sp, #12
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
  
#if defined (STM32F427_437xx) || defined (STM32F429_439xx)
  if (PWR_FLAG != PWR_FLAG_UDRDY)
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800f352:	d007      	beq.n	800f364 <PWR_ClearFlag+0x20>
  {
    PWR->CR |=  PWR_FLAG << 2;
 800f354:	4b09      	ldr	r3, [pc, #36]	; (800f37c <PWR_ClearFlag+0x38>)
 800f356:	4a09      	ldr	r2, [pc, #36]	; (800f37c <PWR_ClearFlag+0x38>)
 800f358:	6811      	ldr	r1, [r2, #0]
 800f35a:	687a      	ldr	r2, [r7, #4]
 800f35c:	0092      	lsls	r2, r2, #2
 800f35e:	430a      	orrs	r2, r1
 800f360:	601a      	str	r2, [r3, #0]
 800f362:	e005      	b.n	800f370 <PWR_ClearFlag+0x2c>
  }
  else
  {
    PWR->CSR |= PWR_FLAG_UDRDY;
 800f364:	4b05      	ldr	r3, [pc, #20]	; (800f37c <PWR_ClearFlag+0x38>)
 800f366:	4a05      	ldr	r2, [pc, #20]	; (800f37c <PWR_ClearFlag+0x38>)
 800f368:	6852      	ldr	r2, [r2, #4]
 800f36a:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 800f36e:	605a      	str	r2, [r3, #4]
#endif /* STM32F427_437xx ||  STM32F429_439xx */

#if defined (STM32F40_41xxx) || defined (STM32F401xx) 
  PWR->CR |=  PWR_FLAG << 2;
#endif /* STM32F40_41xxx */
}
 800f370:	370c      	adds	r7, #12
 800f372:	46bd      	mov	sp, r7
 800f374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f378:	4770      	bx	lr
 800f37a:	bf00      	nop
 800f37c:	40007000 	.word	0x40007000

0800f380 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 800f380:	b480      	push	{r7}
 800f382:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800f384:	4b16      	ldr	r3, [pc, #88]	; (800f3e0 <RCC_DeInit+0x60>)
 800f386:	4a16      	ldr	r2, [pc, #88]	; (800f3e0 <RCC_DeInit+0x60>)
 800f388:	6812      	ldr	r2, [r2, #0]
 800f38a:	f042 0201 	orr.w	r2, r2, #1
 800f38e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800f390:	4b13      	ldr	r3, [pc, #76]	; (800f3e0 <RCC_DeInit+0x60>)
 800f392:	2200      	movs	r2, #0
 800f394:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 800f396:	4a12      	ldr	r2, [pc, #72]	; (800f3e0 <RCC_DeInit+0x60>)
 800f398:	4b11      	ldr	r3, [pc, #68]	; (800f3e0 <RCC_DeInit+0x60>)
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800f3a0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800f3a4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800f3a6:	4b0e      	ldr	r3, [pc, #56]	; (800f3e0 <RCC_DeInit+0x60>)
 800f3a8:	4a0e      	ldr	r2, [pc, #56]	; (800f3e4 <RCC_DeInit+0x64>)
 800f3aa:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 800f3ac:	4b0c      	ldr	r3, [pc, #48]	; (800f3e0 <RCC_DeInit+0x60>)
 800f3ae:	4a0e      	ldr	r2, [pc, #56]	; (800f3e8 <RCC_DeInit+0x68>)
 800f3b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register, only available for STM32F42/43xxx devices */
  RCC->PLLSAICFGR = 0x24003000;
 800f3b4:	4b0a      	ldr	r3, [pc, #40]	; (800f3e0 <RCC_DeInit+0x60>)
 800f3b6:	4a0d      	ldr	r2, [pc, #52]	; (800f3ec <RCC_DeInit+0x6c>)
 800f3b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800f3bc:	4b08      	ldr	r3, [pc, #32]	; (800f3e0 <RCC_DeInit+0x60>)
 800f3be:	4a08      	ldr	r2, [pc, #32]	; (800f3e0 <RCC_DeInit+0x60>)
 800f3c0:	6812      	ldr	r2, [r2, #0]
 800f3c2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f3c6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800f3c8:	4b05      	ldr	r3, [pc, #20]	; (800f3e0 <RCC_DeInit+0x60>)
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx devices */
  RCC->DCKCFGR = 0x00000000; 
 800f3ce:	4b04      	ldr	r3, [pc, #16]	; (800f3e0 <RCC_DeInit+0x60>)
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

}
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3dc:	4770      	bx	lr
 800f3de:	bf00      	nop
 800f3e0:	40023800 	.word	0x40023800
 800f3e4:	24003010 	.word	0x24003010
 800f3e8:	20003000 	.word	0x20003000
 800f3ec:	24003000 	.word	0x24003000

0800f3f0 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 800f3f0:	b480      	push	{r7}
 800f3f2:	b083      	sub	sp, #12
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 800f3fa:	4b05      	ldr	r3, [pc, #20]	; (800f410 <RCC_HSEConfig+0x20>)
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 800f400:	4b03      	ldr	r3, [pc, #12]	; (800f410 <RCC_HSEConfig+0x20>)
 800f402:	79fa      	ldrb	r2, [r7, #7]
 800f404:	701a      	strb	r2, [r3, #0]
}
 800f406:	370c      	adds	r7, #12
 800f408:	46bd      	mov	sp, r7
 800f40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40e:	4770      	bx	lr
 800f410:	40023802 	.word	0x40023802

0800f414 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b082      	sub	sp, #8
 800f418:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 800f41a:	2300      	movs	r3, #0
 800f41c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 800f41e:	2300      	movs	r3, #0
 800f420:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 800f422:	2300      	movs	r3, #0
 800f424:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 800f426:	2031      	movs	r0, #49	; 0x31
 800f428:	f000 fd56 	bl	800fed8 <RCC_GetFlagStatus>
 800f42c:	4603      	mov	r3, r0
 800f42e:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 800f430:	683b      	ldr	r3, [r7, #0]
 800f432:	3301      	adds	r3, #1
 800f434:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800f43c:	d002      	beq.n	800f444 <RCC_WaitForHSEStartUp+0x30>
 800f43e:	79bb      	ldrb	r3, [r7, #6]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d0f0      	beq.n	800f426 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 800f444:	2031      	movs	r0, #49	; 0x31
 800f446:	f000 fd47 	bl	800fed8 <RCC_GetFlagStatus>
 800f44a:	4603      	mov	r3, r0
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d002      	beq.n	800f456 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 800f450:	2301      	movs	r3, #1
 800f452:	71fb      	strb	r3, [r7, #7]
 800f454:	e001      	b.n	800f45a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 800f456:	2300      	movs	r3, #0
 800f458:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 800f45a:	79fb      	ldrb	r3, [r7, #7]
}
 800f45c:	4618      	mov	r0, r3
 800f45e:	3708      	adds	r7, #8
 800f460:	46bd      	mov	sp, r7
 800f462:	bd80      	pop	{r7, pc}

0800f464 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 800f464:	b480      	push	{r7}
 800f466:	b085      	sub	sp, #20
 800f468:	af00      	add	r7, sp, #0
 800f46a:	4603      	mov	r3, r0
 800f46c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 800f46e:	2300      	movs	r3, #0
 800f470:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 800f472:	4b0a      	ldr	r3, [pc, #40]	; (800f49c <RCC_AdjustHSICalibrationValue+0x38>)
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800f47e:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 800f480:	79fb      	ldrb	r3, [r7, #7]
 800f482:	00db      	lsls	r3, r3, #3
 800f484:	68fa      	ldr	r2, [r7, #12]
 800f486:	4313      	orrs	r3, r2
 800f488:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
 800f48a:	4b04      	ldr	r3, [pc, #16]	; (800f49c <RCC_AdjustHSICalibrationValue+0x38>)
 800f48c:	68fa      	ldr	r2, [r7, #12]
 800f48e:	601a      	str	r2, [r3, #0]
}
 800f490:	3714      	adds	r7, #20
 800f492:	46bd      	mov	sp, r7
 800f494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f498:	4770      	bx	lr
 800f49a:	bf00      	nop
 800f49c:	40023800 	.word	0x40023800

0800f4a0 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 800f4a0:	b480      	push	{r7}
 800f4a2:	b083      	sub	sp, #12
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 800f4aa:	4b04      	ldr	r3, [pc, #16]	; (800f4bc <RCC_HSICmd+0x1c>)
 800f4ac:	79fa      	ldrb	r2, [r7, #7]
 800f4ae:	601a      	str	r2, [r3, #0]
}
 800f4b0:	370c      	adds	r7, #12
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b8:	4770      	bx	lr
 800f4ba:	bf00      	nop
 800f4bc:	42470000 	.word	0x42470000

0800f4c0 <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 800f4c0:	b480      	push	{r7}
 800f4c2:	b083      	sub	sp, #12
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800f4ca:	4b0c      	ldr	r3, [pc, #48]	; (800f4fc <RCC_LSEConfig+0x3c>)
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800f4d0:	4b0a      	ldr	r3, [pc, #40]	; (800f4fc <RCC_LSEConfig+0x3c>)
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 800f4d6:	79fb      	ldrb	r3, [r7, #7]
 800f4d8:	2b01      	cmp	r3, #1
 800f4da:	d002      	beq.n	800f4e2 <RCC_LSEConfig+0x22>
 800f4dc:	2b04      	cmp	r3, #4
 800f4de:	d004      	beq.n	800f4ea <RCC_LSEConfig+0x2a>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
 800f4e0:	e007      	b.n	800f4f2 <RCC_LSEConfig+0x32>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 800f4e2:	4b06      	ldr	r3, [pc, #24]	; (800f4fc <RCC_LSEConfig+0x3c>)
 800f4e4:	2201      	movs	r2, #1
 800f4e6:	701a      	strb	r2, [r3, #0]
      break;
 800f4e8:	e003      	b.n	800f4f2 <RCC_LSEConfig+0x32>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 800f4ea:	4b04      	ldr	r3, [pc, #16]	; (800f4fc <RCC_LSEConfig+0x3c>)
 800f4ec:	2205      	movs	r2, #5
 800f4ee:	701a      	strb	r2, [r3, #0]
      break;
 800f4f0:	bf00      	nop
    default:
      break;
  }
}
 800f4f2:	370c      	adds	r7, #12
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fa:	4770      	bx	lr
 800f4fc:	40023870 	.word	0x40023870

0800f500 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 800f500:	b480      	push	{r7}
 800f502:	b083      	sub	sp, #12
 800f504:	af00      	add	r7, sp, #0
 800f506:	4603      	mov	r3, r0
 800f508:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 800f50a:	4b04      	ldr	r3, [pc, #16]	; (800f51c <RCC_LSICmd+0x1c>)
 800f50c:	79fa      	ldrb	r2, [r7, #7]
 800f50e:	601a      	str	r2, [r3, #0]
}
 800f510:	370c      	adds	r7, #12
 800f512:	46bd      	mov	sp, r7
 800f514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f518:	4770      	bx	lr
 800f51a:	bf00      	nop
 800f51c:	42470e80 	.word	0x42470e80

0800f520 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 800f520:	b480      	push	{r7}
 800f522:	b085      	sub	sp, #20
 800f524:	af00      	add	r7, sp, #0
 800f526:	60f8      	str	r0, [r7, #12]
 800f528:	60b9      	str	r1, [r7, #8]
 800f52a:	607a      	str	r2, [r7, #4]
 800f52c:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 800f52e:	4b0a      	ldr	r3, [pc, #40]	; (800f558 <RCC_PLLConfig+0x38>)
 800f530:	687a      	ldr	r2, [r7, #4]
 800f532:	0191      	lsls	r1, r2, #6
 800f534:	68ba      	ldr	r2, [r7, #8]
 800f536:	4311      	orrs	r1, r2
 800f538:	683a      	ldr	r2, [r7, #0]
 800f53a:	0852      	lsrs	r2, r2, #1
 800f53c:	3a01      	subs	r2, #1
 800f53e:	0412      	lsls	r2, r2, #16
 800f540:	4311      	orrs	r1, r2
 800f542:	68fa      	ldr	r2, [r7, #12]
 800f544:	4311      	orrs	r1, r2
                 (PLLQ << 24);
 800f546:	69ba      	ldr	r2, [r7, #24]
 800f548:	0612      	lsls	r2, r2, #24
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 800f54a:	430a      	orrs	r2, r1
 800f54c:	605a      	str	r2, [r3, #4]
                 (PLLQ << 24);
}
 800f54e:	3714      	adds	r7, #20
 800f550:	46bd      	mov	sp, r7
 800f552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f556:	4770      	bx	lr
 800f558:	40023800 	.word	0x40023800

0800f55c <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 800f55c:	b480      	push	{r7}
 800f55e:	b083      	sub	sp, #12
 800f560:	af00      	add	r7, sp, #0
 800f562:	4603      	mov	r3, r0
 800f564:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 800f566:	4b04      	ldr	r3, [pc, #16]	; (800f578 <RCC_PLLCmd+0x1c>)
 800f568:	79fa      	ldrb	r2, [r7, #7]
 800f56a:	601a      	str	r2, [r3, #0]
}
 800f56c:	370c      	adds	r7, #12
 800f56e:	46bd      	mov	sp, r7
 800f570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f574:	4770      	bx	lr
 800f576:	bf00      	nop
 800f578:	42470060 	.word	0x42470060

0800f57c <RCC_PLLI2SConfig>:
  * @note   the PLLI2SR parameter is only available with STM32F42xxx/43xxx devices.  
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SQ, uint32_t PLLI2SR)
{
 800f57c:	b480      	push	{r7}
 800f57e:	b085      	sub	sp, #20
 800f580:	af00      	add	r7, sp, #0
 800f582:	60f8      	str	r0, [r7, #12]
 800f584:	60b9      	str	r1, [r7, #8]
 800f586:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SQ));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SQ << 24) | (PLLI2SR << 28);
 800f588:	4b07      	ldr	r3, [pc, #28]	; (800f5a8 <RCC_PLLI2SConfig+0x2c>)
 800f58a:	68fa      	ldr	r2, [r7, #12]
 800f58c:	0191      	lsls	r1, r2, #6
 800f58e:	68ba      	ldr	r2, [r7, #8]
 800f590:	0612      	lsls	r2, r2, #24
 800f592:	4311      	orrs	r1, r2
 800f594:	687a      	ldr	r2, [r7, #4]
 800f596:	0712      	lsls	r2, r2, #28
 800f598:	430a      	orrs	r2, r1
 800f59a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800f59e:	3714      	adds	r7, #20
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a6:	4770      	bx	lr
 800f5a8:	40023800 	.word	0x40023800

0800f5ac <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
 800f5ac:	b480      	push	{r7}
 800f5ae:	b083      	sub	sp, #12
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	4603      	mov	r3, r0
 800f5b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 800f5b6:	4b04      	ldr	r3, [pc, #16]	; (800f5c8 <RCC_PLLI2SCmd+0x1c>)
 800f5b8:	79fa      	ldrb	r2, [r7, #7]
 800f5ba:	601a      	str	r2, [r3, #0]
}
 800f5bc:	370c      	adds	r7, #12
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c4:	4770      	bx	lr
 800f5c6:	bf00      	nop
 800f5c8:	42470068 	.word	0x42470068

0800f5cc <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
 800f5cc:	b480      	push	{r7}
 800f5ce:	b085      	sub	sp, #20
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	60f8      	str	r0, [r7, #12]
 800f5d4:	60b9      	str	r1, [r7, #8]
 800f5d6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));

  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
 800f5d8:	4b07      	ldr	r3, [pc, #28]	; (800f5f8 <RCC_PLLSAIConfig+0x2c>)
 800f5da:	68fa      	ldr	r2, [r7, #12]
 800f5dc:	0191      	lsls	r1, r2, #6
 800f5de:	68ba      	ldr	r2, [r7, #8]
 800f5e0:	0612      	lsls	r2, r2, #24
 800f5e2:	4311      	orrs	r1, r2
 800f5e4:	687a      	ldr	r2, [r7, #4]
 800f5e6:	0712      	lsls	r2, r2, #28
 800f5e8:	430a      	orrs	r2, r1
 800f5ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800f5ee:	3714      	adds	r7, #20
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f6:	4770      	bx	lr
 800f5f8:	40023800 	.word	0x40023800

0800f5fc <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
 800f5fc:	b480      	push	{r7}
 800f5fe:	b083      	sub	sp, #12
 800f600:	af00      	add	r7, sp, #0
 800f602:	4603      	mov	r3, r0
 800f604:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 800f606:	4b04      	ldr	r3, [pc, #16]	; (800f618 <RCC_PLLSAICmd+0x1c>)
 800f608:	79fa      	ldrb	r2, [r7, #7]
 800f60a:	601a      	str	r2, [r3, #0]
}
 800f60c:	370c      	adds	r7, #12
 800f60e:	46bd      	mov	sp, r7
 800f610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f614:	4770      	bx	lr
 800f616:	bf00      	nop
 800f618:	42470070 	.word	0x42470070

0800f61c <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 800f61c:	b480      	push	{r7}
 800f61e:	b083      	sub	sp, #12
 800f620:	af00      	add	r7, sp, #0
 800f622:	4603      	mov	r3, r0
 800f624:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 800f626:	4b04      	ldr	r3, [pc, #16]	; (800f638 <RCC_ClockSecuritySystemCmd+0x1c>)
 800f628:	79fa      	ldrb	r2, [r7, #7]
 800f62a:	601a      	str	r2, [r3, #0]
}
 800f62c:	370c      	adds	r7, #12
 800f62e:	46bd      	mov	sp, r7
 800f630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f634:	4770      	bx	lr
 800f636:	bf00      	nop
 800f638:	4247004c 	.word	0x4247004c

0800f63c <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
 800f63c:	b480      	push	{r7}
 800f63e:	b085      	sub	sp, #20
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
 800f644:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f646:	2300      	movs	r3, #0
 800f648:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 800f64a:	4b0a      	ldr	r3, [pc, #40]	; (800f674 <RCC_MCO1Config+0x38>)
 800f64c:	689b      	ldr	r3, [r3, #8]
 800f64e:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 800f656:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 800f658:	687a      	ldr	r2, [r7, #4]
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	4313      	orrs	r3, r2
 800f65e:	68fa      	ldr	r2, [r7, #12]
 800f660:	4313      	orrs	r3, r2
 800f662:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 800f664:	4b03      	ldr	r3, [pc, #12]	; (800f674 <RCC_MCO1Config+0x38>)
 800f666:	68fa      	ldr	r2, [r7, #12]
 800f668:	609a      	str	r2, [r3, #8]
}
 800f66a:	3714      	adds	r7, #20
 800f66c:	46bd      	mov	sp, r7
 800f66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f672:	4770      	bx	lr
 800f674:	40023800 	.word	0x40023800

0800f678 <RCC_MCO2Config>:
  *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
  *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
 800f678:	b480      	push	{r7}
 800f67a:	b085      	sub	sp, #20
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
 800f680:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f682:	2300      	movs	r3, #0
 800f684:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 800f686:	4b0a      	ldr	r3, [pc, #40]	; (800f6b0 <RCC_MCO2Config+0x38>)
 800f688:	689b      	ldr	r3, [r3, #8]
 800f68a:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800f692:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 800f694:	687a      	ldr	r2, [r7, #4]
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	4313      	orrs	r3, r2
 800f69a:	68fa      	ldr	r2, [r7, #12]
 800f69c:	4313      	orrs	r3, r2
 800f69e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 800f6a0:	4b03      	ldr	r3, [pc, #12]	; (800f6b0 <RCC_MCO2Config+0x38>)
 800f6a2:	68fa      	ldr	r2, [r7, #12]
 800f6a4:	609a      	str	r2, [r3, #8]
}
 800f6a6:	3714      	adds	r7, #20
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ae:	4770      	bx	lr
 800f6b0:	40023800 	.word	0x40023800

0800f6b4 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 800f6b4:	b480      	push	{r7}
 800f6b6:	b085      	sub	sp, #20
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800f6bc:	2300      	movs	r3, #0
 800f6be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 800f6c0:	4b09      	ldr	r3, [pc, #36]	; (800f6e8 <RCC_SYSCLKConfig+0x34>)
 800f6c2:	689b      	ldr	r3, [r3, #8]
 800f6c4:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	f023 0303 	bic.w	r3, r3, #3
 800f6cc:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 800f6ce:	68fa      	ldr	r2, [r7, #12]
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	4313      	orrs	r3, r2
 800f6d4:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800f6d6:	4b04      	ldr	r3, [pc, #16]	; (800f6e8 <RCC_SYSCLKConfig+0x34>)
 800f6d8:	68fa      	ldr	r2, [r7, #12]
 800f6da:	609a      	str	r2, [r3, #8]
}
 800f6dc:	3714      	adds	r7, #20
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e4:	4770      	bx	lr
 800f6e6:	bf00      	nop
 800f6e8:	40023800 	.word	0x40023800

0800f6ec <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 800f6ec:	b480      	push	{r7}
 800f6ee:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 800f6f0:	4b05      	ldr	r3, [pc, #20]	; (800f708 <RCC_GetSYSCLKSource+0x1c>)
 800f6f2:	689b      	ldr	r3, [r3, #8]
 800f6f4:	b2db      	uxtb	r3, r3
 800f6f6:	f003 030c 	and.w	r3, r3, #12
 800f6fa:	b2db      	uxtb	r3, r3
}
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	46bd      	mov	sp, r7
 800f700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f704:	4770      	bx	lr
 800f706:	bf00      	nop
 800f708:	40023800 	.word	0x40023800

0800f70c <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 800f70c:	b480      	push	{r7}
 800f70e:	b085      	sub	sp, #20
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800f714:	2300      	movs	r3, #0
 800f716:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 800f718:	4b09      	ldr	r3, [pc, #36]	; (800f740 <RCC_HCLKConfig+0x34>)
 800f71a:	689b      	ldr	r3, [r3, #8]
 800f71c:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f724:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 800f726:	68fa      	ldr	r2, [r7, #12]
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	4313      	orrs	r3, r2
 800f72c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800f72e:	4b04      	ldr	r3, [pc, #16]	; (800f740 <RCC_HCLKConfig+0x34>)
 800f730:	68fa      	ldr	r2, [r7, #12]
 800f732:	609a      	str	r2, [r3, #8]
}
 800f734:	3714      	adds	r7, #20
 800f736:	46bd      	mov	sp, r7
 800f738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73c:	4770      	bx	lr
 800f73e:	bf00      	nop
 800f740:	40023800 	.word	0x40023800

0800f744 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 800f744:	b480      	push	{r7}
 800f746:	b085      	sub	sp, #20
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800f74c:	2300      	movs	r3, #0
 800f74e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 800f750:	4b09      	ldr	r3, [pc, #36]	; (800f778 <RCC_PCLK1Config+0x34>)
 800f752:	689b      	ldr	r3, [r3, #8]
 800f754:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800f75c:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 800f75e:	68fa      	ldr	r2, [r7, #12]
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	4313      	orrs	r3, r2
 800f764:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800f766:	4b04      	ldr	r3, [pc, #16]	; (800f778 <RCC_PCLK1Config+0x34>)
 800f768:	68fa      	ldr	r2, [r7, #12]
 800f76a:	609a      	str	r2, [r3, #8]
}
 800f76c:	3714      	adds	r7, #20
 800f76e:	46bd      	mov	sp, r7
 800f770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f774:	4770      	bx	lr
 800f776:	bf00      	nop
 800f778:	40023800 	.word	0x40023800

0800f77c <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 800f77c:	b480      	push	{r7}
 800f77e:	b085      	sub	sp, #20
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800f784:	2300      	movs	r3, #0
 800f786:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 800f788:	4b09      	ldr	r3, [pc, #36]	; (800f7b0 <RCC_PCLK2Config+0x34>)
 800f78a:	689b      	ldr	r3, [r3, #8]
 800f78c:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800f794:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	00db      	lsls	r3, r3, #3
 800f79a:	68fa      	ldr	r2, [r7, #12]
 800f79c:	4313      	orrs	r3, r2
 800f79e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800f7a0:	4b03      	ldr	r3, [pc, #12]	; (800f7b0 <RCC_PCLK2Config+0x34>)
 800f7a2:	68fa      	ldr	r2, [r7, #12]
 800f7a4:	609a      	str	r2, [r3, #8]
}
 800f7a6:	3714      	adds	r7, #20
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ae:	4770      	bx	lr
 800f7b0:	40023800 	.word	0x40023800

0800f7b4 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800f7b4:	b480      	push	{r7}
 800f7b6:	b089      	sub	sp, #36	; 0x24
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800f7bc:	2300      	movs	r3, #0
 800f7be:	61bb      	str	r3, [r7, #24]
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	617b      	str	r3, [r7, #20]
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	61fb      	str	r3, [r7, #28]
 800f7c8:	2302      	movs	r3, #2
 800f7ca:	613b      	str	r3, [r7, #16]
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	60fb      	str	r3, [r7, #12]
 800f7d0:	2302      	movs	r3, #2
 800f7d2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800f7d4:	4b48      	ldr	r3, [pc, #288]	; (800f8f8 <RCC_GetClocksFreq+0x144>)
 800f7d6:	689b      	ldr	r3, [r3, #8]
 800f7d8:	f003 030c 	and.w	r3, r3, #12
 800f7dc:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 800f7de:	69bb      	ldr	r3, [r7, #24]
 800f7e0:	2b04      	cmp	r3, #4
 800f7e2:	d007      	beq.n	800f7f4 <RCC_GetClocksFreq+0x40>
 800f7e4:	2b08      	cmp	r3, #8
 800f7e6:	d009      	beq.n	800f7fc <RCC_GetClocksFreq+0x48>
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d13f      	bne.n	800f86c <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	4a43      	ldr	r2, [pc, #268]	; (800f8fc <RCC_GetClocksFreq+0x148>)
 800f7f0:	601a      	str	r2, [r3, #0]
      break;
 800f7f2:	e03f      	b.n	800f874 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	4a42      	ldr	r2, [pc, #264]	; (800f900 <RCC_GetClocksFreq+0x14c>)
 800f7f8:	601a      	str	r2, [r3, #0]
      break;
 800f7fa:	e03b      	b.n	800f874 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800f7fc:	4b3e      	ldr	r3, [pc, #248]	; (800f8f8 <RCC_GetClocksFreq+0x144>)
 800f7fe:	685b      	ldr	r3, [r3, #4]
 800f800:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f804:	0d9b      	lsrs	r3, r3, #22
 800f806:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f808:	4b3b      	ldr	r3, [pc, #236]	; (800f8f8 <RCC_GetClocksFreq+0x144>)
 800f80a:	685b      	ldr	r3, [r3, #4]
 800f80c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f810:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d00d      	beq.n	800f834 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800f818:	4a39      	ldr	r2, [pc, #228]	; (800f900 <RCC_GetClocksFreq+0x14c>)
 800f81a:	68bb      	ldr	r3, [r7, #8]
 800f81c:	fbb2 f2f3 	udiv	r2, r2, r3
 800f820:	4b35      	ldr	r3, [pc, #212]	; (800f8f8 <RCC_GetClocksFreq+0x144>)
 800f822:	6859      	ldr	r1, [r3, #4]
 800f824:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800f828:	400b      	ands	r3, r1
 800f82a:	099b      	lsrs	r3, r3, #6
 800f82c:	fb03 f302 	mul.w	r3, r3, r2
 800f830:	61fb      	str	r3, [r7, #28]
 800f832:	e00c      	b.n	800f84e <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800f834:	4a31      	ldr	r2, [pc, #196]	; (800f8fc <RCC_GetClocksFreq+0x148>)
 800f836:	68bb      	ldr	r3, [r7, #8]
 800f838:	fbb2 f2f3 	udiv	r2, r2, r3
 800f83c:	4b2e      	ldr	r3, [pc, #184]	; (800f8f8 <RCC_GetClocksFreq+0x144>)
 800f83e:	6859      	ldr	r1, [r3, #4]
 800f840:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800f844:	400b      	ands	r3, r1
 800f846:	099b      	lsrs	r3, r3, #6
 800f848:	fb03 f302 	mul.w	r3, r3, r2
 800f84c:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800f84e:	4b2a      	ldr	r3, [pc, #168]	; (800f8f8 <RCC_GetClocksFreq+0x144>)
 800f850:	685b      	ldr	r3, [r3, #4]
 800f852:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f856:	0c1b      	lsrs	r3, r3, #16
 800f858:	3301      	adds	r3, #1
 800f85a:	005b      	lsls	r3, r3, #1
 800f85c:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800f85e:	69fa      	ldr	r2, [r7, #28]
 800f860:	693b      	ldr	r3, [r7, #16]
 800f862:	fbb2 f2f3 	udiv	r2, r2, r3
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	601a      	str	r2, [r3, #0]
      break;
 800f86a:	e003      	b.n	800f874 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	4a23      	ldr	r2, [pc, #140]	; (800f8fc <RCC_GetClocksFreq+0x148>)
 800f870:	601a      	str	r2, [r3, #0]
      break;
 800f872:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800f874:	4b20      	ldr	r3, [pc, #128]	; (800f8f8 <RCC_GetClocksFreq+0x144>)
 800f876:	689b      	ldr	r3, [r3, #8]
 800f878:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f87c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800f87e:	69bb      	ldr	r3, [r7, #24]
 800f880:	091b      	lsrs	r3, r3, #4
 800f882:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800f884:	4a1f      	ldr	r2, [pc, #124]	; (800f904 <RCC_GetClocksFreq+0x150>)
 800f886:	69bb      	ldr	r3, [r7, #24]
 800f888:	4413      	add	r3, r2
 800f88a:	781b      	ldrb	r3, [r3, #0]
 800f88c:	b2db      	uxtb	r3, r3
 800f88e:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681a      	ldr	r2, [r3, #0]
 800f894:	697b      	ldr	r3, [r7, #20]
 800f896:	40da      	lsrs	r2, r3
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800f89c:	4b16      	ldr	r3, [pc, #88]	; (800f8f8 <RCC_GetClocksFreq+0x144>)
 800f89e:	689b      	ldr	r3, [r3, #8]
 800f8a0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800f8a4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800f8a6:	69bb      	ldr	r3, [r7, #24]
 800f8a8:	0a9b      	lsrs	r3, r3, #10
 800f8aa:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800f8ac:	4a15      	ldr	r2, [pc, #84]	; (800f904 <RCC_GetClocksFreq+0x150>)
 800f8ae:	69bb      	ldr	r3, [r7, #24]
 800f8b0:	4413      	add	r3, r2
 800f8b2:	781b      	ldrb	r3, [r3, #0]
 800f8b4:	b2db      	uxtb	r3, r3
 800f8b6:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	685a      	ldr	r2, [r3, #4]
 800f8bc:	697b      	ldr	r3, [r7, #20]
 800f8be:	40da      	lsrs	r2, r3
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800f8c4:	4b0c      	ldr	r3, [pc, #48]	; (800f8f8 <RCC_GetClocksFreq+0x144>)
 800f8c6:	689b      	ldr	r3, [r3, #8]
 800f8c8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f8cc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800f8ce:	69bb      	ldr	r3, [r7, #24]
 800f8d0:	0b5b      	lsrs	r3, r3, #13
 800f8d2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800f8d4:	4a0b      	ldr	r2, [pc, #44]	; (800f904 <RCC_GetClocksFreq+0x150>)
 800f8d6:	69bb      	ldr	r3, [r7, #24]
 800f8d8:	4413      	add	r3, r2
 800f8da:	781b      	ldrb	r3, [r3, #0]
 800f8dc:	b2db      	uxtb	r3, r3
 800f8de:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	685a      	ldr	r2, [r3, #4]
 800f8e4:	697b      	ldr	r3, [r7, #20]
 800f8e6:	40da      	lsrs	r2, r3
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	60da      	str	r2, [r3, #12]
}
 800f8ec:	3724      	adds	r7, #36	; 0x24
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f4:	4770      	bx	lr
 800f8f6:	bf00      	nop
 800f8f8:	40023800 	.word	0x40023800
 800f8fc:	00f42400 	.word	0x00f42400
 800f900:	007a1200 	.word	0x007a1200
 800f904:	20000064 	.word	0x20000064

0800f908 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 800f908:	b480      	push	{r7}
 800f90a:	b085      	sub	sp, #20
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800f910:	2300      	movs	r3, #0
 800f912:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f91a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f91e:	d111      	bne.n	800f944 <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 800f920:	4b0f      	ldr	r3, [pc, #60]	; (800f960 <RCC_RTCCLKConfig+0x58>)
 800f922:	689b      	ldr	r3, [r3, #8]
 800f924:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800f92c:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f938:	68fa      	ldr	r2, [r7, #12]
 800f93a:	4313      	orrs	r3, r2
 800f93c:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
 800f93e:	4b08      	ldr	r3, [pc, #32]	; (800f960 <RCC_RTCCLKConfig+0x58>)
 800f940:	68fa      	ldr	r2, [r7, #12]
 800f942:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 800f944:	4b06      	ldr	r3, [pc, #24]	; (800f960 <RCC_RTCCLKConfig+0x58>)
 800f946:	4a06      	ldr	r2, [pc, #24]	; (800f960 <RCC_RTCCLKConfig+0x58>)
 800f948:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800f94a:	687a      	ldr	r2, [r7, #4]
 800f94c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800f950:	430a      	orrs	r2, r1
 800f952:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f954:	3714      	adds	r7, #20
 800f956:	46bd      	mov	sp, r7
 800f958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95c:	4770      	bx	lr
 800f95e:	bf00      	nop
 800f960:	40023800 	.word	0x40023800

0800f964 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 800f964:	b480      	push	{r7}
 800f966:	b083      	sub	sp, #12
 800f968:	af00      	add	r7, sp, #0
 800f96a:	4603      	mov	r3, r0
 800f96c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 800f96e:	4b04      	ldr	r3, [pc, #16]	; (800f980 <RCC_RTCCLKCmd+0x1c>)
 800f970:	79fa      	ldrb	r2, [r7, #7]
 800f972:	601a      	str	r2, [r3, #0]
}
 800f974:	370c      	adds	r7, #12
 800f976:	46bd      	mov	sp, r7
 800f978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97c:	4770      	bx	lr
 800f97e:	bf00      	nop
 800f980:	42470e3c 	.word	0x42470e3c

0800f984 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 800f984:	b480      	push	{r7}
 800f986:	b083      	sub	sp, #12
 800f988:	af00      	add	r7, sp, #0
 800f98a:	4603      	mov	r3, r0
 800f98c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 800f98e:	4b04      	ldr	r3, [pc, #16]	; (800f9a0 <RCC_BackupResetCmd+0x1c>)
 800f990:	79fa      	ldrb	r2, [r7, #7]
 800f992:	601a      	str	r2, [r3, #0]
}
 800f994:	370c      	adds	r7, #12
 800f996:	46bd      	mov	sp, r7
 800f998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99c:	4770      	bx	lr
 800f99e:	bf00      	nop
 800f9a0:	42470e40 	.word	0x42470e40

0800f9a4 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
 800f9a4:	b480      	push	{r7}
 800f9a6:	b083      	sub	sp, #12
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 800f9ac:	4b03      	ldr	r3, [pc, #12]	; (800f9bc <RCC_I2SCLKConfig+0x18>)
 800f9ae:	687a      	ldr	r2, [r7, #4]
 800f9b0:	601a      	str	r2, [r3, #0]
}
 800f9b2:	370c      	adds	r7, #12
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ba:	4770      	bx	lr
 800f9bc:	4247015c 	.word	0x4247015c

0800f9c0 <RCC_SAIPLLI2SClkDivConfig>:
  *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
  *              
  * @retval None
  */
void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
{
 800f9c0:	b480      	push	{r7}
 800f9c2:	b085      	sub	sp, #20
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
 800f9cc:	4b0a      	ldr	r3, [pc, #40]	; (800f9f8 <RCC_SAIPLLI2SClkDivConfig+0x38>)
 800f9ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f9d2:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	f023 031f 	bic.w	r3, r3, #31
 800f9da:	60fb      	str	r3, [r7, #12]

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	3b01      	subs	r3, #1
 800f9e0:	68fa      	ldr	r2, [r7, #12]
 800f9e2:	4313      	orrs	r3, r2
 800f9e4:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 800f9e6:	4b04      	ldr	r3, [pc, #16]	; (800f9f8 <RCC_SAIPLLI2SClkDivConfig+0x38>)
 800f9e8:	68fa      	ldr	r2, [r7, #12]
 800f9ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 800f9ee:	3714      	adds	r7, #20
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f6:	4770      	bx	lr
 800f9f8:	40023800 	.word	0x40023800

0800f9fc <RCC_SAIPLLSAIClkDivConfig>:
  *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
  *              
  * @retval None
  */
void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
{
 800f9fc:	b480      	push	{r7}
 800f9fe:	b085      	sub	sp, #20
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800fa04:	2300      	movs	r3, #0
 800fa06:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
 800fa08:	4b0b      	ldr	r3, [pc, #44]	; (800fa38 <RCC_SAIPLLSAIClkDivConfig+0x3c>)
 800fa0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa0e:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800fa16:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	3b01      	subs	r3, #1
 800fa1c:	021b      	lsls	r3, r3, #8
 800fa1e:	68fa      	ldr	r2, [r7, #12]
 800fa20:	4313      	orrs	r3, r2
 800fa22:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 800fa24:	4b04      	ldr	r3, [pc, #16]	; (800fa38 <RCC_SAIPLLSAIClkDivConfig+0x3c>)
 800fa26:	68fa      	ldr	r2, [r7, #12]
 800fa28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 800fa2c:	3714      	adds	r7, #20
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa34:	4770      	bx	lr
 800fa36:	bf00      	nop
 800fa38:	40023800 	.word	0x40023800

0800fa3c <RCC_SAIBlockACLKConfig>:
  *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block A clock
  * @retval None
  */
void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
{
 800fa3c:	b480      	push	{r7}
 800fa3e:	b085      	sub	sp, #20
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800fa44:	2300      	movs	r3, #0
 800fa46:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
 800fa48:	4b0a      	ldr	r3, [pc, #40]	; (800fa74 <RCC_SAIBlockACLKConfig+0x38>)
 800fa4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa4e:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800fa56:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
 800fa58:	68fa      	ldr	r2, [r7, #12]
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	4313      	orrs	r3, r2
 800fa5e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 800fa60:	4b04      	ldr	r3, [pc, #16]	; (800fa74 <RCC_SAIBlockACLKConfig+0x38>)
 800fa62:	68fa      	ldr	r2, [r7, #12]
 800fa64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 800fa68:	3714      	adds	r7, #20
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa70:	4770      	bx	lr
 800fa72:	bf00      	nop
 800fa74:	40023800 	.word	0x40023800

0800fa78 <RCC_SAIBlockBCLKConfig>:
  *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block B clock
  * @retval None
  */
void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
{
 800fa78:	b480      	push	{r7}
 800fa7a:	b085      	sub	sp, #20
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800fa80:	2300      	movs	r3, #0
 800fa82:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
 800fa84:	4b0a      	ldr	r3, [pc, #40]	; (800fab0 <RCC_SAIBlockBCLKConfig+0x38>)
 800fa86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa8a:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800fa92:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
 800fa94:	68fa      	ldr	r2, [r7, #12]
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	4313      	orrs	r3, r2
 800fa9a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 800fa9c:	4b04      	ldr	r3, [pc, #16]	; (800fab0 <RCC_SAIBlockBCLKConfig+0x38>)
 800fa9e:	68fa      	ldr	r2, [r7, #12]
 800faa0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 800faa4:	3714      	adds	r7, #20
 800faa6:	46bd      	mov	sp, r7
 800faa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faac:	4770      	bx	lr
 800faae:	bf00      	nop
 800fab0:	40023800 	.word	0x40023800

0800fab4 <RCC_LTDCCLKDivConfig>:
  *          LTDC clock frequency = f(PLLSAI_R) / RCC_PLLSAIDivR  
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
 800fab4:	b480      	push	{r7}
 800fab6:	b085      	sub	sp, #20
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800fabc:	2300      	movs	r3, #0
 800fabe:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
 800fac0:	4b0a      	ldr	r3, [pc, #40]	; (800faec <RCC_LTDCCLKDivConfig+0x38>)
 800fac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fac6:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800face:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
 800fad0:	68fa      	ldr	r2, [r7, #12]
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	4313      	orrs	r3, r2
 800fad6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 800fad8:	4b04      	ldr	r3, [pc, #16]	; (800faec <RCC_LTDCCLKDivConfig+0x38>)
 800fada:	68fa      	ldr	r2, [r7, #12]
 800fadc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 800fae0:	3714      	adds	r7, #20
 800fae2:	46bd      	mov	sp, r7
 800fae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae8:	4770      	bx	lr
 800faea:	bf00      	nop
 800faec:	40023800 	.word	0x40023800

0800faf0 <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
 800faf0:	b480      	push	{r7}
 800faf2:	b083      	sub	sp, #12
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
 800faf8:	4b03      	ldr	r3, [pc, #12]	; (800fb08 <RCC_TIMCLKPresConfig+0x18>)
 800fafa:	687a      	ldr	r2, [r7, #4]
 800fafc:	601a      	str	r2, [r3, #0]
  
}
 800fafe:	370c      	adds	r7, #12
 800fb00:	46bd      	mov	sp, r7
 800fb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb06:	4770      	bx	lr
 800fb08:	424711e0 	.word	0x424711e0

0800fb0c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800fb0c:	b480      	push	{r7}
 800fb0e:	b083      	sub	sp, #12
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
 800fb14:	460b      	mov	r3, r1
 800fb16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800fb18:	78fb      	ldrb	r3, [r7, #3]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d006      	beq.n	800fb2c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800fb1e:	4b09      	ldr	r3, [pc, #36]	; (800fb44 <RCC_AHB1PeriphClockCmd+0x38>)
 800fb20:	4a08      	ldr	r2, [pc, #32]	; (800fb44 <RCC_AHB1PeriphClockCmd+0x38>)
 800fb22:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800fb24:	687a      	ldr	r2, [r7, #4]
 800fb26:	430a      	orrs	r2, r1
 800fb28:	631a      	str	r2, [r3, #48]	; 0x30
 800fb2a:	e006      	b.n	800fb3a <RCC_AHB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800fb2c:	4b05      	ldr	r3, [pc, #20]	; (800fb44 <RCC_AHB1PeriphClockCmd+0x38>)
 800fb2e:	4a05      	ldr	r2, [pc, #20]	; (800fb44 <RCC_AHB1PeriphClockCmd+0x38>)
 800fb30:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800fb32:	687a      	ldr	r2, [r7, #4]
 800fb34:	43d2      	mvns	r2, r2
 800fb36:	400a      	ands	r2, r1
 800fb38:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 800fb3a:	370c      	adds	r7, #12
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb42:	4770      	bx	lr
 800fb44:	40023800 	.word	0x40023800

0800fb48 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 800fb48:	b480      	push	{r7}
 800fb4a:	b083      	sub	sp, #12
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
 800fb50:	460b      	mov	r3, r1
 800fb52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800fb54:	78fb      	ldrb	r3, [r7, #3]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d006      	beq.n	800fb68 <RCC_AHB2PeriphClockCmd+0x20>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 800fb5a:	4b09      	ldr	r3, [pc, #36]	; (800fb80 <RCC_AHB2PeriphClockCmd+0x38>)
 800fb5c:	4a08      	ldr	r2, [pc, #32]	; (800fb80 <RCC_AHB2PeriphClockCmd+0x38>)
 800fb5e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800fb60:	687a      	ldr	r2, [r7, #4]
 800fb62:	430a      	orrs	r2, r1
 800fb64:	635a      	str	r2, [r3, #52]	; 0x34
 800fb66:	e006      	b.n	800fb76 <RCC_AHB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 800fb68:	4b05      	ldr	r3, [pc, #20]	; (800fb80 <RCC_AHB2PeriphClockCmd+0x38>)
 800fb6a:	4a05      	ldr	r2, [pc, #20]	; (800fb80 <RCC_AHB2PeriphClockCmd+0x38>)
 800fb6c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800fb6e:	687a      	ldr	r2, [r7, #4]
 800fb70:	43d2      	mvns	r2, r2
 800fb72:	400a      	ands	r2, r1
 800fb74:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 800fb76:	370c      	adds	r7, #12
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7e:	4770      	bx	lr
 800fb80:	40023800 	.word	0x40023800

0800fb84 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 800fb84:	b480      	push	{r7}
 800fb86:	b083      	sub	sp, #12
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
 800fb8c:	460b      	mov	r3, r1
 800fb8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800fb90:	78fb      	ldrb	r3, [r7, #3]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d006      	beq.n	800fba4 <RCC_AHB3PeriphClockCmd+0x20>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 800fb96:	4b09      	ldr	r3, [pc, #36]	; (800fbbc <RCC_AHB3PeriphClockCmd+0x38>)
 800fb98:	4a08      	ldr	r2, [pc, #32]	; (800fbbc <RCC_AHB3PeriphClockCmd+0x38>)
 800fb9a:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800fb9c:	687a      	ldr	r2, [r7, #4]
 800fb9e:	430a      	orrs	r2, r1
 800fba0:	639a      	str	r2, [r3, #56]	; 0x38
 800fba2:	e006      	b.n	800fbb2 <RCC_AHB3PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 800fba4:	4b05      	ldr	r3, [pc, #20]	; (800fbbc <RCC_AHB3PeriphClockCmd+0x38>)
 800fba6:	4a05      	ldr	r2, [pc, #20]	; (800fbbc <RCC_AHB3PeriphClockCmd+0x38>)
 800fba8:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800fbaa:	687a      	ldr	r2, [r7, #4]
 800fbac:	43d2      	mvns	r2, r2
 800fbae:	400a      	ands	r2, r1
 800fbb0:	639a      	str	r2, [r3, #56]	; 0x38
  }
}
 800fbb2:	370c      	adds	r7, #12
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbba:	4770      	bx	lr
 800fbbc:	40023800 	.word	0x40023800

0800fbc0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800fbc0:	b480      	push	{r7}
 800fbc2:	b083      	sub	sp, #12
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
 800fbc8:	460b      	mov	r3, r1
 800fbca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800fbcc:	78fb      	ldrb	r3, [r7, #3]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d006      	beq.n	800fbe0 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800fbd2:	4b09      	ldr	r3, [pc, #36]	; (800fbf8 <RCC_APB1PeriphClockCmd+0x38>)
 800fbd4:	4a08      	ldr	r2, [pc, #32]	; (800fbf8 <RCC_APB1PeriphClockCmd+0x38>)
 800fbd6:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800fbd8:	687a      	ldr	r2, [r7, #4]
 800fbda:	430a      	orrs	r2, r1
 800fbdc:	641a      	str	r2, [r3, #64]	; 0x40
 800fbde:	e006      	b.n	800fbee <RCC_APB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800fbe0:	4b05      	ldr	r3, [pc, #20]	; (800fbf8 <RCC_APB1PeriphClockCmd+0x38>)
 800fbe2:	4a05      	ldr	r2, [pc, #20]	; (800fbf8 <RCC_APB1PeriphClockCmd+0x38>)
 800fbe4:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800fbe6:	687a      	ldr	r2, [r7, #4]
 800fbe8:	43d2      	mvns	r2, r2
 800fbea:	400a      	ands	r2, r1
 800fbec:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 800fbee:	370c      	adds	r7, #12
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf6:	4770      	bx	lr
 800fbf8:	40023800 	.word	0x40023800

0800fbfc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800fbfc:	b480      	push	{r7}
 800fbfe:	b083      	sub	sp, #12
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	6078      	str	r0, [r7, #4]
 800fc04:	460b      	mov	r3, r1
 800fc06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800fc08:	78fb      	ldrb	r3, [r7, #3]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d006      	beq.n	800fc1c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800fc0e:	4b09      	ldr	r3, [pc, #36]	; (800fc34 <RCC_APB2PeriphClockCmd+0x38>)
 800fc10:	4a08      	ldr	r2, [pc, #32]	; (800fc34 <RCC_APB2PeriphClockCmd+0x38>)
 800fc12:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800fc14:	687a      	ldr	r2, [r7, #4]
 800fc16:	430a      	orrs	r2, r1
 800fc18:	645a      	str	r2, [r3, #68]	; 0x44
 800fc1a:	e006      	b.n	800fc2a <RCC_APB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800fc1c:	4b05      	ldr	r3, [pc, #20]	; (800fc34 <RCC_APB2PeriphClockCmd+0x38>)
 800fc1e:	4a05      	ldr	r2, [pc, #20]	; (800fc34 <RCC_APB2PeriphClockCmd+0x38>)
 800fc20:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800fc22:	687a      	ldr	r2, [r7, #4]
 800fc24:	43d2      	mvns	r2, r2
 800fc26:	400a      	ands	r2, r1
 800fc28:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 800fc2a:	370c      	adds	r7, #12
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc32:	4770      	bx	lr
 800fc34:	40023800 	.word	0x40023800

0800fc38 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800fc38:	b480      	push	{r7}
 800fc3a:	b083      	sub	sp, #12
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
 800fc40:	460b      	mov	r3, r1
 800fc42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800fc44:	78fb      	ldrb	r3, [r7, #3]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d006      	beq.n	800fc58 <RCC_AHB1PeriphResetCmd+0x20>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 800fc4a:	4b09      	ldr	r3, [pc, #36]	; (800fc70 <RCC_AHB1PeriphResetCmd+0x38>)
 800fc4c:	4a08      	ldr	r2, [pc, #32]	; (800fc70 <RCC_AHB1PeriphResetCmd+0x38>)
 800fc4e:	6911      	ldr	r1, [r2, #16]
 800fc50:	687a      	ldr	r2, [r7, #4]
 800fc52:	430a      	orrs	r2, r1
 800fc54:	611a      	str	r2, [r3, #16]
 800fc56:	e006      	b.n	800fc66 <RCC_AHB1PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 800fc58:	4b05      	ldr	r3, [pc, #20]	; (800fc70 <RCC_AHB1PeriphResetCmd+0x38>)
 800fc5a:	4a05      	ldr	r2, [pc, #20]	; (800fc70 <RCC_AHB1PeriphResetCmd+0x38>)
 800fc5c:	6911      	ldr	r1, [r2, #16]
 800fc5e:	687a      	ldr	r2, [r7, #4]
 800fc60:	43d2      	mvns	r2, r2
 800fc62:	400a      	ands	r2, r1
 800fc64:	611a      	str	r2, [r3, #16]
  }
}
 800fc66:	370c      	adds	r7, #12
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6e:	4770      	bx	lr
 800fc70:	40023800 	.word	0x40023800

0800fc74 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 800fc74:	b480      	push	{r7}
 800fc76:	b083      	sub	sp, #12
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
 800fc7c:	460b      	mov	r3, r1
 800fc7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800fc80:	78fb      	ldrb	r3, [r7, #3]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d006      	beq.n	800fc94 <RCC_AHB2PeriphResetCmd+0x20>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 800fc86:	4b09      	ldr	r3, [pc, #36]	; (800fcac <RCC_AHB2PeriphResetCmd+0x38>)
 800fc88:	4a08      	ldr	r2, [pc, #32]	; (800fcac <RCC_AHB2PeriphResetCmd+0x38>)
 800fc8a:	6951      	ldr	r1, [r2, #20]
 800fc8c:	687a      	ldr	r2, [r7, #4]
 800fc8e:	430a      	orrs	r2, r1
 800fc90:	615a      	str	r2, [r3, #20]
 800fc92:	e006      	b.n	800fca2 <RCC_AHB2PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 800fc94:	4b05      	ldr	r3, [pc, #20]	; (800fcac <RCC_AHB2PeriphResetCmd+0x38>)
 800fc96:	4a05      	ldr	r2, [pc, #20]	; (800fcac <RCC_AHB2PeriphResetCmd+0x38>)
 800fc98:	6951      	ldr	r1, [r2, #20]
 800fc9a:	687a      	ldr	r2, [r7, #4]
 800fc9c:	43d2      	mvns	r2, r2
 800fc9e:	400a      	ands	r2, r1
 800fca0:	615a      	str	r2, [r3, #20]
  }
}
 800fca2:	370c      	adds	r7, #12
 800fca4:	46bd      	mov	sp, r7
 800fca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcaa:	4770      	bx	lr
 800fcac:	40023800 	.word	0x40023800

0800fcb0 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 800fcb0:	b480      	push	{r7}
 800fcb2:	b083      	sub	sp, #12
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
 800fcb8:	460b      	mov	r3, r1
 800fcba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800fcbc:	78fb      	ldrb	r3, [r7, #3]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d006      	beq.n	800fcd0 <RCC_AHB3PeriphResetCmd+0x20>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 800fcc2:	4b09      	ldr	r3, [pc, #36]	; (800fce8 <RCC_AHB3PeriphResetCmd+0x38>)
 800fcc4:	4a08      	ldr	r2, [pc, #32]	; (800fce8 <RCC_AHB3PeriphResetCmd+0x38>)
 800fcc6:	6991      	ldr	r1, [r2, #24]
 800fcc8:	687a      	ldr	r2, [r7, #4]
 800fcca:	430a      	orrs	r2, r1
 800fccc:	619a      	str	r2, [r3, #24]
 800fcce:	e006      	b.n	800fcde <RCC_AHB3PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 800fcd0:	4b05      	ldr	r3, [pc, #20]	; (800fce8 <RCC_AHB3PeriphResetCmd+0x38>)
 800fcd2:	4a05      	ldr	r2, [pc, #20]	; (800fce8 <RCC_AHB3PeriphResetCmd+0x38>)
 800fcd4:	6991      	ldr	r1, [r2, #24]
 800fcd6:	687a      	ldr	r2, [r7, #4]
 800fcd8:	43d2      	mvns	r2, r2
 800fcda:	400a      	ands	r2, r1
 800fcdc:	619a      	str	r2, [r3, #24]
  }
}
 800fcde:	370c      	adds	r7, #12
 800fce0:	46bd      	mov	sp, r7
 800fce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce6:	4770      	bx	lr
 800fce8:	40023800 	.word	0x40023800

0800fcec <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800fcec:	b480      	push	{r7}
 800fcee:	b083      	sub	sp, #12
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
 800fcf4:	460b      	mov	r3, r1
 800fcf6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800fcf8:	78fb      	ldrb	r3, [r7, #3]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d006      	beq.n	800fd0c <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800fcfe:	4b09      	ldr	r3, [pc, #36]	; (800fd24 <RCC_APB1PeriphResetCmd+0x38>)
 800fd00:	4a08      	ldr	r2, [pc, #32]	; (800fd24 <RCC_APB1PeriphResetCmd+0x38>)
 800fd02:	6a11      	ldr	r1, [r2, #32]
 800fd04:	687a      	ldr	r2, [r7, #4]
 800fd06:	430a      	orrs	r2, r1
 800fd08:	621a      	str	r2, [r3, #32]
 800fd0a:	e006      	b.n	800fd1a <RCC_APB1PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 800fd0c:	4b05      	ldr	r3, [pc, #20]	; (800fd24 <RCC_APB1PeriphResetCmd+0x38>)
 800fd0e:	4a05      	ldr	r2, [pc, #20]	; (800fd24 <RCC_APB1PeriphResetCmd+0x38>)
 800fd10:	6a11      	ldr	r1, [r2, #32]
 800fd12:	687a      	ldr	r2, [r7, #4]
 800fd14:	43d2      	mvns	r2, r2
 800fd16:	400a      	ands	r2, r1
 800fd18:	621a      	str	r2, [r3, #32]
  }
}
 800fd1a:	370c      	adds	r7, #12
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd22:	4770      	bx	lr
 800fd24:	40023800 	.word	0x40023800

0800fd28 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800fd28:	b480      	push	{r7}
 800fd2a:	b083      	sub	sp, #12
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
 800fd30:	460b      	mov	r3, r1
 800fd32:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800fd34:	78fb      	ldrb	r3, [r7, #3]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d006      	beq.n	800fd48 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800fd3a:	4b09      	ldr	r3, [pc, #36]	; (800fd60 <RCC_APB2PeriphResetCmd+0x38>)
 800fd3c:	4a08      	ldr	r2, [pc, #32]	; (800fd60 <RCC_APB2PeriphResetCmd+0x38>)
 800fd3e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800fd40:	687a      	ldr	r2, [r7, #4]
 800fd42:	430a      	orrs	r2, r1
 800fd44:	625a      	str	r2, [r3, #36]	; 0x24
 800fd46:	e006      	b.n	800fd56 <RCC_APB2PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800fd48:	4b05      	ldr	r3, [pc, #20]	; (800fd60 <RCC_APB2PeriphResetCmd+0x38>)
 800fd4a:	4a05      	ldr	r2, [pc, #20]	; (800fd60 <RCC_APB2PeriphResetCmd+0x38>)
 800fd4c:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800fd4e:	687a      	ldr	r2, [r7, #4]
 800fd50:	43d2      	mvns	r2, r2
 800fd52:	400a      	ands	r2, r1
 800fd54:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800fd56:	370c      	adds	r7, #12
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5e:	4770      	bx	lr
 800fd60:	40023800 	.word	0x40023800

0800fd64 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800fd64:	b480      	push	{r7}
 800fd66:	b083      	sub	sp, #12
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
 800fd6c:	460b      	mov	r3, r1
 800fd6e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800fd70:	78fb      	ldrb	r3, [r7, #3]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d006      	beq.n	800fd84 <RCC_AHB1PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 800fd76:	4b09      	ldr	r3, [pc, #36]	; (800fd9c <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 800fd78:	4a08      	ldr	r2, [pc, #32]	; (800fd9c <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 800fd7a:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800fd7c:	687a      	ldr	r2, [r7, #4]
 800fd7e:	430a      	orrs	r2, r1
 800fd80:	651a      	str	r2, [r3, #80]	; 0x50
 800fd82:	e006      	b.n	800fd92 <RCC_AHB1PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 800fd84:	4b05      	ldr	r3, [pc, #20]	; (800fd9c <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 800fd86:	4a05      	ldr	r2, [pc, #20]	; (800fd9c <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 800fd88:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800fd8a:	687a      	ldr	r2, [r7, #4]
 800fd8c:	43d2      	mvns	r2, r2
 800fd8e:	400a      	ands	r2, r1
 800fd90:	651a      	str	r2, [r3, #80]	; 0x50
  }
}
 800fd92:	370c      	adds	r7, #12
 800fd94:	46bd      	mov	sp, r7
 800fd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9a:	4770      	bx	lr
 800fd9c:	40023800 	.word	0x40023800

0800fda0 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 800fda0:	b480      	push	{r7}
 800fda2:	b083      	sub	sp, #12
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
 800fda8:	460b      	mov	r3, r1
 800fdaa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800fdac:	78fb      	ldrb	r3, [r7, #3]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d006      	beq.n	800fdc0 <RCC_AHB2PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 800fdb2:	4b09      	ldr	r3, [pc, #36]	; (800fdd8 <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 800fdb4:	4a08      	ldr	r2, [pc, #32]	; (800fdd8 <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 800fdb6:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800fdb8:	687a      	ldr	r2, [r7, #4]
 800fdba:	430a      	orrs	r2, r1
 800fdbc:	655a      	str	r2, [r3, #84]	; 0x54
 800fdbe:	e006      	b.n	800fdce <RCC_AHB2PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 800fdc0:	4b05      	ldr	r3, [pc, #20]	; (800fdd8 <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 800fdc2:	4a05      	ldr	r2, [pc, #20]	; (800fdd8 <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 800fdc4:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800fdc6:	687a      	ldr	r2, [r7, #4]
 800fdc8:	43d2      	mvns	r2, r2
 800fdca:	400a      	ands	r2, r1
 800fdcc:	655a      	str	r2, [r3, #84]	; 0x54
  }
}
 800fdce:	370c      	adds	r7, #12
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd6:	4770      	bx	lr
 800fdd8:	40023800 	.word	0x40023800

0800fddc <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 800fddc:	b480      	push	{r7}
 800fdde:	b083      	sub	sp, #12
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
 800fde4:	460b      	mov	r3, r1
 800fde6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800fde8:	78fb      	ldrb	r3, [r7, #3]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d006      	beq.n	800fdfc <RCC_AHB3PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 800fdee:	4b09      	ldr	r3, [pc, #36]	; (800fe14 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 800fdf0:	4a08      	ldr	r2, [pc, #32]	; (800fe14 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 800fdf2:	6d91      	ldr	r1, [r2, #88]	; 0x58
 800fdf4:	687a      	ldr	r2, [r7, #4]
 800fdf6:	430a      	orrs	r2, r1
 800fdf8:	659a      	str	r2, [r3, #88]	; 0x58
 800fdfa:	e006      	b.n	800fe0a <RCC_AHB3PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 800fdfc:	4b05      	ldr	r3, [pc, #20]	; (800fe14 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 800fdfe:	4a05      	ldr	r2, [pc, #20]	; (800fe14 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 800fe00:	6d91      	ldr	r1, [r2, #88]	; 0x58
 800fe02:	687a      	ldr	r2, [r7, #4]
 800fe04:	43d2      	mvns	r2, r2
 800fe06:	400a      	ands	r2, r1
 800fe08:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 800fe0a:	370c      	adds	r7, #12
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe12:	4770      	bx	lr
 800fe14:	40023800 	.word	0x40023800

0800fe18 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800fe18:	b480      	push	{r7}
 800fe1a:	b083      	sub	sp, #12
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
 800fe20:	460b      	mov	r3, r1
 800fe22:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800fe24:	78fb      	ldrb	r3, [r7, #3]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d006      	beq.n	800fe38 <RCC_APB1PeriphClockLPModeCmd+0x20>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 800fe2a:	4b09      	ldr	r3, [pc, #36]	; (800fe50 <RCC_APB1PeriphClockLPModeCmd+0x38>)
 800fe2c:	4a08      	ldr	r2, [pc, #32]	; (800fe50 <RCC_APB1PeriphClockLPModeCmd+0x38>)
 800fe2e:	6e11      	ldr	r1, [r2, #96]	; 0x60
 800fe30:	687a      	ldr	r2, [r7, #4]
 800fe32:	430a      	orrs	r2, r1
 800fe34:	661a      	str	r2, [r3, #96]	; 0x60
 800fe36:	e006      	b.n	800fe46 <RCC_APB1PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 800fe38:	4b05      	ldr	r3, [pc, #20]	; (800fe50 <RCC_APB1PeriphClockLPModeCmd+0x38>)
 800fe3a:	4a05      	ldr	r2, [pc, #20]	; (800fe50 <RCC_APB1PeriphClockLPModeCmd+0x38>)
 800fe3c:	6e11      	ldr	r1, [r2, #96]	; 0x60
 800fe3e:	687a      	ldr	r2, [r7, #4]
 800fe40:	43d2      	mvns	r2, r2
 800fe42:	400a      	ands	r2, r1
 800fe44:	661a      	str	r2, [r3, #96]	; 0x60
  }
}
 800fe46:	370c      	adds	r7, #12
 800fe48:	46bd      	mov	sp, r7
 800fe4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4e:	4770      	bx	lr
 800fe50:	40023800 	.word	0x40023800

0800fe54 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800fe54:	b480      	push	{r7}
 800fe56:	b083      	sub	sp, #12
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
 800fe5c:	460b      	mov	r3, r1
 800fe5e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800fe60:	78fb      	ldrb	r3, [r7, #3]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d006      	beq.n	800fe74 <RCC_APB2PeriphClockLPModeCmd+0x20>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 800fe66:	4b09      	ldr	r3, [pc, #36]	; (800fe8c <RCC_APB2PeriphClockLPModeCmd+0x38>)
 800fe68:	4a08      	ldr	r2, [pc, #32]	; (800fe8c <RCC_APB2PeriphClockLPModeCmd+0x38>)
 800fe6a:	6e51      	ldr	r1, [r2, #100]	; 0x64
 800fe6c:	687a      	ldr	r2, [r7, #4]
 800fe6e:	430a      	orrs	r2, r1
 800fe70:	665a      	str	r2, [r3, #100]	; 0x64
 800fe72:	e006      	b.n	800fe82 <RCC_APB2PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 800fe74:	4b05      	ldr	r3, [pc, #20]	; (800fe8c <RCC_APB2PeriphClockLPModeCmd+0x38>)
 800fe76:	4a05      	ldr	r2, [pc, #20]	; (800fe8c <RCC_APB2PeriphClockLPModeCmd+0x38>)
 800fe78:	6e51      	ldr	r1, [r2, #100]	; 0x64
 800fe7a:	687a      	ldr	r2, [r7, #4]
 800fe7c:	43d2      	mvns	r2, r2
 800fe7e:	400a      	ands	r2, r1
 800fe80:	665a      	str	r2, [r3, #100]	; 0x64
  }
}
 800fe82:	370c      	adds	r7, #12
 800fe84:	46bd      	mov	sp, r7
 800fe86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8a:	4770      	bx	lr
 800fe8c:	40023800 	.word	0x40023800

0800fe90 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 800fe90:	b480      	push	{r7}
 800fe92:	b083      	sub	sp, #12
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	4602      	mov	r2, r0
 800fe98:	460b      	mov	r3, r1
 800fe9a:	71fa      	strb	r2, [r7, #7]
 800fe9c:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800fe9e:	79bb      	ldrb	r3, [r7, #6]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d008      	beq.n	800feb6 <RCC_ITConfig+0x26>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 800fea4:	4b0b      	ldr	r3, [pc, #44]	; (800fed4 <RCC_ITConfig+0x44>)
 800fea6:	4a0b      	ldr	r2, [pc, #44]	; (800fed4 <RCC_ITConfig+0x44>)
 800fea8:	7812      	ldrb	r2, [r2, #0]
 800feaa:	b2d1      	uxtb	r1, r2
 800feac:	79fa      	ldrb	r2, [r7, #7]
 800feae:	430a      	orrs	r2, r1
 800feb0:	b2d2      	uxtb	r2, r2
 800feb2:	701a      	strb	r2, [r3, #0]
 800feb4:	e009      	b.n	800feca <RCC_ITConfig+0x3a>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 800feb6:	4b07      	ldr	r3, [pc, #28]	; (800fed4 <RCC_ITConfig+0x44>)
 800feb8:	4a06      	ldr	r2, [pc, #24]	; (800fed4 <RCC_ITConfig+0x44>)
 800feba:	7812      	ldrb	r2, [r2, #0]
 800febc:	b2d1      	uxtb	r1, r2
 800febe:	79fa      	ldrb	r2, [r7, #7]
 800fec0:	43d2      	mvns	r2, r2
 800fec2:	b2d2      	uxtb	r2, r2
 800fec4:	400a      	ands	r2, r1
 800fec6:	b2d2      	uxtb	r2, r2
 800fec8:	701a      	strb	r2, [r3, #0]
  }
}
 800feca:	370c      	adds	r7, #12
 800fecc:	46bd      	mov	sp, r7
 800fece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed2:	4770      	bx	lr
 800fed4:	4002380d 	.word	0x4002380d

0800fed8 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 800fed8:	b480      	push	{r7}
 800feda:	b087      	sub	sp, #28
 800fedc:	af00      	add	r7, sp, #0
 800fede:	4603      	mov	r3, r0
 800fee0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800fee2:	2300      	movs	r3, #0
 800fee4:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 800fee6:	2300      	movs	r3, #0
 800fee8:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 800feea:	2300      	movs	r3, #0
 800feec:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800feee:	79fb      	ldrb	r3, [r7, #7]
 800fef0:	095b      	lsrs	r3, r3, #5
 800fef2:	b2db      	uxtb	r3, r3
 800fef4:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	2b01      	cmp	r3, #1
 800fefa:	d103      	bne.n	800ff04 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 800fefc:	4b12      	ldr	r3, [pc, #72]	; (800ff48 <RCC_GetFlagStatus+0x70>)
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	617b      	str	r3, [r7, #20]
 800ff02:	e009      	b.n	800ff18 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	2b02      	cmp	r3, #2
 800ff08:	d103      	bne.n	800ff12 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 800ff0a:	4b0f      	ldr	r3, [pc, #60]	; (800ff48 <RCC_GetFlagStatus+0x70>)
 800ff0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff0e:	617b      	str	r3, [r7, #20]
 800ff10:	e002      	b.n	800ff18 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 800ff12:	4b0d      	ldr	r3, [pc, #52]	; (800ff48 <RCC_GetFlagStatus+0x70>)
 800ff14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff16:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 800ff18:	79fb      	ldrb	r3, [r7, #7]
 800ff1a:	f003 031f 	and.w	r3, r3, #31
 800ff1e:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	697a      	ldr	r2, [r7, #20]
 800ff24:	fa22 f303 	lsr.w	r3, r2, r3
 800ff28:	f003 0301 	and.w	r3, r3, #1
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d002      	beq.n	800ff36 <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 800ff30:	2301      	movs	r3, #1
 800ff32:	74fb      	strb	r3, [r7, #19]
 800ff34:	e001      	b.n	800ff3a <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 800ff36:	2300      	movs	r3, #0
 800ff38:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 800ff3a:	7cfb      	ldrb	r3, [r7, #19]
}
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	371c      	adds	r7, #28
 800ff40:	46bd      	mov	sp, r7
 800ff42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff46:	4770      	bx	lr
 800ff48:	40023800 	.word	0x40023800

0800ff4c <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 800ff4c:	b480      	push	{r7}
 800ff4e:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 800ff50:	4b04      	ldr	r3, [pc, #16]	; (800ff64 <RCC_ClearFlag+0x18>)
 800ff52:	4a04      	ldr	r2, [pc, #16]	; (800ff64 <RCC_ClearFlag+0x18>)
 800ff54:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800ff56:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800ff5a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff62:	4770      	bx	lr
 800ff64:	40023800 	.word	0x40023800

0800ff68 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx devices)    
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 800ff68:	b480      	push	{r7}
 800ff6a:	b085      	sub	sp, #20
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	4603      	mov	r3, r0
 800ff70:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 800ff72:	2300      	movs	r3, #0
 800ff74:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 800ff76:	4b09      	ldr	r3, [pc, #36]	; (800ff9c <RCC_GetITStatus+0x34>)
 800ff78:	68da      	ldr	r2, [r3, #12]
 800ff7a:	79fb      	ldrb	r3, [r7, #7]
 800ff7c:	4013      	ands	r3, r2
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d002      	beq.n	800ff88 <RCC_GetITStatus+0x20>
  {
    bitstatus = SET;
 800ff82:	2301      	movs	r3, #1
 800ff84:	73fb      	strb	r3, [r7, #15]
 800ff86:	e001      	b.n	800ff8c <RCC_GetITStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 800ff88:	2300      	movs	r3, #0
 800ff8a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 800ff8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff8e:	4618      	mov	r0, r3
 800ff90:	3714      	adds	r7, #20
 800ff92:	46bd      	mov	sp, r7
 800ff94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff98:	4770      	bx	lr
 800ff9a:	bf00      	nop
 800ff9c:	40023800 	.word	0x40023800

0800ffa0 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx devices)   
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 800ffa0:	b480      	push	{r7}
 800ffa2:	b083      	sub	sp, #12
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 800ffaa:	4b04      	ldr	r3, [pc, #16]	; (800ffbc <RCC_ClearITPendingBit+0x1c>)
 800ffac:	79fa      	ldrb	r2, [r7, #7]
 800ffae:	701a      	strb	r2, [r3, #0]
}
 800ffb0:	370c      	adds	r7, #12
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb8:	4770      	bx	lr
 800ffba:	bf00      	nop
 800ffbc:	4002380e 	.word	0x4002380e

0800ffc0 <RNG_DeInit>:
  * @brief  De-initializes the RNG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void RNG_DeInit(void)
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	af00      	add	r7, sp, #0
  /* Enable RNG reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
 800ffc4:	2040      	movs	r0, #64	; 0x40
 800ffc6:	2101      	movs	r1, #1
 800ffc8:	f7ff fe54 	bl	800fc74 <RCC_AHB2PeriphResetCmd>

  /* Release RNG from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
 800ffcc:	2040      	movs	r0, #64	; 0x40
 800ffce:	2100      	movs	r1, #0
 800ffd0:	f7ff fe50 	bl	800fc74 <RCC_AHB2PeriphResetCmd>
}
 800ffd4:	bd80      	pop	{r7, pc}
 800ffd6:	bf00      	nop

0800ffd8 <RNG_Cmd>:
  * @param  NewState: new state of the RNG peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_Cmd(FunctionalState NewState)
{
 800ffd8:	b480      	push	{r7}
 800ffda:	b083      	sub	sp, #12
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	4603      	mov	r3, r0
 800ffe0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800ffe2:	79fb      	ldrb	r3, [r7, #7]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d006      	beq.n	800fff6 <RNG_Cmd+0x1e>
  {
    /* Enable the RNG */
    RNG->CR |= RNG_CR_RNGEN;
 800ffe8:	4b08      	ldr	r3, [pc, #32]	; (801000c <RNG_Cmd+0x34>)
 800ffea:	4a08      	ldr	r2, [pc, #32]	; (801000c <RNG_Cmd+0x34>)
 800ffec:	6812      	ldr	r2, [r2, #0]
 800ffee:	f042 0204 	orr.w	r2, r2, #4
 800fff2:	601a      	str	r2, [r3, #0]
 800fff4:	e005      	b.n	8010002 <RNG_Cmd+0x2a>
  }
  else
  {
    /* Disable the RNG */
    RNG->CR &= ~RNG_CR_RNGEN;
 800fff6:	4b05      	ldr	r3, [pc, #20]	; (801000c <RNG_Cmd+0x34>)
 800fff8:	4a04      	ldr	r2, [pc, #16]	; (801000c <RNG_Cmd+0x34>)
 800fffa:	6812      	ldr	r2, [r2, #0]
 800fffc:	f022 0204 	bic.w	r2, r2, #4
 8010000:	601a      	str	r2, [r3, #0]
  }
}
 8010002:	370c      	adds	r7, #12
 8010004:	46bd      	mov	sp, r7
 8010006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000a:	4770      	bx	lr
 801000c:	50060800 	.word	0x50060800

08010010 <RNG_GetRandomNumber>:
  *         
  * @param  None
  * @retval 32-bit random number.
  */
uint32_t RNG_GetRandomNumber(void)
{
 8010010:	b480      	push	{r7}
 8010012:	af00      	add	r7, sp, #0
  /* Return the 32 bit random number from the DR register */
  return RNG->DR;
 8010014:	4b03      	ldr	r3, [pc, #12]	; (8010024 <RNG_GetRandomNumber+0x14>)
 8010016:	689b      	ldr	r3, [r3, #8]
}
 8010018:	4618      	mov	r0, r3
 801001a:	46bd      	mov	sp, r7
 801001c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010020:	4770      	bx	lr
 8010022:	bf00      	nop
 8010024:	50060800 	.word	0x50060800

08010028 <RNG_ITConfig>:
  * @param  NewState: new state of the RNG interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_ITConfig(FunctionalState NewState)
{
 8010028:	b480      	push	{r7}
 801002a:	b083      	sub	sp, #12
 801002c:	af00      	add	r7, sp, #0
 801002e:	4603      	mov	r3, r0
 8010030:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8010032:	79fb      	ldrb	r3, [r7, #7]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d006      	beq.n	8010046 <RNG_ITConfig+0x1e>
  {
    /* Enable the RNG interrupt */
    RNG->CR |= RNG_CR_IE;
 8010038:	4b08      	ldr	r3, [pc, #32]	; (801005c <RNG_ITConfig+0x34>)
 801003a:	4a08      	ldr	r2, [pc, #32]	; (801005c <RNG_ITConfig+0x34>)
 801003c:	6812      	ldr	r2, [r2, #0]
 801003e:	f042 0208 	orr.w	r2, r2, #8
 8010042:	601a      	str	r2, [r3, #0]
 8010044:	e005      	b.n	8010052 <RNG_ITConfig+0x2a>
  }
  else
  {
    /* Disable the RNG interrupt */
    RNG->CR &= ~RNG_CR_IE;
 8010046:	4b05      	ldr	r3, [pc, #20]	; (801005c <RNG_ITConfig+0x34>)
 8010048:	4a04      	ldr	r2, [pc, #16]	; (801005c <RNG_ITConfig+0x34>)
 801004a:	6812      	ldr	r2, [r2, #0]
 801004c:	f022 0208 	bic.w	r2, r2, #8
 8010050:	601a      	str	r2, [r3, #0]
  }
}
 8010052:	370c      	adds	r7, #12
 8010054:	46bd      	mov	sp, r7
 8010056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005a:	4770      	bx	lr
 801005c:	50060800 	.word	0x50060800

08010060 <RNG_GetFlagStatus>:
  *            @arg RNG_FLAG_CECS: Clock Error Current flag.
  *            @arg RNG_FLAG_SECS: Seed Error Current flag.
  * @retval The new state of RNG_FLAG (SET or RESET).
  */
FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
{
 8010060:	b480      	push	{r7}
 8010062:	b085      	sub	sp, #20
 8010064:	af00      	add	r7, sp, #0
 8010066:	4603      	mov	r3, r0
 8010068:	71fb      	strb	r3, [r7, #7]
  FlagStatus bitstatus = RESET;
 801006a:	2300      	movs	r3, #0
 801006c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RNG_GET_FLAG(RNG_FLAG));

  /* Check the status of the specified RNG flag */
  if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
 801006e:	4b09      	ldr	r3, [pc, #36]	; (8010094 <RNG_GetFlagStatus+0x34>)
 8010070:	685a      	ldr	r2, [r3, #4]
 8010072:	79fb      	ldrb	r3, [r7, #7]
 8010074:	4013      	ands	r3, r2
 8010076:	2b00      	cmp	r3, #0
 8010078:	d002      	beq.n	8010080 <RNG_GetFlagStatus+0x20>
  {
    /* RNG_FLAG is set */
    bitstatus = SET;
 801007a:	2301      	movs	r3, #1
 801007c:	73fb      	strb	r3, [r7, #15]
 801007e:	e001      	b.n	8010084 <RNG_GetFlagStatus+0x24>
  }
  else
  {
    /* RNG_FLAG is reset */
    bitstatus = RESET;
 8010080:	2300      	movs	r3, #0
 8010082:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RNG_FLAG status */
  return  bitstatus;
 8010084:	7bfb      	ldrb	r3, [r7, #15]
}
 8010086:	4618      	mov	r0, r3
 8010088:	3714      	adds	r7, #20
 801008a:	46bd      	mov	sp, r7
 801008c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010090:	4770      	bx	lr
 8010092:	bf00      	nop
 8010094:	50060800 	.word	0x50060800

08010098 <RNG_ClearFlag>:
  *         This flag is cleared only by reading the Random number data (using 
  *         RNG_GetRandomNumber() function).                           
  * @retval None
  */
void RNG_ClearFlag(uint8_t RNG_FLAG)
{
 8010098:	b480      	push	{r7}
 801009a:	b083      	sub	sp, #12
 801009c:	af00      	add	r7, sp, #0
 801009e:	4603      	mov	r3, r0
 80100a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
  /* Clear the selected RNG flags */
  RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
 80100a2:	4b05      	ldr	r3, [pc, #20]	; (80100b8 <RNG_ClearFlag+0x20>)
 80100a4:	79fa      	ldrb	r2, [r7, #7]
 80100a6:	0112      	lsls	r2, r2, #4
 80100a8:	43d2      	mvns	r2, r2
 80100aa:	605a      	str	r2, [r3, #4]
}
 80100ac:	370c      	adds	r7, #12
 80100ae:	46bd      	mov	sp, r7
 80100b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b4:	4770      	bx	lr
 80100b6:	bf00      	nop
 80100b8:	50060800 	.word	0x50060800

080100bc <RNG_GetITStatus>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.                   
  * @retval The new state of RNG_IT (SET or RESET).
  */
ITStatus RNG_GetITStatus(uint8_t RNG_IT)
{
 80100bc:	b480      	push	{r7}
 80100be:	b085      	sub	sp, #20
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	4603      	mov	r3, r0
 80100c4:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 80100c6:	2300      	movs	r3, #0
 80100c8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RNG_GET_IT(RNG_IT));

  /* Check the status of the specified RNG interrupt */
  if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
 80100ca:	4b09      	ldr	r3, [pc, #36]	; (80100f0 <RNG_GetITStatus+0x34>)
 80100cc:	685a      	ldr	r2, [r3, #4]
 80100ce:	79fb      	ldrb	r3, [r7, #7]
 80100d0:	4013      	ands	r3, r2
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d002      	beq.n	80100dc <RNG_GetITStatus+0x20>
  {
    /* RNG_IT is set */
    bitstatus = SET;
 80100d6:	2301      	movs	r3, #1
 80100d8:	73fb      	strb	r3, [r7, #15]
 80100da:	e001      	b.n	80100e0 <RNG_GetITStatus+0x24>
  }
  else
  {
    /* RNG_IT is reset */
    bitstatus = RESET;
 80100dc:	2300      	movs	r3, #0
 80100de:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RNG_IT status */
  return bitstatus;
 80100e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80100e2:	4618      	mov	r0, r3
 80100e4:	3714      	adds	r7, #20
 80100e6:	46bd      	mov	sp, r7
 80100e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ec:	4770      	bx	lr
 80100ee:	bf00      	nop
 80100f0:	50060800 	.word	0x50060800

080100f4 <RNG_ClearITPendingBit>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.
  * @retval None
  */
void RNG_ClearITPendingBit(uint8_t RNG_IT)
{
 80100f4:	b480      	push	{r7}
 80100f6:	b083      	sub	sp, #12
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	4603      	mov	r3, r0
 80100fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RNG_IT(RNG_IT));

  /* Clear the selected RNG interrupt pending bit */
  RNG->SR = (uint8_t)~RNG_IT;
 80100fe:	4b05      	ldr	r3, [pc, #20]	; (8010114 <RNG_ClearITPendingBit+0x20>)
 8010100:	79fa      	ldrb	r2, [r7, #7]
 8010102:	43d2      	mvns	r2, r2
 8010104:	b2d2      	uxtb	r2, r2
 8010106:	605a      	str	r2, [r3, #4]
}
 8010108:	370c      	adds	r7, #12
 801010a:	46bd      	mov	sp, r7
 801010c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010110:	4770      	bx	lr
 8010112:	bf00      	nop
 8010114:	50060800 	.word	0x50060800

08010118 <RTC_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are deinitialized
  *          - ERROR: RTC registers are not deinitialized
  */
ErrorStatus RTC_DeInit(void)
{
 8010118:	b580      	push	{r7, lr}
 801011a:	b084      	sub	sp, #16
 801011c:	af00      	add	r7, sp, #0
  __IO uint32_t wutcounter = 0x00;
 801011e:	2300      	movs	r3, #0
 8010120:	607b      	str	r3, [r7, #4]
  uint32_t wutwfstatus = 0x00;
 8010122:	2300      	movs	r3, #0
 8010124:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8010126:	2300      	movs	r3, #0
 8010128:	73fb      	strb	r3, [r7, #15]
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 801012a:	4b36      	ldr	r3, [pc, #216]	; (8010204 <RTC_DeInit+0xec>)
 801012c:	22ca      	movs	r2, #202	; 0xca
 801012e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010130:	4b34      	ldr	r3, [pc, #208]	; (8010204 <RTC_DeInit+0xec>)
 8010132:	2253      	movs	r2, #83	; 0x53
 8010134:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8010136:	f000 f8d1 	bl	80102dc <RTC_EnterInitMode>
 801013a:	4603      	mov	r3, r0
 801013c:	2b00      	cmp	r3, #0
 801013e:	d102      	bne.n	8010146 <RTC_DeInit+0x2e>
  {
    status = ERROR;
 8010140:	2300      	movs	r3, #0
 8010142:	73fb      	strb	r3, [r7, #15]
 8010144:	e055      	b.n	80101f2 <RTC_DeInit+0xda>
  }  
  else
  {
    /* Reset TR, DR and CR registers */
    RTC->TR = (uint32_t)0x00000000;
 8010146:	4b2f      	ldr	r3, [pc, #188]	; (8010204 <RTC_DeInit+0xec>)
 8010148:	2200      	movs	r2, #0
 801014a:	601a      	str	r2, [r3, #0]
    RTC->DR = (uint32_t)0x00002101;
 801014c:	4b2d      	ldr	r3, [pc, #180]	; (8010204 <RTC_DeInit+0xec>)
 801014e:	f242 1201 	movw	r2, #8449	; 0x2101
 8010152:	605a      	str	r2, [r3, #4]
    /* Reset All CR bits except CR[2:0] */
    RTC->CR &= (uint32_t)0x00000007;
 8010154:	4b2b      	ldr	r3, [pc, #172]	; (8010204 <RTC_DeInit+0xec>)
 8010156:	4a2b      	ldr	r2, [pc, #172]	; (8010204 <RTC_DeInit+0xec>)
 8010158:	6892      	ldr	r2, [r2, #8]
 801015a:	f002 0207 	and.w	r2, r2, #7
 801015e:	609a      	str	r2, [r3, #8]
  
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 8010160:	4b28      	ldr	r3, [pc, #160]	; (8010204 <RTC_DeInit+0xec>)
 8010162:	68db      	ldr	r3, [r3, #12]
 8010164:	f003 0304 	and.w	r3, r3, #4
 8010168:	60bb      	str	r3, [r7, #8]
      wutcounter++;  
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	3301      	adds	r3, #1
 801016e:	607b      	str	r3, [r7, #4]
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010176:	d002      	beq.n	801017e <RTC_DeInit+0x66>
 8010178:	68bb      	ldr	r3, [r7, #8]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d0f0      	beq.n	8010160 <RTC_DeInit+0x48>
    
    if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 801017e:	4b21      	ldr	r3, [pc, #132]	; (8010204 <RTC_DeInit+0xec>)
 8010180:	68db      	ldr	r3, [r3, #12]
 8010182:	f003 0304 	and.w	r3, r3, #4
 8010186:	2b00      	cmp	r3, #0
 8010188:	d102      	bne.n	8010190 <RTC_DeInit+0x78>
    {
      status = ERROR;
 801018a:	2300      	movs	r3, #0
 801018c:	73fb      	strb	r3, [r7, #15]
 801018e:	e030      	b.n	80101f2 <RTC_DeInit+0xda>
    }
    else
    {
      /* Reset all RTC CR register bits */
      RTC->CR &= (uint32_t)0x00000000;
 8010190:	4b1c      	ldr	r3, [pc, #112]	; (8010204 <RTC_DeInit+0xec>)
 8010192:	689b      	ldr	r3, [r3, #8]
 8010194:	4b1b      	ldr	r3, [pc, #108]	; (8010204 <RTC_DeInit+0xec>)
 8010196:	2200      	movs	r2, #0
 8010198:	609a      	str	r2, [r3, #8]
      RTC->WUTR = (uint32_t)0x0000FFFF;
 801019a:	4b1a      	ldr	r3, [pc, #104]	; (8010204 <RTC_DeInit+0xec>)
 801019c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80101a0:	615a      	str	r2, [r3, #20]
      RTC->PRER = (uint32_t)0x007F00FF;
 80101a2:	4b18      	ldr	r3, [pc, #96]	; (8010204 <RTC_DeInit+0xec>)
 80101a4:	4a18      	ldr	r2, [pc, #96]	; (8010208 <RTC_DeInit+0xf0>)
 80101a6:	611a      	str	r2, [r3, #16]
      RTC->CALIBR = (uint32_t)0x00000000;
 80101a8:	4b16      	ldr	r3, [pc, #88]	; (8010204 <RTC_DeInit+0xec>)
 80101aa:	2200      	movs	r2, #0
 80101ac:	619a      	str	r2, [r3, #24]
      RTC->ALRMAR = (uint32_t)0x00000000;        
 80101ae:	4b15      	ldr	r3, [pc, #84]	; (8010204 <RTC_DeInit+0xec>)
 80101b0:	2200      	movs	r2, #0
 80101b2:	61da      	str	r2, [r3, #28]
      RTC->ALRMBR = (uint32_t)0x00000000;
 80101b4:	4b13      	ldr	r3, [pc, #76]	; (8010204 <RTC_DeInit+0xec>)
 80101b6:	2200      	movs	r2, #0
 80101b8:	621a      	str	r2, [r3, #32]
      RTC->SHIFTR = (uint32_t)0x00000000;
 80101ba:	4b12      	ldr	r3, [pc, #72]	; (8010204 <RTC_DeInit+0xec>)
 80101bc:	2200      	movs	r2, #0
 80101be:	62da      	str	r2, [r3, #44]	; 0x2c
      RTC->CALR = (uint32_t)0x00000000;
 80101c0:	4b10      	ldr	r3, [pc, #64]	; (8010204 <RTC_DeInit+0xec>)
 80101c2:	2200      	movs	r2, #0
 80101c4:	63da      	str	r2, [r3, #60]	; 0x3c
      RTC->ALRMASSR = (uint32_t)0x00000000;
 80101c6:	4b0f      	ldr	r3, [pc, #60]	; (8010204 <RTC_DeInit+0xec>)
 80101c8:	2200      	movs	r2, #0
 80101ca:	645a      	str	r2, [r3, #68]	; 0x44
      RTC->ALRMBSSR = (uint32_t)0x00000000;
 80101cc:	4b0d      	ldr	r3, [pc, #52]	; (8010204 <RTC_DeInit+0xec>)
 80101ce:	2200      	movs	r2, #0
 80101d0:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Reset ISR register and exit initialization mode */
      RTC->ISR = (uint32_t)0x00000000;
 80101d2:	4b0c      	ldr	r3, [pc, #48]	; (8010204 <RTC_DeInit+0xec>)
 80101d4:	2200      	movs	r2, #0
 80101d6:	60da      	str	r2, [r3, #12]
      
      /* Reset Tamper and alternate functions configuration register */
      RTC->TAFCR = 0x00000000;
 80101d8:	4b0a      	ldr	r3, [pc, #40]	; (8010204 <RTC_DeInit+0xec>)
 80101da:	2200      	movs	r2, #0
 80101dc:	641a      	str	r2, [r3, #64]	; 0x40
  
      if(RTC_WaitForSynchro() == ERROR)
 80101de:	f000 f8c5 	bl	801036c <RTC_WaitForSynchro>
 80101e2:	4603      	mov	r3, r0
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d102      	bne.n	80101ee <RTC_DeInit+0xd6>
      {
        status = ERROR;
 80101e8:	2300      	movs	r3, #0
 80101ea:	73fb      	strb	r3, [r7, #15]
 80101ec:	e001      	b.n	80101f2 <RTC_DeInit+0xda>
      }
      else
      {
        status = SUCCESS;      
 80101ee:	2301      	movs	r3, #1
 80101f0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 80101f2:	4b04      	ldr	r3, [pc, #16]	; (8010204 <RTC_DeInit+0xec>)
 80101f4:	22ff      	movs	r2, #255	; 0xff
 80101f6:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 80101f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80101fa:	4618      	mov	r0, r3
 80101fc:	3710      	adds	r7, #16
 80101fe:	46bd      	mov	sp, r7
 8010200:	bd80      	pop	{r7, pc}
 8010202:	bf00      	nop
 8010204:	40002800 	.word	0x40002800
 8010208:	007f00ff 	.word	0x007f00ff

0801020c <RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized  
  */
ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
{
 801020c:	b580      	push	{r7, lr}
 801020e:	b084      	sub	sp, #16
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]
  ErrorStatus status = ERROR;
 8010214:	2300      	movs	r3, #0
 8010216:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
  assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
  assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010218:	4b19      	ldr	r3, [pc, #100]	; (8010280 <RTC_Init+0x74>)
 801021a:	22ca      	movs	r2, #202	; 0xca
 801021c:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 801021e:	4b18      	ldr	r3, [pc, #96]	; (8010280 <RTC_Init+0x74>)
 8010220:	2253      	movs	r2, #83	; 0x53
 8010222:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8010224:	f000 f85a 	bl	80102dc <RTC_EnterInitMode>
 8010228:	4603      	mov	r3, r0
 801022a:	2b00      	cmp	r3, #0
 801022c:	d102      	bne.n	8010234 <RTC_Init+0x28>
  {
    status = ERROR;
 801022e:	2300      	movs	r3, #0
 8010230:	73fb      	strb	r3, [r7, #15]
 8010232:	e01c      	b.n	801026e <RTC_Init+0x62>
  } 
  else
  {
    /* Clear RTC CR FMT Bit */
    RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 8010234:	4b12      	ldr	r3, [pc, #72]	; (8010280 <RTC_Init+0x74>)
 8010236:	4a12      	ldr	r2, [pc, #72]	; (8010280 <RTC_Init+0x74>)
 8010238:	6892      	ldr	r2, [r2, #8]
 801023a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801023e:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 8010240:	4b0f      	ldr	r3, [pc, #60]	; (8010280 <RTC_Init+0x74>)
 8010242:	4a0f      	ldr	r2, [pc, #60]	; (8010280 <RTC_Init+0x74>)
 8010244:	6891      	ldr	r1, [r2, #8]
 8010246:	687a      	ldr	r2, [r7, #4]
 8010248:	6812      	ldr	r2, [r2, #0]
 801024a:	430a      	orrs	r2, r1
 801024c:	609a      	str	r2, [r3, #8]
  
    /* Configure the RTC PRER */
    RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 801024e:	4b0c      	ldr	r3, [pc, #48]	; (8010280 <RTC_Init+0x74>)
 8010250:	687a      	ldr	r2, [r7, #4]
 8010252:	6892      	ldr	r2, [r2, #8]
 8010254:	611a      	str	r2, [r3, #16]
    RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 8010256:	4b0a      	ldr	r3, [pc, #40]	; (8010280 <RTC_Init+0x74>)
 8010258:	4a09      	ldr	r2, [pc, #36]	; (8010280 <RTC_Init+0x74>)
 801025a:	6911      	ldr	r1, [r2, #16]
 801025c:	687a      	ldr	r2, [r7, #4]
 801025e:	6852      	ldr	r2, [r2, #4]
 8010260:	0412      	lsls	r2, r2, #16
 8010262:	430a      	orrs	r2, r1
 8010264:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    RTC_ExitInitMode();
 8010266:	f000 f873 	bl	8010350 <RTC_ExitInitMode>

    status = SUCCESS;    
 801026a:	2301      	movs	r3, #1
 801026c:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 801026e:	4b04      	ldr	r3, [pc, #16]	; (8010280 <RTC_Init+0x74>)
 8010270:	22ff      	movs	r2, #255	; 0xff
 8010272:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8010274:	7bfb      	ldrb	r3, [r7, #15]
}
 8010276:	4618      	mov	r0, r3
 8010278:	3710      	adds	r7, #16
 801027a:	46bd      	mov	sp, r7
 801027c:	bd80      	pop	{r7, pc}
 801027e:	bf00      	nop
 8010280:	40002800 	.word	0x40002800

08010284 <RTC_StructInit>:
  * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
{
 8010284:	b480      	push	{r7}
 8010286:	b083      	sub	sp, #12
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
  /* Initialize the RTC_HourFormat member */
  RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	2200      	movs	r2, #0
 8010290:	601a      	str	r2, [r3, #0]
    
  /* Initialize the RTC_AsynchPrediv member */
  RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	227f      	movs	r2, #127	; 0x7f
 8010296:	605a      	str	r2, [r3, #4]

  /* Initialize the RTC_SynchPrediv member */
  RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	22ff      	movs	r2, #255	; 0xff
 801029c:	609a      	str	r2, [r3, #8]
}
 801029e:	370c      	adds	r7, #12
 80102a0:	46bd      	mov	sp, r7
 80102a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a6:	4770      	bx	lr

080102a8 <RTC_WriteProtectionCmd>:
  * @param  NewState: new state of the write protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_WriteProtectionCmd(FunctionalState NewState)
{
 80102a8:	b480      	push	{r7}
 80102aa:	b083      	sub	sp, #12
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	4603      	mov	r3, r0
 80102b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 80102b2:	79fb      	ldrb	r3, [r7, #7]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d003      	beq.n	80102c0 <RTC_WriteProtectionCmd+0x18>
  {
    /* Enable the write protection for RTC registers */
    RTC->WPR = 0xFF;   
 80102b8:	4b07      	ldr	r3, [pc, #28]	; (80102d8 <RTC_WriteProtectionCmd+0x30>)
 80102ba:	22ff      	movs	r2, #255	; 0xff
 80102bc:	625a      	str	r2, [r3, #36]	; 0x24
 80102be:	e005      	b.n	80102cc <RTC_WriteProtectionCmd+0x24>
  }
  else
  {
    /* Disable the write protection for RTC registers */
    RTC->WPR = 0xCA;
 80102c0:	4b05      	ldr	r3, [pc, #20]	; (80102d8 <RTC_WriteProtectionCmd+0x30>)
 80102c2:	22ca      	movs	r2, #202	; 0xca
 80102c4:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->WPR = 0x53;    
 80102c6:	4b04      	ldr	r3, [pc, #16]	; (80102d8 <RTC_WriteProtectionCmd+0x30>)
 80102c8:	2253      	movs	r2, #83	; 0x53
 80102ca:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80102cc:	370c      	adds	r7, #12
 80102ce:	46bd      	mov	sp, r7
 80102d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d4:	4770      	bx	lr
 80102d6:	bf00      	nop
 80102d8:	40002800 	.word	0x40002800

080102dc <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode  
  */
ErrorStatus RTC_EnterInitMode(void)
{
 80102dc:	b480      	push	{r7}
 80102de:	b085      	sub	sp, #20
 80102e0:	af00      	add	r7, sp, #0
  __IO uint32_t initcounter = 0x00;
 80102e2:	2300      	movs	r3, #0
 80102e4:	607b      	str	r3, [r7, #4]
  ErrorStatus status = ERROR;
 80102e6:	2300      	movs	r3, #0
 80102e8:	73fb      	strb	r3, [r7, #15]
  uint32_t initstatus = 0x00;
 80102ea:	2300      	movs	r3, #0
 80102ec:	60bb      	str	r3, [r7, #8]
     
  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80102ee:	4b17      	ldr	r3, [pc, #92]	; (801034c <RTC_EnterInitMode+0x70>)
 80102f0:	68db      	ldr	r3, [r3, #12]
 80102f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d11e      	bne.n	8010338 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    RTC->ISR = (uint32_t)RTC_INIT_MASK;
 80102fa:	4b14      	ldr	r3, [pc, #80]	; (801034c <RTC_EnterInitMode+0x70>)
 80102fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010300:	60da      	str	r2, [r3, #12]
    
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    do
    {
      initstatus = RTC->ISR & RTC_ISR_INITF;
 8010302:	4b12      	ldr	r3, [pc, #72]	; (801034c <RTC_EnterInitMode+0x70>)
 8010304:	68db      	ldr	r3, [r3, #12]
 8010306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801030a:	60bb      	str	r3, [r7, #8]
      initcounter++;  
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	3301      	adds	r3, #1
 8010310:	607b      	str	r3, [r7, #4]
    } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010318:	d002      	beq.n	8010320 <RTC_EnterInitMode+0x44>
 801031a:	68bb      	ldr	r3, [r7, #8]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d0f0      	beq.n	8010302 <RTC_EnterInitMode+0x26>
    
    if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 8010320:	4b0a      	ldr	r3, [pc, #40]	; (801034c <RTC_EnterInitMode+0x70>)
 8010322:	68db      	ldr	r3, [r3, #12]
 8010324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010328:	2b00      	cmp	r3, #0
 801032a:	d002      	beq.n	8010332 <RTC_EnterInitMode+0x56>
    {
      status = SUCCESS;
 801032c:	2301      	movs	r3, #1
 801032e:	73fb      	strb	r3, [r7, #15]
 8010330:	e004      	b.n	801033c <RTC_EnterInitMode+0x60>
    }
    else
    {
      status = ERROR;
 8010332:	2300      	movs	r3, #0
 8010334:	73fb      	strb	r3, [r7, #15]
 8010336:	e001      	b.n	801033c <RTC_EnterInitMode+0x60>
    }        
  }
  else
  {
    status = SUCCESS;  
 8010338:	2301      	movs	r3, #1
 801033a:	73fb      	strb	r3, [r7, #15]
  } 
    
  return (status);  
 801033c:	7bfb      	ldrb	r3, [r7, #15]
}
 801033e:	4618      	mov	r0, r3
 8010340:	3714      	adds	r7, #20
 8010342:	46bd      	mov	sp, r7
 8010344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010348:	4770      	bx	lr
 801034a:	bf00      	nop
 801034c:	40002800 	.word	0x40002800

08010350 <RTC_ExitInitMode>:
  *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
  * @param  None
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
 8010350:	b480      	push	{r7}
 8010352:	af00      	add	r7, sp, #0
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8010354:	4b04      	ldr	r3, [pc, #16]	; (8010368 <RTC_ExitInitMode+0x18>)
 8010356:	4a04      	ldr	r2, [pc, #16]	; (8010368 <RTC_ExitInitMode+0x18>)
 8010358:	68d2      	ldr	r2, [r2, #12]
 801035a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801035e:	60da      	str	r2, [r3, #12]
}
 8010360:	46bd      	mov	sp, r7
 8010362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010366:	4770      	bx	lr
 8010368:	40002800 	.word	0x40002800

0801036c <RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus RTC_WaitForSynchro(void)
{
 801036c:	b480      	push	{r7}
 801036e:	b085      	sub	sp, #20
 8010370:	af00      	add	r7, sp, #0
  __IO uint32_t synchrocounter = 0;
 8010372:	2300      	movs	r3, #0
 8010374:	607b      	str	r3, [r7, #4]
  ErrorStatus status = ERROR;
 8010376:	2300      	movs	r3, #0
 8010378:	73fb      	strb	r3, [r7, #15]
  uint32_t synchrostatus = 0x00;
 801037a:	2300      	movs	r3, #0
 801037c:	60bb      	str	r3, [r7, #8]

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 801037e:	4b18      	ldr	r3, [pc, #96]	; (80103e0 <RTC_WaitForSynchro+0x74>)
 8010380:	22ca      	movs	r2, #202	; 0xca
 8010382:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010384:	4b16      	ldr	r3, [pc, #88]	; (80103e0 <RTC_WaitForSynchro+0x74>)
 8010386:	2253      	movs	r2, #83	; 0x53
 8010388:	625a      	str	r2, [r3, #36]	; 0x24
    
  /* Clear RSF flag */
  RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 801038a:	4b15      	ldr	r3, [pc, #84]	; (80103e0 <RTC_WaitForSynchro+0x74>)
 801038c:	4a14      	ldr	r2, [pc, #80]	; (80103e0 <RTC_WaitForSynchro+0x74>)
 801038e:	68d2      	ldr	r2, [r2, #12]
 8010390:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8010394:	60da      	str	r2, [r3, #12]
    
  /* Wait the registers to be synchronised */
  do
  {
    synchrostatus = RTC->ISR & RTC_ISR_RSF;
 8010396:	4b12      	ldr	r3, [pc, #72]	; (80103e0 <RTC_WaitForSynchro+0x74>)
 8010398:	68db      	ldr	r3, [r3, #12]
 801039a:	f003 0320 	and.w	r3, r3, #32
 801039e:	60bb      	str	r3, [r7, #8]
    synchrocounter++;  
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	3301      	adds	r3, #1
 80103a4:	607b      	str	r3, [r7, #4]
  } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80103ac:	d002      	beq.n	80103b4 <RTC_WaitForSynchro+0x48>
 80103ae:	68bb      	ldr	r3, [r7, #8]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d0f0      	beq.n	8010396 <RTC_WaitForSynchro+0x2a>
    
  if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 80103b4:	4b0a      	ldr	r3, [pc, #40]	; (80103e0 <RTC_WaitForSynchro+0x74>)
 80103b6:	68db      	ldr	r3, [r3, #12]
 80103b8:	f003 0320 	and.w	r3, r3, #32
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d002      	beq.n	80103c6 <RTC_WaitForSynchro+0x5a>
  {
    status = SUCCESS;
 80103c0:	2301      	movs	r3, #1
 80103c2:	73fb      	strb	r3, [r7, #15]
 80103c4:	e001      	b.n	80103ca <RTC_WaitForSynchro+0x5e>
  }
  else
  {
    status = ERROR;
 80103c6:	2300      	movs	r3, #0
 80103c8:	73fb      	strb	r3, [r7, #15]
  }        

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80103ca:	4b05      	ldr	r3, [pc, #20]	; (80103e0 <RTC_WaitForSynchro+0x74>)
 80103cc:	22ff      	movs	r2, #255	; 0xff
 80103ce:	625a      	str	r2, [r3, #36]	; 0x24
    
  return (status); 
 80103d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80103d2:	4618      	mov	r0, r3
 80103d4:	3714      	adds	r7, #20
 80103d6:	46bd      	mov	sp, r7
 80103d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103dc:	4770      	bx	lr
 80103de:	bf00      	nop
 80103e0:	40002800 	.word	0x40002800

080103e4 <RTC_RefClockCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC reference clock detection is enabled
  *          - ERROR: RTC reference clock detection is disabled  
  */
ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
{ 
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b084      	sub	sp, #16
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	4603      	mov	r3, r0
 80103ec:	71fb      	strb	r3, [r7, #7]
  ErrorStatus status = ERROR;
 80103ee:	2300      	movs	r3, #0
 80103f0:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80103f2:	4b15      	ldr	r3, [pc, #84]	; (8010448 <RTC_RefClockCmd+0x64>)
 80103f4:	22ca      	movs	r2, #202	; 0xca
 80103f6:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80103f8:	4b13      	ldr	r3, [pc, #76]	; (8010448 <RTC_RefClockCmd+0x64>)
 80103fa:	2253      	movs	r2, #83	; 0x53
 80103fc:	625a      	str	r2, [r3, #36]	; 0x24
    
  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 80103fe:	f7ff ff6d 	bl	80102dc <RTC_EnterInitMode>
 8010402:	4603      	mov	r3, r0
 8010404:	2b00      	cmp	r3, #0
 8010406:	d102      	bne.n	801040e <RTC_RefClockCmd+0x2a>
  {
    status = ERROR;
 8010408:	2300      	movs	r3, #0
 801040a:	73fb      	strb	r3, [r7, #15]
 801040c:	e013      	b.n	8010436 <RTC_RefClockCmd+0x52>
  } 
  else
  {  
    if (NewState != DISABLE)
 801040e:	79fb      	ldrb	r3, [r7, #7]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d006      	beq.n	8010422 <RTC_RefClockCmd+0x3e>
    {
      /* Enable the RTC reference clock detection */
      RTC->CR |= RTC_CR_REFCKON;   
 8010414:	4b0c      	ldr	r3, [pc, #48]	; (8010448 <RTC_RefClockCmd+0x64>)
 8010416:	4a0c      	ldr	r2, [pc, #48]	; (8010448 <RTC_RefClockCmd+0x64>)
 8010418:	6892      	ldr	r2, [r2, #8]
 801041a:	f042 0210 	orr.w	r2, r2, #16
 801041e:	609a      	str	r2, [r3, #8]
 8010420:	e005      	b.n	801042e <RTC_RefClockCmd+0x4a>
    }
    else
    {
      /* Disable the RTC reference clock detection */
      RTC->CR &= ~RTC_CR_REFCKON;    
 8010422:	4b09      	ldr	r3, [pc, #36]	; (8010448 <RTC_RefClockCmd+0x64>)
 8010424:	4a08      	ldr	r2, [pc, #32]	; (8010448 <RTC_RefClockCmd+0x64>)
 8010426:	6892      	ldr	r2, [r2, #8]
 8010428:	f022 0210 	bic.w	r2, r2, #16
 801042c:	609a      	str	r2, [r3, #8]
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 801042e:	f7ff ff8f 	bl	8010350 <RTC_ExitInitMode>
    
    status = SUCCESS;
 8010432:	2301      	movs	r3, #1
 8010434:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 8010436:	4b04      	ldr	r3, [pc, #16]	; (8010448 <RTC_RefClockCmd+0x64>)
 8010438:	22ff      	movs	r2, #255	; 0xff
 801043a:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status; 
 801043c:	7bfb      	ldrb	r3, [r7, #15]
}
 801043e:	4618      	mov	r0, r3
 8010440:	3710      	adds	r7, #16
 8010442:	46bd      	mov	sp, r7
 8010444:	bd80      	pop	{r7, pc}
 8010446:	bf00      	nop
 8010448:	40002800 	.word	0x40002800

0801044c <RTC_BypassShadowCmd>:
  * @param  NewState: new state of the Bypass Shadow feature.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
*/
void RTC_BypassShadowCmd(FunctionalState NewState)
{
 801044c:	b480      	push	{r7}
 801044e:	b083      	sub	sp, #12
 8010450:	af00      	add	r7, sp, #0
 8010452:	4603      	mov	r3, r0
 8010454:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010456:	4b0f      	ldr	r3, [pc, #60]	; (8010494 <RTC_BypassShadowCmd+0x48>)
 8010458:	22ca      	movs	r2, #202	; 0xca
 801045a:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 801045c:	4b0d      	ldr	r3, [pc, #52]	; (8010494 <RTC_BypassShadowCmd+0x48>)
 801045e:	2253      	movs	r2, #83	; 0x53
 8010460:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (NewState != DISABLE)
 8010462:	79fb      	ldrb	r3, [r7, #7]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d006      	beq.n	8010476 <RTC_BypassShadowCmd+0x2a>
  {
    /* Set the BYPSHAD bit */
    RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8010468:	4b0a      	ldr	r3, [pc, #40]	; (8010494 <RTC_BypassShadowCmd+0x48>)
 801046a:	4a0a      	ldr	r2, [pc, #40]	; (8010494 <RTC_BypassShadowCmd+0x48>)
 801046c:	6892      	ldr	r2, [r2, #8]
 801046e:	f042 0220 	orr.w	r2, r2, #32
 8010472:	609a      	str	r2, [r3, #8]
 8010474:	e005      	b.n	8010482 <RTC_BypassShadowCmd+0x36>
  }
  else
  {
    /* Reset the BYPSHAD bit */
    RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 8010476:	4b07      	ldr	r3, [pc, #28]	; (8010494 <RTC_BypassShadowCmd+0x48>)
 8010478:	4a06      	ldr	r2, [pc, #24]	; (8010494 <RTC_BypassShadowCmd+0x48>)
 801047a:	6892      	ldr	r2, [r2, #8]
 801047c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8010480:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8010482:	4b04      	ldr	r3, [pc, #16]	; (8010494 <RTC_BypassShadowCmd+0x48>)
 8010484:	22ff      	movs	r2, #255	; 0xff
 8010486:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010488:	370c      	adds	r7, #12
 801048a:	46bd      	mov	sp, r7
 801048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010490:	4770      	bx	lr
 8010492:	bf00      	nop
 8010494:	40002800 	.word	0x40002800

08010498 <RTC_SetTime>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 8010498:	b590      	push	{r4, r7, lr}
 801049a:	b085      	sub	sp, #20
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
 80104a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80104a2:	2300      	movs	r3, #0
 80104a4:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = ERROR;
 80104a6:	2300      	movs	r3, #0
 80104a8:	72fb      	strb	r3, [r7, #11]
    
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  if (RTC_Format == RTC_Format_BIN)
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d109      	bne.n	80104c4 <RTC_SetTime+0x2c>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80104b0:	4b3d      	ldr	r3, [pc, #244]	; (80105a8 <RTC_SetTime+0x110>)
 80104b2:	689b      	ldr	r3, [r3, #8]
 80104b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d114      	bne.n	80104e6 <RTC_SetTime+0x4e>
      assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 80104bc:	683b      	ldr	r3, [r7, #0]
 80104be:	2200      	movs	r2, #0
 80104c0:	70da      	strb	r2, [r3, #3]
 80104c2:	e010      	b.n	80104e6 <RTC_SetTime+0x4e>
    assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
    assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80104c4:	4b38      	ldr	r3, [pc, #224]	; (80105a8 <RTC_SetTime+0x110>)
 80104c6:	689b      	ldr	r3, [r3, #8]
 80104c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d007      	beq.n	80104e0 <RTC_SetTime+0x48>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 80104d0:	683b      	ldr	r3, [r7, #0]
 80104d2:	781b      	ldrb	r3, [r3, #0]
 80104d4:	4618      	mov	r0, r3
 80104d6:	f001 f885 	bl	80115e4 <RTC_Bcd2ToByte>
 80104da:	4603      	mov	r3, r0
 80104dc:	60fb      	str	r3, [r7, #12]
 80104de:	e002      	b.n	80104e6 <RTC_SetTime+0x4e>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 80104e0:	683b      	ldr	r3, [r7, #0]
 80104e2:	2200      	movs	r2, #0
 80104e4:	70da      	strb	r2, [r3, #3]
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d00f      	beq.n	801050c <RTC_SetTime+0x74>
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 80104ec:	683b      	ldr	r3, [r7, #0]
 80104ee:	781b      	ldrb	r3, [r3, #0]
 80104f0:	041a      	lsls	r2, r3, #16
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 80104f2:	683b      	ldr	r3, [r7, #0]
 80104f4:	785b      	ldrb	r3, [r3, #1]
 80104f6:	021b      	lsls	r3, r3, #8
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 80104f8:	431a      	orrs	r2, r3
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 80104fa:	683b      	ldr	r3, [r7, #0]
 80104fc:	789b      	ldrb	r3, [r3, #2]
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 80104fe:	431a      	orrs	r2, r3
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 8010500:	683b      	ldr	r3, [r7, #0]
 8010502:	78db      	ldrb	r3, [r3, #3]
 8010504:	041b      	lsls	r3, r3, #16
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8010506:	4313      	orrs	r3, r2
 8010508:	60fb      	str	r3, [r7, #12]
 801050a:	e01b      	b.n	8010544 <RTC_SetTime+0xac>
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 801050c:	683b      	ldr	r3, [r7, #0]
 801050e:	781b      	ldrb	r3, [r3, #0]
 8010510:	4618      	mov	r0, r3
 8010512:	f001 f849 	bl	80115a8 <RTC_ByteToBcd2>
 8010516:	4603      	mov	r3, r0
 8010518:	041c      	lsls	r4, r3, #16
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 801051a:	683b      	ldr	r3, [r7, #0]
 801051c:	785b      	ldrb	r3, [r3, #1]
 801051e:	4618      	mov	r0, r3
 8010520:	f001 f842 	bl	80115a8 <RTC_ByteToBcd2>
 8010524:	4603      	mov	r3, r0
 8010526:	021b      	lsls	r3, r3, #8
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8010528:	431c      	orrs	r4, r3
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 801052a:	683b      	ldr	r3, [r7, #0]
 801052c:	789b      	ldrb	r3, [r3, #2]
 801052e:	4618      	mov	r0, r3
 8010530:	f001 f83a 	bl	80115a8 <RTC_ByteToBcd2>
 8010534:	4603      	mov	r3, r0
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8010536:	ea44 0203 	orr.w	r2, r4, r3
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 801053a:	683b      	ldr	r3, [r7, #0]
 801053c:	78db      	ldrb	r3, [r3, #3]
 801053e:	041b      	lsls	r3, r3, #16
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8010540:	4313      	orrs	r3, r2
 8010542:	60fb      	str	r3, [r7, #12]
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
  }  

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010544:	4b18      	ldr	r3, [pc, #96]	; (80105a8 <RTC_SetTime+0x110>)
 8010546:	22ca      	movs	r2, #202	; 0xca
 8010548:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 801054a:	4b17      	ldr	r3, [pc, #92]	; (80105a8 <RTC_SetTime+0x110>)
 801054c:	2253      	movs	r2, #83	; 0x53
 801054e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8010550:	f7ff fec4 	bl	80102dc <RTC_EnterInitMode>
 8010554:	4603      	mov	r3, r0
 8010556:	2b00      	cmp	r3, #0
 8010558:	d102      	bne.n	8010560 <RTC_SetTime+0xc8>
  {
    status = ERROR;
 801055a:	2300      	movs	r3, #0
 801055c:	72fb      	strb	r3, [r7, #11]
 801055e:	e01b      	b.n	8010598 <RTC_SetTime+0x100>
  } 
  else
  {
    /* Set the RTC_TR register */
    RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8010560:	4a11      	ldr	r2, [pc, #68]	; (80105a8 <RTC_SetTime+0x110>)
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8010568:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 801056c:	6013      	str	r3, [r2, #0]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 801056e:	f7ff feef 	bl	8010350 <RTC_ExitInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 8010572:	4b0d      	ldr	r3, [pc, #52]	; (80105a8 <RTC_SetTime+0x110>)
 8010574:	689b      	ldr	r3, [r3, #8]
 8010576:	f003 0320 	and.w	r3, r3, #32
 801057a:	2b00      	cmp	r3, #0
 801057c:	d10a      	bne.n	8010594 <RTC_SetTime+0xfc>
    {
    if(RTC_WaitForSynchro() == ERROR)
 801057e:	f7ff fef5 	bl	801036c <RTC_WaitForSynchro>
 8010582:	4603      	mov	r3, r0
 8010584:	2b00      	cmp	r3, #0
 8010586:	d102      	bne.n	801058e <RTC_SetTime+0xf6>
    {
      status = ERROR;
 8010588:	2300      	movs	r3, #0
 801058a:	72fb      	strb	r3, [r7, #11]
 801058c:	e004      	b.n	8010598 <RTC_SetTime+0x100>
    }
    else
    {
      status = SUCCESS;
 801058e:	2301      	movs	r3, #1
 8010590:	72fb      	strb	r3, [r7, #11]
 8010592:	e001      	b.n	8010598 <RTC_SetTime+0x100>
    }
  }
    else
    {
      status = SUCCESS;
 8010594:	2301      	movs	r3, #1
 8010596:	72fb      	strb	r3, [r7, #11]
    }
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010598:	4b03      	ldr	r3, [pc, #12]	; (80105a8 <RTC_SetTime+0x110>)
 801059a:	22ff      	movs	r2, #255	; 0xff
 801059c:	625a      	str	r2, [r3, #36]	; 0x24
    
  return status;
 801059e:	7afb      	ldrb	r3, [r7, #11]
}
 80105a0:	4618      	mov	r0, r3
 80105a2:	3714      	adds	r7, #20
 80105a4:	46bd      	mov	sp, r7
 80105a6:	bd90      	pop	{r4, r7, pc}
 80105a8:	40002800 	.word	0x40002800

080105ac <RTC_TimeStructInit>:
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
{
 80105ac:	b480      	push	{r7}
 80105ae:	b083      	sub	sp, #12
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]
  /* Time = 00h:00min:00sec */
  RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	2200      	movs	r2, #0
 80105b8:	70da      	strb	r2, [r3, #3]
  RTC_TimeStruct->RTC_Hours = 0;
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	2200      	movs	r2, #0
 80105be:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct->RTC_Minutes = 0;
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	2200      	movs	r2, #0
 80105c4:	705a      	strb	r2, [r3, #1]
  RTC_TimeStruct->RTC_Seconds = 0; 
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	2200      	movs	r2, #0
 80105ca:	709a      	strb	r2, [r3, #2]
}
 80105cc:	370c      	adds	r7, #12
 80105ce:	46bd      	mov	sp, r7
 80105d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d4:	4770      	bx	lr
 80105d6:	bf00      	nop

080105d8 <RTC_GetTime>:
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
  *                        contain the returned current time configuration.     
  * @retval None
  */
void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 80105d8:	b580      	push	{r7, lr}
 80105da:	b084      	sub	sp, #16
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
 80105e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80105e2:	2300      	movs	r3, #0
 80105e4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 80105e6:	4b22      	ldr	r3, [pc, #136]	; (8010670 <RTC_GetTime+0x98>)
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80105ee:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80105f2:	60fb      	str	r3, [r7, #12]
  
  /* Fill the structure fields with the read parameters */
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80105fa:	0c1b      	lsrs	r3, r3, #16
 80105fc:	b2da      	uxtb	r2, r3
 80105fe:	683b      	ldr	r3, [r7, #0]
 8010600:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8010608:	0a1b      	lsrs	r3, r3, #8
 801060a:	b2da      	uxtb	r2, r3
 801060c:	683b      	ldr	r3, [r7, #0]
 801060e:	705a      	strb	r2, [r3, #1]
  RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	b2db      	uxtb	r3, r3
 8010614:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010618:	b2da      	uxtb	r2, r3
 801061a:	683b      	ldr	r3, [r7, #0]
 801061c:	709a      	strb	r2, [r3, #2]
  RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010624:	0c1b      	lsrs	r3, r3, #16
 8010626:	b2da      	uxtb	r2, r3
 8010628:	683b      	ldr	r3, [r7, #0]
 801062a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d11a      	bne.n	8010668 <RTC_GetTime+0x90>
  {
    /* Convert the structure parameters to Binary format */
    RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 8010632:	683b      	ldr	r3, [r7, #0]
 8010634:	781b      	ldrb	r3, [r3, #0]
 8010636:	4618      	mov	r0, r3
 8010638:	f000 ffd4 	bl	80115e4 <RTC_Bcd2ToByte>
 801063c:	4603      	mov	r3, r0
 801063e:	461a      	mov	r2, r3
 8010640:	683b      	ldr	r3, [r7, #0]
 8010642:	701a      	strb	r2, [r3, #0]
    RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 8010644:	683b      	ldr	r3, [r7, #0]
 8010646:	785b      	ldrb	r3, [r3, #1]
 8010648:	4618      	mov	r0, r3
 801064a:	f000 ffcb 	bl	80115e4 <RTC_Bcd2ToByte>
 801064e:	4603      	mov	r3, r0
 8010650:	461a      	mov	r2, r3
 8010652:	683b      	ldr	r3, [r7, #0]
 8010654:	705a      	strb	r2, [r3, #1]
    RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 8010656:	683b      	ldr	r3, [r7, #0]
 8010658:	789b      	ldrb	r3, [r3, #2]
 801065a:	4618      	mov	r0, r3
 801065c:	f000 ffc2 	bl	80115e4 <RTC_Bcd2ToByte>
 8010660:	4603      	mov	r3, r0
 8010662:	461a      	mov	r2, r3
 8010664:	683b      	ldr	r3, [r7, #0]
 8010666:	709a      	strb	r2, [r3, #2]
  }
}
 8010668:	3710      	adds	r7, #16
 801066a:	46bd      	mov	sp, r7
 801066c:	bd80      	pop	{r7, pc}
 801066e:	bf00      	nop
 8010670:	40002800 	.word	0x40002800

08010674 <RTC_GetSubSecond>:
  *         SSR register.
  * @param  None
  * @retval RTC current Calendar Sub seconds value.
  */
uint32_t RTC_GetSubSecond(void)
{
 8010674:	b480      	push	{r7}
 8010676:	b083      	sub	sp, #12
 8010678:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0;
 801067a:	2300      	movs	r3, #0
 801067c:	607b      	str	r3, [r7, #4]
  
  /* Get sub seconds values from the correspondent registers*/
  tmpreg = (uint32_t)(RTC->SSR);
 801067e:	4b06      	ldr	r3, [pc, #24]	; (8010698 <RTC_GetSubSecond+0x24>)
 8010680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010682:	607b      	str	r3, [r7, #4]
  
  /* Read DR register to unfroze calendar registers */
  (void) (RTC->DR);
 8010684:	4b04      	ldr	r3, [pc, #16]	; (8010698 <RTC_GetSubSecond+0x24>)
 8010686:	685b      	ldr	r3, [r3, #4]
  
  return (tmpreg);
 8010688:	687b      	ldr	r3, [r7, #4]
}
 801068a:	4618      	mov	r0, r3
 801068c:	370c      	adds	r7, #12
 801068e:	46bd      	mov	sp, r7
 8010690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010694:	4770      	bx	lr
 8010696:	bf00      	nop
 8010698:	40002800 	.word	0x40002800

0801069c <RTC_SetDate>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Date register is configured
  *          - ERROR: RTC Date register is not configured
  */
ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 801069c:	b590      	push	{r4, r7, lr}
 801069e:	b085      	sub	sp, #20
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	6078      	str	r0, [r7, #4]
 80106a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80106a6:	2300      	movs	r3, #0
 80106a8:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = ERROR;
 80106aa:	2300      	movs	r3, #0
 80106ac:	72fb      	strb	r3, [r7, #11]
  
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d10e      	bne.n	80106d2 <RTC_SetDate+0x36>
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	785b      	ldrb	r3, [r3, #1]
 80106b8:	f003 0310 	and.w	r3, r3, #16
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d008      	beq.n	80106d2 <RTC_SetDate+0x36>
  {
    RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 80106c0:	683b      	ldr	r3, [r7, #0]
 80106c2:	785b      	ldrb	r3, [r3, #1]
 80106c4:	f023 0310 	bic.w	r3, r3, #16
 80106c8:	b2db      	uxtb	r3, r3
 80106ca:	330a      	adds	r3, #10
 80106cc:	b2da      	uxtb	r2, r3
 80106ce:	683b      	ldr	r3, [r7, #0]
 80106d0:	705a      	strb	r2, [r3, #1]
  }  
  if (RTC_Format == RTC_Format_BIN)
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d00d      	beq.n	80106f4 <RTC_SetDate+0x58>
    assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
    tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 80106d8:	683b      	ldr	r3, [r7, #0]
 80106da:	785b      	ldrb	r3, [r3, #1]
 80106dc:	4618      	mov	r0, r3
 80106de:	f000 ff81 	bl	80115e4 <RTC_Bcd2ToByte>
 80106e2:	4603      	mov	r3, r0
 80106e4:	60fb      	str	r3, [r7, #12]
    assert_param(IS_RTC_MONTH(tmpreg));
    tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 80106e6:	683b      	ldr	r3, [r7, #0]
 80106e8:	789b      	ldrb	r3, [r3, #2]
 80106ea:	4618      	mov	r0, r3
 80106ec:	f000 ff7a 	bl	80115e4 <RTC_Bcd2ToByte>
 80106f0:	4603      	mov	r3, r0
 80106f2:	60fb      	str	r3, [r7, #12]
    assert_param(IS_RTC_DATE(tmpreg));
  }
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d00f      	beq.n	801071a <RTC_SetDate+0x7e>
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 80106fa:	683b      	ldr	r3, [r7, #0]
 80106fc:	78db      	ldrb	r3, [r3, #3]
 80106fe:	041a      	lsls	r2, r3, #16
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 8010700:	683b      	ldr	r3, [r7, #0]
 8010702:	785b      	ldrb	r3, [r3, #1]
 8010704:	021b      	lsls	r3, r3, #8
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 8010706:	431a      	orrs	r2, r3
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
 8010708:	683b      	ldr	r3, [r7, #0]
 801070a:	789b      	ldrb	r3, [r3, #2]

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 801070c:	431a      	orrs	r2, r3
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 801070e:	683b      	ldr	r3, [r7, #0]
 8010710:	781b      	ldrb	r3, [r3, #0]
 8010712:	035b      	lsls	r3, r3, #13
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 8010714:	4313      	orrs	r3, r2
 8010716:	60fb      	str	r3, [r7, #12]
 8010718:	e01b      	b.n	8010752 <RTC_SetDate+0xb6>
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 801071a:	683b      	ldr	r3, [r7, #0]
 801071c:	78db      	ldrb	r3, [r3, #3]
 801071e:	4618      	mov	r0, r3
 8010720:	f000 ff42 	bl	80115a8 <RTC_ByteToBcd2>
 8010724:	4603      	mov	r3, r0
 8010726:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 8010728:	683b      	ldr	r3, [r7, #0]
 801072a:	785b      	ldrb	r3, [r3, #1]
 801072c:	4618      	mov	r0, r3
 801072e:	f000 ff3b 	bl	80115a8 <RTC_ByteToBcd2>
 8010732:	4603      	mov	r3, r0
 8010734:	021b      	lsls	r3, r3, #8
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 8010736:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 8010738:	683b      	ldr	r3, [r7, #0]
 801073a:	789b      	ldrb	r3, [r3, #2]
 801073c:	4618      	mov	r0, r3
 801073e:	f000 ff33 	bl	80115a8 <RTC_ByteToBcd2>
 8010742:	4603      	mov	r3, r0
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 8010744:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 8010748:	683b      	ldr	r3, [r7, #0]
 801074a:	781b      	ldrb	r3, [r3, #0]
 801074c:	035b      	lsls	r3, r3, #13
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 801074e:	4313      	orrs	r3, r2
 8010750:	60fb      	str	r3, [r7, #12]
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010752:	4b19      	ldr	r3, [pc, #100]	; (80107b8 <RTC_SetDate+0x11c>)
 8010754:	22ca      	movs	r2, #202	; 0xca
 8010756:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010758:	4b17      	ldr	r3, [pc, #92]	; (80107b8 <RTC_SetDate+0x11c>)
 801075a:	2253      	movs	r2, #83	; 0x53
 801075c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 801075e:	f7ff fdbd 	bl	80102dc <RTC_EnterInitMode>
 8010762:	4603      	mov	r3, r0
 8010764:	2b00      	cmp	r3, #0
 8010766:	d102      	bne.n	801076e <RTC_SetDate+0xd2>
  {
    status = ERROR;
 8010768:	2300      	movs	r3, #0
 801076a:	72fb      	strb	r3, [r7, #11]
 801076c:	e01b      	b.n	80107a6 <RTC_SetDate+0x10a>
  } 
  else
  {
    /* Set the RTC_DR register */
    RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 801076e:	4a12      	ldr	r2, [pc, #72]	; (80107b8 <RTC_SetDate+0x11c>)
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010776:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801077a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 801077c:	f7ff fde8 	bl	8010350 <RTC_ExitInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 8010780:	4b0d      	ldr	r3, [pc, #52]	; (80107b8 <RTC_SetDate+0x11c>)
 8010782:	689b      	ldr	r3, [r3, #8]
 8010784:	f003 0320 	and.w	r3, r3, #32
 8010788:	2b00      	cmp	r3, #0
 801078a:	d10a      	bne.n	80107a2 <RTC_SetDate+0x106>
    {
    if(RTC_WaitForSynchro() == ERROR)
 801078c:	f7ff fdee 	bl	801036c <RTC_WaitForSynchro>
 8010790:	4603      	mov	r3, r0
 8010792:	2b00      	cmp	r3, #0
 8010794:	d102      	bne.n	801079c <RTC_SetDate+0x100>
    {
      status = ERROR;
 8010796:	2300      	movs	r3, #0
 8010798:	72fb      	strb	r3, [r7, #11]
 801079a:	e004      	b.n	80107a6 <RTC_SetDate+0x10a>
    }
    else
    {
      status = SUCCESS;
 801079c:	2301      	movs	r3, #1
 801079e:	72fb      	strb	r3, [r7, #11]
 80107a0:	e001      	b.n	80107a6 <RTC_SetDate+0x10a>
    }
  }
    else
    {
      status = SUCCESS;
 80107a2:	2301      	movs	r3, #1
 80107a4:	72fb      	strb	r3, [r7, #11]
    }
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 80107a6:	4b04      	ldr	r3, [pc, #16]	; (80107b8 <RTC_SetDate+0x11c>)
 80107a8:	22ff      	movs	r2, #255	; 0xff
 80107aa:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 80107ac:	7afb      	ldrb	r3, [r7, #11]
}
 80107ae:	4618      	mov	r0, r3
 80107b0:	3714      	adds	r7, #20
 80107b2:	46bd      	mov	sp, r7
 80107b4:	bd90      	pop	{r4, r7, pc}
 80107b6:	bf00      	nop
 80107b8:	40002800 	.word	0x40002800

080107bc <RTC_DateStructInit>:
  * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
{
 80107bc:	b480      	push	{r7}
 80107be:	b083      	sub	sp, #12
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
  /* Monday, January 01 xx00 */
  RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	2201      	movs	r2, #1
 80107c8:	701a      	strb	r2, [r3, #0]
  RTC_DateStruct->RTC_Date = 1;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	2201      	movs	r2, #1
 80107ce:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct->RTC_Month = RTC_Month_January;
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	2201      	movs	r2, #1
 80107d4:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct->RTC_Year = 0;
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	2200      	movs	r2, #0
 80107da:	70da      	strb	r2, [r3, #3]
}
 80107dc:	370c      	adds	r7, #12
 80107de:	46bd      	mov	sp, r7
 80107e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e4:	4770      	bx	lr
 80107e6:	bf00      	nop

080107e8 <RTC_GetDate>:
  * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
  *                        contain the returned current date configuration.     
  * @retval None
  */
void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b084      	sub	sp, #16
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
 80107f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80107f2:	2300      	movs	r3, #0
 80107f4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 80107f6:	4b22      	ldr	r3, [pc, #136]	; (8010880 <RTC_GetDate+0x98>)
 80107f8:	685b      	ldr	r3, [r3, #4]
 80107fa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80107fe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8010802:	60fb      	str	r3, [r7, #12]

  /* Fill the structure fields with the read parameters */
  RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801080a:	0c1b      	lsrs	r3, r3, #16
 801080c:	b2da      	uxtb	r2, r3
 801080e:	683b      	ldr	r3, [r7, #0]
 8010810:	70da      	strb	r2, [r3, #3]
  RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8010818:	0a1b      	lsrs	r3, r3, #8
 801081a:	b2da      	uxtb	r2, r3
 801081c:	683b      	ldr	r3, [r7, #0]
 801081e:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	b2db      	uxtb	r3, r3
 8010824:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010828:	b2da      	uxtb	r2, r3
 801082a:	683b      	ldr	r3, [r7, #0]
 801082c:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010834:	0b5b      	lsrs	r3, r3, #13
 8010836:	b2da      	uxtb	r2, r3
 8010838:	683b      	ldr	r3, [r7, #0]
 801083a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d11a      	bne.n	8010878 <RTC_GetDate+0x90>
  {
    /* Convert the structure parameters to Binary format */
    RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 8010842:	683b      	ldr	r3, [r7, #0]
 8010844:	78db      	ldrb	r3, [r3, #3]
 8010846:	4618      	mov	r0, r3
 8010848:	f000 fecc 	bl	80115e4 <RTC_Bcd2ToByte>
 801084c:	4603      	mov	r3, r0
 801084e:	461a      	mov	r2, r3
 8010850:	683b      	ldr	r3, [r7, #0]
 8010852:	70da      	strb	r2, [r3, #3]
    RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 8010854:	683b      	ldr	r3, [r7, #0]
 8010856:	785b      	ldrb	r3, [r3, #1]
 8010858:	4618      	mov	r0, r3
 801085a:	f000 fec3 	bl	80115e4 <RTC_Bcd2ToByte>
 801085e:	4603      	mov	r3, r0
 8010860:	461a      	mov	r2, r3
 8010862:	683b      	ldr	r3, [r7, #0]
 8010864:	705a      	strb	r2, [r3, #1]
    RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 8010866:	683b      	ldr	r3, [r7, #0]
 8010868:	789b      	ldrb	r3, [r3, #2]
 801086a:	4618      	mov	r0, r3
 801086c:	f000 feba 	bl	80115e4 <RTC_Bcd2ToByte>
 8010870:	4603      	mov	r3, r0
 8010872:	461a      	mov	r2, r3
 8010874:	683b      	ldr	r3, [r7, #0]
 8010876:	709a      	strb	r2, [r3, #2]
  }
}
 8010878:	3710      	adds	r7, #16
 801087a:	46bd      	mov	sp, r7
 801087c:	bd80      	pop	{r7, pc}
 801087e:	bf00      	nop
 8010880:	40002800 	.word	0x40002800

08010884 <RTC_SetAlarm>:
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
  *                          contains the alarm configuration parameters.     
  * @retval None
  */
void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 8010884:	b590      	push	{r4, r7, lr}
 8010886:	b087      	sub	sp, #28
 8010888:	af00      	add	r7, sp, #0
 801088a:	60f8      	str	r0, [r7, #12]
 801088c:	60b9      	str	r1, [r7, #8]
 801088e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8010890:	2300      	movs	r3, #0
 8010892:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));

  if (RTC_Format == RTC_Format_BIN)
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d109      	bne.n	80108ae <RTC_SetAlarm+0x2a>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 801089a:	4b47      	ldr	r3, [pc, #284]	; (80109b8 <RTC_SetAlarm+0x134>)
 801089c:	689b      	ldr	r3, [r3, #8]
 801089e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d127      	bne.n	80108f6 <RTC_SetAlarm+0x72>
      assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	2200      	movs	r2, #0
 80108aa:	70da      	strb	r2, [r3, #3]
 80108ac:	e023      	b.n	80108f6 <RTC_SetAlarm+0x72>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
    }
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80108ae:	4b42      	ldr	r3, [pc, #264]	; (80109b8 <RTC_SetAlarm+0x134>)
 80108b0:	689b      	ldr	r3, [r3, #8]
 80108b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d007      	beq.n	80108ca <RTC_SetAlarm+0x46>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	781b      	ldrb	r3, [r3, #0]
 80108be:	4618      	mov	r0, r3
 80108c0:	f000 fe90 	bl	80115e4 <RTC_Bcd2ToByte>
 80108c4:	4603      	mov	r3, r0
 80108c6:	617b      	str	r3, [r7, #20]
 80108c8:	e002      	b.n	80108d0 <RTC_SetAlarm+0x4c>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	2200      	movs	r2, #0
 80108ce:	70da      	strb	r2, [r3, #3]
    }
    
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
    
    if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	689b      	ldr	r3, [r3, #8]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d107      	bne.n	80108e8 <RTC_SetAlarm+0x64>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	7b1b      	ldrb	r3, [r3, #12]
 80108dc:	4618      	mov	r0, r3
 80108de:	f000 fe81 	bl	80115e4 <RTC_Bcd2ToByte>
 80108e2:	4603      	mov	r3, r0
 80108e4:	617b      	str	r3, [r7, #20]
 80108e6:	e006      	b.n	80108f6 <RTC_SetAlarm+0x72>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
    }
    else
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	7b1b      	ldrb	r3, [r3, #12]
 80108ec:	4618      	mov	r0, r3
 80108ee:	f000 fe79 	bl	80115e4 <RTC_Bcd2ToByte>
 80108f2:	4603      	mov	r3, r0
 80108f4:	617b      	str	r3, [r7, #20]
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
    }    
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d019      	beq.n	8010930 <RTC_SetAlarm+0xac>
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	781b      	ldrb	r3, [r3, #0]
 8010900:	041a      	lsls	r2, r3, #16
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	785b      	ldrb	r3, [r3, #1]
 8010906:	021b      	lsls	r3, r3, #8
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8010908:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	789b      	ldrb	r3, [r3, #2]

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 801090e:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	78db      	ldrb	r3, [r3, #3]
 8010914:	041b      	lsls	r3, r3, #16
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 8010916:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	7b1b      	ldrb	r3, [r3, #12]
 801091c:	061b      	lsls	r3, r3, #24
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 801091e:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	689b      	ldr	r3, [r3, #8]
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 8010924:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	685b      	ldr	r3, [r3, #4]
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 801092a:	4313      	orrs	r3, r2
 801092c:	617b      	str	r3, [r7, #20]
 801092e:	e02b      	b.n	8010988 <RTC_SetAlarm+0x104>
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	781b      	ldrb	r3, [r3, #0]
 8010934:	4618      	mov	r0, r3
 8010936:	f000 fe37 	bl	80115a8 <RTC_ByteToBcd2>
 801093a:	4603      	mov	r3, r0
 801093c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	785b      	ldrb	r3, [r3, #1]
 8010942:	4618      	mov	r0, r3
 8010944:	f000 fe30 	bl	80115a8 <RTC_ByteToBcd2>
 8010948:	4603      	mov	r3, r0
 801094a:	021b      	lsls	r3, r3, #8
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 801094c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	789b      	ldrb	r3, [r3, #2]
 8010952:	4618      	mov	r0, r3
 8010954:	f000 fe28 	bl	80115a8 <RTC_ByteToBcd2>
 8010958:	4603      	mov	r3, r0
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 801095a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	78db      	ldrb	r3, [r3, #3]
 8010962:	041b      	lsls	r3, r3, #16
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 8010964:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	7b1b      	ldrb	r3, [r3, #12]
 801096c:	4618      	mov	r0, r3
 801096e:	f000 fe1b 	bl	80115a8 <RTC_ByteToBcd2>
 8010972:	4603      	mov	r3, r0
 8010974:	061b      	lsls	r3, r3, #24
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 8010976:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	689b      	ldr	r3, [r3, #8]
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 801097e:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	685b      	ldr	r3, [r3, #4]
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8010984:	4313      	orrs	r3, r2
 8010986:	617b      	str	r3, [r7, #20]
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  } 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010988:	4b0b      	ldr	r3, [pc, #44]	; (80109b8 <RTC_SetAlarm+0x134>)
 801098a:	22ca      	movs	r2, #202	; 0xca
 801098c:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 801098e:	4b0a      	ldr	r3, [pc, #40]	; (80109b8 <RTC_SetAlarm+0x134>)
 8010990:	2253      	movs	r2, #83	; 0x53
 8010992:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (RTC_Alarm == RTC_Alarm_A)
 8010994:	68bb      	ldr	r3, [r7, #8]
 8010996:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801099a:	d103      	bne.n	80109a4 <RTC_SetAlarm+0x120>
  {
    RTC->ALRMAR = (uint32_t)tmpreg;
 801099c:	4b06      	ldr	r3, [pc, #24]	; (80109b8 <RTC_SetAlarm+0x134>)
 801099e:	697a      	ldr	r2, [r7, #20]
 80109a0:	61da      	str	r2, [r3, #28]
 80109a2:	e002      	b.n	80109aa <RTC_SetAlarm+0x126>
  }
  else
  {
    RTC->ALRMBR = (uint32_t)tmpreg;
 80109a4:	4b04      	ldr	r3, [pc, #16]	; (80109b8 <RTC_SetAlarm+0x134>)
 80109a6:	697a      	ldr	r2, [r7, #20]
 80109a8:	621a      	str	r2, [r3, #32]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 80109aa:	4b03      	ldr	r3, [pc, #12]	; (80109b8 <RTC_SetAlarm+0x134>)
 80109ac:	22ff      	movs	r2, #255	; 0xff
 80109ae:	625a      	str	r2, [r3, #36]	; 0x24
}
 80109b0:	371c      	adds	r7, #28
 80109b2:	46bd      	mov	sp, r7
 80109b4:	bd90      	pop	{r4, r7, pc}
 80109b6:	bf00      	nop
 80109b8:	40002800 	.word	0x40002800

080109bc <RTC_AlarmStructInit>:
  * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 80109bc:	b480      	push	{r7}
 80109be:	b083      	sub	sp, #12
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	6078      	str	r0, [r7, #4]
  /* Alarm Time Settings : Time = 00h:00mn:00sec */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	2200      	movs	r2, #0
 80109c8:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	2200      	movs	r2, #0
 80109ce:	701a      	strb	r2, [r3, #0]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	2200      	movs	r2, #0
 80109d4:	705a      	strb	r2, [r3, #1]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	2200      	movs	r2, #0
 80109da:	709a      	strb	r2, [r3, #2]

  /* Alarm Date Settings : Date = 1st day of the month */
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	2200      	movs	r2, #0
 80109e0:	609a      	str	r2, [r3, #8]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	2201      	movs	r2, #1
 80109e6:	731a      	strb	r2, [r3, #12]

  /* Alarm Masks Settings : Mask =  all fields are not masked */
  RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	2200      	movs	r2, #0
 80109ec:	605a      	str	r2, [r3, #4]
}
 80109ee:	370c      	adds	r7, #12
 80109f0:	46bd      	mov	sp, r7
 80109f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f6:	4770      	bx	lr

080109f8 <RTC_GetAlarm>:
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
  *                          contains the output alarm configuration values.     
  * @retval None
  */
void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b086      	sub	sp, #24
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	60f8      	str	r0, [r7, #12]
 8010a00:	60b9      	str	r1, [r7, #8]
 8010a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8010a04:	2300      	movs	r3, #0
 8010a06:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm)); 

  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
 8010a08:	68bb      	ldr	r3, [r7, #8]
 8010a0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010a0e:	d103      	bne.n	8010a18 <RTC_GetAlarm+0x20>
  {
    tmpreg = (uint32_t)(RTC->ALRMAR);
 8010a10:	4b2e      	ldr	r3, [pc, #184]	; (8010acc <RTC_GetAlarm+0xd4>)
 8010a12:	69db      	ldr	r3, [r3, #28]
 8010a14:	617b      	str	r3, [r7, #20]
 8010a16:	e002      	b.n	8010a1e <RTC_GetAlarm+0x26>
  }
  else
  {
    tmpreg = (uint32_t)(RTC->ALRMBR);
 8010a18:	4b2c      	ldr	r3, [pc, #176]	; (8010acc <RTC_GetAlarm+0xd4>)
 8010a1a:	6a1b      	ldr	r3, [r3, #32]
 8010a1c:	617b      	str	r3, [r7, #20]
  }

  /* Fill the structure with the read parameters */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 8010a1e:	697b      	ldr	r3, [r7, #20]
 8010a20:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8010a24:	0c1b      	lsrs	r3, r3, #16
 8010a26:	b2da      	uxtb	r2, r3
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	701a      	strb	r2, [r3, #0]
                                                     RTC_ALRMAR_HU)) >> 16);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 8010a2c:	697b      	ldr	r3, [r7, #20]
 8010a2e:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8010a32:	0a1b      	lsrs	r3, r3, #8
 8010a34:	b2da      	uxtb	r2, r3
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	705a      	strb	r2, [r3, #1]
                                                     RTC_ALRMAR_MNU)) >> 8);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 8010a3a:	697b      	ldr	r3, [r7, #20]
 8010a3c:	b2db      	uxtb	r3, r3
 8010a3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a42:	b2da      	uxtb	r2, r3
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	709a      	strb	r2, [r3, #2]
                                                     RTC_ALRMAR_SU));
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 8010a48:	697b      	ldr	r3, [r7, #20]
 8010a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010a4e:	0c1b      	lsrs	r3, r3, #16
 8010a50:	b2da      	uxtb	r2, r3
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
 8010a56:	697b      	ldr	r3, [r7, #20]
 8010a58:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8010a5c:	0e1b      	lsrs	r3, r3, #24
 8010a5e:	b2da      	uxtb	r2, r3
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	731a      	strb	r2, [r3, #12]
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8010a64:	697b      	ldr	r3, [r7, #20]
 8010a66:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	609a      	str	r2, [r3, #8]
  RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 8010a6e:	697b      	ldr	r3, [r7, #20]
 8010a70:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	605a      	str	r2, [r3, #4]

  if (RTC_Format == RTC_Format_BIN)
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d123      	bne.n	8010ac6 <RTC_GetAlarm+0xce>
  {
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	781b      	ldrb	r3, [r3, #0]
 8010a82:	4618      	mov	r0, r3
 8010a84:	f000 fdae 	bl	80115e4 <RTC_Bcd2ToByte>
 8010a88:	4603      	mov	r3, r0
 8010a8a:	461a      	mov	r2, r3
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	701a      	strb	r2, [r3, #0]
                                                        RTC_AlarmTime.RTC_Hours);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	785b      	ldrb	r3, [r3, #1]
 8010a94:	4618      	mov	r0, r3
 8010a96:	f000 fda5 	bl	80115e4 <RTC_Bcd2ToByte>
 8010a9a:	4603      	mov	r3, r0
 8010a9c:	461a      	mov	r2, r3
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	705a      	strb	r2, [r3, #1]
                                                        RTC_AlarmTime.RTC_Minutes);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	789b      	ldrb	r3, [r3, #2]
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	f000 fd9c 	bl	80115e4 <RTC_Bcd2ToByte>
 8010aac:	4603      	mov	r3, r0
 8010aae:	461a      	mov	r2, r3
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	709a      	strb	r2, [r3, #2]
                                                        RTC_AlarmTime.RTC_Seconds);
    RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	7b1b      	ldrb	r3, [r3, #12]
 8010ab8:	4618      	mov	r0, r3
 8010aba:	f000 fd93 	bl	80115e4 <RTC_Bcd2ToByte>
 8010abe:	4603      	mov	r3, r0
 8010ac0:	461a      	mov	r2, r3
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	731a      	strb	r2, [r3, #12]
  }  
}
 8010ac6:	3718      	adds	r7, #24
 8010ac8:	46bd      	mov	sp, r7
 8010aca:	bd80      	pop	{r7, pc}
 8010acc:	40002800 	.word	0x40002800

08010ad0 <RTC_AlarmCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Alarm is enabled/disabled
  *          - ERROR: RTC Alarm is not enabled/disabled  
  */
ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
{
 8010ad0:	b480      	push	{r7}
 8010ad2:	b087      	sub	sp, #28
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	6078      	str	r0, [r7, #4]
 8010ad8:	460b      	mov	r3, r1
 8010ada:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t alarmcounter = 0x00;
 8010adc:	2300      	movs	r3, #0
 8010ade:	60fb      	str	r3, [r7, #12]
  uint32_t alarmstatus = 0x00;
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	613b      	str	r3, [r7, #16]
  ErrorStatus status = ERROR;
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010ae8:	4b1f      	ldr	r3, [pc, #124]	; (8010b68 <RTC_AlarmCmd+0x98>)
 8010aea:	22ca      	movs	r2, #202	; 0xca
 8010aec:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010aee:	4b1e      	ldr	r3, [pc, #120]	; (8010b68 <RTC_AlarmCmd+0x98>)
 8010af0:	2253      	movs	r2, #83	; 0x53
 8010af2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm state */
  if (NewState != DISABLE)
 8010af4:	78fb      	ldrb	r3, [r7, #3]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d008      	beq.n	8010b0c <RTC_AlarmCmd+0x3c>
  {
    RTC->CR |= (uint32_t)RTC_Alarm;
 8010afa:	4b1b      	ldr	r3, [pc, #108]	; (8010b68 <RTC_AlarmCmd+0x98>)
 8010afc:	4a1a      	ldr	r2, [pc, #104]	; (8010b68 <RTC_AlarmCmd+0x98>)
 8010afe:	6891      	ldr	r1, [r2, #8]
 8010b00:	687a      	ldr	r2, [r7, #4]
 8010b02:	430a      	orrs	r2, r1
 8010b04:	609a      	str	r2, [r3, #8]

    status = SUCCESS;    
 8010b06:	2301      	movs	r3, #1
 8010b08:	75fb      	strb	r3, [r7, #23]
 8010b0a:	e022      	b.n	8010b52 <RTC_AlarmCmd+0x82>
  }
  else
  { 
    /* Disable the Alarm in RTC_CR register */
    RTC->CR &= (uint32_t)~RTC_Alarm;
 8010b0c:	4b16      	ldr	r3, [pc, #88]	; (8010b68 <RTC_AlarmCmd+0x98>)
 8010b0e:	4a16      	ldr	r2, [pc, #88]	; (8010b68 <RTC_AlarmCmd+0x98>)
 8010b10:	6891      	ldr	r1, [r2, #8]
 8010b12:	687a      	ldr	r2, [r7, #4]
 8010b14:	43d2      	mvns	r2, r2
 8010b16:	400a      	ands	r2, r1
 8010b18:	609a      	str	r2, [r3, #8]
   
    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    do
    {
      alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 8010b1a:	4b13      	ldr	r3, [pc, #76]	; (8010b68 <RTC_AlarmCmd+0x98>)
 8010b1c:	68da      	ldr	r2, [r3, #12]
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	0a1b      	lsrs	r3, r3, #8
 8010b22:	4013      	ands	r3, r2
 8010b24:	613b      	str	r3, [r7, #16]
      alarmcounter++;  
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	3301      	adds	r3, #1
 8010b2a:	60fb      	str	r3, [r7, #12]
    } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010b32:	d002      	beq.n	8010b3a <RTC_AlarmCmd+0x6a>
 8010b34:	693b      	ldr	r3, [r7, #16]
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d0ef      	beq.n	8010b1a <RTC_AlarmCmd+0x4a>
    
    if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 8010b3a:	4b0b      	ldr	r3, [pc, #44]	; (8010b68 <RTC_AlarmCmd+0x98>)
 8010b3c:	68da      	ldr	r2, [r3, #12]
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	0a1b      	lsrs	r3, r3, #8
 8010b42:	4013      	ands	r3, r2
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d102      	bne.n	8010b4e <RTC_AlarmCmd+0x7e>
    {
      status = ERROR;
 8010b48:	2300      	movs	r3, #0
 8010b4a:	75fb      	strb	r3, [r7, #23]
 8010b4c:	e001      	b.n	8010b52 <RTC_AlarmCmd+0x82>
    } 
    else
    {
      status = SUCCESS;
 8010b4e:	2301      	movs	r3, #1
 8010b50:	75fb      	strb	r3, [r7, #23]
    }        
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010b52:	4b05      	ldr	r3, [pc, #20]	; (8010b68 <RTC_AlarmCmd+0x98>)
 8010b54:	22ff      	movs	r2, #255	; 0xff
 8010b56:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8010b58:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	371c      	adds	r7, #28
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b64:	4770      	bx	lr
 8010b66:	bf00      	nop
 8010b68:	40002800 	.word	0x40002800

08010b6c <RTC_AlarmSubSecondConfig>:
  *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
  *                                          to activate alarm
  * @retval None
  */
void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_AlarmSubSecondMask)
{
 8010b6c:	b480      	push	{r7}
 8010b6e:	b087      	sub	sp, #28
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	60f8      	str	r0, [r7, #12]
 8010b74:	60b9      	str	r1, [r7, #8]
 8010b76:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8010b78:	2300      	movs	r3, #0
 8010b7a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010b7c:	4b0e      	ldr	r3, [pc, #56]	; (8010bb8 <RTC_AlarmSubSecondConfig+0x4c>)
 8010b7e:	22ca      	movs	r2, #202	; 0xca
 8010b80:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010b82:	4b0d      	ldr	r3, [pc, #52]	; (8010bb8 <RTC_AlarmSubSecondConfig+0x4c>)
 8010b84:	2253      	movs	r2, #83	; 0x53
 8010b86:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Alarm A or Alarm B Sub Second registers */
  tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
 8010b88:	68ba      	ldr	r2, [r7, #8]
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	4313      	orrs	r3, r2
 8010b8e:	617b      	str	r3, [r7, #20]
  
  if (RTC_Alarm == RTC_Alarm_A)
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010b96:	d103      	bne.n	8010ba0 <RTC_AlarmSubSecondConfig+0x34>
  {
    /* Configure the Alarm A Sub Second register */
    RTC->ALRMASSR = tmpreg;
 8010b98:	4b07      	ldr	r3, [pc, #28]	; (8010bb8 <RTC_AlarmSubSecondConfig+0x4c>)
 8010b9a:	697a      	ldr	r2, [r7, #20]
 8010b9c:	645a      	str	r2, [r3, #68]	; 0x44
 8010b9e:	e002      	b.n	8010ba6 <RTC_AlarmSubSecondConfig+0x3a>
  }
  else
  {
    /* Configure the Alarm B Sub Second register */
    RTC->ALRMBSSR = tmpreg;
 8010ba0:	4b05      	ldr	r3, [pc, #20]	; (8010bb8 <RTC_AlarmSubSecondConfig+0x4c>)
 8010ba2:	697a      	ldr	r2, [r7, #20]
 8010ba4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8010ba6:	4b04      	ldr	r3, [pc, #16]	; (8010bb8 <RTC_AlarmSubSecondConfig+0x4c>)
 8010ba8:	22ff      	movs	r2, #255	; 0xff
 8010baa:	625a      	str	r2, [r3, #36]	; 0x24

}
 8010bac:	371c      	adds	r7, #28
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb4:	4770      	bx	lr
 8010bb6:	bf00      	nop
 8010bb8:	40002800 	.word	0x40002800

08010bbc <RTC_GetAlarmSubSecond>:
  *     @arg RTC_Alarm_B: to select Alarm B
  * @param  None
  * @retval RTC Alarm Sub seconds value.
  */
uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
{
 8010bbc:	b480      	push	{r7}
 8010bbe:	b085      	sub	sp, #20
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	60fb      	str	r3, [r7, #12]
  
  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010bce:	d105      	bne.n	8010bdc <RTC_GetAlarmSubSecond+0x20>
  {
    tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 8010bd0:	4b08      	ldr	r3, [pc, #32]	; (8010bf4 <RTC_GetAlarmSubSecond+0x38>)
 8010bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010bd4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8010bd8:	60fb      	str	r3, [r7, #12]
 8010bda:	e004      	b.n	8010be6 <RTC_GetAlarmSubSecond+0x2a>
  }
  else
  {
    tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8010bdc:	4b05      	ldr	r3, [pc, #20]	; (8010bf4 <RTC_GetAlarmSubSecond+0x38>)
 8010bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010be0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8010be4:	60fb      	str	r3, [r7, #12]
  } 
  
  return (tmpreg);
 8010be6:	68fb      	ldr	r3, [r7, #12]
}
 8010be8:	4618      	mov	r0, r3
 8010bea:	3714      	adds	r7, #20
 8010bec:	46bd      	mov	sp, r7
 8010bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf2:	4770      	bx	lr
 8010bf4:	40002800 	.word	0x40002800

08010bf8 <RTC_WakeUpClockConfig>:
  *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
  *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
  * @retval None
  */
void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
{
 8010bf8:	b480      	push	{r7}
 8010bfa:	b083      	sub	sp, #12
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010c00:	4b0c      	ldr	r3, [pc, #48]	; (8010c34 <RTC_WakeUpClockConfig+0x3c>)
 8010c02:	22ca      	movs	r2, #202	; 0xca
 8010c04:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010c06:	4b0b      	ldr	r3, [pc, #44]	; (8010c34 <RTC_WakeUpClockConfig+0x3c>)
 8010c08:	2253      	movs	r2, #83	; 0x53
 8010c0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the Wakeup Timer clock source bits in CR register */
  RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8010c0c:	4b09      	ldr	r3, [pc, #36]	; (8010c34 <RTC_WakeUpClockConfig+0x3c>)
 8010c0e:	4a09      	ldr	r2, [pc, #36]	; (8010c34 <RTC_WakeUpClockConfig+0x3c>)
 8010c10:	6892      	ldr	r2, [r2, #8]
 8010c12:	f022 0207 	bic.w	r2, r2, #7
 8010c16:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  RTC->CR |= (uint32_t)RTC_WakeUpClock;
 8010c18:	4b06      	ldr	r3, [pc, #24]	; (8010c34 <RTC_WakeUpClockConfig+0x3c>)
 8010c1a:	4a06      	ldr	r2, [pc, #24]	; (8010c34 <RTC_WakeUpClockConfig+0x3c>)
 8010c1c:	6891      	ldr	r1, [r2, #8]
 8010c1e:	687a      	ldr	r2, [r7, #4]
 8010c20:	430a      	orrs	r2, r1
 8010c22:	609a      	str	r2, [r3, #8]
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010c24:	4b03      	ldr	r3, [pc, #12]	; (8010c34 <RTC_WakeUpClockConfig+0x3c>)
 8010c26:	22ff      	movs	r2, #255	; 0xff
 8010c28:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010c2a:	370c      	adds	r7, #12
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c32:	4770      	bx	lr
 8010c34:	40002800 	.word	0x40002800

08010c38 <RTC_SetWakeUpCounter>:
  * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
  *          This parameter can be a value from 0x0000 to 0xFFFF. 
  * @retval None
  */
void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
{
 8010c38:	b480      	push	{r7}
 8010c3a:	b083      	sub	sp, #12
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010c40:	4b08      	ldr	r3, [pc, #32]	; (8010c64 <RTC_SetWakeUpCounter+0x2c>)
 8010c42:	22ca      	movs	r2, #202	; 0xca
 8010c44:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010c46:	4b07      	ldr	r3, [pc, #28]	; (8010c64 <RTC_SetWakeUpCounter+0x2c>)
 8010c48:	2253      	movs	r2, #83	; 0x53
 8010c4a:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Wakeup Timer counter */
  RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 8010c4c:	4b05      	ldr	r3, [pc, #20]	; (8010c64 <RTC_SetWakeUpCounter+0x2c>)
 8010c4e:	687a      	ldr	r2, [r7, #4]
 8010c50:	615a      	str	r2, [r3, #20]
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010c52:	4b04      	ldr	r3, [pc, #16]	; (8010c64 <RTC_SetWakeUpCounter+0x2c>)
 8010c54:	22ff      	movs	r2, #255	; 0xff
 8010c56:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010c58:	370c      	adds	r7, #12
 8010c5a:	46bd      	mov	sp, r7
 8010c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c60:	4770      	bx	lr
 8010c62:	bf00      	nop
 8010c64:	40002800 	.word	0x40002800

08010c68 <RTC_GetWakeUpCounter>:
  * @brief  Returns the RTC WakeUp timer counter value.
  * @param  None
  * @retval The RTC WakeUp Counter value.
  */
uint32_t RTC_GetWakeUpCounter(void)
{
 8010c68:	b480      	push	{r7}
 8010c6a:	af00      	add	r7, sp, #0
  /* Get the counter value */
  return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 8010c6c:	4b03      	ldr	r3, [pc, #12]	; (8010c7c <RTC_GetWakeUpCounter+0x14>)
 8010c6e:	695b      	ldr	r3, [r3, #20]
 8010c70:	b29b      	uxth	r3, r3
}
 8010c72:	4618      	mov	r0, r3
 8010c74:	46bd      	mov	sp, r7
 8010c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c7a:	4770      	bx	lr
 8010c7c:	40002800 	.word	0x40002800

08010c80 <RTC_WakeUpCmd>:
  * @param  NewState: new state of the WakeUp timer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
{
 8010c80:	b480      	push	{r7}
 8010c82:	b087      	sub	sp, #28
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	4603      	mov	r3, r0
 8010c88:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t wutcounter = 0x00;
 8010c8a:	2300      	movs	r3, #0
 8010c8c:	60fb      	str	r3, [r7, #12]
  uint32_t wutwfstatus = 0x00;
 8010c8e:	2300      	movs	r3, #0
 8010c90:	613b      	str	r3, [r7, #16]
  ErrorStatus status = ERROR;
 8010c92:	2300      	movs	r3, #0
 8010c94:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010c96:	4b1e      	ldr	r3, [pc, #120]	; (8010d10 <RTC_WakeUpCmd+0x90>)
 8010c98:	22ca      	movs	r2, #202	; 0xca
 8010c9a:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010c9c:	4b1c      	ldr	r3, [pc, #112]	; (8010d10 <RTC_WakeUpCmd+0x90>)
 8010c9e:	2253      	movs	r2, #83	; 0x53
 8010ca0:	625a      	str	r2, [r3, #36]	; 0x24

  if (NewState != DISABLE)
 8010ca2:	79fb      	ldrb	r3, [r7, #7]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d008      	beq.n	8010cba <RTC_WakeUpCmd+0x3a>
  {
    /* Enable the Wakeup Timer */
    RTC->CR |= (uint32_t)RTC_CR_WUTE;
 8010ca8:	4b19      	ldr	r3, [pc, #100]	; (8010d10 <RTC_WakeUpCmd+0x90>)
 8010caa:	4a19      	ldr	r2, [pc, #100]	; (8010d10 <RTC_WakeUpCmd+0x90>)
 8010cac:	6892      	ldr	r2, [r2, #8]
 8010cae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010cb2:	609a      	str	r2, [r3, #8]
    status = SUCCESS;    
 8010cb4:	2301      	movs	r3, #1
 8010cb6:	75fb      	strb	r3, [r7, #23]
 8010cb8:	e01f      	b.n	8010cfa <RTC_WakeUpCmd+0x7a>
  }
  else
  {
    /* Disable the Wakeup Timer */
    RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 8010cba:	4b15      	ldr	r3, [pc, #84]	; (8010d10 <RTC_WakeUpCmd+0x90>)
 8010cbc:	4a14      	ldr	r2, [pc, #80]	; (8010d10 <RTC_WakeUpCmd+0x90>)
 8010cbe:	6892      	ldr	r2, [r2, #8]
 8010cc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010cc4:	609a      	str	r2, [r3, #8]
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 8010cc6:	4b12      	ldr	r3, [pc, #72]	; (8010d10 <RTC_WakeUpCmd+0x90>)
 8010cc8:	68db      	ldr	r3, [r3, #12]
 8010cca:	f003 0304 	and.w	r3, r3, #4
 8010cce:	613b      	str	r3, [r7, #16]
      wutcounter++;  
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	3301      	adds	r3, #1
 8010cd4:	60fb      	str	r3, [r7, #12]
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010cdc:	d002      	beq.n	8010ce4 <RTC_WakeUpCmd+0x64>
 8010cde:	693b      	ldr	r3, [r7, #16]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d0f0      	beq.n	8010cc6 <RTC_WakeUpCmd+0x46>
    
    if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 8010ce4:	4b0a      	ldr	r3, [pc, #40]	; (8010d10 <RTC_WakeUpCmd+0x90>)
 8010ce6:	68db      	ldr	r3, [r3, #12]
 8010ce8:	f003 0304 	and.w	r3, r3, #4
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d102      	bne.n	8010cf6 <RTC_WakeUpCmd+0x76>
    {
      status = ERROR;
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	75fb      	strb	r3, [r7, #23]
 8010cf4:	e001      	b.n	8010cfa <RTC_WakeUpCmd+0x7a>
    }
    else
    {
      status = SUCCESS;
 8010cf6:	2301      	movs	r3, #1
 8010cf8:	75fb      	strb	r3, [r7, #23]
    }    
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010cfa:	4b05      	ldr	r3, [pc, #20]	; (8010d10 <RTC_WakeUpCmd+0x90>)
 8010cfc:	22ff      	movs	r2, #255	; 0xff
 8010cfe:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8010d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d02:	4618      	mov	r0, r3
 8010d04:	371c      	adds	r7, #28
 8010d06:	46bd      	mov	sp, r7
 8010d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0c:	4770      	bx	lr
 8010d0e:	bf00      	nop
 8010d10:	40002800 	.word	0x40002800

08010d14 <RTC_DayLightSavingConfig>:
  *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
  *            @arg RTC_StoreOperation_Set: BCK Bit Set
  * @retval None
  */
void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
{
 8010d14:	b480      	push	{r7}
 8010d16:	b083      	sub	sp, #12
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	6078      	str	r0, [r7, #4]
 8010d1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010d1e:	4b0e      	ldr	r3, [pc, #56]	; (8010d58 <RTC_DayLightSavingConfig+0x44>)
 8010d20:	22ca      	movs	r2, #202	; 0xca
 8010d22:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010d24:	4b0c      	ldr	r3, [pc, #48]	; (8010d58 <RTC_DayLightSavingConfig+0x44>)
 8010d26:	2253      	movs	r2, #83	; 0x53
 8010d28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 8010d2a:	4b0b      	ldr	r3, [pc, #44]	; (8010d58 <RTC_DayLightSavingConfig+0x44>)
 8010d2c:	4a0a      	ldr	r2, [pc, #40]	; (8010d58 <RTC_DayLightSavingConfig+0x44>)
 8010d2e:	6892      	ldr	r2, [r2, #8]
 8010d30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010d34:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 8010d36:	4b08      	ldr	r3, [pc, #32]	; (8010d58 <RTC_DayLightSavingConfig+0x44>)
 8010d38:	4a07      	ldr	r2, [pc, #28]	; (8010d58 <RTC_DayLightSavingConfig+0x44>)
 8010d3a:	6891      	ldr	r1, [r2, #8]
 8010d3c:	6878      	ldr	r0, [r7, #4]
 8010d3e:	683a      	ldr	r2, [r7, #0]
 8010d40:	4302      	orrs	r2, r0
 8010d42:	430a      	orrs	r2, r1
 8010d44:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010d46:	4b04      	ldr	r3, [pc, #16]	; (8010d58 <RTC_DayLightSavingConfig+0x44>)
 8010d48:	22ff      	movs	r2, #255	; 0xff
 8010d4a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010d4c:	370c      	adds	r7, #12
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d54:	4770      	bx	lr
 8010d56:	bf00      	nop
 8010d58:	40002800 	.word	0x40002800

08010d5c <RTC_GetStoreOperation>:
  * @retval RTC Day Light Saving stored operation.
  *          - RTC_StoreOperation_Reset
  *          - RTC_StoreOperation_Set       
  */
uint32_t RTC_GetStoreOperation(void)
{
 8010d5c:	b480      	push	{r7}
 8010d5e:	af00      	add	r7, sp, #0
  return (RTC->CR & RTC_CR_BCK);
 8010d60:	4b04      	ldr	r3, [pc, #16]	; (8010d74 <RTC_GetStoreOperation+0x18>)
 8010d62:	689b      	ldr	r3, [r3, #8]
 8010d64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
}
 8010d68:	4618      	mov	r0, r3
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d70:	4770      	bx	lr
 8010d72:	bf00      	nop
 8010d74:	40002800 	.word	0x40002800

08010d78 <RTC_OutputConfig>:
  *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
  *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
  * @retval None
  */
void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
{
 8010d78:	b480      	push	{r7}
 8010d7a:	b083      	sub	sp, #12
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	6078      	str	r0, [r7, #4]
 8010d80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT(RTC_Output));
  assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010d82:	4b0e      	ldr	r3, [pc, #56]	; (8010dbc <RTC_OutputConfig+0x44>)
 8010d84:	22ca      	movs	r2, #202	; 0xca
 8010d86:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010d88:	4b0c      	ldr	r3, [pc, #48]	; (8010dbc <RTC_OutputConfig+0x44>)
 8010d8a:	2253      	movs	r2, #83	; 0x53
 8010d8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 8010d8e:	4b0b      	ldr	r3, [pc, #44]	; (8010dbc <RTC_OutputConfig+0x44>)
 8010d90:	4a0a      	ldr	r2, [pc, #40]	; (8010dbc <RTC_OutputConfig+0x44>)
 8010d92:	6892      	ldr	r2, [r2, #8]
 8010d94:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8010d98:	609a      	str	r2, [r3, #8]

  /* Configure the output selection and polarity */
  RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 8010d9a:	4b08      	ldr	r3, [pc, #32]	; (8010dbc <RTC_OutputConfig+0x44>)
 8010d9c:	4a07      	ldr	r2, [pc, #28]	; (8010dbc <RTC_OutputConfig+0x44>)
 8010d9e:	6891      	ldr	r1, [r2, #8]
 8010da0:	6878      	ldr	r0, [r7, #4]
 8010da2:	683a      	ldr	r2, [r7, #0]
 8010da4:	4302      	orrs	r2, r0
 8010da6:	430a      	orrs	r2, r1
 8010da8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010daa:	4b04      	ldr	r3, [pc, #16]	; (8010dbc <RTC_OutputConfig+0x44>)
 8010dac:	22ff      	movs	r2, #255	; 0xff
 8010dae:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010db0:	370c      	adds	r7, #12
 8010db2:	46bd      	mov	sp, r7
 8010db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db8:	4770      	bx	lr
 8010dba:	bf00      	nop
 8010dbc:	40002800 	.word	0x40002800

08010dc0 <RTC_CoarseCalibConfig>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are initialized
  *          - ERROR: RTC Coarse calibration are not initialized     
  */
ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
{
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	b084      	sub	sp, #16
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	6078      	str	r0, [r7, #4]
 8010dc8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8010dca:	2300      	movs	r3, #0
 8010dcc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
  assert_param(IS_RTC_CALIB_VALUE(Value)); 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010dce:	4b0f      	ldr	r3, [pc, #60]	; (8010e0c <RTC_CoarseCalibConfig+0x4c>)
 8010dd0:	22ca      	movs	r2, #202	; 0xca
 8010dd2:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010dd4:	4b0d      	ldr	r3, [pc, #52]	; (8010e0c <RTC_CoarseCalibConfig+0x4c>)
 8010dd6:	2253      	movs	r2, #83	; 0x53
 8010dd8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8010dda:	f7ff fa7f 	bl	80102dc <RTC_EnterInitMode>
 8010dde:	4603      	mov	r3, r0
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d102      	bne.n	8010dea <RTC_CoarseCalibConfig+0x2a>
  {
    status = ERROR;
 8010de4:	2300      	movs	r3, #0
 8010de6:	73fb      	strb	r3, [r7, #15]
 8010de8:	e008      	b.n	8010dfc <RTC_CoarseCalibConfig+0x3c>
  } 
  else
  {
    /* Set the coarse calibration value */
    RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
 8010dea:	4b08      	ldr	r3, [pc, #32]	; (8010e0c <RTC_CoarseCalibConfig+0x4c>)
 8010dec:	6879      	ldr	r1, [r7, #4]
 8010dee:	683a      	ldr	r2, [r7, #0]
 8010df0:	430a      	orrs	r2, r1
 8010df2:	619a      	str	r2, [r3, #24]
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 8010df4:	f7ff faac 	bl	8010350 <RTC_ExitInitMode>
    
    status = SUCCESS;
 8010df8:	2301      	movs	r3, #1
 8010dfa:	73fb      	strb	r3, [r7, #15]
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010dfc:	4b03      	ldr	r3, [pc, #12]	; (8010e0c <RTC_CoarseCalibConfig+0x4c>)
 8010dfe:	22ff      	movs	r2, #255	; 0xff
 8010e00:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8010e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e04:	4618      	mov	r0, r3
 8010e06:	3710      	adds	r7, #16
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	bd80      	pop	{r7, pc}
 8010e0c:	40002800 	.word	0x40002800

08010e10 <RTC_CoarseCalibCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are enabled/disabled
  *          - ERROR: RTC Coarse calibration are not enabled/disabled    
  */
ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
{
 8010e10:	b580      	push	{r7, lr}
 8010e12:	b084      	sub	sp, #16
 8010e14:	af00      	add	r7, sp, #0
 8010e16:	4603      	mov	r3, r0
 8010e18:	71fb      	strb	r3, [r7, #7]
  ErrorStatus status = ERROR;
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010e1e:	4b15      	ldr	r3, [pc, #84]	; (8010e74 <RTC_CoarseCalibCmd+0x64>)
 8010e20:	22ca      	movs	r2, #202	; 0xca
 8010e22:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010e24:	4b13      	ldr	r3, [pc, #76]	; (8010e74 <RTC_CoarseCalibCmd+0x64>)
 8010e26:	2253      	movs	r2, #83	; 0x53
 8010e28:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8010e2a:	f7ff fa57 	bl	80102dc <RTC_EnterInitMode>
 8010e2e:	4603      	mov	r3, r0
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d102      	bne.n	8010e3a <RTC_CoarseCalibCmd+0x2a>
  {
    status =  ERROR;
 8010e34:	2300      	movs	r3, #0
 8010e36:	73fb      	strb	r3, [r7, #15]
 8010e38:	e013      	b.n	8010e62 <RTC_CoarseCalibCmd+0x52>
  }
  else
  {
    if (NewState != DISABLE)
 8010e3a:	79fb      	ldrb	r3, [r7, #7]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d006      	beq.n	8010e4e <RTC_CoarseCalibCmd+0x3e>
    {
      /* Enable the Coarse Calibration */
      RTC->CR |= (uint32_t)RTC_CR_DCE;
 8010e40:	4b0c      	ldr	r3, [pc, #48]	; (8010e74 <RTC_CoarseCalibCmd+0x64>)
 8010e42:	4a0c      	ldr	r2, [pc, #48]	; (8010e74 <RTC_CoarseCalibCmd+0x64>)
 8010e44:	6892      	ldr	r2, [r2, #8]
 8010e46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8010e4a:	609a      	str	r2, [r3, #8]
 8010e4c:	e005      	b.n	8010e5a <RTC_CoarseCalibCmd+0x4a>
    }
    else
    { 
      /* Disable the Coarse Calibration */
      RTC->CR &= (uint32_t)~RTC_CR_DCE;
 8010e4e:	4b09      	ldr	r3, [pc, #36]	; (8010e74 <RTC_CoarseCalibCmd+0x64>)
 8010e50:	4a08      	ldr	r2, [pc, #32]	; (8010e74 <RTC_CoarseCalibCmd+0x64>)
 8010e52:	6892      	ldr	r2, [r2, #8]
 8010e54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010e58:	609a      	str	r2, [r3, #8]
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 8010e5a:	f7ff fa79 	bl	8010350 <RTC_ExitInitMode>
    
    status = SUCCESS;
 8010e5e:	2301      	movs	r3, #1
 8010e60:	73fb      	strb	r3, [r7, #15]
  } 
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010e62:	4b04      	ldr	r3, [pc, #16]	; (8010e74 <RTC_CoarseCalibCmd+0x64>)
 8010e64:	22ff      	movs	r2, #255	; 0xff
 8010e66:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8010e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	3710      	adds	r7, #16
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	bd80      	pop	{r7, pc}
 8010e72:	bf00      	nop
 8010e74:	40002800 	.word	0x40002800

08010e78 <RTC_CalibOutputCmd>:
  * @param  NewState: new state of the digital calibration Output.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_CalibOutputCmd(FunctionalState NewState)
{
 8010e78:	b480      	push	{r7}
 8010e7a:	b083      	sub	sp, #12
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	4603      	mov	r3, r0
 8010e80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010e82:	4b0f      	ldr	r3, [pc, #60]	; (8010ec0 <RTC_CalibOutputCmd+0x48>)
 8010e84:	22ca      	movs	r2, #202	; 0xca
 8010e86:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010e88:	4b0d      	ldr	r3, [pc, #52]	; (8010ec0 <RTC_CalibOutputCmd+0x48>)
 8010e8a:	2253      	movs	r2, #83	; 0x53
 8010e8c:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (NewState != DISABLE)
 8010e8e:	79fb      	ldrb	r3, [r7, #7]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d006      	beq.n	8010ea2 <RTC_CalibOutputCmd+0x2a>
  {
    /* Enable the RTC clock output */
    RTC->CR |= (uint32_t)RTC_CR_COE;
 8010e94:	4b0a      	ldr	r3, [pc, #40]	; (8010ec0 <RTC_CalibOutputCmd+0x48>)
 8010e96:	4a0a      	ldr	r2, [pc, #40]	; (8010ec0 <RTC_CalibOutputCmd+0x48>)
 8010e98:	6892      	ldr	r2, [r2, #8]
 8010e9a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8010e9e:	609a      	str	r2, [r3, #8]
 8010ea0:	e005      	b.n	8010eae <RTC_CalibOutputCmd+0x36>
  }
  else
  { 
    /* Disable the RTC clock output */
    RTC->CR &= (uint32_t)~RTC_CR_COE;
 8010ea2:	4b07      	ldr	r3, [pc, #28]	; (8010ec0 <RTC_CalibOutputCmd+0x48>)
 8010ea4:	4a06      	ldr	r2, [pc, #24]	; (8010ec0 <RTC_CalibOutputCmd+0x48>)
 8010ea6:	6892      	ldr	r2, [r2, #8]
 8010ea8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8010eac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010eae:	4b04      	ldr	r3, [pc, #16]	; (8010ec0 <RTC_CalibOutputCmd+0x48>)
 8010eb0:	22ff      	movs	r2, #255	; 0xff
 8010eb2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010eb4:	370c      	adds	r7, #12
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ebc:	4770      	bx	lr
 8010ebe:	bf00      	nop
 8010ec0:	40002800 	.word	0x40002800

08010ec4 <RTC_CalibOutputConfig>:
  *     @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
  *     @arg RTC_CalibOutput_1Hz  : A signal has a regular waveform at 1Hz.
  * @retval None
*/
void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
{
 8010ec4:	b480      	push	{r7}
 8010ec6:	b083      	sub	sp, #12
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010ecc:	4b0c      	ldr	r3, [pc, #48]	; (8010f00 <RTC_CalibOutputConfig+0x3c>)
 8010ece:	22ca      	movs	r2, #202	; 0xca
 8010ed0:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010ed2:	4b0b      	ldr	r3, [pc, #44]	; (8010f00 <RTC_CalibOutputConfig+0x3c>)
 8010ed4:	2253      	movs	r2, #83	; 0x53
 8010ed6:	625a      	str	r2, [r3, #36]	; 0x24
  
  /*clear flags before configuration */
  RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
 8010ed8:	4b09      	ldr	r3, [pc, #36]	; (8010f00 <RTC_CalibOutputConfig+0x3c>)
 8010eda:	4a09      	ldr	r2, [pc, #36]	; (8010f00 <RTC_CalibOutputConfig+0x3c>)
 8010edc:	6892      	ldr	r2, [r2, #8]
 8010ede:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8010ee2:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  RTC->CR |= (uint32_t)RTC_CalibOutput;
 8010ee4:	4b06      	ldr	r3, [pc, #24]	; (8010f00 <RTC_CalibOutputConfig+0x3c>)
 8010ee6:	4a06      	ldr	r2, [pc, #24]	; (8010f00 <RTC_CalibOutputConfig+0x3c>)
 8010ee8:	6891      	ldr	r1, [r2, #8]
 8010eea:	687a      	ldr	r2, [r7, #4]
 8010eec:	430a      	orrs	r2, r1
 8010eee:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8010ef0:	4b03      	ldr	r3, [pc, #12]	; (8010f00 <RTC_CalibOutputConfig+0x3c>)
 8010ef2:	22ff      	movs	r2, #255	; 0xff
 8010ef4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010ef6:	370c      	adds	r7, #12
 8010ef8:	46bd      	mov	sp, r7
 8010efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010efe:	4770      	bx	lr
 8010f00:	40002800 	.word	0x40002800

08010f04 <RTC_SmoothCalibConfig>:
  *          - ERROR: RTC Calib registers are not configured
*/
ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
                                  uint32_t RTC_SmoothCalibPlusPulses,
                                  uint32_t RTC_SmouthCalibMinusPulsesValue)
{
 8010f04:	b480      	push	{r7}
 8010f06:	b087      	sub	sp, #28
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	60f8      	str	r0, [r7, #12]
 8010f0c:	60b9      	str	r1, [r7, #8]
 8010f0e:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 8010f10:	2300      	movs	r3, #0
 8010f12:	75fb      	strb	r3, [r7, #23]
  uint32_t recalpfcount = 0;
 8010f14:	2300      	movs	r3, #0
 8010f16:	613b      	str	r3, [r7, #16]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010f18:	4b1a      	ldr	r3, [pc, #104]	; (8010f84 <RTC_SmoothCalibConfig+0x80>)
 8010f1a:	22ca      	movs	r2, #202	; 0xca
 8010f1c:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010f1e:	4b19      	ldr	r3, [pc, #100]	; (8010f84 <RTC_SmoothCalibConfig+0x80>)
 8010f20:	2253      	movs	r2, #83	; 0x53
 8010f22:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* check if a calibration is pending*/
  if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
 8010f24:	4b17      	ldr	r3, [pc, #92]	; (8010f84 <RTC_SmoothCalibConfig+0x80>)
 8010f26:	68db      	ldr	r3, [r3, #12]
 8010f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d00d      	beq.n	8010f4c <RTC_SmoothCalibConfig+0x48>
  {
    /* wait until the Calibration is completed*/
    while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 8010f30:	e002      	b.n	8010f38 <RTC_SmoothCalibConfig+0x34>
    {
      recalpfcount++;
 8010f32:	693b      	ldr	r3, [r7, #16]
 8010f34:	3301      	adds	r3, #1
 8010f36:	613b      	str	r3, [r7, #16]
  
  /* check if a calibration is pending*/
  if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
  {
    /* wait until the Calibration is completed*/
    while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 8010f38:	4b12      	ldr	r3, [pc, #72]	; (8010f84 <RTC_SmoothCalibConfig+0x80>)
 8010f3a:	68db      	ldr	r3, [r3, #12]
 8010f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d003      	beq.n	8010f4c <RTC_SmoothCalibConfig+0x48>
 8010f44:	693b      	ldr	r3, [r7, #16]
 8010f46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010f4a:	d1f2      	bne.n	8010f32 <RTC_SmoothCalibConfig+0x2e>
      recalpfcount++;
    }
  }

  /* check if the calibration pending is completed or if there is no calibration operation at all*/
  if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 8010f4c:	4b0d      	ldr	r3, [pc, #52]	; (8010f84 <RTC_SmoothCalibConfig+0x80>)
 8010f4e:	68db      	ldr	r3, [r3, #12]
 8010f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d109      	bne.n	8010f6c <RTC_SmoothCalibConfig+0x68>
  {
    /* Configure the Smooth calibration settings */
    RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | (uint32_t)RTC_SmouthCalibMinusPulsesValue);
 8010f58:	4b0a      	ldr	r3, [pc, #40]	; (8010f84 <RTC_SmoothCalibConfig+0x80>)
 8010f5a:	68f9      	ldr	r1, [r7, #12]
 8010f5c:	68ba      	ldr	r2, [r7, #8]
 8010f5e:	4311      	orrs	r1, r2
 8010f60:	687a      	ldr	r2, [r7, #4]
 8010f62:	430a      	orrs	r2, r1
 8010f64:	63da      	str	r2, [r3, #60]	; 0x3c

    status = SUCCESS;
 8010f66:	2301      	movs	r3, #1
 8010f68:	75fb      	strb	r3, [r7, #23]
 8010f6a:	e001      	b.n	8010f70 <RTC_SmoothCalibConfig+0x6c>
  }
  else
  {
    status = ERROR;
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8010f70:	4b04      	ldr	r3, [pc, #16]	; (8010f84 <RTC_SmoothCalibConfig+0x80>)
 8010f72:	22ff      	movs	r2, #255	; 0xff
 8010f74:	625a      	str	r2, [r3, #36]	; 0x24
  
  return (ErrorStatus)(status);
 8010f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f78:	4618      	mov	r0, r3
 8010f7a:	371c      	adds	r7, #28
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f82:	4770      	bx	lr
 8010f84:	40002800 	.word	0x40002800

08010f88 <RTC_TimeStampCmd>:
  * @param  NewState: new state of the TimeStamp.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
{
 8010f88:	b480      	push	{r7}
 8010f8a:	b085      	sub	sp, #20
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	6078      	str	r0, [r7, #4]
 8010f90:	460b      	mov	r3, r1
 8010f92:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 8010f94:	2300      	movs	r3, #0
 8010f96:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8010f98:	4b12      	ldr	r3, [pc, #72]	; (8010fe4 <RTC_TimeStampCmd+0x5c>)
 8010f9a:	689b      	ldr	r3, [r3, #8]
 8010f9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010fa0:	f023 0308 	bic.w	r3, r3, #8
 8010fa4:	60fb      	str	r3, [r7, #12]

  /* Get the new configuration */
  if (NewState != DISABLE)
 8010fa6:	78fb      	ldrb	r3, [r7, #3]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d006      	beq.n	8010fba <RTC_TimeStampCmd+0x32>
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 8010fac:	687a      	ldr	r2, [r7, #4]
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	4313      	orrs	r3, r2
 8010fb2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010fb6:	60fb      	str	r3, [r7, #12]
 8010fb8:	e003      	b.n	8010fc2 <RTC_TimeStampCmd+0x3a>
  }
  else
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 8010fba:	68fa      	ldr	r2, [r7, #12]
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	4313      	orrs	r3, r2
 8010fc0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010fc2:	4b08      	ldr	r3, [pc, #32]	; (8010fe4 <RTC_TimeStampCmd+0x5c>)
 8010fc4:	22ca      	movs	r2, #202	; 0xca
 8010fc6:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010fc8:	4b06      	ldr	r3, [pc, #24]	; (8010fe4 <RTC_TimeStampCmd+0x5c>)
 8010fca:	2253      	movs	r2, #83	; 0x53
 8010fcc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Time Stamp TSEDGE and Enable bits */
  RTC->CR = (uint32_t)tmpreg;
 8010fce:	4b05      	ldr	r3, [pc, #20]	; (8010fe4 <RTC_TimeStampCmd+0x5c>)
 8010fd0:	68fa      	ldr	r2, [r7, #12]
 8010fd2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010fd4:	4b03      	ldr	r3, [pc, #12]	; (8010fe4 <RTC_TimeStampCmd+0x5c>)
 8010fd6:	22ff      	movs	r2, #255	; 0xff
 8010fd8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010fda:	3714      	adds	r7, #20
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe2:	4770      	bx	lr
 8010fe4:	40002800 	.word	0x40002800

08010fe8 <RTC_GetTimeStamp>:
  *                             contains the TimeStamp date values.     
  * @retval None
  */
void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
                                      RTC_DateTypeDef* RTC_StampDateStruct)
{
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	b086      	sub	sp, #24
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	60f8      	str	r0, [r7, #12]
 8010ff0:	60b9      	str	r1, [r7, #8]
 8010ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmptime = 0, tmpdate = 0;
 8010ff4:	2300      	movs	r3, #0
 8010ff6:	617b      	str	r3, [r7, #20]
 8010ff8:	2300      	movs	r3, #0
 8010ffa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the TimeStamp time and date registers values */
  tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 8010ffc:	4b3e      	ldr	r3, [pc, #248]	; (80110f8 <RTC_GetTimeStamp+0x110>)
 8010ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011000:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8011004:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8011008:	617b      	str	r3, [r7, #20]
  tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 801100a:	4b3b      	ldr	r3, [pc, #236]	; (80110f8 <RTC_GetTimeStamp+0x110>)
 801100c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801100e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011012:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011016:	613b      	str	r3, [r7, #16]

  /* Fill the Time structure fields with the read parameters */
  RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8011018:	697b      	ldr	r3, [r7, #20]
 801101a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 801101e:	0c1b      	lsrs	r3, r3, #16
 8011020:	b2da      	uxtb	r2, r3
 8011022:	68bb      	ldr	r3, [r7, #8]
 8011024:	701a      	strb	r2, [r3, #0]
  RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 8011026:	697b      	ldr	r3, [r7, #20]
 8011028:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 801102c:	0a1b      	lsrs	r3, r3, #8
 801102e:	b2da      	uxtb	r2, r3
 8011030:	68bb      	ldr	r3, [r7, #8]
 8011032:	705a      	strb	r2, [r3, #1]
  RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 8011034:	697b      	ldr	r3, [r7, #20]
 8011036:	b2db      	uxtb	r3, r3
 8011038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801103c:	b2da      	uxtb	r2, r3
 801103e:	68bb      	ldr	r3, [r7, #8]
 8011040:	709a      	strb	r2, [r3, #2]
  RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 8011042:	697b      	ldr	r3, [r7, #20]
 8011044:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011048:	0c1b      	lsrs	r3, r3, #16
 801104a:	b2da      	uxtb	r2, r3
 801104c:	68bb      	ldr	r3, [r7, #8]
 801104e:	70da      	strb	r2, [r3, #3]

  /* Fill the Date structure fields with the read parameters */
  RTC_StampDateStruct->RTC_Year = 0;
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	2200      	movs	r2, #0
 8011054:	70da      	strb	r2, [r3, #3]
  RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8011056:	693b      	ldr	r3, [r7, #16]
 8011058:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 801105c:	0a1b      	lsrs	r3, r3, #8
 801105e:	b2da      	uxtb	r2, r3
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	705a      	strb	r2, [r3, #1]
  RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 8011064:	693b      	ldr	r3, [r7, #16]
 8011066:	b2db      	uxtb	r3, r3
 8011068:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801106c:	b2da      	uxtb	r2, r3
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	709a      	strb	r2, [r3, #2]
  RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 8011072:	693b      	ldr	r3, [r7, #16]
 8011074:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8011078:	0b5b      	lsrs	r3, r3, #13
 801107a:	b2da      	uxtb	r2, r3
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	2b00      	cmp	r3, #0
 8011084:	d135      	bne.n	80110f2 <RTC_GetTimeStamp+0x10a>
  {
    /* Convert the Time structure parameters to Binary format */
    RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 8011086:	68bb      	ldr	r3, [r7, #8]
 8011088:	781b      	ldrb	r3, [r3, #0]
 801108a:	4618      	mov	r0, r3
 801108c:	f000 faaa 	bl	80115e4 <RTC_Bcd2ToByte>
 8011090:	4603      	mov	r3, r0
 8011092:	461a      	mov	r2, r3
 8011094:	68bb      	ldr	r3, [r7, #8]
 8011096:	701a      	strb	r2, [r3, #0]
    RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 8011098:	68bb      	ldr	r3, [r7, #8]
 801109a:	785b      	ldrb	r3, [r3, #1]
 801109c:	4618      	mov	r0, r3
 801109e:	f000 faa1 	bl	80115e4 <RTC_Bcd2ToByte>
 80110a2:	4603      	mov	r3, r0
 80110a4:	461a      	mov	r2, r3
 80110a6:	68bb      	ldr	r3, [r7, #8]
 80110a8:	705a      	strb	r2, [r3, #1]
    RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 80110aa:	68bb      	ldr	r3, [r7, #8]
 80110ac:	789b      	ldrb	r3, [r3, #2]
 80110ae:	4618      	mov	r0, r3
 80110b0:	f000 fa98 	bl	80115e4 <RTC_Bcd2ToByte>
 80110b4:	4603      	mov	r3, r0
 80110b6:	461a      	mov	r2, r3
 80110b8:	68bb      	ldr	r3, [r7, #8]
 80110ba:	709a      	strb	r2, [r3, #2]

    /* Convert the Date structure parameters to Binary format */
    RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	785b      	ldrb	r3, [r3, #1]
 80110c0:	4618      	mov	r0, r3
 80110c2:	f000 fa8f 	bl	80115e4 <RTC_Bcd2ToByte>
 80110c6:	4603      	mov	r3, r0
 80110c8:	461a      	mov	r2, r3
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	705a      	strb	r2, [r3, #1]
    RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	789b      	ldrb	r3, [r3, #2]
 80110d2:	4618      	mov	r0, r3
 80110d4:	f000 fa86 	bl	80115e4 <RTC_Bcd2ToByte>
 80110d8:	4603      	mov	r3, r0
 80110da:	461a      	mov	r2, r3
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	709a      	strb	r2, [r3, #2]
    RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	781b      	ldrb	r3, [r3, #0]
 80110e4:	4618      	mov	r0, r3
 80110e6:	f000 fa7d 	bl	80115e4 <RTC_Bcd2ToByte>
 80110ea:	4603      	mov	r3, r0
 80110ec:	461a      	mov	r2, r3
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	701a      	strb	r2, [r3, #0]
  }
}
 80110f2:	3718      	adds	r7, #24
 80110f4:	46bd      	mov	sp, r7
 80110f6:	bd80      	pop	{r7, pc}
 80110f8:	40002800 	.word	0x40002800

080110fc <RTC_GetTimeStampSubSecond>:
  * @brief  Get the RTC timestamp Sub seconds value.
  * @param  None
  * @retval RTC current timestamp Sub seconds value.
  */
uint32_t RTC_GetTimeStampSubSecond(void)
{
 80110fc:	b480      	push	{r7}
 80110fe:	af00      	add	r7, sp, #0
  /* Get timestamp sub seconds values from the correspondent registers */
  return (uint32_t)(RTC->TSSSR);
 8011100:	4b03      	ldr	r3, [pc, #12]	; (8011110 <RTC_GetTimeStampSubSecond+0x14>)
 8011102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8011104:	4618      	mov	r0, r3
 8011106:	46bd      	mov	sp, r7
 8011108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801110c:	4770      	bx	lr
 801110e:	bf00      	nop
 8011110:	40002800 	.word	0x40002800

08011114 <RTC_TamperTriggerConfig>:
  *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
  *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
  * @retval None
  */
void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
{
 8011114:	b480      	push	{r7}
 8011116:	b083      	sub	sp, #12
 8011118:	af00      	add	r7, sp, #0
 801111a:	6078      	str	r0, [r7, #4]
 801111c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
  assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
 
  if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 801111e:	683b      	ldr	r3, [r7, #0]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d108      	bne.n	8011136 <RTC_TamperTriggerConfig+0x22>
  {  
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 8011124:	4b0a      	ldr	r3, [pc, #40]	; (8011150 <RTC_TamperTriggerConfig+0x3c>)
 8011126:	4a0a      	ldr	r2, [pc, #40]	; (8011150 <RTC_TamperTriggerConfig+0x3c>)
 8011128:	6c11      	ldr	r1, [r2, #64]	; 0x40
 801112a:	687a      	ldr	r2, [r7, #4]
 801112c:	0052      	lsls	r2, r2, #1
 801112e:	43d2      	mvns	r2, r2
 8011130:	400a      	ands	r2, r1
 8011132:	641a      	str	r2, [r3, #64]	; 0x40
 8011134:	e006      	b.n	8011144 <RTC_TamperTriggerConfig+0x30>
  }
  else
  { 
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 8011136:	4b06      	ldr	r3, [pc, #24]	; (8011150 <RTC_TamperTriggerConfig+0x3c>)
 8011138:	4a05      	ldr	r2, [pc, #20]	; (8011150 <RTC_TamperTriggerConfig+0x3c>)
 801113a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 801113c:	687a      	ldr	r2, [r7, #4]
 801113e:	0052      	lsls	r2, r2, #1
 8011140:	430a      	orrs	r2, r1
 8011142:	641a      	str	r2, [r3, #64]	; 0x40
  }  
}
 8011144:	370c      	adds	r7, #12
 8011146:	46bd      	mov	sp, r7
 8011148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801114c:	4770      	bx	lr
 801114e:	bf00      	nop
 8011150:	40002800 	.word	0x40002800

08011154 <RTC_TamperCmd>:
  * @param  NewState: new state of the tamper pin.
  *          This parameter can be: ENABLE or DISABLE.                   
  * @retval None
  */
void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
{
 8011154:	b480      	push	{r7}
 8011156:	b083      	sub	sp, #12
 8011158:	af00      	add	r7, sp, #0
 801115a:	6078      	str	r0, [r7, #4]
 801115c:	460b      	mov	r3, r1
 801115e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8011160:	78fb      	ldrb	r3, [r7, #3]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d006      	beq.n	8011174 <RTC_TamperCmd+0x20>
  {
    /* Enable the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_Tamper;
 8011166:	4b09      	ldr	r3, [pc, #36]	; (801118c <RTC_TamperCmd+0x38>)
 8011168:	4a08      	ldr	r2, [pc, #32]	; (801118c <RTC_TamperCmd+0x38>)
 801116a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 801116c:	687a      	ldr	r2, [r7, #4]
 801116e:	430a      	orrs	r2, r1
 8011170:	641a      	str	r2, [r3, #64]	; 0x40
 8011172:	e006      	b.n	8011182 <RTC_TamperCmd+0x2e>
  }
  else
  {
    /* Disable the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 8011174:	4b05      	ldr	r3, [pc, #20]	; (801118c <RTC_TamperCmd+0x38>)
 8011176:	4a05      	ldr	r2, [pc, #20]	; (801118c <RTC_TamperCmd+0x38>)
 8011178:	6c11      	ldr	r1, [r2, #64]	; 0x40
 801117a:	687a      	ldr	r2, [r7, #4]
 801117c:	43d2      	mvns	r2, r2
 801117e:	400a      	ands	r2, r1
 8011180:	641a      	str	r2, [r3, #64]	; 0x40
  }  
}
 8011182:	370c      	adds	r7, #12
 8011184:	46bd      	mov	sp, r7
 8011186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801118a:	4770      	bx	lr
 801118c:	40002800 	.word	0x40002800

08011190 <RTC_TamperFilterConfig>:
  *     @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
  *                                    samples at the active level 
  * @retval None
  */
void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
{
 8011190:	b480      	push	{r7}
 8011192:	b083      	sub	sp, #12
 8011194:	af00      	add	r7, sp, #0
 8011196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
   
  /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 8011198:	4b08      	ldr	r3, [pc, #32]	; (80111bc <RTC_TamperFilterConfig+0x2c>)
 801119a:	4a08      	ldr	r2, [pc, #32]	; (80111bc <RTC_TamperFilterConfig+0x2c>)
 801119c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801119e:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 80111a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
 80111a4:	4b05      	ldr	r3, [pc, #20]	; (80111bc <RTC_TamperFilterConfig+0x2c>)
 80111a6:	4a05      	ldr	r2, [pc, #20]	; (80111bc <RTC_TamperFilterConfig+0x2c>)
 80111a8:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80111aa:	687a      	ldr	r2, [r7, #4]
 80111ac:	430a      	orrs	r2, r1
 80111ae:	641a      	str	r2, [r3, #64]	; 0x40
}
 80111b0:	370c      	adds	r7, #12
 80111b2:	46bd      	mov	sp, r7
 80111b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b8:	4770      	bx	lr
 80111ba:	bf00      	nop
 80111bc:	40002800 	.word	0x40002800

080111c0 <RTC_TamperSamplingFreqConfig>:
  *     @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
  *                                           with a frequency =  RTCCLK / 256  
  * @retval None
  */
void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
{
 80111c0:	b480      	push	{r7}
 80111c2:	b083      	sub	sp, #12
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
 
  /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 80111c8:	4b08      	ldr	r3, [pc, #32]	; (80111ec <RTC_TamperSamplingFreqConfig+0x2c>)
 80111ca:	4a08      	ldr	r2, [pc, #32]	; (80111ec <RTC_TamperSamplingFreqConfig+0x2c>)
 80111cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80111ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80111d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
 80111d4:	4b05      	ldr	r3, [pc, #20]	; (80111ec <RTC_TamperSamplingFreqConfig+0x2c>)
 80111d6:	4a05      	ldr	r2, [pc, #20]	; (80111ec <RTC_TamperSamplingFreqConfig+0x2c>)
 80111d8:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80111da:	687a      	ldr	r2, [r7, #4]
 80111dc:	430a      	orrs	r2, r1
 80111de:	641a      	str	r2, [r3, #64]	; 0x40
}
 80111e0:	370c      	adds	r7, #12
 80111e2:	46bd      	mov	sp, r7
 80111e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e8:	4770      	bx	lr
 80111ea:	bf00      	nop
 80111ec:	40002800 	.word	0x40002800

080111f0 <RTC_TamperPinsPrechargeDuration>:
  *     @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are precharged before sampling during 4 RTCCLK cycle    
  *     @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are precharged before sampling during 8 RTCCLK cycle
  * @retval None
  */
void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
{
 80111f0:	b480      	push	{r7}
 80111f2:	b083      	sub	sp, #12
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
   
  /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 80111f8:	4b08      	ldr	r3, [pc, #32]	; (801121c <RTC_TamperPinsPrechargeDuration+0x2c>)
 80111fa:	4a08      	ldr	r2, [pc, #32]	; (801121c <RTC_TamperPinsPrechargeDuration+0x2c>)
 80111fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80111fe:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8011202:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
 8011204:	4b05      	ldr	r3, [pc, #20]	; (801121c <RTC_TamperPinsPrechargeDuration+0x2c>)
 8011206:	4a05      	ldr	r2, [pc, #20]	; (801121c <RTC_TamperPinsPrechargeDuration+0x2c>)
 8011208:	6c11      	ldr	r1, [r2, #64]	; 0x40
 801120a:	687a      	ldr	r2, [r7, #4]
 801120c:	430a      	orrs	r2, r1
 801120e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8011210:	370c      	adds	r7, #12
 8011212:	46bd      	mov	sp, r7
 8011214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011218:	4770      	bx	lr
 801121a:	bf00      	nop
 801121c:	40002800 	.word	0x40002800

08011220 <RTC_TimeStampOnTamperDetectionCmd>:
  * @param  NewState: new state of the timestamp on tamper event.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
{
 8011220:	b480      	push	{r7}
 8011222:	b083      	sub	sp, #12
 8011224:	af00      	add	r7, sp, #0
 8011226:	4603      	mov	r3, r0
 8011228:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
   
  if (NewState != DISABLE)
 801122a:	79fb      	ldrb	r3, [r7, #7]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d006      	beq.n	801123e <RTC_TimeStampOnTamperDetectionCmd+0x1e>
  {
    /* Save timestamp on tamper detection event */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 8011230:	4b08      	ldr	r3, [pc, #32]	; (8011254 <RTC_TimeStampOnTamperDetectionCmd+0x34>)
 8011232:	4a08      	ldr	r2, [pc, #32]	; (8011254 <RTC_TimeStampOnTamperDetectionCmd+0x34>)
 8011234:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8011236:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801123a:	641a      	str	r2, [r3, #64]	; 0x40
 801123c:	e005      	b.n	801124a <RTC_TimeStampOnTamperDetectionCmd+0x2a>
  }
  else
  {
    /* Tamper detection does not cause a timestamp to be saved */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
 801123e:	4b05      	ldr	r3, [pc, #20]	; (8011254 <RTC_TimeStampOnTamperDetectionCmd+0x34>)
 8011240:	4a04      	ldr	r2, [pc, #16]	; (8011254 <RTC_TimeStampOnTamperDetectionCmd+0x34>)
 8011242:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8011244:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011248:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 801124a:	370c      	adds	r7, #12
 801124c:	46bd      	mov	sp, r7
 801124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011252:	4770      	bx	lr
 8011254:	40002800 	.word	0x40002800

08011258 <RTC_TamperPullUpCmd>:
  * @param  NewState: new state of tamper pull up.
  *   This parameter can be: ENABLE or DISABLE.                   
  * @retval None
  */
void RTC_TamperPullUpCmd(FunctionalState NewState)
{
 8011258:	b480      	push	{r7}
 801125a:	b083      	sub	sp, #12
 801125c:	af00      	add	r7, sp, #0
 801125e:	4603      	mov	r3, r0
 8011260:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
 if (NewState != DISABLE)
 8011262:	79fb      	ldrb	r3, [r7, #7]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d006      	beq.n	8011276 <RTC_TamperPullUpCmd+0x1e>
  {
    /* Enable precharge of the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 8011268:	4b08      	ldr	r3, [pc, #32]	; (801128c <RTC_TamperPullUpCmd+0x34>)
 801126a:	4a08      	ldr	r2, [pc, #32]	; (801128c <RTC_TamperPullUpCmd+0x34>)
 801126c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801126e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8011272:	641a      	str	r2, [r3, #64]	; 0x40
 8011274:	e005      	b.n	8011282 <RTC_TamperPullUpCmd+0x2a>
  }
  else
  {
    /* Disable precharge of the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
 8011276:	4b05      	ldr	r3, [pc, #20]	; (801128c <RTC_TamperPullUpCmd+0x34>)
 8011278:	4a04      	ldr	r2, [pc, #16]	; (801128c <RTC_TamperPullUpCmd+0x34>)
 801127a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801127c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011280:	641a      	str	r2, [r3, #64]	; 0x40
  } 
}
 8011282:	370c      	adds	r7, #12
 8011284:	46bd      	mov	sp, r7
 8011286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801128a:	4770      	bx	lr
 801128c:	40002800 	.word	0x40002800

08011290 <RTC_WriteBackupRegister>:
  *                          specify the register.
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
{
 8011290:	b480      	push	{r7}
 8011292:	b085      	sub	sp, #20
 8011294:	af00      	add	r7, sp, #0
 8011296:	6078      	str	r0, [r7, #4]
 8011298:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 801129a:	2300      	movs	r3, #0
 801129c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 801129e:	4b07      	ldr	r3, [pc, #28]	; (80112bc <RTC_WriteBackupRegister+0x2c>)
 80112a0:	60fb      	str	r3, [r7, #12]
  tmp += (RTC_BKP_DR * 4);
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	009a      	lsls	r2, r3, #2
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	4413      	add	r3, r2
 80112aa:	60fb      	str	r3, [r7, #12]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	683a      	ldr	r2, [r7, #0]
 80112b0:	601a      	str	r2, [r3, #0]
}
 80112b2:	3714      	adds	r7, #20
 80112b4:	46bd      	mov	sp, r7
 80112b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ba:	4770      	bx	lr
 80112bc:	40002850 	.word	0x40002850

080112c0 <RTC_ReadBackupRegister>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
  *                          specify the register.                   
  * @retval None
  */
uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
{
 80112c0:	b480      	push	{r7}
 80112c2:	b085      	sub	sp, #20
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 80112c8:	2300      	movs	r3, #0
 80112ca:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 80112cc:	4b07      	ldr	r3, [pc, #28]	; (80112ec <RTC_ReadBackupRegister+0x2c>)
 80112ce:	60fb      	str	r3, [r7, #12]
  tmp += (RTC_BKP_DR * 4);
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	009a      	lsls	r2, r3, #2
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	4413      	add	r3, r2
 80112d8:	60fb      	str	r3, [r7, #12]
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	681b      	ldr	r3, [r3, #0]
}
 80112de:	4618      	mov	r0, r3
 80112e0:	3714      	adds	r7, #20
 80112e2:	46bd      	mov	sp, r7
 80112e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e8:	4770      	bx	lr
 80112ea:	bf00      	nop
 80112ec:	40002850 	.word	0x40002850

080112f0 <RTC_TamperPinSelection>:
  *            @arg RTC_TamperPin_PC13: PC13 is selected as RTC Tamper Pin.
  *            @arg RTC_TamperPin_PI8: PI8 is selected as RTC Tamper Pin.    
  * @retval None
  */
void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
{
 80112f0:	b480      	push	{r7}
 80112f2:	b083      	sub	sp, #12
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
 80112f8:	4b08      	ldr	r3, [pc, #32]	; (801131c <RTC_TamperPinSelection+0x2c>)
 80112fa:	4a08      	ldr	r2, [pc, #32]	; (801131c <RTC_TamperPinSelection+0x2c>)
 80112fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80112fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8011302:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 8011304:	4b05      	ldr	r3, [pc, #20]	; (801131c <RTC_TamperPinSelection+0x2c>)
 8011306:	4a05      	ldr	r2, [pc, #20]	; (801131c <RTC_TamperPinSelection+0x2c>)
 8011308:	6c11      	ldr	r1, [r2, #64]	; 0x40
 801130a:	687a      	ldr	r2, [r7, #4]
 801130c:	430a      	orrs	r2, r1
 801130e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8011310:	370c      	adds	r7, #12
 8011312:	46bd      	mov	sp, r7
 8011314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011318:	4770      	bx	lr
 801131a:	bf00      	nop
 801131c:	40002800 	.word	0x40002800

08011320 <RTC_TimeStampPinSelection>:
  *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
  *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
  * @retval None
  */
void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
{
 8011320:	b480      	push	{r7}
 8011322:	b083      	sub	sp, #12
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
 8011328:	4b08      	ldr	r3, [pc, #32]	; (801134c <RTC_TimeStampPinSelection+0x2c>)
 801132a:	4a08      	ldr	r2, [pc, #32]	; (801134c <RTC_TimeStampPinSelection+0x2c>)
 801132c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801132e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8011332:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 8011334:	4b05      	ldr	r3, [pc, #20]	; (801134c <RTC_TimeStampPinSelection+0x2c>)
 8011336:	4a05      	ldr	r2, [pc, #20]	; (801134c <RTC_TimeStampPinSelection+0x2c>)
 8011338:	6c11      	ldr	r1, [r2, #64]	; 0x40
 801133a:	687a      	ldr	r2, [r7, #4]
 801133c:	430a      	orrs	r2, r1
 801133e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8011340:	370c      	adds	r7, #12
 8011342:	46bd      	mov	sp, r7
 8011344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011348:	4770      	bx	lr
 801134a:	bf00      	nop
 801134c:	40002800 	.word	0x40002800

08011350 <RTC_OutputTypeConfig>:
  *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
  *                                    Push Pull mode.    
  * @retval None
  */
void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
{
 8011350:	b480      	push	{r7}
 8011352:	b083      	sub	sp, #12
 8011354:	af00      	add	r7, sp, #0
 8011356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 8011358:	4b08      	ldr	r3, [pc, #32]	; (801137c <RTC_OutputTypeConfig+0x2c>)
 801135a:	4a08      	ldr	r2, [pc, #32]	; (801137c <RTC_OutputTypeConfig+0x2c>)
 801135c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801135e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8011362:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 8011364:	4b05      	ldr	r3, [pc, #20]	; (801137c <RTC_OutputTypeConfig+0x2c>)
 8011366:	4a05      	ldr	r2, [pc, #20]	; (801137c <RTC_OutputTypeConfig+0x2c>)
 8011368:	6c11      	ldr	r1, [r2, #64]	; 0x40
 801136a:	687a      	ldr	r2, [r7, #4]
 801136c:	430a      	orrs	r2, r1
 801136e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8011370:	370c      	adds	r7, #12
 8011372:	46bd      	mov	sp, r7
 8011374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011378:	4770      	bx	lr
 801137a:	bf00      	nop
 801137c:	40002800 	.word	0x40002800

08011380 <RTC_SynchroShiftConfig>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Shift registers are configured
  *          - ERROR: RTC Shift registers are not configured
*/
ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
{
 8011380:	b580      	push	{r7, lr}
 8011382:	b084      	sub	sp, #16
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
 8011388:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 801138a:	2300      	movs	r3, #0
 801138c:	73fb      	strb	r3, [r7, #15]
  uint32_t shpfcount = 0;
 801138e:	2300      	movs	r3, #0
 8011390:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
  assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8011392:	4b21      	ldr	r3, [pc, #132]	; (8011418 <RTC_SynchroShiftConfig+0x98>)
 8011394:	22ca      	movs	r2, #202	; 0xca
 8011396:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8011398:	4b1f      	ldr	r3, [pc, #124]	; (8011418 <RTC_SynchroShiftConfig+0x98>)
 801139a:	2253      	movs	r2, #83	; 0x53
 801139c:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Check if a Shift is pending*/
  if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
 801139e:	4b1e      	ldr	r3, [pc, #120]	; (8011418 <RTC_SynchroShiftConfig+0x98>)
 80113a0:	68db      	ldr	r3, [r3, #12]
 80113a2:	f003 0308 	and.w	r3, r3, #8
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d00d      	beq.n	80113c6 <RTC_SynchroShiftConfig+0x46>
  {
    /* Wait until the shift is completed*/
    while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 80113aa:	e002      	b.n	80113b2 <RTC_SynchroShiftConfig+0x32>
    {
      shpfcount++;
 80113ac:	68bb      	ldr	r3, [r7, #8]
 80113ae:	3301      	adds	r3, #1
 80113b0:	60bb      	str	r3, [r7, #8]
  
  /* Check if a Shift is pending*/
  if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
  {
    /* Wait until the shift is completed*/
    while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 80113b2:	4b19      	ldr	r3, [pc, #100]	; (8011418 <RTC_SynchroShiftConfig+0x98>)
 80113b4:	68db      	ldr	r3, [r3, #12]
 80113b6:	f003 0308 	and.w	r3, r3, #8
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d003      	beq.n	80113c6 <RTC_SynchroShiftConfig+0x46>
 80113be:	68bb      	ldr	r3, [r7, #8]
 80113c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80113c4:	d1f2      	bne.n	80113ac <RTC_SynchroShiftConfig+0x2c>
      shpfcount++;
    }
  }

  /* Check if the Shift pending is completed or if there is no Shift operation at all*/
  if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 80113c6:	4b14      	ldr	r3, [pc, #80]	; (8011418 <RTC_SynchroShiftConfig+0x98>)
 80113c8:	68db      	ldr	r3, [r3, #12]
 80113ca:	f003 0308 	and.w	r3, r3, #8
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d118      	bne.n	8011404 <RTC_SynchroShiftConfig+0x84>
  {
    /* check if the reference clock detection is disabled */
    if((RTC->CR & RTC_CR_REFCKON) == RESET)
 80113d2:	4b11      	ldr	r3, [pc, #68]	; (8011418 <RTC_SynchroShiftConfig+0x98>)
 80113d4:	689b      	ldr	r3, [r3, #8]
 80113d6:	f003 0310 	and.w	r3, r3, #16
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d10f      	bne.n	80113fe <RTC_SynchroShiftConfig+0x7e>
    {
      /* Configure the Shift settings */
      RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
 80113de:	4b0e      	ldr	r3, [pc, #56]	; (8011418 <RTC_SynchroShiftConfig+0x98>)
 80113e0:	6839      	ldr	r1, [r7, #0]
 80113e2:	687a      	ldr	r2, [r7, #4]
 80113e4:	430a      	orrs	r2, r1
 80113e6:	62da      	str	r2, [r3, #44]	; 0x2c
    
      if(RTC_WaitForSynchro() == ERROR)
 80113e8:	f7fe ffc0 	bl	801036c <RTC_WaitForSynchro>
 80113ec:	4603      	mov	r3, r0
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d102      	bne.n	80113f8 <RTC_SynchroShiftConfig+0x78>
      {
        status = ERROR;
 80113f2:	2300      	movs	r3, #0
 80113f4:	73fb      	strb	r3, [r7, #15]
 80113f6:	e007      	b.n	8011408 <RTC_SynchroShiftConfig+0x88>
      }
      else
      {
        status = SUCCESS;
 80113f8:	2301      	movs	r3, #1
 80113fa:	73fb      	strb	r3, [r7, #15]
 80113fc:	e004      	b.n	8011408 <RTC_SynchroShiftConfig+0x88>
      }
    }
    else
    {
      status = ERROR;
 80113fe:	2300      	movs	r3, #0
 8011400:	73fb      	strb	r3, [r7, #15]
 8011402:	e001      	b.n	8011408 <RTC_SynchroShiftConfig+0x88>
    }
  }
  else
  {
    status = ERROR;
 8011404:	2300      	movs	r3, #0
 8011406:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8011408:	4b03      	ldr	r3, [pc, #12]	; (8011418 <RTC_SynchroShiftConfig+0x98>)
 801140a:	22ff      	movs	r2, #255	; 0xff
 801140c:	625a      	str	r2, [r3, #36]	; 0x24
  
  return (ErrorStatus)(status);
 801140e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011410:	4618      	mov	r0, r3
 8011412:	3710      	adds	r7, #16
 8011414:	46bd      	mov	sp, r7
 8011416:	bd80      	pop	{r7, pc}
 8011418:	40002800 	.word	0x40002800

0801141c <RTC_ITConfig>:
  * @param  NewState: new state of the specified RTC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
{
 801141c:	b480      	push	{r7}
 801141e:	b083      	sub	sp, #12
 8011420:	af00      	add	r7, sp, #0
 8011422:	6078      	str	r0, [r7, #4]
 8011424:	460b      	mov	r3, r1
 8011426:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RTC_CONFIG_IT(RTC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8011428:	4b19      	ldr	r3, [pc, #100]	; (8011490 <RTC_ITConfig+0x74>)
 801142a:	22ca      	movs	r2, #202	; 0xca
 801142c:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 801142e:	4b18      	ldr	r3, [pc, #96]	; (8011490 <RTC_ITConfig+0x74>)
 8011430:	2253      	movs	r2, #83	; 0x53
 8011432:	625a      	str	r2, [r3, #36]	; 0x24

  if (NewState != DISABLE)
 8011434:	78fb      	ldrb	r3, [r7, #3]
 8011436:	2b00      	cmp	r3, #0
 8011438:	d010      	beq.n	801145c <RTC_ITConfig+0x40>
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 801143a:	4b15      	ldr	r3, [pc, #84]	; (8011490 <RTC_ITConfig+0x74>)
 801143c:	4a14      	ldr	r2, [pc, #80]	; (8011490 <RTC_ITConfig+0x74>)
 801143e:	6891      	ldr	r1, [r2, #8]
 8011440:	687a      	ldr	r2, [r7, #4]
 8011442:	f022 0204 	bic.w	r2, r2, #4
 8011446:	430a      	orrs	r2, r1
 8011448:	609a      	str	r2, [r3, #8]
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 801144a:	4b11      	ldr	r3, [pc, #68]	; (8011490 <RTC_ITConfig+0x74>)
 801144c:	4a10      	ldr	r2, [pc, #64]	; (8011490 <RTC_ITConfig+0x74>)
 801144e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8011450:	687a      	ldr	r2, [r7, #4]
 8011452:	f002 0204 	and.w	r2, r2, #4
 8011456:	430a      	orrs	r2, r1
 8011458:	641a      	str	r2, [r3, #64]	; 0x40
 801145a:	e011      	b.n	8011480 <RTC_ITConfig+0x64>
  }
  else
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 801145c:	4b0c      	ldr	r3, [pc, #48]	; (8011490 <RTC_ITConfig+0x74>)
 801145e:	4a0c      	ldr	r2, [pc, #48]	; (8011490 <RTC_ITConfig+0x74>)
 8011460:	6891      	ldr	r1, [r2, #8]
 8011462:	687a      	ldr	r2, [r7, #4]
 8011464:	f022 0204 	bic.w	r2, r2, #4
 8011468:	43d2      	mvns	r2, r2
 801146a:	400a      	ands	r2, r1
 801146c:	609a      	str	r2, [r3, #8]
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 801146e:	4b08      	ldr	r3, [pc, #32]	; (8011490 <RTC_ITConfig+0x74>)
 8011470:	4a07      	ldr	r2, [pc, #28]	; (8011490 <RTC_ITConfig+0x74>)
 8011472:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8011474:	687a      	ldr	r2, [r7, #4]
 8011476:	f002 0204 	and.w	r2, r2, #4
 801147a:	43d2      	mvns	r2, r2
 801147c:	400a      	ands	r2, r1
 801147e:	641a      	str	r2, [r3, #64]	; 0x40
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8011480:	4b03      	ldr	r3, [pc, #12]	; (8011490 <RTC_ITConfig+0x74>)
 8011482:	22ff      	movs	r2, #255	; 0xff
 8011484:	625a      	str	r2, [r3, #36]	; 0x24
}
 8011486:	370c      	adds	r7, #12
 8011488:	46bd      	mov	sp, r7
 801148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801148e:	4770      	bx	lr
 8011490:	40002800 	.word	0x40002800

08011494 <RTC_GetFlagStatus>:
  *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
  *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
  * @retval The new state of RTC_FLAG (SET or RESET).
  */
FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
{
 8011494:	b480      	push	{r7}
 8011496:	b085      	sub	sp, #20
 8011498:	af00      	add	r7, sp, #0
 801149a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 801149c:	2300      	movs	r3, #0
 801149e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 80114a0:	2300      	movs	r3, #0
 80114a2:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
  
  /* Get all the flags */
  tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 80114a4:	4b0a      	ldr	r3, [pc, #40]	; (80114d0 <RTC_GetFlagStatus+0x3c>)
 80114a6:	68da      	ldr	r2, [r3, #12]
 80114a8:	4b0a      	ldr	r3, [pc, #40]	; (80114d4 <RTC_GetFlagStatus+0x40>)
 80114aa:	4013      	ands	r3, r2
 80114ac:	60bb      	str	r3, [r7, #8]
  
  /* Return the status of the flag */
  if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
 80114ae:	68ba      	ldr	r2, [r7, #8]
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	4013      	ands	r3, r2
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d002      	beq.n	80114be <RTC_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 80114b8:	2301      	movs	r3, #1
 80114ba:	73fb      	strb	r3, [r7, #15]
 80114bc:	e001      	b.n	80114c2 <RTC_GetFlagStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
 80114be:	2300      	movs	r3, #0
 80114c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80114c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80114c4:	4618      	mov	r0, r3
 80114c6:	3714      	adds	r7, #20
 80114c8:	46bd      	mov	sp, r7
 80114ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ce:	4770      	bx	lr
 80114d0:	40002800 	.word	0x40002800
 80114d4:	00013f7f 	.word	0x00013f7f

080114d8 <RTC_ClearFlag>:
  *            @arg RTC_FLAG_ALRAF: Alarm A flag
  *            @arg RTC_FLAG_RSF: Registers Synchronized flag
  * @retval None
  */
void RTC_ClearFlag(uint32_t RTC_FLAG)
{
 80114d8:	b480      	push	{r7}
 80114da:	b083      	sub	sp, #12
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));

  /* Clear the Flags in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT)));  
 80114e0:	4b08      	ldr	r3, [pc, #32]	; (8011504 <RTC_ClearFlag+0x2c>)
 80114e2:	687a      	ldr	r2, [r7, #4]
 80114e4:	b292      	uxth	r2, r2
 80114e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80114ea:	43d1      	mvns	r1, r2
 80114ec:	4a05      	ldr	r2, [pc, #20]	; (8011504 <RTC_ClearFlag+0x2c>)
 80114ee:	68d2      	ldr	r2, [r2, #12]
 80114f0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80114f4:	430a      	orrs	r2, r1
 80114f6:	60da      	str	r2, [r3, #12]
}
 80114f8:	370c      	adds	r7, #12
 80114fa:	46bd      	mov	sp, r7
 80114fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011500:	4770      	bx	lr
 8011502:	bf00      	nop
 8011504:	40002800 	.word	0x40002800

08011508 <RTC_GetITStatus>:
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval The new state of RTC_IT (SET or RESET).
  */
ITStatus RTC_GetITStatus(uint32_t RTC_IT)
{
 8011508:	b480      	push	{r7}
 801150a:	b087      	sub	sp, #28
 801150c:	af00      	add	r7, sp, #0
 801150e:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8011510:	2300      	movs	r3, #0
 8011512:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0, enablestatus = 0;
 8011514:	2300      	movs	r3, #0
 8011516:	613b      	str	r3, [r7, #16]
 8011518:	2300      	movs	r3, #0
 801151a:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_RTC_GET_IT(RTC_IT));
  
  /* Get the TAMPER Interrupt enable bit and pending bit */
  tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 801151c:	4b13      	ldr	r3, [pc, #76]	; (801156c <RTC_GetITStatus+0x64>)
 801151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011520:	f003 0304 	and.w	r3, r3, #4
 8011524:	613b      	str	r3, [r7, #16]
 
  /* Get the Interrupt enable Status */
  enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 8011526:	4b11      	ldr	r3, [pc, #68]	; (801156c <RTC_GetITStatus+0x64>)
 8011528:	689a      	ldr	r2, [r3, #8]
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	401a      	ands	r2, r3
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	0bd9      	lsrs	r1, r3, #15
 8011532:	693b      	ldr	r3, [r7, #16]
 8011534:	400b      	ands	r3, r1
 8011536:	4313      	orrs	r3, r2
 8011538:	60fb      	str	r3, [r7, #12]
  
  /* Get the Interrupt pending bit */
  tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 801153a:	4b0c      	ldr	r3, [pc, #48]	; (801156c <RTC_GetITStatus+0x64>)
 801153c:	68da      	ldr	r2, [r3, #12]
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	091b      	lsrs	r3, r3, #4
 8011542:	4013      	ands	r3, r2
 8011544:	613b      	str	r3, [r7, #16]
  
  /* Get the status of the Interrupt */
  if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d006      	beq.n	801155a <RTC_GetITStatus+0x52>
 801154c:	693b      	ldr	r3, [r7, #16]
 801154e:	b29b      	uxth	r3, r3
 8011550:	2b00      	cmp	r3, #0
 8011552:	d002      	beq.n	801155a <RTC_GetITStatus+0x52>
  {
    bitstatus = SET;
 8011554:	2301      	movs	r3, #1
 8011556:	75fb      	strb	r3, [r7, #23]
 8011558:	e001      	b.n	801155e <RTC_GetITStatus+0x56>
  }
  else
  {
    bitstatus = RESET;
 801155a:	2300      	movs	r3, #0
 801155c:	75fb      	strb	r3, [r7, #23]
  }
  return bitstatus;
 801155e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011560:	4618      	mov	r0, r3
 8011562:	371c      	adds	r7, #28
 8011564:	46bd      	mov	sp, r7
 8011566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156a:	4770      	bx	lr
 801156c:	40002800 	.word	0x40002800

08011570 <RTC_ClearITPendingBit>:
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval None
  */
void RTC_ClearITPendingBit(uint32_t RTC_IT)
{
 8011570:	b480      	push	{r7}
 8011572:	b085      	sub	sp, #20
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8011578:	2300      	movs	r3, #0
 801157a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_IT(RTC_IT));

  /* Get the RTC_ISR Interrupt pending bits mask */
  tmpreg = (uint32_t)(RTC_IT >> 4);
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	091b      	lsrs	r3, r3, #4
 8011580:	60fb      	str	r3, [r7, #12]

  /* Clear the interrupt pending bits in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT))); 
 8011582:	4b08      	ldr	r3, [pc, #32]	; (80115a4 <RTC_ClearITPendingBit+0x34>)
 8011584:	68fa      	ldr	r2, [r7, #12]
 8011586:	b292      	uxth	r2, r2
 8011588:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801158c:	43d1      	mvns	r1, r2
 801158e:	4a05      	ldr	r2, [pc, #20]	; (80115a4 <RTC_ClearITPendingBit+0x34>)
 8011590:	68d2      	ldr	r2, [r2, #12]
 8011592:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8011596:	430a      	orrs	r2, r1
 8011598:	60da      	str	r2, [r3, #12]
}
 801159a:	3714      	adds	r7, #20
 801159c:	46bd      	mov	sp, r7
 801159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a2:	4770      	bx	lr
 80115a4:	40002800 	.word	0x40002800

080115a8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted.
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80115a8:	b480      	push	{r7}
 80115aa:	b085      	sub	sp, #20
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	4603      	mov	r3, r0
 80115b0:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0;
 80115b2:	2300      	movs	r3, #0
 80115b4:	73fb      	strb	r3, [r7, #15]
  
  while (Value >= 10)
 80115b6:	e005      	b.n	80115c4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80115b8:	7bfb      	ldrb	r3, [r7, #15]
 80115ba:	3301      	adds	r3, #1
 80115bc:	73fb      	strb	r3, [r7, #15]
    Value -= 10;
 80115be:	79fb      	ldrb	r3, [r7, #7]
 80115c0:	3b0a      	subs	r3, #10
 80115c2:	71fb      	strb	r3, [r7, #7]
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 80115c4:	79fb      	ldrb	r3, [r7, #7]
 80115c6:	2b09      	cmp	r3, #9
 80115c8:	d8f6      	bhi.n	80115b8 <RTC_ByteToBcd2+0x10>
  {
    bcdhigh++;
    Value -= 10;
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 80115ca:	7bfb      	ldrb	r3, [r7, #15]
 80115cc:	011b      	lsls	r3, r3, #4
 80115ce:	b2da      	uxtb	r2, r3
 80115d0:	79fb      	ldrb	r3, [r7, #7]
 80115d2:	4313      	orrs	r3, r2
 80115d4:	b2db      	uxtb	r3, r3
}
 80115d6:	4618      	mov	r0, r3
 80115d8:	3714      	adds	r7, #20
 80115da:	46bd      	mov	sp, r7
 80115dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e0:	4770      	bx	lr
 80115e2:	bf00      	nop

080115e4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted.
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80115e4:	b480      	push	{r7}
 80115e6:	b085      	sub	sp, #20
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	4603      	mov	r3, r0
 80115ec:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0;
 80115ee:	2300      	movs	r3, #0
 80115f0:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80115f2:	79fb      	ldrb	r3, [r7, #7]
 80115f4:	091b      	lsrs	r3, r3, #4
 80115f6:	b2db      	uxtb	r3, r3
 80115f8:	461a      	mov	r2, r3
 80115fa:	0092      	lsls	r2, r2, #2
 80115fc:	4413      	add	r3, r2
 80115fe:	005b      	lsls	r3, r3, #1
 8011600:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & (uint8_t)0x0F));
 8011602:	79fb      	ldrb	r3, [r7, #7]
 8011604:	f003 030f 	and.w	r3, r3, #15
 8011608:	b2da      	uxtb	r2, r3
 801160a:	7bfb      	ldrb	r3, [r7, #15]
 801160c:	4413      	add	r3, r2
 801160e:	b2db      	uxtb	r3, r3
}
 8011610:	4618      	mov	r0, r3
 8011612:	3714      	adds	r7, #20
 8011614:	46bd      	mov	sp, r7
 8011616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161a:	4770      	bx	lr

0801161c <SAI_DeInit>:
  * @param  SAIx: To select the SAIx peripheral, where x can be the different instances 
  *                     
  * @retval None
  */
void SAI_DeInit(SAI_TypeDef* SAIx)
{
 801161c:	b580      	push	{r7, lr}
 801161e:	b082      	sub	sp, #8
 8011620:	af00      	add	r7, sp, #0
 8011622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SAI_PERIPH(SAIx));

  /* Enable SAI1 reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SAI1, ENABLE);
 8011624:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8011628:	2101      	movs	r1, #1
 801162a:	f7fe fb7d 	bl	800fd28 <RCC_APB2PeriphResetCmd>
  /* Release SAI1 from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SAI1, DISABLE);  
 801162e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8011632:	2100      	movs	r1, #0
 8011634:	f7fe fb78 	bl	800fd28 <RCC_APB2PeriphResetCmd>
}
 8011638:	3708      	adds	r7, #8
 801163a:	46bd      	mov	sp, r7
 801163c:	bd80      	pop	{r7, pc}
 801163e:	bf00      	nop

08011640 <SAI_Init>:
  * @param  SAI_InitStruct: pointer to a SAI_InitTypeDef structure that
  *         contains the configuration information for the specified SAI Block peripheral.             
  * @retval None
  */
void SAI_Init(SAI_Block_TypeDef* SAI_Block_x, SAI_InitTypeDef* SAI_InitStruct)
{
 8011640:	b480      	push	{r7}
 8011642:	b085      	sub	sp, #20
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
 8011648:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801164a:	2300      	movs	r3, #0
 801164c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(SAI_InitStruct->SAI_MasterDivider));
  assert_param(IS_SAI_BLOCK_FIFO_THRESHOLD(SAI_InitStruct->SAI_FIFOThreshold));

  /* SAI Block_x CR1 Configuration */
  /* Get the SAI Block_x CR1 value */
  tmpreg = SAI_Block_x->CR1;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	60fb      	str	r3, [r7, #12]
  /* Clear MODE, PRTCFG, DS, LSBFIRST, CKSTR, SYNCEN, OUTDRIV, NODIV, and MCKDIV bits */
  tmpreg &= CR1_CLEAR_MASK;
 8011654:	68fa      	ldr	r2, [r7, #12]
 8011656:	4b1c      	ldr	r3, [pc, #112]	; (80116c8 <SAI_Init+0x88>)
 8011658:	4013      	ands	r3, r2
 801165a:	60fb      	str	r3, [r7, #12]
  /* Set CKSTR bit according to SAI_ClockStrobing value   */
  /* Set SYNCEN bit according to SAI_Synchro value        */
  /* Set OUTDRIV bit according to SAI_OUTDRIV value       */
  /* Set NODIV bit according to SAI_NoDivider value       */
  /* Set MCKDIV bits according to SAI_MasterDivider value */
  tmpreg |= (uint32_t)(SAI_InitStruct->SAI_AudioMode     | SAI_InitStruct->SAI_Protocol  |
 801165c:	683b      	ldr	r3, [r7, #0]
 801165e:	681a      	ldr	r2, [r3, #0]
 8011660:	683b      	ldr	r3, [r7, #0]
 8011662:	685b      	ldr	r3, [r3, #4]
 8011664:	431a      	orrs	r2, r3
                       SAI_InitStruct->SAI_DataSize      | SAI_InitStruct->SAI_FirstBit  |  
 8011666:	683b      	ldr	r3, [r7, #0]
 8011668:	689b      	ldr	r3, [r3, #8]
  /* Set CKSTR bit according to SAI_ClockStrobing value   */
  /* Set SYNCEN bit according to SAI_Synchro value        */
  /* Set OUTDRIV bit according to SAI_OUTDRIV value       */
  /* Set NODIV bit according to SAI_NoDivider value       */
  /* Set MCKDIV bits according to SAI_MasterDivider value */
  tmpreg |= (uint32_t)(SAI_InitStruct->SAI_AudioMode     | SAI_InitStruct->SAI_Protocol  |
 801166a:	431a      	orrs	r2, r3
                       SAI_InitStruct->SAI_DataSize      | SAI_InitStruct->SAI_FirstBit  |  
 801166c:	683b      	ldr	r3, [r7, #0]
 801166e:	68db      	ldr	r3, [r3, #12]
 8011670:	431a      	orrs	r2, r3
                       SAI_InitStruct->SAI_ClockStrobing | SAI_InitStruct->SAI_Synchro   |  
 8011672:	683b      	ldr	r3, [r7, #0]
 8011674:	691b      	ldr	r3, [r3, #16]
  /* Set SYNCEN bit according to SAI_Synchro value        */
  /* Set OUTDRIV bit according to SAI_OUTDRIV value       */
  /* Set NODIV bit according to SAI_NoDivider value       */
  /* Set MCKDIV bits according to SAI_MasterDivider value */
  tmpreg |= (uint32_t)(SAI_InitStruct->SAI_AudioMode     | SAI_InitStruct->SAI_Protocol  |
                       SAI_InitStruct->SAI_DataSize      | SAI_InitStruct->SAI_FirstBit  |  
 8011676:	431a      	orrs	r2, r3
                       SAI_InitStruct->SAI_ClockStrobing | SAI_InitStruct->SAI_Synchro   |  
 8011678:	683b      	ldr	r3, [r7, #0]
 801167a:	695b      	ldr	r3, [r3, #20]
 801167c:	431a      	orrs	r2, r3
                       SAI_InitStruct->SAI_OUTDRIV       | SAI_InitStruct->SAI_NoDivider | 
 801167e:	683b      	ldr	r3, [r7, #0]
 8011680:	699b      	ldr	r3, [r3, #24]
  /* Set OUTDRIV bit according to SAI_OUTDRIV value       */
  /* Set NODIV bit according to SAI_NoDivider value       */
  /* Set MCKDIV bits according to SAI_MasterDivider value */
  tmpreg |= (uint32_t)(SAI_InitStruct->SAI_AudioMode     | SAI_InitStruct->SAI_Protocol  |
                       SAI_InitStruct->SAI_DataSize      | SAI_InitStruct->SAI_FirstBit  |  
                       SAI_InitStruct->SAI_ClockStrobing | SAI_InitStruct->SAI_Synchro   |  
 8011682:	431a      	orrs	r2, r3
                       SAI_InitStruct->SAI_OUTDRIV       | SAI_InitStruct->SAI_NoDivider | 
 8011684:	683b      	ldr	r3, [r7, #0]
 8011686:	69db      	ldr	r3, [r3, #28]
 8011688:	431a      	orrs	r2, r3
                       (uint32_t)((SAI_InitStruct->SAI_MasterDivider) << 20));
 801168a:	683b      	ldr	r3, [r7, #0]
 801168c:	6a1b      	ldr	r3, [r3, #32]
 801168e:	051b      	lsls	r3, r3, #20
  /* Set CKSTR bit according to SAI_ClockStrobing value   */
  /* Set SYNCEN bit according to SAI_Synchro value        */
  /* Set OUTDRIV bit according to SAI_OUTDRIV value       */
  /* Set NODIV bit according to SAI_NoDivider value       */
  /* Set MCKDIV bits according to SAI_MasterDivider value */
  tmpreg |= (uint32_t)(SAI_InitStruct->SAI_AudioMode     | SAI_InitStruct->SAI_Protocol  |
 8011690:	4313      	orrs	r3, r2
 8011692:	68fa      	ldr	r2, [r7, #12]
 8011694:	4313      	orrs	r3, r2
 8011696:	60fb      	str	r3, [r7, #12]
                       SAI_InitStruct->SAI_DataSize      | SAI_InitStruct->SAI_FirstBit  |  
                       SAI_InitStruct->SAI_ClockStrobing | SAI_InitStruct->SAI_Synchro   |  
                       SAI_InitStruct->SAI_OUTDRIV       | SAI_InitStruct->SAI_NoDivider | 
                       (uint32_t)((SAI_InitStruct->SAI_MasterDivider) << 20));
  /* Write to SAI_Block_x CR1 */
  SAI_Block_x->CR1 = tmpreg;
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	68fa      	ldr	r2, [r7, #12]
 801169c:	601a      	str	r2, [r3, #0]
  
  /* SAI Block_x CR2 Configuration */
  /* Get the SAIBlock_x CR2 value */
  tmpreg = SAI_Block_x->CR2;
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	685b      	ldr	r3, [r3, #4]
 80116a2:	60fb      	str	r3, [r7, #12]
  /* Clear FTH bits */
  tmpreg &= ~(SAI_xCR2_FTH);
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	f023 0303 	bic.w	r3, r3, #3
 80116aa:	60fb      	str	r3, [r7, #12]
  /* Configure the FIFO Level */
  /* Set FTH bits according to SAI_FIFOThreshold value */ 
  tmpreg |= (uint32_t)(SAI_InitStruct->SAI_FIFOThreshold);
 80116ac:	683b      	ldr	r3, [r7, #0]
 80116ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116b0:	68fa      	ldr	r2, [r7, #12]
 80116b2:	4313      	orrs	r3, r2
 80116b4:	60fb      	str	r3, [r7, #12]
  /* Write to SAI_Block_x CR2 */
  SAI_Block_x->CR2 = tmpreg;
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	68fa      	ldr	r2, [r7, #12]
 80116ba:	605a      	str	r2, [r3, #4]
}
 80116bc:	3714      	adds	r7, #20
 80116be:	46bd      	mov	sp, r7
 80116c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c4:	4770      	bx	lr
 80116c6:	bf00      	nop
 80116c8:	ff07c010 	.word	0xff07c010

080116cc <SAI_FrameInit>:
  * @param  SAI_FrameInitStruct: pointer to an SAI_FrameInitTypeDef structure that
  *         contains the configuration of audio frame for a specified SAI Block                       
  * @retval None
  */
void SAI_FrameInit(SAI_Block_TypeDef* SAI_Block_x, SAI_FrameInitTypeDef* SAI_FrameInitStruct)
{
 80116cc:	b480      	push	{r7}
 80116ce:	b085      	sub	sp, #20
 80116d0:	af00      	add	r7, sp, #0
 80116d2:	6078      	str	r0, [r7, #4]
 80116d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80116d6:	2300      	movs	r3, #0
 80116d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SAI_BLOCK_FS_POLARITY(SAI_FrameInitStruct->SAI_FSPolarity));
  assert_param(IS_SAI_BLOCK_FS_OFFSET(SAI_FrameInitStruct->SAI_FSOffset));

  /* SAI Block_x FRCR Configuration */
  /* Get the SAI Block_x FRCR value */
  tmpreg = SAI_Block_x->FRCR;
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	689b      	ldr	r3, [r3, #8]
 80116de:	60fb      	str	r3, [r7, #12]
  /* Clear FRL, FSALL, FSDEF, FSPOL, FSOFF bits */
  tmpreg &= FRCR_CLEAR_MASK;
 80116e0:	68fa      	ldr	r2, [r7, #12]
 80116e2:	4b0f      	ldr	r3, [pc, #60]	; (8011720 <SAI_FrameInit+0x54>)
 80116e4:	4013      	ands	r3, r2
 80116e6:	60fb      	str	r3, [r7, #12]
  /* Set FRL bits according to SAI_FrameLength value         */
  /* Set FSALL bits according to SAI_ActiveFrameLength value */
  /* Set FSDEF bit according to SAI_FSDefinition value       */
  /* Set FSPOL bit according to SAI_FSPolarity value         */
  /* Set FSOFF bit according to SAI_FSOffset value           */
  tmpreg |= (uint32_t)((uint32_t)(SAI_FrameInitStruct->SAI_FrameLength - 1)  | 
 80116e8:	683b      	ldr	r3, [r7, #0]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	1e5a      	subs	r2, r3, #1
                       SAI_FrameInitStruct->SAI_FSOffset     | 
 80116ee:	683b      	ldr	r3, [r7, #0]
 80116f0:	691b      	ldr	r3, [r3, #16]
  /* Set FRL bits according to SAI_FrameLength value         */
  /* Set FSALL bits according to SAI_ActiveFrameLength value */
  /* Set FSDEF bit according to SAI_FSDefinition value       */
  /* Set FSPOL bit according to SAI_FSPolarity value         */
  /* Set FSOFF bit according to SAI_FSOffset value           */
  tmpreg |= (uint32_t)((uint32_t)(SAI_FrameInitStruct->SAI_FrameLength - 1)  | 
 80116f2:	431a      	orrs	r2, r3
                       SAI_FrameInitStruct->SAI_FSOffset     | 
                       SAI_FrameInitStruct->SAI_FSDefinition |    
 80116f4:	683b      	ldr	r3, [r7, #0]
 80116f6:	689b      	ldr	r3, [r3, #8]
  /* Set FSALL bits according to SAI_ActiveFrameLength value */
  /* Set FSDEF bit according to SAI_FSDefinition value       */
  /* Set FSPOL bit according to SAI_FSPolarity value         */
  /* Set FSOFF bit according to SAI_FSOffset value           */
  tmpreg |= (uint32_t)((uint32_t)(SAI_FrameInitStruct->SAI_FrameLength - 1)  | 
                       SAI_FrameInitStruct->SAI_FSOffset     | 
 80116f8:	431a      	orrs	r2, r3
                       SAI_FrameInitStruct->SAI_FSDefinition |    
                       SAI_FrameInitStruct->SAI_FSPolarity   |                        
 80116fa:	683b      	ldr	r3, [r7, #0]
 80116fc:	68db      	ldr	r3, [r3, #12]
  /* Set FSDEF bit according to SAI_FSDefinition value       */
  /* Set FSPOL bit according to SAI_FSPolarity value         */
  /* Set FSOFF bit according to SAI_FSOffset value           */
  tmpreg |= (uint32_t)((uint32_t)(SAI_FrameInitStruct->SAI_FrameLength - 1)  | 
                       SAI_FrameInitStruct->SAI_FSOffset     | 
                       SAI_FrameInitStruct->SAI_FSDefinition |    
 80116fe:	431a      	orrs	r2, r3
                       SAI_FrameInitStruct->SAI_FSPolarity   |                        
                       (uint32_t)((SAI_FrameInitStruct->SAI_ActiveFrameLength - 1) << 8));
 8011700:	683b      	ldr	r3, [r7, #0]
 8011702:	685b      	ldr	r3, [r3, #4]
 8011704:	3b01      	subs	r3, #1
 8011706:	021b      	lsls	r3, r3, #8
  /* Set FRL bits according to SAI_FrameLength value         */
  /* Set FSALL bits according to SAI_ActiveFrameLength value */
  /* Set FSDEF bit according to SAI_FSDefinition value       */
  /* Set FSPOL bit according to SAI_FSPolarity value         */
  /* Set FSOFF bit according to SAI_FSOffset value           */
  tmpreg |= (uint32_t)((uint32_t)(SAI_FrameInitStruct->SAI_FrameLength - 1)  | 
 8011708:	4313      	orrs	r3, r2
 801170a:	68fa      	ldr	r2, [r7, #12]
 801170c:	4313      	orrs	r3, r2
 801170e:	60fb      	str	r3, [r7, #12]
                       SAI_FrameInitStruct->SAI_FSDefinition |    
                       SAI_FrameInitStruct->SAI_FSPolarity   |                        
                       (uint32_t)((SAI_FrameInitStruct->SAI_ActiveFrameLength - 1) << 8));
                       
  /* Write to SAI_Block_x FRCR */
  SAI_Block_x->FRCR = tmpreg;
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	68fa      	ldr	r2, [r7, #12]
 8011714:	609a      	str	r2, [r3, #8]
}
 8011716:	3714      	adds	r7, #20
 8011718:	46bd      	mov	sp, r7
 801171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171e:	4770      	bx	lr
 8011720:	fff88000 	.word	0xfff88000

08011724 <SAI_SlotInit>:
  * @param  SAI_SlotInitStruct: pointer to an SAI_SlotInitTypeDef structure that
  *         contains the configuration of audio slot for a specified SAI Block                      
  * @retval None
  */
void SAI_SlotInit(SAI_Block_TypeDef* SAI_Block_x, SAI_SlotInitTypeDef* SAI_SlotInitStruct)
{
 8011724:	b480      	push	{r7}
 8011726:	b085      	sub	sp, #20
 8011728:	af00      	add	r7, sp, #0
 801172a:	6078      	str	r0, [r7, #4]
 801172c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801172e:	2300      	movs	r3, #0
 8011730:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(SAI_SlotInitStruct->SAI_SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(SAI_SlotInitStruct->SAI_SlotActive));

  /* SAI Block_x SLOTR Configuration */
  /* Get the SAI Block_x SLOTR value */
  tmpreg = SAI_Block_x->SLOTR;
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	68db      	ldr	r3, [r3, #12]
 8011736:	60fb      	str	r3, [r7, #12]
  /* Clear FBOFF, SLOTSZ, NBSLOT, SLOTEN bits */
  tmpreg &= SLOTR_CLEAR_MASK;
 8011738:	68fa      	ldr	r2, [r7, #12]
 801173a:	f24f 0320 	movw	r3, #61472	; 0xf020
 801173e:	4013      	ands	r3, r2
 8011740:	60fb      	str	r3, [r7, #12]
     audio frame and slots activated in audio frame */
  /* Set FBOFF bits according to SAI_FirstBitOffset value  */
  /* Set SLOTSZ bits according to SAI_SlotSize value       */
  /* Set NBSLOT bits according to SAI_SlotNumber value     */
  /* Set SLOTEN bits according to SAI_SlotActive value     */
  tmpreg |= (uint32_t)(SAI_SlotInitStruct->SAI_FirstBitOffset | 
 8011742:	683b      	ldr	r3, [r7, #0]
 8011744:	681a      	ldr	r2, [r3, #0]
                       SAI_SlotInitStruct->SAI_SlotSize       | 
 8011746:	683b      	ldr	r3, [r7, #0]
 8011748:	685b      	ldr	r3, [r3, #4]
     audio frame and slots activated in audio frame */
  /* Set FBOFF bits according to SAI_FirstBitOffset value  */
  /* Set SLOTSZ bits according to SAI_SlotSize value       */
  /* Set NBSLOT bits according to SAI_SlotNumber value     */
  /* Set SLOTEN bits according to SAI_SlotActive value     */
  tmpreg |= (uint32_t)(SAI_SlotInitStruct->SAI_FirstBitOffset | 
 801174a:	431a      	orrs	r2, r3
                       SAI_SlotInitStruct->SAI_SlotSize       | 
                       SAI_SlotInitStruct->SAI_SlotActive     |    
 801174c:	683b      	ldr	r3, [r7, #0]
 801174e:	68db      	ldr	r3, [r3, #12]
  /* Set FBOFF bits according to SAI_FirstBitOffset value  */
  /* Set SLOTSZ bits according to SAI_SlotSize value       */
  /* Set NBSLOT bits according to SAI_SlotNumber value     */
  /* Set SLOTEN bits according to SAI_SlotActive value     */
  tmpreg |= (uint32_t)(SAI_SlotInitStruct->SAI_FirstBitOffset | 
                       SAI_SlotInitStruct->SAI_SlotSize       | 
 8011750:	431a      	orrs	r2, r3
                       SAI_SlotInitStruct->SAI_SlotActive     |    
                       (uint32_t)((SAI_SlotInitStruct->SAI_SlotNumber - 1) <<  8));
 8011752:	683b      	ldr	r3, [r7, #0]
 8011754:	689b      	ldr	r3, [r3, #8]
 8011756:	3b01      	subs	r3, #1
 8011758:	021b      	lsls	r3, r3, #8
     audio frame and slots activated in audio frame */
  /* Set FBOFF bits according to SAI_FirstBitOffset value  */
  /* Set SLOTSZ bits according to SAI_SlotSize value       */
  /* Set NBSLOT bits according to SAI_SlotNumber value     */
  /* Set SLOTEN bits according to SAI_SlotActive value     */
  tmpreg |= (uint32_t)(SAI_SlotInitStruct->SAI_FirstBitOffset | 
 801175a:	4313      	orrs	r3, r2
 801175c:	68fa      	ldr	r2, [r7, #12]
 801175e:	4313      	orrs	r3, r2
 8011760:	60fb      	str	r3, [r7, #12]
                       SAI_SlotInitStruct->SAI_SlotSize       | 
                       SAI_SlotInitStruct->SAI_SlotActive     |    
                       (uint32_t)((SAI_SlotInitStruct->SAI_SlotNumber - 1) <<  8));
                       
  /* Write to SAI_Block_x SLOTR */
  SAI_Block_x->SLOTR = tmpreg;
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	68fa      	ldr	r2, [r7, #12]
 8011766:	60da      	str	r2, [r3, #12]
}
 8011768:	3714      	adds	r7, #20
 801176a:	46bd      	mov	sp, r7
 801176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011770:	4770      	bx	lr
 8011772:	bf00      	nop

08011774 <SAI_StructInit>:
  * @param  SAI_InitStruct: pointer to a SAI_InitTypeDef structure which will 
  *         be initialized.  
  * @retval None
  */
void SAI_StructInit(SAI_InitTypeDef* SAI_InitStruct)
{
 8011774:	b480      	push	{r7}
 8011776:	b083      	sub	sp, #12
 8011778:	af00      	add	r7, sp, #0
 801177a:	6078      	str	r0, [r7, #4]
  /* Reset SAI init structure parameters values */
  /* Initialize the SAI_AudioMode member */
  SAI_InitStruct->SAI_AudioMode = SAI_Mode_MasterTx;
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	2200      	movs	r2, #0
 8011780:	601a      	str	r2, [r3, #0]
  /* Initialize the SAI_Protocol member */
  SAI_InitStruct->SAI_Protocol = SAI_Free_Protocol;
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	2200      	movs	r2, #0
 8011786:	605a      	str	r2, [r3, #4]
  /* Initialize the SAI_DataSize member */
  SAI_InitStruct->SAI_DataSize = SAI_DataSize_8b;
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	2240      	movs	r2, #64	; 0x40
 801178c:	609a      	str	r2, [r3, #8]
  /* Initialize the SAI_FirstBit member */
  SAI_InitStruct->SAI_FirstBit = SAI_FirstBit_MSB;
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	2200      	movs	r2, #0
 8011792:	60da      	str	r2, [r3, #12]
  /* Initialize the SAI_ClockStrobing member */
  SAI_InitStruct->SAI_ClockStrobing = SAI_ClockStrobing_FallingEdge;
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	2200      	movs	r2, #0
 8011798:	611a      	str	r2, [r3, #16]
  /* Initialize the SAI_Synchro member */
  SAI_InitStruct->SAI_Synchro = SAI_Asynchronous;
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	2200      	movs	r2, #0
 801179e:	615a      	str	r2, [r3, #20]
  /* Initialize the SAI_OUTDRIV member */
  SAI_InitStruct->SAI_OUTDRIV = SAI_OutputDrive_Disabled;
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	2200      	movs	r2, #0
 80117a4:	619a      	str	r2, [r3, #24]
  /* Initialize the SAI_NoDivider member */
  SAI_InitStruct->SAI_NoDivider = SAI_MasterDivider_Enabled;
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	2200      	movs	r2, #0
 80117aa:	61da      	str	r2, [r3, #28]
  /* Initialize the SAI_MasterDivider member */
  SAI_InitStruct->SAI_MasterDivider = 0;
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	2200      	movs	r2, #0
 80117b0:	621a      	str	r2, [r3, #32]
  /* Initialize the SAI_FIFOThreshold member */
  SAI_InitStruct->SAI_FIFOThreshold = SAI_Threshold_FIFOEmpty;
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	2200      	movs	r2, #0
 80117b6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80117b8:	370c      	adds	r7, #12
 80117ba:	46bd      	mov	sp, r7
 80117bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c0:	4770      	bx	lr
 80117c2:	bf00      	nop

080117c4 <SAI_FrameStructInit>:
  * @param  SAI_FrameInitStruct: pointer to a SAI_FrameInitTypeDef structure 
  *         which will be initialized.                     
  * @retval None
  */
void SAI_FrameStructInit(SAI_FrameInitTypeDef* SAI_FrameInitStruct)
{
 80117c4:	b480      	push	{r7}
 80117c6:	b083      	sub	sp, #12
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
  /* Reset SAI Frame init structure parameters values */
  /* Initialize the SAI_FrameLength member */
  SAI_FrameInitStruct->SAI_FrameLength = 8;
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	2208      	movs	r2, #8
 80117d0:	601a      	str	r2, [r3, #0]
  /* Initialize the SAI_ActiveFrameLength member */
  SAI_FrameInitStruct->SAI_ActiveFrameLength = 1;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	2201      	movs	r2, #1
 80117d6:	605a      	str	r2, [r3, #4]
  /* Initialize the SAI_FSDefinition member */
  SAI_FrameInitStruct->SAI_FSDefinition = SAI_FS_StartFrame;
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	2200      	movs	r2, #0
 80117dc:	609a      	str	r2, [r3, #8]
  /* Initialize the SAI_FSPolarity member */
  SAI_FrameInitStruct->SAI_FSPolarity = SAI_FS_ActiveLow;
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	2200      	movs	r2, #0
 80117e2:	60da      	str	r2, [r3, #12]
  /* Initialize the SAI_FSOffset member */
  SAI_FrameInitStruct->SAI_FSOffset = SAI_FS_FirstBit;
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	2200      	movs	r2, #0
 80117e8:	611a      	str	r2, [r3, #16]
}
 80117ea:	370c      	adds	r7, #12
 80117ec:	46bd      	mov	sp, r7
 80117ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f2:	4770      	bx	lr

080117f4 <SAI_SlotStructInit>:
  * @param  SAI_SlotInitStruct: pointer to a SAI_SlotInitTypeDef structure 
  *         which will be initialized.                     
  * @retval None
  */
void SAI_SlotStructInit(SAI_SlotInitTypeDef* SAI_SlotInitStruct)
{
 80117f4:	b480      	push	{r7}
 80117f6:	b083      	sub	sp, #12
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	6078      	str	r0, [r7, #4]
  /* Reset SAI Slot init structure parameters values */
  /* Initialize the SAI_FirstBitOffset member */
  SAI_SlotInitStruct->SAI_FirstBitOffset = 0;
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	2200      	movs	r2, #0
 8011800:	601a      	str	r2, [r3, #0]
  /* Initialize the SAI_SlotSize member */
  SAI_SlotInitStruct->SAI_SlotSize = SAI_SlotSize_DataSize;
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	2200      	movs	r2, #0
 8011806:	605a      	str	r2, [r3, #4]
  /* Initialize the SAI_SlotNumber member */
  SAI_SlotInitStruct->SAI_SlotNumber = 1;
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	2201      	movs	r2, #1
 801180c:	609a      	str	r2, [r3, #8]
  /* Initialize the SAI_SlotActive member */
  SAI_SlotInitStruct->SAI_SlotActive = SAI_Slot_NotActive;
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	2200      	movs	r2, #0
 8011812:	60da      	str	r2, [r3, #12]

}
 8011814:	370c      	adds	r7, #12
 8011816:	46bd      	mov	sp, r7
 8011818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801181c:	4770      	bx	lr
 801181e:	bf00      	nop

08011820 <SAI_Cmd>:
  * @param  NewState: new state of the SAI_Block_x peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SAI_Cmd(SAI_Block_TypeDef* SAI_Block_x, FunctionalState NewState)
{
 8011820:	b480      	push	{r7}
 8011822:	b083      	sub	sp, #12
 8011824:	af00      	add	r7, sp, #0
 8011826:	6078      	str	r0, [r7, #4]
 8011828:	460b      	mov	r3, r1
 801182a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 801182c:	78fb      	ldrb	r3, [r7, #3]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d006      	beq.n	8011840 <SAI_Cmd+0x20>
  {
    /* Enable the selected SAI peripheral */
    SAI_Block_x->CR1 |= SAI_xCR1_SAIEN;
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	601a      	str	r2, [r3, #0]
 801183e:	e005      	b.n	801184c <SAI_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected SAI peripheral */
    SAI_Block_x->CR1 &= ~(SAI_xCR1_SAIEN);
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	601a      	str	r2, [r3, #0]
  }
}
 801184c:	370c      	adds	r7, #12
 801184e:	46bd      	mov	sp, r7
 8011850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011854:	4770      	bx	lr
 8011856:	bf00      	nop

08011858 <SAI_MonoModeConfig>:
  *            @arg SAI_MonoMode : Set mono audio mode
  *            @arg SAI_StreoMode : Set streo audio mode                       
  * @retval None
  */
void SAI_MonoModeConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_Mono_StreoMode)
{
 8011858:	b480      	push	{r7}
 801185a:	b083      	sub	sp, #12
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
 8011860:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_MONO_STREO_MODE(SAI_MonoMode));
  /* Clear MONO bit */
  SAI_Block_x->CR1 &= ~(SAI_xCR1_MONO);
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	601a      	str	r2, [r3, #0]
  /* Set new Mono Mode value */
  SAI_Block_x->CR1 |= SAI_MonoMode;
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	601a      	str	r2, [r3, #0]
}
 801187a:	370c      	adds	r7, #12
 801187c:	46bd      	mov	sp, r7
 801187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011882:	4770      	bx	lr

08011884 <SAI_TRIStateConfig>:
  *            @arg SAI_Output_NotReleased : SD output line is still drived by the SAI.
  *            @arg SAI_Output_Released : SD output line is released (HI-Z)                       
  * @retval None
  */
void SAI_TRIStateConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_TRIState)
{
 8011884:	b480      	push	{r7}
 8011886:	b083      	sub	sp, #12
 8011888:	af00      	add	r7, sp, #0
 801188a:	6078      	str	r0, [r7, #4]
 801188c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_TRISTATE_MANAGEMENT(SAI_TRIState));
  /* Clear MONO bit */
  SAI_Block_x->CR1 &= ~(SAI_xCR1_MONO);
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	601a      	str	r2, [r3, #0]
  /* Set new Mono Mode value */
  SAI_Block_x->CR1 |= SAI_MonoMode;  
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	601a      	str	r2, [r3, #0]
  
}
 80118a6:	370c      	adds	r7, #12
 80118a8:	46bd      	mov	sp, r7
 80118aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ae:	4770      	bx	lr

080118b0 <SAI_CompandingModeConfig>:
  *            @arg SAI_ULaw_2CPL_Companding : Set U law (algorithm 2's complement representation)
  *            @arg SAI_ALaw_2CPL_Companding : Set A law (algorithm 2's complement repesentation)  
  * @retval None
  */
void SAI_CompandingModeConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_CompandingMode)
{
 80118b0:	b480      	push	{r7}
 80118b2:	b083      	sub	sp, #12
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	6078      	str	r0, [r7, #4]
 80118b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_COMPANDING_MODE(SAI_CompandingMode));
  /* Clear Companding Mode bits */
  SAI_Block_x->CR2 &= ~(SAI_xCR2_COMP);
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	685b      	ldr	r3, [r3, #4]
 80118be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	605a      	str	r2, [r3, #4]
  /* Set new Companding Mode value */
  SAI_Block_x->CR2 |= SAI_CompandingMode;
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	685a      	ldr	r2, [r3, #4]
 80118ca:	683b      	ldr	r3, [r7, #0]
 80118cc:	431a      	orrs	r2, r3
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	605a      	str	r2, [r3, #4]
}
 80118d2:	370c      	adds	r7, #12
 80118d4:	46bd      	mov	sp, r7
 80118d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118da:	4770      	bx	lr

080118dc <SAI_MuteModeCmd>:
  * @param  NewState: new state of the SAIx block. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SAI_MuteModeCmd(SAI_Block_TypeDef* SAI_Block_x, FunctionalState NewState)
{
 80118dc:	b480      	push	{r7}
 80118de:	b083      	sub	sp, #12
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	6078      	str	r0, [r7, #4]
 80118e4:	460b      	mov	r3, r1
 80118e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80118e8:	78fb      	ldrb	r3, [r7, #3]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d006      	beq.n	80118fc <SAI_MuteModeCmd+0x20>
  {
    /* Enable the selected SAI block mute mode */
    SAI_Block_x->CR2 |= SAI_xCR2_MUTE;
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	685b      	ldr	r3, [r3, #4]
 80118f2:	f043 0220 	orr.w	r2, r3, #32
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	605a      	str	r2, [r3, #4]
 80118fa:	e005      	b.n	8011908 <SAI_MuteModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected SAI SS output */
    SAI_Block_x->CR2 &= ~(SAI_xCR2_MUTE);
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	685b      	ldr	r3, [r3, #4]
 8011900:	f023 0220 	bic.w	r2, r3, #32
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	605a      	str	r2, [r3, #4]
  }
}
 8011908:	370c      	adds	r7, #12
 801190a:	46bd      	mov	sp, r7
 801190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011910:	4770      	bx	lr
 8011912:	bf00      	nop

08011914 <SAI_MuteValueConfig>:
  *            @arg SAI_ZeroValue : bit value 0 is sent during Mute Mode
  *            @arg SAI_LastSentValue : Last value is sent during Mute Mode  
  * @retval None
  */
void SAI_MuteValueConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_MuteValue)
{
 8011914:	b480      	push	{r7}
 8011916:	b083      	sub	sp, #12
 8011918:	af00      	add	r7, sp, #0
 801191a:	6078      	str	r0, [r7, #4]
 801191c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_MUTE_VALUE(SAI_MuteValue));
  
  /* Clear Mute value bits */
  SAI_Block_x->CR2 &= ~(SAI_xCR2_MUTEVAL);
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	685b      	ldr	r3, [r3, #4]
 8011922:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	605a      	str	r2, [r3, #4]
  /* Set new Mute value */
  SAI_Block_x->CR2 |= SAI_MuteValue;
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	685a      	ldr	r2, [r3, #4]
 801192e:	683b      	ldr	r3, [r7, #0]
 8011930:	431a      	orrs	r2, r3
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	605a      	str	r2, [r3, #4]
}
 8011936:	370c      	adds	r7, #12
 8011938:	46bd      	mov	sp, r7
 801193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193e:	4770      	bx	lr

08011940 <SAI_MuteFrameCounterConfig>:
  *         This parameter can be a number between 0 and 63.  
 
  * @retval None
  */
void SAI_MuteFrameCounterConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_MuteCounter)
{
 8011940:	b480      	push	{r7}
 8011942:	b083      	sub	sp, #12
 8011944:	af00      	add	r7, sp, #0
 8011946:	6078      	str	r0, [r7, #4]
 8011948:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_MUTE_COUNTER(SAI_MuteCounter));
  
  /* Clear Mute value bits */
  SAI_Block_x->CR2 &= ~(SAI_xCR2_MUTECNT);
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	685b      	ldr	r3, [r3, #4]
 801194e:	f423 52fc 	bic.w	r2, r3, #8064	; 0x1f80
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	605a      	str	r2, [r3, #4]
  /* Set new Mute value */
  SAI_Block_x->CR2 |= (SAI_MuteCounter << 7);
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	685a      	ldr	r2, [r3, #4]
 801195a:	683b      	ldr	r3, [r7, #0]
 801195c:	01db      	lsls	r3, r3, #7
 801195e:	431a      	orrs	r2, r3
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	605a      	str	r2, [r3, #4]
}
 8011964:	370c      	adds	r7, #12
 8011966:	46bd      	mov	sp, r7
 8011968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801196c:	4770      	bx	lr
 801196e:	bf00      	nop

08011970 <SAI_FlushFIFO>:
  * @param  NewState: new state of the selected SAI TI communication mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SAI_FlushFIFO(SAI_Block_TypeDef* SAI_Block_x)
{
 8011970:	b480      	push	{r7}
 8011972:	b083      	sub	sp, #12
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));

  /* FIFO flush */
  SAI_Block_x->CR2 |= SAI_xCR2_FFLUSH;
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	685b      	ldr	r3, [r3, #4]
 801197c:	f043 0208 	orr.w	r2, r3, #8
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	605a      	str	r2, [r3, #4]
}
 8011984:	370c      	adds	r7, #12
 8011986:	46bd      	mov	sp, r7
 8011988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801198c:	4770      	bx	lr
 801198e:	bf00      	nop

08011990 <SAI_ReceiveData>:
  * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral. 
  *         
  * @retval The value of the received data.
  */
uint32_t SAI_ReceiveData(SAI_Block_TypeDef* SAI_Block_x)
{
 8011990:	b480      	push	{r7}
 8011992:	b083      	sub	sp, #12
 8011994:	af00      	add	r7, sp, #0
 8011996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  
  /* Return the data in the DR register */
  return SAI_Block_x->DR;
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	69db      	ldr	r3, [r3, #28]
}
 801199c:	4618      	mov	r0, r3
 801199e:	370c      	adds	r7, #12
 80119a0:	46bd      	mov	sp, r7
 80119a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a6:	4770      	bx	lr

080119a8 <SAI_SendData>:
  *        
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SAI_SendData(SAI_Block_TypeDef* SAI_Block_x, uint32_t Data)
{
 80119a8:	b480      	push	{r7}
 80119aa:	b083      	sub	sp, #12
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	6078      	str	r0, [r7, #4]
 80119b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  
  /* Write in the DR register the data to be sent */
  SAI_Block_x->DR = Data;
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	683a      	ldr	r2, [r7, #0]
 80119b6:	61da      	str	r2, [r3, #28]
}
 80119b8:	370c      	adds	r7, #12
 80119ba:	46bd      	mov	sp, r7
 80119bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c0:	4770      	bx	lr
 80119c2:	bf00      	nop

080119c4 <SAI_DMACmd>:
  * @param  NewState: new state of the selected SAI block DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SAI_DMACmd(SAI_Block_TypeDef* SAI_Block_x, FunctionalState NewState)
{
 80119c4:	b480      	push	{r7}
 80119c6:	b083      	sub	sp, #12
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
 80119cc:	460b      	mov	r3, r1
 80119ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80119d0:	78fb      	ldrb	r3, [r7, #3]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d006      	beq.n	80119e4 <SAI_DMACmd+0x20>
  {
    /* Enable the selected SAI block mute mode */
    SAI_Block_x->CR1 |= SAI_xCR1_DMAEN;
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	601a      	str	r2, [r3, #0]
 80119e2:	e005      	b.n	80119f0 <SAI_DMACmd+0x2c>
  }
  else
  {
    /* Disable the selected SAI SS output */
    SAI_Block_x->CR1 &= ~(SAI_xCR1_DMAEN);
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	601a      	str	r2, [r3, #0]
  }
}
 80119f0:	370c      	adds	r7, #12
 80119f2:	46bd      	mov	sp, r7
 80119f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f8:	4770      	bx	lr
 80119fa:	bf00      	nop

080119fc <SAI_ITConfig>:
  * @param  NewState: new state of the specified SAI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SAI_ITConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_IT, FunctionalState NewState)
{ 
 80119fc:	b480      	push	{r7}
 80119fe:	b085      	sub	sp, #20
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	60f8      	str	r0, [r7, #12]
 8011a04:	60b9      	str	r1, [r7, #8]
 8011a06:	4613      	mov	r3, r2
 8011a08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SAI_BLOCK_CONFIG_IT(SAI_IT));

  if (NewState != DISABLE)
 8011a0a:	79fb      	ldrb	r3, [r7, #7]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d006      	beq.n	8011a1e <SAI_ITConfig+0x22>
  {
    /* Enable the selected SAI Block interrupt */
    SAI_Block_x->IMR |= SAI_IT;
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	691a      	ldr	r2, [r3, #16]
 8011a14:	68bb      	ldr	r3, [r7, #8]
 8011a16:	431a      	orrs	r2, r3
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	611a      	str	r2, [r3, #16]
 8011a1c:	e006      	b.n	8011a2c <SAI_ITConfig+0x30>
  }
  else
  {
    /* Disable the selected SAI Block interrupt */
    SAI_Block_x->IMR &= ~(SAI_IT);
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	691a      	ldr	r2, [r3, #16]
 8011a22:	68bb      	ldr	r3, [r7, #8]
 8011a24:	43db      	mvns	r3, r3
 8011a26:	401a      	ands	r2, r3
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	611a      	str	r2, [r3, #16]
  }
}
 8011a2c:	3714      	adds	r7, #20
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a34:	4770      	bx	lr
 8011a36:	bf00      	nop

08011a38 <SAI_GetFlagStatus>:
  *            @arg SAI_FLAG_AFSDET: anticipated frame synchronization detection flag.
  *            @arg SAI_FLAG_LFSDET: late frame synchronization detection flag.
  * @retval The new state of SAI_FLAG (SET or RESET).
  */
FlagStatus SAI_GetFlagStatus(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_FLAG)
{
 8011a38:	b480      	push	{r7}
 8011a3a:	b085      	sub	sp, #20
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	6078      	str	r0, [r7, #4]
 8011a40:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8011a42:	2300      	movs	r3, #0
 8011a44:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_GET_FLAG(SAI_FLAG));
  
  /* Check the status of the specified SAI flag */
  if ((SAI_Block_x->SR & SAI_FLAG) != (uint32_t)RESET)
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	695a      	ldr	r2, [r3, #20]
 8011a4a:	683b      	ldr	r3, [r7, #0]
 8011a4c:	4013      	ands	r3, r2
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d002      	beq.n	8011a58 <SAI_GetFlagStatus+0x20>
  {
    /* SAI_FLAG is set */
    bitstatus = SET;
 8011a52:	2301      	movs	r3, #1
 8011a54:	73fb      	strb	r3, [r7, #15]
 8011a56:	e001      	b.n	8011a5c <SAI_GetFlagStatus+0x24>
  }
  else
  {
    /* SAI_FLAG is reset */
    bitstatus = RESET;
 8011a58:	2300      	movs	r3, #0
 8011a5a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SAI_FLAG status */
  return  bitstatus;
 8011a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a5e:	4618      	mov	r0, r3
 8011a60:	3714      	adds	r7, #20
 8011a62:	46bd      	mov	sp, r7
 8011a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a68:	4770      	bx	lr
 8011a6a:	bf00      	nop

08011a6c <SAI_ClearFlag>:
  *          - When the audio block is receiver and the FIFO is not empty           
  *  
  * @retval None
  */
void SAI_ClearFlag(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_FLAG)
{
 8011a6c:	b480      	push	{r7}
 8011a6e:	b083      	sub	sp, #12
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
 8011a74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_CLEAR_FLAG(SAI_FLAG));
    
  /* Clear the selected SAI Block flag */
  SAI_Block_x->CLRFR |= SAI_FLAG;
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	699a      	ldr	r2, [r3, #24]
 8011a7a:	683b      	ldr	r3, [r7, #0]
 8011a7c:	431a      	orrs	r2, r3
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	619a      	str	r2, [r3, #24]
}
 8011a82:	370c      	adds	r7, #12
 8011a84:	46bd      	mov	sp, r7
 8011a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a8a:	4770      	bx	lr

08011a8c <SAI_GetITStatus>:
  *            @arg SAI_IT_WCKCFG: wrong clock configuration interrupt 
  *                
  * @retval The new state of SAI_IT (SET or RESET).
  */
ITStatus SAI_GetITStatus(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_IT)
{
 8011a8c:	b480      	push	{r7}
 8011a8e:	b085      	sub	sp, #20
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	6078      	str	r0, [r7, #4]
 8011a94:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8011a96:	2300      	movs	r3, #0
 8011a98:	73fb      	strb	r3, [r7, #15]
  uint32_t  enablestatus = 0;
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_CONFIG_IT(SAI_IT));
  
  /* Get the SAI_IT enable bit status */
  enablestatus = (SAI_Block_x->IMR & SAI_IT) ;
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	691a      	ldr	r2, [r3, #16]
 8011aa2:	683b      	ldr	r3, [r7, #0]
 8011aa4:	4013      	ands	r3, r2
 8011aa6:	60bb      	str	r3, [r7, #8]

  /* Check the status of the specified SAI interrupt */
  if (((SAI_Block_x->SR & SAI_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	695a      	ldr	r2, [r3, #20]
 8011aac:	683b      	ldr	r3, [r7, #0]
 8011aae:	4013      	ands	r3, r2
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d005      	beq.n	8011ac0 <SAI_GetITStatus+0x34>
 8011ab4:	68bb      	ldr	r3, [r7, #8]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d002      	beq.n	8011ac0 <SAI_GetITStatus+0x34>
  {
    /* SAI_IT is set */
    bitstatus = SET;
 8011aba:	2301      	movs	r3, #1
 8011abc:	73fb      	strb	r3, [r7, #15]
 8011abe:	e001      	b.n	8011ac4 <SAI_GetITStatus+0x38>
  }
  else
  {
    /* SAI_IT is reset */
    bitstatus = RESET;
 8011ac0:	2300      	movs	r3, #0
 8011ac2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SAI_IT status */
  return bitstatus;
 8011ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	3714      	adds	r7, #20
 8011aca:	46bd      	mov	sp, r7
 8011acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad0:	4770      	bx	lr
 8011ad2:	bf00      	nop

08011ad4 <SAI_ClearITPendingBit>:
  *          - When the audio block is receiver and the FIFO is not empty  
  *            
  * @retval None
  */
void SAI_ClearITPendingBit(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_IT)
{
 8011ad4:	b480      	push	{r7}
 8011ad6:	b083      	sub	sp, #12
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	6078      	str	r0, [r7, #4]
 8011adc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_CONFIG_IT(SAI_IT));

  /* Clear the selected SAI Block x interrupt pending bit */
  SAI_Block_x->CLRFR |= SAI_IT; 
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	699a      	ldr	r2, [r3, #24]
 8011ae2:	683b      	ldr	r3, [r7, #0]
 8011ae4:	431a      	orrs	r2, r3
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	619a      	str	r2, [r3, #24]
}
 8011aea:	370c      	adds	r7, #12
 8011aec:	46bd      	mov	sp, r7
 8011aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af2:	4770      	bx	lr

08011af4 <SAI_GetCmdStatus>:
  *          the end of audio frame.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState SAI_GetCmdStatus(SAI_Block_TypeDef* SAI_Block_x)
{
 8011af4:	b480      	push	{r7}
 8011af6:	b085      	sub	sp, #20
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8011afc:	2300      	movs	r3, #0
 8011afe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  if ((SAI_Block_x->CR1 & (uint32_t)SAI_xCR1_SAIEN) != 0)
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d002      	beq.n	8011b12 <SAI_GetCmdStatus+0x1e>
  {
    /* The selected SAI Block x EN bit is set (audio frame transfer is ongoing) */
    state = ENABLE;
 8011b0c:	2301      	movs	r3, #1
 8011b0e:	73fb      	strb	r3, [r7, #15]
 8011b10:	e001      	b.n	8011b16 <SAI_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected SAI Block x EN bit is cleared (SAI Block is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8011b12:	2300      	movs	r3, #0
 8011b14:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8011b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b18:	4618      	mov	r0, r3
 8011b1a:	3714      	adds	r7, #20
 8011b1c:	46bd      	mov	sp, r7
 8011b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b22:	4770      	bx	lr

08011b24 <SAI_GetFIFOStatus>:
  *           - SAI_FIFOStatus_HalfFull: if more than 1 half-full.
  *           - SAI_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
  *           - SAI_FIFOStatus_Full: when FIFO is full
  */
uint32_t SAI_GetFIFOStatus(SAI_Block_TypeDef* SAI_Block_x)
{
 8011b24:	b480      	push	{r7}
 8011b26:	b085      	sub	sp, #20
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8011b2c:	2300      	movs	r3, #0
 8011b2e:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  
  /* Get the FIFO level bits */
  tmpreg = (uint32_t)((SAI_Block_x->SR & SAI_xSR_FLVL));
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	695b      	ldr	r3, [r3, #20]
 8011b34:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8011b38:	60fb      	str	r3, [r7, #12]
  
  return tmpreg;
 8011b3a:	68fb      	ldr	r3, [r7, #12]
}
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	3714      	adds	r7, #20
 8011b40:	46bd      	mov	sp, r7
 8011b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b46:	4770      	bx	lr

08011b48 <SDIO_DeInit>:
  * @brief  Deinitializes the SDIO peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void SDIO_DeInit(void)
{
 8011b48:	b580      	push	{r7, lr}
 8011b4a:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, ENABLE);
 8011b4c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011b50:	2101      	movs	r1, #1
 8011b52:	f7fe f8e9 	bl	800fd28 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, DISABLE);
 8011b56:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011b5a:	2100      	movs	r1, #0
 8011b5c:	f7fe f8e4 	bl	800fd28 <RCC_APB2PeriphResetCmd>
}
 8011b60:	bd80      	pop	{r7, pc}
 8011b62:	bf00      	nop

08011b64 <SDIO_Init>:
  * @param  SDIO_InitStruct : pointer to a SDIO_InitTypeDef structure 
  *         that contains the configuration information for the SDIO peripheral.
  * @retval None
  */
void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct)
{
 8011b64:	b480      	push	{r7}
 8011b66:	b085      	sub	sp, #20
 8011b68:	af00      	add	r7, sp, #0
 8011b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8011b6c:	2300      	movs	r3, #0
 8011b6e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
   
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
 8011b70:	4b12      	ldr	r3, [pc, #72]	; (8011bbc <SDIO_Init+0x58>)
 8011b72:	685b      	ldr	r3, [r3, #4]
 8011b74:	60fb      	str	r3, [r7, #12]
  
  /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
  tmpreg &= CLKCR_CLEAR_MASK;
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8011b7c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011b80:	60fb      	str	r3, [r7, #12]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	7d1b      	ldrb	r3, [r3, #20]
 8011b86:	461a      	mov	r2, r3
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	689b      	ldr	r3, [r3, #8]
 8011b8c:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	685b      	ldr	r3, [r3, #4]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 8011b92:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	68db      	ldr	r3, [r3, #12]
 8011b98:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	681b      	ldr	r3, [r3, #0]
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 8011b9e:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	691b      	ldr	r3, [r3, #16]
 8011ba4:	4313      	orrs	r3, r2
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 8011ba6:	68fa      	ldr	r2, [r7, #12]
 8011ba8:	4313      	orrs	r3, r2
 8011baa:	60fb      	str	r3, [r7, #12]
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
  
  /* Write to SDIO CLKCR */
  SDIO->CLKCR = tmpreg;
 8011bac:	4b03      	ldr	r3, [pc, #12]	; (8011bbc <SDIO_Init+0x58>)
 8011bae:	68fa      	ldr	r2, [r7, #12]
 8011bb0:	605a      	str	r2, [r3, #4]
}
 8011bb2:	3714      	adds	r7, #20
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bba:	4770      	bx	lr
 8011bbc:	40012c00 	.word	0x40012c00

08011bc0 <SDIO_StructInit>:
  * @param  SDIO_InitStruct: pointer to an SDIO_InitTypeDef structure which 
  *         will be initialized.
  * @retval None
  */
void SDIO_StructInit(SDIO_InitTypeDef* SDIO_InitStruct)
{
 8011bc0:	b480      	push	{r7}
 8011bc2:	b083      	sub	sp, #12
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
  /* SDIO_InitStruct members default value */
  SDIO_InitStruct->SDIO_ClockDiv = 0x00;
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	2200      	movs	r2, #0
 8011bcc:	751a      	strb	r2, [r3, #20]
  SDIO_InitStruct->SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	2200      	movs	r2, #0
 8011bd2:	601a      	str	r2, [r3, #0]
  SDIO_InitStruct->SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	2200      	movs	r2, #0
 8011bd8:	605a      	str	r2, [r3, #4]
  SDIO_InitStruct->SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	2200      	movs	r2, #0
 8011bde:	609a      	str	r2, [r3, #8]
  SDIO_InitStruct->SDIO_BusWide = SDIO_BusWide_1b;
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	2200      	movs	r2, #0
 8011be4:	60da      	str	r2, [r3, #12]
  SDIO_InitStruct->SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	2200      	movs	r2, #0
 8011bea:	611a      	str	r2, [r3, #16]
}
 8011bec:	370c      	adds	r7, #12
 8011bee:	46bd      	mov	sp, r7
 8011bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf4:	4770      	bx	lr
 8011bf6:	bf00      	nop

08011bf8 <SDIO_ClockCmd>:
  * @param  NewState: new state of the SDIO Clock. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_ClockCmd(FunctionalState NewState)
{
 8011bf8:	b480      	push	{r7}
 8011bfa:	b083      	sub	sp, #12
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	4603      	mov	r3, r0
 8011c00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CLKCR_CLKEN_BB = (uint32_t)NewState;
 8011c02:	4b04      	ldr	r3, [pc, #16]	; (8011c14 <SDIO_ClockCmd+0x1c>)
 8011c04:	79fa      	ldrb	r2, [r7, #7]
 8011c06:	601a      	str	r2, [r3, #0]
}
 8011c08:	370c      	adds	r7, #12
 8011c0a:	46bd      	mov	sp, r7
 8011c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c10:	4770      	bx	lr
 8011c12:	bf00      	nop
 8011c14:	422580a0 	.word	0x422580a0

08011c18 <SDIO_SetPowerState>:
  *            @arg SDIO_PowerState_OFF: SDIO Power OFF
  *            @arg SDIO_PowerState_ON: SDIO Power ON
  * @retval None
  */
void SDIO_SetPowerState(uint32_t SDIO_PowerState)
{
 8011c18:	b480      	push	{r7}
 8011c1a:	b083      	sub	sp, #12
 8011c1c:	af00      	add	r7, sp, #0
 8011c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_POWER_STATE(SDIO_PowerState));
  
  SDIO->POWER = SDIO_PowerState;
 8011c20:	4b03      	ldr	r3, [pc, #12]	; (8011c30 <SDIO_SetPowerState+0x18>)
 8011c22:	687a      	ldr	r2, [r7, #4]
 8011c24:	601a      	str	r2, [r3, #0]
}
 8011c26:	370c      	adds	r7, #12
 8011c28:	46bd      	mov	sp, r7
 8011c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c2e:	4770      	bx	lr
 8011c30:	40012c00 	.word	0x40012c00

08011c34 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(void)
{
 8011c34:	b480      	push	{r7}
 8011c36:	af00      	add	r7, sp, #0
  return (SDIO->POWER & (~PWR_PWRCTRL_MASK));
 8011c38:	4b04      	ldr	r3, [pc, #16]	; (8011c4c <SDIO_GetPowerState+0x18>)
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	f003 0303 	and.w	r3, r3, #3
}
 8011c40:	4618      	mov	r0, r3
 8011c42:	46bd      	mov	sp, r7
 8011c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c48:	4770      	bx	lr
 8011c4a:	bf00      	nop
 8011c4c:	40012c00 	.word	0x40012c00

08011c50 <SDIO_SendCommand>:
  *         structure that contains the configuration information for the SDIO 
  *         command.
  * @retval None
  */
void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
{
 8011c50:	b480      	push	{r7}
 8011c52:	b085      	sub	sp, #20
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8011c58:	2300      	movs	r3, #0
 8011c5a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
  
/*---------------------------- SDIO ARG Configuration ------------------------*/
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
 8011c5c:	4b11      	ldr	r3, [pc, #68]	; (8011ca4 <SDIO_SendCommand+0x54>)
 8011c5e:	687a      	ldr	r2, [r7, #4]
 8011c60:	6812      	ldr	r2, [r2, #0]
 8011c62:	609a      	str	r2, [r3, #8]
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
 8011c64:	4b0f      	ldr	r3, [pc, #60]	; (8011ca4 <SDIO_SendCommand+0x54>)
 8011c66:	68db      	ldr	r3, [r3, #12]
 8011c68:	60fb      	str	r3, [r7, #12]
  /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
  tmpreg &= CMD_CLEAR_MASK;
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8011c70:	f023 0307 	bic.w	r3, r3, #7
 8011c74:	60fb      	str	r3, [r7, #12]
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	685a      	ldr	r2, [r3, #4]
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	689b      	ldr	r3, [r3, #8]
 8011c7e:	431a      	orrs	r2, r3
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	68db      	ldr	r3, [r3, #12]
 8011c84:	431a      	orrs	r2, r3
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	691b      	ldr	r3, [r3, #16]
 8011c8a:	4313      	orrs	r3, r2
  tmpreg &= CMD_CLEAR_MASK;
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 8011c8c:	68fa      	ldr	r2, [r7, #12]
 8011c8e:	4313      	orrs	r3, r2
 8011c90:	60fb      	str	r3, [r7, #12]
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
  
  /* Write to SDIO CMD */
  SDIO->CMD = tmpreg;
 8011c92:	4b04      	ldr	r3, [pc, #16]	; (8011ca4 <SDIO_SendCommand+0x54>)
 8011c94:	68fa      	ldr	r2, [r7, #12]
 8011c96:	60da      	str	r2, [r3, #12]
}
 8011c98:	3714      	adds	r7, #20
 8011c9a:	46bd      	mov	sp, r7
 8011c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca0:	4770      	bx	lr
 8011ca2:	bf00      	nop
 8011ca4:	40012c00 	.word	0x40012c00

08011ca8 <SDIO_CmdStructInit>:
  * @param  SDIO_CmdInitStruct: pointer to an SDIO_CmdInitTypeDef 
  *         structure which will be initialized.
  * @retval None
  */
void SDIO_CmdStructInit(SDIO_CmdInitTypeDef* SDIO_CmdInitStruct)
{
 8011ca8:	b480      	push	{r7}
 8011caa:	b083      	sub	sp, #12
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	6078      	str	r0, [r7, #4]
  /* SDIO_CmdInitStruct members default value */
  SDIO_CmdInitStruct->SDIO_Argument = 0x00;
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStruct->SDIO_CmdIndex = 0x00;
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	2200      	movs	r2, #0
 8011cba:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStruct->SDIO_Response = SDIO_Response_No;
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	2200      	movs	r2, #0
 8011cc0:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStruct->SDIO_Wait = SDIO_Wait_No;
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	2200      	movs	r2, #0
 8011cc6:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStruct->SDIO_CPSM = SDIO_CPSM_Disable;
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	2200      	movs	r2, #0
 8011ccc:	611a      	str	r2, [r3, #16]
}
 8011cce:	370c      	adds	r7, #12
 8011cd0:	46bd      	mov	sp, r7
 8011cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd6:	4770      	bx	lr

08011cd8 <SDIO_GetCommandResponse>:
  * @brief  Returns command index of last command for which response received.
  * @param  None
  * @retval Returns the command index of the last command response received.
  */
uint8_t SDIO_GetCommandResponse(void)
{
 8011cd8:	b480      	push	{r7}
 8011cda:	af00      	add	r7, sp, #0
  return (uint8_t)(SDIO->RESPCMD);
 8011cdc:	4b03      	ldr	r3, [pc, #12]	; (8011cec <SDIO_GetCommandResponse+0x14>)
 8011cde:	691b      	ldr	r3, [r3, #16]
 8011ce0:	b2db      	uxtb	r3, r3
}
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cea:	4770      	bx	lr
 8011cec:	40012c00 	.word	0x40012c00

08011cf0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4
  * @retval The Corresponding response register value.
  */
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
{
 8011cf0:	b480      	push	{r7}
 8011cf2:	b085      	sub	sp, #20
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));

  tmp = SDIO_RESP_ADDR + SDIO_RESP;
 8011cfc:	687a      	ldr	r2, [r7, #4]
 8011cfe:	4b05      	ldr	r3, [pc, #20]	; (8011d14 <SDIO_GetResponse+0x24>)
 8011d00:	4413      	add	r3, r2
 8011d02:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp); 
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	681b      	ldr	r3, [r3, #0]
}
 8011d08:	4618      	mov	r0, r3
 8011d0a:	3714      	adds	r7, #20
 8011d0c:	46bd      	mov	sp, r7
 8011d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d12:	4770      	bx	lr
 8011d14:	40012c14 	.word	0x40012c14

08011d18 <SDIO_DataConfig>:
  * @param  SDIO_DataInitStruct : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDIO command.
  * @retval None
  */
void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 8011d18:	b480      	push	{r7}
 8011d1a:	b085      	sub	sp, #20
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8011d20:	2300      	movs	r3, #0
 8011d22:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));

/*---------------------------- SDIO DTIMER Configuration ---------------------*/
  /* Set the SDIO Data TimeOut value */
  SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
 8011d24:	4b12      	ldr	r3, [pc, #72]	; (8011d70 <SDIO_DataConfig+0x58>)
 8011d26:	687a      	ldr	r2, [r7, #4]
 8011d28:	6812      	ldr	r2, [r2, #0]
 8011d2a:	625a      	str	r2, [r3, #36]	; 0x24

/*---------------------------- SDIO DLEN Configuration -----------------------*/
  /* Set the SDIO DataLength value */
  SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;
 8011d2c:	4b10      	ldr	r3, [pc, #64]	; (8011d70 <SDIO_DataConfig+0x58>)
 8011d2e:	687a      	ldr	r2, [r7, #4]
 8011d30:	6852      	ldr	r2, [r2, #4]
 8011d32:	629a      	str	r2, [r3, #40]	; 0x28

/*---------------------------- SDIO DCTRL Configuration ----------------------*/  
  /* Get the SDIO DCTRL value */
  tmpreg = SDIO->DCTRL;
 8011d34:	4b0e      	ldr	r3, [pc, #56]	; (8011d70 <SDIO_DataConfig+0x58>)
 8011d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d38:	60fb      	str	r3, [r7, #12]
  /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
  tmpreg &= DCTRL_CLEAR_MASK;
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	f023 03f7 	bic.w	r3, r3, #247	; 0xf7
 8011d40:	60fb      	str	r3, [r7, #12]
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	689a      	ldr	r2, [r3, #8]
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	68db      	ldr	r3, [r3, #12]
 8011d4a:	431a      	orrs	r2, r3
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	691b      	ldr	r3, [r3, #16]
 8011d50:	431a      	orrs	r2, r3
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	695b      	ldr	r3, [r3, #20]
 8011d56:	4313      	orrs	r3, r2
  tmpreg &= DCTRL_CLEAR_MASK;
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 8011d58:	68fa      	ldr	r2, [r7, #12]
 8011d5a:	4313      	orrs	r3, r2
 8011d5c:	60fb      	str	r3, [r7, #12]
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;

  /* Write to SDIO DCTRL */
  SDIO->DCTRL = tmpreg;
 8011d5e:	4b04      	ldr	r3, [pc, #16]	; (8011d70 <SDIO_DataConfig+0x58>)
 8011d60:	68fa      	ldr	r2, [r7, #12]
 8011d62:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8011d64:	3714      	adds	r7, #20
 8011d66:	46bd      	mov	sp, r7
 8011d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d6c:	4770      	bx	lr
 8011d6e:	bf00      	nop
 8011d70:	40012c00 	.word	0x40012c00

08011d74 <SDIO_DataStructInit>:
  * @param  SDIO_DataInitStruct: pointer to an SDIO_DataInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 8011d74:	b480      	push	{r7}
 8011d76:	b083      	sub	sp, #12
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	6078      	str	r0, [r7, #4]
  /* SDIO_DataInitStruct members default value */
  SDIO_DataInitStruct->SDIO_DataTimeOut = 0xFFFFFFFF;
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011d82:	601a      	str	r2, [r3, #0]
  SDIO_DataInitStruct->SDIO_DataLength = 0x00;
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	2200      	movs	r2, #0
 8011d88:	605a      	str	r2, [r3, #4]
  SDIO_DataInitStruct->SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	2200      	movs	r2, #0
 8011d8e:	609a      	str	r2, [r3, #8]
  SDIO_DataInitStruct->SDIO_TransferDir = SDIO_TransferDir_ToCard;
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	2200      	movs	r2, #0
 8011d94:	60da      	str	r2, [r3, #12]
  SDIO_DataInitStruct->SDIO_TransferMode = SDIO_TransferMode_Block;  
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	2200      	movs	r2, #0
 8011d9a:	611a      	str	r2, [r3, #16]
  SDIO_DataInitStruct->SDIO_DPSM = SDIO_DPSM_Disable;
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	2200      	movs	r2, #0
 8011da0:	615a      	str	r2, [r3, #20]
}
 8011da2:	370c      	adds	r7, #12
 8011da4:	46bd      	mov	sp, r7
 8011da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011daa:	4770      	bx	lr

08011dac <SDIO_GetDataCounter>:
  * @brief  Returns number of remaining data bytes to be transferred.
  * @param  None
  * @retval Number of remaining data bytes to be transferred
  */
uint32_t SDIO_GetDataCounter(void)
{ 
 8011dac:	b480      	push	{r7}
 8011dae:	af00      	add	r7, sp, #0
  return SDIO->DCOUNT;
 8011db0:	4b03      	ldr	r3, [pc, #12]	; (8011dc0 <SDIO_GetDataCounter+0x14>)
 8011db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8011db4:	4618      	mov	r0, r3
 8011db6:	46bd      	mov	sp, r7
 8011db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dbc:	4770      	bx	lr
 8011dbe:	bf00      	nop
 8011dc0:	40012c00 	.word	0x40012c00

08011dc4 <SDIO_ReadData>:
  * @brief  Read one data word from Rx FIFO.
  * @param  None
  * @retval Data received
  */
uint32_t SDIO_ReadData(void)
{ 
 8011dc4:	b480      	push	{r7}
 8011dc6:	af00      	add	r7, sp, #0
  return SDIO->FIFO;
 8011dc8:	4b03      	ldr	r3, [pc, #12]	; (8011dd8 <SDIO_ReadData+0x14>)
 8011dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011dce:	4618      	mov	r0, r3
 8011dd0:	46bd      	mov	sp, r7
 8011dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd6:	4770      	bx	lr
 8011dd8:	40012c00 	.word	0x40012c00

08011ddc <SDIO_WriteData>:
  * @brief  Write one data word to Tx FIFO.
  * @param  Data: 32-bit data word to write.
  * @retval None
  */
void SDIO_WriteData(uint32_t Data)
{ 
 8011ddc:	b480      	push	{r7}
 8011dde:	b083      	sub	sp, #12
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	6078      	str	r0, [r7, #4]
  SDIO->FIFO = Data;
 8011de4:	4b04      	ldr	r3, [pc, #16]	; (8011df8 <SDIO_WriteData+0x1c>)
 8011de6:	687a      	ldr	r2, [r7, #4]
 8011de8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8011dec:	370c      	adds	r7, #12
 8011dee:	46bd      	mov	sp, r7
 8011df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df4:	4770      	bx	lr
 8011df6:	bf00      	nop
 8011df8:	40012c00 	.word	0x40012c00

08011dfc <SDIO_GetFIFOCount>:
  * @brief  Returns the number of words left to be written to or read from FIFO.	
  * @param  None
  * @retval Remaining number of words.
  */
uint32_t SDIO_GetFIFOCount(void)
{ 
 8011dfc:	b480      	push	{r7}
 8011dfe:	af00      	add	r7, sp, #0
  return SDIO->FIFOCNT;
 8011e00:	4b03      	ldr	r3, [pc, #12]	; (8011e10 <SDIO_GetFIFOCount+0x14>)
 8011e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 8011e04:	4618      	mov	r0, r3
 8011e06:	46bd      	mov	sp, r7
 8011e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e0c:	4770      	bx	lr
 8011e0e:	bf00      	nop
 8011e10:	40012c00 	.word	0x40012c00

08011e14 <SDIO_StartSDIOReadWait>:
  * @param  NewState: new state of the Start SDIO Read Wait operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_StartSDIOReadWait(FunctionalState NewState)
{ 
 8011e14:	b480      	push	{r7}
 8011e16:	b083      	sub	sp, #12
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	4603      	mov	r3, r0
 8011e1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTART_BB = (uint32_t) NewState;
 8011e1e:	4b04      	ldr	r3, [pc, #16]	; (8011e30 <SDIO_StartSDIOReadWait+0x1c>)
 8011e20:	79fa      	ldrb	r2, [r7, #7]
 8011e22:	601a      	str	r2, [r3, #0]
}
 8011e24:	370c      	adds	r7, #12
 8011e26:	46bd      	mov	sp, r7
 8011e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e2c:	4770      	bx	lr
 8011e2e:	bf00      	nop
 8011e30:	422585a0 	.word	0x422585a0

08011e34 <SDIO_StopSDIOReadWait>:
  * @param  NewState: new state of the Stop SDIO Read Wait operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_StopSDIOReadWait(FunctionalState NewState)
{ 
 8011e34:	b480      	push	{r7}
 8011e36:	b083      	sub	sp, #12
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	4603      	mov	r3, r0
 8011e3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTOP_BB = (uint32_t) NewState;
 8011e3e:	4b04      	ldr	r3, [pc, #16]	; (8011e50 <SDIO_StopSDIOReadWait+0x1c>)
 8011e40:	79fa      	ldrb	r2, [r7, #7]
 8011e42:	601a      	str	r2, [r3, #0]
}
 8011e44:	370c      	adds	r7, #12
 8011e46:	46bd      	mov	sp, r7
 8011e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e4c:	4770      	bx	lr
 8011e4e:	bf00      	nop
 8011e50:	422585a4 	.word	0x422585a4

08011e54 <SDIO_SetSDIOReadWaitMode>:
  *            @arg SDIO_ReadWaitMode_CLK: Read Wait control by stopping SDIOCLK
  *            @arg SDIO_ReadWaitMode_DATA2: Read Wait control using SDIO_DATA2
  * @retval None
  */
void SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode)
{
 8011e54:	b480      	push	{r7}
 8011e56:	b083      	sub	sp, #12
 8011e58:	af00      	add	r7, sp, #0
 8011e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_READWAIT_MODE(SDIO_ReadWaitMode));
  
  *(__IO uint32_t *) DCTRL_RWMOD_BB = SDIO_ReadWaitMode;
 8011e5c:	4b03      	ldr	r3, [pc, #12]	; (8011e6c <SDIO_SetSDIOReadWaitMode+0x18>)
 8011e5e:	687a      	ldr	r2, [r7, #4]
 8011e60:	601a      	str	r2, [r3, #0]
}
 8011e62:	370c      	adds	r7, #12
 8011e64:	46bd      	mov	sp, r7
 8011e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e6a:	4770      	bx	lr
 8011e6c:	422585a8 	.word	0x422585a8

08011e70 <SDIO_SetSDIOOperation>:
  * @param  NewState: new state of SDIO specific operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SetSDIOOperation(FunctionalState NewState)
{ 
 8011e70:	b480      	push	{r7}
 8011e72:	b083      	sub	sp, #12
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	4603      	mov	r3, r0
 8011e78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_SDIOEN_BB = (uint32_t)NewState;
 8011e7a:	4b04      	ldr	r3, [pc, #16]	; (8011e8c <SDIO_SetSDIOOperation+0x1c>)
 8011e7c:	79fa      	ldrb	r2, [r7, #7]
 8011e7e:	601a      	str	r2, [r3, #0]
}
 8011e80:	370c      	adds	r7, #12
 8011e82:	46bd      	mov	sp, r7
 8011e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e88:	4770      	bx	lr
 8011e8a:	bf00      	nop
 8011e8c:	422585ac 	.word	0x422585ac

08011e90 <SDIO_SendSDIOSuspendCmd>:
  * @param  NewState: new state of the SD I/O Mode suspend command.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SendSDIOSuspendCmd(FunctionalState NewState)
{ 
 8011e90:	b480      	push	{r7}
 8011e92:	b083      	sub	sp, #12
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	4603      	mov	r3, r0
 8011e98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_SDIOSUSPEND_BB = (uint32_t)NewState;
 8011e9a:	4b04      	ldr	r3, [pc, #16]	; (8011eac <SDIO_SendSDIOSuspendCmd+0x1c>)
 8011e9c:	79fa      	ldrb	r2, [r7, #7]
 8011e9e:	601a      	str	r2, [r3, #0]
}
 8011ea0:	370c      	adds	r7, #12
 8011ea2:	46bd      	mov	sp, r7
 8011ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea8:	4770      	bx	lr
 8011eaa:	bf00      	nop
 8011eac:	422581ac 	.word	0x422581ac

08011eb0 <SDIO_CommandCompletionCmd>:
  * @param  NewState: new state of command completion signal. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_CommandCompletionCmd(FunctionalState NewState)
{ 
 8011eb0:	b480      	push	{r7}
 8011eb2:	b083      	sub	sp, #12
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	4603      	mov	r3, r0
 8011eb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ENCMDCOMPL_BB = (uint32_t)NewState;
 8011eba:	4b04      	ldr	r3, [pc, #16]	; (8011ecc <SDIO_CommandCompletionCmd+0x1c>)
 8011ebc:	79fa      	ldrb	r2, [r7, #7]
 8011ebe:	601a      	str	r2, [r3, #0]
}
 8011ec0:	370c      	adds	r7, #12
 8011ec2:	46bd      	mov	sp, r7
 8011ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec8:	4770      	bx	lr
 8011eca:	bf00      	nop
 8011ecc:	422581b0 	.word	0x422581b0

08011ed0 <SDIO_CEATAITCmd>:
  * @param  NewState: new state of CE-ATA interrupt. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_CEATAITCmd(FunctionalState NewState)
{ 
 8011ed0:	b480      	push	{r7}
 8011ed2:	b083      	sub	sp, #12
 8011ed4:	af00      	add	r7, sp, #0
 8011ed6:	4603      	mov	r3, r0
 8011ed8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_NIEN_BB = (uint32_t)((~((uint32_t)NewState)) & ((uint32_t)0x1));
 8011eda:	4b07      	ldr	r3, [pc, #28]	; (8011ef8 <SDIO_CEATAITCmd+0x28>)
 8011edc:	79fa      	ldrb	r2, [r7, #7]
 8011ede:	f002 0201 	and.w	r2, r2, #1
 8011ee2:	2a00      	cmp	r2, #0
 8011ee4:	bf14      	ite	ne
 8011ee6:	2200      	movne	r2, #0
 8011ee8:	2201      	moveq	r2, #1
 8011eea:	b2d2      	uxtb	r2, r2
 8011eec:	601a      	str	r2, [r3, #0]
}
 8011eee:	370c      	adds	r7, #12
 8011ef0:	46bd      	mov	sp, r7
 8011ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef6:	4770      	bx	lr
 8011ef8:	422581b4 	.word	0x422581b4

08011efc <SDIO_SendCEATACmd>:
  * @param  NewState: new state of CE-ATA command. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SendCEATACmd(FunctionalState NewState)
{ 
 8011efc:	b480      	push	{r7}
 8011efe:	b083      	sub	sp, #12
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	4603      	mov	r3, r0
 8011f04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ATACMD_BB = (uint32_t)NewState;
 8011f06:	4b04      	ldr	r3, [pc, #16]	; (8011f18 <SDIO_SendCEATACmd+0x1c>)
 8011f08:	79fa      	ldrb	r2, [r7, #7]
 8011f0a:	601a      	str	r2, [r3, #0]
}
 8011f0c:	370c      	adds	r7, #12
 8011f0e:	46bd      	mov	sp, r7
 8011f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f14:	4770      	bx	lr
 8011f16:	bf00      	nop
 8011f18:	422581b8 	.word	0x422581b8

08011f1c <SDIO_DMACmd>:
  * @param  NewState: new state of the selected SDIO DMA request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_DMACmd(FunctionalState NewState)
{
 8011f1c:	b480      	push	{r7}
 8011f1e:	b083      	sub	sp, #12
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	4603      	mov	r3, r0
 8011f24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_DMAEN_BB = (uint32_t)NewState;
 8011f26:	4b04      	ldr	r3, [pc, #16]	; (8011f38 <SDIO_DMACmd+0x1c>)
 8011f28:	79fa      	ldrb	r2, [r7, #7]
 8011f2a:	601a      	str	r2, [r3, #0]
}
 8011f2c:	370c      	adds	r7, #12
 8011f2e:	46bd      	mov	sp, r7
 8011f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f34:	4770      	bx	lr
 8011f36:	bf00      	nop
 8011f38:	4225858c 	.word	0x4225858c

08011f3c <SDIO_ITConfig>:
  * @param  NewState: new state of the specified SDIO interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None 
  */
void SDIO_ITConfig(uint32_t SDIO_IT, FunctionalState NewState)
{
 8011f3c:	b480      	push	{r7}
 8011f3e:	b083      	sub	sp, #12
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	6078      	str	r0, [r7, #4]
 8011f44:	460b      	mov	r3, r1
 8011f46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SDIO_IT(SDIO_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8011f48:	78fb      	ldrb	r3, [r7, #3]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d006      	beq.n	8011f5c <SDIO_ITConfig+0x20>
  {
    /* Enable the SDIO interrupts */
    SDIO->MASK |= SDIO_IT;
 8011f4e:	4b09      	ldr	r3, [pc, #36]	; (8011f74 <SDIO_ITConfig+0x38>)
 8011f50:	4a08      	ldr	r2, [pc, #32]	; (8011f74 <SDIO_ITConfig+0x38>)
 8011f52:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8011f54:	687a      	ldr	r2, [r7, #4]
 8011f56:	430a      	orrs	r2, r1
 8011f58:	63da      	str	r2, [r3, #60]	; 0x3c
 8011f5a:	e006      	b.n	8011f6a <SDIO_ITConfig+0x2e>
  }
  else
  {
    /* Disable the SDIO interrupts */
    SDIO->MASK &= ~SDIO_IT;
 8011f5c:	4b05      	ldr	r3, [pc, #20]	; (8011f74 <SDIO_ITConfig+0x38>)
 8011f5e:	4a05      	ldr	r2, [pc, #20]	; (8011f74 <SDIO_ITConfig+0x38>)
 8011f60:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8011f62:	687a      	ldr	r2, [r7, #4]
 8011f64:	43d2      	mvns	r2, r2
 8011f66:	400a      	ands	r2, r1
 8011f68:	63da      	str	r2, [r3, #60]	; 0x3c
  } 
}
 8011f6a:	370c      	adds	r7, #12
 8011f6c:	46bd      	mov	sp, r7
 8011f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f72:	4770      	bx	lr
 8011f74:	40012c00 	.word	0x40012c00

08011f78 <SDIO_GetFlagStatus>:
  *            @arg SDIO_FLAG_SDIOIT:   SD I/O interrupt received
  *            @arg SDIO_FLAG_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval The new state of SDIO_FLAG (SET or RESET).
  */
FlagStatus SDIO_GetFlagStatus(uint32_t SDIO_FLAG)
{ 
 8011f78:	b480      	push	{r7}
 8011f7a:	b085      	sub	sp, #20
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8011f80:	2300      	movs	r3, #0
 8011f82:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_SDIO_FLAG(SDIO_FLAG));
  
  if ((SDIO->STA & SDIO_FLAG) != (uint32_t)RESET)
 8011f84:	4b08      	ldr	r3, [pc, #32]	; (8011fa8 <SDIO_GetFlagStatus+0x30>)
 8011f86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	4013      	ands	r3, r2
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d002      	beq.n	8011f96 <SDIO_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 8011f90:	2301      	movs	r3, #1
 8011f92:	73fb      	strb	r3, [r7, #15]
 8011f94:	e001      	b.n	8011f9a <SDIO_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8011f96:	2300      	movs	r3, #0
 8011f98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8011f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	3714      	adds	r7, #20
 8011fa0:	46bd      	mov	sp, r7
 8011fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa6:	4770      	bx	lr
 8011fa8:	40012c00 	.word	0x40012c00

08011fac <SDIO_ClearFlag>:
  *            @arg SDIO_FLAG_SDIOIT:   SD I/O interrupt received
  *            @arg SDIO_FLAG_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval None
  */
void SDIO_ClearFlag(uint32_t SDIO_FLAG)
{ 
 8011fac:	b480      	push	{r7}
 8011fae:	b083      	sub	sp, #12
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_FLAG(SDIO_FLAG));
   
  SDIO->ICR = SDIO_FLAG;
 8011fb4:	4b03      	ldr	r3, [pc, #12]	; (8011fc4 <SDIO_ClearFlag+0x18>)
 8011fb6:	687a      	ldr	r2, [r7, #4]
 8011fb8:	639a      	str	r2, [r3, #56]	; 0x38
}
 8011fba:	370c      	adds	r7, #12
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc2:	4770      	bx	lr
 8011fc4:	40012c00 	.word	0x40012c00

08011fc8 <SDIO_GetITStatus>:
  *            @arg SDIO_IT_SDIOIT:   SD I/O interrupt received interrupt
  *            @arg SDIO_IT_CEATAEND: CE-ATA command completion signal received for CMD61 interrupt
  * @retval The new state of SDIO_IT (SET or RESET).
  */
ITStatus SDIO_GetITStatus(uint32_t SDIO_IT)
{ 
 8011fc8:	b480      	push	{r7}
 8011fca:	b085      	sub	sp, #20
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8011fd0:	2300      	movs	r3, #0
 8011fd2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_SDIO_GET_IT(SDIO_IT));
  if ((SDIO->STA & SDIO_IT) != (uint32_t)RESET)  
 8011fd4:	4b08      	ldr	r3, [pc, #32]	; (8011ff8 <SDIO_GetITStatus+0x30>)
 8011fd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	4013      	ands	r3, r2
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d002      	beq.n	8011fe6 <SDIO_GetITStatus+0x1e>
  {
    bitstatus = SET;
 8011fe0:	2301      	movs	r3, #1
 8011fe2:	73fb      	strb	r3, [r7, #15]
 8011fe4:	e001      	b.n	8011fea <SDIO_GetITStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8011fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fec:	4618      	mov	r0, r3
 8011fee:	3714      	adds	r7, #20
 8011ff0:	46bd      	mov	sp, r7
 8011ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff6:	4770      	bx	lr
 8011ff8:	40012c00 	.word	0x40012c00

08011ffc <SDIO_ClearITPendingBit>:
  *            @arg SDIO_IT_SDIOIT:   SD I/O interrupt received interrupt
  *            @arg SDIO_IT_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval None
  */
void SDIO_ClearITPendingBit(uint32_t SDIO_IT)
{ 
 8011ffc:	b480      	push	{r7}
 8011ffe:	b083      	sub	sp, #12
 8012000:	af00      	add	r7, sp, #0
 8012002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_IT(SDIO_IT));
   
  SDIO->ICR = SDIO_IT;
 8012004:	4b03      	ldr	r3, [pc, #12]	; (8012014 <SDIO_ClearITPendingBit+0x18>)
 8012006:	687a      	ldr	r2, [r7, #4]
 8012008:	639a      	str	r2, [r3, #56]	; 0x38
}
 801200a:	370c      	adds	r7, #12
 801200c:	46bd      	mov	sp, r7
 801200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012012:	4770      	bx	lr
 8012014:	40012c00 	.word	0x40012c00

08012018 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8012018:	b580      	push	{r7, lr}
 801201a:	b082      	sub	sp, #8
 801201c:	af00      	add	r7, sp, #0
 801201e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8012020:	687a      	ldr	r2, [r7, #4]
 8012022:	4b2d      	ldr	r3, [pc, #180]	; (80120d8 <SPI_I2S_DeInit+0xc0>)
 8012024:	429a      	cmp	r2, r3
 8012026:	d10a      	bne.n	801203e <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8012028:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801202c:	2101      	movs	r1, #1
 801202e:	f7fd fe7b 	bl	800fd28 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8012032:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8012036:	2100      	movs	r1, #0
 8012038:	f7fd fe76 	bl	800fd28 <RCC_APB2PeriphResetCmd>
 801203c:	e049      	b.n	80120d2 <SPI_I2S_DeInit+0xba>
  }
  else if (SPIx == SPI2)
 801203e:	687a      	ldr	r2, [r7, #4]
 8012040:	4b26      	ldr	r3, [pc, #152]	; (80120dc <SPI_I2S_DeInit+0xc4>)
 8012042:	429a      	cmp	r2, r3
 8012044:	d10a      	bne.n	801205c <SPI_I2S_DeInit+0x44>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8012046:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801204a:	2101      	movs	r1, #1
 801204c:	f7fd fe4e 	bl	800fcec <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8012050:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8012054:	2100      	movs	r1, #0
 8012056:	f7fd fe49 	bl	800fcec <RCC_APB1PeriphResetCmd>
 801205a:	e03a      	b.n	80120d2 <SPI_I2S_DeInit+0xba>
  }
  else if (SPIx == SPI3)
 801205c:	687a      	ldr	r2, [r7, #4]
 801205e:	4b20      	ldr	r3, [pc, #128]	; (80120e0 <SPI_I2S_DeInit+0xc8>)
 8012060:	429a      	cmp	r2, r3
 8012062:	d10a      	bne.n	801207a <SPI_I2S_DeInit+0x62>
  {
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8012064:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8012068:	2101      	movs	r1, #1
 801206a:	f7fd fe3f 	bl	800fcec <RCC_APB1PeriphResetCmd>
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 801206e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8012072:	2100      	movs	r1, #0
 8012074:	f7fd fe3a 	bl	800fcec <RCC_APB1PeriphResetCmd>
 8012078:	e02b      	b.n	80120d2 <SPI_I2S_DeInit+0xba>
  }
  else if (SPIx == SPI4)
 801207a:	687a      	ldr	r2, [r7, #4]
 801207c:	4b19      	ldr	r3, [pc, #100]	; (80120e4 <SPI_I2S_DeInit+0xcc>)
 801207e:	429a      	cmp	r2, r3
 8012080:	d10a      	bne.n	8012098 <SPI_I2S_DeInit+0x80>
  {
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 8012082:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8012086:	2101      	movs	r1, #1
 8012088:	f7fd fe4e 	bl	800fd28 <RCC_APB2PeriphResetCmd>
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 801208c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8012090:	2100      	movs	r1, #0
 8012092:	f7fd fe49 	bl	800fd28 <RCC_APB2PeriphResetCmd>
 8012096:	e01c      	b.n	80120d2 <SPI_I2S_DeInit+0xba>
  }
  else if (SPIx == SPI5)
 8012098:	687a      	ldr	r2, [r7, #4]
 801209a:	4b13      	ldr	r3, [pc, #76]	; (80120e8 <SPI_I2S_DeInit+0xd0>)
 801209c:	429a      	cmp	r2, r3
 801209e:	d10a      	bne.n	80120b6 <SPI_I2S_DeInit+0x9e>
  {
    /* Enable SPI5 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 80120a0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80120a4:	2101      	movs	r1, #1
 80120a6:	f7fd fe3f 	bl	800fd28 <RCC_APB2PeriphResetCmd>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 80120aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80120ae:	2100      	movs	r1, #0
 80120b0:	f7fd fe3a 	bl	800fd28 <RCC_APB2PeriphResetCmd>
 80120b4:	e00d      	b.n	80120d2 <SPI_I2S_DeInit+0xba>
  }
  else 
  {
    if (SPIx == SPI6)
 80120b6:	687a      	ldr	r2, [r7, #4]
 80120b8:	4b0c      	ldr	r3, [pc, #48]	; (80120ec <SPI_I2S_DeInit+0xd4>)
 80120ba:	429a      	cmp	r2, r3
 80120bc:	d109      	bne.n	80120d2 <SPI_I2S_DeInit+0xba>
    {
      /* Enable SPI6 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 80120be:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80120c2:	2101      	movs	r1, #1
 80120c4:	f7fd fe30 	bl	800fd28 <RCC_APB2PeriphResetCmd>
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 80120c8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80120cc:	2100      	movs	r1, #0
 80120ce:	f7fd fe2b 	bl	800fd28 <RCC_APB2PeriphResetCmd>
    }
  }
}
 80120d2:	3708      	adds	r7, #8
 80120d4:	46bd      	mov	sp, r7
 80120d6:	bd80      	pop	{r7, pc}
 80120d8:	40013000 	.word	0x40013000
 80120dc:	40003800 	.word	0x40003800
 80120e0:	40003c00 	.word	0x40003c00
 80120e4:	40013400 	.word	0x40013400
 80120e8:	40015000 	.word	0x40015000
 80120ec:	40015400 	.word	0x40015400

080120f0 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 80120f0:	b480      	push	{r7}
 80120f2:	b085      	sub	sp, #20
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	6078      	str	r0, [r7, #4]
 80120f8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80120fa:	2300      	movs	r3, #0
 80120fc:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	881b      	ldrh	r3, [r3, #0]
 8012102:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8012104:	89fb      	ldrh	r3, [r7, #14]
 8012106:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 801210a:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 801210c:	683b      	ldr	r3, [r7, #0]
 801210e:	881a      	ldrh	r2, [r3, #0]
 8012110:	683b      	ldr	r3, [r7, #0]
 8012112:	885b      	ldrh	r3, [r3, #2]
 8012114:	4313      	orrs	r3, r2
 8012116:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8012118:	683b      	ldr	r3, [r7, #0]
 801211a:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 801211c:	4313      	orrs	r3, r2
 801211e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8012120:	683b      	ldr	r3, [r7, #0]
 8012122:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8012124:	4313      	orrs	r3, r2
 8012126:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8012128:	683b      	ldr	r3, [r7, #0]
 801212a:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 801212c:	4313      	orrs	r3, r2
 801212e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8012130:	683b      	ldr	r3, [r7, #0]
 8012132:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8012134:	4313      	orrs	r3, r2
 8012136:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8012138:	683b      	ldr	r3, [r7, #0]
 801213a:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 801213c:	4313      	orrs	r3, r2
 801213e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8012140:	683b      	ldr	r3, [r7, #0]
 8012142:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8012144:	4313      	orrs	r3, r2
 8012146:	b29a      	uxth	r2, r3
 8012148:	89fb      	ldrh	r3, [r7, #14]
 801214a:	4313      	orrs	r3, r2
 801214c:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	89fa      	ldrh	r2, [r7, #14]
 8012152:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	8b9b      	ldrh	r3, [r3, #28]
 8012158:	b29b      	uxth	r3, r3
 801215a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801215e:	b29a      	uxth	r2, r3
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8012164:	683b      	ldr	r3, [r7, #0]
 8012166:	8a1a      	ldrh	r2, [r3, #16]
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	821a      	strh	r2, [r3, #16]
}
 801216c:	3714      	adds	r7, #20
 801216e:	46bd      	mov	sp, r7
 8012170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012174:	4770      	bx	lr
 8012176:	bf00      	nop

08012178 <I2S_Init>:
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8012178:	b480      	push	{r7}
 801217a:	b08b      	sub	sp, #44	; 0x2c
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]
 8012180:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 8012182:	2300      	movs	r3, #0
 8012184:	837b      	strh	r3, [r7, #26]
 8012186:	2302      	movs	r3, #2
 8012188:	84fb      	strh	r3, [r7, #38]	; 0x26
 801218a:	2300      	movs	r3, #0
 801218c:	84bb      	strh	r3, [r7, #36]	; 0x24
 801218e:	2301      	movs	r3, #1
 8012190:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t tmp = 0, i2sclk = 0;
 8012192:	2300      	movs	r3, #0
 8012194:	61fb      	str	r3, [r7, #28]
 8012196:	2300      	movs	r3, #0
 8012198:	617b      	str	r3, [r7, #20]
#ifndef I2S_EXTERNAL_CLOCK_VAL
  uint32_t pllm = 0, plln = 0, pllr = 0;
 801219a:	2300      	movs	r3, #0
 801219c:	613b      	str	r3, [r7, #16]
 801219e:	2300      	movs	r3, #0
 80121a0:	60fb      	str	r3, [r7, #12]
 80121a2:	2300      	movs	r3, #0
 80121a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	8b9b      	ldrh	r3, [r3, #28]
 80121aa:	b29b      	uxth	r3, r3
 80121ac:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80121b0:	f023 030f 	bic.w	r3, r3, #15
 80121b4:	b29a      	uxth	r2, r3
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	839a      	strh	r2, [r3, #28]
  SPIx->I2SPR = 0x0002;
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	2202      	movs	r2, #2
 80121be:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	8b9b      	ldrh	r3, [r3, #28]
 80121c4:	837b      	strh	r3, [r7, #26]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 80121c6:	683b      	ldr	r3, [r7, #0]
 80121c8:	689b      	ldr	r3, [r3, #8]
 80121ca:	2b02      	cmp	r3, #2
 80121cc:	d104      	bne.n	80121d8 <I2S_Init+0x60>
  {
    i2sodd = (uint16_t)0;
 80121ce:	2300      	movs	r3, #0
 80121d0:	84bb      	strh	r3, [r7, #36]	; 0x24
    i2sdiv = (uint16_t)2;   
 80121d2:	2302      	movs	r3, #2
 80121d4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80121d6:	e071      	b.n	80122bc <I2S_Init+0x144>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 80121d8:	683b      	ldr	r3, [r7, #0]
 80121da:	889b      	ldrh	r3, [r3, #4]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d102      	bne.n	80121e6 <I2S_Init+0x6e>
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 80121e0:	2301      	movs	r3, #1
 80121e2:	847b      	strh	r3, [r7, #34]	; 0x22
 80121e4:	e001      	b.n	80121ea <I2S_Init+0x72>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 80121e6:	2302      	movs	r3, #2
 80121e8:	847b      	strh	r3, [r7, #34]	; 0x22
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 80121ea:	4b4c      	ldr	r3, [pc, #304]	; (801231c <I2S_Init+0x1a4>)
 80121ec:	689b      	ldr	r3, [r3, #8]
 80121ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d005      	beq.n	8012202 <I2S_Init+0x8a>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 80121f6:	4b49      	ldr	r3, [pc, #292]	; (801231c <I2S_Init+0x1a4>)
 80121f8:	4a48      	ldr	r2, [pc, #288]	; (801231c <I2S_Init+0x1a4>)
 80121fa:	6892      	ldr	r2, [r2, #8]
 80121fc:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8012200:	609a      	str	r2, [r3, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8012202:	4b46      	ldr	r3, [pc, #280]	; (801231c <I2S_Init+0x1a4>)
 8012204:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8012208:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801220c:	4013      	ands	r3, r2
 801220e:	099b      	lsrs	r3, r3, #6
 8012210:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012214:	60fb      	str	r3, [r7, #12]
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8012216:	4b41      	ldr	r3, [pc, #260]	; (801231c <I2S_Init+0x1a4>)
 8012218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801221c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8012220:	0f1b      	lsrs	r3, r3, #28
 8012222:	f003 0307 	and.w	r3, r3, #7
 8012226:	60bb      	str	r3, [r7, #8]
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8012228:	4b3c      	ldr	r3, [pc, #240]	; (801231c <I2S_Init+0x1a4>)
 801222a:	685b      	ldr	r3, [r3, #4]
 801222c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012230:	613b      	str	r3, [r7, #16]

    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8012232:	4a3b      	ldr	r2, [pc, #236]	; (8012320 <I2S_Init+0x1a8>)
 8012234:	693b      	ldr	r3, [r7, #16]
 8012236:	fbb2 f3f3 	udiv	r3, r2, r3
 801223a:	68fa      	ldr	r2, [r7, #12]
 801223c:	fb02 f203 	mul.w	r2, r2, r3
 8012240:	68bb      	ldr	r3, [r7, #8]
 8012242:	fbb2 f3f3 	udiv	r3, r2, r3
 8012246:	617b      	str	r3, [r7, #20]
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8012248:	683b      	ldr	r3, [r7, #0]
 801224a:	88db      	ldrh	r3, [r3, #6]
 801224c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012250:	d10f      	bne.n	8012272 <I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8012252:	697b      	ldr	r3, [r7, #20]
 8012254:	0a1a      	lsrs	r2, r3, #8
 8012256:	4613      	mov	r3, r2
 8012258:	009b      	lsls	r3, r3, #2
 801225a:	4413      	add	r3, r2
 801225c:	005b      	lsls	r3, r3, #1
 801225e:	461a      	mov	r2, r3
 8012260:	683b      	ldr	r3, [r7, #0]
 8012262:	689b      	ldr	r3, [r3, #8]
 8012264:	fbb2 f3f3 	udiv	r3, r2, r3
 8012268:	b29b      	uxth	r3, r3
 801226a:	3305      	adds	r3, #5
 801226c:	b29b      	uxth	r3, r3
 801226e:	61fb      	str	r3, [r7, #28]
 8012270:	e011      	b.n	8012296 <I2S_Init+0x11e>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8012272:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012274:	015b      	lsls	r3, r3, #5
 8012276:	697a      	ldr	r2, [r7, #20]
 8012278:	fbb2 f2f3 	udiv	r2, r2, r3
 801227c:	4613      	mov	r3, r2
 801227e:	009b      	lsls	r3, r3, #2
 8012280:	4413      	add	r3, r2
 8012282:	005b      	lsls	r3, r3, #1
 8012284:	461a      	mov	r2, r3
 8012286:	683b      	ldr	r3, [r7, #0]
 8012288:	689b      	ldr	r3, [r3, #8]
 801228a:	fbb2 f3f3 	udiv	r3, r2, r3
 801228e:	b29b      	uxth	r3, r3
 8012290:	3305      	adds	r3, #5
 8012292:	b29b      	uxth	r3, r3
 8012294:	61fb      	str	r3, [r7, #28]
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8012296:	69fa      	ldr	r2, [r7, #28]
 8012298:	4b22      	ldr	r3, [pc, #136]	; (8012324 <I2S_Init+0x1ac>)
 801229a:	fba3 1302 	umull	r1, r3, r3, r2
 801229e:	08db      	lsrs	r3, r3, #3
 80122a0:	61fb      	str	r3, [r7, #28]
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 80122a2:	69fb      	ldr	r3, [r7, #28]
 80122a4:	b29b      	uxth	r3, r3
 80122a6:	f003 0301 	and.w	r3, r3, #1
 80122aa:	84bb      	strh	r3, [r7, #36]	; 0x24
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 80122ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80122ae:	69fa      	ldr	r2, [r7, #28]
 80122b0:	1ad3      	subs	r3, r2, r3
 80122b2:	085b      	lsrs	r3, r3, #1
 80122b4:	84fb      	strh	r3, [r7, #38]	; 0x26
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 80122b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80122b8:	021b      	lsls	r3, r3, #8
 80122ba:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 80122bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80122be:	2b01      	cmp	r3, #1
 80122c0:	d902      	bls.n	80122c8 <I2S_Init+0x150>
 80122c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80122c4:	2bff      	cmp	r3, #255	; 0xff
 80122c6:	d903      	bls.n	80122d0 <I2S_Init+0x158>
  {
    /* Set the default values */
    i2sdiv = 2;
 80122c8:	2302      	movs	r3, #2
 80122ca:	84fb      	strh	r3, [r7, #38]	; 0x26
    i2sodd = 0;
 80122cc:	2300      	movs	r3, #0
 80122ce:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 80122d0:	683b      	ldr	r3, [r7, #0]
 80122d2:	88da      	ldrh	r2, [r3, #6]
 80122d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80122d6:	4313      	orrs	r3, r2
 80122d8:	b29a      	uxth	r2, r3
 80122da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80122dc:	4313      	orrs	r3, r2
 80122de:	b29a      	uxth	r2, r3
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	841a      	strh	r2, [r3, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 80122e4:	683b      	ldr	r3, [r7, #0]
 80122e6:	881a      	ldrh	r2, [r3, #0]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80122e8:	683b      	ldr	r3, [r7, #0]
 80122ea:	8859      	ldrh	r1, [r3, #2]
 80122ec:	683b      	ldr	r3, [r7, #0]
 80122ee:	8898      	ldrh	r0, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 80122f0:	683b      	ldr	r3, [r7, #0]
 80122f2:	899b      	ldrh	r3, [r3, #12]
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80122f4:	4303      	orrs	r3, r0
 80122f6:	b29b      	uxth	r3, r3
 80122f8:	430b      	orrs	r3, r1
 80122fa:	b29b      	uxth	r3, r3

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 80122fc:	4313      	orrs	r3, r2
 80122fe:	b29a      	uxth	r2, r3
 8012300:	8b7b      	ldrh	r3, [r7, #26]
 8012302:	4313      	orrs	r3, r2
 8012304:	b29b      	uxth	r3, r3
 8012306:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801230a:	837b      	strh	r3, [r7, #26]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	8b7a      	ldrh	r2, [r7, #26]
 8012310:	839a      	strh	r2, [r3, #28]
}
 8012312:	372c      	adds	r7, #44	; 0x2c
 8012314:	46bd      	mov	sp, r7
 8012316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801231a:	4770      	bx	lr
 801231c:	40023800 	.word	0x40023800
 8012320:	007a1200 	.word	0x007a1200
 8012324:	cccccccd 	.word	0xcccccccd

08012328 <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 8012328:	b480      	push	{r7}
 801232a:	b083      	sub	sp, #12
 801232c:	af00      	add	r7, sp, #0
 801232e:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	2200      	movs	r2, #0
 8012334:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	2200      	movs	r2, #0
 801233a:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	2200      	movs	r2, #0
 8012340:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	2200      	movs	r2, #0
 8012346:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	2200      	movs	r2, #0
 801234c:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	2200      	movs	r2, #0
 8012352:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	2200      	movs	r2, #0
 8012358:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	2200      	movs	r2, #0
 801235e:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	2207      	movs	r2, #7
 8012364:	821a      	strh	r2, [r3, #16]
}
 8012366:	370c      	adds	r7, #12
 8012368:	46bd      	mov	sp, r7
 801236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801236e:	4770      	bx	lr

08012370 <I2S_StructInit>:
  * @brief  Fills each I2S_InitStruct member with its default value.
  * @param  I2S_InitStruct: pointer to a I2S_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
 8012370:	b480      	push	{r7}
 8012372:	b083      	sub	sp, #12
 8012374:	af00      	add	r7, sp, #0
 8012376:	6078      	str	r0, [r7, #4]
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	2200      	movs	r2, #0
 801237c:	801a      	strh	r2, [r3, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	2200      	movs	r2, #0
 8012382:	805a      	strh	r2, [r3, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	2200      	movs	r2, #0
 8012388:	809a      	strh	r2, [r3, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	2200      	movs	r2, #0
 801238e:	80da      	strh	r2, [r3, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	2202      	movs	r2, #2
 8012394:	609a      	str	r2, [r3, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	2200      	movs	r2, #0
 801239a:	819a      	strh	r2, [r3, #12]
}
 801239c:	370c      	adds	r7, #12
 801239e:	46bd      	mov	sp, r7
 80123a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a4:	4770      	bx	lr
 80123a6:	bf00      	nop

080123a8 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80123a8:	b480      	push	{r7}
 80123aa:	b083      	sub	sp, #12
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	6078      	str	r0, [r7, #4]
 80123b0:	460b      	mov	r3, r1
 80123b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80123b4:	78fb      	ldrb	r3, [r7, #3]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d008      	beq.n	80123cc <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	881b      	ldrh	r3, [r3, #0]
 80123be:	b29b      	uxth	r3, r3
 80123c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80123c4:	b29a      	uxth	r2, r3
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	801a      	strh	r2, [r3, #0]
 80123ca:	e007      	b.n	80123dc <SPI_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	881b      	ldrh	r3, [r3, #0]
 80123d0:	b29b      	uxth	r3, r3
 80123d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80123d6:	b29a      	uxth	r2, r3
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	801a      	strh	r2, [r3, #0]
  }
}
 80123dc:	370c      	adds	r7, #12
 80123de:	46bd      	mov	sp, r7
 80123e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e4:	4770      	bx	lr
 80123e6:	bf00      	nop

080123e8 <I2S_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80123e8:	b480      	push	{r7}
 80123ea:	b083      	sub	sp, #12
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	6078      	str	r0, [r7, #4]
 80123f0:	460b      	mov	r3, r1
 80123f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80123f4:	78fb      	ldrb	r3, [r7, #3]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d008      	beq.n	801240c <I2S_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	8b9b      	ldrh	r3, [r3, #28]
 80123fe:	b29b      	uxth	r3, r3
 8012400:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8012404:	b29a      	uxth	r2, r3
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	839a      	strh	r2, [r3, #28]
 801240a:	e007      	b.n	801241c <I2S_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	8b9b      	ldrh	r3, [r3, #28]
 8012410:	b29b      	uxth	r3, r3
 8012412:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012416:	b29a      	uxth	r2, r3
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	839a      	strh	r2, [r3, #28]
  }
}
 801241c:	370c      	adds	r7, #12
 801241e:	46bd      	mov	sp, r7
 8012420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012424:	4770      	bx	lr
 8012426:	bf00      	nop

08012428 <SPI_DataSizeConfig>:
  *            @arg SPI_DataSize_16b: Set data frame format to 16bit
  *            @arg SPI_DataSize_8b: Set data frame format to 8bit
  * @retval None
  */
void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
{
 8012428:	b480      	push	{r7}
 801242a:	b083      	sub	sp, #12
 801242c:	af00      	add	r7, sp, #0
 801242e:	6078      	str	r0, [r7, #4]
 8012430:	460b      	mov	r3, r1
 8012432:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	881b      	ldrh	r3, [r3, #0]
 8012438:	b29b      	uxth	r3, r3
 801243a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801243e:	b29a      	uxth	r2, r3
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	801a      	strh	r2, [r3, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	881b      	ldrh	r3, [r3, #0]
 8012448:	b29a      	uxth	r2, r3
 801244a:	887b      	ldrh	r3, [r7, #2]
 801244c:	4313      	orrs	r3, r2
 801244e:	b29a      	uxth	r2, r3
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	801a      	strh	r2, [r3, #0]
}
 8012454:	370c      	adds	r7, #12
 8012456:	46bd      	mov	sp, r7
 8012458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801245c:	4770      	bx	lr
 801245e:	bf00      	nop

08012460 <SPI_BiDirectionalLineConfig>:
  *            @arg SPI_Direction_Tx: Selects Tx transmission direction
  *            @arg SPI_Direction_Rx: Selects Rx receive direction
  * @retval None
  */
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
 8012460:	b480      	push	{r7}
 8012462:	b083      	sub	sp, #12
 8012464:	af00      	add	r7, sp, #0
 8012466:	6078      	str	r0, [r7, #4]
 8012468:	460b      	mov	r3, r1
 801246a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 801246c:	887b      	ldrh	r3, [r7, #2]
 801246e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012472:	d108      	bne.n	8012486 <SPI_BiDirectionalLineConfig+0x26>
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	881b      	ldrh	r3, [r3, #0]
 8012478:	b29b      	uxth	r3, r3
 801247a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801247e:	b29a      	uxth	r2, r3
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	801a      	strh	r2, [r3, #0]
 8012484:	e007      	b.n	8012496 <SPI_BiDirectionalLineConfig+0x36>
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	881b      	ldrh	r3, [r3, #0]
 801248a:	b29b      	uxth	r3, r3
 801248c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012490:	b29a      	uxth	r2, r3
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	801a      	strh	r2, [r3, #0]
  }
}
 8012496:	370c      	adds	r7, #12
 8012498:	46bd      	mov	sp, r7
 801249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801249e:	4770      	bx	lr

080124a0 <SPI_NSSInternalSoftwareConfig>:
  *            @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
  *            @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
  * @retval None
  */
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
 80124a0:	b480      	push	{r7}
 80124a2:	b083      	sub	sp, #12
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	6078      	str	r0, [r7, #4]
 80124a8:	460b      	mov	r3, r1
 80124aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 80124ac:	887a      	ldrh	r2, [r7, #2]
 80124ae:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80124b2:	429a      	cmp	r2, r3
 80124b4:	d008      	beq.n	80124c8 <SPI_NSSInternalSoftwareConfig+0x28>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	881b      	ldrh	r3, [r3, #0]
 80124ba:	b29b      	uxth	r3, r3
 80124bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80124c0:	b29a      	uxth	r2, r3
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	801a      	strh	r2, [r3, #0]
 80124c6:	e007      	b.n	80124d8 <SPI_NSSInternalSoftwareConfig+0x38>
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	881b      	ldrh	r3, [r3, #0]
 80124cc:	b29b      	uxth	r3, r3
 80124ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80124d2:	b29a      	uxth	r2, r3
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	801a      	strh	r2, [r3, #0]
  }
}
 80124d8:	370c      	adds	r7, #12
 80124da:	46bd      	mov	sp, r7
 80124dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e0:	4770      	bx	lr
 80124e2:	bf00      	nop

080124e4 <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80124e4:	b480      	push	{r7}
 80124e6:	b083      	sub	sp, #12
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	6078      	str	r0, [r7, #4]
 80124ec:	460b      	mov	r3, r1
 80124ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80124f0:	78fb      	ldrb	r3, [r7, #3]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d008      	beq.n	8012508 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	889b      	ldrh	r3, [r3, #4]
 80124fa:	b29b      	uxth	r3, r3
 80124fc:	f043 0304 	orr.w	r3, r3, #4
 8012500:	b29a      	uxth	r2, r3
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	809a      	strh	r2, [r3, #4]
 8012506:	e007      	b.n	8012518 <SPI_SSOutputCmd+0x34>
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	889b      	ldrh	r3, [r3, #4]
 801250c:	b29b      	uxth	r3, r3
 801250e:	f023 0304 	bic.w	r3, r3, #4
 8012512:	b29a      	uxth	r2, r3
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	809a      	strh	r2, [r3, #4]
  }
}
 8012518:	370c      	adds	r7, #12
 801251a:	46bd      	mov	sp, r7
 801251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012520:	4770      	bx	lr
 8012522:	bf00      	nop

08012524 <SPI_TIModeCmd>:
  * @param  NewState: new state of the selected SPI TI communication mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8012524:	b480      	push	{r7}
 8012526:	b083      	sub	sp, #12
 8012528:	af00      	add	r7, sp, #0
 801252a:	6078      	str	r0, [r7, #4]
 801252c:	460b      	mov	r3, r1
 801252e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8012530:	78fb      	ldrb	r3, [r7, #3]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d008      	beq.n	8012548 <SPI_TIModeCmd+0x24>
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	889b      	ldrh	r3, [r3, #4]
 801253a:	b29b      	uxth	r3, r3
 801253c:	f043 0310 	orr.w	r3, r3, #16
 8012540:	b29a      	uxth	r2, r3
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	809a      	strh	r2, [r3, #4]
 8012546:	e007      	b.n	8012558 <SPI_TIModeCmd+0x34>
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	889b      	ldrh	r3, [r3, #4]
 801254c:	b29b      	uxth	r3, r3
 801254e:	f023 0310 	bic.w	r3, r3, #16
 8012552:	b29a      	uxth	r2, r3
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	809a      	strh	r2, [r3, #4]
  }
}
 8012558:	370c      	adds	r7, #12
 801255a:	46bd      	mov	sp, r7
 801255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012560:	4770      	bx	lr
 8012562:	bf00      	nop

08012564 <I2S_FullDuplexConfig>:
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 8012564:	b480      	push	{r7}
 8012566:	b085      	sub	sp, #20
 8012568:	af00      	add	r7, sp, #0
 801256a:	6078      	str	r0, [r7, #4]
 801256c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, tmp = 0;
 801256e:	2300      	movs	r3, #0
 8012570:	81bb      	strh	r3, [r7, #12]
 8012572:	2300      	movs	r3, #0
 8012574:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	8b9b      	ldrh	r3, [r3, #28]
 801257a:	b29b      	uxth	r3, r3
 801257c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8012580:	f023 030f 	bic.w	r3, r3, #15
 8012584:	b29a      	uxth	r2, r3
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	839a      	strh	r2, [r3, #28]
  I2Sxext->I2SPR = 0x0002;
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	2202      	movs	r2, #2
 801258e:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	8b9b      	ldrh	r3, [r3, #28]
 8012594:	81bb      	strh	r3, [r7, #12]
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8012596:	683b      	ldr	r3, [r7, #0]
 8012598:	881b      	ldrh	r3, [r3, #0]
 801259a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801259e:	d003      	beq.n	80125a8 <I2S_FullDuplexConfig+0x44>
 80125a0:	683b      	ldr	r3, [r7, #0]
 80125a2:	881b      	ldrh	r3, [r3, #0]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d103      	bne.n	80125b0 <I2S_FullDuplexConfig+0x4c>
  {
    tmp = I2S_Mode_SlaveRx;
 80125a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80125ac:	81fb      	strh	r3, [r7, #14]
 80125ae:	e00b      	b.n	80125c8 <I2S_FullDuplexConfig+0x64>
  }
  else
  {
    if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveRx))
 80125b0:	683b      	ldr	r3, [r7, #0]
 80125b2:	881b      	ldrh	r3, [r3, #0]
 80125b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80125b8:	d004      	beq.n	80125c4 <I2S_FullDuplexConfig+0x60>
 80125ba:	683b      	ldr	r3, [r7, #0]
 80125bc:	881b      	ldrh	r3, [r3, #0]
 80125be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80125c2:	d101      	bne.n	80125c8 <I2S_FullDuplexConfig+0x64>
    {
      tmp = I2S_Mode_SlaveTx;
 80125c4:	2300      	movs	r3, #0
 80125c6:	81fb      	strh	r3, [r7, #14]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80125c8:	683b      	ldr	r3, [r7, #0]
 80125ca:	885a      	ldrh	r2, [r3, #2]
 80125cc:	683b      	ldr	r3, [r7, #0]
 80125ce:	8899      	ldrh	r1, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 80125d0:	683b      	ldr	r3, [r7, #0]
 80125d2:	899b      	ldrh	r3, [r3, #12]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80125d4:	430b      	orrs	r3, r1
 80125d6:	b29b      	uxth	r3, r3
 80125d8:	4313      	orrs	r3, r2
 80125da:	b29a      	uxth	r2, r3
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80125dc:	89fb      	ldrh	r3, [r7, #14]
 80125de:	4313      	orrs	r3, r2
 80125e0:	b29a      	uxth	r2, r3
 80125e2:	89bb      	ldrh	r3, [r7, #12]
 80125e4:	4313      	orrs	r3, r2
 80125e6:	b29b      	uxth	r3, r3
 80125e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80125ec:	81bb      	strh	r3, [r7, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	89ba      	ldrh	r2, [r7, #12]
 80125f2:	839a      	strh	r2, [r3, #28]
}
 80125f4:	3714      	adds	r7, #20
 80125f6:	46bd      	mov	sp, r7
 80125f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125fc:	4770      	bx	lr
 80125fe:	bf00      	nop

08012600 <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8012600:	b480      	push	{r7}
 8012602:	b083      	sub	sp, #12
 8012604:	af00      	add	r7, sp, #0
 8012606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	899b      	ldrh	r3, [r3, #12]
 801260c:	b29b      	uxth	r3, r3
}
 801260e:	4618      	mov	r0, r3
 8012610:	370c      	adds	r7, #12
 8012612:	46bd      	mov	sp, r7
 8012614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012618:	4770      	bx	lr
 801261a:	bf00      	nop

0801261c <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 801261c:	b480      	push	{r7}
 801261e:	b083      	sub	sp, #12
 8012620:	af00      	add	r7, sp, #0
 8012622:	6078      	str	r0, [r7, #4]
 8012624:	460b      	mov	r3, r1
 8012626:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	887a      	ldrh	r2, [r7, #2]
 801262c:	819a      	strh	r2, [r3, #12]
}
 801262e:	370c      	adds	r7, #12
 8012630:	46bd      	mov	sp, r7
 8012632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012636:	4770      	bx	lr

08012638 <SPI_CalculateCRC>:
  * @param  NewState: new state of the SPIx CRC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8012638:	b480      	push	{r7}
 801263a:	b083      	sub	sp, #12
 801263c:	af00      	add	r7, sp, #0
 801263e:	6078      	str	r0, [r7, #4]
 8012640:	460b      	mov	r3, r1
 8012642:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8012644:	78fb      	ldrb	r3, [r7, #3]
 8012646:	2b00      	cmp	r3, #0
 8012648:	d008      	beq.n	801265c <SPI_CalculateCRC+0x24>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	881b      	ldrh	r3, [r3, #0]
 801264e:	b29b      	uxth	r3, r3
 8012650:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012654:	b29a      	uxth	r2, r3
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	801a      	strh	r2, [r3, #0]
 801265a:	e007      	b.n	801266c <SPI_CalculateCRC+0x34>
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	881b      	ldrh	r3, [r3, #0]
 8012660:	b29b      	uxth	r3, r3
 8012662:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012666:	b29a      	uxth	r2, r3
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	801a      	strh	r2, [r3, #0]
  }
}
 801266c:	370c      	adds	r7, #12
 801266e:	46bd      	mov	sp, r7
 8012670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012674:	4770      	bx	lr
 8012676:	bf00      	nop

08012678 <SPI_TransmitCRC>:
  * @brief  Transmit the SPIx CRC value.
  * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
  * @retval None
  */
void SPI_TransmitCRC(SPI_TypeDef* SPIx)
{
 8012678:	b480      	push	{r7}
 801267a:	b083      	sub	sp, #12
 801267c:	af00      	add	r7, sp, #0
 801267e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	881b      	ldrh	r3, [r3, #0]
 8012684:	b29b      	uxth	r3, r3
 8012686:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801268a:	b29a      	uxth	r2, r3
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	801a      	strh	r2, [r3, #0]
}
 8012690:	370c      	adds	r7, #12
 8012692:	46bd      	mov	sp, r7
 8012694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012698:	4770      	bx	lr
 801269a:	bf00      	nop

0801269c <SPI_GetCRC>:
  *            @arg SPI_CRC_Tx: Selects Tx CRC register
  *            @arg SPI_CRC_Rx: Selects Rx CRC register
  * @retval The selected CRC register value..
  */
uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
{
 801269c:	b480      	push	{r7}
 801269e:	b085      	sub	sp, #20
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	6078      	str	r0, [r7, #4]
 80126a4:	460b      	mov	r3, r1
 80126a6:	70fb      	strb	r3, [r7, #3]
  uint16_t crcreg = 0;
 80126a8:	2300      	movs	r3, #0
 80126aa:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 80126ac:	78fb      	ldrb	r3, [r7, #3]
 80126ae:	2b01      	cmp	r3, #1
 80126b0:	d003      	beq.n	80126ba <SPI_GetCRC+0x1e>
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	8b1b      	ldrh	r3, [r3, #24]
 80126b6:	81fb      	strh	r3, [r7, #14]
 80126b8:	e002      	b.n	80126c0 <SPI_GetCRC+0x24>
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	8a9b      	ldrh	r3, [r3, #20]
 80126be:	81fb      	strh	r3, [r7, #14]
  }
  /* Return the selected CRC register */
  return crcreg;
 80126c0:	89fb      	ldrh	r3, [r7, #14]
}
 80126c2:	4618      	mov	r0, r3
 80126c4:	3714      	adds	r7, #20
 80126c6:	46bd      	mov	sp, r7
 80126c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126cc:	4770      	bx	lr
 80126ce:	bf00      	nop

080126d0 <SPI_GetCRCPolynomial>:
  * @brief  Returns the CRC Polynomial register value for the specified SPI.
  * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
  * @retval The CRC Polynomial register value.
  */
uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
{
 80126d0:	b480      	push	{r7}
 80126d2:	b083      	sub	sp, #12
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	8a1b      	ldrh	r3, [r3, #16]
 80126dc:	b29b      	uxth	r3, r3
}
 80126de:	4618      	mov	r0, r3
 80126e0:	370c      	adds	r7, #12
 80126e2:	46bd      	mov	sp, r7
 80126e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e8:	4770      	bx	lr
 80126ea:	bf00      	nop

080126ec <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 80126ec:	b480      	push	{r7}
 80126ee:	b083      	sub	sp, #12
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	6078      	str	r0, [r7, #4]
 80126f4:	4613      	mov	r3, r2
 80126f6:	460a      	mov	r2, r1
 80126f8:	807a      	strh	r2, [r7, #2]
 80126fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 80126fc:	787b      	ldrb	r3, [r7, #1]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d008      	beq.n	8012714 <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	889b      	ldrh	r3, [r3, #4]
 8012706:	b29a      	uxth	r2, r3
 8012708:	887b      	ldrh	r3, [r7, #2]
 801270a:	4313      	orrs	r3, r2
 801270c:	b29a      	uxth	r2, r3
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	809a      	strh	r2, [r3, #4]
 8012712:	e009      	b.n	8012728 <SPI_I2S_DMACmd+0x3c>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	889b      	ldrh	r3, [r3, #4]
 8012718:	b29a      	uxth	r2, r3
 801271a:	887b      	ldrh	r3, [r7, #2]
 801271c:	43db      	mvns	r3, r3
 801271e:	b29b      	uxth	r3, r3
 8012720:	4013      	ands	r3, r2
 8012722:	b29a      	uxth	r2, r3
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	809a      	strh	r2, [r3, #4]
  }
}
 8012728:	370c      	adds	r7, #12
 801272a:	46bd      	mov	sp, r7
 801272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012730:	4770      	bx	lr
 8012732:	bf00      	nop

08012734 <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 8012734:	b480      	push	{r7}
 8012736:	b085      	sub	sp, #20
 8012738:	af00      	add	r7, sp, #0
 801273a:	6078      	str	r0, [r7, #4]
 801273c:	4613      	mov	r3, r2
 801273e:	460a      	mov	r2, r1
 8012740:	70fa      	strb	r2, [r7, #3]
 8012742:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 8012744:	2300      	movs	r3, #0
 8012746:	81fb      	strh	r3, [r7, #14]
 8012748:	2300      	movs	r3, #0
 801274a:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;
 801274c:	78fb      	ldrb	r3, [r7, #3]
 801274e:	091b      	lsrs	r3, r3, #4
 8012750:	b2db      	uxtb	r3, r3
 8012752:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8012754:	89fb      	ldrh	r3, [r7, #14]
 8012756:	2201      	movs	r2, #1
 8012758:	fa02 f303 	lsl.w	r3, r2, r3
 801275c:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 801275e:	78bb      	ldrb	r3, [r7, #2]
 8012760:	2b00      	cmp	r3, #0
 8012762:	d008      	beq.n	8012776 <SPI_I2S_ITConfig+0x42>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	889b      	ldrh	r3, [r3, #4]
 8012768:	b29a      	uxth	r2, r3
 801276a:	89bb      	ldrh	r3, [r7, #12]
 801276c:	4313      	orrs	r3, r2
 801276e:	b29a      	uxth	r2, r3
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	809a      	strh	r2, [r3, #4]
 8012774:	e009      	b.n	801278a <SPI_I2S_ITConfig+0x56>
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	889b      	ldrh	r3, [r3, #4]
 801277a:	b29a      	uxth	r2, r3
 801277c:	89bb      	ldrh	r3, [r7, #12]
 801277e:	43db      	mvns	r3, r3
 8012780:	b29b      	uxth	r3, r3
 8012782:	4013      	ands	r3, r2
 8012784:	b29a      	uxth	r2, r3
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	809a      	strh	r2, [r3, #4]
  }
}
 801278a:	3714      	adds	r7, #20
 801278c:	46bd      	mov	sp, r7
 801278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012792:	4770      	bx	lr

08012794 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8012794:	b480      	push	{r7}
 8012796:	b085      	sub	sp, #20
 8012798:	af00      	add	r7, sp, #0
 801279a:	6078      	str	r0, [r7, #4]
 801279c:	460b      	mov	r3, r1
 801279e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80127a0:	2300      	movs	r3, #0
 80127a2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	891b      	ldrh	r3, [r3, #8]
 80127a8:	b29a      	uxth	r2, r3
 80127aa:	887b      	ldrh	r3, [r7, #2]
 80127ac:	4013      	ands	r3, r2
 80127ae:	b29b      	uxth	r3, r3
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d002      	beq.n	80127ba <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80127b4:	2301      	movs	r3, #1
 80127b6:	73fb      	strb	r3, [r7, #15]
 80127b8:	e001      	b.n	80127be <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80127ba:	2300      	movs	r3, #0
 80127bc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80127be:	7bfb      	ldrb	r3, [r7, #15]
}
 80127c0:	4618      	mov	r0, r3
 80127c2:	3714      	adds	r7, #20
 80127c4:	46bd      	mov	sp, r7
 80127c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ca:	4770      	bx	lr

080127cc <SPI_I2S_ClearFlag>:
  *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
  *  
  * @retval None
  */
void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80127cc:	b480      	push	{r7}
 80127ce:	b083      	sub	sp, #12
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	6078      	str	r0, [r7, #4]
 80127d4:	460b      	mov	r3, r1
 80127d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 80127d8:	887b      	ldrh	r3, [r7, #2]
 80127da:	43db      	mvns	r3, r3
 80127dc:	b29a      	uxth	r2, r3
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	811a      	strh	r2, [r3, #8]
}
 80127e2:	370c      	adds	r7, #12
 80127e4:	46bd      	mov	sp, r7
 80127e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ea:	4770      	bx	lr

080127ec <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 80127ec:	b480      	push	{r7}
 80127ee:	b085      	sub	sp, #20
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	6078      	str	r0, [r7, #4]
 80127f4:	460b      	mov	r3, r1
 80127f6:	70fb      	strb	r3, [r7, #3]
  ITStatus bitstatus = RESET;
 80127f8:	2300      	movs	r3, #0
 80127fa:	73fb      	strb	r3, [r7, #15]
  uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 80127fc:	2300      	movs	r3, #0
 80127fe:	81bb      	strh	r3, [r7, #12]
 8012800:	2300      	movs	r3, #0
 8012802:	817b      	strh	r3, [r7, #10]
 8012804:	2300      	movs	r3, #0
 8012806:	813b      	strh	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8012808:	78fb      	ldrb	r3, [r7, #3]
 801280a:	f003 030f 	and.w	r3, r3, #15
 801280e:	2201      	movs	r2, #1
 8012810:	fa02 f303 	lsl.w	r3, r2, r3
 8012814:	81bb      	strh	r3, [r7, #12]

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;
 8012816:	78fb      	ldrb	r3, [r7, #3]
 8012818:	091b      	lsrs	r3, r3, #4
 801281a:	b2db      	uxtb	r3, r3
 801281c:	817b      	strh	r3, [r7, #10]

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 801281e:	897b      	ldrh	r3, [r7, #10]
 8012820:	2201      	movs	r2, #1
 8012822:	fa02 f303 	lsl.w	r3, r2, r3
 8012826:	817b      	strh	r3, [r7, #10]

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	889b      	ldrh	r3, [r3, #4]
 801282c:	b29a      	uxth	r2, r3
 801282e:	897b      	ldrh	r3, [r7, #10]
 8012830:	4013      	ands	r3, r2
 8012832:	813b      	strh	r3, [r7, #8]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	891b      	ldrh	r3, [r3, #8]
 8012838:	b29a      	uxth	r2, r3
 801283a:	89bb      	ldrh	r3, [r7, #12]
 801283c:	4013      	ands	r3, r2
 801283e:	b29b      	uxth	r3, r3
 8012840:	2b00      	cmp	r3, #0
 8012842:	d005      	beq.n	8012850 <SPI_I2S_GetITStatus+0x64>
 8012844:	893b      	ldrh	r3, [r7, #8]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d002      	beq.n	8012850 <SPI_I2S_GetITStatus+0x64>
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 801284a:	2301      	movs	r3, #1
 801284c:	73fb      	strb	r3, [r7, #15]
 801284e:	e001      	b.n	8012854 <SPI_I2S_GetITStatus+0x68>
  }
  else
  {
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
 8012850:	2300      	movs	r3, #0
 8012852:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
 8012854:	7bfb      	ldrb	r3, [r7, #15]
}
 8012856:	4618      	mov	r0, r3
 8012858:	3714      	adds	r7, #20
 801285a:	46bd      	mov	sp, r7
 801285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012860:	4770      	bx	lr
 8012862:	bf00      	nop

08012864 <SPI_I2S_ClearITPendingBit>:
  *          followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable 
  *          the SPI).
  * @retval None
  */
void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8012864:	b480      	push	{r7}
 8012866:	b085      	sub	sp, #20
 8012868:	af00      	add	r7, sp, #0
 801286a:	6078      	str	r0, [r7, #4]
 801286c:	460b      	mov	r3, r1
 801286e:	70fb      	strb	r3, [r7, #3]
  uint16_t itpos = 0;
 8012870:	2300      	movs	r3, #0
 8012872:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8012874:	78fb      	ldrb	r3, [r7, #3]
 8012876:	f003 030f 	and.w	r3, r3, #15
 801287a:	2201      	movs	r2, #1
 801287c:	fa02 f303 	lsl.w	r3, r2, r3
 8012880:	81fb      	strh	r3, [r7, #14]

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 8012882:	89fb      	ldrh	r3, [r7, #14]
 8012884:	43db      	mvns	r3, r3
 8012886:	b29a      	uxth	r2, r3
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	811a      	strh	r2, [r3, #8]
}
 801288c:	3714      	adds	r7, #20
 801288e:	46bd      	mov	sp, r7
 8012890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012894:	4770      	bx	lr
 8012896:	bf00      	nop

08012898 <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 8012898:	b580      	push	{r7, lr}
 801289a:	af00      	add	r7, sp, #0
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 801289c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80128a0:	2101      	movs	r1, #1
 80128a2:	f7fd fa41 	bl	800fd28 <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 80128a6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80128aa:	2100      	movs	r1, #0
 80128ac:	f7fd fa3c 	bl	800fd28 <RCC_APB2PeriphResetCmd>
}
 80128b0:	bd80      	pop	{r7, pc}
 80128b2:	bf00      	nop

080128b4 <SYSCFG_MemoryRemapConfig>:
  *            @arg SYSCFG_MemoryRemap_SRAM:        Embedded SRAM (112kB) mapped at 0x00000000
  *            @arg SYSCFG_MemoryRemap_SDRAM:       FMC (External SDRAM)  mapped at 0x00000000 for STM32F42xxx/43xxx devices.            
  * @retval None
  */
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
 80128b4:	b480      	push	{r7}
 80128b6:	b083      	sub	sp, #12
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	4603      	mov	r3, r0
 80128bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 80128be:	4b04      	ldr	r3, [pc, #16]	; (80128d0 <SYSCFG_MemoryRemapConfig+0x1c>)
 80128c0:	79fa      	ldrb	r2, [r7, #7]
 80128c2:	601a      	str	r2, [r3, #0]
}
 80128c4:	370c      	adds	r7, #12
 80128c6:	46bd      	mov	sp, r7
 80128c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128cc:	4770      	bx	lr
 80128ce:	bf00      	nop
 80128d0:	40013800 	.word	0x40013800

080128d4 <SYSCFG_MemorySwappingBank>:
  *            @arg DISABLE:(the default state) Flash Bank1 mapped at 0x08000000 (and aliased @0x0000 0000) 
                            and Flash Bank2 mapped at 0x08100000 (and aliased at 0x00100000)  
  * @retval None
  */
void SYSCFG_MemorySwappingBank(FunctionalState NewState)
{
 80128d4:	b480      	push	{r7}
 80128d6:	b083      	sub	sp, #12
 80128d8:	af00      	add	r7, sp, #0
 80128da:	4603      	mov	r3, r0
 80128dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) UFB_MODE_BB = (uint32_t)NewState;
 80128de:	4b04      	ldr	r3, [pc, #16]	; (80128f0 <SYSCFG_MemorySwappingBank+0x1c>)
 80128e0:	79fa      	ldrb	r2, [r7, #7]
 80128e2:	601a      	str	r2, [r3, #0]
}
 80128e4:	370c      	adds	r7, #12
 80128e6:	46bd      	mov	sp, r7
 80128e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ec:	4770      	bx	lr
 80128ee:	bf00      	nop
 80128f0:	42270020 	.word	0x42270020

080128f4 <SYSCFG_EXTILineConfig>:
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 80128f4:	b490      	push	{r4, r7}
 80128f6:	b084      	sub	sp, #16
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	4602      	mov	r2, r0
 80128fc:	460b      	mov	r3, r1
 80128fe:	71fa      	strb	r2, [r7, #7]
 8012900:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8012902:	2300      	movs	r3, #0
 8012904:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8012906:	79bb      	ldrb	r3, [r7, #6]
 8012908:	f003 0303 	and.w	r3, r3, #3
 801290c:	009b      	lsls	r3, r3, #2
 801290e:	220f      	movs	r2, #15
 8012910:	fa02 f303 	lsl.w	r3, r2, r3
 8012914:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8012916:	4b15      	ldr	r3, [pc, #84]	; (801296c <SYSCFG_EXTILineConfig+0x78>)
 8012918:	79ba      	ldrb	r2, [r7, #6]
 801291a:	0892      	lsrs	r2, r2, #2
 801291c:	b2d2      	uxtb	r2, r2
 801291e:	4913      	ldr	r1, [pc, #76]	; (801296c <SYSCFG_EXTILineConfig+0x78>)
 8012920:	79b8      	ldrb	r0, [r7, #6]
 8012922:	0880      	lsrs	r0, r0, #2
 8012924:	b2c0      	uxtb	r0, r0
 8012926:	3002      	adds	r0, #2
 8012928:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 801292c:	68f9      	ldr	r1, [r7, #12]
 801292e:	43c9      	mvns	r1, r1
 8012930:	4001      	ands	r1, r0
 8012932:	3202      	adds	r2, #2
 8012934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8012938:	4b0c      	ldr	r3, [pc, #48]	; (801296c <SYSCFG_EXTILineConfig+0x78>)
 801293a:	79ba      	ldrb	r2, [r7, #6]
 801293c:	0892      	lsrs	r2, r2, #2
 801293e:	b2d2      	uxtb	r2, r2
 8012940:	490a      	ldr	r1, [pc, #40]	; (801296c <SYSCFG_EXTILineConfig+0x78>)
 8012942:	79b8      	ldrb	r0, [r7, #6]
 8012944:	0880      	lsrs	r0, r0, #2
 8012946:	b2c0      	uxtb	r0, r0
 8012948:	3002      	adds	r0, #2
 801294a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 801294e:	79fc      	ldrb	r4, [r7, #7]
 8012950:	79b9      	ldrb	r1, [r7, #6]
 8012952:	f001 0103 	and.w	r1, r1, #3
 8012956:	0089      	lsls	r1, r1, #2
 8012958:	fa04 f101 	lsl.w	r1, r4, r1
 801295c:	4301      	orrs	r1, r0
 801295e:	3202      	adds	r2, #2
 8012960:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8012964:	3710      	adds	r7, #16
 8012966:	46bd      	mov	sp, r7
 8012968:	bc90      	pop	{r4, r7}
 801296a:	4770      	bx	lr
 801296c:	40013800 	.word	0x40013800

08012970 <SYSCFG_ETH_MediaInterfaceConfig>:
  *            @arg SYSCFG_ETH_MediaInterface_MII: MII mode selected
  *            @arg SYSCFG_ETH_MediaInterface_RMII: RMII mode selected 
  * @retval None 
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
 8012970:	b480      	push	{r7}
 8012972:	b083      	sub	sp, #12
 8012974:	af00      	add	r7, sp, #0
 8012976:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 8012978:	4b03      	ldr	r3, [pc, #12]	; (8012988 <SYSCFG_ETH_MediaInterfaceConfig+0x18>)
 801297a:	687a      	ldr	r2, [r7, #4]
 801297c:	601a      	str	r2, [r3, #0]
}
 801297e:	370c      	adds	r7, #12
 8012980:	46bd      	mov	sp, r7
 8012982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012986:	4770      	bx	lr
 8012988:	422700dc 	.word	0x422700dc

0801298c <SYSCFG_CompensationCellCmd>:
  *            @arg ENABLE: I/O compensation cell enabled  
  *            @arg DISABLE: I/O compensation cell power-down mode  
  * @retval None
  */
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
 801298c:	b480      	push	{r7}
 801298e:	b083      	sub	sp, #12
 8012990:	af00      	add	r7, sp, #0
 8012992:	4603      	mov	r3, r0
 8012994:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 8012996:	4b04      	ldr	r3, [pc, #16]	; (80129a8 <SYSCFG_CompensationCellCmd+0x1c>)
 8012998:	79fa      	ldrb	r2, [r7, #7]
 801299a:	601a      	str	r2, [r3, #0]
}
 801299c:	370c      	adds	r7, #12
 801299e:	46bd      	mov	sp, r7
 80129a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a4:	4770      	bx	lr
 80129a6:	bf00      	nop
 80129a8:	42270400 	.word	0x42270400

080129ac <SYSCFG_GetCompensationCellStatus>:
  * @brief  Checks whether the I/O Compensation Cell ready flag is set or not.
  * @param  None
  * @retval The new state of the I/O Compensation Cell ready flag (SET or RESET)
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
 80129ac:	b480      	push	{r7}
 80129ae:	b083      	sub	sp, #12
 80129b0:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 80129b2:	2300      	movs	r3, #0
 80129b4:	71fb      	strb	r3, [r7, #7]
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 80129b6:	4b09      	ldr	r3, [pc, #36]	; (80129dc <SYSCFG_GetCompensationCellStatus+0x30>)
 80129b8:	6a1b      	ldr	r3, [r3, #32]
 80129ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d002      	beq.n	80129c8 <SYSCFG_GetCompensationCellStatus+0x1c>
  {
    bitstatus = SET;
 80129c2:	2301      	movs	r3, #1
 80129c4:	71fb      	strb	r3, [r7, #7]
 80129c6:	e001      	b.n	80129cc <SYSCFG_GetCompensationCellStatus+0x20>
  }
  else
  {
    bitstatus = RESET;
 80129c8:	2300      	movs	r3, #0
 80129ca:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 80129cc:	79fb      	ldrb	r3, [r7, #7]
}
 80129ce:	4618      	mov	r0, r3
 80129d0:	370c      	adds	r7, #12
 80129d2:	46bd      	mov	sp, r7
 80129d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d8:	4770      	bx	lr
 80129da:	bf00      	nop
 80129dc:	40013800 	.word	0x40013800

080129e0 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b082      	sub	sp, #8
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 80129e8:	687a      	ldr	r2, [r7, #4]
 80129ea:	4b5f      	ldr	r3, [pc, #380]	; (8012b68 <TIM_DeInit+0x188>)
 80129ec:	429a      	cmp	r2, r3
 80129ee:	d108      	bne.n	8012a02 <TIM_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 80129f0:	2001      	movs	r0, #1
 80129f2:	2101      	movs	r1, #1
 80129f4:	f7fd f998 	bl	800fd28 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 80129f8:	2001      	movs	r0, #1
 80129fa:	2100      	movs	r1, #0
 80129fc:	f7fd f994 	bl	800fd28 <RCC_APB2PeriphResetCmd>
 8012a00:	e0af      	b.n	8012b62 <TIM_DeInit+0x182>
  } 
  else if (TIMx == TIM2) 
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012a08:	d108      	bne.n	8012a1c <TIM_DeInit+0x3c>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8012a0a:	2001      	movs	r0, #1
 8012a0c:	2101      	movs	r1, #1
 8012a0e:	f7fd f96d 	bl	800fcec <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8012a12:	2001      	movs	r0, #1
 8012a14:	2100      	movs	r1, #0
 8012a16:	f7fd f969 	bl	800fcec <RCC_APB1PeriphResetCmd>
 8012a1a:	e0a2      	b.n	8012b62 <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM3)
 8012a1c:	687a      	ldr	r2, [r7, #4]
 8012a1e:	4b53      	ldr	r3, [pc, #332]	; (8012b6c <TIM_DeInit+0x18c>)
 8012a20:	429a      	cmp	r2, r3
 8012a22:	d108      	bne.n	8012a36 <TIM_DeInit+0x56>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8012a24:	2002      	movs	r0, #2
 8012a26:	2101      	movs	r1, #1
 8012a28:	f7fd f960 	bl	800fcec <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8012a2c:	2002      	movs	r0, #2
 8012a2e:	2100      	movs	r1, #0
 8012a30:	f7fd f95c 	bl	800fcec <RCC_APB1PeriphResetCmd>
 8012a34:	e095      	b.n	8012b62 <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM4)
 8012a36:	687a      	ldr	r2, [r7, #4]
 8012a38:	4b4d      	ldr	r3, [pc, #308]	; (8012b70 <TIM_DeInit+0x190>)
 8012a3a:	429a      	cmp	r2, r3
 8012a3c:	d108      	bne.n	8012a50 <TIM_DeInit+0x70>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8012a3e:	2004      	movs	r0, #4
 8012a40:	2101      	movs	r1, #1
 8012a42:	f7fd f953 	bl	800fcec <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8012a46:	2004      	movs	r0, #4
 8012a48:	2100      	movs	r1, #0
 8012a4a:	f7fd f94f 	bl	800fcec <RCC_APB1PeriphResetCmd>
 8012a4e:	e088      	b.n	8012b62 <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM5)
 8012a50:	687a      	ldr	r2, [r7, #4]
 8012a52:	4b48      	ldr	r3, [pc, #288]	; (8012b74 <TIM_DeInit+0x194>)
 8012a54:	429a      	cmp	r2, r3
 8012a56:	d108      	bne.n	8012a6a <TIM_DeInit+0x8a>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8012a58:	2008      	movs	r0, #8
 8012a5a:	2101      	movs	r1, #1
 8012a5c:	f7fd f946 	bl	800fcec <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8012a60:	2008      	movs	r0, #8
 8012a62:	2100      	movs	r1, #0
 8012a64:	f7fd f942 	bl	800fcec <RCC_APB1PeriphResetCmd>
 8012a68:	e07b      	b.n	8012b62 <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM6)  
 8012a6a:	687a      	ldr	r2, [r7, #4]
 8012a6c:	4b42      	ldr	r3, [pc, #264]	; (8012b78 <TIM_DeInit+0x198>)
 8012a6e:	429a      	cmp	r2, r3
 8012a70:	d108      	bne.n	8012a84 <TIM_DeInit+0xa4>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8012a72:	2010      	movs	r0, #16
 8012a74:	2101      	movs	r1, #1
 8012a76:	f7fd f939 	bl	800fcec <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8012a7a:	2010      	movs	r0, #16
 8012a7c:	2100      	movs	r1, #0
 8012a7e:	f7fd f935 	bl	800fcec <RCC_APB1PeriphResetCmd>
 8012a82:	e06e      	b.n	8012b62 <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM7)
 8012a84:	687a      	ldr	r2, [r7, #4]
 8012a86:	4b3d      	ldr	r3, [pc, #244]	; (8012b7c <TIM_DeInit+0x19c>)
 8012a88:	429a      	cmp	r2, r3
 8012a8a:	d108      	bne.n	8012a9e <TIM_DeInit+0xbe>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8012a8c:	2020      	movs	r0, #32
 8012a8e:	2101      	movs	r1, #1
 8012a90:	f7fd f92c 	bl	800fcec <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8012a94:	2020      	movs	r0, #32
 8012a96:	2100      	movs	r1, #0
 8012a98:	f7fd f928 	bl	800fcec <RCC_APB1PeriphResetCmd>
 8012a9c:	e061      	b.n	8012b62 <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM8)
 8012a9e:	687a      	ldr	r2, [r7, #4]
 8012aa0:	4b37      	ldr	r3, [pc, #220]	; (8012b80 <TIM_DeInit+0x1a0>)
 8012aa2:	429a      	cmp	r2, r3
 8012aa4:	d108      	bne.n	8012ab8 <TIM_DeInit+0xd8>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8012aa6:	2002      	movs	r0, #2
 8012aa8:	2101      	movs	r1, #1
 8012aaa:	f7fd f93d 	bl	800fd28 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8012aae:	2002      	movs	r0, #2
 8012ab0:	2100      	movs	r1, #0
 8012ab2:	f7fd f939 	bl	800fd28 <RCC_APB2PeriphResetCmd>
 8012ab6:	e054      	b.n	8012b62 <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM9)
 8012ab8:	687a      	ldr	r2, [r7, #4]
 8012aba:	4b32      	ldr	r3, [pc, #200]	; (8012b84 <TIM_DeInit+0x1a4>)
 8012abc:	429a      	cmp	r2, r3
 8012abe:	d10a      	bne.n	8012ad6 <TIM_DeInit+0xf6>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8012ac0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8012ac4:	2101      	movs	r1, #1
 8012ac6:	f7fd f92f 	bl	800fd28 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8012aca:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8012ace:	2100      	movs	r1, #0
 8012ad0:	f7fd f92a 	bl	800fd28 <RCC_APB2PeriphResetCmd>
 8012ad4:	e045      	b.n	8012b62 <TIM_DeInit+0x182>
   }  
  else if (TIMx == TIM10)
 8012ad6:	687a      	ldr	r2, [r7, #4]
 8012ad8:	4b2b      	ldr	r3, [pc, #172]	; (8012b88 <TIM_DeInit+0x1a8>)
 8012ada:	429a      	cmp	r2, r3
 8012adc:	d10a      	bne.n	8012af4 <TIM_DeInit+0x114>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 8012ade:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8012ae2:	2101      	movs	r1, #1
 8012ae4:	f7fd f920 	bl	800fd28 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8012ae8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8012aec:	2100      	movs	r1, #0
 8012aee:	f7fd f91b 	bl	800fd28 <RCC_APB2PeriphResetCmd>
 8012af2:	e036      	b.n	8012b62 <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM11) 
 8012af4:	687a      	ldr	r2, [r7, #4]
 8012af6:	4b25      	ldr	r3, [pc, #148]	; (8012b8c <TIM_DeInit+0x1ac>)
 8012af8:	429a      	cmp	r2, r3
 8012afa:	d10a      	bne.n	8012b12 <TIM_DeInit+0x132>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8012afc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8012b00:	2101      	movs	r1, #1
 8012b02:	f7fd f911 	bl	800fd28 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8012b06:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8012b0a:	2100      	movs	r1, #0
 8012b0c:	f7fd f90c 	bl	800fd28 <RCC_APB2PeriphResetCmd>
 8012b10:	e027      	b.n	8012b62 <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM12)
 8012b12:	687a      	ldr	r2, [r7, #4]
 8012b14:	4b1e      	ldr	r3, [pc, #120]	; (8012b90 <TIM_DeInit+0x1b0>)
 8012b16:	429a      	cmp	r2, r3
 8012b18:	d108      	bne.n	8012b2c <TIM_DeInit+0x14c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8012b1a:	2040      	movs	r0, #64	; 0x40
 8012b1c:	2101      	movs	r1, #1
 8012b1e:	f7fd f8e5 	bl	800fcec <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8012b22:	2040      	movs	r0, #64	; 0x40
 8012b24:	2100      	movs	r1, #0
 8012b26:	f7fd f8e1 	bl	800fcec <RCC_APB1PeriphResetCmd>
 8012b2a:	e01a      	b.n	8012b62 <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM13) 
 8012b2c:	687a      	ldr	r2, [r7, #4]
 8012b2e:	4b19      	ldr	r3, [pc, #100]	; (8012b94 <TIM_DeInit+0x1b4>)
 8012b30:	429a      	cmp	r2, r3
 8012b32:	d108      	bne.n	8012b46 <TIM_DeInit+0x166>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8012b34:	2080      	movs	r0, #128	; 0x80
 8012b36:	2101      	movs	r1, #1
 8012b38:	f7fd f8d8 	bl	800fcec <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8012b3c:	2080      	movs	r0, #128	; 0x80
 8012b3e:	2100      	movs	r1, #0
 8012b40:	f7fd f8d4 	bl	800fcec <RCC_APB1PeriphResetCmd>
 8012b44:	e00d      	b.n	8012b62 <TIM_DeInit+0x182>
  }  
  else
  { 
    if (TIMx == TIM14) 
 8012b46:	687a      	ldr	r2, [r7, #4]
 8012b48:	4b13      	ldr	r3, [pc, #76]	; (8012b98 <TIM_DeInit+0x1b8>)
 8012b4a:	429a      	cmp	r2, r3
 8012b4c:	d109      	bne.n	8012b62 <TIM_DeInit+0x182>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8012b4e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8012b52:	2101      	movs	r1, #1
 8012b54:	f7fd f8ca 	bl	800fcec <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8012b58:	f44f 7080 	mov.w	r0, #256	; 0x100
 8012b5c:	2100      	movs	r1, #0
 8012b5e:	f7fd f8c5 	bl	800fcec <RCC_APB1PeriphResetCmd>
    }   
  }
}
 8012b62:	3708      	adds	r7, #8
 8012b64:	46bd      	mov	sp, r7
 8012b66:	bd80      	pop	{r7, pc}
 8012b68:	40010000 	.word	0x40010000
 8012b6c:	40000400 	.word	0x40000400
 8012b70:	40000800 	.word	0x40000800
 8012b74:	40000c00 	.word	0x40000c00
 8012b78:	40001000 	.word	0x40001000
 8012b7c:	40001400 	.word	0x40001400
 8012b80:	40010400 	.word	0x40010400
 8012b84:	40014000 	.word	0x40014000
 8012b88:	40014400 	.word	0x40014400
 8012b8c:	40014800 	.word	0x40014800
 8012b90:	40001800 	.word	0x40001800
 8012b94:	40001c00 	.word	0x40001c00
 8012b98:	40002000 	.word	0x40002000

08012b9c <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8012b9c:	b480      	push	{r7}
 8012b9e:	b085      	sub	sp, #20
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	6078      	str	r0, [r7, #4]
 8012ba4:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8012ba6:	2300      	movs	r3, #0
 8012ba8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	881b      	ldrh	r3, [r3, #0]
 8012bae:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8012bb0:	687a      	ldr	r2, [r7, #4]
 8012bb2:	4b28      	ldr	r3, [pc, #160]	; (8012c54 <TIM_TimeBaseInit+0xb8>)
 8012bb4:	429a      	cmp	r2, r3
 8012bb6:	d013      	beq.n	8012be0 <TIM_TimeBaseInit+0x44>
 8012bb8:	687a      	ldr	r2, [r7, #4]
 8012bba:	4b27      	ldr	r3, [pc, #156]	; (8012c58 <TIM_TimeBaseInit+0xbc>)
 8012bbc:	429a      	cmp	r2, r3
 8012bbe:	d00f      	beq.n	8012be0 <TIM_TimeBaseInit+0x44>
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012bc6:	d00b      	beq.n	8012be0 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8012bc8:	687a      	ldr	r2, [r7, #4]
 8012bca:	4b24      	ldr	r3, [pc, #144]	; (8012c5c <TIM_TimeBaseInit+0xc0>)
 8012bcc:	429a      	cmp	r2, r3
 8012bce:	d007      	beq.n	8012be0 <TIM_TimeBaseInit+0x44>
 8012bd0:	687a      	ldr	r2, [r7, #4]
 8012bd2:	4b23      	ldr	r3, [pc, #140]	; (8012c60 <TIM_TimeBaseInit+0xc4>)
 8012bd4:	429a      	cmp	r2, r3
 8012bd6:	d003      	beq.n	8012be0 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8012bd8:	687a      	ldr	r2, [r7, #4]
 8012bda:	4b22      	ldr	r3, [pc, #136]	; (8012c64 <TIM_TimeBaseInit+0xc8>)
 8012bdc:	429a      	cmp	r2, r3
 8012bde:	d108      	bne.n	8012bf2 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8012be0:	89fb      	ldrh	r3, [r7, #14]
 8012be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012be6:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8012be8:	683b      	ldr	r3, [r7, #0]
 8012bea:	885a      	ldrh	r2, [r3, #2]
 8012bec:	89fb      	ldrh	r3, [r7, #14]
 8012bee:	4313      	orrs	r3, r2
 8012bf0:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8012bf2:	687a      	ldr	r2, [r7, #4]
 8012bf4:	4b1c      	ldr	r3, [pc, #112]	; (8012c68 <TIM_TimeBaseInit+0xcc>)
 8012bf6:	429a      	cmp	r2, r3
 8012bf8:	d00c      	beq.n	8012c14 <TIM_TimeBaseInit+0x78>
 8012bfa:	687a      	ldr	r2, [r7, #4]
 8012bfc:	4b1b      	ldr	r3, [pc, #108]	; (8012c6c <TIM_TimeBaseInit+0xd0>)
 8012bfe:	429a      	cmp	r2, r3
 8012c00:	d008      	beq.n	8012c14 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8012c02:	89fb      	ldrh	r3, [r7, #14]
 8012c04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012c08:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8012c0a:	683b      	ldr	r3, [r7, #0]
 8012c0c:	891a      	ldrh	r2, [r3, #8]
 8012c0e:	89fb      	ldrh	r3, [r7, #14]
 8012c10:	4313      	orrs	r3, r2
 8012c12:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	89fa      	ldrh	r2, [r7, #14]
 8012c18:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8012c1a:	683b      	ldr	r3, [r7, #0]
 8012c1c:	685a      	ldr	r2, [r3, #4]
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8012c22:	683b      	ldr	r3, [r7, #0]
 8012c24:	881a      	ldrh	r2, [r3, #0]
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8012c2a:	687a      	ldr	r2, [r7, #4]
 8012c2c:	4b09      	ldr	r3, [pc, #36]	; (8012c54 <TIM_TimeBaseInit+0xb8>)
 8012c2e:	429a      	cmp	r2, r3
 8012c30:	d003      	beq.n	8012c3a <TIM_TimeBaseInit+0x9e>
 8012c32:	687a      	ldr	r2, [r7, #4]
 8012c34:	4b08      	ldr	r3, [pc, #32]	; (8012c58 <TIM_TimeBaseInit+0xbc>)
 8012c36:	429a      	cmp	r2, r3
 8012c38:	d104      	bne.n	8012c44 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8012c3a:	683b      	ldr	r3, [r7, #0]
 8012c3c:	7a9b      	ldrb	r3, [r3, #10]
 8012c3e:	461a      	mov	r2, r3
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	2201      	movs	r2, #1
 8012c48:	829a      	strh	r2, [r3, #20]
}
 8012c4a:	3714      	adds	r7, #20
 8012c4c:	46bd      	mov	sp, r7
 8012c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c52:	4770      	bx	lr
 8012c54:	40010000 	.word	0x40010000
 8012c58:	40010400 	.word	0x40010400
 8012c5c:	40000400 	.word	0x40000400
 8012c60:	40000800 	.word	0x40000800
 8012c64:	40000c00 	.word	0x40000c00
 8012c68:	40001000 	.word	0x40001000
 8012c6c:	40001400 	.word	0x40001400

08012c70 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8012c70:	b480      	push	{r7}
 8012c72:	b083      	sub	sp, #12
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012c7e:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	2200      	movs	r2, #0
 8012c84:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	2200      	movs	r2, #0
 8012c8a:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	2200      	movs	r2, #0
 8012c90:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	2200      	movs	r2, #0
 8012c96:	729a      	strb	r2, [r3, #10]
}
 8012c98:	370c      	adds	r7, #12
 8012c9a:	46bd      	mov	sp, r7
 8012c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca0:	4770      	bx	lr
 8012ca2:	bf00      	nop

08012ca4 <TIM_PrescalerConfig>:
  *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 8012ca4:	b480      	push	{r7}
 8012ca6:	b083      	sub	sp, #12
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	6078      	str	r0, [r7, #4]
 8012cac:	4613      	mov	r3, r2
 8012cae:	460a      	mov	r2, r1
 8012cb0:	807a      	strh	r2, [r7, #2]
 8012cb2:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	887a      	ldrh	r2, [r7, #2]
 8012cb8:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	883a      	ldrh	r2, [r7, #0]
 8012cbe:	829a      	strh	r2, [r3, #20]
}
 8012cc0:	370c      	adds	r7, #12
 8012cc2:	46bd      	mov	sp, r7
 8012cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc8:	4770      	bx	lr
 8012cca:	bf00      	nop

08012ccc <TIM_CounterModeConfig>:
  *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
 8012ccc:	b480      	push	{r7}
 8012cce:	b085      	sub	sp, #20
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	6078      	str	r0, [r7, #4]
 8012cd4:	460b      	mov	r3, r1
 8012cd6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
 8012cd8:	2300      	movs	r3, #0
 8012cda:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	881b      	ldrh	r3, [r3, #0]
 8012ce0:	81fb      	strh	r3, [r7, #14]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012ce2:	89fb      	ldrh	r3, [r7, #14]
 8012ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012ce8:	81fb      	strh	r3, [r7, #14]

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 8012cea:	89fa      	ldrh	r2, [r7, #14]
 8012cec:	887b      	ldrh	r3, [r7, #2]
 8012cee:	4313      	orrs	r3, r2
 8012cf0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	89fa      	ldrh	r2, [r7, #14]
 8012cf6:	801a      	strh	r2, [r3, #0]
}
 8012cf8:	3714      	adds	r7, #20
 8012cfa:	46bd      	mov	sp, r7
 8012cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d00:	4770      	bx	lr
 8012d02:	bf00      	nop

08012d04 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 8012d04:	b480      	push	{r7}
 8012d06:	b083      	sub	sp, #12
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	6078      	str	r0, [r7, #4]
 8012d0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	683a      	ldr	r2, [r7, #0]
 8012d12:	625a      	str	r2, [r3, #36]	; 0x24
}
 8012d14:	370c      	adds	r7, #12
 8012d16:	46bd      	mov	sp, r7
 8012d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d1c:	4770      	bx	lr
 8012d1e:	bf00      	nop

08012d20 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 8012d20:	b480      	push	{r7}
 8012d22:	b083      	sub	sp, #12
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	6078      	str	r0, [r7, #4]
 8012d28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	683a      	ldr	r2, [r7, #0]
 8012d2e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8012d30:	370c      	adds	r7, #12
 8012d32:	46bd      	mov	sp, r7
 8012d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d38:	4770      	bx	lr
 8012d3a:	bf00      	nop

08012d3c <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 8012d3c:	b480      	push	{r7}
 8012d3e:	b083      	sub	sp, #12
 8012d40:	af00      	add	r7, sp, #0
 8012d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8012d48:	4618      	mov	r0, r3
 8012d4a:	370c      	adds	r7, #12
 8012d4c:	46bd      	mov	sp, r7
 8012d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d52:	4770      	bx	lr

08012d54 <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
 8012d54:	b480      	push	{r7}
 8012d56:	b083      	sub	sp, #12
 8012d58:	af00      	add	r7, sp, #0
 8012d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012d60:	b29b      	uxth	r3, r3
}
 8012d62:	4618      	mov	r0, r3
 8012d64:	370c      	adds	r7, #12
 8012d66:	46bd      	mov	sp, r7
 8012d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d6c:	4770      	bx	lr
 8012d6e:	bf00      	nop

08012d70 <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8012d70:	b480      	push	{r7}
 8012d72:	b083      	sub	sp, #12
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	6078      	str	r0, [r7, #4]
 8012d78:	460b      	mov	r3, r1
 8012d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8012d7c:	78fb      	ldrb	r3, [r7, #3]
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d008      	beq.n	8012d94 <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	881b      	ldrh	r3, [r3, #0]
 8012d86:	b29b      	uxth	r3, r3
 8012d88:	f043 0302 	orr.w	r3, r3, #2
 8012d8c:	b29a      	uxth	r2, r3
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	801a      	strh	r2, [r3, #0]
 8012d92:	e007      	b.n	8012da4 <TIM_UpdateDisableConfig+0x34>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	881b      	ldrh	r3, [r3, #0]
 8012d98:	b29b      	uxth	r3, r3
 8012d9a:	f023 0302 	bic.w	r3, r3, #2
 8012d9e:	b29a      	uxth	r2, r3
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	801a      	strh	r2, [r3, #0]
  }
}
 8012da4:	370c      	adds	r7, #12
 8012da6:	46bd      	mov	sp, r7
 8012da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dac:	4770      	bx	lr
 8012dae:	bf00      	nop

08012db0 <TIM_UpdateRequestConfig>:
  *                 generation through the slave mode controller.
  *            @arg TIM_UpdateSource_Regular: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 8012db0:	b480      	push	{r7}
 8012db2:	b083      	sub	sp, #12
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	6078      	str	r0, [r7, #4]
 8012db8:	460b      	mov	r3, r1
 8012dba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8012dbc:	887b      	ldrh	r3, [r7, #2]
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d008      	beq.n	8012dd4 <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	881b      	ldrh	r3, [r3, #0]
 8012dc6:	b29b      	uxth	r3, r3
 8012dc8:	f043 0304 	orr.w	r3, r3, #4
 8012dcc:	b29a      	uxth	r2, r3
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	801a      	strh	r2, [r3, #0]
 8012dd2:	e007      	b.n	8012de4 <TIM_UpdateRequestConfig+0x34>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	881b      	ldrh	r3, [r3, #0]
 8012dd8:	b29b      	uxth	r3, r3
 8012dda:	f023 0304 	bic.w	r3, r3, #4
 8012dde:	b29a      	uxth	r2, r3
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	801a      	strh	r2, [r3, #0]
  }
}
 8012de4:	370c      	adds	r7, #12
 8012de6:	46bd      	mov	sp, r7
 8012de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dec:	4770      	bx	lr
 8012dee:	bf00      	nop

08012df0 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8012df0:	b480      	push	{r7}
 8012df2:	b083      	sub	sp, #12
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	6078      	str	r0, [r7, #4]
 8012df8:	460b      	mov	r3, r1
 8012dfa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8012dfc:	78fb      	ldrb	r3, [r7, #3]
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d008      	beq.n	8012e14 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	881b      	ldrh	r3, [r3, #0]
 8012e06:	b29b      	uxth	r3, r3
 8012e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012e0c:	b29a      	uxth	r2, r3
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	801a      	strh	r2, [r3, #0]
 8012e12:	e007      	b.n	8012e24 <TIM_ARRPreloadConfig+0x34>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	881b      	ldrh	r3, [r3, #0]
 8012e18:	b29b      	uxth	r3, r3
 8012e1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012e1e:	b29a      	uxth	r2, r3
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	801a      	strh	r2, [r3, #0]
  }
}
 8012e24:	370c      	adds	r7, #12
 8012e26:	46bd      	mov	sp, r7
 8012e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e2c:	4770      	bx	lr
 8012e2e:	bf00      	nop

08012e30 <TIM_SelectOnePulseMode>:
  *            @arg TIM_OPMode_Single
  *            @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
 8012e30:	b480      	push	{r7}
 8012e32:	b083      	sub	sp, #12
 8012e34:	af00      	add	r7, sp, #0
 8012e36:	6078      	str	r0, [r7, #4]
 8012e38:	460b      	mov	r3, r1
 8012e3a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	881b      	ldrh	r3, [r3, #0]
 8012e40:	b29b      	uxth	r3, r3
 8012e42:	f023 0308 	bic.w	r3, r3, #8
 8012e46:	b29a      	uxth	r2, r3
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	801a      	strh	r2, [r3, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	881b      	ldrh	r3, [r3, #0]
 8012e50:	b29a      	uxth	r2, r3
 8012e52:	887b      	ldrh	r3, [r7, #2]
 8012e54:	4313      	orrs	r3, r2
 8012e56:	b29a      	uxth	r2, r3
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	801a      	strh	r2, [r3, #0]
}
 8012e5c:	370c      	adds	r7, #12
 8012e5e:	46bd      	mov	sp, r7
 8012e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e64:	4770      	bx	lr
 8012e66:	bf00      	nop

08012e68 <TIM_SetClockDivision>:
  *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
 8012e68:	b480      	push	{r7}
 8012e6a:	b083      	sub	sp, #12
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	6078      	str	r0, [r7, #4]
 8012e70:	460b      	mov	r3, r1
 8012e72:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	881b      	ldrh	r3, [r3, #0]
 8012e78:	b29b      	uxth	r3, r3
 8012e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012e7e:	b29a      	uxth	r2, r3
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	801a      	strh	r2, [r3, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	881b      	ldrh	r3, [r3, #0]
 8012e88:	b29a      	uxth	r2, r3
 8012e8a:	887b      	ldrh	r3, [r7, #2]
 8012e8c:	4313      	orrs	r3, r2
 8012e8e:	b29a      	uxth	r2, r3
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	801a      	strh	r2, [r3, #0]
}
 8012e94:	370c      	adds	r7, #12
 8012e96:	46bd      	mov	sp, r7
 8012e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e9c:	4770      	bx	lr
 8012e9e:	bf00      	nop

08012ea0 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8012ea0:	b480      	push	{r7}
 8012ea2:	b083      	sub	sp, #12
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	6078      	str	r0, [r7, #4]
 8012ea8:	460b      	mov	r3, r1
 8012eaa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8012eac:	78fb      	ldrb	r3, [r7, #3]
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d008      	beq.n	8012ec4 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	881b      	ldrh	r3, [r3, #0]
 8012eb6:	b29b      	uxth	r3, r3
 8012eb8:	f043 0301 	orr.w	r3, r3, #1
 8012ebc:	b29a      	uxth	r2, r3
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	801a      	strh	r2, [r3, #0]
 8012ec2:	e007      	b.n	8012ed4 <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	881b      	ldrh	r3, [r3, #0]
 8012ec8:	b29b      	uxth	r3, r3
 8012eca:	f023 0301 	bic.w	r3, r3, #1
 8012ece:	b29a      	uxth	r2, r3
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	801a      	strh	r2, [r3, #0]
  }
}
 8012ed4:	370c      	adds	r7, #12
 8012ed6:	46bd      	mov	sp, r7
 8012ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012edc:	4770      	bx	lr
 8012ede:	bf00      	nop

08012ee0 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8012ee0:	b480      	push	{r7}
 8012ee2:	b085      	sub	sp, #20
 8012ee4:	af00      	add	r7, sp, #0
 8012ee6:	6078      	str	r0, [r7, #4]
 8012ee8:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8012eea:	2300      	movs	r3, #0
 8012eec:	817b      	strh	r3, [r7, #10]
 8012eee:	2300      	movs	r3, #0
 8012ef0:	81fb      	strh	r3, [r7, #14]
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	8c1b      	ldrh	r3, [r3, #32]
 8012efa:	b29b      	uxth	r3, r3
 8012efc:	f023 0301 	bic.w	r3, r3, #1
 8012f00:	b29a      	uxth	r2, r3
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	8c1b      	ldrh	r3, [r3, #32]
 8012f0a:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	889b      	ldrh	r3, [r3, #4]
 8012f10:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	8b1b      	ldrh	r3, [r3, #24]
 8012f16:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 8012f18:	897b      	ldrh	r3, [r7, #10]
 8012f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012f1e:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8012f20:	897b      	ldrh	r3, [r7, #10]
 8012f22:	f023 0303 	bic.w	r3, r3, #3
 8012f26:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8012f28:	683b      	ldr	r3, [r7, #0]
 8012f2a:	881a      	ldrh	r2, [r3, #0]
 8012f2c:	897b      	ldrh	r3, [r7, #10]
 8012f2e:	4313      	orrs	r3, r2
 8012f30:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8012f32:	89fb      	ldrh	r3, [r7, #14]
 8012f34:	f023 0302 	bic.w	r3, r3, #2
 8012f38:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8012f3a:	683b      	ldr	r3, [r7, #0]
 8012f3c:	899a      	ldrh	r2, [r3, #12]
 8012f3e:	89fb      	ldrh	r3, [r7, #14]
 8012f40:	4313      	orrs	r3, r2
 8012f42:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8012f44:	683b      	ldr	r3, [r7, #0]
 8012f46:	885a      	ldrh	r2, [r3, #2]
 8012f48:	89fb      	ldrh	r3, [r7, #14]
 8012f4a:	4313      	orrs	r3, r2
 8012f4c:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8012f4e:	687a      	ldr	r2, [r7, #4]
 8012f50:	4b1e      	ldr	r3, [pc, #120]	; (8012fcc <TIM_OC1Init+0xec>)
 8012f52:	429a      	cmp	r2, r3
 8012f54:	d003      	beq.n	8012f5e <TIM_OC1Init+0x7e>
 8012f56:	687a      	ldr	r2, [r7, #4]
 8012f58:	4b1d      	ldr	r3, [pc, #116]	; (8012fd0 <TIM_OC1Init+0xf0>)
 8012f5a:	429a      	cmp	r2, r3
 8012f5c:	d123      	bne.n	8012fa6 <TIM_OC1Init+0xc6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8012f5e:	89fb      	ldrh	r3, [r7, #14]
 8012f60:	f023 0308 	bic.w	r3, r3, #8
 8012f64:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8012f66:	683b      	ldr	r3, [r7, #0]
 8012f68:	89da      	ldrh	r2, [r3, #14]
 8012f6a:	89fb      	ldrh	r3, [r7, #14]
 8012f6c:	4313      	orrs	r3, r2
 8012f6e:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 8012f70:	89fb      	ldrh	r3, [r7, #14]
 8012f72:	f023 0304 	bic.w	r3, r3, #4
 8012f76:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8012f78:	683b      	ldr	r3, [r7, #0]
 8012f7a:	889a      	ldrh	r2, [r3, #4]
 8012f7c:	89fb      	ldrh	r3, [r7, #14]
 8012f7e:	4313      	orrs	r3, r2
 8012f80:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 8012f82:	89bb      	ldrh	r3, [r7, #12]
 8012f84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012f88:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 8012f8a:	89bb      	ldrh	r3, [r7, #12]
 8012f8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012f90:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8012f92:	683b      	ldr	r3, [r7, #0]
 8012f94:	8a1a      	ldrh	r2, [r3, #16]
 8012f96:	89bb      	ldrh	r3, [r7, #12]
 8012f98:	4313      	orrs	r3, r2
 8012f9a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8012f9c:	683b      	ldr	r3, [r7, #0]
 8012f9e:	8a5a      	ldrh	r2, [r3, #18]
 8012fa0:	89bb      	ldrh	r3, [r7, #12]
 8012fa2:	4313      	orrs	r3, r2
 8012fa4:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	89ba      	ldrh	r2, [r7, #12]
 8012faa:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	897a      	ldrh	r2, [r7, #10]
 8012fb0:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8012fb2:	683b      	ldr	r3, [r7, #0]
 8012fb4:	689a      	ldr	r2, [r3, #8]
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	89fa      	ldrh	r2, [r7, #14]
 8012fbe:	841a      	strh	r2, [r3, #32]
}
 8012fc0:	3714      	adds	r7, #20
 8012fc2:	46bd      	mov	sp, r7
 8012fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc8:	4770      	bx	lr
 8012fca:	bf00      	nop
 8012fcc:	40010000 	.word	0x40010000
 8012fd0:	40010400 	.word	0x40010400

08012fd4 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8012fd4:	b480      	push	{r7}
 8012fd6:	b085      	sub	sp, #20
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	6078      	str	r0, [r7, #4]
 8012fdc:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8012fde:	2300      	movs	r3, #0
 8012fe0:	817b      	strh	r3, [r7, #10]
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	81fb      	strh	r3, [r7, #14]
 8012fe6:	2300      	movs	r3, #0
 8012fe8:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	8c1b      	ldrh	r3, [r3, #32]
 8012fee:	b29b      	uxth	r3, r3
 8012ff0:	f023 0310 	bic.w	r3, r3, #16
 8012ff4:	b29a      	uxth	r2, r3
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	8c1b      	ldrh	r3, [r3, #32]
 8012ffe:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	889b      	ldrh	r3, [r3, #4]
 8013004:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	8b1b      	ldrh	r3, [r3, #24]
 801300a:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 801300c:	897b      	ldrh	r3, [r7, #10]
 801300e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013012:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 8013014:	897b      	ldrh	r3, [r7, #10]
 8013016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801301a:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 801301c:	683b      	ldr	r3, [r7, #0]
 801301e:	881b      	ldrh	r3, [r3, #0]
 8013020:	021b      	lsls	r3, r3, #8
 8013022:	b29a      	uxth	r2, r3
 8013024:	897b      	ldrh	r3, [r7, #10]
 8013026:	4313      	orrs	r3, r2
 8013028:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 801302a:	89fb      	ldrh	r3, [r7, #14]
 801302c:	f023 0320 	bic.w	r3, r3, #32
 8013030:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8013032:	683b      	ldr	r3, [r7, #0]
 8013034:	899b      	ldrh	r3, [r3, #12]
 8013036:	011b      	lsls	r3, r3, #4
 8013038:	b29a      	uxth	r2, r3
 801303a:	89fb      	ldrh	r3, [r7, #14]
 801303c:	4313      	orrs	r3, r2
 801303e:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8013040:	683b      	ldr	r3, [r7, #0]
 8013042:	885b      	ldrh	r3, [r3, #2]
 8013044:	011b      	lsls	r3, r3, #4
 8013046:	b29a      	uxth	r2, r3
 8013048:	89fb      	ldrh	r3, [r7, #14]
 801304a:	4313      	orrs	r3, r2
 801304c:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 801304e:	687a      	ldr	r2, [r7, #4]
 8013050:	4b22      	ldr	r3, [pc, #136]	; (80130dc <TIM_OC2Init+0x108>)
 8013052:	429a      	cmp	r2, r3
 8013054:	d003      	beq.n	801305e <TIM_OC2Init+0x8a>
 8013056:	687a      	ldr	r2, [r7, #4]
 8013058:	4b21      	ldr	r3, [pc, #132]	; (80130e0 <TIM_OC2Init+0x10c>)
 801305a:	429a      	cmp	r2, r3
 801305c:	d12b      	bne.n	80130b6 <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 801305e:	89fb      	ldrh	r3, [r7, #14]
 8013060:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013064:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8013066:	683b      	ldr	r3, [r7, #0]
 8013068:	89db      	ldrh	r3, [r3, #14]
 801306a:	011b      	lsls	r3, r3, #4
 801306c:	b29a      	uxth	r2, r3
 801306e:	89fb      	ldrh	r3, [r7, #14]
 8013070:	4313      	orrs	r3, r2
 8013072:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 8013074:	89fb      	ldrh	r3, [r7, #14]
 8013076:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801307a:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 801307c:	683b      	ldr	r3, [r7, #0]
 801307e:	889b      	ldrh	r3, [r3, #4]
 8013080:	011b      	lsls	r3, r3, #4
 8013082:	b29a      	uxth	r2, r3
 8013084:	89fb      	ldrh	r3, [r7, #14]
 8013086:	4313      	orrs	r3, r2
 8013088:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 801308a:	89bb      	ldrh	r3, [r7, #12]
 801308c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013090:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 8013092:	89bb      	ldrh	r3, [r7, #12]
 8013094:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013098:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 801309a:	683b      	ldr	r3, [r7, #0]
 801309c:	8a1b      	ldrh	r3, [r3, #16]
 801309e:	009b      	lsls	r3, r3, #2
 80130a0:	b29a      	uxth	r2, r3
 80130a2:	89bb      	ldrh	r3, [r7, #12]
 80130a4:	4313      	orrs	r3, r2
 80130a6:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80130a8:	683b      	ldr	r3, [r7, #0]
 80130aa:	8a5b      	ldrh	r3, [r3, #18]
 80130ac:	009b      	lsls	r3, r3, #2
 80130ae:	b29a      	uxth	r2, r3
 80130b0:	89bb      	ldrh	r3, [r7, #12]
 80130b2:	4313      	orrs	r3, r2
 80130b4:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	89ba      	ldrh	r2, [r7, #12]
 80130ba:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	897a      	ldrh	r2, [r7, #10]
 80130c0:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 80130c2:	683b      	ldr	r3, [r7, #0]
 80130c4:	689a      	ldr	r2, [r3, #8]
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	89fa      	ldrh	r2, [r7, #14]
 80130ce:	841a      	strh	r2, [r3, #32]
}
 80130d0:	3714      	adds	r7, #20
 80130d2:	46bd      	mov	sp, r7
 80130d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d8:	4770      	bx	lr
 80130da:	bf00      	nop
 80130dc:	40010000 	.word	0x40010000
 80130e0:	40010400 	.word	0x40010400

080130e4 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80130e4:	b480      	push	{r7}
 80130e6:	b085      	sub	sp, #20
 80130e8:	af00      	add	r7, sp, #0
 80130ea:	6078      	str	r0, [r7, #4]
 80130ec:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80130ee:	2300      	movs	r3, #0
 80130f0:	817b      	strh	r3, [r7, #10]
 80130f2:	2300      	movs	r3, #0
 80130f4:	81fb      	strh	r3, [r7, #14]
 80130f6:	2300      	movs	r3, #0
 80130f8:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	8c1b      	ldrh	r3, [r3, #32]
 80130fe:	b29b      	uxth	r3, r3
 8013100:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013104:	b29a      	uxth	r2, r3
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	8c1b      	ldrh	r3, [r3, #32]
 801310e:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	889b      	ldrh	r3, [r3, #4]
 8013114:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	8b9b      	ldrh	r3, [r3, #28]
 801311a:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 801311c:	897b      	ldrh	r3, [r7, #10]
 801311e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013122:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8013124:	897b      	ldrh	r3, [r7, #10]
 8013126:	f023 0303 	bic.w	r3, r3, #3
 801312a:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 801312c:	683b      	ldr	r3, [r7, #0]
 801312e:	881a      	ldrh	r2, [r3, #0]
 8013130:	897b      	ldrh	r3, [r7, #10]
 8013132:	4313      	orrs	r3, r2
 8013134:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8013136:	89fb      	ldrh	r3, [r7, #14]
 8013138:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801313c:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 801313e:	683b      	ldr	r3, [r7, #0]
 8013140:	899b      	ldrh	r3, [r3, #12]
 8013142:	021b      	lsls	r3, r3, #8
 8013144:	b29a      	uxth	r2, r3
 8013146:	89fb      	ldrh	r3, [r7, #14]
 8013148:	4313      	orrs	r3, r2
 801314a:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 801314c:	683b      	ldr	r3, [r7, #0]
 801314e:	885b      	ldrh	r3, [r3, #2]
 8013150:	021b      	lsls	r3, r3, #8
 8013152:	b29a      	uxth	r2, r3
 8013154:	89fb      	ldrh	r3, [r7, #14]
 8013156:	4313      	orrs	r3, r2
 8013158:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 801315a:	687a      	ldr	r2, [r7, #4]
 801315c:	4b22      	ldr	r3, [pc, #136]	; (80131e8 <TIM_OC3Init+0x104>)
 801315e:	429a      	cmp	r2, r3
 8013160:	d003      	beq.n	801316a <TIM_OC3Init+0x86>
 8013162:	687a      	ldr	r2, [r7, #4]
 8013164:	4b21      	ldr	r3, [pc, #132]	; (80131ec <TIM_OC3Init+0x108>)
 8013166:	429a      	cmp	r2, r3
 8013168:	d12b      	bne.n	80131c2 <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 801316a:	89fb      	ldrh	r3, [r7, #14]
 801316c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013170:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8013172:	683b      	ldr	r3, [r7, #0]
 8013174:	89db      	ldrh	r3, [r3, #14]
 8013176:	021b      	lsls	r3, r3, #8
 8013178:	b29a      	uxth	r2, r3
 801317a:	89fb      	ldrh	r3, [r7, #14]
 801317c:	4313      	orrs	r3, r2
 801317e:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8013180:	89fb      	ldrh	r3, [r7, #14]
 8013182:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013186:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8013188:	683b      	ldr	r3, [r7, #0]
 801318a:	889b      	ldrh	r3, [r3, #4]
 801318c:	021b      	lsls	r3, r3, #8
 801318e:	b29a      	uxth	r2, r3
 8013190:	89fb      	ldrh	r3, [r7, #14]
 8013192:	4313      	orrs	r3, r2
 8013194:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 8013196:	89bb      	ldrh	r3, [r7, #12]
 8013198:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801319c:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 801319e:	89bb      	ldrh	r3, [r7, #12]
 80131a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80131a4:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80131a6:	683b      	ldr	r3, [r7, #0]
 80131a8:	8a1b      	ldrh	r3, [r3, #16]
 80131aa:	011b      	lsls	r3, r3, #4
 80131ac:	b29a      	uxth	r2, r3
 80131ae:	89bb      	ldrh	r3, [r7, #12]
 80131b0:	4313      	orrs	r3, r2
 80131b2:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80131b4:	683b      	ldr	r3, [r7, #0]
 80131b6:	8a5b      	ldrh	r3, [r3, #18]
 80131b8:	011b      	lsls	r3, r3, #4
 80131ba:	b29a      	uxth	r2, r3
 80131bc:	89bb      	ldrh	r3, [r7, #12]
 80131be:	4313      	orrs	r3, r2
 80131c0:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	89ba      	ldrh	r2, [r7, #12]
 80131c6:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	897a      	ldrh	r2, [r7, #10]
 80131cc:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80131ce:	683b      	ldr	r3, [r7, #0]
 80131d0:	689a      	ldr	r2, [r3, #8]
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	89fa      	ldrh	r2, [r7, #14]
 80131da:	841a      	strh	r2, [r3, #32]
}
 80131dc:	3714      	adds	r7, #20
 80131de:	46bd      	mov	sp, r7
 80131e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e4:	4770      	bx	lr
 80131e6:	bf00      	nop
 80131e8:	40010000 	.word	0x40010000
 80131ec:	40010400 	.word	0x40010400

080131f0 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80131f0:	b480      	push	{r7}
 80131f2:	b085      	sub	sp, #20
 80131f4:	af00      	add	r7, sp, #0
 80131f6:	6078      	str	r0, [r7, #4]
 80131f8:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80131fa:	2300      	movs	r3, #0
 80131fc:	81bb      	strh	r3, [r7, #12]
 80131fe:	2300      	movs	r3, #0
 8013200:	817b      	strh	r3, [r7, #10]
 8013202:	2300      	movs	r3, #0
 8013204:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	8c1b      	ldrh	r3, [r3, #32]
 801320a:	b29b      	uxth	r3, r3
 801320c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013210:	b29a      	uxth	r2, r3
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	8c1b      	ldrh	r3, [r3, #32]
 801321a:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	889b      	ldrh	r3, [r3, #4]
 8013220:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	8b9b      	ldrh	r3, [r3, #28]
 8013226:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 8013228:	89bb      	ldrh	r3, [r7, #12]
 801322a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801322e:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8013230:	89bb      	ldrh	r3, [r7, #12]
 8013232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013236:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8013238:	683b      	ldr	r3, [r7, #0]
 801323a:	881b      	ldrh	r3, [r3, #0]
 801323c:	021b      	lsls	r3, r3, #8
 801323e:	b29a      	uxth	r2, r3
 8013240:	89bb      	ldrh	r3, [r7, #12]
 8013242:	4313      	orrs	r3, r2
 8013244:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8013246:	897b      	ldrh	r3, [r7, #10]
 8013248:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801324c:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 801324e:	683b      	ldr	r3, [r7, #0]
 8013250:	899b      	ldrh	r3, [r3, #12]
 8013252:	031b      	lsls	r3, r3, #12
 8013254:	b29a      	uxth	r2, r3
 8013256:	897b      	ldrh	r3, [r7, #10]
 8013258:	4313      	orrs	r3, r2
 801325a:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 801325c:	683b      	ldr	r3, [r7, #0]
 801325e:	885b      	ldrh	r3, [r3, #2]
 8013260:	031b      	lsls	r3, r3, #12
 8013262:	b29a      	uxth	r2, r3
 8013264:	897b      	ldrh	r3, [r7, #10]
 8013266:	4313      	orrs	r3, r2
 8013268:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 801326a:	687a      	ldr	r2, [r7, #4]
 801326c:	4b11      	ldr	r3, [pc, #68]	; (80132b4 <TIM_OC4Init+0xc4>)
 801326e:	429a      	cmp	r2, r3
 8013270:	d003      	beq.n	801327a <TIM_OC4Init+0x8a>
 8013272:	687a      	ldr	r2, [r7, #4]
 8013274:	4b10      	ldr	r3, [pc, #64]	; (80132b8 <TIM_OC4Init+0xc8>)
 8013276:	429a      	cmp	r2, r3
 8013278:	d10a      	bne.n	8013290 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 801327a:	89fb      	ldrh	r3, [r7, #14]
 801327c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013280:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8013282:	683b      	ldr	r3, [r7, #0]
 8013284:	8a1b      	ldrh	r3, [r3, #16]
 8013286:	019b      	lsls	r3, r3, #6
 8013288:	b29a      	uxth	r2, r3
 801328a:	89fb      	ldrh	r3, [r7, #14]
 801328c:	4313      	orrs	r3, r2
 801328e:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	89fa      	ldrh	r2, [r7, #14]
 8013294:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	89ba      	ldrh	r2, [r7, #12]
 801329a:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 801329c:	683b      	ldr	r3, [r7, #0]
 801329e:	689a      	ldr	r2, [r3, #8]
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	897a      	ldrh	r2, [r7, #10]
 80132a8:	841a      	strh	r2, [r3, #32]
}
 80132aa:	3714      	adds	r7, #20
 80132ac:	46bd      	mov	sp, r7
 80132ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b2:	4770      	bx	lr
 80132b4:	40010000 	.word	0x40010000
 80132b8:	40010400 	.word	0x40010400

080132bc <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80132bc:	b480      	push	{r7}
 80132be:	b083      	sub	sp, #12
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	2200      	movs	r2, #0
 80132c8:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	2200      	movs	r2, #0
 80132ce:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	2200      	movs	r2, #0
 80132d4:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	2200      	movs	r2, #0
 80132da:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	2200      	movs	r2, #0
 80132e0:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	2200      	movs	r2, #0
 80132e6:	81da      	strh	r2, [r3, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	2200      	movs	r2, #0
 80132ec:	821a      	strh	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	2200      	movs	r2, #0
 80132f2:	825a      	strh	r2, [r3, #18]
}
 80132f4:	370c      	adds	r7, #12
 80132f6:	46bd      	mov	sp, r7
 80132f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132fc:	4770      	bx	lr
 80132fe:	bf00      	nop

08013300 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 8013300:	b480      	push	{r7}
 8013302:	b085      	sub	sp, #20
 8013304:	af00      	add	r7, sp, #0
 8013306:	6078      	str	r0, [r7, #4]
 8013308:	4613      	mov	r3, r2
 801330a:	460a      	mov	r2, r1
 801330c:	807a      	strh	r2, [r7, #2]
 801330e:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 8013310:	2300      	movs	r3, #0
 8013312:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
 8013314:	2300      	movs	r3, #0
 8013316:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_OFFSET;
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	3318      	adds	r3, #24
 8013320:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 8013322:	887b      	ldrh	r3, [r7, #2]
 8013324:	2201      	movs	r2, #1
 8013326:	fa02 f303 	lsl.w	r3, r2, r3
 801332a:	817b      	strh	r3, [r7, #10]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	8c1b      	ldrh	r3, [r3, #32]
 8013330:	b29a      	uxth	r2, r3
 8013332:	897b      	ldrh	r3, [r7, #10]
 8013334:	43db      	mvns	r3, r3
 8013336:	b29b      	uxth	r3, r3
 8013338:	4013      	ands	r3, r2
 801333a:	b29a      	uxth	r2, r3
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8013340:	887b      	ldrh	r3, [r7, #2]
 8013342:	2b00      	cmp	r3, #0
 8013344:	d002      	beq.n	801334c <TIM_SelectOCxM+0x4c>
 8013346:	887b      	ldrh	r3, [r7, #2]
 8013348:	2b08      	cmp	r3, #8
 801334a:	d113      	bne.n	8013374 <TIM_SelectOCxM+0x74>
  {
    tmp += (TIM_Channel>>1);
 801334c:	887b      	ldrh	r3, [r7, #2]
 801334e:	085b      	lsrs	r3, r3, #1
 8013350:	b29b      	uxth	r3, r3
 8013352:	68fa      	ldr	r2, [r7, #12]
 8013354:	4413      	add	r3, r2
 8013356:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 8013358:	68fa      	ldr	r2, [r7, #12]
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	6819      	ldr	r1, [r3, #0]
 801335e:	f64f 738f 	movw	r3, #65423	; 0xff8f
 8013362:	400b      	ands	r3, r1
 8013364:	6013      	str	r3, [r2, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	68fa      	ldr	r2, [r7, #12]
 801336a:	6811      	ldr	r1, [r2, #0]
 801336c:	883a      	ldrh	r2, [r7, #0]
 801336e:	430a      	orrs	r2, r1
 8013370:	601a      	str	r2, [r3, #0]
 8013372:	e016      	b.n	80133a2 <TIM_SelectOCxM+0xa2>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 8013374:	887b      	ldrh	r3, [r7, #2]
 8013376:	3b04      	subs	r3, #4
 8013378:	b29b      	uxth	r3, r3
 801337a:	085b      	lsrs	r3, r3, #1
 801337c:	b29b      	uxth	r3, r3
 801337e:	68fa      	ldr	r2, [r7, #12]
 8013380:	4413      	add	r3, r2
 8013382:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 8013384:	68fa      	ldr	r2, [r7, #12]
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	6819      	ldr	r1, [r3, #0]
 801338a:	f648 73ff 	movw	r3, #36863	; 0x8fff
 801338e:	400b      	ands	r3, r1
 8013390:	6013      	str	r3, [r2, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	68fa      	ldr	r2, [r7, #12]
 8013396:	6811      	ldr	r1, [r2, #0]
 8013398:	883a      	ldrh	r2, [r7, #0]
 801339a:	0212      	lsls	r2, r2, #8
 801339c:	b292      	uxth	r2, r2
 801339e:	430a      	orrs	r2, r1
 80133a0:	601a      	str	r2, [r3, #0]
  }
}
 80133a2:	3714      	adds	r7, #20
 80133a4:	46bd      	mov	sp, r7
 80133a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133aa:	4770      	bx	lr

080133ac <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 80133ac:	b480      	push	{r7}
 80133ae:	b083      	sub	sp, #12
 80133b0:	af00      	add	r7, sp, #0
 80133b2:	6078      	str	r0, [r7, #4]
 80133b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	683a      	ldr	r2, [r7, #0]
 80133ba:	635a      	str	r2, [r3, #52]	; 0x34
}
 80133bc:	370c      	adds	r7, #12
 80133be:	46bd      	mov	sp, r7
 80133c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133c4:	4770      	bx	lr
 80133c6:	bf00      	nop

080133c8 <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 80133c8:	b480      	push	{r7}
 80133ca:	b083      	sub	sp, #12
 80133cc:	af00      	add	r7, sp, #0
 80133ce:	6078      	str	r0, [r7, #4]
 80133d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	683a      	ldr	r2, [r7, #0]
 80133d6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80133d8:	370c      	adds	r7, #12
 80133da:	46bd      	mov	sp, r7
 80133dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133e0:	4770      	bx	lr
 80133e2:	bf00      	nop

080133e4 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 80133e4:	b480      	push	{r7}
 80133e6:	b083      	sub	sp, #12
 80133e8:	af00      	add	r7, sp, #0
 80133ea:	6078      	str	r0, [r7, #4]
 80133ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	683a      	ldr	r2, [r7, #0]
 80133f2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80133f4:	370c      	adds	r7, #12
 80133f6:	46bd      	mov	sp, r7
 80133f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133fc:	4770      	bx	lr
 80133fe:	bf00      	nop

08013400 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 8013400:	b480      	push	{r7}
 8013402:	b083      	sub	sp, #12
 8013404:	af00      	add	r7, sp, #0
 8013406:	6078      	str	r0, [r7, #4]
 8013408:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	683a      	ldr	r2, [r7, #0]
 801340e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8013410:	370c      	adds	r7, #12
 8013412:	46bd      	mov	sp, r7
 8013414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013418:	4770      	bx	lr
 801341a:	bf00      	nop

0801341c <TIM_ForcedOC1Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 801341c:	b480      	push	{r7}
 801341e:	b085      	sub	sp, #20
 8013420:	af00      	add	r7, sp, #0
 8013422:	6078      	str	r0, [r7, #4]
 8013424:	460b      	mov	r3, r1
 8013426:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8013428:	2300      	movs	r3, #0
 801342a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	8b1b      	ldrh	r3, [r3, #24]
 8013430:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 8013432:	89fb      	ldrh	r3, [r7, #14]
 8013434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013438:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 801343a:	89fa      	ldrh	r2, [r7, #14]
 801343c:	887b      	ldrh	r3, [r7, #2]
 801343e:	4313      	orrs	r3, r2
 8013440:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	89fa      	ldrh	r2, [r7, #14]
 8013446:	831a      	strh	r2, [r3, #24]
}
 8013448:	3714      	adds	r7, #20
 801344a:	46bd      	mov	sp, r7
 801344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013450:	4770      	bx	lr
 8013452:	bf00      	nop

08013454 <TIM_ForcedOC2Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8013454:	b480      	push	{r7}
 8013456:	b085      	sub	sp, #20
 8013458:	af00      	add	r7, sp, #0
 801345a:	6078      	str	r0, [r7, #4]
 801345c:	460b      	mov	r3, r1
 801345e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8013460:	2300      	movs	r3, #0
 8013462:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	8b1b      	ldrh	r3, [r3, #24]
 8013468:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 801346a:	89fb      	ldrh	r3, [r7, #14]
 801346c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013470:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 8013472:	887b      	ldrh	r3, [r7, #2]
 8013474:	021b      	lsls	r3, r3, #8
 8013476:	b29a      	uxth	r2, r3
 8013478:	89fb      	ldrh	r3, [r7, #14]
 801347a:	4313      	orrs	r3, r2
 801347c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	89fa      	ldrh	r2, [r7, #14]
 8013482:	831a      	strh	r2, [r3, #24]
}
 8013484:	3714      	adds	r7, #20
 8013486:	46bd      	mov	sp, r7
 8013488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801348c:	4770      	bx	lr
 801348e:	bf00      	nop

08013490 <TIM_ForcedOC3Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8013490:	b480      	push	{r7}
 8013492:	b085      	sub	sp, #20
 8013494:	af00      	add	r7, sp, #0
 8013496:	6078      	str	r0, [r7, #4]
 8013498:	460b      	mov	r3, r1
 801349a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 801349c:	2300      	movs	r3, #0
 801349e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	8b9b      	ldrh	r3, [r3, #28]
 80134a4:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 80134a6:	89fb      	ldrh	r3, [r7, #14]
 80134a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80134ac:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 80134ae:	89fa      	ldrh	r2, [r7, #14]
 80134b0:	887b      	ldrh	r3, [r7, #2]
 80134b2:	4313      	orrs	r3, r2
 80134b4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	89fa      	ldrh	r2, [r7, #14]
 80134ba:	839a      	strh	r2, [r3, #28]
}
 80134bc:	3714      	adds	r7, #20
 80134be:	46bd      	mov	sp, r7
 80134c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c4:	4770      	bx	lr
 80134c6:	bf00      	nop

080134c8 <TIM_ForcedOC4Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 80134c8:	b480      	push	{r7}
 80134ca:	b085      	sub	sp, #20
 80134cc:	af00      	add	r7, sp, #0
 80134ce:	6078      	str	r0, [r7, #4]
 80134d0:	460b      	mov	r3, r1
 80134d2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80134d4:	2300      	movs	r3, #0
 80134d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	8b9b      	ldrh	r3, [r3, #28]
 80134dc:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 80134de:	89fb      	ldrh	r3, [r7, #14]
 80134e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80134e4:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 80134e6:	887b      	ldrh	r3, [r7, #2]
 80134e8:	021b      	lsls	r3, r3, #8
 80134ea:	b29a      	uxth	r2, r3
 80134ec:	89fb      	ldrh	r3, [r7, #14]
 80134ee:	4313      	orrs	r3, r2
 80134f0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	89fa      	ldrh	r2, [r7, #14]
 80134f6:	839a      	strh	r2, [r3, #28]
}
 80134f8:	3714      	adds	r7, #20
 80134fa:	46bd      	mov	sp, r7
 80134fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013500:	4770      	bx	lr
 8013502:	bf00      	nop

08013504 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8013504:	b480      	push	{r7}
 8013506:	b085      	sub	sp, #20
 8013508:	af00      	add	r7, sp, #0
 801350a:	6078      	str	r0, [r7, #4]
 801350c:	460b      	mov	r3, r1
 801350e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8013510:	2300      	movs	r3, #0
 8013512:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	8b1b      	ldrh	r3, [r3, #24]
 8013518:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 801351a:	89fb      	ldrh	r3, [r7, #14]
 801351c:	f023 0308 	bic.w	r3, r3, #8
 8013520:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8013522:	89fa      	ldrh	r2, [r7, #14]
 8013524:	887b      	ldrh	r3, [r7, #2]
 8013526:	4313      	orrs	r3, r2
 8013528:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	89fa      	ldrh	r2, [r7, #14]
 801352e:	831a      	strh	r2, [r3, #24]
}
 8013530:	3714      	adds	r7, #20
 8013532:	46bd      	mov	sp, r7
 8013534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013538:	4770      	bx	lr
 801353a:	bf00      	nop

0801353c <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 801353c:	b480      	push	{r7}
 801353e:	b085      	sub	sp, #20
 8013540:	af00      	add	r7, sp, #0
 8013542:	6078      	str	r0, [r7, #4]
 8013544:	460b      	mov	r3, r1
 8013546:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8013548:	2300      	movs	r3, #0
 801354a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	8b1b      	ldrh	r3, [r3, #24]
 8013550:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 8013552:	89fb      	ldrh	r3, [r7, #14]
 8013554:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013558:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 801355a:	887b      	ldrh	r3, [r7, #2]
 801355c:	021b      	lsls	r3, r3, #8
 801355e:	b29a      	uxth	r2, r3
 8013560:	89fb      	ldrh	r3, [r7, #14]
 8013562:	4313      	orrs	r3, r2
 8013564:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	89fa      	ldrh	r2, [r7, #14]
 801356a:	831a      	strh	r2, [r3, #24]
}
 801356c:	3714      	adds	r7, #20
 801356e:	46bd      	mov	sp, r7
 8013570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013574:	4770      	bx	lr
 8013576:	bf00      	nop

08013578 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8013578:	b480      	push	{r7}
 801357a:	b085      	sub	sp, #20
 801357c:	af00      	add	r7, sp, #0
 801357e:	6078      	str	r0, [r7, #4]
 8013580:	460b      	mov	r3, r1
 8013582:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8013584:	2300      	movs	r3, #0
 8013586:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	8b9b      	ldrh	r3, [r3, #28]
 801358c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 801358e:	89fb      	ldrh	r3, [r7, #14]
 8013590:	f023 0308 	bic.w	r3, r3, #8
 8013594:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8013596:	89fa      	ldrh	r2, [r7, #14]
 8013598:	887b      	ldrh	r3, [r7, #2]
 801359a:	4313      	orrs	r3, r2
 801359c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	89fa      	ldrh	r2, [r7, #14]
 80135a2:	839a      	strh	r2, [r3, #28]
}
 80135a4:	3714      	adds	r7, #20
 80135a6:	46bd      	mov	sp, r7
 80135a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ac:	4770      	bx	lr
 80135ae:	bf00      	nop

080135b0 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80135b0:	b480      	push	{r7}
 80135b2:	b085      	sub	sp, #20
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	6078      	str	r0, [r7, #4]
 80135b8:	460b      	mov	r3, r1
 80135ba:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80135bc:	2300      	movs	r3, #0
 80135be:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	8b9b      	ldrh	r3, [r3, #28]
 80135c4:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 80135c6:	89fb      	ldrh	r3, [r7, #14]
 80135c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80135cc:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 80135ce:	887b      	ldrh	r3, [r7, #2]
 80135d0:	021b      	lsls	r3, r3, #8
 80135d2:	b29a      	uxth	r2, r3
 80135d4:	89fb      	ldrh	r3, [r7, #14]
 80135d6:	4313      	orrs	r3, r2
 80135d8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	89fa      	ldrh	r2, [r7, #14]
 80135de:	839a      	strh	r2, [r3, #28]
}
 80135e0:	3714      	adds	r7, #20
 80135e2:	46bd      	mov	sp, r7
 80135e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e8:	4770      	bx	lr
 80135ea:	bf00      	nop

080135ec <TIM_OC1FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 80135ec:	b480      	push	{r7}
 80135ee:	b085      	sub	sp, #20
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	6078      	str	r0, [r7, #4]
 80135f4:	460b      	mov	r3, r1
 80135f6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80135f8:	2300      	movs	r3, #0
 80135fa:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	8b1b      	ldrh	r3, [r3, #24]
 8013600:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 8013602:	89fb      	ldrh	r3, [r7, #14]
 8013604:	f023 0304 	bic.w	r3, r3, #4
 8013608:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 801360a:	89fa      	ldrh	r2, [r7, #14]
 801360c:	887b      	ldrh	r3, [r7, #2]
 801360e:	4313      	orrs	r3, r2
 8013610:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	89fa      	ldrh	r2, [r7, #14]
 8013616:	831a      	strh	r2, [r3, #24]
}
 8013618:	3714      	adds	r7, #20
 801361a:	46bd      	mov	sp, r7
 801361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013620:	4770      	bx	lr
 8013622:	bf00      	nop

08013624 <TIM_OC2FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8013624:	b480      	push	{r7}
 8013626:	b085      	sub	sp, #20
 8013628:	af00      	add	r7, sp, #0
 801362a:	6078      	str	r0, [r7, #4]
 801362c:	460b      	mov	r3, r1
 801362e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8013630:	2300      	movs	r3, #0
 8013632:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	8b1b      	ldrh	r3, [r3, #24]
 8013638:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 801363a:	89fb      	ldrh	r3, [r7, #14]
 801363c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013640:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 8013642:	887b      	ldrh	r3, [r7, #2]
 8013644:	021b      	lsls	r3, r3, #8
 8013646:	b29a      	uxth	r2, r3
 8013648:	89fb      	ldrh	r3, [r7, #14]
 801364a:	4313      	orrs	r3, r2
 801364c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	89fa      	ldrh	r2, [r7, #14]
 8013652:	831a      	strh	r2, [r3, #24]
}
 8013654:	3714      	adds	r7, #20
 8013656:	46bd      	mov	sp, r7
 8013658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801365c:	4770      	bx	lr
 801365e:	bf00      	nop

08013660 <TIM_OC3FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8013660:	b480      	push	{r7}
 8013662:	b085      	sub	sp, #20
 8013664:	af00      	add	r7, sp, #0
 8013666:	6078      	str	r0, [r7, #4]
 8013668:	460b      	mov	r3, r1
 801366a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 801366c:	2300      	movs	r3, #0
 801366e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	8b9b      	ldrh	r3, [r3, #28]
 8013674:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 8013676:	89fb      	ldrh	r3, [r7, #14]
 8013678:	f023 0304 	bic.w	r3, r3, #4
 801367c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 801367e:	89fa      	ldrh	r2, [r7, #14]
 8013680:	887b      	ldrh	r3, [r7, #2]
 8013682:	4313      	orrs	r3, r2
 8013684:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	89fa      	ldrh	r2, [r7, #14]
 801368a:	839a      	strh	r2, [r3, #28]
}
 801368c:	3714      	adds	r7, #20
 801368e:	46bd      	mov	sp, r7
 8013690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013694:	4770      	bx	lr
 8013696:	bf00      	nop

08013698 <TIM_OC4FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8013698:	b480      	push	{r7}
 801369a:	b085      	sub	sp, #20
 801369c:	af00      	add	r7, sp, #0
 801369e:	6078      	str	r0, [r7, #4]
 80136a0:	460b      	mov	r3, r1
 80136a2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80136a4:	2300      	movs	r3, #0
 80136a6:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	8b9b      	ldrh	r3, [r3, #28]
 80136ac:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 80136ae:	89fb      	ldrh	r3, [r7, #14]
 80136b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80136b4:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 80136b6:	887b      	ldrh	r3, [r7, #2]
 80136b8:	021b      	lsls	r3, r3, #8
 80136ba:	b29a      	uxth	r2, r3
 80136bc:	89fb      	ldrh	r3, [r7, #14]
 80136be:	4313      	orrs	r3, r2
 80136c0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	89fa      	ldrh	r2, [r7, #14]
 80136c6:	839a      	strh	r2, [r3, #28]
}
 80136c8:	3714      	adds	r7, #20
 80136ca:	46bd      	mov	sp, r7
 80136cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d0:	4770      	bx	lr
 80136d2:	bf00      	nop

080136d4 <TIM_ClearOC1Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 80136d4:	b480      	push	{r7}
 80136d6:	b085      	sub	sp, #20
 80136d8:	af00      	add	r7, sp, #0
 80136da:	6078      	str	r0, [r7, #4]
 80136dc:	460b      	mov	r3, r1
 80136de:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80136e0:	2300      	movs	r3, #0
 80136e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	8b1b      	ldrh	r3, [r3, #24]
 80136e8:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 80136ea:	89fb      	ldrh	r3, [r7, #14]
 80136ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80136f0:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 80136f2:	89fa      	ldrh	r2, [r7, #14]
 80136f4:	887b      	ldrh	r3, [r7, #2]
 80136f6:	4313      	orrs	r3, r2
 80136f8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	89fa      	ldrh	r2, [r7, #14]
 80136fe:	831a      	strh	r2, [r3, #24]
}
 8013700:	3714      	adds	r7, #20
 8013702:	46bd      	mov	sp, r7
 8013704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013708:	4770      	bx	lr
 801370a:	bf00      	nop

0801370c <TIM_ClearOC2Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 801370c:	b480      	push	{r7}
 801370e:	b085      	sub	sp, #20
 8013710:	af00      	add	r7, sp, #0
 8013712:	6078      	str	r0, [r7, #4]
 8013714:	460b      	mov	r3, r1
 8013716:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8013718:	2300      	movs	r3, #0
 801371a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	8b1b      	ldrh	r3, [r3, #24]
 8013720:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 8013722:	89fb      	ldrh	r3, [r7, #14]
 8013724:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8013728:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 801372a:	887b      	ldrh	r3, [r7, #2]
 801372c:	021b      	lsls	r3, r3, #8
 801372e:	b29a      	uxth	r2, r3
 8013730:	89fb      	ldrh	r3, [r7, #14]
 8013732:	4313      	orrs	r3, r2
 8013734:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	89fa      	ldrh	r2, [r7, #14]
 801373a:	831a      	strh	r2, [r3, #24]
}
 801373c:	3714      	adds	r7, #20
 801373e:	46bd      	mov	sp, r7
 8013740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013744:	4770      	bx	lr
 8013746:	bf00      	nop

08013748 <TIM_ClearOC3Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8013748:	b480      	push	{r7}
 801374a:	b085      	sub	sp, #20
 801374c:	af00      	add	r7, sp, #0
 801374e:	6078      	str	r0, [r7, #4]
 8013750:	460b      	mov	r3, r1
 8013752:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8013754:	2300      	movs	r3, #0
 8013756:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	8b9b      	ldrh	r3, [r3, #28]
 801375c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 801375e:	89fb      	ldrh	r3, [r7, #14]
 8013760:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013764:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 8013766:	89fa      	ldrh	r2, [r7, #14]
 8013768:	887b      	ldrh	r3, [r7, #2]
 801376a:	4313      	orrs	r3, r2
 801376c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	89fa      	ldrh	r2, [r7, #14]
 8013772:	839a      	strh	r2, [r3, #28]
}
 8013774:	3714      	adds	r7, #20
 8013776:	46bd      	mov	sp, r7
 8013778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801377c:	4770      	bx	lr
 801377e:	bf00      	nop

08013780 <TIM_ClearOC4Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8013780:	b480      	push	{r7}
 8013782:	b085      	sub	sp, #20
 8013784:	af00      	add	r7, sp, #0
 8013786:	6078      	str	r0, [r7, #4]
 8013788:	460b      	mov	r3, r1
 801378a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 801378c:	2300      	movs	r3, #0
 801378e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	8b9b      	ldrh	r3, [r3, #28]
 8013794:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 8013796:	89fb      	ldrh	r3, [r7, #14]
 8013798:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801379c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 801379e:	887b      	ldrh	r3, [r7, #2]
 80137a0:	021b      	lsls	r3, r3, #8
 80137a2:	b29a      	uxth	r2, r3
 80137a4:	89fb      	ldrh	r3, [r7, #14]
 80137a6:	4313      	orrs	r3, r2
 80137a8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	89fa      	ldrh	r2, [r7, #14]
 80137ae:	839a      	strh	r2, [r3, #28]
}
 80137b0:	3714      	adds	r7, #20
 80137b2:	46bd      	mov	sp, r7
 80137b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b8:	4770      	bx	lr
 80137ba:	bf00      	nop

080137bc <TIM_OC1PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 80137bc:	b480      	push	{r7}
 80137be:	b085      	sub	sp, #20
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	6078      	str	r0, [r7, #4]
 80137c4:	460b      	mov	r3, r1
 80137c6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 80137c8:	2300      	movs	r3, #0
 80137ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	8c1b      	ldrh	r3, [r3, #32]
 80137d0:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 80137d2:	89fb      	ldrh	r3, [r7, #14]
 80137d4:	f023 0302 	bic.w	r3, r3, #2
 80137d8:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
 80137da:	89fa      	ldrh	r2, [r7, #14]
 80137dc:	887b      	ldrh	r3, [r7, #2]
 80137de:	4313      	orrs	r3, r2
 80137e0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	89fa      	ldrh	r2, [r7, #14]
 80137e6:	841a      	strh	r2, [r3, #32]
}
 80137e8:	3714      	adds	r7, #20
 80137ea:	46bd      	mov	sp, r7
 80137ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137f0:	4770      	bx	lr
 80137f2:	bf00      	nop

080137f4 <TIM_OC1NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 80137f4:	b480      	push	{r7}
 80137f6:	b085      	sub	sp, #20
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	6078      	str	r0, [r7, #4]
 80137fc:	460b      	mov	r3, r1
 80137fe:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8013800:	2300      	movs	r3, #0
 8013802:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	8c1b      	ldrh	r3, [r3, #32]
 8013808:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 801380a:	89fb      	ldrh	r3, [r7, #14]
 801380c:	f023 0308 	bic.w	r3, r3, #8
 8013810:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
 8013812:	89fa      	ldrh	r2, [r7, #14]
 8013814:	887b      	ldrh	r3, [r7, #2]
 8013816:	4313      	orrs	r3, r2
 8013818:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	89fa      	ldrh	r2, [r7, #14]
 801381e:	841a      	strh	r2, [r3, #32]
}
 8013820:	3714      	adds	r7, #20
 8013822:	46bd      	mov	sp, r7
 8013824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013828:	4770      	bx	lr
 801382a:	bf00      	nop

0801382c <TIM_OC2PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 801382c:	b480      	push	{r7}
 801382e:	b085      	sub	sp, #20
 8013830:	af00      	add	r7, sp, #0
 8013832:	6078      	str	r0, [r7, #4]
 8013834:	460b      	mov	r3, r1
 8013836:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8013838:	2300      	movs	r3, #0
 801383a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	8c1b      	ldrh	r3, [r3, #32]
 8013840:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 8013842:	89fb      	ldrh	r3, [r7, #14]
 8013844:	f023 0320 	bic.w	r3, r3, #32
 8013848:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 801384a:	887b      	ldrh	r3, [r7, #2]
 801384c:	011b      	lsls	r3, r3, #4
 801384e:	b29a      	uxth	r2, r3
 8013850:	89fb      	ldrh	r3, [r7, #14]
 8013852:	4313      	orrs	r3, r2
 8013854:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	89fa      	ldrh	r2, [r7, #14]
 801385a:	841a      	strh	r2, [r3, #32]
}
 801385c:	3714      	adds	r7, #20
 801385e:	46bd      	mov	sp, r7
 8013860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013864:	4770      	bx	lr
 8013866:	bf00      	nop

08013868 <TIM_OC2NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8013868:	b480      	push	{r7}
 801386a:	b085      	sub	sp, #20
 801386c:	af00      	add	r7, sp, #0
 801386e:	6078      	str	r0, [r7, #4]
 8013870:	460b      	mov	r3, r1
 8013872:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8013874:	2300      	movs	r3, #0
 8013876:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	8c1b      	ldrh	r3, [r3, #32]
 801387c:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 801387e:	89fb      	ldrh	r3, [r7, #14]
 8013880:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013884:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 8013886:	887b      	ldrh	r3, [r7, #2]
 8013888:	011b      	lsls	r3, r3, #4
 801388a:	b29a      	uxth	r2, r3
 801388c:	89fb      	ldrh	r3, [r7, #14]
 801388e:	4313      	orrs	r3, r2
 8013890:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	89fa      	ldrh	r2, [r7, #14]
 8013896:	841a      	strh	r2, [r3, #32]
}
 8013898:	3714      	adds	r7, #20
 801389a:	46bd      	mov	sp, r7
 801389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a0:	4770      	bx	lr
 80138a2:	bf00      	nop

080138a4 <TIM_OC3PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 80138a4:	b480      	push	{r7}
 80138a6:	b085      	sub	sp, #20
 80138a8:	af00      	add	r7, sp, #0
 80138aa:	6078      	str	r0, [r7, #4]
 80138ac:	460b      	mov	r3, r1
 80138ae:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 80138b0:	2300      	movs	r3, #0
 80138b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	8c1b      	ldrh	r3, [r3, #32]
 80138b8:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80138ba:	89fb      	ldrh	r3, [r7, #14]
 80138bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80138c0:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 80138c2:	887b      	ldrh	r3, [r7, #2]
 80138c4:	021b      	lsls	r3, r3, #8
 80138c6:	b29a      	uxth	r2, r3
 80138c8:	89fb      	ldrh	r3, [r7, #14]
 80138ca:	4313      	orrs	r3, r2
 80138cc:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	89fa      	ldrh	r2, [r7, #14]
 80138d2:	841a      	strh	r2, [r3, #32]
}
 80138d4:	3714      	adds	r7, #20
 80138d6:	46bd      	mov	sp, r7
 80138d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138dc:	4770      	bx	lr
 80138de:	bf00      	nop

080138e0 <TIM_OC3NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 80138e0:	b480      	push	{r7}
 80138e2:	b085      	sub	sp, #20
 80138e4:	af00      	add	r7, sp, #0
 80138e6:	6078      	str	r0, [r7, #4]
 80138e8:	460b      	mov	r3, r1
 80138ea:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 80138ec:	2300      	movs	r3, #0
 80138ee:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	8c1b      	ldrh	r3, [r3, #32]
 80138f4:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 80138f6:	89fb      	ldrh	r3, [r7, #14]
 80138f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80138fc:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 80138fe:	887b      	ldrh	r3, [r7, #2]
 8013900:	021b      	lsls	r3, r3, #8
 8013902:	b29a      	uxth	r2, r3
 8013904:	89fb      	ldrh	r3, [r7, #14]
 8013906:	4313      	orrs	r3, r2
 8013908:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	89fa      	ldrh	r2, [r7, #14]
 801390e:	841a      	strh	r2, [r3, #32]
}
 8013910:	3714      	adds	r7, #20
 8013912:	46bd      	mov	sp, r7
 8013914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013918:	4770      	bx	lr
 801391a:	bf00      	nop

0801391c <TIM_OC4PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 801391c:	b480      	push	{r7}
 801391e:	b085      	sub	sp, #20
 8013920:	af00      	add	r7, sp, #0
 8013922:	6078      	str	r0, [r7, #4]
 8013924:	460b      	mov	r3, r1
 8013926:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8013928:	2300      	movs	r3, #0
 801392a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	8c1b      	ldrh	r3, [r3, #32]
 8013930:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8013932:	89fb      	ldrh	r3, [r7, #14]
 8013934:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013938:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 801393a:	887b      	ldrh	r3, [r7, #2]
 801393c:	031b      	lsls	r3, r3, #12
 801393e:	b29a      	uxth	r2, r3
 8013940:	89fb      	ldrh	r3, [r7, #14]
 8013942:	4313      	orrs	r3, r2
 8013944:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	89fa      	ldrh	r2, [r7, #14]
 801394a:	841a      	strh	r2, [r3, #32]
}
 801394c:	3714      	adds	r7, #20
 801394e:	46bd      	mov	sp, r7
 8013950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013954:	4770      	bx	lr
 8013956:	bf00      	nop

08013958 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8013958:	b480      	push	{r7}
 801395a:	b085      	sub	sp, #20
 801395c:	af00      	add	r7, sp, #0
 801395e:	6078      	str	r0, [r7, #4]
 8013960:	4613      	mov	r3, r2
 8013962:	460a      	mov	r2, r1
 8013964:	807a      	strh	r2, [r7, #2]
 8013966:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8013968:	2300      	movs	r3, #0
 801396a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 801396c:	887b      	ldrh	r3, [r7, #2]
 801396e:	2201      	movs	r2, #1
 8013970:	fa02 f303 	lsl.w	r3, r2, r3
 8013974:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	8c1b      	ldrh	r3, [r3, #32]
 801397a:	b29a      	uxth	r2, r3
 801397c:	89fb      	ldrh	r3, [r7, #14]
 801397e:	43db      	mvns	r3, r3
 8013980:	b29b      	uxth	r3, r3
 8013982:	4013      	ands	r3, r2
 8013984:	b29a      	uxth	r2, r3
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	8c1b      	ldrh	r3, [r3, #32]
 801398e:	b29a      	uxth	r2, r3
 8013990:	8839      	ldrh	r1, [r7, #0]
 8013992:	887b      	ldrh	r3, [r7, #2]
 8013994:	fa01 f303 	lsl.w	r3, r1, r3
 8013998:	b29b      	uxth	r3, r3
 801399a:	4313      	orrs	r3, r2
 801399c:	b29a      	uxth	r2, r3
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	841a      	strh	r2, [r3, #32]
}
 80139a2:	3714      	adds	r7, #20
 80139a4:	46bd      	mov	sp, r7
 80139a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139aa:	4770      	bx	lr

080139ac <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 80139ac:	b480      	push	{r7}
 80139ae:	b085      	sub	sp, #20
 80139b0:	af00      	add	r7, sp, #0
 80139b2:	6078      	str	r0, [r7, #4]
 80139b4:	4613      	mov	r3, r2
 80139b6:	460a      	mov	r2, r1
 80139b8:	807a      	strh	r2, [r7, #2]
 80139ba:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 80139bc:	2300      	movs	r3, #0
 80139be:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 80139c0:	887b      	ldrh	r3, [r7, #2]
 80139c2:	2204      	movs	r2, #4
 80139c4:	fa02 f303 	lsl.w	r3, r2, r3
 80139c8:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	8c1b      	ldrh	r3, [r3, #32]
 80139ce:	b29a      	uxth	r2, r3
 80139d0:	89fb      	ldrh	r3, [r7, #14]
 80139d2:	43db      	mvns	r3, r3
 80139d4:	b29b      	uxth	r3, r3
 80139d6:	4013      	ands	r3, r2
 80139d8:	b29a      	uxth	r2, r3
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	8c1b      	ldrh	r3, [r3, #32]
 80139e2:	b29a      	uxth	r2, r3
 80139e4:	8839      	ldrh	r1, [r7, #0]
 80139e6:	887b      	ldrh	r3, [r7, #2]
 80139e8:	fa01 f303 	lsl.w	r3, r1, r3
 80139ec:	b29b      	uxth	r3, r3
 80139ee:	4313      	orrs	r3, r2
 80139f0:	b29a      	uxth	r2, r3
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	841a      	strh	r2, [r3, #32]
}
 80139f6:	3714      	adds	r7, #20
 80139f8:	46bd      	mov	sp, r7
 80139fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139fe:	4770      	bx	lr

08013a00 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8013a00:	b580      	push	{r7, lr}
 8013a02:	b082      	sub	sp, #8
 8013a04:	af00      	add	r7, sp, #0
 8013a06:	6078      	str	r0, [r7, #4]
 8013a08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8013a0a:	683b      	ldr	r3, [r7, #0]
 8013a0c:	881b      	ldrh	r3, [r3, #0]
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d10f      	bne.n	8013a32 <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8013a12:	683b      	ldr	r3, [r7, #0]
 8013a14:	8859      	ldrh	r1, [r3, #2]
 8013a16:	683b      	ldr	r3, [r7, #0]
 8013a18:	889a      	ldrh	r2, [r3, #4]
 8013a1a:	683b      	ldr	r3, [r7, #0]
 8013a1c:	891b      	ldrh	r3, [r3, #8]
 8013a1e:	6878      	ldr	r0, [r7, #4]
 8013a20:	f000 fc92 	bl	8014348 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8013a24:	683b      	ldr	r3, [r7, #0]
 8013a26:	88db      	ldrh	r3, [r3, #6]
 8013a28:	6878      	ldr	r0, [r7, #4]
 8013a2a:	4619      	mov	r1, r3
 8013a2c:	f000 f8e0 	bl	8013bf0 <TIM_SetIC1Prescaler>
 8013a30:	e036      	b.n	8013aa0 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8013a32:	683b      	ldr	r3, [r7, #0]
 8013a34:	881b      	ldrh	r3, [r3, #0]
 8013a36:	2b04      	cmp	r3, #4
 8013a38:	d10f      	bne.n	8013a5a <TIM_ICInit+0x5a>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8013a3a:	683b      	ldr	r3, [r7, #0]
 8013a3c:	8859      	ldrh	r1, [r3, #2]
 8013a3e:	683b      	ldr	r3, [r7, #0]
 8013a40:	889a      	ldrh	r2, [r3, #4]
 8013a42:	683b      	ldr	r3, [r7, #0]
 8013a44:	891b      	ldrh	r3, [r3, #8]
 8013a46:	6878      	ldr	r0, [r7, #4]
 8013a48:	f000 fcba 	bl	80143c0 <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8013a4c:	683b      	ldr	r3, [r7, #0]
 8013a4e:	88db      	ldrh	r3, [r3, #6]
 8013a50:	6878      	ldr	r0, [r7, #4]
 8013a52:	4619      	mov	r1, r3
 8013a54:	f000 f8e8 	bl	8013c28 <TIM_SetIC2Prescaler>
 8013a58:	e022      	b.n	8013aa0 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8013a5a:	683b      	ldr	r3, [r7, #0]
 8013a5c:	881b      	ldrh	r3, [r3, #0]
 8013a5e:	2b08      	cmp	r3, #8
 8013a60:	d10f      	bne.n	8013a82 <TIM_ICInit+0x82>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8013a62:	683b      	ldr	r3, [r7, #0]
 8013a64:	8859      	ldrh	r1, [r3, #2]
 8013a66:	683b      	ldr	r3, [r7, #0]
 8013a68:	889a      	ldrh	r2, [r3, #4]
 8013a6a:	683b      	ldr	r3, [r7, #0]
 8013a6c:	891b      	ldrh	r3, [r3, #8]
 8013a6e:	6878      	ldr	r0, [r7, #4]
 8013a70:	f000 fcec 	bl	801444c <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8013a74:	683b      	ldr	r3, [r7, #0]
 8013a76:	88db      	ldrh	r3, [r3, #6]
 8013a78:	6878      	ldr	r0, [r7, #4]
 8013a7a:	4619      	mov	r1, r3
 8013a7c:	f000 f8f2 	bl	8013c64 <TIM_SetIC3Prescaler>
 8013a80:	e00e      	b.n	8013aa0 <TIM_ICInit+0xa0>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8013a82:	683b      	ldr	r3, [r7, #0]
 8013a84:	8859      	ldrh	r1, [r3, #2]
 8013a86:	683b      	ldr	r3, [r7, #0]
 8013a88:	889a      	ldrh	r2, [r3, #4]
 8013a8a:	683b      	ldr	r3, [r7, #0]
 8013a8c:	891b      	ldrh	r3, [r3, #8]
 8013a8e:	6878      	ldr	r0, [r7, #4]
 8013a90:	f000 fd1e 	bl	80144d0 <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8013a94:	683b      	ldr	r3, [r7, #0]
 8013a96:	88db      	ldrh	r3, [r3, #6]
 8013a98:	6878      	ldr	r0, [r7, #4]
 8013a9a:	4619      	mov	r1, r3
 8013a9c:	f000 f8fe 	bl	8013c9c <TIM_SetIC4Prescaler>
  }
}
 8013aa0:	3708      	adds	r7, #8
 8013aa2:	46bd      	mov	sp, r7
 8013aa4:	bd80      	pop	{r7, pc}
 8013aa6:	bf00      	nop

08013aa8 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8013aa8:	b480      	push	{r7}
 8013aaa:	b083      	sub	sp, #12
 8013aac:	af00      	add	r7, sp, #0
 8013aae:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	2200      	movs	r2, #0
 8013ab4:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	2200      	movs	r2, #0
 8013aba:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	2201      	movs	r2, #1
 8013ac0:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	2200      	movs	r2, #0
 8013ac6:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	2200      	movs	r2, #0
 8013acc:	811a      	strh	r2, [r3, #8]
}
 8013ace:	370c      	adds	r7, #12
 8013ad0:	46bd      	mov	sp, r7
 8013ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ad6:	4770      	bx	lr

08013ad8 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8013ad8:	b580      	push	{r7, lr}
 8013ada:	b084      	sub	sp, #16
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	6078      	str	r0, [r7, #4]
 8013ae0:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 8013ae2:	2300      	movs	r3, #0
 8013ae4:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 8013ae6:	2301      	movs	r3, #1
 8013ae8:	81bb      	strh	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8013aea:	683b      	ldr	r3, [r7, #0]
 8013aec:	885b      	ldrh	r3, [r3, #2]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d102      	bne.n	8013af8 <TIM_PWMIConfig+0x20>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 8013af2:	2302      	movs	r3, #2
 8013af4:	81fb      	strh	r3, [r7, #14]
 8013af6:	e001      	b.n	8013afc <TIM_PWMIConfig+0x24>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 8013af8:	2300      	movs	r3, #0
 8013afa:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8013afc:	683b      	ldr	r3, [r7, #0]
 8013afe:	889b      	ldrh	r3, [r3, #4]
 8013b00:	2b01      	cmp	r3, #1
 8013b02:	d102      	bne.n	8013b0a <TIM_PWMIConfig+0x32>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 8013b04:	2302      	movs	r3, #2
 8013b06:	81bb      	strh	r3, [r7, #12]
 8013b08:	e001      	b.n	8013b0e <TIM_PWMIConfig+0x36>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 8013b0a:	2301      	movs	r3, #1
 8013b0c:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8013b0e:	683b      	ldr	r3, [r7, #0]
 8013b10:	881b      	ldrh	r3, [r3, #0]
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d11c      	bne.n	8013b50 <TIM_PWMIConfig+0x78>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8013b16:	683b      	ldr	r3, [r7, #0]
 8013b18:	8859      	ldrh	r1, [r3, #2]
 8013b1a:	683b      	ldr	r3, [r7, #0]
 8013b1c:	889a      	ldrh	r2, [r3, #4]
 8013b1e:	683b      	ldr	r3, [r7, #0]
 8013b20:	891b      	ldrh	r3, [r3, #8]
 8013b22:	6878      	ldr	r0, [r7, #4]
 8013b24:	f000 fc10 	bl	8014348 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8013b28:	683b      	ldr	r3, [r7, #0]
 8013b2a:	88db      	ldrh	r3, [r3, #6]
 8013b2c:	6878      	ldr	r0, [r7, #4]
 8013b2e:	4619      	mov	r1, r3
 8013b30:	f000 f85e 	bl	8013bf0 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8013b34:	683b      	ldr	r3, [r7, #0]
 8013b36:	891b      	ldrh	r3, [r3, #8]
 8013b38:	89f9      	ldrh	r1, [r7, #14]
 8013b3a:	89ba      	ldrh	r2, [r7, #12]
 8013b3c:	6878      	ldr	r0, [r7, #4]
 8013b3e:	f000 fc3f 	bl	80143c0 <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8013b42:	683b      	ldr	r3, [r7, #0]
 8013b44:	88db      	ldrh	r3, [r3, #6]
 8013b46:	6878      	ldr	r0, [r7, #4]
 8013b48:	4619      	mov	r1, r3
 8013b4a:	f000 f86d 	bl	8013c28 <TIM_SetIC2Prescaler>
 8013b4e:	e01b      	b.n	8013b88 <TIM_PWMIConfig+0xb0>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8013b50:	683b      	ldr	r3, [r7, #0]
 8013b52:	8859      	ldrh	r1, [r3, #2]
 8013b54:	683b      	ldr	r3, [r7, #0]
 8013b56:	889a      	ldrh	r2, [r3, #4]
 8013b58:	683b      	ldr	r3, [r7, #0]
 8013b5a:	891b      	ldrh	r3, [r3, #8]
 8013b5c:	6878      	ldr	r0, [r7, #4]
 8013b5e:	f000 fc2f 	bl	80143c0 <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8013b62:	683b      	ldr	r3, [r7, #0]
 8013b64:	88db      	ldrh	r3, [r3, #6]
 8013b66:	6878      	ldr	r0, [r7, #4]
 8013b68:	4619      	mov	r1, r3
 8013b6a:	f000 f85d 	bl	8013c28 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8013b6e:	683b      	ldr	r3, [r7, #0]
 8013b70:	891b      	ldrh	r3, [r3, #8]
 8013b72:	89f9      	ldrh	r1, [r7, #14]
 8013b74:	89ba      	ldrh	r2, [r7, #12]
 8013b76:	6878      	ldr	r0, [r7, #4]
 8013b78:	f000 fbe6 	bl	8014348 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8013b7c:	683b      	ldr	r3, [r7, #0]
 8013b7e:	88db      	ldrh	r3, [r3, #6]
 8013b80:	6878      	ldr	r0, [r7, #4]
 8013b82:	4619      	mov	r1, r3
 8013b84:	f000 f834 	bl	8013bf0 <TIM_SetIC1Prescaler>
  }
}
 8013b88:	3710      	adds	r7, #16
 8013b8a:	46bd      	mov	sp, r7
 8013b8c:	bd80      	pop	{r7, pc}
 8013b8e:	bf00      	nop

08013b90 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 8013b90:	b480      	push	{r7}
 8013b92:	b083      	sub	sp, #12
 8013b94:	af00      	add	r7, sp, #0
 8013b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8013b9c:	4618      	mov	r0, r3
 8013b9e:	370c      	adds	r7, #12
 8013ba0:	46bd      	mov	sp, r7
 8013ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ba6:	4770      	bx	lr

08013ba8 <TIM_GetCapture2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 8013ba8:	b480      	push	{r7}
 8013baa:	b083      	sub	sp, #12
 8013bac:	af00      	add	r7, sp, #0
 8013bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	370c      	adds	r7, #12
 8013bb8:	46bd      	mov	sp, r7
 8013bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bbe:	4770      	bx	lr

08013bc0 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 8013bc0:	b480      	push	{r7}
 8013bc2:	b083      	sub	sp, #12
 8013bc4:	af00      	add	r7, sp, #0
 8013bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8013bcc:	4618      	mov	r0, r3
 8013bce:	370c      	adds	r7, #12
 8013bd0:	46bd      	mov	sp, r7
 8013bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd6:	4770      	bx	lr

08013bd8 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 8013bd8:	b480      	push	{r7}
 8013bda:	b083      	sub	sp, #12
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8013be4:	4618      	mov	r0, r3
 8013be6:	370c      	adds	r7, #12
 8013be8:	46bd      	mov	sp, r7
 8013bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bee:	4770      	bx	lr

08013bf0 <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8013bf0:	b480      	push	{r7}
 8013bf2:	b083      	sub	sp, #12
 8013bf4:	af00      	add	r7, sp, #0
 8013bf6:	6078      	str	r0, [r7, #4]
 8013bf8:	460b      	mov	r3, r1
 8013bfa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	8b1b      	ldrh	r3, [r3, #24]
 8013c00:	b29b      	uxth	r3, r3
 8013c02:	f023 030c 	bic.w	r3, r3, #12
 8013c06:	b29a      	uxth	r2, r3
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	831a      	strh	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	8b1b      	ldrh	r3, [r3, #24]
 8013c10:	b29a      	uxth	r2, r3
 8013c12:	887b      	ldrh	r3, [r7, #2]
 8013c14:	4313      	orrs	r3, r2
 8013c16:	b29a      	uxth	r2, r3
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	831a      	strh	r2, [r3, #24]
}
 8013c1c:	370c      	adds	r7, #12
 8013c1e:	46bd      	mov	sp, r7
 8013c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c24:	4770      	bx	lr
 8013c26:	bf00      	nop

08013c28 <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8013c28:	b480      	push	{r7}
 8013c2a:	b083      	sub	sp, #12
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	6078      	str	r0, [r7, #4]
 8013c30:	460b      	mov	r3, r1
 8013c32:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	8b1b      	ldrh	r3, [r3, #24]
 8013c38:	b29b      	uxth	r3, r3
 8013c3a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8013c3e:	b29a      	uxth	r2, r3
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	831a      	strh	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	8b1b      	ldrh	r3, [r3, #24]
 8013c48:	b29a      	uxth	r2, r3
 8013c4a:	887b      	ldrh	r3, [r7, #2]
 8013c4c:	021b      	lsls	r3, r3, #8
 8013c4e:	b29b      	uxth	r3, r3
 8013c50:	4313      	orrs	r3, r2
 8013c52:	b29a      	uxth	r2, r3
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	831a      	strh	r2, [r3, #24]
}
 8013c58:	370c      	adds	r7, #12
 8013c5a:	46bd      	mov	sp, r7
 8013c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c60:	4770      	bx	lr
 8013c62:	bf00      	nop

08013c64 <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8013c64:	b480      	push	{r7}
 8013c66:	b083      	sub	sp, #12
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	6078      	str	r0, [r7, #4]
 8013c6c:	460b      	mov	r3, r1
 8013c6e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	8b9b      	ldrh	r3, [r3, #28]
 8013c74:	b29b      	uxth	r3, r3
 8013c76:	f023 030c 	bic.w	r3, r3, #12
 8013c7a:	b29a      	uxth	r2, r3
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	839a      	strh	r2, [r3, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	8b9b      	ldrh	r3, [r3, #28]
 8013c84:	b29a      	uxth	r2, r3
 8013c86:	887b      	ldrh	r3, [r7, #2]
 8013c88:	4313      	orrs	r3, r2
 8013c8a:	b29a      	uxth	r2, r3
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	839a      	strh	r2, [r3, #28]
}
 8013c90:	370c      	adds	r7, #12
 8013c92:	46bd      	mov	sp, r7
 8013c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c98:	4770      	bx	lr
 8013c9a:	bf00      	nop

08013c9c <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 8013c9c:	b480      	push	{r7}
 8013c9e:	b083      	sub	sp, #12
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	6078      	str	r0, [r7, #4]
 8013ca4:	460b      	mov	r3, r1
 8013ca6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	8b9b      	ldrh	r3, [r3, #28]
 8013cac:	b29b      	uxth	r3, r3
 8013cae:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8013cb2:	b29a      	uxth	r2, r3
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	839a      	strh	r2, [r3, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	8b9b      	ldrh	r3, [r3, #28]
 8013cbc:	b29a      	uxth	r2, r3
 8013cbe:	887b      	ldrh	r3, [r7, #2]
 8013cc0:	021b      	lsls	r3, r3, #8
 8013cc2:	b29b      	uxth	r3, r3
 8013cc4:	4313      	orrs	r3, r2
 8013cc6:	b29a      	uxth	r2, r3
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	839a      	strh	r2, [r3, #28]
}
 8013ccc:	370c      	adds	r7, #12
 8013cce:	46bd      	mov	sp, r7
 8013cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cd4:	4770      	bx	lr
 8013cd6:	bf00      	nop

08013cd8 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 8013cd8:	b480      	push	{r7}
 8013cda:	b083      	sub	sp, #12
 8013cdc:	af00      	add	r7, sp, #0
 8013cde:	6078      	str	r0, [r7, #4]
 8013ce0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8013ce2:	683b      	ldr	r3, [r7, #0]
 8013ce4:	881a      	ldrh	r2, [r3, #0]
 8013ce6:	683b      	ldr	r3, [r7, #0]
 8013ce8:	885b      	ldrh	r3, [r3, #2]
 8013cea:	4313      	orrs	r3, r2
 8013cec:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8013cee:	683b      	ldr	r3, [r7, #0]
 8013cf0:	889b      	ldrh	r3, [r3, #4]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8013cf2:	4313      	orrs	r3, r2
 8013cf4:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8013cf6:	683b      	ldr	r3, [r7, #0]
 8013cf8:	88db      	ldrh	r3, [r3, #6]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8013cfa:	4313      	orrs	r3, r2
 8013cfc:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8013cfe:	683b      	ldr	r3, [r7, #0]
 8013d00:	891b      	ldrh	r3, [r3, #8]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8013d02:	4313      	orrs	r3, r2
 8013d04:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8013d06:	683b      	ldr	r3, [r7, #0]
 8013d08:	895b      	ldrh	r3, [r3, #10]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8013d0a:	4313      	orrs	r3, r2
 8013d0c:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
 8013d0e:	683b      	ldr	r3, [r7, #0]
 8013d10:	899b      	ldrh	r3, [r3, #12]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8013d12:	4313      	orrs	r3, r2
 8013d14:	b29a      	uxth	r2, r3
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 8013d1c:	370c      	adds	r7, #12
 8013d1e:	46bd      	mov	sp, r7
 8013d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d24:	4770      	bx	lr
 8013d26:	bf00      	nop

08013d28 <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
 8013d28:	b480      	push	{r7}
 8013d2a:	b083      	sub	sp, #12
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	2200      	movs	r2, #0
 8013d34:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	2200      	movs	r2, #0
 8013d3a:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	2200      	movs	r2, #0
 8013d40:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	2200      	movs	r2, #0
 8013d46:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	2200      	movs	r2, #0
 8013d4c:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	2200      	movs	r2, #0
 8013d52:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	2200      	movs	r2, #0
 8013d58:	819a      	strh	r2, [r3, #12]
}
 8013d5a:	370c      	adds	r7, #12
 8013d5c:	46bd      	mov	sp, r7
 8013d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d62:	4770      	bx	lr

08013d64 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8013d64:	b480      	push	{r7}
 8013d66:	b083      	sub	sp, #12
 8013d68:	af00      	add	r7, sp, #0
 8013d6a:	6078      	str	r0, [r7, #4]
 8013d6c:	460b      	mov	r3, r1
 8013d6e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8013d70:	78fb      	ldrb	r3, [r7, #3]
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d00c      	beq.n	8013d90 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8013d7c:	b29b      	uxth	r3, r3
 8013d7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013d82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013d86:	b29a      	uxth	r2, r3
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8013d8e:	e009      	b.n	8013da4 <TIM_CtrlPWMOutputs+0x40>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8013d96:	b29b      	uxth	r3, r3
 8013d98:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8013d9c:	b29a      	uxth	r2, r3
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }  
}
 8013da4:	370c      	adds	r7, #12
 8013da6:	46bd      	mov	sp, r7
 8013da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dac:	4770      	bx	lr
 8013dae:	bf00      	nop

08013db0 <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8013db0:	b480      	push	{r7}
 8013db2:	b083      	sub	sp, #12
 8013db4:	af00      	add	r7, sp, #0
 8013db6:	6078      	str	r0, [r7, #4]
 8013db8:	460b      	mov	r3, r1
 8013dba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8013dbc:	78fb      	ldrb	r3, [r7, #3]
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d008      	beq.n	8013dd4 <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	889b      	ldrh	r3, [r3, #4]
 8013dc6:	b29b      	uxth	r3, r3
 8013dc8:	f043 0304 	orr.w	r3, r3, #4
 8013dcc:	b29a      	uxth	r2, r3
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	809a      	strh	r2, [r3, #4]
 8013dd2:	e007      	b.n	8013de4 <TIM_SelectCOM+0x34>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	889b      	ldrh	r3, [r3, #4]
 8013dd8:	b29b      	uxth	r3, r3
 8013dda:	f023 0304 	bic.w	r3, r3, #4
 8013dde:	b29a      	uxth	r2, r3
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	809a      	strh	r2, [r3, #4]
  }
}
 8013de4:	370c      	adds	r7, #12
 8013de6:	46bd      	mov	sp, r7
 8013de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dec:	4770      	bx	lr
 8013dee:	bf00      	nop

08013df0 <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
 8013df0:	b480      	push	{r7}
 8013df2:	b083      	sub	sp, #12
 8013df4:	af00      	add	r7, sp, #0
 8013df6:	6078      	str	r0, [r7, #4]
 8013df8:	460b      	mov	r3, r1
 8013dfa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8013dfc:	78fb      	ldrb	r3, [r7, #3]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d008      	beq.n	8013e14 <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	889b      	ldrh	r3, [r3, #4]
 8013e06:	b29b      	uxth	r3, r3
 8013e08:	f043 0301 	orr.w	r3, r3, #1
 8013e0c:	b29a      	uxth	r2, r3
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	809a      	strh	r2, [r3, #4]
 8013e12:	e007      	b.n	8013e24 <TIM_CCPreloadControl+0x34>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	889b      	ldrh	r3, [r3, #4]
 8013e18:	b29b      	uxth	r3, r3
 8013e1a:	f023 0301 	bic.w	r3, r3, #1
 8013e1e:	b29a      	uxth	r2, r3
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	809a      	strh	r2, [r3, #4]
  }
}
 8013e24:	370c      	adds	r7, #12
 8013e26:	46bd      	mov	sp, r7
 8013e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e2c:	4770      	bx	lr
 8013e2e:	bf00      	nop

08013e30 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8013e30:	b480      	push	{r7}
 8013e32:	b083      	sub	sp, #12
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	6078      	str	r0, [r7, #4]
 8013e38:	4613      	mov	r3, r2
 8013e3a:	460a      	mov	r2, r1
 8013e3c:	807a      	strh	r2, [r7, #2]
 8013e3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8013e40:	787b      	ldrb	r3, [r7, #1]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d008      	beq.n	8013e58 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	899b      	ldrh	r3, [r3, #12]
 8013e4a:	b29a      	uxth	r2, r3
 8013e4c:	887b      	ldrh	r3, [r7, #2]
 8013e4e:	4313      	orrs	r3, r2
 8013e50:	b29a      	uxth	r2, r3
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	819a      	strh	r2, [r3, #12]
 8013e56:	e009      	b.n	8013e6c <TIM_ITConfig+0x3c>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	899b      	ldrh	r3, [r3, #12]
 8013e5c:	b29a      	uxth	r2, r3
 8013e5e:	887b      	ldrh	r3, [r7, #2]
 8013e60:	43db      	mvns	r3, r3
 8013e62:	b29b      	uxth	r3, r3
 8013e64:	4013      	ands	r3, r2
 8013e66:	b29a      	uxth	r2, r3
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	819a      	strh	r2, [r3, #12]
  }
}
 8013e6c:	370c      	adds	r7, #12
 8013e6e:	46bd      	mov	sp, r7
 8013e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e74:	4770      	bx	lr
 8013e76:	bf00      	nop

08013e78 <TIM_GenerateEvent>:
  * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.
  *        
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
 8013e78:	b480      	push	{r7}
 8013e7a:	b083      	sub	sp, #12
 8013e7c:	af00      	add	r7, sp, #0
 8013e7e:	6078      	str	r0, [r7, #4]
 8013e80:	460b      	mov	r3, r1
 8013e82:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	887a      	ldrh	r2, [r7, #2]
 8013e88:	829a      	strh	r2, [r3, #20]
}
 8013e8a:	370c      	adds	r7, #12
 8013e8c:	46bd      	mov	sp, r7
 8013e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e92:	4770      	bx	lr

08013e94 <TIM_GetFlagStatus>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
  *
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
 8013e94:	b480      	push	{r7}
 8013e96:	b085      	sub	sp, #20
 8013e98:	af00      	add	r7, sp, #0
 8013e9a:	6078      	str	r0, [r7, #4]
 8013e9c:	460b      	mov	r3, r1
 8013e9e:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8013ea0:	2300      	movs	r3, #0
 8013ea2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	8a1b      	ldrh	r3, [r3, #16]
 8013ea8:	b29a      	uxth	r2, r3
 8013eaa:	887b      	ldrh	r3, [r7, #2]
 8013eac:	4013      	ands	r3, r2
 8013eae:	b29b      	uxth	r3, r3
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d002      	beq.n	8013eba <TIM_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8013eb4:	2301      	movs	r3, #1
 8013eb6:	73fb      	strb	r3, [r7, #15]
 8013eb8:	e001      	b.n	8013ebe <TIM_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8013eba:	2300      	movs	r3, #0
 8013ebc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8013ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	3714      	adds	r7, #20
 8013ec4:	46bd      	mov	sp, r7
 8013ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eca:	4770      	bx	lr

08013ecc <TIM_ClearFlag>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.
  *    
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 8013ecc:	b480      	push	{r7}
 8013ece:	b083      	sub	sp, #12
 8013ed0:	af00      	add	r7, sp, #0
 8013ed2:	6078      	str	r0, [r7, #4]
 8013ed4:	460b      	mov	r3, r1
 8013ed6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8013ed8:	887b      	ldrh	r3, [r7, #2]
 8013eda:	43db      	mvns	r3, r3
 8013edc:	b29a      	uxth	r2, r3
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	821a      	strh	r2, [r3, #16]
}
 8013ee2:	370c      	adds	r7, #12
 8013ee4:	46bd      	mov	sp, r7
 8013ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eea:	4770      	bx	lr

08013eec <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8013eec:	b480      	push	{r7}
 8013eee:	b085      	sub	sp, #20
 8013ef0:	af00      	add	r7, sp, #0
 8013ef2:	6078      	str	r0, [r7, #4]
 8013ef4:	460b      	mov	r3, r1
 8013ef6:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8013ef8:	2300      	movs	r3, #0
 8013efa:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8013efc:	2300      	movs	r3, #0
 8013efe:	81bb      	strh	r3, [r7, #12]
 8013f00:	2300      	movs	r3, #0
 8013f02:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	8a1b      	ldrh	r3, [r3, #16]
 8013f08:	b29a      	uxth	r2, r3
 8013f0a:	887b      	ldrh	r3, [r7, #2]
 8013f0c:	4013      	ands	r3, r2
 8013f0e:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	899b      	ldrh	r3, [r3, #12]
 8013f14:	b29a      	uxth	r2, r3
 8013f16:	887b      	ldrh	r3, [r7, #2]
 8013f18:	4013      	ands	r3, r2
 8013f1a:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8013f1c:	89bb      	ldrh	r3, [r7, #12]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d005      	beq.n	8013f2e <TIM_GetITStatus+0x42>
 8013f22:	897b      	ldrh	r3, [r7, #10]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d002      	beq.n	8013f2e <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8013f28:	2301      	movs	r3, #1
 8013f2a:	73fb      	strb	r3, [r7, #15]
 8013f2c:	e001      	b.n	8013f32 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8013f2e:	2300      	movs	r3, #0
 8013f30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8013f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f34:	4618      	mov	r0, r3
 8013f36:	3714      	adds	r7, #20
 8013f38:	46bd      	mov	sp, r7
 8013f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f3e:	4770      	bx	lr

08013f40 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8013f40:	b480      	push	{r7}
 8013f42:	b083      	sub	sp, #12
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	6078      	str	r0, [r7, #4]
 8013f48:	460b      	mov	r3, r1
 8013f4a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8013f4c:	887b      	ldrh	r3, [r7, #2]
 8013f4e:	43db      	mvns	r3, r3
 8013f50:	b29a      	uxth	r2, r3
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	821a      	strh	r2, [r3, #16]
}
 8013f56:	370c      	adds	r7, #12
 8013f58:	46bd      	mov	sp, r7
 8013f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f5e:	4770      	bx	lr

08013f60 <TIM_DMAConfig>:
  * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
  *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
 8013f60:	b480      	push	{r7}
 8013f62:	b083      	sub	sp, #12
 8013f64:	af00      	add	r7, sp, #0
 8013f66:	6078      	str	r0, [r7, #4]
 8013f68:	4613      	mov	r3, r2
 8013f6a:	460a      	mov	r2, r1
 8013f6c:	807a      	strh	r2, [r7, #2]
 8013f6e:	803b      	strh	r3, [r7, #0]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 8013f70:	887a      	ldrh	r2, [r7, #2]
 8013f72:	883b      	ldrh	r3, [r7, #0]
 8013f74:	4313      	orrs	r3, r2
 8013f76:	b29a      	uxth	r2, r3
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 8013f7e:	370c      	adds	r7, #12
 8013f80:	46bd      	mov	sp, r7
 8013f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f86:	4770      	bx	lr

08013f88 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 8013f88:	b480      	push	{r7}
 8013f8a:	b083      	sub	sp, #12
 8013f8c:	af00      	add	r7, sp, #0
 8013f8e:	6078      	str	r0, [r7, #4]
 8013f90:	4613      	mov	r3, r2
 8013f92:	460a      	mov	r2, r1
 8013f94:	807a      	strh	r2, [r7, #2]
 8013f96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8013f98:	787b      	ldrb	r3, [r7, #1]
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d008      	beq.n	8013fb0 <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	899b      	ldrh	r3, [r3, #12]
 8013fa2:	b29a      	uxth	r2, r3
 8013fa4:	887b      	ldrh	r3, [r7, #2]
 8013fa6:	4313      	orrs	r3, r2
 8013fa8:	b29a      	uxth	r2, r3
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	819a      	strh	r2, [r3, #12]
 8013fae:	e009      	b.n	8013fc4 <TIM_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	899b      	ldrh	r3, [r3, #12]
 8013fb4:	b29a      	uxth	r2, r3
 8013fb6:	887b      	ldrh	r3, [r7, #2]
 8013fb8:	43db      	mvns	r3, r3
 8013fba:	b29b      	uxth	r3, r3
 8013fbc:	4013      	ands	r3, r2
 8013fbe:	b29a      	uxth	r2, r3
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	819a      	strh	r2, [r3, #12]
  }
}
 8013fc4:	370c      	adds	r7, #12
 8013fc6:	46bd      	mov	sp, r7
 8013fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fcc:	4770      	bx	lr
 8013fce:	bf00      	nop

08013fd0 <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8013fd0:	b480      	push	{r7}
 8013fd2:	b083      	sub	sp, #12
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	6078      	str	r0, [r7, #4]
 8013fd8:	460b      	mov	r3, r1
 8013fda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8013fdc:	78fb      	ldrb	r3, [r7, #3]
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d008      	beq.n	8013ff4 <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	889b      	ldrh	r3, [r3, #4]
 8013fe6:	b29b      	uxth	r3, r3
 8013fe8:	f043 0308 	orr.w	r3, r3, #8
 8013fec:	b29a      	uxth	r2, r3
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	809a      	strh	r2, [r3, #4]
 8013ff2:	e007      	b.n	8014004 <TIM_SelectCCDMA+0x34>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	889b      	ldrh	r3, [r3, #4]
 8013ff8:	b29b      	uxth	r3, r3
 8013ffa:	f023 0308 	bic.w	r3, r3, #8
 8013ffe:	b29a      	uxth	r2, r3
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	809a      	strh	r2, [r3, #4]
  }
}
 8014004:	370c      	adds	r7, #12
 8014006:	46bd      	mov	sp, r7
 8014008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801400c:	4770      	bx	lr
 801400e:	bf00      	nop

08014010 <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
 8014010:	b480      	push	{r7}
 8014012:	b083      	sub	sp, #12
 8014014:	af00      	add	r7, sp, #0
 8014016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	891b      	ldrh	r3, [r3, #8]
 801401c:	b29b      	uxth	r3, r3
 801401e:	f023 0307 	bic.w	r3, r3, #7
 8014022:	b29a      	uxth	r2, r3
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	811a      	strh	r2, [r3, #8]
}
 8014028:	370c      	adds	r7, #12
 801402a:	46bd      	mov	sp, r7
 801402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014030:	4770      	bx	lr
 8014032:	bf00      	nop

08014034 <TIM_ITRxExternalClockConfig>:
  *            @arg TIM_TS_ITR2: Internal Trigger 2
  *            @arg TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8014034:	b580      	push	{r7, lr}
 8014036:	b082      	sub	sp, #8
 8014038:	af00      	add	r7, sp, #0
 801403a:	6078      	str	r0, [r7, #4]
 801403c:	460b      	mov	r3, r1
 801403e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 8014040:	887b      	ldrh	r3, [r7, #2]
 8014042:	6878      	ldr	r0, [r7, #4]
 8014044:	4619      	mov	r1, r3
 8014046:	f000 f875 	bl	8014134 <TIM_SelectInputTrigger>

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	891b      	ldrh	r3, [r3, #8]
 801404e:	b29b      	uxth	r3, r3
 8014050:	f043 0307 	orr.w	r3, r3, #7
 8014054:	b29a      	uxth	r2, r3
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	811a      	strh	r2, [r3, #8]
}
 801405a:	3708      	adds	r7, #8
 801405c:	46bd      	mov	sp, r7
 801405e:	bd80      	pop	{r7, pc}

08014060 <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 8014060:	b580      	push	{r7, lr}
 8014062:	b084      	sub	sp, #16
 8014064:	af00      	add	r7, sp, #0
 8014066:	60f8      	str	r0, [r7, #12]
 8014068:	8179      	strh	r1, [r7, #10]
 801406a:	813a      	strh	r2, [r7, #8]
 801406c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 801406e:	897b      	ldrh	r3, [r7, #10]
 8014070:	2b60      	cmp	r3, #96	; 0x60
 8014072:	d107      	bne.n	8014084 <TIM_TIxExternalClockConfig+0x24>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8014074:	893a      	ldrh	r2, [r7, #8]
 8014076:	88fb      	ldrh	r3, [r7, #6]
 8014078:	68f8      	ldr	r0, [r7, #12]
 801407a:	4611      	mov	r1, r2
 801407c:	2201      	movs	r2, #1
 801407e:	f000 f99f 	bl	80143c0 <TI2_Config>
 8014082:	e006      	b.n	8014092 <TIM_TIxExternalClockConfig+0x32>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8014084:	893a      	ldrh	r2, [r7, #8]
 8014086:	88fb      	ldrh	r3, [r7, #6]
 8014088:	68f8      	ldr	r0, [r7, #12]
 801408a:	4611      	mov	r1, r2
 801408c:	2201      	movs	r2, #1
 801408e:	f000 f95b 	bl	8014348 <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 8014092:	897b      	ldrh	r3, [r7, #10]
 8014094:	68f8      	ldr	r0, [r7, #12]
 8014096:	4619      	mov	r1, r3
 8014098:	f000 f84c 	bl	8014134 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	891b      	ldrh	r3, [r3, #8]
 80140a0:	b29b      	uxth	r3, r3
 80140a2:	f043 0307 	orr.w	r3, r3, #7
 80140a6:	b29a      	uxth	r2, r3
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	811a      	strh	r2, [r3, #8]
}
 80140ac:	3710      	adds	r7, #16
 80140ae:	46bd      	mov	sp, r7
 80140b0:	bd80      	pop	{r7, pc}
 80140b2:	bf00      	nop

080140b4 <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 80140b4:	b580      	push	{r7, lr}
 80140b6:	b086      	sub	sp, #24
 80140b8:	af00      	add	r7, sp, #0
 80140ba:	60f8      	str	r0, [r7, #12]
 80140bc:	8179      	strh	r1, [r7, #10]
 80140be:	813a      	strh	r2, [r7, #8]
 80140c0:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 80140c2:	2300      	movs	r3, #0
 80140c4:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 80140c6:	8979      	ldrh	r1, [r7, #10]
 80140c8:	893a      	ldrh	r2, [r7, #8]
 80140ca:	88fb      	ldrh	r3, [r7, #6]
 80140cc:	68f8      	ldr	r0, [r7, #12]
 80140ce:	f000 f8a1 	bl	8014214 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	891b      	ldrh	r3, [r3, #8]
 80140d6:	82fb      	strh	r3, [r7, #22]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80140d8:	8afb      	ldrh	r3, [r7, #22]
 80140da:	f023 0307 	bic.w	r3, r3, #7
 80140de:	82fb      	strh	r3, [r7, #22]

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 80140e0:	8afb      	ldrh	r3, [r7, #22]
 80140e2:	f043 0307 	orr.w	r3, r3, #7
 80140e6:	82fb      	strh	r3, [r7, #22]

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 80140e8:	8afb      	ldrh	r3, [r7, #22]
 80140ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80140ee:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
 80140f0:	8afb      	ldrh	r3, [r7, #22]
 80140f2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80140f6:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	8afa      	ldrh	r2, [r7, #22]
 80140fc:	811a      	strh	r2, [r3, #8]
}
 80140fe:	3718      	adds	r7, #24
 8014100:	46bd      	mov	sp, r7
 8014102:	bd80      	pop	{r7, pc}

08014104 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8014104:	b580      	push	{r7, lr}
 8014106:	b084      	sub	sp, #16
 8014108:	af00      	add	r7, sp, #0
 801410a:	60f8      	str	r0, [r7, #12]
 801410c:	8179      	strh	r1, [r7, #10]
 801410e:	813a      	strh	r2, [r7, #8]
 8014110:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8014112:	8979      	ldrh	r1, [r7, #10]
 8014114:	893a      	ldrh	r2, [r7, #8]
 8014116:	88fb      	ldrh	r3, [r7, #6]
 8014118:	68f8      	ldr	r0, [r7, #12]
 801411a:	f000 f87b 	bl	8014214 <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	891b      	ldrh	r3, [r3, #8]
 8014122:	b29b      	uxth	r3, r3
 8014124:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014128:	b29a      	uxth	r2, r3
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	811a      	strh	r2, [r3, #8]
}
 801412e:	3710      	adds	r7, #16
 8014130:	46bd      	mov	sp, r7
 8014132:	bd80      	pop	{r7, pc}

08014134 <TIM_SelectInputTrigger>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8014134:	b480      	push	{r7}
 8014136:	b085      	sub	sp, #20
 8014138:	af00      	add	r7, sp, #0
 801413a:	6078      	str	r0, [r7, #4]
 801413c:	460b      	mov	r3, r1
 801413e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
 8014140:	2300      	movs	r3, #0
 8014142:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	891b      	ldrh	r3, [r3, #8]
 8014148:	81fb      	strh	r3, [r7, #14]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 801414a:	89fb      	ldrh	r3, [r7, #14]
 801414c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014150:	81fb      	strh	r3, [r7, #14]

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8014152:	89fa      	ldrh	r2, [r7, #14]
 8014154:	887b      	ldrh	r3, [r7, #2]
 8014156:	4313      	orrs	r3, r2
 8014158:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	89fa      	ldrh	r2, [r7, #14]
 801415e:	811a      	strh	r2, [r3, #8]
}
 8014160:	3714      	adds	r7, #20
 8014162:	46bd      	mov	sp, r7
 8014164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014168:	4770      	bx	lr
 801416a:	bf00      	nop

0801416c <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 801416c:	b480      	push	{r7}
 801416e:	b083      	sub	sp, #12
 8014170:	af00      	add	r7, sp, #0
 8014172:	6078      	str	r0, [r7, #4]
 8014174:	460b      	mov	r3, r1
 8014176:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	889b      	ldrh	r3, [r3, #4]
 801417c:	b29b      	uxth	r3, r3
 801417e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014182:	b29a      	uxth	r2, r3
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	889b      	ldrh	r3, [r3, #4]
 801418c:	b29a      	uxth	r2, r3
 801418e:	887b      	ldrh	r3, [r7, #2]
 8014190:	4313      	orrs	r3, r2
 8014192:	b29a      	uxth	r2, r3
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	809a      	strh	r2, [r3, #4]
}
 8014198:	370c      	adds	r7, #12
 801419a:	46bd      	mov	sp, r7
 801419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141a0:	4770      	bx	lr
 80141a2:	bf00      	nop

080141a4 <TIM_SelectSlaveMode>:
  *            @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI
  *            @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
 80141a4:	b480      	push	{r7}
 80141a6:	b083      	sub	sp, #12
 80141a8:	af00      	add	r7, sp, #0
 80141aa:	6078      	str	r0, [r7, #4]
 80141ac:	460b      	mov	r3, r1
 80141ae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	891b      	ldrh	r3, [r3, #8]
 80141b4:	b29b      	uxth	r3, r3
 80141b6:	f023 0307 	bic.w	r3, r3, #7
 80141ba:	b29a      	uxth	r2, r3
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	811a      	strh	r2, [r3, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	891b      	ldrh	r3, [r3, #8]
 80141c4:	b29a      	uxth	r2, r3
 80141c6:	887b      	ldrh	r3, [r7, #2]
 80141c8:	4313      	orrs	r3, r2
 80141ca:	b29a      	uxth	r2, r3
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	811a      	strh	r2, [r3, #8]
}
 80141d0:	370c      	adds	r7, #12
 80141d2:	46bd      	mov	sp, r7
 80141d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d8:	4770      	bx	lr
 80141da:	bf00      	nop

080141dc <TIM_SelectMasterSlaveMode>:
  *                                             and its slaves (through TRGO)
  *            @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
 80141dc:	b480      	push	{r7}
 80141de:	b083      	sub	sp, #12
 80141e0:	af00      	add	r7, sp, #0
 80141e2:	6078      	str	r0, [r7, #4]
 80141e4:	460b      	mov	r3, r1
 80141e6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	891b      	ldrh	r3, [r3, #8]
 80141ec:	b29b      	uxth	r3, r3
 80141ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80141f2:	b29a      	uxth	r2, r3
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	891b      	ldrh	r3, [r3, #8]
 80141fc:	b29a      	uxth	r2, r3
 80141fe:	887b      	ldrh	r3, [r7, #2]
 8014200:	4313      	orrs	r3, r2
 8014202:	b29a      	uxth	r2, r3
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	811a      	strh	r2, [r3, #8]
}
 8014208:	370c      	adds	r7, #12
 801420a:	46bd      	mov	sp, r7
 801420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014210:	4770      	bx	lr
 8014212:	bf00      	nop

08014214 <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8014214:	b480      	push	{r7}
 8014216:	b087      	sub	sp, #28
 8014218:	af00      	add	r7, sp, #0
 801421a:	60f8      	str	r0, [r7, #12]
 801421c:	8179      	strh	r1, [r7, #10]
 801421e:	813a      	strh	r2, [r7, #8]
 8014220:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8014222:	2300      	movs	r3, #0
 8014224:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 8014226:	68fb      	ldr	r3, [r7, #12]
 8014228:	891b      	ldrh	r3, [r3, #8]
 801422a:	82fb      	strh	r3, [r7, #22]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 801422c:	8afb      	ldrh	r3, [r7, #22]
 801422e:	b2db      	uxtb	r3, r3
 8014230:	82fb      	strh	r3, [r7, #22]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8014232:	88fb      	ldrh	r3, [r7, #6]
 8014234:	021b      	lsls	r3, r3, #8
 8014236:	b29a      	uxth	r2, r3
 8014238:	893b      	ldrh	r3, [r7, #8]
 801423a:	4313      	orrs	r3, r2
 801423c:	b29a      	uxth	r2, r3
 801423e:	897b      	ldrh	r3, [r7, #10]
 8014240:	4313      	orrs	r3, r2
 8014242:	b29a      	uxth	r2, r3
 8014244:	8afb      	ldrh	r3, [r7, #22]
 8014246:	4313      	orrs	r3, r2
 8014248:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	8afa      	ldrh	r2, [r7, #22]
 801424e:	811a      	strh	r2, [r3, #8]
}
 8014250:	371c      	adds	r7, #28
 8014252:	46bd      	mov	sp, r7
 8014254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014258:	4770      	bx	lr
 801425a:	bf00      	nop

0801425c <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 801425c:	b480      	push	{r7}
 801425e:	b087      	sub	sp, #28
 8014260:	af00      	add	r7, sp, #0
 8014262:	60f8      	str	r0, [r7, #12]
 8014264:	8179      	strh	r1, [r7, #10]
 8014266:	813a      	strh	r2, [r7, #8]
 8014268:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 801426a:	2300      	movs	r3, #0
 801426c:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 801426e:	2300      	movs	r3, #0
 8014270:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 8014272:	2300      	movs	r3, #0
 8014274:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	891b      	ldrh	r3, [r3, #8]
 801427a:	82fb      	strh	r3, [r7, #22]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	8b1b      	ldrh	r3, [r3, #24]
 8014280:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014282:	68fb      	ldr	r3, [r7, #12]
 8014284:	8c1b      	ldrh	r3, [r3, #32]
 8014286:	827b      	strh	r3, [r7, #18]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8014288:	8afb      	ldrh	r3, [r7, #22]
 801428a:	f023 0307 	bic.w	r3, r3, #7
 801428e:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 8014290:	8afa      	ldrh	r2, [r7, #22]
 8014292:	897b      	ldrh	r3, [r7, #10]
 8014294:	4313      	orrs	r3, r2
 8014296:	82fb      	strh	r3, [r7, #22]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8014298:	8abb      	ldrh	r3, [r7, #20]
 801429a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801429e:	f023 0303 	bic.w	r3, r3, #3
 80142a2:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 80142a4:	8abb      	ldrh	r3, [r7, #20]
 80142a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80142aa:	f043 0301 	orr.w	r3, r3, #1
 80142ae:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 80142b0:	8a7b      	ldrh	r3, [r7, #18]
 80142b2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80142b6:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 80142b8:	88fb      	ldrh	r3, [r7, #6]
 80142ba:	011b      	lsls	r3, r3, #4
 80142bc:	b29a      	uxth	r2, r3
 80142be:	893b      	ldrh	r3, [r7, #8]
 80142c0:	4313      	orrs	r3, r2
 80142c2:	b29a      	uxth	r2, r3
 80142c4:	8a7b      	ldrh	r3, [r7, #18]
 80142c6:	4313      	orrs	r3, r2
 80142c8:	827b      	strh	r3, [r7, #18]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80142ca:	68fb      	ldr	r3, [r7, #12]
 80142cc:	8afa      	ldrh	r2, [r7, #22]
 80142ce:	811a      	strh	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80142d0:	68fb      	ldr	r3, [r7, #12]
 80142d2:	8aba      	ldrh	r2, [r7, #20]
 80142d4:	831a      	strh	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	8a7a      	ldrh	r2, [r7, #18]
 80142da:	841a      	strh	r2, [r3, #32]
}
 80142dc:	371c      	adds	r7, #28
 80142de:	46bd      	mov	sp, r7
 80142e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142e4:	4770      	bx	lr
 80142e6:	bf00      	nop

080142e8 <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80142e8:	b480      	push	{r7}
 80142ea:	b083      	sub	sp, #12
 80142ec:	af00      	add	r7, sp, #0
 80142ee:	6078      	str	r0, [r7, #4]
 80142f0:	460b      	mov	r3, r1
 80142f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80142f4:	78fb      	ldrb	r3, [r7, #3]
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d008      	beq.n	801430c <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	889b      	ldrh	r3, [r3, #4]
 80142fe:	b29b      	uxth	r3, r3
 8014300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014304:	b29a      	uxth	r2, r3
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	809a      	strh	r2, [r3, #4]
 801430a:	e007      	b.n	801431c <TIM_SelectHallSensor+0x34>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	889b      	ldrh	r3, [r3, #4]
 8014310:	b29b      	uxth	r3, r3
 8014312:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014316:	b29a      	uxth	r2, r3
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	809a      	strh	r2, [r3, #4]
  }
}
 801431c:	370c      	adds	r7, #12
 801431e:	46bd      	mov	sp, r7
 8014320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014324:	4770      	bx	lr
 8014326:	bf00      	nop

08014328 <TIM_RemapConfig>:
  *            @arg TIM11_HSE:      TIM11 CH4 input is connected to HSE_RTC clock
  *                                 (HSE divided by a programmable prescaler)  
  * @retval None
  */
void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
{
 8014328:	b480      	push	{r7}
 801432a:	b083      	sub	sp, #12
 801432c:	af00      	add	r7, sp, #0
 801432e:	6078      	str	r0, [r7, #4]
 8014330:	460b      	mov	r3, r1
 8014332:	807b      	strh	r3, [r7, #2]
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	887a      	ldrh	r2, [r7, #2]
 8014338:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 801433c:	370c      	adds	r7, #12
 801433e:	46bd      	mov	sp, r7
 8014340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014344:	4770      	bx	lr
 8014346:	bf00      	nop

08014348 <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8014348:	b480      	push	{r7}
 801434a:	b087      	sub	sp, #28
 801434c:	af00      	add	r7, sp, #0
 801434e:	60f8      	str	r0, [r7, #12]
 8014350:	8179      	strh	r1, [r7, #10]
 8014352:	813a      	strh	r2, [r7, #8]
 8014354:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 8014356:	2300      	movs	r3, #0
 8014358:	82fb      	strh	r3, [r7, #22]
 801435a:	2300      	movs	r3, #0
 801435c:	82bb      	strh	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 801435e:	68fb      	ldr	r3, [r7, #12]
 8014360:	8c1b      	ldrh	r3, [r3, #32]
 8014362:	b29b      	uxth	r3, r3
 8014364:	f023 0301 	bic.w	r3, r3, #1
 8014368:	b29a      	uxth	r2, r3
 801436a:	68fb      	ldr	r3, [r7, #12]
 801436c:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801436e:	68fb      	ldr	r3, [r7, #12]
 8014370:	8b1b      	ldrh	r3, [r3, #24]
 8014372:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8014374:	68fb      	ldr	r3, [r7, #12]
 8014376:	8c1b      	ldrh	r3, [r3, #32]
 8014378:	82bb      	strh	r3, [r7, #20]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 801437a:	8afb      	ldrh	r3, [r7, #22]
 801437c:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8014380:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8014382:	88fb      	ldrh	r3, [r7, #6]
 8014384:	011b      	lsls	r3, r3, #4
 8014386:	b29a      	uxth	r2, r3
 8014388:	893b      	ldrh	r3, [r7, #8]
 801438a:	4313      	orrs	r3, r2
 801438c:	b29a      	uxth	r2, r3
 801438e:	8afb      	ldrh	r3, [r7, #22]
 8014390:	4313      	orrs	r3, r2
 8014392:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8014394:	8abb      	ldrh	r3, [r7, #20]
 8014396:	f023 030a 	bic.w	r3, r3, #10
 801439a:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 801439c:	897a      	ldrh	r2, [r7, #10]
 801439e:	8abb      	ldrh	r3, [r7, #20]
 80143a0:	4313      	orrs	r3, r2
 80143a2:	b29b      	uxth	r3, r3
 80143a4:	f043 0301 	orr.w	r3, r3, #1
 80143a8:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80143aa:	68fb      	ldr	r3, [r7, #12]
 80143ac:	8afa      	ldrh	r2, [r7, #22]
 80143ae:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	8aba      	ldrh	r2, [r7, #20]
 80143b4:	841a      	strh	r2, [r3, #32]
}
 80143b6:	371c      	adds	r7, #28
 80143b8:	46bd      	mov	sp, r7
 80143ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143be:	4770      	bx	lr

080143c0 <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80143c0:	b480      	push	{r7}
 80143c2:	b087      	sub	sp, #28
 80143c4:	af00      	add	r7, sp, #0
 80143c6:	60f8      	str	r0, [r7, #12]
 80143c8:	8179      	strh	r1, [r7, #10]
 80143ca:	813a      	strh	r2, [r7, #8]
 80143cc:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 80143ce:	2300      	movs	r3, #0
 80143d0:	82fb      	strh	r3, [r7, #22]
 80143d2:	2300      	movs	r3, #0
 80143d4:	82bb      	strh	r3, [r7, #20]
 80143d6:	2300      	movs	r3, #0
 80143d8:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 80143da:	68fb      	ldr	r3, [r7, #12]
 80143dc:	8c1b      	ldrh	r3, [r3, #32]
 80143de:	b29b      	uxth	r3, r3
 80143e0:	f023 0310 	bic.w	r3, r3, #16
 80143e4:	b29a      	uxth	r2, r3
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80143ea:	68fb      	ldr	r3, [r7, #12]
 80143ec:	8b1b      	ldrh	r3, [r3, #24]
 80143ee:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	8c1b      	ldrh	r3, [r3, #32]
 80143f4:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 80143f6:	897b      	ldrh	r3, [r7, #10]
 80143f8:	011b      	lsls	r3, r3, #4
 80143fa:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 80143fc:	8afb      	ldrh	r3, [r7, #22]
 80143fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014402:	051b      	lsls	r3, r3, #20
 8014404:	0d1b      	lsrs	r3, r3, #20
 8014406:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8014408:	88fb      	ldrh	r3, [r7, #6]
 801440a:	031b      	lsls	r3, r3, #12
 801440c:	b29a      	uxth	r2, r3
 801440e:	8afb      	ldrh	r3, [r7, #22]
 8014410:	4313      	orrs	r3, r2
 8014412:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8014414:	893b      	ldrh	r3, [r7, #8]
 8014416:	021b      	lsls	r3, r3, #8
 8014418:	b29a      	uxth	r2, r3
 801441a:	8afb      	ldrh	r3, [r7, #22]
 801441c:	4313      	orrs	r3, r2
 801441e:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8014420:	8abb      	ldrh	r3, [r7, #20]
 8014422:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8014426:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8014428:	8a7a      	ldrh	r2, [r7, #18]
 801442a:	8abb      	ldrh	r3, [r7, #20]
 801442c:	4313      	orrs	r3, r2
 801442e:	b29b      	uxth	r3, r3
 8014430:	f043 0310 	orr.w	r3, r3, #16
 8014434:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8014436:	68fb      	ldr	r3, [r7, #12]
 8014438:	8afa      	ldrh	r2, [r7, #22]
 801443a:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801443c:	68fb      	ldr	r3, [r7, #12]
 801443e:	8aba      	ldrh	r2, [r7, #20]
 8014440:	841a      	strh	r2, [r3, #32]
}
 8014442:	371c      	adds	r7, #28
 8014444:	46bd      	mov	sp, r7
 8014446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801444a:	4770      	bx	lr

0801444c <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 801444c:	b480      	push	{r7}
 801444e:	b087      	sub	sp, #28
 8014450:	af00      	add	r7, sp, #0
 8014452:	60f8      	str	r0, [r7, #12]
 8014454:	8179      	strh	r1, [r7, #10]
 8014456:	813a      	strh	r2, [r7, #8]
 8014458:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 801445a:	2300      	movs	r3, #0
 801445c:	82fb      	strh	r3, [r7, #22]
 801445e:	2300      	movs	r3, #0
 8014460:	82bb      	strh	r3, [r7, #20]
 8014462:	2300      	movs	r3, #0
 8014464:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	8c1b      	ldrh	r3, [r3, #32]
 801446a:	b29b      	uxth	r3, r3
 801446c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014470:	b29a      	uxth	r2, r3
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	8b9b      	ldrh	r3, [r3, #28]
 801447a:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	8c1b      	ldrh	r3, [r3, #32]
 8014480:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 8014482:	897b      	ldrh	r3, [r7, #10]
 8014484:	021b      	lsls	r3, r3, #8
 8014486:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8014488:	8afb      	ldrh	r3, [r7, #22]
 801448a:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 801448e:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8014490:	88fb      	ldrh	r3, [r7, #6]
 8014492:	011b      	lsls	r3, r3, #4
 8014494:	b29a      	uxth	r2, r3
 8014496:	893b      	ldrh	r3, [r7, #8]
 8014498:	4313      	orrs	r3, r2
 801449a:	b29a      	uxth	r2, r3
 801449c:	8afb      	ldrh	r3, [r7, #22]
 801449e:	4313      	orrs	r3, r2
 80144a0:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80144a2:	8abb      	ldrh	r3, [r7, #20]
 80144a4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80144a8:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 80144aa:	8a7a      	ldrh	r2, [r7, #18]
 80144ac:	8abb      	ldrh	r3, [r7, #20]
 80144ae:	4313      	orrs	r3, r2
 80144b0:	b29b      	uxth	r3, r3
 80144b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80144b6:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	8afa      	ldrh	r2, [r7, #22]
 80144bc:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80144be:	68fb      	ldr	r3, [r7, #12]
 80144c0:	8aba      	ldrh	r2, [r7, #20]
 80144c2:	841a      	strh	r2, [r3, #32]
}
 80144c4:	371c      	adds	r7, #28
 80144c6:	46bd      	mov	sp, r7
 80144c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144cc:	4770      	bx	lr
 80144ce:	bf00      	nop

080144d0 <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80144d0:	b480      	push	{r7}
 80144d2:	b087      	sub	sp, #28
 80144d4:	af00      	add	r7, sp, #0
 80144d6:	60f8      	str	r0, [r7, #12]
 80144d8:	8179      	strh	r1, [r7, #10]
 80144da:	813a      	strh	r2, [r7, #8]
 80144dc:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 80144de:	2300      	movs	r3, #0
 80144e0:	82fb      	strh	r3, [r7, #22]
 80144e2:	2300      	movs	r3, #0
 80144e4:	82bb      	strh	r3, [r7, #20]
 80144e6:	2300      	movs	r3, #0
 80144e8:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	8c1b      	ldrh	r3, [r3, #32]
 80144ee:	b29b      	uxth	r3, r3
 80144f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80144f4:	b29a      	uxth	r2, r3
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	8b9b      	ldrh	r3, [r3, #28]
 80144fe:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8014500:	68fb      	ldr	r3, [r7, #12]
 8014502:	8c1b      	ldrh	r3, [r3, #32]
 8014504:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8014506:	897b      	ldrh	r3, [r7, #10]
 8014508:	031b      	lsls	r3, r3, #12
 801450a:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 801450c:	8afb      	ldrh	r3, [r7, #22]
 801450e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014512:	051b      	lsls	r3, r3, #20
 8014514:	0d1b      	lsrs	r3, r3, #20
 8014516:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8014518:	893b      	ldrh	r3, [r7, #8]
 801451a:	021b      	lsls	r3, r3, #8
 801451c:	b29a      	uxth	r2, r3
 801451e:	8afb      	ldrh	r3, [r7, #22]
 8014520:	4313      	orrs	r3, r2
 8014522:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8014524:	88fb      	ldrh	r3, [r7, #6]
 8014526:	031b      	lsls	r3, r3, #12
 8014528:	b29a      	uxth	r2, r3
 801452a:	8afb      	ldrh	r3, [r7, #22]
 801452c:	4313      	orrs	r3, r2
 801452e:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8014530:	8abb      	ldrh	r3, [r7, #20]
 8014532:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014536:	045b      	lsls	r3, r3, #17
 8014538:	0c5b      	lsrs	r3, r3, #17
 801453a:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 801453c:	8a7a      	ldrh	r2, [r7, #18]
 801453e:	8abb      	ldrh	r3, [r7, #20]
 8014540:	4313      	orrs	r3, r2
 8014542:	b29b      	uxth	r3, r3
 8014544:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8014548:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	8afa      	ldrh	r2, [r7, #22]
 801454e:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	8aba      	ldrh	r2, [r7, #20]
 8014554:	841a      	strh	r2, [r3, #32]
}
 8014556:	371c      	adds	r7, #28
 8014558:	46bd      	mov	sp, r7
 801455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801455e:	4770      	bx	lr

08014560 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8014560:	b580      	push	{r7, lr}
 8014562:	b082      	sub	sp, #8
 8014564:	af00      	add	r7, sp, #0
 8014566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8014568:	687a      	ldr	r2, [r7, #4]
 801456a:	4b3a      	ldr	r3, [pc, #232]	; (8014654 <USART_DeInit+0xf4>)
 801456c:	429a      	cmp	r2, r3
 801456e:	d108      	bne.n	8014582 <USART_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8014570:	2010      	movs	r0, #16
 8014572:	2101      	movs	r1, #1
 8014574:	f7fb fbd8 	bl	800fd28 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8014578:	2010      	movs	r0, #16
 801457a:	2100      	movs	r1, #0
 801457c:	f7fb fbd4 	bl	800fd28 <RCC_APB2PeriphResetCmd>
 8014580:	e065      	b.n	801464e <USART_DeInit+0xee>
  }
  else if (USARTx == USART2)
 8014582:	687a      	ldr	r2, [r7, #4]
 8014584:	4b34      	ldr	r3, [pc, #208]	; (8014658 <USART_DeInit+0xf8>)
 8014586:	429a      	cmp	r2, r3
 8014588:	d10a      	bne.n	80145a0 <USART_DeInit+0x40>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 801458a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 801458e:	2101      	movs	r1, #1
 8014590:	f7fb fbac 	bl	800fcec <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8014594:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8014598:	2100      	movs	r1, #0
 801459a:	f7fb fba7 	bl	800fcec <RCC_APB1PeriphResetCmd>
 801459e:	e056      	b.n	801464e <USART_DeInit+0xee>
  }
  else if (USARTx == USART3)
 80145a0:	687a      	ldr	r2, [r7, #4]
 80145a2:	4b2e      	ldr	r3, [pc, #184]	; (801465c <USART_DeInit+0xfc>)
 80145a4:	429a      	cmp	r2, r3
 80145a6:	d10a      	bne.n	80145be <USART_DeInit+0x5e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 80145a8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80145ac:	2101      	movs	r1, #1
 80145ae:	f7fb fb9d 	bl	800fcec <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 80145b2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80145b6:	2100      	movs	r1, #0
 80145b8:	f7fb fb98 	bl	800fcec <RCC_APB1PeriphResetCmd>
 80145bc:	e047      	b.n	801464e <USART_DeInit+0xee>
  }    
  else if (USARTx == UART4)
 80145be:	687a      	ldr	r2, [r7, #4]
 80145c0:	4b27      	ldr	r3, [pc, #156]	; (8014660 <USART_DeInit+0x100>)
 80145c2:	429a      	cmp	r2, r3
 80145c4:	d10a      	bne.n	80145dc <USART_DeInit+0x7c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 80145c6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80145ca:	2101      	movs	r1, #1
 80145cc:	f7fb fb8e 	bl	800fcec <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 80145d0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80145d4:	2100      	movs	r1, #0
 80145d6:	f7fb fb89 	bl	800fcec <RCC_APB1PeriphResetCmd>
 80145da:	e038      	b.n	801464e <USART_DeInit+0xee>
  }
  else if (USARTx == UART5)
 80145dc:	687a      	ldr	r2, [r7, #4]
 80145de:	4b21      	ldr	r3, [pc, #132]	; (8014664 <USART_DeInit+0x104>)
 80145e0:	429a      	cmp	r2, r3
 80145e2:	d10a      	bne.n	80145fa <USART_DeInit+0x9a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 80145e4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80145e8:	2101      	movs	r1, #1
 80145ea:	f7fb fb7f 	bl	800fcec <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 80145ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80145f2:	2100      	movs	r1, #0
 80145f4:	f7fb fb7a 	bl	800fcec <RCC_APB1PeriphResetCmd>
 80145f8:	e029      	b.n	801464e <USART_DeInit+0xee>
  }  
  else if (USARTx == USART6)
 80145fa:	687a      	ldr	r2, [r7, #4]
 80145fc:	4b1a      	ldr	r3, [pc, #104]	; (8014668 <USART_DeInit+0x108>)
 80145fe:	429a      	cmp	r2, r3
 8014600:	d108      	bne.n	8014614 <USART_DeInit+0xb4>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 8014602:	2020      	movs	r0, #32
 8014604:	2101      	movs	r1, #1
 8014606:	f7fb fb8f 	bl	800fd28 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 801460a:	2020      	movs	r0, #32
 801460c:	2100      	movs	r1, #0
 801460e:	f7fb fb8b 	bl	800fd28 <RCC_APB2PeriphResetCmd>
 8014612:	e01c      	b.n	801464e <USART_DeInit+0xee>
  }
  else if (USARTx == UART7)
 8014614:	687a      	ldr	r2, [r7, #4]
 8014616:	4b15      	ldr	r3, [pc, #84]	; (801466c <USART_DeInit+0x10c>)
 8014618:	429a      	cmp	r2, r3
 801461a:	d10a      	bne.n	8014632 <USART_DeInit+0xd2>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
 801461c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8014620:	2101      	movs	r1, #1
 8014622:	f7fb fb63 	bl	800fcec <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 8014626:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 801462a:	2100      	movs	r1, #0
 801462c:	f7fb fb5e 	bl	800fcec <RCC_APB1PeriphResetCmd>
 8014630:	e00d      	b.n	801464e <USART_DeInit+0xee>
  }     
  else
  {
    if (USARTx == UART8)
 8014632:	687a      	ldr	r2, [r7, #4]
 8014634:	4b0e      	ldr	r3, [pc, #56]	; (8014670 <USART_DeInit+0x110>)
 8014636:	429a      	cmp	r2, r3
 8014638:	d109      	bne.n	801464e <USART_DeInit+0xee>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
 801463a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 801463e:	2101      	movs	r1, #1
 8014640:	f7fb fb54 	bl	800fcec <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 8014644:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8014648:	2100      	movs	r1, #0
 801464a:	f7fb fb4f 	bl	800fcec <RCC_APB1PeriphResetCmd>
    }
  }
}
 801464e:	3708      	adds	r7, #8
 8014650:	46bd      	mov	sp, r7
 8014652:	bd80      	pop	{r7, pc}
 8014654:	40011000 	.word	0x40011000
 8014658:	40004400 	.word	0x40004400
 801465c:	40004800 	.word	0x40004800
 8014660:	40004c00 	.word	0x40004c00
 8014664:	40005000 	.word	0x40005000
 8014668:	40011400 	.word	0x40011400
 801466c:	40007800 	.word	0x40007800
 8014670:	40007c00 	.word	0x40007c00

08014674 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8014674:	b580      	push	{r7, lr}
 8014676:	b08a      	sub	sp, #40	; 0x28
 8014678:	af00      	add	r7, sp, #0
 801467a:	6078      	str	r0, [r7, #4]
 801467c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 801467e:	2300      	movs	r3, #0
 8014680:	627b      	str	r3, [r7, #36]	; 0x24
 8014682:	2300      	movs	r3, #0
 8014684:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8014686:	2300      	movs	r3, #0
 8014688:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 801468a:	2300      	movs	r3, #0
 801468c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	8a1b      	ldrh	r3, [r3, #16]
 8014692:	b29b      	uxth	r3, r3
 8014694:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8014696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014698:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801469c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 801469e:	683b      	ldr	r3, [r7, #0]
 80146a0:	88db      	ldrh	r3, [r3, #6]
 80146a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80146a4:	4313      	orrs	r3, r2
 80146a6:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80146a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146aa:	b29a      	uxth	r2, r3
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	899b      	ldrh	r3, [r3, #12]
 80146b4:	b29b      	uxth	r3, r3
 80146b6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80146b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80146be:	f023 030c 	bic.w	r3, r3, #12
 80146c2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80146c4:	683b      	ldr	r3, [r7, #0]
 80146c6:	889a      	ldrh	r2, [r3, #4]
 80146c8:	683b      	ldr	r3, [r7, #0]
 80146ca:	891b      	ldrh	r3, [r3, #8]
 80146cc:	4313      	orrs	r3, r2
 80146ce:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80146d0:	683b      	ldr	r3, [r7, #0]
 80146d2:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80146d4:	4313      	orrs	r3, r2
 80146d6:	b29b      	uxth	r3, r3
 80146d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80146da:	4313      	orrs	r3, r2
 80146dc:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80146de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146e0:	b29a      	uxth	r2, r3
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	8a9b      	ldrh	r3, [r3, #20]
 80146ea:	b29b      	uxth	r3, r3
 80146ec:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80146ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80146f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80146f6:	683b      	ldr	r3, [r7, #0]
 80146f8:	899b      	ldrh	r3, [r3, #12]
 80146fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80146fc:	4313      	orrs	r3, r2
 80146fe:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8014700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014702:	b29a      	uxth	r2, r3
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8014708:	f107 0308 	add.w	r3, r7, #8
 801470c:	4618      	mov	r0, r3
 801470e:	f7fb f851 	bl	800f7b4 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8014712:	687a      	ldr	r2, [r7, #4]
 8014714:	4b31      	ldr	r3, [pc, #196]	; (80147dc <USART_Init+0x168>)
 8014716:	429a      	cmp	r2, r3
 8014718:	d003      	beq.n	8014722 <USART_Init+0xae>
 801471a:	687a      	ldr	r2, [r7, #4]
 801471c:	4b30      	ldr	r3, [pc, #192]	; (80147e0 <USART_Init+0x16c>)
 801471e:	429a      	cmp	r2, r3
 8014720:	d102      	bne.n	8014728 <USART_Init+0xb4>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8014722:	697b      	ldr	r3, [r7, #20]
 8014724:	623b      	str	r3, [r7, #32]
 8014726:	e001      	b.n	801472c <USART_Init+0xb8>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8014728:	693b      	ldr	r3, [r7, #16]
 801472a:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	899b      	ldrh	r3, [r3, #12]
 8014730:	b29b      	uxth	r3, r3
 8014732:	b29b      	uxth	r3, r3
 8014734:	b21b      	sxth	r3, r3
 8014736:	2b00      	cmp	r3, #0
 8014738:	da0c      	bge.n	8014754 <USART_Init+0xe0>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 801473a:	6a3a      	ldr	r2, [r7, #32]
 801473c:	4613      	mov	r3, r2
 801473e:	009b      	lsls	r3, r3, #2
 8014740:	4413      	add	r3, r2
 8014742:	009a      	lsls	r2, r3, #2
 8014744:	441a      	add	r2, r3
 8014746:	683b      	ldr	r3, [r7, #0]
 8014748:	681b      	ldr	r3, [r3, #0]
 801474a:	005b      	lsls	r3, r3, #1
 801474c:	fbb2 f3f3 	udiv	r3, r2, r3
 8014750:	61fb      	str	r3, [r7, #28]
 8014752:	e00b      	b.n	801476c <USART_Init+0xf8>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8014754:	6a3a      	ldr	r2, [r7, #32]
 8014756:	4613      	mov	r3, r2
 8014758:	009b      	lsls	r3, r3, #2
 801475a:	4413      	add	r3, r2
 801475c:	009a      	lsls	r2, r3, #2
 801475e:	441a      	add	r2, r3
 8014760:	683b      	ldr	r3, [r7, #0]
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	009b      	lsls	r3, r3, #2
 8014766:	fbb2 f3f3 	udiv	r3, r2, r3
 801476a:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 801476c:	69fa      	ldr	r2, [r7, #28]
 801476e:	4b1d      	ldr	r3, [pc, #116]	; (80147e4 <USART_Init+0x170>)
 8014770:	fba3 1302 	umull	r1, r3, r3, r2
 8014774:	095b      	lsrs	r3, r3, #5
 8014776:	011b      	lsls	r3, r3, #4
 8014778:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 801477a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801477c:	091b      	lsrs	r3, r3, #4
 801477e:	2264      	movs	r2, #100	; 0x64
 8014780:	fb02 f303 	mul.w	r3, r2, r3
 8014784:	69fa      	ldr	r2, [r7, #28]
 8014786:	1ad3      	subs	r3, r2, r3
 8014788:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	899b      	ldrh	r3, [r3, #12]
 801478e:	b29b      	uxth	r3, r3
 8014790:	b29b      	uxth	r3, r3
 8014792:	b21b      	sxth	r3, r3
 8014794:	2b00      	cmp	r3, #0
 8014796:	da0d      	bge.n	80147b4 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8014798:	69bb      	ldr	r3, [r7, #24]
 801479a:	00db      	lsls	r3, r3, #3
 801479c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80147a0:	4b10      	ldr	r3, [pc, #64]	; (80147e4 <USART_Init+0x170>)
 80147a2:	fba3 1302 	umull	r1, r3, r3, r2
 80147a6:	095b      	lsrs	r3, r3, #5
 80147a8:	f003 0307 	and.w	r3, r3, #7
 80147ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80147ae:	4313      	orrs	r3, r2
 80147b0:	627b      	str	r3, [r7, #36]	; 0x24
 80147b2:	e00c      	b.n	80147ce <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80147b4:	69bb      	ldr	r3, [r7, #24]
 80147b6:	011b      	lsls	r3, r3, #4
 80147b8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80147bc:	4b09      	ldr	r3, [pc, #36]	; (80147e4 <USART_Init+0x170>)
 80147be:	fba3 1302 	umull	r1, r3, r3, r2
 80147c2:	095b      	lsrs	r3, r3, #5
 80147c4:	f003 030f 	and.w	r3, r3, #15
 80147c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80147ca:	4313      	orrs	r3, r2
 80147cc:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80147ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147d0:	b29a      	uxth	r2, r3
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	811a      	strh	r2, [r3, #8]
}
 80147d6:	3728      	adds	r7, #40	; 0x28
 80147d8:	46bd      	mov	sp, r7
 80147da:	bd80      	pop	{r7, pc}
 80147dc:	40011000 	.word	0x40011000
 80147e0:	40011400 	.word	0x40011400
 80147e4:	51eb851f 	.word	0x51eb851f

080147e8 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 80147e8:	b480      	push	{r7}
 80147ea:	b083      	sub	sp, #12
 80147ec:	af00      	add	r7, sp, #0
 80147ee:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80147f6:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	2200      	movs	r2, #0
 80147fc:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	2200      	movs	r2, #0
 8014802:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	2200      	movs	r2, #0
 8014808:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	220c      	movs	r2, #12
 801480e:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	2200      	movs	r2, #0
 8014814:	819a      	strh	r2, [r3, #12]
}
 8014816:	370c      	adds	r7, #12
 8014818:	46bd      	mov	sp, r7
 801481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801481e:	4770      	bx	lr

08014820 <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8014820:	b480      	push	{r7}
 8014822:	b085      	sub	sp, #20
 8014824:	af00      	add	r7, sp, #0
 8014826:	6078      	str	r0, [r7, #4]
 8014828:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
 801482a:	2300      	movs	r3, #0
 801482c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	8a1b      	ldrh	r3, [r3, #16]
 8014832:	b29b      	uxth	r3, r3
 8014834:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8014836:	68fb      	ldr	r3, [r7, #12]
 8014838:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801483c:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 801483e:	683b      	ldr	r3, [r7, #0]
 8014840:	881a      	ldrh	r2, [r3, #0]
 8014842:	683b      	ldr	r3, [r7, #0]
 8014844:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8014846:	4313      	orrs	r3, r2
 8014848:	b29a      	uxth	r2, r3
 801484a:	683b      	ldr	r3, [r7, #0]
 801484c:	889b      	ldrh	r3, [r3, #4]
 801484e:	4313      	orrs	r3, r2
 8014850:	b29a      	uxth	r2, r3
 8014852:	683b      	ldr	r3, [r7, #0]
 8014854:	88db      	ldrh	r3, [r3, #6]
 8014856:	4313      	orrs	r3, r2
 8014858:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 801485a:	68fa      	ldr	r2, [r7, #12]
 801485c:	4313      	orrs	r3, r2
 801485e:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	b29a      	uxth	r2, r3
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	821a      	strh	r2, [r3, #16]
}
 8014868:	3714      	adds	r7, #20
 801486a:	46bd      	mov	sp, r7
 801486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014870:	4770      	bx	lr
 8014872:	bf00      	nop

08014874 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8014874:	b480      	push	{r7}
 8014876:	b083      	sub	sp, #12
 8014878:	af00      	add	r7, sp, #0
 801487a:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	2200      	movs	r2, #0
 8014880:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	2200      	movs	r2, #0
 8014886:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	2200      	movs	r2, #0
 801488c:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	2200      	movs	r2, #0
 8014892:	80da      	strh	r2, [r3, #6]
}
 8014894:	370c      	adds	r7, #12
 8014896:	46bd      	mov	sp, r7
 8014898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801489c:	4770      	bx	lr
 801489e:	bf00      	nop

080148a0 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80148a0:	b480      	push	{r7}
 80148a2:	b083      	sub	sp, #12
 80148a4:	af00      	add	r7, sp, #0
 80148a6:	6078      	str	r0, [r7, #4]
 80148a8:	460b      	mov	r3, r1
 80148aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80148ac:	78fb      	ldrb	r3, [r7, #3]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d008      	beq.n	80148c4 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	899b      	ldrh	r3, [r3, #12]
 80148b6:	b29b      	uxth	r3, r3
 80148b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80148bc:	b29a      	uxth	r2, r3
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	819a      	strh	r2, [r3, #12]
 80148c2:	e007      	b.n	80148d4 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	899b      	ldrh	r3, [r3, #12]
 80148c8:	b29b      	uxth	r3, r3
 80148ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80148ce:	b29a      	uxth	r2, r3
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	819a      	strh	r2, [r3, #12]
  }
}
 80148d4:	370c      	adds	r7, #12
 80148d6:	46bd      	mov	sp, r7
 80148d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148dc:	4770      	bx	lr
 80148de:	bf00      	nop

080148e0 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock. 
  * @note   The function is used for IrDA mode with UART4 and UART5.   
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
 80148e0:	b480      	push	{r7}
 80148e2:	b083      	sub	sp, #12
 80148e4:	af00      	add	r7, sp, #0
 80148e6:	6078      	str	r0, [r7, #4]
 80148e8:	460b      	mov	r3, r1
 80148ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	8b1b      	ldrh	r3, [r3, #24]
 80148f0:	b29b      	uxth	r3, r3
 80148f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80148f6:	b29a      	uxth	r2, r3
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	8b1b      	ldrh	r3, [r3, #24]
 8014900:	b29a      	uxth	r2, r3
 8014902:	78fb      	ldrb	r3, [r7, #3]
 8014904:	b29b      	uxth	r3, r3
 8014906:	4313      	orrs	r3, r2
 8014908:	b29a      	uxth	r2, r3
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	831a      	strh	r2, [r3, #24]
}
 801490e:	370c      	adds	r7, #12
 8014910:	46bd      	mov	sp, r7
 8014912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014916:	4770      	bx	lr

08014918 <USART_OverSampling8Cmd>:
  * @param  NewState: new state of the USART 8x oversampling mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8014918:	b480      	push	{r7}
 801491a:	b083      	sub	sp, #12
 801491c:	af00      	add	r7, sp, #0
 801491e:	6078      	str	r0, [r7, #4]
 8014920:	460b      	mov	r3, r1
 8014922:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8014924:	78fb      	ldrb	r3, [r7, #3]
 8014926:	2b00      	cmp	r3, #0
 8014928:	d00a      	beq.n	8014940 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	899b      	ldrh	r3, [r3, #12]
 801492e:	b29b      	uxth	r3, r3
 8014930:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014934:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014938:	b29a      	uxth	r2, r3
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	819a      	strh	r2, [r3, #12]
 801493e:	e007      	b.n	8014950 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	899b      	ldrh	r3, [r3, #12]
 8014944:	b29b      	uxth	r3, r3
 8014946:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801494a:	b29a      	uxth	r2, r3
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	819a      	strh	r2, [r3, #12]
  }
}  
 8014950:	370c      	adds	r7, #12
 8014952:	46bd      	mov	sp, r7
 8014954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014958:	4770      	bx	lr
 801495a:	bf00      	nop

0801495c <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 801495c:	b480      	push	{r7}
 801495e:	b083      	sub	sp, #12
 8014960:	af00      	add	r7, sp, #0
 8014962:	6078      	str	r0, [r7, #4]
 8014964:	460b      	mov	r3, r1
 8014966:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8014968:	78fb      	ldrb	r3, [r7, #3]
 801496a:	2b00      	cmp	r3, #0
 801496c:	d008      	beq.n	8014980 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	8a9b      	ldrh	r3, [r3, #20]
 8014972:	b29b      	uxth	r3, r3
 8014974:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014978:	b29a      	uxth	r2, r3
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	829a      	strh	r2, [r3, #20]
 801497e:	e007      	b.n	8014990 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	8a9b      	ldrh	r3, [r3, #20]
 8014984:	b29b      	uxth	r3, r3
 8014986:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801498a:	b29a      	uxth	r2, r3
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	829a      	strh	r2, [r3, #20]
  }
}
 8014990:	370c      	adds	r7, #12
 8014992:	46bd      	mov	sp, r7
 8014994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014998:	4770      	bx	lr
 801499a:	bf00      	nop

0801499c <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 801499c:	b480      	push	{r7}
 801499e:	b083      	sub	sp, #12
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	6078      	str	r0, [r7, #4]
 80149a4:	460b      	mov	r3, r1
 80149a6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80149a8:	887b      	ldrh	r3, [r7, #2]
 80149aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80149ae:	b29a      	uxth	r2, r3
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	809a      	strh	r2, [r3, #4]
}
 80149b4:	370c      	adds	r7, #12
 80149b6:	46bd      	mov	sp, r7
 80149b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149bc:	4770      	bx	lr
 80149be:	bf00      	nop

080149c0 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80149c0:	b480      	push	{r7}
 80149c2:	b083      	sub	sp, #12
 80149c4:	af00      	add	r7, sp, #0
 80149c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	889b      	ldrh	r3, [r3, #4]
 80149cc:	b29b      	uxth	r3, r3
 80149ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80149d2:	b29b      	uxth	r3, r3
}
 80149d4:	4618      	mov	r0, r3
 80149d6:	370c      	adds	r7, #12
 80149d8:	46bd      	mov	sp, r7
 80149da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149de:	4770      	bx	lr

080149e0 <USART_SetAddress>:
  *         UART peripheral.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
 80149e0:	b480      	push	{r7}
 80149e2:	b083      	sub	sp, #12
 80149e4:	af00      	add	r7, sp, #0
 80149e6:	6078      	str	r0, [r7, #4]
 80149e8:	460b      	mov	r3, r1
 80149ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	8a1b      	ldrh	r3, [r3, #16]
 80149f0:	b29b      	uxth	r3, r3
 80149f2:	f023 030f 	bic.w	r3, r3, #15
 80149f6:	b29a      	uxth	r2, r3
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	8a1b      	ldrh	r3, [r3, #16]
 8014a00:	b29a      	uxth	r2, r3
 8014a02:	78fb      	ldrb	r3, [r7, #3]
 8014a04:	b29b      	uxth	r3, r3
 8014a06:	4313      	orrs	r3, r2
 8014a08:	b29a      	uxth	r2, r3
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	821a      	strh	r2, [r3, #16]
}
 8014a0e:	370c      	adds	r7, #12
 8014a10:	46bd      	mov	sp, r7
 8014a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a16:	4770      	bx	lr

08014a18 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8014a18:	b480      	push	{r7}
 8014a1a:	b083      	sub	sp, #12
 8014a1c:	af00      	add	r7, sp, #0
 8014a1e:	6078      	str	r0, [r7, #4]
 8014a20:	460b      	mov	r3, r1
 8014a22:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8014a24:	78fb      	ldrb	r3, [r7, #3]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d008      	beq.n	8014a3c <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	899b      	ldrh	r3, [r3, #12]
 8014a2e:	b29b      	uxth	r3, r3
 8014a30:	f043 0302 	orr.w	r3, r3, #2
 8014a34:	b29a      	uxth	r2, r3
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	819a      	strh	r2, [r3, #12]
 8014a3a:	e007      	b.n	8014a4c <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	899b      	ldrh	r3, [r3, #12]
 8014a40:	b29b      	uxth	r3, r3
 8014a42:	f023 0302 	bic.w	r3, r3, #2
 8014a46:	b29a      	uxth	r2, r3
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	819a      	strh	r2, [r3, #12]
  }
}
 8014a4c:	370c      	adds	r7, #12
 8014a4e:	46bd      	mov	sp, r7
 8014a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a54:	4770      	bx	lr
 8014a56:	bf00      	nop

08014a58 <USART_WakeUpConfig>:
  *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
 8014a58:	b480      	push	{r7}
 8014a5a:	b083      	sub	sp, #12
 8014a5c:	af00      	add	r7, sp, #0
 8014a5e:	6078      	str	r0, [r7, #4]
 8014a60:	460b      	mov	r3, r1
 8014a62:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	899b      	ldrh	r3, [r3, #12]
 8014a68:	b29b      	uxth	r3, r3
 8014a6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014a6e:	b29a      	uxth	r2, r3
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	899b      	ldrh	r3, [r3, #12]
 8014a78:	b29a      	uxth	r2, r3
 8014a7a:	887b      	ldrh	r3, [r7, #2]
 8014a7c:	4313      	orrs	r3, r2
 8014a7e:	b29a      	uxth	r2, r3
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	819a      	strh	r2, [r3, #12]
}
 8014a84:	370c      	adds	r7, #12
 8014a86:	46bd      	mov	sp, r7
 8014a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a8c:	4770      	bx	lr
 8014a8e:	bf00      	nop

08014a90 <USART_LINBreakDetectLengthConfig>:
  *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
 8014a90:	b480      	push	{r7}
 8014a92:	b083      	sub	sp, #12
 8014a94:	af00      	add	r7, sp, #0
 8014a96:	6078      	str	r0, [r7, #4]
 8014a98:	460b      	mov	r3, r1
 8014a9a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	8a1b      	ldrh	r3, [r3, #16]
 8014aa0:	b29b      	uxth	r3, r3
 8014aa2:	f023 0320 	bic.w	r3, r3, #32
 8014aa6:	b29a      	uxth	r2, r3
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	8a1b      	ldrh	r3, [r3, #16]
 8014ab0:	b29a      	uxth	r2, r3
 8014ab2:	887b      	ldrh	r3, [r7, #2]
 8014ab4:	4313      	orrs	r3, r2
 8014ab6:	b29a      	uxth	r2, r3
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	821a      	strh	r2, [r3, #16]
}
 8014abc:	370c      	adds	r7, #12
 8014abe:	46bd      	mov	sp, r7
 8014ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac4:	4770      	bx	lr
 8014ac6:	bf00      	nop

08014ac8 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8014ac8:	b480      	push	{r7}
 8014aca:	b083      	sub	sp, #12
 8014acc:	af00      	add	r7, sp, #0
 8014ace:	6078      	str	r0, [r7, #4]
 8014ad0:	460b      	mov	r3, r1
 8014ad2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8014ad4:	78fb      	ldrb	r3, [r7, #3]
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d008      	beq.n	8014aec <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	8a1b      	ldrh	r3, [r3, #16]
 8014ade:	b29b      	uxth	r3, r3
 8014ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014ae4:	b29a      	uxth	r2, r3
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	821a      	strh	r2, [r3, #16]
 8014aea:	e007      	b.n	8014afc <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	8a1b      	ldrh	r3, [r3, #16]
 8014af0:	b29b      	uxth	r3, r3
 8014af2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014af6:	b29a      	uxth	r2, r3
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	821a      	strh	r2, [r3, #16]
  }
}
 8014afc:	370c      	adds	r7, #12
 8014afe:	46bd      	mov	sp, r7
 8014b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b04:	4770      	bx	lr
 8014b06:	bf00      	nop

08014b08 <USART_SendBreak>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
 8014b08:	b480      	push	{r7}
 8014b0a:	b083      	sub	sp, #12
 8014b0c:	af00      	add	r7, sp, #0
 8014b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	899b      	ldrh	r3, [r3, #12]
 8014b14:	b29b      	uxth	r3, r3
 8014b16:	f043 0301 	orr.w	r3, r3, #1
 8014b1a:	b29a      	uxth	r2, r3
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	819a      	strh	r2, [r3, #12]
}
 8014b20:	370c      	adds	r7, #12
 8014b22:	46bd      	mov	sp, r7
 8014b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b28:	4770      	bx	lr
 8014b2a:	bf00      	nop

08014b2c <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8014b2c:	b480      	push	{r7}
 8014b2e:	b083      	sub	sp, #12
 8014b30:	af00      	add	r7, sp, #0
 8014b32:	6078      	str	r0, [r7, #4]
 8014b34:	460b      	mov	r3, r1
 8014b36:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8014b38:	78fb      	ldrb	r3, [r7, #3]
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d008      	beq.n	8014b50 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	8a9b      	ldrh	r3, [r3, #20]
 8014b42:	b29b      	uxth	r3, r3
 8014b44:	f043 0308 	orr.w	r3, r3, #8
 8014b48:	b29a      	uxth	r2, r3
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	829a      	strh	r2, [r3, #20]
 8014b4e:	e007      	b.n	8014b60 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	8a9b      	ldrh	r3, [r3, #20]
 8014b54:	b29b      	uxth	r3, r3
 8014b56:	f023 0308 	bic.w	r3, r3, #8
 8014b5a:	b29a      	uxth	r2, r3
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	829a      	strh	r2, [r3, #20]
  }
}
 8014b60:	370c      	adds	r7, #12
 8014b62:	46bd      	mov	sp, r7
 8014b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b68:	4770      	bx	lr
 8014b6a:	bf00      	nop

08014b6c <USART_SetGuardTime>:
  *         UART peripheral.
  * @param  USART_GuardTime: specifies the guard time.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
 8014b6c:	b480      	push	{r7}
 8014b6e:	b083      	sub	sp, #12
 8014b70:	af00      	add	r7, sp, #0
 8014b72:	6078      	str	r0, [r7, #4]
 8014b74:	460b      	mov	r3, r1
 8014b76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	8b1b      	ldrh	r3, [r3, #24]
 8014b7c:	b29b      	uxth	r3, r3
 8014b7e:	b2db      	uxtb	r3, r3
 8014b80:	b29a      	uxth	r2, r3
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	8b1b      	ldrh	r3, [r3, #24]
 8014b8a:	b29a      	uxth	r2, r3
 8014b8c:	78fb      	ldrb	r3, [r7, #3]
 8014b8e:	b29b      	uxth	r3, r3
 8014b90:	021b      	lsls	r3, r3, #8
 8014b92:	b29b      	uxth	r3, r3
 8014b94:	4313      	orrs	r3, r2
 8014b96:	b29a      	uxth	r2, r3
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	831a      	strh	r2, [r3, #24]
}
 8014b9c:	370c      	adds	r7, #12
 8014b9e:	46bd      	mov	sp, r7
 8014ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ba4:	4770      	bx	lr
 8014ba6:	bf00      	nop

08014ba8 <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8014ba8:	b480      	push	{r7}
 8014baa:	b083      	sub	sp, #12
 8014bac:	af00      	add	r7, sp, #0
 8014bae:	6078      	str	r0, [r7, #4]
 8014bb0:	460b      	mov	r3, r1
 8014bb2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8014bb4:	78fb      	ldrb	r3, [r7, #3]
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d008      	beq.n	8014bcc <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	8a9b      	ldrh	r3, [r3, #20]
 8014bbe:	b29b      	uxth	r3, r3
 8014bc0:	f043 0320 	orr.w	r3, r3, #32
 8014bc4:	b29a      	uxth	r2, r3
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	829a      	strh	r2, [r3, #20]
 8014bca:	e007      	b.n	8014bdc <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	8a9b      	ldrh	r3, [r3, #20]
 8014bd0:	b29b      	uxth	r3, r3
 8014bd2:	f023 0320 	bic.w	r3, r3, #32
 8014bd6:	b29a      	uxth	r2, r3
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	829a      	strh	r2, [r3, #20]
  }
}
 8014bdc:	370c      	adds	r7, #12
 8014bde:	46bd      	mov	sp, r7
 8014be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be4:	4770      	bx	lr
 8014be6:	bf00      	nop

08014be8 <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8014be8:	b480      	push	{r7}
 8014bea:	b083      	sub	sp, #12
 8014bec:	af00      	add	r7, sp, #0
 8014bee:	6078      	str	r0, [r7, #4]
 8014bf0:	460b      	mov	r3, r1
 8014bf2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8014bf4:	78fb      	ldrb	r3, [r7, #3]
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d008      	beq.n	8014c0c <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	8a9b      	ldrh	r3, [r3, #20]
 8014bfe:	b29b      	uxth	r3, r3
 8014c00:	f043 0310 	orr.w	r3, r3, #16
 8014c04:	b29a      	uxth	r2, r3
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	829a      	strh	r2, [r3, #20]
 8014c0a:	e007      	b.n	8014c1c <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	8a9b      	ldrh	r3, [r3, #20]
 8014c10:	b29b      	uxth	r3, r3
 8014c12:	f023 0310 	bic.w	r3, r3, #16
 8014c16:	b29a      	uxth	r2, r3
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	829a      	strh	r2, [r3, #20]
  }
}
 8014c1c:	370c      	adds	r7, #12
 8014c1e:	46bd      	mov	sp, r7
 8014c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c24:	4770      	bx	lr
 8014c26:	bf00      	nop

08014c28 <USART_IrDAConfig>:
  *            @arg USART_IrDAMode_LowPower
  *            @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
 8014c28:	b480      	push	{r7}
 8014c2a:	b083      	sub	sp, #12
 8014c2c:	af00      	add	r7, sp, #0
 8014c2e:	6078      	str	r0, [r7, #4]
 8014c30:	460b      	mov	r3, r1
 8014c32:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	8a9b      	ldrh	r3, [r3, #20]
 8014c38:	b29b      	uxth	r3, r3
 8014c3a:	f023 0304 	bic.w	r3, r3, #4
 8014c3e:	b29a      	uxth	r2, r3
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	8a9b      	ldrh	r3, [r3, #20]
 8014c48:	b29a      	uxth	r2, r3
 8014c4a:	887b      	ldrh	r3, [r7, #2]
 8014c4c:	4313      	orrs	r3, r2
 8014c4e:	b29a      	uxth	r2, r3
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	829a      	strh	r2, [r3, #20]
}
 8014c54:	370c      	adds	r7, #12
 8014c56:	46bd      	mov	sp, r7
 8014c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c5c:	4770      	bx	lr
 8014c5e:	bf00      	nop

08014c60 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8014c60:	b480      	push	{r7}
 8014c62:	b083      	sub	sp, #12
 8014c64:	af00      	add	r7, sp, #0
 8014c66:	6078      	str	r0, [r7, #4]
 8014c68:	460b      	mov	r3, r1
 8014c6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8014c6c:	78fb      	ldrb	r3, [r7, #3]
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d008      	beq.n	8014c84 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	8a9b      	ldrh	r3, [r3, #20]
 8014c76:	b29b      	uxth	r3, r3
 8014c78:	f043 0302 	orr.w	r3, r3, #2
 8014c7c:	b29a      	uxth	r2, r3
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	829a      	strh	r2, [r3, #20]
 8014c82:	e007      	b.n	8014c94 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	8a9b      	ldrh	r3, [r3, #20]
 8014c88:	b29b      	uxth	r3, r3
 8014c8a:	f023 0302 	bic.w	r3, r3, #2
 8014c8e:	b29a      	uxth	r2, r3
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	829a      	strh	r2, [r3, #20]
  }
}
 8014c94:	370c      	adds	r7, #12
 8014c96:	46bd      	mov	sp, r7
 8014c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c9c:	4770      	bx	lr
 8014c9e:	bf00      	nop

08014ca0 <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 8014ca0:	b480      	push	{r7}
 8014ca2:	b083      	sub	sp, #12
 8014ca4:	af00      	add	r7, sp, #0
 8014ca6:	6078      	str	r0, [r7, #4]
 8014ca8:	4613      	mov	r3, r2
 8014caa:	460a      	mov	r2, r1
 8014cac:	807a      	strh	r2, [r7, #2]
 8014cae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8014cb0:	787b      	ldrb	r3, [r7, #1]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d008      	beq.n	8014cc8 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	8a9b      	ldrh	r3, [r3, #20]
 8014cba:	b29a      	uxth	r2, r3
 8014cbc:	887b      	ldrh	r3, [r7, #2]
 8014cbe:	4313      	orrs	r3, r2
 8014cc0:	b29a      	uxth	r2, r3
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	829a      	strh	r2, [r3, #20]
 8014cc6:	e009      	b.n	8014cdc <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	8a9b      	ldrh	r3, [r3, #20]
 8014ccc:	b29a      	uxth	r2, r3
 8014cce:	887b      	ldrh	r3, [r7, #2]
 8014cd0:	43db      	mvns	r3, r3
 8014cd2:	b29b      	uxth	r3, r3
 8014cd4:	4013      	ands	r3, r2
 8014cd6:	b29a      	uxth	r2, r3
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	829a      	strh	r2, [r3, #20]
  }
}
 8014cdc:	370c      	adds	r7, #12
 8014cde:	46bd      	mov	sp, r7
 8014ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce4:	4770      	bx	lr
 8014ce6:	bf00      	nop

08014ce8 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8014ce8:	b480      	push	{r7}
 8014cea:	b087      	sub	sp, #28
 8014cec:	af00      	add	r7, sp, #0
 8014cee:	6078      	str	r0, [r7, #4]
 8014cf0:	4613      	mov	r3, r2
 8014cf2:	460a      	mov	r2, r1
 8014cf4:	807a      	strh	r2, [r7, #2]
 8014cf6:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8014cf8:	2300      	movs	r3, #0
 8014cfa:	613b      	str	r3, [r7, #16]
 8014cfc:	2300      	movs	r3, #0
 8014cfe:	60fb      	str	r3, [r7, #12]
 8014d00:	2300      	movs	r3, #0
 8014d02:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8014d04:	2300      	movs	r3, #0
 8014d06:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8014d0c:	887b      	ldrh	r3, [r7, #2]
 8014d0e:	b2db      	uxtb	r3, r3
 8014d10:	095b      	lsrs	r3, r3, #5
 8014d12:	b2db      	uxtb	r3, r3
 8014d14:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8014d16:	887b      	ldrh	r3, [r7, #2]
 8014d18:	f003 031f 	and.w	r3, r3, #31
 8014d1c:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8014d1e:	68fb      	ldr	r3, [r7, #12]
 8014d20:	2201      	movs	r2, #1
 8014d22:	fa02 f303 	lsl.w	r3, r2, r3
 8014d26:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8014d28:	693b      	ldr	r3, [r7, #16]
 8014d2a:	2b01      	cmp	r3, #1
 8014d2c:	d103      	bne.n	8014d36 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8014d2e:	697b      	ldr	r3, [r7, #20]
 8014d30:	330c      	adds	r3, #12
 8014d32:	617b      	str	r3, [r7, #20]
 8014d34:	e009      	b.n	8014d4a <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8014d36:	693b      	ldr	r3, [r7, #16]
 8014d38:	2b02      	cmp	r3, #2
 8014d3a:	d103      	bne.n	8014d44 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8014d3c:	697b      	ldr	r3, [r7, #20]
 8014d3e:	3310      	adds	r3, #16
 8014d40:	617b      	str	r3, [r7, #20]
 8014d42:	e002      	b.n	8014d4a <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8014d44:	697b      	ldr	r3, [r7, #20]
 8014d46:	3314      	adds	r3, #20
 8014d48:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8014d4a:	787b      	ldrb	r3, [r7, #1]
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d006      	beq.n	8014d5e <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8014d50:	697b      	ldr	r3, [r7, #20]
 8014d52:	697a      	ldr	r2, [r7, #20]
 8014d54:	6811      	ldr	r1, [r2, #0]
 8014d56:	68ba      	ldr	r2, [r7, #8]
 8014d58:	430a      	orrs	r2, r1
 8014d5a:	601a      	str	r2, [r3, #0]
 8014d5c:	e006      	b.n	8014d6c <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8014d5e:	697b      	ldr	r3, [r7, #20]
 8014d60:	697a      	ldr	r2, [r7, #20]
 8014d62:	6811      	ldr	r1, [r2, #0]
 8014d64:	68ba      	ldr	r2, [r7, #8]
 8014d66:	43d2      	mvns	r2, r2
 8014d68:	400a      	ands	r2, r1
 8014d6a:	601a      	str	r2, [r3, #0]
  }
}
 8014d6c:	371c      	adds	r7, #28
 8014d6e:	46bd      	mov	sp, r7
 8014d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d74:	4770      	bx	lr
 8014d76:	bf00      	nop

08014d78 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8014d78:	b480      	push	{r7}
 8014d7a:	b085      	sub	sp, #20
 8014d7c:	af00      	add	r7, sp, #0
 8014d7e:	6078      	str	r0, [r7, #4]
 8014d80:	460b      	mov	r3, r1
 8014d82:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8014d84:	2300      	movs	r3, #0
 8014d86:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	881b      	ldrh	r3, [r3, #0]
 8014d8c:	b29a      	uxth	r2, r3
 8014d8e:	887b      	ldrh	r3, [r7, #2]
 8014d90:	4013      	ands	r3, r2
 8014d92:	b29b      	uxth	r3, r3
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d002      	beq.n	8014d9e <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8014d98:	2301      	movs	r3, #1
 8014d9a:	73fb      	strb	r3, [r7, #15]
 8014d9c:	e001      	b.n	8014da2 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8014d9e:	2300      	movs	r3, #0
 8014da0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8014da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8014da4:	4618      	mov	r0, r3
 8014da6:	3714      	adds	r7, #20
 8014da8:	46bd      	mov	sp, r7
 8014daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dae:	4770      	bx	lr

08014db0 <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8014db0:	b480      	push	{r7}
 8014db2:	b083      	sub	sp, #12
 8014db4:	af00      	add	r7, sp, #0
 8014db6:	6078      	str	r0, [r7, #4]
 8014db8:	460b      	mov	r3, r1
 8014dba:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8014dbc:	887b      	ldrh	r3, [r7, #2]
 8014dbe:	43db      	mvns	r3, r3
 8014dc0:	b29a      	uxth	r2, r3
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	801a      	strh	r2, [r3, #0]
}
 8014dc6:	370c      	adds	r7, #12
 8014dc8:	46bd      	mov	sp, r7
 8014dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dce:	4770      	bx	lr

08014dd0 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8014dd0:	b480      	push	{r7}
 8014dd2:	b087      	sub	sp, #28
 8014dd4:	af00      	add	r7, sp, #0
 8014dd6:	6078      	str	r0, [r7, #4]
 8014dd8:	460b      	mov	r3, r1
 8014dda:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8014ddc:	2300      	movs	r3, #0
 8014dde:	60fb      	str	r3, [r7, #12]
 8014de0:	2300      	movs	r3, #0
 8014de2:	617b      	str	r3, [r7, #20]
 8014de4:	2300      	movs	r3, #0
 8014de6:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8014de8:	2300      	movs	r3, #0
 8014dea:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8014dec:	887b      	ldrh	r3, [r7, #2]
 8014dee:	b2db      	uxtb	r3, r3
 8014df0:	095b      	lsrs	r3, r3, #5
 8014df2:	b2db      	uxtb	r3, r3
 8014df4:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8014df6:	887b      	ldrh	r3, [r7, #2]
 8014df8:	f003 031f 	and.w	r3, r3, #31
 8014dfc:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8014dfe:	697b      	ldr	r3, [r7, #20]
 8014e00:	2201      	movs	r2, #1
 8014e02:	fa02 f303 	lsl.w	r3, r2, r3
 8014e06:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8014e08:	68bb      	ldr	r3, [r7, #8]
 8014e0a:	2b01      	cmp	r3, #1
 8014e0c:	d106      	bne.n	8014e1c <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	899b      	ldrh	r3, [r3, #12]
 8014e12:	b29b      	uxth	r3, r3
 8014e14:	697a      	ldr	r2, [r7, #20]
 8014e16:	4013      	ands	r3, r2
 8014e18:	617b      	str	r3, [r7, #20]
 8014e1a:	e00f      	b.n	8014e3c <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8014e1c:	68bb      	ldr	r3, [r7, #8]
 8014e1e:	2b02      	cmp	r3, #2
 8014e20:	d106      	bne.n	8014e30 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	8a1b      	ldrh	r3, [r3, #16]
 8014e26:	b29b      	uxth	r3, r3
 8014e28:	697a      	ldr	r2, [r7, #20]
 8014e2a:	4013      	ands	r3, r2
 8014e2c:	617b      	str	r3, [r7, #20]
 8014e2e:	e005      	b.n	8014e3c <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	8a9b      	ldrh	r3, [r3, #20]
 8014e34:	b29b      	uxth	r3, r3
 8014e36:	697a      	ldr	r2, [r7, #20]
 8014e38:	4013      	ands	r3, r2
 8014e3a:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8014e3c:	887b      	ldrh	r3, [r7, #2]
 8014e3e:	0a1b      	lsrs	r3, r3, #8
 8014e40:	b29b      	uxth	r3, r3
 8014e42:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	2201      	movs	r2, #1
 8014e48:	fa02 f303 	lsl.w	r3, r2, r3
 8014e4c:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	881b      	ldrh	r3, [r3, #0]
 8014e52:	b29b      	uxth	r3, r3
 8014e54:	68fa      	ldr	r2, [r7, #12]
 8014e56:	4013      	ands	r3, r2
 8014e58:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8014e5a:	697b      	ldr	r3, [r7, #20]
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d005      	beq.n	8014e6c <USART_GetITStatus+0x9c>
 8014e60:	68fb      	ldr	r3, [r7, #12]
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d002      	beq.n	8014e6c <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
 8014e66:	2301      	movs	r3, #1
 8014e68:	74fb      	strb	r3, [r7, #19]
 8014e6a:	e001      	b.n	8014e70 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
 8014e6c:	2300      	movs	r3, #0
 8014e6e:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8014e70:	7cfb      	ldrb	r3, [r7, #19]
}
 8014e72:	4618      	mov	r0, r3
 8014e74:	371c      	adds	r7, #28
 8014e76:	46bd      	mov	sp, r7
 8014e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e7c:	4770      	bx	lr
 8014e7e:	bf00      	nop

08014e80 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8014e80:	b480      	push	{r7}
 8014e82:	b085      	sub	sp, #20
 8014e84:	af00      	add	r7, sp, #0
 8014e86:	6078      	str	r0, [r7, #4]
 8014e88:	460b      	mov	r3, r1
 8014e8a:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8014e8c:	2300      	movs	r3, #0
 8014e8e:	81fb      	strh	r3, [r7, #14]
 8014e90:	2300      	movs	r3, #0
 8014e92:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8014e94:	887b      	ldrh	r3, [r7, #2]
 8014e96:	0a1b      	lsrs	r3, r3, #8
 8014e98:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8014e9a:	89fb      	ldrh	r3, [r7, #14]
 8014e9c:	2201      	movs	r2, #1
 8014e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8014ea2:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8014ea4:	89bb      	ldrh	r3, [r7, #12]
 8014ea6:	43db      	mvns	r3, r3
 8014ea8:	b29a      	uxth	r2, r3
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	801a      	strh	r2, [r3, #0]
}
 8014eae:	3714      	adds	r7, #20
 8014eb0:	46bd      	mov	sp, r7
 8014eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eb6:	4770      	bx	lr

08014eb8 <WWDG_DeInit>:
  * @brief  Deinitializes the WWDG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void WWDG_DeInit(void)
{
 8014eb8:	b580      	push	{r7, lr}
 8014eba:	af00      	add	r7, sp, #0
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
 8014ebc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8014ec0:	2101      	movs	r1, #1
 8014ec2:	f7fa ff13 	bl	800fcec <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
 8014ec6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8014eca:	2100      	movs	r1, #0
 8014ecc:	f7fa ff0e 	bl	800fcec <RCC_APB1PeriphResetCmd>
}
 8014ed0:	bd80      	pop	{r7, pc}
 8014ed2:	bf00      	nop

08014ed4 <WWDG_SetPrescaler>:
  *     @arg WWDG_Prescaler_4: WWDG counter clock = (PCLK1/4096)/4
  *     @arg WWDG_Prescaler_8: WWDG counter clock = (PCLK1/4096)/8
  * @retval None
  */
void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
{
 8014ed4:	b480      	push	{r7}
 8014ed6:	b085      	sub	sp, #20
 8014ed8:	af00      	add	r7, sp, #0
 8014eda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8014edc:	2300      	movs	r3, #0
 8014ede:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
  /* Clear WDGTB[1:0] bits */
  tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
 8014ee0:	4b08      	ldr	r3, [pc, #32]	; (8014f04 <WWDG_SetPrescaler+0x30>)
 8014ee2:	685b      	ldr	r3, [r3, #4]
 8014ee4:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8014ee8:	60fb      	str	r3, [r7, #12]
  /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
  tmpreg |= WWDG_Prescaler;
 8014eea:	68fa      	ldr	r2, [r7, #12]
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	4313      	orrs	r3, r2
 8014ef0:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  WWDG->CFR = tmpreg;
 8014ef2:	4b04      	ldr	r3, [pc, #16]	; (8014f04 <WWDG_SetPrescaler+0x30>)
 8014ef4:	68fa      	ldr	r2, [r7, #12]
 8014ef6:	605a      	str	r2, [r3, #4]
}
 8014ef8:	3714      	adds	r7, #20
 8014efa:	46bd      	mov	sp, r7
 8014efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f00:	4770      	bx	lr
 8014f02:	bf00      	nop
 8014f04:	40002c00 	.word	0x40002c00

08014f08 <WWDG_SetWindowValue>:
  * @param  WindowValue: specifies the window value to be compared to the downcounter.
  *   This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
 8014f08:	b480      	push	{r7}
 8014f0a:	b085      	sub	sp, #20
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	4603      	mov	r3, r0
 8014f10:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t tmpreg = 0;
 8014f12:	2300      	movs	r3, #0
 8014f14:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_MASK;
 8014f16:	4b09      	ldr	r3, [pc, #36]	; (8014f3c <WWDG_SetWindowValue+0x34>)
 8014f18:	685b      	ldr	r3, [r3, #4]
 8014f1a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014f1e:	60fb      	str	r3, [r7, #12]

  /* Set W[6:0] bits according to WindowValue value */
  tmpreg |= WindowValue & (uint32_t) BIT_MASK;
 8014f20:	79fb      	ldrb	r3, [r7, #7]
 8014f22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	4313      	orrs	r3, r2
 8014f2a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  WWDG->CFR = tmpreg;
 8014f2c:	4b03      	ldr	r3, [pc, #12]	; (8014f3c <WWDG_SetWindowValue+0x34>)
 8014f2e:	68fa      	ldr	r2, [r7, #12]
 8014f30:	605a      	str	r2, [r3, #4]
}
 8014f32:	3714      	adds	r7, #20
 8014f34:	46bd      	mov	sp, r7
 8014f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f3a:	4770      	bx	lr
 8014f3c:	40002c00 	.word	0x40002c00

08014f40 <WWDG_EnableIT>:
  * @note   Once enabled this interrupt cannot be disabled except by a system reset.
  * @param  None
  * @retval None
  */
void WWDG_EnableIT(void)
{
 8014f40:	b480      	push	{r7}
 8014f42:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
 8014f44:	4b03      	ldr	r3, [pc, #12]	; (8014f54 <WWDG_EnableIT+0x14>)
 8014f46:	2201      	movs	r2, #1
 8014f48:	601a      	str	r2, [r3, #0]
}
 8014f4a:	46bd      	mov	sp, r7
 8014f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f50:	4770      	bx	lr
 8014f52:	bf00      	nop
 8014f54:	420580a4 	.word	0x420580a4

08014f58 <WWDG_SetCounter>:
  *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
  *   an immediate reset) 
  * @retval None
  */
void WWDG_SetCounter(uint8_t Counter)
{
 8014f58:	b480      	push	{r7}
 8014f5a:	b083      	sub	sp, #12
 8014f5c:	af00      	add	r7, sp, #0
 8014f5e:	4603      	mov	r3, r0
 8014f60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  /* Write to T[6:0] bits to configure the counter value, no need to do
     a read-modify-write; writing a 0 to WDGA bit does nothing */
  WWDG->CR = Counter & BIT_MASK;
 8014f62:	4b05      	ldr	r3, [pc, #20]	; (8014f78 <WWDG_SetCounter+0x20>)
 8014f64:	79fa      	ldrb	r2, [r7, #7]
 8014f66:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8014f6a:	601a      	str	r2, [r3, #0]
}
 8014f6c:	370c      	adds	r7, #12
 8014f6e:	46bd      	mov	sp, r7
 8014f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f74:	4770      	bx	lr
 8014f76:	bf00      	nop
 8014f78:	40002c00 	.word	0x40002c00

08014f7c <WWDG_Enable>:
  *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
  *   an immediate reset)
  * @retval None
  */
void WWDG_Enable(uint8_t Counter)
{
 8014f7c:	b480      	push	{r7}
 8014f7e:	b083      	sub	sp, #12
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	4603      	mov	r3, r0
 8014f84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  WWDG->CR = WWDG_CR_WDGA | Counter;
 8014f86:	4b05      	ldr	r3, [pc, #20]	; (8014f9c <WWDG_Enable+0x20>)
 8014f88:	79fa      	ldrb	r2, [r7, #7]
 8014f8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8014f8e:	b2d2      	uxtb	r2, r2
 8014f90:	601a      	str	r2, [r3, #0]
}
 8014f92:	370c      	adds	r7, #12
 8014f94:	46bd      	mov	sp, r7
 8014f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f9a:	4770      	bx	lr
 8014f9c:	40002c00 	.word	0x40002c00

08014fa0 <WWDG_GetFlagStatus>:
  * @brief  Checks whether the Early Wakeup interrupt flag is set or not.
  * @param  None
  * @retval The new state of the Early Wakeup interrupt flag (SET or RESET)
  */
FlagStatus WWDG_GetFlagStatus(void)
{
 8014fa0:	b480      	push	{r7}
 8014fa2:	b083      	sub	sp, #12
 8014fa4:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 8014fa6:	2300      	movs	r3, #0
 8014fa8:	71fb      	strb	r3, [r7, #7]
    
  if ((WWDG->SR) != (uint32_t)RESET)
 8014faa:	4b08      	ldr	r3, [pc, #32]	; (8014fcc <WWDG_GetFlagStatus+0x2c>)
 8014fac:	689b      	ldr	r3, [r3, #8]
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d002      	beq.n	8014fb8 <WWDG_GetFlagStatus+0x18>
  {
    bitstatus = SET;
 8014fb2:	2301      	movs	r3, #1
 8014fb4:	71fb      	strb	r3, [r7, #7]
 8014fb6:	e001      	b.n	8014fbc <WWDG_GetFlagStatus+0x1c>
  }
  else
  {
    bitstatus = RESET;
 8014fb8:	2300      	movs	r3, #0
 8014fba:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 8014fbc:	79fb      	ldrb	r3, [r7, #7]
}
 8014fbe:	4618      	mov	r0, r3
 8014fc0:	370c      	adds	r7, #12
 8014fc2:	46bd      	mov	sp, r7
 8014fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fc8:	4770      	bx	lr
 8014fca:	bf00      	nop
 8014fcc:	40002c00 	.word	0x40002c00

08014fd0 <WWDG_ClearFlag>:
  * @brief  Clears Early Wakeup interrupt flag.
  * @param  None
  * @retval None
  */
void WWDG_ClearFlag(void)
{
 8014fd0:	b480      	push	{r7}
 8014fd2:	af00      	add	r7, sp, #0
  WWDG->SR = (uint32_t)RESET;
 8014fd4:	4b03      	ldr	r3, [pc, #12]	; (8014fe4 <WWDG_ClearFlag+0x14>)
 8014fd6:	2200      	movs	r2, #0
 8014fd8:	609a      	str	r2, [r3, #8]
}
 8014fda:	46bd      	mov	sp, r7
 8014fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fe0:	4770      	bx	lr
 8014fe2:	bf00      	nop
 8014fe4:	40002c00 	.word	0x40002c00

08014fe8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8014fe8:	b580      	push	{r7, lr}
 8014fea:	af00      	add	r7, sp, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8014fec:	4b11      	ldr	r3, [pc, #68]	; (8015034 <SystemInit+0x4c>)
 8014fee:	4a11      	ldr	r2, [pc, #68]	; (8015034 <SystemInit+0x4c>)
 8014ff0:	6812      	ldr	r2, [r2, #0]
 8014ff2:	f042 0201 	orr.w	r2, r2, #1
 8014ff6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8014ff8:	4b0e      	ldr	r3, [pc, #56]	; (8015034 <SystemInit+0x4c>)
 8014ffa:	2200      	movs	r2, #0
 8014ffc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8014ffe:	4a0d      	ldr	r2, [pc, #52]	; (8015034 <SystemInit+0x4c>)
 8015000:	4b0c      	ldr	r3, [pc, #48]	; (8015034 <SystemInit+0x4c>)
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8015008:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801500c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 801500e:	4b09      	ldr	r3, [pc, #36]	; (8015034 <SystemInit+0x4c>)
 8015010:	4a09      	ldr	r2, [pc, #36]	; (8015038 <SystemInit+0x50>)
 8015012:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8015014:	4b07      	ldr	r3, [pc, #28]	; (8015034 <SystemInit+0x4c>)
 8015016:	4a07      	ldr	r2, [pc, #28]	; (8015034 <SystemInit+0x4c>)
 8015018:	6812      	ldr	r2, [r2, #0]
 801501a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801501e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8015020:	4b04      	ldr	r3, [pc, #16]	; (8015034 <SystemInit+0x4c>)
 8015022:	2200      	movs	r2, #0
 8015024:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8015026:	f000 f887 	bl	8015138 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801502a:	4b04      	ldr	r3, [pc, #16]	; (801503c <SystemInit+0x54>)
 801502c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8015030:	609a      	str	r2, [r3, #8]
#endif
}
 8015032:	bd80      	pop	{r7, pc}
 8015034:	40023800 	.word	0x40023800
 8015038:	24003010 	.word	0x24003010
 801503c:	e000ed00 	.word	0xe000ed00

08015040 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8015040:	b480      	push	{r7}
 8015042:	b087      	sub	sp, #28
 8015044:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8015046:	2300      	movs	r3, #0
 8015048:	613b      	str	r3, [r7, #16]
 801504a:	2300      	movs	r3, #0
 801504c:	617b      	str	r3, [r7, #20]
 801504e:	2302      	movs	r3, #2
 8015050:	60fb      	str	r3, [r7, #12]
 8015052:	2300      	movs	r3, #0
 8015054:	60bb      	str	r3, [r7, #8]
 8015056:	2302      	movs	r3, #2
 8015058:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 801505a:	4b32      	ldr	r3, [pc, #200]	; (8015124 <SystemCoreClockUpdate+0xe4>)
 801505c:	689b      	ldr	r3, [r3, #8]
 801505e:	f003 030c 	and.w	r3, r3, #12
 8015062:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8015064:	693b      	ldr	r3, [r7, #16]
 8015066:	2b04      	cmp	r3, #4
 8015068:	d007      	beq.n	801507a <SystemCoreClockUpdate+0x3a>
 801506a:	2b08      	cmp	r3, #8
 801506c:	d009      	beq.n	8015082 <SystemCoreClockUpdate+0x42>
 801506e:	2b00      	cmp	r3, #0
 8015070:	d13f      	bne.n	80150f2 <SystemCoreClockUpdate+0xb2>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8015072:	4b2d      	ldr	r3, [pc, #180]	; (8015128 <SystemCoreClockUpdate+0xe8>)
 8015074:	4a2d      	ldr	r2, [pc, #180]	; (801512c <SystemCoreClockUpdate+0xec>)
 8015076:	601a      	str	r2, [r3, #0]
      break;
 8015078:	e03f      	b.n	80150fa <SystemCoreClockUpdate+0xba>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 801507a:	4b2b      	ldr	r3, [pc, #172]	; (8015128 <SystemCoreClockUpdate+0xe8>)
 801507c:	4a2c      	ldr	r2, [pc, #176]	; (8015130 <SystemCoreClockUpdate+0xf0>)
 801507e:	601a      	str	r2, [r3, #0]
      break;
 8015080:	e03b      	b.n	80150fa <SystemCoreClockUpdate+0xba>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8015082:	4b28      	ldr	r3, [pc, #160]	; (8015124 <SystemCoreClockUpdate+0xe4>)
 8015084:	685b      	ldr	r3, [r3, #4]
 8015086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801508a:	0d9b      	lsrs	r3, r3, #22
 801508c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801508e:	4b25      	ldr	r3, [pc, #148]	; (8015124 <SystemCoreClockUpdate+0xe4>)
 8015090:	685b      	ldr	r3, [r3, #4]
 8015092:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015096:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8015098:	68bb      	ldr	r3, [r7, #8]
 801509a:	2b00      	cmp	r3, #0
 801509c:	d00d      	beq.n	80150ba <SystemCoreClockUpdate+0x7a>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 801509e:	4a24      	ldr	r2, [pc, #144]	; (8015130 <SystemCoreClockUpdate+0xf0>)
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80150a6:	4b1f      	ldr	r3, [pc, #124]	; (8015124 <SystemCoreClockUpdate+0xe4>)
 80150a8:	6859      	ldr	r1, [r3, #4]
 80150aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80150ae:	400b      	ands	r3, r1
 80150b0:	099b      	lsrs	r3, r3, #6
 80150b2:	fb03 f302 	mul.w	r3, r3, r2
 80150b6:	617b      	str	r3, [r7, #20]
 80150b8:	e00c      	b.n	80150d4 <SystemCoreClockUpdate+0x94>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80150ba:	4a1c      	ldr	r2, [pc, #112]	; (801512c <SystemCoreClockUpdate+0xec>)
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	fbb2 f2f3 	udiv	r2, r2, r3
 80150c2:	4b18      	ldr	r3, [pc, #96]	; (8015124 <SystemCoreClockUpdate+0xe4>)
 80150c4:	6859      	ldr	r1, [r3, #4]
 80150c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80150ca:	400b      	ands	r3, r1
 80150cc:	099b      	lsrs	r3, r3, #6
 80150ce:	fb03 f302 	mul.w	r3, r3, r2
 80150d2:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80150d4:	4b13      	ldr	r3, [pc, #76]	; (8015124 <SystemCoreClockUpdate+0xe4>)
 80150d6:	685b      	ldr	r3, [r3, #4]
 80150d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80150dc:	0c1b      	lsrs	r3, r3, #16
 80150de:	3301      	adds	r3, #1
 80150e0:	005b      	lsls	r3, r3, #1
 80150e2:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80150e4:	697a      	ldr	r2, [r7, #20]
 80150e6:	68fb      	ldr	r3, [r7, #12]
 80150e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80150ec:	4b0e      	ldr	r3, [pc, #56]	; (8015128 <SystemCoreClockUpdate+0xe8>)
 80150ee:	601a      	str	r2, [r3, #0]
      break;
 80150f0:	e003      	b.n	80150fa <SystemCoreClockUpdate+0xba>
    default:
      SystemCoreClock = HSI_VALUE;
 80150f2:	4b0d      	ldr	r3, [pc, #52]	; (8015128 <SystemCoreClockUpdate+0xe8>)
 80150f4:	4a0d      	ldr	r2, [pc, #52]	; (801512c <SystemCoreClockUpdate+0xec>)
 80150f6:	601a      	str	r2, [r3, #0]
      break;
 80150f8:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80150fa:	4b0a      	ldr	r3, [pc, #40]	; (8015124 <SystemCoreClockUpdate+0xe4>)
 80150fc:	689b      	ldr	r3, [r3, #8]
 80150fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015102:	091b      	lsrs	r3, r3, #4
 8015104:	4a0b      	ldr	r2, [pc, #44]	; (8015134 <SystemCoreClockUpdate+0xf4>)
 8015106:	5cd3      	ldrb	r3, [r2, r3]
 8015108:	b2db      	uxtb	r3, r3
 801510a:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 801510c:	4b06      	ldr	r3, [pc, #24]	; (8015128 <SystemCoreClockUpdate+0xe8>)
 801510e:	681a      	ldr	r2, [r3, #0]
 8015110:	693b      	ldr	r3, [r7, #16]
 8015112:	40da      	lsrs	r2, r3
 8015114:	4b04      	ldr	r3, [pc, #16]	; (8015128 <SystemCoreClockUpdate+0xe8>)
 8015116:	601a      	str	r2, [r3, #0]
}
 8015118:	371c      	adds	r7, #28
 801511a:	46bd      	mov	sp, r7
 801511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015120:	4770      	bx	lr
 8015122:	bf00      	nop
 8015124:	40023800 	.word	0x40023800
 8015128:	20000074 	.word	0x20000074
 801512c:	00f42400 	.word	0x00f42400
 8015130:	007a1200 	.word	0x007a1200
 8015134:	20000078 	.word	0x20000078

08015138 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8015138:	b480      	push	{r7}
 801513a:	b083      	sub	sp, #12
 801513c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 801513e:	2300      	movs	r3, #0
 8015140:	607b      	str	r3, [r7, #4]
 8015142:	2300      	movs	r3, #0
 8015144:	603b      	str	r3, [r7, #0]
                   (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

#else /* PLL_SOURCE_HSE_BYPASS or PLL_SOURCE_HSE */

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8015146:	4b42      	ldr	r3, [pc, #264]	; (8015250 <SetSysClock+0x118>)
 8015148:	4a41      	ldr	r2, [pc, #260]	; (8015250 <SetSysClock+0x118>)
 801514a:	6812      	ldr	r2, [r2, #0]
 801514c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8015150:	601a      	str	r2, [r3, #0]
  RCC->CR |= ((uint32_t)RCC_CR_HSEBYP);
#endif   /* PLL_SOURCE_HSE_BYPASS */
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8015152:	4b3f      	ldr	r3, [pc, #252]	; (8015250 <SetSysClock+0x118>)
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801515a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	3301      	adds	r3, #1
 8015160:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8015162:	683b      	ldr	r3, [r7, #0]
 8015164:	2b00      	cmp	r3, #0
 8015166:	d103      	bne.n	8015170 <SetSysClock+0x38>
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 801516e:	d1f0      	bne.n	8015152 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8015170:	4b37      	ldr	r3, [pc, #220]	; (8015250 <SetSysClock+0x118>)
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015178:	2b00      	cmp	r3, #0
 801517a:	d002      	beq.n	8015182 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 801517c:	2301      	movs	r3, #1
 801517e:	603b      	str	r3, [r7, #0]
 8015180:	e001      	b.n	8015186 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8015182:	2300      	movs	r3, #0
 8015184:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8015186:	683b      	ldr	r3, [r7, #0]
 8015188:	2b01      	cmp	r3, #1
 801518a:	d102      	bne.n	8015192 <SetSysClock+0x5a>
  {
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 801518c:	4b30      	ldr	r3, [pc, #192]	; (8015250 <SetSysClock+0x118>)
 801518e:	4a31      	ldr	r2, [pc, #196]	; (8015254 <SetSysClock+0x11c>)
 8015190:	605a      	str	r2, [r3, #4]
         configuration. User can add here some code to deal with this error */
  }
#endif /*PLL_SOURCE_HSI*/
  
      /* Select regulator voltage output Scale 1 mode, System frequency up to 180 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8015192:	4b2f      	ldr	r3, [pc, #188]	; (8015250 <SetSysClock+0x118>)
 8015194:	4a2e      	ldr	r2, [pc, #184]	; (8015250 <SetSysClock+0x118>)
 8015196:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8015198:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 801519c:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 801519e:	4b2e      	ldr	r3, [pc, #184]	; (8015258 <SetSysClock+0x120>)
 80151a0:	4a2d      	ldr	r2, [pc, #180]	; (8015258 <SetSysClock+0x120>)
 80151a2:	6812      	ldr	r2, [r2, #0]
 80151a4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80151a8:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80151aa:	4b29      	ldr	r3, [pc, #164]	; (8015250 <SetSysClock+0x118>)
 80151ac:	4a28      	ldr	r2, [pc, #160]	; (8015250 <SetSysClock+0x118>)
 80151ae:	6892      	ldr	r2, [r2, #8]
 80151b0:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80151b2:	4b27      	ldr	r3, [pc, #156]	; (8015250 <SetSysClock+0x118>)
 80151b4:	4a26      	ldr	r2, [pc, #152]	; (8015250 <SetSysClock+0x118>)
 80151b6:	6892      	ldr	r2, [r2, #8]
 80151b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80151bc:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80151be:	4b24      	ldr	r3, [pc, #144]	; (8015250 <SetSysClock+0x118>)
 80151c0:	4a23      	ldr	r2, [pc, #140]	; (8015250 <SetSysClock+0x118>)
 80151c2:	6892      	ldr	r2, [r2, #8]
 80151c4:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80151c8:	609a      	str	r2, [r3, #8]

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80151ca:	4b21      	ldr	r3, [pc, #132]	; (8015250 <SetSysClock+0x118>)
 80151cc:	4a20      	ldr	r2, [pc, #128]	; (8015250 <SetSysClock+0x118>)
 80151ce:	6812      	ldr	r2, [r2, #0]
 80151d0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80151d4:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80151d6:	bf00      	nop
 80151d8:	4b1d      	ldr	r3, [pc, #116]	; (8015250 <SetSysClock+0x118>)
 80151da:	681b      	ldr	r3, [r3, #0]
 80151dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d0f9      	beq.n	80151d8 <SetSysClock+0xa0>
    {
    }

    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 80151e4:	4b1c      	ldr	r3, [pc, #112]	; (8015258 <SetSysClock+0x120>)
 80151e6:	4a1c      	ldr	r2, [pc, #112]	; (8015258 <SetSysClock+0x120>)
 80151e8:	6812      	ldr	r2, [r2, #0]
 80151ea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80151ee:	601a      	str	r2, [r3, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 80151f0:	bf00      	nop
 80151f2:	4b19      	ldr	r3, [pc, #100]	; (8015258 <SetSysClock+0x120>)
 80151f4:	685b      	ldr	r3, [r3, #4]
 80151f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d0f9      	beq.n	80151f2 <SetSysClock+0xba>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 80151fe:	4b16      	ldr	r3, [pc, #88]	; (8015258 <SetSysClock+0x120>)
 8015200:	4a15      	ldr	r2, [pc, #84]	; (8015258 <SetSysClock+0x120>)
 8015202:	6812      	ldr	r2, [r2, #0]
 8015204:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8015208:	601a      	str	r2, [r3, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 801520a:	bf00      	nop
 801520c:	4b12      	ldr	r3, [pc, #72]	; (8015258 <SetSysClock+0x120>)
 801520e:	685b      	ldr	r3, [r3, #4]
 8015210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015214:	2b00      	cmp	r3, #0
 8015216:	d0f9      	beq.n	801520c <SetSysClock+0xd4>
    {
    } 
     
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8015218:	4b10      	ldr	r3, [pc, #64]	; (801525c <SetSysClock+0x124>)
 801521a:	f240 7205 	movw	r2, #1797	; 0x705
 801521e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8015220:	4b0b      	ldr	r3, [pc, #44]	; (8015250 <SetSysClock+0x118>)
 8015222:	4a0b      	ldr	r2, [pc, #44]	; (8015250 <SetSysClock+0x118>)
 8015224:	6892      	ldr	r2, [r2, #8]
 8015226:	f022 0203 	bic.w	r2, r2, #3
 801522a:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 801522c:	4b08      	ldr	r3, [pc, #32]	; (8015250 <SetSysClock+0x118>)
 801522e:	4a08      	ldr	r2, [pc, #32]	; (8015250 <SetSysClock+0x118>)
 8015230:	6892      	ldr	r2, [r2, #8]
 8015232:	f042 0202 	orr.w	r2, r2, #2
 8015236:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8015238:	bf00      	nop
 801523a:	4b05      	ldr	r3, [pc, #20]	; (8015250 <SetSysClock+0x118>)
 801523c:	689b      	ldr	r3, [r3, #8]
 801523e:	f003 030c 	and.w	r3, r3, #12
 8015242:	2b08      	cmp	r3, #8
 8015244:	d1f9      	bne.n	801523a <SetSysClock+0x102>
    {
    }
}
 8015246:	370c      	adds	r7, #12
 8015248:	46bd      	mov	sp, r7
 801524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801524e:	4770      	bx	lr
 8015250:	40023800 	.word	0x40023800
 8015254:	07405a08 	.word	0x07405a08
 8015258:	40007000 	.word	0x40007000
 801525c:	40023c00 	.word	0x40023c00

08015260 <SysTick_Handler>:
	.type	USART2_IRQHandler, %function
	.global USART2_IRQHandler
SysTick_Handler:
USART2_IRQHandler:
	/* disable global interupt */
	cpsid i
 8015260:	b672      	cpsid	i

	mrs r0, psp
 8015262:	f3ef 8009 	mrs	r0, PSP
	stmdb r0!, {r7}
 8015266:	f840 7d04 	str.w	r7, [r0, #-4]!

	/* Get ISR number */
	mrs r7, ipsr
 801526a:	f3ef 8705 	mrs	r7, IPSR
	neg r7, r7
 801526e:	f1c7 0700 	rsb	r7, r7, #0

	/* save user state */
	stmdb r0!, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8015272:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* load kernel state */
	pop {r4, r5, r6, r7, r8, r9, r10, r11, ip, lr}
 8015276:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
	msr psr_nzcvq, ip
 801527a:	f38c 8803 	msr	PSR, ip

	bx lr
 801527e:	4770      	bx	lr

08015280 <SVC_Handler>:

	.type	SVC_Handler, %function
	.global SVC_Handler
SVC_Handler:
	/* save user state */
	mrs r0, psp
 8015280:	f3ef 8009 	mrs	r0, PSP
	stmdb r0!, {r7}
 8015284:	f840 7d04 	str.w	r7, [r0, #-4]!
	stmdb r0!, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8015288:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* load kernel state */
	pop {r4, r5, r6, r7, r8, r9, r10, r11, ip, lr}
 801528c:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
	msr psr_nzcvq, ip
 8015290:	f38c 8803 	msr	PSR, ip
	
	bx lr
 8015294:	4770      	bx	lr

08015296 <activate>:

	.global activate
activate:
	/* save kernel state */
	mrs ip, psr
 8015296:	f3ef 8c03 	mrs	ip, PSR
	push {r4, r5, r6, r7, r8, r9, r10, r11, ip, lr}
 801529a:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
	
	/* load user state */
	ldmia r0!, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 801529e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ldmia r0!, {r7}
 80152a2:	c880      	ldmia	r0!, {r7}
	
	/* switch to process stack pointer */
	msr psp, r0
 80152a4:	f380 8809 	msr	PSP, r0
	mov r0, #3
 80152a8:	f04f 0003 	mov.w	r0, #3
	msr control, r0
 80152ac:	f380 8814 	msr	CONTROL, r0

	/* enable global interupt */
	cpsie i
 80152b0:	b662      	cpsie	i
	bx lr
 80152b2:	4770      	bx	lr
	...

080152c0 <memcpy>:
    .syntax unified
    .align 4

.global memcpy
memcpy:
	push    {r0}
 80152c0:	b401      	push	{r0}
	cmp     r2, #4
 80152c2:	2a04      	cmp	r2, #4
	it      lo
 80152c4:	bf38      	it	cc
	lslslo  r2, r2, #30         /* Adjust r2 for less_than_4_bytes */
 80152c6:	ea5f 7282 	movscc.w	r2, r2, lsl #30
	blo     less_than_4_bytes
 80152ca:	f0c0 8031 	bcc.w	8015330 <less_than_4_bytes>
	
	ands    r3, r1, #3
 80152ce:	f011 0303 	ands.w	r3, r1, #3
	beq     aligned
 80152d2:	f000 800e 	beq.w	80152f2 <aligned>
	
	negs    r3, r3              /* Next aligned offset = (4 - src & 3) & 3 */
 80152d6:	425b      	negs	r3, r3
	lsls    r3, r3, #31
 80152d8:	07db      	lsls	r3, r3, #31
	ittt    cs
 80152da:	bf22      	ittt	cs
	ldrhcs  r3, [r1], #2		/* Load if 2 bytes unaligned */
 80152dc:	f831 3b02 	ldrhcs.w	r3, [r1], #2
	subcs   r2, r2, #2
 80152e0:	3a02      	subcs	r2, #2
	strhcs  r3, [r0], #2		/* Save if 2 bytes unaligned */
 80152e2:	f820 3b02 	strhcs.w	r3, [r0], #2
	ittt    mi
 80152e6:	bf42      	ittt	mi
	ldrbmi  r3, [r1] ,#1		/* Load if 1 byte unaligned */
 80152e8:	f811 3b01 	ldrbmi.w	r3, [r1], #1
	submi   r2, r2, #1
 80152ec:	3a01      	submi	r2, #1
	strbmi  r3, [r0] ,#1		/* Save if 1 byte unaligned */
 80152ee:	f800 3b01 	strbmi.w	r3, [r0], #1

080152f2 <aligned>:

aligned:
	push    {r4 - r10}
 80152f2:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
	subs 	r2, #32		 
 80152f6:	3a20      	subs	r2, #32
	blo     less_than_32_bytes
 80152f8:	f0c0 8007 	bcc.w	801530a <less_than_32_bytes>

080152fc <L>:
L:
	ldmia 	r1!, {r3 - r10}
 80152fc:	e8b1 07f8 	ldmia.w	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
	subs 	r2, #32		 
 8015300:	3a20      	subs	r2, #32
	stmia	r0!, {r3 - r10}
 8015302:	e8a0 07f8 	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
	bhs 	L
 8015306:	f4bf aff9 	bcs.w	80152fc <L>

0801530a <less_than_32_bytes>:
					
less_than_32_bytes:
	lsls    r2, r2, #28
 801530a:	0712      	lsls	r2, r2, #28
	it      cs
 801530c:	bf28      	it	cs
	ldmiacs	r1!, {r3 - r6}		/* Load if 16 bytes remained */
 801530e:	c978      	ldmiacs	r1!, {r3, r4, r5, r6}
	it      mi
 8015310:	bf48      	it	mi
	ldmiami r1!, {r7 - r8}		/* Load if 8 bytes remained */
 8015312:	e8b1 0180 	ldmiami.w	r1!, {r7, r8}
	it      cs
 8015316:	bf28      	it	cs
	stmiacs	r0!, {r3 - r6}
 8015318:	c078      	stmiacs	r0!, {r3, r4, r5, r6}
	it      mi
 801531a:	bf48      	it	mi
	stmiami r0!, {r7 - r8}
 801531c:	e8a0 0180 	stmiami.w	r0!, {r7, r8}
	
	lsls    r2, r2, #2
 8015320:	0092      	lsls	r2, r2, #2
	itt     cs
 8015322:	bf24      	itt	cs
	ldrcs   r3, [r1], #4		/* Load if 4 bytes remained */
 8015324:	f851 3b04 	ldrcs.w	r3, [r1], #4
	strcs   r3, [r0], #4
 8015328:	f840 3b04 	strcs.w	r3, [r0], #4
	
	pop     {r4 - r10}
 801532c:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}

08015330 <less_than_4_bytes>:
	
less_than_4_bytes:
	it      ne
 8015330:	bf18      	it	ne
	ldrne   r3, [r1]    		/* Load if ether 2 bytes or 1 byte remained */
 8015332:	680b      	ldrne	r3, [r1, #0]
	lsls    r2, r2, #1
 8015334:	0052      	lsls	r2, r2, #1
	itt     cs
 8015336:	bf24      	itt	cs
	strhcs  r3, [r0],#2			/* Save if 2 bytes remained */
 8015338:	f820 3b02 	strhcs.w	r3, [r0], #2
	lsrcs   r3, r3, 16
 801533c:	0c1b      	lsrcs	r3, r3, #16
	it      mi
 801533e:	bf48      	it	mi
	strbmi  r3, [r0],#1			/* Save if 1 byte remained */
 8015340:	f800 3b01 	strbmi.w	r3, [r0], #1
	
	pop     {r0}				
 8015344:	bc01      	pop	{r0}
	bx      lr				
 8015346:	4770      	bx	lr
 8015348:	f3af 8000 	nop.w
 801534c:	f3af 8000 	nop.w

08015350 <fork>:
	.fpu softvfp
	.thumb

.global fork
fork:
	push {r7}
 8015350:	b480      	push	{r7}
	mov r7, #0x1
 8015352:	f04f 0701 	mov.w	r7, #1
	svc 0
 8015356:	df00      	svc	0
	nop
 8015358:	bf00      	nop
	pop {r7}
 801535a:	bc80      	pop	{r7}
	bx lr
 801535c:	4770      	bx	lr

0801535e <getpid>:
.global getpid
getpid:
	push {r7}
 801535e:	b480      	push	{r7}
	mov r7, #0x2
 8015360:	f04f 0702 	mov.w	r7, #2
	svc 0
 8015364:	df00      	svc	0
	nop
 8015366:	bf00      	nop
	pop {r7}
 8015368:	bc80      	pop	{r7}
	bx lr
 801536a:	4770      	bx	lr

0801536c <write>:
.global write
write:
	push {r7}
 801536c:	b480      	push	{r7}
	mov r7, #0x3
 801536e:	f04f 0703 	mov.w	r7, #3
	svc 0
 8015372:	df00      	svc	0
	nop
 8015374:	bf00      	nop
	pop {r7}
 8015376:	bc80      	pop	{r7}
	bx lr
 8015378:	4770      	bx	lr

0801537a <read>:
.global read
read:
	push {r7}
 801537a:	b480      	push	{r7}
	mov r7, #0x4
 801537c:	f04f 0704 	mov.w	r7, #4
	svc 0
 8015380:	df00      	svc	0
	nop
 8015382:	bf00      	nop
	pop {r7}
 8015384:	bc80      	pop	{r7}
	bx lr
 8015386:	4770      	bx	lr

08015388 <interrupt_wait>:
.global interrupt_wait
interrupt_wait:
	push {r7}
 8015388:	b480      	push	{r7}
	mov r7, #0x5
 801538a:	f04f 0705 	mov.w	r7, #5
	svc 0
 801538e:	df00      	svc	0
	nop
 8015390:	bf00      	nop
	pop {r7}
 8015392:	bc80      	pop	{r7}
	bx lr
 8015394:	4770      	bx	lr

08015396 <getpriority>:
.global getpriority
getpriority:
	push {r7}
 8015396:	b480      	push	{r7}
	mov r7, #0x6
 8015398:	f04f 0706 	mov.w	r7, #6
	svc 0
 801539c:	df00      	svc	0
	nop
 801539e:	bf00      	nop
	pop {r7}
 80153a0:	bc80      	pop	{r7}
	bx lr
 80153a2:	4770      	bx	lr

080153a4 <setpriority>:
.global setpriority
setpriority:
	push {r7}
 80153a4:	b480      	push	{r7}
	mov r7, #0x7
 80153a6:	f04f 0707 	mov.w	r7, #7
	svc 0
 80153aa:	df00      	svc	0
	nop
 80153ac:	bf00      	nop
	pop {r7}
 80153ae:	bc80      	pop	{r7}
	bx lr
 80153b0:	4770      	bx	lr

080153b2 <mknod>:
.global mknod
mknod:
	push {r7}
 80153b2:	b480      	push	{r7}
	mov r7, #0x8
 80153b4:	f04f 0708 	mov.w	r7, #8
	svc 0
 80153b8:	df00      	svc	0
	nop
 80153ba:	bf00      	nop
	pop {r7}
 80153bc:	bc80      	pop	{r7}
	bx lr
 80153be:	4770      	bx	lr

080153c0 <sleep>:
.global sleep
sleep:
	push {r7}
 80153c0:	b480      	push	{r7}
	mov r7, #0x9
 80153c2:	f04f 0709 	mov.w	r7, #9
	svc 0
 80153c6:	df00      	svc	0
	nop
 80153c8:	bf00      	nop
	pop {r7}
 80153ca:	bc80      	pop	{r7}
	bx lr
 80153cc:	4770      	bx	lr

080153ce <lseek>:
.global lseek
lseek:
	push {r7}
 80153ce:	b480      	push	{r7}
	mov r7, #0xa
 80153d0:	f04f 070a 	mov.w	r7, #10
	svc 0
 80153d4:	df00      	svc	0
	nop
 80153d6:	bf00      	nop
	pop {r7}
 80153d8:	bc80      	pop	{r7}
	bx lr
 80153da:	4770      	bx	lr
 80153dc:	080174fc 	.word	0x080174fc
 80153e0:	20000000 	.word	0x20000000
 80153e4:	2000008c 	.word	0x2000008c
 80153e8:	2000008c 	.word	0x2000008c
 80153ec:	200052b4 	.word	0x200052b4

080153f0 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80153f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80153f2:	f000 b804 	b.w	80153fe <LoopCopyDataInit>

080153f6 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80153f6:	4b0c      	ldr	r3, [pc, #48]	; (8015428 <LoopFillZerobss+0x12>)
  ldr  r3, [r3, r1]
 80153f8:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80153fa:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80153fc:	3104      	adds	r1, #4

080153fe <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80153fe:	480b      	ldr	r0, [pc, #44]	; (801542c <LoopFillZerobss+0x16>)
  ldr  r3, =_edata
 8015400:	4b0b      	ldr	r3, [pc, #44]	; (8015430 <LoopFillZerobss+0x1a>)
  adds  r2, r0, r1
 8015402:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8015404:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8015406:	f4ff aff6 	bcc.w	80153f6 <CopyDataInit>
  ldr  r2, =_sbss
 801540a:	4a0a      	ldr	r2, [pc, #40]	; (8015434 <LoopFillZerobss+0x1e>)
  b  LoopFillZerobss
 801540c:	f000 b803 	b.w	8015416 <LoopFillZerobss>

08015410 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8015410:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8015412:	f842 3b04 	str.w	r3, [r2], #4

08015416 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8015416:	4b08      	ldr	r3, [pc, #32]	; (8015438 <LoopFillZerobss+0x22>)
  cmp  r2, r3
 8015418:	429a      	cmp	r2, r3
  bcc  FillZerobss
 801541a:	f4ff aff9 	bcc.w	8015410 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801541e:	f7ff fde3 	bl	8014fe8 <SystemInit>
/* Call the application's entry point.*/
  bl  main
 8015422:	f7ed f927 	bl	8002674 <main>
  bx  lr    
 8015426:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8015428:	080174fc 	.word	0x080174fc
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 801542c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8015430:	2000008c 	.word	0x2000008c
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8015434:	2000008c 	.word	0x2000008c
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8015438:	200052b4 	.word	0x200052b4

0801543c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801543c:	f7ff bffe 	b.w	801543c <ADC_IRQHandler>

08015440 <memset>:
 8015440:	b4f0      	push	{r4, r5, r6, r7}
 8015442:	0784      	lsls	r4, r0, #30
 8015444:	d043      	beq.n	80154ce <memset+0x8e>
 8015446:	1e54      	subs	r4, r2, #1
 8015448:	2a00      	cmp	r2, #0
 801544a:	d03e      	beq.n	80154ca <memset+0x8a>
 801544c:	b2cd      	uxtb	r5, r1
 801544e:	4603      	mov	r3, r0
 8015450:	e003      	b.n	801545a <memset+0x1a>
 8015452:	1e62      	subs	r2, r4, #1
 8015454:	2c00      	cmp	r4, #0
 8015456:	d038      	beq.n	80154ca <memset+0x8a>
 8015458:	4614      	mov	r4, r2
 801545a:	f803 5b01 	strb.w	r5, [r3], #1
 801545e:	079a      	lsls	r2, r3, #30
 8015460:	d1f7      	bne.n	8015452 <memset+0x12>
 8015462:	2c03      	cmp	r4, #3
 8015464:	d92a      	bls.n	80154bc <memset+0x7c>
 8015466:	b2cd      	uxtb	r5, r1
 8015468:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 801546c:	2c0f      	cmp	r4, #15
 801546e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8015472:	d915      	bls.n	80154a0 <memset+0x60>
 8015474:	f1a4 0710 	sub.w	r7, r4, #16
 8015478:	093f      	lsrs	r7, r7, #4
 801547a:	f103 0610 	add.w	r6, r3, #16
 801547e:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8015482:	461a      	mov	r2, r3
 8015484:	6015      	str	r5, [r2, #0]
 8015486:	6055      	str	r5, [r2, #4]
 8015488:	6095      	str	r5, [r2, #8]
 801548a:	60d5      	str	r5, [r2, #12]
 801548c:	3210      	adds	r2, #16
 801548e:	42b2      	cmp	r2, r6
 8015490:	d1f8      	bne.n	8015484 <memset+0x44>
 8015492:	f004 040f 	and.w	r4, r4, #15
 8015496:	3701      	adds	r7, #1
 8015498:	2c03      	cmp	r4, #3
 801549a:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 801549e:	d90d      	bls.n	80154bc <memset+0x7c>
 80154a0:	461e      	mov	r6, r3
 80154a2:	4622      	mov	r2, r4
 80154a4:	3a04      	subs	r2, #4
 80154a6:	2a03      	cmp	r2, #3
 80154a8:	f846 5b04 	str.w	r5, [r6], #4
 80154ac:	d8fa      	bhi.n	80154a4 <memset+0x64>
 80154ae:	1f22      	subs	r2, r4, #4
 80154b0:	f022 0203 	bic.w	r2, r2, #3
 80154b4:	3204      	adds	r2, #4
 80154b6:	4413      	add	r3, r2
 80154b8:	f004 0403 	and.w	r4, r4, #3
 80154bc:	b12c      	cbz	r4, 80154ca <memset+0x8a>
 80154be:	b2c9      	uxtb	r1, r1
 80154c0:	441c      	add	r4, r3
 80154c2:	f803 1b01 	strb.w	r1, [r3], #1
 80154c6:	42a3      	cmp	r3, r4
 80154c8:	d1fb      	bne.n	80154c2 <memset+0x82>
 80154ca:	bcf0      	pop	{r4, r5, r6, r7}
 80154cc:	4770      	bx	lr
 80154ce:	4614      	mov	r4, r2
 80154d0:	4603      	mov	r3, r0
 80154d2:	e7c6      	b.n	8015462 <memset+0x22>

080154d4 <strcpy>:
 80154d4:	ea80 0201 	eor.w	r2, r0, r1
 80154d8:	4684      	mov	ip, r0
 80154da:	f012 0f03 	tst.w	r2, #3
 80154de:	d14f      	bne.n	8015580 <strcpy+0xac>
 80154e0:	f011 0f03 	tst.w	r1, #3
 80154e4:	d132      	bne.n	801554c <strcpy+0x78>
 80154e6:	f84d 4d04 	str.w	r4, [sp, #-4]!
 80154ea:	f011 0f04 	tst.w	r1, #4
 80154ee:	f851 3b04 	ldr.w	r3, [r1], #4
 80154f2:	d00b      	beq.n	801550c <strcpy+0x38>
 80154f4:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 80154f8:	439a      	bics	r2, r3
 80154fa:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80154fe:	bf04      	itt	eq
 8015500:	f84c 3b04 	streq.w	r3, [ip], #4
 8015504:	f851 3b04 	ldreq.w	r3, [r1], #4
 8015508:	d116      	bne.n	8015538 <strcpy+0x64>
 801550a:	bf00      	nop
 801550c:	f851 4b04 	ldr.w	r4, [r1], #4
 8015510:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8015514:	439a      	bics	r2, r3
 8015516:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 801551a:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 801551e:	d10b      	bne.n	8015538 <strcpy+0x64>
 8015520:	f84c 3b04 	str.w	r3, [ip], #4
 8015524:	43a2      	bics	r2, r4
 8015526:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 801552a:	bf04      	itt	eq
 801552c:	f851 3b04 	ldreq.w	r3, [r1], #4
 8015530:	f84c 4b04 	streq.w	r4, [ip], #4
 8015534:	d0ea      	beq.n	801550c <strcpy+0x38>
 8015536:	4623      	mov	r3, r4
 8015538:	f80c 3b01 	strb.w	r3, [ip], #1
 801553c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8015540:	ea4f 2333 	mov.w	r3, r3, ror #8
 8015544:	d1f8      	bne.n	8015538 <strcpy+0x64>
 8015546:	f85d 4b04 	ldr.w	r4, [sp], #4
 801554a:	4770      	bx	lr
 801554c:	f011 0f01 	tst.w	r1, #1
 8015550:	d006      	beq.n	8015560 <strcpy+0x8c>
 8015552:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015556:	f80c 2b01 	strb.w	r2, [ip], #1
 801555a:	2a00      	cmp	r2, #0
 801555c:	bf08      	it	eq
 801555e:	4770      	bxeq	lr
 8015560:	f011 0f02 	tst.w	r1, #2
 8015564:	d0bf      	beq.n	80154e6 <strcpy+0x12>
 8015566:	f831 2b02 	ldrh.w	r2, [r1], #2
 801556a:	f012 0fff 	tst.w	r2, #255	; 0xff
 801556e:	bf16      	itet	ne
 8015570:	f82c 2b02 	strhne.w	r2, [ip], #2
 8015574:	f88c 2000 	strbeq.w	r2, [ip]
 8015578:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 801557c:	d1b3      	bne.n	80154e6 <strcpy+0x12>
 801557e:	4770      	bx	lr
 8015580:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015584:	f80c 2b01 	strb.w	r2, [ip], #1
 8015588:	2a00      	cmp	r2, #0
 801558a:	d1f9      	bne.n	8015580 <strcpy+0xac>
 801558c:	4770      	bx	lr
 801558e:	bf00      	nop

08015590 <cmd_data>:
 8015590:	6365 6f68 0000 0000 0000 0000 0000 0000     echo............
 80155a0:	0000 0000 1f51 0800 6853 776f 7720 726f     ....Q...Show wor
 80155b0:	7364 7920 756f 6920 706e 7475 002e 0000     ds you input....
	...
 80159a8:	7865 6f70 7472 0000 0000 0000 0000 0000     export..........
 80159b8:	0000 0000 1bb1 0800 7845 6f70 7472 6520     ........Export e
 80159c8:	766e 7269 6e6f 656d 746e 7620 7261 6169     nvironment varia
 80159d8:	6c62 7365 002e 0000 0000 0000 0000 0000     bles............
	...
 8015dc0:	6568 706c 0000 0000 0000 0000 0000 0000     help............
 8015dd0:	0000 0000 1e61 0800 694c 7473 6120 6c6c     ....a...List all
 8015de0:	6320 6d6f 616d 646e 2073 6f79 2075 6163      commands you ca
 8015df0:	206e 7375 2e65 0000 0000 0000 0000 0000     n use...........
	...
 80161d8:	6968 7473 726f 0079 0000 0000 0000 0000     history.........
 80161e8:	0000 0000 2131 0800 6853 776f 6c20 7461     ....1!..Show lat
 80161f8:	7365 2074 6f63 6d6d 6e61 7364 6520 746e     est commands ent
 8016208:	7265 6465 002e 0000 0000 0000 0000 0000     ered............
	...
 80165f0:	616d 006e 0000 0000 0000 0000 0000 0000     man.............
 8016600:	0000 0000 2021 0800 614d 756e 6c61 7020     ....! ..Manual p
 8016610:	6761 7265 002e 0000 0000 0000 0000 0000     ager............
	...
 8016a08:	7370 0000 0000 0000 0000 0000 0000 0000     ps..............
 8016a18:	0000 0000 1c85 0800 694c 7473 6120 6c6c     ........List all
 8016a28:	7420 6568 7020 6f72 6563 7373 7365 002e      the processes..
	...
 8016e20:	7878 0064 0000 0000 0000 0000 0000 0000     xxd.............
 8016e30:	0000 0000 2291 0800 614d 656b 6120 6820     ....."..Make a h
 8016e40:	7865 7564 706d 002e 0000 0000 0000 0000     exdump..........
	...
 8017238:	642f 7665 742f 7974 2f30 756f 0074 0000     /dev/tty0/out...
 8017248:	642f 7665 742f 7974 2f30 6e69 0000 0000     /dev/tty0/in....
 8017258:	6548 6c6c 2c6f 5720 726f 646c 0a21 0000     Hello, World!...
 8017268:	742f 706d 6d2f 7571 7565 2f65 756f 0074     /tmp/mqueue/out.
 8017278:	6548 6c6c 206f 0a31 0000 0000 6548 6c6c     Hello 1.....Hell
 8017288:	206f 0a32 0000 0000 6f47 3a74 0000 0000     o 2.....Got:....
 8017298:	2008 0008 6873 6e65 7767 6e65 7340 6568     . ..shengwen@she
 80172a8:	676e 6577 2d6e 5453 334d 3a32 247e 0020     ngwen-STM32:~$ .
 80172b8:	203a 6f63 6d6d 6e61 2064 6f6e 2074 6f66     : command not fo
 80172c8:	6e75 0064 4950 2044 5453 5441 5355 5020     und.PID STATUS P
 80172d8:	4952 524f 5449 0059 3130 3332 3534 3736     RIORITY.01234567
 80172e8:	3938 4241 4443 4645 0000 0000 203a 0000     89ABCDEF....: ..
 80172f8:	6854 7369 7320 7379 6574 206d 6168 2073     This system has 
 8017308:	6f63 6d6d 6e61 7364 6120 2073 6f66 6c6c     commands as foll
 8017318:	776f 0d0a 0000 0000 6e2d 0000 0020 0000     ow......-n.. ...
 8017328:	414e 454d 203a 0000 4544 4353 4952 5450     NAME: ..DESCRIPT
 8017338:	4f49 3a4e 0020 0000 3130 3332 3534 3736     ION: ...01234567
 8017348:	3938 6261 6463 6665 0000 0000 7878 3a64     89abcdef....xxd:
 8017358:	0020 0000 203a 6f4e 7320 6375 2068 6966      ...: No such fi
 8017368:	656c 6f20 2072 6964 6572 7463 726f 0d79     le or directory.
 8017378:	000a 0000 003a 0000 2020 0000 0a0d 0000     ....:...  ......
 8017388:	642f 7665 722f 6d6f 0030 0000 002f 0000     /dev/rom0.../...
 8017398:	6f72 666d 0073 0000 732f 7379 702f 7461     romfs.../sys/pat
 80173a8:	7368 7265 6576 0072 642f 7665 722f 6d6f     hserver./dev/rom
 80173b8:	0030 0000 6f72 666d 0073 0000               0...romfs...

080173c4 <_ctype_>:
 80173c4:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80173d4:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80173e4:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80173f4:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 8017404:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 8017414:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 8017424:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 8017434:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 8017444:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080174c8 <_sromdev>:
	...
 80174d4:	00000001 	.word	0x00000001
	...
