
build/main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 00 03 20 5d 85 01 08 a9 85 01 08 a9 85 01 08     ... ]...........
 8000010:	a9 85 01 08 a9 85 01 08 a9 85 01 08 00 00 00 00     ................
	...
 800002c:	f9 7e 01 08 a9 85 01 08 00 00 00 00 a9 85 01 08     .~..............
 800003c:	d9 7e 01 08 a9 85 01 08 a9 85 01 08 a9 85 01 08     .~..............
 800004c:	a9 85 01 08 a9 85 01 08 a9 85 01 08 a9 85 01 08     ................
 800005c:	a9 85 01 08 a9 85 01 08 a9 85 01 08 a9 85 01 08     ................
 800006c:	a9 85 01 08 a9 85 01 08 a9 85 01 08 a9 85 01 08     ................
 800007c:	a9 85 01 08 a9 85 01 08 a9 85 01 08 a9 85 01 08     ................
 800008c:	a9 85 01 08 a9 85 01 08 a9 85 01 08 a9 85 01 08     ................
 800009c:	a9 85 01 08 a9 85 01 08 a9 85 01 08 a9 85 01 08     ................
 80000ac:	a9 85 01 08 a9 85 01 08 a9 85 01 08 a9 85 01 08     ................
 80000bc:	a9 85 01 08 a9 85 01 08 a9 85 01 08 a9 85 01 08     ................
 80000cc:	a9 85 01 08 a9 85 01 08 a9 85 01 08 d9 7e 01 08     .............~..
 80000dc:	a9 85 01 08 a9 85 01 08 a9 85 01 08 a9 85 01 08     ................
 80000ec:	a9 85 01 08 a9 85 01 08 a9 85 01 08 a9 85 01 08     ................
 80000fc:	a9 85 01 08 a9 85 01 08 a9 85 01 08 a9 85 01 08     ................
 800010c:	a9 85 01 08 a9 85 01 08 a9 85 01 08 a9 85 01 08     ................
 800011c:	a9 85 01 08 a9 85 01 08 a9 85 01 08 a9 85 01 08     ................
 800012c:	a9 85 01 08 a9 85 01 08 a9 85 01 08 a9 85 01 08     ................
 800013c:	a9 85 01 08 a9 85 01 08 a9 85 01 08 a9 85 01 08     ................
 800014c:	a9 85 01 08 a9 85 01 08 a9 85 01 08 a9 85 01 08     ................
 800015c:	a9 85 01 08 a9 85 01 08 a9 85 01 08 a9 85 01 08     ................
 800016c:	a9 85 01 08 a9 85 01 08 a9 85 01 08 a9 85 01 08     ................
 800017c:	a9 85 01 08 a9 85 01 08 a9 85 01 08 a9 85 01 08     ................
 800018c:	a9 85 01 08 a9 85 01 08 a9 85 01 08 a9 85 01 08     ................
 800019c:	a9 85 01 08 a9 85 01 08 a9 85 01 08 a9 85 01 08     ................

080001ac <UI_task>:
#include "ui.h"

#include "metronome.h"

void UI_task()
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
    ui_init();
 80001b0:	f004 ffe8 	bl	8005184 <ui_init>
}
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	bf00      	nop

080001b8 <first>:

void first()
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	if (!fork()) setpriority(0, 0), pathserver();
 80001bc:	f017 ff00 	bl	8017fc0 <fork>
 80001c0:	4603      	mov	r3, r0
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d105      	bne.n	80001d2 <first+0x1a>
 80001c6:	2000      	movs	r0, #0
 80001c8:	2100      	movs	r1, #0
 80001ca:	f017 ff23 	bl	8018014 <setpriority>
 80001ce:	f003 f9db 	bl	8003588 <pathserver>
	if (!fork()) setpriority(0, 0), UI_task();
 80001d2:	f017 fef5 	bl	8017fc0 <fork>
 80001d6:	4603      	mov	r3, r0
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d105      	bne.n	80001e8 <first+0x30>
 80001dc:	2000      	movs	r0, #0
 80001de:	2100      	movs	r1, #0
 80001e0:	f017 ff18 	bl	8018014 <setpriority>
 80001e4:	f7ff ffe2 	bl	80001ac <UI_task>
	if (!fork()) setpriority(0, 1), metronome_task();
 80001e8:	f017 feea 	bl	8017fc0 <fork>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d105      	bne.n	80001fe <first+0x46>
 80001f2:	2000      	movs	r0, #0
 80001f4:	2101      	movs	r1, #1
 80001f6:	f017 ff0d 	bl	8018014 <setpriority>
 80001fa:	f000 f823 	bl	8000244 <metronome_task>

	setpriority(0, PRIORITY_LIMIT);
 80001fe:	2000      	movs	r0, #0
 8000200:	2127      	movs	r1, #39	; 0x27
 8000202:	f017 ff07 	bl	8018014 <setpriority>

	mount("/dev/rom0", "/", ROMFS_TYPE, 0);
 8000206:	4803      	ldr	r0, [pc, #12]	; (8000214 <first+0x5c>)
 8000208:	4903      	ldr	r1, [pc, #12]	; (8000218 <first+0x60>)
 800020a:	4a04      	ldr	r2, [pc, #16]	; (800021c <first+0x64>)
 800020c:	2300      	movs	r3, #0
 800020e:	f003 fdc9 	bl	8003da4 <mount>

	while(1);
 8000212:	e7fe      	b.n	8000212 <first+0x5a>
 8000214:	08018748 	.word	0x08018748
 8000218:	08018754 	.word	0x08018754
 800021c:	08018758 	.word	0x08018758

08000220 <main>:
}

int main()
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	/* Hardware Initialization */
	buzzer_init();
 8000224:	f000 f808 	bl	8000238 <buzzer_init>

	rtenv_start_scheduler(first);
 8000228:	4802      	ldr	r0, [pc, #8]	; (8000234 <main+0x14>)
 800022a:	f002 fa11 	bl	8002650 <rtenv_start_scheduler>
	
	return 0;
 800022e:	2300      	movs	r3, #0
}
 8000230:	4618      	mov	r0, r3
 8000232:	bd80      	pop	{r7, pc}
 8000234:	080001b9 	.word	0x080001b9

08000238 <buzzer_init>:

int metronome_bpm = DEFAULT_METRONOME_BPM;
int beat_count = DEFAULT_BEAT_CNT;

void buzzer_init()
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
}
 800023c:	46bd      	mov	sp, r7
 800023e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000242:	4770      	bx	lr

08000244 <metronome_task>:

void metronome_task()
{
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
	while(1) {
	}
 8000248:	e7fe      	b.n	8000248 <metronome_task+0x4>
 800024a:	bf00      	nop

0800024c <block_driver_readable>:
};


int block_driver_readable (struct block *block, struct file_request *request,
                           struct event_monitor *monitor)
{
 800024c:	b480      	push	{r7}
 800024e:	b085      	sub	sp, #20
 8000250:	af00      	add	r7, sp, #0
 8000252:	60f8      	str	r0, [r7, #12]
 8000254:	60b9      	str	r1, [r7, #8]
 8000256:	607a      	str	r2, [r7, #4]
    if (block->buzy)
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	699b      	ldr	r3, [r3, #24]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <block_driver_readable+0x18>
        return FILE_ACCESS_ACCEPT;
 8000260:	2301      	movs	r3, #1
 8000262:	e001      	b.n	8000268 <block_driver_readable+0x1c>
    else
        return FILE_ACCESS_ERROR;
 8000264:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000268:	4618      	mov	r0, r3
 800026a:	3714      	adds	r7, #20
 800026c:	46bd      	mov	sp, r7
 800026e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000272:	4770      	bx	lr

08000274 <block_driver_writable>:

int block_driver_writable (struct block *block, struct file_request *request,
                           struct event_monitor *monitor)
{
 8000274:	b480      	push	{r7}
 8000276:	b085      	sub	sp, #20
 8000278:	af00      	add	r7, sp, #0
 800027a:	60f8      	str	r0, [r7, #12]
 800027c:	60b9      	str	r1, [r7, #8]
 800027e:	607a      	str	r2, [r7, #4]
    if (block->buzy)
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <block_driver_writable+0x18>
        return FILE_ACCESS_ACCEPT;
 8000288:	2301      	movs	r3, #1
 800028a:	e001      	b.n	8000290 <block_driver_writable+0x1c>
    else
        return FILE_ACCESS_ERROR;
 800028c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000290:	4618      	mov	r0, r3
 8000292:	3714      	adds	r7, #20
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr

0800029c <block_driver_lseekable>:

int block_driver_lseekable (struct block *block, struct file_request *request,
                            struct event_monitor *monitor)
{
 800029c:	b480      	push	{r7}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	60f8      	str	r0, [r7, #12]
 80002a4:	60b9      	str	r1, [r7, #8]
 80002a6:	607a      	str	r2, [r7, #4]
    if (block->buzy)
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <block_driver_lseekable+0x18>
        return FILE_ACCESS_ACCEPT;
 80002b0:	2301      	movs	r3, #1
 80002b2:	e001      	b.n	80002b8 <block_driver_lseekable+0x1c>
    else
        return FILE_ACCESS_ERROR;
 80002b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80002b8:	4618      	mov	r0, r3
 80002ba:	3714      	adds	r7, #20
 80002bc:	46bd      	mov	sp, r7
 80002be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c2:	4770      	bx	lr

080002c4 <block_driver_read>:

int block_driver_read (struct block *block, struct file_request *request,
                       struct event_monitor *monitor)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b086      	sub	sp, #24
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	60f8      	str	r0, [r7, #12]
 80002cc:	60b9      	str	r1, [r7, #8]
 80002ce:	607a      	str	r2, [r7, #4]
    int size = request->size;
 80002d0:	68bb      	ldr	r3, [r7, #8]
 80002d2:	689b      	ldr	r3, [r3, #8]
 80002d4:	617b      	str	r3, [r7, #20]
    if (size > BLOCK_BUF)
 80002d6:	697b      	ldr	r3, [r7, #20]
 80002d8:	2b40      	cmp	r3, #64	; 0x40
 80002da:	dd01      	ble.n	80002e0 <block_driver_read+0x1c>
        size = BLOCK_BUF;
 80002dc:	2340      	movs	r3, #64	; 0x40
 80002de:	617b      	str	r3, [r7, #20]

    memcpy(request->buf, block->buf, size);
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	6859      	ldr	r1, [r3, #4]
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	f103 0220 	add.w	r2, r3, #32
 80002ea:	697b      	ldr	r3, [r7, #20]
 80002ec:	4608      	mov	r0, r1
 80002ee:	4611      	mov	r1, r2
 80002f0:	461a      	mov	r2, r3
 80002f2:	f017 fe1d 	bl	8017f30 <memcpy>

    /* still buzy until driver write response */
    return size;
 80002f6:	697b      	ldr	r3, [r7, #20]
}
 80002f8:	4618      	mov	r0, r3
 80002fa:	3718      	adds	r7, #24
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}

08000300 <block_driver_write>:

int block_driver_write (struct block *block, struct file_request *request,
                        struct event_monitor *monitor)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b088      	sub	sp, #32
 8000304:	af00      	add	r7, sp, #0
 8000306:	60f8      	str	r0, [r7, #12]
 8000308:	60b9      	str	r1, [r7, #8]
 800030a:	607a      	str	r2, [r7, #4]
    struct block_response *response = (void *)request->buf;
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	685b      	ldr	r3, [r3, #4]
 8000310:	61bb      	str	r3, [r7, #24]
    char *data_buf = response->buf;
 8000312:	69bb      	ldr	r3, [r7, #24]
 8000314:	685b      	ldr	r3, [r3, #4]
 8000316:	617b      	str	r3, [r7, #20]
    int len = response->transfer_len;
 8000318:	69bb      	ldr	r3, [r7, #24]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	61fb      	str	r3, [r7, #28]
    if (len > BLOCK_BUF)
 800031e:	69fb      	ldr	r3, [r7, #28]
 8000320:	2b40      	cmp	r3, #64	; 0x40
 8000322:	dd01      	ble.n	8000328 <block_driver_write+0x28>
        len = BLOCK_BUF;
 8000324:	2340      	movs	r3, #64	; 0x40
 8000326:	61fb      	str	r3, [r7, #28]

    if (len > 0) {
 8000328:	69fb      	ldr	r3, [r7, #28]
 800032a:	2b00      	cmp	r3, #0
 800032c:	dd08      	ble.n	8000340 <block_driver_write+0x40>
        memcpy(block->buf, data_buf, len);
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	f103 0220 	add.w	r2, r3, #32
 8000334:	69fb      	ldr	r3, [r7, #28]
 8000336:	4610      	mov	r0, r2
 8000338:	6979      	ldr	r1, [r7, #20]
 800033a:	461a      	mov	r2, r3
 800033c:	f017 fdf8 	bl	8017f30 <memcpy>
    }
    block->transfer_len = len;
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	69fa      	ldr	r2, [r7, #28]
 8000344:	661a      	str	r2, [r3, #96]	; 0x60
    block->buzy = 0;
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	2200      	movs	r2, #0
 800034a:	619a      	str	r2, [r3, #24]
	event_monitor_release(monitor, block->event);
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	691b      	ldr	r3, [r3, #16]
 8000350:	6878      	ldr	r0, [r7, #4]
 8000352:	4619      	mov	r1, r3
 8000354:	f000 fbd0 	bl	8000af8 <event_monitor_release>
    return len;
 8000358:	69fb      	ldr	r3, [r7, #28]
}
 800035a:	4618      	mov	r0, r3
 800035c:	3720      	adds	r7, #32
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop

08000364 <block_driver_lseek>:

int block_driver_lseek (struct block *block, struct file_request *request,
                        struct event_monitor *monitor)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0
 800036a:	60f8      	str	r0, [r7, #12]
 800036c:	60b9      	str	r1, [r7, #8]
 800036e:	607a      	str	r2, [r7, #4]
    block->transfer_len = request->size;
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	689a      	ldr	r2, [r3, #8]
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	661a      	str	r2, [r3, #96]	; 0x60
    block->buzy = 0;
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	2200      	movs	r2, #0
 800037c:	619a      	str	r2, [r3, #24]
	event_monitor_release(monitor, block->event);
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	691b      	ldr	r3, [r3, #16]
 8000382:	6878      	ldr	r0, [r7, #4]
 8000384:	4619      	mov	r1, r3
 8000386:	f000 fbb7 	bl	8000af8 <event_monitor_release>
    return request->size;
 800038a:	68bb      	ldr	r3, [r7, #8]
 800038c:	689b      	ldr	r3, [r3, #8]
}
 800038e:	4618      	mov	r0, r3
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop

08000398 <block_request_readable>:
 *  5. Get transfer_len
 *  6. Read data from buffer
 */
int block_request_readable (struct block *block, struct file_request *request,
                            struct event_monitor *monitor)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b090      	sub	sp, #64	; 0x40
 800039c:	af00      	add	r7, sp, #0
 800039e:	60f8      	str	r0, [r7, #12]
 80003a0:	60b9      	str	r1, [r7, #8]
 80003a2:	607a      	str	r2, [r7, #4]
    struct task_control_block *task = request->task;
 80003a4:	68bb      	ldr	r3, [r7, #8]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	63bb      	str	r3, [r7, #56]	; 0x38

    if (block->request_pid == 0) {
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d13d      	bne.n	800042e <block_request_readable+0x96>
        /* try to send request */
        struct file *driver = block->driver_file;
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	68db      	ldr	r3, [r3, #12]
 80003b6:	637b      	str	r3, [r7, #52]	; 0x34
        int size = request->size;
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	689b      	ldr	r3, [r3, #8]
 80003bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (size > BLOCK_BUF)
 80003be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80003c0:	2b40      	cmp	r3, #64	; 0x40
 80003c2:	dd01      	ble.n	80003c8 <block_request_readable+0x30>
            size = BLOCK_BUF;
 80003c4:	2340      	movs	r3, #64	; 0x40
 80003c6:	63fb      	str	r3, [r7, #60]	; 0x3c

        struct block_request block_request = {
 80003c8:	2301      	movs	r3, #1
 80003ca:	623b      	str	r3, [r7, #32]
            .cmd = BLOCK_CMD_READ,
            .task = task->pid,
 80003cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80003ce:	685b      	ldr	r3, [r3, #4]
        struct file *driver = block->driver_file;
        int size = request->size;
        if (size > BLOCK_BUF)
            size = BLOCK_BUF;

        struct block_request block_request = {
 80003d0:	627b      	str	r3, [r7, #36]	; 0x24
            .cmd = BLOCK_CMD_READ,
            .task = task->pid,
            .fd = block->file.fd,
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	681b      	ldr	r3, [r3, #0]
        struct file *driver = block->driver_file;
        int size = request->size;
        if (size > BLOCK_BUF)
            size = BLOCK_BUF;

        struct block_request block_request = {
 80003d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80003d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80003da:	62fb      	str	r3, [r7, #44]	; 0x2c
            .cmd = BLOCK_CMD_READ,
            .task = task->pid,
            .fd = block->file.fd,
            .size = size,
            .pos = block->pos
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	69db      	ldr	r3, [r3, #28]
        struct file *driver = block->driver_file;
        int size = request->size;
        if (size > BLOCK_BUF)
            size = BLOCK_BUF;

        struct block_request block_request = {
 80003e0:	633b      	str	r3, [r7, #48]	; 0x30
            .fd = block->file.fd,
            .size = size,
            .pos = block->pos
        };

        struct file_request file_request = {
 80003e2:	f107 0310 	add.w	r3, r7, #16
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	3304      	adds	r3, #4
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
 80003f0:	3304      	adds	r3, #4
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	3304      	adds	r3, #4
 80003f8:	2200      	movs	r2, #0
 80003fa:	601a      	str	r2, [r3, #0]
 80003fc:	3304      	adds	r3, #4
 80003fe:	f107 0320 	add.w	r3, r7, #32
 8000402:	617b      	str	r3, [r7, #20]
 8000404:	2314      	movs	r3, #20
 8000406:	61bb      	str	r3, [r7, #24]
            .task = NULL,
            .buf = (char *)&block_request,
            .size = sizeof(block_request),
        };
        if (file_write(driver, &file_request, monitor) == 1) {
 8000408:	f107 0310 	add.w	r3, r7, #16
 800040c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800040e:	4619      	mov	r1, r3
 8000410:	687a      	ldr	r2, [r7, #4]
 8000412:	f000 fe5b 	bl	80010cc <file_write>
 8000416:	4603      	mov	r3, r0
 8000418:	2b01      	cmp	r3, #1
 800041a:	d107      	bne.n	800042c <block_request_readable+0x94>
            block->request_pid = task->pid;
 800041c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800041e:	685a      	ldr	r2, [r3, #4]
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	615a      	str	r2, [r3, #20]
            block->buzy = 1;
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	2201      	movs	r2, #1
 8000428:	619a      	str	r2, [r3, #24]
 800042a:	e00c      	b.n	8000446 <block_request_readable+0xae>
 800042c:	e00b      	b.n	8000446 <block_request_readable+0xae>
        }
    }
    else if (block->request_pid == task->pid && !block->buzy) {
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	695a      	ldr	r2, [r3, #20]
 8000432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000434:	685b      	ldr	r3, [r3, #4]
 8000436:	429a      	cmp	r2, r3
 8000438:	d105      	bne.n	8000446 <block_request_readable+0xae>
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d101      	bne.n	8000446 <block_request_readable+0xae>
        return FILE_ACCESS_ACCEPT;
 8000442:	2301      	movs	r3, #1
 8000444:	e007      	b.n	8000456 <block_request_readable+0xbe>
    }

	event_monitor_block(monitor, block->event, task);
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	691b      	ldr	r3, [r3, #16]
 800044a:	6878      	ldr	r0, [r7, #4]
 800044c:	4619      	mov	r1, r3
 800044e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000450:	f000 fb34 	bl	8000abc <event_monitor_block>
    return FILE_ACCESS_BLOCK;
 8000454:	2300      	movs	r3, #0
}
 8000456:	4618      	mov	r0, r3
 8000458:	3740      	adds	r7, #64	; 0x40
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop

08000460 <block_request_writable>:
 *  6. Driver write empty data to buffer
 *  7. Get transfer_len
 */
int block_request_writable (struct block *block, struct file_request *request,
                            struct event_monitor *monitor)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b090      	sub	sp, #64	; 0x40
 8000464:	af00      	add	r7, sp, #0
 8000466:	60f8      	str	r0, [r7, #12]
 8000468:	60b9      	str	r1, [r7, #8]
 800046a:	607a      	str	r2, [r7, #4]
    struct task_control_block *task = request->task;
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	63bb      	str	r3, [r7, #56]	; 0x38

    if (block->request_pid == 0) {
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d148      	bne.n	800050c <block_request_writable+0xac>
        /* try to send request */
        struct file *driver = block->driver_file;
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	68db      	ldr	r3, [r3, #12]
 800047e:	637b      	str	r3, [r7, #52]	; 0x34
        int size = request->size;
 8000480:	68bb      	ldr	r3, [r7, #8]
 8000482:	689b      	ldr	r3, [r3, #8]
 8000484:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (size > BLOCK_BUF)
 8000486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000488:	2b40      	cmp	r3, #64	; 0x40
 800048a:	dd01      	ble.n	8000490 <block_request_writable+0x30>
            size = BLOCK_BUF;
 800048c:	2340      	movs	r3, #64	; 0x40
 800048e:	63fb      	str	r3, [r7, #60]	; 0x3c

        struct block_request block_request = {
 8000490:	2302      	movs	r3, #2
 8000492:	623b      	str	r3, [r7, #32]
            .cmd = BLOCK_CMD_WRITE,
            .task = task->pid,
 8000494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000496:	685b      	ldr	r3, [r3, #4]
        struct file *driver = block->driver_file;
        int size = request->size;
        if (size > BLOCK_BUF)
            size = BLOCK_BUF;

        struct block_request block_request = {
 8000498:	627b      	str	r3, [r7, #36]	; 0x24
            .cmd = BLOCK_CMD_WRITE,
            .task = task->pid,
            .fd = block->file.fd,
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	681b      	ldr	r3, [r3, #0]
        struct file *driver = block->driver_file;
        int size = request->size;
        if (size > BLOCK_BUF)
            size = BLOCK_BUF;

        struct block_request block_request = {
 800049e:	62bb      	str	r3, [r7, #40]	; 0x28
 80004a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80004a2:	62fb      	str	r3, [r7, #44]	; 0x2c
            .cmd = BLOCK_CMD_WRITE,
            .task = task->pid,
            .fd = block->file.fd,
            .size = size,
            .pos = block->pos
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	69db      	ldr	r3, [r3, #28]
        struct file *driver = block->driver_file;
        int size = request->size;
        if (size > BLOCK_BUF)
            size = BLOCK_BUF;

        struct block_request block_request = {
 80004a8:	633b      	str	r3, [r7, #48]	; 0x30
            .fd = block->file.fd,
            .size = size,
            .pos = block->pos
        };

        struct file_request file_request = {
 80004aa:	f107 0310 	add.w	r3, r7, #16
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	3304      	adds	r3, #4
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	3304      	adds	r3, #4
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
 80004be:	3304      	adds	r3, #4
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	3304      	adds	r3, #4
 80004c6:	f107 0320 	add.w	r3, r7, #32
 80004ca:	617b      	str	r3, [r7, #20]
 80004cc:	2314      	movs	r3, #20
 80004ce:	61bb      	str	r3, [r7, #24]
            .task = NULL,
            .buf = (char *)&block_request,
            .size = sizeof(block_request),
        };

        if (file_write(driver, &file_request, monitor) == 1) {
 80004d0:	f107 0310 	add.w	r3, r7, #16
 80004d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80004d6:	4619      	mov	r1, r3
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	f000 fdf7 	bl	80010cc <file_write>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d112      	bne.n	800050a <block_request_writable+0xaa>

            memcpy(block->buf, request->buf, size);
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	f103 0120 	add.w	r1, r3, #32
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	685a      	ldr	r2, [r3, #4]
 80004ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80004f0:	4608      	mov	r0, r1
 80004f2:	4611      	mov	r1, r2
 80004f4:	461a      	mov	r2, r3
 80004f6:	f017 fd1b 	bl	8017f30 <memcpy>

            block->request_pid = task->pid;
 80004fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80004fc:	685a      	ldr	r2, [r3, #4]
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	615a      	str	r2, [r3, #20]
            block->buzy = 1;
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	2201      	movs	r2, #1
 8000506:	619a      	str	r2, [r3, #24]
 8000508:	e00c      	b.n	8000524 <block_request_writable+0xc4>
 800050a:	e00b      	b.n	8000524 <block_request_writable+0xc4>
        }
    }
    else if (block->request_pid == task->pid && !block->buzy) {
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	695a      	ldr	r2, [r3, #20]
 8000510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000512:	685b      	ldr	r3, [r3, #4]
 8000514:	429a      	cmp	r2, r3
 8000516:	d105      	bne.n	8000524 <block_request_writable+0xc4>
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d101      	bne.n	8000524 <block_request_writable+0xc4>
        return FILE_ACCESS_ACCEPT;
 8000520:	2301      	movs	r3, #1
 8000522:	e007      	b.n	8000534 <block_request_writable+0xd4>
    }

	event_monitor_block(monitor, block->event, task);
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	691b      	ldr	r3, [r3, #16]
 8000528:	6878      	ldr	r0, [r7, #4]
 800052a:	4619      	mov	r1, r3
 800052c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800052e:	f000 fac5 	bl	8000abc <event_monitor_block>
    return FILE_ACCESS_BLOCK;
 8000532:	2300      	movs	r3, #0
}
 8000534:	4618      	mov	r0, r3
 8000536:	3740      	adds	r7, #64	; 0x40
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}

0800053c <block_request_lseekable>:

int block_request_lseekable (struct block *block, struct file_request *request,
                             struct event_monitor *monitor)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b092      	sub	sp, #72	; 0x48
 8000540:	af00      	add	r7, sp, #0
 8000542:	60f8      	str	r0, [r7, #12]
 8000544:	60b9      	str	r1, [r7, #8]
 8000546:	607a      	str	r2, [r7, #4]
    struct task_control_block *task = request->task;
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	643b      	str	r3, [r7, #64]	; 0x40

    if (block->request_pid == 0) {
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d153      	bne.n	80005fe <block_request_lseekable+0xc2>
        /* try to send request */
        struct file *driver = block->driver_file;
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	68db      	ldr	r3, [r3, #12]
 800055a:	63fb      	str	r3, [r7, #60]	; 0x3c
        int size = request->size;
 800055c:	68bb      	ldr	r3, [r7, #8]
 800055e:	689b      	ldr	r3, [r3, #8]
 8000560:	63bb      	str	r3, [r7, #56]	; 0x38
        if (size > BLOCK_BUF)
 8000562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000564:	2b40      	cmp	r3, #64	; 0x40
 8000566:	dd01      	ble.n	800056c <block_request_lseekable+0x30>
            size = BLOCK_BUF;
 8000568:	2340      	movs	r3, #64	; 0x40
 800056a:	63bb      	str	r3, [r7, #56]	; 0x38

        int pos;
        switch(request->whence) {
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	68db      	ldr	r3, [r3, #12]
 8000570:	2b02      	cmp	r3, #2
 8000572:	d006      	beq.n	8000582 <block_request_lseekable+0x46>
 8000574:	2b03      	cmp	r3, #3
 8000576:	d008      	beq.n	800058a <block_request_lseekable+0x4e>
 8000578:	2b01      	cmp	r3, #1
 800057a:	d10a      	bne.n	8000592 <block_request_lseekable+0x56>
            case SEEK_SET:
                pos = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	647b      	str	r3, [r7, #68]	; 0x44
                break;
 8000580:	e00a      	b.n	8000598 <block_request_lseekable+0x5c>
            case SEEK_CUR:
                pos = block->pos;
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	69db      	ldr	r3, [r3, #28]
 8000586:	647b      	str	r3, [r7, #68]	; 0x44
                break;
 8000588:	e006      	b.n	8000598 <block_request_lseekable+0x5c>
            case SEEK_END:
                pos = -1;
 800058a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800058e:	647b      	str	r3, [r7, #68]	; 0x44
                break;
 8000590:	e002      	b.n	8000598 <block_request_lseekable+0x5c>
            default:
                return FILE_ACCESS_ERROR;
 8000592:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000596:	e046      	b.n	8000626 <block_request_lseekable+0xea>
        }

        struct block_request block_request = {
 8000598:	2303      	movs	r3, #3
 800059a:	627b      	str	r3, [r7, #36]	; 0x24
            .cmd = BLOCK_CMD_SEEK,
            .task = task->pid,
 800059c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800059e:	685b      	ldr	r3, [r3, #4]
                break;
            default:
                return FILE_ACCESS_ERROR;
        }

        struct block_request block_request = {
 80005a0:	62bb      	str	r3, [r7, #40]	; 0x28
            .cmd = BLOCK_CMD_SEEK,
            .task = task->pid,
            .fd = block->file.fd,
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	681b      	ldr	r3, [r3, #0]
                break;
            default:
                return FILE_ACCESS_ERROR;
        }

        struct block_request block_request = {
 80005a6:	62fb      	str	r3, [r7, #44]	; 0x2c
            .cmd = BLOCK_CMD_SEEK,
            .task = task->pid,
            .fd = block->file.fd,
            .size = request->size,
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	689b      	ldr	r3, [r3, #8]
                break;
            default:
                return FILE_ACCESS_ERROR;
        }

        struct block_request block_request = {
 80005ac:	633b      	str	r3, [r7, #48]	; 0x30
 80005ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80005b0:	637b      	str	r3, [r7, #52]	; 0x34
            .fd = block->file.fd,
            .size = request->size,
            .pos = pos,
        };

        struct file_request file_request = {
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	3304      	adds	r3, #4
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	3304      	adds	r3, #4
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	3304      	adds	r3, #4
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	3304      	adds	r3, #4
 80005ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005d2:	61bb      	str	r3, [r7, #24]
 80005d4:	2314      	movs	r3, #20
 80005d6:	61fb      	str	r3, [r7, #28]
            .task = NULL,
            .buf = (char *)&block_request,
            .size = sizeof(block_request),
        };

        if (file_write(driver, &file_request, monitor) == 1) {
 80005d8:	f107 0314 	add.w	r3, r7, #20
 80005dc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80005de:	4619      	mov	r1, r3
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	f000 fd73 	bl	80010cc <file_write>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d107      	bne.n	80005fc <block_request_lseekable+0xc0>
            block->request_pid = task->pid;
 80005ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80005ee:	685a      	ldr	r2, [r3, #4]
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	615a      	str	r2, [r3, #20]
            block->buzy = 1;
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	2201      	movs	r2, #1
 80005f8:	619a      	str	r2, [r3, #24]
 80005fa:	e00c      	b.n	8000616 <block_request_lseekable+0xda>
 80005fc:	e00b      	b.n	8000616 <block_request_lseekable+0xda>
        }
    }
    else if (block->request_pid == task->pid && !block->buzy) {
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	695a      	ldr	r2, [r3, #20]
 8000602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	429a      	cmp	r2, r3
 8000608:	d105      	bne.n	8000616 <block_request_lseekable+0xda>
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d101      	bne.n	8000616 <block_request_lseekable+0xda>
        return FILE_ACCESS_ACCEPT;
 8000612:	2301      	movs	r3, #1
 8000614:	e007      	b.n	8000626 <block_request_lseekable+0xea>
    }

	event_monitor_block(monitor, block->event, task);
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	691b      	ldr	r3, [r3, #16]
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	4619      	mov	r1, r3
 800061e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000620:	f000 fa4c 	bl	8000abc <event_monitor_block>
    return FILE_ACCESS_BLOCK;
 8000624:	2300      	movs	r3, #0
}
 8000626:	4618      	mov	r0, r3
 8000628:	3748      	adds	r7, #72	; 0x48
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop

08000630 <block_request_read>:

int block_request_read (struct block *block, struct file_request *request,
                        struct event_monitor *monitor)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	60f8      	str	r0, [r7, #12]
 8000638:	60b9      	str	r1, [r7, #8]
 800063a:	607a      	str	r2, [r7, #4]
    if (block->transfer_len > 0) {
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000640:	2b00      	cmp	r3, #0
 8000642:	dd12      	ble.n	800066a <block_request_read+0x3a>
        memcpy(request->buf, block->buf, block->transfer_len);
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	6859      	ldr	r1, [r3, #4]
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	f103 0220 	add.w	r2, r3, #32
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000652:	4608      	mov	r0, r1
 8000654:	4611      	mov	r1, r2
 8000656:	461a      	mov	r2, r3
 8000658:	f017 fc6a 	bl	8017f30 <memcpy>

        block->pos += block->transfer_len;
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	69da      	ldr	r2, [r3, #28]
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000664:	441a      	add	r2, r3
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	61da      	str	r2, [r3, #28]
    }

    block->request_pid = 0;
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	2200      	movs	r2, #0
 800066e:	615a      	str	r2, [r3, #20]
    return block->transfer_len;
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 8000674:	4618      	mov	r0, r3
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <block_request_write>:

int block_request_write (struct block *block, struct file_request *request,
                         struct event_monitor *monitor)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	607a      	str	r2, [r7, #4]
    if (block->transfer_len > 0) {
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800068c:	2b00      	cmp	r3, #0
 800068e:	dd06      	ble.n	800069e <block_request_write+0x22>
        block->pos += block->transfer_len;
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	69da      	ldr	r2, [r3, #28]
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000698:	441a      	add	r2, r3
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	61da      	str	r2, [r3, #28]
    }

    block->request_pid = 0;
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	2200      	movs	r2, #0
 80006a2:	615a      	str	r2, [r3, #20]
    return block->transfer_len;
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <block_request_lseek>:

int block_request_lseek (struct block *block, struct file_request *request,
                         struct event_monitor *monitor)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	60f8      	str	r0, [r7, #12]
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
    if (block->transfer_len >= 0) {
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	db03      	blt.n	80006d0 <block_request_lseek+0x1c>
        block->pos = block->transfer_len;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	61da      	str	r2, [r3, #28]
    }

    block->request_pid = 0;
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	2200      	movs	r2, #0
 80006d4:	615a      	str	r2, [r3, #20]
    return block->transfer_len;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3714      	adds	r7, #20
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop

080006e8 <block_event_release>:

int block_event_release(struct event_monitor *monitor, int event,
                        struct task_control_block *task, void *data)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
 80006f4:	603b      	str	r3, [r7, #0]
    struct file *file = data;
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	617b      	str	r3, [r7, #20]
    struct file_request *request = (void*)task->stack->r0;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000700:	613b      	str	r3, [r7, #16]

    switch (task->stack->r7) {
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	2b04      	cmp	r3, #4
 800070a:	d004      	beq.n	8000716 <block_event_release+0x2e>
 800070c:	2b0a      	cmp	r3, #10
 800070e:	d010      	beq.n	8000732 <block_event_release+0x4a>
 8000710:	2b03      	cmp	r3, #3
 8000712:	d007      	beq.n	8000724 <block_event_release+0x3c>
 8000714:	e014      	b.n	8000740 <block_event_release+0x58>
        case 0x04:
            return file_read(file, request, monitor);
 8000716:	6978      	ldr	r0, [r7, #20]
 8000718:	6939      	ldr	r1, [r7, #16]
 800071a:	68fa      	ldr	r2, [r7, #12]
 800071c:	f000 fc8c 	bl	8001038 <file_read>
 8000720:	4603      	mov	r3, r0
 8000722:	e00e      	b.n	8000742 <block_event_release+0x5a>
        case 0x03:
            return file_write(file, request, monitor);
 8000724:	6978      	ldr	r0, [r7, #20]
 8000726:	6939      	ldr	r1, [r7, #16]
 8000728:	68fa      	ldr	r2, [r7, #12]
 800072a:	f000 fccf 	bl	80010cc <file_write>
 800072e:	4603      	mov	r3, r0
 8000730:	e007      	b.n	8000742 <block_event_release+0x5a>
        case 0x0a:
            return file_lseek(file, request, monitor);
 8000732:	6978      	ldr	r0, [r7, #20]
 8000734:	6939      	ldr	r1, [r7, #16]
 8000736:	68fa      	ldr	r2, [r7, #12]
 8000738:	f000 fd6a 	bl	8001210 <file_lseek>
 800073c:	4603      	mov	r3, r0
 800073e:	e000      	b.n	8000742 <block_event_release+0x5a>
        default:
            return 0;
 8000740:	2300      	movs	r3, #0
    }
}
 8000742:	4618      	mov	r0, r3
 8000744:	3718      	adds	r7, #24
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop

0800074c <block_init>:

int block_init(int fd, int driver_pid, struct file *files[],
               struct memory_pool *memory_pool, struct event_monitor *monitor)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	607a      	str	r2, [r7, #4]
 8000758:	603b      	str	r3, [r7, #0]
    struct block *block;

    block = memory_pool_alloc(memory_pool, sizeof(*block));
 800075a:	6838      	ldr	r0, [r7, #0]
 800075c:	2164      	movs	r1, #100	; 0x64
 800075e:	f002 fd55 	bl	800320c <memory_pool_alloc>
 8000762:	6178      	str	r0, [r7, #20]

    if (!block)
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d102      	bne.n	8000770 <block_init+0x24>
        return -1;
 800076a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800076e:	e02f      	b.n	80007d0 <block_init+0x84>

    block->driver_pid = driver_pid;
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	68ba      	ldr	r2, [r7, #8]
 8000774:	609a      	str	r2, [r3, #8]
    block->driver_file = files[driver_pid + 3];
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	3303      	adds	r3, #3
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	4413      	add	r3, r2
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	60da      	str	r2, [r3, #12]
    block->request_pid = 0;
 8000786:	697b      	ldr	r3, [r7, #20]
 8000788:	2200      	movs	r2, #0
 800078a:	615a      	str	r2, [r3, #20]
    block->buzy = 0;
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
    block->pos = 0;
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	2200      	movs	r2, #0
 8000796:	61da      	str	r2, [r3, #28]
	block->file.ops = &block_ops;
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	4a0f      	ldr	r2, [pc, #60]	; (80007d8 <block_init+0x8c>)
 800079c:	605a      	str	r2, [r3, #4]
    block->event = event_monitor_find_free(monitor);
 800079e:	6a38      	ldr	r0, [r7, #32]
 80007a0:	f000 f93c 	bl	8000a1c <event_monitor_find_free>
 80007a4:	4602      	mov	r2, r0
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	611a      	str	r2, [r3, #16]
    files[fd] = &block->file;
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	4413      	add	r3, r2
 80007b2:	697a      	ldr	r2, [r7, #20]
 80007b4:	601a      	str	r2, [r3, #0]

    event_monitor_register(monitor, block->event, block_event_release, files[fd]);
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	691a      	ldr	r2, [r3, #16]
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	6879      	ldr	r1, [r7, #4]
 80007c0:	440b      	add	r3, r1
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	6a38      	ldr	r0, [r7, #32]
 80007c6:	4611      	mov	r1, r2
 80007c8:	4a04      	ldr	r2, [pc, #16]	; (80007dc <block_init+0x90>)
 80007ca:	f000 f94d 	bl	8000a68 <event_monitor_register>

    return 0;
 80007ce:	2300      	movs	r3, #0
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3718      	adds	r7, #24
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000008 	.word	0x20000008
 80007dc:	080006e9 	.word	0x080006e9

080007e0 <block_response>:

int block_response(int fd, char *buf, int len)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	60f8      	str	r0, [r7, #12]
 80007e8:	60b9      	str	r1, [r7, #8]
 80007ea:	607a      	str	r2, [r7, #4]
    struct block_response response = {
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	617b      	str	r3, [r7, #20]
        .transfer_len = len,
        .buf = buf
    };
    return write(fd, &response, sizeof(response));
 80007f4:	f107 0310 	add.w	r3, r7, #16
 80007f8:	68f8      	ldr	r0, [r7, #12]
 80007fa:	4619      	mov	r1, r3
 80007fc:	2208      	movs	r2, #8
 80007fe:	f017 fbed 	bl	8017fdc <write>
 8000802:	4603      	mov	r3, r0
}
 8000804:	4618      	mov	r0, r3
 8000806:	3718      	adds	r7, #24
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <block_readable>:

int block_readable (struct file *file, struct file_request *request,
                    struct event_monitor *monitor)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
    struct block *block = container_of(file, struct block, file);
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	617b      	str	r3, [r7, #20]
    if (block->driver_pid == request->task->pid) {
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	689a      	ldr	r2, [r3, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	429a      	cmp	r2, r3
 8000828:	d106      	bne.n	8000838 <block_readable+0x2c>
        return block_driver_readable(block, request, monitor);
 800082a:	6978      	ldr	r0, [r7, #20]
 800082c:	68b9      	ldr	r1, [r7, #8]
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	f7ff fd0c 	bl	800024c <block_driver_readable>
 8000834:	4603      	mov	r3, r0
 8000836:	e005      	b.n	8000844 <block_readable+0x38>
    }
    else {
        return block_request_readable(block, request, monitor);
 8000838:	6978      	ldr	r0, [r7, #20]
 800083a:	68b9      	ldr	r1, [r7, #8]
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	f7ff fdab 	bl	8000398 <block_request_readable>
 8000842:	4603      	mov	r3, r0
    }
}
 8000844:	4618      	mov	r0, r3
 8000846:	3718      	adds	r7, #24
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <block_writable>:

int block_writable (struct file *file, struct file_request *request,
                    struct event_monitor *monitor)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	607a      	str	r2, [r7, #4]
    struct block *block = container_of(file, struct block, file);
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	617b      	str	r3, [r7, #20]
    if (block->driver_pid == request->task->pid) {
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	689a      	ldr	r2, [r3, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	429a      	cmp	r2, r3
 8000868:	d106      	bne.n	8000878 <block_writable+0x2c>
        return block_driver_writable(block, request, monitor);
 800086a:	6978      	ldr	r0, [r7, #20]
 800086c:	68b9      	ldr	r1, [r7, #8]
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	f7ff fd00 	bl	8000274 <block_driver_writable>
 8000874:	4603      	mov	r3, r0
 8000876:	e005      	b.n	8000884 <block_writable+0x38>
    }
    else {
        return block_request_writable(block, request, monitor);
 8000878:	6978      	ldr	r0, [r7, #20]
 800087a:	68b9      	ldr	r1, [r7, #8]
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	f7ff fdef 	bl	8000460 <block_request_writable>
 8000882:	4603      	mov	r3, r0
    }
}
 8000884:	4618      	mov	r0, r3
 8000886:	3718      	adds	r7, #24
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <block_read>:

int block_read (struct file *file, struct file_request *request,
                struct event_monitor *monitor)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
    struct block *block = container_of(file, struct block, file);
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	617b      	str	r3, [r7, #20]
    if (block->driver_pid == request->task->pid) {
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	689a      	ldr	r2, [r3, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	d106      	bne.n	80008b8 <block_read+0x2c>
        return block_driver_read(block, request, monitor);
 80008aa:	6978      	ldr	r0, [r7, #20]
 80008ac:	68b9      	ldr	r1, [r7, #8]
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	f7ff fd08 	bl	80002c4 <block_driver_read>
 80008b4:	4603      	mov	r3, r0
 80008b6:	e005      	b.n	80008c4 <block_read+0x38>
    }
    else {
        return block_request_read(block, request, monitor);
 80008b8:	6978      	ldr	r0, [r7, #20]
 80008ba:	68b9      	ldr	r1, [r7, #8]
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	f7ff feb7 	bl	8000630 <block_request_read>
 80008c2:	4603      	mov	r3, r0
    }
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3718      	adds	r7, #24
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <block_write>:

int block_write (struct file *file, struct file_request *request,
                 struct event_monitor *monitor)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
    struct block *block = container_of(file, struct block, file);
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	617b      	str	r3, [r7, #20]
    if (block->driver_pid == request->task->pid) {
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	689a      	ldr	r2, [r3, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	429a      	cmp	r2, r3
 80008e8:	d106      	bne.n	80008f8 <block_write+0x2c>
        return block_driver_write(block, request, monitor);
 80008ea:	6978      	ldr	r0, [r7, #20]
 80008ec:	68b9      	ldr	r1, [r7, #8]
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	f7ff fd06 	bl	8000300 <block_driver_write>
 80008f4:	4603      	mov	r3, r0
 80008f6:	e005      	b.n	8000904 <block_write+0x38>
    }
    else {
        return block_request_write(block, request, monitor);
 80008f8:	6978      	ldr	r0, [r7, #20]
 80008fa:	68b9      	ldr	r1, [r7, #8]
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	f7ff febd 	bl	800067c <block_request_write>
 8000902:	4603      	mov	r3, r0
    }
}
 8000904:	4618      	mov	r0, r3
 8000906:	3718      	adds	r7, #24
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <block_lseekable>:

int block_lseekable (struct file *file, struct file_request *request,
                     struct event_monitor *monitor)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b086      	sub	sp, #24
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
    struct block *block = container_of(file, struct block, file);
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	617b      	str	r3, [r7, #20]
    if (block->driver_pid == request->task->pid) {
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	689a      	ldr	r2, [r3, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	429a      	cmp	r2, r3
 8000928:	d106      	bne.n	8000938 <block_lseekable+0x2c>
        return block_driver_lseekable(block, request, monitor);
 800092a:	6978      	ldr	r0, [r7, #20]
 800092c:	68b9      	ldr	r1, [r7, #8]
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	f7ff fcb4 	bl	800029c <block_driver_lseekable>
 8000934:	4603      	mov	r3, r0
 8000936:	e005      	b.n	8000944 <block_lseekable+0x38>
    }
    else {
        return block_request_lseekable(block, request, monitor);
 8000938:	6978      	ldr	r0, [r7, #20]
 800093a:	68b9      	ldr	r1, [r7, #8]
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	f7ff fdfd 	bl	800053c <block_request_lseekable>
 8000942:	4603      	mov	r3, r0
    }
}
 8000944:	4618      	mov	r0, r3
 8000946:	3718      	adds	r7, #24
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <block_lseek>:

int block_lseek (struct file *file, struct file_request *request,
                 struct event_monitor *monitor)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
    struct block *block = container_of(file, struct block, file);
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	617b      	str	r3, [r7, #20]
    if (block->driver_pid == request->task->pid) {
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	689a      	ldr	r2, [r3, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	429a      	cmp	r2, r3
 8000968:	d106      	bne.n	8000978 <block_lseek+0x2c>
        return block_driver_lseek(block, request, monitor);
 800096a:	6978      	ldr	r0, [r7, #20]
 800096c:	68b9      	ldr	r1, [r7, #8]
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	f7ff fcf8 	bl	8000364 <block_driver_lseek>
 8000974:	4603      	mov	r3, r0
 8000976:	e005      	b.n	8000984 <block_lseek+0x38>
    }
    else {
        return block_request_lseek(block, request, monitor);
 8000978:	6978      	ldr	r0, [r7, #20]
 800097a:	68b9      	ldr	r1, [r7, #8]
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	f7ff fe99 	bl	80006b4 <block_request_lseek>
 8000982:	4603      	mov	r3, r0
    }
}
 8000984:	4618      	mov	r0, r3
 8000986:	3718      	adds	r7, #24
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <event_monitor_init>:


void event_monitor_init(struct event_monitor *monitor,
                        struct event *events,
                        struct list *ready_list)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]
    int i;

    monitor->events = events;
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	68ba      	ldr	r2, [r7, #8]
 800099c:	601a      	str	r2, [r3, #0]
    monitor->ready_list = ready_list;
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	605a      	str	r2, [r3, #4]

    for (i = 0; i < EVENT_LIMIT; i++) {
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]
 80009a8:	e031      	b.n	8000a0e <event_monitor_init+0x82>
        events[i].registerd = 0;
 80009aa:	697a      	ldr	r2, [r7, #20]
 80009ac:	4613      	mov	r3, r2
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	4413      	add	r3, r2
 80009b2:	00db      	lsls	r3, r3, #3
 80009b4:	68ba      	ldr	r2, [r7, #8]
 80009b6:	4413      	add	r3, r2
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
        events[i].pending = 0;
 80009bc:	697a      	ldr	r2, [r7, #20]
 80009be:	4613      	mov	r3, r2
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	4413      	add	r3, r2
 80009c4:	00db      	lsls	r3, r3, #3
 80009c6:	68ba      	ldr	r2, [r7, #8]
 80009c8:	4413      	add	r3, r2
 80009ca:	2200      	movs	r2, #0
 80009cc:	605a      	str	r2, [r3, #4]
        events[i].handler = 0;
 80009ce:	697a      	ldr	r2, [r7, #20]
 80009d0:	4613      	mov	r3, r2
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	4413      	add	r3, r2
 80009d6:	00db      	lsls	r3, r3, #3
 80009d8:	68ba      	ldr	r2, [r7, #8]
 80009da:	4413      	add	r3, r2
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
        events[i].data = 0;
 80009e0:	697a      	ldr	r2, [r7, #20]
 80009e2:	4613      	mov	r3, r2
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	4413      	add	r3, r2
 80009e8:	00db      	lsls	r3, r3, #3
 80009ea:	68ba      	ldr	r2, [r7, #8]
 80009ec:	4413      	add	r3, r2
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
        list_init(&events[i].list);
 80009f2:	697a      	ldr	r2, [r7, #20]
 80009f4:	4613      	mov	r3, r2
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	4413      	add	r3, r2
 80009fa:	00db      	lsls	r3, r3, #3
 80009fc:	68ba      	ldr	r2, [r7, #8]
 80009fe:	4413      	add	r3, r2
 8000a00:	3310      	adds	r3, #16
 8000a02:	4618      	mov	r0, r3
 8000a04:	f002 fb50 	bl	80030a8 <list_init>
    int i;

    monitor->events = events;
    monitor->ready_list = ready_list;

    for (i = 0; i < EVENT_LIMIT; i++) {
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	617b      	str	r3, [r7, #20]
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	2baa      	cmp	r3, #170	; 0xaa
 8000a12:	ddca      	ble.n	80009aa <event_monitor_init+0x1e>
        events[i].pending = 0;
        events[i].handler = 0;
        events[i].data = 0;
        list_init(&events[i].list);
    }
}
 8000a14:	3718      	adds	r7, #24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop

08000a1c <event_monitor_find_free>:

int event_monitor_find_free(struct event_monitor *monitor)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
    int i;
    for (i = 0; i < EVENT_LIMIT && monitor->events[i].registerd; i++);
 8000a24:	2300      	movs	r3, #0
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	e002      	b.n	8000a30 <event_monitor_find_free+0x14>
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	2baa      	cmp	r3, #170	; 0xaa
 8000a34:	dc0a      	bgt.n	8000a4c <event_monitor_find_free+0x30>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6819      	ldr	r1, [r3, #0]
 8000a3a:	68fa      	ldr	r2, [r7, #12]
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	4413      	add	r3, r2
 8000a42:	00db      	lsls	r3, r3, #3
 8000a44:	440b      	add	r3, r1
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d1ee      	bne.n	8000a2a <event_monitor_find_free+0xe>

    if (i == EVENT_LIMIT)
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	2bab      	cmp	r3, #171	; 0xab
 8000a50:	d102      	bne.n	8000a58 <event_monitor_find_free+0x3c>
        return -1;
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a56:	e000      	b.n	8000a5a <event_monitor_find_free+0x3e>

    return i;
 8000a58:	68fb      	ldr	r3, [r7, #12]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3714      	adds	r7, #20
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <event_monitor_register>:

void event_monitor_register(struct event_monitor *monitor, int event,
                            event_monitor_handler handler, void *data)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
 8000a74:	603b      	str	r3, [r7, #0]
    monitor->events[event].registerd = 1;
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	6819      	ldr	r1, [r3, #0]
 8000a7a:	68ba      	ldr	r2, [r7, #8]
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	4413      	add	r3, r2
 8000a82:	00db      	lsls	r3, r3, #3
 8000a84:	440b      	add	r3, r1
 8000a86:	2201      	movs	r2, #1
 8000a88:	601a      	str	r2, [r3, #0]
    monitor->events[event].handler = handler;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	6819      	ldr	r1, [r3, #0]
 8000a8e:	68ba      	ldr	r2, [r7, #8]
 8000a90:	4613      	mov	r3, r2
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	4413      	add	r3, r2
 8000a96:	00db      	lsls	r3, r3, #3
 8000a98:	440b      	add	r3, r1
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
    monitor->events[event].data = data;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	6819      	ldr	r1, [r3, #0]
 8000aa2:	68ba      	ldr	r2, [r7, #8]
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	4413      	add	r3, r2
 8000aaa:	00db      	lsls	r3, r3, #3
 8000aac:	440b      	add	r3, r1
 8000aae:	683a      	ldr	r2, [r7, #0]
 8000ab0:	60da      	str	r2, [r3, #12]
}
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <event_monitor_block>:

void event_monitor_block(struct event_monitor *monitor, int event,
                         struct task_control_block *task)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
    if (task->status == TASK_READY)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d10f      	bne.n	8000af0 <event_monitor_block+0x34>
        list_push(&monitor->events[event].list, &task->list);
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	6819      	ldr	r1, [r3, #0]
 8000ad4:	68ba      	ldr	r2, [r7, #8]
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	4413      	add	r3, r2
 8000adc:	00db      	lsls	r3, r3, #3
 8000ade:	440b      	add	r3, r1
 8000ae0:	f103 0210 	add.w	r2, r3, #16
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	3310      	adds	r3, #16
 8000ae8:	4610      	mov	r0, r2
 8000aea:	4619      	mov	r1, r3
 8000aec:	f002 fb36 	bl	800315c <list_push>
}
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop

08000af8 <event_monitor_release>:

void event_monitor_release(struct event_monitor *monitor, int event)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
    monitor->events[event].pending = 1;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6819      	ldr	r1, [r3, #0]
 8000b06:	683a      	ldr	r2, [r7, #0]
 8000b08:	4613      	mov	r3, r2
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	4413      	add	r3, r2
 8000b0e:	00db      	lsls	r3, r3, #3
 8000b10:	440b      	add	r3, r1
 8000b12:	2201      	movs	r2, #1
 8000b14:	605a      	str	r2, [r3, #4]
}
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <event_monitor_serve>:

void event_monitor_serve(struct event_monitor *monitor)
{
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b089      	sub	sp, #36	; 0x24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
    int i;
    for (i = 0; i < EVENT_LIMIT; i++) {
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]
 8000b2c:	e04e      	b.n	8000bcc <event_monitor_serve+0xac>
        if (monitor->events[i].pending) {
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6819      	ldr	r1, [r3, #0]
 8000b32:	69fa      	ldr	r2, [r7, #28]
 8000b34:	4613      	mov	r3, r2
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	4413      	add	r3, r2
 8000b3a:	00db      	lsls	r3, r3, #3
 8000b3c:	440b      	add	r3, r1
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d040      	beq.n	8000bc6 <event_monitor_serve+0xa6>
            struct event *event = &monitor->events[i];
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6819      	ldr	r1, [r3, #0]
 8000b48:	69fa      	ldr	r2, [r7, #28]
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	4413      	add	r3, r2
 8000b50:	00db      	lsls	r3, r3, #3
 8000b52:	440b      	add	r3, r1
 8000b54:	613b      	str	r3, [r7, #16]
            struct task_control_block *task;
            struct list *curr, *next;

            list_for_each_safe (curr, next, &event->list) {
 8000b56:	693b      	ldr	r3, [r7, #16]
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	61bb      	str	r3, [r7, #24]
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	617b      	str	r3, [r7, #20]
 8000b62:	e025      	b.n	8000bb0 <event_monitor_serve+0x90>
                task = list_entry(curr, struct task_control_block, list);
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	3b10      	subs	r3, #16
 8000b68:	60fb      	str	r3, [r7, #12]
                if (event->handler
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d019      	beq.n	8000ba6 <event_monitor_serve+0x86>
                        && event->handler(monitor, i, task, event->data)) {
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	689c      	ldr	r4, [r3, #8]
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	68db      	ldr	r3, [r3, #12]
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	69f9      	ldr	r1, [r7, #28]
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	47a0      	blx	r4
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d00e      	beq.n	8000ba6 <event_monitor_serve+0x86>
                    list_push(&monitor->ready_list[task->priority], &task->list);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	685a      	ldr	r2, [r3, #4]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	00db      	lsls	r3, r3, #3
 8000b92:	441a      	add	r2, r3
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	3310      	adds	r3, #16
 8000b98:	4610      	mov	r0, r2
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	f002 fade 	bl	800315c <list_push>
                    task->status = TASK_READY;
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
        if (monitor->events[i].pending) {
            struct event *event = &monitor->events[i];
            struct task_control_block *task;
            struct list *curr, *next;

            list_for_each_safe (curr, next, &event->list) {
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	61bb      	str	r3, [r7, #24]
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	f103 0210 	add.w	r2, r3, #16
 8000bb6:	69bb      	ldr	r3, [r7, #24]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d1d3      	bne.n	8000b64 <event_monitor_serve+0x44>
                    list_push(&monitor->ready_list[task->priority], &task->list);
                    task->status = TASK_READY;
                }
            }

            event->pending = 0;
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	605a      	str	r2, [r3, #4]

            /* If someone pending events, rescan events */
            i = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
}

void event_monitor_serve(struct event_monitor *monitor)
{
    int i;
    for (i = 0; i < EVENT_LIMIT; i++) {
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	61fb      	str	r3, [r7, #28]
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	2baa      	cmp	r3, #170	; 0xaa
 8000bd0:	ddad      	ble.n	8000b2e <event_monitor_serve+0xe>

            /* If someone pending events, rescan events */
            i = 0;
        }
    }
}
 8000bd2:	3724      	adds	r7, #36	; 0x24
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd90      	pop	{r4, r7, pc}

08000bd8 <mkfifo>:
	.lseekable = NULL,
	.lseek = NULL,
};

int mkfifo(const char *pathname, int mode)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
	mkfile(pathname, mode, S_IFIFO);
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	6839      	ldr	r1, [r7, #0]
 8000be6:	2201      	movs	r2, #1
 8000be8:	f000 f92a 	bl	8000e40 <mkfile>
	return 0;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop

08000bf8 <fifo_init>:

int
fifo_init(int fd, int driver_pid, struct file *files[],
          struct memory_pool *memory_pool, struct event_monitor *monitor)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
 8000c04:	603b      	str	r3, [r7, #0]
    struct pipe_ringbuffer *pipe;

    pipe = memory_pool_alloc(memory_pool, sizeof(struct pipe_ringbuffer));
 8000c06:	6838      	ldr	r0, [r7, #0]
 8000c08:	2158      	movs	r1, #88	; 0x58
 8000c0a:	f002 faff 	bl	800320c <memory_pool_alloc>
 8000c0e:	6178      	str	r0, [r7, #20]

    if (!pipe)
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d102      	bne.n	8000c1c <fifo_init+0x24>
        return -1;
 8000c16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c1a:	e033      	b.n	8000c84 <fifo_init+0x8c>

    pipe->start = 0;
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
    pipe->end = 0;
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	2200      	movs	r2, #0
 8000c26:	60da      	str	r2, [r3, #12]
	pipe->file.ops = &fifo_ops;
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	4a18      	ldr	r2, [pc, #96]	; (8000c8c <fifo_init+0x94>)
 8000c2c:	605a      	str	r2, [r3, #4]
    files[fd] = &pipe->file;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	697a      	ldr	r2, [r7, #20]
 8000c38:	601a      	str	r2, [r3, #0]

    pipe->read_event = event_monitor_find_free(monitor);
 8000c3a:	6a38      	ldr	r0, [r7, #32]
 8000c3c:	f7ff feee 	bl	8000a1c <event_monitor_find_free>
 8000c40:	4602      	mov	r2, r0
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	611a      	str	r2, [r3, #16]
    event_monitor_register(monitor, pipe->read_event, pipe_read_release, files[fd]);
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	691a      	ldr	r2, [r3, #16]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	6879      	ldr	r1, [r7, #4]
 8000c50:	440b      	add	r3, r1
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	6a38      	ldr	r0, [r7, #32]
 8000c56:	4611      	mov	r1, r2
 8000c58:	4a0d      	ldr	r2, [pc, #52]	; (8000c90 <fifo_init+0x98>)
 8000c5a:	f7ff ff05 	bl	8000a68 <event_monitor_register>

    pipe->write_event = event_monitor_find_free(monitor);
 8000c5e:	6a38      	ldr	r0, [r7, #32]
 8000c60:	f7ff fedc 	bl	8000a1c <event_monitor_find_free>
 8000c64:	4602      	mov	r2, r0
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	615a      	str	r2, [r3, #20]
    event_monitor_register(monitor, pipe->write_event, pipe_write_release, files[fd]);
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	695a      	ldr	r2, [r3, #20]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	440b      	add	r3, r1
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	6a38      	ldr	r0, [r7, #32]
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	4a05      	ldr	r2, [pc, #20]	; (8000c94 <fifo_init+0x9c>)
 8000c7e:	f7ff fef3 	bl	8000a68 <event_monitor_register>
    return 0;
 8000c82:	2300      	movs	r3, #0
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3718      	adds	r7, #24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000020 	.word	0x20000020
 8000c90:	08003f2d 	.word	0x08003f2d
 8000c94:	08003f5d 	.word	0x08003f5d

08000c98 <fifo_readable>:

int
fifo_readable (struct file *file, struct file_request *request,
               struct event_monitor *monitor)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
	/* Trying to read too much */
	if (request->size > PIPE_BUF) {
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	2b40      	cmp	r3, #64	; 0x40
 8000caa:	dd02      	ble.n	8000cb2 <fifo_readable+0x1a>
		return FILE_ACCESS_ERROR;
 8000cac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cb0:	e021      	b.n	8000cf6 <fifo_readable+0x5e>
	}

	struct pipe_ringbuffer *pipe =
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	617b      	str	r3, [r7, #20]
	    container_of(file, struct pipe_ringbuffer, file);

	if ((size_t)PIPE_LEN(*pipe) < request->size) {
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	68da      	ldr	r2, [r3, #12]
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	1ad2      	subs	r2, r2, r3
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	68d9      	ldr	r1, [r3, #12]
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	4299      	cmp	r1, r3
 8000cca:	da01      	bge.n	8000cd0 <fifo_readable+0x38>
 8000ccc:	2340      	movs	r3, #64	; 0x40
 8000cce:	e000      	b.n	8000cd2 <fifo_readable+0x3a>
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	4413      	add	r3, r2
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d20a      	bcs.n	8000cf4 <fifo_readable+0x5c>
		/* Trying to read more than there is: block */
		event_monitor_block(monitor, pipe->read_event, request->task);
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	691a      	ldr	r2, [r3, #16]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	4611      	mov	r1, r2
 8000cea:	461a      	mov	r2, r3
 8000cec:	f7ff fee6 	bl	8000abc <event_monitor_block>
		return FILE_ACCESS_BLOCK;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	e000      	b.n	8000cf6 <fifo_readable+0x5e>
	}
	return FILE_ACCESS_ACCEPT;
 8000cf4:	2301      	movs	r3, #1
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop

08000d00 <fifo_writable>:

int
fifo_writable (struct file *file, struct file_request *request,
               struct event_monitor *monitor)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
	struct pipe_ringbuffer *pipe =
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	617b      	str	r3, [r7, #20]
	    container_of(file, struct pipe_ringbuffer, file);

	/* If the write would be non-atomic */
	if (request->size > PIPE_BUF) {
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	2b40      	cmp	r3, #64	; 0x40
 8000d16:	dd02      	ble.n	8000d1e <fifo_writable+0x1e>
		return FILE_ACCESS_ERROR;
 8000d18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d1c:	e020      	b.n	8000d60 <fifo_writable+0x60>
	}
	/* Preserve 1 byte to distiguish empty or full */
	if ((size_t)PIPE_BUF - PIPE_LEN(*pipe) - 1 < request->size) {
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	689a      	ldr	r2, [r3, #8]
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	68db      	ldr	r3, [r3, #12]
 8000d26:	1ad2      	subs	r2, r2, r3
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	68d9      	ldr	r1, [r3, #12]
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	4299      	cmp	r1, r3
 8000d32:	da01      	bge.n	8000d38 <fifo_writable+0x38>
 8000d34:	2340      	movs	r3, #64	; 0x40
 8000d36:	e000      	b.n	8000d3a <fifo_writable+0x3a>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	f103 023f 	add.w	r2, r3, #63	; 0x3f
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d20a      	bcs.n	8000d5e <fifo_writable+0x5e>
		/* Trying to write more than we have space for: block */
	    event_monitor_block(monitor, pipe->write_event, request->task);
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	695a      	ldr	r2, [r3, #20]
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	4611      	mov	r1, r2
 8000d54:	461a      	mov	r2, r3
 8000d56:	f7ff feb1 	bl	8000abc <event_monitor_block>
		return FILE_ACCESS_BLOCK;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	e000      	b.n	8000d60 <fifo_writable+0x60>
	}
	return FILE_ACCESS_ACCEPT;
 8000d5e:	2301      	movs	r3, #1
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3718      	adds	r7, #24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <fifo_read>:

int
fifo_read (struct file *file, struct file_request *request,
               struct event_monitor *monitor)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
	size_t i;
	struct pipe_ringbuffer *pipe =
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	613b      	str	r3, [r7, #16]
	    container_of(file, struct pipe_ringbuffer, file);

	/* Copy data into buf */
	for (i = 0; i < request->size; i++) {
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	e018      	b.n	8000db0 <fifo_read+0x48>
		PIPE_POP(*pipe, request->buf[i]);
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	685a      	ldr	r2, [r3, #4]
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	4413      	add	r3, r2
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	6892      	ldr	r2, [r2, #8]
 8000d8a:	6939      	ldr	r1, [r7, #16]
 8000d8c:	440a      	add	r2, r1
 8000d8e:	7e12      	ldrb	r2, [r2, #24]
 8000d90:	701a      	strb	r2, [r3, #0]
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	1c5a      	adds	r2, r3, #1
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	2b3f      	cmp	r3, #63	; 0x3f
 8000da2:	dd02      	ble.n	8000daa <fifo_read+0x42>
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
	size_t i;
	struct pipe_ringbuffer *pipe =
	    container_of(file, struct pipe_ringbuffer, file);

	/* Copy data into buf */
	for (i = 0; i < request->size; i++) {
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	3301      	adds	r3, #1
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	461a      	mov	r2, r3
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d8e0      	bhi.n	8000d7e <fifo_read+0x16>
		PIPE_POP(*pipe, request->buf[i]);
	}

    /* Prepared to write */
	event_monitor_release(monitor, pipe->write_event);
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	695b      	ldr	r3, [r3, #20]
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	f7ff fe98 	bl	8000af8 <event_monitor_release>
	return request->size;
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	689b      	ldr	r3, [r3, #8]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3718      	adds	r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <fifo_write>:

int
fifo_write (struct file *file, struct file_request *request,
               struct event_monitor *monitor)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
	size_t i;
	struct pipe_ringbuffer *pipe =
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	613b      	str	r3, [r7, #16]
	    container_of(file, struct pipe_ringbuffer, file);

	/* Copy data into pipe */
	for (i = 0; i < request->size; i++)
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	e018      	b.n	8000e1c <fifo_write+0x48>
		PIPE_PUSH(*pipe, request->buf[i]);
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	6851      	ldr	r1, [r2, #4]
 8000df2:	697a      	ldr	r2, [r7, #20]
 8000df4:	440a      	add	r2, r1
 8000df6:	7812      	ldrb	r2, [r2, #0]
 8000df8:	6939      	ldr	r1, [r7, #16]
 8000dfa:	440b      	add	r3, r1
 8000dfc:	761a      	strb	r2, [r3, #24]
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	1c5a      	adds	r2, r3, #1
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	60da      	str	r2, [r3, #12]
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	2b3f      	cmp	r3, #63	; 0x3f
 8000e0e:	dd02      	ble.n	8000e16 <fifo_write+0x42>
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	2200      	movs	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]
	size_t i;
	struct pipe_ringbuffer *pipe =
	    container_of(file, struct pipe_ringbuffer, file);

	/* Copy data into pipe */
	for (i = 0; i < request->size; i++)
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	617b      	str	r3, [r7, #20]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	461a      	mov	r2, r3
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d8e0      	bhi.n	8000dea <fifo_write+0x16>
		PIPE_PUSH(*pipe, request->buf[i]);

    /* Prepared to read */
	event_monitor_release(monitor, pipe->read_event);
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	691b      	ldr	r3, [r3, #16]
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	4619      	mov	r1, r3
 8000e30:	f7ff fe62 	bl	8000af8 <event_monitor_release>
	return request->size;
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	689b      	ldr	r3, [r3, #8]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <mkfile>:
#include "block.h"
#include "regfile.h"
#include "path.h"

int mkfile(const char *pathname, int mode, int dev)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b096      	sub	sp, #88	; 0x58
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
    int cmd = PATH_CMD_MKFILE;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	653b      	str	r3, [r7, #80]	; 0x50
	unsigned int replyfd = getpid() + 3;
 8000e50:	f017 f8bd 	bl	8017fce <getpid>
 8000e54:	4603      	mov	r3, r0
 8000e56:	3303      	adds	r3, #3
 8000e58:	64fb      	str	r3, [r7, #76]	; 0x4c
	size_t plen = strlen(pathname)+1;
 8000e5a:	68f8      	ldr	r0, [r7, #12]
 8000e5c:	f003 ffd8 	bl	8004e10 <strlen>
 8000e60:	4603      	mov	r3, r0
 8000e62:	3301      	adds	r3, #1
 8000e64:	64bb      	str	r3, [r7, #72]	; 0x48
	char buf[4 + 4 + 4 + PATH_MAX + 4];
	(void) mode;
	int pos = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	657b      	str	r3, [r7, #84]	; 0x54
	int status = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]

	path_write_data(buf, &cmd, 4, pos);
 8000e6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e70:	f107 0218 	add.w	r2, r7, #24
 8000e74:	441a      	add	r2, r3
 8000e76:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e7a:	4610      	mov	r0, r2
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	2204      	movs	r2, #4
 8000e80:	f017 f856 	bl	8017f30 <memcpy>
 8000e84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e86:	3304      	adds	r3, #4
 8000e88:	657b      	str	r3, [r7, #84]	; 0x54
	path_write_data(buf, &replyfd, 4, pos);
 8000e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e8c:	f107 0218 	add.w	r2, r7, #24
 8000e90:	441a      	add	r2, r3
 8000e92:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e96:	4610      	mov	r0, r2
 8000e98:	4619      	mov	r1, r3
 8000e9a:	2204      	movs	r2, #4
 8000e9c:	f017 f848 	bl	8017f30 <memcpy>
 8000ea0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ea2:	3304      	adds	r3, #4
 8000ea4:	657b      	str	r3, [r7, #84]	; 0x54
	path_write_data(buf, &plen, 4, pos);
 8000ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ea8:	f107 0218 	add.w	r2, r7, #24
 8000eac:	441a      	add	r2, r3
 8000eae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000eb2:	4610      	mov	r0, r2
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	2204      	movs	r2, #4
 8000eb8:	f017 f83a 	bl	8017f30 <memcpy>
 8000ebc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ebe:	3304      	adds	r3, #4
 8000ec0:	657b      	str	r3, [r7, #84]	; 0x54
	path_write_data(buf, pathname, plen, pos);
 8000ec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ec4:	f107 0218 	add.w	r2, r7, #24
 8000ec8:	441a      	add	r2, r3
 8000eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ecc:	4610      	mov	r0, r2
 8000ece:	68f9      	ldr	r1, [r7, #12]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	f017 f82d 	bl	8017f30 <memcpy>
 8000ed6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000ed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000eda:	4413      	add	r3, r2
 8000edc:	657b      	str	r3, [r7, #84]	; 0x54
	path_write_data(buf, &dev, 4, pos);
 8000ede:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ee0:	f107 0218 	add.w	r2, r7, #24
 8000ee4:	441a      	add	r2, r3
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	4610      	mov	r0, r2
 8000eea:	4619      	mov	r1, r3
 8000eec:	2204      	movs	r2, #4
 8000eee:	f017 f81f 	bl	8017f30 <memcpy>
 8000ef2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	657b      	str	r3, [r7, #84]	; 0x54

	write(PATHSERVER_FD, buf, pos);
 8000ef8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000efa:	f107 0218 	add.w	r2, r7, #24
 8000efe:	200b      	movs	r0, #11
 8000f00:	4611      	mov	r1, r2
 8000f02:	461a      	mov	r2, r3
 8000f04:	f017 f86a 	bl	8017fdc <write>
	read(replyfd, &status, 4);
 8000f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	4610      	mov	r0, r2
 8000f12:	4619      	mov	r1, r3
 8000f14:	2204      	movs	r2, #4
 8000f16:	f017 f868 	bl	8017fea <read>

	return status;
 8000f1a:	697b      	ldr	r3, [r7, #20]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3758      	adds	r7, #88	; 0x58
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <open>:

int open(const char *pathname, int flags)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b092      	sub	sp, #72	; 0x48
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
    int cmd = PATH_CMD_OPEN;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	643b      	str	r3, [r7, #64]	; 0x40
	unsigned int replyfd = getpid() + 3;
 8000f32:	f017 f84c 	bl	8017fce <getpid>
 8000f36:	4603      	mov	r3, r0
 8000f38:	3303      	adds	r3, #3
 8000f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
	size_t plen = strlen(pathname) + 1;
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f003 ff67 	bl	8004e10 <strlen>
 8000f42:	4603      	mov	r3, r0
 8000f44:	3301      	adds	r3, #1
 8000f46:	63bb      	str	r3, [r7, #56]	; 0x38
	unsigned int fd = -1;
 8000f48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f4c:	637b      	str	r3, [r7, #52]	; 0x34
	char buf[4 + 4 + 4 + PATH_MAX];
	(void) flags;
	int pos = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	647b      	str	r3, [r7, #68]	; 0x44

	path_write_data(buf, &cmd, 4, pos);
 8000f52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f54:	f107 0208 	add.w	r2, r7, #8
 8000f58:	441a      	add	r2, r3
 8000f5a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f5e:	4610      	mov	r0, r2
 8000f60:	4619      	mov	r1, r3
 8000f62:	2204      	movs	r2, #4
 8000f64:	f016 ffe4 	bl	8017f30 <memcpy>
 8000f68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f6a:	3304      	adds	r3, #4
 8000f6c:	647b      	str	r3, [r7, #68]	; 0x44
	path_write_data(buf, &replyfd, 4, pos);
 8000f6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f70:	f107 0208 	add.w	r2, r7, #8
 8000f74:	441a      	add	r2, r3
 8000f76:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f7a:	4610      	mov	r0, r2
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	2204      	movs	r2, #4
 8000f80:	f016 ffd6 	bl	8017f30 <memcpy>
 8000f84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f86:	3304      	adds	r3, #4
 8000f88:	647b      	str	r3, [r7, #68]	; 0x44
	path_write_data(buf, &plen, 4, pos);
 8000f8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f8c:	f107 0208 	add.w	r2, r7, #8
 8000f90:	441a      	add	r2, r3
 8000f92:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f96:	4610      	mov	r0, r2
 8000f98:	4619      	mov	r1, r3
 8000f9a:	2204      	movs	r2, #4
 8000f9c:	f016 ffc8 	bl	8017f30 <memcpy>
 8000fa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fa2:	3304      	adds	r3, #4
 8000fa4:	647b      	str	r3, [r7, #68]	; 0x44
	path_write_data(buf, pathname, plen, pos);
 8000fa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fa8:	f107 0208 	add.w	r2, r7, #8
 8000fac:	441a      	add	r2, r3
 8000fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fb0:	4610      	mov	r0, r2
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	f016 ffbb 	bl	8017f30 <memcpy>
 8000fba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fbe:	4413      	add	r3, r2
 8000fc0:	647b      	str	r3, [r7, #68]	; 0x44

	write(PATHSERVER_FD, buf, pos);
 8000fc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fc4:	f107 0208 	add.w	r2, r7, #8
 8000fc8:	200b      	movs	r0, #11
 8000fca:	4611      	mov	r1, r2
 8000fcc:	461a      	mov	r2, r3
 8000fce:	f017 f805 	bl	8017fdc <write>
	read(replyfd, &fd, 4);
 8000fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fda:	4610      	mov	r0, r2
 8000fdc:	4619      	mov	r1, r3
 8000fde:	2204      	movs	r2, #4
 8000fe0:	f017 f803 	bl	8017fea <read>

	return fd;
 8000fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3748      	adds	r7, #72	; 0x48
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop

08000ff0 <file_release>:

int file_release(struct event_monitor *monitor, int event,
                  struct task_control_block *task, void *data)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
 8000ffc:	603b      	str	r3, [r7, #0]
    struct file *file = data;
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	617b      	str	r3, [r7, #20]
    struct file_request *request = (void*)task->stack->r0;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001008:	613b      	str	r3, [r7, #16]

    if (FILE_EVENT_IS_READ(event))
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	2b00      	cmp	r3, #0
 8001012:	d106      	bne.n	8001022 <file_release+0x32>
        return file_read(file, request, monitor);
 8001014:	6978      	ldr	r0, [r7, #20]
 8001016:	6939      	ldr	r1, [r7, #16]
 8001018:	68fa      	ldr	r2, [r7, #12]
 800101a:	f000 f80d 	bl	8001038 <file_read>
 800101e:	4603      	mov	r3, r0
 8001020:	e005      	b.n	800102e <file_release+0x3e>
    else
        return file_write(file, request, monitor);
 8001022:	6978      	ldr	r0, [r7, #20]
 8001024:	6939      	ldr	r1, [r7, #16]
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	f000 f850 	bl	80010cc <file_write>
 800102c:	4603      	mov	r3, r0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop

08001038 <file_read>:

int file_read(struct file *file, struct file_request *request,
              struct event_monitor *monitor)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
    struct task_control_block *task = request->task;
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	617b      	str	r3, [r7, #20]

	if (file) {
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d02b      	beq.n	80010a8 <file_read+0x70>
	    switch (file->ops->readable(file, request, monitor)) {
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	68f8      	ldr	r0, [r7, #12]
 8001058:	68b9      	ldr	r1, [r7, #8]
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	4798      	blx	r3
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d015      	beq.n	8001090 <file_read+0x58>
 8001064:	2b01      	cmp	r3, #1
 8001066:	d11f      	bne.n	80010a8 <file_read+0x70>
		    case FILE_ACCESS_ACCEPT: {
			    int size = file->ops->read(file, request, monitor);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	68f8      	ldr	r0, [r7, #12]
 8001070:	68b9      	ldr	r1, [r7, #8]
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	4798      	blx	r3
 8001076:	6138      	str	r0, [r7, #16]

			    if (task) {
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d006      	beq.n	800108c <file_read+0x54>
			        task->stack->r0 = size;
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	629a      	str	r2, [r3, #40]	; 0x28
	                task->status = TASK_READY;
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
	            }

			    return 1;
 800108c:	2301      	movs	r3, #1
 800108e:	e018      	b.n	80010c2 <file_read+0x8a>
		    }
		    case FILE_ACCESS_BLOCK:
			    if (task && task->status == TASK_READY) {
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d006      	beq.n	80010a4 <file_read+0x6c>
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d102      	bne.n	80010a4 <file_read+0x6c>
	                task->status = TASK_WAIT_READ;
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	2201      	movs	r2, #1
 80010a2:	609a      	str	r2, [r3, #8]
	            }

	            return 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	e00c      	b.n	80010c2 <file_read+0x8a>
		    default:
		        ;
		}
	}

    if (task) {
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d007      	beq.n	80010be <file_read+0x86>
        task->stack->r0 = -1;
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010b6:	629a      	str	r2, [r3, #40]	; 0x28
        task->status = TASK_READY;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
    }

    return -1;
 80010be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop

080010cc <file_write>:

int file_write(struct file *file, struct file_request *request,
               struct event_monitor *monitor)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
    struct task_control_block *task = request->task;
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	617b      	str	r3, [r7, #20]

	if (file) {
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d02c      	beq.n	800113e <file_write+0x72>
	    switch (file->ops->writable(file, request, monitor)) {
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	4798      	blx	r3
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d015      	beq.n	8001124 <file_write+0x58>
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d120      	bne.n	800113e <file_write+0x72>
	        case FILE_ACCESS_ACCEPT: {
	            int size = file->ops->write(file, request, monitor);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	68f8      	ldr	r0, [r7, #12]
 8001104:	68b9      	ldr	r1, [r7, #8]
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	4798      	blx	r3
 800110a:	6138      	str	r0, [r7, #16]

	            if (task) {
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d006      	beq.n	8001120 <file_write+0x54>
	                task->stack->r0 = size;
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	629a      	str	r2, [r3, #40]	; 0x28
	                task->status = TASK_READY;
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
	            }

			    return 1;
 8001120:	2301      	movs	r3, #1
 8001122:	e019      	b.n	8001158 <file_write+0x8c>
		    }
		    case FILE_ACCESS_BLOCK:
		        if (task && task->status == TASK_READY) {
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d007      	beq.n	800113a <file_write+0x6e>
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d103      	bne.n	800113a <file_write+0x6e>
		            request->task->status = TASK_WAIT_WRITE;
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2202      	movs	r2, #2
 8001138:	609a      	str	r2, [r3, #8]
		        }

		        return 0;
 800113a:	2300      	movs	r3, #0
 800113c:	e00c      	b.n	8001158 <file_write+0x8c>
		    default:
		        ;
		}
	}

	if (task) {
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d007      	beq.n	8001154 <file_write+0x88>
	    task->stack->r0 = -1;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800114c:	629a      	str	r2, [r3, #40]	; 0x28
	    task->status = TASK_READY;
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
	}

	return -1;
 8001154:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001158:	4618      	mov	r0, r3
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <file_mknod>:

int
file_mknod(int fd, int driver_pid, struct file *files[], int dev,
           struct memory_pool *memory_pool, struct event_monitor *event_monitor)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b088      	sub	sp, #32
 8001164:	af02      	add	r7, sp, #8
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
 800116c:	603b      	str	r3, [r7, #0]
    int result;
	switch(dev) {
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	3b01      	subs	r3, #1
 8001172:	2b07      	cmp	r3, #7
 8001174:	d83a      	bhi.n	80011ec <file_mknod+0x8c>
 8001176:	a201      	add	r2, pc, #4	; (adr r2, 800117c <file_mknod+0x1c>)
 8001178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800117c:	0800119d 	.word	0x0800119d
 8001180:	080011b1 	.word	0x080011b1
 8001184:	080011ed 	.word	0x080011ed
 8001188:	080011ed 	.word	0x080011ed
 800118c:	080011ed 	.word	0x080011ed
 8001190:	080011c5 	.word	0x080011c5
 8001194:	080011ed 	.word	0x080011ed
 8001198:	080011d9 	.word	0x080011d9
	case S_IFIFO:
		result = fifo_init(fd, driver_pid, files, memory_pool, event_monitor);
 800119c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	68f8      	ldr	r0, [r7, #12]
 80011a2:	68b9      	ldr	r1, [r7, #8]
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	6a3b      	ldr	r3, [r7, #32]
 80011a8:	f7ff fd26 	bl	8000bf8 <fifo_init>
 80011ac:	6178      	str	r0, [r7, #20]
		break;
 80011ae:	e020      	b.n	80011f2 <file_mknod+0x92>
	case S_IMSGQ:
		result = mq_init(fd, driver_pid, files, memory_pool, event_monitor);
 80011b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	68f8      	ldr	r0, [r7, #12]
 80011b6:	68b9      	ldr	r1, [r7, #8]
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	6a3b      	ldr	r3, [r7, #32]
 80011bc:	f002 f864 	bl	8003288 <mq_init>
 80011c0:	6178      	str	r0, [r7, #20]
		break;
 80011c2:	e016      	b.n	80011f2 <file_mknod+0x92>
	case S_IFBLK:
	    result = block_init(fd, driver_pid, files, memory_pool, event_monitor);
 80011c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	68f8      	ldr	r0, [r7, #12]
 80011ca:	68b9      	ldr	r1, [r7, #8]
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	6a3b      	ldr	r3, [r7, #32]
 80011d0:	f7ff fabc 	bl	800074c <block_init>
 80011d4:	6178      	str	r0, [r7, #20]
	    break;
 80011d6:	e00c      	b.n	80011f2 <file_mknod+0x92>
	case S_IFREG:
	    result = regfile_init(fd, driver_pid, files, memory_pool, event_monitor);
 80011d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	68f8      	ldr	r0, [r7, #12]
 80011de:	68b9      	ldr	r1, [r7, #8]
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	6a3b      	ldr	r3, [r7, #32]
 80011e4:	f003 f9d2 	bl	800458c <regfile_init>
 80011e8:	6178      	str	r0, [r7, #20]
	    break;
 80011ea:	e002      	b.n	80011f2 <file_mknod+0x92>
	default:
		result = -1;
 80011ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011f0:	617b      	str	r3, [r7, #20]
	}

	if (result == 0) {
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d106      	bne.n	8001206 <file_mknod+0xa6>
	    files[fd]->fd = fd;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	4413      	add	r3, r2
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	601a      	str	r2, [r3, #0]
    }

	return result;
 8001206:	697b      	ldr	r3, [r7, #20]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <file_lseek>:

int file_lseek(struct file *file, struct file_request *request,
               struct event_monitor *monitor)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
    struct task_control_block *task = request->task;
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	617b      	str	r3, [r7, #20]

    if (file && file->ops->lseekable && file->ops->lseek) {
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d036      	beq.n	8001296 <file_lseek+0x86>
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d031      	beq.n	8001296 <file_lseek+0x86>
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d02c      	beq.n	8001296 <file_lseek+0x86>
        switch (file->ops->lseekable(file, request, monitor)) {
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	691b      	ldr	r3, [r3, #16]
 8001242:	68f8      	ldr	r0, [r7, #12]
 8001244:	68b9      	ldr	r1, [r7, #8]
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	4798      	blx	r3
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d015      	beq.n	800127c <file_lseek+0x6c>
 8001250:	2b01      	cmp	r3, #1
 8001252:	d120      	bne.n	8001296 <file_lseek+0x86>
            case FILE_ACCESS_ACCEPT: {
                int status = file->ops->lseek(file, request, monitor);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	68f8      	ldr	r0, [r7, #12]
 800125c:	68b9      	ldr	r1, [r7, #8]
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	4798      	blx	r3
 8001262:	6138      	str	r0, [r7, #16]

	            if (task) {
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d006      	beq.n	8001278 <file_lseek+0x68>
	                task->stack->r0 = status;
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	629a      	str	r2, [r3, #40]	; 0x28
	                task->status = TASK_READY;
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
	            }

			    return 1;
 8001278:	2301      	movs	r3, #1
 800127a:	e019      	b.n	80012b0 <file_lseek+0xa0>
		    }
		    case FILE_ACCESS_BLOCK:
		        if (task && task->status == TASK_READY) {
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d007      	beq.n	8001292 <file_lseek+0x82>
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d103      	bne.n	8001292 <file_lseek+0x82>
		            request->task->status = TASK_WAIT_WRITE;
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2202      	movs	r2, #2
 8001290:	609a      	str	r2, [r3, #8]
		        }

		        return 0;
 8001292:	2300      	movs	r3, #0
 8001294:	e00c      	b.n	80012b0 <file_lseek+0xa0>
		    default:
		        ;
        }
    }

	if (task) {
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d007      	beq.n	80012ac <file_lseek+0x9c>
	    task->stack->r0 = -1;
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012a4:	629a      	str	r2, [r3, #40]	; 0x28
	    task->status = TASK_READY;
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
	}

	return -1;
 80012ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80012c2:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <NVIC_EnableIRQ+0x2c>)
 80012c4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80012c8:	0952      	lsrs	r2, r2, #5
 80012ca:	79f9      	ldrb	r1, [r7, #7]
 80012cc:	f001 011f 	and.w	r1, r1, #31
 80012d0:	2001      	movs	r0, #1
 80012d2:	fa00 f101 	lsl.w	r1, r0, r1
 80012d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000e100 	.word	0xe000e100

080012e8 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <NVIC_DisableIRQ+0x30>)
 80012f4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80012f8:	0952      	lsrs	r2, r2, #5
 80012fa:	79f9      	ldrb	r1, [r7, #7]
 80012fc:	f001 011f 	and.w	r1, r1, #31
 8001300:	2001      	movs	r0, #1
 8001302:	fa00 f101 	lsl.w	r1, r0, r1
 8001306:	3220      	adds	r2, #32
 8001308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	e000e100 	.word	0xe000e100

0800131c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	6039      	str	r1, [r7, #0]
 8001326:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8001328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132c:	2b00      	cmp	r3, #0
 800132e:	da0b      	bge.n	8001348 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001330:	490d      	ldr	r1, [pc, #52]	; (8001368 <NVIC_SetPriority+0x4c>)
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	f003 030f 	and.w	r3, r3, #15
 8001338:	3b04      	subs	r3, #4
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	b2d2      	uxtb	r2, r2
 800133e:	0112      	lsls	r2, r2, #4
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	440b      	add	r3, r1
 8001344:	761a      	strb	r2, [r3, #24]
 8001346:	e009      	b.n	800135c <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001348:	4908      	ldr	r1, [pc, #32]	; (800136c <NVIC_SetPriority+0x50>)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	683a      	ldr	r2, [r7, #0]
 8001350:	b2d2      	uxtb	r2, r2
 8001352:	0112      	lsls	r2, r2, #4
 8001354:	b2d2      	uxtb	r2, r2
 8001356:	440b      	add	r3, r1
 8001358:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000ed00 	.word	0xe000ed00
 800136c:	e000e100 	.word	0xe000e100

08001370 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3b01      	subs	r3, #1
 800137c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001380:	d301      	bcc.n	8001386 <SysTick_Config+0x16>
 8001382:	2301      	movs	r3, #1
 8001384:	e00f      	b.n	80013a6 <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8001386:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <SysTick_Config+0x40>)
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	3a01      	subs	r2, #1
 800138c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 800138e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001392:	210f      	movs	r1, #15
 8001394:	f7ff ffc2 	bl	800131c <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <SysTick_Config+0x40>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139e:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <SysTick_Config+0x40>)
 80013a0:	2207      	movs	r2, #7
 80013a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	e000e010 	.word	0xe000e010

080013b4 <serialout>:

struct task_control_block tasks[TASK_LIMIT];


void serialout(USART_TypeDef* uart, unsigned int intr)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
	int fd;
	char c;
	mkfifo("/dev/tty0/out", 0);
 80013be:	4817      	ldr	r0, [pc, #92]	; (800141c <serialout+0x68>)
 80013c0:	2100      	movs	r1, #0
 80013c2:	f7ff fc09 	bl	8000bd8 <mkfifo>
	fd = open("/dev/tty0/out", 0);
 80013c6:	4815      	ldr	r0, [pc, #84]	; (800141c <serialout+0x68>)
 80013c8:	2100      	movs	r1, #0
 80013ca:	f7ff fdab 	bl	8000f24 <open>
 80013ce:	60f8      	str	r0, [r7, #12]

	while (1) {
		read(fd, &c, 1);
 80013d0:	f107 030b 	add.w	r3, r7, #11
 80013d4:	68f8      	ldr	r0, [r7, #12]
 80013d6:	4619      	mov	r1, r3
 80013d8:	2201      	movs	r2, #1
 80013da:	f016 fe06 	bl	8017fea <read>
    	
		USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
 80013de:	4810      	ldr	r0, [pc, #64]	; (8001420 <serialout+0x6c>)
 80013e0:	f240 7127 	movw	r1, #1831	; 0x727
 80013e4:	2201      	movs	r2, #1
 80013e6:	f013 fd2d 	bl	8014e44 <USART_ITConfig>
		while (USART_GetFlagStatus(uart, USART_FLAG_TXE) != SET) {
 80013ea:	e003      	b.n	80013f4 <serialout+0x40>
    		interrupt_wait(intr);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f016 fe02 	bl	8017ff8 <interrupt_wait>

	while (1) {
		read(fd, &c, 1);
    	
		USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
		while (USART_GetFlagStatus(uart, USART_FLAG_TXE) != SET) {
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	2180      	movs	r1, #128	; 0x80
 80013f8:	f013 fd6c 	bl	8014ed4 <USART_GetFlagStatus>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d1f4      	bne.n	80013ec <serialout+0x38>
    		interrupt_wait(intr);
    	}
		USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
 8001402:	4807      	ldr	r0, [pc, #28]	; (8001420 <serialout+0x6c>)
 8001404:	f240 7127 	movw	r1, #1831	; 0x727
 8001408:	2200      	movs	r2, #0
 800140a:	f013 fd1b 	bl	8014e44 <USART_ITConfig>
    	
    	USART_SendData(USART2, c);
 800140e:	7afb      	ldrb	r3, [r7, #11]
 8001410:	4803      	ldr	r0, [pc, #12]	; (8001420 <serialout+0x6c>)
 8001412:	4619      	mov	r1, r3
 8001414:	f013 fb70 	bl	8014af8 <USART_SendData>
	}
 8001418:	e7da      	b.n	80013d0 <serialout+0x1c>
 800141a:	bf00      	nop
 800141c:	0801a408 	.word	0x0801a408
 8001420:	40004400 	.word	0x40004400

08001424 <serialin>:
}

void serialin(USART_TypeDef* uart, unsigned int intr)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
	int fd;
	char c;
	mkfifo("/dev/tty0/in", 0);
 800142e:	4814      	ldr	r0, [pc, #80]	; (8001480 <serialin+0x5c>)
 8001430:	2100      	movs	r1, #0
 8001432:	f7ff fbd1 	bl	8000bd8 <mkfifo>
	fd = open("/dev/tty0/in", 0);
 8001436:	4812      	ldr	r0, [pc, #72]	; (8001480 <serialin+0x5c>)
 8001438:	2100      	movs	r1, #0
 800143a:	f7ff fd73 	bl	8000f24 <open>
 800143e:	60f8      	str	r0, [r7, #12]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8001440:	4810      	ldr	r0, [pc, #64]	; (8001484 <serialin+0x60>)
 8001442:	f240 5125 	movw	r1, #1317	; 0x525
 8001446:	2201      	movs	r2, #1
 8001448:	f013 fcfc 	bl	8014e44 <USART_ITConfig>

	while (1) {
		interrupt_wait(intr);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f016 fdd2 	bl	8017ff8 <interrupt_wait>
		if (USART_GetFlagStatus(uart, USART_FLAG_RXNE) == SET) {
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	2120      	movs	r1, #32
 8001458:	f013 fd3c 	bl	8014ed4 <USART_GetFlagStatus>
 800145c:	4603      	mov	r3, r0
 800145e:	2b01      	cmp	r3, #1
 8001460:	d10d      	bne.n	800147e <serialin+0x5a>
			c = USART_ReceiveData(uart);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f013 fb5a 	bl	8014b1c <USART_ReceiveData>
 8001468:	4603      	mov	r3, r0
 800146a:	b2db      	uxtb	r3, r3
 800146c:	72fb      	strb	r3, [r7, #11]
			write(fd, &c, 1);
 800146e:	f107 030b 	add.w	r3, r7, #11
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	4619      	mov	r1, r3
 8001476:	2201      	movs	r2, #1
 8001478:	f016 fdb0 	bl	8017fdc <write>
		}
	}
 800147c:	e7e6      	b.n	800144c <serialin+0x28>
 800147e:	e7e5      	b.n	800144c <serialin+0x28>
 8001480:	0801a418 	.word	0x0801a418
 8001484:	40004400 	.word	0x40004400

08001488 <greeting>:
}

void greeting()
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
	int fdout = open("/dev/tty0/out", 0);
 800148e:	480b      	ldr	r0, [pc, #44]	; (80014bc <greeting+0x34>)
 8001490:	2100      	movs	r1, #0
 8001492:	f7ff fd47 	bl	8000f24 <open>
 8001496:	6038      	str	r0, [r7, #0]
	char *string = "Hello, World!\n";
 8001498:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <greeting+0x38>)
 800149a:	607b      	str	r3, [r7, #4]
	while (*string) {
 800149c:	e007      	b.n	80014ae <greeting+0x26>
		write(fdout, string, 1);
 800149e:	6838      	ldr	r0, [r7, #0]
 80014a0:	6879      	ldr	r1, [r7, #4]
 80014a2:	2201      	movs	r2, #1
 80014a4:	f016 fd9a 	bl	8017fdc <write>
		string++;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3301      	adds	r3, #1
 80014ac:	607b      	str	r3, [r7, #4]

void greeting()
{
	int fdout = open("/dev/tty0/out", 0);
	char *string = "Hello, World!\n";
	while (*string) {
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f3      	bne.n	800149e <greeting+0x16>
		write(fdout, string, 1);
		string++;
	}
}
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	0801a408 	.word	0x0801a408
 80014c0:	0801a428 	.word	0x0801a428

080014c4 <echo>:

void echo()
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
	int fdout;
	int fdin;
	char c;

	fdout = open("/dev/tty0/out", 0);
 80014ca:	480b      	ldr	r0, [pc, #44]	; (80014f8 <echo+0x34>)
 80014cc:	2100      	movs	r1, #0
 80014ce:	f7ff fd29 	bl	8000f24 <open>
 80014d2:	60f8      	str	r0, [r7, #12]
	fdin = open("/dev/tty0/in", 0);
 80014d4:	4809      	ldr	r0, [pc, #36]	; (80014fc <echo+0x38>)
 80014d6:	2100      	movs	r1, #0
 80014d8:	f7ff fd24 	bl	8000f24 <open>
 80014dc:	60b8      	str	r0, [r7, #8]

	while (1) {
		read(fdin, &c, 1);
 80014de:	1dfb      	adds	r3, r7, #7
 80014e0:	68b8      	ldr	r0, [r7, #8]
 80014e2:	4619      	mov	r1, r3
 80014e4:	2201      	movs	r2, #1
 80014e6:	f016 fd80 	bl	8017fea <read>
		write(fdout, &c, 1);
 80014ea:	1dfb      	adds	r3, r7, #7
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	4619      	mov	r1, r3
 80014f0:	2201      	movs	r2, #1
 80014f2:	f016 fd73 	bl	8017fdc <write>
	}
 80014f6:	e7f2      	b.n	80014de <echo+0x1a>
 80014f8:	0801a408 	.word	0x0801a408
 80014fc:	0801a418 	.word	0x0801a418

08001500 <rs232_xmit_msg_task>:
}

void rs232_xmit_msg_task()
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b09c      	sub	sp, #112	; 0x70
 8001504:	af00      	add	r7, sp, #0
	int fdout;
	int fdin;
	char str[100];
	int curr_char;

	fdout = open("/dev/tty0/out", 0);
 8001506:	4814      	ldr	r0, [pc, #80]	; (8001558 <rs232_xmit_msg_task+0x58>)
 8001508:	2100      	movs	r1, #0
 800150a:	f7ff fd0b 	bl	8000f24 <open>
 800150e:	66b8      	str	r0, [r7, #104]	; 0x68
	fdin = mq_open("/tmp/mqueue/out", O_CREAT);
 8001510:	4812      	ldr	r0, [pc, #72]	; (800155c <rs232_xmit_msg_task+0x5c>)
 8001512:	2104      	movs	r1, #4
 8001514:	f001 fea0 	bl	8003258 <mq_open>
 8001518:	6678      	str	r0, [r7, #100]	; 0x64
	setpriority(0, PRIORITY_DEFAULT - 2);
 800151a:	2000      	movs	r0, #0
 800151c:	2112      	movs	r1, #18
 800151e:	f016 fd79 	bl	8018014 <setpriority>

	while (1) {
		/* Read from the queue.  Keep trying until a message is
		 * received.  This will block for a period of time (specified
		 * by portMAX_DELAY). */
		read(fdin, str, 100);
 8001522:	463b      	mov	r3, r7
 8001524:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001526:	4619      	mov	r1, r3
 8001528:	2264      	movs	r2, #100	; 0x64
 800152a:	f016 fd5e 	bl	8017fea <read>

		/* Write each character of the message to the RS232 port. */
		curr_char = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	66fb      	str	r3, [r7, #108]	; 0x6c
		while (str[curr_char] != '\0') {
 8001532:	e00a      	b.n	800154a <rs232_xmit_msg_task+0x4a>
			write(fdout, &str[curr_char], 1);
 8001534:	463a      	mov	r2, r7
 8001536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001538:	4413      	add	r3, r2
 800153a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800153c:	4619      	mov	r1, r3
 800153e:	2201      	movs	r2, #1
 8001540:	f016 fd4c 	bl	8017fdc <write>
			curr_char++;
 8001544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001546:	3301      	adds	r3, #1
 8001548:	66fb      	str	r3, [r7, #108]	; 0x6c
		 * by portMAX_DELAY). */
		read(fdin, str, 100);

		/* Write each character of the message to the RS232 port. */
		curr_char = 0;
		while (str[curr_char] != '\0') {
 800154a:	463a      	mov	r2, r7
 800154c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800154e:	4413      	add	r3, r2
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1ee      	bne.n	8001534 <rs232_xmit_msg_task+0x34>
			write(fdout, &str[curr_char], 1);
			curr_char++;
		}
	}
 8001556:	e7e4      	b.n	8001522 <rs232_xmit_msg_task+0x22>
 8001558:	0801a408 	.word	0x0801a408
 800155c:	0801a438 	.word	0x0801a438

08001560 <queue_str_task>:
}

void queue_str_task(const char *str, int delay)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
	int fdout = mq_open("/tmp/mqueue/out", 0);
 800156a:	480b      	ldr	r0, [pc, #44]	; (8001598 <queue_str_task+0x38>)
 800156c:	2100      	movs	r1, #0
 800156e:	f001 fe73 	bl	8003258 <mq_open>
 8001572:	60f8      	str	r0, [r7, #12]
	int msg_len = strlen(str) + 1;
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f003 fc4b 	bl	8004e10 <strlen>
 800157a:	4603      	mov	r3, r0
 800157c:	3301      	adds	r3, #1
 800157e:	60bb      	str	r3, [r7, #8]

	while (1) {
		/* Post the message.  Keep on trying until it is successful. */
		write(fdout, str, msg_len);
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	68f8      	ldr	r0, [r7, #12]
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	461a      	mov	r2, r3
 8001588:	f016 fd28 	bl	8017fdc <write>

		/* Wait. */
		sleep(delay);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f016 fd4e 	bl	8018030 <sleep>
	}
 8001594:	e7f4      	b.n	8001580 <queue_str_task+0x20>
 8001596:	bf00      	nop
 8001598:	0801a438 	.word	0x0801a438

0800159c <queue_str_task1>:
}

void queue_str_task1()
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
	queue_str_task("Hello 1\n", 200);
 80015a0:	4802      	ldr	r0, [pc, #8]	; (80015ac <queue_str_task1+0x10>)
 80015a2:	21c8      	movs	r1, #200	; 0xc8
 80015a4:	f7ff ffdc 	bl	8001560 <queue_str_task>
}
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	0801a448 	.word	0x0801a448

080015b0 <queue_str_task2>:

void queue_str_task2()
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
	queue_str_task("Hello 2\n", 50);
 80015b4:	4802      	ldr	r0, [pc, #8]	; (80015c0 <queue_str_task2+0x10>)
 80015b6:	2132      	movs	r1, #50	; 0x32
 80015b8:	f7ff ffd2 	bl	8001560 <queue_str_task>
}
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	0801a454 	.word	0x0801a454

080015c4 <serial_readwrite_task>:

void serial_readwrite_task()
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b09e      	sub	sp, #120	; 0x78
 80015c8:	af00      	add	r7, sp, #0
	char str[100];
	char ch;
	int curr_char;
	int done;

	fdout = mq_open("/tmp/mqueue/out", 0);
 80015ca:	4824      	ldr	r0, [pc, #144]	; (800165c <serial_readwrite_task+0x98>)
 80015cc:	2100      	movs	r1, #0
 80015ce:	f001 fe43 	bl	8003258 <mq_open>
 80015d2:	66f8      	str	r0, [r7, #108]	; 0x6c
	fdin = open("/dev/tty0/in", 0);
 80015d4:	4822      	ldr	r0, [pc, #136]	; (8001660 <serial_readwrite_task+0x9c>)
 80015d6:	2100      	movs	r1, #0
 80015d8:	f7ff fca4 	bl	8000f24 <open>
 80015dc:	66b8      	str	r0, [r7, #104]	; 0x68

	/* Prepare the response message to be queued. */
	memcpy(str, "Got:", 4);
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	4618      	mov	r0, r3
 80015e2:	4920      	ldr	r1, [pc, #128]	; (8001664 <serial_readwrite_task+0xa0>)
 80015e4:	2204      	movs	r2, #4
 80015e6:	f016 fca3 	bl	8017f30 <memcpy>

	while (1) {
		curr_char = 4;
 80015ea:	2304      	movs	r3, #4
 80015ec:	677b      	str	r3, [r7, #116]	; 0x74
		done = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	673b      	str	r3, [r7, #112]	; 0x70
		do {
			/* Receive a byte from the RS232 port (this call will
			 * block). */
			read(fdin, &ch, 1);
 80015f2:	1cfb      	adds	r3, r7, #3
 80015f4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80015f6:	4619      	mov	r1, r3
 80015f8:	2201      	movs	r2, #1
 80015fa:	f016 fcf6 	bl	8017fea <read>

			/* If the byte is an end-of-line type character, then
			 * finish the string and inidcate we are done.
			 */
			if (curr_char >= 98 || ch == '\r' || ch == '\n') {
 80015fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001600:	2b61      	cmp	r3, #97	; 0x61
 8001602:	dc05      	bgt.n	8001610 <serial_readwrite_task+0x4c>
 8001604:	78fb      	ldrb	r3, [r7, #3]
 8001606:	2b0d      	cmp	r3, #13
 8001608:	d002      	beq.n	8001610 <serial_readwrite_task+0x4c>
 800160a:	78fb      	ldrb	r3, [r7, #3]
 800160c:	2b0a      	cmp	r3, #10
 800160e:	d110      	bne.n	8001632 <serial_readwrite_task+0x6e>
				str[curr_char] = '\n';
 8001610:	1d3a      	adds	r2, r7, #4
 8001612:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001614:	4413      	add	r3, r2
 8001616:	220a      	movs	r2, #10
 8001618:	701a      	strb	r2, [r3, #0]
				str[curr_char+1] = '\0';
 800161a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800161c:	3301      	adds	r3, #1
 800161e:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001622:	440b      	add	r3, r1
 8001624:	2200      	movs	r2, #0
 8001626:	f803 2c74 	strb.w	r2, [r3, #-116]
				done = -1;
 800162a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800162e:	673b      	str	r3, [r7, #112]	; 0x70
 8001630:	e008      	b.n	8001644 <serial_readwrite_task+0x80>
			}
			/* Otherwise, add the character to the
			 * response string. */
			else
				str[curr_char++] = ch;
 8001632:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001634:	1c5a      	adds	r2, r3, #1
 8001636:	677a      	str	r2, [r7, #116]	; 0x74
 8001638:	78fa      	ldrb	r2, [r7, #3]
 800163a:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800163e:	440b      	add	r3, r1
 8001640:	f803 2c74 	strb.w	r2, [r3, #-116]
		} while (!done);
 8001644:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0d3      	beq.n	80015f2 <serial_readwrite_task+0x2e>

		/* Once we are done building the response string, queue the
		 * response to be sent to the RS232 port.
		 */
		write(fdout, str, curr_char+1 + 1);
 800164a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800164c:	3302      	adds	r3, #2
 800164e:	1d3a      	adds	r2, r7, #4
 8001650:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001652:	4611      	mov	r1, r2
 8001654:	461a      	mov	r2, r3
 8001656:	f016 fcc1 	bl	8017fdc <write>
	}
 800165a:	e7c6      	b.n	80015ea <serial_readwrite_task+0x26>
 800165c:	0801a438 	.word	0x0801a438
 8001660:	0801a418 	.word	0x0801a418
 8001664:	0801a460 	.word	0x0801a460

08001668 <serial_test_task>:
}

void serial_test_task()
{
 8001668:	b5b0      	push	{r4, r5, r7, lr}
 800166a:	b08a      	sub	sp, #40	; 0x28
 800166c:	af00      	add	r7, sp, #0
	char put_ch[2]={'0','\0'};
 800166e:	2330      	movs	r3, #48	; 0x30
 8001670:	773b      	strb	r3, [r7, #28]
 8001672:	2300      	movs	r3, #0
 8001674:	777b      	strb	r3, [r7, #29]
	char hint[] =  USER_NAME "@" USER_NAME "-STM32:~$ ";
 8001676:	4b44      	ldr	r3, [pc, #272]	; (8001788 <serial_test_task+0x120>)
 8001678:	463c      	mov	r4, r7
 800167a:	461d      	mov	r5, r3
 800167c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800167e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001680:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001684:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	int hint_length = sizeof(hint);
 8001688:	231c      	movs	r3, #28
 800168a:	623b      	str	r3, [r7, #32]
	char *p = NULL;
 800168c:	2300      	movs	r3, #0
 800168e:	627b      	str	r3, [r7, #36]	; 0x24

	fdout = mq_open("/tmp/mqueue/out", 0);
 8001690:	483e      	ldr	r0, [pc, #248]	; (800178c <serial_test_task+0x124>)
 8001692:	2100      	movs	r1, #0
 8001694:	f001 fde0 	bl	8003258 <mq_open>
 8001698:	4602      	mov	r2, r0
 800169a:	4b3d      	ldr	r3, [pc, #244]	; (8001790 <serial_test_task+0x128>)
 800169c:	601a      	str	r2, [r3, #0]
	fdin = open("/dev/tty0/in", 0);
 800169e:	483d      	ldr	r0, [pc, #244]	; (8001794 <serial_test_task+0x12c>)
 80016a0:	2100      	movs	r1, #0
 80016a2:	f7ff fc3f 	bl	8000f24 <open>
 80016a6:	4602      	mov	r2, r0
 80016a8:	4b3b      	ldr	r3, [pc, #236]	; (8001798 <serial_test_task+0x130>)
 80016aa:	601a      	str	r2, [r3, #0]

	for (;; cur_his = (cur_his + 1) % HISTORY_COUNT) {
		p = cmd[cur_his];
 80016ac:	4b3b      	ldr	r3, [pc, #236]	; (800179c <serial_test_task+0x134>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	019a      	lsls	r2, r3, #6
 80016b2:	4b3b      	ldr	r3, [pc, #236]	; (80017a0 <serial_test_task+0x138>)
 80016b4:	4413      	add	r3, r2
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
		write(fdout, hint, hint_length);
 80016b8:	4b35      	ldr	r3, [pc, #212]	; (8001790 <serial_test_task+0x128>)
 80016ba:	6819      	ldr	r1, [r3, #0]
 80016bc:	6a3b      	ldr	r3, [r7, #32]
 80016be:	463a      	mov	r2, r7
 80016c0:	4608      	mov	r0, r1
 80016c2:	4611      	mov	r1, r2
 80016c4:	461a      	mov	r2, r3
 80016c6:	f016 fc89 	bl	8017fdc <write>

		while (1) {
			read(fdin, put_ch, 1);
 80016ca:	4b33      	ldr	r3, [pc, #204]	; (8001798 <serial_test_task+0x130>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	f107 031c 	add.w	r3, r7, #28
 80016d2:	4610      	mov	r0, r2
 80016d4:	4619      	mov	r1, r3
 80016d6:	2201      	movs	r2, #1
 80016d8:	f016 fc87 	bl	8017fea <read>

			if (put_ch[0] == '\r' || put_ch[0] == '\n') {
 80016dc:	7f3b      	ldrb	r3, [r7, #28]
 80016de:	2b0d      	cmp	r3, #13
 80016e0:	d002      	beq.n	80016e8 <serial_test_task+0x80>
 80016e2:	7f3b      	ldrb	r3, [r7, #28]
 80016e4:	2b0a      	cmp	r3, #10
 80016e6:	d114      	bne.n	8001712 <serial_test_task+0xaa>
				*p = '\0';
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	2200      	movs	r2, #0
 80016ec:	701a      	strb	r2, [r3, #0]
				write(fdout, next_line, 3);
 80016ee:	4b28      	ldr	r3, [pc, #160]	; (8001790 <serial_test_task+0x128>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	492b      	ldr	r1, [pc, #172]	; (80017a4 <serial_test_task+0x13c>)
 80016f6:	2203      	movs	r2, #3
 80016f8:	f016 fc70 	bl	8017fdc <write>
				break;
 80016fc:	bf00      	nop
			else if (p - cmd[cur_his] < CMDBUF_SIZE - 1) {
				*p++ = put_ch[0];
				write(fdout, put_ch, 2);
			}
		}
		check_keyword();	
 80016fe:	f000 f8d1 	bl	80018a4 <check_keyword>
	char *p = NULL;

	fdout = mq_open("/tmp/mqueue/out", 0);
	fdin = open("/dev/tty0/in", 0);

	for (;; cur_his = (cur_his + 1) % HISTORY_COUNT) {
 8001702:	4b26      	ldr	r3, [pc, #152]	; (800179c <serial_test_task+0x134>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	1c5a      	adds	r2, r3, #1
 8001708:	4b27      	ldr	r3, [pc, #156]	; (80017a8 <serial_test_task+0x140>)
 800170a:	4013      	ands	r3, r2
 800170c:	2b00      	cmp	r3, #0
 800170e:	da37      	bge.n	8001780 <serial_test_task+0x118>
 8001710:	e032      	b.n	8001778 <serial_test_task+0x110>
			if (put_ch[0] == '\r' || put_ch[0] == '\n') {
				*p = '\0';
				write(fdout, next_line, 3);
				break;
			}
			else if (put_ch[0] == 127 || put_ch[0] == '\b') {
 8001712:	7f3b      	ldrb	r3, [r7, #28]
 8001714:	2b7f      	cmp	r3, #127	; 0x7f
 8001716:	d002      	beq.n	800171e <serial_test_task+0xb6>
 8001718:	7f3b      	ldrb	r3, [r7, #28]
 800171a:	2b08      	cmp	r3, #8
 800171c:	d113      	bne.n	8001746 <serial_test_task+0xde>
				if (p > cmd[cur_his]) {
 800171e:	4b1f      	ldr	r3, [pc, #124]	; (800179c <serial_test_task+0x134>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	019a      	lsls	r2, r3, #6
 8001724:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <serial_test_task+0x138>)
 8001726:	441a      	add	r2, r3
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	429a      	cmp	r2, r3
 800172c:	d20a      	bcs.n	8001744 <serial_test_task+0xdc>
					p--;
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	3b01      	subs	r3, #1
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
					write(fdout, "\b \b", 4);
 8001734:	4b16      	ldr	r3, [pc, #88]	; (8001790 <serial_test_task+0x128>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	491c      	ldr	r1, [pc, #112]	; (80017ac <serial_test_task+0x144>)
 800173c:	2204      	movs	r2, #4
 800173e:	f016 fc4d 	bl	8017fdc <write>
				*p = '\0';
				write(fdout, next_line, 3);
				break;
			}
			else if (put_ch[0] == 127 || put_ch[0] == '\b') {
				if (p > cmd[cur_his]) {
 8001742:	e018      	b.n	8001776 <serial_test_task+0x10e>
 8001744:	e017      	b.n	8001776 <serial_test_task+0x10e>
					p--;
					write(fdout, "\b \b", 4);
				}
			}
			else if (p - cmd[cur_his] < CMDBUF_SIZE - 1) {
 8001746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001748:	4b14      	ldr	r3, [pc, #80]	; (800179c <serial_test_task+0x134>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	0199      	lsls	r1, r3, #6
 800174e:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <serial_test_task+0x138>)
 8001750:	440b      	add	r3, r1
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b3e      	cmp	r3, #62	; 0x3e
 8001756:	dc0e      	bgt.n	8001776 <serial_test_task+0x10e>
				*p++ = put_ch[0];
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	1c5a      	adds	r2, r3, #1
 800175c:	627a      	str	r2, [r7, #36]	; 0x24
 800175e:	7f3a      	ldrb	r2, [r7, #28]
 8001760:	701a      	strb	r2, [r3, #0]
				write(fdout, put_ch, 2);
 8001762:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <serial_test_task+0x128>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	f107 031c 	add.w	r3, r7, #28
 800176a:	4610      	mov	r0, r2
 800176c:	4619      	mov	r1, r3
 800176e:	2202      	movs	r2, #2
 8001770:	f016 fc34 	bl	8017fdc <write>
			}
		}
 8001774:	e7a9      	b.n	80016ca <serial_test_task+0x62>
 8001776:	e7a8      	b.n	80016ca <serial_test_task+0x62>
	char *p = NULL;

	fdout = mq_open("/tmp/mqueue/out", 0);
	fdin = open("/dev/tty0/in", 0);

	for (;; cur_his = (cur_his + 1) % HISTORY_COUNT) {
 8001778:	3b01      	subs	r3, #1
 800177a:	f063 0307 	orn	r3, r3, #7
 800177e:	3301      	adds	r3, #1
 8001780:	461a      	mov	r2, r3
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <serial_test_task+0x134>)
 8001784:	601a      	str	r2, [r3, #0]
				*p++ = put_ch[0];
				write(fdout, put_ch, 2);
			}
		}
		check_keyword();	
	}
 8001786:	e791      	b.n	80016ac <serial_test_task+0x44>
 8001788:	0801a46c 	.word	0x0801a46c
 800178c:	0801a438 	.word	0x0801a438
 8001790:	200002e4 	.word	0x200002e4
 8001794:	0801a418 	.word	0x0801a418
 8001798:	200002e8 	.word	0x200002e8
 800179c:	200002e0 	.word	0x200002e0
 80017a0:	200000e0 	.word	0x200000e0
 80017a4:	20000038 	.word	0x20000038
 80017a8:	80000007 	.word	0x80000007
 80017ac:	0801a468 	.word	0x0801a468

080017b0 <cmdtok>:
}

/* Split command into tokens. */
char *cmdtok(char *cmd)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	static char *cur = NULL;
	static char *end = NULL;
	if (cmd) {
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d045      	beq.n	800184a <cmdtok+0x9a>
		char quo = '\0';
 80017be:	2300      	movs	r3, #0
 80017c0:	73fb      	strb	r3, [r7, #15]
		cur = cmd;
 80017c2:	4b35      	ldr	r3, [pc, #212]	; (8001898 <cmdtok+0xe8>)
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	601a      	str	r2, [r3, #0]
		for (end = cmd; *end; end++) {
 80017c8:	4b34      	ldr	r3, [pc, #208]	; (800189c <cmdtok+0xec>)
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	e036      	b.n	800183e <cmdtok+0x8e>
			if (*end == '\'' || *end == '\"') {
 80017d0:	4b32      	ldr	r3, [pc, #200]	; (800189c <cmdtok+0xec>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b27      	cmp	r3, #39	; 0x27
 80017d8:	d004      	beq.n	80017e4 <cmdtok+0x34>
 80017da:	4b30      	ldr	r3, [pc, #192]	; (800189c <cmdtok+0xec>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b22      	cmp	r3, #34	; 0x22
 80017e2:	d114      	bne.n	800180e <cmdtok+0x5e>
				if (quo == *end)
 80017e4:	4b2d      	ldr	r3, [pc, #180]	; (800189c <cmdtok+0xec>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	7bfa      	ldrb	r2, [r7, #15]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d102      	bne.n	80017f6 <cmdtok+0x46>
					quo = '\0';
 80017f0:	2300      	movs	r3, #0
 80017f2:	73fb      	strb	r3, [r7, #15]
 80017f4:	e006      	b.n	8001804 <cmdtok+0x54>
				else if (quo == '\0')
 80017f6:	7bfb      	ldrb	r3, [r7, #15]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d103      	bne.n	8001804 <cmdtok+0x54>
					quo = *end;
 80017fc:	4b27      	ldr	r3, [pc, #156]	; (800189c <cmdtok+0xec>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	73fb      	strb	r3, [r7, #15]
				*end = '\0';
 8001804:	4b25      	ldr	r3, [pc, #148]	; (800189c <cmdtok+0xec>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]
 800180c:	e012      	b.n	8001834 <cmdtok+0x84>
			}
			else if (isspace((int)*end) && !quo)
 800180e:	4b24      	ldr	r3, [pc, #144]	; (80018a0 <cmdtok+0xf0>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	4b22      	ldr	r3, [pc, #136]	; (800189c <cmdtok+0xec>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	3301      	adds	r3, #1
 800181a:	4413      	add	r3, r2
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	f003 0308 	and.w	r3, r3, #8
 8001822:	2b00      	cmp	r3, #0
 8001824:	d006      	beq.n	8001834 <cmdtok+0x84>
 8001826:	7bfb      	ldrb	r3, [r7, #15]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d103      	bne.n	8001834 <cmdtok+0x84>
				*end = '\0';
 800182c:	4b1b      	ldr	r3, [pc, #108]	; (800189c <cmdtok+0xec>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2200      	movs	r2, #0
 8001832:	701a      	strb	r2, [r3, #0]
	static char *cur = NULL;
	static char *end = NULL;
	if (cmd) {
		char quo = '\0';
		cur = cmd;
		for (end = cmd; *end; end++) {
 8001834:	4b19      	ldr	r3, [pc, #100]	; (800189c <cmdtok+0xec>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	1c5a      	adds	r2, r3, #1
 800183a:	4b18      	ldr	r3, [pc, #96]	; (800189c <cmdtok+0xec>)
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	4b17      	ldr	r3, [pc, #92]	; (800189c <cmdtok+0xec>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1c3      	bne.n	80017d0 <cmdtok+0x20>
 8001848:	e00a      	b.n	8001860 <cmdtok+0xb0>
			else if (isspace((int)*end) && !quo)
				*end = '\0';
		}
	}
	else
		for (; *cur; cur++)
 800184a:	e004      	b.n	8001856 <cmdtok+0xa6>
 800184c:	4b12      	ldr	r3, [pc, #72]	; (8001898 <cmdtok+0xe8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	1c5a      	adds	r2, r3, #1
 8001852:	4b11      	ldr	r3, [pc, #68]	; (8001898 <cmdtok+0xe8>)
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	4b10      	ldr	r3, [pc, #64]	; (8001898 <cmdtok+0xe8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1f5      	bne.n	800184c <cmdtok+0x9c>
			;

	for (; *cur == '\0'; cur++)
 8001860:	e00c      	b.n	800187c <cmdtok+0xcc>
		if (cur == end) return NULL;
 8001862:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <cmdtok+0xe8>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	4b0d      	ldr	r3, [pc, #52]	; (800189c <cmdtok+0xec>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	d101      	bne.n	8001872 <cmdtok+0xc2>
 800186e:	2300      	movs	r3, #0
 8001870:	e00b      	b.n	800188a <cmdtok+0xda>
	}
	else
		for (; *cur; cur++)
			;

	for (; *cur == '\0'; cur++)
 8001872:	4b09      	ldr	r3, [pc, #36]	; (8001898 <cmdtok+0xe8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	4b07      	ldr	r3, [pc, #28]	; (8001898 <cmdtok+0xe8>)
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <cmdtok+0xe8>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0ed      	beq.n	8001862 <cmdtok+0xb2>
		if (cur == end) return NULL;
	return cur;
 8001886:	4b04      	ldr	r3, [pc, #16]	; (8001898 <cmdtok+0xe8>)
 8001888:	681b      	ldr	r3, [r3, #0]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	200052fc 	.word	0x200052fc
 800189c:	20005300 	.word	0x20005300
 80018a0:	200000d8 	.word	0x200000d8

080018a4 <check_keyword>:

void check_keyword()
{
 80018a4:	b5b0      	push	{r4, r5, r7, lr}
 80018a6:	b0a6      	sub	sp, #152	; 0x98
 80018a8:	af00      	add	r7, sp, #0
	char *argv[MAX_ARGC + 1] = {NULL};
 80018aa:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80018ae:	2350      	movs	r3, #80	; 0x50
 80018b0:	4610      	mov	r0, r2
 80018b2:	2100      	movs	r1, #0
 80018b4:	461a      	mov	r2, r3
 80018b6:	f016 fe79 	bl	80185ac <memset>
	char cmdstr[CMDBUF_SIZE];
	int argc = 1;
 80018ba:	2301      	movs	r3, #1
 80018bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	int i;

	find_events();
 80018c0:	f000 f892 	bl	80019e8 <find_events>
	fill_arg(cmdstr, cmd[cur_his]);
 80018c4:	4b42      	ldr	r3, [pc, #264]	; (80019d0 <check_keyword+0x12c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	019a      	lsls	r2, r3, #6
 80018ca:	4b42      	ldr	r3, [pc, #264]	; (80019d4 <check_keyword+0x130>)
 80018cc:	4413      	add	r3, r2
 80018ce:	463a      	mov	r2, r7
 80018d0:	4610      	mov	r0, r2
 80018d2:	4619      	mov	r1, r3
 80018d4:	f000 f93a 	bl	8001b4c <fill_arg>
	argv[0] = cmdtok(cmdstr);
 80018d8:	463b      	mov	r3, r7
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff ff68 	bl	80017b0 <cmdtok>
 80018e0:	4603      	mov	r3, r0
 80018e2:	643b      	str	r3, [r7, #64]	; 0x40
	if (!argv[0])
 80018e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d06f      	beq.n	80019ca <check_keyword+0x126>
		return;

	while (1) {
		argv[argc] = cmdtok(NULL);
 80018ea:	2000      	movs	r0, #0
 80018ec:	f7ff ff60 	bl	80017b0 <cmdtok>
 80018f0:	4602      	mov	r2, r0
 80018f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80018fc:	440b      	add	r3, r1
 80018fe:	f843 2c58 	str.w	r2, [r3, #-88]
		if (!argv[argc])
 8001902:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800190c:	4413      	add	r3, r2
 800190e:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d100      	bne.n	8001918 <check_keyword+0x74>
			break;
 8001916:	e00a      	b.n	800192e <check_keyword+0x8a>
		argc++;
 8001918:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800191c:	3301      	adds	r3, #1
 800191e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		if (argc >= MAX_ARGC)
 8001922:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001926:	2b12      	cmp	r3, #18
 8001928:	dd00      	ble.n	800192c <check_keyword+0x88>
			break;
 800192a:	e000      	b.n	800192e <check_keyword+0x8a>
	}
 800192c:	e7dd      	b.n	80018ea <check_keyword+0x46>

	for (i = 0; i < CMD_COUNT; i++) {
 800192e:	2300      	movs	r3, #0
 8001930:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001934:	e025      	b.n	8001982 <check_keyword+0xde>
		if (!strcmp(argv[0], cmd_data[i].cmd)) {
 8001936:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001938:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800193c:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8001940:	fb01 f103 	mul.w	r1, r1, r3
 8001944:	4b24      	ldr	r3, [pc, #144]	; (80019d8 <check_keyword+0x134>)
 8001946:	440b      	add	r3, r1
 8001948:	4610      	mov	r0, r2
 800194a:	4619      	mov	r1, r3
 800194c:	f003 fa26 	bl	8004d9c <strcmp>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d110      	bne.n	8001978 <check_keyword+0xd4>
			cmd_data[i].func(argc, argv);
 8001956:	4a20      	ldr	r2, [pc, #128]	; (80019d8 <check_keyword+0x134>)
 8001958:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800195c:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8001960:	fb01 f303 	mul.w	r3, r1, r3
 8001964:	4413      	add	r3, r2
 8001966:	3314      	adds	r3, #20
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800196e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8001972:	4611      	mov	r1, r2
 8001974:	4798      	blx	r3
			break;
 8001976:	e008      	b.n	800198a <check_keyword+0xe6>
		argc++;
		if (argc >= MAX_ARGC)
			break;
	}

	for (i = 0; i < CMD_COUNT; i++) {
 8001978:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800197c:	3301      	adds	r3, #1
 800197e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001982:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001986:	2b06      	cmp	r3, #6
 8001988:	ddd5      	ble.n	8001936 <check_keyword+0x92>
		if (!strcmp(argv[0], cmd_data[i].cmd)) {
			cmd_data[i].func(argc, argv);
			break;
		}
	}
	if (i == CMD_COUNT) {
 800198a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800198e:	2b07      	cmp	r3, #7
 8001990:	d11b      	bne.n	80019ca <check_keyword+0x126>
		write(fdout, argv[0], strlen(argv[0]) + 1);
 8001992:	4b12      	ldr	r3, [pc, #72]	; (80019dc <check_keyword+0x138>)
 8001994:	681d      	ldr	r5, [r3, #0]
 8001996:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8001998:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800199a:	4618      	mov	r0, r3
 800199c:	f003 fa38 	bl	8004e10 <strlen>
 80019a0:	4603      	mov	r3, r0
 80019a2:	3301      	adds	r3, #1
 80019a4:	4628      	mov	r0, r5
 80019a6:	4621      	mov	r1, r4
 80019a8:	461a      	mov	r2, r3
 80019aa:	f016 fb17 	bl	8017fdc <write>
		write(fdout, ": command not found", 20);
 80019ae:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <check_keyword+0x138>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	490a      	ldr	r1, [pc, #40]	; (80019e0 <check_keyword+0x13c>)
 80019b6:	2214      	movs	r2, #20
 80019b8:	f016 fb10 	bl	8017fdc <write>
		write(fdout, next_line, 3);
 80019bc:	4b07      	ldr	r3, [pc, #28]	; (80019dc <check_keyword+0x138>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	4908      	ldr	r1, [pc, #32]	; (80019e4 <check_keyword+0x140>)
 80019c4:	2203      	movs	r2, #3
 80019c6:	f016 fb09 	bl	8017fdc <write>
	}
}
 80019ca:	3798      	adds	r7, #152	; 0x98
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bdb0      	pop	{r4, r5, r7, pc}
 80019d0:	200002e0 	.word	0x200002e0
 80019d4:	200000e0 	.word	0x200000e0
 80019d8:	08018760 	.word	0x08018760
 80019dc:	200002e4 	.word	0x200002e4
 80019e0:	0801a488 	.word	0x0801a488
 80019e4:	20000038 	.word	0x20000038

080019e8 <find_events>:

void find_events()
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b094      	sub	sp, #80	; 0x50
 80019ec:	af00      	add	r7, sp, #0
	char buf[CMDBUF_SIZE];
	char *p = cmd[cur_his];
 80019ee:	4b3b      	ldr	r3, [pc, #236]	; (8001adc <find_events+0xf4>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	019a      	lsls	r2, r3, #6
 80019f4:	4b3a      	ldr	r3, [pc, #232]	; (8001ae0 <find_events+0xf8>)
 80019f6:	4413      	add	r3, r2
 80019f8:	64fb      	str	r3, [r7, #76]	; 0x4c
	char *q;
	int i;

	for (; *p; p++) {
 80019fa:	e067      	b.n	8001acc <find_events+0xe4>
		if (*p == '!') {
 80019fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b21      	cmp	r3, #33	; 0x21
 8001a02:	d160      	bne.n	8001ac6 <find_events+0xde>
			q = p;
 8001a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a06:	64bb      	str	r3, [r7, #72]	; 0x48
			while (*q && !isspace((int)*q))
 8001a08:	e002      	b.n	8001a10 <find_events+0x28>
				q++;
 8001a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	64bb      	str	r3, [r7, #72]	; 0x48
	int i;

	for (; *p; p++) {
		if (*p == '!') {
			q = p;
			while (*q && !isspace((int)*q))
 8001a10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d00a      	beq.n	8001a2e <find_events+0x46>
 8001a18:	4b32      	ldr	r3, [pc, #200]	; (8001ae4 <find_events+0xfc>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	3301      	adds	r3, #1
 8001a22:	4413      	add	r3, r2
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	f003 0308 	and.w	r3, r3, #8
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d0ed      	beq.n	8001a0a <find_events+0x22>
				q++;
			for (i = cur_his + HISTORY_COUNT - 1; i > cur_his; i--) {
 8001a2e:	4b2b      	ldr	r3, [pc, #172]	; (8001adc <find_events+0xf4>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	3307      	adds	r3, #7
 8001a34:	647b      	str	r3, [r7, #68]	; 0x44
 8001a36:	e041      	b.n	8001abc <find_events+0xd4>
				if (!strncmp(cmd[i % HISTORY_COUNT], p + 1, q - p - 1)) {
 8001a38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001a3a:	4b2b      	ldr	r3, [pc, #172]	; (8001ae8 <find_events+0x100>)
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	da03      	bge.n	8001a4a <find_events+0x62>
 8001a42:	3b01      	subs	r3, #1
 8001a44:	f063 0307 	orn	r3, r3, #7
 8001a48:	3301      	adds	r3, #1
 8001a4a:	019a      	lsls	r2, r3, #6
 8001a4c:	4b24      	ldr	r3, [pc, #144]	; (8001ae0 <find_events+0xf8>)
 8001a4e:	18d1      	adds	r1, r2, r3
 8001a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a52:	1c5a      	adds	r2, r3, #1
 8001a54:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a58:	1ac3      	subs	r3, r0, r3
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	4608      	mov	r0, r1
 8001a5e:	4611      	mov	r1, r2
 8001a60:	461a      	mov	r2, r3
 8001a62:	f003 f9a9 	bl	8004db8 <strncmp>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d124      	bne.n	8001ab6 <find_events+0xce>
					strcpy(buf, q);
 8001a6c:	1d3b      	adds	r3, r7, #4
 8001a6e:	4618      	mov	r0, r3
 8001a70:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001a72:	f016 fe0b 	bl	801868c <strcpy>
					strcpy(p, cmd[i % HISTORY_COUNT]);
 8001a76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001a78:	4b1b      	ldr	r3, [pc, #108]	; (8001ae8 <find_events+0x100>)
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	da03      	bge.n	8001a88 <find_events+0xa0>
 8001a80:	3b01      	subs	r3, #1
 8001a82:	f063 0307 	orn	r3, r3, #7
 8001a86:	3301      	adds	r3, #1
 8001a88:	019a      	lsls	r2, r3, #6
 8001a8a:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <find_events+0xf8>)
 8001a8c:	4413      	add	r3, r2
 8001a8e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001a90:	4619      	mov	r1, r3
 8001a92:	f016 fdfb 	bl	801868c <strcpy>
					p += strlen(p);
 8001a96:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001a98:	f003 f9ba 	bl	8004e10 <strlen>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001aa0:	4413      	add	r3, r2
 8001aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
					strcpy(p--, buf);
 8001aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001aa6:	1e5a      	subs	r2, r3, #1
 8001aa8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001aaa:	1d3a      	adds	r2, r7, #4
 8001aac:	4618      	mov	r0, r3
 8001aae:	4611      	mov	r1, r2
 8001ab0:	f016 fdec 	bl	801868c <strcpy>
					break;
 8001ab4:	e007      	b.n	8001ac6 <find_events+0xde>
	for (; *p; p++) {
		if (*p == '!') {
			q = p;
			while (*q && !isspace((int)*q))
				q++;
			for (i = cur_his + HISTORY_COUNT - 1; i > cur_his; i--) {
 8001ab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	647b      	str	r3, [r7, #68]	; 0x44
 8001abc:	4b07      	ldr	r3, [pc, #28]	; (8001adc <find_events+0xf4>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	dcb8      	bgt.n	8001a38 <find_events+0x50>
	char buf[CMDBUF_SIZE];
	char *p = cmd[cur_his];
	char *q;
	int i;

	for (; *p; p++) {
 8001ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ac8:	3301      	adds	r3, #1
 8001aca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d193      	bne.n	80019fc <find_events+0x14>
					break;
				}
			}
		}
	}
}
 8001ad4:	3750      	adds	r7, #80	; 0x50
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	200002e0 	.word	0x200002e0
 8001ae0:	200000e0 	.word	0x200000e0
 8001ae4:	200000d8 	.word	0x200000d8
 8001ae8:	80000007 	.word	0x80000007

08001aec <find_envvar>:

char *find_envvar(const char *name)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
	int i;

	for (i = 0; i < env_count; i++) {
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	e01a      	b.n	8001b30 <find_envvar+0x44>
		if (!strcmp(env_var[i].name, name))
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	4613      	mov	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	011b      	lsls	r3, r3, #4
 8001b04:	4a0f      	ldr	r2, [pc, #60]	; (8001b44 <find_envvar+0x58>)
 8001b06:	4413      	add	r3, r2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	f003 f946 	bl	8004d9c <strcmp>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d109      	bne.n	8001b2a <find_envvar+0x3e>
			return env_var[i].value;
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	011b      	lsls	r3, r3, #4
 8001b20:	f103 0210 	add.w	r2, r3, #16
 8001b24:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <find_envvar+0x58>)
 8001b26:	4413      	add	r3, r2
 8001b28:	e008      	b.n	8001b3c <find_envvar+0x50>

char *find_envvar(const char *name)
{
	int i;

	for (i = 0; i < env_count; i++) {
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <find_envvar+0x5c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	dbdf      	blt.n	8001afa <find_envvar+0xe>
		if (!strcmp(env_var[i].name, name))
			return env_var[i].value;
	}

	return NULL;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	200002f0 	.word	0x200002f0
 8001b48:	200007f0 	.word	0x200007f0

08001b4c <fill_arg>:

/* Fill in entire value of argument. */
int fill_arg(char *const dest, const char *argv)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b088      	sub	sp, #32
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
	char env_name[MAX_ENVNAME + 1];
	char *buf = dest;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	61fb      	str	r3, [r7, #28]
	char *p = NULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61bb      	str	r3, [r7, #24]

	for (; *argv; argv++) {
 8001b5e:	e04c      	b.n	8001bfa <fill_arg+0xae>
		if (isalnum((int)*argv) || *argv == '_') {
 8001b60:	4b3a      	ldr	r3, [pc, #232]	; (8001c4c <fill_arg+0x100>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	4413      	add	r3, r2
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d103      	bne.n	8001b7e <fill_arg+0x32>
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b5f      	cmp	r3, #95	; 0x5f
 8001b7c:	d110      	bne.n	8001ba0 <fill_arg+0x54>
			if (p)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d006      	beq.n	8001b92 <fill_arg+0x46>
				*p++ = *argv;
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	1c5a      	adds	r2, r3, #1
 8001b88:	61ba      	str	r2, [r7, #24]
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	7812      	ldrb	r2, [r2, #0]
 8001b8e:	701a      	strb	r2, [r3, #0]
	char *buf = dest;
	char *p = NULL;

	for (; *argv; argv++) {
		if (isalnum((int)*argv) || *argv == '_') {
			if (p)
 8001b90:	e030      	b.n	8001bf4 <fill_arg+0xa8>
				*p++ = *argv;
			else
				*buf++ = *argv;
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	1c5a      	adds	r2, r3, #1
 8001b96:	61fa      	str	r2, [r7, #28]
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	7812      	ldrb	r2, [r2, #0]
 8001b9c:	701a      	strb	r2, [r3, #0]
	char *buf = dest;
	char *p = NULL;

	for (; *argv; argv++) {
		if (isalnum((int)*argv) || *argv == '_') {
			if (p)
 8001b9e:	e029      	b.n	8001bf4 <fill_arg+0xa8>
				*p++ = *argv;
			else
				*buf++ = *argv;
		}
		else { /* Symbols. */
			if (p) {
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d018      	beq.n	8001bd8 <fill_arg+0x8c>
				*p = '\0';
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	701a      	strb	r2, [r3, #0]
				p = find_envvar(env_name);
 8001bac:	f107 0308 	add.w	r3, r7, #8
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff9b 	bl	8001aec <find_envvar>
 8001bb6:	61b8      	str	r0, [r7, #24]
				if (p) {
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00c      	beq.n	8001bd8 <fill_arg+0x8c>
					strcpy(buf, p);
 8001bbe:	69f8      	ldr	r0, [r7, #28]
 8001bc0:	69b9      	ldr	r1, [r7, #24]
 8001bc2:	f016 fd63 	bl	801868c <strcpy>
					buf += strlen(p);
 8001bc6:	69b8      	ldr	r0, [r7, #24]
 8001bc8:	f003 f922 	bl	8004e10 <strlen>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	69fa      	ldr	r2, [r7, #28]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	61fb      	str	r3, [r7, #28]
					p = NULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	61bb      	str	r3, [r7, #24]
				}
			}
			if (*argv == '$')
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b24      	cmp	r3, #36	; 0x24
 8001bde:	d103      	bne.n	8001be8 <fill_arg+0x9c>
				p = env_name;
 8001be0:	f107 0308 	add.w	r3, r7, #8
 8001be4:	61bb      	str	r3, [r7, #24]
 8001be6:	e005      	b.n	8001bf4 <fill_arg+0xa8>
			else
				*buf++ = *argv;
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	1c5a      	adds	r2, r3, #1
 8001bec:	61fa      	str	r2, [r7, #28]
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	7812      	ldrb	r2, [r2, #0]
 8001bf2:	701a      	strb	r2, [r3, #0]
{
	char env_name[MAX_ENVNAME + 1];
	char *buf = dest;
	char *p = NULL;

	for (; *argv; argv++) {
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	603b      	str	r3, [r7, #0]
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1ae      	bne.n	8001b60 <fill_arg+0x14>
				p = env_name;
			else
				*buf++ = *argv;
		}
	}
	if (p) {
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d016      	beq.n	8001c36 <fill_arg+0xea>
		*p = '\0';
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	701a      	strb	r2, [r3, #0]
		p = find_envvar(env_name);
 8001c0e:	f107 0308 	add.w	r3, r7, #8
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff ff6a 	bl	8001aec <find_envvar>
 8001c18:	61b8      	str	r0, [r7, #24]
		if (p) {
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d00a      	beq.n	8001c36 <fill_arg+0xea>
			strcpy(buf, p);
 8001c20:	69f8      	ldr	r0, [r7, #28]
 8001c22:	69b9      	ldr	r1, [r7, #24]
 8001c24:	f016 fd32 	bl	801868c <strcpy>
			buf += strlen(p);
 8001c28:	69b8      	ldr	r0, [r7, #24]
 8001c2a:	f003 f8f1 	bl	8004e10 <strlen>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	69fa      	ldr	r2, [r7, #28]
 8001c32:	4413      	add	r3, r2
 8001c34:	61fb      	str	r3, [r7, #28]
		}
	}
	*buf = '\0';
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	701a      	strb	r2, [r3, #0]

	return buf - dest;
 8001c3c:	69fa      	ldr	r2, [r7, #28]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	1ad3      	subs	r3, r2, r3
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3720      	adds	r7, #32
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	200000d8 	.word	0x200000d8

08001c50 <export_envvar>:

//export
void export_envvar(int argc, char *argv[])
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
	char *found;
	char *value;
	int i;

	for (i = 1; i < argc; i++) {
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	613b      	str	r3, [r7, #16]
 8001c5e:	e056      	b.n	8001d0e <export_envvar+0xbe>
		value = argv[i];
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	4413      	add	r3, r2
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	617b      	str	r3, [r7, #20]
		while (*value && *value != '=')
 8001c6c:	e002      	b.n	8001c74 <export_envvar+0x24>
			value++;
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	3301      	adds	r3, #1
 8001c72:	617b      	str	r3, [r7, #20]
	char *value;
	int i;

	for (i = 1; i < argc; i++) {
		value = argv[i];
		while (*value && *value != '=')
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <export_envvar+0x34>
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b3d      	cmp	r3, #61	; 0x3d
 8001c82:	d1f4      	bne.n	8001c6e <export_envvar+0x1e>
			value++;
		if (*value)
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d004      	beq.n	8001c96 <export_envvar+0x46>
			*value++ = '\0';
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	1c5a      	adds	r2, r3, #1
 8001c90:	617a      	str	r2, [r7, #20]
 8001c92:	2200      	movs	r2, #0
 8001c94:	701a      	strb	r2, [r3, #0]
		found = find_envvar(argv[i]);
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ff23 	bl	8001aec <find_envvar>
 8001ca6:	60f8      	str	r0, [r7, #12]
		if (found)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d004      	beq.n	8001cb8 <export_envvar+0x68>
			strcpy(found, value);
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	6979      	ldr	r1, [r7, #20]
 8001cb2:	f016 fceb 	bl	801868c <strcpy>
 8001cb6:	e027      	b.n	8001d08 <export_envvar+0xb8>
		else if (env_count < MAX_ENVCOUNT) {
 8001cb8:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <export_envvar+0xcc>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2b0f      	cmp	r3, #15
 8001cbe:	dc23      	bgt.n	8001d08 <export_envvar+0xb8>
			strcpy(env_var[env_count].name, argv[i]);
 8001cc0:	4b16      	ldr	r3, [pc, #88]	; (8001d1c <export_envvar+0xcc>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	011b      	lsls	r3, r3, #4
 8001ccc:	4a14      	ldr	r2, [pc, #80]	; (8001d20 <export_envvar+0xd0>)
 8001cce:	441a      	add	r2, r3
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	6839      	ldr	r1, [r7, #0]
 8001cd6:	440b      	add	r3, r1
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4610      	mov	r0, r2
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f016 fcd5 	bl	801868c <strcpy>
			strcpy(env_var[env_count].value, value);
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <export_envvar+0xcc>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4413      	add	r3, r2
 8001cec:	011b      	lsls	r3, r3, #4
 8001cee:	f103 0210 	add.w	r2, r3, #16
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <export_envvar+0xd0>)
 8001cf4:	4413      	add	r3, r2
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	6979      	ldr	r1, [r7, #20]
 8001cfa:	f016 fcc7 	bl	801868c <strcpy>
			env_count++;
 8001cfe:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <export_envvar+0xcc>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	1c5a      	adds	r2, r3, #1
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <export_envvar+0xcc>)
 8001d06:	601a      	str	r2, [r3, #0]
{
	char *found;
	char *value;
	int i;

	for (i = 1; i < argc; i++) {
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	613b      	str	r3, [r7, #16]
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	dba4      	blt.n	8001c60 <export_envvar+0x10>
			strcpy(env_var[env_count].name, argv[i]);
			strcpy(env_var[env_count].value, value);
			env_count++;
		}
	}
}
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	200007f0 	.word	0x200007f0
 8001d20:	200002f0 	.word	0x200002f0

08001d24 <show_task_info>:

//ps
void show_task_info(int argc, char* argv[])
{
 8001d24:	b5b0      	push	{r4, r5, r7, lr}
 8001d26:	b08c      	sub	sp, #48	; 0x30
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
	char ps_message[]="PID STATUS PRIORITY";
 8001d2e:	4b3f      	ldr	r3, [pc, #252]	; (8001e2c <show_task_info+0x108>)
 8001d30:	f107 0414 	add.w	r4, r7, #20
 8001d34:	461d      	mov	r5, r3
 8001d36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d3a:	682b      	ldr	r3, [r5, #0]
 8001d3c:	6023      	str	r3, [r4, #0]
	int ps_message_length = sizeof(ps_message);
 8001d3e:	2314      	movs	r3, #20
 8001d40:	62bb      	str	r3, [r7, #40]	; 0x28
	int task_i;

	write(fdout, &ps_message , ps_message_length);
 8001d42:	4b3b      	ldr	r3, [pc, #236]	; (8001e30 <show_task_info+0x10c>)
 8001d44:	6819      	ldr	r1, [r3, #0]
 8001d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d48:	f107 0214 	add.w	r2, r7, #20
 8001d4c:	4608      	mov	r0, r1
 8001d4e:	4611      	mov	r1, r2
 8001d50:	461a      	mov	r2, r3
 8001d52:	f016 f943 	bl	8017fdc <write>
	write(fdout, &next_line , 3);
 8001d56:	4b36      	ldr	r3, [pc, #216]	; (8001e30 <show_task_info+0x10c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	4935      	ldr	r1, [pc, #212]	; (8001e34 <show_task_info+0x110>)
 8001d5e:	2203      	movs	r2, #3
 8001d60:	f016 f93c 	bl	8017fdc <write>

	for (task_i = 0; task_i < task_count; task_i++) {
 8001d64:	2300      	movs	r3, #0
 8001d66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d68:	e058      	b.n	8001e1c <show_task_info+0xf8>
		char task_info_pid[2];
		char task_info_status[2];
		char task_info_priority[3];

		task_info_pid[0]='0'+tasks[task_i].pid;
 8001d6a:	4933      	ldr	r1, [pc, #204]	; (8001e38 <show_task_info+0x114>)
 8001d6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d6e:	4613      	mov	r3, r2
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	4413      	add	r3, r2
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	440b      	add	r3, r1
 8001d78:	3304      	adds	r3, #4
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	3330      	adds	r3, #48	; 0x30
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	743b      	strb	r3, [r7, #16]
		task_info_pid[1]='\0';
 8001d84:	2300      	movs	r3, #0
 8001d86:	747b      	strb	r3, [r7, #17]
		task_info_status[0]='0'+tasks[task_i].status;
 8001d88:	492b      	ldr	r1, [pc, #172]	; (8001e38 <show_task_info+0x114>)
 8001d8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4413      	add	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	440b      	add	r3, r1
 8001d96:	3308      	adds	r3, #8
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	3330      	adds	r3, #48	; 0x30
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	733b      	strb	r3, [r7, #12]
		task_info_status[1]='\0';			
 8001da2:	2300      	movs	r3, #0
 8001da4:	737b      	strb	r3, [r7, #13]

		itoa(tasks[task_i].priority, task_info_priority, 10);
 8001da6:	4924      	ldr	r1, [pc, #144]	; (8001e38 <show_task_info+0x114>)
 8001da8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001daa:	4613      	mov	r3, r2
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	4413      	add	r3, r2
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	440b      	add	r3, r1
 8001db4:	330c      	adds	r3, #12
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	f107 0308 	add.w	r3, r7, #8
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	220a      	movs	r2, #10
 8001dc2:	f000 f83d 	bl	8001e40 <itoa>

		write(fdout, &task_info_pid , 2);
 8001dc6:	4b1a      	ldr	r3, [pc, #104]	; (8001e30 <show_task_info+0x10c>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	f107 0310 	add.w	r3, r7, #16
 8001dce:	4610      	mov	r0, r2
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	f016 f902 	bl	8017fdc <write>
		write_blank(3);
 8001dd8:	2003      	movs	r0, #3
 8001dda:	f000 fa55 	bl	8002288 <write_blank>
			write(fdout, &task_info_status , 2);
 8001dde:	4b14      	ldr	r3, [pc, #80]	; (8001e30 <show_task_info+0x10c>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	f107 030c 	add.w	r3, r7, #12
 8001de6:	4610      	mov	r0, r2
 8001de8:	4619      	mov	r1, r3
 8001dea:	2202      	movs	r2, #2
 8001dec:	f016 f8f6 	bl	8017fdc <write>
		write_blank(5);
 8001df0:	2005      	movs	r0, #5
 8001df2:	f000 fa49 	bl	8002288 <write_blank>
		write(fdout, &task_info_priority , 3);
 8001df6:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <show_task_info+0x10c>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	f107 0308 	add.w	r3, r7, #8
 8001dfe:	4610      	mov	r0, r2
 8001e00:	4619      	mov	r1, r3
 8001e02:	2203      	movs	r2, #3
 8001e04:	f016 f8ea 	bl	8017fdc <write>

		write(fdout, &next_line , 3);
 8001e08:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <show_task_info+0x10c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	4909      	ldr	r1, [pc, #36]	; (8001e34 <show_task_info+0x110>)
 8001e10:	2203      	movs	r2, #3
 8001e12:	f016 f8e3 	bl	8017fdc <write>
	int task_i;

	write(fdout, &ps_message , ps_message_length);
	write(fdout, &next_line , 3);

	for (task_i = 0; task_i < task_count; task_i++) {
 8001e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e18:	3301      	adds	r3, #1
 8001e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e1e:	4b07      	ldr	r3, [pc, #28]	; (8001e3c <show_task_info+0x118>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d3a1      	bcc.n	8001d6a <show_task_info+0x46>
		write_blank(5);
		write(fdout, &task_info_priority , 3);

		write(fdout, &next_line , 3);
	}
}
 8001e26:	3730      	adds	r7, #48	; 0x30
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bdb0      	pop	{r4, r5, r7, pc}
 8001e2c:	0801a49c 	.word	0x0801a49c
 8001e30:	200002e4 	.word	0x200002e4
 8001e34:	20000038 	.word	0x20000038
 8001e38:	200007f4 	.word	0x200007f4
 8001e3c:	200000dc 	.word	0x200000dc

08001e40 <itoa>:

//this function helps to show int

void itoa(int n, char *dst, int base)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b090      	sub	sp, #64	; 0x40
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
	char buf[33] = {0};
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	3304      	adds	r3, #4
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	3304      	adds	r3, #4
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	3304      	adds	r3, #4
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	3304      	adds	r3, #4
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	3304      	adds	r3, #4
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	3304      	adds	r3, #4
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	3304      	adds	r3, #4
 8001e80:	2200      	movs	r2, #0
 8001e82:	701a      	strb	r2, [r3, #0]
 8001e84:	3301      	adds	r3, #1
	char *p = &buf[32];
 8001e86:	f107 0314 	add.w	r3, r7, #20
 8001e8a:	3320      	adds	r3, #32
 8001e8c:	63fb      	str	r3, [r7, #60]	; 0x3c

	if (n == 0)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d106      	bne.n	8001ea2 <itoa+0x62>
		*--p = '0';
 8001e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e96:	3b01      	subs	r3, #1
 8001e98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e9c:	2230      	movs	r2, #48	; 0x30
 8001e9e:	701a      	strb	r2, [r3, #0]
 8001ea0:	e024      	b.n	8001eec <itoa+0xac>
	else {
		unsigned int num = (base == 10 && num < 0) ? -n : n;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	63bb      	str	r3, [r7, #56]	; 0x38

		for (; num; num/=base)
 8001ea6:	e012      	b.n	8001ece <itoa+0x8e>
			*--p = "0123456789ABCDEF" [num % base];
 8001ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eb2:	fbb3 f1f2 	udiv	r1, r3, r2
 8001eb6:	fb02 f201 	mul.w	r2, r2, r1
 8001eba:	1a9b      	subs	r3, r3, r2
 8001ebc:	4a0f      	ldr	r2, [pc, #60]	; (8001efc <itoa+0xbc>)
 8001ebe:	5cd2      	ldrb	r2, [r2, r3]
 8001ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ec2:	701a      	strb	r2, [r3, #0]
	if (n == 0)
		*--p = '0';
	else {
		unsigned int num = (base == 10 && num < 0) ? -n : n;

		for (; num; num/=base)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ecc:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1e9      	bne.n	8001ea8 <itoa+0x68>
			*--p = "0123456789ABCDEF" [num % base];
		if (base == 10 && n < 0)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b0a      	cmp	r3, #10
 8001ed8:	d108      	bne.n	8001eec <itoa+0xac>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	da05      	bge.n	8001eec <itoa+0xac>
			*--p = '-';
 8001ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ee8:	222d      	movs	r2, #45	; 0x2d
 8001eea:	701a      	strb	r2, [r3, #0]
	}

	strcpy(dst, p);
 8001eec:	68b8      	ldr	r0, [r7, #8]
 8001eee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001ef0:	f016 fbcc 	bl	801868c <strcpy>
}
 8001ef4:	3740      	adds	r7, #64	; 0x40
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	0801a4b0 	.word	0x0801a4b0

08001f00 <show_cmd_info>:

//help

void show_cmd_info(int argc, char* argv[])
{
 8001f00:	b5b0      	push	{r4, r5, r7, lr}
 8001f02:	b08e      	sub	sp, #56	; 0x38
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
	const char help_desp[] = "This system has commands as follow\n\r\0";
 8001f0a:	4b34      	ldr	r3, [pc, #208]	; (8001fdc <show_cmd_info+0xdc>)
 8001f0c:	f107 040c 	add.w	r4, r7, #12
 8001f10:	461d      	mov	r5, r3
 8001f12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f1a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001f1e:	6020      	str	r0, [r4, #0]
 8001f20:	3404      	adds	r4, #4
 8001f22:	8021      	strh	r1, [r4, #0]
	int i;

	write(fdout, &help_desp, sizeof(help_desp));
 8001f24:	4b2e      	ldr	r3, [pc, #184]	; (8001fe0 <show_cmd_info+0xe0>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	f107 030c 	add.w	r3, r7, #12
 8001f2c:	4610      	mov	r0, r2
 8001f2e:	4619      	mov	r1, r3
 8001f30:	2226      	movs	r2, #38	; 0x26
 8001f32:	f016 f853 	bl	8017fdc <write>
	for (i = 0; i < CMD_COUNT; i++) {
 8001f36:	2300      	movs	r3, #0
 8001f38:	637b      	str	r3, [r7, #52]	; 0x34
 8001f3a:	e048      	b.n	8001fce <show_cmd_info+0xce>
		write(fdout, cmd_data[i].cmd, strlen(cmd_data[i].cmd) + 1);
 8001f3c:	4b28      	ldr	r3, [pc, #160]	; (8001fe0 <show_cmd_info+0xe0>)
 8001f3e:	681d      	ldr	r5, [r3, #0]
 8001f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f42:	f44f 6283 	mov.w	r2, #1048	; 0x418
 8001f46:	fb02 f203 	mul.w	r2, r2, r3
 8001f4a:	4b26      	ldr	r3, [pc, #152]	; (8001fe4 <show_cmd_info+0xe4>)
 8001f4c:	18d4      	adds	r4, r2, r3
 8001f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f50:	f44f 6283 	mov.w	r2, #1048	; 0x418
 8001f54:	fb02 f203 	mul.w	r2, r2, r3
 8001f58:	4b22      	ldr	r3, [pc, #136]	; (8001fe4 <show_cmd_info+0xe4>)
 8001f5a:	4413      	add	r3, r2
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f002 ff57 	bl	8004e10 <strlen>
 8001f62:	4603      	mov	r3, r0
 8001f64:	3301      	adds	r3, #1
 8001f66:	4628      	mov	r0, r5
 8001f68:	4621      	mov	r1, r4
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	f016 f836 	bl	8017fdc <write>
		write(fdout, ": ", 3);
 8001f70:	4b1b      	ldr	r3, [pc, #108]	; (8001fe0 <show_cmd_info+0xe0>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	491c      	ldr	r1, [pc, #112]	; (8001fe8 <show_cmd_info+0xe8>)
 8001f78:	2203      	movs	r2, #3
 8001f7a:	f016 f82f 	bl	8017fdc <write>
		write(fdout, cmd_data[i].description, strlen(cmd_data[i].description) + 1);
 8001f7e:	4b18      	ldr	r3, [pc, #96]	; (8001fe0 <show_cmd_info+0xe0>)
 8001f80:	681d      	ldr	r5, [r3, #0]
 8001f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f84:	f44f 6283 	mov.w	r2, #1048	; 0x418
 8001f88:	fb02 f303 	mul.w	r3, r2, r3
 8001f8c:	f103 0218 	add.w	r2, r3, #24
 8001f90:	4b14      	ldr	r3, [pc, #80]	; (8001fe4 <show_cmd_info+0xe4>)
 8001f92:	18d4      	adds	r4, r2, r3
 8001f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f96:	f44f 6283 	mov.w	r2, #1048	; 0x418
 8001f9a:	fb02 f303 	mul.w	r3, r2, r3
 8001f9e:	f103 0218 	add.w	r2, r3, #24
 8001fa2:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <show_cmd_info+0xe4>)
 8001fa4:	4413      	add	r3, r2
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f002 ff32 	bl	8004e10 <strlen>
 8001fac:	4603      	mov	r3, r0
 8001fae:	3301      	adds	r3, #1
 8001fb0:	4628      	mov	r0, r5
 8001fb2:	4621      	mov	r1, r4
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	f016 f811 	bl	8017fdc <write>
		write(fdout, next_line, 3);
 8001fba:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <show_cmd_info+0xe0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	490a      	ldr	r1, [pc, #40]	; (8001fec <show_cmd_info+0xec>)
 8001fc2:	2203      	movs	r2, #3
 8001fc4:	f016 f80a 	bl	8017fdc <write>
{
	const char help_desp[] = "This system has commands as follow\n\r\0";
	int i;

	write(fdout, &help_desp, sizeof(help_desp));
	for (i = 0; i < CMD_COUNT; i++) {
 8001fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fca:	3301      	adds	r3, #1
 8001fcc:	637b      	str	r3, [r7, #52]	; 0x34
 8001fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fd0:	2b06      	cmp	r3, #6
 8001fd2:	ddb3      	ble.n	8001f3c <show_cmd_info+0x3c>
		write(fdout, cmd_data[i].cmd, strlen(cmd_data[i].cmd) + 1);
		write(fdout, ": ", 3);
		write(fdout, cmd_data[i].description, strlen(cmd_data[i].description) + 1);
		write(fdout, next_line, 3);
	}
}
 8001fd4:	3738      	adds	r7, #56	; 0x38
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bdb0      	pop	{r4, r5, r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	0801a4c8 	.word	0x0801a4c8
 8001fe0:	200002e4 	.word	0x200002e4
 8001fe4:	08018760 	.word	0x08018760
 8001fe8:	0801a4c4 	.word	0x0801a4c4
 8001fec:	20000038 	.word	0x20000038

08001ff0 <show_echo>:

//echo
void show_echo(int argc, char* argv[])
{
 8001ff0:	b5b0      	push	{r4, r5, r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
	const int _n = 1; /* Flag for "-n" option. */
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	60fb      	str	r3, [r7, #12]
	int flag = 0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	617b      	str	r3, [r7, #20]
	int i;

	for (i = 1; i < argc; i++) {
 8002002:	2301      	movs	r3, #1
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	e014      	b.n	8002032 <show_echo+0x42>
		if (!strcmp(argv[i], "-n"))
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	4413      	add	r3, r2
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	4926      	ldr	r1, [pc, #152]	; (80020b0 <show_echo+0xc0>)
 8002016:	f002 fec1 	bl	8004d9c <strcmp>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d107      	bne.n	8002030 <show_echo+0x40>
			flag |= _n;
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	4313      	orrs	r3, r2
 8002026:	617b      	str	r3, [r7, #20]
{
	const int _n = 1; /* Flag for "-n" option. */
	int flag = 0;
	int i;

	for (i = 1; i < argc; i++) {
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	3301      	adds	r3, #1
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	e000      	b.n	8002032 <show_echo+0x42>
		if (!strcmp(argv[i], "-n"))
			flag |= _n;
		else
			break;
 8002030:	e003      	b.n	800203a <show_echo+0x4a>
{
	const int _n = 1; /* Flag for "-n" option. */
	int flag = 0;
	int i;

	for (i = 1; i < argc; i++) {
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	429a      	cmp	r2, r3
 8002038:	dbe6      	blt.n	8002008 <show_echo+0x18>
			flag |= _n;
		else
			break;
	}

	for (; i < argc; i++) {
 800203a:	e024      	b.n	8002086 <show_echo+0x96>
		write(fdout, argv[i], strlen(argv[i]) + 1);
 800203c:	4b1d      	ldr	r3, [pc, #116]	; (80020b4 <show_echo+0xc4>)
 800203e:	681d      	ldr	r5, [r3, #0]
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	4413      	add	r3, r2
 8002048:	681c      	ldr	r4, [r3, #0]
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	4413      	add	r3, r2
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f002 fedb 	bl	8004e10 <strlen>
 800205a:	4603      	mov	r3, r0
 800205c:	3301      	adds	r3, #1
 800205e:	4628      	mov	r0, r5
 8002060:	4621      	mov	r1, r4
 8002062:	461a      	mov	r2, r3
 8002064:	f015 ffba 	bl	8017fdc <write>
		if (i < argc - 1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	1e5a      	subs	r2, r3, #1
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	429a      	cmp	r2, r3
 8002070:	dd06      	ble.n	8002080 <show_echo+0x90>
			write(fdout, " ", 2);
 8002072:	4b10      	ldr	r3, [pc, #64]	; (80020b4 <show_echo+0xc4>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	490f      	ldr	r1, [pc, #60]	; (80020b8 <show_echo+0xc8>)
 800207a:	2202      	movs	r2, #2
 800207c:	f015 ffae 	bl	8017fdc <write>
			flag |= _n;
		else
			break;
	}

	for (; i < argc; i++) {
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	3301      	adds	r3, #1
 8002084:	613b      	str	r3, [r7, #16]
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	429a      	cmp	r2, r3
 800208c:	dbd6      	blt.n	800203c <show_echo+0x4c>
		write(fdout, argv[i], strlen(argv[i]) + 1);
		if (i < argc - 1)
			write(fdout, " ", 2);
	}

	if (~flag & _n)
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	43da      	mvns	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4013      	ands	r3, r2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d006      	beq.n	80020a8 <show_echo+0xb8>
		write(fdout, next_line, 3);
 800209a:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <show_echo+0xc4>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	4906      	ldr	r1, [pc, #24]	; (80020bc <show_echo+0xcc>)
 80020a2:	2203      	movs	r2, #3
 80020a4:	f015 ff9a 	bl	8017fdc <write>
}
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bdb0      	pop	{r4, r5, r7, pc}
 80020ae:	bf00      	nop
 80020b0:	0801a4f0 	.word	0x0801a4f0
 80020b4:	200002e4 	.word	0x200002e4
 80020b8:	0801a4f4 	.word	0x0801a4f4
 80020bc:	20000038 	.word	0x20000038

080020c0 <show_man_page>:

//man
void show_man_page(int argc, char *argv[])
{
 80020c0:	b5b0      	push	{r4, r5, r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
	int i;

	if (argc < 2)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	dc00      	bgt.n	80020d2 <show_man_page+0x12>
		return;
 80020d0:	e071      	b.n	80021b6 <show_man_page+0xf6>

	for (i = 0; i < CMD_COUNT && strcmp(cmd_data[i].cmd, argv[1]); i++)
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	e002      	b.n	80020de <show_man_page+0x1e>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	3301      	adds	r3, #1
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2b06      	cmp	r3, #6
 80020e2:	dc10      	bgt.n	8002106 <show_man_page+0x46>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f44f 6283 	mov.w	r2, #1048	; 0x418
 80020ea:	fb02 f203 	mul.w	r2, r2, r3
 80020ee:	4b33      	ldr	r3, [pc, #204]	; (80021bc <show_man_page+0xfc>)
 80020f0:	441a      	add	r2, r3
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	3304      	adds	r3, #4
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4610      	mov	r0, r2
 80020fa:	4619      	mov	r1, r3
 80020fc:	f002 fe4e 	bl	8004d9c <strcmp>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1e8      	bne.n	80020d8 <show_man_page+0x18>
		;

	if (i >= CMD_COUNT)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2b06      	cmp	r3, #6
 800210a:	dd00      	ble.n	800210e <show_man_page+0x4e>
		return;
 800210c:	e053      	b.n	80021b6 <show_man_page+0xf6>

	write(fdout, "NAME: ", 7);
 800210e:	4b2c      	ldr	r3, [pc, #176]	; (80021c0 <show_man_page+0x100>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	492b      	ldr	r1, [pc, #172]	; (80021c4 <show_man_page+0x104>)
 8002116:	2207      	movs	r2, #7
 8002118:	f015 ff60 	bl	8017fdc <write>
	write(fdout, cmd_data[i].cmd, strlen(cmd_data[i].cmd) + 1);
 800211c:	4b28      	ldr	r3, [pc, #160]	; (80021c0 <show_man_page+0x100>)
 800211e:	681d      	ldr	r5, [r3, #0]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f44f 6283 	mov.w	r2, #1048	; 0x418
 8002126:	fb02 f203 	mul.w	r2, r2, r3
 800212a:	4b24      	ldr	r3, [pc, #144]	; (80021bc <show_man_page+0xfc>)
 800212c:	18d4      	adds	r4, r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f44f 6283 	mov.w	r2, #1048	; 0x418
 8002134:	fb02 f203 	mul.w	r2, r2, r3
 8002138:	4b20      	ldr	r3, [pc, #128]	; (80021bc <show_man_page+0xfc>)
 800213a:	4413      	add	r3, r2
 800213c:	4618      	mov	r0, r3
 800213e:	f002 fe67 	bl	8004e10 <strlen>
 8002142:	4603      	mov	r3, r0
 8002144:	3301      	adds	r3, #1
 8002146:	4628      	mov	r0, r5
 8002148:	4621      	mov	r1, r4
 800214a:	461a      	mov	r2, r3
 800214c:	f015 ff46 	bl	8017fdc <write>
	write(fdout, next_line, 3);
 8002150:	4b1b      	ldr	r3, [pc, #108]	; (80021c0 <show_man_page+0x100>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	491c      	ldr	r1, [pc, #112]	; (80021c8 <show_man_page+0x108>)
 8002158:	2203      	movs	r2, #3
 800215a:	f015 ff3f 	bl	8017fdc <write>
	write(fdout, "DESCRIPTION: ", 14);
 800215e:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <show_man_page+0x100>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	4919      	ldr	r1, [pc, #100]	; (80021cc <show_man_page+0x10c>)
 8002166:	220e      	movs	r2, #14
 8002168:	f015 ff38 	bl	8017fdc <write>
	write(fdout, cmd_data[i].description, strlen(cmd_data[i].description) + 1);
 800216c:	4b14      	ldr	r3, [pc, #80]	; (80021c0 <show_man_page+0x100>)
 800216e:	681d      	ldr	r5, [r3, #0]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f44f 6283 	mov.w	r2, #1048	; 0x418
 8002176:	fb02 f303 	mul.w	r3, r2, r3
 800217a:	f103 0218 	add.w	r2, r3, #24
 800217e:	4b0f      	ldr	r3, [pc, #60]	; (80021bc <show_man_page+0xfc>)
 8002180:	18d4      	adds	r4, r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f44f 6283 	mov.w	r2, #1048	; 0x418
 8002188:	fb02 f303 	mul.w	r3, r2, r3
 800218c:	f103 0218 	add.w	r2, r3, #24
 8002190:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <show_man_page+0xfc>)
 8002192:	4413      	add	r3, r2
 8002194:	4618      	mov	r0, r3
 8002196:	f002 fe3b 	bl	8004e10 <strlen>
 800219a:	4603      	mov	r3, r0
 800219c:	3301      	adds	r3, #1
 800219e:	4628      	mov	r0, r5
 80021a0:	4621      	mov	r1, r4
 80021a2:	461a      	mov	r2, r3
 80021a4:	f015 ff1a 	bl	8017fdc <write>
	write(fdout, next_line, 3);
 80021a8:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <show_man_page+0x100>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	4906      	ldr	r1, [pc, #24]	; (80021c8 <show_man_page+0x108>)
 80021b0:	2203      	movs	r2, #3
 80021b2:	f015 ff13 	bl	8017fdc <write>
}
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bdb0      	pop	{r4, r5, r7, pc}
 80021bc:	08018760 	.word	0x08018760
 80021c0:	200002e4 	.word	0x200002e4
 80021c4:	0801a4f8 	.word	0x0801a4f8
 80021c8:	20000038 	.word	0x20000038
 80021cc:	0801a500 	.word	0x0801a500

080021d0 <show_history>:

void show_history(int argc, char *argv[])
{
 80021d0:	b5b0      	push	{r4, r5, r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
	int i;

	for (i = cur_his + 1; i <= cur_his + HISTORY_COUNT; i++) {
 80021da:	4b26      	ldr	r3, [pc, #152]	; (8002274 <show_history+0xa4>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	3301      	adds	r3, #1
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	e03c      	b.n	800225e <show_history+0x8e>
		if (cmd[i % HISTORY_COUNT][0]) {
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	4b24      	ldr	r3, [pc, #144]	; (8002278 <show_history+0xa8>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	da03      	bge.n	80021f6 <show_history+0x26>
 80021ee:	3b01      	subs	r3, #1
 80021f0:	f063 0307 	orn	r3, r3, #7
 80021f4:	3301      	adds	r3, #1
 80021f6:	4a21      	ldr	r2, [pc, #132]	; (800227c <show_history+0xac>)
 80021f8:	019b      	lsls	r3, r3, #6
 80021fa:	4413      	add	r3, r2
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d02a      	beq.n	8002258 <show_history+0x88>
			write(fdout, cmd[i % HISTORY_COUNT], strlen(cmd[i % HISTORY_COUNT]) + 1);
 8002202:	4b1f      	ldr	r3, [pc, #124]	; (8002280 <show_history+0xb0>)
 8002204:	681d      	ldr	r5, [r3, #0]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <show_history+0xa8>)
 800220a:	4013      	ands	r3, r2
 800220c:	2b00      	cmp	r3, #0
 800220e:	da03      	bge.n	8002218 <show_history+0x48>
 8002210:	3b01      	subs	r3, #1
 8002212:	f063 0307 	orn	r3, r3, #7
 8002216:	3301      	adds	r3, #1
 8002218:	019a      	lsls	r2, r3, #6
 800221a:	4b18      	ldr	r3, [pc, #96]	; (800227c <show_history+0xac>)
 800221c:	18d4      	adds	r4, r2, r3
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	4b15      	ldr	r3, [pc, #84]	; (8002278 <show_history+0xa8>)
 8002222:	4013      	ands	r3, r2
 8002224:	2b00      	cmp	r3, #0
 8002226:	da03      	bge.n	8002230 <show_history+0x60>
 8002228:	3b01      	subs	r3, #1
 800222a:	f063 0307 	orn	r3, r3, #7
 800222e:	3301      	adds	r3, #1
 8002230:	019a      	lsls	r2, r3, #6
 8002232:	4b12      	ldr	r3, [pc, #72]	; (800227c <show_history+0xac>)
 8002234:	4413      	add	r3, r2
 8002236:	4618      	mov	r0, r3
 8002238:	f002 fdea 	bl	8004e10 <strlen>
 800223c:	4603      	mov	r3, r0
 800223e:	3301      	adds	r3, #1
 8002240:	4628      	mov	r0, r5
 8002242:	4621      	mov	r1, r4
 8002244:	461a      	mov	r2, r3
 8002246:	f015 fec9 	bl	8017fdc <write>
			write(fdout, next_line, 3);
 800224a:	4b0d      	ldr	r3, [pc, #52]	; (8002280 <show_history+0xb0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	490c      	ldr	r1, [pc, #48]	; (8002284 <show_history+0xb4>)
 8002252:	2203      	movs	r2, #3
 8002254:	f015 fec2 	bl	8017fdc <write>

void show_history(int argc, char *argv[])
{
	int i;

	for (i = cur_his + 1; i <= cur_his + HISTORY_COUNT; i++) {
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	3301      	adds	r3, #1
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	4b05      	ldr	r3, [pc, #20]	; (8002274 <show_history+0xa4>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f103 0208 	add.w	r2, r3, #8
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	429a      	cmp	r2, r3
 800226a:	dabb      	bge.n	80021e4 <show_history+0x14>
		if (cmd[i % HISTORY_COUNT][0]) {
			write(fdout, cmd[i % HISTORY_COUNT], strlen(cmd[i % HISTORY_COUNT]) + 1);
			write(fdout, next_line, 3);
		}
	}
}
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bdb0      	pop	{r4, r5, r7, pc}
 8002272:	bf00      	nop
 8002274:	200002e0 	.word	0x200002e0
 8002278:	80000007 	.word	0x80000007
 800227c:	200000e0 	.word	0x200000e0
 8002280:	200002e4 	.word	0x200002e4
 8002284:	20000038 	.word	0x20000038

08002288 <write_blank>:

void write_blank(int blank_num)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
	char blank[] = " ";
 8002290:	2320      	movs	r3, #32
 8002292:	813b      	strh	r3, [r7, #8]
	int blank_count = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	60fb      	str	r3, [r7, #12]

	while (blank_count <= blank_num) {
 8002298:	e00b      	b.n	80022b2 <write_blank+0x2a>
		write(fdout, blank, sizeof(blank));
 800229a:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <write_blank+0x38>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	f107 0308 	add.w	r3, r7, #8
 80022a2:	4610      	mov	r0, r2
 80022a4:	4619      	mov	r1, r3
 80022a6:	2202      	movs	r2, #2
 80022a8:	f015 fe98 	bl	8017fdc <write>
		blank_count++;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	3301      	adds	r3, #1
 80022b0:	60fb      	str	r3, [r7, #12]
void write_blank(int blank_num)
{
	char blank[] = " ";
	int blank_count = 0;

	while (blank_count <= blank_num) {
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	ddef      	ble.n	800229a <write_blank+0x12>
		write(fdout, blank, sizeof(blank));
		blank_count++;
	}
}
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	200002e4 	.word	0x200002e4

080022c4 <hexof>:

char hexof(int dec)
{
 80022c4:	b4b0      	push	{r4, r5, r7}
 80022c6:	b089      	sub	sp, #36	; 0x24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
    const char hextab[] = "0123456789abcdef";
 80022cc:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <hexof+0x3c>)
 80022ce:	f107 040c 	add.w	r4, r7, #12
 80022d2:	461d      	mov	r5, r3
 80022d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022d8:	682b      	ldr	r3, [r5, #0]
 80022da:	7023      	strb	r3, [r4, #0]

    if (dec < 0 || dec > 15)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	db02      	blt.n	80022e8 <hexof+0x24>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b0f      	cmp	r3, #15
 80022e6:	dd01      	ble.n	80022ec <hexof+0x28>
        return -1;
 80022e8:	23ff      	movs	r3, #255	; 0xff
 80022ea:	e004      	b.n	80022f6 <hexof+0x32>

    return hextab[dec];
 80022ec:	f107 020c 	add.w	r2, r7, #12
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4413      	add	r3, r2
 80022f4:	781b      	ldrb	r3, [r3, #0]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3724      	adds	r7, #36	; 0x24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bcb0      	pop	{r4, r5, r7}
 80022fe:	4770      	bx	lr
 8002300:	0801a510 	.word	0x0801a510

08002304 <char_filter>:

char char_filter(char c, char fallback)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	71fa      	strb	r2, [r7, #7]
 8002310:	71bb      	strb	r3, [r7, #6]
    if (c < 0x20 || c > 0x7E)
 8002312:	79fb      	ldrb	r3, [r7, #7]
 8002314:	2b1f      	cmp	r3, #31
 8002316:	d902      	bls.n	800231e <char_filter+0x1a>
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	2b7e      	cmp	r3, #126	; 0x7e
 800231c:	d901      	bls.n	8002322 <char_filter+0x1e>
        return fallback;
 800231e:	79bb      	ldrb	r3, [r7, #6]
 8002320:	e000      	b.n	8002324 <char_filter+0x20>

    return c;
 8002322:	79fb      	ldrb	r3, [r7, #7]
}
 8002324:	4618      	mov	r0, r3
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <show_xxd>:

#define XXD_WIDTH 0x10

//xxd
void show_xxd(int argc, char *argv[])
{
 8002330:	b5b0      	push	{r4, r5, r7, lr}
 8002332:	b08c      	sub	sp, #48	; 0x30
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
    int readfd = -1;
 800233a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800233e:	62fb      	str	r3, [r7, #44]	; 0x2c
    char buf[XXD_WIDTH];
    char ch;
    char chout[2] = {0};
 8002340:	2300      	movs	r3, #0
 8002342:	81bb      	strh	r3, [r7, #12]
    int pos = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	62bb      	str	r3, [r7, #40]	; 0x28
    int size;
    int i;

    if (argc == 1) { /* fallback to stdin */
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d103      	bne.n	8002356 <show_xxd+0x26>
        readfd = fdin;
 800234e:	4ba3      	ldr	r3, [pc, #652]	; (80025dc <show_xxd+0x2ac>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002354:	e02b      	b.n	80023ae <show_xxd+0x7e>
    }
    else { /* open file of argv[1] */
        readfd = open(argv[1], 0);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	3304      	adds	r3, #4
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	2100      	movs	r1, #0
 8002360:	f7fe fde0 	bl	8000f24 <open>
 8002364:	62f8      	str	r0, [r7, #44]	; 0x2c

        if (readfd < 0) { /* Open error */
 8002366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002368:	2b00      	cmp	r3, #0
 800236a:	da20      	bge.n	80023ae <show_xxd+0x7e>
            write(fdout, "xxd: ", 6);
 800236c:	4b9c      	ldr	r3, [pc, #624]	; (80025e0 <show_xxd+0x2b0>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	499c      	ldr	r1, [pc, #624]	; (80025e4 <show_xxd+0x2b4>)
 8002374:	2206      	movs	r2, #6
 8002376:	f015 fe31 	bl	8017fdc <write>
            write(fdout, argv[1], strlen(argv[1]) + 1);
 800237a:	4b99      	ldr	r3, [pc, #612]	; (80025e0 <show_xxd+0x2b0>)
 800237c:	681d      	ldr	r5, [r3, #0]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	3304      	adds	r3, #4
 8002382:	681c      	ldr	r4, [r3, #0]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	3304      	adds	r3, #4
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f002 fd40 	bl	8004e10 <strlen>
 8002390:	4603      	mov	r3, r0
 8002392:	3301      	adds	r3, #1
 8002394:	4628      	mov	r0, r5
 8002396:	4621      	mov	r1, r4
 8002398:	461a      	mov	r2, r3
 800239a:	f015 fe1f 	bl	8017fdc <write>
            write(fdout, ": No such file or directory\r\n", 31);
 800239e:	4b90      	ldr	r3, [pc, #576]	; (80025e0 <show_xxd+0x2b0>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	4990      	ldr	r1, [pc, #576]	; (80025e8 <show_xxd+0x2b8>)
 80023a6:	221f      	movs	r2, #31
 80023a8:	f015 fe18 	bl	8017fdc <write>
 80023ac:	e112      	b.n	80025d4 <show_xxd+0x2a4>
            return;
        }
    }

    lseek(readfd, 0, SEEK_SET);
 80023ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80023b0:	2100      	movs	r1, #0
 80023b2:	2201      	movs	r2, #1
 80023b4:	f015 fe43 	bl	801803e <lseek>
    while ((size = read(readfd, &ch, sizeof(ch))) && size != -1) {
 80023b8:	e09e      	b.n	80024f8 <show_xxd+0x1c8>
        if (ch != -1 && ch != 0x04) { /* has something read */
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
 80023bc:	2b04      	cmp	r3, #4
 80023be:	f000 809a 	beq.w	80024f6 <show_xxd+0x1c6>

            if (pos % XXD_WIDTH == 0) { /* new line, print address */
 80023c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c4:	f003 030f 	and.w	r3, r3, #15
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d123      	bne.n	8002414 <show_xxd+0xe4>
                for (i = sizeof(pos) * 8 - 4; i >= 0; i -= 4) {
 80023cc:	231c      	movs	r3, #28
 80023ce:	627b      	str	r3, [r7, #36]	; 0x24
 80023d0:	e016      	b.n	8002400 <show_xxd+0xd0>
                    chout[0] = hexof((pos >> i) & 0xF);
 80023d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	fa42 f303 	asr.w	r3, r2, r3
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff ff70 	bl	80022c4 <hexof>
 80023e4:	4603      	mov	r3, r0
 80023e6:	733b      	strb	r3, [r7, #12]
                    write(fdout, chout, 2);
 80023e8:	4b7d      	ldr	r3, [pc, #500]	; (80025e0 <show_xxd+0x2b0>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	f107 030c 	add.w	r3, r7, #12
 80023f0:	4610      	mov	r0, r2
 80023f2:	4619      	mov	r1, r3
 80023f4:	2202      	movs	r2, #2
 80023f6:	f015 fdf1 	bl	8017fdc <write>
    lseek(readfd, 0, SEEK_SET);
    while ((size = read(readfd, &ch, sizeof(ch))) && size != -1) {
        if (ch != -1 && ch != 0x04) { /* has something read */

            if (pos % XXD_WIDTH == 0) { /* new line, print address */
                for (i = sizeof(pos) * 8 - 4; i >= 0; i -= 4) {
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	3b04      	subs	r3, #4
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	2b00      	cmp	r3, #0
 8002404:	dae5      	bge.n	80023d2 <show_xxd+0xa2>
                    chout[0] = hexof((pos >> i) & 0xF);
                    write(fdout, chout, 2);
                }

                write(fdout, ":", 2);
 8002406:	4b76      	ldr	r3, [pc, #472]	; (80025e0 <show_xxd+0x2b0>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	4977      	ldr	r1, [pc, #476]	; (80025ec <show_xxd+0x2bc>)
 800240e:	2202      	movs	r2, #2
 8002410:	f015 fde4 	bl	8017fdc <write>
            }

            if (pos % 2 == 0) { /* whitespace for each 2 bytes */
 8002414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d106      	bne.n	800242c <show_xxd+0xfc>
                write(fdout, " ", 2);
 800241e:	4b70      	ldr	r3, [pc, #448]	; (80025e0 <show_xxd+0x2b0>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	4972      	ldr	r1, [pc, #456]	; (80025f0 <show_xxd+0x2c0>)
 8002426:	2202      	movs	r2, #2
 8002428:	f015 fdd8 	bl	8017fdc <write>
            }

            /* higher bits */
            chout[0] = hexof(ch >> 4);
 800242c:	7bfb      	ldrb	r3, [r7, #15]
 800242e:	091b      	lsrs	r3, r3, #4
 8002430:	b2db      	uxtb	r3, r3
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff ff46 	bl	80022c4 <hexof>
 8002438:	4603      	mov	r3, r0
 800243a:	733b      	strb	r3, [r7, #12]
            write(fdout, chout, 2);
 800243c:	4b68      	ldr	r3, [pc, #416]	; (80025e0 <show_xxd+0x2b0>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	f107 030c 	add.w	r3, r7, #12
 8002444:	4610      	mov	r0, r2
 8002446:	4619      	mov	r1, r3
 8002448:	2202      	movs	r2, #2
 800244a:	f015 fdc7 	bl	8017fdc <write>

            /* lower bits*/
            chout[0] = hexof(ch & 0xF);
 800244e:	7bfb      	ldrb	r3, [r7, #15]
 8002450:	f003 030f 	and.w	r3, r3, #15
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff ff35 	bl	80022c4 <hexof>
 800245a:	4603      	mov	r3, r0
 800245c:	733b      	strb	r3, [r7, #12]
            write(fdout, chout, 2);
 800245e:	4b60      	ldr	r3, [pc, #384]	; (80025e0 <show_xxd+0x2b0>)
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	f107 030c 	add.w	r3, r7, #12
 8002466:	4610      	mov	r0, r2
 8002468:	4619      	mov	r1, r3
 800246a:	2202      	movs	r2, #2
 800246c:	f015 fdb6 	bl	8017fdc <write>

            /* store in buffer */
            buf[pos % XXD_WIDTH] = ch;
 8002470:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002472:	4b60      	ldr	r3, [pc, #384]	; (80025f4 <show_xxd+0x2c4>)
 8002474:	4013      	ands	r3, r2
 8002476:	2b00      	cmp	r3, #0
 8002478:	da03      	bge.n	8002482 <show_xxd+0x152>
 800247a:	3b01      	subs	r3, #1
 800247c:	f063 030f 	orn	r3, r3, #15
 8002480:	3301      	adds	r3, #1
 8002482:	7bfa      	ldrb	r2, [r7, #15]
 8002484:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002488:	440b      	add	r3, r1
 800248a:	f803 2c20 	strb.w	r2, [r3, #-32]

            pos++;
 800248e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002490:	3301      	adds	r3, #1
 8002492:	62bb      	str	r3, [r7, #40]	; 0x28

            if (pos % XXD_WIDTH == 0) { /* end of line */
 8002494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	2b00      	cmp	r3, #0
 800249c:	d12c      	bne.n	80024f8 <show_xxd+0x1c8>
                write(fdout, "  ", 3);
 800249e:	4b50      	ldr	r3, [pc, #320]	; (80025e0 <show_xxd+0x2b0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	4954      	ldr	r1, [pc, #336]	; (80025f8 <show_xxd+0x2c8>)
 80024a6:	2203      	movs	r2, #3
 80024a8:	f015 fd98 	bl	8017fdc <write>

                for (i = 0; i < XXD_WIDTH; i++) {
 80024ac:	2300      	movs	r3, #0
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
 80024b0:	e016      	b.n	80024e0 <show_xxd+0x1b0>
                    chout[0] = char_filter(buf[i], '.');
 80024b2:	f107 0210 	add.w	r2, r7, #16
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	4413      	add	r3, r2
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	212e      	movs	r1, #46	; 0x2e
 80024c0:	f7ff ff20 	bl	8002304 <char_filter>
 80024c4:	4603      	mov	r3, r0
 80024c6:	733b      	strb	r3, [r7, #12]
                    write(fdout, chout, 2);
 80024c8:	4b45      	ldr	r3, [pc, #276]	; (80025e0 <show_xxd+0x2b0>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	f107 030c 	add.w	r3, r7, #12
 80024d0:	4610      	mov	r0, r2
 80024d2:	4619      	mov	r1, r3
 80024d4:	2202      	movs	r2, #2
 80024d6:	f015 fd81 	bl	8017fdc <write>
            pos++;

            if (pos % XXD_WIDTH == 0) { /* end of line */
                write(fdout, "  ", 3);

                for (i = 0; i < XXD_WIDTH; i++) {
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	3301      	adds	r3, #1
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	2b0f      	cmp	r3, #15
 80024e4:	dde5      	ble.n	80024b2 <show_xxd+0x182>
                    chout[0] = char_filter(buf[i], '.');
                    write(fdout, chout, 2);
                }

                write(fdout, "\r\n", 3);
 80024e6:	4b3e      	ldr	r3, [pc, #248]	; (80025e0 <show_xxd+0x2b0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	4943      	ldr	r1, [pc, #268]	; (80025fc <show_xxd+0x2cc>)
 80024ee:	2203      	movs	r2, #3
 80024f0:	f015 fd74 	bl	8017fdc <write>
 80024f4:	e000      	b.n	80024f8 <show_xxd+0x1c8>
            }
        }
        else { /* EOF */
            break;
 80024f6:	e00f      	b.n	8002518 <show_xxd+0x1e8>
            return;
        }
    }

    lseek(readfd, 0, SEEK_SET);
    while ((size = read(readfd, &ch, sizeof(ch))) && size != -1) {
 80024f8:	f107 030f 	add.w	r3, r7, #15
 80024fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80024fe:	4619      	mov	r1, r3
 8002500:	2201      	movs	r2, #1
 8002502:	f015 fd72 	bl	8017fea <read>
 8002506:	6238      	str	r0, [r7, #32]
 8002508:	6a3b      	ldr	r3, [r7, #32]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d004      	beq.n	8002518 <show_xxd+0x1e8>
 800250e:	6a3b      	ldr	r3, [r7, #32]
 8002510:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002514:	f47f af51 	bne.w	80023ba <show_xxd+0x8a>
        else { /* EOF */
            break;
        }
    }

    if (pos % XXD_WIDTH != 0) { /* rest */
 8002518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	2b00      	cmp	r3, #0
 8002520:	d058      	beq.n	80025d4 <show_xxd+0x2a4>
        /* align */
        for (i = pos % XXD_WIDTH; i < XXD_WIDTH; i++) {
 8002522:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002524:	4b33      	ldr	r3, [pc, #204]	; (80025f4 <show_xxd+0x2c4>)
 8002526:	4013      	ands	r3, r2
 8002528:	2b00      	cmp	r3, #0
 800252a:	da03      	bge.n	8002534 <show_xxd+0x204>
 800252c:	3b01      	subs	r3, #1
 800252e:	f063 030f 	orn	r3, r3, #15
 8002532:	3301      	adds	r3, #1
 8002534:	627b      	str	r3, [r7, #36]	; 0x24
 8002536:	e015      	b.n	8002564 <show_xxd+0x234>
            if (i % 2 == 0) { /* whitespace for each 2 bytes */
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d106      	bne.n	8002550 <show_xxd+0x220>
                write(fdout, " ", 2);
 8002542:	4b27      	ldr	r3, [pc, #156]	; (80025e0 <show_xxd+0x2b0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	4929      	ldr	r1, [pc, #164]	; (80025f0 <show_xxd+0x2c0>)
 800254a:	2202      	movs	r2, #2
 800254c:	f015 fd46 	bl	8017fdc <write>
            }
            write(fdout, "  ", 3);
 8002550:	4b23      	ldr	r3, [pc, #140]	; (80025e0 <show_xxd+0x2b0>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	4928      	ldr	r1, [pc, #160]	; (80025f8 <show_xxd+0x2c8>)
 8002558:	2203      	movs	r2, #3
 800255a:	f015 fd3f 	bl	8017fdc <write>
        }
    }

    if (pos % XXD_WIDTH != 0) { /* rest */
        /* align */
        for (i = pos % XXD_WIDTH; i < XXD_WIDTH; i++) {
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	3301      	adds	r3, #1
 8002562:	627b      	str	r3, [r7, #36]	; 0x24
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	2b0f      	cmp	r3, #15
 8002568:	dde6      	ble.n	8002538 <show_xxd+0x208>
                write(fdout, " ", 2);
            }
            write(fdout, "  ", 3);
        }

        write(fdout, "  ", 3);
 800256a:	4b1d      	ldr	r3, [pc, #116]	; (80025e0 <show_xxd+0x2b0>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	4921      	ldr	r1, [pc, #132]	; (80025f8 <show_xxd+0x2c8>)
 8002572:	2203      	movs	r2, #3
 8002574:	f015 fd32 	bl	8017fdc <write>

        for (i = 0; i < pos % XXD_WIDTH; i++) {
 8002578:	2300      	movs	r3, #0
 800257a:	627b      	str	r3, [r7, #36]	; 0x24
 800257c:	e016      	b.n	80025ac <show_xxd+0x27c>
            chout[0] = char_filter(buf[i], '.');
 800257e:	f107 0210 	add.w	r2, r7, #16
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002584:	4413      	add	r3, r2
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	212e      	movs	r1, #46	; 0x2e
 800258c:	f7ff feba 	bl	8002304 <char_filter>
 8002590:	4603      	mov	r3, r0
 8002592:	733b      	strb	r3, [r7, #12]
            write(fdout, chout, 2);
 8002594:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <show_xxd+0x2b0>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	f107 030c 	add.w	r3, r7, #12
 800259c:	4610      	mov	r0, r2
 800259e:	4619      	mov	r1, r3
 80025a0:	2202      	movs	r2, #2
 80025a2:	f015 fd1b 	bl	8017fdc <write>
            write(fdout, "  ", 3);
        }

        write(fdout, "  ", 3);

        for (i = 0; i < pos % XXD_WIDTH; i++) {
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	3301      	adds	r3, #1
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24
 80025ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025ae:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <show_xxd+0x2c4>)
 80025b0:	4013      	ands	r3, r2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	da03      	bge.n	80025be <show_xxd+0x28e>
 80025b6:	3b01      	subs	r3, #1
 80025b8:	f063 030f 	orn	r3, r3, #15
 80025bc:	3301      	adds	r3, #1
 80025be:	461a      	mov	r2, r3
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	429a      	cmp	r2, r3
 80025c4:	dcdb      	bgt.n	800257e <show_xxd+0x24e>
            chout[0] = char_filter(buf[i], '.');
            write(fdout, chout, 2);
        }

        write(fdout, "\r\n", 3);
 80025c6:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <show_xxd+0x2b0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	490b      	ldr	r1, [pc, #44]	; (80025fc <show_xxd+0x2cc>)
 80025ce:	2203      	movs	r2, #3
 80025d0:	f015 fd04 	bl	8017fdc <write>
    }
}
 80025d4:	3730      	adds	r7, #48	; 0x30
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bdb0      	pop	{r4, r5, r7, pc}
 80025da:	bf00      	nop
 80025dc:	200002e8 	.word	0x200002e8
 80025e0:	200002e4 	.word	0x200002e4
 80025e4:	0801a524 	.word	0x0801a524
 80025e8:	0801a52c 	.word	0x0801a52c
 80025ec:	0801a54c 	.word	0x0801a54c
 80025f0:	0801a4f4 	.word	0x0801a4f4
 80025f4:	8000000f 	.word	0x8000000f
 80025f8:	0801a550 	.word	0x0801a550
 80025fc:	0801a554 	.word	0x0801a554

08002600 <intr_release>:
#define INTR_EVENT_REVERSE(event) ((event) - FILE_LIMIT - 15)
#define TIME_EVENT (FILE_LIMIT + INTR_LIMIT)

int intr_release(struct event_monitor *monitor, int event,
                 struct task_control_block *task, void *data)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
 800260c:	603b      	str	r3, [r7, #0]
    return 1;
 800260e:	2301      	movs	r3, #1
}
 8002610:	4618      	mov	r0, r3
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <time_release>:

int time_release(struct event_monitor *monitor, int event,
                 struct task_control_block *task, void *data)
{
 800261c:	b480      	push	{r7}
 800261e:	b087      	sub	sp, #28
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
 8002628:	603b      	str	r3, [r7, #0]
    int *tick_count = data;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	617b      	str	r3, [r7, #20]
    return task->stack->r0 == *tick_count;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	bf14      	ite	ne
 800263c:	2300      	movne	r3, #0
 800263e:	2301      	moveq	r3, #1
 8002640:	b2db      	uxtb	r3, r3
}
 8002642:	4618      	mov	r0, r3
 8002644:	371c      	adds	r7, #28
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop

08002650 <rtenv_start_scheduler>:
struct list ready_list[PRIORITY_LIMIT + 1];  /* [0 ... 39] */
struct event events[EVENT_LIMIT];


void rtenv_start_scheduler(void (*start)())
{
 8002650:	b5b0      	push	{r4, r5, r7, lr}
 8002652:	b098      	sub	sp, #96	; 0x60
 8002654:	af02      	add	r7, sp, #8
 8002656:	6078      	str	r0, [r7, #4]
	//struct task_control_block tasks[TASK_LIMIT];
	struct memory_pool memory_pool;
	struct event_monitor event_monitor;
	//size_t task_count = 0;
	size_t current_task = 0;
 8002658:	2300      	movs	r3, #0
 800265a:	657b      	str	r3, [r7, #84]	; 0x54
	int i;
	struct list *list;
	struct task_control_block *task;
	int timeup;
	unsigned int tick_count = 0;
 800265c:	2300      	movs	r3, #0
 800265e:	60fb      	str	r3, [r7, #12]

	SysTick_Config(configCPU_CLOCK_HZ / configTICK_RATE_HZ);
 8002660:	4889      	ldr	r0, [pc, #548]	; (8002888 <rtenv_start_scheduler+0x238>)
 8002662:	f7fe fe85 	bl	8001370 <SysTick_Config>

	init_rs232();
 8002666:	f002 fc73 	bl	8004f50 <init_rs232>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800266a:	b662      	cpsie	i
	__enable_irq();

    /* Initialize memory pool */
    memory_pool_init(&memory_pool, MEM_LIMIT, memory_space);
 800266c:	f107 0318 	add.w	r3, r7, #24
 8002670:	4618      	mov	r0, r3
 8002672:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002676:	4a85      	ldr	r2, [pc, #532]	; (800288c <rtenv_start_scheduler+0x23c>)
 8002678:	f000 fdb4 	bl	80031e4 <memory_pool_init>

	/* Initialize all files */
	for (i = 0; i < FILE_LIMIT; i++)
 800267c:	2300      	movs	r3, #0
 800267e:	653b      	str	r3, [r7, #80]	; 0x50
 8002680:	e007      	b.n	8002692 <rtenv_start_scheduler+0x42>
		files[i] = NULL;
 8002682:	4b83      	ldr	r3, [pc, #524]	; (8002890 <rtenv_start_scheduler+0x240>)
 8002684:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002686:	2100      	movs	r1, #0
 8002688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Initialize memory pool */
    memory_pool_init(&memory_pool, MEM_LIMIT, memory_space);

	/* Initialize all files */
	for (i = 0; i < FILE_LIMIT; i++)
 800268c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800268e:	3301      	adds	r3, #1
 8002690:	653b      	str	r3, [r7, #80]	; 0x50
 8002692:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002694:	2b1f      	cmp	r3, #31
 8002696:	ddf4      	ble.n	8002682 <rtenv_start_scheduler+0x32>
		files[i] = NULL;

	/* Initialize ready lists */
	for (i = 0; i <= PRIORITY_LIMIT; i++)
 8002698:	2300      	movs	r3, #0
 800269a:	653b      	str	r3, [r7, #80]	; 0x50
 800269c:	e009      	b.n	80026b2 <rtenv_start_scheduler+0x62>
		list_init(&ready_list[i]);
 800269e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026a0:	00da      	lsls	r2, r3, #3
 80026a2:	4b7c      	ldr	r3, [pc, #496]	; (8002894 <rtenv_start_scheduler+0x244>)
 80026a4:	4413      	add	r3, r2
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 fcfe 	bl	80030a8 <list_init>
	/* Initialize all files */
	for (i = 0; i < FILE_LIMIT; i++)
		files[i] = NULL;

	/* Initialize ready lists */
	for (i = 0; i <= PRIORITY_LIMIT; i++)
 80026ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026ae:	3301      	adds	r3, #1
 80026b0:	653b      	str	r3, [r7, #80]	; 0x50
 80026b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026b4:	2b27      	cmp	r3, #39	; 0x27
 80026b6:	ddf2      	ble.n	800269e <rtenv_start_scheduler+0x4e>
		list_init(&ready_list[i]);

    /* Initialise event monitor */
    event_monitor_init(&event_monitor, events, ready_list);
 80026b8:	f107 0310 	add.w	r3, r7, #16
 80026bc:	4618      	mov	r0, r3
 80026be:	4976      	ldr	r1, [pc, #472]	; (8002898 <rtenv_start_scheduler+0x248>)
 80026c0:	4a74      	ldr	r2, [pc, #464]	; (8002894 <rtenv_start_scheduler+0x244>)
 80026c2:	f7fe f963 	bl	800098c <event_monitor_init>

	/* Initialize fifos */
	for (i = 0; i <= PATHSERVER_FD; i++)
 80026c6:	2300      	movs	r3, #0
 80026c8:	653b      	str	r3, [r7, #80]	; 0x50
 80026ca:	e00f      	b.n	80026ec <rtenv_start_scheduler+0x9c>
		file_mknod(i, -1, files, S_IFIFO, &memory_pool, &event_monitor);
 80026cc:	f107 0318 	add.w	r3, r7, #24
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	f107 0310 	add.w	r3, r7, #16
 80026d6:	9301      	str	r3, [sp, #4]
 80026d8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80026da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026de:	4a6c      	ldr	r2, [pc, #432]	; (8002890 <rtenv_start_scheduler+0x240>)
 80026e0:	2301      	movs	r3, #1
 80026e2:	f7fe fd3d 	bl	8001160 <file_mknod>

    /* Initialise event monitor */
    event_monitor_init(&event_monitor, events, ready_list);

	/* Initialize fifos */
	for (i = 0; i <= PATHSERVER_FD; i++)
 80026e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026e8:	3301      	adds	r3, #1
 80026ea:	653b      	str	r3, [r7, #80]	; 0x50
 80026ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026ee:	2b0b      	cmp	r3, #11
 80026f0:	ddec      	ble.n	80026cc <rtenv_start_scheduler+0x7c>
		file_mknod(i, -1, files, S_IFIFO, &memory_pool, &event_monitor);

    /* Register IRQ events, see INTR_LIMIT */
	for (i = -15; i < INTR_LIMIT - 15; i++)
 80026f2:	f06f 030e 	mvn.w	r3, #14
 80026f6:	653b      	str	r3, [r7, #80]	; 0x50
 80026f8:	e00c      	b.n	8002714 <rtenv_start_scheduler+0xc4>
	    event_monitor_register(&event_monitor, INTR_EVENT(i), intr_release, 0);
 80026fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026fc:	332f      	adds	r3, #47	; 0x2f
 80026fe:	f107 0210 	add.w	r2, r7, #16
 8002702:	4610      	mov	r0, r2
 8002704:	4619      	mov	r1, r3
 8002706:	4a65      	ldr	r2, [pc, #404]	; (800289c <rtenv_start_scheduler+0x24c>)
 8002708:	2300      	movs	r3, #0
 800270a:	f7fe f9ad 	bl	8000a68 <event_monitor_register>
	/* Initialize fifos */
	for (i = 0; i <= PATHSERVER_FD; i++)
		file_mknod(i, -1, files, S_IFIFO, &memory_pool, &event_monitor);

    /* Register IRQ events, see INTR_LIMIT */
	for (i = -15; i < INTR_LIMIT - 15; i++)
 800270e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002710:	3301      	adds	r3, #1
 8002712:	653b      	str	r3, [r7, #80]	; 0x50
 8002714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002716:	2b5a      	cmp	r3, #90	; 0x5a
 8002718:	ddef      	ble.n	80026fa <rtenv_start_scheduler+0xaa>
	    event_monitor_register(&event_monitor, INTR_EVENT(i), intr_release, 0);

	event_monitor_register(&event_monitor, TIME_EVENT, time_release, &tick_count);
 800271a:	f107 0210 	add.w	r2, r7, #16
 800271e:	f107 030c 	add.w	r3, r7, #12
 8002722:	4610      	mov	r0, r2
 8002724:	218a      	movs	r1, #138	; 0x8a
 8002726:	4a5e      	ldr	r2, [pc, #376]	; (80028a0 <rtenv_start_scheduler+0x250>)
 8002728:	f7fe f99e 	bl	8000a68 <event_monitor_register>

    /* Initialize first thread */
	tasks[task_count].stack = (void*)init_task(stacks[task_count], start);
 800272c:	4b5d      	ldr	r3, [pc, #372]	; (80028a4 <rtenv_start_scheduler+0x254>)
 800272e:	681c      	ldr	r4, [r3, #0]
 8002730:	4b5c      	ldr	r3, [pc, #368]	; (80028a4 <rtenv_start_scheduler+0x254>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4613      	mov	r3, r2
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	4413      	add	r3, r2
 800273a:	025b      	lsls	r3, r3, #9
 800273c:	4a5a      	ldr	r2, [pc, #360]	; (80028a8 <rtenv_start_scheduler+0x258>)
 800273e:	4413      	add	r3, r2
 8002740:	4618      	mov	r0, r3
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	f002 fb90 	bl	8004e68 <init_task>
 8002748:	4602      	mov	r2, r0
 800274a:	4958      	ldr	r1, [pc, #352]	; (80028ac <rtenv_start_scheduler+0x25c>)
 800274c:	4623      	mov	r3, r4
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	4423      	add	r3, r4
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	440b      	add	r3, r1
 8002756:	601a      	str	r2, [r3, #0]
	tasks[task_count].pid = 0;
 8002758:	4b52      	ldr	r3, [pc, #328]	; (80028a4 <rtenv_start_scheduler+0x254>)
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	4953      	ldr	r1, [pc, #332]	; (80028ac <rtenv_start_scheduler+0x25c>)
 800275e:	4613      	mov	r3, r2
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	4413      	add	r3, r2
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	440b      	add	r3, r1
 8002768:	3304      	adds	r3, #4
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]
	tasks[task_count].priority = PRIORITY_DEFAULT;
 800276e:	4b4d      	ldr	r3, [pc, #308]	; (80028a4 <rtenv_start_scheduler+0x254>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	494e      	ldr	r1, [pc, #312]	; (80028ac <rtenv_start_scheduler+0x25c>)
 8002774:	4613      	mov	r3, r2
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	4413      	add	r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	440b      	add	r3, r1
 800277e:	330c      	adds	r3, #12
 8002780:	2214      	movs	r2, #20
 8002782:	601a      	str	r2, [r3, #0]
	list_init(&tasks[task_count].list);
 8002784:	4b47      	ldr	r3, [pc, #284]	; (80028a4 <rtenv_start_scheduler+0x254>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4613      	mov	r3, r2
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	4413      	add	r3, r2
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	f103 0210 	add.w	r2, r3, #16
 8002794:	4b45      	ldr	r3, [pc, #276]	; (80028ac <rtenv_start_scheduler+0x25c>)
 8002796:	4413      	add	r3, r2
 8002798:	4618      	mov	r0, r3
 800279a:	f000 fc85 	bl	80030a8 <list_init>
	list_push(&ready_list[tasks[task_count].priority], &tasks[task_count].list);
 800279e:	4b41      	ldr	r3, [pc, #260]	; (80028a4 <rtenv_start_scheduler+0x254>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	4942      	ldr	r1, [pc, #264]	; (80028ac <rtenv_start_scheduler+0x25c>)
 80027a4:	4613      	mov	r3, r2
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	4413      	add	r3, r2
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	440b      	add	r3, r1
 80027ae:	330c      	adds	r3, #12
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	00da      	lsls	r2, r3, #3
 80027b4:	4b37      	ldr	r3, [pc, #220]	; (8002894 <rtenv_start_scheduler+0x244>)
 80027b6:	18d1      	adds	r1, r2, r3
 80027b8:	4b3a      	ldr	r3, [pc, #232]	; (80028a4 <rtenv_start_scheduler+0x254>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	4613      	mov	r3, r2
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	4413      	add	r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	f103 0210 	add.w	r2, r3, #16
 80027c8:	4b38      	ldr	r3, [pc, #224]	; (80028ac <rtenv_start_scheduler+0x25c>)
 80027ca:	4413      	add	r3, r2
 80027cc:	4608      	mov	r0, r1
 80027ce:	4619      	mov	r1, r3
 80027d0:	f000 fcc4 	bl	800315c <list_push>
	task_count++;
 80027d4:	4b33      	ldr	r3, [pc, #204]	; (80028a4 <rtenv_start_scheduler+0x254>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	1c5a      	adds	r2, r3, #1
 80027da:	4b32      	ldr	r3, [pc, #200]	; (80028a4 <rtenv_start_scheduler+0x254>)
 80027dc:	601a      	str	r2, [r3, #0]

	while (1) {
		tasks[current_task].stack = activate(tasks[current_task].stack);
 80027de:	4933      	ldr	r1, [pc, #204]	; (80028ac <rtenv_start_scheduler+0x25c>)
 80027e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80027e2:	4613      	mov	r3, r2
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	4413      	add	r3, r2
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	440b      	add	r3, r1
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f015 fb8d 	bl	8017f0e <activate>
 80027f4:	4601      	mov	r1, r0
 80027f6:	482d      	ldr	r0, [pc, #180]	; (80028ac <rtenv_start_scheduler+0x25c>)
 80027f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80027fa:	4613      	mov	r3, r2
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	4413      	add	r3, r2
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	4403      	add	r3, r0
 8002804:	6019      	str	r1, [r3, #0]
		tasks[current_task].status = TASK_READY;
 8002806:	4929      	ldr	r1, [pc, #164]	; (80028ac <rtenv_start_scheduler+0x25c>)
 8002808:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800280a:	4613      	mov	r3, r2
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	4413      	add	r3, r2
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	440b      	add	r3, r1
 8002814:	3308      	adds	r3, #8
 8002816:	2200      	movs	r2, #0
 8002818:	601a      	str	r2, [r3, #0]
		timeup = 0;
 800281a:	2300      	movs	r3, #0
 800281c:	64fb      	str	r3, [r7, #76]	; 0x4c

		switch (tasks[current_task].stack->r7) {
 800281e:	4923      	ldr	r1, [pc, #140]	; (80028ac <rtenv_start_scheduler+0x25c>)
 8002820:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002822:	4613      	mov	r3, r2
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	4413      	add	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	440b      	add	r3, r1
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	3b01      	subs	r3, #1
 8002832:	2b09      	cmp	r3, #9
 8002834:	f200 83ac 	bhi.w	8002f90 <rtenv_start_scheduler+0x940>
 8002838:	a201      	add	r2, pc, #4	; (adr r2, 8002840 <rtenv_start_scheduler+0x1f0>)
 800283a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283e:	bf00      	nop
 8002840:	08002869 	.word	0x08002869
 8002844:	080029fd 	.word	0x080029fd
 8002848:	08002a13 	.word	0x08002a13
 800284c:	08002afd 	.word	0x08002afd
 8002850:	08002bcd 	.word	0x08002bcd
 8002854:	08002c2f 	.word	0x08002c2f
 8002858:	08002cc1 	.word	0x08002cc1
 800285c:	08002de1 	.word	0x08002de1
 8002860:	08002e41 	.word	0x08002e41
 8002864:	08002eb3 	.word	0x08002eb3
		case 0x1: /* fork */
			if (task_count == TASK_LIMIT) {
 8002868:	4b0e      	ldr	r3, [pc, #56]	; (80028a4 <rtenv_start_scheduler+0x254>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b08      	cmp	r3, #8
 800286e:	d11f      	bne.n	80028b0 <rtenv_start_scheduler+0x260>
				/* Cannot create a new task, return error */
				tasks[current_task].stack->r0 = -1;
 8002870:	490e      	ldr	r1, [pc, #56]	; (80028ac <rtenv_start_scheduler+0x25c>)
 8002872:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002874:	4613      	mov	r3, r2
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	4413      	add	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	440b      	add	r3, r1
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002884:	629a      	str	r2, [r3, #40]	; 0x28
				list_init(&tasks[task_count].list);
				list_push(&ready_list[tasks[task_count].priority], &tasks[task_count].list);
				/* There is now one more task */
				task_count++;
			}
			break;
 8002886:	e3c1      	b.n	800300c <rtenv_start_scheduler+0x9bc>
 8002888:	000afc80 	.word	0x000afc80
 800288c:	200038b4 	.word	0x200038b4
 8002890:	200040b4 	.word	0x200040b4
 8002894:	200041b4 	.word	0x200041b4
 8002898:	200042f4 	.word	0x200042f4
 800289c:	08002601 	.word	0x08002601
 80028a0:	0800261d 	.word	0x0800261d
 80028a4:	200000dc 	.word	0x200000dc
 80028a8:	200008b4 	.word	0x200008b4
 80028ac:	200007f4 	.word	0x200007f4
				/* Cannot create a new task, return error */
				tasks[current_task].stack->r0 = -1;
			}
			else {
				/* Compute how much of the stack is used */
				size_t used = stacks[current_task] + STACK_SIZE
 80028b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028b2:	1c5a      	adds	r2, r3, #1
 80028b4:	4613      	mov	r3, r2
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	4413      	add	r3, r2
 80028ba:	025b      	lsls	r3, r3, #9
 80028bc:	4a89      	ldr	r2, [pc, #548]	; (8002ae4 <rtenv_start_scheduler+0x494>)
 80028be:	4413      	add	r3, r2
					      - (unsigned int*)tasks[current_task].stack;
 80028c0:	4619      	mov	r1, r3
 80028c2:	4889      	ldr	r0, [pc, #548]	; (8002ae8 <rtenv_start_scheduler+0x498>)
 80028c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80028c6:	4613      	mov	r3, r2
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	4413      	add	r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	4403      	add	r3, r0
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	1acb      	subs	r3, r1, r3
 80028d4:	109b      	asrs	r3, r3, #2
				/* Cannot create a new task, return error */
				tasks[current_task].stack->r0 = -1;
			}
			else {
				/* Compute how much of the stack is used */
				size_t used = stacks[current_task] + STACK_SIZE
 80028d6:	64bb      	str	r3, [r7, #72]	; 0x48
					      - (unsigned int*)tasks[current_task].stack;
				/* New stack is END - used */
				tasks[task_count].stack = (void*)(stacks[task_count] + STACK_SIZE - used);
 80028d8:	4b84      	ldr	r3, [pc, #528]	; (8002aec <rtenv_start_scheduler+0x49c>)
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	4b83      	ldr	r3, [pc, #524]	; (8002aec <rtenv_start_scheduler+0x49c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	1c59      	adds	r1, r3, #1
 80028e2:	460b      	mov	r3, r1
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	440b      	add	r3, r1
 80028e8:	025b      	lsls	r3, r3, #9
 80028ea:	497e      	ldr	r1, [pc, #504]	; (8002ae4 <rtenv_start_scheduler+0x494>)
 80028ec:	4419      	add	r1, r3
 80028ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	425b      	negs	r3, r3
 80028f4:	4419      	add	r1, r3
 80028f6:	487c      	ldr	r0, [pc, #496]	; (8002ae8 <rtenv_start_scheduler+0x498>)
 80028f8:	4613      	mov	r3, r2
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	4413      	add	r3, r2
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	4403      	add	r3, r0
 8002902:	6019      	str	r1, [r3, #0]
				/* Copy only the used part of the stack */
				memcpy(tasks[task_count].stack, tasks[current_task].stack,
 8002904:	4b79      	ldr	r3, [pc, #484]	; (8002aec <rtenv_start_scheduler+0x49c>)
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	4977      	ldr	r1, [pc, #476]	; (8002ae8 <rtenv_start_scheduler+0x498>)
 800290a:	4613      	mov	r3, r2
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	4413      	add	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	440b      	add	r3, r1
 8002914:	6819      	ldr	r1, [r3, #0]
 8002916:	4874      	ldr	r0, [pc, #464]	; (8002ae8 <rtenv_start_scheduler+0x498>)
 8002918:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800291a:	4613      	mov	r3, r2
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	4413      	add	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	4403      	add	r3, r0
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4608      	mov	r0, r1
 800292c:	4611      	mov	r1, r2
 800292e:	461a      	mov	r2, r3
 8002930:	f015 fafe 	bl	8017f30 <memcpy>
				       used * sizeof(unsigned int));
				/* Set PID */
				tasks[task_count].pid = task_count;
 8002934:	4b6d      	ldr	r3, [pc, #436]	; (8002aec <rtenv_start_scheduler+0x49c>)
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	4b6c      	ldr	r3, [pc, #432]	; (8002aec <rtenv_start_scheduler+0x49c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4619      	mov	r1, r3
 800293e:	486a      	ldr	r0, [pc, #424]	; (8002ae8 <rtenv_start_scheduler+0x498>)
 8002940:	4613      	mov	r3, r2
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	4413      	add	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	4403      	add	r3, r0
 800294a:	3304      	adds	r3, #4
 800294c:	6019      	str	r1, [r3, #0]
				/* Set priority, inherited from forked task */
				tasks[task_count].priority = tasks[current_task].priority;
 800294e:	4b67      	ldr	r3, [pc, #412]	; (8002aec <rtenv_start_scheduler+0x49c>)
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	4865      	ldr	r0, [pc, #404]	; (8002ae8 <rtenv_start_scheduler+0x498>)
 8002954:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002956:	460b      	mov	r3, r1
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	440b      	add	r3, r1
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	4403      	add	r3, r0
 8002960:	330c      	adds	r3, #12
 8002962:	6819      	ldr	r1, [r3, #0]
 8002964:	4860      	ldr	r0, [pc, #384]	; (8002ae8 <rtenv_start_scheduler+0x498>)
 8002966:	4613      	mov	r3, r2
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	4413      	add	r3, r2
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	4403      	add	r3, r0
 8002970:	330c      	adds	r3, #12
 8002972:	6019      	str	r1, [r3, #0]
				/* Set return values in each process */
				tasks[current_task].stack->r0 = task_count;
 8002974:	495c      	ldr	r1, [pc, #368]	; (8002ae8 <rtenv_start_scheduler+0x498>)
 8002976:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002978:	4613      	mov	r3, r2
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	4413      	add	r3, r2
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	440b      	add	r3, r1
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a59      	ldr	r2, [pc, #356]	; (8002aec <rtenv_start_scheduler+0x49c>)
 8002986:	6812      	ldr	r2, [r2, #0]
 8002988:	629a      	str	r2, [r3, #40]	; 0x28
				tasks[task_count].stack->r0 = 0;
 800298a:	4b58      	ldr	r3, [pc, #352]	; (8002aec <rtenv_start_scheduler+0x49c>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	4956      	ldr	r1, [pc, #344]	; (8002ae8 <rtenv_start_scheduler+0x498>)
 8002990:	4613      	mov	r3, r2
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	4413      	add	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	440b      	add	r3, r1
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2200      	movs	r2, #0
 800299e:	629a      	str	r2, [r3, #40]	; 0x28
				list_init(&tasks[task_count].list);
 80029a0:	4b52      	ldr	r3, [pc, #328]	; (8002aec <rtenv_start_scheduler+0x49c>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4613      	mov	r3, r2
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	4413      	add	r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	f103 0210 	add.w	r2, r3, #16
 80029b0:	4b4d      	ldr	r3, [pc, #308]	; (8002ae8 <rtenv_start_scheduler+0x498>)
 80029b2:	4413      	add	r3, r2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f000 fb77 	bl	80030a8 <list_init>
				list_push(&ready_list[tasks[task_count].priority], &tasks[task_count].list);
 80029ba:	4b4c      	ldr	r3, [pc, #304]	; (8002aec <rtenv_start_scheduler+0x49c>)
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	494a      	ldr	r1, [pc, #296]	; (8002ae8 <rtenv_start_scheduler+0x498>)
 80029c0:	4613      	mov	r3, r2
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	4413      	add	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	440b      	add	r3, r1
 80029ca:	330c      	adds	r3, #12
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	00da      	lsls	r2, r3, #3
 80029d0:	4b47      	ldr	r3, [pc, #284]	; (8002af0 <rtenv_start_scheduler+0x4a0>)
 80029d2:	18d1      	adds	r1, r2, r3
 80029d4:	4b45      	ldr	r3, [pc, #276]	; (8002aec <rtenv_start_scheduler+0x49c>)
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	4613      	mov	r3, r2
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	4413      	add	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	f103 0210 	add.w	r2, r3, #16
 80029e4:	4b40      	ldr	r3, [pc, #256]	; (8002ae8 <rtenv_start_scheduler+0x498>)
 80029e6:	4413      	add	r3, r2
 80029e8:	4608      	mov	r0, r1
 80029ea:	4619      	mov	r1, r3
 80029ec:	f000 fbb6 	bl	800315c <list_push>
				/* There is now one more task */
				task_count++;
 80029f0:	4b3e      	ldr	r3, [pc, #248]	; (8002aec <rtenv_start_scheduler+0x49c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	1c5a      	adds	r2, r3, #1
 80029f6:	4b3d      	ldr	r3, [pc, #244]	; (8002aec <rtenv_start_scheduler+0x49c>)
 80029f8:	601a      	str	r2, [r3, #0]
			}
			break;
 80029fa:	e307      	b.n	800300c <rtenv_start_scheduler+0x9bc>
		case 0x2: /* getpid */
			tasks[current_task].stack->r0 = current_task;
 80029fc:	493a      	ldr	r1, [pc, #232]	; (8002ae8 <rtenv_start_scheduler+0x498>)
 80029fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a00:	4613      	mov	r3, r2
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	4413      	add	r3, r2
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	440b      	add	r3, r1
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a0e:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8002a10:	e2fc      	b.n	800300c <rtenv_start_scheduler+0x9bc>
		case 0x3: /* write */
		    {
		        /* Check fd is valid */
		        int fd = tasks[current_task].stack->r0;
 8002a12:	4935      	ldr	r1, [pc, #212]	; (8002ae8 <rtenv_start_scheduler+0x498>)
 8002a14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a16:	4613      	mov	r3, r2
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	4413      	add	r3, r2
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	440b      	add	r3, r1
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a24:	647b      	str	r3, [r7, #68]	; 0x44
		        if (fd < FILE_LIMIT && files[fd]) {
 8002a26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a28:	2b1f      	cmp	r3, #31
 8002a2a:	dc4e      	bgt.n	8002aca <rtenv_start_scheduler+0x47a>
 8002a2c:	4b31      	ldr	r3, [pc, #196]	; (8002af4 <rtenv_start_scheduler+0x4a4>)
 8002a2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d048      	beq.n	8002aca <rtenv_start_scheduler+0x47a>
		            /* Prepare file request, store reference in r0 */
		            requests[current_task].task = &tasks[current_task];
 8002a38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	4413      	add	r3, r2
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	4a29      	ldr	r2, [pc, #164]	; (8002ae8 <rtenv_start_scheduler+0x498>)
 8002a44:	441a      	add	r2, r3
 8002a46:	492c      	ldr	r1, [pc, #176]	; (8002af8 <rtenv_start_scheduler+0x4a8>)
 8002a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a4a:	011b      	lsls	r3, r3, #4
 8002a4c:	440b      	add	r3, r1
 8002a4e:	601a      	str	r2, [r3, #0]
		            requests[current_task].buf =
		                (void*)tasks[current_task].stack->r1;
 8002a50:	4925      	ldr	r1, [pc, #148]	; (8002ae8 <rtenv_start_scheduler+0x498>)
 8002a52:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a54:	4613      	mov	r3, r2
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	4413      	add	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	440b      	add	r3, r1
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a62:	461a      	mov	r2, r3
		        /* Check fd is valid */
		        int fd = tasks[current_task].stack->r0;
		        if (fd < FILE_LIMIT && files[fd]) {
		            /* Prepare file request, store reference in r0 */
		            requests[current_task].task = &tasks[current_task];
		            requests[current_task].buf =
 8002a64:	4924      	ldr	r1, [pc, #144]	; (8002af8 <rtenv_start_scheduler+0x4a8>)
 8002a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a68:	011b      	lsls	r3, r3, #4
 8002a6a:	440b      	add	r3, r1
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	601a      	str	r2, [r3, #0]
		                (void*)tasks[current_task].stack->r1;
		            requests[current_task].size = tasks[current_task].stack->r2;
 8002a70:	491d      	ldr	r1, [pc, #116]	; (8002ae8 <rtenv_start_scheduler+0x498>)
 8002a72:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a74:	4613      	mov	r3, r2
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	4413      	add	r3, r2
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	440b      	add	r3, r1
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	461a      	mov	r2, r3
 8002a84:	491c      	ldr	r1, [pc, #112]	; (8002af8 <rtenv_start_scheduler+0x4a8>)
 8002a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a88:	011b      	lsls	r3, r3, #4
 8002a8a:	440b      	add	r3, r1
 8002a8c:	3308      	adds	r3, #8
 8002a8e:	601a      	str	r2, [r3, #0]
		            tasks[current_task].stack->r0 =
 8002a90:	4915      	ldr	r1, [pc, #84]	; (8002ae8 <rtenv_start_scheduler+0x498>)
 8002a92:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a94:	4613      	mov	r3, r2
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	4413      	add	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	440b      	add	r3, r1
 8002a9e:	681b      	ldr	r3, [r3, #0]
		                (int)&requests[current_task];
 8002aa0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002aa2:	0111      	lsls	r1, r2, #4
 8002aa4:	4a14      	ldr	r2, [pc, #80]	; (8002af8 <rtenv_start_scheduler+0x4a8>)
 8002aa6:	440a      	add	r2, r1
		            /* Prepare file request, store reference in r0 */
		            requests[current_task].task = &tasks[current_task];
		            requests[current_task].buf =
		                (void*)tasks[current_task].stack->r1;
		            requests[current_task].size = tasks[current_task].stack->r2;
		            tasks[current_task].stack->r0 =
 8002aa8:	629a      	str	r2, [r3, #40]	; 0x28
		                (int)&requests[current_task];

                    /* Write */
			        file_write(files[fd], &requests[current_task],
 8002aaa:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <rtenv_start_scheduler+0x4a4>)
 8002aac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002aae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ab4:	011a      	lsls	r2, r3, #4
 8002ab6:	4b10      	ldr	r3, [pc, #64]	; (8002af8 <rtenv_start_scheduler+0x4a8>)
 8002ab8:	441a      	add	r2, r3
 8002aba:	f107 0310 	add.w	r3, r7, #16
 8002abe:	4608      	mov	r0, r1
 8002ac0:	4611      	mov	r1, r2
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	f7fe fb02 	bl	80010cc <file_write>
			                   &event_monitor);
			    }
			    else {
			        tasks[current_task].stack->r0 = -1;
			    }
			} break;
 8002ac8:	e2a0      	b.n	800300c <rtenv_start_scheduler+0x9bc>
                    /* Write */
			        file_write(files[fd], &requests[current_task],
			                   &event_monitor);
			    }
			    else {
			        tasks[current_task].stack->r0 = -1;
 8002aca:	4907      	ldr	r1, [pc, #28]	; (8002ae8 <rtenv_start_scheduler+0x498>)
 8002acc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002ace:	4613      	mov	r3, r2
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	4413      	add	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	440b      	add	r3, r1
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ade:	629a      	str	r2, [r3, #40]	; 0x28
			    }
			} break;
 8002ae0:	e294      	b.n	800300c <rtenv_start_scheduler+0x9bc>
 8002ae2:	bf00      	nop
 8002ae4:	200008b4 	.word	0x200008b4
 8002ae8:	200007f4 	.word	0x200007f4
 8002aec:	200000dc 	.word	0x200000dc
 8002af0:	200041b4 	.word	0x200041b4
 8002af4:	200040b4 	.word	0x200040b4
 8002af8:	20004134 	.word	0x20004134
		case 0x4: /* read */
            {
		        /* Check fd is valid */
		        int fd = tasks[current_task].stack->r0;
 8002afc:	4998      	ldr	r1, [pc, #608]	; (8002d60 <rtenv_start_scheduler+0x710>)
 8002afe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b00:	4613      	mov	r3, r2
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	4413      	add	r3, r2
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	440b      	add	r3, r1
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0e:	643b      	str	r3, [r7, #64]	; 0x40
		        if (fd < FILE_LIMIT && files[fd]) {
 8002b10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b12:	2b1f      	cmp	r3, #31
 8002b14:	dc4e      	bgt.n	8002bb4 <rtenv_start_scheduler+0x564>
 8002b16:	4b93      	ldr	r3, [pc, #588]	; (8002d64 <rtenv_start_scheduler+0x714>)
 8002b18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d048      	beq.n	8002bb4 <rtenv_start_scheduler+0x564>
		            /* Prepare file request, store reference in r0 */
		            requests[current_task].task = &tasks[current_task];
 8002b22:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b24:	4613      	mov	r3, r2
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	4413      	add	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4a8c      	ldr	r2, [pc, #560]	; (8002d60 <rtenv_start_scheduler+0x710>)
 8002b2e:	441a      	add	r2, r3
 8002b30:	498d      	ldr	r1, [pc, #564]	; (8002d68 <rtenv_start_scheduler+0x718>)
 8002b32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b34:	011b      	lsls	r3, r3, #4
 8002b36:	440b      	add	r3, r1
 8002b38:	601a      	str	r2, [r3, #0]
		            requests[current_task].buf =
		                (void*)tasks[current_task].stack->r1;
 8002b3a:	4989      	ldr	r1, [pc, #548]	; (8002d60 <rtenv_start_scheduler+0x710>)
 8002b3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b3e:	4613      	mov	r3, r2
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	4413      	add	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	440b      	add	r3, r1
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4c:	461a      	mov	r2, r3
		        /* Check fd is valid */
		        int fd = tasks[current_task].stack->r0;
		        if (fd < FILE_LIMIT && files[fd]) {
		            /* Prepare file request, store reference in r0 */
		            requests[current_task].task = &tasks[current_task];
		            requests[current_task].buf =
 8002b4e:	4986      	ldr	r1, [pc, #536]	; (8002d68 <rtenv_start_scheduler+0x718>)
 8002b50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	440b      	add	r3, r1
 8002b56:	3304      	adds	r3, #4
 8002b58:	601a      	str	r2, [r3, #0]
		                (void*)tasks[current_task].stack->r1;
		            requests[current_task].size = tasks[current_task].stack->r2;
 8002b5a:	4981      	ldr	r1, [pc, #516]	; (8002d60 <rtenv_start_scheduler+0x710>)
 8002b5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b5e:	4613      	mov	r3, r2
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	4413      	add	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	440b      	add	r3, r1
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	497e      	ldr	r1, [pc, #504]	; (8002d68 <rtenv_start_scheduler+0x718>)
 8002b70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	440b      	add	r3, r1
 8002b76:	3308      	adds	r3, #8
 8002b78:	601a      	str	r2, [r3, #0]
		            tasks[current_task].stack->r0 =
 8002b7a:	4979      	ldr	r1, [pc, #484]	; (8002d60 <rtenv_start_scheduler+0x710>)
 8002b7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b7e:	4613      	mov	r3, r2
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	4413      	add	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	440b      	add	r3, r1
 8002b88:	681b      	ldr	r3, [r3, #0]
		                (int)&requests[current_task];
 8002b8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b8c:	0111      	lsls	r1, r2, #4
 8002b8e:	4a76      	ldr	r2, [pc, #472]	; (8002d68 <rtenv_start_scheduler+0x718>)
 8002b90:	440a      	add	r2, r1
		            /* Prepare file request, store reference in r0 */
		            requests[current_task].task = &tasks[current_task];
		            requests[current_task].buf =
		                (void*)tasks[current_task].stack->r1;
		            requests[current_task].size = tasks[current_task].stack->r2;
		            tasks[current_task].stack->r0 =
 8002b92:	629a      	str	r2, [r3, #40]	; 0x28
		                (int)&requests[current_task];

                    /* Read */
			        file_read(files[fd], &requests[current_task],
 8002b94:	4b73      	ldr	r3, [pc, #460]	; (8002d64 <rtenv_start_scheduler+0x714>)
 8002b96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002b9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b9e:	011a      	lsls	r2, r3, #4
 8002ba0:	4b71      	ldr	r3, [pc, #452]	; (8002d68 <rtenv_start_scheduler+0x718>)
 8002ba2:	441a      	add	r2, r3
 8002ba4:	f107 0310 	add.w	r3, r7, #16
 8002ba8:	4608      	mov	r0, r1
 8002baa:	4611      	mov	r1, r2
 8002bac:	461a      	mov	r2, r3
 8002bae:	f7fe fa43 	bl	8001038 <file_read>
			                  &event_monitor);
			    }
			    else {
			        tasks[current_task].stack->r0 = -1;
			    }
			} break;
 8002bb2:	e22b      	b.n	800300c <rtenv_start_scheduler+0x9bc>
                    /* Read */
			        file_read(files[fd], &requests[current_task],
			                  &event_monitor);
			    }
			    else {
			        tasks[current_task].stack->r0 = -1;
 8002bb4:	496a      	ldr	r1, [pc, #424]	; (8002d60 <rtenv_start_scheduler+0x710>)
 8002bb6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002bb8:	4613      	mov	r3, r2
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	4413      	add	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	440b      	add	r3, r1
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bc8:	629a      	str	r2, [r3, #40]	; 0x28
			    }
			} break;
 8002bca:	e21f      	b.n	800300c <rtenv_start_scheduler+0x9bc>
		case 0x5: /* interrupt_wait */
			/* Enable interrupt */
			NVIC_EnableIRQ(tasks[current_task].stack->r0);
 8002bcc:	4964      	ldr	r1, [pc, #400]	; (8002d60 <rtenv_start_scheduler+0x710>)
 8002bce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	4413      	add	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	440b      	add	r3, r1
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	b25b      	sxtb	r3, r3
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fe fb68 	bl	80012b8 <NVIC_EnableIRQ>
			/* Block task waiting for interrupt to happen */
			event_monitor_block(&event_monitor,
			                    INTR_EVENT(tasks[current_task].stack->r0),
 8002be8:	495d      	ldr	r1, [pc, #372]	; (8002d60 <rtenv_start_scheduler+0x710>)
 8002bea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002bec:	4613      	mov	r3, r2
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	4413      	add	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	440b      	add	r3, r1
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfa:	332f      	adds	r3, #47	; 0x2f
			} break;
		case 0x5: /* interrupt_wait */
			/* Enable interrupt */
			NVIC_EnableIRQ(tasks[current_task].stack->r0);
			/* Block task waiting for interrupt to happen */
			event_monitor_block(&event_monitor,
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c00:	4613      	mov	r3, r2
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	4413      	add	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	4a55      	ldr	r2, [pc, #340]	; (8002d60 <rtenv_start_scheduler+0x710>)
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f107 0210 	add.w	r2, r7, #16
 8002c10:	4610      	mov	r0, r2
 8002c12:	461a      	mov	r2, r3
 8002c14:	f7fd ff52 	bl	8000abc <event_monitor_block>
			                    INTR_EVENT(tasks[current_task].stack->r0),
			                    &tasks[current_task]);
			tasks[current_task].status = TASK_WAIT_INTR;
 8002c18:	4951      	ldr	r1, [pc, #324]	; (8002d60 <rtenv_start_scheduler+0x710>)
 8002c1a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	4413      	add	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	440b      	add	r3, r1
 8002c26:	3308      	adds	r3, #8
 8002c28:	2203      	movs	r2, #3
 8002c2a:	601a      	str	r2, [r3, #0]
			break;
 8002c2c:	e1ee      	b.n	800300c <rtenv_start_scheduler+0x9bc>
		case 0x6: /* getpriority */
			{
				int who = tasks[current_task].stack->r0;
 8002c2e:	494c      	ldr	r1, [pc, #304]	; (8002d60 <rtenv_start_scheduler+0x710>)
 8002c30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c32:	4613      	mov	r3, r2
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	4413      	add	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	440b      	add	r3, r1
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c40:	63fb      	str	r3, [r7, #60]	; 0x3c
				if (who > 0 && who < (int)task_count)
 8002c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	dd18      	ble.n	8002c7a <rtenv_start_scheduler+0x62a>
 8002c48:	4b48      	ldr	r3, [pc, #288]	; (8002d6c <rtenv_start_scheduler+0x71c>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c50:	429a      	cmp	r2, r3
 8002c52:	dd12      	ble.n	8002c7a <rtenv_start_scheduler+0x62a>
					tasks[current_task].stack->r0 = tasks[who].priority;
 8002c54:	4942      	ldr	r1, [pc, #264]	; (8002d60 <rtenv_start_scheduler+0x710>)
 8002c56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c58:	4613      	mov	r3, r2
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	4413      	add	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	440b      	add	r3, r1
 8002c62:	6819      	ldr	r1, [r3, #0]
 8002c64:	483e      	ldr	r0, [pc, #248]	; (8002d60 <rtenv_start_scheduler+0x710>)
 8002c66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c68:	4613      	mov	r3, r2
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	4413      	add	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	4403      	add	r3, r0
 8002c72:	330c      	adds	r3, #12
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	628b      	str	r3, [r1, #40]	; 0x28
 8002c78:	e021      	b.n	8002cbe <rtenv_start_scheduler+0x66e>
				else if (who == 0)
 8002c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d112      	bne.n	8002ca6 <rtenv_start_scheduler+0x656>
					tasks[current_task].stack->r0 = tasks[current_task].priority;
 8002c80:	4937      	ldr	r1, [pc, #220]	; (8002d60 <rtenv_start_scheduler+0x710>)
 8002c82:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c84:	4613      	mov	r3, r2
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	4413      	add	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	440b      	add	r3, r1
 8002c8e:	6819      	ldr	r1, [r3, #0]
 8002c90:	4833      	ldr	r0, [pc, #204]	; (8002d60 <rtenv_start_scheduler+0x710>)
 8002c92:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c94:	4613      	mov	r3, r2
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	4413      	add	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	4403      	add	r3, r0
 8002c9e:	330c      	adds	r3, #12
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	628b      	str	r3, [r1, #40]	; 0x28
 8002ca4:	e00b      	b.n	8002cbe <rtenv_start_scheduler+0x66e>
				else
					tasks[current_task].stack->r0 = -1;
 8002ca6:	492e      	ldr	r1, [pc, #184]	; (8002d60 <rtenv_start_scheduler+0x710>)
 8002ca8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002caa:	4613      	mov	r3, r2
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	4413      	add	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	440b      	add	r3, r1
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cba:	629a      	str	r2, [r3, #40]	; 0x28
			} break;
 8002cbc:	e1a6      	b.n	800300c <rtenv_start_scheduler+0x9bc>
 8002cbe:	e1a5      	b.n	800300c <rtenv_start_scheduler+0x9bc>
		case 0x7: /* setpriority */
			{
				int who = tasks[current_task].stack->r0;
 8002cc0:	4927      	ldr	r1, [pc, #156]	; (8002d60 <rtenv_start_scheduler+0x710>)
 8002cc2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	4413      	add	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	440b      	add	r3, r1
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd2:	63bb      	str	r3, [r7, #56]	; 0x38
				int value = tasks[current_task].stack->r1;
 8002cd4:	4922      	ldr	r1, [pc, #136]	; (8002d60 <rtenv_start_scheduler+0x710>)
 8002cd6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002cd8:	4613      	mov	r3, r2
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	4413      	add	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	440b      	add	r3, r1
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce6:	637b      	str	r3, [r7, #52]	; 0x34
				value = (value < 0) ? 0 : ((value > PRIORITY_LIMIT) ? PRIORITY_LIMIT : value);
 8002ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	db04      	blt.n	8002cf8 <rtenv_start_scheduler+0x6a8>
 8002cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cf0:	2b27      	cmp	r3, #39	; 0x27
 8002cf2:	bfa8      	it	ge
 8002cf4:	2327      	movge	r3, #39	; 0x27
 8002cf6:	e000      	b.n	8002cfa <rtenv_start_scheduler+0x6aa>
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	637b      	str	r3, [r7, #52]	; 0x34
				if (who > 0 && who < (int)task_count) {
 8002cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	dd38      	ble.n	8002d74 <rtenv_start_scheduler+0x724>
 8002d02:	4b1a      	ldr	r3, [pc, #104]	; (8002d6c <rtenv_start_scheduler+0x71c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	461a      	mov	r2, r3
 8002d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	dd32      	ble.n	8002d74 <rtenv_start_scheduler+0x724>
					tasks[who].priority = value;
 8002d0e:	4914      	ldr	r1, [pc, #80]	; (8002d60 <rtenv_start_scheduler+0x710>)
 8002d10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d12:	4613      	mov	r3, r2
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	4413      	add	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	440b      	add	r3, r1
 8002d1c:	330c      	adds	r3, #12
 8002d1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d20:	601a      	str	r2, [r3, #0]
					if (tasks[who].status == TASK_READY)
 8002d22:	490f      	ldr	r1, [pc, #60]	; (8002d60 <rtenv_start_scheduler+0x710>)
 8002d24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d26:	4613      	mov	r3, r2
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	4413      	add	r3, r2
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	440b      	add	r3, r1
 8002d30:	3308      	adds	r3, #8
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d111      	bne.n	8002d5c <rtenv_start_scheduler+0x70c>
					    list_push(&ready_list[value], &tasks[who].list);
 8002d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d3a:	00da      	lsls	r2, r3, #3
 8002d3c:	4b0c      	ldr	r3, [pc, #48]	; (8002d70 <rtenv_start_scheduler+0x720>)
 8002d3e:	18d1      	adds	r1, r2, r3
 8002d40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d42:	4613      	mov	r3, r2
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	4413      	add	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	f103 0210 	add.w	r2, r3, #16
 8002d4e:	4b04      	ldr	r3, [pc, #16]	; (8002d60 <rtenv_start_scheduler+0x710>)
 8002d50:	4413      	add	r3, r2
 8002d52:	4608      	mov	r0, r1
 8002d54:	4619      	mov	r1, r3
 8002d56:	f000 fa01 	bl	800315c <list_push>
				int who = tasks[current_task].stack->r0;
				int value = tasks[current_task].stack->r1;
				value = (value < 0) ? 0 : ((value > PRIORITY_LIMIT) ? PRIORITY_LIMIT : value);
				if (who > 0 && who < (int)task_count) {
					tasks[who].priority = value;
					if (tasks[who].status == TASK_READY)
 8002d5a:	e036      	b.n	8002dca <rtenv_start_scheduler+0x77a>
 8002d5c:	e035      	b.n	8002dca <rtenv_start_scheduler+0x77a>
 8002d5e:	bf00      	nop
 8002d60:	200007f4 	.word	0x200007f4
 8002d64:	200040b4 	.word	0x200040b4
 8002d68:	20004134 	.word	0x20004134
 8002d6c:	200000dc 	.word	0x200000dc
 8002d70:	200041b4 	.word	0x200041b4
					    list_push(&ready_list[value], &tasks[who].list);
				}
				else if (who == 0) {
 8002d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d11b      	bne.n	8002db2 <rtenv_start_scheduler+0x762>
					tasks[current_task].priority = value;
 8002d7a:	4999      	ldr	r1, [pc, #612]	; (8002fe0 <rtenv_start_scheduler+0x990>)
 8002d7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d7e:	4613      	mov	r3, r2
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	4413      	add	r3, r2
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	440b      	add	r3, r1
 8002d88:	330c      	adds	r3, #12
 8002d8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d8c:	601a      	str	r2, [r3, #0]
				    list_unshift(&ready_list[value], &tasks[current_task].list);
 8002d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d90:	00da      	lsls	r2, r3, #3
 8002d92:	4b94      	ldr	r3, [pc, #592]	; (8002fe4 <rtenv_start_scheduler+0x994>)
 8002d94:	18d1      	adds	r1, r2, r3
 8002d96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d98:	4613      	mov	r3, r2
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	4413      	add	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	f103 0210 	add.w	r2, r3, #16
 8002da4:	4b8e      	ldr	r3, [pc, #568]	; (8002fe0 <rtenv_start_scheduler+0x990>)
 8002da6:	4413      	add	r3, r2
 8002da8:	4608      	mov	r0, r1
 8002daa:	4619      	mov	r1, r3
 8002dac:	f000 f9b6 	bl	800311c <list_unshift>
 8002db0:	e00b      	b.n	8002dca <rtenv_start_scheduler+0x77a>
				}
				else {
					tasks[current_task].stack->r0 = -1;
 8002db2:	498b      	ldr	r1, [pc, #556]	; (8002fe0 <rtenv_start_scheduler+0x990>)
 8002db4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002db6:	4613      	mov	r3, r2
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	4413      	add	r3, r2
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	440b      	add	r3, r1
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002dc6:	629a      	str	r2, [r3, #40]	; 0x28
					break;
 8002dc8:	e120      	b.n	800300c <rtenv_start_scheduler+0x9bc>
				}
				tasks[current_task].stack->r0 = 0;
 8002dca:	4985      	ldr	r1, [pc, #532]	; (8002fe0 <rtenv_start_scheduler+0x990>)
 8002dcc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002dce:	4613      	mov	r3, r2
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	4413      	add	r3, r2
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	440b      	add	r3, r1
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	629a      	str	r2, [r3, #40]	; 0x28
			} break;
 8002dde:	e115      	b.n	800300c <rtenv_start_scheduler+0x9bc>
		case 0x8: /* mknod */
			tasks[current_task].stack->r0 =
 8002de0:	497f      	ldr	r1, [pc, #508]	; (8002fe0 <rtenv_start_scheduler+0x990>)
 8002de2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002de4:	4613      	mov	r3, r2
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	4413      	add	r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	440b      	add	r3, r1
 8002dee:	681c      	ldr	r4, [r3, #0]
				file_mknod(tasks[current_task].stack->r0,
 8002df0:	497b      	ldr	r1, [pc, #492]	; (8002fe0 <rtenv_start_scheduler+0x990>)
 8002df2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002df4:	4613      	mov	r3, r2
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	4413      	add	r3, r2
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	440b      	add	r3, r1
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e02:	4618      	mov	r0, r3
 8002e04:	4976      	ldr	r1, [pc, #472]	; (8002fe0 <rtenv_start_scheduler+0x990>)
 8002e06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e08:	4613      	mov	r3, r2
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	4413      	add	r3, r2
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	440b      	add	r3, r1
 8002e12:	3304      	adds	r3, #4
 8002e14:	6819      	ldr	r1, [r3, #0]
				           tasks[current_task].pid,
				           files,
					       tasks[current_task].stack->r2,
 8002e16:	4d72      	ldr	r5, [pc, #456]	; (8002fe0 <rtenv_start_scheduler+0x990>)
 8002e18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	4413      	add	r3, r2
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	442b      	add	r3, r5
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				}
				tasks[current_task].stack->r0 = 0;
			} break;
		case 0x8: /* mknod */
			tasks[current_task].stack->r0 =
				file_mknod(tasks[current_task].stack->r0,
 8002e28:	f107 0218 	add.w	r2, r7, #24
 8002e2c:	9200      	str	r2, [sp, #0]
 8002e2e:	f107 0210 	add.w	r2, r7, #16
 8002e32:	9201      	str	r2, [sp, #4]
 8002e34:	4a6c      	ldr	r2, [pc, #432]	; (8002fe8 <rtenv_start_scheduler+0x998>)
 8002e36:	f7fe f993 	bl	8001160 <file_mknod>
 8002e3a:	4603      	mov	r3, r0
					break;
				}
				tasks[current_task].stack->r0 = 0;
			} break;
		case 0x8: /* mknod */
			tasks[current_task].stack->r0 =
 8002e3c:	62a3      	str	r3, [r4, #40]	; 0x28
				           tasks[current_task].pid,
				           files,
					       tasks[current_task].stack->r2,
					       &memory_pool,
					       &event_monitor);
			break;
 8002e3e:	e0e5      	b.n	800300c <rtenv_start_scheduler+0x9bc>
		case 0x9: /* sleep */
			if (tasks[current_task].stack->r0 != 0) {
 8002e40:	4967      	ldr	r1, [pc, #412]	; (8002fe0 <rtenv_start_scheduler+0x990>)
 8002e42:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e44:	4613      	mov	r3, r2
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	4413      	add	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	440b      	add	r3, r1
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d02c      	beq.n	8002eb0 <rtenv_start_scheduler+0x860>
				tasks[current_task].stack->r0 += tick_count;
 8002e56:	4962      	ldr	r1, [pc, #392]	; (8002fe0 <rtenv_start_scheduler+0x990>)
 8002e58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	4413      	add	r3, r2
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	440b      	add	r3, r1
 8002e64:	6819      	ldr	r1, [r3, #0]
 8002e66:	485e      	ldr	r0, [pc, #376]	; (8002fe0 <rtenv_start_scheduler+0x990>)
 8002e68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	4413      	add	r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	4403      	add	r3, r0
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	628b      	str	r3, [r1, #40]	; 0x28
			    event_monitor_block(&event_monitor, TIME_EVENT,
 8002e7e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e80:	4613      	mov	r3, r2
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	4413      	add	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	4a55      	ldr	r2, [pc, #340]	; (8002fe0 <rtenv_start_scheduler+0x990>)
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f107 0210 	add.w	r2, r7, #16
 8002e90:	4610      	mov	r0, r2
 8002e92:	218a      	movs	r1, #138	; 0x8a
 8002e94:	461a      	mov	r2, r3
 8002e96:	f7fd fe11 	bl	8000abc <event_monitor_block>
			                        &tasks[current_task]);
				tasks[current_task].status = TASK_WAIT_TIME;
 8002e9a:	4951      	ldr	r1, [pc, #324]	; (8002fe0 <rtenv_start_scheduler+0x990>)
 8002e9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	4413      	add	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	440b      	add	r3, r1
 8002ea8:	3308      	adds	r3, #8
 8002eaa:	2204      	movs	r2, #4
 8002eac:	601a      	str	r2, [r3, #0]
			}
			break;
 8002eae:	e0ad      	b.n	800300c <rtenv_start_scheduler+0x9bc>
 8002eb0:	e0ac      	b.n	800300c <rtenv_start_scheduler+0x9bc>
		case 0xa: /* lseek */
            {
		        /* Check fd is valid */
		        int fd = tasks[current_task].stack->r0;
 8002eb2:	494b      	ldr	r1, [pc, #300]	; (8002fe0 <rtenv_start_scheduler+0x990>)
 8002eb4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	4413      	add	r3, r2
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	440b      	add	r3, r1
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec4:	633b      	str	r3, [r7, #48]	; 0x30
		        if (fd < FILE_LIMIT && files[fd]) {
 8002ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec8:	2b1f      	cmp	r3, #31
 8002eca:	dc55      	bgt.n	8002f78 <rtenv_start_scheduler+0x928>
 8002ecc:	4b46      	ldr	r3, [pc, #280]	; (8002fe8 <rtenv_start_scheduler+0x998>)
 8002ece:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d04f      	beq.n	8002f78 <rtenv_start_scheduler+0x928>
		            /* Prepare file request, store reference in r0 */
		            requests[current_task].task = &tasks[current_task];
 8002ed8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002eda:	4613      	mov	r3, r2
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	4413      	add	r3, r2
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	4a3f      	ldr	r2, [pc, #252]	; (8002fe0 <rtenv_start_scheduler+0x990>)
 8002ee4:	441a      	add	r2, r3
 8002ee6:	4941      	ldr	r1, [pc, #260]	; (8002fec <rtenv_start_scheduler+0x99c>)
 8002ee8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	440b      	add	r3, r1
 8002eee:	601a      	str	r2, [r3, #0]
		            requests[current_task].buf = NULL;
 8002ef0:	4a3e      	ldr	r2, [pc, #248]	; (8002fec <rtenv_start_scheduler+0x99c>)
 8002ef2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	4413      	add	r3, r2
 8002ef8:	3304      	adds	r3, #4
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]
		            requests[current_task].size = tasks[current_task].stack->r1;
 8002efe:	4938      	ldr	r1, [pc, #224]	; (8002fe0 <rtenv_start_scheduler+0x990>)
 8002f00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f02:	4613      	mov	r3, r2
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	4413      	add	r3, r2
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	440b      	add	r3, r1
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f10:	461a      	mov	r2, r3
 8002f12:	4936      	ldr	r1, [pc, #216]	; (8002fec <rtenv_start_scheduler+0x99c>)
 8002f14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f16:	011b      	lsls	r3, r3, #4
 8002f18:	440b      	add	r3, r1
 8002f1a:	3308      	adds	r3, #8
 8002f1c:	601a      	str	r2, [r3, #0]
		            requests[current_task].whence = tasks[current_task].stack->r2;
 8002f1e:	4930      	ldr	r1, [pc, #192]	; (8002fe0 <rtenv_start_scheduler+0x990>)
 8002f20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f22:	4613      	mov	r3, r2
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	4413      	add	r3, r2
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	440b      	add	r3, r1
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f30:	461a      	mov	r2, r3
 8002f32:	492e      	ldr	r1, [pc, #184]	; (8002fec <rtenv_start_scheduler+0x99c>)
 8002f34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f36:	011b      	lsls	r3, r3, #4
 8002f38:	440b      	add	r3, r1
 8002f3a:	330c      	adds	r3, #12
 8002f3c:	601a      	str	r2, [r3, #0]
		            tasks[current_task].stack->r0 =
 8002f3e:	4928      	ldr	r1, [pc, #160]	; (8002fe0 <rtenv_start_scheduler+0x990>)
 8002f40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f42:	4613      	mov	r3, r2
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	4413      	add	r3, r2
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	440b      	add	r3, r1
 8002f4c:	681b      	ldr	r3, [r3, #0]
		                (int)&requests[current_task];
 8002f4e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f50:	0111      	lsls	r1, r2, #4
 8002f52:	4a26      	ldr	r2, [pc, #152]	; (8002fec <rtenv_start_scheduler+0x99c>)
 8002f54:	440a      	add	r2, r1
		            /* Prepare file request, store reference in r0 */
		            requests[current_task].task = &tasks[current_task];
		            requests[current_task].buf = NULL;
		            requests[current_task].size = tasks[current_task].stack->r1;
		            requests[current_task].whence = tasks[current_task].stack->r2;
		            tasks[current_task].stack->r0 =
 8002f56:	629a      	str	r2, [r3, #40]	; 0x28
		                (int)&requests[current_task];

                    /* Read */
			        file_lseek(files[fd], &requests[current_task],
 8002f58:	4b23      	ldr	r3, [pc, #140]	; (8002fe8 <rtenv_start_scheduler+0x998>)
 8002f5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002f60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f62:	011a      	lsls	r2, r3, #4
 8002f64:	4b21      	ldr	r3, [pc, #132]	; (8002fec <rtenv_start_scheduler+0x99c>)
 8002f66:	441a      	add	r2, r3
 8002f68:	f107 0310 	add.w	r3, r7, #16
 8002f6c:	4608      	mov	r0, r1
 8002f6e:	4611      	mov	r1, r2
 8002f70:	461a      	mov	r2, r3
 8002f72:	f7fe f94d 	bl	8001210 <file_lseek>
			                   &event_monitor);
			    }
			    else {
			        tasks[current_task].stack->r0 = -1;
			    }
			} break;
 8002f76:	e049      	b.n	800300c <rtenv_start_scheduler+0x9bc>
                    /* Read */
			        file_lseek(files[fd], &requests[current_task],
			                   &event_monitor);
			    }
			    else {
			        tasks[current_task].stack->r0 = -1;
 8002f78:	4919      	ldr	r1, [pc, #100]	; (8002fe0 <rtenv_start_scheduler+0x990>)
 8002f7a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	4413      	add	r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	440b      	add	r3, r1
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f8c:	629a      	str	r2, [r3, #40]	; 0x28
			    }
			} break;
 8002f8e:	e03d      	b.n	800300c <rtenv_start_scheduler+0x9bc>
		default: /* Catch all interrupts */
			if ((int)tasks[current_task].stack->r7 < 0) {
 8002f90:	4913      	ldr	r1, [pc, #76]	; (8002fe0 <rtenv_start_scheduler+0x990>)
 8002f92:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f94:	4613      	mov	r3, r2
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	4413      	add	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	440b      	add	r3, r1
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	da32      	bge.n	800300c <rtenv_start_scheduler+0x9bc>
				unsigned int intr = -tasks[current_task].stack->r7 - 16;
 8002fa6:	490e      	ldr	r1, [pc, #56]	; (8002fe0 <rtenv_start_scheduler+0x990>)
 8002fa8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002faa:	4613      	mov	r3, r2
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	4413      	add	r3, r2
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	440b      	add	r3, r1
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68da      	ldr	r2, [r3, #12]
 8002fb8:	f06f 030f 	mvn.w	r3, #15
 8002fbc:	1a9b      	subs	r3, r3, r2
 8002fbe:	62fb      	str	r3, [r7, #44]	; 0x2c

				if (intr == SysTick_IRQn) {
 8002fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fc6:	d113      	bne.n	8002ff0 <rtenv_start_scheduler+0x9a0>
					/* Never disable timer. We need it for pre-emption */
					timeup = 1;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	64fb      	str	r3, [r7, #76]	; 0x4c
					tick_count++;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	60fb      	str	r3, [r7, #12]
					event_monitor_release(&event_monitor, TIME_EVENT);
 8002fd2:	f107 0310 	add.w	r3, r7, #16
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	218a      	movs	r1, #138	; 0x8a
 8002fda:	f7fd fd8d 	bl	8000af8 <event_monitor_release>
 8002fde:	e00d      	b.n	8002ffc <rtenv_start_scheduler+0x9ac>
 8002fe0:	200007f4 	.word	0x200007f4
 8002fe4:	200041b4 	.word	0x200041b4
 8002fe8:	200040b4 	.word	0x200040b4
 8002fec:	20004134 	.word	0x20004134
				}
				else {
					/* Disable interrupt, interrupt_wait re-enables */
					NVIC_DisableIRQ(intr);
 8002ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	b25b      	sxtb	r3, r3
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fe f976 	bl	80012e8 <NVIC_DisableIRQ>
				}
				event_monitor_release(&event_monitor, INTR_EVENT(intr));
 8002ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ffe:	332f      	adds	r3, #47	; 0x2f
 8003000:	f107 0210 	add.w	r2, r7, #16
 8003004:	4610      	mov	r0, r2
 8003006:	4619      	mov	r1, r3
 8003008:	f7fd fd76 	bl	8000af8 <event_monitor_release>
			}
		}

        /* Rearrange ready list and event list */
		event_monitor_serve(&event_monitor);
 800300c:	f107 0310 	add.w	r3, r7, #16
 8003010:	4618      	mov	r0, r3
 8003012:	f7fd fd85 	bl	8000b20 <event_monitor_serve>

		/* Check whether to context switch */
		task = &tasks[current_task];
 8003016:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003018:	4613      	mov	r3, r2
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	4413      	add	r3, r2
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	4a1f      	ldr	r2, [pc, #124]	; (80030a0 <rtenv_start_scheduler+0xa50>)
 8003022:	4413      	add	r3, r2
 8003024:	62bb      	str	r3, [r7, #40]	; 0x28
		if (timeup && ready_list[task->priority].next == &task->list)
 8003026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003028:	2b00      	cmp	r3, #0
 800302a:	d01b      	beq.n	8003064 <rtenv_start_scheduler+0xa14>
 800302c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	4a1c      	ldr	r2, [pc, #112]	; (80030a4 <rtenv_start_scheduler+0xa54>)
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	4413      	add	r3, r2
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303a:	3310      	adds	r3, #16
 800303c:	429a      	cmp	r2, r3
 800303e:	d111      	bne.n	8003064 <rtenv_start_scheduler+0xa14>
		    list_push(&ready_list[task->priority], &tasks[current_task].list);
 8003040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	00da      	lsls	r2, r3, #3
 8003046:	4b17      	ldr	r3, [pc, #92]	; (80030a4 <rtenv_start_scheduler+0xa54>)
 8003048:	18d1      	adds	r1, r2, r3
 800304a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800304c:	4613      	mov	r3, r2
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	4413      	add	r3, r2
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	f103 0210 	add.w	r2, r3, #16
 8003058:	4b11      	ldr	r3, [pc, #68]	; (80030a0 <rtenv_start_scheduler+0xa50>)
 800305a:	4413      	add	r3, r2
 800305c:	4608      	mov	r0, r1
 800305e:	4619      	mov	r1, r3
 8003060:	f000 f87c 	bl	800315c <list_push>

		/* Select next TASK_READY task */
		for (i = 0; list_empty(&ready_list[i]); i++);
 8003064:	2300      	movs	r3, #0
 8003066:	653b      	str	r3, [r7, #80]	; 0x50
 8003068:	e002      	b.n	8003070 <rtenv_start_scheduler+0xa20>
 800306a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800306c:	3301      	adds	r3, #1
 800306e:	653b      	str	r3, [r7, #80]	; 0x50
 8003070:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003072:	00da      	lsls	r2, r3, #3
 8003074:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <rtenv_start_scheduler+0xa54>)
 8003076:	4413      	add	r3, r2
 8003078:	4618      	mov	r0, r3
 800307a:	f000 f827 	bl	80030cc <list_empty>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1f2      	bne.n	800306a <rtenv_start_scheduler+0xa1a>

		list = ready_list[i].next;
 8003084:	4a07      	ldr	r2, [pc, #28]	; (80030a4 <rtenv_start_scheduler+0xa54>)
 8003086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	4413      	add	r3, r2
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	627b      	str	r3, [r7, #36]	; 0x24
		task = list_entry(list, struct task_control_block, list);
 8003090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003092:	3b10      	subs	r3, #16
 8003094:	62bb      	str	r3, [r7, #40]	; 0x28
		current_task = task->pid;
 8003096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	657b      	str	r3, [r7, #84]	; 0x54
	}
 800309c:	f7ff bb9f 	b.w	80027de <rtenv_start_scheduler+0x18e>
 80030a0:	200007f4 	.word	0x200007f4
 80030a4:	200041b4 	.word	0x200041b4

080030a8 <list_init>:
#include "list.h"

void list_init(struct list* list)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
    if (list) {
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d005      	beq.n	80030c2 <list_init+0x1a>
        list->prev = list;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	601a      	str	r2, [r3, #0]
        list->next = list;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	605a      	str	r2, [r3, #4]
    }
}
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <list_empty>:

int list_empty(struct list *list)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
    return list->next == list;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	429a      	cmp	r2, r3
 80030dc:	bf14      	ite	ne
 80030de:	2300      	movne	r3, #0
 80030e0:	2301      	moveq	r3, #1
 80030e2:	b2db      	uxtb	r3, r3
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <list_remove>:

void list_remove(struct list *list)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
    if (list) {
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d009      	beq.n	8003112 <list_remove+0x22>
        list->next->prev = list->prev;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6812      	ldr	r2, [r2, #0]
 8003106:	601a      	str	r2, [r3, #0]
        list->prev->next = list->next;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6852      	ldr	r2, [r2, #4]
 8003110:	605a      	str	r2, [r3, #4]
    }
}
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <list_unshift>:

void list_unshift(struct list *list, struct list *new)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
    if (list && new) {
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d013      	beq.n	8003154 <list_unshift+0x38>
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d010      	beq.n	8003154 <list_unshift+0x38>
        list_remove(new);
 8003132:	6838      	ldr	r0, [r7, #0]
 8003134:	f7ff ffdc 	bl	80030f0 <list_remove>

        list->next->prev = new;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	601a      	str	r2, [r3, #0]
        new->next = list->next;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	605a      	str	r2, [r3, #4]
        new->prev = list;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	601a      	str	r2, [r3, #0]
        list->next = new;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	605a      	str	r2, [r3, #4]
    }
}
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop

0800315c <list_push>:

void list_push(struct list *list, struct list *new)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
    if (list && new) {
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d01a      	beq.n	80031a2 <list_push+0x46>
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d017      	beq.n	80031a2 <list_push+0x46>
        /* Remove new from origin list */
        new->prev->next = new->next;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	6852      	ldr	r2, [r2, #4]
 800317a:	605a      	str	r2, [r3, #4]
        new->next->prev = new->prev;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	6812      	ldr	r2, [r2, #0]
 8003184:	601a      	str	r2, [r3, #0]

        list->prev->next = new;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	605a      	str	r2, [r3, #4]
        new->next = list;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	605a      	str	r2, [r3, #4]
        new->prev = list->prev;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	601a      	str	r2, [r3, #0]
        list->prev = new;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	601a      	str	r2, [r3, #0]
    }
}
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <list_shift>:

struct list* list_shift(struct list *list)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
    struct list *first = list->next;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	60fb      	str	r3, [r7, #12]

    if (first == list)
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d101      	bne.n	80031c6 <list_shift+0x1a>
        return 0;
 80031c2:	2300      	movs	r3, #0
 80031c4:	e008      	b.n	80031d8 <list_shift+0x2c>

    list->next = first->next;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	605a      	str	r2, [r3, #4]
    list->next->prev = list;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	601a      	str	r2, [r3, #0]

    return first;
 80031d6:	68fb      	ldr	r3, [r7, #12]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <memory_pool_init>:
#include "memory-pool.h"



void memory_pool_init(struct memory_pool *pool, size_t size, char *memory)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
    pool->offset = 0;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]
    pool->size = size;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	68ba      	ldr	r2, [r7, #8]
 80031fa:	605a      	str	r2, [r3, #4]
    pool->memory = memory;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	609a      	str	r2, [r3, #8]
}
 8003202:	3714      	adds	r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <memory_pool_alloc>:

void *memory_pool_alloc(struct memory_pool *pool, size_t size)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
    if (pool->offset + size <= pool->size) {
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	461a      	mov	r2, r3
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	441a      	add	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	429a      	cmp	r2, r3
 8003226:	d80f      	bhi.n	8003248 <memory_pool_alloc+0x3c>
        char *alloc = pool->memory + pool->offset;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4413      	add	r3, r2
 8003232:	60fb      	str	r3, [r7, #12]
        pool->offset += size;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	461a      	mov	r2, r3
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	4413      	add	r3, r2
 800323e:	461a      	mov	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	601a      	str	r2, [r3, #0]
        return alloc;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	e000      	b.n	800324a <memory_pool_alloc+0x3e>
    }

    return NULL;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop

08003258 <mq_open>:
	.lseekable = NULL,
	.lseek = NULL,
};

int mq_open(const char *name, int oflag)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
	if (oflag & O_CREAT)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b00      	cmp	r3, #0
 800326a:	d004      	beq.n	8003276 <mq_open+0x1e>
		mkfile(name, 0, S_IMSGQ);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	2100      	movs	r1, #0
 8003270:	2202      	movs	r2, #2
 8003272:	f7fd fde5 	bl	8000e40 <mkfile>
	return open(name, 0);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	2100      	movs	r1, #0
 800327a:	f7fd fe53 	bl	8000f24 <open>
 800327e:	4603      	mov	r3, r0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <mq_init>:

int
mq_init(int fd, int driver_pid, struct file *files[],
        struct memory_pool *memory_pool, struct event_monitor *monitor)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
 8003294:	603b      	str	r3, [r7, #0]
    struct pipe_ringbuffer *pipe;

    pipe = memory_pool_alloc(memory_pool, sizeof(struct pipe_ringbuffer));
 8003296:	6838      	ldr	r0, [r7, #0]
 8003298:	2158      	movs	r1, #88	; 0x58
 800329a:	f7ff ffb7 	bl	800320c <memory_pool_alloc>
 800329e:	6178      	str	r0, [r7, #20]

    if (!pipe)
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d102      	bne.n	80032ac <mq_init+0x24>
        return -1;
 80032a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032aa:	e033      	b.n	8003314 <mq_init+0x8c>

    pipe->start = 0;
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	2200      	movs	r2, #0
 80032b0:	609a      	str	r2, [r3, #8]
    pipe->end = 0;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	2200      	movs	r2, #0
 80032b6:	60da      	str	r2, [r3, #12]
	pipe->file.ops = &mq_ops;
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	4a18      	ldr	r2, [pc, #96]	; (800331c <mq_init+0x94>)
 80032bc:	605a      	str	r2, [r3, #4]
    files[fd] = &pipe->file;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	4413      	add	r3, r2
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	601a      	str	r2, [r3, #0]

    pipe->read_event = event_monitor_find_free(monitor);
 80032ca:	6a38      	ldr	r0, [r7, #32]
 80032cc:	f7fd fba6 	bl	8000a1c <event_monitor_find_free>
 80032d0:	4602      	mov	r2, r0
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	611a      	str	r2, [r3, #16]
    event_monitor_register(monitor, pipe->read_event, pipe_read_release, files[fd]);
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	691a      	ldr	r2, [r3, #16]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	440b      	add	r3, r1
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6a38      	ldr	r0, [r7, #32]
 80032e6:	4611      	mov	r1, r2
 80032e8:	4a0d      	ldr	r2, [pc, #52]	; (8003320 <mq_init+0x98>)
 80032ea:	f7fd fbbd 	bl	8000a68 <event_monitor_register>

    pipe->write_event = event_monitor_find_free(monitor);
 80032ee:	6a38      	ldr	r0, [r7, #32]
 80032f0:	f7fd fb94 	bl	8000a1c <event_monitor_find_free>
 80032f4:	4602      	mov	r2, r0
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	615a      	str	r2, [r3, #20]
    event_monitor_register(monitor, pipe->write_event, pipe_write_release, files[fd]);
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	695a      	ldr	r2, [r3, #20]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	440b      	add	r3, r1
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6a38      	ldr	r0, [r7, #32]
 800330a:	4611      	mov	r1, r2
 800330c:	4a05      	ldr	r2, [pc, #20]	; (8003324 <mq_init+0x9c>)
 800330e:	f7fd fbab 	bl	8000a68 <event_monitor_register>
    return 0;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	2000003c 	.word	0x2000003c
 8003320:	08003f2d 	.word	0x08003f2d
 8003324:	08003f5d 	.word	0x08003f5d

08003328 <mq_readable>:

int
mq_readable (struct file *file, struct file_request *request,
             struct event_monitor *monitor)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08a      	sub	sp, #40	; 0x28
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
	size_t msg_len;

	struct pipe_ringbuffer *pipe =
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	61bb      	str	r3, [r7, #24]
	    container_of(file, struct pipe_ringbuffer, file);

	/* Trying to read too much */
	if ((size_t)PIPE_LEN(*pipe) < sizeof(size_t)) {
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	68da      	ldr	r2, [r3, #12]
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	1ad2      	subs	r2, r2, r3
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	68d9      	ldr	r1, [r3, #12]
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	4299      	cmp	r1, r3
 800334c:	da01      	bge.n	8003352 <mq_readable+0x2a>
 800334e:	2340      	movs	r3, #64	; 0x40
 8003350:	e000      	b.n	8003354 <mq_readable+0x2c>
 8003352:	2300      	movs	r3, #0
 8003354:	4413      	add	r3, r2
 8003356:	2b03      	cmp	r3, #3
 8003358:	d80a      	bhi.n	8003370 <mq_readable+0x48>
		/* Nothing to read */
	    event_monitor_block(monitor, pipe->read_event, request->task);
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	691a      	ldr	r2, [r3, #16]
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	4611      	mov	r1, r2
 8003366:	461a      	mov	r2, r3
 8003368:	f7fd fba8 	bl	8000abc <event_monitor_block>
		return FILE_ACCESS_BLOCK;
 800336c:	2300      	movs	r3, #0
 800336e:	e028      	b.n	80033c2 <mq_readable+0x9a>
	}

	PIPE_PEEK(*pipe, msg_len, 4);
 8003370:	2304      	movs	r3, #4
 8003372:	627b      	str	r3, [r7, #36]	; 0x24
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	623b      	str	r3, [r7, #32]
 800337a:	2300      	movs	r3, #0
 800337c:	61fb      	str	r3, [r7, #28]
 800337e:	e011      	b.n	80033a4 <mq_readable+0x7c>
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	1c5a      	adds	r2, r3, #1
 8003384:	61fa      	str	r2, [r7, #28]
 8003386:	f107 0214 	add.w	r2, r7, #20
 800338a:	441a      	add	r2, r3
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	1c59      	adds	r1, r3, #1
 8003390:	6239      	str	r1, [r7, #32]
 8003392:	69b9      	ldr	r1, [r7, #24]
 8003394:	440b      	add	r3, r1
 8003396:	7e1b      	ldrb	r3, [r3, #24]
 8003398:	7013      	strb	r3, [r2, #0]
 800339a:	6a3b      	ldr	r3, [r7, #32]
 800339c:	2b3f      	cmp	r3, #63	; 0x3f
 800339e:	dd01      	ble.n	80033a4 <mq_readable+0x7c>
 80033a0:	2300      	movs	r3, #0
 80033a2:	623b      	str	r3, [r7, #32]
 80033a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a6:	1e5a      	subs	r2, r3, #1
 80033a8:	627a      	str	r2, [r7, #36]	; 0x24
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1e8      	bne.n	8003380 <mq_readable+0x58>

	if (msg_len > request->size) {
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	461a      	mov	r2, r3
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d202      	bcs.n	80033c0 <mq_readable+0x98>
		/* Trying to read more than buffer size */
		return FILE_ACCESS_ERROR;
 80033ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033be:	e000      	b.n	80033c2 <mq_readable+0x9a>
	}
	return FILE_ACCESS_ACCEPT;
 80033c0:	2301      	movs	r3, #1
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3728      	adds	r7, #40	; 0x28
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop

080033cc <mq_writable>:

int
mq_writable (struct file *file, struct file_request *request,
             struct event_monitor *monitor)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
	size_t total_len = sizeof(size_t) + request->size;
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	3304      	adds	r3, #4
 80033de:	617b      	str	r3, [r7, #20]
	struct pipe_ringbuffer *pipe =
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	613b      	str	r3, [r7, #16]
	    container_of(file, struct pipe_ringbuffer, file);

	/* If the write would be non-atomic */
	if (total_len > PIPE_BUF) {
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	2b40      	cmp	r3, #64	; 0x40
 80033e8:	d902      	bls.n	80033f0 <mq_writable+0x24>
		return FILE_ACCESS_ERROR;
 80033ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033ee:	e01f      	b.n	8003430 <mq_writable+0x64>
	}
	/* Preserve 1 byte to distiguish empty or full */
	if ((size_t)PIPE_BUF - PIPE_LEN(*pipe) - 1 < total_len) {
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	1ad2      	subs	r2, r2, r3
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	68d9      	ldr	r1, [r3, #12]
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	4299      	cmp	r1, r3
 8003404:	da01      	bge.n	800340a <mq_writable+0x3e>
 8003406:	2340      	movs	r3, #64	; 0x40
 8003408:	e000      	b.n	800340c <mq_writable+0x40>
 800340a:	2300      	movs	r3, #0
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	f103 023f 	add.w	r2, r3, #63	; 0x3f
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	429a      	cmp	r2, r3
 8003416:	d20a      	bcs.n	800342e <mq_writable+0x62>
		/* Trying to write more than we have space for: block */
	    event_monitor_block(monitor, pipe->write_event, request->task);
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	695a      	ldr	r2, [r3, #20]
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	4611      	mov	r1, r2
 8003424:	461a      	mov	r2, r3
 8003426:	f7fd fb49 	bl	8000abc <event_monitor_block>
		return FILE_ACCESS_BLOCK;
 800342a:	2300      	movs	r3, #0
 800342c:	e000      	b.n	8003430 <mq_writable+0x64>
	}
	return FILE_ACCESS_ACCEPT;
 800342e:	2301      	movs	r3, #1
}
 8003430:	4618      	mov	r0, r3
 8003432:	3718      	adds	r7, #24
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <mq_read>:

int
mq_read (struct file *file, struct file_request *request,
         struct event_monitor *monitor)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b088      	sub	sp, #32
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
	size_t msg_len;
	size_t i;
	struct pipe_ringbuffer *pipe =
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	61bb      	str	r3, [r7, #24]
	    container_of(file, struct pipe_ringbuffer, file);

	/* Get length */
	for (i = 0; i < 4; i++) {
 8003448:	2300      	movs	r3, #0
 800344a:	61fb      	str	r3, [r7, #28]
 800344c:	e018      	b.n	8003480 <mq_read+0x48>
		PIPE_POP(*pipe, *(((char*)&msg_len)+i));
 800344e:	f107 0214 	add.w	r2, r7, #20
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	4413      	add	r3, r2
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	6892      	ldr	r2, [r2, #8]
 800345a:	69b9      	ldr	r1, [r7, #24]
 800345c:	440a      	add	r2, r1
 800345e:	7e12      	ldrb	r2, [r2, #24]
 8003460:	701a      	strb	r2, [r3, #0]
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	1c5a      	adds	r2, r3, #1
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	609a      	str	r2, [r3, #8]
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	2b3f      	cmp	r3, #63	; 0x3f
 8003472:	dd02      	ble.n	800347a <mq_read+0x42>
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	2200      	movs	r2, #0
 8003478:	609a      	str	r2, [r3, #8]
	size_t i;
	struct pipe_ringbuffer *pipe =
	    container_of(file, struct pipe_ringbuffer, file);

	/* Get length */
	for (i = 0; i < 4; i++) {
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	3301      	adds	r3, #1
 800347e:	61fb      	str	r3, [r7, #28]
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	2b03      	cmp	r3, #3
 8003484:	d9e3      	bls.n	800344e <mq_read+0x16>
		PIPE_POP(*pipe, *(((char*)&msg_len)+i));
	}
	/* Copy data into buf */
	for (i = 0; i < msg_len; i++) {
 8003486:	2300      	movs	r3, #0
 8003488:	61fb      	str	r3, [r7, #28]
 800348a:	e018      	b.n	80034be <mq_read+0x86>
		PIPE_POP(*pipe, request->buf[i]);
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	4413      	add	r3, r2
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	6892      	ldr	r2, [r2, #8]
 8003498:	69b9      	ldr	r1, [r7, #24]
 800349a:	440a      	add	r2, r1
 800349c:	7e12      	ldrb	r2, [r2, #24]
 800349e:	701a      	strb	r2, [r3, #0]
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	609a      	str	r2, [r3, #8]
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	2b3f      	cmp	r3, #63	; 0x3f
 80034b0:	dd02      	ble.n	80034b8 <mq_read+0x80>
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	2200      	movs	r2, #0
 80034b6:	609a      	str	r2, [r3, #8]
	/* Get length */
	for (i = 0; i < 4; i++) {
		PIPE_POP(*pipe, *(((char*)&msg_len)+i));
	}
	/* Copy data into buf */
	for (i = 0; i < msg_len; i++) {
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	3301      	adds	r3, #1
 80034bc:	61fb      	str	r3, [r7, #28]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	69fa      	ldr	r2, [r7, #28]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d3e2      	bcc.n	800348c <mq_read+0x54>
		PIPE_POP(*pipe, request->buf[i]);
	}

    /* Prepared to write */
	event_monitor_release(monitor, pipe->write_event);
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	4619      	mov	r1, r3
 80034ce:	f7fd fb13 	bl	8000af8 <event_monitor_release>
	return msg_len;
 80034d2:	697b      	ldr	r3, [r7, #20]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3720      	adds	r7, #32
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <mq_write>:

int
mq_write (struct file *file, struct file_request *request,
          struct event_monitor *monitor)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
	size_t i;
	struct pipe_ringbuffer *pipe =
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	613b      	str	r3, [r7, #16]
	    container_of(file, struct pipe_ringbuffer, file);

	/* Copy count into pipe */
	for (i = 0; i < sizeof(size_t); i++)
 80034ec:	2300      	movs	r3, #0
 80034ee:	617b      	str	r3, [r7, #20]
 80034f0:	e019      	b.n	8003526 <mq_write+0x4a>
		PIPE_PUSH(*pipe,*(((char*)&request->size)+i));
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	f102 0108 	add.w	r1, r2, #8
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	440a      	add	r2, r1
 8003500:	7812      	ldrb	r2, [r2, #0]
 8003502:	6939      	ldr	r1, [r7, #16]
 8003504:	440b      	add	r3, r1
 8003506:	761a      	strb	r2, [r3, #24]
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	1c5a      	adds	r2, r3, #1
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	60da      	str	r2, [r3, #12]
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	2b3f      	cmp	r3, #63	; 0x3f
 8003518:	dd02      	ble.n	8003520 <mq_write+0x44>
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	2200      	movs	r2, #0
 800351e:	60da      	str	r2, [r3, #12]
	size_t i;
	struct pipe_ringbuffer *pipe =
	    container_of(file, struct pipe_ringbuffer, file);

	/* Copy count into pipe */
	for (i = 0; i < sizeof(size_t); i++)
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	3301      	adds	r3, #1
 8003524:	617b      	str	r3, [r7, #20]
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2b03      	cmp	r3, #3
 800352a:	d9e2      	bls.n	80034f2 <mq_write+0x16>
		PIPE_PUSH(*pipe,*(((char*)&request->size)+i));
	/* Copy data into pipe */
	for (i = 0; i < request->size; i++)
 800352c:	2300      	movs	r3, #0
 800352e:	617b      	str	r3, [r7, #20]
 8003530:	e018      	b.n	8003564 <mq_write+0x88>
		PIPE_PUSH(*pipe,request->buf[i]);
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	6851      	ldr	r1, [r2, #4]
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	440a      	add	r2, r1
 800353e:	7812      	ldrb	r2, [r2, #0]
 8003540:	6939      	ldr	r1, [r7, #16]
 8003542:	440b      	add	r3, r1
 8003544:	761a      	strb	r2, [r3, #24]
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	1c5a      	adds	r2, r3, #1
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	60da      	str	r2, [r3, #12]
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	2b3f      	cmp	r3, #63	; 0x3f
 8003556:	dd02      	ble.n	800355e <mq_write+0x82>
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	2200      	movs	r2, #0
 800355c:	60da      	str	r2, [r3, #12]

	/* Copy count into pipe */
	for (i = 0; i < sizeof(size_t); i++)
		PIPE_PUSH(*pipe,*(((char*)&request->size)+i));
	/* Copy data into pipe */
	for (i = 0; i < request->size; i++)
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	3301      	adds	r3, #1
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	461a      	mov	r2, r3
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	429a      	cmp	r2, r3
 800356e:	d8e0      	bhi.n	8003532 <mq_write+0x56>
		PIPE_PUSH(*pipe,request->buf[i]);

    /* Prepared to read */
	event_monitor_release(monitor, pipe->read_event);
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	4619      	mov	r1, r3
 8003578:	f7fd fabe 	bl	8000af8 <event_monitor_release>
	return request->size;
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	689b      	ldr	r3, [r3, #8]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3718      	adds	r7, #24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <pathserver>:
 * The first TASK_LIMIT FDs are reserved for use by their respective tasks.
 * 0-2 are reserved FDs and are skipped.
 * The server registers itself at /sys/pathserver
 */
void pathserver()
{
 8003588:	b590      	push	{r4, r7, lr}
 800358a:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464
 800358e:	af00      	add	r7, sp, #0
	char paths[FILE_LIMIT - TASK_LIMIT - 3][PATH_MAX];
	int npaths = 0;
 8003590:	2300      	movs	r3, #0
 8003592:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
	int fs_fds[FS_LIMIT];
	char fs_types[FS_LIMIT][FS_TYPE_MAX];
	int nfs_types = 0;
 8003596:	2300      	movs	r3, #0
 8003598:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
	struct mount mounts[MOUNT_LIMIT];
	int nmounts = 0;
 800359c:	2300      	movs	r3, #0
 800359e:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
	int i = 0;
 80035a2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80035a6:	2200      	movs	r2, #0
 80035a8:	601a      	str	r2, [r3, #0]
	int cmd = 0;
 80035aa:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80035ae:	2200      	movs	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]
	unsigned int plen = 0;
 80035b2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80035b6:	2200      	movs	r2, #0
 80035b8:	601a      	str	r2, [r3, #0]
	unsigned int replyfd = 0;
 80035ba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80035be:	2200      	movs	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]
	char path[PATH_MAX];
	int dev = 0;
 80035c2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80035c6:	2200      	movs	r2, #0
 80035c8:	601a      	str	r2, [r3, #0]
	int newfd = 0;
 80035ca:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]
	char fs_type[FS_TYPE_MAX];
	int status;

	memcpy(paths[npaths++], PATH_SERVER_NAME, sizeof(PATH_SERVER_NAME));
 80035d2:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	f8c7 245c 	str.w	r2, [r7, #1116]	; 0x45c
 80035dc:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 80035e0:	015b      	lsls	r3, r3, #5
 80035e2:	4413      	add	r3, r2
 80035e4:	4618      	mov	r0, r3
 80035e6:	49b6      	ldr	r1, [pc, #728]	; (80038c0 <pathserver+0x338>)
 80035e8:	2210      	movs	r2, #16
 80035ea:	f014 fca1 	bl	8017f30 <memcpy>
 80035ee:	e000      	b.n	80035f2 <pathserver+0x6a>
		    }   break;

		    default:
		        ;
		}
	}
 80035f0:	bf00      	nop
	int status;

	memcpy(paths[npaths++], PATH_SERVER_NAME, sizeof(PATH_SERVER_NAME));

	while (1) {
		read(PATHSERVER_FD, &cmd, 4);
 80035f2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80035f6:	200b      	movs	r0, #11
 80035f8:	4619      	mov	r1, r3
 80035fa:	2204      	movs	r2, #4
 80035fc:	f014 fcf5 	bl	8017fea <read>
		read(PATHSERVER_FD, &replyfd, 4);
 8003600:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003604:	200b      	movs	r0, #11
 8003606:	4619      	mov	r1, r3
 8003608:	2204      	movs	r2, #4
 800360a:	f014 fcee 	bl	8017fea <read>

		switch (cmd) {
 800360e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	3b01      	subs	r3, #1
 8003616:	2b04      	cmp	r3, #4
 8003618:	d8ea      	bhi.n	80035f0 <pathserver+0x68>
 800361a:	a201      	add	r2, pc, #4	; (adr r2, 8003620 <pathserver+0x98>)
 800361c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003620:	08003635 	.word	0x08003635
 8003624:	080036dd 	.word	0x080036dd
 8003628:	08003915 	.word	0x08003915
 800362c:	08003987 	.word	0x08003987
 8003630:	08003a07 	.word	0x08003a07
		    case PATH_CMD_MKFILE:
		        read(PATHSERVER_FD, &plen, 4);
 8003634:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003638:	200b      	movs	r0, #11
 800363a:	4619      	mov	r1, r3
 800363c:	2204      	movs	r2, #4
 800363e:	f014 fcd4 	bl	8017fea <read>
		        read(PATHSERVER_FD, path, plen);
 8003642:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800364c:	200b      	movs	r0, #11
 800364e:	4611      	mov	r1, r2
 8003650:	461a      	mov	r2, r3
 8003652:	f014 fcca 	bl	8017fea <read>
			    read(PATHSERVER_FD, &dev, 4);
 8003656:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800365a:	200b      	movs	r0, #11
 800365c:	4619      	mov	r1, r3
 800365e:	2204      	movs	r2, #4
 8003660:	f014 fcc3 	bl	8017fea <read>
			    newfd = npaths + 3 + TASK_LIMIT;
 8003664:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8003668:	f103 020b 	add.w	r2, r3, #11
 800366c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003670:	601a      	str	r2, [r3, #0]
			    if (mknod(newfd, 0, dev) == 0) {
 8003672:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4610      	mov	r0, r2
 8003680:	2100      	movs	r1, #0
 8003682:	461a      	mov	r2, r3
 8003684:	f014 fccd 	bl	8018022 <mknod>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d115      	bne.n	80036ba <pathserver+0x132>
			        memcpy(paths[npaths], path, plen);
 800368e:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8003692:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8003696:	015b      	lsls	r3, r3, #5
 8003698:	18d1      	adds	r1, r2, r3
 800369a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80036a4:	4608      	mov	r0, r1
 80036a6:	4611      	mov	r1, r2
 80036a8:	461a      	mov	r2, r3
 80036aa:	f014 fc41 	bl	8017f30 <memcpy>
			        npaths++;
 80036ae:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 80036b2:	3301      	adds	r3, #1
 80036b4:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 80036b8:	e004      	b.n	80036c4 <pathserver+0x13c>
			    }
			    else {
			        newfd = -1;
 80036ba:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80036be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036c2:	601a      	str	r2, [r3, #0]
			    }
			    write(replyfd, &newfd, 4);
 80036c4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	461a      	mov	r2, r3
 80036cc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80036d0:	4610      	mov	r0, r2
 80036d2:	4619      	mov	r1, r3
 80036d4:	2204      	movs	r2, #4
 80036d6:	f014 fc81 	bl	8017fdc <write>
		        break;
 80036da:	e299      	b.n	8003c10 <pathserver+0x688>

		    case PATH_CMD_OPEN:
		        read(PATHSERVER_FD, &plen, 4);
 80036dc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80036e0:	200b      	movs	r0, #11
 80036e2:	4619      	mov	r1, r3
 80036e4:	2204      	movs	r2, #4
 80036e6:	f014 fc80 	bl	8017fea <read>
		        read(PATHSERVER_FD, path, plen);
 80036ea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80036f4:	200b      	movs	r0, #11
 80036f6:	4611      	mov	r1, r2
 80036f8:	461a      	mov	r2, r3
 80036fa:	f014 fc76 	bl	8017fea <read>
		        /* Search for path */
			    for (i = 0; i < npaths; i++) {
 80036fe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	e03f      	b.n	8003788 <pathserver+0x200>
				    if (*paths[i] && strcmp(path, paths[i]) == 0) {
 8003708:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8003712:	015b      	lsls	r3, r3, #5
 8003714:	4413      	add	r3, r2
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d02e      	beq.n	800377a <pathserver+0x1f2>
 800371c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8003726:	015b      	lsls	r3, r3, #5
 8003728:	4413      	add	r3, r2
 800372a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800372e:	4610      	mov	r0, r2
 8003730:	4619      	mov	r1, r3
 8003732:	f001 fb33 	bl	8004d9c <strcmp>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d11e      	bne.n	800377a <pathserver+0x1f2>
					    i += 3; /* 0-2 are reserved */
 800373c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	1cda      	adds	r2, r3, #3
 8003744:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003748:	601a      	str	r2, [r3, #0]
					    i += TASK_LIMIT; /* FDs reserved for tasks */
 800374a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f103 0208 	add.w	r2, r3, #8
 8003754:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003758:	601a      	str	r2, [r3, #0]
					    write(replyfd, &i, 4);
 800375a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	461a      	mov	r2, r3
 8003762:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003766:	4610      	mov	r0, r2
 8003768:	4619      	mov	r1, r3
 800376a:	2204      	movs	r2, #4
 800376c:	f014 fc36 	bl	8017fdc <write>
					    i = 0;
 8003770:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]
					    break;
 8003778:	e00d      	b.n	8003796 <pathserver+0x20e>

		    case PATH_CMD_OPEN:
		        read(PATHSERVER_FD, &plen, 4);
		        read(PATHSERVER_FD, path, plen);
		        /* Search for path */
			    for (i = 0; i < npaths; i++) {
 800377a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	1c5a      	adds	r2, r3, #1
 8003782:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8003792:	429a      	cmp	r2, r3
 8003794:	dbb8      	blt.n	8003708 <pathserver+0x180>
					    i = 0;
					    break;
				    }
			    }

			    if (i < npaths) {
 8003796:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 80037a0:	429a      	cmp	r2, r3
 80037a2:	da00      	bge.n	80037a6 <pathserver+0x21e>
				    break;
 80037a4:	e234      	b.n	8003c10 <pathserver+0x688>
			    }

		        /* Search for mount point */
			    for (i = 0; i < nmounts; i++) {
 80037a6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80037aa:	2200      	movs	r2, #0
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	e090      	b.n	80038d2 <pathserver+0x34a>
				    if (*mounts[i].path
 80037b0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80037ba:	4613      	mov	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	440b      	add	r3, r1
 80037c4:	3308      	adds	r3, #8
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d07b      	beq.n	80038c4 <pathserver+0x33c>
				            && strncmp(path, mounts[i].path,
 80037cc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80037d6:	4613      	mov	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	3308      	adds	r3, #8
 80037e0:	18cc      	adds	r4, r1, r3
				                       strlen(mounts[i].path)) == 0) {
 80037e2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80037ec:	4613      	mov	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	3308      	adds	r3, #8
 80037f6:	440b      	add	r3, r1
			    }

		        /* Search for mount point */
			    for (i = 0; i < nmounts; i++) {
				    if (*mounts[i].path
				            && strncmp(path, mounts[i].path,
 80037f8:	4618      	mov	r0, r3
 80037fa:	f001 fb09 	bl	8004e10 <strlen>
 80037fe:	4603      	mov	r3, r0
 8003800:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8003804:	4610      	mov	r0, r2
 8003806:	4621      	mov	r1, r4
 8003808:	461a      	mov	r2, r3
 800380a:	f001 fad5 	bl	8004db8 <strncmp>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d157      	bne.n	80038c4 <pathserver+0x33c>
				                       strlen(mounts[i].path)) == 0) {
				        int mlen = strlen(mounts[i].path);
 8003814:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 800381e:	4613      	mov	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	4413      	add	r3, r2
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	3308      	adds	r3, #8
 8003828:	440b      	add	r3, r1
 800382a:	4618      	mov	r0, r3
 800382c:	f001 faf0 	bl	8004e10 <strlen>
 8003830:	4603      	mov	r3, r0
 8003832:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
					    struct fs_request request;
					    request.cmd = FS_CMD_OPEN;
 8003836:	f107 0320 	add.w	r3, r7, #32
 800383a:	2201      	movs	r2, #1
 800383c:	601a      	str	r2, [r3, #0]
					    request.from = replyfd;
 800383e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	461a      	mov	r2, r3
 8003846:	f107 0320 	add.w	r3, r7, #32
 800384a:	605a      	str	r2, [r3, #4]
					    request.device = mounts[i].dev;
 800384c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003856:	4613      	mov	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4413      	add	r3, r2
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	440b      	add	r3, r1
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	f107 0320 	add.w	r3, r7, #32
 8003866:	609a      	str	r2, [r3, #8]
					    request.pos = mlen; /* search starting position */
 8003868:	f107 0320 	add.w	r3, r7, #32
 800386c:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 8003870:	635a      	str	r2, [r3, #52]	; 0x34
					    memcpy(request.path, &path, plen);
 8003872:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f107 0220 	add.w	r2, r7, #32
 800387c:	f102 0110 	add.w	r1, r2, #16
 8003880:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8003884:	4608      	mov	r0, r1
 8003886:	4611      	mov	r1, r2
 8003888:	461a      	mov	r2, r3
 800388a:	f014 fb51 	bl	8017f30 <memcpy>
					    write(mounts[i].fs, &request, sizeof(request));
 800388e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003898:	4613      	mov	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	440b      	add	r3, r1
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	f107 0320 	add.w	r3, r7, #32
 80038a8:	4610      	mov	r0, r2
 80038aa:	4619      	mov	r1, r3
 80038ac:	2238      	movs	r2, #56	; 0x38
 80038ae:	f014 fb95 	bl	8017fdc <write>
					    i = 0;
 80038b2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]
					    break;
 80038ba:	bf00      	nop
 80038bc:	e011      	b.n	80038e2 <pathserver+0x35a>
 80038be:	bf00      	nop
 80038c0:	0801a558 	.word	0x0801a558
			    if (i < npaths) {
				    break;
			    }

		        /* Search for mount point */
			    for (i = 0; i < nmounts; i++) {
 80038c4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	1c5a      	adds	r2, r3, #1
 80038cc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 80038dc:	429a      	cmp	r2, r3
 80038de:	f6ff af67 	blt.w	80037b0 <pathserver+0x228>
					    i = 0;
					    break;
				    }
			    }

			    if (i >= nmounts) {
 80038e2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 80038ec:	429a      	cmp	r2, r3
 80038ee:	db10      	blt.n	8003912 <pathserver+0x38a>
				    i = -1; /* Error: not found */
 80038f0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038f8:	601a      	str	r2, [r3, #0]
				    write(replyfd, &i, 4);
 80038fa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	461a      	mov	r2, r3
 8003902:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003906:	4610      	mov	r0, r2
 8003908:	4619      	mov	r1, r3
 800390a:	2204      	movs	r2, #4
 800390c:	f014 fb66 	bl	8017fdc <write>
			    }
		        break;
 8003910:	e17e      	b.n	8003c10 <pathserver+0x688>
 8003912:	e17d      	b.n	8003c10 <pathserver+0x688>

		    case PATH_CMD_REGISTER_PATH:
		        read(PATHSERVER_FD, &plen, 4);
 8003914:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003918:	200b      	movs	r0, #11
 800391a:	4619      	mov	r1, r3
 800391c:	2204      	movs	r2, #4
 800391e:	f014 fb64 	bl	8017fea <read>
		        read(PATHSERVER_FD, path, plen);
 8003922:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800392c:	200b      	movs	r0, #11
 800392e:	4611      	mov	r1, r2
 8003930:	461a      	mov	r2, r3
 8003932:	f014 fb5a 	bl	8017fea <read>
			    newfd = npaths + 3 + TASK_LIMIT;
 8003936:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 800393a:	f103 020b 	add.w	r2, r3, #11
 800393e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003942:	601a      	str	r2, [r3, #0]
			    memcpy(paths[npaths], path, plen);
 8003944:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8003948:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 800394c:	015b      	lsls	r3, r3, #5
 800394e:	18d1      	adds	r1, r2, r3
 8003950:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800395a:	4608      	mov	r0, r1
 800395c:	4611      	mov	r1, r2
 800395e:	461a      	mov	r2, r3
 8003960:	f014 fae6 	bl	8017f30 <memcpy>
		        npaths++;
 8003964:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8003968:	3301      	adds	r3, #1
 800396a:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
				write(replyfd, &newfd, 4);
 800396e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	461a      	mov	r2, r3
 8003976:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800397a:	4610      	mov	r0, r2
 800397c:	4619      	mov	r1, r3
 800397e:	2204      	movs	r2, #4
 8003980:	f014 fb2c 	bl	8017fdc <write>
		        break;
 8003984:	e144      	b.n	8003c10 <pathserver+0x688>

		    case PATH_CMD_REGISTER_FS:
		        read(PATHSERVER_FD, &plen, 4);
 8003986:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800398a:	200b      	movs	r0, #11
 800398c:	4619      	mov	r1, r3
 800398e:	2204      	movs	r2, #4
 8003990:	f014 fb2b 	bl	8017fea <read>
		        read(PATHSERVER_FD, fs_type, plen);
 8003994:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800399e:	200b      	movs	r0, #11
 80039a0:	4611      	mov	r1, r2
 80039a2:	461a      	mov	r2, r3
 80039a4:	f014 fb21 	bl	8017fea <read>
		        fs_fds[nfs_types] = replyfd;
 80039a8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4619      	mov	r1, r3
 80039b0:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80039b4:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 80039b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			    memcpy(fs_types[nfs_types], fs_type, plen);
 80039bc:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 80039c0:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	18d1      	adds	r1, r2, r3
 80039c8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80039d2:	4608      	mov	r0, r1
 80039d4:	4611      	mov	r1, r2
 80039d6:	461a      	mov	r2, r3
 80039d8:	f014 faaa 	bl	8017f30 <memcpy>
		        nfs_types++;
 80039dc:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80039e0:	3301      	adds	r3, #1
 80039e2:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
		        i = 0;
 80039e6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80039ea:	2200      	movs	r2, #0
 80039ec:	601a      	str	r2, [r3, #0]
				write(replyfd, &i, 4);
 80039ee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	461a      	mov	r2, r3
 80039f6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80039fa:	4610      	mov	r0, r2
 80039fc:	4619      	mov	r1, r3
 80039fe:	2204      	movs	r2, #4
 8003a00:	f014 faec 	bl	8017fdc <write>
				break;
 8003a04:	e104      	b.n	8003c10 <pathserver+0x688>
			    int dlen;
			    int tlen;
			    char src[PATH_MAX];
			    char dst[PATH_MAX];
			    char type[FS_TYPE_MAX];
		        read(PATHSERVER_FD, &slen, 4);
 8003a06:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003a0a:	200b      	movs	r0, #11
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	2204      	movs	r2, #4
 8003a10:	f014 faeb 	bl	8017fea <read>
		        read(PATHSERVER_FD, src, slen);
 8003a14:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	463a      	mov	r2, r7
 8003a1c:	200b      	movs	r0, #11
 8003a1e:	4611      	mov	r1, r2
 8003a20:	461a      	mov	r2, r3
 8003a22:	f014 fae2 	bl	8017fea <read>
		        read(PATHSERVER_FD, &dlen, 4);
 8003a26:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003a2a:	200b      	movs	r0, #11
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	2204      	movs	r2, #4
 8003a30:	f014 fadb 	bl	8017fea <read>
		        read(PATHSERVER_FD, dst, dlen);
 8003a34:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f107 0220 	add.w	r2, r7, #32
 8003a3e:	200b      	movs	r0, #11
 8003a40:	4611      	mov	r1, r2
 8003a42:	461a      	mov	r2, r3
 8003a44:	f014 fad1 	bl	8017fea <read>
		        read(PATHSERVER_FD, &tlen, 4);
 8003a48:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003a4c:	200b      	movs	r0, #11
 8003a4e:	4619      	mov	r1, r3
 8003a50:	2204      	movs	r2, #4
 8003a52:	f014 faca 	bl	8017fea <read>
		        read(PATHSERVER_FD, type, tlen);
 8003a56:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003a60:	200b      	movs	r0, #11
 8003a62:	4611      	mov	r1, r2
 8003a64:	461a      	mov	r2, r3
 8003a66:	f014 fac0 	bl	8017fea <read>

		        /* Search for filesystem types */
			    for (i = 0; i < nfs_types; i++) {
 8003a6a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003a6e:	2200      	movs	r2, #0
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	e020      	b.n	8003ab6 <pathserver+0x52e>
				    if (*fs_types[i] && strcmp(type, fs_types[i]) == 0) {
 8003a74:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8003a7e:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d010      	beq.n	8003aa8 <pathserver+0x520>
 8003a86:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	4413      	add	r3, r2
 8003a94:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003a98:	4610      	mov	r0, r2
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	f001 f97e 	bl	8004d9c <strcmp>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d100      	bne.n	8003aa8 <pathserver+0x520>
					    break;
 8003aa6:	e00d      	b.n	8003ac4 <pathserver+0x53c>
		        read(PATHSERVER_FD, dst, dlen);
		        read(PATHSERVER_FD, &tlen, 4);
		        read(PATHSERVER_FD, type, tlen);

		        /* Search for filesystem types */
			    for (i = 0; i < nfs_types; i++) {
 8003aa8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	1c5a      	adds	r2, r3, #1
 8003ab0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	dbd7      	blt.n	8003a74 <pathserver+0x4ec>
				    if (*fs_types[i] && strcmp(type, fs_types[i]) == 0) {
					    break;
				    }
			    }

			    if (i >= nfs_types) {
 8003ac4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	db10      	blt.n	8003af4 <pathserver+0x56c>
				    status = -1; /* Error: not found */
 8003ad2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003ad6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ada:	601a      	str	r2, [r3, #0]
				    write(replyfd, &status, 4);
 8003adc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003ae8:	4610      	mov	r0, r2
 8003aea:	4619      	mov	r1, r3
 8003aec:	2204      	movs	r2, #4
 8003aee:	f014 fa75 	bl	8017fdc <write>
				    break;
 8003af2:	e08d      	b.n	8003c10 <pathserver+0x688>
			    }

                mounts[nmounts].fs = fs_fds[i];
 8003af4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8003afe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b02:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8003b06:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4413      	add	r3, r2
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	4403      	add	r3, r0
 8003b14:	6019      	str	r1, [r3, #0]

		        /* Search for device */
			    for (i = 0; i < npaths; i++) {
 8003b16:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	e020      	b.n	8003b62 <pathserver+0x5da>
				    if (*paths[i] && strcmp(src, paths[i]) == 0) {
 8003b20:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8003b2a:	015b      	lsls	r3, r3, #5
 8003b2c:	4413      	add	r3, r2
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00f      	beq.n	8003b54 <pathserver+0x5cc>
 8003b34:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8003b3e:	015b      	lsls	r3, r3, #5
 8003b40:	4413      	add	r3, r2
 8003b42:	463a      	mov	r2, r7
 8003b44:	4610      	mov	r0, r2
 8003b46:	4619      	mov	r1, r3
 8003b48:	f001 f928 	bl	8004d9c <strcmp>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d100      	bne.n	8003b54 <pathserver+0x5cc>
					    break;
 8003b52:	e00d      	b.n	8003b70 <pathserver+0x5e8>
			    }

                mounts[nmounts].fs = fs_fds[i];

		        /* Search for device */
			    for (i = 0; i < npaths; i++) {
 8003b54:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	1c5a      	adds	r2, r3, #1
 8003b5c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	dbd7      	blt.n	8003b20 <pathserver+0x598>
				    if (*paths[i] && strcmp(src, paths[i]) == 0) {
					    break;
				    }
			    }

			    if (i >= npaths) {
 8003b70:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	db10      	blt.n	8003ba0 <pathserver+0x618>
				    status = -1; /* Error: not found */
 8003b7e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003b82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b86:	601a      	str	r2, [r3, #0]
				    write(replyfd, &status, 4);
 8003b88:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003b94:	4610      	mov	r0, r2
 8003b96:	4619      	mov	r1, r3
 8003b98:	2204      	movs	r2, #4
 8003b9a:	f014 fa1f 	bl	8017fdc <write>
				    break;
 8003b9e:	e037      	b.n	8003c10 <pathserver+0x688>
			    }

                /* Store mount point */
                mounts[nmounts].dev = i + 3 + TASK_LIMIT;
 8003ba0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f103 010b 	add.w	r1, r3, #11
 8003baa:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8003bae:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	00db      	lsls	r3, r3, #3
 8003bba:	4403      	add	r3, r0
 8003bbc:	6059      	str	r1, [r3, #4]
			    memcpy(mounts[nmounts].path, dst, dlen);
 8003bbe:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003bc2:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4413      	add	r3, r2
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	3308      	adds	r3, #8
 8003bd0:	4419      	add	r1, r3
 8003bd2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f107 0220 	add.w	r2, r7, #32
 8003bdc:	4608      	mov	r0, r1
 8003bde:	4611      	mov	r1, r2
 8003be0:	461a      	mov	r2, r3
 8003be2:	f014 f9a5 	bl	8017f30 <memcpy>
			    nmounts++;
 8003be6:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8003bea:	3301      	adds	r3, #1
 8003bec:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454

                status = 0;
 8003bf0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]
                write(replyfd, &status, 4);
 8003bf8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003c04:	4610      	mov	r0, r2
 8003c06:	4619      	mov	r1, r3
 8003c08:	2204      	movs	r2, #4
 8003c0a:	f014 f9e7 	bl	8017fdc <write>
		    }   break;
 8003c0e:	bf00      	nop

		    default:
		        ;
		}
	}
 8003c10:	e4ee      	b.n	80035f0 <pathserver+0x68>
 8003c12:	bf00      	nop

08003c14 <path_register>:
}

int path_register(const char *pathname)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b092      	sub	sp, #72	; 0x48
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
    int cmd = PATH_CMD_REGISTER_PATH;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	643b      	str	r3, [r7, #64]	; 0x40
	unsigned int replyfd = getpid() + 3;
 8003c20:	f014 f9d5 	bl	8017fce <getpid>
 8003c24:	4603      	mov	r3, r0
 8003c26:	3303      	adds	r3, #3
 8003c28:	63fb      	str	r3, [r7, #60]	; 0x3c
	size_t plen = strlen(pathname)+1;
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f001 f8f0 	bl	8004e10 <strlen>
 8003c30:	4603      	mov	r3, r0
 8003c32:	3301      	adds	r3, #1
 8003c34:	63bb      	str	r3, [r7, #56]	; 0x38
	int fd = -1;
 8003c36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c3a:	637b      	str	r3, [r7, #52]	; 0x34
	char buf[4+4+4+PATH_MAX];
	int pos = 0;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	647b      	str	r3, [r7, #68]	; 0x44

	path_write_data(buf, &cmd, 4, pos);
 8003c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c42:	f107 0208 	add.w	r2, r7, #8
 8003c46:	441a      	add	r2, r3
 8003c48:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c4c:	4610      	mov	r0, r2
 8003c4e:	4619      	mov	r1, r3
 8003c50:	2204      	movs	r2, #4
 8003c52:	f014 f96d 	bl	8017f30 <memcpy>
 8003c56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c58:	3304      	adds	r3, #4
 8003c5a:	647b      	str	r3, [r7, #68]	; 0x44
	path_write_data(buf, &replyfd, 4, pos);
 8003c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c5e:	f107 0208 	add.w	r2, r7, #8
 8003c62:	441a      	add	r2, r3
 8003c64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003c68:	4610      	mov	r0, r2
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	2204      	movs	r2, #4
 8003c6e:	f014 f95f 	bl	8017f30 <memcpy>
 8003c72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c74:	3304      	adds	r3, #4
 8003c76:	647b      	str	r3, [r7, #68]	; 0x44
	path_write_data(buf, &plen, 4, pos);
 8003c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c7a:	f107 0208 	add.w	r2, r7, #8
 8003c7e:	441a      	add	r2, r3
 8003c80:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003c84:	4610      	mov	r0, r2
 8003c86:	4619      	mov	r1, r3
 8003c88:	2204      	movs	r2, #4
 8003c8a:	f014 f951 	bl	8017f30 <memcpy>
 8003c8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c90:	3304      	adds	r3, #4
 8003c92:	647b      	str	r3, [r7, #68]	; 0x44
	path_write_data(buf, pathname, plen, pos);
 8003c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c96:	f107 0208 	add.w	r2, r7, #8
 8003c9a:	441a      	add	r2, r3
 8003c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c9e:	4610      	mov	r0, r2
 8003ca0:	6879      	ldr	r1, [r7, #4]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	f014 f944 	bl	8017f30 <memcpy>
 8003ca8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cac:	4413      	add	r3, r2
 8003cae:	647b      	str	r3, [r7, #68]	; 0x44

	write(PATHSERVER_FD, buf, pos);
 8003cb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cb2:	f107 0208 	add.w	r2, r7, #8
 8003cb6:	200b      	movs	r0, #11
 8003cb8:	4611      	mov	r1, r2
 8003cba:	461a      	mov	r2, r3
 8003cbc:	f014 f98e 	bl	8017fdc <write>
	read(replyfd, &fd, 4);
 8003cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003cc8:	4610      	mov	r0, r2
 8003cca:	4619      	mov	r1, r3
 8003ccc:	2204      	movs	r2, #4
 8003cce:	f014 f98c 	bl	8017fea <read>

	return fd;
 8003cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3748      	adds	r7, #72	; 0x48
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <path_register_fs>:

int path_register_fs(const char *type)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b092      	sub	sp, #72	; 0x48
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
    int cmd = PATH_CMD_REGISTER_FS;
 8003ce4:	2304      	movs	r3, #4
 8003ce6:	643b      	str	r3, [r7, #64]	; 0x40
	unsigned int replyfd = getpid() + 3;
 8003ce8:	f014 f971 	bl	8017fce <getpid>
 8003cec:	4603      	mov	r3, r0
 8003cee:	3303      	adds	r3, #3
 8003cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
	size_t plen = strlen(type)+1;
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f001 f88c 	bl	8004e10 <strlen>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	63bb      	str	r3, [r7, #56]	; 0x38
	int fd = -1;
 8003cfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d02:	637b      	str	r3, [r7, #52]	; 0x34
	char buf[4+4+4+PATH_MAX];
	int pos = 0;
 8003d04:	2300      	movs	r3, #0
 8003d06:	647b      	str	r3, [r7, #68]	; 0x44

	path_write_data(buf, &cmd, 4, pos);
 8003d08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d0a:	f107 0208 	add.w	r2, r7, #8
 8003d0e:	441a      	add	r2, r3
 8003d10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003d14:	4610      	mov	r0, r2
 8003d16:	4619      	mov	r1, r3
 8003d18:	2204      	movs	r2, #4
 8003d1a:	f014 f909 	bl	8017f30 <memcpy>
 8003d1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d20:	3304      	adds	r3, #4
 8003d22:	647b      	str	r3, [r7, #68]	; 0x44
	path_write_data(buf, &replyfd, 4, pos);
 8003d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d26:	f107 0208 	add.w	r2, r7, #8
 8003d2a:	441a      	add	r2, r3
 8003d2c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003d30:	4610      	mov	r0, r2
 8003d32:	4619      	mov	r1, r3
 8003d34:	2204      	movs	r2, #4
 8003d36:	f014 f8fb 	bl	8017f30 <memcpy>
 8003d3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	647b      	str	r3, [r7, #68]	; 0x44
	path_write_data(buf, &plen, 4, pos);
 8003d40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d42:	f107 0208 	add.w	r2, r7, #8
 8003d46:	441a      	add	r2, r3
 8003d48:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003d4c:	4610      	mov	r0, r2
 8003d4e:	4619      	mov	r1, r3
 8003d50:	2204      	movs	r2, #4
 8003d52:	f014 f8ed 	bl	8017f30 <memcpy>
 8003d56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d58:	3304      	adds	r3, #4
 8003d5a:	647b      	str	r3, [r7, #68]	; 0x44
	path_write_data(buf, type, plen, pos);
 8003d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d5e:	f107 0208 	add.w	r2, r7, #8
 8003d62:	441a      	add	r2, r3
 8003d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d66:	4610      	mov	r0, r2
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	f014 f8e0 	bl	8017f30 <memcpy>
 8003d70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d74:	4413      	add	r3, r2
 8003d76:	647b      	str	r3, [r7, #68]	; 0x44

	write(PATHSERVER_FD, buf, pos);
 8003d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d7a:	f107 0208 	add.w	r2, r7, #8
 8003d7e:	200b      	movs	r0, #11
 8003d80:	4611      	mov	r1, r2
 8003d82:	461a      	mov	r2, r3
 8003d84:	f014 f92a 	bl	8017fdc <write>
	read(replyfd, &fd, 4);
 8003d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003d90:	4610      	mov	r0, r2
 8003d92:	4619      	mov	r1, r3
 8003d94:	2204      	movs	r2, #4
 8003d96:	f014 f928 	bl	8017fea <read>

	return fd;
 8003d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3748      	adds	r7, #72	; 0x48
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <mount>:

int mount(const char *src, const char *dst, const char *type, int flags)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b0a2      	sub	sp, #136	; 0x88
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
 8003db0:	603b      	str	r3, [r7, #0]
    int cmd = PATH_CMD_MOUNT;
 8003db2:	2305      	movs	r3, #5
 8003db4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	unsigned int replyfd = getpid() + 3;
 8003db8:	f014 f909 	bl	8017fce <getpid>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	3303      	adds	r3, #3
 8003dc0:	67fb      	str	r3, [r7, #124]	; 0x7c
	size_t slen = strlen(src)+1;
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f001 f824 	bl	8004e10 <strlen>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	3301      	adds	r3, #1
 8003dcc:	67bb      	str	r3, [r7, #120]	; 0x78
	size_t dlen = strlen(dst) + 1;
 8003dce:	68b8      	ldr	r0, [r7, #8]
 8003dd0:	f001 f81e 	bl	8004e10 <strlen>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	677b      	str	r3, [r7, #116]	; 0x74
	size_t tlen = strlen(type) + 1;
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f001 f818 	bl	8004e10 <strlen>
 8003de0:	4603      	mov	r3, r0
 8003de2:	3301      	adds	r3, #1
 8003de4:	673b      	str	r3, [r7, #112]	; 0x70
	int status;
	char buf[4 + 4 + 4 + PATH_MAX + 4 + PATH_MAX + 4 + FS_TYPE_MAX];
	int pos = 0;
 8003de6:	2300      	movs	r3, #0
 8003de8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	path_write_data(buf, &cmd, 4, pos);
 8003dec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003df0:	f107 0210 	add.w	r2, r7, #16
 8003df4:	441a      	add	r2, r3
 8003df6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	2204      	movs	r2, #4
 8003e00:	f014 f896 	bl	8017f30 <memcpy>
 8003e04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e08:	3304      	adds	r3, #4
 8003e0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	path_write_data(buf, &replyfd, 4, pos);
 8003e0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e12:	f107 0210 	add.w	r2, r7, #16
 8003e16:	441a      	add	r2, r3
 8003e18:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003e1c:	4610      	mov	r0, r2
 8003e1e:	4619      	mov	r1, r3
 8003e20:	2204      	movs	r2, #4
 8003e22:	f014 f885 	bl	8017f30 <memcpy>
 8003e26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	path_write_data(buf, &slen, 4, pos);
 8003e30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e34:	f107 0210 	add.w	r2, r7, #16
 8003e38:	441a      	add	r2, r3
 8003e3a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003e3e:	4610      	mov	r0, r2
 8003e40:	4619      	mov	r1, r3
 8003e42:	2204      	movs	r2, #4
 8003e44:	f014 f874 	bl	8017f30 <memcpy>
 8003e48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	path_write_data(buf, src, slen, pos);
 8003e52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e56:	f107 0210 	add.w	r2, r7, #16
 8003e5a:	441a      	add	r2, r3
 8003e5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e5e:	4610      	mov	r0, r2
 8003e60:	68f9      	ldr	r1, [r7, #12]
 8003e62:	461a      	mov	r2, r3
 8003e64:	f014 f864 	bl	8017f30 <memcpy>
 8003e68:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003e6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e6e:	4413      	add	r3, r2
 8003e70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	path_write_data(buf, &dlen, 4, pos);
 8003e74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e78:	f107 0210 	add.w	r2, r7, #16
 8003e7c:	441a      	add	r2, r3
 8003e7e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003e82:	4610      	mov	r0, r2
 8003e84:	4619      	mov	r1, r3
 8003e86:	2204      	movs	r2, #4
 8003e88:	f014 f852 	bl	8017f30 <memcpy>
 8003e8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e90:	3304      	adds	r3, #4
 8003e92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	path_write_data(buf, dst, dlen, pos);
 8003e96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e9a:	f107 0210 	add.w	r2, r7, #16
 8003e9e:	441a      	add	r2, r3
 8003ea0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ea2:	4610      	mov	r0, r2
 8003ea4:	68b9      	ldr	r1, [r7, #8]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	f014 f842 	bl	8017f30 <memcpy>
 8003eac:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003eb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	path_write_data(buf, &tlen, 4, pos);
 8003eb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ebc:	f107 0210 	add.w	r2, r7, #16
 8003ec0:	441a      	add	r2, r3
 8003ec2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003ec6:	4610      	mov	r0, r2
 8003ec8:	4619      	mov	r1, r3
 8003eca:	2204      	movs	r2, #4
 8003ecc:	f014 f830 	bl	8017f30 <memcpy>
 8003ed0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	path_write_data(buf, type, tlen, pos);
 8003eda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ede:	f107 0210 	add.w	r2, r7, #16
 8003ee2:	441a      	add	r2, r3
 8003ee4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ee6:	4610      	mov	r0, r2
 8003ee8:	6879      	ldr	r1, [r7, #4]
 8003eea:	461a      	mov	r2, r3
 8003eec:	f014 f820 	bl	8017f30 <memcpy>
 8003ef0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003ef4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ef6:	4413      	add	r3, r2
 8003ef8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	write(PATHSERVER_FD, buf, pos);
 8003efc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f00:	f107 0210 	add.w	r2, r7, #16
 8003f04:	200b      	movs	r0, #11
 8003f06:	4611      	mov	r1, r2
 8003f08:	461a      	mov	r2, r3
 8003f0a:	f014 f867 	bl	8017fdc <write>
	read(replyfd, &status, 4);
 8003f0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f10:	461a      	mov	r2, r3
 8003f12:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003f16:	4610      	mov	r0, r2
 8003f18:	4619      	mov	r1, r3
 8003f1a:	2204      	movs	r2, #4
 8003f1c:	f014 f865 	bl	8017fea <read>

	return status;
 8003f20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3788      	adds	r7, #136	; 0x88
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop

08003f2c <pipe_read_release>:



int pipe_read_release(struct event_monitor *monitor, int event,
                      struct task_control_block *task, void *data)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
 8003f38:	603b      	str	r3, [r7, #0]
    struct file *file = data;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	617b      	str	r3, [r7, #20]
    struct file_request *request = (void*)task->stack->r0;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f44:	613b      	str	r3, [r7, #16]

    return file_read(file, request, monitor);
 8003f46:	6978      	ldr	r0, [r7, #20]
 8003f48:	6939      	ldr	r1, [r7, #16]
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	f7fd f874 	bl	8001038 <file_read>
 8003f50:	4603      	mov	r3, r0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3718      	adds	r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop

08003f5c <pipe_write_release>:

int pipe_write_release(struct event_monitor *monitor, int event,
                       struct task_control_block *task, void *data)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
 8003f68:	603b      	str	r3, [r7, #0]
    struct file *file = data;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	617b      	str	r3, [r7, #20]
    struct file_request *request = (void*)task->stack->r0;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f74:	613b      	str	r3, [r7, #16]

    return file_write(file, request, monitor);
 8003f76:	6978      	ldr	r0, [r7, #20]
 8003f78:	6939      	ldr	r1, [r7, #16]
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	f7fd f8a6 	bl	80010cc <file_write>
 8003f80:	4603      	mov	r3, r0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3718      	adds	r7, #24
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop

08003f8c <regfile_driver_readable>:
};


int regfile_driver_readable (struct regfile *regfile, struct file_request *request,
                           struct event_monitor *monitor)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
    if (regfile->buzy)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <regfile_driver_readable+0x18>
        return FILE_ACCESS_ACCEPT;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e001      	b.n	8003fa8 <regfile_driver_readable+0x1c>
    else
        return FILE_ACCESS_ERROR;
 8003fa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <regfile_driver_writable>:

int regfile_driver_writable (struct regfile *regfile, struct file_request *request,
                           struct event_monitor *monitor)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
    if (regfile->buzy)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <regfile_driver_writable+0x18>
        return FILE_ACCESS_ACCEPT;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e001      	b.n	8003fd0 <regfile_driver_writable+0x1c>
    else
        return FILE_ACCESS_ERROR;
 8003fcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <regfile_driver_lseekable>:

int regfile_driver_lseekable (struct regfile *regfile, struct file_request *request,
                            struct event_monitor *monitor)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
    if (regfile->buzy)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <regfile_driver_lseekable+0x18>
        return FILE_ACCESS_ACCEPT;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e001      	b.n	8003ff8 <regfile_driver_lseekable+0x1c>
    else
        return FILE_ACCESS_ERROR;
 8003ff4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3714      	adds	r7, #20
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <regfile_driver_read>:

int regfile_driver_read (struct regfile *regfile, struct file_request *request,
                       struct event_monitor *monitor)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
    int size = request->size;
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	617b      	str	r3, [r7, #20]
    if (size > REGFILE_BUF)
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	2b40      	cmp	r3, #64	; 0x40
 800401a:	dd01      	ble.n	8004020 <regfile_driver_read+0x1c>
        size = REGFILE_BUF;
 800401c:	2340      	movs	r3, #64	; 0x40
 800401e:	617b      	str	r3, [r7, #20]

    memcpy(request->buf, regfile->buf, size);
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	6859      	ldr	r1, [r3, #4]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f103 0220 	add.w	r2, r3, #32
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	4608      	mov	r0, r1
 800402e:	4611      	mov	r1, r2
 8004030:	461a      	mov	r2, r3
 8004032:	f013 ff7d 	bl	8017f30 <memcpy>

    /* still buzy until driver write response */
    return size;
 8004036:	697b      	ldr	r3, [r7, #20]
}
 8004038:	4618      	mov	r0, r3
 800403a:	3718      	adds	r7, #24
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <regfile_driver_write>:

int regfile_driver_write (struct regfile *regfile, struct file_request *request,
                        struct event_monitor *monitor)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
    char *data_buf = request->buf;
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	613b      	str	r3, [r7, #16]
    int len = request->size;
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	617b      	str	r3, [r7, #20]
    if (len > REGFILE_BUF)
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	2b40      	cmp	r3, #64	; 0x40
 800405c:	dd01      	ble.n	8004062 <regfile_driver_write+0x22>
        len = REGFILE_BUF;
 800405e:	2340      	movs	r3, #64	; 0x40
 8004060:	617b      	str	r3, [r7, #20]

    if (len > 0) {
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	2b00      	cmp	r3, #0
 8004066:	dd08      	ble.n	800407a <regfile_driver_write+0x3a>
        memcpy(regfile->buf, data_buf, len);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f103 0220 	add.w	r2, r3, #32
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	4610      	mov	r0, r2
 8004072:	6939      	ldr	r1, [r7, #16]
 8004074:	461a      	mov	r2, r3
 8004076:	f013 ff5b 	bl	8017f30 <memcpy>
    }
    regfile->transfer_len = len;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	661a      	str	r2, [r3, #96]	; 0x60
    regfile->buzy = 0;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	619a      	str	r2, [r3, #24]
	event_monitor_release(monitor, regfile->event);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	4619      	mov	r1, r3
 800408e:	f7fc fd33 	bl	8000af8 <event_monitor_release>
    return len;
 8004092:	697b      	ldr	r3, [r7, #20]
}
 8004094:	4618      	mov	r0, r3
 8004096:	3718      	adds	r7, #24
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <regfile_driver_lseek>:

int regfile_driver_lseek (struct regfile *regfile, struct file_request *request,
                        struct event_monitor *monitor)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
    regfile->transfer_len = request->size;
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	661a      	str	r2, [r3, #96]	; 0x60
    regfile->buzy = 0;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	619a      	str	r2, [r3, #24]
	event_monitor_release(monitor, regfile->event);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	4619      	mov	r1, r3
 80040be:	f7fc fd1b 	bl	8000af8 <event_monitor_release>
    return request->size;
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	689b      	ldr	r3, [r3, #8]
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop

080040d0 <regfile_request_readable>:
 *  5. Get transfer_len
 *  6. Read data from buffer
 */
int regfile_request_readable (struct regfile *regfile, struct file_request *request,
                            struct event_monitor *monitor)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b09a      	sub	sp, #104	; 0x68
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
    struct task_control_block *task = request->task;
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	663b      	str	r3, [r7, #96]	; 0x60

    if (regfile->request_pid == 0) {
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d169      	bne.n	80041be <regfile_request_readable+0xee>
        /* try to send request */
        struct file *driver = regfile->driver_file;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	65fb      	str	r3, [r7, #92]	; 0x5c
        int size = request->size;
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	667b      	str	r3, [r7, #100]	; 0x64
        if (size > REGFILE_BUF)
 80040f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040f8:	2b40      	cmp	r3, #64	; 0x40
 80040fa:	dd01      	ble.n	8004100 <regfile_request_readable+0x30>
            size = REGFILE_BUF;
 80040fc:	2340      	movs	r3, #64	; 0x40
 80040fe:	667b      	str	r3, [r7, #100]	; 0x64

        struct fs_request fs_request = {
 8004100:	f107 0314 	add.w	r3, r7, #20
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	3304      	adds	r3, #4
 800410a:	2200      	movs	r2, #0
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	3304      	adds	r3, #4
 8004110:	2200      	movs	r2, #0
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	3304      	adds	r3, #4
 8004116:	2200      	movs	r2, #0
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	3304      	adds	r3, #4
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	3304      	adds	r3, #4
 8004122:	2200      	movs	r2, #0
 8004124:	601a      	str	r2, [r3, #0]
 8004126:	3304      	adds	r3, #4
 8004128:	2200      	movs	r2, #0
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	3304      	adds	r3, #4
 800412e:	2200      	movs	r2, #0
 8004130:	601a      	str	r2, [r3, #0]
 8004132:	3304      	adds	r3, #4
 8004134:	2200      	movs	r2, #0
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	3304      	adds	r3, #4
 800413a:	2200      	movs	r2, #0
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	3304      	adds	r3, #4
 8004140:	2200      	movs	r2, #0
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	3304      	adds	r3, #4
 8004146:	2200      	movs	r2, #0
 8004148:	601a      	str	r2, [r3, #0]
 800414a:	3304      	adds	r3, #4
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	3304      	adds	r3, #4
 8004152:	2200      	movs	r2, #0
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	3304      	adds	r3, #4
 8004158:	2302      	movs	r3, #2
 800415a:	617b      	str	r3, [r7, #20]
            .cmd = FS_CMD_READ,
            .from = task->pid,
 800415c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800415e:	685b      	ldr	r3, [r3, #4]
        struct file *driver = regfile->driver_file;
        int size = request->size;
        if (size > REGFILE_BUF)
            size = REGFILE_BUF;

        struct fs_request fs_request = {
 8004160:	61bb      	str	r3, [r7, #24]
            .cmd = FS_CMD_READ,
            .from = task->pid,
            .target = regfile->file.fd,
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
        struct file *driver = regfile->driver_file;
        int size = request->size;
        if (size > REGFILE_BUF)
            size = REGFILE_BUF;

        struct fs_request fs_request = {
 8004166:	623b      	str	r3, [r7, #32]
 8004168:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800416a:	647b      	str	r3, [r7, #68]	; 0x44
            .cmd = FS_CMD_READ,
            .from = task->pid,
            .target = regfile->file.fd,
            .size = size,
            .pos = regfile->pos
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	69db      	ldr	r3, [r3, #28]
        struct file *driver = regfile->driver_file;
        int size = request->size;
        if (size > REGFILE_BUF)
            size = REGFILE_BUF;

        struct fs_request fs_request = {
 8004170:	64bb      	str	r3, [r7, #72]	; 0x48
            .target = regfile->file.fd,
            .size = size,
            .pos = regfile->pos
        };

        struct file_request file_request = {
 8004172:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004176:	2200      	movs	r2, #0
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	3304      	adds	r3, #4
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]
 8004180:	3304      	adds	r3, #4
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]
 8004186:	3304      	adds	r3, #4
 8004188:	2200      	movs	r2, #0
 800418a:	601a      	str	r2, [r3, #0]
 800418c:	3304      	adds	r3, #4
 800418e:	f107 0314 	add.w	r3, r7, #20
 8004192:	653b      	str	r3, [r7, #80]	; 0x50
 8004194:	2338      	movs	r3, #56	; 0x38
 8004196:	657b      	str	r3, [r7, #84]	; 0x54
            .task = NULL,
            .buf = (char *)&fs_request,
            .size = sizeof(fs_request),
        };
        if (file_write(driver, &file_request, monitor) == 1) {
 8004198:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800419c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800419e:	4619      	mov	r1, r3
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	f7fc ff93 	bl	80010cc <file_write>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d107      	bne.n	80041bc <regfile_request_readable+0xec>
            regfile->request_pid = task->pid;
 80041ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	615a      	str	r2, [r3, #20]
            regfile->buzy = 1;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2201      	movs	r2, #1
 80041b8:	619a      	str	r2, [r3, #24]
 80041ba:	e00c      	b.n	80041d6 <regfile_request_readable+0x106>
 80041bc:	e00b      	b.n	80041d6 <regfile_request_readable+0x106>
        }
    }
    else if (regfile->request_pid == task->pid && !regfile->buzy) {
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	695a      	ldr	r2, [r3, #20]
 80041c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d105      	bne.n	80041d6 <regfile_request_readable+0x106>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <regfile_request_readable+0x106>
        return FILE_ACCESS_ACCEPT;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e007      	b.n	80041e6 <regfile_request_readable+0x116>
    }

	event_monitor_block(monitor, regfile->event, task);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	4619      	mov	r1, r3
 80041de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041e0:	f7fc fc6c 	bl	8000abc <event_monitor_block>
    return FILE_ACCESS_BLOCK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3768      	adds	r7, #104	; 0x68
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop

080041f0 <regfile_request_writable>:
 *  6. Driver write empty data to buffer
 *  7. Get transfer_len
 */
int regfile_request_writable (struct regfile *regfile, struct file_request *request,
                            struct event_monitor *monitor)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b09a      	sub	sp, #104	; 0x68
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
    struct task_control_block *task = request->task;
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	663b      	str	r3, [r7, #96]	; 0x60

    if (regfile->request_pid == 0) {
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d174      	bne.n	80042f4 <regfile_request_writable+0x104>
        /* try to send request */
        struct file *driver = regfile->driver_file;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	65fb      	str	r3, [r7, #92]	; 0x5c
        int size = request->size;
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	667b      	str	r3, [r7, #100]	; 0x64
        if (size > REGFILE_BUF)
 8004216:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004218:	2b40      	cmp	r3, #64	; 0x40
 800421a:	dd01      	ble.n	8004220 <regfile_request_writable+0x30>
            size = REGFILE_BUF;
 800421c:	2340      	movs	r3, #64	; 0x40
 800421e:	667b      	str	r3, [r7, #100]	; 0x64

        struct fs_request fs_request = {
 8004220:	f107 0314 	add.w	r3, r7, #20
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	3304      	adds	r3, #4
 800422a:	2200      	movs	r2, #0
 800422c:	601a      	str	r2, [r3, #0]
 800422e:	3304      	adds	r3, #4
 8004230:	2200      	movs	r2, #0
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	3304      	adds	r3, #4
 8004236:	2200      	movs	r2, #0
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	3304      	adds	r3, #4
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	3304      	adds	r3, #4
 8004242:	2200      	movs	r2, #0
 8004244:	601a      	str	r2, [r3, #0]
 8004246:	3304      	adds	r3, #4
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	3304      	adds	r3, #4
 800424e:	2200      	movs	r2, #0
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	3304      	adds	r3, #4
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	3304      	adds	r3, #4
 800425a:	2200      	movs	r2, #0
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	3304      	adds	r3, #4
 8004260:	2200      	movs	r2, #0
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	3304      	adds	r3, #4
 8004266:	2200      	movs	r2, #0
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	3304      	adds	r3, #4
 800426c:	2200      	movs	r2, #0
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	3304      	adds	r3, #4
 8004272:	2200      	movs	r2, #0
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	3304      	adds	r3, #4
 8004278:	2303      	movs	r3, #3
 800427a:	617b      	str	r3, [r7, #20]
            .cmd = FS_CMD_WRITE,
            .from = task->pid,
 800427c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800427e:	685b      	ldr	r3, [r3, #4]
        struct file *driver = regfile->driver_file;
        int size = request->size;
        if (size > REGFILE_BUF)
            size = REGFILE_BUF;

        struct fs_request fs_request = {
 8004280:	61bb      	str	r3, [r7, #24]
            .cmd = FS_CMD_WRITE,
            .from = task->pid,
            .target = regfile->file.fd,
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
        struct file *driver = regfile->driver_file;
        int size = request->size;
        if (size > REGFILE_BUF)
            size = REGFILE_BUF;

        struct fs_request fs_request = {
 8004286:	623b      	str	r3, [r7, #32]
 8004288:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800428a:	647b      	str	r3, [r7, #68]	; 0x44
            .cmd = FS_CMD_WRITE,
            .from = task->pid,
            .target = regfile->file.fd,
            .size = size,
            .pos = regfile->pos
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	69db      	ldr	r3, [r3, #28]
        struct file *driver = regfile->driver_file;
        int size = request->size;
        if (size > REGFILE_BUF)
            size = REGFILE_BUF;

        struct fs_request fs_request = {
 8004290:	64bb      	str	r3, [r7, #72]	; 0x48
            .target = regfile->file.fd,
            .size = size,
            .pos = regfile->pos
        };

        struct file_request file_request = {
 8004292:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004296:	2200      	movs	r2, #0
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	3304      	adds	r3, #4
 800429c:	2200      	movs	r2, #0
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	3304      	adds	r3, #4
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]
 80042a6:	3304      	adds	r3, #4
 80042a8:	2200      	movs	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	3304      	adds	r3, #4
 80042ae:	f107 0314 	add.w	r3, r7, #20
 80042b2:	653b      	str	r3, [r7, #80]	; 0x50
 80042b4:	2338      	movs	r3, #56	; 0x38
 80042b6:	657b      	str	r3, [r7, #84]	; 0x54
            .task = NULL,
            .buf = (char *)&fs_request,
            .size = sizeof(fs_request),
        };

        if (file_write(driver, &file_request, monitor) == 1) {
 80042b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80042bc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80042be:	4619      	mov	r1, r3
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	f7fc ff03 	bl	80010cc <file_write>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d112      	bne.n	80042f2 <regfile_request_writable+0x102>

            memcpy(regfile->buf, request->buf, size);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f103 0120 	add.w	r1, r3, #32
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042d8:	4608      	mov	r0, r1
 80042da:	4611      	mov	r1, r2
 80042dc:	461a      	mov	r2, r3
 80042de:	f013 fe27 	bl	8017f30 <memcpy>

            regfile->request_pid = task->pid;
 80042e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	615a      	str	r2, [r3, #20]
            regfile->buzy = 1;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2201      	movs	r2, #1
 80042ee:	619a      	str	r2, [r3, #24]
 80042f0:	e00c      	b.n	800430c <regfile_request_writable+0x11c>
 80042f2:	e00b      	b.n	800430c <regfile_request_writable+0x11c>
        }
    }
    else if (regfile->request_pid == task->pid && !regfile->buzy) {
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	695a      	ldr	r2, [r3, #20]
 80042f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d105      	bne.n	800430c <regfile_request_writable+0x11c>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <regfile_request_writable+0x11c>
        return FILE_ACCESS_ACCEPT;
 8004308:	2301      	movs	r3, #1
 800430a:	e007      	b.n	800431c <regfile_request_writable+0x12c>
    }

	event_monitor_block(monitor, regfile->event, task);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	4619      	mov	r1, r3
 8004314:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004316:	f7fc fbd1 	bl	8000abc <event_monitor_block>
    return FILE_ACCESS_BLOCK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3768      	adds	r7, #104	; 0x68
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <regfile_request_lseekable>:

int regfile_request_lseekable (struct regfile *regfile, struct file_request *request,
                             struct event_monitor *monitor)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b09a      	sub	sp, #104	; 0x68
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
    struct task_control_block *task = request->task;
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	663b      	str	r3, [r7, #96]	; 0x60

    if (regfile->request_pid == 0) {
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d17f      	bne.n	800443e <regfile_request_lseekable+0x11a>
        /* try to send request */
        struct file *driver = regfile->driver_file;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	65fb      	str	r3, [r7, #92]	; 0x5c
        int size = request->size;
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	65bb      	str	r3, [r7, #88]	; 0x58
        if (size > REGFILE_BUF)
 800434a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800434c:	2b40      	cmp	r3, #64	; 0x40
 800434e:	dd01      	ble.n	8004354 <regfile_request_lseekable+0x30>
            size = REGFILE_BUF;
 8004350:	2340      	movs	r3, #64	; 0x40
 8004352:	65bb      	str	r3, [r7, #88]	; 0x58

        int pos;
        switch(request->whence) {
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	2b02      	cmp	r3, #2
 800435a:	d006      	beq.n	800436a <regfile_request_lseekable+0x46>
 800435c:	2b03      	cmp	r3, #3
 800435e:	d008      	beq.n	8004372 <regfile_request_lseekable+0x4e>
 8004360:	2b01      	cmp	r3, #1
 8004362:	d10a      	bne.n	800437a <regfile_request_lseekable+0x56>
            case SEEK_SET:
                pos = 0;
 8004364:	2300      	movs	r3, #0
 8004366:	667b      	str	r3, [r7, #100]	; 0x64
                break;
 8004368:	e00a      	b.n	8004380 <regfile_request_lseekable+0x5c>
            case SEEK_CUR:
                pos = regfile->pos;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	667b      	str	r3, [r7, #100]	; 0x64
                break;
 8004370:	e006      	b.n	8004380 <regfile_request_lseekable+0x5c>
            case SEEK_END:
                pos = -1;
 8004372:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004376:	667b      	str	r3, [r7, #100]	; 0x64
                break;
 8004378:	e002      	b.n	8004380 <regfile_request_lseekable+0x5c>
            default:
                return FILE_ACCESS_ERROR;
 800437a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800437e:	e072      	b.n	8004466 <regfile_request_lseekable+0x142>
        }

        struct fs_request fs_request = {
 8004380:	f107 0310 	add.w	r3, r7, #16
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	3304      	adds	r3, #4
 800438a:	2200      	movs	r2, #0
 800438c:	601a      	str	r2, [r3, #0]
 800438e:	3304      	adds	r3, #4
 8004390:	2200      	movs	r2, #0
 8004392:	601a      	str	r2, [r3, #0]
 8004394:	3304      	adds	r3, #4
 8004396:	2200      	movs	r2, #0
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	3304      	adds	r3, #4
 800439c:	2200      	movs	r2, #0
 800439e:	601a      	str	r2, [r3, #0]
 80043a0:	3304      	adds	r3, #4
 80043a2:	2200      	movs	r2, #0
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	3304      	adds	r3, #4
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	3304      	adds	r3, #4
 80043ae:	2200      	movs	r2, #0
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	3304      	adds	r3, #4
 80043b4:	2200      	movs	r2, #0
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	3304      	adds	r3, #4
 80043ba:	2200      	movs	r2, #0
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	3304      	adds	r3, #4
 80043c0:	2200      	movs	r2, #0
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	3304      	adds	r3, #4
 80043c6:	2200      	movs	r2, #0
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	3304      	adds	r3, #4
 80043cc:	2200      	movs	r2, #0
 80043ce:	601a      	str	r2, [r3, #0]
 80043d0:	3304      	adds	r3, #4
 80043d2:	2200      	movs	r2, #0
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	3304      	adds	r3, #4
 80043d8:	2304      	movs	r3, #4
 80043da:	613b      	str	r3, [r7, #16]
            .cmd = FS_CMD_SEEK,
            .from = task->pid,
 80043dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043de:	685b      	ldr	r3, [r3, #4]
                break;
            default:
                return FILE_ACCESS_ERROR;
        }

        struct fs_request fs_request = {
 80043e0:	617b      	str	r3, [r7, #20]
            .cmd = FS_CMD_SEEK,
            .from = task->pid,
            .target = regfile->file.fd,
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
                break;
            default:
                return FILE_ACCESS_ERROR;
        }

        struct fs_request fs_request = {
 80043e6:	61fb      	str	r3, [r7, #28]
            .cmd = FS_CMD_SEEK,
            .from = task->pid,
            .target = regfile->file.fd,
            .size = request->size,
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	689b      	ldr	r3, [r3, #8]
                break;
            default:
                return FILE_ACCESS_ERROR;
        }

        struct fs_request fs_request = {
 80043ec:	643b      	str	r3, [r7, #64]	; 0x40
 80043ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043f0:	647b      	str	r3, [r7, #68]	; 0x44
            .target = regfile->file.fd,
            .size = request->size,
            .pos = pos,
        };

        struct file_request file_request = {
 80043f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80043f6:	2200      	movs	r2, #0
 80043f8:	601a      	str	r2, [r3, #0]
 80043fa:	3304      	adds	r3, #4
 80043fc:	2200      	movs	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	3304      	adds	r3, #4
 8004402:	2200      	movs	r2, #0
 8004404:	601a      	str	r2, [r3, #0]
 8004406:	3304      	adds	r3, #4
 8004408:	2200      	movs	r2, #0
 800440a:	601a      	str	r2, [r3, #0]
 800440c:	3304      	adds	r3, #4
 800440e:	f107 0310 	add.w	r3, r7, #16
 8004412:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004414:	2338      	movs	r3, #56	; 0x38
 8004416:	653b      	str	r3, [r7, #80]	; 0x50
            .task = NULL,
            .buf = (char *)&fs_request,
            .size = sizeof(fs_request),
        };

        if (file_write(driver, &file_request, monitor) == 1) {
 8004418:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800441c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800441e:	4619      	mov	r1, r3
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	f7fc fe53 	bl	80010cc <file_write>
 8004426:	4603      	mov	r3, r0
 8004428:	2b01      	cmp	r3, #1
 800442a:	d107      	bne.n	800443c <regfile_request_lseekable+0x118>
            regfile->request_pid = task->pid;
 800442c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	615a      	str	r2, [r3, #20]
            regfile->buzy = 1;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2201      	movs	r2, #1
 8004438:	619a      	str	r2, [r3, #24]
 800443a:	e00c      	b.n	8004456 <regfile_request_lseekable+0x132>
 800443c:	e00b      	b.n	8004456 <regfile_request_lseekable+0x132>
        }
    }
    else if (regfile->request_pid == task->pid && !regfile->buzy) {
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	695a      	ldr	r2, [r3, #20]
 8004442:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	429a      	cmp	r2, r3
 8004448:	d105      	bne.n	8004456 <regfile_request_lseekable+0x132>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <regfile_request_lseekable+0x132>
        return FILE_ACCESS_ACCEPT;
 8004452:	2301      	movs	r3, #1
 8004454:	e007      	b.n	8004466 <regfile_request_lseekable+0x142>
    }

	event_monitor_block(monitor, regfile->event, task);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	4619      	mov	r1, r3
 800445e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004460:	f7fc fb2c 	bl	8000abc <event_monitor_block>
    return FILE_ACCESS_BLOCK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3768      	adds	r7, #104	; 0x68
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop

08004470 <regfile_request_read>:

int regfile_request_read (struct regfile *regfile, struct file_request *request,
                        struct event_monitor *monitor)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
    if (regfile->transfer_len > 0) {
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004480:	2b00      	cmp	r3, #0
 8004482:	dd12      	ble.n	80044aa <regfile_request_read+0x3a>
        memcpy(request->buf, regfile->buf, regfile->transfer_len);
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	6859      	ldr	r1, [r3, #4]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f103 0220 	add.w	r2, r3, #32
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004492:	4608      	mov	r0, r1
 8004494:	4611      	mov	r1, r2
 8004496:	461a      	mov	r2, r3
 8004498:	f013 fd4a 	bl	8017f30 <memcpy>

        regfile->pos += regfile->transfer_len;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	69da      	ldr	r2, [r3, #28]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a4:	441a      	add	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	61da      	str	r2, [r3, #28]
    }

    regfile->request_pid = 0;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	615a      	str	r2, [r3, #20]
    return regfile->transfer_len;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3710      	adds	r7, #16
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <regfile_request_write>:

int regfile_request_write (struct regfile *regfile, struct file_request *request,
                         struct event_monitor *monitor)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
    if (regfile->transfer_len > 0) {
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	dd06      	ble.n	80044de <regfile_request_write+0x22>
        regfile->pos += regfile->transfer_len;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	69da      	ldr	r2, [r3, #28]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044d8:	441a      	add	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	61da      	str	r2, [r3, #28]
    }

    regfile->request_pid = 0;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	615a      	str	r2, [r3, #20]
    return regfile->transfer_len;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3714      	adds	r7, #20
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <regfile_request_lseek>:

int regfile_request_lseek (struct regfile *regfile, struct file_request *request,
                         struct event_monitor *monitor)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
    if (regfile->transfer_len >= 0) {
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004504:	2b00      	cmp	r3, #0
 8004506:	db03      	blt.n	8004510 <regfile_request_lseek+0x1c>
        regfile->pos = regfile->transfer_len;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	61da      	str	r2, [r3, #28]
    }

    regfile->request_pid = 0;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	615a      	str	r2, [r3, #20]
    return regfile->transfer_len;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 800451a:	4618      	mov	r0, r3
 800451c:	3714      	adds	r7, #20
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop

08004528 <regfile_event_release>:

int regfile_event_release(struct event_monitor *monitor, int event,
                        struct task_control_block *task, void *data)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
 8004534:	603b      	str	r3, [r7, #0]
    struct file *file = data;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	617b      	str	r3, [r7, #20]
    struct file_request *request = (void*)task->stack->r0;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004540:	613b      	str	r3, [r7, #16]

    switch (task->stack->r7) {
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	2b04      	cmp	r3, #4
 800454a:	d004      	beq.n	8004556 <regfile_event_release+0x2e>
 800454c:	2b0a      	cmp	r3, #10
 800454e:	d010      	beq.n	8004572 <regfile_event_release+0x4a>
 8004550:	2b03      	cmp	r3, #3
 8004552:	d007      	beq.n	8004564 <regfile_event_release+0x3c>
 8004554:	e014      	b.n	8004580 <regfile_event_release+0x58>
        case 0x04:
            return file_read(file, request, monitor);
 8004556:	6978      	ldr	r0, [r7, #20]
 8004558:	6939      	ldr	r1, [r7, #16]
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	f7fc fd6c 	bl	8001038 <file_read>
 8004560:	4603      	mov	r3, r0
 8004562:	e00e      	b.n	8004582 <regfile_event_release+0x5a>
        case 0x03:
            return file_write(file, request, monitor);
 8004564:	6978      	ldr	r0, [r7, #20]
 8004566:	6939      	ldr	r1, [r7, #16]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	f7fc fdaf 	bl	80010cc <file_write>
 800456e:	4603      	mov	r3, r0
 8004570:	e007      	b.n	8004582 <regfile_event_release+0x5a>
        case 0x0a:
            return file_lseek(file, request, monitor);
 8004572:	6978      	ldr	r0, [r7, #20]
 8004574:	6939      	ldr	r1, [r7, #16]
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	f7fc fe4a 	bl	8001210 <file_lseek>
 800457c:	4603      	mov	r3, r0
 800457e:	e000      	b.n	8004582 <regfile_event_release+0x5a>
        default:
            return 0;
 8004580:	2300      	movs	r3, #0
    }
}
 8004582:	4618      	mov	r0, r3
 8004584:	3718      	adds	r7, #24
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop

0800458c <regfile_init>:

int regfile_init(int fd, int driver_pid, struct file *files[],
               struct memory_pool *memory_pool, struct event_monitor *monitor)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
 8004598:	603b      	str	r3, [r7, #0]
    struct regfile *regfile;

    regfile = memory_pool_alloc(memory_pool, sizeof(*regfile));
 800459a:	6838      	ldr	r0, [r7, #0]
 800459c:	2164      	movs	r1, #100	; 0x64
 800459e:	f7fe fe35 	bl	800320c <memory_pool_alloc>
 80045a2:	6178      	str	r0, [r7, #20]

    if (!regfile)
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d102      	bne.n	80045b0 <regfile_init+0x24>
        return -1;
 80045aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045ae:	e02f      	b.n	8004610 <regfile_init+0x84>

    regfile->driver_pid = driver_pid;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	609a      	str	r2, [r3, #8]
    regfile->driver_file = files[driver_pid + 3];
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	3303      	adds	r3, #3
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	4413      	add	r3, r2
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	60da      	str	r2, [r3, #12]
    regfile->request_pid = 0;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2200      	movs	r2, #0
 80045ca:	615a      	str	r2, [r3, #20]
    regfile->buzy = 0;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	2200      	movs	r2, #0
 80045d0:	619a      	str	r2, [r3, #24]
    regfile->pos = 0;
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	2200      	movs	r2, #0
 80045d6:	61da      	str	r2, [r3, #28]
	regfile->file.ops = &regfile_ops;
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	4a0f      	ldr	r2, [pc, #60]	; (8004618 <regfile_init+0x8c>)
 80045dc:	605a      	str	r2, [r3, #4]
    regfile->event = event_monitor_find_free(monitor);
 80045de:	6a38      	ldr	r0, [r7, #32]
 80045e0:	f7fc fa1c 	bl	8000a1c <event_monitor_find_free>
 80045e4:	4602      	mov	r2, r0
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	611a      	str	r2, [r3, #16]
    files[fd] = &regfile->file;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	4413      	add	r3, r2
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	601a      	str	r2, [r3, #0]

    event_monitor_register(monitor, regfile->event, regfile_event_release, files[fd]);
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	691a      	ldr	r2, [r3, #16]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	6879      	ldr	r1, [r7, #4]
 8004600:	440b      	add	r3, r1
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6a38      	ldr	r0, [r7, #32]
 8004606:	4611      	mov	r1, r2
 8004608:	4a04      	ldr	r2, [pc, #16]	; (800461c <regfile_init+0x90>)
 800460a:	f7fc fa2d 	bl	8000a68 <event_monitor_register>

    return 0;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3718      	adds	r7, #24
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	20000054 	.word	0x20000054
 800461c:	08004529 	.word	0x08004529

08004620 <regfile_response>:

int regfile_response(int fd, char *buf, int len)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
    struct regfile_response response = {
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	613b      	str	r3, [r7, #16]
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	617b      	str	r3, [r7, #20]
        .transfer_len = len,
        .buf = buf
    };
    return write(fd, &response, sizeof(response));
 8004634:	f107 0310 	add.w	r3, r7, #16
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	4619      	mov	r1, r3
 800463c:	2208      	movs	r2, #8
 800463e:	f013 fccd 	bl	8017fdc <write>
 8004642:	4603      	mov	r3, r0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3718      	adds	r7, #24
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <regfile_readable>:

int regfile_readable (struct file *file, struct file_request *request,
                    struct event_monitor *monitor)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
    struct regfile *regfile = container_of(file, struct regfile, file);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	617b      	str	r3, [r7, #20]
    if (regfile->driver_pid == request->task->pid) {
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	429a      	cmp	r2, r3
 8004668:	d106      	bne.n	8004678 <regfile_readable+0x2c>
        return regfile_driver_readable(regfile, request, monitor);
 800466a:	6978      	ldr	r0, [r7, #20]
 800466c:	68b9      	ldr	r1, [r7, #8]
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	f7ff fc8c 	bl	8003f8c <regfile_driver_readable>
 8004674:	4603      	mov	r3, r0
 8004676:	e005      	b.n	8004684 <regfile_readable+0x38>
    }
    else {
        return regfile_request_readable(regfile, request, monitor);
 8004678:	6978      	ldr	r0, [r7, #20]
 800467a:	68b9      	ldr	r1, [r7, #8]
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	f7ff fd27 	bl	80040d0 <regfile_request_readable>
 8004682:	4603      	mov	r3, r0
    }
}
 8004684:	4618      	mov	r0, r3
 8004686:	3718      	adds	r7, #24
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <regfile_writable>:

int regfile_writable (struct file *file, struct file_request *request,
                    struct event_monitor *monitor)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
    struct regfile *regfile = container_of(file, struct regfile, file);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	617b      	str	r3, [r7, #20]
    if (regfile->driver_pid == request->task->pid) {
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d106      	bne.n	80046b8 <regfile_writable+0x2c>
        return regfile_driver_writable(regfile, request, monitor);
 80046aa:	6978      	ldr	r0, [r7, #20]
 80046ac:	68b9      	ldr	r1, [r7, #8]
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	f7ff fc80 	bl	8003fb4 <regfile_driver_writable>
 80046b4:	4603      	mov	r3, r0
 80046b6:	e005      	b.n	80046c4 <regfile_writable+0x38>
    }
    else {
        return regfile_request_writable(regfile, request, monitor);
 80046b8:	6978      	ldr	r0, [r7, #20]
 80046ba:	68b9      	ldr	r1, [r7, #8]
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	f7ff fd97 	bl	80041f0 <regfile_request_writable>
 80046c2:	4603      	mov	r3, r0
    }
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3718      	adds	r7, #24
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <regfile_read>:

int regfile_read (struct file *file, struct file_request *request,
                struct event_monitor *monitor)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
    struct regfile *regfile = container_of(file, struct regfile, file);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	617b      	str	r3, [r7, #20]
    if (regfile->driver_pid == request->task->pid) {
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d106      	bne.n	80046f8 <regfile_read+0x2c>
        return regfile_driver_read(regfile, request, monitor);
 80046ea:	6978      	ldr	r0, [r7, #20]
 80046ec:	68b9      	ldr	r1, [r7, #8]
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	f7ff fc88 	bl	8004004 <regfile_driver_read>
 80046f4:	4603      	mov	r3, r0
 80046f6:	e005      	b.n	8004704 <regfile_read+0x38>
    }
    else {
        return regfile_request_read(regfile, request, monitor);
 80046f8:	6978      	ldr	r0, [r7, #20]
 80046fa:	68b9      	ldr	r1, [r7, #8]
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	f7ff feb7 	bl	8004470 <regfile_request_read>
 8004702:	4603      	mov	r3, r0
    }
}
 8004704:	4618      	mov	r0, r3
 8004706:	3718      	adds	r7, #24
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <regfile_write>:

int regfile_write (struct file *file, struct file_request *request,
                 struct event_monitor *monitor)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b086      	sub	sp, #24
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
    struct regfile *regfile = container_of(file, struct regfile, file);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	617b      	str	r3, [r7, #20]
    if (regfile->driver_pid == request->task->pid) {
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	689a      	ldr	r2, [r3, #8]
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	429a      	cmp	r2, r3
 8004728:	d106      	bne.n	8004738 <regfile_write+0x2c>
        return regfile_driver_write(regfile, request, monitor);
 800472a:	6978      	ldr	r0, [r7, #20]
 800472c:	68b9      	ldr	r1, [r7, #8]
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	f7ff fc86 	bl	8004040 <regfile_driver_write>
 8004734:	4603      	mov	r3, r0
 8004736:	e005      	b.n	8004744 <regfile_write+0x38>
    }
    else {
        return regfile_request_write(regfile, request, monitor);
 8004738:	6978      	ldr	r0, [r7, #20]
 800473a:	68b9      	ldr	r1, [r7, #8]
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	f7ff febd 	bl	80044bc <regfile_request_write>
 8004742:	4603      	mov	r3, r0
    }
}
 8004744:	4618      	mov	r0, r3
 8004746:	3718      	adds	r7, #24
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <regfile_lseekable>:

int regfile_lseekable (struct file *file, struct file_request *request,
                     struct event_monitor *monitor)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
    struct regfile *regfile = container_of(file, struct regfile, file);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	617b      	str	r3, [r7, #20]

    if (regfile->driver_pid == request->task->pid) {
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	689a      	ldr	r2, [r3, #8]
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	429a      	cmp	r2, r3
 8004768:	d106      	bne.n	8004778 <regfile_lseekable+0x2c>
        return regfile_driver_lseekable(regfile, request, monitor);
 800476a:	6978      	ldr	r0, [r7, #20]
 800476c:	68b9      	ldr	r1, [r7, #8]
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	f7ff fc34 	bl	8003fdc <regfile_driver_lseekable>
 8004774:	4603      	mov	r3, r0
 8004776:	e005      	b.n	8004784 <regfile_lseekable+0x38>
    }
    else {
        return regfile_request_lseekable(regfile, request, monitor);
 8004778:	6978      	ldr	r0, [r7, #20]
 800477a:	68b9      	ldr	r1, [r7, #8]
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	f7ff fdd1 	bl	8004324 <regfile_request_lseekable>
 8004782:	4603      	mov	r3, r0
    }
}
 8004784:	4618      	mov	r0, r3
 8004786:	3718      	adds	r7, #24
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <regfile_lseek>:

int regfile_lseek (struct file *file, struct file_request *request,
                 struct event_monitor *monitor)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
    struct regfile *regfile = container_of(file, struct regfile, file);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	617b      	str	r3, [r7, #20]

    if (regfile->driver_pid == request->task->pid) {
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d106      	bne.n	80047b8 <regfile_lseek+0x2c>
        return regfile_driver_lseek(regfile, request, monitor);
 80047aa:	6978      	ldr	r0, [r7, #20]
 80047ac:	68b9      	ldr	r1, [r7, #8]
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	f7ff fc74 	bl	800409c <regfile_driver_lseek>
 80047b4:	4603      	mov	r3, r0
 80047b6:	e005      	b.n	80047c4 <regfile_lseek+0x38>
    }
    else {
        return regfile_request_lseek(regfile, request, monitor);
 80047b8:	6978      	ldr	r0, [r7, #20]
 80047ba:	68b9      	ldr	r1, [r7, #8]
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	f7ff fe99 	bl	80044f4 <regfile_request_lseek>
 80047c2:	4603      	mov	r3, r0
    }
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3718      	adds	r7, #24
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <romdev_driver>:
#include "block.h"
#include "path.h"


void romdev_driver()
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b08e      	sub	sp, #56	; 0x38
 80047d0:	af00      	add	r7, sp, #0
    const char *request_start;
    const char *request_end;
    size_t request_len;

    /* Register path for device */
    self = getpid() + 3;
 80047d2:	f013 fbfc 	bl	8017fce <getpid>
 80047d6:	4603      	mov	r3, r0
 80047d8:	3303      	adds	r3, #3
 80047da:	627b      	str	r3, [r7, #36]	; 0x24
	fd = path_register(ROMDEV_PATH);
 80047dc:	4838      	ldr	r0, [pc, #224]	; (80048c0 <romdev_driver+0xf4>)
 80047de:	f7ff fa19 	bl	8003c14 <path_register>
 80047e2:	6378      	str	r0, [r7, #52]	; 0x34
	mknod(fd, 0, S_IFBLK);
 80047e4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80047e6:	2100      	movs	r1, #0
 80047e8:	2206      	movs	r2, #6
 80047ea:	f013 fc1a 	bl	8018022 <mknod>

    /* Service routine */
	while (1) {
	    if (read(self, &request, sizeof(request)) == sizeof(request)) {
 80047ee:	1d3b      	adds	r3, r7, #4
 80047f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047f2:	4619      	mov	r1, r3
 80047f4:	2214      	movs	r2, #20
 80047f6:	f013 fbf8 	bl	8017fea <read>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b14      	cmp	r3, #20
 80047fe:	d15e      	bne.n	80048be <romdev_driver+0xf2>
	        cmd = request.cmd;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	623b      	str	r3, [r7, #32]

	        switch (cmd) {
 8004804:	6a3b      	ldr	r3, [r7, #32]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d002      	beq.n	8004810 <romdev_driver+0x44>
 800480a:	2b03      	cmp	r3, #3
 800480c:	d02f      	beq.n	800486e <romdev_driver+0xa2>
 800480e:	e04f      	b.n	80048b0 <romdev_driver+0xe4>
	            case BLOCK_CMD_READ:
	                fd = request.fd;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	637b      	str	r3, [r7, #52]	; 0x34
	                size = request.size;
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	61fb      	str	r3, [r7, #28]
	                pos = request.pos;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	61bb      	str	r3, [r7, #24]

                    /* Check boundary */
                    request_start = &_sromdev + pos;
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	4b29      	ldr	r3, [pc, #164]	; (80048c4 <romdev_driver+0xf8>)
 8004820:	4413      	add	r3, r2
 8004822:	633b      	str	r3, [r7, #48]	; 0x30
                    if (request_start < &_sromdev)
 8004824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004826:	4b27      	ldr	r3, [pc, #156]	; (80048c4 <romdev_driver+0xf8>)
 8004828:	429a      	cmp	r2, r3
 800482a:	d205      	bcs.n	8004838 <romdev_driver+0x6c>
	                    block_response(fd, NULL, -1);
 800482c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800482e:	2100      	movs	r1, #0
 8004830:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004834:	f7fb ffd4 	bl	80007e0 <block_response>
                    if (request_start > &_eromdev)
 8004838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800483a:	4b23      	ldr	r3, [pc, #140]	; (80048c8 <romdev_driver+0xfc>)
 800483c:	429a      	cmp	r2, r3
 800483e:	d901      	bls.n	8004844 <romdev_driver+0x78>
                        request_start = &_eromdev;
 8004840:	4b21      	ldr	r3, [pc, #132]	; (80048c8 <romdev_driver+0xfc>)
 8004842:	633b      	str	r3, [r7, #48]	; 0x30

                    request_end = request_start + size;
 8004844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	4413      	add	r3, r2
 800484a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (request_end > &_eromdev)
 800484c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800484e:	4b1e      	ldr	r3, [pc, #120]	; (80048c8 <romdev_driver+0xfc>)
 8004850:	429a      	cmp	r2, r3
 8004852:	d901      	bls.n	8004858 <romdev_driver+0x8c>
                        request_end = &_eromdev;
 8004854:	4b1c      	ldr	r3, [pc, #112]	; (80048c8 <romdev_driver+0xfc>)
 8004856:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Response */
                    request_len = request_end - request_start;
 8004858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800485a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	62bb      	str	r3, [r7, #40]	; 0x28
	                block_response(fd, (char *)request_start, request_len);
 8004860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004862:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004864:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004866:	461a      	mov	r2, r3
 8004868:	f7fb ffba 	bl	80007e0 <block_response>
	                break;
 800486c:	e027      	b.n	80048be <romdev_driver+0xf2>

	            case BLOCK_CMD_SEEK:
	                fd = request.fd;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	637b      	str	r3, [r7, #52]	; 0x34
	                size = request.size;
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	61fb      	str	r3, [r7, #28]
	                pos = request.pos;
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	61bb      	str	r3, [r7, #24]

	                if (pos == 0) { /* SEEK_SET */
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d102      	bne.n	8004886 <romdev_driver+0xba>
	                    request_len = size;
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	62bb      	str	r3, [r7, #40]	; 0x28
 8004884:	e00d      	b.n	80048a2 <romdev_driver+0xd6>
	                }
	                else if (pos < 0) { /* SEEK_END */
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	2b00      	cmp	r3, #0
 800488a:	da06      	bge.n	800489a <romdev_driver+0xce>
	                    request_len = (&_eromdev - &_sromdev) + size;
 800488c:	4b0d      	ldr	r3, [pc, #52]	; (80048c4 <romdev_driver+0xf8>)
 800488e:	69fa      	ldr	r2, [r7, #28]
 8004890:	1ad2      	subs	r2, r2, r3
 8004892:	4b0d      	ldr	r3, [pc, #52]	; (80048c8 <romdev_driver+0xfc>)
 8004894:	4413      	add	r3, r2
 8004896:	62bb      	str	r3, [r7, #40]	; 0x28
 8004898:	e003      	b.n	80048a2 <romdev_driver+0xd6>
	                }
	                else { /* SEEK_CUR */
	                    request_len = pos + size;
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	4413      	add	r3, r2
 80048a0:	62bb      	str	r3, [r7, #40]	; 0x28
	                }
	                lseek(fd, request_len, SEEK_SET);
 80048a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80048a6:	4619      	mov	r1, r3
 80048a8:	2201      	movs	r2, #1
 80048aa:	f013 fbc8 	bl	801803e <lseek>
	                break;
 80048ae:	e006      	b.n	80048be <romdev_driver+0xf2>

	            case BLOCK_CMD_WRITE: /* readonly */
	            default:
	                block_response(fd, NULL, -1);
 80048b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80048b2:	2100      	movs	r1, #0
 80048b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048b8:	f7fb ff92 	bl	80007e0 <block_response>
	        }
	    }
	}
 80048bc:	e797      	b.n	80047ee <romdev_driver+0x22>
 80048be:	e796      	b.n	80047ee <romdev_driver+0x22>
 80048c0:	0801a568 	.word	0x0801a568
 80048c4:	0801d0bc 	.word	0x0801d0bc
 80048c8:	0801d0f0 	.word	0x0801d0f0

080048cc <romfs_open_recur>:
    uint32_t len;
    uint8_t name[PATH_MAX];
};

int romfs_open_recur(int device, char *path, int this, struct romfs_entry *entry)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
 80048d8:	603b      	str	r3, [r7, #0]
    if (entry->isdir) {
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d040      	beq.n	8004964 <romfs_open_recur+0x98>
        /* Iterate through children */
        int pos = this + sizeof(*entry);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	3334      	adds	r3, #52	; 0x34
 80048e6:	617b      	str	r3, [r7, #20]
        while (pos) {
 80048e8:	e039      	b.n	800495e <romfs_open_recur+0x92>
            /* Get entry */
            lseek(device, pos, SEEK_SET);
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	6979      	ldr	r1, [r7, #20]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f013 fba5 	bl	801803e <lseek>
            read(device, entry, sizeof(*entry));
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	6839      	ldr	r1, [r7, #0]
 80048f8:	2234      	movs	r2, #52	; 0x34
 80048fa:	f013 fb76 	bl	8017fea <read>

            /* Compare path */
            int len = strlen((char *)entry->name);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	3314      	adds	r3, #20
 8004902:	4618      	mov	r0, r3
 8004904:	f000 fa84 	bl	8004e10 <strlen>
 8004908:	4603      	mov	r3, r0
 800490a:	613b      	str	r3, [r7, #16]
            if (strncmp((char *)entry->name, path, len) == 0) {
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	f103 0214 	add.w	r2, r3, #20
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	4610      	mov	r0, r2
 8004916:	68b9      	ldr	r1, [r7, #8]
 8004918:	461a      	mov	r2, r3
 800491a:	f000 fa4d 	bl	8004db8 <strncmp>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d119      	bne.n	8004958 <romfs_open_recur+0x8c>
                if (path[len] == '/') { /* Match directory */
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	4413      	add	r3, r2
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	2b2f      	cmp	r3, #47	; 0x2f
 800492e:	d10b      	bne.n	8004948 <romfs_open_recur+0x7c>
                    return romfs_open_recur(device, path + len + 1, pos, entry);
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	3301      	adds	r3, #1
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	4413      	add	r3, r2
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	4619      	mov	r1, r3
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	f7ff ffc4 	bl	80048cc <romfs_open_recur>
 8004944:	4603      	mov	r3, r0
 8004946:	e00f      	b.n	8004968 <romfs_open_recur+0x9c>
                }
                else if (path[len] == 0) { /* Match file */
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	4413      	add	r3, r2
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <romfs_open_recur+0x8c>
                    return pos;
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	e007      	b.n	8004968 <romfs_open_recur+0x9c>
                }
            }

            /* Next entry */
            pos = entry->next;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	617b      	str	r3, [r7, #20]
int romfs_open_recur(int device, char *path, int this, struct romfs_entry *entry)
{
    if (entry->isdir) {
        /* Iterate through children */
        int pos = this + sizeof(*entry);
        while (pos) {
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1c2      	bne.n	80048ea <romfs_open_recur+0x1e>
            /* Next entry */
            pos = entry->next;
        }
    }

    return -1;
 8004964:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004968:	4618      	mov	r0, r3
 800496a:	3718      	adds	r7, #24
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <romfs_open>:

/*
 * return entry position
 */
int romfs_open(int device, char *path, struct romfs_entry *entry)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
    /* Get root entry */
    lseek(device, 0, SEEK_SET);
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	2100      	movs	r1, #0
 8004980:	2201      	movs	r2, #1
 8004982:	f013 fb5c 	bl	801803e <lseek>
    read(device, entry, sizeof(*entry));
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	6879      	ldr	r1, [r7, #4]
 800498a:	2234      	movs	r2, #52	; 0x34
 800498c:	f013 fb2d 	bl	8017fea <read>

    return romfs_open_recur(device, path, 0, entry);
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	68b9      	ldr	r1, [r7, #8]
 8004994:	2200      	movs	r2, #0
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f7ff ff98 	bl	80048cc <romfs_open_recur>
 800499c:	4603      	mov	r3, r0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop

080049a8 <romfs_server>:

void romfs_server()
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b0d8      	sub	sp, #352	; 0x160
 80049ac:	af00      	add	r7, sp, #0
    struct romfs_file files[ROMFS_FILE_LIMIT];
    int nfiles = 0;
 80049ae:	2300      	movs	r3, #0
 80049b0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    int self = getpid() + 3;
 80049b4:	f013 fb0b 	bl	8017fce <getpid>
 80049b8:	4603      	mov	r3, r0
 80049ba:	3303      	adds	r3, #3
 80049bc:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    int i;
    int data_start;
    int data_end;
    char data[REGFILE_BUF];

    path_register_fs(ROMFS_TYPE);
 80049c0:	48d1      	ldr	r0, [pc, #836]	; (8004d08 <romfs_server+0x360>)
 80049c2:	f7ff f98b 	bl	8003cdc <path_register_fs>

    while (1) {
        if (read(self, &request, sizeof(request)) == sizeof(request)) {
 80049c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80049ca:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 80049ce:	4619      	mov	r1, r3
 80049d0:	2238      	movs	r2, #56	; 0x38
 80049d2:	f013 fb0a 	bl	8017fea <read>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b38      	cmp	r3, #56	; 0x38
 80049da:	f040 81dd 	bne.w	8004d98 <romfs_server+0x3f0>
            cmd = request.cmd;
 80049de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	        switch (cmd) {
 80049e8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	f000 8083 	beq.w	8004af8 <romfs_server+0x150>
 80049f2:	2b04      	cmp	r3, #4
 80049f4:	f000 8167 	beq.w	8004cc6 <romfs_server+0x31e>
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	f040 81c5 	bne.w	8004d88 <romfs_server+0x3e0>
	            case FS_CMD_OPEN:
	                device = request.device;
 80049fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	                from = request.from;
 8004a08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	                pos = request.pos; /* searching starting position */
 8004a12:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a18:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	                pos = romfs_open(request.device, request.path + pos, &entry);
 8004a1c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004a20:	6899      	ldr	r1, [r3, #8]
 8004a22:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004a26:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004a2a:	3310      	adds	r3, #16
 8004a2c:	441a      	add	r2, r3
 8004a2e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004a32:	4608      	mov	r0, r1
 8004a34:	4611      	mov	r1, r2
 8004a36:	461a      	mov	r2, r3
 8004a38:	f7ff ff9a 	bl	8004970 <romfs_open>
 8004a3c:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134

	                if (pos >= 0) { /* Found */
 8004a40:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	db49      	blt.n	8004adc <romfs_server+0x134>
	                    /* Register */
	                    status = path_register(request.path);
 8004a48:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004a4c:	3310      	adds	r3, #16
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7ff f8e0 	bl	8003c14 <path_register>
 8004a54:	4602      	mov	r2, r0
 8004a56:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004a5a:	601a      	str	r2, [r3, #0]

                        if (status != -1) {
 8004a5c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a66:	d03e      	beq.n	8004ae6 <romfs_server+0x13e>
                            mknod(status, 0, S_IFREG);
 8004a68:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	2100      	movs	r1, #0
 8004a72:	2208      	movs	r2, #8
 8004a74:	f013 fad5 	bl	8018022 <mknod>
	                        files[nfiles].fd = status;
 8004a78:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8004a88:	4403      	add	r3, r0
 8004a8a:	3bac      	subs	r3, #172	; 0xac
 8004a8c:	601a      	str	r2, [r3, #0]
	                        files[nfiles].device = request.device;
 8004a8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004a92:	689a      	ldr	r2, [r3, #8]
 8004a94:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8004a9e:	440b      	add	r3, r1
 8004aa0:	3ba8      	subs	r3, #168	; 0xa8
 8004aa2:	601a      	str	r2, [r3, #0]
	                        files[nfiles].start = pos + sizeof(entry);
 8004aa4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004aa8:	3334      	adds	r3, #52	; 0x34
 8004aaa:	461a      	mov	r2, r3
 8004aac:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004ab0:	011b      	lsls	r3, r3, #4
 8004ab2:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8004ab6:	4403      	add	r3, r0
 8004ab8:	3ba4      	subs	r3, #164	; 0xa4
 8004aba:	601a      	str	r2, [r3, #0]
	                        files[nfiles].len = entry.len;
 8004abc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004ac0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004ac4:	011b      	lsls	r3, r3, #4
 8004ac6:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8004aca:	440b      	add	r3, r1
 8004acc:	3ba0      	subs	r3, #160	; 0xa0
 8004ace:	601a      	str	r2, [r3, #0]
	                        nfiles++;
 8004ad0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8004ada:	e004      	b.n	8004ae6 <romfs_server+0x13e>
	                    }
	                }
	                else {
	                    status = -1;
 8004adc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004ae0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ae4:	601a      	str	r2, [r3, #0]
	                }

                    /* Response */
	                write(from, &status, sizeof(status));
 8004ae6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004aea:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8004aee:	4619      	mov	r1, r3
 8004af0:	2204      	movs	r2, #4
 8004af2:	f013 fa73 	bl	8017fdc <write>
	                break;
 8004af6:	e14f      	b.n	8004d98 <romfs_server+0x3f0>
	            case FS_CMD_READ:
	                from = request.from;
 8004af8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	                target = request.target;
 8004b02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	                size = request.size;
 8004b0c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b12:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	                pos = request.pos;
 8004b16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b1c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

                    /* Find fd */
                    for (i = 0; i < nfiles; i++) {
 8004b20:	2300      	movs	r3, #0
 8004b22:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004b26:	e096      	b.n	8004c56 <romfs_server+0x2ae>
                        if (files[i].fd == target) {
 8004b28:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b2c:	011b      	lsls	r3, r3, #4
 8004b2e:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004b32:	4413      	add	r3, r2
 8004b34:	3bac      	subs	r3, #172	; 0xac
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	f040 8085 	bne.w	8004c4c <romfs_server+0x2a4>
                            device = files[i].device;
 8004b42:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b46:	011b      	lsls	r3, r3, #4
 8004b48:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8004b4c:	4403      	add	r3, r0
 8004b4e:	3ba8      	subs	r3, #168	; 0xa8
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

                            /* Check boundary */
                            data_start = files[i].start + pos;
 8004b56:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b5a:	011b      	lsls	r3, r3, #4
 8004b5c:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8004b60:	440b      	add	r3, r1
 8004b62:	3ba4      	subs	r3, #164	; 0xa4
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004b6a:	4413      	add	r3, r2
 8004b6c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
                            if (data_start < files[i].start) {
 8004b70:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b74:	011b      	lsls	r3, r3, #4
 8004b76:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004b7a:	4413      	add	r3, r2
 8004b7c:	3ba4      	subs	r3, #164	; 0xa4
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004b84:	429a      	cmp	r2, r3
 8004b86:	dd04      	ble.n	8004b92 <romfs_server+0x1ea>
                                i = nfiles;
 8004b88:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004b8c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	                            break;
 8004b90:	e068      	b.n	8004c64 <romfs_server+0x2bc>
	                        }
                            if (data_start > files[i].start + files[i].len)
 8004b92:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004b96:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b9a:	011b      	lsls	r3, r3, #4
 8004b9c:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8004ba0:	4403      	add	r3, r0
 8004ba2:	3ba4      	subs	r3, #164	; 0xa4
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bac:	011b      	lsls	r3, r3, #4
 8004bae:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8004bb2:	4403      	add	r3, r0
 8004bb4:	3ba0      	subs	r3, #160	; 0xa0
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	440b      	add	r3, r1
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d913      	bls.n	8004be6 <romfs_server+0x23e>
                                data_start = files[i].start + files[i].len;
 8004bbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bc2:	011b      	lsls	r3, r3, #4
 8004bc4:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8004bc8:	440b      	add	r3, r1
 8004bca:	3ba4      	subs	r3, #164	; 0xa4
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bd4:	011b      	lsls	r3, r3, #4
 8004bd6:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8004bda:	4403      	add	r3, r0
 8004bdc:	3ba0      	subs	r3, #160	; 0xa0
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4413      	add	r3, r2
 8004be2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148

                            data_end = data_start + size;
 8004be6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004bea:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004bee:	4413      	add	r3, r2
 8004bf0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
                            if (data_end > files[i].start + files[i].len)
 8004bf4:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004bf8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bfc:	011b      	lsls	r3, r3, #4
 8004bfe:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8004c02:	440b      	add	r3, r1
 8004c04:	3ba4      	subs	r3, #164	; 0xa4
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4619      	mov	r1, r3
 8004c0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c0e:	011b      	lsls	r3, r3, #4
 8004c10:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8004c14:	4403      	add	r3, r0
 8004c16:	3ba0      	subs	r3, #160	; 0xa0
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	440b      	add	r3, r1
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d914      	bls.n	8004c4a <romfs_server+0x2a2>
                                data_end = files[i].start + files[i].len;
 8004c20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c24:	011b      	lsls	r3, r3, #4
 8004c26:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8004c2a:	440b      	add	r3, r1
 8004c2c:	3ba4      	subs	r3, #164	; 0xa4
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	461a      	mov	r2, r3
 8004c32:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8004c3c:	4403      	add	r3, r0
 8004c3e:	3ba0      	subs	r3, #160	; 0xa0
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4413      	add	r3, r2
 8004c44:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
                            break;
 8004c48:	e00c      	b.n	8004c64 <romfs_server+0x2bc>
 8004c4a:	e00b      	b.n	8004c64 <romfs_server+0x2bc>
	                target = request.target;
	                size = request.size;
	                pos = request.pos;

                    /* Find fd */
                    for (i = 0; i < nfiles; i++) {
 8004c4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c50:	3301      	adds	r3, #1
 8004c52:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004c56:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004c5a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	f6ff af62 	blt.w	8004b28 <romfs_server+0x180>
                            if (data_end > files[i].start + files[i].len)
                                data_end = files[i].start + files[i].len;
                            break;
                        }
                    }
                    if (i >= nfiles) {
 8004c64:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004c68:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	db07      	blt.n	8004c80 <romfs_server+0x2d8>
                        write(target, NULL, -1);
 8004c70:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8004c74:	2100      	movs	r1, #0
 8004c76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c7a:	f013 f9af 	bl	8017fdc <write>
                        break;
 8004c7e:	e08b      	b.n	8004d98 <romfs_server+0x3f0>
                    }

                    /* Get data from device */
                    lseek(device, data_start, SEEK_SET);
 8004c80:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 8004c84:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f013 f9d8 	bl	801803e <lseek>
                    size = data_end - data_start;
 8004c8e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004c92:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
                    size = read(device, data, size);
 8004c9c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004ca0:	1d3a      	adds	r2, r7, #4
 8004ca2:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 8004ca6:	4611      	mov	r1, r2
 8004ca8:	461a      	mov	r2, r3
 8004caa:	f013 f99e 	bl	8017fea <read>
 8004cae:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150

                    /* Response */
	                write(target, data, size);
 8004cb2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004cb6:	1d3a      	adds	r2, r7, #4
 8004cb8:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8004cbc:	4611      	mov	r1, r2
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	f013 f98c 	bl	8017fdc <write>
	                break;
 8004cc4:	e068      	b.n	8004d98 <romfs_server+0x3f0>

	            case FS_CMD_SEEK:
	                target = request.target;
 8004cc6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	                size = request.size;
 8004cd0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	                pos = request.pos;
 8004cda:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

                    /* Find fd */
                    for (i = 0; i < nfiles; i++) {
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004cea:	e014      	b.n	8004d16 <romfs_server+0x36e>
                        if (files[i].fd == target) {
 8004cec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004cf0:	011b      	lsls	r3, r3, #4
 8004cf2:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8004cf6:	440b      	add	r3, r1
 8004cf8:	3bac      	subs	r3, #172	; 0xac
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d103      	bne.n	8004d0c <romfs_server+0x364>
                            break;
 8004d04:	e00d      	b.n	8004d22 <romfs_server+0x37a>
 8004d06:	bf00      	nop
 8004d08:	0801a574 	.word	0x0801a574
	                target = request.target;
	                size = request.size;
	                pos = request.pos;

                    /* Find fd */
                    for (i = 0; i < nfiles; i++) {
 8004d0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d10:	3301      	adds	r3, #1
 8004d12:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004d16:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004d1a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	dbe4      	blt.n	8004cec <romfs_server+0x344>
                        if (files[i].fd == target) {
                            break;
                        }
                    }
                    if (i >= nfiles) {
 8004d22:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004d26:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	db07      	blt.n	8004d3e <romfs_server+0x396>
                        lseek(target, -1, SEEK_SET);
 8004d2e:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8004d32:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004d36:	2201      	movs	r2, #1
 8004d38:	f013 f981 	bl	801803e <lseek>
                        break;
 8004d3c:	e02c      	b.n	8004d98 <romfs_server+0x3f0>
                    }

	                if (pos == 0) { /* SEEK_SET */
 8004d3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d018      	beq.n	8004d78 <romfs_server+0x3d0>
	                }
	                else if (pos < 0) { /* SEEK_END */
 8004d46:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	da0d      	bge.n	8004d6a <romfs_server+0x3c2>
	                    size = (files[i].len) + size;
 8004d4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d52:	011b      	lsls	r3, r3, #4
 8004d54:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004d58:	4413      	add	r3, r2
 8004d5a:	3ba0      	subs	r3, #160	; 0xa0
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004d62:	4413      	add	r3, r2
 8004d64:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004d68:	e006      	b.n	8004d78 <romfs_server+0x3d0>
	                }
	                else { /* SEEK_CUR */
	                    size = pos + size;
 8004d6a:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8004d6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d72:	4413      	add	r3, r2
 8004d74:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	                }
	                lseek(target, size, SEEK_SET);
 8004d78:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8004d7c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8004d80:	2201      	movs	r2, #1
 8004d82:	f013 f95c 	bl	801803e <lseek>
	                break;
 8004d86:	e007      	b.n	8004d98 <romfs_server+0x3f0>

	            case FS_CMD_WRITE: /* readonly */
	            default:
	                write(target, NULL, -1);
 8004d88:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d92:	f013 f923 	bl	8017fdc <write>
	        }
        }
    }
 8004d96:	e616      	b.n	80049c6 <romfs_server+0x1e>
 8004d98:	e615      	b.n	80049c6 <romfs_server+0x1e>
 8004d9a:	bf00      	nop

08004d9c <strcmp>:
#include "string.h"
#include "stm32f4xx.h"
int strcmp(const char *a, const char *b)
{
	asm(
 8004d9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004da0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004da4:	2a01      	cmp	r2, #1
 8004da6:	bf88      	it	hi
 8004da8:	429a      	cmphi	r2, r3
 8004daa:	f43f aff7 	beq.w	8004d9c <strcmp>
 8004dae:	eba2 0003 	sub.w	r0, r2, r3
 8004db2:	4770      	bx	lr
        "   beq     strcmp_lop      \n"
		"	sub     r0, r2, r3  	\n"
        "   bx      lr              \n"
		:::
	);
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	bf00      	nop

08004db8 <strncmp>:

int strncmp(const char *a, const char *b, size_t n)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b087      	sub	sp, #28
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
	size_t i;

	for (i = 0; i < n; i++)
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	617b      	str	r3, [r7, #20]
 8004dc8:	e017      	b.n	8004dfa <strncmp+0x42>
		if (a[i] != b[i])
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	4413      	add	r3, r2
 8004dd0:	781a      	ldrb	r2, [r3, #0]
 8004dd2:	68b9      	ldr	r1, [r7, #8]
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	440b      	add	r3, r1
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d00a      	beq.n	8004df4 <strncmp+0x3c>
			return a[i] - b[i];
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	4413      	add	r3, r2
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	461a      	mov	r2, r3
 8004de8:	68b9      	ldr	r1, [r7, #8]
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	440b      	add	r3, r1
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	e007      	b.n	8004e04 <strncmp+0x4c>

int strncmp(const char *a, const char *b, size_t n)
{
	size_t i;

	for (i = 0; i < n; i++)
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	3301      	adds	r3, #1
 8004df8:	617b      	str	r3, [r7, #20]
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d3e3      	bcc.n	8004dca <strncmp+0x12>
		if (a[i] != b[i])
			return a[i] - b[i];

	return 0;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	371c      	adds	r7, #28
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <strlen>:

size_t strlen(const char *s)
{
	asm(
 8004e10:	f1a0 0301 	sub.w	r3, r0, #1

08004e14 <strlen_loop>:
 8004e14:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8004e18:	2a00      	cmp	r2, #0
 8004e1a:	f47f affb 	bne.w	8004e14 <strlen_loop>
 8004e1e:	eba3 0000 	sub.w	r0, r3, r0
 8004e22:	4770      	bx	lr
        "   bne  strlen_loop        \n"
		"	sub  r0, r3, r0			\n"
		"	bx   lr					\n"
		:::
	);
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	bf00      	nop

08004e28 <puts>:

void puts(char *s)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
	while (*s) {
 8004e30:	e010      	b.n	8004e54 <puts+0x2c>
		while (USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET)
 8004e32:	bf00      	nop
 8004e34:	480b      	ldr	r0, [pc, #44]	; (8004e64 <puts+0x3c>)
 8004e36:	2180      	movs	r1, #128	; 0x80
 8004e38:	f010 f84c 	bl	8014ed4 <USART_GetFlagStatus>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d0f8      	beq.n	8004e34 <puts+0xc>
			/* wait */ ;
		USART_SendData(USART2, *s);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	4807      	ldr	r0, [pc, #28]	; (8004e64 <puts+0x3c>)
 8004e48:	4619      	mov	r1, r3
 8004e4a:	f00f fe55 	bl	8014af8 <USART_SendData>
		s++;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	3301      	adds	r3, #1
 8004e52:	607b      	str	r3, [r7, #4]
	);
}

void puts(char *s)
{
	while (*s) {
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1ea      	bne.n	8004e32 <puts+0xa>
		while (USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET)
			/* wait */ ;
		USART_SendData(USART2, *s);
		s++;
	}
}
 8004e5c:	3708      	adds	r7, #8
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	40004400 	.word	0x40004400

08004e68 <init_task>:
#include "task.h"

#include <stddef.h>

unsigned int *init_task(unsigned int *stack, void (*start)())
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
	stack += STACK_SIZE - 9; /* End of stack, minus what we're about to push */
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8004e78:	607b      	str	r3, [r7, #4]
	stack[8] = (unsigned int)start;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	3320      	adds	r3, #32
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	601a      	str	r2, [r3, #0]
	return stack;
 8004e82:	687b      	ldr	r3, [r7, #4]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <init_led>:
#include "stm32f4xx_exti.h"
#include "stm32f4xx_syscfg.h"
#include "misc.h"

void init_led(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8004e96:	2004      	movs	r0, #4
 8004e98:	2101      	movs	r1, #1
 8004e9a:	f00a fee5 	bl	800fc68 <RCC_AHB1PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
 8004e9e:	480b      	ldr	r0, [pc, #44]	; (8004ecc <init_led+0x3c>)
 8004ea0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f008 f96d 	bl	800d184 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
 8004eaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004eae:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004eb8:	2302      	movs	r3, #2
 8004eba:	717b      	strb	r3, [r7, #5]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004ebc:	463b      	mov	r3, r7
 8004ebe:	4803      	ldr	r0, [pc, #12]	; (8004ecc <init_led+0x3c>)
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	f008 f829 	bl	800cf18 <GPIO_Init>
}
 8004ec6:	3708      	adds	r7, #8
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	40020800 	.word	0x40020800

08004ed0 <init_button>:

void init_button(void)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8004ed6:	2001      	movs	r0, #1
 8004ed8:	2101      	movs	r1, #1
 8004eda:	f00a fec5 	bl	800fc68 <RCC_AHB1PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	717b      	strb	r3, [r7, #5]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004eea:	463b      	mov	r3, r7
 8004eec:	4803      	ldr	r0, [pc, #12]	; (8004efc <init_button+0x2c>)
 8004eee:	4619      	mov	r1, r3
 8004ef0:	f008 f812 	bl	800cf18 <GPIO_Init>
}
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	40020800 	.word	0x40020800

08004f00 <enable_button_interrupts>:

void enable_button_interrupts(void)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8004f06:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004f0a:	2101      	movs	r1, #1
 8004f0c:	f00a ff24 	bl	800fd58 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource0);
 8004f10:	2000      	movs	r0, #0
 8004f12:	2100      	movs	r1, #0
 8004f14:	f00d fd9c 	bl	8012a50 <SYSCFG_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8004f20:	2308      	movs	r3, #8
 8004f22:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8004f24:	2301      	movs	r3, #1
 8004f26:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
 8004f28:	f107 0308 	add.w	r3, r7, #8
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f006 fa3b 	bl	800b3a8 <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
 8004f32:	2306      	movs	r3, #6
 8004f34:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8004f36:	230f      	movs	r3, #15
 8004f38:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 8004f3a:	230f      	movs	r3, #15
 8004f3c:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
 8004f42:	1d3b      	adds	r3, r7, #4
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 f941 	bl	80051cc <NVIC_Init>
}
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <init_rs232>:

void init_rs232(void)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
    /* --------------------------- System Clocks Configuration -----------------*/
    /* USART2 clock enable */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8004f56:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004f5a:	2101      	movs	r1, #1
 8004f5c:	f00a fede 	bl	800fd1c <RCC_APB1PeriphClockCmd>
    /* GPIOA clock enable */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8004f60:	2008      	movs	r0, #8
 8004f62:	2101      	movs	r1, #1
 8004f64:	f00a fe80 	bl	800fc68 <RCC_AHB1PeriphClockCmd>
    GPIO_InitTypeDef GPIO_InitStructure;

    /*-------------------------- GPIO Configuration ----------------------------*/
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6;
 8004f68:	2360      	movs	r3, #96	; 0x60
 8004f6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	753b      	strb	r3, [r7, #20]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8004f70:	2300      	movs	r3, #0
 8004f72:	75bb      	strb	r3, [r7, #22]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8004f74:	2300      	movs	r3, #0
 8004f76:	75fb      	strb	r3, [r7, #23]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004f78:	2302      	movs	r3, #2
 8004f7a:	757b      	strb	r3, [r7, #21]
    GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004f7c:	f107 0310 	add.w	r3, r7, #16
 8004f80:	4813      	ldr	r0, [pc, #76]	; (8004fd0 <init_rs232+0x80>)
 8004f82:	4619      	mov	r1, r3
 8004f84:	f007 ffc8 	bl	800cf18 <GPIO_Init>
    
    /* Connect USART pins to AF */
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource5, GPIO_AF_USART2);   // USART2_TX
 8004f88:	4811      	ldr	r0, [pc, #68]	; (8004fd0 <init_rs232+0x80>)
 8004f8a:	2105      	movs	r1, #5
 8004f8c:	2207      	movs	r2, #7
 8004f8e:	f008 f931 	bl	800d1f4 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource6, GPIO_AF_USART2);   // USART2_RX
 8004f92:	480f      	ldr	r0, [pc, #60]	; (8004fd0 <init_rs232+0x80>)
 8004f94:	2106      	movs	r1, #6
 8004f96:	2207      	movs	r2, #7
 8004f98:	f008 f92c 	bl	800d1f4 <GPIO_PinAFConfig>
     *  - One Stop Bit
     *  - No parity
     *  - Hardware flow control disabled (RTS and CTS signals)
     *  - Receive and transmit enabled
     */
    USART_InitStructure.USART_BaudRate = 9600;
 8004f9c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8004fa0:	603b      	str	r3, [r7, #0]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	80bb      	strh	r3, [r7, #4]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	80fb      	strh	r3, [r7, #6]
    USART_InitStructure.USART_Parity = USART_Parity_No;
 8004faa:	2300      	movs	r3, #0
 8004fac:	813b      	strh	r3, [r7, #8]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8004fb2:	230c      	movs	r3, #12
 8004fb4:	817b      	strh	r3, [r7, #10]
    USART_Init(USART2, &USART_InitStructure);
 8004fb6:	463b      	mov	r3, r7
 8004fb8:	4806      	ldr	r0, [pc, #24]	; (8004fd4 <init_rs232+0x84>)
 8004fba:	4619      	mov	r1, r3
 8004fbc:	f00f fc08 	bl	80147d0 <USART_Init>
    USART_Cmd(USART2, ENABLE);
 8004fc0:	4804      	ldr	r0, [pc, #16]	; (8004fd4 <init_rs232+0x84>)
 8004fc2:	2101      	movs	r1, #1
 8004fc4:	f00f fd1a 	bl	80149fc <USART_Cmd>
}
 8004fc8:	3718      	adds	r7, #24
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	40020c00 	.word	0x40020c00
 8004fd4:	40004400 	.word	0x40004400

08004fd8 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
 8004fde:	480c      	ldr	r0, [pc, #48]	; (8005010 <enable_rs232_interrupts+0x38>)
 8004fe0:	f240 7127 	movw	r1, #1831	; 0x727
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f00f ff2d 	bl	8014e44 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8004fea:	4809      	ldr	r0, [pc, #36]	; (8005010 <enable_rs232_interrupts+0x38>)
 8004fec:	f240 5125 	movw	r1, #1317	; 0x525
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f00f ff27 	bl	8014e44 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 8004ff6:	2326      	movs	r3, #38	; 0x26
 8004ff8:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8004ffe:	2301      	movs	r3, #1
 8005000:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
 8005002:	1d3b      	adds	r3, r7, #4
 8005004:	4618      	mov	r0, r3
 8005006:	f000 f8e1 	bl	80051cc <NVIC_Init>
}
 800500a:	3708      	adds	r7, #8
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	40004400 	.word	0x40004400

08005014 <enable_rs232>:

void enable_rs232(void)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
 8005018:	4802      	ldr	r0, [pc, #8]	; (8005024 <enable_rs232+0x10>)
 800501a:	2101      	movs	r1, #1
 800501c:	f00f fcee 	bl	80149fc <USART_Cmd>
}
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	40004400 	.word	0x40004400

08005028 <itoa>:
static uint8_t hz_str[3] = "Hz";
static uint8_t frequency_str[10];


static uint8_t* itoa(int value, uint8_t* result, int base)
{
 8005028:	b480      	push	{r7}
 800502a:	b089      	sub	sp, #36	; 0x24
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
	if (base < 2 || base > 36) {
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b01      	cmp	r3, #1
 8005038:	dd02      	ble.n	8005040 <itoa+0x18>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b24      	cmp	r3, #36	; 0x24
 800503e:	dd04      	ble.n	800504a <itoa+0x22>
		*result = '\0';
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	2200      	movs	r2, #0
 8005044:	701a      	strb	r2, [r3, #0]
		return result;
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	e03b      	b.n	80050c2 <itoa+0x9a>
	}
	uint8_t *ptr = result, *ptr1 = result, tmp_char;
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	61fb      	str	r3, [r7, #28]
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	61bb      	str	r3, [r7, #24]
	int tmp_value;

	do {
		tmp_value = value;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	617b      	str	r3, [r7, #20]
		value /= base;
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	fb92 f3f3 	sdiv	r3, r2, r3
 800505e:	60fb      	str	r3, [r7, #12]
		*ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * base)];
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	1c5a      	adds	r2, r3, #1
 8005064:	61fa      	str	r2, [r7, #28]
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	6879      	ldr	r1, [r7, #4]
 800506a:	fb01 f202 	mul.w	r2, r1, r2
 800506e:	6979      	ldr	r1, [r7, #20]
 8005070:	1a8a      	subs	r2, r1, r2
 8005072:	3223      	adds	r2, #35	; 0x23
 8005074:	4916      	ldr	r1, [pc, #88]	; (80050d0 <itoa+0xa8>)
 8005076:	5c8a      	ldrb	r2, [r1, r2]
 8005078:	701a      	strb	r2, [r3, #0]
	} while (value);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1e8      	bne.n	8005052 <itoa+0x2a>

	if (tmp_value < 0) *ptr++ = '-';
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	2b00      	cmp	r3, #0
 8005084:	da04      	bge.n	8005090 <itoa+0x68>
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	1c5a      	adds	r2, r3, #1
 800508a:	61fa      	str	r2, [r7, #28]
 800508c:	222d      	movs	r2, #45	; 0x2d
 800508e:	701a      	strb	r2, [r3, #0]
	*ptr-- = '\0';
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	1e5a      	subs	r2, r3, #1
 8005094:	61fa      	str	r2, [r7, #28]
 8005096:	2200      	movs	r2, #0
 8005098:	701a      	strb	r2, [r3, #0]
	while (ptr1 < ptr) {
 800509a:	e00d      	b.n	80050b8 <itoa+0x90>
		tmp_char = *ptr;
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	74fb      	strb	r3, [r7, #19]
		*ptr-- = *ptr1;
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	1e5a      	subs	r2, r3, #1
 80050a6:	61fa      	str	r2, [r7, #28]
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	7812      	ldrb	r2, [r2, #0]
 80050ac:	701a      	strb	r2, [r3, #0]
		*ptr1++ = tmp_char;
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	1c5a      	adds	r2, r3, #1
 80050b2:	61ba      	str	r2, [r7, #24]
 80050b4:	7cfa      	ldrb	r2, [r7, #19]
 80050b6:	701a      	strb	r2, [r3, #0]
		*ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * base)];
	} while (value);

	if (tmp_value < 0) *ptr++ = '-';
	*ptr-- = '\0';
	while (ptr1 < ptr) {
 80050b8:	69ba      	ldr	r2, [r7, #24]
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d3ed      	bcc.n	800509c <itoa+0x74>
		tmp_char = *ptr;
		*ptr-- = *ptr1;
		*ptr1++ = tmp_char;
	}
	return result;
 80050c0:	68bb      	ldr	r3, [r7, #8]
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3724      	adds	r7, #36	; 0x24
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	0801a57c 	.word	0x0801a57c

080050d4 <ui_bfclear>:

void ui_bfclear()
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	af00      	add	r7, sp, #0
	memset((void *) LCD_FRAME_BUFFER + BUFFER_OFFSET, 0xff, BUFFER_OFFSET);
 80050d8:	4803      	ldr	r0, [pc, #12]	; (80050e8 <ui_bfclear+0x14>)
 80050da:	21ff      	movs	r1, #255	; 0xff
 80050dc:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80050e0:	f013 fa64 	bl	80185ac <memset>
	//memset((void *) LCD_FRAME_BUFFER, 0xff, BUFFER_OFFSET);
}
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	d0050000 	.word	0xd0050000

080050ec <ui_start_tuner>:


void ui_start_tuner()
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
    int hz = 332;
 80050f2:	f44f 73a6 	mov.w	r3, #332	; 0x14c
 80050f6:	607b      	str	r3, [r7, #4]

    itoa(hz, frequency_str, 10);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	491f      	ldr	r1, [pc, #124]	; (8005178 <ui_start_tuner+0x8c>)
 80050fc:	220a      	movs	r2, #10
 80050fe:	f7ff ff93 	bl	8005028 <itoa>
    strcat((char *)frequency_str, (char *)hz_str);
 8005102:	481d      	ldr	r0, [pc, #116]	; (8005178 <ui_start_tuner+0x8c>)
 8005104:	491d      	ldr	r1, [pc, #116]	; (800517c <ui_start_tuner+0x90>)
 8005106:	f013 fa9b 	bl	8018640 <strcat>

    LCD_SetColors(LCD_COLOR_MAGENTA , LCD_COLOR_WHITE);
 800510a:	f64f 001f 	movw	r0, #63519	; 0xf81f
 800510e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005112:	f010 fc45 	bl	80159a0 <LCD_SetColors>

    while(1){

        ui_bfclear();
 8005116:	f7ff ffdd 	bl	80050d4 <ui_bfclear>
    
        LCD_DisplayStringLine(LCD_LINE_3, sound[3]);
 800511a:	f010 fcbb 	bl	8015a94 <LCD_GetFont>
 800511e:	4603      	mov	r3, r0
 8005120:	88db      	ldrh	r3, [r3, #6]
 8005122:	461a      	mov	r2, r3
 8005124:	0052      	lsls	r2, r2, #1
 8005126:	4413      	add	r3, r2
 8005128:	b29b      	uxth	r3, r3
 800512a:	4618      	mov	r0, r3
 800512c:	4914      	ldr	r1, [pc, #80]	; (8005180 <ui_start_tuner+0x94>)
 800512e:	f010 fe2d 	bl	8015d8c <LCD_DisplayStringLine>
        LCD_DisplayStringLine(LCD_LINE_5, frequency_str);
 8005132:	f010 fcaf 	bl	8015a94 <LCD_GetFont>
 8005136:	4603      	mov	r3, r0
 8005138:	88db      	ldrh	r3, [r3, #6]
 800513a:	461a      	mov	r2, r3
 800513c:	0092      	lsls	r2, r2, #2
 800513e:	4413      	add	r3, r2
 8005140:	b29b      	uxth	r3, r3
 8005142:	4618      	mov	r0, r3
 8005144:	490c      	ldr	r1, [pc, #48]	; (8005178 <ui_start_tuner+0x8c>)
 8005146:	f010 fe21 	bl	8015d8c <LCD_DisplayStringLine>

        LCD_DrawLine(20, 200, 200, LCD_DIR_HORIZONTAL);
 800514a:	2014      	movs	r0, #20
 800514c:	21c8      	movs	r1, #200	; 0xc8
 800514e:	22c8      	movs	r2, #200	; 0xc8
 8005150:	2300      	movs	r3, #0
 8005152:	f010 fe9f 	bl	8015e94 <LCD_DrawLine>
        LCD_DrawLine(20, 180, 40, LCD_DIR_VERTICAL);
 8005156:	2014      	movs	r0, #20
 8005158:	21b4      	movs	r1, #180	; 0xb4
 800515a:	2228      	movs	r2, #40	; 0x28
 800515c:	2301      	movs	r3, #1
 800515e:	f010 fe99 	bl	8015e94 <LCD_DrawLine>
        LCD_DrawLine(220, 180, 40, LCD_DIR_VERTICAL);
 8005162:	20dc      	movs	r0, #220	; 0xdc
 8005164:	21b4      	movs	r1, #180	; 0xb4
 8005166:	2228      	movs	r2, #40	; 0x28
 8005168:	2301      	movs	r3, #1
 800516a:	f010 fe93 	bl	8015e94 <LCD_DrawLine>

        sleep(1220);
 800516e:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8005172:	f012 ff5d 	bl	8018030 <sleep>
    }
 8005176:	e7ce      	b.n	8005116 <ui_start_tuner+0x2a>
 8005178:	20005304 	.word	0x20005304
 800517c:	2000007c 	.word	0x2000007c
 8005180:	20000072 	.word	0x20000072

08005184 <ui_init>:
}

void ui_init()
{
 8005184:	b580      	push	{r7, lr}
 8005186:	af00      	add	r7, sp, #0

    LCD_Init();
 8005188:	f010 fb20 	bl	80157cc <LCD_Init>

    LCD_LayerInit();
 800518c:	f010 fb78 	bl	8015880 <LCD_LayerInit>

    LTDC_Cmd(ENABLE);
 8005190:	2001      	movs	r0, #1
 8005192:	f009 fbd1 	bl	800e938 <LTDC_Cmd>

    LCD_DisplayOn();
 8005196:	f012 f999 	bl	80174cc <LCD_DisplayOn>

    LCD_SetLayer(LCD_FOREGROUND_LAYER);
 800519a:	2001      	movs	r0, #1
 800519c:	f010 fbe0 	bl	8015960 <LCD_SetLayer>

    ui_start_tuner();
 80051a0:	f7ff ffa4 	bl	80050ec <ui_start_tuner>
}
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop

080051a8 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80051b0:	4a05      	ldr	r2, [pc, #20]	; (80051c8 <NVIC_PriorityGroupConfig+0x20>)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80051b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051bc:	60d3      	str	r3, [r2, #12]
}
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr
 80051c8:	e000ed00 	.word	0xe000ed00

080051cc <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80051d4:	2300      	movs	r3, #0
 80051d6:	73fb      	strb	r3, [r7, #15]
 80051d8:	2300      	movs	r3, #0
 80051da:	73bb      	strb	r3, [r7, #14]
 80051dc:	230f      	movs	r3, #15
 80051de:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	78db      	ldrb	r3, [r3, #3]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d037      	beq.n	8005258 <NVIC_Init+0x8c>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80051e8:	4b25      	ldr	r3, [pc, #148]	; (8005280 <NVIC_Init+0xb4>)
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	43db      	mvns	r3, r3
 80051ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051f2:	0a1b      	lsrs	r3, r3, #8
 80051f4:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80051f6:	7bfb      	ldrb	r3, [r7, #15]
 80051f8:	f1c3 0304 	rsb	r3, r3, #4
 80051fc:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80051fe:	7b7a      	ldrb	r2, [r7, #13]
 8005200:	7bfb      	ldrb	r3, [r7, #15]
 8005202:	fa42 f303 	asr.w	r3, r2, r3
 8005206:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	785b      	ldrb	r3, [r3, #1]
 800520c:	461a      	mov	r2, r3
 800520e:	7bbb      	ldrb	r3, [r7, #14]
 8005210:	fa02 f303 	lsl.w	r3, r2, r3
 8005214:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	789a      	ldrb	r2, [r3, #2]
 800521a:	7b7b      	ldrb	r3, [r7, #13]
 800521c:	4013      	ands	r3, r2
 800521e:	b2da      	uxtb	r2, r3
 8005220:	7bfb      	ldrb	r3, [r7, #15]
 8005222:	4313      	orrs	r3, r2
 8005224:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8005226:	7bfb      	ldrb	r3, [r7, #15]
 8005228:	011b      	lsls	r3, r3, #4
 800522a:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800522c:	4a15      	ldr	r2, [pc, #84]	; (8005284 <NVIC_Init+0xb8>)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	4413      	add	r3, r2
 8005234:	7bfa      	ldrb	r2, [r7, #15]
 8005236:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800523a:	4b12      	ldr	r3, [pc, #72]	; (8005284 <NVIC_Init+0xb8>)
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	7812      	ldrb	r2, [r2, #0]
 8005240:	0952      	lsrs	r2, r2, #5
 8005242:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8005244:	6879      	ldr	r1, [r7, #4]
 8005246:	7809      	ldrb	r1, [r1, #0]
 8005248:	f001 011f 	and.w	r1, r1, #31
 800524c:	2001      	movs	r0, #1
 800524e:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005252:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005256:	e00e      	b.n	8005276 <NVIC_Init+0xaa>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005258:	4b0a      	ldr	r3, [pc, #40]	; (8005284 <NVIC_Init+0xb8>)
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	7812      	ldrb	r2, [r2, #0]
 800525e:	0952      	lsrs	r2, r2, #5
 8005260:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8005262:	6879      	ldr	r1, [r7, #4]
 8005264:	7809      	ldrb	r1, [r1, #0]
 8005266:	f001 011f 	and.w	r1, r1, #31
 800526a:	2001      	movs	r0, #1
 800526c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005270:	3220      	adds	r2, #32
 8005272:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8005276:	3714      	adds	r7, #20
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr
 8005280:	e000ed00 	.word	0xe000ed00
 8005284:	e000e100 	.word	0xe000e100

08005288 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8005292:	4a07      	ldr	r2, [pc, #28]	; (80052b0 <NVIC_SetVectorTable+0x28>)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800529a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800529e:	6879      	ldr	r1, [r7, #4]
 80052a0:	430b      	orrs	r3, r1
 80052a2:	6093      	str	r3, [r2, #8]
}
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	e000ed00 	.word	0xe000ed00

080052b4 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	4602      	mov	r2, r0
 80052bc:	460b      	mov	r3, r1
 80052be:	71fa      	strb	r2, [r7, #7]
 80052c0:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 80052c2:	79bb      	ldrb	r3, [r7, #6]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d006      	beq.n	80052d6 <NVIC_SystemLPConfig+0x22>
  {
    SCB->SCR |= LowPowerMode;
 80052c8:	4b09      	ldr	r3, [pc, #36]	; (80052f0 <NVIC_SystemLPConfig+0x3c>)
 80052ca:	4a09      	ldr	r2, [pc, #36]	; (80052f0 <NVIC_SystemLPConfig+0x3c>)
 80052cc:	6911      	ldr	r1, [r2, #16]
 80052ce:	79fa      	ldrb	r2, [r7, #7]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	611a      	str	r2, [r3, #16]
 80052d4:	e006      	b.n	80052e4 <NVIC_SystemLPConfig+0x30>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 80052d6:	4b06      	ldr	r3, [pc, #24]	; (80052f0 <NVIC_SystemLPConfig+0x3c>)
 80052d8:	4a05      	ldr	r2, [pc, #20]	; (80052f0 <NVIC_SystemLPConfig+0x3c>)
 80052da:	6911      	ldr	r1, [r2, #16]
 80052dc:	79fa      	ldrb	r2, [r7, #7]
 80052de:	43d2      	mvns	r2, r2
 80052e0:	400a      	ands	r2, r1
 80052e2:	611a      	str	r2, [r3, #16]
  }
}
 80052e4:	370c      	adds	r7, #12
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	e000ed00 	.word	0xe000ed00

080052f4 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b04      	cmp	r3, #4
 8005300:	d106      	bne.n	8005310 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8005302:	4b09      	ldr	r3, [pc, #36]	; (8005328 <SysTick_CLKSourceConfig+0x34>)
 8005304:	4a08      	ldr	r2, [pc, #32]	; (8005328 <SysTick_CLKSourceConfig+0x34>)
 8005306:	6812      	ldr	r2, [r2, #0]
 8005308:	f042 0204 	orr.w	r2, r2, #4
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	e005      	b.n	800531c <SysTick_CLKSourceConfig+0x28>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8005310:	4b05      	ldr	r3, [pc, #20]	; (8005328 <SysTick_CLKSourceConfig+0x34>)
 8005312:	4a05      	ldr	r2, [pc, #20]	; (8005328 <SysTick_CLKSourceConfig+0x34>)
 8005314:	6812      	ldr	r2, [r2, #0]
 8005316:	f022 0204 	bic.w	r2, r2, #4
 800531a:	601a      	str	r2, [r3, #0]
  }
}
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	e000e010 	.word	0xe000e010

0800532c <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 8005330:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005334:	2101      	movs	r1, #1
 8005336:	f00a fda5 	bl	800fe84 <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 800533a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800533e:	2100      	movs	r1, #0
 8005340:	f00a fda0 	bl	800fe84 <RCC_APB2PeriphResetCmd>
}
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop

08005348 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8005352:	2300      	movs	r3, #0
 8005354:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8005356:	2300      	movs	r3, #0
 8005358:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8005366:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800536a:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	791b      	ldrb	r3, [r3, #4]
 8005370:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8005376:	4313      	orrs	r3, r2
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	4313      	orrs	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	4b17      	ldr	r3, [pc, #92]	; (80053ec <ADC_Init+0xa4>)
 800538e:	4013      	ands	r3, r2
 8005390:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800539a:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 80053a0:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	795b      	ldrb	r3, [r3, #5]
 80053a6:	005b      	lsls	r3, r3, #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80053a8:	4313      	orrs	r3, r2
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80053c2:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	7d1b      	ldrb	r3, [r3, #20]
 80053c8:	3b01      	subs	r3, #1
 80053ca:	b2da      	uxtb	r2, r3
 80053cc:	7afb      	ldrb	r3, [r7, #11]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 80053d2:	7afb      	ldrb	r3, [r7, #11]
 80053d4:	051b      	lsls	r3, r3, #20
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	4313      	orrs	r3, r2
 80053da:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80053e2:	3714      	adds	r7, #20
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	c0fff7fd 	.word	0xc0fff7fd

080053f0 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	751a      	strb	r2, [r3, #20]
}
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8005434:	2300      	movs	r3, #0
 8005436:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8005438:	4b0e      	ldr	r3, [pc, #56]	; (8005474 <ADC_CommonInit+0x48>)
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	4b0d      	ldr	r3, [pc, #52]	; (8005478 <ADC_CommonInit+0x4c>)
 8005442:	4013      	ands	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800544e:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8005454:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68db      	ldr	r3, [r3, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800545a:	4313      	orrs	r3, r2
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	4313      	orrs	r3, r2
 8005460:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8005462:	4b04      	ldr	r3, [pc, #16]	; (8005474 <ADC_CommonInit+0x48>)
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	605a      	str	r2, [r3, #4]
}
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	40012300 	.word	0x40012300
 8005478:	fffc30e0 	.word	0xfffc30e0

0800547c <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	60da      	str	r2, [r3, #12]
}
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop

080054a8 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	460b      	mov	r3, r1
 80054b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80054b4:	78fb      	ldrb	r3, [r7, #3]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d006      	beq.n	80054c8 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f043 0201 	orr.w	r2, r3, #1
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	609a      	str	r2, [r3, #8]
 80054c6:	e005      	b.n	80054d4 <ADC_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f023 0201 	bic.w	r2, r3, #1
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	609a      	str	r2, [r3, #8]
  }
}
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop

080054e0 <ADC_AnalogWatchdogCmd>:
  *            @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected channels
  *            @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
  * @retval None	  
  */
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80054ea:	2300      	movs	r3, #0
 80054ec:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  tmpreg &= CR1_AWDMode_RESET;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80054fa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054fe:	60fb      	str	r3, [r7, #12]
  
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	4313      	orrs	r3, r2
 8005506:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	605a      	str	r2, [r3, #4]
}
 800550e:	3714      	adds	r7, #20
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <ADC_AnalogWatchdogThresholdsConfig>:
  *          This parameter must be a 12-bit value.
  * @retval None
  */
void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
                                        uint16_t LowThreshold)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	4613      	mov	r3, r2
 8005522:	460a      	mov	r2, r1
 8005524:	807a      	strh	r2, [r7, #2]
 8005526:	803b      	strh	r3, [r7, #0]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
 8005528:	887a      	ldrh	r2, [r7, #2]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
 800552e:	883a      	ldrh	r2, [r7, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop

08005540 <ADC_AnalogWatchdogSingleChannelConfig>:
  *            @arg ADC_Channel_17: ADC Channel17 selected
  *            @arg ADC_Channel_18: ADC Channel18 selected
  * @retval None
  */
void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	460b      	mov	r3, r1
 800554a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 800554c:	2300      	movs	r3, #0
 800554e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	60fb      	str	r3, [r7, #12]
  
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_RESET;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f023 031f 	bic.w	r3, r3, #31
 800555c:	60fb      	str	r3, [r7, #12]
  
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
 800555e:	78fb      	ldrb	r3, [r7, #3]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	4313      	orrs	r3, r2
 8005564:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	605a      	str	r2, [r3, #4]
}
 800556c:	3714      	adds	r7, #20
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop

08005578 <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor and Vrefint channels.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	4603      	mov	r3, r0
 8005580:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005582:	79fb      	ldrb	r3, [r7, #7]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d006      	beq.n	8005596 <ADC_TempSensorVrefintCmd+0x1e>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 8005588:	4b08      	ldr	r3, [pc, #32]	; (80055ac <ADC_TempSensorVrefintCmd+0x34>)
 800558a:	4a08      	ldr	r2, [pc, #32]	; (80055ac <ADC_TempSensorVrefintCmd+0x34>)
 800558c:	6852      	ldr	r2, [r2, #4]
 800558e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005592:	605a      	str	r2, [r3, #4]
 8005594:	e005      	b.n	80055a2 <ADC_TempSensorVrefintCmd+0x2a>
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 8005596:	4b05      	ldr	r3, [pc, #20]	; (80055ac <ADC_TempSensorVrefintCmd+0x34>)
 8005598:	4a04      	ldr	r2, [pc, #16]	; (80055ac <ADC_TempSensorVrefintCmd+0x34>)
 800559a:	6852      	ldr	r2, [r2, #4]
 800559c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80055a0:	605a      	str	r2, [r3, #4]
  }
}
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	40012300 	.word	0x40012300

080055b0 <ADC_VBATCmd>:
  * @param  NewState: new state of the VBAT channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VBATCmd(FunctionalState NewState)                             
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	4603      	mov	r3, r0
 80055b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80055ba:	79fb      	ldrb	r3, [r7, #7]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d006      	beq.n	80055ce <ADC_VBATCmd+0x1e>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 80055c0:	4b08      	ldr	r3, [pc, #32]	; (80055e4 <ADC_VBATCmd+0x34>)
 80055c2:	4a08      	ldr	r2, [pc, #32]	; (80055e4 <ADC_VBATCmd+0x34>)
 80055c4:	6852      	ldr	r2, [r2, #4]
 80055c6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80055ca:	605a      	str	r2, [r3, #4]
 80055cc:	e005      	b.n	80055da <ADC_VBATCmd+0x2a>
  }
  else
  {
    /* Disable the VBAT channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 80055ce:	4b05      	ldr	r3, [pc, #20]	; (80055e4 <ADC_VBATCmd+0x34>)
 80055d0:	4a04      	ldr	r2, [pc, #16]	; (80055e4 <ADC_VBATCmd+0x34>)
 80055d2:	6852      	ldr	r2, [r2, #4]
 80055d4:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80055d8:	605a      	str	r2, [r3, #4]
  }
}
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr
 80055e4:	40012300 	.word	0x40012300

080055e8 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	70f9      	strb	r1, [r7, #3]
 80055f2:	70ba      	strb	r2, [r7, #2]
 80055f4:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80055f6:	2300      	movs	r3, #0
 80055f8:	60fb      	str	r3, [r7, #12]
 80055fa:	2300      	movs	r3, #0
 80055fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80055fe:	78fb      	ldrb	r3, [r7, #3]
 8005600:	2b09      	cmp	r3, #9
 8005602:	d923      	bls.n	800564c <ADC_RegularChannelConfig+0x64>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 800560a:	78fb      	ldrb	r3, [r7, #3]
 800560c:	f1a3 020a 	sub.w	r2, r3, #10
 8005610:	4613      	mov	r3, r2
 8005612:	005b      	lsls	r3, r3, #1
 8005614:	4413      	add	r3, r2
 8005616:	2207      	movs	r2, #7
 8005618:	fa02 f303 	lsl.w	r3, r2, r3
 800561c:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	43db      	mvns	r3, r3
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	4013      	ands	r3, r2
 8005626:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8005628:	7879      	ldrb	r1, [r7, #1]
 800562a:	78fb      	ldrb	r3, [r7, #3]
 800562c:	f1a3 020a 	sub.w	r2, r3, #10
 8005630:	4613      	mov	r3, r2
 8005632:	005b      	lsls	r3, r3, #1
 8005634:	4413      	add	r3, r2
 8005636:	fa01 f303 	lsl.w	r3, r1, r3
 800563a:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	4313      	orrs	r3, r2
 8005642:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	60da      	str	r2, [r3, #12]
 800564a:	e01e      	b.n	800568a <ADC_RegularChannelConfig+0xa2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8005652:	78fa      	ldrb	r2, [r7, #3]
 8005654:	4613      	mov	r3, r2
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	4413      	add	r3, r2
 800565a:	2207      	movs	r2, #7
 800565c:	fa02 f303 	lsl.w	r3, r2, r3
 8005660:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	43db      	mvns	r3, r3
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	4013      	ands	r3, r2
 800566a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 800566c:	7879      	ldrb	r1, [r7, #1]
 800566e:	78fa      	ldrb	r2, [r7, #3]
 8005670:	4613      	mov	r3, r2
 8005672:	005b      	lsls	r3, r3, #1
 8005674:	4413      	add	r3, r2
 8005676:	fa01 f303 	lsl.w	r3, r1, r3
 800567a:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	4313      	orrs	r3, r2
 8005682:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 800568a:	78bb      	ldrb	r3, [r7, #2]
 800568c:	2b06      	cmp	r3, #6
 800568e:	d821      	bhi.n	80056d4 <ADC_RegularChannelConfig+0xec>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005694:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8005696:	78bb      	ldrb	r3, [r7, #2]
 8005698:	1e5a      	subs	r2, r3, #1
 800569a:	4613      	mov	r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4413      	add	r3, r2
 80056a0:	221f      	movs	r2, #31
 80056a2:	fa02 f303 	lsl.w	r3, r2, r3
 80056a6:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	43db      	mvns	r3, r3
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	4013      	ands	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 80056b2:	78f9      	ldrb	r1, [r7, #3]
 80056b4:	78bb      	ldrb	r3, [r7, #2]
 80056b6:	1e5a      	subs	r2, r3, #1
 80056b8:	4613      	mov	r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4413      	add	r3, r2
 80056be:	fa01 f303 	lsl.w	r3, r1, r3
 80056c2:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	635a      	str	r2, [r3, #52]	; 0x34
 80056d2:	e047      	b.n	8005764 <ADC_RegularChannelConfig+0x17c>
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 80056d4:	78bb      	ldrb	r3, [r7, #2]
 80056d6:	2b0c      	cmp	r3, #12
 80056d8:	d821      	bhi.n	800571e <ADC_RegularChannelConfig+0x136>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056de:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 80056e0:	78bb      	ldrb	r3, [r7, #2]
 80056e2:	1fda      	subs	r2, r3, #7
 80056e4:	4613      	mov	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4413      	add	r3, r2
 80056ea:	221f      	movs	r2, #31
 80056ec:	fa02 f303 	lsl.w	r3, r2, r3
 80056f0:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	43db      	mvns	r3, r3
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	4013      	ands	r3, r2
 80056fa:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 80056fc:	78f9      	ldrb	r1, [r7, #3]
 80056fe:	78bb      	ldrb	r3, [r7, #2]
 8005700:	1fda      	subs	r2, r3, #7
 8005702:	4613      	mov	r3, r2
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	4413      	add	r3, r2
 8005708:	fa01 f303 	lsl.w	r3, r1, r3
 800570c:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	4313      	orrs	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	631a      	str	r2, [r3, #48]	; 0x30
 800571c:	e022      	b.n	8005764 <ADC_RegularChannelConfig+0x17c>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005722:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8005724:	78bb      	ldrb	r3, [r7, #2]
 8005726:	f1a3 020d 	sub.w	r2, r3, #13
 800572a:	4613      	mov	r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	4413      	add	r3, r2
 8005730:	221f      	movs	r2, #31
 8005732:	fa02 f303 	lsl.w	r3, r2, r3
 8005736:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	43db      	mvns	r3, r3
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	4013      	ands	r3, r2
 8005740:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8005742:	78f9      	ldrb	r1, [r7, #3]
 8005744:	78bb      	ldrb	r3, [r7, #2]
 8005746:	f1a3 020d 	sub.w	r2, r3, #13
 800574a:	4613      	mov	r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	4413      	add	r3, r2
 8005750:	fa01 f303 	lsl.w	r3, r1, r3
 8005754:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	4313      	orrs	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop

08005770 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	609a      	str	r2, [r3, #8]
}
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop

08005790 <ADC_GetSoftwareStartConvStatus>:
  * @brief  Gets the selected ADC Software start regular conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8005798:	2300      	movs	r3, #0
 800579a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_SWSTART) != (uint32_t)RESET)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <ADC_GetSoftwareStartConvStatus+0x1e>
  {
    /* SWSTART bit is set */
    bitstatus = SET;
 80057a8:	2301      	movs	r3, #1
 80057aa:	73fb      	strb	r3, [r7, #15]
 80057ac:	e001      	b.n	80057b2 <ADC_GetSoftwareStartConvStatus+0x22>
  }
  else
  {
    /* SWSTART bit is reset */
    bitstatus = RESET;
 80057ae:	2300      	movs	r3, #0
 80057b0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the SWSTART bit status */
  return  bitstatus;
 80057b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3714      	adds	r7, #20
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <ADC_EOCOnEachRegularChannelCmd>:
  * @param  NewState: new state of the selected ADC EOC flag rising
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	460b      	mov	r3, r1
 80057ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80057cc:	78fb      	ldrb	r3, [r7, #3]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d006      	beq.n	80057e0 <ADC_EOCOnEachRegularChannelCmd+0x20>
  {
    /* Enable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	609a      	str	r2, [r3, #8]
 80057de:	e005      	b.n	80057ec <ADC_EOCOnEachRegularChannelCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	609a      	str	r2, [r3, #8]
  }
}
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop

080057f8 <ADC_ContinuousModeCmd>:
  * @param  NewState: new state of the selected ADC continuous conversion mode
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	460b      	mov	r3, r1
 8005802:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005804:	78fb      	ldrb	r3, [r7, #3]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d006      	beq.n	8005818 <ADC_ContinuousModeCmd+0x20>
  {
    /* Enable the selected ADC continuous conversion mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f043 0202 	orr.w	r2, r3, #2
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	609a      	str	r2, [r3, #8]
 8005816:	e005      	b.n	8005824 <ADC_ContinuousModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC continuous conversion mode */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f023 0202 	bic.w	r2, r3, #2
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	609a      	str	r2, [r3, #8]
  }
}
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop

08005830 <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel count value.
  *          This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	460b      	mov	r3, r1
 800583a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 800583c:	2300      	movs	r3, #0
 800583e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 8005840:	2300      	movs	r3, #0
 8005842:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_RESET;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005850:	60fb      	str	r3, [r7, #12]
  
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
 8005852:	78fb      	ldrb	r3, [r7, #3]
 8005854:	3b01      	subs	r3, #1
 8005856:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 13;
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	035b      	lsls	r3, r3, #13
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	4313      	orrs	r3, r2
 8005860:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	605a      	str	r2, [r3, #4]
}
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop

08005874 <ADC_DiscModeCmd>:
  *         regular group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	460b      	mov	r3, r1
 800587e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005880:	78fb      	ldrb	r3, [r7, #3]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d006      	beq.n	8005894 <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	605a      	str	r2, [r3, #4]
 8005892:	e005      	b.n	80058a0 <ADC_DiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	605a      	str	r2, [r3, #4]
  }
}
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop

080058ac <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058b8:	b29b      	uxth	r3, r3
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop

080058c8 <ADC_GetMultiModeConversionValue>:
  * @note   In triple mode, the value returned by this function is as following
  *           Data[15:0] : these bits contain alternatively the regular data of ADC1, ADC3 and ADC2.
  *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3.           
  */
uint32_t ADC_GetMultiModeConversionValue(void)
{
 80058c8:	b480      	push	{r7}
 80058ca:	af00      	add	r7, sp, #0
  /* Return the multi mode conversion value */
  return (*(__IO uint32_t *) CDR_ADDRESS);
 80058cc:	4b03      	ldr	r3, [pc, #12]	; (80058dc <ADC_GetMultiModeConversionValue+0x14>)
 80058ce:	681b      	ldr	r3, [r3, #0]
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	40012308 	.word	0x40012308

080058e0 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	460b      	mov	r3, r1
 80058ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80058ec:	78fb      	ldrb	r3, [r7, #3]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d006      	beq.n	8005900 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	609a      	str	r2, [r3, #8]
 80058fe:	e005      	b.n	800590c <ADC_DMACmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	609a      	str	r2, [r3, #8]
  }
}
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop

08005918 <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	460b      	mov	r3, r1
 8005922:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005924:	78fb      	ldrb	r3, [r7, #3]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d006      	beq.n	8005938 <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	609a      	str	r2, [r3, #8]
 8005936:	e005      	b.n	8005944 <ADC_DMARequestAfterLastTransferCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	609a      	str	r2, [r3, #8]
  }
}
 8005944:	370c      	adds	r7, #12
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop

08005950 <ADC_MultiModeDMARequestAfterLastTransferCmd>:
  *         by ADC_CommonInitStruct.ADC_DMAAccessMode structure member) is 
  *          ADC_DMAAccessMode_1, ADC_DMAAccessMode_2 or ADC_DMAAccessMode_3.     
  * @retval None
  */
void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	4603      	mov	r3, r0
 8005958:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800595a:	79fb      	ldrb	r3, [r7, #7]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d006      	beq.n	800596e <ADC_MultiModeDMARequestAfterLastTransferCmd+0x1e>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 8005960:	4b08      	ldr	r3, [pc, #32]	; (8005984 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x34>)
 8005962:	4a08      	ldr	r2, [pc, #32]	; (8005984 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x34>)
 8005964:	6852      	ldr	r2, [r2, #4]
 8005966:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800596a:	605a      	str	r2, [r3, #4]
 800596c:	e005      	b.n	800597a <ADC_MultiModeDMARequestAfterLastTransferCmd+0x2a>
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 800596e:	4b05      	ldr	r3, [pc, #20]	; (8005984 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x34>)
 8005970:	4a04      	ldr	r2, [pc, #16]	; (8005984 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x34>)
 8005972:	6852      	ldr	r2, [r2, #4]
 8005974:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005978:	605a      	str	r2, [r3, #4]
  }
}
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr
 8005984:	40012300 	.word	0x40012300

08005988 <ADC_InjectedChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8005988:	b480      	push	{r7}
 800598a:	b087      	sub	sp, #28
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	70f9      	strb	r1, [r7, #3]
 8005992:	70ba      	strb	r2, [r7, #2]
 8005994:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
 8005996:	2300      	movs	r3, #0
 8005998:	617b      	str	r3, [r7, #20]
 800599a:	2300      	movs	r3, #0
 800599c:	613b      	str	r3, [r7, #16]
 800599e:	2300      	movs	r3, #0
 80059a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80059a2:	78fb      	ldrb	r3, [r7, #3]
 80059a4:	2b09      	cmp	r3, #9
 80059a6:	d923      	bls.n	80059f0 <ADC_InjectedChannelConfig+0x68>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 80059ae:	78fb      	ldrb	r3, [r7, #3]
 80059b0:	f1a3 020a 	sub.w	r2, r3, #10
 80059b4:	4613      	mov	r3, r2
 80059b6:	005b      	lsls	r3, r3, #1
 80059b8:	4413      	add	r3, r2
 80059ba:	2207      	movs	r2, #7
 80059bc:	fa02 f303 	lsl.w	r3, r2, r3
 80059c0:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	43db      	mvns	r3, r3
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	4013      	ands	r3, r2
 80059ca:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 80059cc:	7879      	ldrb	r1, [r7, #1]
 80059ce:	78fb      	ldrb	r3, [r7, #3]
 80059d0:	f1a3 020a 	sub.w	r2, r3, #10
 80059d4:	4613      	mov	r3, r2
 80059d6:	005b      	lsls	r3, r3, #1
 80059d8:	4413      	add	r3, r2
 80059da:	fa01 f303 	lsl.w	r3, r1, r3
 80059de:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	60da      	str	r2, [r3, #12]
 80059ee:	e01e      	b.n	8005a2e <ADC_InjectedChannelConfig+0xa6>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 80059f6:	78fa      	ldrb	r2, [r7, #3]
 80059f8:	4613      	mov	r3, r2
 80059fa:	005b      	lsls	r3, r3, #1
 80059fc:	4413      	add	r3, r2
 80059fe:	2207      	movs	r2, #7
 8005a00:	fa02 f303 	lsl.w	r3, r2, r3
 8005a04:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	43db      	mvns	r3, r3
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8005a10:	7879      	ldrb	r1, [r7, #1]
 8005a12:	78fa      	ldrb	r2, [r7, #3]
 8005a14:	4613      	mov	r3, r2
 8005a16:	005b      	lsls	r3, r3, #1
 8005a18:	4413      	add	r3, r2
 8005a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a1e:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	611a      	str	r2, [r3, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a32:	617b      	str	r3, [r7, #20]
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005a3a:	0d1b      	lsrs	r3, r3, #20
 8005a3c:	60fb      	str	r3, [r7, #12]
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	78ba      	ldrb	r2, [r7, #2]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	3302      	adds	r3, #2
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	4613      	mov	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	4413      	add	r3, r2
 8005a54:	221f      	movs	r2, #31
 8005a56:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5a:	613b      	str	r3, [r7, #16]
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	43db      	mvns	r3, r3
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	4013      	ands	r3, r2
 8005a64:	617b      	str	r3, [r7, #20]
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8005a66:	78f9      	ldrb	r1, [r7, #3]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	78ba      	ldrb	r2, [r7, #2]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	3302      	adds	r3, #2
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	461a      	mov	r2, r3
 8005a78:	4613      	mov	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4413      	add	r3, r2
 8005a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a82:	613b      	str	r3, [r7, #16]
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	617b      	str	r3, [r7, #20]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005a92:	371c      	adds	r7, #28
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <ADC_InjectedSequencerLengthConfig>:
  * @param  Length: The sequencer length. 
  *          This parameter must be a number between 1 to 4.
  * @retval None
  */
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 8005aac:	2300      	movs	r3, #0
 8005aae:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab4:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old injected sequence length JL bits */
  tmpreg1 &= JSQR_JL_RESET;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005abc:	60fb      	str	r3, [r7, #12]
  
  /* Set the injected sequence length JL bits */
  tmpreg2 = Length - 1; 
 8005abe:	78fb      	ldrb	r3, [r7, #3]
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 20;
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	051b      	lsls	r3, r3, #20
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005ad4:	3714      	adds	r7, #20
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop

08005ae0 <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *          This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	4613      	mov	r3, r2
 8005aea:	460a      	mov	r2, r1
 8005aec:	70fa      	strb	r2, [r7, #3]
 8005aee:	803b      	strh	r3, [r7, #0]
    __IO uint32_t tmp = 0;
 8005af0:	2300      	movs	r3, #0
 8005af2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));
  
  tmp = (uint32_t)ADCx;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel;
 8005af8:	78fa      	ldrb	r2, [r7, #3]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	4413      	add	r3, r2
 8005afe:	60fb      	str	r3, [r7, #12]
  
  /* Set the selected injected channel data offset */
 *(__IO uint32_t *) tmp = (uint32_t)Offset;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	883a      	ldrh	r2, [r7, #0]
 8005b04:	601a      	str	r2, [r3, #0]
}
 8005b06:	3714      	adds	r7, #20
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <ADC_ExternalTrigInjectedConvConfig>:
  *            @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected 
  *            @arg ADC_ExternalTrigInjecConv_Ext_IT15: External interrupt line 15 event selected                          
  * @retval None
  */
void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_RESET;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8005b2a:	60fb      	str	r3, [r7, #12]
  
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	609a      	str	r2, [r3, #8]
}
 8005b3a:	3714      	adds	r7, #20
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <ADC_ExternalTrigInjectedConvEdgeConfig>:
  *            @arg ADC_ExternalTrigInjecConvEdge_RisingFalling: detection on both rising 
  *                                                               and falling edge
  * @retval None
  */
void ADC_ExternalTrigInjectedConvEdgeConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConvEdge)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	60fb      	str	r3, [r7, #12]
  /* Clear the old external trigger edge for injected group */
  tmpreg &= CR2_JEXTEN_RESET;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005b5e:	60fb      	str	r3, [r7, #12]
  /* Set the new external trigger edge for injected group */
  tmpreg |= ADC_ExternalTrigInjecConvEdge;
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	609a      	str	r2, [r3, #8]
}
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <ADC_SoftwareStartInjectedConv>:
  * @brief  Enables the selected ADC software start conversion of the injected channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC conversion for injected group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	609a      	str	r2, [r3, #8]
}
 8005b8c:	370c      	adds	r7, #12
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop

08005b98 <ADC_GetSoftwareStartInjectedConvCmdStatus>:
  * @brief  Gets the selected ADC Software start injected conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start injected conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d002      	beq.n	8005bb6 <ADC_GetSoftwareStartInjectedConvCmdStatus+0x1e>
  {
    /* JSWSTART bit is set */
    bitstatus = SET;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	73fb      	strb	r3, [r7, #15]
 8005bb4:	e001      	b.n	8005bba <ADC_GetSoftwareStartInjectedConvCmdStatus+0x22>
  }
  else
  {
    /* JSWSTART bit is reset */
    bitstatus = RESET;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
 8005bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3714      	adds	r7, #20
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <ADC_AutoInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC auto injected conversion
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005bd4:	78fb      	ldrb	r3, [r7, #3]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d006      	beq.n	8005be8 <ADC_AutoInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	605a      	str	r2, [r3, #4]
 8005be6:	e005      	b.n	8005bf4 <ADC_AutoInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	605a      	str	r2, [r3, #4]
  }
}
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop

08005c00 <ADC_InjectedDiscModeCmd>:
  *         group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	460b      	mov	r3, r1
 8005c0a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005c0c:	78fb      	ldrb	r3, [r7, #3]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d006      	beq.n	8005c20 <ADC_InjectedDiscModeCmd+0x20>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	605a      	str	r2, [r3, #4]
 8005c1e:	e005      	b.n	8005c2c <ADC_InjectedDiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	605a      	str	r2, [r3, #4]
  }
}
 8005c2c:	370c      	adds	r7, #12
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop

08005c38 <ADC_GetInjectedConversionValue>:
  *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	460b      	mov	r3, r1
 8005c42:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 8005c44:	2300      	movs	r3, #0
 8005c46:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel + JDR_OFFSET;
 8005c4c:	78fa      	ldrb	r2, [r7, #3]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	4413      	add	r3, r2
 8005c52:	3328      	adds	r3, #40	; 0x28
 8005c54:	60fb      	str	r3, [r7, #12]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp); 
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	b29b      	uxth	r3, r3
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3714      	adds	r7, #20
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	4613      	mov	r3, r2
 8005c72:	460a      	mov	r2, r1
 8005c74:	807a      	strh	r2, [r7, #2]
 8005c76:	707b      	strb	r3, [r7, #1]
  uint32_t itmask = 0;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 8005c7c:	887b      	ldrh	r3, [r7, #2]
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	60fb      	str	r3, [r7, #12]
  itmask = (uint32_t)0x01 << itmask;    
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2201      	movs	r2, #1
 8005c86:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8a:	60fb      	str	r3, [r7, #12]

  if (NewState != DISABLE)
 8005c8c:	787b      	ldrb	r3, [r7, #1]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d006      	beq.n	8005ca0 <ADC_ITConfig+0x38>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685a      	ldr	r2, [r3, #4]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	431a      	orrs	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	605a      	str	r2, [r3, #4]
 8005c9e:	e006      	b.n	8005cae <ADC_ITConfig+0x46>
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685a      	ldr	r2, [r3, #4]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	43db      	mvns	r3, r3
 8005ca8:	401a      	ands	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	605a      	str	r2, [r3, #4]
  }
}
 8005cae:	3714      	adds	r7, #20
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	78fb      	ldrb	r3, [r7, #3]
 8005cce:	4013      	ands	r3, r2
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d002      	beq.n	8005cda <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	73fb      	strb	r3, [r7, #15]
 8005cd8:	e001      	b.n	8005cde <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8005cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3714      	adds	r7, #20
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <ADC_ClearFlag>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                          
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));

  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
 8005cf8:	78fb      	ldrb	r3, [r7, #3]
 8005cfa:	43da      	mvns	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	601a      	str	r2, [r3, #0]
}
 8005d00:	370c      	adds	r7, #12
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop

08005d0c <ADC_GetITStatus>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                        
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b087      	sub	sp, #28
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	460b      	mov	r3, r1
 8005d16:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	75fb      	strb	r3, [r7, #23]
  uint32_t itmask = 0, enablestatus = 0;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	613b      	str	r3, [r7, #16]
 8005d20:	2300      	movs	r3, #0
 8005d22:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));

  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;
 8005d24:	887b      	ldrh	r3, [r7, #2]
 8005d26:	0a1b      	lsrs	r3, r3, #8
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	613b      	str	r3, [r7, #16]

  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685a      	ldr	r2, [r3, #4]
 8005d30:	887b      	ldrh	r3, [r7, #2]
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	2101      	movs	r1, #1
 8005d36:	fa01 f303 	lsl.w	r3, r1, r3
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	4013      	ands	r3, r2
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d005      	beq.n	8005d56 <ADC_GetITStatus+0x4a>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d002      	beq.n	8005d56 <ADC_GetITStatus+0x4a>
  {
    /* ADC_IT is set */
    bitstatus = SET;
 8005d50:	2301      	movs	r3, #1
 8005d52:	75fb      	strb	r3, [r7, #23]
 8005d54:	e001      	b.n	8005d5a <ADC_GetITStatus+0x4e>
  }
  else
  {
    /* ADC_IT is reset */
    bitstatus = RESET;
 8005d56:	2300      	movs	r3, #0
 8005d58:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the ADC_IT status */
  return  bitstatus;
 8005d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	371c      	adds	r7, #28
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <ADC_ClearITPendingBit>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                         
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	460b      	mov	r3, r1
 8005d72:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
 8005d74:	2300      	movs	r3, #0
 8005d76:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT)); 
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
 8005d78:	887b      	ldrh	r3, [r7, #2]
 8005d7a:	0a1b      	lsrs	r3, r3, #8
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 8005d80:	7bfb      	ldrb	r3, [r7, #15]
 8005d82:	43da      	mvns	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	601a      	str	r2, [r3, #0]
}                    
 8005d88:	3714      	adds	r7, #20
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop

08005d94 <CAN_DeInit>:
  * @brief  Deinitializes the CAN peripheral registers to their default reset values.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval None.
  */
void CAN_DeInit(CAN_TypeDef* CANx)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
 
  if (CANx == CAN1)
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	4b0d      	ldr	r3, [pc, #52]	; (8005dd4 <CAN_DeInit+0x40>)
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d10a      	bne.n	8005dba <CAN_DeInit+0x26>
  {
    /* Enable CAN1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 8005da4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8005da8:	2101      	movs	r1, #1
 8005daa:	f00a f84d 	bl	800fe48 <RCC_APB1PeriphResetCmd>
    /* Release CAN1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 8005dae:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8005db2:	2100      	movs	r1, #0
 8005db4:	f00a f848 	bl	800fe48 <RCC_APB1PeriphResetCmd>
 8005db8:	e009      	b.n	8005dce <CAN_DeInit+0x3a>
  }
  else
  {  
    /* Enable CAN2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 8005dba:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005dbe:	2101      	movs	r1, #1
 8005dc0:	f00a f842 	bl	800fe48 <RCC_APB1PeriphResetCmd>
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 8005dc4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005dc8:	2100      	movs	r1, #0
 8005dca:	f00a f83d 	bl	800fe48 <RCC_APB1PeriphResetCmd>
  }
}
 8005dce:	3708      	adds	r7, #8
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	40006400 	.word	0x40006400

08005dd8 <CAN_Init>:
  *         the configuration information for the CAN peripheral.
  * @retval Constant indicates initialization succeed which will be 
  *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
  */
uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  uint8_t InitStatus = CAN_InitStatus_Failed;
 8005de2:	2300      	movs	r3, #0
 8005de4:	73fb      	strb	r3, [r7, #15]
  uint32_t wait_ack = 0x00000000;
 8005de6:	2300      	movs	r3, #0
 8005de8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Exit from sleep mode */
  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f023 0202 	bic.w	r2, r3, #2
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f043 0201 	orr.w	r2, r3, #1
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	601a      	str	r2, [r3, #0]

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8005e02:	e002      	b.n	8005e0a <CAN_Init+0x32>
  {
    wait_ack++;
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	3301      	adds	r3, #1
 8005e08:	60bb      	str	r3, [r7, #8]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f003 0301 	and.w	r3, r3, #1
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d104      	bne.n	8005e20 <CAN_Init+0x48>
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d1f1      	bne.n	8005e04 <CAN_Init+0x2c>
  {
    wait_ack++;
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	f003 0301 	and.w	r3, r3, #1
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d102      	bne.n	8005e32 <CAN_Init+0x5a>
  {
    InitStatus = CAN_InitStatus_Failed;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	73fb      	strb	r3, [r7, #15]
 8005e30:	e09c      	b.n	8005f6c <CAN_Init+0x194>
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (CAN_InitStruct->CAN_TTCM == ENABLE)
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	799b      	ldrb	r3, [r3, #6]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d106      	bne.n	8005e48 <CAN_Init+0x70>
    {
      CANx->MCR |= CAN_MCR_TTCM;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	601a      	str	r2, [r3, #0]
 8005e46:	e005      	b.n	8005e54 <CAN_Init+0x7c>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (CAN_InitStruct->CAN_ABOM == ENABLE)
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	79db      	ldrb	r3, [r3, #7]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d106      	bne.n	8005e6a <CAN_Init+0x92>
    {
      CANx->MCR |= CAN_MCR_ABOM;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	601a      	str	r2, [r3, #0]
 8005e68:	e005      	b.n	8005e76 <CAN_Init+0x9e>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (CAN_InitStruct->CAN_AWUM == ENABLE)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	7a1b      	ldrb	r3, [r3, #8]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d106      	bne.n	8005e8c <CAN_Init+0xb4>
    {
      CANx->MCR |= CAN_MCR_AWUM;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f043 0220 	orr.w	r2, r3, #32
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	601a      	str	r2, [r3, #0]
 8005e8a:	e005      	b.n	8005e98 <CAN_Init+0xc0>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f023 0220 	bic.w	r2, r3, #32
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (CAN_InitStruct->CAN_NART == ENABLE)
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	7a5b      	ldrb	r3, [r3, #9]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d106      	bne.n	8005eae <CAN_Init+0xd6>
    {
      CANx->MCR |= CAN_MCR_NART;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f043 0210 	orr.w	r2, r3, #16
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	601a      	str	r2, [r3, #0]
 8005eac:	e005      	b.n	8005eba <CAN_Init+0xe2>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f023 0210 	bic.w	r2, r3, #16
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (CAN_InitStruct->CAN_RFLM == ENABLE)
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	7a9b      	ldrb	r3, [r3, #10]
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d106      	bne.n	8005ed0 <CAN_Init+0xf8>
    {
      CANx->MCR |= CAN_MCR_RFLM;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f043 0208 	orr.w	r2, r3, #8
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	601a      	str	r2, [r3, #0]
 8005ece:	e005      	b.n	8005edc <CAN_Init+0x104>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f023 0208 	bic.w	r2, r3, #8
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (CAN_InitStruct->CAN_TXFP == ENABLE)
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	7adb      	ldrb	r3, [r3, #11]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d106      	bne.n	8005ef2 <CAN_Init+0x11a>
    {
      CANx->MCR |= CAN_MCR_TXFP;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f043 0204 	orr.w	r2, r3, #4
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	601a      	str	r2, [r3, #0]
 8005ef0:	e005      	b.n	8005efe <CAN_Init+0x126>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f023 0204 	bic.w	r2, r3, #4
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	789b      	ldrb	r3, [r3, #2]
 8005f02:	079a      	lsls	r2, r3, #30
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	78db      	ldrb	r3, [r3, #3]
 8005f08:	061b      	lsls	r3, r3, #24
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8005f0a:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	791b      	ldrb	r3, [r3, #4]
 8005f10:	041b      	lsls	r3, r3, #16
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 8005f12:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	795b      	ldrb	r3, [r3, #5]
 8005f18:	051b      	lsls	r3, r3, #20
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 8005f1a:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	881b      	ldrh	r3, [r3, #0]
 8005f20:	3b01      	subs	r3, #1

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 8005f22:	431a      	orrs	r2, r3
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	61da      	str	r2, [r3, #28]
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);

    /* Request leave initialisation */
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f023 0201 	bic.w	r2, r3, #1
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	601a      	str	r2, [r3, #0]

   /* Wait the acknowledge */
   wait_ack = 0;
 8005f34:	2300      	movs	r3, #0
 8005f36:	60bb      	str	r3, [r7, #8]

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8005f38:	e002      	b.n	8005f40 <CAN_Init+0x168>
   {
     wait_ack++;
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	60bb      	str	r3, [r7, #8]
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;

   /* Wait the acknowledge */
   wait_ack = 0;

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	f003 0301 	and.w	r3, r3, #1
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d004      	beq.n	8005f56 <CAN_Init+0x17e>
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d1f1      	bne.n	8005f3a <CAN_Init+0x162>
   {
     wait_ack++;
   }

    /* ...and check acknowledged */
    if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d002      	beq.n	8005f68 <CAN_Init+0x190>
    {
      InitStatus = CAN_InitStatus_Failed;
 8005f62:	2300      	movs	r3, #0
 8005f64:	73fb      	strb	r3, [r7, #15]
 8005f66:	e001      	b.n	8005f6c <CAN_Init+0x194>
    }
    else
    {
      InitStatus = CAN_InitStatus_Success ;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* At this step, return the status of initialization */
  return InitStatus;
 8005f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop

08005f7c <CAN_FilterInit>:
  * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
  *         contains the configuration information.
  * @retval None
  */
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  uint32_t filter_number_bit_pos = 0;
 8005f84:	2300      	movs	r3, #0
 8005f86:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	7a9b      	ldrb	r3, [r3, #10]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f92:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 8005f94:	4b51      	ldr	r3, [pc, #324]	; (80060dc <CAN_FilterInit+0x160>)
 8005f96:	4a51      	ldr	r2, [pc, #324]	; (80060dc <CAN_FilterInit+0x160>)
 8005f98:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8005f9c:	f042 0201 	orr.w	r2, r2, #1
 8005fa0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 8005fa4:	4b4d      	ldr	r3, [pc, #308]	; (80060dc <CAN_FilterInit+0x160>)
 8005fa6:	4a4d      	ldr	r2, [pc, #308]	; (80060dc <CAN_FilterInit+0x160>)
 8005fa8:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	43d2      	mvns	r2, r2
 8005fb0:	400a      	ands	r2, r1
 8005fb2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	7b1b      	ldrb	r3, [r3, #12]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d121      	bne.n	8006002 <CAN_FilterInit+0x86>
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 8005fbe:	4b47      	ldr	r3, [pc, #284]	; (80060dc <CAN_FilterInit+0x160>)
 8005fc0:	4a46      	ldr	r2, [pc, #280]	; (80060dc <CAN_FilterInit+0x160>)
 8005fc2:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	43d2      	mvns	r2, r2
 8005fca:	400a      	ands	r2, r1
 8005fcc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8005fd0:	4b42      	ldr	r3, [pc, #264]	; (80060dc <CAN_FilterInit+0x160>)
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	7a92      	ldrb	r2, [r2, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8005fd6:	6879      	ldr	r1, [r7, #4]
 8005fd8:	88c9      	ldrh	r1, [r1, #6]
 8005fda:	0408      	lsls	r0, r1, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8005fdc:	6879      	ldr	r1, [r7, #4]
 8005fde:	8849      	ldrh	r1, [r1, #2]
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8005fe0:	4301      	orrs	r1, r0
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8005fe2:	3248      	adds	r2, #72	; 0x48
 8005fe4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8005fe8:	493c      	ldr	r1, [pc, #240]	; (80060dc <CAN_FilterInit+0x160>)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	7a9b      	ldrb	r3, [r3, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	8892      	ldrh	r2, [r2, #4]
 8005ff2:	0410      	lsls	r0, r2, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	8812      	ldrh	r2, [r2, #0]
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8005ff8:	4302      	orrs	r2, r0
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8005ffa:	3348      	adds	r3, #72	; 0x48
 8005ffc:	00db      	lsls	r3, r3, #3
 8005ffe:	440b      	add	r3, r1
 8006000:	605a      	str	r2, [r3, #4]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	7b1b      	ldrb	r3, [r3, #12]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d120      	bne.n	800604c <CAN_FilterInit+0xd0>
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 800600a:	4b34      	ldr	r3, [pc, #208]	; (80060dc <CAN_FilterInit+0x160>)
 800600c:	4a33      	ldr	r2, [pc, #204]	; (80060dc <CAN_FilterInit+0x160>)
 800600e:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	430a      	orrs	r2, r1
 8006016:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 800601a:	4b30      	ldr	r3, [pc, #192]	; (80060dc <CAN_FilterInit+0x160>)
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	7a92      	ldrb	r2, [r2, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8006020:	6879      	ldr	r1, [r7, #4]
 8006022:	8809      	ldrh	r1, [r1, #0]
 8006024:	0408      	lsls	r0, r1, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8006026:	6879      	ldr	r1, [r7, #4]
 8006028:	8849      	ldrh	r1, [r1, #2]
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 800602a:	4301      	orrs	r1, r0
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 800602c:	3248      	adds	r2, #72	; 0x48
 800602e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8006032:	492a      	ldr	r1, [pc, #168]	; (80060dc <CAN_FilterInit+0x160>)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	7a9b      	ldrb	r3, [r3, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	8892      	ldrh	r2, [r2, #4]
 800603c:	0410      	lsls	r0, r2, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	88d2      	ldrh	r2, [r2, #6]
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8006042:	4302      	orrs	r2, r0
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8006044:	3348      	adds	r3, #72	; 0x48
 8006046:	00db      	lsls	r3, r3, #3
 8006048:	440b      	add	r3, r1
 800604a:	605a      	str	r2, [r3, #4]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
  }

  /* Filter Mode */
  if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	7adb      	ldrb	r3, [r3, #11]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d109      	bne.n	8006068 <CAN_FilterInit+0xec>
  {
    /*Id/Mask mode for the filter*/
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 8006054:	4b21      	ldr	r3, [pc, #132]	; (80060dc <CAN_FilterInit+0x160>)
 8006056:	4a21      	ldr	r2, [pc, #132]	; (80060dc <CAN_FilterInit+0x160>)
 8006058:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	43d2      	mvns	r2, r2
 8006060:	400a      	ands	r2, r1
 8006062:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8006066:	e007      	b.n	8006078 <CAN_FilterInit+0xfc>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 8006068:	4b1c      	ldr	r3, [pc, #112]	; (80060dc <CAN_FilterInit+0x160>)
 800606a:	4a1c      	ldr	r2, [pc, #112]	; (80060dc <CAN_FilterInit+0x160>)
 800606c:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	430a      	orrs	r2, r1
 8006074:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	891b      	ldrh	r3, [r3, #8]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d108      	bne.n	8006092 <CAN_FilterInit+0x116>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 8006080:	4b16      	ldr	r3, [pc, #88]	; (80060dc <CAN_FilterInit+0x160>)
 8006082:	4a16      	ldr	r2, [pc, #88]	; (80060dc <CAN_FilterInit+0x160>)
 8006084:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	43d2      	mvns	r2, r2
 800608c:	400a      	ands	r2, r1
 800608e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }

  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	891b      	ldrh	r3, [r3, #8]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d107      	bne.n	80060aa <CAN_FilterInit+0x12e>
  {
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 800609a:	4b10      	ldr	r3, [pc, #64]	; (80060dc <CAN_FilterInit+0x160>)
 800609c:	4a0f      	ldr	r2, [pc, #60]	; (80060dc <CAN_FilterInit+0x160>)
 800609e:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	430a      	orrs	r2, r1
 80060a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Filter activation */
  if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	7b5b      	ldrb	r3, [r3, #13]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d107      	bne.n	80060c2 <CAN_FilterInit+0x146>
  {
    CAN1->FA1R |= filter_number_bit_pos;
 80060b2:	4b0a      	ldr	r3, [pc, #40]	; (80060dc <CAN_FilterInit+0x160>)
 80060b4:	4a09      	ldr	r2, [pc, #36]	; (80060dc <CAN_FilterInit+0x160>)
 80060b6:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	430a      	orrs	r2, r1
 80060be:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 80060c2:	4b06      	ldr	r3, [pc, #24]	; (80060dc <CAN_FilterInit+0x160>)
 80060c4:	4a05      	ldr	r2, [pc, #20]	; (80060dc <CAN_FilterInit+0x160>)
 80060c6:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80060ca:	f022 0201 	bic.w	r2, r2, #1
 80060ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80060d2:	3714      	adds	r7, #20
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr
 80060dc:	40006400 	.word	0x40006400

080060e0 <CAN_StructInit>:
  * @brief  Fills each CAN_InitStruct member with its default value.
  * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which ill be initialized.
  * @retval None
  */
void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  /* Reset CAN init structure parameters values */
  
  /* Initialize the time triggered communication mode */
  CAN_InitStruct->CAN_TTCM = DISABLE;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	719a      	strb	r2, [r3, #6]
  
  /* Initialize the automatic bus-off management */
  CAN_InitStruct->CAN_ABOM = DISABLE;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	71da      	strb	r2, [r3, #7]
  
  /* Initialize the automatic wake-up mode */
  CAN_InitStruct->CAN_AWUM = DISABLE;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	721a      	strb	r2, [r3, #8]
  
  /* Initialize the no automatic retransmission */
  CAN_InitStruct->CAN_NART = DISABLE;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	725a      	strb	r2, [r3, #9]
  
  /* Initialize the receive FIFO locked mode */
  CAN_InitStruct->CAN_RFLM = DISABLE;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	729a      	strb	r2, [r3, #10]
  
  /* Initialize the transmit FIFO priority */
  CAN_InitStruct->CAN_TXFP = DISABLE;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	72da      	strb	r2, [r3, #11]
  
  /* Initialize the CAN_Mode member */
  CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	709a      	strb	r2, [r3, #2]
  
  /* Initialize the CAN_SJW member */
  CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	70da      	strb	r2, [r3, #3]
  
  /* Initialize the CAN_BS1 member */
  CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2203      	movs	r2, #3
 800611c:	711a      	strb	r2, [r3, #4]
  
  /* Initialize the CAN_BS2 member */
  CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2202      	movs	r2, #2
 8006122:	715a      	strb	r2, [r3, #5]
  
  /* Initialize the CAN_Prescaler member */
  CAN_InitStruct->CAN_Prescaler = 1;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	801a      	strh	r2, [r3, #0]
}
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <CAN_SlaveStartBank>:
  * @brief  Select the start bank filter for slave CAN.
  * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
  * @retval None
  */
void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	4603      	mov	r3, r0
 800613c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
  
  /* Enter Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 800613e:	4b14      	ldr	r3, [pc, #80]	; (8006190 <CAN_SlaveStartBank+0x5c>)
 8006140:	4a13      	ldr	r2, [pc, #76]	; (8006190 <CAN_SlaveStartBank+0x5c>)
 8006142:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8006146:	f042 0201 	orr.w	r2, r2, #1
 800614a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Select the start slave bank */
  CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
 800614e:	4a10      	ldr	r2, [pc, #64]	; (8006190 <CAN_SlaveStartBank+0x5c>)
 8006150:	4b0f      	ldr	r3, [pc, #60]	; (8006190 <CAN_SlaveStartBank+0x5c>)
 8006152:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006156:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800615a:	f023 030e 	bic.w	r3, r3, #14
 800615e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 8006162:	4b0b      	ldr	r3, [pc, #44]	; (8006190 <CAN_SlaveStartBank+0x5c>)
 8006164:	4a0a      	ldr	r2, [pc, #40]	; (8006190 <CAN_SlaveStartBank+0x5c>)
 8006166:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 800616a:	79fa      	ldrb	r2, [r7, #7]
 800616c:	0212      	lsls	r2, r2, #8
 800616e:	430a      	orrs	r2, r1
 8006170:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Leave Initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 8006174:	4b06      	ldr	r3, [pc, #24]	; (8006190 <CAN_SlaveStartBank+0x5c>)
 8006176:	4a06      	ldr	r2, [pc, #24]	; (8006190 <CAN_SlaveStartBank+0x5c>)
 8006178:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800617c:	f022 0201 	bic.w	r2, r2, #1
 8006180:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8006184:	370c      	adds	r7, #12
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	40006400 	.word	0x40006400

08006194 <CAN_DBGFreeze>:
  *          during debug. Reception FIFOs can still be accessed/controlled normally) 
  *          or DISABLE (CAN is working during debug).
  * @retval None
  */
void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	460b      	mov	r3, r1
 800619e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80061a0:	78fb      	ldrb	r3, [r7, #3]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d006      	beq.n	80061b4 <CAN_DBGFreeze+0x20>
  {
    /* Enable Debug Freeze  */
    CANx->MCR |= MCR_DBF;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	601a      	str	r2, [r3, #0]
 80061b2:	e005      	b.n	80061c0 <CAN_DBGFreeze+0x2c>
  }
  else
  {
    /* Disable Debug Freeze */
    CANx->MCR &= ~MCR_DBF;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	601a      	str	r2, [r3, #0]
  }
}
 80061c0:	370c      	adds	r7, #12
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop

080061cc <CAN_TTComModeCmd>:
  *         data bytes of the 8-byte message: TIME[7:0] in data byte 6 and TIME[15:8] 
  *         in data byte 7. 
  * @retval None
  */
void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	460b      	mov	r3, r1
 80061d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80061d8:	78fb      	ldrb	r3, [r7, #3]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d01e      	beq.n	800621c <CAN_TTComModeCmd+0x50>
  {
    /* Enable the TTCM mode */
    CANx->MCR |= CAN_MCR_TTCM;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	601a      	str	r2, [r3, #0]

    /* Set TGT bits */
    CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80061f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8006200:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8006210:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
 800621a:	e01d      	b.n	8006258 <CAN_TTComModeCmd+0x8c>
  }
  else
  {
    /* Disable the TTCM mode */
    CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	601a      	str	r2, [r3, #0]

    /* Reset TGT bits */
    CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800622e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800623e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800624e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
  }
}
 8006258:	370c      	adds	r7, #12
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop

08006264 <CAN_Transmit>:
  * @param  TxMessage: pointer to a structure which contains CAN Id, CAN DLC and CAN data.
  * @retval The number of the mailbox that is used for transmission or
  *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
  */
uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  uint8_t transmit_mailbox = 0;
 800626e:	2300      	movs	r3, #0
 8006270:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800627a:	2b00      	cmp	r3, #0
 800627c:	d002      	beq.n	8006284 <CAN_Transmit+0x20>
  {
    transmit_mailbox = 0;
 800627e:	2300      	movs	r3, #0
 8006280:	73fb      	strb	r3, [r7, #15]
 8006282:	e013      	b.n	80062ac <CAN_Transmit+0x48>
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800628c:	2b00      	cmp	r3, #0
 800628e:	d002      	beq.n	8006296 <CAN_Transmit+0x32>
  {
    transmit_mailbox = 1;
 8006290:	2301      	movs	r3, #1
 8006292:	73fb      	strb	r3, [r7, #15]
 8006294:	e00a      	b.n	80062ac <CAN_Transmit+0x48>
  }
  else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d002      	beq.n	80062a8 <CAN_Transmit+0x44>
  {
    transmit_mailbox = 2;
 80062a2:	2302      	movs	r3, #2
 80062a4:	73fb      	strb	r3, [r7, #15]
 80062a6:	e001      	b.n	80062ac <CAN_Transmit+0x48>
  }
  else
  {
    transmit_mailbox = CAN_TxStatus_NoMailBox;
 80062a8:	2304      	movs	r3, #4
 80062aa:	73fb      	strb	r3, [r7, #15]
  }

  if (transmit_mailbox != CAN_TxStatus_NoMailBox)
 80062ac:	7bfb      	ldrb	r3, [r7, #15]
 80062ae:	2b04      	cmp	r3, #4
 80062b0:	f000 8098 	beq.w	80063e4 <CAN_Transmit+0x180>
  {
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 80062b4:	7bfb      	ldrb	r3, [r7, #15]
 80062b6:	7bfa      	ldrb	r2, [r7, #15]
 80062b8:	6879      	ldr	r1, [r7, #4]
 80062ba:	3218      	adds	r2, #24
 80062bc:	0112      	lsls	r2, r2, #4
 80062be:	440a      	add	r2, r1
 80062c0:	6812      	ldr	r2, [r2, #0]
 80062c2:	f002 0201 	and.w	r2, r2, #1
 80062c6:	6879      	ldr	r1, [r7, #4]
 80062c8:	3318      	adds	r3, #24
 80062ca:	011b      	lsls	r3, r3, #4
 80062cc:	440b      	add	r3, r1
 80062ce:	601a      	str	r2, [r3, #0]
    if (TxMessage->IDE == CAN_Id_Standard)
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	7a1b      	ldrb	r3, [r3, #8]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d113      	bne.n	8006300 <CAN_Transmit+0x9c>
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 80062d8:	7bfb      	ldrb	r3, [r7, #15]
 80062da:	7bfa      	ldrb	r2, [r7, #15]
 80062dc:	6879      	ldr	r1, [r7, #4]
 80062de:	3218      	adds	r2, #24
 80062e0:	0112      	lsls	r2, r2, #4
 80062e2:	440a      	add	r2, r1
 80062e4:	6811      	ldr	r1, [r2, #0]
 80062e6:	683a      	ldr	r2, [r7, #0]
 80062e8:	6812      	ldr	r2, [r2, #0]
 80062ea:	0550      	lsls	r0, r2, #21
                                                  TxMessage->RTR);
 80062ec:	683a      	ldr	r2, [r7, #0]
 80062ee:	7a52      	ldrb	r2, [r2, #9]
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
    if (TxMessage->IDE == CAN_Id_Standard)
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 80062f0:	4302      	orrs	r2, r0
 80062f2:	430a      	orrs	r2, r1
 80062f4:	6879      	ldr	r1, [r7, #4]
 80062f6:	3318      	adds	r3, #24
 80062f8:	011b      	lsls	r3, r3, #4
 80062fa:	440b      	add	r3, r1
 80062fc:	601a      	str	r2, [r3, #0]
 80062fe:	e015      	b.n	800632c <CAN_Transmit+0xc8>
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8006300:	7bfb      	ldrb	r3, [r7, #15]
 8006302:	7bfa      	ldrb	r2, [r7, #15]
 8006304:	6879      	ldr	r1, [r7, #4]
 8006306:	3218      	adds	r2, #24
 8006308:	0112      	lsls	r2, r2, #4
 800630a:	440a      	add	r2, r1
 800630c:	6811      	ldr	r1, [r2, #0]
 800630e:	683a      	ldr	r2, [r7, #0]
 8006310:	6852      	ldr	r2, [r2, #4]
 8006312:	00d0      	lsls	r0, r2, #3
                                                  TxMessage->IDE | \
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	7a12      	ldrb	r2, [r2, #8]
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8006318:	4310      	orrs	r0, r2
                                                  TxMessage->IDE | \
                                                  TxMessage->RTR);
 800631a:	683a      	ldr	r2, [r7, #0]
 800631c:	7a52      	ldrb	r2, [r2, #9]
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
                                                  TxMessage->IDE | \
 800631e:	4302      	orrs	r2, r0
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8006320:	430a      	orrs	r2, r1
 8006322:	6879      	ldr	r1, [r7, #4]
 8006324:	3318      	adds	r3, #24
 8006326:	011b      	lsls	r3, r3, #4
 8006328:	440b      	add	r3, r1
 800632a:	601a      	str	r2, [r3, #0]
                                                  TxMessage->IDE | \
                                                  TxMessage->RTR);
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	7a9b      	ldrb	r3, [r3, #10]
 8006330:	f003 030f 	and.w	r3, r3, #15
 8006334:	b2da      	uxtb	r2, r3
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	729a      	strb	r2, [r3, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 800633a:	7bfb      	ldrb	r3, [r7, #15]
 800633c:	7bfa      	ldrb	r2, [r7, #15]
 800633e:	6879      	ldr	r1, [r7, #4]
 8006340:	3218      	adds	r2, #24
 8006342:	0112      	lsls	r2, r2, #4
 8006344:	440a      	add	r2, r1
 8006346:	6852      	ldr	r2, [r2, #4]
 8006348:	f022 020f 	bic.w	r2, r2, #15
 800634c:	6879      	ldr	r1, [r7, #4]
 800634e:	3318      	adds	r3, #24
 8006350:	011b      	lsls	r3, r3, #4
 8006352:	440b      	add	r3, r1
 8006354:	605a      	str	r2, [r3, #4]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 8006356:	7bfb      	ldrb	r3, [r7, #15]
 8006358:	7bfa      	ldrb	r2, [r7, #15]
 800635a:	6879      	ldr	r1, [r7, #4]
 800635c:	3218      	adds	r2, #24
 800635e:	0112      	lsls	r2, r2, #4
 8006360:	440a      	add	r2, r1
 8006362:	6851      	ldr	r1, [r2, #4]
 8006364:	683a      	ldr	r2, [r7, #0]
 8006366:	7a92      	ldrb	r2, [r2, #10]
 8006368:	430a      	orrs	r2, r1
 800636a:	6879      	ldr	r1, [r7, #4]
 800636c:	3318      	adds	r3, #24
 800636e:	011b      	lsls	r3, r3, #4
 8006370:	440b      	add	r3, r1
 8006372:	605a      	str	r2, [r3, #4]

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8006374:	7bfb      	ldrb	r3, [r7, #15]
 8006376:	683a      	ldr	r2, [r7, #0]
 8006378:	7b92      	ldrb	r2, [r2, #14]
 800637a:	0611      	lsls	r1, r2, #24
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 800637c:	683a      	ldr	r2, [r7, #0]
 800637e:	7b52      	ldrb	r2, [r2, #13]
 8006380:	0412      	lsls	r2, r2, #16
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8006382:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 8006384:	683a      	ldr	r2, [r7, #0]
 8006386:	7b12      	ldrb	r2, [r2, #12]
 8006388:	0212      	lsls	r2, r2, #8
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 800638a:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
 800638c:	683a      	ldr	r2, [r7, #0]
 800638e:	7ad2      	ldrb	r2, [r2, #11]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 8006390:	430a      	orrs	r2, r1
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8006392:	6879      	ldr	r1, [r7, #4]
 8006394:	011b      	lsls	r3, r3, #4
 8006396:	440b      	add	r3, r1
 8006398:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800639c:	601a      	str	r2, [r3, #0]
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 800639e:	7bfb      	ldrb	r3, [r7, #15]
 80063a0:	683a      	ldr	r2, [r7, #0]
 80063a2:	7c92      	ldrb	r2, [r2, #18]
 80063a4:	0611      	lsls	r1, r2, #24
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 80063a6:	683a      	ldr	r2, [r7, #0]
 80063a8:	7c52      	ldrb	r2, [r2, #17]
 80063aa:	0412      	lsls	r2, r2, #16
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 80063ac:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 80063ae:	683a      	ldr	r2, [r7, #0]
 80063b0:	7c12      	ldrb	r2, [r2, #16]
 80063b2:	0212      	lsls	r2, r2, #8
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 80063b4:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[5] << 8) |
                                             ((uint32_t)TxMessage->Data[4]));
 80063b6:	683a      	ldr	r2, [r7, #0]
 80063b8:	7bd2      	ldrb	r2, [r2, #15]
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 80063ba:	430a      	orrs	r2, r1
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 80063bc:	6879      	ldr	r1, [r7, #4]
 80063be:	011b      	lsls	r3, r3, #4
 80063c0:	440b      	add	r3, r1
 80063c2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80063c6:	605a      	str	r2, [r3, #4]
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
                                             ((uint32_t)TxMessage->Data[4]));
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 80063c8:	7bfb      	ldrb	r3, [r7, #15]
 80063ca:	7bfa      	ldrb	r2, [r7, #15]
 80063cc:	6879      	ldr	r1, [r7, #4]
 80063ce:	3218      	adds	r2, #24
 80063d0:	0112      	lsls	r2, r2, #4
 80063d2:	440a      	add	r2, r1
 80063d4:	6812      	ldr	r2, [r2, #0]
 80063d6:	f042 0201 	orr.w	r2, r2, #1
 80063da:	6879      	ldr	r1, [r7, #4]
 80063dc:	3318      	adds	r3, #24
 80063de:	011b      	lsls	r3, r3, #4
 80063e0:	440b      	add	r3, r1
 80063e2:	601a      	str	r2, [r3, #0]
  }
  return transmit_mailbox;
 80063e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3714      	adds	r7, #20
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop

080063f4 <CAN_TransmitStatus>:
  * @param  TransmitMailbox: the number of the mailbox that is used for transmission.
  * @retval CAN_TxStatus_Ok if the CAN driver transmits the message, 
  *         CAN_TxStatus_Failed in an other case.
  */
uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	460b      	mov	r3, r1
 80063fe:	70fb      	strb	r3, [r7, #3]
  uint32_t state = 0;
 8006400:	2300      	movs	r3, #0
 8006402:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 
  switch (TransmitMailbox)
 8006404:	78fb      	ldrb	r3, [r7, #3]
 8006406:	2b01      	cmp	r3, #1
 8006408:	d009      	beq.n	800641e <CAN_TransmitStatus+0x2a>
 800640a:	2b02      	cmp	r3, #2
 800640c:	d00d      	beq.n	800642a <CAN_TransmitStatus+0x36>
 800640e:	2b00      	cmp	r3, #0
 8006410:	d111      	bne.n	8006436 <CAN_TransmitStatus+0x42>
  {
    case (CAN_TXMAILBOX_0): 
      state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	689a      	ldr	r2, [r3, #8]
 8006416:	4b26      	ldr	r3, [pc, #152]	; (80064b0 <CAN_TransmitStatus+0xbc>)
 8006418:	4013      	ands	r3, r2
 800641a:	60fb      	str	r3, [r7, #12]
      break;
 800641c:	e00e      	b.n	800643c <CAN_TransmitStatus+0x48>
    case (CAN_TXMAILBOX_1): 
      state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	689a      	ldr	r2, [r3, #8]
 8006422:	4b24      	ldr	r3, [pc, #144]	; (80064b4 <CAN_TransmitStatus+0xc0>)
 8006424:	4013      	ands	r3, r2
 8006426:	60fb      	str	r3, [r7, #12]
      break;
 8006428:	e008      	b.n	800643c <CAN_TransmitStatus+0x48>
    case (CAN_TXMAILBOX_2): 
      state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	689a      	ldr	r2, [r3, #8]
 800642e:	4b22      	ldr	r3, [pc, #136]	; (80064b8 <CAN_TransmitStatus+0xc4>)
 8006430:	4013      	ands	r3, r2
 8006432:	60fb      	str	r3, [r7, #12]
      break;
 8006434:	e002      	b.n	800643c <CAN_TransmitStatus+0x48>
    default:
      state = CAN_TxStatus_Failed;
 8006436:	2300      	movs	r3, #0
 8006438:	60fb      	str	r3, [r7, #12]
      break;
 800643a:	bf00      	nop
  }
  switch (state)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	4a1f      	ldr	r2, [pc, #124]	; (80064bc <CAN_TransmitStatus+0xc8>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d01b      	beq.n	800647c <CAN_TransmitStatus+0x88>
 8006444:	4a1d      	ldr	r2, [pc, #116]	; (80064bc <CAN_TransmitStatus+0xc8>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d808      	bhi.n	800645c <CAN_TransmitStatus+0x68>
 800644a:	4a1d      	ldr	r2, [pc, #116]	; (80064c0 <CAN_TransmitStatus+0xcc>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d012      	beq.n	8006476 <CAN_TransmitStatus+0x82>
 8006450:	4a17      	ldr	r2, [pc, #92]	; (80064b0 <CAN_TransmitStatus+0xbc>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d018      	beq.n	8006488 <CAN_TransmitStatus+0x94>
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00a      	beq.n	8006470 <CAN_TransmitStatus+0x7c>
 800645a:	e01e      	b.n	800649a <CAN_TransmitStatus+0xa6>
 800645c:	4a19      	ldr	r2, [pc, #100]	; (80064c4 <CAN_TransmitStatus+0xd0>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d00f      	beq.n	8006482 <CAN_TransmitStatus+0x8e>
 8006462:	4a15      	ldr	r2, [pc, #84]	; (80064b8 <CAN_TransmitStatus+0xc4>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d015      	beq.n	8006494 <CAN_TransmitStatus+0xa0>
 8006468:	4a12      	ldr	r2, [pc, #72]	; (80064b4 <CAN_TransmitStatus+0xc0>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d00f      	beq.n	800648e <CAN_TransmitStatus+0x9a>
 800646e:	e014      	b.n	800649a <CAN_TransmitStatus+0xa6>
  {
      /* transmit pending  */
    case (0x0): state = CAN_TxStatus_Pending;
 8006470:	2302      	movs	r3, #2
 8006472:	60fb      	str	r3, [r7, #12]
      break;
 8006474:	e014      	b.n	80064a0 <CAN_TransmitStatus+0xac>
      /* transmit failed  */
     case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
 8006476:	2300      	movs	r3, #0
 8006478:	60fb      	str	r3, [r7, #12]
      break;
 800647a:	e011      	b.n	80064a0 <CAN_TransmitStatus+0xac>
     case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
 800647c:	2300      	movs	r3, #0
 800647e:	60fb      	str	r3, [r7, #12]
      break;
 8006480:	e00e      	b.n	80064a0 <CAN_TransmitStatus+0xac>
     case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
 8006482:	2300      	movs	r3, #0
 8006484:	60fb      	str	r3, [r7, #12]
      break;
 8006486:	e00b      	b.n	80064a0 <CAN_TransmitStatus+0xac>
      /* transmit succeeded  */
    case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
 8006488:	2301      	movs	r3, #1
 800648a:	60fb      	str	r3, [r7, #12]
      break;
 800648c:	e008      	b.n	80064a0 <CAN_TransmitStatus+0xac>
    case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
 800648e:	2301      	movs	r3, #1
 8006490:	60fb      	str	r3, [r7, #12]
      break;
 8006492:	e005      	b.n	80064a0 <CAN_TransmitStatus+0xac>
    case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 8006494:	2301      	movs	r3, #1
 8006496:	60fb      	str	r3, [r7, #12]
      break;
 8006498:	e002      	b.n	80064a0 <CAN_TransmitStatus+0xac>
    default: state = CAN_TxStatus_Failed;
 800649a:	2300      	movs	r3, #0
 800649c:	60fb      	str	r3, [r7, #12]
      break;
 800649e:	bf00      	nop
  }
  return (uint8_t) state;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	b2db      	uxtb	r3, r3
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3714      	adds	r7, #20
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr
 80064b0:	04000003 	.word	0x04000003
 80064b4:	08000300 	.word	0x08000300
 80064b8:	10030000 	.word	0x10030000
 80064bc:	08000100 	.word	0x08000100
 80064c0:	04000001 	.word	0x04000001
 80064c4:	10010000 	.word	0x10010000

080064c8 <CAN_CancelTransmit>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  Mailbox: Mailbox number.
  * @retval None
  */
void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	460b      	mov	r3, r1
 80064d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
  /* abort transmission */
  switch (Mailbox)
 80064d4:	78fb      	ldrb	r3, [r7, #3]
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d00b      	beq.n	80064f2 <CAN_CancelTransmit+0x2a>
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d010      	beq.n	8006500 <CAN_CancelTransmit+0x38>
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d000      	beq.n	80064e4 <CAN_CancelTransmit+0x1c>
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
      break;
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
      break;
    default:
      break;
 80064e2:	e014      	b.n	800650e <CAN_CancelTransmit+0x46>
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
  /* abort transmission */
  switch (Mailbox)
  {
    case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	609a      	str	r2, [r3, #8]
      break;
 80064f0:	e00d      	b.n	800650e <CAN_CancelTransmit+0x46>
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	609a      	str	r2, [r3, #8]
      break;
 80064fe:	e006      	b.n	800650e <CAN_CancelTransmit+0x46>
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	609a      	str	r2, [r3, #8]
      break;
 800650c:	bf00      	nop
    default:
      break;
  }
}
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <CAN_Receive>:
  * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
  *         CAN DLC, CAN data and FMI number.
  * @retval None
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	460b      	mov	r3, r1
 8006522:	607a      	str	r2, [r7, #4]
 8006524:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8006526:	7afb      	ldrb	r3, [r7, #11]
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	331b      	adds	r3, #27
 800652c:	011b      	lsls	r3, r3, #4
 800652e:	4413      	add	r3, r2
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	b2db      	uxtb	r3, r3
 8006534:	f003 0304 	and.w	r3, r3, #4
 8006538:	b2da      	uxtb	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	721a      	strb	r2, [r3, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	7a1b      	ldrb	r3, [r3, #8]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d109      	bne.n	800655a <CAN_Receive+0x42>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 8006546:	7afb      	ldrb	r3, [r7, #11]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	331b      	adds	r3, #27
 800654c:	011b      	lsls	r3, r3, #4
 800654e:	4413      	add	r3, r2
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	0d5a      	lsrs	r2, r3, #21
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	601a      	str	r2, [r3, #0]
 8006558:	e008      	b.n	800656c <CAN_Receive+0x54>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 800655a:	7afb      	ldrb	r3, [r7, #11]
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	331b      	adds	r3, #27
 8006560:	011b      	lsls	r3, r3, #4
 8006562:	4413      	add	r3, r2
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	08da      	lsrs	r2, r3, #3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	605a      	str	r2, [r3, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 800656c:	7afb      	ldrb	r3, [r7, #11]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	331b      	adds	r3, #27
 8006572:	011b      	lsls	r3, r3, #4
 8006574:	4413      	add	r3, r2
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	b2db      	uxtb	r3, r3
 800657a:	f003 0302 	and.w	r3, r3, #2
 800657e:	b2da      	uxtb	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	725a      	strb	r2, [r3, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 8006584:	7afb      	ldrb	r3, [r7, #11]
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	331b      	adds	r3, #27
 800658a:	011b      	lsls	r3, r3, #4
 800658c:	4413      	add	r3, r2
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	b2db      	uxtb	r3, r3
 8006592:	f003 030f 	and.w	r3, r3, #15
 8006596:	b2da      	uxtb	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	729a      	strb	r2, [r3, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 800659c:	7afb      	ldrb	r3, [r7, #11]
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	331b      	adds	r3, #27
 80065a2:	011b      	lsls	r3, r3, #4
 80065a4:	4413      	add	r3, r2
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	0a1b      	lsrs	r3, r3, #8
 80065aa:	b2da      	uxtb	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	74da      	strb	r2, [r3, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 80065b0:	7afb      	ldrb	r3, [r7, #11]
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	011b      	lsls	r3, r3, #4
 80065b6:	4413      	add	r3, r2
 80065b8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	b2da      	uxtb	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	72da      	strb	r2, [r3, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 80065c4:	7afb      	ldrb	r3, [r7, #11]
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	011b      	lsls	r3, r3, #4
 80065ca:	4413      	add	r3, r2
 80065cc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	0a1b      	lsrs	r3, r3, #8
 80065d4:	b2da      	uxtb	r2, r3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	731a      	strb	r2, [r3, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 80065da:	7afb      	ldrb	r3, [r7, #11]
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	011b      	lsls	r3, r3, #4
 80065e0:	4413      	add	r3, r2
 80065e2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	0c1b      	lsrs	r3, r3, #16
 80065ea:	b2da      	uxtb	r2, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	735a      	strb	r2, [r3, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 80065f0:	7afb      	ldrb	r3, [r7, #11]
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	011b      	lsls	r3, r3, #4
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	0e1b      	lsrs	r3, r3, #24
 8006600:	b2da      	uxtb	r2, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	739a      	strb	r2, [r3, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 8006606:	7afb      	ldrb	r3, [r7, #11]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	011b      	lsls	r3, r3, #4
 800660c:	4413      	add	r3, r2
 800660e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	b2da      	uxtb	r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	73da      	strb	r2, [r3, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 800661a:	7afb      	ldrb	r3, [r7, #11]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	011b      	lsls	r3, r3, #4
 8006620:	4413      	add	r3, r2
 8006622:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	0a1b      	lsrs	r3, r3, #8
 800662a:	b2da      	uxtb	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	741a      	strb	r2, [r3, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 8006630:	7afb      	ldrb	r3, [r7, #11]
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	011b      	lsls	r3, r3, #4
 8006636:	4413      	add	r3, r2
 8006638:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	0c1b      	lsrs	r3, r3, #16
 8006640:	b2da      	uxtb	r2, r3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	745a      	strb	r2, [r3, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 8006646:	7afb      	ldrb	r3, [r7, #11]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	011b      	lsls	r3, r3, #4
 800664c:	4413      	add	r3, r2
 800664e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	0e1b      	lsrs	r3, r3, #24
 8006656:	b2da      	uxtb	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	749a      	strb	r2, [r3, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 800665c:	7afb      	ldrb	r3, [r7, #11]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d106      	bne.n	8006670 <CAN_Receive+0x158>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	f043 0220 	orr.w	r2, r3, #32
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	60da      	str	r2, [r3, #12]
 800666e:	e005      	b.n	800667c <CAN_Receive+0x164>
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	f043 0220 	orr.w	r2, r3, #32
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	611a      	str	r2, [r3, #16]
  }
}
 800667c:	3714      	adds	r7, #20
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop

08006688 <CAN_FIFORelease>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  FIFONumber: FIFO to release, CAN_FIFO0 or CAN_FIFO1.
  * @retval None
  */
void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	460b      	mov	r3, r1
 8006692:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8006694:	78fb      	ldrb	r3, [r7, #3]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d106      	bne.n	80066a8 <CAN_FIFORelease+0x20>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	f043 0220 	orr.w	r2, r3, #32
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	60da      	str	r2, [r3, #12]
 80066a6:	e005      	b.n	80066b4 <CAN_FIFORelease+0x2c>
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	f043 0220 	orr.w	r2, r3, #32
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	611a      	str	r2, [r3, #16]
  }
}
 80066b4:	370c      	adds	r7, #12
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop

080066c0 <CAN_MessagePending>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
  * @retval NbMessage : which is the number of pending message.
  */
uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	460b      	mov	r3, r1
 80066ca:	70fb      	strb	r3, [r7, #3]
  uint8_t message_pending=0;
 80066cc:	2300      	movs	r3, #0
 80066ce:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  if (FIFONumber == CAN_FIFO0)
 80066d0:	78fb      	ldrb	r3, [r7, #3]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d106      	bne.n	80066e4 <CAN_MessagePending+0x24>
  {
    message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	f003 0303 	and.w	r3, r3, #3
 80066e0:	73fb      	strb	r3, [r7, #15]
 80066e2:	e00b      	b.n	80066fc <CAN_MessagePending+0x3c>
  }
  else if (FIFONumber == CAN_FIFO1)
 80066e4:	78fb      	ldrb	r3, [r7, #3]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d106      	bne.n	80066f8 <CAN_MessagePending+0x38>
  {
    message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	f003 0303 	and.w	r3, r3, #3
 80066f4:	73fb      	strb	r3, [r7, #15]
 80066f6:	e001      	b.n	80066fc <CAN_MessagePending+0x3c>
  }
  else
  {
    message_pending = 0;
 80066f8:	2300      	movs	r3, #0
 80066fa:	73fb      	strb	r3, [r7, #15]
  }
  return message_pending;
 80066fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3714      	adds	r7, #20
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop

0800670c <CAN_OperatingModeRequest>:
  * @retval status of the requested mode which can be 
  *         - CAN_ModeStatus_Failed:  CAN failed entering the specific mode 
  *         - CAN_ModeStatus_Success: CAN Succeed entering the specific mode 
  */
uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	460b      	mov	r3, r1
 8006716:	70fb      	strb	r3, [r7, #3]
  uint8_t status = CAN_ModeStatus_Failed;
 8006718:	2300      	movs	r3, #0
 800671a:	73fb      	strb	r3, [r7, #15]
  
  /* Timeout for INAK or also for SLAK bits*/
  uint32_t timeout = INAK_TIMEOUT; 
 800671c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006720:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));

  if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
 8006722:	78fb      	ldrb	r3, [r7, #3]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d120      	bne.n	800676a <CAN_OperatingModeRequest+0x5e>
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f023 0303 	bic.w	r3, r3, #3
 8006730:	f043 0201 	orr.w	r2, r3, #1
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 8006738:	e002      	b.n	8006740 <CAN_OperatingModeRequest+0x34>
    {
      timeout--;
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	3b01      	subs	r3, #1
 800673e:	60bb      	str	r3, [r7, #8]
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	f003 0303 	and.w	r3, r3, #3
 8006748:	2b01      	cmp	r3, #1
 800674a:	d002      	beq.n	8006752 <CAN_OperatingModeRequest+0x46>
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1f3      	bne.n	800673a <CAN_OperatingModeRequest+0x2e>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	f003 0303 	and.w	r3, r3, #3
 800675a:	2b01      	cmp	r3, #1
 800675c:	d002      	beq.n	8006764 <CAN_OperatingModeRequest+0x58>
    {
      status = CAN_ModeStatus_Failed;
 800675e:	2300      	movs	r3, #0
 8006760:	73fb      	strb	r3, [r7, #15]
 8006762:	e04a      	b.n	80067fa <CAN_OperatingModeRequest+0xee>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8006764:	2301      	movs	r3, #1
 8006766:	73fb      	strb	r3, [r7, #15]
 8006768:	e047      	b.n	80067fa <CAN_OperatingModeRequest+0xee>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
 800676a:	78fb      	ldrb	r3, [r7, #3]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d11e      	bne.n	80067ae <CAN_OperatingModeRequest+0xa2>
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f023 0203 	bic.w	r2, r3, #3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 800677c:	e002      	b.n	8006784 <CAN_OperatingModeRequest+0x78>
    {
      timeout--;
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	3b01      	subs	r3, #1
 8006782:	60bb      	str	r3, [r7, #8]
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	f003 0303 	and.w	r3, r3, #3
 800678c:	2b00      	cmp	r3, #0
 800678e:	d002      	beq.n	8006796 <CAN_OperatingModeRequest+0x8a>
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1f3      	bne.n	800677e <CAN_OperatingModeRequest+0x72>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != 0)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f003 0303 	and.w	r3, r3, #3
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d002      	beq.n	80067a8 <CAN_OperatingModeRequest+0x9c>
    {
      status = CAN_ModeStatus_Failed;
 80067a2:	2300      	movs	r3, #0
 80067a4:	73fb      	strb	r3, [r7, #15]
 80067a6:	e028      	b.n	80067fa <CAN_OperatingModeRequest+0xee>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 80067a8:	2301      	movs	r3, #1
 80067aa:	73fb      	strb	r3, [r7, #15]
 80067ac:	e025      	b.n	80067fa <CAN_OperatingModeRequest+0xee>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
 80067ae:	78fb      	ldrb	r3, [r7, #3]
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d120      	bne.n	80067f6 <CAN_OperatingModeRequest+0xea>
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f023 0303 	bic.w	r3, r3, #3
 80067bc:	f043 0202 	orr.w	r2, r3, #2
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 80067c4:	e002      	b.n	80067cc <CAN_OperatingModeRequest+0xc0>
    {
      timeout--;
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	3b01      	subs	r3, #1
 80067ca:	60bb      	str	r3, [r7, #8]
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	f003 0303 	and.w	r3, r3, #3
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d002      	beq.n	80067de <CAN_OperatingModeRequest+0xd2>
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1f3      	bne.n	80067c6 <CAN_OperatingModeRequest+0xba>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f003 0303 	and.w	r3, r3, #3
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d002      	beq.n	80067f0 <CAN_OperatingModeRequest+0xe4>
    {
      status = CAN_ModeStatus_Failed;
 80067ea:	2300      	movs	r3, #0
 80067ec:	73fb      	strb	r3, [r7, #15]
 80067ee:	e004      	b.n	80067fa <CAN_OperatingModeRequest+0xee>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 80067f0:	2301      	movs	r3, #1
 80067f2:	73fb      	strb	r3, [r7, #15]
 80067f4:	e001      	b.n	80067fa <CAN_OperatingModeRequest+0xee>
    }
  }
  else
  {
    status = CAN_ModeStatus_Failed;
 80067f6:	2300      	movs	r3, #0
 80067f8:	73fb      	strb	r3, [r7, #15]
  }

  return  (uint8_t) status;
 80067fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3714      	adds	r7, #20
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <CAN_Sleep>:
  * @brief  Enters the Sleep (low power) mode.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval CAN_Sleep_Ok if sleep entered, CAN_Sleep_Failed otherwise.
  */
uint8_t CAN_Sleep(CAN_TypeDef* CANx)
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  uint8_t sleepstatus = CAN_Sleep_Failed;
 8006810:	2300      	movs	r3, #0
 8006812:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Request Sleep mode */
   CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f023 0303 	bic.w	r3, r3, #3
 800681c:	f043 0202 	orr.w	r2, r3, #2
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	601a      	str	r2, [r3, #0]
   
  /* Sleep mode status */
  if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	f003 0303 	and.w	r3, r3, #3
 800682c:	2b02      	cmp	r3, #2
 800682e:	d101      	bne.n	8006834 <CAN_Sleep+0x2c>
  {
    /* Sleep mode not entered */
    sleepstatus =  CAN_Sleep_Ok;
 8006830:	2301      	movs	r3, #1
 8006832:	73fb      	strb	r3, [r7, #15]
  }
  /* return sleep mode status */
   return (uint8_t)sleepstatus;
 8006834:	7bfb      	ldrb	r3, [r7, #15]
}
 8006836:	4618      	mov	r0, r3
 8006838:	3714      	adds	r7, #20
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop

08006844 <CAN_WakeUp>:
  * @brief  Wakes up the CAN peripheral from sleep mode .
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed otherwise.
  */
uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  uint32_t wait_slak = SLAK_TIMEOUT;
 800684c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006850:	60fb      	str	r3, [r7, #12]
  uint8_t wakeupstatus = CAN_WakeUp_Failed;
 8006852:	2300      	movs	r3, #0
 8006854:	72fb      	strb	r3, [r7, #11]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f023 0202 	bic.w	r2, r3, #2
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	601a      	str	r2, [r3, #0]
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 8006862:	e002      	b.n	800686a <CAN_WakeUp+0x26>
  {
   wait_slak--;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	3b01      	subs	r3, #1
 8006868:	60fb      	str	r3, [r7, #12]
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	f003 0302 	and.w	r3, r3, #2
 8006872:	2b00      	cmp	r3, #0
 8006874:	d002      	beq.n	800687c <CAN_WakeUp+0x38>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d1f3      	bne.n	8006864 <CAN_WakeUp+0x20>
  {
   wait_slak--;
  }
  if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f003 0302 	and.w	r3, r3, #2
 8006884:	2b00      	cmp	r3, #0
 8006886:	d101      	bne.n	800688c <CAN_WakeUp+0x48>
  {
   /* wake up done : Sleep mode exited */
    wakeupstatus = CAN_WakeUp_Ok;
 8006888:	2301      	movs	r3, #1
 800688a:	72fb      	strb	r3, [r7, #11]
  }
  /* return wakeup status */
  return (uint8_t)wakeupstatus;
 800688c:	7afb      	ldrb	r3, [r7, #11]
}
 800688e:	4618      	mov	r0, r3
 8006890:	3714      	adds	r7, #20
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop

0800689c <CAN_GetLastErrorCode>:
  *          - CAN_ERRORCODE_BitDominantErr: Bit Dominant Error
  *          - CAN_ERRORCODE_CRCErr: CRC Error
  *          - CAN_ERRORCODE_SoftwareSetErr: Software Set Error  
  */
uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
{
 800689c:	b480      	push	{r7}
 800689e:	b085      	sub	sp, #20
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  uint8_t errorcode=0;
 80068a4:	2300      	movs	r3, #0
 80068a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the error code*/
  errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80068b2:	73fb      	strb	r3, [r7, #15]
  
  /* Return the error code*/
  return errorcode;
 80068b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3714      	adds	r7, #20
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop

080068c4 <CAN_GetReceiveErrorCounter>:
  *         error passive state.  
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.  
  * @retval CAN Receive Error Counter. 
  */
uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
 80068cc:	2300      	movs	r3, #0
 80068ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the Receive Error Counter*/
  counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	0e1b      	lsrs	r3, r3, #24
 80068d6:	73fb      	strb	r3, [r7, #15]
  
  /* Return the Receive Error Counter*/
  return counter;
 80068d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3714      	adds	r7, #20
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop

080068e8 <CAN_GetLSBTransmitErrorCounter>:
  * @brief  Returns the LSB of the 9-bit CANx Transmit Error Counter(TEC).
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
  * @retval LSB of the 9-bit CAN Transmit Error Counter. 
  */
uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
 80068f0:	2300      	movs	r3, #0
 80068f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	699b      	ldr	r3, [r3, #24]
 80068f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80068fc:	0c1b      	lsrs	r3, r3, #16
 80068fe:	73fb      	strb	r3, [r7, #15]
  
  /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  return counter;
 8006900:	7bfb      	ldrb	r3, [r7, #15]
}
 8006902:	4618      	mov	r0, r3
 8006904:	3714      	adds	r7, #20
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop

08006910 <CAN_ITConfig>:
  * @param  NewState: new state of the CAN interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	4613      	mov	r3, r2
 800691c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800691e:	79fb      	ldrb	r3, [r7, #7]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d006      	beq.n	8006932 <CAN_ITConfig+0x22>
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	695a      	ldr	r2, [r3, #20]
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	431a      	orrs	r2, r3
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	615a      	str	r2, [r3, #20]
 8006930:	e006      	b.n	8006940 <CAN_ITConfig+0x30>
  }
  else
  {
    /* Disable the selected CANx interrupt */
    CANx->IER &= ~CAN_IT;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	695a      	ldr	r2, [r3, #20]
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	43db      	mvns	r3, r3
 800693a:	401a      	ands	r2, r3
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	615a      	str	r2, [r3, #20]
  }
}
 8006940:	3714      	adds	r7, #20
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop

0800694c <CAN_GetFlagStatus>:
  *            @arg CAN_FLAG_BOF: Bus-Off Flag    
  *            @arg CAN_FLAG_LEC: Last error code Flag      
  * @retval The new state of CAN_FLAG (SET or RESET).
  */
FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8006956:	2300      	movs	r3, #0
 8006958:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
  

  if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00d      	beq.n	8006980 <CAN_GetFlagStatus+0x34>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	699a      	ldr	r2, [r3, #24]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	4013      	ands	r3, r2
 800696c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006970:	2b00      	cmp	r3, #0
 8006972:	d002      	beq.n	800697a <CAN_GetFlagStatus+0x2e>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8006974:	2301      	movs	r3, #1
 8006976:	73fb      	strb	r3, [r7, #15]
 8006978:	e048      	b.n	8006a0c <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 800697a:	2300      	movs	r3, #0
 800697c:	73fb      	strb	r3, [r7, #15]
 800697e:	e045      	b.n	8006a0c <CAN_GetFlagStatus+0xc0>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00d      	beq.n	80069a6 <CAN_GetFlagStatus+0x5a>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	685a      	ldr	r2, [r3, #4]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	4013      	ands	r3, r2
 8006992:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006996:	2b00      	cmp	r3, #0
 8006998:	d002      	beq.n	80069a0 <CAN_GetFlagStatus+0x54>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 800699a:	2301      	movs	r3, #1
 800699c:	73fb      	strb	r3, [r7, #15]
 800699e:	e035      	b.n	8006a0c <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 80069a0:	2300      	movs	r3, #0
 80069a2:	73fb      	strb	r3, [r7, #15]
 80069a4:	e032      	b.n	8006a0c <CAN_GetFlagStatus+0xc0>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00d      	beq.n	80069cc <CAN_GetFlagStatus+0x80>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	689a      	ldr	r2, [r3, #8]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	4013      	ands	r3, r2
 80069b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d002      	beq.n	80069c6 <CAN_GetFlagStatus+0x7a>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 80069c0:	2301      	movs	r3, #1
 80069c2:	73fb      	strb	r3, [r7, #15]
 80069c4:	e022      	b.n	8006a0c <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 80069c6:	2300      	movs	r3, #0
 80069c8:	73fb      	strb	r3, [r7, #15]
 80069ca:	e01f      	b.n	8006a0c <CAN_GetFlagStatus+0xc0>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00d      	beq.n	80069f2 <CAN_GetFlagStatus+0xa6>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	68da      	ldr	r2, [r3, #12]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	4013      	ands	r3, r2
 80069de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d002      	beq.n	80069ec <CAN_GetFlagStatus+0xa0>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 80069e6:	2301      	movs	r3, #1
 80069e8:	73fb      	strb	r3, [r7, #15]
 80069ea:	e00f      	b.n	8006a0c <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 80069ec:	2300      	movs	r3, #0
 80069ee:	73fb      	strb	r3, [r7, #15]
 80069f0:	e00c      	b.n	8006a0c <CAN_GetFlagStatus+0xc0>
    }
  }
  else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
  { 
    /* Check the status of the specified CAN flag */
    if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	691a      	ldr	r2, [r3, #16]
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	4013      	ands	r3, r2
 80069fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d002      	beq.n	8006a08 <CAN_GetFlagStatus+0xbc>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8006a02:	2301      	movs	r3, #1
 8006a04:	73fb      	strb	r3, [r7, #15]
 8006a06:	e001      	b.n	8006a0c <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Return the CAN_FLAG status */
  return  bitstatus;
 8006a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3714      	adds	r7, #20
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop

08006a1c <CAN_ClearFlag>:
  *            @arg CAN_FLAG_SLAK: Sleep acknowledge Flag    
  *            @arg CAN_FLAG_LEC: Last error code Flag        
  * @retval None
  */
void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  uint32_t flagtmp=0;
 8006a26:	2300      	movs	r3, #0
 8006a28:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
  
  if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
 8006a2a:	683a      	ldr	r2, [r7, #0]
 8006a2c:	4b16      	ldr	r3, [pc, #88]	; (8006a88 <CAN_ClearFlag+0x6c>)
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d103      	bne.n	8006a3a <CAN_ClearFlag+0x1e>
  {
    /* Clear the selected CAN flags */
    CANx->ESR = (uint32_t)RESET;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	619a      	str	r2, [r3, #24]
 8006a38:	e021      	b.n	8006a7e <CAN_ClearFlag+0x62>
  }
  else /* MSR or TSR or RF0R or RF1R */
  {
    flagtmp = CAN_FLAG & 0x000FFFFF;
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a40:	60fb      	str	r3, [r7, #12]

    if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d003      	beq.n	8006a54 <CAN_ClearFlag+0x38>
    {
      /* Receive Flags */
      CANx->RF0R = (uint32_t)(flagtmp);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	60da      	str	r2, [r3, #12]
 8006a52:	e014      	b.n	8006a7e <CAN_ClearFlag+0x62>
    }
    else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d003      	beq.n	8006a66 <CAN_ClearFlag+0x4a>
    {
      /* Receive Flags */
      CANx->RF1R = (uint32_t)(flagtmp);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	611a      	str	r2, [r3, #16]
 8006a64:	e00b      	b.n	8006a7e <CAN_ClearFlag+0x62>
    }
    else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d003      	beq.n	8006a78 <CAN_ClearFlag+0x5c>
    {
      /* Transmit Flags */
      CANx->TSR = (uint32_t)(flagtmp);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	609a      	str	r2, [r3, #8]
 8006a76:	e002      	b.n	8006a7e <CAN_ClearFlag+0x62>
    }
    else /* If((CAN_FLAG & CAN_FLAGS_MSR)!=(uint32_t)RESET) */
    {
      /* Operating mode Flags */
      CANx->MSR = (uint32_t)(flagtmp);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	605a      	str	r2, [r3, #4]
    }
  }
}
 8006a7e:	3714      	adds	r7, #20
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr
 8006a88:	30f00070 	.word	0x30f00070

08006a8c <CAN_GetITStatus>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt
  * @retval The current state of CAN_IT (SET or RESET).
  */
ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  ITStatus itstatus = RESET;
 8006a96:	2300      	movs	r3, #0
 8006a98:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  
  /* check the interrupt enable bit */
 if((CANx->IER & CAN_IT) != RESET)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	695a      	ldr	r2, [r3, #20]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	f000 80b2 	beq.w	8006c0c <CAN_GetITStatus+0x180>
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	2b40      	cmp	r3, #64	; 0x40
 8006aac:	d062      	beq.n	8006b74 <CAN_GetITStatus+0xe8>
 8006aae:	2b40      	cmp	r3, #64	; 0x40
 8006ab0:	d80f      	bhi.n	8006ad2 <CAN_GetITStatus+0x46>
 8006ab2:	2b04      	cmp	r3, #4
 8006ab4:	d03a      	beq.n	8006b2c <CAN_GetITStatus+0xa0>
 8006ab6:	2b04      	cmp	r3, #4
 8006ab8:	d804      	bhi.n	8006ac4 <CAN_GetITStatus+0x38>
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d024      	beq.n	8006b08 <CAN_GetITStatus+0x7c>
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d02b      	beq.n	8006b1a <CAN_GetITStatus+0x8e>
 8006ac2:	e09f      	b.n	8006c04 <CAN_GetITStatus+0x178>
 8006ac4:	2b10      	cmp	r3, #16
 8006ac6:	d043      	beq.n	8006b50 <CAN_GetITStatus+0xc4>
 8006ac8:	2b20      	cmp	r3, #32
 8006aca:	d04a      	beq.n	8006b62 <CAN_GetITStatus+0xd6>
 8006acc:	2b08      	cmp	r3, #8
 8006ace:	d036      	beq.n	8006b3e <CAN_GetITStatus+0xb2>
 8006ad0:	e098      	b.n	8006c04 <CAN_GetITStatus+0x178>
 8006ad2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ad6:	f000 8083 	beq.w	8006be0 <CAN_GetITStatus+0x154>
 8006ada:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ade:	d809      	bhi.n	8006af4 <CAN_GetITStatus+0x68>
 8006ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ae4:	d06a      	beq.n	8006bbc <CAN_GetITStatus+0x130>
 8006ae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006aea:	d070      	beq.n	8006bce <CAN_GetITStatus+0x142>
 8006aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006af0:	d05b      	beq.n	8006baa <CAN_GetITStatus+0x11e>
 8006af2:	e087      	b.n	8006c04 <CAN_GetITStatus+0x178>
 8006af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006af8:	d045      	beq.n	8006b86 <CAN_GetITStatus+0xfa>
 8006afa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006afe:	d04b      	beq.n	8006b98 <CAN_GetITStatus+0x10c>
 8006b00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b04:	d075      	beq.n	8006bf2 <CAN_GetITStatus+0x166>
 8006b06:	e07d      	b.n	8006c04 <CAN_GetITStatus+0x178>
    {
      case CAN_IT_TME:
        /* Check CAN_TSR_RQCPx bits */
        itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	4943      	ldr	r1, [pc, #268]	; (8006c1c <CAN_GetITStatus+0x190>)
 8006b10:	f000 f8f4 	bl	8006cfc <CheckITStatus>
 8006b14:	4603      	mov	r3, r0
 8006b16:	73fb      	strb	r3, [r7, #15]
        break;
 8006b18:	e077      	b.n	8006c0a <CAN_GetITStatus+0x17e>
      case CAN_IT_FMP0:
        /* Check CAN_RF0R_FMP0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	4618      	mov	r0, r3
 8006b20:	2103      	movs	r1, #3
 8006b22:	f000 f8eb 	bl	8006cfc <CheckITStatus>
 8006b26:	4603      	mov	r3, r0
 8006b28:	73fb      	strb	r3, [r7, #15]
        break;
 8006b2a:	e06e      	b.n	8006c0a <CAN_GetITStatus+0x17e>
      case CAN_IT_FF0:
        /* Check CAN_RF0R_FULL0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	4618      	mov	r0, r3
 8006b32:	2108      	movs	r1, #8
 8006b34:	f000 f8e2 	bl	8006cfc <CheckITStatus>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	73fb      	strb	r3, [r7, #15]
        break;
 8006b3c:	e065      	b.n	8006c0a <CAN_GetITStatus+0x17e>
      case CAN_IT_FOV0:
        /* Check CAN_RF0R_FOVR0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	4618      	mov	r0, r3
 8006b44:	2110      	movs	r1, #16
 8006b46:	f000 f8d9 	bl	8006cfc <CheckITStatus>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	73fb      	strb	r3, [r7, #15]
        break;
 8006b4e:	e05c      	b.n	8006c0a <CAN_GetITStatus+0x17e>
      case CAN_IT_FMP1:
        /* Check CAN_RF1R_FMP1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	4618      	mov	r0, r3
 8006b56:	2103      	movs	r1, #3
 8006b58:	f000 f8d0 	bl	8006cfc <CheckITStatus>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	73fb      	strb	r3, [r7, #15]
        break;
 8006b60:	e053      	b.n	8006c0a <CAN_GetITStatus+0x17e>
      case CAN_IT_FF1:
        /* Check CAN_RF1R_FULL1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	4618      	mov	r0, r3
 8006b68:	2108      	movs	r1, #8
 8006b6a:	f000 f8c7 	bl	8006cfc <CheckITStatus>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	73fb      	strb	r3, [r7, #15]
        break;
 8006b72:	e04a      	b.n	8006c0a <CAN_GetITStatus+0x17e>
      case CAN_IT_FOV1:
        /* Check CAN_RF1R_FOVR1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	4618      	mov	r0, r3
 8006b7a:	2110      	movs	r1, #16
 8006b7c:	f000 f8be 	bl	8006cfc <CheckITStatus>
 8006b80:	4603      	mov	r3, r0
 8006b82:	73fb      	strb	r3, [r7, #15]
        break;
 8006b84:	e041      	b.n	8006c0a <CAN_GetITStatus+0x17e>
      case CAN_IT_WKU:
        /* Check CAN_MSR_WKUI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	2108      	movs	r1, #8
 8006b8e:	f000 f8b5 	bl	8006cfc <CheckITStatus>
 8006b92:	4603      	mov	r3, r0
 8006b94:	73fb      	strb	r3, [r7, #15]
        break;
 8006b96:	e038      	b.n	8006c0a <CAN_GetITStatus+0x17e>
      case CAN_IT_SLK:
        /* Check CAN_MSR_SLAKI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	2110      	movs	r1, #16
 8006ba0:	f000 f8ac 	bl	8006cfc <CheckITStatus>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	73fb      	strb	r3, [r7, #15]
        break;
 8006ba8:	e02f      	b.n	8006c0a <CAN_GetITStatus+0x17e>
      case CAN_IT_EWG:
        /* Check CAN_ESR_EWGF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	699b      	ldr	r3, [r3, #24]
 8006bae:	4618      	mov	r0, r3
 8006bb0:	2101      	movs	r1, #1
 8006bb2:	f000 f8a3 	bl	8006cfc <CheckITStatus>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	73fb      	strb	r3, [r7, #15]
        break;
 8006bba:	e026      	b.n	8006c0a <CAN_GetITStatus+0x17e>
      case CAN_IT_EPV:
        /* Check CAN_ESR_EPVF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	2102      	movs	r1, #2
 8006bc4:	f000 f89a 	bl	8006cfc <CheckITStatus>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	73fb      	strb	r3, [r7, #15]
        break;
 8006bcc:	e01d      	b.n	8006c0a <CAN_GetITStatus+0x17e>
      case CAN_IT_BOF:
        /* Check CAN_ESR_BOFF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	2104      	movs	r1, #4
 8006bd6:	f000 f891 	bl	8006cfc <CheckITStatus>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	73fb      	strb	r3, [r7, #15]
        break;
 8006bde:	e014      	b.n	8006c0a <CAN_GetITStatus+0x17e>
      case CAN_IT_LEC:
        /* Check CAN_ESR_LEC bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	699b      	ldr	r3, [r3, #24]
 8006be4:	4618      	mov	r0, r3
 8006be6:	2170      	movs	r1, #112	; 0x70
 8006be8:	f000 f888 	bl	8006cfc <CheckITStatus>
 8006bec:	4603      	mov	r3, r0
 8006bee:	73fb      	strb	r3, [r7, #15]
        break;
 8006bf0:	e00b      	b.n	8006c0a <CAN_GetITStatus+0x17e>
      case CAN_IT_ERR:
        /* Check CAN_MSR_ERRI bit */ 
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	2104      	movs	r1, #4
 8006bfa:	f000 f87f 	bl	8006cfc <CheckITStatus>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	73fb      	strb	r3, [r7, #15]
        break;
 8006c02:	e002      	b.n	8006c0a <CAN_GetITStatus+0x17e>
      default:
        /* in case of error, return RESET */
        itstatus = RESET;
 8006c04:	2300      	movs	r3, #0
 8006c06:	73fb      	strb	r3, [r7, #15]
        break;
 8006c08:	bf00      	nop
 8006c0a:	e001      	b.n	8006c10 <CAN_GetITStatus+0x184>
    }
  }
  else
  {
   /* in case the Interrupt is not enabled, return RESET */
    itstatus  = RESET;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the CAN_IT status */
  return  itstatus;
 8006c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	00010101 	.word	0x00010101

08006c20 <CAN_ClearITPendingBit>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt 
  * @retval None
  */
void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c30:	d043      	beq.n	8006cba <CAN_ClearITPendingBit+0x9a>
 8006c32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c36:	d80d      	bhi.n	8006c54 <CAN_ClearITPendingBit+0x34>
 8006c38:	2b08      	cmp	r3, #8
 8006c3a:	d02a      	beq.n	8006c92 <CAN_ClearITPendingBit+0x72>
 8006c3c:	2b08      	cmp	r3, #8
 8006c3e:	d804      	bhi.n	8006c4a <CAN_ClearITPendingBit+0x2a>
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d01e      	beq.n	8006c82 <CAN_ClearITPendingBit+0x62>
 8006c44:	2b04      	cmp	r3, #4
 8006c46:	d020      	beq.n	8006c8a <CAN_ClearITPendingBit+0x6a>
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
    default:
       break;
 8006c48:	e051      	b.n	8006cee <CAN_ClearITPendingBit+0xce>
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 8006c4a:	2b20      	cmp	r3, #32
 8006c4c:	d025      	beq.n	8006c9a <CAN_ClearITPendingBit+0x7a>
 8006c4e:	2b40      	cmp	r3, #64	; 0x40
 8006c50:	d027      	beq.n	8006ca2 <CAN_ClearITPendingBit+0x82>
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
    default:
       break;
 8006c52:	e04c      	b.n	8006cee <CAN_ClearITPendingBit+0xce>
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 8006c54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c58:	d03b      	beq.n	8006cd2 <CAN_ClearITPendingBit+0xb2>
 8006c5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c5e:	d806      	bhi.n	8006c6e <CAN_ClearITPendingBit+0x4e>
 8006c60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c64:	d02d      	beq.n	8006cc2 <CAN_ClearITPendingBit+0xa2>
 8006c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c6a:	d02e      	beq.n	8006cca <CAN_ClearITPendingBit+0xaa>
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
    default:
       break;
 8006c6c:	e03f      	b.n	8006cee <CAN_ClearITPendingBit+0xce>
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 8006c6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c72:	d01a      	beq.n	8006caa <CAN_ClearITPendingBit+0x8a>
 8006c74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c78:	d01b      	beq.n	8006cb2 <CAN_ClearITPendingBit+0x92>
 8006c7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c7e:	d02f      	beq.n	8006ce0 <CAN_ClearITPendingBit+0xc0>
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
    default:
       break;
 8006c80:	e035      	b.n	8006cee <CAN_ClearITPendingBit+0xce>

  switch (CAN_IT)
  {
    case CAN_IT_TME:
      /* Clear CAN_TSR_RQCPx (rc_w1)*/
      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a1c      	ldr	r2, [pc, #112]	; (8006cf8 <CAN_ClearITPendingBit+0xd8>)
 8006c86:	609a      	str	r2, [r3, #8]
      break;
 8006c88:	e031      	b.n	8006cee <CAN_ClearITPendingBit+0xce>
    case CAN_IT_FF0:
      /* Clear CAN_RF0R_FULL0 (rc_w1)*/
      CANx->RF0R = CAN_RF0R_FULL0; 
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2208      	movs	r2, #8
 8006c8e:	60da      	str	r2, [r3, #12]
      break;
 8006c90:	e02d      	b.n	8006cee <CAN_ClearITPendingBit+0xce>
    case CAN_IT_FOV0:
      /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
      CANx->RF0R = CAN_RF0R_FOVR0; 
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2210      	movs	r2, #16
 8006c96:	60da      	str	r2, [r3, #12]
      break;
 8006c98:	e029      	b.n	8006cee <CAN_ClearITPendingBit+0xce>
    case CAN_IT_FF1:
      /* Clear CAN_RF1R_FULL1 (rc_w1)*/
      CANx->RF1R = CAN_RF1R_FULL1;  
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2208      	movs	r2, #8
 8006c9e:	611a      	str	r2, [r3, #16]
      break;
 8006ca0:	e025      	b.n	8006cee <CAN_ClearITPendingBit+0xce>
    case CAN_IT_FOV1:
      /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
      CANx->RF1R = CAN_RF1R_FOVR1; 
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2210      	movs	r2, #16
 8006ca6:	611a      	str	r2, [r3, #16]
      break;
 8006ca8:	e021      	b.n	8006cee <CAN_ClearITPendingBit+0xce>
    case CAN_IT_WKU:
      /* Clear CAN_MSR_WKUI (rc_w1)*/
      CANx->MSR = CAN_MSR_WKUI;  
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2208      	movs	r2, #8
 8006cae:	605a      	str	r2, [r3, #4]
      break;
 8006cb0:	e01d      	b.n	8006cee <CAN_ClearITPendingBit+0xce>
    case CAN_IT_SLK:
      /* Clear CAN_MSR_SLAKI (rc_w1)*/ 
      CANx->MSR = CAN_MSR_SLAKI;   
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2210      	movs	r2, #16
 8006cb6:	605a      	str	r2, [r3, #4]
      break;
 8006cb8:	e019      	b.n	8006cee <CAN_ClearITPendingBit+0xce>
    case CAN_IT_EWG:
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2204      	movs	r2, #4
 8006cbe:	605a      	str	r2, [r3, #4]
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/ 
      break;
 8006cc0:	e015      	b.n	8006cee <CAN_ClearITPendingBit+0xce>
    case CAN_IT_EPV:
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2204      	movs	r2, #4
 8006cc6:	605a      	str	r2, [r3, #4]
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
      break;
 8006cc8:	e011      	b.n	8006cee <CAN_ClearITPendingBit+0xce>
    case CAN_IT_BOF:
      /* Clear CAN_MSR_ERRI (rc_w1) */ 
      CANx->MSR = CAN_MSR_ERRI; 
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2204      	movs	r2, #4
 8006cce:	605a      	str	r2, [r3, #4]
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
       break;
 8006cd0:	e00d      	b.n	8006cee <CAN_ClearITPendingBit+0xce>
    case CAN_IT_LEC:
      /*  Clear LEC bits */
      CANx->ESR = RESET; 
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	619a      	str	r2, [r3, #24]
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2204      	movs	r2, #4
 8006cdc:	605a      	str	r2, [r3, #4]
      break;
 8006cde:	e006      	b.n	8006cee <CAN_ClearITPendingBit+0xce>
    case CAN_IT_ERR:
      /*Clear LEC bits */
      CANx->ESR = RESET; 
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	619a      	str	r2, [r3, #24]
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2204      	movs	r2, #4
 8006cea:	605a      	str	r2, [r3, #4]
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
 8006cec:	bf00      	nop
    default:
       break;
   }
}
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr
 8006cf8:	00010101 	.word	0x00010101

08006cfc <CheckITStatus>:
  * @param  CAN_Reg: specifies the CAN interrupt register to check.
  * @param  It_Bit: specifies the interrupt source bit to check.
  * @retval The new state of the CAN Interrupt (SET or RESET).
  */
static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  ITStatus pendingbitstatus = RESET;
 8006d06:	2300      	movs	r3, #0
 8006d08:	73fb      	strb	r3, [r7, #15]
  
  if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	4013      	ands	r3, r2
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d002      	beq.n	8006d1a <CheckITStatus+0x1e>
  {
    /* CAN_IT is set */
    pendingbitstatus = SET;
 8006d14:	2301      	movs	r3, #1
 8006d16:	73fb      	strb	r3, [r7, #15]
 8006d18:	e001      	b.n	8006d1e <CheckITStatus+0x22>
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	73fb      	strb	r3, [r7, #15]
  }
  return pendingbitstatus;
 8006d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3714      	adds	r7, #20
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <CRC_ResetDR>:
  * @brief  Resets the CRC Data register (DR).
  * @param  None
  * @retval None
  */
void CRC_ResetDR(void)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	af00      	add	r7, sp, #0
  /* Reset CRC generator */
  CRC->CR = CRC_CR_RESET;
 8006d30:	4b03      	ldr	r3, [pc, #12]	; (8006d40 <CRC_ResetDR+0x14>)
 8006d32:	2201      	movs	r2, #1
 8006d34:	609a      	str	r2, [r3, #8]
}
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr
 8006d3e:	bf00      	nop
 8006d40:	40023000 	.word	0x40023000

08006d44 <CRC_CalcCRC>:
  * @brief  Computes the 32-bit CRC of a given data word(32-bit).
  * @param  Data: data word(32-bit) to compute its CRC
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcCRC(uint32_t Data)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  CRC->DR = Data;
 8006d4c:	4b05      	ldr	r3, [pc, #20]	; (8006d64 <CRC_CalcCRC+0x20>)
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	601a      	str	r2, [r3, #0]
  
  return (CRC->DR);
 8006d52:	4b04      	ldr	r3, [pc, #16]	; (8006d64 <CRC_CalcCRC+0x20>)
 8006d54:	681b      	ldr	r3, [r3, #0]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	370c      	adds	r7, #12
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	40023000 	.word	0x40023000

08006d68 <CRC_CalcBlockCRC>:
  * @param  pBuffer: pointer to the buffer containing the data to be computed
  * @param  BufferLength: length of the buffer to be computed					
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b085      	sub	sp, #20
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  uint32_t index = 0;
 8006d72:	2300      	movs	r3, #0
 8006d74:	60fb      	str	r3, [r7, #12]
  
  for(index = 0; index < BufferLength; index++)
 8006d76:	2300      	movs	r3, #0
 8006d78:	60fb      	str	r3, [r7, #12]
 8006d7a:	e009      	b.n	8006d90 <CRC_CalcBlockCRC+0x28>
  {
    CRC->DR = pBuffer[index];
 8006d7c:	4b0a      	ldr	r3, [pc, #40]	; (8006da8 <CRC_CalcBlockCRC+0x40>)
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	0092      	lsls	r2, r2, #2
 8006d82:	6879      	ldr	r1, [r7, #4]
 8006d84:	440a      	add	r2, r1
 8006d86:	6812      	ldr	r2, [r2, #0]
 8006d88:	601a      	str	r2, [r3, #0]
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
  uint32_t index = 0;
  
  for(index = 0; index < BufferLength; index++)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	60fb      	str	r3, [r7, #12]
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d3f1      	bcc.n	8006d7c <CRC_CalcBlockCRC+0x14>
  {
    CRC->DR = pBuffer[index];
  }
  return (CRC->DR);
 8006d98:	4b03      	ldr	r3, [pc, #12]	; (8006da8 <CRC_CalcBlockCRC+0x40>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3714      	adds	r7, #20
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr
 8006da8:	40023000 	.word	0x40023000

08006dac <CRC_GetCRC>:
  * @brief  Returns the current CRC value.
  * @param  None
  * @retval 32-bit CRC
  */
uint32_t CRC_GetCRC(void)
{
 8006dac:	b480      	push	{r7}
 8006dae:	af00      	add	r7, sp, #0
  return (CRC->DR);
 8006db0:	4b03      	ldr	r3, [pc, #12]	; (8006dc0 <CRC_GetCRC+0x14>)
 8006db2:	681b      	ldr	r3, [r3, #0]
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	40023000 	.word	0x40023000

08006dc4 <CRC_SetIDRegister>:
  * @brief  Stores a 8-bit data in the Independent Data(ID) register.
  * @param  IDValue: 8-bit value to be stored in the ID register 					
  * @retval None
  */
void CRC_SetIDRegister(uint8_t IDValue)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	4603      	mov	r3, r0
 8006dcc:	71fb      	strb	r3, [r7, #7]
  CRC->IDR = IDValue;
 8006dce:	4b04      	ldr	r3, [pc, #16]	; (8006de0 <CRC_SetIDRegister+0x1c>)
 8006dd0:	79fa      	ldrb	r2, [r7, #7]
 8006dd2:	711a      	strb	r2, [r3, #4]
}
 8006dd4:	370c      	adds	r7, #12
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	40023000 	.word	0x40023000

08006de4 <CRC_GetIDRegister>:
  * @brief  Returns the 8-bit data stored in the Independent Data(ID) register
  * @param  None
  * @retval 8-bit value of the ID register 
  */
uint8_t CRC_GetIDRegister(void)
{
 8006de4:	b480      	push	{r7}
 8006de6:	af00      	add	r7, sp, #0
  return (CRC->IDR);
 8006de8:	4b03      	ldr	r3, [pc, #12]	; (8006df8 <CRC_GetIDRegister+0x14>)
 8006dea:	791b      	ldrb	r3, [r3, #4]
 8006dec:	b2db      	uxtb	r3, r3
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr
 8006df8:	40023000 	.word	0x40023000

08006dfc <CRYP_AES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_ECB(uint8_t Mode, uint8_t* Key, uint16_t Keysize,
                         uint8_t* Input, uint32_t Ilength, uint8_t* Output)
{
 8006dfc:	b590      	push	{r4, r7, lr}
 8006dfe:	b0ab      	sub	sp, #172	; 0xac
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60b9      	str	r1, [r7, #8]
 8006e04:	607b      	str	r3, [r7, #4]
 8006e06:	4603      	mov	r3, r0
 8006e08:	73fb      	strb	r3, [r7, #15]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	81bb      	strh	r3, [r7, #12]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 8006e12:	2300      	movs	r3, #0
 8006e14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  ErrorStatus status = SUCCESS;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  uint32_t keyaddr    = (uint32_t)Key;
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  uint32_t inputaddr  = (uint32_t)Input;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  uint32_t outputaddr = (uint32_t)Output;
 8006e2a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006e2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t i = 0;
 8006e32:	2300      	movs	r3, #0
 8006e34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8006e38:	f107 0318 	add.w	r3, r7, #24
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f002 f9e5 	bl	800920c <CRYP_KeyStructInit>

  switch(Keysize)
 8006e42:	89bb      	ldrh	r3, [r7, #12]
 8006e44:	2bc0      	cmp	r3, #192	; 0xc0
 8006e46:	d03b      	beq.n	8006ec0 <CRYP_AES_ECB+0xc4>
 8006e48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e4c:	d07f      	beq.n	8006f4e <CRYP_AES_ECB+0x152>
 8006e4e:	2b80      	cmp	r3, #128	; 0x80
 8006e50:	d000      	beq.n	8006e54 <CRYP_AES_ECB+0x58>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    default:
    break;
 8006e52:	e0db      	b.n	800700c <CRYP_AES_ECB+0x210>
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);

  switch(Keysize)
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8006e54:	2300      	movs	r3, #0
 8006e56:	647b      	str	r3, [r7, #68]	; 0x44
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8006e58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    \return               Reversed value
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
  return __builtin_bswap32(value);
 8006e62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e66:	ba1b      	rev	r3, r3
 8006e68:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8006e6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e6e:	3304      	adds	r3, #4
 8006e70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8006e74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e82:	ba1b      	rev	r3, r3
 8006e84:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8006e86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e8a:	3304      	adds	r3, #4
 8006e8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8006e90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e9e:	ba1b      	rev	r3, r3
 8006ea0:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8006ea2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ea6:	3304      	adds	r3, #4
 8006ea8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8006eac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006eb6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006eba:	ba1b      	rev	r3, r3
 8006ebc:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8006ebe:	e0a5      	b.n	800700c <CRYP_AES_ECB+0x210>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 8006ec0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ec4:	647b      	str	r3, [r7, #68]	; 0x44
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8006ec6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006ece:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ed0:	ba1b      	rev	r3, r3
 8006ed2:	623b      	str	r3, [r7, #32]
    keyaddr+=4;
 8006ed4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ed8:	3304      	adds	r3, #4
 8006eda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8006ede:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	67bb      	str	r3, [r7, #120]	; 0x78
 8006ee6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ee8:	ba1b      	rev	r3, r3
 8006eea:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 8006eec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ef0:	3304      	adds	r3, #4
 8006ef2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8006ef6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	677b      	str	r3, [r7, #116]	; 0x74
 8006efe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f00:	ba1b      	rev	r3, r3
 8006f02:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8006f04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f08:	3304      	adds	r3, #4
 8006f0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8006f0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	673b      	str	r3, [r7, #112]	; 0x70
 8006f16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f18:	ba1b      	rev	r3, r3
 8006f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8006f1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f20:	3304      	adds	r3, #4
 8006f22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8006f26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f30:	ba1b      	rev	r3, r3
 8006f32:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8006f34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f38:	3304      	adds	r3, #4
 8006f3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8006f3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f48:	ba1b      	rev	r3, r3
 8006f4a:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8006f4c:	e05e      	b.n	800700c <CRYP_AES_ECB+0x210>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 8006f4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f52:	647b      	str	r3, [r7, #68]	; 0x44
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8006f54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	667b      	str	r3, [r7, #100]	; 0x64
 8006f5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f5e:	ba1b      	rev	r3, r3
 8006f60:	61bb      	str	r3, [r7, #24]
    keyaddr+=4;
 8006f62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f66:	3304      	adds	r3, #4
 8006f68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8006f6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	663b      	str	r3, [r7, #96]	; 0x60
 8006f74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f76:	ba1b      	rev	r3, r3
 8006f78:	61fb      	str	r3, [r7, #28]
    keyaddr+=4;
 8006f7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f7e:	3304      	adds	r3, #4
 8006f80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8006f84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f8e:	ba1b      	rev	r3, r3
 8006f90:	623b      	str	r3, [r7, #32]
    keyaddr+=4;
 8006f92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f96:	3304      	adds	r3, #4
 8006f98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8006f9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	65bb      	str	r3, [r7, #88]	; 0x58
 8006fa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006fa6:	ba1b      	rev	r3, r3
 8006fa8:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 8006faa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fae:	3304      	adds	r3, #4
 8006fb0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8006fb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	657b      	str	r3, [r7, #84]	; 0x54
 8006fbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fbe:	ba1b      	rev	r3, r3
 8006fc0:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8006fc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fc6:	3304      	adds	r3, #4
 8006fc8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8006fcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	653b      	str	r3, [r7, #80]	; 0x50
 8006fd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fd6:	ba1b      	rev	r3, r3
 8006fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8006fda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fde:	3304      	adds	r3, #4
 8006fe0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8006fe4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fee:	ba1b      	rev	r3, r3
 8006ff0:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8006ff2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ff6:	3304      	adds	r3, #4
 8006ff8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8006ffc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	64bb      	str	r3, [r7, #72]	; 0x48
 8007004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007006:	ba1b      	rev	r3, r3
 8007008:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 800700a:	bf00      	nop
    default:
    break;
  }

  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 800700c:	7bfb      	ldrb	r3, [r7, #15]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d130      	bne.n	8007074 <CRYP_AES_ECB+0x278>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 8007012:	f002 f96b 	bl	80092ec <CRYP_FIFOFlush>

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8007016:	2304      	movs	r3, #4
 8007018:	63bb      	str	r3, [r7, #56]	; 0x38
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 800701a:	2338      	movs	r3, #56	; 0x38
 800701c:	63fb      	str	r3, [r7, #60]	; 0x3c
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 800701e:	2300      	movs	r3, #0
 8007020:	643b      	str	r3, [r7, #64]	; 0x40
    CRYP_Init(&AES_CRYP_InitStructure);
 8007022:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007026:	4618      	mov	r0, r3
 8007028:	f002 f85c 	bl	80090e4 <CRYP_Init>

    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 800702c:	f107 0318 	add.w	r3, r7, #24
 8007030:	4618      	mov	r0, r3
 8007032:	f002 f8bf 	bl	80091b4 <CRYP_KeyInit>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8007036:	2001      	movs	r0, #1
 8007038:	f002 f966 	bl	8009308 <CRYP_Cmd>

    /* wait until the Busy flag is RESET */
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 800703c:	2010      	movs	r0, #16
 800703e:	f002 fb61 	bl	8009704 <CRYP_GetFlagStatus>
 8007042:	4603      	mov	r3, r0
 8007044:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      counter++;
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	3301      	adds	r3, #1
 800704c:	617b      	str	r3, [r7, #20]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007054:	d003      	beq.n	800705e <CRYP_AES_ECB+0x262>
 8007056:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800705a:	2b00      	cmp	r3, #0
 800705c:	d1ee      	bne.n	800703c <CRYP_AES_ECB+0x240>

    if (busystatus != RESET)
 800705e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007062:	2b00      	cmp	r3, #0
 8007064:	d003      	beq.n	800706e <CRYP_AES_ECB+0x272>
   {
       status = ERROR;
 8007066:	2300      	movs	r3, #0
 8007068:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800706c:	e009      	b.n	8007082 <CRYP_AES_ECB+0x286>
    }
    else
    {
      /* Crypto Init for decryption process */  
      AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 800706e:	2304      	movs	r3, #4
 8007070:	63bb      	str	r3, [r7, #56]	; 0x38
 8007072:	e006      	b.n	8007082 <CRYP_AES_ECB+0x286>
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {

    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8007074:	f107 0318 	add.w	r3, r7, #24
 8007078:	4618      	mov	r0, r3
 800707a:	f002 f89b 	bl	80091b4 <CRYP_KeyInit>

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 800707e:	2300      	movs	r3, #0
 8007080:	63bb      	str	r3, [r7, #56]	; 0x38
  }

  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
 8007082:	2320      	movs	r3, #32
 8007084:	63fb      	str	r3, [r7, #60]	; 0x3c
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8007086:	2380      	movs	r3, #128	; 0x80
 8007088:	643b      	str	r3, [r7, #64]	; 0x40
  CRYP_Init(&AES_CRYP_InitStructure);
 800708a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800708e:	4618      	mov	r0, r3
 8007090:	f002 f828 	bl	80090e4 <CRYP_Init>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 8007094:	f002 f92a 	bl	80092ec <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8007098:	2001      	movs	r0, #1
 800709a:	f002 f935 	bl	8009308 <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 800709e:	f002 fb17 	bl	80096d0 <CRYP_GetCmdStatus>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d101      	bne.n	80070ac <CRYP_AES_ECB+0x2b0>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 80070a8:	2300      	movs	r3, #0
 80070aa:	e08b      	b.n	80071c4 <CRYP_AES_ECB+0x3c8>
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80070ac:	2300      	movs	r3, #0
 80070ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80070b2:	e077      	b.n	80071a4 <CRYP_AES_ECB+0x3a8>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80070b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4618      	mov	r0, r3
 80070bc:	f002 f940 	bl	8009340 <CRYP_DataIn>
    inputaddr+=4;
 80070c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070c4:	3304      	adds	r3, #4
 80070c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80070ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4618      	mov	r0, r3
 80070d2:	f002 f935 	bl	8009340 <CRYP_DataIn>
    inputaddr+=4;
 80070d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070da:	3304      	adds	r3, #4
 80070dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80070e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4618      	mov	r0, r3
 80070e8:	f002 f92a 	bl	8009340 <CRYP_DataIn>
    inputaddr+=4;
 80070ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070f0:	3304      	adds	r3, #4
 80070f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80070f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4618      	mov	r0, r3
 80070fe:	f002 f91f 	bl	8009340 <CRYP_DataIn>
    inputaddr+=4;
 8007102:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007106:	3304      	adds	r3, #4
 8007108:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    /* Wait until the complete message has been processed */
    counter = 0;
 800710c:	2300      	movs	r3, #0
 800710e:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8007110:	2010      	movs	r0, #16
 8007112:	f002 faf7 	bl	8009704 <CRYP_GetFlagStatus>
 8007116:	4603      	mov	r3, r0
 8007118:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      counter++;
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	3301      	adds	r3, #1
 8007120:	617b      	str	r3, [r7, #20]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007128:	d003      	beq.n	8007132 <CRYP_AES_ECB+0x336>
 800712a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1ee      	bne.n	8007110 <CRYP_AES_ECB+0x314>

    if (busystatus != RESET)
 8007132:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007136:	2b00      	cmp	r3, #0
 8007138:	d003      	beq.n	8007142 <CRYP_AES_ECB+0x346>
   {
       status = ERROR;
 800713a:	2300      	movs	r3, #0
 800713c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8007140:	e02b      	b.n	800719a <CRYP_AES_ECB+0x39e>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8007142:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8007146:	f002 f909 	bl	800935c <CRYP_DataOut>
 800714a:	4603      	mov	r3, r0
 800714c:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800714e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007152:	3304      	adds	r3, #4
 8007154:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8007158:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 800715c:	f002 f8fe 	bl	800935c <CRYP_DataOut>
 8007160:	4603      	mov	r3, r0
 8007162:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8007164:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007168:	3304      	adds	r3, #4
 800716a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800716e:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8007172:	f002 f8f3 	bl	800935c <CRYP_DataOut>
 8007176:	4603      	mov	r3, r0
 8007178:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800717a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800717e:	3304      	adds	r3, #4
 8007180:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      *(uint32_t*)(outputaddr) = CRYP_DataOut(); 
 8007184:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8007188:	f002 f8e8 	bl	800935c <CRYP_DataOut>
 800718c:	4603      	mov	r3, r0
 800718e:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8007190:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007194:	3304      	adds	r3, #4
 8007196:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 800719a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800719e:	3310      	adds	r3, #16
 80071a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80071a4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80071a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d204      	bcs.n	80071ba <CRYP_AES_ECB+0x3be>
 80071b0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f47f af7d 	bne.w	80070b4 <CRYP_AES_ECB+0x2b8>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80071ba:	2000      	movs	r0, #0
 80071bc:	f002 f8a4 	bl	8009308 <CRYP_Cmd>

  return status; 
 80071c0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	37ac      	adds	r7, #172	; 0xac
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd90      	pop	{r4, r7, pc}

080071cc <CRYP_AES_CBC>:
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CBC(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key,
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 80071cc:	b590      	push	{r4, r7, lr}
 80071ce:	b0b3      	sub	sp, #204	; 0xcc
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60b9      	str	r1, [r7, #8]
 80071d4:	607a      	str	r2, [r7, #4]
 80071d6:	4602      	mov	r2, r0
 80071d8:	73fa      	strb	r2, [r7, #15]
 80071da:	81bb      	strh	r3, [r7, #12]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 80071dc:	2300      	movs	r3, #0
 80071de:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 80071e0:	2300      	movs	r3, #0
 80071e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  ErrorStatus status = SUCCESS;
 80071e6:	2301      	movs	r3, #1
 80071e8:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
  uint32_t keyaddr    = (uint32_t)Key;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t inputaddr  = (uint32_t)Input;
 80071f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  uint32_t outputaddr = (uint32_t)Output;
 80071fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t ivaddr = (uint32_t)InitVectors;
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t i = 0;
 8007208:	2300      	movs	r3, #0
 800720a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 800720e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007212:	4618      	mov	r0, r3
 8007214:	f001 fffa 	bl	800920c <CRYP_KeyStructInit>

  switch(Keysize)
 8007218:	89bb      	ldrh	r3, [r7, #12]
 800721a:	2bc0      	cmp	r3, #192	; 0xc0
 800721c:	d03c      	beq.n	8007298 <CRYP_AES_CBC+0xcc>
 800721e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007222:	f000 808c 	beq.w	800733e <CRYP_AES_CBC+0x172>
 8007226:	2b80      	cmp	r3, #128	; 0x80
 8007228:	d000      	beq.n	800722c <CRYP_AES_CBC+0x60>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    default:
    break;
 800722a:	e0e9      	b.n	8007400 <CRYP_AES_CBC+0x234>
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);

  switch(Keysize)
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 800722c:	2300      	movs	r3, #0
 800722e:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8007230:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800723a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800723e:	ba1b      	rev	r3, r3
 8007240:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8007242:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007246:	3304      	adds	r3, #4
 8007248:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 800724c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007256:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800725a:	ba1b      	rev	r3, r3
 800725c:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 800725e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007262:	3304      	adds	r3, #4
 8007264:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8007268:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007272:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007276:	ba1b      	rev	r3, r3
 8007278:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 800727a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800727e:	3304      	adds	r3, #4
 8007280:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8007284:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800728e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007292:	ba1b      	rev	r3, r3
 8007294:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8007296:	e0b3      	b.n	8007400 <CRYP_AES_CBC+0x234>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 8007298:	f44f 7380 	mov.w	r3, #256	; 0x100
 800729c:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 800729e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80072a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072ac:	ba1b      	rev	r3, r3
 80072ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 80072b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80072b4:	3304      	adds	r3, #4
 80072b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80072ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80072c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80072c8:	ba1b      	rev	r3, r3
 80072ca:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 80072cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80072d0:	3304      	adds	r3, #4
 80072d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80072d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80072e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072e4:	ba1b      	rev	r3, r3
 80072e6:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 80072e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80072ec:	3304      	adds	r3, #4
 80072ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80072f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80072fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007300:	ba1b      	rev	r3, r3
 8007302:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8007304:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007308:	3304      	adds	r3, #4
 800730a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 800730e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007318:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800731c:	ba1b      	rev	r3, r3
 800731e:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8007320:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007324:	3304      	adds	r3, #4
 8007326:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 800732a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007334:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007338:	ba1b      	rev	r3, r3
 800733a:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 800733c:	e060      	b.n	8007400 <CRYP_AES_CBC+0x234>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 800733e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007342:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8007344:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800734e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007352:	ba1b      	rev	r3, r3
 8007354:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 8007356:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800735a:	3304      	adds	r3, #4
 800735c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8007360:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007368:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800736a:	ba1b      	rev	r3, r3
 800736c:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 800736e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007372:	3304      	adds	r3, #4
 8007374:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8007378:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007380:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007382:	ba1b      	rev	r3, r3
 8007384:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8007386:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800738a:	3304      	adds	r3, #4
 800738c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8007390:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	677b      	str	r3, [r7, #116]	; 0x74
 8007398:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800739a:	ba1b      	rev	r3, r3
 800739c:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 800739e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80073a2:	3304      	adds	r3, #4
 80073a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80073a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	673b      	str	r3, [r7, #112]	; 0x70
 80073b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073b2:	ba1b      	rev	r3, r3
 80073b4:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 80073b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80073ba:	3304      	adds	r3, #4
 80073bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80073c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80073c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073ca:	ba1b      	rev	r3, r3
 80073cc:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 80073ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80073d2:	3304      	adds	r3, #4
 80073d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80073d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	66bb      	str	r3, [r7, #104]	; 0x68
 80073e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073e2:	ba1b      	rev	r3, r3
 80073e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 80073e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80073ea:	3304      	adds	r3, #4
 80073ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80073f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	667b      	str	r3, [r7, #100]	; 0x64
 80073f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073fa:	ba1b      	rev	r3, r3
 80073fc:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 80073fe:	bf00      	nop
    default:
    break;
  }

  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8007400:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	663b      	str	r3, [r7, #96]	; 0x60
 8007408:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800740a:	ba1b      	rev	r3, r3
 800740c:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 800740e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007412:	3304      	adds	r3, #4
 8007414:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8007418:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007420:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007422:	ba1b      	rev	r3, r3
 8007424:	61bb      	str	r3, [r7, #24]
  ivaddr+=4;
 8007426:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800742a:	3304      	adds	r3, #4
 800742c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 8007430:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	65bb      	str	r3, [r7, #88]	; 0x58
 8007438:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800743a:	ba1b      	rev	r3, r3
 800743c:	61fb      	str	r3, [r7, #28]
  ivaddr+=4;
 800743e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007442:	3304      	adds	r3, #4
 8007444:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 8007448:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	657b      	str	r3, [r7, #84]	; 0x54
 8007450:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007452:	ba1b      	rev	r3, r3
 8007454:	623b      	str	r3, [r7, #32]


  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 8007456:	7bfb      	ldrb	r3, [r7, #15]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d130      	bne.n	80074be <CRYP_AES_CBC+0x2f2>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 800745c:	f001 ff46 	bl	80092ec <CRYP_FIFOFlush>

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8007460:	2304      	movs	r3, #4
 8007462:	647b      	str	r3, [r7, #68]	; 0x44
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 8007464:	2338      	movs	r3, #56	; 0x38
 8007466:	64bb      	str	r3, [r7, #72]	; 0x48
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 8007468:	2300      	movs	r3, #0
 800746a:	64fb      	str	r3, [r7, #76]	; 0x4c

    CRYP_Init(&AES_CRYP_InitStructure);
 800746c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007470:	4618      	mov	r0, r3
 8007472:	f001 fe37 	bl	80090e4 <CRYP_Init>

    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8007476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800747a:	4618      	mov	r0, r3
 800747c:	f001 fe9a 	bl	80091b4 <CRYP_KeyInit>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8007480:	2001      	movs	r0, #1
 8007482:	f001 ff41 	bl	8009308 <CRYP_Cmd>

    /* wait until the Busy flag is RESET */
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8007486:	2010      	movs	r0, #16
 8007488:	f002 f93c 	bl	8009704 <CRYP_GetFlagStatus>
 800748c:	4603      	mov	r3, r0
 800748e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      counter++;
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	3301      	adds	r3, #1
 8007496:	613b      	str	r3, [r7, #16]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800749e:	d003      	beq.n	80074a8 <CRYP_AES_CBC+0x2dc>
 80074a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d1ee      	bne.n	8007486 <CRYP_AES_CBC+0x2ba>

    if (busystatus != RESET)
 80074a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d003      	beq.n	80074b8 <CRYP_AES_CBC+0x2ec>
   {
       status = ERROR;
 80074b0:	2300      	movs	r3, #0
 80074b2:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 80074b6:	e009      	b.n	80074cc <CRYP_AES_CBC+0x300>
    }
    else
    {
      /* Crypto Init for decryption process */  
      AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 80074b8:	2304      	movs	r3, #4
 80074ba:	647b      	str	r3, [r7, #68]	; 0x44
 80074bc:	e006      	b.n	80074cc <CRYP_AES_CBC+0x300>
    }
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 80074be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074c2:	4618      	mov	r0, r3
 80074c4:	f001 fe76 	bl	80091b4 <CRYP_KeyInit>

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 80074c8:	2300      	movs	r3, #0
 80074ca:	647b      	str	r3, [r7, #68]	; 0x44
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CBC;
 80074cc:	2328      	movs	r3, #40	; 0x28
 80074ce:	64bb      	str	r3, [r7, #72]	; 0x48
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 80074d0:	2380      	movs	r3, #128	; 0x80
 80074d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  CRYP_Init(&AES_CRYP_InitStructure);
 80074d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80074d8:	4618      	mov	r0, r3
 80074da:	f001 fe03 	bl	80090e4 <CRYP_Init>

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);
 80074de:	f107 0314 	add.w	r3, r7, #20
 80074e2:	4618      	mov	r0, r3
 80074e4:	f001 feb4 	bl	8009250 <CRYP_IVInit>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 80074e8:	f001 ff00 	bl	80092ec <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 80074ec:	2001      	movs	r0, #1
 80074ee:	f001 ff0b 	bl	8009308 <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 80074f2:	f002 f8ed 	bl	80096d0 <CRYP_GetCmdStatus>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d101      	bne.n	8007500 <CRYP_AES_CBC+0x334>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 80074fc:	2300      	movs	r3, #0
 80074fe:	e08b      	b.n	8007618 <CRYP_AES_CBC+0x44c>
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8007500:	2300      	movs	r3, #0
 8007502:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007506:	e077      	b.n	80075f8 <CRYP_AES_CBC+0x42c>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8007508:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4618      	mov	r0, r3
 8007510:	f001 ff16 	bl	8009340 <CRYP_DataIn>
    inputaddr+=4;
 8007514:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007518:	3304      	adds	r3, #4
 800751a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800751e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4618      	mov	r0, r3
 8007526:	f001 ff0b 	bl	8009340 <CRYP_DataIn>
    inputaddr+=4;
 800752a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800752e:	3304      	adds	r3, #4
 8007530:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8007534:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4618      	mov	r0, r3
 800753c:	f001 ff00 	bl	8009340 <CRYP_DataIn>
    inputaddr+=4;
 8007540:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007544:	3304      	adds	r3, #4
 8007546:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800754a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4618      	mov	r0, r3
 8007552:	f001 fef5 	bl	8009340 <CRYP_DataIn>
    inputaddr+=4;
 8007556:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800755a:	3304      	adds	r3, #4
 800755c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    /* Wait until the complete message has been processed */
    counter = 0;
 8007560:	2300      	movs	r3, #0
 8007562:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8007564:	2010      	movs	r0, #16
 8007566:	f002 f8cd 	bl	8009704 <CRYP_GetFlagStatus>
 800756a:	4603      	mov	r3, r0
 800756c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      counter++;
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	3301      	adds	r3, #1
 8007574:	613b      	str	r3, [r7, #16]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800757c:	d003      	beq.n	8007586 <CRYP_AES_CBC+0x3ba>
 800757e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1ee      	bne.n	8007564 <CRYP_AES_CBC+0x398>

    if (busystatus != RESET)
 8007586:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800758a:	2b00      	cmp	r3, #0
 800758c:	d003      	beq.n	8007596 <CRYP_AES_CBC+0x3ca>
   {
       status = ERROR;
 800758e:	2300      	movs	r3, #0
 8007590:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 8007594:	e02b      	b.n	80075ee <CRYP_AES_CBC+0x422>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8007596:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 800759a:	f001 fedf 	bl	800935c <CRYP_DataOut>
 800759e:	4603      	mov	r3, r0
 80075a0:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80075a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80075a6:	3304      	adds	r3, #4
 80075a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80075ac:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 80075b0:	f001 fed4 	bl	800935c <CRYP_DataOut>
 80075b4:	4603      	mov	r3, r0
 80075b6:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80075b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80075bc:	3304      	adds	r3, #4
 80075be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80075c2:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 80075c6:	f001 fec9 	bl	800935c <CRYP_DataOut>
 80075ca:	4603      	mov	r3, r0
 80075cc:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80075ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80075d2:	3304      	adds	r3, #4
 80075d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80075d8:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 80075dc:	f001 febe 	bl	800935c <CRYP_DataOut>
 80075e0:	4603      	mov	r3, r0
 80075e2:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80075e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80075e8:	3304      	adds	r3, #4
 80075ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80075ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80075f2:	3310      	adds	r3, #16
 80075f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80075f8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80075fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007600:	429a      	cmp	r2, r3
 8007602:	d204      	bcs.n	800760e <CRYP_AES_CBC+0x442>
 8007604:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8007608:	2b00      	cmp	r3, #0
 800760a:	f47f af7d 	bne.w	8007508 <CRYP_AES_CBC+0x33c>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 800760e:	2000      	movs	r0, #0
 8007610:	f001 fe7a 	bl	8009308 <CRYP_Cmd>

  return status;
 8007614:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
}
 8007618:	4618      	mov	r0, r3
 800761a:	37cc      	adds	r7, #204	; 0xcc
 800761c:	46bd      	mov	sp, r7
 800761e:	bd90      	pop	{r4, r7, pc}

08007620 <CRYP_AES_CTR>:
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CTR(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key, 
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 8007620:	b590      	push	{r4, r7, lr}
 8007622:	b0b3      	sub	sp, #204	; 0xcc
 8007624:	af00      	add	r7, sp, #0
 8007626:	60b9      	str	r1, [r7, #8]
 8007628:	607a      	str	r2, [r7, #4]
 800762a:	4602      	mov	r2, r0
 800762c:	73fa      	strb	r2, [r7, #15]
 800762e:	81bb      	strh	r3, [r7, #12]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8007630:	2300      	movs	r3, #0
 8007632:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 8007634:	2300      	movs	r3, #0
 8007636:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  ErrorStatus status = SUCCESS;
 800763a:	2301      	movs	r3, #1
 800763c:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
  uint32_t keyaddr    = (uint32_t)Key;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t inputaddr  = (uint32_t)Input;
 8007646:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800764a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  uint32_t outputaddr = (uint32_t)Output;
 800764e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007652:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t ivaddr     = (uint32_t)InitVectors;
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t i = 0;
 800765c:	2300      	movs	r3, #0
 800765e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8007662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007666:	4618      	mov	r0, r3
 8007668:	f001 fdd0 	bl	800920c <CRYP_KeyStructInit>

  switch(Keysize)
 800766c:	89bb      	ldrh	r3, [r7, #12]
 800766e:	2bc0      	cmp	r3, #192	; 0xc0
 8007670:	d03c      	beq.n	80076ec <CRYP_AES_CTR+0xcc>
 8007672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007676:	f000 808c 	beq.w	8007792 <CRYP_AES_CTR+0x172>
 800767a:	2b80      	cmp	r3, #128	; 0x80
 800767c:	d000      	beq.n	8007680 <CRYP_AES_CTR+0x60>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    default:
    break;
 800767e:	e0e9      	b.n	8007854 <CRYP_AES_CTR+0x234>
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);

  switch(Keysize)
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8007680:	2300      	movs	r3, #0
 8007682:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8007684:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800768e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007692:	ba1b      	rev	r3, r3
 8007694:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8007696:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800769a:	3304      	adds	r3, #4
 800769c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80076a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80076aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80076ae:	ba1b      	rev	r3, r3
 80076b0:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 80076b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80076b6:	3304      	adds	r3, #4
 80076b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80076bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80076c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80076ca:	ba1b      	rev	r3, r3
 80076cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 80076ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80076d2:	3304      	adds	r3, #4
 80076d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80076d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80076e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076e6:	ba1b      	rev	r3, r3
 80076e8:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 80076ea:	e0b3      	b.n	8007854 <CRYP_AES_CTR+0x234>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 80076ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076f0:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80076f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80076fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007700:	ba1b      	rev	r3, r3
 8007702:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8007704:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007708:	3304      	adds	r3, #4
 800770a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800770e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007718:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800771c:	ba1b      	rev	r3, r3
 800771e:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8007720:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007724:	3304      	adds	r3, #4
 8007726:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800772a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007734:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007738:	ba1b      	rev	r3, r3
 800773a:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 800773c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007740:	3304      	adds	r3, #4
 8007742:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8007746:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007750:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007754:	ba1b      	rev	r3, r3
 8007756:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8007758:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800775c:	3304      	adds	r3, #4
 800775e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8007762:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800776c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007770:	ba1b      	rev	r3, r3
 8007772:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8007774:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007778:	3304      	adds	r3, #4
 800777a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 800777e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007788:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800778c:	ba1b      	rev	r3, r3
 800778e:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8007790:	e060      	b.n	8007854 <CRYP_AES_CTR+0x234>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 8007792:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007796:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8007798:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80077a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80077a6:	ba1b      	rev	r3, r3
 80077a8:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 80077aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80077ae:	3304      	adds	r3, #4
 80077b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 80077b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 80077bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80077be:	ba1b      	rev	r3, r3
 80077c0:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 80077c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80077c6:	3304      	adds	r3, #4
 80077c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80077cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80077d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077d6:	ba1b      	rev	r3, r3
 80077d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 80077da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80077de:	3304      	adds	r3, #4
 80077e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80077e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	677b      	str	r3, [r7, #116]	; 0x74
 80077ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077ee:	ba1b      	rev	r3, r3
 80077f0:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 80077f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80077f6:	3304      	adds	r3, #4
 80077f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80077fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	673b      	str	r3, [r7, #112]	; 0x70
 8007804:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007806:	ba1b      	rev	r3, r3
 8007808:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 800780a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800780e:	3304      	adds	r3, #4
 8007810:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8007814:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800781c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800781e:	ba1b      	rev	r3, r3
 8007820:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8007822:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007826:	3304      	adds	r3, #4
 8007828:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 800782c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	66bb      	str	r3, [r7, #104]	; 0x68
 8007834:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007836:	ba1b      	rev	r3, r3
 8007838:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 800783a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800783e:	3304      	adds	r3, #4
 8007840:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8007844:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	667b      	str	r3, [r7, #100]	; 0x64
 800784c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800784e:	ba1b      	rev	r3, r3
 8007850:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8007852:	bf00      	nop
    default:
    break;
  }
  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8007854:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	663b      	str	r3, [r7, #96]	; 0x60
 800785c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800785e:	ba1b      	rev	r3, r3
 8007860:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 8007862:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007866:	3304      	adds	r3, #4
 8007868:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 800786c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007874:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007876:	ba1b      	rev	r3, r3
 8007878:	61bb      	str	r3, [r7, #24]
  ivaddr+=4;
 800787a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800787e:	3304      	adds	r3, #4
 8007880:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 8007884:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	65bb      	str	r3, [r7, #88]	; 0x58
 800788c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800788e:	ba1b      	rev	r3, r3
 8007890:	61fb      	str	r3, [r7, #28]
  ivaddr+=4;
 8007892:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007896:	3304      	adds	r3, #4
 8007898:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 800789c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	657b      	str	r3, [r7, #84]	; 0x54
 80078a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078a6:	ba1b      	rev	r3, r3
 80078a8:	623b      	str	r3, [r7, #32]

  /* Key Initialisation */
  CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 80078aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078ae:	4618      	mov	r0, r3
 80078b0:	f001 fc80 	bl	80091b4 <CRYP_KeyInit>

  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 80078b4:	7bfb      	ldrb	r3, [r7, #15]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d102      	bne.n	80078c0 <CRYP_AES_CTR+0x2a0>
  {
    /* Crypto Init for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 80078ba:	2304      	movs	r3, #4
 80078bc:	647b      	str	r3, [r7, #68]	; 0x44
 80078be:	e001      	b.n	80078c4 <CRYP_AES_CTR+0x2a4>
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {
    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 80078c0:	2300      	movs	r3, #0
 80078c2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CTR;
 80078c4:	2330      	movs	r3, #48	; 0x30
 80078c6:	64bb      	str	r3, [r7, #72]	; 0x48
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 80078c8:	2380      	movs	r3, #128	; 0x80
 80078ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  CRYP_Init(&AES_CRYP_InitStructure);
 80078cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80078d0:	4618      	mov	r0, r3
 80078d2:	f001 fc07 	bl	80090e4 <CRYP_Init>

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);
 80078d6:	f107 0314 	add.w	r3, r7, #20
 80078da:	4618      	mov	r0, r3
 80078dc:	f001 fcb8 	bl	8009250 <CRYP_IVInit>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 80078e0:	f001 fd04 	bl	80092ec <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 80078e4:	2001      	movs	r0, #1
 80078e6:	f001 fd0f 	bl	8009308 <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 80078ea:	f001 fef1 	bl	80096d0 <CRYP_GetCmdStatus>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d101      	bne.n	80078f8 <CRYP_AES_CTR+0x2d8>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 80078f4:	2300      	movs	r3, #0
 80078f6:	e08b      	b.n	8007a10 <CRYP_AES_CTR+0x3f0>
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80078f8:	2300      	movs	r3, #0
 80078fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80078fe:	e077      	b.n	80079f0 <CRYP_AES_CTR+0x3d0>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8007900:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4618      	mov	r0, r3
 8007908:	f001 fd1a 	bl	8009340 <CRYP_DataIn>
    inputaddr+=4;
 800790c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007910:	3304      	adds	r3, #4
 8007912:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8007916:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4618      	mov	r0, r3
 800791e:	f001 fd0f 	bl	8009340 <CRYP_DataIn>
    inputaddr+=4;
 8007922:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007926:	3304      	adds	r3, #4
 8007928:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800792c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4618      	mov	r0, r3
 8007934:	f001 fd04 	bl	8009340 <CRYP_DataIn>
    inputaddr+=4;
 8007938:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800793c:	3304      	adds	r3, #4
 800793e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8007942:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4618      	mov	r0, r3
 800794a:	f001 fcf9 	bl	8009340 <CRYP_DataIn>
    inputaddr+=4;
 800794e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007952:	3304      	adds	r3, #4
 8007954:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    /* Wait until the complete message has been processed */
    counter = 0;
 8007958:	2300      	movs	r3, #0
 800795a:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 800795c:	2010      	movs	r0, #16
 800795e:	f001 fed1 	bl	8009704 <CRYP_GetFlagStatus>
 8007962:	4603      	mov	r3, r0
 8007964:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      counter++;
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	3301      	adds	r3, #1
 800796c:	613b      	str	r3, [r7, #16]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007974:	d003      	beq.n	800797e <CRYP_AES_CTR+0x35e>
 8007976:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800797a:	2b00      	cmp	r3, #0
 800797c:	d1ee      	bne.n	800795c <CRYP_AES_CTR+0x33c>

    if (busystatus != RESET)
 800797e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007982:	2b00      	cmp	r3, #0
 8007984:	d003      	beq.n	800798e <CRYP_AES_CTR+0x36e>
   {
       status = ERROR;
 8007986:	2300      	movs	r3, #0
 8007988:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 800798c:	e02b      	b.n	80079e6 <CRYP_AES_CTR+0x3c6>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800798e:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 8007992:	f001 fce3 	bl	800935c <CRYP_DataOut>
 8007996:	4603      	mov	r3, r0
 8007998:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800799a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800799e:	3304      	adds	r3, #4
 80079a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80079a4:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 80079a8:	f001 fcd8 	bl	800935c <CRYP_DataOut>
 80079ac:	4603      	mov	r3, r0
 80079ae:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80079b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80079b4:	3304      	adds	r3, #4
 80079b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80079ba:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 80079be:	f001 fccd 	bl	800935c <CRYP_DataOut>
 80079c2:	4603      	mov	r3, r0
 80079c4:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80079c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80079ca:	3304      	adds	r3, #4
 80079cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80079d0:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 80079d4:	f001 fcc2 	bl	800935c <CRYP_DataOut>
 80079d8:	4603      	mov	r3, r0
 80079da:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80079dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80079e0:	3304      	adds	r3, #4
 80079e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80079e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80079ea:	3310      	adds	r3, #16
 80079ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80079f0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80079f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d204      	bcs.n	8007a06 <CRYP_AES_CTR+0x3e6>
 80079fc:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	f47f af7d 	bne.w	8007900 <CRYP_AES_CTR+0x2e0>
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
    }
  }
  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8007a06:	2000      	movs	r0, #0
 8007a08:	f001 fc7e 	bl	8009308 <CRYP_Cmd>

  return status;
 8007a0c:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	37cc      	adds	r7, #204	; 0xcc
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd90      	pop	{r4, r7, pc}

08007a18 <CRYP_AES_GCM>:
ErrorStatus CRYP_AES_GCM(uint8_t Mode, uint8_t InitVectors[16],
                         uint8_t *Key, uint16_t Keysize,
                         uint8_t *Input, uint32_t ILength,
                         uint8_t *Header, uint32_t HLength,
                         uint8_t *Output, uint8_t *AuthTAG)
{
 8007a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a1c:	b0c5      	sub	sp, #276	; 0x114
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	f107 0610 	add.w	r6, r7, #16
 8007a24:	6031      	str	r1, [r6, #0]
 8007a26:	f107 010c 	add.w	r1, r7, #12
 8007a2a:	600a      	str	r2, [r1, #0]
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	75fa      	strb	r2, [r7, #23]
 8007a30:	82bb      	strh	r3, [r7, #20]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8007a32:	2300      	movs	r3, #0
 8007a34:	61fb      	str	r3, [r7, #28]
  uint32_t busystatus = 0;
 8007a36:	2300      	movs	r3, #0
 8007a38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  ErrorStatus status = SUCCESS;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  uint32_t keyaddr    = (uint32_t)Key;
 8007a42:	f107 030c 	add.w	r3, r7, #12
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  uint32_t inputaddr  = (uint32_t)Input;
 8007a4c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007a50:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  uint32_t outputaddr = (uint32_t)Output;
 8007a54:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8007a58:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  uint32_t ivaddr     = (uint32_t)InitVectors;
 8007a5c:	f107 0310 	add.w	r3, r7, #16
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  uint32_t headeraddr = (uint32_t)Header;
 8007a66:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007a6a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  uint32_t tagaddr = (uint32_t)AuthTAG;
 8007a6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007a72:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  uint64_t headerlength = HLength * 8;/* header length in bits */
 8007a76:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8007a7a:	00db      	lsls	r3, r3, #3
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	f04f 0300 	mov.w	r3, #0
 8007a82:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
  uint64_t inputlength = ILength * 8;/* input length in bits */
 8007a86:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8007a8a:	00db      	lsls	r3, r3, #3
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	f04f 0300 	mov.w	r3, #0
 8007a92:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
  uint32_t loopcounter = 0;
 8007a96:	2300      	movs	r3, #0
 8007a98:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8007a9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f001 fbb3 	bl	800920c <CRYP_KeyStructInit>

  switch(Keysize)
 8007aa6:	8abb      	ldrh	r3, [r7, #20]
 8007aa8:	2bc0      	cmp	r3, #192	; 0xc0
 8007aaa:	d03c      	beq.n	8007b26 <CRYP_AES_GCM+0x10e>
 8007aac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ab0:	f000 808c 	beq.w	8007bcc <CRYP_AES_GCM+0x1b4>
 8007ab4:	2b80      	cmp	r3, #128	; 0x80
 8007ab6:	d000      	beq.n	8007aba <CRYP_AES_GCM+0xa2>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    default:
    break;
 8007ab8:	e0f7      	b.n	8007caa <CRYP_AES_GCM+0x292>
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);

  switch(Keysize)
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8007aba:	2300      	movs	r3, #0
 8007abc:	65fb      	str	r3, [r7, #92]	; 0x5c
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8007abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007ac8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007acc:	ba1b      	rev	r3, r3
 8007ace:	643b      	str	r3, [r7, #64]	; 0x40
    keyaddr+=4;
 8007ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ad4:	3304      	adds	r3, #4
 8007ad6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8007ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ae4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007ae8:	ba1b      	rev	r3, r3
 8007aea:	647b      	str	r3, [r7, #68]	; 0x44
    keyaddr+=4;
 8007aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007af0:	3304      	adds	r3, #4
 8007af2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8007af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007b00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007b04:	ba1b      	rev	r3, r3
 8007b06:	64bb      	str	r3, [r7, #72]	; 0x48
    keyaddr+=4;
 8007b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b0c:	3304      	adds	r3, #4
 8007b0e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8007b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b20:	ba1b      	rev	r3, r3
 8007b22:	64fb      	str	r3, [r7, #76]	; 0x4c
    break;
 8007b24:	e0c1      	b.n	8007caa <CRYP_AES_GCM+0x292>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 8007b26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b2a:	65fb      	str	r3, [r7, #92]	; 0x5c
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8007b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007b3a:	ba1b      	rev	r3, r3
 8007b3c:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8007b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b42:	3304      	adds	r3, #4
 8007b44:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8007b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007b56:	ba1b      	rev	r3, r3
 8007b58:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8007b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b5e:	3304      	adds	r3, #4
 8007b60:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8007b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007b6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007b72:	ba1b      	rev	r3, r3
 8007b74:	643b      	str	r3, [r7, #64]	; 0x40
    keyaddr+=4;
 8007b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b7a:	3304      	adds	r3, #4
 8007b7c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8007b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b8e:	ba1b      	rev	r3, r3
 8007b90:	647b      	str	r3, [r7, #68]	; 0x44
    keyaddr+=4;
 8007b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b96:	3304      	adds	r3, #4
 8007b98:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8007b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ba6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007baa:	ba1b      	rev	r3, r3
 8007bac:	64bb      	str	r3, [r7, #72]	; 0x48
    keyaddr+=4;
 8007bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bb2:	3304      	adds	r3, #4
 8007bb4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8007bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007bc2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007bc6:	ba1b      	rev	r3, r3
 8007bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
    break;
 8007bca:	e06e      	b.n	8007caa <CRYP_AES_GCM+0x292>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 8007bcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bd0:	65fb      	str	r3, [r7, #92]	; 0x5c
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8007bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007bdc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007be0:	ba1b      	rev	r3, r3
 8007be2:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8007be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007be8:	3304      	adds	r3, #4
 8007bea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8007bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007bf8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007bfc:	ba1b      	rev	r3, r3
 8007bfe:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8007c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c04:	3304      	adds	r3, #4
 8007c06:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8007c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007c14:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007c18:	ba1b      	rev	r3, r3
 8007c1a:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8007c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c20:	3304      	adds	r3, #4
 8007c22:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8007c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007c30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c34:	ba1b      	rev	r3, r3
 8007c36:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8007c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c3c:	3304      	adds	r3, #4
 8007c3e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8007c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007c4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c50:	ba1b      	rev	r3, r3
 8007c52:	643b      	str	r3, [r7, #64]	; 0x40
    keyaddr+=4;
 8007c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c58:	3304      	adds	r3, #4
 8007c5a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8007c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007c68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c6c:	ba1b      	rev	r3, r3
 8007c6e:	647b      	str	r3, [r7, #68]	; 0x44
    keyaddr+=4;
 8007c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c74:	3304      	adds	r3, #4
 8007c76:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8007c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007c84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c88:	ba1b      	rev	r3, r3
 8007c8a:	64bb      	str	r3, [r7, #72]	; 0x48
    keyaddr+=4;
 8007c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c90:	3304      	adds	r3, #4
 8007c92:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8007c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007ca0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ca4:	ba1b      	rev	r3, r3
 8007ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
    break;
 8007ca8:	bf00      	nop
    default:
    break;
  }
  
  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8007caa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007cb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cb8:	ba1b      	rev	r3, r3
 8007cba:	623b      	str	r3, [r7, #32]
  ivaddr+=4;
 8007cbc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007cc0:	3304      	adds	r3, #4
 8007cc2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8007cc6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007cd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007cd4:	ba1b      	rev	r3, r3
 8007cd6:	627b      	str	r3, [r7, #36]	; 0x24
  ivaddr+=4;
 8007cd8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007cdc:	3304      	adds	r3, #4
 8007cde:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 8007ce2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007cec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007cf0:	ba1b      	rev	r3, r3
 8007cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  ivaddr+=4;
 8007cf4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007cf8:	3304      	adds	r3, #4
 8007cfa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 8007cfe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007d08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007d0c:	ba1b      	rev	r3, r3
 8007d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /*------------------ AES Encryption ------------------*/
  if(Mode == MODE_ENCRYPT) /* AES encryption */
 8007d10:	7dfb      	ldrb	r3, [r7, #23]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	f040 81a9 	bne.w	800806a <CRYP_AES_GCM+0x652>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 8007d18:	f001 fae8 	bl	80092ec <CRYP_FIFOFlush>
    
    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8007d1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007d20:	4618      	mov	r0, r3
 8007d22:	f001 fa47 	bl	80091b4 <CRYP_KeyInit>
    
    /* CRYP Initialization Vectors */
    CRYP_IVInit(&AES_CRYP_IVInitStructure);
 8007d26:	f107 0320 	add.w	r3, r7, #32
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f001 fa90 	bl	8009250 <CRYP_IVInit>
    
    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8007d30:	2300      	movs	r3, #0
 8007d32:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_GCM;
 8007d34:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007d38:	657b      	str	r3, [r7, #84]	; 0x54
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8007d3a:	2380      	movs	r3, #128	; 0x80
 8007d3c:	65bb      	str	r3, [r7, #88]	; 0x58
    CRYP_Init(&AES_CRYP_InitStructure);
 8007d3e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007d42:	4618      	mov	r0, r3
 8007d44:	f001 f9ce 	bl	80090e4 <CRYP_Init>
    
    /***************************** Init phase *********************************/
    /* Select init phase */
    CRYP_PhaseConfig(CRYP_Phase_Init);
 8007d48:	2000      	movs	r0, #0
 8007d4a:	f001 fab3 	bl	80092b4 <CRYP_PhaseConfig>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8007d4e:	2001      	movs	r0, #1
 8007d50:	f001 fada 	bl	8009308 <CRYP_Cmd>
    
    /* Wait for CRYPEN bit to be 0 */
    while(CRYP_GetCmdStatus() == ENABLE)
 8007d54:	bf00      	nop
 8007d56:	f001 fcbb 	bl	80096d0 <CRYP_GetCmdStatus>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d0fa      	beq.n	8007d56 <CRYP_AES_GCM+0x33e>
    {
    }
    
    /***************************** header phase *******************************/
    if(HLength != 0)
 8007d60:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d069      	beq.n	8007e3c <CRYP_AES_GCM+0x424>
    {
      /* Select header phase */
      CRYP_PhaseConfig(CRYP_Phase_Header);
 8007d68:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007d6c:	f001 faa2 	bl	80092b4 <CRYP_PhaseConfig>
      
      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 8007d70:	2001      	movs	r0, #1
 8007d72:	f001 fac9 	bl	8009308 <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 8007d76:	f001 fcab 	bl	80096d0 <CRYP_GetCmdStatus>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d101      	bne.n	8007d84 <CRYP_AES_GCM+0x36c>
      {
         /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
            the CRYP peripheral (please check the device sales type. */
         return(ERROR);
 8007d80:	2300      	movs	r3, #0
 8007d82:	e31d      	b.n	80083c0 <CRYP_AES_GCM+0x9a8>
      }
      
      for(loopcounter = 0; (loopcounter < HLength); loopcounter+=16)
 8007d84:	2300      	movs	r3, #0
 8007d86:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007d8a:	e037      	b.n	8007dfc <CRYP_AES_GCM+0x3e4>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 8007d8c:	bf00      	nop
 8007d8e:	2001      	movs	r0, #1
 8007d90:	f001 fcb8 	bl	8009704 <CRYP_GetFlagStatus>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d0f9      	beq.n	8007d8e <CRYP_AES_GCM+0x376>
        {
        }
        
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8007d9a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4618      	mov	r0, r3
 8007da2:	f001 facd 	bl	8009340 <CRYP_DataIn>
        headeraddr+=4;
 8007da6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007daa:	3304      	adds	r3, #4
 8007dac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8007db0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4618      	mov	r0, r3
 8007db8:	f001 fac2 	bl	8009340 <CRYP_DataIn>
        headeraddr+=4;
 8007dbc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007dc0:	3304      	adds	r3, #4
 8007dc2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8007dc6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f001 fab7 	bl	8009340 <CRYP_DataIn>
        headeraddr+=4;
 8007dd2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007dd6:	3304      	adds	r3, #4
 8007dd8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8007ddc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4618      	mov	r0, r3
 8007de4:	f001 faac 	bl	8009340 <CRYP_DataIn>
        headeraddr+=4;
 8007de8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007dec:	3304      	adds	r3, #4
 8007dee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
         /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
            the CRYP peripheral (please check the device sales type. */
         return(ERROR);
      }
      
      for(loopcounter = 0; (loopcounter < HLength); loopcounter+=16)
 8007df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007df6:	3310      	adds	r3, #16
 8007df8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007dfc:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8007e00:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d3c1      	bcc.n	8007d8c <CRYP_AES_GCM+0x374>
        CRYP_DataIn(*(uint32_t*)(headeraddr));
        headeraddr+=4;
      }
      
      /* Wait until the complete message has been processed */
      counter = 0;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	61fb      	str	r3, [r7, #28]
      do
      {
        busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8007e0c:	2010      	movs	r0, #16
 8007e0e:	f001 fc79 	bl	8009704 <CRYP_GetFlagStatus>
 8007e12:	4603      	mov	r3, r0
 8007e14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
        counter++;
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	61fb      	str	r3, [r7, #28]
      }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e24:	d003      	beq.n	8007e2e <CRYP_AES_GCM+0x416>
 8007e26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1ee      	bne.n	8007e0c <CRYP_AES_GCM+0x3f4>

      if (busystatus != RESET)
 8007e2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d002      	beq.n	8007e3c <CRYP_AES_GCM+0x424>
      {
        status = ERROR;
 8007e36:	2300      	movs	r3, #0
 8007e38:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
      }
    }
    
    /**************************** payload phase *******************************/
    if(ILength != 0)
 8007e3c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	f000 80a3 	beq.w	8007f8c <CRYP_AES_GCM+0x574>
    {
      /* Select payload phase */
      CRYP_PhaseConfig(CRYP_Phase_Payload);
 8007e46:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8007e4a:	f001 fa33 	bl	80092b4 <CRYP_PhaseConfig>
      
      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 8007e4e:	2001      	movs	r0, #1
 8007e50:	f001 fa5a 	bl	8009308 <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 8007e54:	f001 fc3c 	bl	80096d0 <CRYP_GetCmdStatus>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d101      	bne.n	8007e62 <CRYP_AES_GCM+0x44a>
      {
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
 8007e5e:	2300      	movs	r3, #0
 8007e60:	e2ae      	b.n	80083c0 <CRYP_AES_GCM+0x9a8>
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 8007e62:	2300      	movs	r3, #0
 8007e64:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007e68:	e085      	b.n	8007f76 <CRYP_AES_GCM+0x55e>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 8007e6a:	bf00      	nop
 8007e6c:	2001      	movs	r0, #1
 8007e6e:	f001 fc49 	bl	8009704 <CRYP_GetFlagStatus>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d0f9      	beq.n	8007e6c <CRYP_AES_GCM+0x454>
        {
        }
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8007e78:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f001 fa5e 	bl	8009340 <CRYP_DataIn>
        inputaddr+=4;
 8007e84:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e88:	3304      	adds	r3, #4
 8007e8a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8007e8e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4618      	mov	r0, r3
 8007e96:	f001 fa53 	bl	8009340 <CRYP_DataIn>
        inputaddr+=4;
 8007e9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e9e:	3304      	adds	r3, #4
 8007ea0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8007ea4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f001 fa48 	bl	8009340 <CRYP_DataIn>
        inputaddr+=4;
 8007eb0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007eb4:	3304      	adds	r3, #4
 8007eb6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8007eba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f001 fa3d 	bl	8009340 <CRYP_DataIn>
        inputaddr+=4;
 8007ec6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007eca:	3304      	adds	r3, #4
 8007ecc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        
        /* Wait until the complete message has been processed */
        counter = 0;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	61fb      	str	r3, [r7, #28]
        do
        {
          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8007ed4:	2010      	movs	r0, #16
 8007ed6:	f001 fc15 	bl	8009704 <CRYP_GetFlagStatus>
 8007eda:	4603      	mov	r3, r0
 8007edc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
          counter++;
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	61fb      	str	r3, [r7, #28]
        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007eec:	d003      	beq.n	8007ef6 <CRYP_AES_GCM+0x4de>
 8007eee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d1ee      	bne.n	8007ed4 <CRYP_AES_GCM+0x4bc>

        if (busystatus != RESET)
 8007ef6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d003      	beq.n	8007f06 <CRYP_AES_GCM+0x4ee>
        {
          status = ERROR;
 8007efe:	2300      	movs	r3, #0
 8007f00:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8007f04:	e032      	b.n	8007f6c <CRYP_AES_GCM+0x554>
        }
        else
        {
          /* Wait until the OFNE flag is reset */
          while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 8007f06:	bf00      	nop
 8007f08:	2004      	movs	r0, #4
 8007f0a:	f001 fbfb 	bl	8009704 <CRYP_GetFlagStatus>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d0f9      	beq.n	8007f08 <CRYP_AES_GCM+0x4f0>
          {
          }
          
          /* Read the Output block from the Output FIFO */
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8007f14:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8007f18:	f001 fa20 	bl	800935c <CRYP_DataOut>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8007f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f24:	3304      	adds	r3, #4
 8007f26:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8007f2a:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8007f2e:	f001 fa15 	bl	800935c <CRYP_DataOut>
 8007f32:	4603      	mov	r3, r0
 8007f34:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8007f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f3a:	3304      	adds	r3, #4
 8007f3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8007f40:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8007f44:	f001 fa0a 	bl	800935c <CRYP_DataOut>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8007f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f50:	3304      	adds	r3, #4
 8007f52:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8007f56:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8007f5a:	f001 f9ff 	bl	800935c <CRYP_DataOut>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8007f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f66:	3304      	adds	r3, #4
 8007f68:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 8007f6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f70:	3310      	adds	r3, #16
 8007f72:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007f76:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8007f7a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d204      	bcs.n	8007f8c <CRYP_AES_GCM+0x574>
 8007f82:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	f47f af6f 	bne.w	8007e6a <CRYP_AES_GCM+0x452>
      }
    }
    
    /***************************** final phase ********************************/
    /* Select final phase */
    CRYP_PhaseConfig(CRYP_Phase_Final);
 8007f8c:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8007f90:	f001 f990 	bl	80092b4 <CRYP_PhaseConfig>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8007f94:	2001      	movs	r0, #1
 8007f96:	f001 f9b7 	bl	8009308 <CRYP_Cmd>
    
    if(CRYP_GetCmdStatus() == DISABLE)
 8007f9a:	f001 fb99 	bl	80096d0 <CRYP_GetCmdStatus>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d101      	bne.n	8007fa8 <CRYP_AES_GCM+0x590>
    {
      /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
         the CRYP peripheral (please check the device sales type. */
      return(ERROR);
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	e20b      	b.n	80083c0 <CRYP_AES_GCM+0x9a8>
    }
    
    /* Write number of bits concatenated with header in the IN FIFO */
    CRYP_DataIn(__REV(headerlength>>32));
 8007fa8:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8007fac:	0019      	movs	r1, r3
 8007fae:	6039      	str	r1, [r7, #0]
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	607b      	str	r3, [r7, #4]
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007fb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007fba:	ba1b      	rev	r3, r3
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f001 f9bf 	bl	8009340 <CRYP_DataIn>
    CRYP_DataIn(__REV(headerlength));
 8007fc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fc6:	67bb      	str	r3, [r7, #120]	; 0x78
 8007fc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fca:	ba1b      	rev	r3, r3
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f001 f9b7 	bl	8009340 <CRYP_DataIn>
    CRYP_DataIn(__REV(inputlength>>32));
 8007fd2:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8007fd6:	469a      	mov	sl, r3
 8007fd8:	f04f 0b00 	mov.w	fp, #0
 8007fdc:	4653      	mov	r3, sl
 8007fde:	677b      	str	r3, [r7, #116]	; 0x74
 8007fe0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fe2:	ba1b      	rev	r3, r3
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f001 f9ab 	bl	8009340 <CRYP_DataIn>
    CRYP_DataIn(__REV(inputlength));
 8007fea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007fee:	673b      	str	r3, [r7, #112]	; 0x70
 8007ff0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ff2:	ba1b      	rev	r3, r3
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f001 f9a3 	bl	8009340 <CRYP_DataIn>
    /* Wait until the OFNE flag is reset */
    while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 8007ffa:	bf00      	nop
 8007ffc:	2004      	movs	r0, #4
 8007ffe:	f001 fb81 	bl	8009704 <CRYP_GetFlagStatus>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d0f9      	beq.n	8007ffc <CRYP_AES_GCM+0x5e4>
    {
    }
    
    tagaddr = (uint32_t)AuthTAG;
 8008008:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800800c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    /* Read the Auth TAG in the IN FIFO */
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8008010:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8008014:	f001 f9a2 	bl	800935c <CRYP_DataOut>
 8008018:	4603      	mov	r3, r0
 800801a:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 800801c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008020:	3304      	adds	r3, #4
 8008022:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8008026:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 800802a:	f001 f997 	bl	800935c <CRYP_DataOut>
 800802e:	4603      	mov	r3, r0
 8008030:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 8008032:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008036:	3304      	adds	r3, #4
 8008038:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 800803c:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8008040:	f001 f98c 	bl	800935c <CRYP_DataOut>
 8008044:	4603      	mov	r3, r0
 8008046:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 8008048:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800804c:	3304      	adds	r3, #4
 800804e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8008052:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8008056:	f001 f981 	bl	800935c <CRYP_DataOut>
 800805a:	4603      	mov	r3, r0
 800805c:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 800805e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008062:	3304      	adds	r3, #4
 8008064:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008068:	e1a5      	b.n	80083b6 <CRYP_AES_GCM+0x99e>
  }
  /*------------------ AES Decryption ------------------*/
  else /* AES decryption */
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 800806a:	f001 f93f 	bl	80092ec <CRYP_FIFOFlush>
    
    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 800806e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008072:	4618      	mov	r0, r3
 8008074:	f001 f89e 	bl	80091b4 <CRYP_KeyInit>
    
    /* CRYP Initialization Vectors */
    CRYP_IVInit(&AES_CRYP_IVInitStructure);
 8008078:	f107 0320 	add.w	r3, r7, #32
 800807c:	4618      	mov	r0, r3
 800807e:	f001 f8e7 	bl	8009250 <CRYP_IVInit>
    
    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8008082:	2304      	movs	r3, #4
 8008084:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_GCM;
 8008086:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800808a:	657b      	str	r3, [r7, #84]	; 0x54
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 800808c:	2380      	movs	r3, #128	; 0x80
 800808e:	65bb      	str	r3, [r7, #88]	; 0x58
    CRYP_Init(&AES_CRYP_InitStructure);
 8008090:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008094:	4618      	mov	r0, r3
 8008096:	f001 f825 	bl	80090e4 <CRYP_Init>
    
    /***************************** Init phase *********************************/
    /* Select init phase */
    CRYP_PhaseConfig(CRYP_Phase_Init);
 800809a:	2000      	movs	r0, #0
 800809c:	f001 f90a 	bl	80092b4 <CRYP_PhaseConfig>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 80080a0:	2001      	movs	r0, #1
 80080a2:	f001 f931 	bl	8009308 <CRYP_Cmd>
    
    /* Wait for CRYPEN bit to be 0 */
    while(CRYP_GetCmdStatus() == ENABLE)
 80080a6:	bf00      	nop
 80080a8:	f001 fb12 	bl	80096d0 <CRYP_GetCmdStatus>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d0fa      	beq.n	80080a8 <CRYP_AES_GCM+0x690>
    {
    }
    
    /***************************** header phase *******************************/
    if(HLength != 0)
 80080b2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d069      	beq.n	800818e <CRYP_AES_GCM+0x776>
    {
      /* Select header phase */
      CRYP_PhaseConfig(CRYP_Phase_Header);
 80080ba:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80080be:	f001 f8f9 	bl	80092b4 <CRYP_PhaseConfig>
      
      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 80080c2:	2001      	movs	r0, #1
 80080c4:	f001 f920 	bl	8009308 <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 80080c8:	f001 fb02 	bl	80096d0 <CRYP_GetCmdStatus>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d101      	bne.n	80080d6 <CRYP_AES_GCM+0x6be>
      {
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
 80080d2:	2300      	movs	r3, #0
 80080d4:	e174      	b.n	80083c0 <CRYP_AES_GCM+0x9a8>
      }
      
      for(loopcounter = 0; (loopcounter < HLength); loopcounter+=16)
 80080d6:	2300      	movs	r3, #0
 80080d8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80080dc:	e037      	b.n	800814e <CRYP_AES_GCM+0x736>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 80080de:	bf00      	nop
 80080e0:	2001      	movs	r0, #1
 80080e2:	f001 fb0f 	bl	8009704 <CRYP_GetFlagStatus>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d0f9      	beq.n	80080e0 <CRYP_AES_GCM+0x6c8>
        {
        }
        
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 80080ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4618      	mov	r0, r3
 80080f4:	f001 f924 	bl	8009340 <CRYP_DataIn>
        headeraddr+=4;
 80080f8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80080fc:	3304      	adds	r3, #4
 80080fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8008102:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4618      	mov	r0, r3
 800810a:	f001 f919 	bl	8009340 <CRYP_DataIn>
        headeraddr+=4;
 800810e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008112:	3304      	adds	r3, #4
 8008114:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8008118:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4618      	mov	r0, r3
 8008120:	f001 f90e 	bl	8009340 <CRYP_DataIn>
        headeraddr+=4;
 8008124:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008128:	3304      	adds	r3, #4
 800812a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 800812e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4618      	mov	r0, r3
 8008136:	f001 f903 	bl	8009340 <CRYP_DataIn>
        headeraddr+=4;
 800813a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800813e:	3304      	adds	r3, #4
 8008140:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
      }
      
      for(loopcounter = 0; (loopcounter < HLength); loopcounter+=16)
 8008144:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008148:	3310      	adds	r3, #16
 800814a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800814e:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8008152:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008156:	429a      	cmp	r2, r3
 8008158:	d3c1      	bcc.n	80080de <CRYP_AES_GCM+0x6c6>
        CRYP_DataIn(*(uint32_t*)(headeraddr));
        headeraddr+=4;
      }
      
      /* Wait until the complete message has been processed */
      counter = 0;
 800815a:	2300      	movs	r3, #0
 800815c:	61fb      	str	r3, [r7, #28]
      do
      {
        busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 800815e:	2010      	movs	r0, #16
 8008160:	f001 fad0 	bl	8009704 <CRYP_GetFlagStatus>
 8008164:	4603      	mov	r3, r0
 8008166:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
        counter++;
 800816a:	69fb      	ldr	r3, [r7, #28]
 800816c:	3301      	adds	r3, #1
 800816e:	61fb      	str	r3, [r7, #28]
      }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008176:	d003      	beq.n	8008180 <CRYP_AES_GCM+0x768>
 8008178:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800817c:	2b00      	cmp	r3, #0
 800817e:	d1ee      	bne.n	800815e <CRYP_AES_GCM+0x746>

      if (busystatus != RESET)
 8008180:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008184:	2b00      	cmp	r3, #0
 8008186:	d002      	beq.n	800818e <CRYP_AES_GCM+0x776>
      {
        status = ERROR;
 8008188:	2300      	movs	r3, #0
 800818a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
      }
    }
    
    /**************************** payload phase *******************************/
    if(ILength != 0)
 800818e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8008192:	2b00      	cmp	r3, #0
 8008194:	f000 80a3 	beq.w	80082de <CRYP_AES_GCM+0x8c6>
    {
      /* Select payload phase */
      CRYP_PhaseConfig(CRYP_Phase_Payload);
 8008198:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800819c:	f001 f88a 	bl	80092b4 <CRYP_PhaseConfig>

      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 80081a0:	2001      	movs	r0, #1
 80081a2:	f001 f8b1 	bl	8009308 <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 80081a6:	f001 fa93 	bl	80096d0 <CRYP_GetCmdStatus>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d101      	bne.n	80081b4 <CRYP_AES_GCM+0x79c>
      {
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
 80081b0:	2300      	movs	r3, #0
 80081b2:	e105      	b.n	80083c0 <CRYP_AES_GCM+0x9a8>
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 80081b4:	2300      	movs	r3, #0
 80081b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80081ba:	e085      	b.n	80082c8 <CRYP_AES_GCM+0x8b0>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 80081bc:	bf00      	nop
 80081be:	2001      	movs	r0, #1
 80081c0:	f001 faa0 	bl	8009704 <CRYP_GetFlagStatus>
 80081c4:	4603      	mov	r3, r0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d0f9      	beq.n	80081be <CRYP_AES_GCM+0x7a6>
        {
        }
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 80081ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4618      	mov	r0, r3
 80081d2:	f001 f8b5 	bl	8009340 <CRYP_DataIn>
        inputaddr+=4;
 80081d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80081da:	3304      	adds	r3, #4
 80081dc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 80081e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4618      	mov	r0, r3
 80081e8:	f001 f8aa 	bl	8009340 <CRYP_DataIn>
        inputaddr+=4;
 80081ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80081f0:	3304      	adds	r3, #4
 80081f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 80081f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4618      	mov	r0, r3
 80081fe:	f001 f89f 	bl	8009340 <CRYP_DataIn>
        inputaddr+=4;
 8008202:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008206:	3304      	adds	r3, #4
 8008208:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 800820c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4618      	mov	r0, r3
 8008214:	f001 f894 	bl	8009340 <CRYP_DataIn>
        inputaddr+=4;
 8008218:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800821c:	3304      	adds	r3, #4
 800821e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        
        /* Wait until the complete message has been processed */
        counter = 0;
 8008222:	2300      	movs	r3, #0
 8008224:	61fb      	str	r3, [r7, #28]
        do
        {
          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8008226:	2010      	movs	r0, #16
 8008228:	f001 fa6c 	bl	8009704 <CRYP_GetFlagStatus>
 800822c:	4603      	mov	r3, r0
 800822e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
          counter++;
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	3301      	adds	r3, #1
 8008236:	61fb      	str	r3, [r7, #28]
        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8008238:	69fb      	ldr	r3, [r7, #28]
 800823a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800823e:	d003      	beq.n	8008248 <CRYP_AES_GCM+0x830>
 8008240:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008244:	2b00      	cmp	r3, #0
 8008246:	d1ee      	bne.n	8008226 <CRYP_AES_GCM+0x80e>

        if (busystatus != RESET)
 8008248:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800824c:	2b00      	cmp	r3, #0
 800824e:	d003      	beq.n	8008258 <CRYP_AES_GCM+0x840>
        {
          status = ERROR;
 8008250:	2300      	movs	r3, #0
 8008252:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8008256:	e032      	b.n	80082be <CRYP_AES_GCM+0x8a6>
        }
        else
        {
          /* Wait until the OFNE flag is reset */
          while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 8008258:	bf00      	nop
 800825a:	2004      	movs	r0, #4
 800825c:	f001 fa52 	bl	8009704 <CRYP_GetFlagStatus>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d0f9      	beq.n	800825a <CRYP_AES_GCM+0x842>
          {
          }
          
          /* Read the Output block from the Output FIFO */
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008266:	f8d7 6104 	ldr.w	r6, [r7, #260]	; 0x104
 800826a:	f001 f877 	bl	800935c <CRYP_DataOut>
 800826e:	4603      	mov	r3, r0
 8008270:	6033      	str	r3, [r6, #0]
          outputaddr+=4;
 8008272:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008276:	3304      	adds	r3, #4
 8008278:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800827c:	f8d7 6104 	ldr.w	r6, [r7, #260]	; 0x104
 8008280:	f001 f86c 	bl	800935c <CRYP_DataOut>
 8008284:	4603      	mov	r3, r0
 8008286:	6033      	str	r3, [r6, #0]
          outputaddr+=4;
 8008288:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800828c:	3304      	adds	r3, #4
 800828e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008292:	f8d7 6104 	ldr.w	r6, [r7, #260]	; 0x104
 8008296:	f001 f861 	bl	800935c <CRYP_DataOut>
 800829a:	4603      	mov	r3, r0
 800829c:	6033      	str	r3, [r6, #0]
          outputaddr+=4;
 800829e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082a2:	3304      	adds	r3, #4
 80082a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80082a8:	f8d7 6104 	ldr.w	r6, [r7, #260]	; 0x104
 80082ac:	f001 f856 	bl	800935c <CRYP_DataOut>
 80082b0:	4603      	mov	r3, r0
 80082b2:	6033      	str	r3, [r6, #0]
          outputaddr+=4;
 80082b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082b8:	3304      	adds	r3, #4
 80082ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 80082be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082c2:	3310      	adds	r3, #16
 80082c4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80082c8:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80082cc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d204      	bcs.n	80082de <CRYP_AES_GCM+0x8c6>
 80082d4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f47f af6f 	bne.w	80081bc <CRYP_AES_GCM+0x7a4>
      }
    }
    
    /***************************** final phase ********************************/
    /* Select final phase */
    CRYP_PhaseConfig(CRYP_Phase_Final);
 80082de:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80082e2:	f000 ffe7 	bl	80092b4 <CRYP_PhaseConfig>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 80082e6:	2001      	movs	r0, #1
 80082e8:	f001 f80e 	bl	8009308 <CRYP_Cmd>
    
    if(CRYP_GetCmdStatus() == DISABLE)
 80082ec:	f001 f9f0 	bl	80096d0 <CRYP_GetCmdStatus>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d101      	bne.n	80082fa <CRYP_AES_GCM+0x8e2>
    {
      /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
         the CRYP peripheral (please check the device sales type. */
      return(ERROR);
 80082f6:	2300      	movs	r3, #0
 80082f8:	e062      	b.n	80083c0 <CRYP_AES_GCM+0x9a8>
    }
    
    /* Write number of bits concatenated with header in the IN FIFO */
    CRYP_DataIn(__REV(headerlength>>32));
 80082fa:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80082fe:	4698      	mov	r8, r3
 8008300:	f04f 0900 	mov.w	r9, #0
 8008304:	4643      	mov	r3, r8
 8008306:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800830a:	ba1b      	rev	r3, r3
 800830c:	4618      	mov	r0, r3
 800830e:	f001 f817 	bl	8009340 <CRYP_DataIn>
    CRYP_DataIn(__REV(headerlength));
 8008312:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008316:	66bb      	str	r3, [r7, #104]	; 0x68
 8008318:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800831a:	ba1b      	rev	r3, r3
 800831c:	4618      	mov	r0, r3
 800831e:	f001 f80f 	bl	8009340 <CRYP_DataIn>
    CRYP_DataIn(__REV(inputlength>>32));
 8008322:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8008326:	001c      	movs	r4, r3
 8008328:	2500      	movs	r5, #0
 800832a:	4623      	mov	r3, r4
 800832c:	667b      	str	r3, [r7, #100]	; 0x64
 800832e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008330:	ba1b      	rev	r3, r3
 8008332:	4618      	mov	r0, r3
 8008334:	f001 f804 	bl	8009340 <CRYP_DataIn>
    CRYP_DataIn(__REV(inputlength));
 8008338:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800833c:	663b      	str	r3, [r7, #96]	; 0x60
 800833e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008340:	ba1b      	rev	r3, r3
 8008342:	4618      	mov	r0, r3
 8008344:	f000 fffc 	bl	8009340 <CRYP_DataIn>
    /* Wait until the OFNE flag is reset */
    while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 8008348:	bf00      	nop
 800834a:	2004      	movs	r0, #4
 800834c:	f001 f9da 	bl	8009704 <CRYP_GetFlagStatus>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d0f9      	beq.n	800834a <CRYP_AES_GCM+0x932>
    {
    }
    
    tagaddr = (uint32_t)AuthTAG;
 8008356:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800835a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    /* Read the Auth TAG in the IN FIFO */
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 800835e:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8008362:	f000 fffb 	bl	800935c <CRYP_DataOut>
 8008366:	4603      	mov	r3, r0
 8008368:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 800836a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800836e:	3304      	adds	r3, #4
 8008370:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8008374:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8008378:	f000 fff0 	bl	800935c <CRYP_DataOut>
 800837c:	4603      	mov	r3, r0
 800837e:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 8008380:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008384:	3304      	adds	r3, #4
 8008386:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 800838a:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 800838e:	f000 ffe5 	bl	800935c <CRYP_DataOut>
 8008392:	4603      	mov	r3, r0
 8008394:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 8008396:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800839a:	3304      	adds	r3, #4
 800839c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 80083a0:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 80083a4:	f000 ffda 	bl	800935c <CRYP_DataOut>
 80083a8:	4603      	mov	r3, r0
 80083aa:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 80083ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80083b0:	3304      	adds	r3, #4
 80083b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  }
  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80083b6:	2000      	movs	r0, #0
 80083b8:	f000 ffa6 	bl	8009308 <CRYP_Cmd>

  return status;
 80083bc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80083c6:	46bd      	mov	sp, r7
 80083c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080083cc <CRYP_AES_CCM>:
                         uint8_t *Key, uint16_t Keysize,
                         uint8_t *Input, uint32_t ILength,
                         uint8_t *Header, uint32_t HLength, uint8_t *HBuffer,
                         uint8_t *Output,
                         uint8_t *AuthTAG, uint32_t TAGSize)
{
 80083cc:	b590      	push	{r4, r7, lr}
 80083ce:	b0c5      	sub	sp, #276	; 0x114
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	f107 0408 	add.w	r4, r7, #8
 80083d6:	6021      	str	r1, [r4, #0]
 80083d8:	1d39      	adds	r1, r7, #4
 80083da:	600a      	str	r2, [r1, #0]
 80083dc:	463a      	mov	r2, r7
 80083de:	6013      	str	r3, [r2, #0]
 80083e0:	f107 030f 	add.w	r3, r7, #15
 80083e4:	4602      	mov	r2, r0
 80083e6:	701a      	strb	r2, [r3, #0]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 80083e8:	2300      	movs	r3, #0
 80083ea:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t busystatus = 0;
 80083ec:	2300      	movs	r3, #0
 80083ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  ErrorStatus status = SUCCESS;
 80083f2:	2301      	movs	r3, #1
 80083f4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  uint32_t keyaddr    = (uint32_t)Key;
 80083f8:	463b      	mov	r3, r7
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  uint32_t inputaddr  = (uint32_t)Input;
 8008400:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008404:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  uint32_t outputaddr = (uint32_t)Output;
 8008408:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800840c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  uint32_t headeraddr = (uint32_t)Header;
 8008410:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008414:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  uint32_t tagaddr = (uint32_t)AuthTAG;
 8008418:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800841c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  uint32_t headersize = HLength;
 8008420:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008424:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  uint32_t loopcounter = 0;
 8008428:	2300      	movs	r3, #0
 800842a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  uint32_t bufferidx = 0;
 800842e:	2300      	movs	r3, #0
 8008430:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  uint8_t blockb0[16] = {0};/* Block B0 */
 8008434:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008438:	2200      	movs	r2, #0
 800843a:	601a      	str	r2, [r3, #0]
 800843c:	3304      	adds	r3, #4
 800843e:	2200      	movs	r2, #0
 8008440:	601a      	str	r2, [r3, #0]
 8008442:	3304      	adds	r3, #4
 8008444:	2200      	movs	r2, #0
 8008446:	601a      	str	r2, [r3, #0]
 8008448:	3304      	adds	r3, #4
 800844a:	2200      	movs	r2, #0
 800844c:	601a      	str	r2, [r3, #0]
 800844e:	3304      	adds	r3, #4
  uint8_t ctr[16] = {0}; /* Counter */
 8008450:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008454:	2200      	movs	r2, #0
 8008456:	601a      	str	r2, [r3, #0]
 8008458:	3304      	adds	r3, #4
 800845a:	2200      	movs	r2, #0
 800845c:	601a      	str	r2, [r3, #0]
 800845e:	3304      	adds	r3, #4
 8008460:	2200      	movs	r2, #0
 8008462:	601a      	str	r2, [r3, #0]
 8008464:	3304      	adds	r3, #4
 8008466:	2200      	movs	r2, #0
 8008468:	601a      	str	r2, [r3, #0]
 800846a:	3304      	adds	r3, #4
  uint32_t temptag[4] = {0}; /* temporary TAG (MAC) */
 800846c:	f107 0314 	add.w	r3, r7, #20
 8008470:	2200      	movs	r2, #0
 8008472:	601a      	str	r2, [r3, #0]
 8008474:	3304      	adds	r3, #4
 8008476:	2200      	movs	r2, #0
 8008478:	601a      	str	r2, [r3, #0]
 800847a:	3304      	adds	r3, #4
 800847c:	2200      	movs	r2, #0
 800847e:	601a      	str	r2, [r3, #0]
 8008480:	3304      	adds	r3, #4
 8008482:	2200      	movs	r2, #0
 8008484:	601a      	str	r2, [r3, #0]
 8008486:	3304      	adds	r3, #4
  uint32_t ctraddr = (uint32_t)ctr;
 8008488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800848c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t b0addr = (uint32_t)blockb0;
 8008490:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008494:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  
  /************************ Formatting the header block ***********************/
  if(headersize != 0)
 8008498:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800849c:	2b00      	cmp	r3, #0
 800849e:	f000 80b0 	beq.w	8008602 <CRYP_AES_CCM+0x236>
  {
    /* Check that the associated data (or header) length is lower than 2^16 - 2^8 = 65536 - 256 = 65280 */
    if(headersize < 65280)
 80084a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084a6:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 80084aa:	d21e      	bcs.n	80084ea <CRYP_AES_CCM+0x11e>
    {
      HBuffer[bufferidx++] = (uint8_t) ((headersize >> 8) & 0xFF);
 80084ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084b0:	1c5a      	adds	r2, r3, #1
 80084b2:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80084b6:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80084ba:	4413      	add	r3, r2
 80084bc:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80084c0:	0a12      	lsrs	r2, r2, #8
 80084c2:	b2d2      	uxtb	r2, r2
 80084c4:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = (uint8_t) ((headersize) & 0xFF);
 80084c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084ca:	1c5a      	adds	r2, r3, #1
 80084cc:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80084d0:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80084d4:	4413      	add	r3, r2
 80084d6:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80084da:	b2d2      	uxtb	r2, r2
 80084dc:	701a      	strb	r2, [r3, #0]
      headersize += 2;
 80084de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084e2:	3302      	adds	r3, #2
 80084e4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80084e8:	e042      	b.n	8008570 <CRYP_AES_CCM+0x1a4>
    }
    else
    {
      /* header is encoded as 0xff || 0xfe || [headersize]32, i.e., six octets */
      HBuffer[bufferidx++] = 0xFF;
 80084ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084ee:	1c5a      	adds	r2, r3, #1
 80084f0:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80084f4:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80084f8:	4413      	add	r3, r2
 80084fa:	22ff      	movs	r2, #255	; 0xff
 80084fc:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = 0xFE;
 80084fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008502:	1c5a      	adds	r2, r3, #1
 8008504:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8008508:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800850c:	4413      	add	r3, r2
 800850e:	22fe      	movs	r2, #254	; 0xfe
 8008510:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = headersize & 0xff000000;
 8008512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008516:	1c5a      	adds	r2, r3, #1
 8008518:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800851c:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8008520:	4413      	add	r3, r2
 8008522:	2200      	movs	r2, #0
 8008524:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = headersize & 0x00ff0000;
 8008526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800852a:	1c5a      	adds	r2, r3, #1
 800852c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8008530:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8008534:	4413      	add	r3, r2
 8008536:	2200      	movs	r2, #0
 8008538:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = headersize & 0x0000ff00;
 800853a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800853e:	1c5a      	adds	r2, r3, #1
 8008540:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8008544:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8008548:	4413      	add	r3, r2
 800854a:	2200      	movs	r2, #0
 800854c:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = headersize & 0x000000ff;
 800854e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008552:	1c5a      	adds	r2, r3, #1
 8008554:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8008558:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800855c:	4413      	add	r3, r2
 800855e:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8008562:	b2d2      	uxtb	r2, r2
 8008564:	701a      	strb	r2, [r3, #0]
      headersize += 6;
 8008566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800856a:	3306      	adds	r3, #6
 800856c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    }
    /* Copy the header buffer in internal buffer "HBuffer" */
    for(loopcounter = 0; loopcounter < headersize; loopcounter++)
 8008570:	2300      	movs	r3, #0
 8008572:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008576:	e013      	b.n	80085a0 <CRYP_AES_CCM+0x1d4>
    {
      HBuffer[bufferidx++] = Header[loopcounter];
 8008578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800857c:	1c5a      	adds	r2, r3, #1
 800857e:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8008582:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8008586:	4413      	add	r3, r2
 8008588:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800858c:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8008590:	440a      	add	r2, r1
 8008592:	7812      	ldrb	r2, [r2, #0]
 8008594:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = headersize & 0x0000ff00;
      HBuffer[bufferidx++] = headersize & 0x000000ff;
      headersize += 6;
    }
    /* Copy the header buffer in internal buffer "HBuffer" */
    for(loopcounter = 0; loopcounter < headersize; loopcounter++)
 8008596:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800859a:	3301      	adds	r3, #1
 800859c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80085a0:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80085a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d3e5      	bcc.n	8008578 <CRYP_AES_CCM+0x1ac>
    {
      HBuffer[bufferidx++] = Header[loopcounter];
    }
    /* Check if the header size is modulo 16 */
    if ((headersize % 16) != 0)
 80085ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085b0:	f003 030f 	and.w	r3, r3, #15
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d020      	beq.n	80085fa <CRYP_AES_CCM+0x22e>
    {
      /* Padd the header buffer with 0s till the HBuffer length is modulo 16 */
      for(loopcounter = headersize; loopcounter <= ((headersize/16) + 1) * 16; loopcounter++)
 80085b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80085c0:	e00b      	b.n	80085da <CRYP_AES_CCM+0x20e>
      {
        HBuffer[loopcounter] = 0;
 80085c2:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80085c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80085ca:	4413      	add	r3, r2
 80085cc:	2200      	movs	r2, #0
 80085ce:	701a      	strb	r2, [r3, #0]
    }
    /* Check if the header size is modulo 16 */
    if ((headersize % 16) != 0)
    {
      /* Padd the header buffer with 0s till the HBuffer length is modulo 16 */
      for(loopcounter = headersize; loopcounter <= ((headersize/16) + 1) * 16; loopcounter++)
 80085d0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80085d4:	3301      	adds	r3, #1
 80085d6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80085da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085de:	091b      	lsrs	r3, r3, #4
 80085e0:	3301      	adds	r3, #1
 80085e2:	011a      	lsls	r2, r3, #4
 80085e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d2ea      	bcs.n	80085c2 <CRYP_AES_CCM+0x1f6>
      {
        HBuffer[loopcounter] = 0;
      }
      /* Set the header size to modulo 16 */
      headersize = ((headersize/16) + 1) * 16;
 80085ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085f0:	091b      	lsrs	r3, r3, #4
 80085f2:	3301      	adds	r3, #1
 80085f4:	011b      	lsls	r3, r3, #4
 80085f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    }
    /* set the pointer headeraddr to HBuffer */
    headeraddr = (uint32_t)HBuffer;
 80085fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80085fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  }
  /************************* Formatting the block B0 **************************/
  if(headersize != 0)
 8008602:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008606:	2b00      	cmp	r3, #0
 8008608:	d002      	beq.n	8008610 <CRYP_AES_CCM+0x244>
  {
    blockb0[0] = 0x40;
 800860a:	2340      	movs	r3, #64	; 0x40
 800860c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  }
  /* Flags byte */
  blockb0[0] |= 0u | (((( (uint8_t) TAGSize - 2) / 2) & 0x07 ) << 3 ) | ( ( (uint8_t) (15 - NonceSize) - 1) & 0x07);
 8008610:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8008614:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008618:	b2db      	uxtb	r3, r3
 800861a:	3b02      	subs	r3, #2
 800861c:	0fd9      	lsrs	r1, r3, #31
 800861e:	440b      	add	r3, r1
 8008620:	105b      	asrs	r3, r3, #1
 8008622:	b2db      	uxtb	r3, r3
 8008624:	f003 0307 	and.w	r3, r3, #7
 8008628:	b2db      	uxtb	r3, r3
 800862a:	00db      	lsls	r3, r3, #3
 800862c:	b2d9      	uxtb	r1, r3
 800862e:	1d3b      	adds	r3, r7, #4
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	b2db      	uxtb	r3, r3
 8008634:	f1c3 030e 	rsb	r3, r3, #14
 8008638:	b2db      	uxtb	r3, r3
 800863a:	f003 0307 	and.w	r3, r3, #7
 800863e:	b2db      	uxtb	r3, r3
 8008640:	430b      	orrs	r3, r1
 8008642:	b2db      	uxtb	r3, r3
 8008644:	4313      	orrs	r3, r2
 8008646:	b2db      	uxtb	r3, r3
 8008648:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  
  for (loopcounter = 0; loopcounter < NonceSize; loopcounter++)
 800864c:	2300      	movs	r3, #0
 800864e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008652:	e013      	b.n	800867c <CRYP_AES_CCM+0x2b0>
  {
    blockb0[loopcounter+1] = Nonce[loopcounter];
 8008654:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008658:	3301      	adds	r3, #1
 800865a:	f107 0208 	add.w	r2, r7, #8
 800865e:	6811      	ldr	r1, [r2, #0]
 8008660:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8008664:	440a      	add	r2, r1
 8008666:	7812      	ldrb	r2, [r2, #0]
 8008668:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800866c:	440b      	add	r3, r1
 800866e:	f803 2cdc 	strb.w	r2, [r3, #-220]
    blockb0[0] = 0x40;
  }
  /* Flags byte */
  blockb0[0] |= 0u | (((( (uint8_t) TAGSize - 2) / 2) & 0x07 ) << 3 ) | ( ( (uint8_t) (15 - NonceSize) - 1) & 0x07);
  
  for (loopcounter = 0; loopcounter < NonceSize; loopcounter++)
 8008672:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008676:	3301      	adds	r3, #1
 8008678:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800867c:	1d3b      	adds	r3, r7, #4
 800867e:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	429a      	cmp	r2, r3
 8008686:	d3e5      	bcc.n	8008654 <CRYP_AES_CCM+0x288>
  {
    blockb0[loopcounter+1] = Nonce[loopcounter];
  }
  for ( ; loopcounter < 13; loopcounter++)
 8008688:	e00d      	b.n	80086a6 <CRYP_AES_CCM+0x2da>
  {
    blockb0[loopcounter+1] = 0;
 800868a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800868e:	3301      	adds	r3, #1
 8008690:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8008694:	4413      	add	r3, r2
 8008696:	2200      	movs	r2, #0
 8008698:	f803 2cdc 	strb.w	r2, [r3, #-220]
  
  for (loopcounter = 0; loopcounter < NonceSize; loopcounter++)
  {
    blockb0[loopcounter+1] = Nonce[loopcounter];
  }
  for ( ; loopcounter < 13; loopcounter++)
 800869c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80086a0:	3301      	adds	r3, #1
 80086a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80086a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80086aa:	2b0c      	cmp	r3, #12
 80086ac:	d9ed      	bls.n	800868a <CRYP_AES_CCM+0x2be>
  {
    blockb0[loopcounter+1] = 0;
  }
  
  blockb0[14] = ((ILength >> 8) & 0xFF);
 80086ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086b2:	0a1b      	lsrs	r3, r3, #8
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  blockb0[15] = (ILength & 0xFF);
 80086ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
     Bits 7 and 6 are reserved and shall be set to 0
     Bits 3, 4, and 5 shall also be set to 0, to ensure that all the counter blocks
     are distinct from B0
     Bits 0, 1, and 2 contain the same encoding of q as in B0
  */
  ctr[0] = blockb0[0] & 0x07;
 80086c4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80086c8:	f003 0307 	and.w	r3, r3, #7
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  /* byte 1 to NonceSize is the IV (Nonce) */
  for(loopcounter = 1; loopcounter < NonceSize + 1; loopcounter++)
 80086d2:	2301      	movs	r3, #1
 80086d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80086d8:	e010      	b.n	80086fc <CRYP_AES_CCM+0x330>
  {
    ctr[loopcounter] = blockb0[loopcounter];
 80086da:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80086de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80086e2:	4413      	add	r3, r2
 80086e4:	781a      	ldrb	r2, [r3, #0]
 80086e6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80086ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80086ee:	440b      	add	r3, r1
 80086f0:	701a      	strb	r2, [r3, #0]
     are distinct from B0
     Bits 0, 1, and 2 contain the same encoding of q as in B0
  */
  ctr[0] = blockb0[0] & 0x07;
  /* byte 1 to NonceSize is the IV (Nonce) */
  for(loopcounter = 1; loopcounter < NonceSize + 1; loopcounter++)
 80086f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80086f6:	3301      	adds	r3, #1
 80086f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80086fc:	1d3b      	adds	r3, r7, #4
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	1c5a      	adds	r2, r3, #1
 8008702:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008706:	429a      	cmp	r2, r3
 8008708:	d8e7      	bhi.n	80086da <CRYP_AES_CCM+0x30e>
  {
    ctr[loopcounter] = blockb0[loopcounter];
  }
  /* Set the LSB to 1 */
  ctr[15] |= 0x01;
 800870a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800870e:	f043 0301 	orr.w	r3, r3, #1
 8008712:	b2db      	uxtb	r3, r3
 8008714:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  
  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8008718:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800871c:	4618      	mov	r0, r3
 800871e:	f000 fd75 	bl	800920c <CRYP_KeyStructInit>
  
  switch(Keysize)
 8008722:	f8b7 3120 	ldrh.w	r3, [r7, #288]	; 0x120
 8008726:	2bc0      	cmp	r3, #192	; 0xc0
 8008728:	d03d      	beq.n	80087a6 <CRYP_AES_CCM+0x3da>
 800872a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800872e:	f000 808e 	beq.w	800884e <CRYP_AES_CCM+0x482>
 8008732:	2b80      	cmp	r3, #128	; 0x80
 8008734:	d000      	beq.n	8008738 <CRYP_AES_CCM+0x36c>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    default:
    break;
 8008736:	e0fa      	b.n	800892e <CRYP_AES_CCM+0x562>
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
  
  switch(Keysize)
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8008738:	2300      	movs	r3, #0
 800873a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800873e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008748:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800874c:	ba1b      	rev	r3, r3
 800874e:	66bb      	str	r3, [r7, #104]	; 0x68
    keyaddr+=4;
 8008750:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008754:	3304      	adds	r3, #4
 8008756:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 800875a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008764:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008768:	ba1b      	rev	r3, r3
 800876a:	66fb      	str	r3, [r7, #108]	; 0x6c
    keyaddr+=4;
 800876c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008770:	3304      	adds	r3, #4
 8008772:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8008776:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008780:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008784:	ba1b      	rev	r3, r3
 8008786:	673b      	str	r3, [r7, #112]	; 0x70
    keyaddr+=4;
 8008788:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800878c:	3304      	adds	r3, #4
 800878e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8008792:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800879c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80087a0:	ba1b      	rev	r3, r3
 80087a2:	677b      	str	r3, [r7, #116]	; 0x74
    break;
 80087a4:	e0c3      	b.n	800892e <CRYP_AES_CCM+0x562>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 80087a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80087ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80087b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80087bc:	ba1b      	rev	r3, r3
 80087be:	663b      	str	r3, [r7, #96]	; 0x60
    keyaddr+=4;
 80087c0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087c4:	3304      	adds	r3, #4
 80087c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80087ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80087d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80087d8:	ba1b      	rev	r3, r3
 80087da:	667b      	str	r3, [r7, #100]	; 0x64
    keyaddr+=4;
 80087dc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087e0:	3304      	adds	r3, #4
 80087e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80087e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80087f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80087f4:	ba1b      	rev	r3, r3
 80087f6:	66bb      	str	r3, [r7, #104]	; 0x68
    keyaddr+=4;
 80087f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087fc:	3304      	adds	r3, #4
 80087fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8008802:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800880c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008810:	ba1b      	rev	r3, r3
 8008812:	66fb      	str	r3, [r7, #108]	; 0x6c
    keyaddr+=4;
 8008814:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008818:	3304      	adds	r3, #4
 800881a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 800881e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008828:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800882c:	ba1b      	rev	r3, r3
 800882e:	673b      	str	r3, [r7, #112]	; 0x70
    keyaddr+=4;
 8008830:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008834:	3304      	adds	r3, #4
 8008836:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 800883a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008844:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008848:	ba1b      	rev	r3, r3
 800884a:	677b      	str	r3, [r7, #116]	; 0x74
    break;
 800884c:	e06f      	b.n	800892e <CRYP_AES_CCM+0x562>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 800884e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008852:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8008856:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008860:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008864:	ba1b      	rev	r3, r3
 8008866:	65bb      	str	r3, [r7, #88]	; 0x58
    keyaddr+=4;
 8008868:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800886c:	3304      	adds	r3, #4
 800886e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8008872:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800887c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008880:	ba1b      	rev	r3, r3
 8008882:	65fb      	str	r3, [r7, #92]	; 0x5c
    keyaddr+=4;
 8008884:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008888:	3304      	adds	r3, #4
 800888a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 800888e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008898:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800889c:	ba1b      	rev	r3, r3
 800889e:	663b      	str	r3, [r7, #96]	; 0x60
    keyaddr+=4;
 80088a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80088a4:	3304      	adds	r3, #4
 80088a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80088aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80088b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80088b8:	ba1b      	rev	r3, r3
 80088ba:	667b      	str	r3, [r7, #100]	; 0x64
    keyaddr+=4;
 80088bc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80088c0:	3304      	adds	r3, #4
 80088c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80088c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80088d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80088d4:	ba1b      	rev	r3, r3
 80088d6:	66bb      	str	r3, [r7, #104]	; 0x68
    keyaddr+=4;
 80088d8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80088dc:	3304      	adds	r3, #4
 80088de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80088e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80088ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80088f0:	ba1b      	rev	r3, r3
 80088f2:	66fb      	str	r3, [r7, #108]	; 0x6c
    keyaddr+=4;
 80088f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80088f8:	3304      	adds	r3, #4
 80088fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80088fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008908:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800890c:	ba1b      	rev	r3, r3
 800890e:	673b      	str	r3, [r7, #112]	; 0x70
    keyaddr+=4;
 8008910:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008914:	3304      	adds	r3, #4
 8008916:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 800891a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008924:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008928:	ba1b      	rev	r3, r3
 800892a:	677b      	str	r3, [r7, #116]	; 0x74
    break;
 800892c:	bf00      	nop
    default:
    break;
  }
  
  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = (__REV(*(uint32_t*)(ctraddr)));
 800892e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008938:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800893c:	ba1b      	rev	r3, r3
 800893e:	64bb      	str	r3, [r7, #72]	; 0x48
  ctraddr+=4;
 8008940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008944:	3304      	adds	r3, #4
 8008946:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  AES_CRYP_IVInitStructure.CRYP_IV0Right= (__REV(*(uint32_t*)(ctraddr)));
 800894a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008954:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008958:	ba1b      	rev	r3, r3
 800895a:	64fb      	str	r3, [r7, #76]	; 0x4c
  ctraddr+=4;
 800895c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008960:	3304      	adds	r3, #4
 8008962:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  AES_CRYP_IVInitStructure.CRYP_IV1Left = (__REV(*(uint32_t*)(ctraddr)));
 8008966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008970:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008974:	ba1b      	rev	r3, r3
 8008976:	653b      	str	r3, [r7, #80]	; 0x50
  ctraddr+=4;
 8008978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800897c:	3304      	adds	r3, #4
 800897e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  AES_CRYP_IVInitStructure.CRYP_IV1Right= (__REV(*(uint32_t*)(ctraddr)));
 8008982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800898c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008990:	ba1b      	rev	r3, r3
 8008992:	657b      	str	r3, [r7, #84]	; 0x54
  
  /*------------------ AES Encryption ------------------*/
  if(Mode == MODE_ENCRYPT) /* AES encryption */
 8008994:	f107 030f 	add.w	r3, r7, #15
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	2b01      	cmp	r3, #1
 800899c:	f040 81b9 	bne.w	8008d12 <CRYP_AES_CCM+0x946>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 80089a0:	f000 fca4 	bl	80092ec <CRYP_FIFOFlush>
    
    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 80089a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80089a8:	4618      	mov	r0, r3
 80089aa:	f000 fc03 	bl	80091b4 <CRYP_KeyInit>
    
    /* CRYP Initialization Vectors */
    CRYP_IVInit(&AES_CRYP_IVInitStructure);
 80089ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80089b2:	4618      	mov	r0, r3
 80089b4:	f000 fc4c 	bl	8009250 <CRYP_IVInit>
    
    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 80089b8:	2300      	movs	r3, #0
 80089ba:	67bb      	str	r3, [r7, #120]	; 0x78
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CCM;
 80089bc:	f04f 1308 	mov.w	r3, #524296	; 0x80008
 80089c0:	67fb      	str	r3, [r7, #124]	; 0x7c
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 80089c2:	2380      	movs	r3, #128	; 0x80
 80089c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    CRYP_Init(&AES_CRYP_InitStructure);
 80089c8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80089cc:	4618      	mov	r0, r3
 80089ce:	f000 fb89 	bl	80090e4 <CRYP_Init>
    
    /***************************** Init phase *********************************/
    /* Select init phase */
    CRYP_PhaseConfig(CRYP_Phase_Init);
 80089d2:	2000      	movs	r0, #0
 80089d4:	f000 fc6e 	bl	80092b4 <CRYP_PhaseConfig>
    
    b0addr = (uint32_t)blockb0;
 80089d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80089dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    /* Write the blockb0 block in the IN FIFO */
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 80089e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4618      	mov	r0, r3
 80089e8:	f000 fcaa 	bl	8009340 <CRYP_DataIn>
    b0addr+=4;
 80089ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089f0:	3304      	adds	r3, #4
 80089f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 80089f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4618      	mov	r0, r3
 80089fe:	f000 fc9f 	bl	8009340 <CRYP_DataIn>
    b0addr+=4;
 8008a02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a06:	3304      	adds	r3, #4
 8008a08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 8008a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4618      	mov	r0, r3
 8008a14:	f000 fc94 	bl	8009340 <CRYP_DataIn>
    b0addr+=4;
 8008a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a1c:	3304      	adds	r3, #4
 8008a1e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 8008a22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f000 fc89 	bl	8009340 <CRYP_DataIn>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8008a2e:	2001      	movs	r0, #1
 8008a30:	f000 fc6a 	bl	8009308 <CRYP_Cmd>
    
    /* Wait for CRYPEN bit to be 0 */
    while(CRYP_GetCmdStatus() == ENABLE)
 8008a34:	bf00      	nop
 8008a36:	f000 fe4b 	bl	80096d0 <CRYP_GetCmdStatus>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d0fa      	beq.n	8008a36 <CRYP_AES_CCM+0x66a>
    {
    }
    /***************************** header phase *******************************/
    if(headersize != 0)
 8008a40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d069      	beq.n	8008b1c <CRYP_AES_CCM+0x750>
    {
      /* Select header phase */
      CRYP_PhaseConfig(CRYP_Phase_Header);
 8008a48:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008a4c:	f000 fc32 	bl	80092b4 <CRYP_PhaseConfig>
      
      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 8008a50:	2001      	movs	r0, #1
 8008a52:	f000 fc59 	bl	8009308 <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 8008a56:	f000 fe3b 	bl	80096d0 <CRYP_GetCmdStatus>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d101      	bne.n	8008a64 <CRYP_AES_CCM+0x698>
      {
         /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
            the CRYP peripheral (please check the device sales type. */
         return(ERROR);
 8008a60:	2300      	movs	r3, #0
 8008a62:	e32e      	b.n	80090c2 <CRYP_AES_CCM+0xcf6>
      }
      
      for(loopcounter = 0; (loopcounter < headersize); loopcounter+=16)
 8008a64:	2300      	movs	r3, #0
 8008a66:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008a6a:	e037      	b.n	8008adc <CRYP_AES_CCM+0x710>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 8008a6c:	bf00      	nop
 8008a6e:	2001      	movs	r0, #1
 8008a70:	f000 fe48 	bl	8009704 <CRYP_GetFlagStatus>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d0f9      	beq.n	8008a6e <CRYP_AES_CCM+0x6a2>
        {
        }
        
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8008a7a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4618      	mov	r0, r3
 8008a82:	f000 fc5d 	bl	8009340 <CRYP_DataIn>
        headeraddr+=4;
 8008a86:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008a8a:	3304      	adds	r3, #4
 8008a8c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8008a90:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4618      	mov	r0, r3
 8008a98:	f000 fc52 	bl	8009340 <CRYP_DataIn>
        headeraddr+=4;
 8008a9c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008aa0:	3304      	adds	r3, #4
 8008aa2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8008aa6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4618      	mov	r0, r3
 8008aae:	f000 fc47 	bl	8009340 <CRYP_DataIn>
        headeraddr+=4;
 8008ab2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008ab6:	3304      	adds	r3, #4
 8008ab8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8008abc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f000 fc3c 	bl	8009340 <CRYP_DataIn>
        headeraddr+=4;
 8008ac8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008acc:	3304      	adds	r3, #4
 8008ace:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
         /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
            the CRYP peripheral (please check the device sales type. */
         return(ERROR);
      }
      
      for(loopcounter = 0; (loopcounter < headersize); loopcounter+=16)
 8008ad2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008ad6:	3310      	adds	r3, #16
 8008ad8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008adc:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8008ae0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d3c1      	bcc.n	8008a6c <CRYP_AES_CCM+0x6a0>
        CRYP_DataIn(*(uint32_t*)(headeraddr));
        headeraddr+=4;
      }
      
      /* Wait until the complete message has been processed */
      counter = 0;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	647b      	str	r3, [r7, #68]	; 0x44
      do
      {
        busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8008aec:	2010      	movs	r0, #16
 8008aee:	f000 fe09 	bl	8009704 <CRYP_GetFlagStatus>
 8008af2:	4603      	mov	r3, r0
 8008af4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
        counter++;
 8008af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008afa:	3301      	adds	r3, #1
 8008afc:	647b      	str	r3, [r7, #68]	; 0x44
      }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8008afe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b04:	d003      	beq.n	8008b0e <CRYP_AES_CCM+0x742>
 8008b06:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d1ee      	bne.n	8008aec <CRYP_AES_CCM+0x720>

      if (busystatus != RESET)
 8008b0e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d002      	beq.n	8008b1c <CRYP_AES_CCM+0x750>
      {
        status = ERROR;
 8008b16:	2300      	movs	r3, #0
 8008b18:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
      }
    }
    
    /**************************** payload phase *******************************/
    if(ILength != 0)
 8008b1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	f000 80a3 	beq.w	8008c6c <CRYP_AES_CCM+0x8a0>
    {
      /* Select payload phase */
      CRYP_PhaseConfig(CRYP_Phase_Payload);
 8008b26:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8008b2a:	f000 fbc3 	bl	80092b4 <CRYP_PhaseConfig>
      
      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 8008b2e:	2001      	movs	r0, #1
 8008b30:	f000 fbea 	bl	8009308 <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 8008b34:	f000 fdcc 	bl	80096d0 <CRYP_GetCmdStatus>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d101      	bne.n	8008b42 <CRYP_AES_CCM+0x776>
      {
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
 8008b3e:	2300      	movs	r3, #0
 8008b40:	e2bf      	b.n	80090c2 <CRYP_AES_CCM+0xcf6>
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 8008b42:	2300      	movs	r3, #0
 8008b44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008b48:	e085      	b.n	8008c56 <CRYP_AES_CCM+0x88a>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 8008b4a:	bf00      	nop
 8008b4c:	2001      	movs	r0, #1
 8008b4e:	f000 fdd9 	bl	8009704 <CRYP_GetFlagStatus>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d0f9      	beq.n	8008b4c <CRYP_AES_CCM+0x780>
        {
        }
        
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8008b58:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f000 fbee 	bl	8009340 <CRYP_DataIn>
        inputaddr+=4;
 8008b64:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b68:	3304      	adds	r3, #4
 8008b6a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8008b6e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4618      	mov	r0, r3
 8008b76:	f000 fbe3 	bl	8009340 <CRYP_DataIn>
        inputaddr+=4;
 8008b7a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b7e:	3304      	adds	r3, #4
 8008b80:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8008b84:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f000 fbd8 	bl	8009340 <CRYP_DataIn>
        inputaddr+=4;
 8008b90:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b94:	3304      	adds	r3, #4
 8008b96:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8008b9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f000 fbcd 	bl	8009340 <CRYP_DataIn>
        inputaddr+=4;
 8008ba6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008baa:	3304      	adds	r3, #4
 8008bac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        
        /* Wait until the complete message has been processed */
        counter = 0;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	647b      	str	r3, [r7, #68]	; 0x44
        do
        {
          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8008bb4:	2010      	movs	r0, #16
 8008bb6:	f000 fda5 	bl	8009704 <CRYP_GetFlagStatus>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
          counter++;
 8008bc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	647b      	str	r3, [r7, #68]	; 0x44
        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8008bc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bcc:	d003      	beq.n	8008bd6 <CRYP_AES_CCM+0x80a>
 8008bce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d1ee      	bne.n	8008bb4 <CRYP_AES_CCM+0x7e8>

        if (busystatus != RESET)
 8008bd6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d003      	beq.n	8008be6 <CRYP_AES_CCM+0x81a>
        {
          status = ERROR;
 8008bde:	2300      	movs	r3, #0
 8008be0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8008be4:	e032      	b.n	8008c4c <CRYP_AES_CCM+0x880>
        }
        else
        {
          /* Wait until the OFNE flag is reset */
          while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 8008be6:	bf00      	nop
 8008be8:	2004      	movs	r0, #4
 8008bea:	f000 fd8b 	bl	8009704 <CRYP_GetFlagStatus>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d0f9      	beq.n	8008be8 <CRYP_AES_CCM+0x81c>
          {
          }
          
          /* Read the Output block from the Output FIFO */
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008bf4:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8008bf8:	f000 fbb0 	bl	800935c <CRYP_DataOut>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8008c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c04:	3304      	adds	r3, #4
 8008c06:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008c0a:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8008c0e:	f000 fba5 	bl	800935c <CRYP_DataOut>
 8008c12:	4603      	mov	r3, r0
 8008c14:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8008c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c1a:	3304      	adds	r3, #4
 8008c1c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008c20:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8008c24:	f000 fb9a 	bl	800935c <CRYP_DataOut>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8008c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c30:	3304      	adds	r3, #4
 8008c32:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008c36:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8008c3a:	f000 fb8f 	bl	800935c <CRYP_DataOut>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8008c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c46:	3304      	adds	r3, #4
 8008c48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 8008c4c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008c50:	3310      	adds	r3, #16
 8008c52:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008c56:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8008c5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d204      	bcs.n	8008c6c <CRYP_AES_CCM+0x8a0>
 8008c62:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	f47f af6f 	bne.w	8008b4a <CRYP_AES_CCM+0x77e>
      }
    }
    
    /***************************** final phase ********************************/
    /* Select final phase */
    CRYP_PhaseConfig(CRYP_Phase_Final);
 8008c6c:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8008c70:	f000 fb20 	bl	80092b4 <CRYP_PhaseConfig>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8008c74:	2001      	movs	r0, #1
 8008c76:	f000 fb47 	bl	8009308 <CRYP_Cmd>
    
    if(CRYP_GetCmdStatus() == DISABLE)
 8008c7a:	f000 fd29 	bl	80096d0 <CRYP_GetCmdStatus>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d101      	bne.n	8008c88 <CRYP_AES_CCM+0x8bc>
    {
      /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
         the CRYP peripheral (please check the device sales type. */
      return(ERROR);
 8008c84:	2300      	movs	r3, #0
 8008c86:	e21c      	b.n	80090c2 <CRYP_AES_CCM+0xcf6>
    }
    
    ctraddr = (uint32_t)ctr;
 8008c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c8c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    /* Write the counter block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(ctraddr));
 8008c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4618      	mov	r0, r3
 8008c98:	f000 fb52 	bl	8009340 <CRYP_DataIn>
    ctraddr+=4;
 8008c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ca0:	3304      	adds	r3, #4
 8008ca2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    CRYP_DataIn(*(uint32_t*)(ctraddr));
 8008ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4618      	mov	r0, r3
 8008cae:	f000 fb47 	bl	8009340 <CRYP_DataIn>
    ctraddr+=4;
 8008cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cb6:	3304      	adds	r3, #4
 8008cb8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    CRYP_DataIn(*(uint32_t*)(ctraddr));
 8008cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f000 fb3c 	bl	8009340 <CRYP_DataIn>
    ctraddr+=4;
 8008cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ccc:	3304      	adds	r3, #4
 8008cce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    /* Reset bit 0 (after 8-bit swap) is equivalent to reset bit 24 (before 8-bit swap) */
    CRYP_DataIn(*(uint32_t*)(ctraddr) & 0xfeffffff);
 8008cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f000 fb2f 	bl	8009340 <CRYP_DataIn>
    
    /* Wait until the OFNE flag is reset */
    while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 8008ce2:	bf00      	nop
 8008ce4:	2004      	movs	r0, #4
 8008ce6:	f000 fd0d 	bl	8009704 <CRYP_GetFlagStatus>
 8008cea:	4603      	mov	r3, r0
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d0f9      	beq.n	8008ce4 <CRYP_AES_CCM+0x918>
    {
    }
    
    /* Read the Auth TAG in the IN FIFO */
    temptag[0] = CRYP_DataOut();
 8008cf0:	f000 fb34 	bl	800935c <CRYP_DataOut>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	617b      	str	r3, [r7, #20]
    temptag[1] = CRYP_DataOut();
 8008cf8:	f000 fb30 	bl	800935c <CRYP_DataOut>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	61bb      	str	r3, [r7, #24]
    temptag[2] = CRYP_DataOut();
 8008d00:	f000 fb2c 	bl	800935c <CRYP_DataOut>
 8008d04:	4603      	mov	r3, r0
 8008d06:	61fb      	str	r3, [r7, #28]
    temptag[3] = CRYP_DataOut();
 8008d08:	f000 fb28 	bl	800935c <CRYP_DataOut>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	623b      	str	r3, [r7, #32]
 8008d10:	e1b7      	b.n	8009082 <CRYP_AES_CCM+0xcb6>
  }
  /*------------------ AES Decryption ------------------*/
  else /* AES decryption */
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 8008d12:	f000 faeb 	bl	80092ec <CRYP_FIFOFlush>
    
    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8008d16:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f000 fa4a 	bl	80091b4 <CRYP_KeyInit>
    
    /* CRYP Initialization Vectors */
    CRYP_IVInit(&AES_CRYP_IVInitStructure);
 8008d20:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008d24:	4618      	mov	r0, r3
 8008d26:	f000 fa93 	bl	8009250 <CRYP_IVInit>
    
    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8008d2a:	2304      	movs	r3, #4
 8008d2c:	67bb      	str	r3, [r7, #120]	; 0x78
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CCM;
 8008d2e:	f04f 1308 	mov.w	r3, #524296	; 0x80008
 8008d32:	67fb      	str	r3, [r7, #124]	; 0x7c
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8008d34:	2380      	movs	r3, #128	; 0x80
 8008d36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    CRYP_Init(&AES_CRYP_InitStructure);
 8008d3a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f000 f9d0 	bl	80090e4 <CRYP_Init>
    
    /***************************** Init phase *********************************/
    /* Select init phase */
    CRYP_PhaseConfig(CRYP_Phase_Init);
 8008d44:	2000      	movs	r0, #0
 8008d46:	f000 fab5 	bl	80092b4 <CRYP_PhaseConfig>
    
    b0addr = (uint32_t)blockb0;
 8008d4a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008d4e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    /* Write the blockb0 block in the IN FIFO */
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 8008d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f000 faf1 	bl	8009340 <CRYP_DataIn>
    b0addr+=4;
 8008d5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d62:	3304      	adds	r3, #4
 8008d64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 8008d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f000 fae6 	bl	8009340 <CRYP_DataIn>
    b0addr+=4;
 8008d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d78:	3304      	adds	r3, #4
 8008d7a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 8008d7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4618      	mov	r0, r3
 8008d86:	f000 fadb 	bl	8009340 <CRYP_DataIn>
    b0addr+=4;
 8008d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d8e:	3304      	adds	r3, #4
 8008d90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 8008d94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f000 fad0 	bl	8009340 <CRYP_DataIn>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8008da0:	2001      	movs	r0, #1
 8008da2:	f000 fab1 	bl	8009308 <CRYP_Cmd>
    
    /* Wait for CRYPEN bit to be 0 */
    while(CRYP_GetCmdStatus() == ENABLE)
 8008da6:	bf00      	nop
 8008da8:	f000 fc92 	bl	80096d0 <CRYP_GetCmdStatus>
 8008dac:	4603      	mov	r3, r0
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	d0fa      	beq.n	8008da8 <CRYP_AES_CCM+0x9dc>
    {
    }
    
    /***************************** header phase *******************************/
    if(headersize != 0)
 8008db2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d069      	beq.n	8008e8e <CRYP_AES_CCM+0xac2>
    {
      /* Select header phase */
      CRYP_PhaseConfig(CRYP_Phase_Header);
 8008dba:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008dbe:	f000 fa79 	bl	80092b4 <CRYP_PhaseConfig>
      
      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 8008dc2:	2001      	movs	r0, #1
 8008dc4:	f000 faa0 	bl	8009308 <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 8008dc8:	f000 fc82 	bl	80096d0 <CRYP_GetCmdStatus>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d101      	bne.n	8008dd6 <CRYP_AES_CCM+0xa0a>
      {
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	e175      	b.n	80090c2 <CRYP_AES_CCM+0xcf6>
      }
      
      for(loopcounter = 0; (loopcounter < headersize); loopcounter+=16)
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008ddc:	e037      	b.n	8008e4e <CRYP_AES_CCM+0xa82>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 8008dde:	bf00      	nop
 8008de0:	2001      	movs	r0, #1
 8008de2:	f000 fc8f 	bl	8009704 <CRYP_GetFlagStatus>
 8008de6:	4603      	mov	r3, r0
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d0f9      	beq.n	8008de0 <CRYP_AES_CCM+0xa14>
        {
        }
        
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8008dec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4618      	mov	r0, r3
 8008df4:	f000 faa4 	bl	8009340 <CRYP_DataIn>
        headeraddr+=4;
 8008df8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008dfc:	3304      	adds	r3, #4
 8008dfe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8008e02:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f000 fa99 	bl	8009340 <CRYP_DataIn>
        headeraddr+=4;
 8008e0e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008e12:	3304      	adds	r3, #4
 8008e14:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8008e18:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f000 fa8e 	bl	8009340 <CRYP_DataIn>
        headeraddr+=4;
 8008e24:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008e28:	3304      	adds	r3, #4
 8008e2a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8008e2e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4618      	mov	r0, r3
 8008e36:	f000 fa83 	bl	8009340 <CRYP_DataIn>
        headeraddr+=4;
 8008e3a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008e3e:	3304      	adds	r3, #4
 8008e40:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
      }
      
      for(loopcounter = 0; (loopcounter < headersize); loopcounter+=16)
 8008e44:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008e48:	3310      	adds	r3, #16
 8008e4a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008e4e:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8008e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d3c1      	bcc.n	8008dde <CRYP_AES_CCM+0xa12>
        CRYP_DataIn(*(uint32_t*)(headeraddr));
        headeraddr+=4;
      }
      
      /* Wait until the complete message has been processed */
      counter = 0;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	647b      	str	r3, [r7, #68]	; 0x44
      do
      {
        busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8008e5e:	2010      	movs	r0, #16
 8008e60:	f000 fc50 	bl	8009704 <CRYP_GetFlagStatus>
 8008e64:	4603      	mov	r3, r0
 8008e66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
        counter++;
 8008e6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	647b      	str	r3, [r7, #68]	; 0x44
      }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8008e70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e76:	d003      	beq.n	8008e80 <CRYP_AES_CCM+0xab4>
 8008e78:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d1ee      	bne.n	8008e5e <CRYP_AES_CCM+0xa92>

      if (busystatus != RESET)
 8008e80:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d002      	beq.n	8008e8e <CRYP_AES_CCM+0xac2>
      {
        status = ERROR;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
      }
    }
    
    /**************************** payload phase *******************************/
    if(ILength != 0)
 8008e8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	f000 80a3 	beq.w	8008fde <CRYP_AES_CCM+0xc12>
    {
      /* Select payload phase */
      CRYP_PhaseConfig(CRYP_Phase_Payload);
 8008e98:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8008e9c:	f000 fa0a 	bl	80092b4 <CRYP_PhaseConfig>

      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 8008ea0:	2001      	movs	r0, #1
 8008ea2:	f000 fa31 	bl	8009308 <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 8008ea6:	f000 fc13 	bl	80096d0 <CRYP_GetCmdStatus>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d101      	bne.n	8008eb4 <CRYP_AES_CCM+0xae8>
      {
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	e106      	b.n	80090c2 <CRYP_AES_CCM+0xcf6>
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008eba:	e085      	b.n	8008fc8 <CRYP_AES_CCM+0xbfc>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 8008ebc:	bf00      	nop
 8008ebe:	2001      	movs	r0, #1
 8008ec0:	f000 fc20 	bl	8009704 <CRYP_GetFlagStatus>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d0f9      	beq.n	8008ebe <CRYP_AES_CCM+0xaf2>
        {
        }
        
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8008eca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f000 fa35 	bl	8009340 <CRYP_DataIn>
        inputaddr+=4;
 8008ed6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008eda:	3304      	adds	r3, #4
 8008edc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8008ee0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f000 fa2a 	bl	8009340 <CRYP_DataIn>
        inputaddr+=4;
 8008eec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008ef0:	3304      	adds	r3, #4
 8008ef2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8008ef6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4618      	mov	r0, r3
 8008efe:	f000 fa1f 	bl	8009340 <CRYP_DataIn>
        inputaddr+=4;
 8008f02:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008f06:	3304      	adds	r3, #4
 8008f08:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8008f0c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4618      	mov	r0, r3
 8008f14:	f000 fa14 	bl	8009340 <CRYP_DataIn>
        inputaddr+=4;
 8008f18:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008f1c:	3304      	adds	r3, #4
 8008f1e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        
        /* Wait until the complete message has been processed */
        counter = 0;
 8008f22:	2300      	movs	r3, #0
 8008f24:	647b      	str	r3, [r7, #68]	; 0x44
        do
        {
          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8008f26:	2010      	movs	r0, #16
 8008f28:	f000 fbec 	bl	8009704 <CRYP_GetFlagStatus>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
          counter++;
 8008f32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f34:	3301      	adds	r3, #1
 8008f36:	647b      	str	r3, [r7, #68]	; 0x44
        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8008f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f3e:	d003      	beq.n	8008f48 <CRYP_AES_CCM+0xb7c>
 8008f40:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d1ee      	bne.n	8008f26 <CRYP_AES_CCM+0xb5a>

        if (busystatus != RESET)
 8008f48:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d003      	beq.n	8008f58 <CRYP_AES_CCM+0xb8c>
        {
          status = ERROR;
 8008f50:	2300      	movs	r3, #0
 8008f52:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8008f56:	e032      	b.n	8008fbe <CRYP_AES_CCM+0xbf2>
        }
        else
        {
          /* Wait until the OFNE flag is reset */
          while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 8008f58:	bf00      	nop
 8008f5a:	2004      	movs	r0, #4
 8008f5c:	f000 fbd2 	bl	8009704 <CRYP_GetFlagStatus>
 8008f60:	4603      	mov	r3, r0
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d0f9      	beq.n	8008f5a <CRYP_AES_CCM+0xb8e>
          {
          }
          
          /* Read the Output block from the Output FIFO */
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008f66:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8008f6a:	f000 f9f7 	bl	800935c <CRYP_DataOut>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8008f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f76:	3304      	adds	r3, #4
 8008f78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008f7c:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8008f80:	f000 f9ec 	bl	800935c <CRYP_DataOut>
 8008f84:	4603      	mov	r3, r0
 8008f86:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8008f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f8c:	3304      	adds	r3, #4
 8008f8e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008f92:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8008f96:	f000 f9e1 	bl	800935c <CRYP_DataOut>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8008f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fa2:	3304      	adds	r3, #4
 8008fa4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008fa8:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8008fac:	f000 f9d6 	bl	800935c <CRYP_DataOut>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8008fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fb8:	3304      	adds	r3, #4
 8008fba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 8008fbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008fc2:	3310      	adds	r3, #16
 8008fc4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008fc8:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8008fcc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d204      	bcs.n	8008fde <CRYP_AES_CCM+0xc12>
 8008fd4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	f47f af6f 	bne.w	8008ebc <CRYP_AES_CCM+0xaf0>
      }
    }
    
    /***************************** final phase ********************************/
    /* Select final phase */
    CRYP_PhaseConfig(CRYP_Phase_Final);
 8008fde:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8008fe2:	f000 f967 	bl	80092b4 <CRYP_PhaseConfig>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8008fe6:	2001      	movs	r0, #1
 8008fe8:	f000 f98e 	bl	8009308 <CRYP_Cmd>
    
    if(CRYP_GetCmdStatus() == DISABLE)
 8008fec:	f000 fb70 	bl	80096d0 <CRYP_GetCmdStatus>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d101      	bne.n	8008ffa <CRYP_AES_CCM+0xc2e>
    {
      /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
         the CRYP peripheral (please check the device sales type. */
      return(ERROR);
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	e063      	b.n	80090c2 <CRYP_AES_CCM+0xcf6>
    }
    
    ctraddr = (uint32_t)ctr;
 8008ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ffe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    /* Write the counter block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(ctraddr));
 8009002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4618      	mov	r0, r3
 800900a:	f000 f999 	bl	8009340 <CRYP_DataIn>
    ctraddr+=4;
 800900e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009012:	3304      	adds	r3, #4
 8009014:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    CRYP_DataIn(*(uint32_t*)(ctraddr));
 8009018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4618      	mov	r0, r3
 8009020:	f000 f98e 	bl	8009340 <CRYP_DataIn>
    ctraddr+=4;
 8009024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009028:	3304      	adds	r3, #4
 800902a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    CRYP_DataIn(*(uint32_t*)(ctraddr));
 800902e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4618      	mov	r0, r3
 8009036:	f000 f983 	bl	8009340 <CRYP_DataIn>
    ctraddr+=4;
 800903a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800903e:	3304      	adds	r3, #4
 8009040:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    /* Reset bit 0 (after 8-bit swap) is equivalent to reset bit 24 (before 8-bit swap) */
    CRYP_DataIn(*(uint32_t*)(ctraddr) & 0xfeffffff);
 8009044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800904e:	4618      	mov	r0, r3
 8009050:	f000 f976 	bl	8009340 <CRYP_DataIn>
    
    /* Wait until the OFNE flag is reset */
    while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 8009054:	bf00      	nop
 8009056:	2004      	movs	r0, #4
 8009058:	f000 fb54 	bl	8009704 <CRYP_GetFlagStatus>
 800905c:	4603      	mov	r3, r0
 800905e:	2b00      	cmp	r3, #0
 8009060:	d0f9      	beq.n	8009056 <CRYP_AES_CCM+0xc8a>
    {
    }
    
    /* Read the Authentaication TAG (MAC) in the IN FIFO */
    temptag[0] = CRYP_DataOut();
 8009062:	f000 f97b 	bl	800935c <CRYP_DataOut>
 8009066:	4603      	mov	r3, r0
 8009068:	617b      	str	r3, [r7, #20]
    temptag[1] = CRYP_DataOut();
 800906a:	f000 f977 	bl	800935c <CRYP_DataOut>
 800906e:	4603      	mov	r3, r0
 8009070:	61bb      	str	r3, [r7, #24]
    temptag[2] = CRYP_DataOut();
 8009072:	f000 f973 	bl	800935c <CRYP_DataOut>
 8009076:	4603      	mov	r3, r0
 8009078:	61fb      	str	r3, [r7, #28]
    temptag[3] = CRYP_DataOut();
 800907a:	f000 f96f 	bl	800935c <CRYP_DataOut>
 800907e:	4603      	mov	r3, r0
 8009080:	623b      	str	r3, [r7, #32]
  }
  
  /* Copy temporary authentication TAG in user TAG buffer */
  for(loopcounter = 0; (loopcounter < TAGSize); loopcounter++)
 8009082:	2300      	movs	r3, #0
 8009084:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009088:	e010      	b.n	80090ac <CRYP_AES_CCM+0xce0>
  {
    /* Set the authentication TAG buffer */
    *((uint8_t*)tagaddr+loopcounter) = *((uint8_t*)temptag+loopcounter);
 800908a:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800908e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009092:	4413      	add	r3, r2
 8009094:	f107 0114 	add.w	r1, r7, #20
 8009098:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800909c:	440a      	add	r2, r1
 800909e:	7812      	ldrb	r2, [r2, #0]
 80090a0:	701a      	strb	r2, [r3, #0]
    temptag[2] = CRYP_DataOut();
    temptag[3] = CRYP_DataOut();
  }
  
  /* Copy temporary authentication TAG in user TAG buffer */
  for(loopcounter = 0; (loopcounter < TAGSize); loopcounter++)
 80090a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80090a6:	3301      	adds	r3, #1
 80090a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80090ac:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80090b0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d3e8      	bcc.n	800908a <CRYP_AES_CCM+0xcbe>
    /* Set the authentication TAG buffer */
    *((uint8_t*)tagaddr+loopcounter) = *((uint8_t*)temptag+loopcounter);
  }
  
  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80090b8:	2000      	movs	r0, #0
 80090ba:	f000 f925 	bl	8009308 <CRYP_Cmd>

  return status;
 80090be:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd90      	pop	{r4, r7, pc}

080090cc <CRYP_DeInit>:
  * @brief  Deinitializes the CRYP peripheral registers to their default reset values
  * @param  None
  * @retval None
  */
void CRYP_DeInit(void)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	af00      	add	r7, sp, #0
  /* Enable CRYP reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, ENABLE);
 80090d0:	2010      	movs	r0, #16
 80090d2:	2101      	movs	r1, #1
 80090d4:	f006 fe7c 	bl	800fdd0 <RCC_AHB2PeriphResetCmd>

  /* Release CRYP from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, DISABLE);
 80090d8:	2010      	movs	r0, #16
 80090da:	2100      	movs	r1, #0
 80090dc:	f006 fe78 	bl	800fdd0 <RCC_AHB2PeriphResetCmd>
}
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop

080090e4 <CRYP_Init>:
  * @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure that contains
  *         the configuration information for the CRYP peripheral.
  * @retval None
  */
void CRYP_Init(CRYP_InitTypeDef* CRYP_InitStruct)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_CRYP_ALGOMODE(CRYP_InitStruct->CRYP_AlgoMode));
  assert_param(IS_CRYP_DATATYPE(CRYP_InitStruct->CRYP_DataType));
  assert_param(IS_CRYP_ALGODIR(CRYP_InitStruct->CRYP_AlgoDir));

  /* Select Algorithm mode*/  
  CRYP->CR &= ~CRYP_CR_ALGOMODE;
 80090ec:	4a25      	ldr	r2, [pc, #148]	; (8009184 <CRYP_Init+0xa0>)
 80090ee:	4b25      	ldr	r3, [pc, #148]	; (8009184 <CRYP_Init+0xa0>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80090f6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80090fa:	6013      	str	r3, [r2, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoMode;
 80090fc:	4b21      	ldr	r3, [pc, #132]	; (8009184 <CRYP_Init+0xa0>)
 80090fe:	4a21      	ldr	r2, [pc, #132]	; (8009184 <CRYP_Init+0xa0>)
 8009100:	6811      	ldr	r1, [r2, #0]
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	6852      	ldr	r2, [r2, #4]
 8009106:	430a      	orrs	r2, r1
 8009108:	601a      	str	r2, [r3, #0]

  /* Select dataType */ 
  CRYP->CR &= ~CRYP_CR_DATATYPE;
 800910a:	4b1e      	ldr	r3, [pc, #120]	; (8009184 <CRYP_Init+0xa0>)
 800910c:	4a1d      	ldr	r2, [pc, #116]	; (8009184 <CRYP_Init+0xa0>)
 800910e:	6812      	ldr	r2, [r2, #0]
 8009110:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009114:	601a      	str	r2, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;
 8009116:	4b1b      	ldr	r3, [pc, #108]	; (8009184 <CRYP_Init+0xa0>)
 8009118:	4a1a      	ldr	r2, [pc, #104]	; (8009184 <CRYP_Init+0xa0>)
 800911a:	6811      	ldr	r1, [r2, #0]
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	6892      	ldr	r2, [r2, #8]
 8009120:	430a      	orrs	r2, r1
 8009122:	601a      	str	r2, [r3, #0]

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_ECB) &&
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d018      	beq.n	800915e <CRYP_Init+0x7a>
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_CBC) &&
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	685b      	ldr	r3, [r3, #4]
  /* Select dataType */ 
  CRYP->CR &= ~CRYP_CR_DATATYPE;
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_ECB) &&
 8009130:	2b08      	cmp	r3, #8
 8009132:	d014      	beq.n	800915e <CRYP_Init+0x7a>
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_CBC) &&
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_DES_ECB) &&
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	685b      	ldr	r3, [r3, #4]
  CRYP->CR &= ~CRYP_CR_DATATYPE;
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_ECB) &&
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_CBC) &&
 8009138:	2b10      	cmp	r3, #16
 800913a:	d010      	beq.n	800915e <CRYP_Init+0x7a>
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_DES_ECB) &&
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_DES_CBC))
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	685b      	ldr	r3, [r3, #4]
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_ECB) &&
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_CBC) &&
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_DES_ECB) &&
 8009140:	2b18      	cmp	r3, #24
 8009142:	d00c      	beq.n	800915e <CRYP_Init+0x7a>
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_DES_CBC))
  {
    assert_param(IS_CRYP_KEYSIZE(CRYP_InitStruct->CRYP_KeySize));
    CRYP->CR &= ~CRYP_CR_KEYSIZE;
 8009144:	4b0f      	ldr	r3, [pc, #60]	; (8009184 <CRYP_Init+0xa0>)
 8009146:	4a0f      	ldr	r2, [pc, #60]	; (8009184 <CRYP_Init+0xa0>)
 8009148:	6812      	ldr	r2, [r2, #0]
 800914a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800914e:	601a      	str	r2, [r3, #0]
    CRYP->CR |= CRYP_InitStruct->CRYP_KeySize; /* Key size and value must be 
 8009150:	4b0c      	ldr	r3, [pc, #48]	; (8009184 <CRYP_Init+0xa0>)
 8009152:	4a0c      	ldr	r2, [pc, #48]	; (8009184 <CRYP_Init+0xa0>)
 8009154:	6811      	ldr	r1, [r2, #0]
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	68d2      	ldr	r2, [r2, #12]
 800915a:	430a      	orrs	r2, r1
 800915c:	601a      	str	r2, [r3, #0]
                                                  configured once the key has 
                                                  been prepared */
  }

  /* Select data Direction */ 
  CRYP->CR &= ~CRYP_CR_ALGODIR;
 800915e:	4b09      	ldr	r3, [pc, #36]	; (8009184 <CRYP_Init+0xa0>)
 8009160:	4a08      	ldr	r2, [pc, #32]	; (8009184 <CRYP_Init+0xa0>)
 8009162:	6812      	ldr	r2, [r2, #0]
 8009164:	f022 0204 	bic.w	r2, r2, #4
 8009168:	601a      	str	r2, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoDir;
 800916a:	4b06      	ldr	r3, [pc, #24]	; (8009184 <CRYP_Init+0xa0>)
 800916c:	4a05      	ldr	r2, [pc, #20]	; (8009184 <CRYP_Init+0xa0>)
 800916e:	6811      	ldr	r1, [r2, #0]
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	6812      	ldr	r2, [r2, #0]
 8009174:	430a      	orrs	r2, r1
 8009176:	601a      	str	r2, [r3, #0]
}
 8009178:	370c      	adds	r7, #12
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr
 8009182:	bf00      	nop
 8009184:	50060000 	.word	0x50060000

08009188 <CRYP_StructInit>:
  * @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void CRYP_StructInit(CRYP_InitTypeDef* CRYP_InitStruct)
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  /* Initialize the CRYP_AlgoDir member */
  CRYP_InitStruct->CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2200      	movs	r2, #0
 8009194:	601a      	str	r2, [r3, #0]

  /* initialize the CRYP_AlgoMode member */
  CRYP_InitStruct->CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2200      	movs	r2, #0
 800919a:	605a      	str	r2, [r3, #4]

  /* initialize the CRYP_DataType member */
  CRYP_InitStruct->CRYP_DataType = CRYP_DataType_32b;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	609a      	str	r2, [r3, #8]
  
  /* Initialize the CRYP_KeySize member */
  CRYP_InitStruct->CRYP_KeySize = CRYP_KeySize_128b;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	60da      	str	r2, [r3, #12]
}
 80091a8:	370c      	adds	r7, #12
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr
 80091b2:	bf00      	nop

080091b4 <CRYP_KeyInit>:
  * @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure that
  *         contains the configuration information for the CRYP Keys.
  * @retval None
  */
void CRYP_KeyInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b083      	sub	sp, #12
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  /* Key Initialisation */
  CRYP->K0LR = CRYP_KeyInitStruct->CRYP_Key0Left;
 80091bc:	4b12      	ldr	r3, [pc, #72]	; (8009208 <CRYP_KeyInit+0x54>)
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	6812      	ldr	r2, [r2, #0]
 80091c2:	621a      	str	r2, [r3, #32]
  CRYP->K0RR = CRYP_KeyInitStruct->CRYP_Key0Right;
 80091c4:	4b10      	ldr	r3, [pc, #64]	; (8009208 <CRYP_KeyInit+0x54>)
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	6852      	ldr	r2, [r2, #4]
 80091ca:	625a      	str	r2, [r3, #36]	; 0x24
  CRYP->K1LR = CRYP_KeyInitStruct->CRYP_Key1Left;
 80091cc:	4b0e      	ldr	r3, [pc, #56]	; (8009208 <CRYP_KeyInit+0x54>)
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	6892      	ldr	r2, [r2, #8]
 80091d2:	629a      	str	r2, [r3, #40]	; 0x28
  CRYP->K1RR = CRYP_KeyInitStruct->CRYP_Key1Right;
 80091d4:	4b0c      	ldr	r3, [pc, #48]	; (8009208 <CRYP_KeyInit+0x54>)
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	68d2      	ldr	r2, [r2, #12]
 80091da:	62da      	str	r2, [r3, #44]	; 0x2c
  CRYP->K2LR = CRYP_KeyInitStruct->CRYP_Key2Left;
 80091dc:	4b0a      	ldr	r3, [pc, #40]	; (8009208 <CRYP_KeyInit+0x54>)
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	6912      	ldr	r2, [r2, #16]
 80091e2:	631a      	str	r2, [r3, #48]	; 0x30
  CRYP->K2RR = CRYP_KeyInitStruct->CRYP_Key2Right;
 80091e4:	4b08      	ldr	r3, [pc, #32]	; (8009208 <CRYP_KeyInit+0x54>)
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	6952      	ldr	r2, [r2, #20]
 80091ea:	635a      	str	r2, [r3, #52]	; 0x34
  CRYP->K3LR = CRYP_KeyInitStruct->CRYP_Key3Left;
 80091ec:	4b06      	ldr	r3, [pc, #24]	; (8009208 <CRYP_KeyInit+0x54>)
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	6992      	ldr	r2, [r2, #24]
 80091f2:	639a      	str	r2, [r3, #56]	; 0x38
  CRYP->K3RR = CRYP_KeyInitStruct->CRYP_Key3Right;
 80091f4:	4b04      	ldr	r3, [pc, #16]	; (8009208 <CRYP_KeyInit+0x54>)
 80091f6:	687a      	ldr	r2, [r7, #4]
 80091f8:	69d2      	ldr	r2, [r2, #28]
 80091fa:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80091fc:	370c      	adds	r7, #12
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr
 8009206:	bf00      	nop
 8009208:	50060000 	.word	0x50060000

0800920c <CRYP_KeyStructInit>:
  * @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void CRYP_KeyStructInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  CRYP_KeyInitStruct->CRYP_Key0Left  = 0;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	601a      	str	r2, [r3, #0]
  CRYP_KeyInitStruct->CRYP_Key0Right = 0;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	605a      	str	r2, [r3, #4]
  CRYP_KeyInitStruct->CRYP_Key1Left  = 0;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	609a      	str	r2, [r3, #8]
  CRYP_KeyInitStruct->CRYP_Key1Right = 0;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	60da      	str	r2, [r3, #12]
  CRYP_KeyInitStruct->CRYP_Key2Left  = 0;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2200      	movs	r2, #0
 8009230:	611a      	str	r2, [r3, #16]
  CRYP_KeyInitStruct->CRYP_Key2Right = 0;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2200      	movs	r2, #0
 8009236:	615a      	str	r2, [r3, #20]
  CRYP_KeyInitStruct->CRYP_Key3Left  = 0;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2200      	movs	r2, #0
 800923c:	619a      	str	r2, [r3, #24]
  CRYP_KeyInitStruct->CRYP_Key3Right = 0;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2200      	movs	r2, #0
 8009242:	61da      	str	r2, [r3, #28]
}
 8009244:	370c      	adds	r7, #12
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr
 800924e:	bf00      	nop

08009250 <CRYP_IVInit>:
  * @param  CRYP_IVInitStruct: pointer to a CRYP_IVInitTypeDef structure that contains
  *         the configuration information for the CRYP Initialization Vectors(IV).
  * @retval None
  */
void CRYP_IVInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  CRYP->IV0LR = CRYP_IVInitStruct->CRYP_IV0Left;
 8009258:	4b0a      	ldr	r3, [pc, #40]	; (8009284 <CRYP_IVInit+0x34>)
 800925a:	687a      	ldr	r2, [r7, #4]
 800925c:	6812      	ldr	r2, [r2, #0]
 800925e:	641a      	str	r2, [r3, #64]	; 0x40
  CRYP->IV0RR = CRYP_IVInitStruct->CRYP_IV0Right;
 8009260:	4b08      	ldr	r3, [pc, #32]	; (8009284 <CRYP_IVInit+0x34>)
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	6852      	ldr	r2, [r2, #4]
 8009266:	645a      	str	r2, [r3, #68]	; 0x44
  CRYP->IV1LR = CRYP_IVInitStruct->CRYP_IV1Left;
 8009268:	4b06      	ldr	r3, [pc, #24]	; (8009284 <CRYP_IVInit+0x34>)
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	6892      	ldr	r2, [r2, #8]
 800926e:	649a      	str	r2, [r3, #72]	; 0x48
  CRYP->IV1RR = CRYP_IVInitStruct->CRYP_IV1Right;
 8009270:	4b04      	ldr	r3, [pc, #16]	; (8009284 <CRYP_IVInit+0x34>)
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	68d2      	ldr	r2, [r2, #12]
 8009276:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8009278:	370c      	adds	r7, #12
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr
 8009282:	bf00      	nop
 8009284:	50060000 	.word	0x50060000

08009288 <CRYP_IVStructInit>:
  * @param  CRYP_IVInitStruct: pointer to a CRYP_IVInitTypeDef Initialization 
  *         Vectors(IV) structure which will be initialized.
  * @retval None
  */
void CRYP_IVStructInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  CRYP_IVInitStruct->CRYP_IV0Left  = 0;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	601a      	str	r2, [r3, #0]
  CRYP_IVInitStruct->CRYP_IV0Right = 0;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	605a      	str	r2, [r3, #4]
  CRYP_IVInitStruct->CRYP_IV1Left  = 0;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	609a      	str	r2, [r3, #8]
  CRYP_IVInitStruct->CRYP_IV1Right = 0;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	60da      	str	r2, [r3, #12]
}
 80092a8:	370c      	adds	r7, #12
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr
 80092b2:	bf00      	nop

080092b4 <CRYP_PhaseConfig>:
  *            @arg CRYP_Phase_Payload: Payload phase
  *            @arg CRYP_Phase_Final: Final phase 
  * @retval None
  */
void CRYP_PhaseConfig(uint32_t CRYP_Phase)
{ uint32_t tempcr = 0;
 80092b4:	b480      	push	{r7}
 80092b6:	b085      	sub	sp, #20
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	2300      	movs	r3, #0
 80092be:	60fb      	str	r3, [r7, #12]

  /* Check the parameter */
  assert_param(IS_CRYP_PHASE(CRYP_Phase));

  /* Get the CR register */
  tempcr = CRYP->CR;
 80092c0:	4b09      	ldr	r3, [pc, #36]	; (80092e8 <CRYP_PhaseConfig+0x34>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	60fb      	str	r3, [r7, #12]
  
  /* Reset the phase configuration bits: GCMP_CCMPH */
  tempcr &= (uint32_t)(~CRYP_CR_GCM_CCMPH);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80092cc:	60fb      	str	r3, [r7, #12]
  /* Set the selected phase */
  tempcr |= (uint32_t)CRYP_Phase;
 80092ce:	68fa      	ldr	r2, [r7, #12]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	4313      	orrs	r3, r2
 80092d4:	60fb      	str	r3, [r7, #12]

  /* Set the CR register */ 
  CRYP->CR = tempcr;    
 80092d6:	4b04      	ldr	r3, [pc, #16]	; (80092e8 <CRYP_PhaseConfig+0x34>)
 80092d8:	68fa      	ldr	r2, [r7, #12]
 80092da:	601a      	str	r2, [r3, #0]
}
 80092dc:	3714      	adds	r7, #20
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr
 80092e6:	bf00      	nop
 80092e8:	50060000 	.word	0x50060000

080092ec <CRYP_FIFOFlush>:
  * @note   The FIFOs must be flushed only when BUSY flag is reset.  
  * @param  None
  * @retval None
  */
void CRYP_FIFOFlush(void)
{
 80092ec:	b480      	push	{r7}
 80092ee:	af00      	add	r7, sp, #0
  /* Reset the read and write pointers of the FIFOs */
  CRYP->CR |= CRYP_CR_FFLUSH;
 80092f0:	4b04      	ldr	r3, [pc, #16]	; (8009304 <CRYP_FIFOFlush+0x18>)
 80092f2:	4a04      	ldr	r2, [pc, #16]	; (8009304 <CRYP_FIFOFlush+0x18>)
 80092f4:	6812      	ldr	r2, [r2, #0]
 80092f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80092fa:	601a      	str	r2, [r3, #0]
}
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr
 8009304:	50060000 	.word	0x50060000

08009308 <CRYP_Cmd>:
  * @param  NewState: new state of the CRYP peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_Cmd(FunctionalState NewState)
{
 8009308:	b480      	push	{r7}
 800930a:	b083      	sub	sp, #12
 800930c:	af00      	add	r7, sp, #0
 800930e:	4603      	mov	r3, r0
 8009310:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009312:	79fb      	ldrb	r3, [r7, #7]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d006      	beq.n	8009326 <CRYP_Cmd+0x1e>
  {
    /* Enable the Cryptographic processor */
    CRYP->CR |= CRYP_CR_CRYPEN;
 8009318:	4b08      	ldr	r3, [pc, #32]	; (800933c <CRYP_Cmd+0x34>)
 800931a:	4a08      	ldr	r2, [pc, #32]	; (800933c <CRYP_Cmd+0x34>)
 800931c:	6812      	ldr	r2, [r2, #0]
 800931e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009322:	601a      	str	r2, [r3, #0]
 8009324:	e005      	b.n	8009332 <CRYP_Cmd+0x2a>
  }
  else
  {
    /* Disable the Cryptographic processor */
    CRYP->CR &= ~CRYP_CR_CRYPEN;
 8009326:	4b05      	ldr	r3, [pc, #20]	; (800933c <CRYP_Cmd+0x34>)
 8009328:	4a04      	ldr	r2, [pc, #16]	; (800933c <CRYP_Cmd+0x34>)
 800932a:	6812      	ldr	r2, [r2, #0]
 800932c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009330:	601a      	str	r2, [r3, #0]
  }
}
 8009332:	370c      	adds	r7, #12
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr
 800933c:	50060000 	.word	0x50060000

08009340 <CRYP_DataIn>:
  *         the FIFO must be flushed (using CRYP_FIFOFlush() function).  
  * @param  Data: data to write in Data Input register
  * @retval None
  */
void CRYP_DataIn(uint32_t Data)
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  CRYP->DR = Data;
 8009348:	4b03      	ldr	r3, [pc, #12]	; (8009358 <CRYP_DataIn+0x18>)
 800934a:	687a      	ldr	r2, [r7, #4]
 800934c:	609a      	str	r2, [r3, #8]
}
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr
 8009358:	50060000 	.word	0x50060000

0800935c <CRYP_DataOut>:
  * @brief  Returns the last data entered into the output FIFO.
  * @param  None
  * @retval Last data entered into the output FIFO.
  */
uint32_t CRYP_DataOut(void)
{
 800935c:	b480      	push	{r7}
 800935e:	af00      	add	r7, sp, #0
  return CRYP->DOUT;
 8009360:	4b03      	ldr	r3, [pc, #12]	; (8009370 <CRYP_DataOut+0x14>)
 8009362:	68db      	ldr	r3, [r3, #12]
}
 8009364:	4618      	mov	r0, r3
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr
 800936e:	bf00      	nop
 8009370:	50060000 	.word	0x50060000

08009374 <CRYP_SaveContext>:
  *         contains the configuration information for the CRYP Keys.  
  * @retval None
  */
ErrorStatus CRYP_SaveContext(CRYP_Context* CRYP_ContextSave,
                             CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 8009374:	b480      	push	{r7}
 8009376:	b087      	sub	sp, #28
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
  __IO uint32_t timeout = 0;
 800937e:	2300      	movs	r3, #0
 8009380:	60bb      	str	r3, [r7, #8]
  uint32_t ckeckmask = 0, bitstatus;    
 8009382:	2300      	movs	r3, #0
 8009384:	617b      	str	r3, [r7, #20]
  ErrorStatus status = ERROR;
 8009386:	2300      	movs	r3, #0
 8009388:	74fb      	strb	r3, [r7, #19]

  /* Stop DMA transfers on the IN FIFO by clearing the DIEN bit in the CRYP_DMACR */
  CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DIEN;
 800938a:	4b5c      	ldr	r3, [pc, #368]	; (80094fc <CRYP_SaveContext+0x188>)
 800938c:	4a5b      	ldr	r2, [pc, #364]	; (80094fc <CRYP_SaveContext+0x188>)
 800938e:	6912      	ldr	r2, [r2, #16]
 8009390:	f022 0201 	bic.w	r2, r2, #1
 8009394:	611a      	str	r2, [r3, #16]
    
  /* Wait until both the IN and OUT FIFOs are empty  
    (IFEM=1 and OFNE=0 in the CRYP_SR register) and the 
     BUSY bit is cleared. */

  if ((CRYP->CR & (uint32_t)(CRYP_CR_ALGOMODE_TDES_ECB | CRYP_CR_ALGOMODE_TDES_CBC)) != (uint32_t)0 )/* TDES */
 8009396:	4b59      	ldr	r3, [pc, #356]	; (80094fc <CRYP_SaveContext+0x188>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f003 0308 	and.w	r3, r3, #8
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d002      	beq.n	80093a8 <CRYP_SaveContext+0x34>
  { 
    ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY ;
 80093a2:	2311      	movs	r3, #17
 80093a4:	617b      	str	r3, [r7, #20]
 80093a6:	e001      	b.n	80093ac <CRYP_SaveContext+0x38>
  }
  else /* AES or DES */
  {
    ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY | CRYP_SR_OFNE;
 80093a8:	2315      	movs	r3, #21
 80093aa:	617b      	str	r3, [r7, #20]
  }           
   
  do 
  {
    bitstatus = CRYP->SR & ckeckmask;
 80093ac:	4b53      	ldr	r3, [pc, #332]	; (80094fc <CRYP_SaveContext+0x188>)
 80093ae:	685a      	ldr	r2, [r3, #4]
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	4013      	ands	r3, r2
 80093b4:	60fb      	str	r3, [r7, #12]
    timeout++;
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	3301      	adds	r3, #1
 80093ba:	60bb      	str	r3, [r7, #8]
  }
  while ((timeout != MAX_TIMEOUT) && (bitstatus != CRYP_SR_IFEM));
 80093bc:	68ba      	ldr	r2, [r7, #8]
 80093be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d002      	beq.n	80093cc <CRYP_SaveContext+0x58>
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d1ef      	bne.n	80093ac <CRYP_SaveContext+0x38>
     
  if ((CRYP->SR & ckeckmask) != CRYP_SR_IFEM)
 80093cc:	4b4b      	ldr	r3, [pc, #300]	; (80094fc <CRYP_SaveContext+0x188>)
 80093ce:	685a      	ldr	r2, [r3, #4]
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	4013      	ands	r3, r2
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d002      	beq.n	80093de <CRYP_SaveContext+0x6a>
  {
    status = ERROR;
 80093d8:	2300      	movs	r3, #0
 80093da:	74fb      	strb	r3, [r7, #19]
 80093dc:	e087      	b.n	80094ee <CRYP_SaveContext+0x17a>
  {      
    /* Stop DMA transfers on the OUT FIFO by 
       - writing the DOEN bit to 0 in the CRYP_DMACR register 
       - and clear the CRYPEN bit. */

    CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DOEN;
 80093de:	4b47      	ldr	r3, [pc, #284]	; (80094fc <CRYP_SaveContext+0x188>)
 80093e0:	4a46      	ldr	r2, [pc, #280]	; (80094fc <CRYP_SaveContext+0x188>)
 80093e2:	6912      	ldr	r2, [r2, #16]
 80093e4:	f022 0202 	bic.w	r2, r2, #2
 80093e8:	611a      	str	r2, [r3, #16]
    CRYP->CR &= ~(uint32_t)CRYP_CR_CRYPEN;
 80093ea:	4b44      	ldr	r3, [pc, #272]	; (80094fc <CRYP_SaveContext+0x188>)
 80093ec:	4a43      	ldr	r2, [pc, #268]	; (80094fc <CRYP_SaveContext+0x188>)
 80093ee:	6812      	ldr	r2, [r2, #0]
 80093f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80093f4:	601a      	str	r2, [r3, #0]

    /* Save the current configuration (bit 19, bit[17:16] and bits [9:2] in the CRYP_CR register) */
    CRYP_ContextSave->CR_CurrentConfig  = CRYP->CR & (CRYP_CR_GCM_CCMPH |
 80093f6:	4b41      	ldr	r3, [pc, #260]	; (80094fc <CRYP_SaveContext+0x188>)
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	4b41      	ldr	r3, [pc, #260]	; (8009500 <CRYP_SaveContext+0x18c>)
 80093fc:	4013      	ands	r3, r2
 80093fe:	687a      	ldr	r2, [r7, #4]
 8009400:	6013      	str	r3, [r2, #0]
                                                      CRYP_CR_DATATYPE |
                                                      CRYP_CR_ALGOMODE |
                                                      CRYP_CR_ALGODIR);

    /* and, if not in ECB mode, the initialization vectors. */
    CRYP_ContextSave->CRYP_IV0LR = CRYP->IV0LR;
 8009402:	4b3e      	ldr	r3, [pc, #248]	; (80094fc <CRYP_SaveContext+0x188>)
 8009404:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	605a      	str	r2, [r3, #4]
    CRYP_ContextSave->CRYP_IV0RR = CRYP->IV0RR;
 800940a:	4b3c      	ldr	r3, [pc, #240]	; (80094fc <CRYP_SaveContext+0x188>)
 800940c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	609a      	str	r2, [r3, #8]
    CRYP_ContextSave->CRYP_IV1LR = CRYP->IV1LR;
 8009412:	4b3a      	ldr	r3, [pc, #232]	; (80094fc <CRYP_SaveContext+0x188>)
 8009414:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	60da      	str	r2, [r3, #12]
    CRYP_ContextSave->CRYP_IV1RR = CRYP->IV1RR;
 800941a:	4b38      	ldr	r3, [pc, #224]	; (80094fc <CRYP_SaveContext+0x188>)
 800941c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	611a      	str	r2, [r3, #16]

    /* save The key value */
    CRYP_ContextSave->CRYP_K0LR = CRYP_KeyInitStruct->CRYP_Key0Left; 
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	615a      	str	r2, [r3, #20]
    CRYP_ContextSave->CRYP_K0RR = CRYP_KeyInitStruct->CRYP_Key0Right; 
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	685a      	ldr	r2, [r3, #4]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	619a      	str	r2, [r3, #24]
    CRYP_ContextSave->CRYP_K1LR = CRYP_KeyInitStruct->CRYP_Key1Left; 
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	689a      	ldr	r2, [r3, #8]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	61da      	str	r2, [r3, #28]
    CRYP_ContextSave->CRYP_K1RR = CRYP_KeyInitStruct->CRYP_Key1Right; 
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	68da      	ldr	r2, [r3, #12]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	621a      	str	r2, [r3, #32]
    CRYP_ContextSave->CRYP_K2LR = CRYP_KeyInitStruct->CRYP_Key2Left; 
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	691a      	ldr	r2, [r3, #16]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	625a      	str	r2, [r3, #36]	; 0x24
    CRYP_ContextSave->CRYP_K2RR = CRYP_KeyInitStruct->CRYP_Key2Right; 
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	695a      	ldr	r2, [r3, #20]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	629a      	str	r2, [r3, #40]	; 0x28
    CRYP_ContextSave->CRYP_K3LR = CRYP_KeyInitStruct->CRYP_Key3Left; 
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	699a      	ldr	r2, [r3, #24]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	62da      	str	r2, [r3, #44]	; 0x2c
    CRYP_ContextSave->CRYP_K3RR = CRYP_KeyInitStruct->CRYP_Key3Right; 
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	69da      	ldr	r2, [r3, #28]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	631a      	str	r2, [r3, #48]	; 0x30

    /* Save the content of context swap registers */
    CRYP_ContextSave->CRYP_CSGCMCCMR[0] = CRYP->CSGCMCCM0R;
 8009462:	4b26      	ldr	r3, [pc, #152]	; (80094fc <CRYP_SaveContext+0x188>)
 8009464:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	635a      	str	r2, [r3, #52]	; 0x34
    CRYP_ContextSave->CRYP_CSGCMCCMR[1] = CRYP->CSGCMCCM1R;
 800946a:	4b24      	ldr	r3, [pc, #144]	; (80094fc <CRYP_SaveContext+0x188>)
 800946c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	639a      	str	r2, [r3, #56]	; 0x38
    CRYP_ContextSave->CRYP_CSGCMCCMR[2] = CRYP->CSGCMCCM2R;
 8009472:	4b22      	ldr	r3, [pc, #136]	; (80094fc <CRYP_SaveContext+0x188>)
 8009474:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	63da      	str	r2, [r3, #60]	; 0x3c
    CRYP_ContextSave->CRYP_CSGCMCCMR[3] = CRYP->CSGCMCCM3R;
 800947a:	4b20      	ldr	r3, [pc, #128]	; (80094fc <CRYP_SaveContext+0x188>)
 800947c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	641a      	str	r2, [r3, #64]	; 0x40
    CRYP_ContextSave->CRYP_CSGCMCCMR[4] = CRYP->CSGCMCCM4R;
 8009482:	4b1e      	ldr	r3, [pc, #120]	; (80094fc <CRYP_SaveContext+0x188>)
 8009484:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	645a      	str	r2, [r3, #68]	; 0x44
    CRYP_ContextSave->CRYP_CSGCMCCMR[5] = CRYP->CSGCMCCM5R;
 800948a:	4b1c      	ldr	r3, [pc, #112]	; (80094fc <CRYP_SaveContext+0x188>)
 800948c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	649a      	str	r2, [r3, #72]	; 0x48
    CRYP_ContextSave->CRYP_CSGCMCCMR[6] = CRYP->CSGCMCCM6R;
 8009492:	4b1a      	ldr	r3, [pc, #104]	; (80094fc <CRYP_SaveContext+0x188>)
 8009494:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	64da      	str	r2, [r3, #76]	; 0x4c
    CRYP_ContextSave->CRYP_CSGCMCCMR[7] = CRYP->CSGCMCCM7R;
 800949a:	4b18      	ldr	r3, [pc, #96]	; (80094fc <CRYP_SaveContext+0x188>)
 800949c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	651a      	str	r2, [r3, #80]	; 0x50
    
    CRYP_ContextSave->CRYP_CSGCMR[0] = CRYP->CSGCM0R;
 80094a2:	4b16      	ldr	r3, [pc, #88]	; (80094fc <CRYP_SaveContext+0x188>)
 80094a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	655a      	str	r2, [r3, #84]	; 0x54
    CRYP_ContextSave->CRYP_CSGCMR[1] = CRYP->CSGCM1R;
 80094aa:	4b14      	ldr	r3, [pc, #80]	; (80094fc <CRYP_SaveContext+0x188>)
 80094ac:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	659a      	str	r2, [r3, #88]	; 0x58
    CRYP_ContextSave->CRYP_CSGCMR[2] = CRYP->CSGCM2R;
 80094b2:	4b12      	ldr	r3, [pc, #72]	; (80094fc <CRYP_SaveContext+0x188>)
 80094b4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	65da      	str	r2, [r3, #92]	; 0x5c
    CRYP_ContextSave->CRYP_CSGCMR[3] = CRYP->CSGCM3R;
 80094ba:	4b10      	ldr	r3, [pc, #64]	; (80094fc <CRYP_SaveContext+0x188>)
 80094bc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	661a      	str	r2, [r3, #96]	; 0x60
    CRYP_ContextSave->CRYP_CSGCMR[4] = CRYP->CSGCM4R;
 80094c2:	4b0e      	ldr	r3, [pc, #56]	; (80094fc <CRYP_SaveContext+0x188>)
 80094c4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	665a      	str	r2, [r3, #100]	; 0x64
    CRYP_ContextSave->CRYP_CSGCMR[5] = CRYP->CSGCM5R;
 80094cc:	4b0b      	ldr	r3, [pc, #44]	; (80094fc <CRYP_SaveContext+0x188>)
 80094ce:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	669a      	str	r2, [r3, #104]	; 0x68
    CRYP_ContextSave->CRYP_CSGCMR[6] = CRYP->CSGCM6R;
 80094d6:	4b09      	ldr	r3, [pc, #36]	; (80094fc <CRYP_SaveContext+0x188>)
 80094d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	66da      	str	r2, [r3, #108]	; 0x6c
    CRYP_ContextSave->CRYP_CSGCMR[7] = CRYP->CSGCM7R;
 80094e0:	4b06      	ldr	r3, [pc, #24]	; (80094fc <CRYP_SaveContext+0x188>)
 80094e2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	671a      	str	r2, [r3, #112]	; 0x70
    
   /* When needed, save the DMA status (pointers for IN and OUT messages, 
      number of remaining bytes, etc.) */
     
    status = SUCCESS;
 80094ea:	2301      	movs	r3, #1
 80094ec:	74fb      	strb	r3, [r7, #19]
  }

   return status;
 80094ee:	7cfb      	ldrb	r3, [r7, #19]
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	371c      	adds	r7, #28
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr
 80094fc:	50060000 	.word	0x50060000
 8009500:	000b03fc 	.word	0x000b03fc

08009504 <CRYP_RestoreContext>:
  * @note   The data that were saved during context saving must be rewrited into
  *         the IN FIFO.
  * @retval None
  */
void CRYP_RestoreContext(CRYP_Context* CRYP_ContextRestore)  
{
 8009504:	b480      	push	{r7}
 8009506:	b083      	sub	sp, #12
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]

  /* Configure the processor with the saved configuration */
  CRYP->CR = CRYP_ContextRestore->CR_CurrentConfig;
 800950c:	4b41      	ldr	r3, [pc, #260]	; (8009614 <CRYP_RestoreContext+0x110>)
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	6812      	ldr	r2, [r2, #0]
 8009512:	601a      	str	r2, [r3, #0]

  /* restore The key value */
  CRYP->K0LR = CRYP_ContextRestore->CRYP_K0LR; 
 8009514:	4b3f      	ldr	r3, [pc, #252]	; (8009614 <CRYP_RestoreContext+0x110>)
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	6952      	ldr	r2, [r2, #20]
 800951a:	621a      	str	r2, [r3, #32]
  CRYP->K0RR = CRYP_ContextRestore->CRYP_K0RR;
 800951c:	4b3d      	ldr	r3, [pc, #244]	; (8009614 <CRYP_RestoreContext+0x110>)
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	6992      	ldr	r2, [r2, #24]
 8009522:	625a      	str	r2, [r3, #36]	; 0x24
  CRYP->K1LR = CRYP_ContextRestore->CRYP_K1LR;
 8009524:	4b3b      	ldr	r3, [pc, #236]	; (8009614 <CRYP_RestoreContext+0x110>)
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	69d2      	ldr	r2, [r2, #28]
 800952a:	629a      	str	r2, [r3, #40]	; 0x28
  CRYP->K1RR = CRYP_ContextRestore->CRYP_K1RR;
 800952c:	4b39      	ldr	r3, [pc, #228]	; (8009614 <CRYP_RestoreContext+0x110>)
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	6a12      	ldr	r2, [r2, #32]
 8009532:	62da      	str	r2, [r3, #44]	; 0x2c
  CRYP->K2LR = CRYP_ContextRestore->CRYP_K2LR;
 8009534:	4b37      	ldr	r3, [pc, #220]	; (8009614 <CRYP_RestoreContext+0x110>)
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800953a:	631a      	str	r2, [r3, #48]	; 0x30
  CRYP->K2RR = CRYP_ContextRestore->CRYP_K2RR;
 800953c:	4b35      	ldr	r3, [pc, #212]	; (8009614 <CRYP_RestoreContext+0x110>)
 800953e:	687a      	ldr	r2, [r7, #4]
 8009540:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009542:	635a      	str	r2, [r3, #52]	; 0x34
  CRYP->K3LR = CRYP_ContextRestore->CRYP_K3LR;
 8009544:	4b33      	ldr	r3, [pc, #204]	; (8009614 <CRYP_RestoreContext+0x110>)
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800954a:	639a      	str	r2, [r3, #56]	; 0x38
  CRYP->K3RR = CRYP_ContextRestore->CRYP_K3RR;
 800954c:	4b31      	ldr	r3, [pc, #196]	; (8009614 <CRYP_RestoreContext+0x110>)
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009552:	63da      	str	r2, [r3, #60]	; 0x3c

  /* and the initialization vectors. */
  CRYP->IV0LR = CRYP_ContextRestore->CRYP_IV0LR;
 8009554:	4b2f      	ldr	r3, [pc, #188]	; (8009614 <CRYP_RestoreContext+0x110>)
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	6852      	ldr	r2, [r2, #4]
 800955a:	641a      	str	r2, [r3, #64]	; 0x40
  CRYP->IV0RR = CRYP_ContextRestore->CRYP_IV0RR;
 800955c:	4b2d      	ldr	r3, [pc, #180]	; (8009614 <CRYP_RestoreContext+0x110>)
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	6892      	ldr	r2, [r2, #8]
 8009562:	645a      	str	r2, [r3, #68]	; 0x44
  CRYP->IV1LR = CRYP_ContextRestore->CRYP_IV1LR;
 8009564:	4b2b      	ldr	r3, [pc, #172]	; (8009614 <CRYP_RestoreContext+0x110>)
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	68d2      	ldr	r2, [r2, #12]
 800956a:	649a      	str	r2, [r3, #72]	; 0x48
  CRYP->IV1RR = CRYP_ContextRestore->CRYP_IV1RR;
 800956c:	4b29      	ldr	r3, [pc, #164]	; (8009614 <CRYP_RestoreContext+0x110>)
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	6912      	ldr	r2, [r2, #16]
 8009572:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Restore the content of context swap registers */
  CRYP->CSGCMCCM0R = CRYP_ContextRestore->CRYP_CSGCMCCMR[0];
 8009574:	4b27      	ldr	r3, [pc, #156]	; (8009614 <CRYP_RestoreContext+0x110>)
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800957a:	651a      	str	r2, [r3, #80]	; 0x50
  CRYP->CSGCMCCM1R = CRYP_ContextRestore->CRYP_CSGCMCCMR[1];
 800957c:	4b25      	ldr	r3, [pc, #148]	; (8009614 <CRYP_RestoreContext+0x110>)
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009582:	655a      	str	r2, [r3, #84]	; 0x54
  CRYP->CSGCMCCM2R = CRYP_ContextRestore->CRYP_CSGCMCCMR[2];
 8009584:	4b23      	ldr	r3, [pc, #140]	; (8009614 <CRYP_RestoreContext+0x110>)
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800958a:	659a      	str	r2, [r3, #88]	; 0x58
  CRYP->CSGCMCCM3R = CRYP_ContextRestore->CRYP_CSGCMCCMR[3];
 800958c:	4b21      	ldr	r3, [pc, #132]	; (8009614 <CRYP_RestoreContext+0x110>)
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009592:	65da      	str	r2, [r3, #92]	; 0x5c
  CRYP->CSGCMCCM4R = CRYP_ContextRestore->CRYP_CSGCMCCMR[4];
 8009594:	4b1f      	ldr	r3, [pc, #124]	; (8009614 <CRYP_RestoreContext+0x110>)
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800959a:	661a      	str	r2, [r3, #96]	; 0x60
  CRYP->CSGCMCCM5R = CRYP_ContextRestore->CRYP_CSGCMCCMR[5];
 800959c:	4b1d      	ldr	r3, [pc, #116]	; (8009614 <CRYP_RestoreContext+0x110>)
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80095a2:	665a      	str	r2, [r3, #100]	; 0x64
  CRYP->CSGCMCCM6R = CRYP_ContextRestore->CRYP_CSGCMCCMR[6];
 80095a4:	4b1b      	ldr	r3, [pc, #108]	; (8009614 <CRYP_RestoreContext+0x110>)
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80095aa:	669a      	str	r2, [r3, #104]	; 0x68
  CRYP->CSGCMCCM7R = CRYP_ContextRestore->CRYP_CSGCMCCMR[7];
 80095ac:	4b19      	ldr	r3, [pc, #100]	; (8009614 <CRYP_RestoreContext+0x110>)
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80095b2:	66da      	str	r2, [r3, #108]	; 0x6c
  
  CRYP->CSGCM0R = CRYP_ContextRestore->CRYP_CSGCMR[0];
 80095b4:	4b17      	ldr	r3, [pc, #92]	; (8009614 <CRYP_RestoreContext+0x110>)
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80095ba:	671a      	str	r2, [r3, #112]	; 0x70
  CRYP->CSGCM1R = CRYP_ContextRestore->CRYP_CSGCMR[1];
 80095bc:	4b15      	ldr	r3, [pc, #84]	; (8009614 <CRYP_RestoreContext+0x110>)
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80095c2:	675a      	str	r2, [r3, #116]	; 0x74
  CRYP->CSGCM2R = CRYP_ContextRestore->CRYP_CSGCMR[2];
 80095c4:	4b13      	ldr	r3, [pc, #76]	; (8009614 <CRYP_RestoreContext+0x110>)
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80095ca:	679a      	str	r2, [r3, #120]	; 0x78
  CRYP->CSGCM3R = CRYP_ContextRestore->CRYP_CSGCMR[3];
 80095cc:	4b11      	ldr	r3, [pc, #68]	; (8009614 <CRYP_RestoreContext+0x110>)
 80095ce:	687a      	ldr	r2, [r7, #4]
 80095d0:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80095d2:	67da      	str	r2, [r3, #124]	; 0x7c
  CRYP->CSGCM4R = CRYP_ContextRestore->CRYP_CSGCMR[4];
 80095d4:	4b0f      	ldr	r3, [pc, #60]	; (8009614 <CRYP_RestoreContext+0x110>)
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80095da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  CRYP->CSGCM5R = CRYP_ContextRestore->CRYP_CSGCMR[5];
 80095de:	4b0d      	ldr	r3, [pc, #52]	; (8009614 <CRYP_RestoreContext+0x110>)
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80095e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  CRYP->CSGCM6R = CRYP_ContextRestore->CRYP_CSGCMR[6];
 80095e8:	4b0a      	ldr	r3, [pc, #40]	; (8009614 <CRYP_RestoreContext+0x110>)
 80095ea:	687a      	ldr	r2, [r7, #4]
 80095ec:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80095ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  CRYP->CSGCM7R = CRYP_ContextRestore->CRYP_CSGCMR[7];
 80095f2:	4b08      	ldr	r3, [pc, #32]	; (8009614 <CRYP_RestoreContext+0x110>)
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80095f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  
  /* Enable the cryptographic processor */
  CRYP->CR |= CRYP_CR_CRYPEN;
 80095fc:	4b05      	ldr	r3, [pc, #20]	; (8009614 <CRYP_RestoreContext+0x110>)
 80095fe:	4a05      	ldr	r2, [pc, #20]	; (8009614 <CRYP_RestoreContext+0x110>)
 8009600:	6812      	ldr	r2, [r2, #0]
 8009602:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009606:	601a      	str	r2, [r3, #0]
}
 8009608:	370c      	adds	r7, #12
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr
 8009612:	bf00      	nop
 8009614:	50060000 	.word	0x50060000

08009618 <CRYP_DMACmd>:
  * @param  NewState: new state of the selected CRYP DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_DMACmd(uint8_t CRYP_DMAReq, FunctionalState NewState)
{
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
 800961e:	4602      	mov	r2, r0
 8009620:	460b      	mov	r3, r1
 8009622:	71fa      	strb	r2, [r7, #7]
 8009624:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_CRYP_DMAREQ(CRYP_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009626:	79bb      	ldrb	r3, [r7, #6]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d006      	beq.n	800963a <CRYP_DMACmd+0x22>
  {
    /* Enable the selected CRYP DMA request */
    CRYP->DMACR |= CRYP_DMAReq;
 800962c:	4b09      	ldr	r3, [pc, #36]	; (8009654 <CRYP_DMACmd+0x3c>)
 800962e:	4a09      	ldr	r2, [pc, #36]	; (8009654 <CRYP_DMACmd+0x3c>)
 8009630:	6911      	ldr	r1, [r2, #16]
 8009632:	79fa      	ldrb	r2, [r7, #7]
 8009634:	430a      	orrs	r2, r1
 8009636:	611a      	str	r2, [r3, #16]
 8009638:	e007      	b.n	800964a <CRYP_DMACmd+0x32>
  }
  else
  {
    /* Disable the selected CRYP DMA request */
    CRYP->DMACR &= (uint8_t)~CRYP_DMAReq;
 800963a:	4b06      	ldr	r3, [pc, #24]	; (8009654 <CRYP_DMACmd+0x3c>)
 800963c:	4a05      	ldr	r2, [pc, #20]	; (8009654 <CRYP_DMACmd+0x3c>)
 800963e:	6911      	ldr	r1, [r2, #16]
 8009640:	79fa      	ldrb	r2, [r7, #7]
 8009642:	43d2      	mvns	r2, r2
 8009644:	b2d2      	uxtb	r2, r2
 8009646:	400a      	ands	r2, r1
 8009648:	611a      	str	r2, [r3, #16]
  }
}
 800964a:	370c      	adds	r7, #12
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr
 8009654:	50060000 	.word	0x50060000

08009658 <CRYP_ITConfig>:
  * @param  NewState: new state of the specified CRYP interrupt.
  *           This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_ITConfig(uint8_t CRYP_IT, FunctionalState NewState)
{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
 800965e:	4602      	mov	r2, r0
 8009660:	460b      	mov	r3, r1
 8009662:	71fa      	strb	r2, [r7, #7]
 8009664:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_CRYP_CONFIG_IT(CRYP_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009666:	79bb      	ldrb	r3, [r7, #6]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d006      	beq.n	800967a <CRYP_ITConfig+0x22>
  {
    /* Enable the selected CRYP interrupt */
    CRYP->IMSCR |= CRYP_IT;
 800966c:	4b09      	ldr	r3, [pc, #36]	; (8009694 <CRYP_ITConfig+0x3c>)
 800966e:	4a09      	ldr	r2, [pc, #36]	; (8009694 <CRYP_ITConfig+0x3c>)
 8009670:	6951      	ldr	r1, [r2, #20]
 8009672:	79fa      	ldrb	r2, [r7, #7]
 8009674:	430a      	orrs	r2, r1
 8009676:	615a      	str	r2, [r3, #20]
 8009678:	e007      	b.n	800968a <CRYP_ITConfig+0x32>
  }
  else
  {
    /* Disable the selected CRYP interrupt */
    CRYP->IMSCR &= (uint8_t)~CRYP_IT;
 800967a:	4b06      	ldr	r3, [pc, #24]	; (8009694 <CRYP_ITConfig+0x3c>)
 800967c:	4a05      	ldr	r2, [pc, #20]	; (8009694 <CRYP_ITConfig+0x3c>)
 800967e:	6951      	ldr	r1, [r2, #20]
 8009680:	79fa      	ldrb	r2, [r7, #7]
 8009682:	43d2      	mvns	r2, r2
 8009684:	b2d2      	uxtb	r2, r2
 8009686:	400a      	ands	r2, r1
 8009688:	615a      	str	r2, [r3, #20]
  }
}
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr
 8009694:	50060000 	.word	0x50060000

08009698 <CRYP_GetITStatus>:
  *            @arg CRYP_IT_INI: Input FIFO interrupt
  *            @arg CRYP_IT_OUTI: Output FIFO interrupt
  * @retval The new state of CRYP_IT (SET or RESET).
  */
ITStatus CRYP_GetITStatus(uint8_t CRYP_IT)
{
 8009698:	b480      	push	{r7}
 800969a:	b085      	sub	sp, #20
 800969c:	af00      	add	r7, sp, #0
 800969e:	4603      	mov	r3, r0
 80096a0:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 80096a2:	2300      	movs	r3, #0
 80096a4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CRYP_GET_IT(CRYP_IT));

  /* Check the status of the specified CRYP interrupt */
  if ((CRYP->MISR &  CRYP_IT) != (uint8_t)RESET)
 80096a6:	4b09      	ldr	r3, [pc, #36]	; (80096cc <CRYP_GetITStatus+0x34>)
 80096a8:	69da      	ldr	r2, [r3, #28]
 80096aa:	79fb      	ldrb	r3, [r7, #7]
 80096ac:	4013      	ands	r3, r2
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d002      	beq.n	80096b8 <CRYP_GetITStatus+0x20>
  {
    /* CRYP_IT is set */
    bitstatus = SET;
 80096b2:	2301      	movs	r3, #1
 80096b4:	73fb      	strb	r3, [r7, #15]
 80096b6:	e001      	b.n	80096bc <CRYP_GetITStatus+0x24>
  }
  else
  {
    /* CRYP_IT is reset */
    bitstatus = RESET;
 80096b8:	2300      	movs	r3, #0
 80096ba:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CRYP_IT status */
  return bitstatus;
 80096bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3714      	adds	r7, #20
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr
 80096ca:	bf00      	nop
 80096cc:	50060000 	.word	0x50060000

080096d0 <CRYP_GetCmdStatus>:
  * @brief  Returns whether CRYP peripheral is enabled or disabled.
  * @param  none.
  * @retval Current state of the CRYP peripheral (ENABLE or DISABLE).
  */
FunctionalState CRYP_GetCmdStatus(void)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
  FunctionalState state = DISABLE;
 80096d6:	2300      	movs	r3, #0
 80096d8:	71fb      	strb	r3, [r7, #7]

  if ((CRYP->CR & CRYP_CR_CRYPEN) != 0)
 80096da:	4b09      	ldr	r3, [pc, #36]	; (8009700 <CRYP_GetCmdStatus+0x30>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d002      	beq.n	80096ec <CRYP_GetCmdStatus+0x1c>
  {
    /* CRYPEN bit is set */
    state = ENABLE;
 80096e6:	2301      	movs	r3, #1
 80096e8:	71fb      	strb	r3, [r7, #7]
 80096ea:	e001      	b.n	80096f0 <CRYP_GetCmdStatus+0x20>
  }
  else
  {
    /* CRYPEN bit is reset */
    state = DISABLE;
 80096ec:	2300      	movs	r3, #0
 80096ee:	71fb      	strb	r3, [r7, #7]
  }
  return state;
 80096f0:	79fb      	ldrb	r3, [r7, #7]
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	370c      	adds	r7, #12
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr
 80096fe:	bf00      	nop
 8009700:	50060000 	.word	0x50060000

08009704 <CRYP_GetFlagStatus>:
  *            @arg CRYP_FLAG_OUTRIS: Output FIFO raw interrupt flag.
  *            @arg CRYP_FLAG_INRIS: Input FIFO raw interrupt flag.
  * @retval The new state of CRYP_FLAG (SET or RESET).
  */
FlagStatus CRYP_GetFlagStatus(uint8_t CRYP_FLAG)
{
 8009704:	b480      	push	{r7}
 8009706:	b085      	sub	sp, #20
 8009708:	af00      	add	r7, sp, #0
 800970a:	4603      	mov	r3, r0
 800970c:	71fb      	strb	r3, [r7, #7]
  FlagStatus bitstatus = RESET;
 800970e:	2300      	movs	r3, #0
 8009710:	73fb      	strb	r3, [r7, #15]
  uint32_t tempreg = 0;
 8009712:	2300      	movs	r3, #0
 8009714:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_CRYP_GET_FLAG(CRYP_FLAG));

  /* check if the FLAG is in RISR register */
  if ((CRYP_FLAG & FLAG_MASK) != 0x00) 
 8009716:	79fb      	ldrb	r3, [r7, #7]
 8009718:	f003 0320 	and.w	r3, r3, #32
 800971c:	2b00      	cmp	r3, #0
 800971e:	d003      	beq.n	8009728 <CRYP_GetFlagStatus+0x24>
  {
    tempreg = CRYP->RISR;
 8009720:	4b0b      	ldr	r3, [pc, #44]	; (8009750 <CRYP_GetFlagStatus+0x4c>)
 8009722:	699b      	ldr	r3, [r3, #24]
 8009724:	60bb      	str	r3, [r7, #8]
 8009726:	e002      	b.n	800972e <CRYP_GetFlagStatus+0x2a>
  }
  else  /* The FLAG is in SR register */
  {
    tempreg = CRYP->SR;
 8009728:	4b09      	ldr	r3, [pc, #36]	; (8009750 <CRYP_GetFlagStatus+0x4c>)
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	60bb      	str	r3, [r7, #8]
  }


  /* Check the status of the specified CRYP flag */
  if ((tempreg & CRYP_FLAG ) != (uint8_t)RESET)
 800972e:	79fa      	ldrb	r2, [r7, #7]
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	4013      	ands	r3, r2
 8009734:	2b00      	cmp	r3, #0
 8009736:	d002      	beq.n	800973e <CRYP_GetFlagStatus+0x3a>
  {
    /* CRYP_FLAG is set */
    bitstatus = SET;
 8009738:	2301      	movs	r3, #1
 800973a:	73fb      	strb	r3, [r7, #15]
 800973c:	e001      	b.n	8009742 <CRYP_GetFlagStatus+0x3e>
  }
  else
  {
    /* CRYP_FLAG is reset */
    bitstatus = RESET;
 800973e:	2300      	movs	r3, #0
 8009740:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the CRYP_FLAG status */
  return  bitstatus;
 8009742:	7bfb      	ldrb	r3, [r7, #15]
}
 8009744:	4618      	mov	r0, r3
 8009746:	3714      	adds	r7, #20
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr
 8009750:	50060000 	.word	0x50060000

08009754 <CRYP_DES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
                         uint32_t Ilength, uint8_t *Output)
{
 8009754:	b590      	push	{r4, r7, lr}
 8009756:	b09b      	sub	sp, #108	; 0x6c
 8009758:	af00      	add	r7, sp, #0
 800975a:	60b9      	str	r1, [r7, #8]
 800975c:	607a      	str	r2, [r7, #4]
 800975e:	603b      	str	r3, [r7, #0]
 8009760:	4603      	mov	r3, r0
 8009762:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 8009764:	2300      	movs	r3, #0
 8009766:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 8009768:	2300      	movs	r3, #0
 800976a:	657b      	str	r3, [r7, #84]	; 0x54
  ErrorStatus status = SUCCESS;
 800976c:	2301      	movs	r3, #1
 800976e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t keyaddr    = (uint32_t)Key;
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t inputaddr  = (uint32_t)Input;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t outputaddr = (uint32_t)Output;
 800977a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800977c:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t i = 0;
 800977e:	2300      	movs	r3, #0
 8009780:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 8009782:	f107 0318 	add.w	r3, r7, #24
 8009786:	4618      	mov	r0, r3
 8009788:	f7ff fd40 	bl	800920c <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if( Mode == MODE_ENCRYPT ) /* DES encryption */
 800978c:	7bfb      	ldrb	r3, [r7, #15]
 800978e:	2b01      	cmp	r3, #1
 8009790:	d102      	bne.n	8009798 <CRYP_DES_ECB+0x44>
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 8009792:	2300      	movs	r3, #0
 8009794:	63bb      	str	r3, [r7, #56]	; 0x38
 8009796:	e001      	b.n	800979c <CRYP_DES_ECB+0x48>
  }
  else/* if( Mode == MODE_DECRYPT )*/ /* DES decryption */
  {      
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 8009798:	2304      	movs	r3, #4
 800979a:	63bb      	str	r3, [r7, #56]	; 0x38
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_ECB;
 800979c:	2310      	movs	r3, #16
 800979e:	63fb      	str	r3, [r7, #60]	; 0x3c
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 80097a0:	2380      	movs	r3, #128	; 0x80
 80097a2:	643b      	str	r3, [r7, #64]	; 0x40
  CRYP_Init(&DES_CRYP_InitStructure);
 80097a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80097a8:	4618      	mov	r0, r3
 80097aa:	f7ff fc9b 	bl	80090e4 <CRYP_Init>

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80097ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80097b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097b6:	ba1b      	rev	r3, r3
 80097b8:	623b      	str	r3, [r7, #32]
  keyaddr+=4;
 80097ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097bc:	3304      	adds	r3, #4
 80097be:	653b      	str	r3, [r7, #80]	; 0x50
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80097c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80097c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097c8:	ba1b      	rev	r3, r3
 80097ca:	627b      	str	r3, [r7, #36]	; 0x24
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 80097cc:	f107 0318 	add.w	r3, r7, #24
 80097d0:	4618      	mov	r0, r3
 80097d2:	f7ff fcef 	bl	80091b4 <CRYP_KeyInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 80097d6:	f7ff fd89 	bl	80092ec <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 80097da:	2001      	movs	r0, #1
 80097dc:	f7ff fd94 	bl	8009308 <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 80097e0:	f7ff ff76 	bl	80096d0 <CRYP_GetCmdStatus>
 80097e4:	4603      	mov	r3, r0
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d101      	bne.n	80097ee <CRYP_DES_ECB+0x9a>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 80097ea:	2300      	movs	r3, #0
 80097ec:	e04a      	b.n	8009884 <CRYP_DES_ECB+0x130>
  }
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 80097ee:	2300      	movs	r3, #0
 80097f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80097f2:	e03a      	b.n	800986a <CRYP_DES_ECB+0x116>
  {

    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80097f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4618      	mov	r0, r3
 80097fa:	f7ff fda1 	bl	8009340 <CRYP_DataIn>
    inputaddr+=4;
 80097fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009800:	3304      	adds	r3, #4
 8009802:	663b      	str	r3, [r7, #96]	; 0x60
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8009804:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4618      	mov	r0, r3
 800980a:	f7ff fd99 	bl	8009340 <CRYP_DataIn>
    inputaddr+=4;
 800980e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009810:	3304      	adds	r3, #4
 8009812:	663b      	str	r3, [r7, #96]	; 0x60

/* Wait until the complete message has been processed */
    counter = 0;
 8009814:	2300      	movs	r3, #0
 8009816:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8009818:	2010      	movs	r0, #16
 800981a:	f7ff ff73 	bl	8009704 <CRYP_GetFlagStatus>
 800981e:	4603      	mov	r3, r0
 8009820:	657b      	str	r3, [r7, #84]	; 0x54
      counter++;
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	3301      	adds	r3, #1
 8009826:	617b      	str	r3, [r7, #20]
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800982e:	d002      	beq.n	8009836 <CRYP_DES_ECB+0xe2>
 8009830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009832:	2b00      	cmp	r3, #0
 8009834:	d1f0      	bne.n	8009818 <CRYP_DES_ECB+0xc4>

    if (busystatus != RESET)
 8009836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009838:	2b00      	cmp	r3, #0
 800983a:	d003      	beq.n	8009844 <CRYP_DES_ECB+0xf0>
   {
       status = ERROR;
 800983c:	2300      	movs	r3, #0
 800983e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009842:	e00f      	b.n	8009864 <CRYP_DES_ECB+0x110>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8009844:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8009846:	f7ff fd89 	bl	800935c <CRYP_DataOut>
 800984a:	4603      	mov	r3, r0
 800984c:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800984e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009850:	3304      	adds	r3, #4
 8009852:	65fb      	str	r3, [r7, #92]	; 0x5c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8009854:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8009856:	f7ff fd81 	bl	800935c <CRYP_DataOut>
 800985a:	4603      	mov	r3, r0
 800985c:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800985e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009860:	3304      	adds	r3, #4
 8009862:	65fb      	str	r3, [r7, #92]	; 0x5c
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
  }
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8009864:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009866:	3308      	adds	r3, #8
 8009868:	65bb      	str	r3, [r7, #88]	; 0x58
 800986a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	429a      	cmp	r2, r3
 8009870:	d203      	bcs.n	800987a <CRYP_DES_ECB+0x126>
 8009872:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009876:	2b00      	cmp	r3, #0
 8009878:	d1bc      	bne.n	80097f4 <CRYP_DES_ECB+0xa0>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 800987a:	2000      	movs	r0, #0
 800987c:	f7ff fd44 	bl	8009308 <CRYP_Cmd>

  return status; 
 8009880:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8009884:	4618      	mov	r0, r3
 8009886:	376c      	adds	r7, #108	; 0x6c
 8009888:	46bd      	mov	sp, r7
 800988a:	bd90      	pop	{r4, r7, pc}

0800988c <CRYP_DES_CBC>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
                         uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 800988c:	b590      	push	{r4, r7, lr}
 800988e:	b0a1      	sub	sp, #132	; 0x84
 8009890:	af00      	add	r7, sp, #0
 8009892:	60b9      	str	r1, [r7, #8]
 8009894:	607a      	str	r2, [r7, #4]
 8009896:	603b      	str	r3, [r7, #0]
 8009898:	4603      	mov	r3, r0
 800989a:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 800989c:	2300      	movs	r3, #0
 800989e:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 80098a0:	2300      	movs	r3, #0
 80098a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  ErrorStatus status = SUCCESS;
 80098a4:	2301      	movs	r3, #1
 80098a6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t keyaddr    = (uint32_t)Key;
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	66bb      	str	r3, [r7, #104]	; 0x68
  uint32_t inputaddr  = (uint32_t)Input;
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	67bb      	str	r3, [r7, #120]	; 0x78
  uint32_t outputaddr = (uint32_t)Output;
 80098b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80098b6:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t ivaddr     = (uint32_t)InitVectors;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t i = 0;
 80098bc:	2300      	movs	r3, #0
 80098be:	673b      	str	r3, [r7, #112]	; 0x70

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 80098c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098c4:	4618      	mov	r0, r3
 80098c6:	f7ff fca1 	bl	800920c <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* DES encryption */
 80098ca:	7bfb      	ldrb	r3, [r7, #15]
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d102      	bne.n	80098d6 <CRYP_DES_CBC+0x4a>
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 80098d0:	2300      	movs	r3, #0
 80098d2:	647b      	str	r3, [r7, #68]	; 0x44
 80098d4:	e001      	b.n	80098da <CRYP_DES_CBC+0x4e>
  }
  else /*if(Mode == MODE_DECRYPT)*/ /* DES decryption */
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 80098d6:	2304      	movs	r3, #4
 80098d8:	647b      	str	r3, [r7, #68]	; 0x44
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_CBC;
 80098da:	2318      	movs	r3, #24
 80098dc:	64bb      	str	r3, [r7, #72]	; 0x48
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 80098de:	2380      	movs	r3, #128	; 0x80
 80098e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  CRYP_Init(&DES_CRYP_InitStructure);
 80098e2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80098e6:	4618      	mov	r0, r3
 80098e8:	f7ff fbfc 	bl	80090e4 <CRYP_Init>

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80098ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	663b      	str	r3, [r7, #96]	; 0x60
 80098f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098f4:	ba1b      	rev	r3, r3
 80098f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 80098f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098fa:	3304      	adds	r3, #4
 80098fc:	66bb      	str	r3, [r7, #104]	; 0x68
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80098fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009904:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009906:	ba1b      	rev	r3, r3
 8009908:	633b      	str	r3, [r7, #48]	; 0x30
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 800990a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800990e:	4618      	mov	r0, r3
 8009910:	f7ff fc50 	bl	80091b4 <CRYP_KeyInit>

  /* Initialization Vectors */
  DES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8009914:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	65bb      	str	r3, [r7, #88]	; 0x58
 800991a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800991c:	ba1b      	rev	r3, r3
 800991e:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 8009920:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009922:	3304      	adds	r3, #4
 8009924:	667b      	str	r3, [r7, #100]	; 0x64
  DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8009926:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	657b      	str	r3, [r7, #84]	; 0x54
 800992c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800992e:	ba1b      	rev	r3, r3
 8009930:	61bb      	str	r3, [r7, #24]
  CRYP_IVInit(&DES_CRYP_IVInitStructure);
 8009932:	f107 0314 	add.w	r3, r7, #20
 8009936:	4618      	mov	r0, r3
 8009938:	f7ff fc8a 	bl	8009250 <CRYP_IVInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 800993c:	f7ff fcd6 	bl	80092ec <CRYP_FIFOFlush>
  
  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8009940:	2001      	movs	r0, #1
 8009942:	f7ff fce1 	bl	8009308 <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 8009946:	f7ff fec3 	bl	80096d0 <CRYP_GetCmdStatus>
 800994a:	4603      	mov	r3, r0
 800994c:	2b00      	cmp	r3, #0
 800994e:	d101      	bne.n	8009954 <CRYP_DES_CBC+0xc8>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 8009950:	2300      	movs	r3, #0
 8009952:	e04b      	b.n	80099ec <CRYP_DES_CBC+0x160>
  }
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8009954:	2300      	movs	r3, #0
 8009956:	673b      	str	r3, [r7, #112]	; 0x70
 8009958:	e03a      	b.n	80099d0 <CRYP_DES_CBC+0x144>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800995a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4618      	mov	r0, r3
 8009960:	f7ff fcee 	bl	8009340 <CRYP_DataIn>
    inputaddr+=4;
 8009964:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009966:	3304      	adds	r3, #4
 8009968:	67bb      	str	r3, [r7, #120]	; 0x78
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800996a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4618      	mov	r0, r3
 8009970:	f7ff fce6 	bl	8009340 <CRYP_DataIn>
    inputaddr+=4;
 8009974:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009976:	3304      	adds	r3, #4
 8009978:	67bb      	str	r3, [r7, #120]	; 0x78

    /* Wait until the complete message has been processed */
    counter = 0;
 800997a:	2300      	movs	r3, #0
 800997c:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 800997e:	2010      	movs	r0, #16
 8009980:	f7ff fec0 	bl	8009704 <CRYP_GetFlagStatus>
 8009984:	4603      	mov	r3, r0
 8009986:	66fb      	str	r3, [r7, #108]	; 0x6c
      counter++;
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	3301      	adds	r3, #1
 800998c:	613b      	str	r3, [r7, #16]
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009994:	d002      	beq.n	800999c <CRYP_DES_CBC+0x110>
 8009996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009998:	2b00      	cmp	r3, #0
 800999a:	d1f0      	bne.n	800997e <CRYP_DES_CBC+0xf2>

    if (busystatus != RESET)
 800999c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d003      	beq.n	80099aa <CRYP_DES_CBC+0x11e>
   {
       status = ERROR;
 80099a2:	2300      	movs	r3, #0
 80099a4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80099a8:	e00f      	b.n	80099ca <CRYP_DES_CBC+0x13e>
    }
    else
    {
      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80099aa:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 80099ac:	f7ff fcd6 	bl	800935c <CRYP_DataOut>
 80099b0:	4603      	mov	r3, r0
 80099b2:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80099b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80099b6:	3304      	adds	r3, #4
 80099b8:	677b      	str	r3, [r7, #116]	; 0x74
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80099ba:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 80099bc:	f7ff fcce 	bl	800935c <CRYP_DataOut>
 80099c0:	4603      	mov	r3, r0
 80099c2:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80099c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80099c6:	3304      	adds	r3, #4
 80099c8:	677b      	str	r3, [r7, #116]	; 0x74
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
  }
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 80099ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80099cc:	3308      	adds	r3, #8
 80099ce:	673b      	str	r3, [r7, #112]	; 0x70
 80099d0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80099d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d203      	bcs.n	80099e2 <CRYP_DES_CBC+0x156>
 80099da:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d1bb      	bne.n	800995a <CRYP_DES_CBC+0xce>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80099e2:	2000      	movs	r0, #0
 80099e4:	f7ff fc90 	bl	8009308 <CRYP_Cmd>

  return status; 
 80099e8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3784      	adds	r7, #132	; 0x84
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd90      	pop	{r4, r7, pc}

080099f4 <CRYP_TDES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
                          uint32_t Ilength, uint8_t *Output)
{
 80099f4:	b590      	push	{r4, r7, lr}
 80099f6:	b09f      	sub	sp, #124	; 0x7c
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	60b9      	str	r1, [r7, #8]
 80099fc:	607a      	str	r2, [r7, #4]
 80099fe:	603b      	str	r3, [r7, #0]
 8009a00:	4603      	mov	r3, r0
 8009a02:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 8009a04:	2300      	movs	r3, #0
 8009a06:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	667b      	str	r3, [r7, #100]	; 0x64
  ErrorStatus status = SUCCESS;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  uint32_t keyaddr    = (uint32_t)Key;
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t inputaddr  = (uint32_t)Input;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t outputaddr = (uint32_t)Output;
 8009a1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a1e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t i = 0;
 8009a20:	2300      	movs	r3, #0
 8009a22:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 8009a24:	f107 0318 	add.w	r3, r7, #24
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7ff fbef 	bl	800920c <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* TDES encryption */
 8009a2e:	7bfb      	ldrb	r3, [r7, #15]
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d102      	bne.n	8009a3a <CRYP_TDES_ECB+0x46>
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8009a34:	2300      	movs	r3, #0
 8009a36:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a38:	e001      	b.n	8009a3e <CRYP_TDES_ECB+0x4a>
  }
  else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8009a3a:	2304      	movs	r3, #4
 8009a3c:	63bb      	str	r3, [r7, #56]	; 0x38
  }

  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	63fb      	str	r3, [r7, #60]	; 0x3c
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8009a42:	2380      	movs	r3, #128	; 0x80
 8009a44:	643b      	str	r3, [r7, #64]	; 0x40
  CRYP_Init(&TDES_CRYP_InitStructure);
 8009a46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7ff fb4a 	bl	80090e4 <CRYP_Init>

  /* Key Initialisation */
  TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8009a50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a58:	ba1b      	rev	r3, r3
 8009a5a:	623b      	str	r3, [r7, #32]
  keyaddr+=4;
 8009a5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a5e:	3304      	adds	r3, #4
 8009a60:	663b      	str	r3, [r7, #96]	; 0x60
  TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8009a62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a6a:	ba1b      	rev	r3, r3
 8009a6c:	627b      	str	r3, [r7, #36]	; 0x24
  keyaddr+=4;
 8009a6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a70:	3304      	adds	r3, #4
 8009a72:	663b      	str	r3, [r7, #96]	; 0x60
  TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8009a74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	657b      	str	r3, [r7, #84]	; 0x54
 8009a7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a7c:	ba1b      	rev	r3, r3
 8009a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  keyaddr+=4;
 8009a80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a82:	3304      	adds	r3, #4
 8009a84:	663b      	str	r3, [r7, #96]	; 0x60
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8009a86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	653b      	str	r3, [r7, #80]	; 0x50
 8009a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a8e:	ba1b      	rev	r3, r3
 8009a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 8009a92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a94:	3304      	adds	r3, #4
 8009a96:	663b      	str	r3, [r7, #96]	; 0x60
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8009a98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009aa0:	ba1b      	rev	r3, r3
 8009aa2:	633b      	str	r3, [r7, #48]	; 0x30
  keyaddr+=4;
 8009aa4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009aa6:	3304      	adds	r3, #4
 8009aa8:	663b      	str	r3, [r7, #96]	; 0x60
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8009aaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	64bb      	str	r3, [r7, #72]	; 0x48
 8009ab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ab2:	ba1b      	rev	r3, r3
 8009ab4:	637b      	str	r3, [r7, #52]	; 0x34
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 8009ab6:	f107 0318 	add.w	r3, r7, #24
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7ff fb7a 	bl	80091b4 <CRYP_KeyInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8009ac0:	f7ff fc14 	bl	80092ec <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8009ac4:	2001      	movs	r0, #1
 8009ac6:	f7ff fc1f 	bl	8009308 <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 8009aca:	f7ff fe01 	bl	80096d0 <CRYP_GetCmdStatus>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d101      	bne.n	8009ad8 <CRYP_TDES_ECB+0xe4>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	e04a      	b.n	8009b6e <CRYP_TDES_ECB+0x17a>
  }
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8009ad8:	2300      	movs	r3, #0
 8009ada:	66bb      	str	r3, [r7, #104]	; 0x68
 8009adc:	e03a      	b.n	8009b54 <CRYP_TDES_ECB+0x160>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8009ade:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f7ff fc2c 	bl	8009340 <CRYP_DataIn>
    inputaddr+=4;
 8009ae8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009aea:	3304      	adds	r3, #4
 8009aec:	673b      	str	r3, [r7, #112]	; 0x70
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8009aee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4618      	mov	r0, r3
 8009af4:	f7ff fc24 	bl	8009340 <CRYP_DataIn>
    inputaddr+=4;
 8009af8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009afa:	3304      	adds	r3, #4
 8009afc:	673b      	str	r3, [r7, #112]	; 0x70

    /* Wait until the complete message has been processed */
    counter = 0;
 8009afe:	2300      	movs	r3, #0
 8009b00:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8009b02:	2010      	movs	r0, #16
 8009b04:	f7ff fdfe 	bl	8009704 <CRYP_GetFlagStatus>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	667b      	str	r3, [r7, #100]	; 0x64
      counter++;
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	3301      	adds	r3, #1
 8009b10:	617b      	str	r3, [r7, #20]
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b18:	d002      	beq.n	8009b20 <CRYP_TDES_ECB+0x12c>
 8009b1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d1f0      	bne.n	8009b02 <CRYP_TDES_ECB+0x10e>

    if (busystatus != RESET)
 8009b20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d003      	beq.n	8009b2e <CRYP_TDES_ECB+0x13a>
    {
       status = ERROR;
 8009b26:	2300      	movs	r3, #0
 8009b28:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8009b2c:	e00f      	b.n	8009b4e <CRYP_TDES_ECB+0x15a>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8009b2e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8009b30:	f7ff fc14 	bl	800935c <CRYP_DataOut>
 8009b34:	4603      	mov	r3, r0
 8009b36:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8009b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b3a:	3304      	adds	r3, #4
 8009b3c:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8009b3e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8009b40:	f7ff fc0c 	bl	800935c <CRYP_DataOut>
 8009b44:	4603      	mov	r3, r0
 8009b46:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8009b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b4a:	3304      	adds	r3, #4
 8009b4c:	66fb      	str	r3, [r7, #108]	; 0x6c
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
  }
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8009b4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b50:	3308      	adds	r3, #8
 8009b52:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b54:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d203      	bcs.n	8009b64 <CRYP_TDES_ECB+0x170>
 8009b5c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d1bc      	bne.n	8009ade <CRYP_TDES_ECB+0xea>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8009b64:	2000      	movs	r0, #0
 8009b66:	f7ff fbcf 	bl	8009308 <CRYP_Cmd>

  return status; 
 8009b6a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	377c      	adds	r7, #124	; 0x7c
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd90      	pop	{r4, r7, pc}
 8009b76:	bf00      	nop

08009b78 <CRYP_TDES_CBC>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
                          uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 8009b78:	b590      	push	{r4, r7, lr}
 8009b7a:	b0a5      	sub	sp, #148	; 0x94
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	60b9      	str	r1, [r7, #8]
 8009b80:	607a      	str	r2, [r7, #4]
 8009b82:	603b      	str	r3, [r7, #0]
 8009b84:	4603      	mov	r3, r0
 8009b86:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	67fb      	str	r3, [r7, #124]	; 0x7c
  ErrorStatus status = SUCCESS;
 8009b90:	2301      	movs	r3, #1
 8009b92:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  uint32_t keyaddr    = (uint32_t)Key;
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	67bb      	str	r3, [r7, #120]	; 0x78
  uint32_t inputaddr  = (uint32_t)Input;
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t outputaddr = (uint32_t)Output;
 8009ba0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009ba4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t ivaddr     = (uint32_t)InitVectors;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t i = 0;
 8009bac:	2300      	movs	r3, #0
 8009bae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 8009bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f7ff fb28 	bl	800920c <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* TDES encryption */
 8009bbc:	7bfb      	ldrb	r3, [r7, #15]
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d102      	bne.n	8009bc8 <CRYP_TDES_CBC+0x50>
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	647b      	str	r3, [r7, #68]	; 0x44
 8009bc6:	e001      	b.n	8009bcc <CRYP_TDES_CBC+0x54>
  }
  else
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8009bc8:	2304      	movs	r3, #4
 8009bca:	647b      	str	r3, [r7, #68]	; 0x44
  }
  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
 8009bcc:	2308      	movs	r3, #8
 8009bce:	64bb      	str	r3, [r7, #72]	; 0x48
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8009bd0:	2380      	movs	r3, #128	; 0x80
 8009bd2:	64fb      	str	r3, [r7, #76]	; 0x4c

  CRYP_Init(&TDES_CRYP_InitStructure);
 8009bd4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f7ff fa83 	bl	80090e4 <CRYP_Init>

  /* Key Initialisation */
  TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8009bde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	673b      	str	r3, [r7, #112]	; 0x70
 8009be4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009be6:	ba1b      	rev	r3, r3
 8009be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 8009bea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bec:	3304      	adds	r3, #4
 8009bee:	67bb      	str	r3, [r7, #120]	; 0x78
  TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8009bf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bf8:	ba1b      	rev	r3, r3
 8009bfa:	633b      	str	r3, [r7, #48]	; 0x30
  keyaddr+=4;
 8009bfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bfe:	3304      	adds	r3, #4
 8009c00:	67bb      	str	r3, [r7, #120]	; 0x78
  TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8009c02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009c0a:	ba1b      	rev	r3, r3
 8009c0c:	637b      	str	r3, [r7, #52]	; 0x34
  keyaddr+=4;
 8009c0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c10:	3304      	adds	r3, #4
 8009c12:	67bb      	str	r3, [r7, #120]	; 0x78
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8009c14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	667b      	str	r3, [r7, #100]	; 0x64
 8009c1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c1c:	ba1b      	rev	r3, r3
 8009c1e:	63bb      	str	r3, [r7, #56]	; 0x38
  keyaddr+=4;
 8009c20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c22:	3304      	adds	r3, #4
 8009c24:	67bb      	str	r3, [r7, #120]	; 0x78
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8009c26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	663b      	str	r3, [r7, #96]	; 0x60
 8009c2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c2e:	ba1b      	rev	r3, r3
 8009c30:	63fb      	str	r3, [r7, #60]	; 0x3c
  keyaddr+=4;
 8009c32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c34:	3304      	adds	r3, #4
 8009c36:	67bb      	str	r3, [r7, #120]	; 0x78
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8009c38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c40:	ba1b      	rev	r3, r3
 8009c42:	643b      	str	r3, [r7, #64]	; 0x40
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 8009c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f7ff fab3 	bl	80091b4 <CRYP_KeyInit>

  /* Initialization Vectors */
  TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8009c4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	65bb      	str	r3, [r7, #88]	; 0x58
 8009c54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c56:	ba1b      	rev	r3, r3
 8009c58:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 8009c5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c5c:	3304      	adds	r3, #4
 8009c5e:	677b      	str	r3, [r7, #116]	; 0x74
  TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8009c60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	657b      	str	r3, [r7, #84]	; 0x54
 8009c66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c68:	ba1b      	rev	r3, r3
 8009c6a:	61bb      	str	r3, [r7, #24]
  CRYP_IVInit(&TDES_CRYP_IVInitStructure);
 8009c6c:	f107 0314 	add.w	r3, r7, #20
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7ff faed 	bl	8009250 <CRYP_IVInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8009c76:	f7ff fb39 	bl	80092ec <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8009c7a:	2001      	movs	r0, #1
 8009c7c:	f7ff fb44 	bl	8009308 <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 8009c80:	f7ff fd26 	bl	80096d0 <CRYP_GetCmdStatus>
 8009c84:	4603      	mov	r3, r0
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d101      	bne.n	8009c8e <CRYP_TDES_CBC+0x116>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	e05b      	b.n	8009d46 <CRYP_TDES_CBC+0x1ce>
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8009c8e:	2300      	movs	r3, #0
 8009c90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009c94:	e048      	b.n	8009d28 <CRYP_TDES_CBC+0x1b0>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8009c96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f7ff fb4f 	bl	8009340 <CRYP_DataIn>
    inputaddr+=4;
 8009ca2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009ca6:	3304      	adds	r3, #4
 8009ca8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8009cac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f7ff fb44 	bl	8009340 <CRYP_DataIn>
    inputaddr+=4;
 8009cb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009cbc:	3304      	adds	r3, #4
 8009cbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    /* Wait until the complete message has been processed */
    counter = 0;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8009cc6:	2010      	movs	r0, #16
 8009cc8:	f7ff fd1c 	bl	8009704 <CRYP_GetFlagStatus>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	67fb      	str	r3, [r7, #124]	; 0x7c
      counter++;
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	613b      	str	r3, [r7, #16]
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cdc:	d002      	beq.n	8009ce4 <CRYP_TDES_CBC+0x16c>
 8009cde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d1f0      	bne.n	8009cc6 <CRYP_TDES_CBC+0x14e>

    if (busystatus != RESET)
 8009ce4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d003      	beq.n	8009cf2 <CRYP_TDES_CBC+0x17a>
   {
       status = ERROR;
 8009cea:	2300      	movs	r3, #0
 8009cec:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8009cf0:	e015      	b.n	8009d1e <CRYP_TDES_CBC+0x1a6>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8009cf2:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8009cf6:	f7ff fb31 	bl	800935c <CRYP_DataOut>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8009cfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009d02:	3304      	adds	r3, #4
 8009d04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8009d08:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8009d0c:	f7ff fb26 	bl	800935c <CRYP_DataOut>
 8009d10:	4603      	mov	r3, r0
 8009d12:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8009d14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009d18:	3304      	adds	r3, #4
 8009d1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8009d1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009d22:	3308      	adds	r3, #8
 8009d24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009d28:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009d2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d203      	bcs.n	8009d3c <CRYP_TDES_CBC+0x1c4>
 8009d34:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d1ac      	bne.n	8009c96 <CRYP_TDES_CBC+0x11e>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8009d3c:	2000      	movs	r0, #0
 8009d3e:	f7ff fae3 	bl	8009308 <CRYP_Cmd>

  return status; 
 8009d42:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3794      	adds	r7, #148	; 0x94
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd90      	pop	{r4, r7, pc}
 8009d4e:	bf00      	nop

08009d50 <DAC_DeInit>:
  * @brief  Deinitializes the DAC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void DAC_DeInit(void)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	af00      	add	r7, sp, #0
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
 8009d54:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8009d58:	2101      	movs	r1, #1
 8009d5a:	f006 f875 	bl	800fe48 <RCC_APB1PeriphResetCmd>
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
 8009d5e:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8009d62:	2100      	movs	r1, #0
 8009d64:	f006 f870 	bl	800fe48 <RCC_APB1PeriphResetCmd>
}
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	bf00      	nop

08009d6c <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b085      	sub	sp, #20
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8009d76:	2300      	movs	r3, #0
 8009d78:	60fb      	str	r3, [r7, #12]
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8009d7e:	4b13      	ldr	r3, [pc, #76]	; (8009dcc <DAC_Init+0x60>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f640 72fe 	movw	r2, #4094	; 0xffe
 8009d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d8e:	43db      	mvns	r3, r3
 8009d90:	68fa      	ldr	r2, [r7, #12]
 8009d92:	4013      	ands	r3, r2
 8009d94:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	681a      	ldr	r2, [r3, #0]
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	689b      	ldr	r3, [r3, #8]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8009da4:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	68db      	ldr	r3, [r3, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8009daa:	4313      	orrs	r3, r2
 8009dac:	60bb      	str	r3, [r7, #8]
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	68ba      	ldr	r2, [r7, #8]
 8009db2:	fa02 f303 	lsl.w	r3, r2, r3
 8009db6:	68fa      	ldr	r2, [r7, #12]
 8009db8:	4313      	orrs	r3, r2
 8009dba:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8009dbc:	4b03      	ldr	r3, [pc, #12]	; (8009dcc <DAC_Init+0x60>)
 8009dbe:	68fa      	ldr	r2, [r7, #12]
 8009dc0:	601a      	str	r2, [r3, #0]
}
 8009dc2:	3714      	adds	r7, #20
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr
 8009dcc:	40007400 	.word	0x40007400

08009dd0 <DAC_StructInit>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
/*--------------- Reset DAC init structure parameters values -----------------*/
  /* Initialize the DAC_Trigger member */
  DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	601a      	str	r2, [r3, #0]
  /* Initialize the DAC_WaveGeneration member */
  DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	605a      	str	r2, [r3, #4]
  /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
  DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2200      	movs	r2, #0
 8009de8:	609a      	str	r2, [r3, #8]
  /* Initialize the DAC_OutputBuffer member */
  DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2200      	movs	r2, #0
 8009dee:	60da      	str	r2, [r3, #12]
}
 8009df0:	370c      	adds	r7, #12
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr
 8009dfa:	bf00      	nop

08009dfc <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b083      	sub	sp, #12
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	460b      	mov	r3, r1
 8009e06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009e08:	78fb      	ldrb	r3, [r7, #3]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d009      	beq.n	8009e22 <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 8009e0e:	4b0c      	ldr	r3, [pc, #48]	; (8009e40 <DAC_Cmd+0x44>)
 8009e10:	4a0b      	ldr	r2, [pc, #44]	; (8009e40 <DAC_Cmd+0x44>)
 8009e12:	6811      	ldr	r1, [r2, #0]
 8009e14:	687a      	ldr	r2, [r7, #4]
 8009e16:	2001      	movs	r0, #1
 8009e18:	fa00 f202 	lsl.w	r2, r0, r2
 8009e1c:	430a      	orrs	r2, r1
 8009e1e:	601a      	str	r2, [r3, #0]
 8009e20:	e009      	b.n	8009e36 <DAC_Cmd+0x3a>
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 8009e22:	4b07      	ldr	r3, [pc, #28]	; (8009e40 <DAC_Cmd+0x44>)
 8009e24:	4a06      	ldr	r2, [pc, #24]	; (8009e40 <DAC_Cmd+0x44>)
 8009e26:	6811      	ldr	r1, [r2, #0]
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	2001      	movs	r0, #1
 8009e2c:	fa00 f202 	lsl.w	r2, r0, r2
 8009e30:	43d2      	mvns	r2, r2
 8009e32:	400a      	ands	r2, r1
 8009e34:	601a      	str	r2, [r3, #0]
  }
}
 8009e36:	370c      	adds	r7, #12
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr
 8009e40:	40007400 	.word	0x40007400

08009e44 <DAC_SoftwareTriggerCmd>:
  * @param  NewState: new state of the selected DAC channel software trigger.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b083      	sub	sp, #12
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009e50:	78fb      	ldrb	r3, [r7, #3]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d00a      	beq.n	8009e6c <DAC_SoftwareTriggerCmd+0x28>
  {
    /* Enable software trigger for the selected DAC channel */
    DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
 8009e56:	4b0d      	ldr	r3, [pc, #52]	; (8009e8c <DAC_SoftwareTriggerCmd+0x48>)
 8009e58:	4a0c      	ldr	r2, [pc, #48]	; (8009e8c <DAC_SoftwareTriggerCmd+0x48>)
 8009e5a:	6851      	ldr	r1, [r2, #4]
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	0912      	lsrs	r2, r2, #4
 8009e60:	2001      	movs	r0, #1
 8009e62:	fa00 f202 	lsl.w	r2, r0, r2
 8009e66:	430a      	orrs	r2, r1
 8009e68:	605a      	str	r2, [r3, #4]
 8009e6a:	e00a      	b.n	8009e82 <DAC_SoftwareTriggerCmd+0x3e>
  }
  else
  {
    /* Disable software trigger for the selected DAC channel */
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
 8009e6c:	4b07      	ldr	r3, [pc, #28]	; (8009e8c <DAC_SoftwareTriggerCmd+0x48>)
 8009e6e:	4a07      	ldr	r2, [pc, #28]	; (8009e8c <DAC_SoftwareTriggerCmd+0x48>)
 8009e70:	6851      	ldr	r1, [r2, #4]
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	0912      	lsrs	r2, r2, #4
 8009e76:	2001      	movs	r0, #1
 8009e78:	fa00 f202 	lsl.w	r2, r0, r2
 8009e7c:	43d2      	mvns	r2, r2
 8009e7e:	400a      	ands	r2, r1
 8009e80:	605a      	str	r2, [r3, #4]
  }
}
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr
 8009e8c:	40007400 	.word	0x40007400

08009e90 <DAC_DualSoftwareTriggerCmd>:
  * @param  NewState: new state of the DAC channels software triggers.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b083      	sub	sp, #12
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	4603      	mov	r3, r0
 8009e98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009e9a:	79fb      	ldrb	r3, [r7, #7]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d006      	beq.n	8009eae <DAC_DualSoftwareTriggerCmd+0x1e>
  {
    /* Enable software trigger for both DAC channels */
    DAC->SWTRIGR |= DUAL_SWTRIG_SET;
 8009ea0:	4b08      	ldr	r3, [pc, #32]	; (8009ec4 <DAC_DualSoftwareTriggerCmd+0x34>)
 8009ea2:	4a08      	ldr	r2, [pc, #32]	; (8009ec4 <DAC_DualSoftwareTriggerCmd+0x34>)
 8009ea4:	6852      	ldr	r2, [r2, #4]
 8009ea6:	f042 0203 	orr.w	r2, r2, #3
 8009eaa:	605a      	str	r2, [r3, #4]
 8009eac:	e005      	b.n	8009eba <DAC_DualSoftwareTriggerCmd+0x2a>
  }
  else
  {
    /* Disable software trigger for both DAC channels */
    DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
 8009eae:	4b05      	ldr	r3, [pc, #20]	; (8009ec4 <DAC_DualSoftwareTriggerCmd+0x34>)
 8009eb0:	4a04      	ldr	r2, [pc, #16]	; (8009ec4 <DAC_DualSoftwareTriggerCmd+0x34>)
 8009eb2:	6852      	ldr	r2, [r2, #4]
 8009eb4:	f022 0203 	bic.w	r2, r2, #3
 8009eb8:	605a      	str	r2, [r3, #4]
  }
}
 8009eba:	370c      	adds	r7, #12
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr
 8009ec4:	40007400 	.word	0x40007400

08009ec8 <DAC_WaveGenerationCmd>:
  * @param  NewState: new state of the selected DAC channel wave generation.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b085      	sub	sp, #20
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	60f8      	str	r0, [r7, #12]
 8009ed0:	60b9      	str	r1, [r7, #8]
 8009ed2:	4613      	mov	r3, r2
 8009ed4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_WAVE(DAC_Wave)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009ed6:	79fb      	ldrb	r3, [r7, #7]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d009      	beq.n	8009ef0 <DAC_WaveGenerationCmd+0x28>
  {
    /* Enable the selected wave generation for the selected DAC channel */
    DAC->CR |= DAC_Wave << DAC_Channel;
 8009edc:	4b0c      	ldr	r3, [pc, #48]	; (8009f10 <DAC_WaveGenerationCmd+0x48>)
 8009ede:	4a0c      	ldr	r2, [pc, #48]	; (8009f10 <DAC_WaveGenerationCmd+0x48>)
 8009ee0:	6811      	ldr	r1, [r2, #0]
 8009ee2:	68fa      	ldr	r2, [r7, #12]
 8009ee4:	68b8      	ldr	r0, [r7, #8]
 8009ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8009eea:	430a      	orrs	r2, r1
 8009eec:	601a      	str	r2, [r3, #0]
 8009eee:	e009      	b.n	8009f04 <DAC_WaveGenerationCmd+0x3c>
  }
  else
  {
    /* Disable the selected wave generation for the selected DAC channel */
    DAC->CR &= ~(DAC_Wave << DAC_Channel);
 8009ef0:	4b07      	ldr	r3, [pc, #28]	; (8009f10 <DAC_WaveGenerationCmd+0x48>)
 8009ef2:	4a07      	ldr	r2, [pc, #28]	; (8009f10 <DAC_WaveGenerationCmd+0x48>)
 8009ef4:	6811      	ldr	r1, [r2, #0]
 8009ef6:	68fa      	ldr	r2, [r7, #12]
 8009ef8:	68b8      	ldr	r0, [r7, #8]
 8009efa:	fa00 f202 	lsl.w	r2, r0, r2
 8009efe:	43d2      	mvns	r2, r2
 8009f00:	400a      	ands	r2, r1
 8009f02:	601a      	str	r2, [r3, #0]
  }
}
 8009f04:	3714      	adds	r7, #20
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr
 8009f0e:	bf00      	nop
 8009f10:	40007400 	.word	0x40007400

08009f14 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8009f14:	b480      	push	{r7}
 8009f16:	b085      	sub	sp, #20
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8009f20:	2300      	movs	r3, #0
 8009f22:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8009f24:	4b07      	ldr	r3, [pc, #28]	; (8009f44 <DAC_SetChannel1Data+0x30>)
 8009f26:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8009f28:	68fa      	ldr	r2, [r7, #12]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	4413      	add	r3, r2
 8009f2e:	3308      	adds	r3, #8
 8009f30:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	887a      	ldrh	r2, [r7, #2]
 8009f36:	601a      	str	r2, [r3, #0]
}
 8009f38:	3714      	adds	r7, #20
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr
 8009f42:	bf00      	nop
 8009f44:	40007400 	.word	0x40007400

08009f48 <DAC_SetChannel2Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b085      	sub	sp, #20
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	460b      	mov	r3, r1
 8009f52:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8009f54:	2300      	movs	r3, #0
 8009f56:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE;
 8009f58:	4b07      	ldr	r3, [pc, #28]	; (8009f78 <DAC_SetChannel2Data+0x30>)
 8009f5a:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R2_OFFSET + DAC_Align;
 8009f5c:	68fa      	ldr	r2, [r7, #12]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	4413      	add	r3, r2
 8009f62:	3314      	adds	r3, #20
 8009f64:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel2 selected data holding register */
  *(__IO uint32_t *)tmp = Data;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	887a      	ldrh	r2, [r7, #2]
 8009f6a:	601a      	str	r2, [r3, #0]
}
 8009f6c:	3714      	adds	r7, #20
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr
 8009f76:	bf00      	nop
 8009f78:	40007400 	.word	0x40007400

08009f7c <DAC_SetDualChannelData>:
  * @note   In dual mode, a unique register access is required to write in both
  *          DAC channels at the same time.
  * @retval None
  */
void DAC_SetDualChannelData(uint32_t DAC_Align, uint16_t Data2, uint16_t Data1)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b085      	sub	sp, #20
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	4613      	mov	r3, r2
 8009f86:	460a      	mov	r2, r1
 8009f88:	807a      	strh	r2, [r7, #2]
 8009f8a:	803b      	strh	r3, [r7, #0]
  uint32_t data = 0, tmp = 0;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	60fb      	str	r3, [r7, #12]
 8009f90:	2300      	movs	r3, #0
 8009f92:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));
  
  /* Calculate and set dual DAC data holding register value */
  if (DAC_Align == DAC_Align_8b_R)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2b08      	cmp	r3, #8
 8009f98:	d105      	bne.n	8009fa6 <DAC_SetDualChannelData+0x2a>
  {
    data = ((uint32_t)Data2 << 8) | Data1; 
 8009f9a:	887b      	ldrh	r3, [r7, #2]
 8009f9c:	021a      	lsls	r2, r3, #8
 8009f9e:	883b      	ldrh	r3, [r7, #0]
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	60fb      	str	r3, [r7, #12]
 8009fa4:	e004      	b.n	8009fb0 <DAC_SetDualChannelData+0x34>
  }
  else
  {
    data = ((uint32_t)Data2 << 16) | Data1;
 8009fa6:	887b      	ldrh	r3, [r7, #2]
 8009fa8:	041a      	lsls	r2, r3, #16
 8009faa:	883b      	ldrh	r3, [r7, #0]
 8009fac:	4313      	orrs	r3, r2
 8009fae:	60fb      	str	r3, [r7, #12]
  }
  
  tmp = (uint32_t)DAC_BASE;
 8009fb0:	4b07      	ldr	r3, [pc, #28]	; (8009fd0 <DAC_SetDualChannelData+0x54>)
 8009fb2:	60bb      	str	r3, [r7, #8]
  tmp += DHR12RD_OFFSET + DAC_Align;
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	4413      	add	r3, r2
 8009fba:	3320      	adds	r3, #32
 8009fbc:	60bb      	str	r3, [r7, #8]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	68fa      	ldr	r2, [r7, #12]
 8009fc2:	601a      	str	r2, [r3, #0]
}
 8009fc4:	3714      	adds	r7, #20
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr
 8009fce:	bf00      	nop
 8009fd0:	40007400 	.word	0x40007400

08009fd4 <DAC_GetDataOutputValue>:
  *            @arg DAC_Channel_1: DAC Channel1 selected
  *            @arg DAC_Channel_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b085      	sub	sp, #20
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  
  tmp = (uint32_t) DAC_BASE ;
 8009fe0:	4b08      	ldr	r3, [pc, #32]	; (800a004 <DAC_GetDataOutputValue+0x30>)
 8009fe2:	60fb      	str	r3, [r7, #12]
  tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	089a      	lsrs	r2, r3, #2
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	4413      	add	r3, r2
 8009fec:	332c      	adds	r3, #44	; 0x2c
 8009fee:	60fb      	str	r3, [r7, #12]
  
  /* Returns the DAC channel data output register value */
  return (uint16_t) (*(__IO uint32_t*) tmp);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	b29b      	uxth	r3, r3
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3714      	adds	r7, #20
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a000:	4770      	bx	lr
 800a002:	bf00      	nop
 800a004:	40007400 	.word	0x40007400

0800a008 <DAC_DMACmd>:
  * @note   The DAC channel2 is mapped on DMA1 Stream 6 channel7 which must be
  *          already configured.    
  * @retval None
  */
void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 800a008:	b480      	push	{r7}
 800a00a:	b083      	sub	sp, #12
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	460b      	mov	r3, r1
 800a012:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a014:	78fb      	ldrb	r3, [r7, #3]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d00a      	beq.n	800a030 <DAC_DMACmd+0x28>
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 800a01a:	4b0d      	ldr	r3, [pc, #52]	; (800a050 <DAC_DMACmd+0x48>)
 800a01c:	4a0c      	ldr	r2, [pc, #48]	; (800a050 <DAC_DMACmd+0x48>)
 800a01e:	6811      	ldr	r1, [r2, #0]
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a026:	fa00 f202 	lsl.w	r2, r0, r2
 800a02a:	430a      	orrs	r2, r1
 800a02c:	601a      	str	r2, [r3, #0]
 800a02e:	e00a      	b.n	800a046 <DAC_DMACmd+0x3e>
  }
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
 800a030:	4b07      	ldr	r3, [pc, #28]	; (800a050 <DAC_DMACmd+0x48>)
 800a032:	4a07      	ldr	r2, [pc, #28]	; (800a050 <DAC_DMACmd+0x48>)
 800a034:	6811      	ldr	r1, [r2, #0]
 800a036:	687a      	ldr	r2, [r7, #4]
 800a038:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a03c:	fa00 f202 	lsl.w	r2, r0, r2
 800a040:	43d2      	mvns	r2, r2
 800a042:	400a      	ands	r2, r1
 800a044:	601a      	str	r2, [r3, #0]
  }
}
 800a046:	370c      	adds	r7, #12
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr
 800a050:	40007400 	.word	0x40007400

0800a054 <DAC_ITConfig>:
  * @param  NewState: new state of the specified DAC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */ 
void DAC_ITConfig(uint32_t DAC_Channel, uint32_t DAC_IT, FunctionalState NewState)  
{
 800a054:	b480      	push	{r7}
 800a056:	b085      	sub	sp, #20
 800a058:	af00      	add	r7, sp, #0
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	60b9      	str	r1, [r7, #8]
 800a05e:	4613      	mov	r3, r2
 800a060:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_DAC_IT(DAC_IT)); 

  if (NewState != DISABLE)
 800a062:	79fb      	ldrb	r3, [r7, #7]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d009      	beq.n	800a07c <DAC_ITConfig+0x28>
  {
    /* Enable the selected DAC interrupts */
    DAC->CR |=  (DAC_IT << DAC_Channel);
 800a068:	4b0c      	ldr	r3, [pc, #48]	; (800a09c <DAC_ITConfig+0x48>)
 800a06a:	4a0c      	ldr	r2, [pc, #48]	; (800a09c <DAC_ITConfig+0x48>)
 800a06c:	6811      	ldr	r1, [r2, #0]
 800a06e:	68fa      	ldr	r2, [r7, #12]
 800a070:	68b8      	ldr	r0, [r7, #8]
 800a072:	fa00 f202 	lsl.w	r2, r0, r2
 800a076:	430a      	orrs	r2, r1
 800a078:	601a      	str	r2, [r3, #0]
 800a07a:	e009      	b.n	800a090 <DAC_ITConfig+0x3c>
  }
  else
  {
    /* Disable the selected DAC interrupts */
    DAC->CR &= (~(uint32_t)(DAC_IT << DAC_Channel));
 800a07c:	4b07      	ldr	r3, [pc, #28]	; (800a09c <DAC_ITConfig+0x48>)
 800a07e:	4a07      	ldr	r2, [pc, #28]	; (800a09c <DAC_ITConfig+0x48>)
 800a080:	6811      	ldr	r1, [r2, #0]
 800a082:	68fa      	ldr	r2, [r7, #12]
 800a084:	68b8      	ldr	r0, [r7, #8]
 800a086:	fa00 f202 	lsl.w	r2, r0, r2
 800a08a:	43d2      	mvns	r2, r2
 800a08c:	400a      	ands	r2, r1
 800a08e:	601a      	str	r2, [r3, #0]
  }
}
 800a090:	3714      	adds	r7, #20
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr
 800a09a:	bf00      	nop
 800a09c:	40007400 	.word	0x40007400

0800a0a0 <DAC_GetFlagStatus>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).
  * @retval The new state of DAC_FLAG (SET or RESET).
  */
FlagStatus DAC_GetFlagStatus(uint32_t DAC_Channel, uint32_t DAC_FLAG)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b085      	sub	sp, #20
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Check the status of the specified DAC flag */
  if ((DAC->SR & (DAC_FLAG << DAC_Channel)) != (uint8_t)RESET)
 800a0ae:	4b0a      	ldr	r3, [pc, #40]	; (800a0d8 <DAC_GetFlagStatus+0x38>)
 800a0b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6839      	ldr	r1, [r7, #0]
 800a0b6:	fa01 f303 	lsl.w	r3, r1, r3
 800a0ba:	4013      	ands	r3, r2
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d002      	beq.n	800a0c6 <DAC_GetFlagStatus+0x26>
  {
    /* DAC_FLAG is set */
    bitstatus = SET;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	73fb      	strb	r3, [r7, #15]
 800a0c4:	e001      	b.n	800a0ca <DAC_GetFlagStatus+0x2a>
  }
  else
  {
    /* DAC_FLAG is reset */
    bitstatus = RESET;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DAC_FLAG status */
  return  bitstatus;
 800a0ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3714      	adds	r7, #20
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr
 800a0d8:	40007400 	.word	0x40007400

0800a0dc <DAC_ClearFlag>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).                           
  * @retval None
  */
void DAC_ClearFlag(uint32_t DAC_Channel, uint32_t DAC_FLAG)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Clear the selected DAC flags */
  DAC->SR = (DAC_FLAG << DAC_Channel);
 800a0e6:	4b05      	ldr	r3, [pc, #20]	; (800a0fc <DAC_ClearFlag+0x20>)
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	6839      	ldr	r1, [r7, #0]
 800a0ec:	fa01 f202 	lsl.w	r2, r1, r2
 800a0f0:	635a      	str	r2, [r3, #52]	; 0x34
}
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr
 800a0fc:	40007400 	.word	0x40007400

0800a100 <DAC_GetITStatus>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).
  * @retval The new state of DAC_IT (SET or RESET).
  */
ITStatus DAC_GetITStatus(uint32_t DAC_Channel, uint32_t DAC_IT)
{
 800a100:	b480      	push	{r7}
 800a102:	b085      	sub	sp, #20
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800a10a:	2300      	movs	r3, #0
 800a10c:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 800a10e:	2300      	movs	r3, #0
 800a110:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT));

  /* Get the DAC_IT enable bit status */
  enablestatus = (DAC->CR & (DAC_IT << DAC_Channel)) ;
 800a112:	4b10      	ldr	r3, [pc, #64]	; (800a154 <DAC_GetITStatus+0x54>)
 800a114:	681a      	ldr	r2, [r3, #0]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6839      	ldr	r1, [r7, #0]
 800a11a:	fa01 f303 	lsl.w	r3, r1, r3
 800a11e:	4013      	ands	r3, r2
 800a120:	60bb      	str	r3, [r7, #8]
  
  /* Check the status of the specified DAC interrupt */
  if (((DAC->SR & (DAC_IT << DAC_Channel)) != (uint32_t)RESET) && enablestatus)
 800a122:	4b0c      	ldr	r3, [pc, #48]	; (800a154 <DAC_GetITStatus+0x54>)
 800a124:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6839      	ldr	r1, [r7, #0]
 800a12a:	fa01 f303 	lsl.w	r3, r1, r3
 800a12e:	4013      	ands	r3, r2
 800a130:	2b00      	cmp	r3, #0
 800a132:	d005      	beq.n	800a140 <DAC_GetITStatus+0x40>
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d002      	beq.n	800a140 <DAC_GetITStatus+0x40>
  {
    /* DAC_IT is set */
    bitstatus = SET;
 800a13a:	2301      	movs	r3, #1
 800a13c:	73fb      	strb	r3, [r7, #15]
 800a13e:	e001      	b.n	800a144 <DAC_GetITStatus+0x44>
  }
  else
  {
    /* DAC_IT is reset */
    bitstatus = RESET;
 800a140:	2300      	movs	r3, #0
 800a142:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DAC_IT status */
  return  bitstatus;
 800a144:	7bfb      	ldrb	r3, [r7, #15]
}
 800a146:	4618      	mov	r0, r3
 800a148:	3714      	adds	r7, #20
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr
 800a152:	bf00      	nop
 800a154:	40007400 	.word	0x40007400

0800a158 <DAC_ClearITPendingBit>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).                           
  * @retval None
  */
void DAC_ClearITPendingBit(uint32_t DAC_Channel, uint32_t DAC_IT)
{
 800a158:	b480      	push	{r7}
 800a15a:	b083      	sub	sp, #12
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT)); 

  /* Clear the selected DAC interrupt pending bits */
  DAC->SR = (DAC_IT << DAC_Channel);
 800a162:	4b05      	ldr	r3, [pc, #20]	; (800a178 <DAC_ClearITPendingBit+0x20>)
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	6839      	ldr	r1, [r7, #0]
 800a168:	fa01 f202 	lsl.w	r2, r1, r2
 800a16c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800a16e:	370c      	adds	r7, #12
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr
 800a178:	40007400 	.word	0x40007400

0800a17c <DBGMCU_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @param  None
  * @retval Device revision identifier
  */
uint32_t DBGMCU_GetREVID(void)
{
 800a17c:	b480      	push	{r7}
 800a17e:	af00      	add	r7, sp, #0
   return(DBGMCU->IDCODE >> 16);
 800a180:	4b03      	ldr	r3, [pc, #12]	; (800a190 <DBGMCU_GetREVID+0x14>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	0c1b      	lsrs	r3, r3, #16
}
 800a186:	4618      	mov	r0, r3
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr
 800a190:	e0042000 	.word	0xe0042000

0800a194 <DBGMCU_GetDEVID>:
  * @brief  Returns the device identifier.
  * @param  None
  * @retval Device identifier
  */
uint32_t DBGMCU_GetDEVID(void)
{
 800a194:	b480      	push	{r7}
 800a196:	af00      	add	r7, sp, #0
   return(DBGMCU->IDCODE & IDCODE_DEVID_MASK);
 800a198:	4b04      	ldr	r3, [pc, #16]	; (800a1ac <DBGMCU_GetDEVID+0x18>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a8:	4770      	bx	lr
 800a1aa:	bf00      	nop
 800a1ac:	e0042000 	.word	0xe0042000

0800a1b0 <DBGMCU_Config>:
  * @param  NewState: new state of the specified low power mode in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b083      	sub	sp, #12
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800a1bc:	78fb      	ldrb	r3, [r7, #3]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d006      	beq.n	800a1d0 <DBGMCU_Config+0x20>
  {
    DBGMCU->CR |= DBGMCU_Periph;
 800a1c2:	4b09      	ldr	r3, [pc, #36]	; (800a1e8 <DBGMCU_Config+0x38>)
 800a1c4:	4a08      	ldr	r2, [pc, #32]	; (800a1e8 <DBGMCU_Config+0x38>)
 800a1c6:	6851      	ldr	r1, [r2, #4]
 800a1c8:	687a      	ldr	r2, [r7, #4]
 800a1ca:	430a      	orrs	r2, r1
 800a1cc:	605a      	str	r2, [r3, #4]
 800a1ce:	e006      	b.n	800a1de <DBGMCU_Config+0x2e>
  }
  else
  {
    DBGMCU->CR &= ~DBGMCU_Periph;
 800a1d0:	4b05      	ldr	r3, [pc, #20]	; (800a1e8 <DBGMCU_Config+0x38>)
 800a1d2:	4a05      	ldr	r2, [pc, #20]	; (800a1e8 <DBGMCU_Config+0x38>)
 800a1d4:	6851      	ldr	r1, [r2, #4]
 800a1d6:	687a      	ldr	r2, [r7, #4]
 800a1d8:	43d2      	mvns	r2, r2
 800a1da:	400a      	ands	r2, r1
 800a1dc:	605a      	str	r2, [r3, #4]
  }
}
 800a1de:	370c      	adds	r7, #12
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr
 800a1e8:	e0042000 	.word	0xe0042000

0800a1ec <DBGMCU_APB1PeriphConfig>:
  *     @arg DBGMCU_CAN1_STOP: Debug CAN2 stopped when Core is halted        
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_APB1PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b083      	sub	sp, #12
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	460b      	mov	r3, r1
 800a1f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB1PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a1f8:	78fb      	ldrb	r3, [r7, #3]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d006      	beq.n	800a20c <DBGMCU_APB1PeriphConfig+0x20>
  {
    DBGMCU->APB1FZ |= DBGMCU_Periph;
 800a1fe:	4b09      	ldr	r3, [pc, #36]	; (800a224 <DBGMCU_APB1PeriphConfig+0x38>)
 800a200:	4a08      	ldr	r2, [pc, #32]	; (800a224 <DBGMCU_APB1PeriphConfig+0x38>)
 800a202:	6891      	ldr	r1, [r2, #8]
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	430a      	orrs	r2, r1
 800a208:	609a      	str	r2, [r3, #8]
 800a20a:	e006      	b.n	800a21a <DBGMCU_APB1PeriphConfig+0x2e>
  }
  else
  {
    DBGMCU->APB1FZ &= ~DBGMCU_Periph;
 800a20c:	4b05      	ldr	r3, [pc, #20]	; (800a224 <DBGMCU_APB1PeriphConfig+0x38>)
 800a20e:	4a05      	ldr	r2, [pc, #20]	; (800a224 <DBGMCU_APB1PeriphConfig+0x38>)
 800a210:	6891      	ldr	r1, [r2, #8]
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	43d2      	mvns	r2, r2
 800a216:	400a      	ands	r2, r1
 800a218:	609a      	str	r2, [r3, #8]
  }
}
 800a21a:	370c      	adds	r7, #12
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr
 800a224:	e0042000 	.word	0xe0042000

0800a228 <DBGMCU_APB2PeriphConfig>:
  * @param  NewState: new state of the specified peripheral in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_APB2PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 800a228:	b480      	push	{r7}
 800a22a:	b083      	sub	sp, #12
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	460b      	mov	r3, r1
 800a232:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB2PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a234:	78fb      	ldrb	r3, [r7, #3]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d006      	beq.n	800a248 <DBGMCU_APB2PeriphConfig+0x20>
  {
    DBGMCU->APB2FZ |= DBGMCU_Periph;
 800a23a:	4b09      	ldr	r3, [pc, #36]	; (800a260 <DBGMCU_APB2PeriphConfig+0x38>)
 800a23c:	4a08      	ldr	r2, [pc, #32]	; (800a260 <DBGMCU_APB2PeriphConfig+0x38>)
 800a23e:	68d1      	ldr	r1, [r2, #12]
 800a240:	687a      	ldr	r2, [r7, #4]
 800a242:	430a      	orrs	r2, r1
 800a244:	60da      	str	r2, [r3, #12]
 800a246:	e006      	b.n	800a256 <DBGMCU_APB2PeriphConfig+0x2e>
  }
  else
  {
    DBGMCU->APB2FZ &= ~DBGMCU_Periph;
 800a248:	4b05      	ldr	r3, [pc, #20]	; (800a260 <DBGMCU_APB2PeriphConfig+0x38>)
 800a24a:	4a05      	ldr	r2, [pc, #20]	; (800a260 <DBGMCU_APB2PeriphConfig+0x38>)
 800a24c:	68d1      	ldr	r1, [r2, #12]
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	43d2      	mvns	r2, r2
 800a252:	400a      	ands	r2, r1
 800a254:	60da      	str	r2, [r3, #12]
  }
}
 800a256:	370c      	adds	r7, #12
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr
 800a260:	e0042000 	.word	0xe0042000

0800a264 <DCMI_DeInit>:
  * @brief  Deinitializes the DCMI registers to their default reset values.
  * @param  None
  * @retval None
  */
void DCMI_DeInit(void)
{
 800a264:	b480      	push	{r7}
 800a266:	af00      	add	r7, sp, #0
  DCMI->CR = 0x0;
 800a268:	4b0c      	ldr	r3, [pc, #48]	; (800a29c <DCMI_DeInit+0x38>)
 800a26a:	2200      	movs	r2, #0
 800a26c:	601a      	str	r2, [r3, #0]
  DCMI->IER = 0x0;
 800a26e:	4b0b      	ldr	r3, [pc, #44]	; (800a29c <DCMI_DeInit+0x38>)
 800a270:	2200      	movs	r2, #0
 800a272:	60da      	str	r2, [r3, #12]
  DCMI->ICR = 0x1F;
 800a274:	4b09      	ldr	r3, [pc, #36]	; (800a29c <DCMI_DeInit+0x38>)
 800a276:	221f      	movs	r2, #31
 800a278:	615a      	str	r2, [r3, #20]
  DCMI->ESCR = 0x0;
 800a27a:	4b08      	ldr	r3, [pc, #32]	; (800a29c <DCMI_DeInit+0x38>)
 800a27c:	2200      	movs	r2, #0
 800a27e:	619a      	str	r2, [r3, #24]
  DCMI->ESUR = 0x0;
 800a280:	4b06      	ldr	r3, [pc, #24]	; (800a29c <DCMI_DeInit+0x38>)
 800a282:	2200      	movs	r2, #0
 800a284:	61da      	str	r2, [r3, #28]
  DCMI->CWSTRTR = 0x0;
 800a286:	4b05      	ldr	r3, [pc, #20]	; (800a29c <DCMI_DeInit+0x38>)
 800a288:	2200      	movs	r2, #0
 800a28a:	621a      	str	r2, [r3, #32]
  DCMI->CWSIZER = 0x0;
 800a28c:	4b03      	ldr	r3, [pc, #12]	; (800a29c <DCMI_DeInit+0x38>)
 800a28e:	2200      	movs	r2, #0
 800a290:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a292:	46bd      	mov	sp, r7
 800a294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a298:	4770      	bx	lr
 800a29a:	bf00      	nop
 800a29c:	50050000 	.word	0x50050000

0800a2a0 <DCMI_Init>:
  * @param  DCMI_InitStruct: pointer to a DCMI_InitTypeDef structure that contains 
  *         the configuration information for the DCMI.
  * @retval None
  */
void DCMI_Init(DCMI_InitTypeDef* DCMI_InitStruct)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b085      	sub	sp, #20
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  uint32_t temp = 0x0;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DCMI_CAPTURE_RATE(DCMI_InitStruct->DCMI_CaptureRate));
  assert_param(IS_DCMI_EXTENDED_DATA(DCMI_InitStruct->DCMI_ExtendedDataMode));

  /* The DCMI configuration registers should be programmed correctly before 
  enabling the CR_ENABLE Bit and the CR_CAPTURE Bit */
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
 800a2ac:	4a1a      	ldr	r2, [pc, #104]	; (800a318 <DCMI_Init+0x78>)
 800a2ae:	4b1a      	ldr	r3, [pc, #104]	; (800a318 <DCMI_Init+0x78>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a2b6:	f023 0301 	bic.w	r3, r3, #1
 800a2ba:	6013      	str	r3, [r2, #0]
   
  /* Reset the old DCMI configuration */
  temp = DCMI->CR;
 800a2bc:	4b16      	ldr	r3, [pc, #88]	; (800a318 <DCMI_Init+0x78>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	60fb      	str	r3, [r7, #12]
  
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a2c8:	f023 0302 	bic.w	r3, r3, #2
 800a2cc:	60fb      	str	r3, [r7, #12]
                      DCMI_CR_HSPOL  | DCMI_CR_VSPOL | DCMI_CR_FCRC_0 | 
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	881a      	ldrh	r2, [r3, #0]
                     DCMI_InitStruct->DCMI_SynchroMode |
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	885b      	ldrh	r3, [r3, #2]
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	b29a      	uxth	r2, r3
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	889b      	ldrh	r3, [r3, #4]
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	b29a      	uxth	r2, r3
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	88db      	ldrh	r3, [r3, #6]
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	b29a      	uxth	r2, r3
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	891b      	ldrh	r3, [r3, #8]
                     DCMI_InitStruct->DCMI_CaptureRate |
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	b29a      	uxth	r2, r3
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	895b      	ldrh	r3, [r3, #10]
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	b29a      	uxth	r2, r3
                     DCMI_InitStruct->DCMI_ExtendedDataMode);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	899b      	ldrh	r3, [r3, #12]
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 800a2fe:	4313      	orrs	r3, r2
 800a300:	b29b      	uxth	r3, r3
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
                      DCMI_CR_HSPOL  | DCMI_CR_VSPOL | DCMI_CR_FCRC_0 | 
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
 800a302:	68fa      	ldr	r2, [r7, #12]
 800a304:	4313      	orrs	r3, r2
 800a306:	60fb      	str	r3, [r7, #12]
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
                     DCMI_InitStruct->DCMI_ExtendedDataMode);

  DCMI->CR = temp;                              
 800a308:	4b03      	ldr	r3, [pc, #12]	; (800a318 <DCMI_Init+0x78>)
 800a30a:	68fa      	ldr	r2, [r7, #12]
 800a30c:	601a      	str	r2, [r3, #0]
}
 800a30e:	3714      	adds	r7, #20
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr
 800a318:	50050000 	.word	0x50050000

0800a31c <DCMI_StructInit>:
  * @param  DCMI_InitStruct : pointer to a DCMI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DCMI_StructInit(DCMI_InitTypeDef* DCMI_InitStruct)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b083      	sub	sp, #12
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  DCMI_InitStruct->DCMI_CaptureMode = DCMI_CaptureMode_Continuous;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2200      	movs	r2, #0
 800a328:	801a      	strh	r2, [r3, #0]
  DCMI_InitStruct->DCMI_SynchroMode = DCMI_SynchroMode_Hardware;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2200      	movs	r2, #0
 800a32e:	805a      	strh	r2, [r3, #2]
  DCMI_InitStruct->DCMI_PCKPolarity = DCMI_PCKPolarity_Falling;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2200      	movs	r2, #0
 800a334:	809a      	strh	r2, [r3, #4]
  DCMI_InitStruct->DCMI_VSPolarity = DCMI_VSPolarity_Low;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2200      	movs	r2, #0
 800a33a:	80da      	strh	r2, [r3, #6]
  DCMI_InitStruct->DCMI_HSPolarity = DCMI_HSPolarity_Low;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2200      	movs	r2, #0
 800a340:	811a      	strh	r2, [r3, #8]
  DCMI_InitStruct->DCMI_CaptureRate = DCMI_CaptureRate_All_Frame;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2200      	movs	r2, #0
 800a346:	815a      	strh	r2, [r3, #10]
  DCMI_InitStruct->DCMI_ExtendedDataMode = DCMI_ExtendedDataMode_8b;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2200      	movs	r2, #0
 800a34c:	819a      	strh	r2, [r3, #12]
}
 800a34e:	370c      	adds	r7, #12
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr

0800a358 <DCMI_CROPConfig>:
  * @param  DCMI_CROPInitStruct:  pointer to a DCMI_CROPInitTypeDef structure that 
  *         contains the configuration information for the DCMI peripheral CROP mode.
  * @retval None
  */
void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
{  
 800a358:	b480      	push	{r7}
 800a35a:	b083      	sub	sp, #12
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 800a360:	4b0b      	ldr	r3, [pc, #44]	; (800a390 <DCMI_CROPConfig+0x38>)
 800a362:	687a      	ldr	r2, [r7, #4]
 800a364:	8852      	ldrh	r2, [r2, #2]
 800a366:	4611      	mov	r1, r2
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	8812      	ldrh	r2, [r2, #0]
 800a36c:	0412      	lsls	r2, r2, #16
  * @retval None
  */
void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
{  
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 800a36e:	430a      	orrs	r2, r1
 800a370:	621a      	str	r2, [r3, #32]
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));

  /* Sets the CROP window size */
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 800a372:	4b07      	ldr	r3, [pc, #28]	; (800a390 <DCMI_CROPConfig+0x38>)
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	88d2      	ldrh	r2, [r2, #6]
 800a378:	4611      	mov	r1, r2
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	8892      	ldrh	r2, [r2, #4]
 800a37e:	0412      	lsls	r2, r2, #16
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));

  /* Sets the CROP window size */
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 800a380:	430a      	orrs	r2, r1
 800a382:	625a      	str	r2, [r3, #36]	; 0x24
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
}
 800a384:	370c      	adds	r7, #12
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr
 800a38e:	bf00      	nop
 800a390:	50050000 	.word	0x50050000

0800a394 <DCMI_CROPCmd>:
  * @param  NewState: new state of the DCMI Crop feature. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_CROPCmd(FunctionalState NewState)
{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
 800a39a:	4603      	mov	r3, r0
 800a39c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800a39e:	79fb      	ldrb	r3, [r7, #7]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d006      	beq.n	800a3b2 <DCMI_CROPCmd+0x1e>
  {
    /* Enable the DCMI Crop feature */
    DCMI->CR |= (uint32_t)DCMI_CR_CROP;
 800a3a4:	4b08      	ldr	r3, [pc, #32]	; (800a3c8 <DCMI_CROPCmd+0x34>)
 800a3a6:	4a08      	ldr	r2, [pc, #32]	; (800a3c8 <DCMI_CROPCmd+0x34>)
 800a3a8:	6812      	ldr	r2, [r2, #0]
 800a3aa:	f042 0204 	orr.w	r2, r2, #4
 800a3ae:	601a      	str	r2, [r3, #0]
 800a3b0:	e005      	b.n	800a3be <DCMI_CROPCmd+0x2a>
  }
  else
  {
    /* Disable the DCMI Crop feature */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CROP;
 800a3b2:	4b05      	ldr	r3, [pc, #20]	; (800a3c8 <DCMI_CROPCmd+0x34>)
 800a3b4:	4a04      	ldr	r2, [pc, #16]	; (800a3c8 <DCMI_CROPCmd+0x34>)
 800a3b6:	6812      	ldr	r2, [r2, #0]
 800a3b8:	f022 0204 	bic.w	r2, r2, #4
 800a3bc:	601a      	str	r2, [r3, #0]
  }
}
 800a3be:	370c      	adds	r7, #12
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr
 800a3c8:	50050000 	.word	0x50050000

0800a3cc <DCMI_SetEmbeddedSynchroCodes>:
  * @param  DCMI_CodesInitTypeDef: pointer to a DCMI_CodesInitTypeDef structure that
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 800a3d4:	4b0a      	ldr	r3, [pc, #40]	; (800a400 <DCMI_SetEmbeddedSynchroCodes+0x34>)
 800a3d6:	687a      	ldr	r2, [r7, #4]
 800a3d8:	7812      	ldrb	r2, [r2, #0]
 800a3da:	4611      	mov	r1, r2
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 800a3dc:	687a      	ldr	r2, [r7, #4]
 800a3de:	7852      	ldrb	r2, [r2, #1]
 800a3e0:	0212      	lsls	r2, r2, #8
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 800a3e2:	4311      	orrs	r1, r2
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
 800a3e4:	687a      	ldr	r2, [r7, #4]
 800a3e6:	7892      	ldrb	r2, [r2, #2]
 800a3e8:	0412      	lsls	r2, r2, #16
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 800a3ea:	4311      	orrs	r1, r2
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	78d2      	ldrb	r2, [r2, #3]
 800a3f0:	0612      	lsls	r2, r2, #24
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 800a3f2:	430a      	orrs	r2, r1
 800a3f4:	619a      	str	r2, [r3, #24]
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
}
 800a3f6:	370c      	adds	r7, #12
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr
 800a400:	50050000 	.word	0x50050000

0800a404 <DCMI_JPEGCmd>:
  * @param  NewState: new state of the DCMI JPEG format. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_JPEGCmd(FunctionalState NewState)
{
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
 800a40a:	4603      	mov	r3, r0
 800a40c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 
  if (NewState != DISABLE)
 800a40e:	79fb      	ldrb	r3, [r7, #7]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d006      	beq.n	800a422 <DCMI_JPEGCmd+0x1e>
  {
    /* Enable the DCMI JPEG format */
    DCMI->CR |= (uint32_t)DCMI_CR_JPEG;
 800a414:	4b08      	ldr	r3, [pc, #32]	; (800a438 <DCMI_JPEGCmd+0x34>)
 800a416:	4a08      	ldr	r2, [pc, #32]	; (800a438 <DCMI_JPEGCmd+0x34>)
 800a418:	6812      	ldr	r2, [r2, #0]
 800a41a:	f042 0208 	orr.w	r2, r2, #8
 800a41e:	601a      	str	r2, [r3, #0]
 800a420:	e005      	b.n	800a42e <DCMI_JPEGCmd+0x2a>
  }
  else
  {
    /* Disable the DCMI JPEG format */
    DCMI->CR &= ~(uint32_t)DCMI_CR_JPEG;
 800a422:	4b05      	ldr	r3, [pc, #20]	; (800a438 <DCMI_JPEGCmd+0x34>)
 800a424:	4a04      	ldr	r2, [pc, #16]	; (800a438 <DCMI_JPEGCmd+0x34>)
 800a426:	6812      	ldr	r2, [r2, #0]
 800a428:	f022 0208 	bic.w	r2, r2, #8
 800a42c:	601a      	str	r2, [r3, #0]
  }
}
 800a42e:	370c      	adds	r7, #12
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr
 800a438:	50050000 	.word	0x50050000

0800a43c <DCMI_Cmd>:
  * @param  NewState: new state of the DCMI interface. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_Cmd(FunctionalState NewState)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
 800a442:	4603      	mov	r3, r0
 800a444:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800a446:	79fb      	ldrb	r3, [r7, #7]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d006      	beq.n	800a45a <DCMI_Cmd+0x1e>
  {
    /* Enable the DCMI by setting ENABLE bit */
    DCMI->CR |= (uint32_t)DCMI_CR_ENABLE;
 800a44c:	4b08      	ldr	r3, [pc, #32]	; (800a470 <DCMI_Cmd+0x34>)
 800a44e:	4a08      	ldr	r2, [pc, #32]	; (800a470 <DCMI_Cmd+0x34>)
 800a450:	6812      	ldr	r2, [r2, #0]
 800a452:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a456:	601a      	str	r2, [r3, #0]
 800a458:	e005      	b.n	800a466 <DCMI_Cmd+0x2a>
  }
  else
  {
    /* Disable the DCMI by clearing ENABLE bit */
    DCMI->CR &= ~(uint32_t)DCMI_CR_ENABLE;
 800a45a:	4b05      	ldr	r3, [pc, #20]	; (800a470 <DCMI_Cmd+0x34>)
 800a45c:	4a04      	ldr	r2, [pc, #16]	; (800a470 <DCMI_Cmd+0x34>)
 800a45e:	6812      	ldr	r2, [r2, #0]
 800a460:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a464:	601a      	str	r2, [r3, #0]
  }
}
 800a466:	370c      	adds	r7, #12
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr
 800a470:	50050000 	.word	0x50050000

0800a474 <DCMI_CaptureCmd>:
  * @param  NewState: new state of the DCMI capture. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_CaptureCmd(FunctionalState NewState)
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	4603      	mov	r3, r0
 800a47c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800a47e:	79fb      	ldrb	r3, [r7, #7]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d006      	beq.n	800a492 <DCMI_CaptureCmd+0x1e>
  {
    /* Enable the DCMI Capture */
    DCMI->CR |= (uint32_t)DCMI_CR_CAPTURE;
 800a484:	4b08      	ldr	r3, [pc, #32]	; (800a4a8 <DCMI_CaptureCmd+0x34>)
 800a486:	4a08      	ldr	r2, [pc, #32]	; (800a4a8 <DCMI_CaptureCmd+0x34>)
 800a488:	6812      	ldr	r2, [r2, #0]
 800a48a:	f042 0201 	orr.w	r2, r2, #1
 800a48e:	601a      	str	r2, [r3, #0]
 800a490:	e005      	b.n	800a49e <DCMI_CaptureCmd+0x2a>
  }
  else
  {
    /* Disable the DCMI Capture */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CAPTURE;
 800a492:	4b05      	ldr	r3, [pc, #20]	; (800a4a8 <DCMI_CaptureCmd+0x34>)
 800a494:	4a04      	ldr	r2, [pc, #16]	; (800a4a8 <DCMI_CaptureCmd+0x34>)
 800a496:	6812      	ldr	r2, [r2, #0]
 800a498:	f022 0201 	bic.w	r2, r2, #1
 800a49c:	601a      	str	r2, [r3, #0]
  }
}
 800a49e:	370c      	adds	r7, #12
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a6:	4770      	bx	lr
 800a4a8:	50050000 	.word	0x50050000

0800a4ac <DCMI_ReadData>:
  * @brief  Reads the data stored in the DR register.
  * @param  None 
  * @retval Data register value
  */
uint32_t DCMI_ReadData(void)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	af00      	add	r7, sp, #0
  return DCMI->DR;
 800a4b0:	4b03      	ldr	r3, [pc, #12]	; (800a4c0 <DCMI_ReadData+0x14>)
 800a4b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4bc:	4770      	bx	lr
 800a4be:	bf00      	nop
 800a4c0:	50050000 	.word	0x50050000

0800a4c4 <DCMI_ITConfig>:
  * @param  NewState: new state of the specified DCMI interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_ITConfig(uint16_t DCMI_IT, FunctionalState NewState)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	460b      	mov	r3, r1
 800a4ce:	80fa      	strh	r2, [r7, #6]
 800a4d0:	717b      	strb	r3, [r7, #5]
  /* Check the parameters */
  assert_param(IS_DCMI_CONFIG_IT(DCMI_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800a4d2:	797b      	ldrb	r3, [r7, #5]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d006      	beq.n	800a4e6 <DCMI_ITConfig+0x22>
  {
    /* Enable the Interrupt sources */
    DCMI->IER |= DCMI_IT;
 800a4d8:	4b09      	ldr	r3, [pc, #36]	; (800a500 <DCMI_ITConfig+0x3c>)
 800a4da:	4a09      	ldr	r2, [pc, #36]	; (800a500 <DCMI_ITConfig+0x3c>)
 800a4dc:	68d1      	ldr	r1, [r2, #12]
 800a4de:	88fa      	ldrh	r2, [r7, #6]
 800a4e0:	430a      	orrs	r2, r1
 800a4e2:	60da      	str	r2, [r3, #12]
 800a4e4:	e007      	b.n	800a4f6 <DCMI_ITConfig+0x32>
  }
  else
  {
    /* Disable the Interrupt sources */
    DCMI->IER &= (uint16_t)(~DCMI_IT);
 800a4e6:	4b06      	ldr	r3, [pc, #24]	; (800a500 <DCMI_ITConfig+0x3c>)
 800a4e8:	4a05      	ldr	r2, [pc, #20]	; (800a500 <DCMI_ITConfig+0x3c>)
 800a4ea:	68d1      	ldr	r1, [r2, #12]
 800a4ec:	88fa      	ldrh	r2, [r7, #6]
 800a4ee:	43d2      	mvns	r2, r2
 800a4f0:	b292      	uxth	r2, r2
 800a4f2:	400a      	ands	r2, r1
 800a4f4:	60da      	str	r2, [r3, #12]
  }  
}
 800a4f6:	370c      	adds	r7, #12
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr
 800a500:	50050000 	.word	0x50050000

0800a504 <DCMI_GetFlagStatus>:
  *            @arg DCMI_FLAG_VSYNC: VSYNC flag mask
  *            @arg DCMI_FLAG_FNE: Fifo not empty flag mask
  * @retval The new state of DCMI_FLAG (SET or RESET).
  */
FlagStatus DCMI_GetFlagStatus(uint16_t DCMI_FLAG)
{
 800a504:	b480      	push	{r7}
 800a506:	b087      	sub	sp, #28
 800a508:	af00      	add	r7, sp, #0
 800a50a:	4603      	mov	r3, r0
 800a50c:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 800a50e:	2300      	movs	r3, #0
 800a510:	75fb      	strb	r3, [r7, #23]
  uint32_t dcmireg, tempreg = 0;
 800a512:	2300      	movs	r3, #0
 800a514:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_DCMI_GET_FLAG(DCMI_FLAG));
  
  /* Get the DCMI register index */
  dcmireg = (((uint16_t)DCMI_FLAG) >> 12);
 800a516:	88fb      	ldrh	r3, [r7, #6]
 800a518:	0b1b      	lsrs	r3, r3, #12
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	60fb      	str	r3, [r7, #12]
  
  if (dcmireg == 0x00) /* The FLAG is in RISR register */
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d103      	bne.n	800a52c <DCMI_GetFlagStatus+0x28>
  {
    tempreg= DCMI->RISR;
 800a524:	4b0f      	ldr	r3, [pc, #60]	; (800a564 <DCMI_GetFlagStatus+0x60>)
 800a526:	689b      	ldr	r3, [r3, #8]
 800a528:	613b      	str	r3, [r7, #16]
 800a52a:	e009      	b.n	800a540 <DCMI_GetFlagStatus+0x3c>
  }
  else if (dcmireg == 0x02) /* The FLAG is in SR register */
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2b02      	cmp	r3, #2
 800a530:	d103      	bne.n	800a53a <DCMI_GetFlagStatus+0x36>
  {
    tempreg = DCMI->SR;
 800a532:	4b0c      	ldr	r3, [pc, #48]	; (800a564 <DCMI_GetFlagStatus+0x60>)
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	613b      	str	r3, [r7, #16]
 800a538:	e002      	b.n	800a540 <DCMI_GetFlagStatus+0x3c>
  }
  else /* The FLAG is in MISR register */
  {
    tempreg = DCMI->MISR;
 800a53a:	4b0a      	ldr	r3, [pc, #40]	; (800a564 <DCMI_GetFlagStatus+0x60>)
 800a53c:	691b      	ldr	r3, [r3, #16]
 800a53e:	613b      	str	r3, [r7, #16]
  }
  
  if ((tempreg & DCMI_FLAG) != (uint16_t)RESET )
 800a540:	88fa      	ldrh	r2, [r7, #6]
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	4013      	ands	r3, r2
 800a546:	2b00      	cmp	r3, #0
 800a548:	d002      	beq.n	800a550 <DCMI_GetFlagStatus+0x4c>
  {
    bitstatus = SET;
 800a54a:	2301      	movs	r3, #1
 800a54c:	75fb      	strb	r3, [r7, #23]
 800a54e:	e001      	b.n	800a554 <DCMI_GetFlagStatus+0x50>
  }
  else
  {
    bitstatus = RESET;
 800a550:	2300      	movs	r3, #0
 800a552:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the DCMI_FLAG status */
  return  bitstatus;
 800a554:	7dfb      	ldrb	r3, [r7, #23]
}
 800a556:	4618      	mov	r0, r3
 800a558:	371c      	adds	r7, #28
 800a55a:	46bd      	mov	sp, r7
 800a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a560:	4770      	bx	lr
 800a562:	bf00      	nop
 800a564:	50050000 	.word	0x50050000

0800a568 <DCMI_ClearFlag>:
  *            @arg DCMI_FLAG_VSYNCRI: VSYNC Raw flag mask
  *            @arg DCMI_FLAG_LINERI: Line Raw flag mask
  * @retval None
  */
void DCMI_ClearFlag(uint16_t DCMI_FLAG)
{
 800a568:	b480      	push	{r7}
 800a56a:	b083      	sub	sp, #12
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	4603      	mov	r3, r0
 800a570:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_DCMI_CLEAR_FLAG(DCMI_FLAG));
  
  /* Clear the flag by writing in the ICR register 1 in the corresponding 
  Flag position*/
  
  DCMI->ICR = DCMI_FLAG;
 800a572:	4b04      	ldr	r3, [pc, #16]	; (800a584 <DCMI_ClearFlag+0x1c>)
 800a574:	88fa      	ldrh	r2, [r7, #6]
 800a576:	615a      	str	r2, [r3, #20]
}
 800a578:	370c      	adds	r7, #12
 800a57a:	46bd      	mov	sp, r7
 800a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a580:	4770      	bx	lr
 800a582:	bf00      	nop
 800a584:	50050000 	.word	0x50050000

0800a588 <DCMI_GetITStatus>:
  *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
  *            @arg DCMI_IT_LINE: Line interrupt mask
  * @retval The new state of DCMI_IT (SET or RESET).
  */
ITStatus DCMI_GetITStatus(uint16_t DCMI_IT)
{
 800a588:	b480      	push	{r7}
 800a58a:	b085      	sub	sp, #20
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	4603      	mov	r3, r0
 800a590:	80fb      	strh	r3, [r7, #6]
  ITStatus bitstatus = RESET;
 800a592:	2300      	movs	r3, #0
 800a594:	73fb      	strb	r3, [r7, #15]
  uint32_t itstatus = 0;
 800a596:	2300      	movs	r3, #0
 800a598:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DCMI_GET_IT(DCMI_IT));
  
  itstatus = DCMI->MISR & DCMI_IT; /* Only masked interrupts are checked */
 800a59a:	4b0a      	ldr	r3, [pc, #40]	; (800a5c4 <DCMI_GetITStatus+0x3c>)
 800a59c:	691a      	ldr	r2, [r3, #16]
 800a59e:	88fb      	ldrh	r3, [r7, #6]
 800a5a0:	4013      	ands	r3, r2
 800a5a2:	60bb      	str	r3, [r7, #8]
  
  if ((itstatus != (uint16_t)RESET))
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d002      	beq.n	800a5b0 <DCMI_GetITStatus+0x28>
  {
    bitstatus = SET;
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	73fb      	strb	r3, [r7, #15]
 800a5ae:	e001      	b.n	800a5b4 <DCMI_GetITStatus+0x2c>
  }
  else
  {
    bitstatus = RESET;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a5b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3714      	adds	r7, #20
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c0:	4770      	bx	lr
 800a5c2:	bf00      	nop
 800a5c4:	50050000 	.word	0x50050000

0800a5c8 <DCMI_ClearITPendingBit>:
  *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
  *            @arg DCMI_IT_LINE: Line interrupt mask
  * @retval None
  */
void DCMI_ClearITPendingBit(uint16_t DCMI_IT)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b083      	sub	sp, #12
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	80fb      	strh	r3, [r7, #6]
  /* Clear the interrupt pending Bit by writing in the ICR register 1 in the 
  corresponding pending Bit position*/
  
  DCMI->ICR = DCMI_IT;
 800a5d2:	4b04      	ldr	r3, [pc, #16]	; (800a5e4 <DCMI_ClearITPendingBit+0x1c>)
 800a5d4:	88fa      	ldrh	r2, [r7, #6]
 800a5d6:	615a      	str	r2, [r3, #20]
}
 800a5d8:	370c      	adds	r7, #12
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr
 800a5e2:	bf00      	nop
 800a5e4:	50050000 	.word	0x50050000

0800a5e8 <DMA2D_DeInit>:
  * @param  None
  * @retval None
  */

void DMA2D_DeInit(void)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	af00      	add	r7, sp, #0
  /* Enable DMA2D reset state */
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2D, ENABLE);
 800a5ec:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800a5f0:	2101      	movs	r1, #1
 800a5f2:	f005 fbcf 	bl	800fd94 <RCC_AHB1PeriphResetCmd>
  /* Release DMA2D from reset state */
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2D, DISABLE);
 800a5f6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800a5fa:	2100      	movs	r1, #0
 800a5fc:	f005 fbca 	bl	800fd94 <RCC_AHB1PeriphResetCmd>
}
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop

0800a604 <DMA2D_Init>:
  * @param  DMA2D_InitStruct: pointer to a DMA2D_InitTypeDef structure that contains
  *         the configuration information for the specified DMA2D peripheral.
  * @retval None
  */
void DMA2D_Init(DMA2D_InitTypeDef* DMA2D_InitStruct)
{
 800a604:	b480      	push	{r7}
 800a606:	b087      	sub	sp, #28
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]

  uint32_t outgreen = 0;
 800a60c:	2300      	movs	r3, #0
 800a60e:	617b      	str	r3, [r7, #20]
  uint32_t outred   = 0;
 800a610:	2300      	movs	r3, #0
 800a612:	613b      	str	r3, [r7, #16]
  uint32_t outalpha = 0;
 800a614:	2300      	movs	r3, #0
 800a616:	60fb      	str	r3, [r7, #12]
  uint32_t pixline  = 0;
 800a618:	2300      	movs	r3, #0
 800a61a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA2D_OUTPUT_OFFSET(DMA2D_InitStruct->DMA2D_OutputOffset));
  assert_param(IS_DMA2D_LINE(DMA2D_InitStruct->DMA2D_NumberOfLine));
  assert_param(IS_DMA2D_PIXEL(DMA2D_InitStruct->DMA2D_PixelPerLine));

  /* Configures the DMA2D operation mode */
  DMA2D->CR &= (uint32_t)CR_MASK;
 800a61c:	4a4f      	ldr	r2, [pc, #316]	; (800a75c <DMA2D_Init+0x158>)
 800a61e:	4b4f      	ldr	r3, [pc, #316]	; (800a75c <DMA2D_Init+0x158>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f023 1303 	bic.w	r3, r3, #196611	; 0x30003
 800a626:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800a62a:	6013      	str	r3, [r2, #0]
  DMA2D->CR |= (DMA2D_InitStruct->DMA2D_Mode);
 800a62c:	4b4b      	ldr	r3, [pc, #300]	; (800a75c <DMA2D_Init+0x158>)
 800a62e:	4a4b      	ldr	r2, [pc, #300]	; (800a75c <DMA2D_Init+0x158>)
 800a630:	6811      	ldr	r1, [r2, #0]
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	6812      	ldr	r2, [r2, #0]
 800a636:	430a      	orrs	r2, r1
 800a638:	601a      	str	r2, [r3, #0]

  /* Configures the color mode of the output image */
  DMA2D->OPFCCR &= ~(uint32_t)DMA2D_OPFCCR_CM;
 800a63a:	4b48      	ldr	r3, [pc, #288]	; (800a75c <DMA2D_Init+0x158>)
 800a63c:	4a47      	ldr	r2, [pc, #284]	; (800a75c <DMA2D_Init+0x158>)
 800a63e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a640:	f022 0207 	bic.w	r2, r2, #7
 800a644:	635a      	str	r2, [r3, #52]	; 0x34
  DMA2D->OPFCCR |= (DMA2D_InitStruct->DMA2D_CMode);
 800a646:	4b45      	ldr	r3, [pc, #276]	; (800a75c <DMA2D_Init+0x158>)
 800a648:	4a44      	ldr	r2, [pc, #272]	; (800a75c <DMA2D_Init+0x158>)
 800a64a:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800a64c:	687a      	ldr	r2, [r7, #4]
 800a64e:	6852      	ldr	r2, [r2, #4]
 800a650:	430a      	orrs	r2, r1
 800a652:	635a      	str	r2, [r3, #52]	; 0x34

  /* Configures the output color */

  if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_ARGB8888)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d10c      	bne.n	800a676 <DMA2D_Init+0x72>
  {
    outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 8;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	68db      	ldr	r3, [r3, #12]
 800a660:	021b      	lsls	r3, r3, #8
 800a662:	617b      	str	r3, [r7, #20]
    outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	691b      	ldr	r3, [r3, #16]
 800a668:	041b      	lsls	r3, r3, #16
 800a66a:	613b      	str	r3, [r7, #16]
    outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 24;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	695b      	ldr	r3, [r3, #20]
 800a670:	061b      	lsls	r3, r3, #24
 800a672:	60fb      	str	r3, [r7, #12]
 800a674:	e03a      	b.n	800a6ec <DMA2D_Init+0xe8>
  }
  else
  
    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_RGB888)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	2b01      	cmp	r3, #1
 800a67c:	d10a      	bne.n	800a694 <DMA2D_Init+0x90>
    {
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 8;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	68db      	ldr	r3, [r3, #12]
 800a682:	021b      	lsls	r3, r3, #8
 800a684:	617b      	str	r3, [r7, #20]
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	691b      	ldr	r3, [r3, #16]
 800a68a:	041b      	lsls	r3, r3, #16
 800a68c:	613b      	str	r3, [r7, #16]
      outalpha = (uint32_t)0x00000000;
 800a68e:	2300      	movs	r3, #0
 800a690:	60fb      	str	r3, [r7, #12]
 800a692:	e02b      	b.n	800a6ec <DMA2D_Init+0xe8>
    }
     
  else

    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_RGB565)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	685b      	ldr	r3, [r3, #4]
 800a698:	2b02      	cmp	r3, #2
 800a69a:	d10a      	bne.n	800a6b2 <DMA2D_Init+0xae>
    {
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 5;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	015b      	lsls	r3, r3, #5
 800a6a2:	617b      	str	r3, [r7, #20]
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 11;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	691b      	ldr	r3, [r3, #16]
 800a6a8:	02db      	lsls	r3, r3, #11
 800a6aa:	613b      	str	r3, [r7, #16]
      outalpha = (uint32_t)0x00000000;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	60fb      	str	r3, [r7, #12]
 800a6b0:	e01c      	b.n	800a6ec <DMA2D_Init+0xe8>
    }

  else

    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_ARGB1555)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	2b03      	cmp	r3, #3
 800a6b8:	d10c      	bne.n	800a6d4 <DMA2D_Init+0xd0>
    {  
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 5;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	68db      	ldr	r3, [r3, #12]
 800a6be:	015b      	lsls	r3, r3, #5
 800a6c0:	617b      	str	r3, [r7, #20]
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 10;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	691b      	ldr	r3, [r3, #16]
 800a6c6:	029b      	lsls	r3, r3, #10
 800a6c8:	613b      	str	r3, [r7, #16]
      outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 15;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	695b      	ldr	r3, [r3, #20]
 800a6ce:	03db      	lsls	r3, r3, #15
 800a6d0:	60fb      	str	r3, [r7, #12]
 800a6d2:	e00b      	b.n	800a6ec <DMA2D_Init+0xe8>
    }

  else /* DMA2D_CMode = DMA2D_ARGB4444 */
  {
    outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 4;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	68db      	ldr	r3, [r3, #12]
 800a6d8:	011b      	lsls	r3, r3, #4
 800a6da:	617b      	str	r3, [r7, #20]
    outred = DMA2D_InitStruct->DMA2D_OutputRed << 8;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	691b      	ldr	r3, [r3, #16]
 800a6e0:	021b      	lsls	r3, r3, #8
 800a6e2:	613b      	str	r3, [r7, #16]
    outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 12;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	695b      	ldr	r3, [r3, #20]
 800a6e8:	031b      	lsls	r3, r3, #12
 800a6ea:	60fb      	str	r3, [r7, #12]
  }  
  DMA2D->OCOLR |= ((outgreen) | (outred) | (DMA2D_InitStruct->DMA2D_OutputBlue) | (outalpha));
 800a6ec:	4b1b      	ldr	r3, [pc, #108]	; (800a75c <DMA2D_Init+0x158>)
 800a6ee:	4a1b      	ldr	r2, [pc, #108]	; (800a75c <DMA2D_Init+0x158>)
 800a6f0:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800a6f2:	6978      	ldr	r0, [r7, #20]
 800a6f4:	693a      	ldr	r2, [r7, #16]
 800a6f6:	4310      	orrs	r0, r2
 800a6f8:	687a      	ldr	r2, [r7, #4]
 800a6fa:	6892      	ldr	r2, [r2, #8]
 800a6fc:	4310      	orrs	r0, r2
 800a6fe:	68fa      	ldr	r2, [r7, #12]
 800a700:	4302      	orrs	r2, r0
 800a702:	430a      	orrs	r2, r1
 800a704:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configures the output memory address */
  DMA2D->OMAR = (DMA2D_InitStruct->DMA2D_OutputMemoryAdd);
 800a706:	4b15      	ldr	r3, [pc, #84]	; (800a75c <DMA2D_Init+0x158>)
 800a708:	687a      	ldr	r2, [r7, #4]
 800a70a:	6992      	ldr	r2, [r2, #24]
 800a70c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Configure  the line Offset */
  DMA2D->OOR &= ~(uint32_t)DMA2D_OOR_LO;
 800a70e:	4a13      	ldr	r2, [pc, #76]	; (800a75c <DMA2D_Init+0x158>)
 800a710:	4b12      	ldr	r3, [pc, #72]	; (800a75c <DMA2D_Init+0x158>)
 800a712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a714:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800a718:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a71c:	6413      	str	r3, [r2, #64]	; 0x40
  DMA2D->OOR |= (DMA2D_InitStruct->DMA2D_OutputOffset);
 800a71e:	4b0f      	ldr	r3, [pc, #60]	; (800a75c <DMA2D_Init+0x158>)
 800a720:	4a0e      	ldr	r2, [pc, #56]	; (800a75c <DMA2D_Init+0x158>)
 800a722:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800a724:	687a      	ldr	r2, [r7, #4]
 800a726:	69d2      	ldr	r2, [r2, #28]
 800a728:	430a      	orrs	r2, r1
 800a72a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the number of line and pixel per line */
  pixline = DMA2D_InitStruct->DMA2D_PixelPerLine << 16; 
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a730:	041b      	lsls	r3, r3, #16
 800a732:	60bb      	str	r3, [r7, #8]
  DMA2D->NLR &= ~(DMA2D_NLR_NL | DMA2D_NLR_PL);
 800a734:	4b09      	ldr	r3, [pc, #36]	; (800a75c <DMA2D_Init+0x158>)
 800a736:	4a09      	ldr	r2, [pc, #36]	; (800a75c <DMA2D_Init+0x158>)
 800a738:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800a73a:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 800a73e:	645a      	str	r2, [r3, #68]	; 0x44
  DMA2D->NLR |= ((DMA2D_InitStruct->DMA2D_NumberOfLine) | (pixline));
 800a740:	4b06      	ldr	r3, [pc, #24]	; (800a75c <DMA2D_Init+0x158>)
 800a742:	4a06      	ldr	r2, [pc, #24]	; (800a75c <DMA2D_Init+0x158>)
 800a744:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	6a10      	ldr	r0, [r2, #32]
 800a74a:	68ba      	ldr	r2, [r7, #8]
 800a74c:	4302      	orrs	r2, r0
 800a74e:	430a      	orrs	r2, r1
 800a750:	645a      	str	r2, [r3, #68]	; 0x44
  * @brief  Fills each DMA2D_InitStruct member with its default value.
  * @param  DMA2D_InitStruct: pointer to a DMA2D_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
}
 800a752:	371c      	adds	r7, #28
 800a754:	46bd      	mov	sp, r7
 800a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75a:	4770      	bx	lr
 800a75c:	4002b000 	.word	0x4002b000

0800a760 <DMA2D_StructInit>:
void DMA2D_StructInit(DMA2D_InitTypeDef* DMA2D_InitStruct)
{
 800a760:	b480      	push	{r7}
 800a762:	b083      	sub	sp, #12
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  /* Initialize the transfer mode member */
  DMA2D_InitStruct->DMA2D_Mode = DMA2D_M2M;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2200      	movs	r2, #0
 800a76c:	601a      	str	r2, [r3, #0]

  /* Initialize the output color mode members */
  DMA2D_InitStruct->DMA2D_CMode = DMA2D_ARGB8888;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2200      	movs	r2, #0
 800a772:	605a      	str	r2, [r3, #4]

  /* Initialize the alpha and RGB values */
  DMA2D_InitStruct->DMA2D_OutputGreen = 0x00;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2200      	movs	r2, #0
 800a778:	60da      	str	r2, [r3, #12]
  DMA2D_InitStruct->DMA2D_OutputBlue = 0x00;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2200      	movs	r2, #0
 800a77e:	609a      	str	r2, [r3, #8]
  DMA2D_InitStruct->DMA2D_OutputRed = 0x00;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2200      	movs	r2, #0
 800a784:	611a      	str	r2, [r3, #16]
  DMA2D_InitStruct->DMA2D_OutputAlpha = 0x00;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2200      	movs	r2, #0
 800a78a:	615a      	str	r2, [r3, #20]

  /* Initialize the output memory address */
  DMA2D_InitStruct->DMA2D_OutputMemoryAdd = 0x00;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2200      	movs	r2, #0
 800a790:	619a      	str	r2, [r3, #24]

  /* Initialize the output offset */
  DMA2D_InitStruct->DMA2D_OutputOffset = 0x00;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2200      	movs	r2, #0
 800a796:	61da      	str	r2, [r3, #28]

  /* Initialize the number of line and the number of pixel per line */
  DMA2D_InitStruct->DMA2D_NumberOfLine = 0x00;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2200      	movs	r2, #0
 800a79c:	621a      	str	r2, [r3, #32]
  DMA2D_InitStruct->DMA2D_PixelPerLine = 0x00;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a7a4:	370c      	adds	r7, #12
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ac:	4770      	bx	lr
 800a7ae:	bf00      	nop

0800a7b0 <DMA2D_StartTransfer>:
  * @param 
  * @retval None
  */

void DMA2D_StartTransfer(void)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	af00      	add	r7, sp, #0
    /* Start DMA2D transfer by setting START bit */
    DMA2D->CR |= (uint32_t)DMA2D_CR_START;
 800a7b4:	4b04      	ldr	r3, [pc, #16]	; (800a7c8 <DMA2D_StartTransfer+0x18>)
 800a7b6:	4a04      	ldr	r2, [pc, #16]	; (800a7c8 <DMA2D_StartTransfer+0x18>)
 800a7b8:	6812      	ldr	r2, [r2, #0]
 800a7ba:	f042 0201 	orr.w	r2, r2, #1
 800a7be:	601a      	str	r2, [r3, #0]
}
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr
 800a7c8:	4002b000 	.word	0x4002b000

0800a7cc <DMA2D_AbortTransfer>:
  * @param
  * @retval None
  */

void DMA2D_AbortTransfer(void)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	af00      	add	r7, sp, #0
    /* Start DMA2D transfer by setting START bit */
    DMA2D->CR |= (uint32_t)DMA2D_CR_ABORT;
 800a7d0:	4b04      	ldr	r3, [pc, #16]	; (800a7e4 <DMA2D_AbortTransfer+0x18>)
 800a7d2:	4a04      	ldr	r2, [pc, #16]	; (800a7e4 <DMA2D_AbortTransfer+0x18>)
 800a7d4:	6812      	ldr	r2, [r2, #0]
 800a7d6:	f042 0204 	orr.w	r2, r2, #4
 800a7da:	601a      	str	r2, [r3, #0]

}
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr
 800a7e4:	4002b000 	.word	0x4002b000

0800a7e8 <DMA2D_Suspend>:
  * @param  NewState: new state of the DMA2D peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA2D_Suspend(FunctionalState NewState)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b083      	sub	sp, #12
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a7f2:	79fb      	ldrb	r3, [r7, #7]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d006      	beq.n	800a806 <DMA2D_Suspend+0x1e>
  {
    /* Suspend DMA2D transfer by setting STOP bit */
    DMA2D->CR |= (uint32_t)DMA2D_CR_SUSP;
 800a7f8:	4b08      	ldr	r3, [pc, #32]	; (800a81c <DMA2D_Suspend+0x34>)
 800a7fa:	4a08      	ldr	r2, [pc, #32]	; (800a81c <DMA2D_Suspend+0x34>)
 800a7fc:	6812      	ldr	r2, [r2, #0]
 800a7fe:	f042 0202 	orr.w	r2, r2, #2
 800a802:	601a      	str	r2, [r3, #0]
 800a804:	e005      	b.n	800a812 <DMA2D_Suspend+0x2a>
  }
  else
  {
    /* Continue DMA2D transfer by clearing STOP bit */
    DMA2D->CR &= ~(uint32_t)DMA2D_CR_SUSP;
 800a806:	4b05      	ldr	r3, [pc, #20]	; (800a81c <DMA2D_Suspend+0x34>)
 800a808:	4a04      	ldr	r2, [pc, #16]	; (800a81c <DMA2D_Suspend+0x34>)
 800a80a:	6812      	ldr	r2, [r2, #0]
 800a80c:	f022 0202 	bic.w	r2, r2, #2
 800a810:	601a      	str	r2, [r3, #0]
  }
}
 800a812:	370c      	adds	r7, #12
 800a814:	46bd      	mov	sp, r7
 800a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81a:	4770      	bx	lr
 800a81c:	4002b000 	.word	0x4002b000

0800a820 <DMA2D_FGConfig>:
  * @param  DMA2D_FGStruct: pointer to a DMA2D_FGTypeDef structure that contains
  *         the configuration information for the specified Background.
  * @retval None
  */
void DMA2D_FGConfig(DMA2D_FG_InitTypeDef* DMA2D_FG_InitStruct)
{
 800a820:	b480      	push	{r7}
 800a822:	b089      	sub	sp, #36	; 0x24
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]

  uint32_t fg_clutcolormode = 0;
 800a828:	2300      	movs	r3, #0
 800a82a:	61fb      	str	r3, [r7, #28]
  uint32_t fg_clutsize = 0;
 800a82c:	2300      	movs	r3, #0
 800a82e:	61bb      	str	r3, [r7, #24]
  uint32_t fg_alpha_mode = 0;
 800a830:	2300      	movs	r3, #0
 800a832:	617b      	str	r3, [r7, #20]
  uint32_t fg_alphavalue = 0;
 800a834:	2300      	movs	r3, #0
 800a836:	613b      	str	r3, [r7, #16]
  uint32_t fg_colorgreen = 0;
 800a838:	2300      	movs	r3, #0
 800a83a:	60fb      	str	r3, [r7, #12]
  uint32_t fg_colorred = 0;
 800a83c:	2300      	movs	r3, #0
 800a83e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA2D_FGC_BLUE(DMA2D_FG_InitStruct->DMA2D_FGC_BLUE));
  assert_param(IS_DMA2D_FGC_GREEN(DMA2D_FG_InitStruct->DMA2D_FGC_GREEN));
  assert_param(IS_DMA2D_FGC_RED(DMA2D_FG_InitStruct->DMA2D_FGC_RED));

  /* Configures the FG memory address */
  DMA2D->FGMAR = (DMA2D_FG_InitStruct->DMA2D_FGMA);
 800a840:	4b2c      	ldr	r3, [pc, #176]	; (800a8f4 <DMA2D_FGConfig+0xd4>)
 800a842:	687a      	ldr	r2, [r7, #4]
 800a844:	6812      	ldr	r2, [r2, #0]
 800a846:	60da      	str	r2, [r3, #12]

  /* Configures the FG offset */
  DMA2D->FGOR &= ~(uint32_t)DMA2D_FGOR_LO;
 800a848:	4a2a      	ldr	r2, [pc, #168]	; (800a8f4 <DMA2D_FGConfig+0xd4>)
 800a84a:	4b2a      	ldr	r3, [pc, #168]	; (800a8f4 <DMA2D_FGConfig+0xd4>)
 800a84c:	691b      	ldr	r3, [r3, #16]
 800a84e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800a852:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a856:	6113      	str	r3, [r2, #16]
  DMA2D->FGOR |= (DMA2D_FG_InitStruct->DMA2D_FGO);
 800a858:	4b26      	ldr	r3, [pc, #152]	; (800a8f4 <DMA2D_FGConfig+0xd4>)
 800a85a:	4a26      	ldr	r2, [pc, #152]	; (800a8f4 <DMA2D_FGConfig+0xd4>)
 800a85c:	6911      	ldr	r1, [r2, #16]
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	6852      	ldr	r2, [r2, #4]
 800a862:	430a      	orrs	r2, r1
 800a864:	611a      	str	r2, [r3, #16]

  /* Configures foreground Pixel Format Convertor */
  DMA2D->FGPFCCR &= (uint32_t)PFCCR_MASK;
 800a866:	4a23      	ldr	r2, [pc, #140]	; (800a8f4 <DMA2D_FGConfig+0xd4>)
 800a868:	4b22      	ldr	r3, [pc, #136]	; (800a8f4 <DMA2D_FGConfig+0xd4>)
 800a86a:	69d9      	ldr	r1, [r3, #28]
 800a86c:	4b22      	ldr	r3, [pc, #136]	; (800a8f8 <DMA2D_FGConfig+0xd8>)
 800a86e:	400b      	ands	r3, r1
 800a870:	61d3      	str	r3, [r2, #28]
  fg_clutcolormode = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_CM << 4;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	68db      	ldr	r3, [r3, #12]
 800a876:	011b      	lsls	r3, r3, #4
 800a878:	61fb      	str	r3, [r7, #28]
  fg_clutsize = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_SIZE << 8;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	691b      	ldr	r3, [r3, #16]
 800a87e:	021b      	lsls	r3, r3, #8
 800a880:	61bb      	str	r3, [r7, #24]
  fg_alpha_mode = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_MODE << 16;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	695b      	ldr	r3, [r3, #20]
 800a886:	041b      	lsls	r3, r3, #16
 800a888:	617b      	str	r3, [r7, #20]
  fg_alphavalue = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_VALUE << 24;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	699b      	ldr	r3, [r3, #24]
 800a88e:	061b      	lsls	r3, r3, #24
 800a890:	613b      	str	r3, [r7, #16]
  DMA2D->FGPFCCR |= (DMA2D_FG_InitStruct->DMA2D_FGCM | fg_clutcolormode | fg_clutsize | \
 800a892:	4b18      	ldr	r3, [pc, #96]	; (800a8f4 <DMA2D_FGConfig+0xd4>)
 800a894:	4a17      	ldr	r2, [pc, #92]	; (800a8f4 <DMA2D_FGConfig+0xd4>)
 800a896:	69d1      	ldr	r1, [r2, #28]
 800a898:	687a      	ldr	r2, [r7, #4]
 800a89a:	6890      	ldr	r0, [r2, #8]
 800a89c:	69fa      	ldr	r2, [r7, #28]
 800a89e:	4310      	orrs	r0, r2
 800a8a0:	69ba      	ldr	r2, [r7, #24]
 800a8a2:	4310      	orrs	r0, r2
 800a8a4:	697a      	ldr	r2, [r7, #20]
 800a8a6:	4310      	orrs	r0, r2
                    fg_alpha_mode | fg_alphavalue);
 800a8a8:	693a      	ldr	r2, [r7, #16]
 800a8aa:	4302      	orrs	r2, r0
  DMA2D->FGPFCCR &= (uint32_t)PFCCR_MASK;
  fg_clutcolormode = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_CM << 4;
  fg_clutsize = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_SIZE << 8;
  fg_alpha_mode = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_MODE << 16;
  fg_alphavalue = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_VALUE << 24;
  DMA2D->FGPFCCR |= (DMA2D_FG_InitStruct->DMA2D_FGCM | fg_clutcolormode | fg_clutsize | \
 800a8ac:	430a      	orrs	r2, r1
 800a8ae:	61da      	str	r2, [r3, #28]
                    fg_alpha_mode | fg_alphavalue);

  /* Configures foreground color */
  DMA2D->FGCOLR &= ~(DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED);
 800a8b0:	4b10      	ldr	r3, [pc, #64]	; (800a8f4 <DMA2D_FGConfig+0xd4>)
 800a8b2:	4a10      	ldr	r2, [pc, #64]	; (800a8f4 <DMA2D_FGConfig+0xd4>)
 800a8b4:	6a12      	ldr	r2, [r2, #32]
 800a8b6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800a8ba:	621a      	str	r2, [r3, #32]
  fg_colorgreen = DMA2D_FG_InitStruct->DMA2D_FGC_GREEN << 8;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6a1b      	ldr	r3, [r3, #32]
 800a8c0:	021b      	lsls	r3, r3, #8
 800a8c2:	60fb      	str	r3, [r7, #12]
  fg_colorred = DMA2D_FG_InitStruct->DMA2D_FGC_RED << 16;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c8:	041b      	lsls	r3, r3, #16
 800a8ca:	60bb      	str	r3, [r7, #8]
  DMA2D->FGCOLR |= (DMA2D_FG_InitStruct->DMA2D_FGC_BLUE | fg_colorgreen | fg_colorred);
 800a8cc:	4b09      	ldr	r3, [pc, #36]	; (800a8f4 <DMA2D_FGConfig+0xd4>)
 800a8ce:	4a09      	ldr	r2, [pc, #36]	; (800a8f4 <DMA2D_FGConfig+0xd4>)
 800a8d0:	6a11      	ldr	r1, [r2, #32]
 800a8d2:	687a      	ldr	r2, [r7, #4]
 800a8d4:	69d0      	ldr	r0, [r2, #28]
 800a8d6:	68fa      	ldr	r2, [r7, #12]
 800a8d8:	4310      	orrs	r0, r2
 800a8da:	68ba      	ldr	r2, [r7, #8]
 800a8dc:	4302      	orrs	r2, r0
 800a8de:	430a      	orrs	r2, r1
 800a8e0:	621a      	str	r2, [r3, #32]

  /* Configures foreground CLUT memory address */
  DMA2D->FGCMAR = DMA2D_FG_InitStruct->DMA2D_FGCMAR;
 800a8e2:	4b04      	ldr	r3, [pc, #16]	; (800a8f4 <DMA2D_FGConfig+0xd4>)
 800a8e4:	687a      	ldr	r2, [r7, #4]
 800a8e6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a8e8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800a8ea:	3724      	adds	r7, #36	; 0x24
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr
 800a8f4:	4002b000 	.word	0x4002b000
 800a8f8:	00fc00c0 	.word	0x00fc00c0

0800a8fc <DMA2D_FG_StructInit>:
  * @param  DMA2D_FGStruct: pointer to a DMA2D_FGTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DMA2D_FG_StructInit(DMA2D_FG_InitTypeDef* DMA2D_FG_InitStruct)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b083      	sub	sp, #12
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  /*!< Initialize the DMA2D foreground memory address */
  DMA2D_FG_InitStruct->DMA2D_FGMA = 0x00;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2200      	movs	r2, #0
 800a908:	601a      	str	r2, [r3, #0]

  /*!< Initialize the DMA2D foreground offset */
  DMA2D_FG_InitStruct->DMA2D_FGO = 0x00;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2200      	movs	r2, #0
 800a90e:	605a      	str	r2, [r3, #4]

  /*!< Initialize the DMA2D foreground color mode */
  DMA2D_FG_InitStruct->DMA2D_FGCM = CM_ARGB8888;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2200      	movs	r2, #0
 800a914:	609a      	str	r2, [r3, #8]

  /*!< Initialize the DMA2D foreground CLUT color mode */
  DMA2D_FG_InitStruct->DMA2D_FG_CLUT_CM = CLUT_CM_ARGB8888;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2200      	movs	r2, #0
 800a91a:	60da      	str	r2, [r3, #12]

  /*!< Initialize the DMA2D foreground CLUT size */
  DMA2D_FG_InitStruct->DMA2D_FG_CLUT_SIZE = 0x00;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2200      	movs	r2, #0
 800a920:	611a      	str	r2, [r3, #16]

  /*!< Initialize the DMA2D foreground alpha mode */
  DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_MODE = NO_MODIF_ALPHA_VALUE;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2200      	movs	r2, #0
 800a926:	615a      	str	r2, [r3, #20]

  /*!< Initialize the DMA2D foreground alpha value */
  DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_VALUE = 0x00;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2200      	movs	r2, #0
 800a92c:	619a      	str	r2, [r3, #24]

  /*!< Initialize the DMA2D foreground blue value */
  DMA2D_FG_InitStruct->DMA2D_FGC_BLUE = 0x00;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2200      	movs	r2, #0
 800a932:	61da      	str	r2, [r3, #28]

  /*!< Initialize the DMA2D foreground green value */
  DMA2D_FG_InitStruct->DMA2D_FGC_GREEN = 0x00;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2200      	movs	r2, #0
 800a938:	621a      	str	r2, [r3, #32]

  /*!< Initialize the DMA2D foreground red value */
  DMA2D_FG_InitStruct->DMA2D_FGC_RED = 0x00;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2200      	movs	r2, #0
 800a93e:	625a      	str	r2, [r3, #36]	; 0x24

  /*!< Initialize the DMA2D foreground CLUT memory address */
  DMA2D_FG_InitStruct->DMA2D_FGCMAR = 0x00;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2200      	movs	r2, #0
 800a944:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a946:	370c      	adds	r7, #12
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr

0800a950 <DMA2D_BGConfig>:
  * @param  DMA2D_BGStruct: pointer to a DMA2D_BGTypeDef structure that contains
  *         the configuration information for the specified Background.
  * @retval None
  */
void DMA2D_BGConfig(DMA2D_BG_InitTypeDef* DMA2D_BG_InitStruct)
{
 800a950:	b480      	push	{r7}
 800a952:	b089      	sub	sp, #36	; 0x24
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]

  uint32_t bg_clutcolormode = 0;
 800a958:	2300      	movs	r3, #0
 800a95a:	61fb      	str	r3, [r7, #28]
  uint32_t bg_clutsize = 0;
 800a95c:	2300      	movs	r3, #0
 800a95e:	61bb      	str	r3, [r7, #24]
  uint32_t bg_alpha_mode = 0;
 800a960:	2300      	movs	r3, #0
 800a962:	617b      	str	r3, [r7, #20]
  uint32_t bg_alphavalue = 0;
 800a964:	2300      	movs	r3, #0
 800a966:	613b      	str	r3, [r7, #16]
  uint32_t bg_colorgreen = 0;
 800a968:	2300      	movs	r3, #0
 800a96a:	60fb      	str	r3, [r7, #12]
  uint32_t bg_colorred = 0;
 800a96c:	2300      	movs	r3, #0
 800a96e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA2D_BGC_BLUE(DMA2D_BG_InitStruct->DMA2D_BGC_BLUE));
  assert_param(IS_DMA2D_BGC_GREEN(DMA2D_BG_InitStruct->DMA2D_BGC_GREEN));
  assert_param(IS_DMA2D_BGC_RED(DMA2D_BG_InitStruct->DMA2D_BGC_RED));

  /* Configures the BG memory address */
  DMA2D->BGMAR = (DMA2D_BG_InitStruct->DMA2D_BGMA);
 800a970:	4b2c      	ldr	r3, [pc, #176]	; (800aa24 <DMA2D_BGConfig+0xd4>)
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	6812      	ldr	r2, [r2, #0]
 800a976:	615a      	str	r2, [r3, #20]

  /* Configures the BG offset */
  DMA2D->BGOR &= ~(uint32_t)DMA2D_BGOR_LO;
 800a978:	4a2a      	ldr	r2, [pc, #168]	; (800aa24 <DMA2D_BGConfig+0xd4>)
 800a97a:	4b2a      	ldr	r3, [pc, #168]	; (800aa24 <DMA2D_BGConfig+0xd4>)
 800a97c:	699b      	ldr	r3, [r3, #24]
 800a97e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800a982:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a986:	6193      	str	r3, [r2, #24]
  DMA2D->BGOR |= (DMA2D_BG_InitStruct->DMA2D_BGO);
 800a988:	4b26      	ldr	r3, [pc, #152]	; (800aa24 <DMA2D_BGConfig+0xd4>)
 800a98a:	4a26      	ldr	r2, [pc, #152]	; (800aa24 <DMA2D_BGConfig+0xd4>)
 800a98c:	6991      	ldr	r1, [r2, #24]
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	6852      	ldr	r2, [r2, #4]
 800a992:	430a      	orrs	r2, r1
 800a994:	619a      	str	r2, [r3, #24]

  /* Configures background Pixel Format Convertor */
  DMA2D->BGPFCCR &= (uint32_t)PFCCR_MASK;
 800a996:	4a23      	ldr	r2, [pc, #140]	; (800aa24 <DMA2D_BGConfig+0xd4>)
 800a998:	4b22      	ldr	r3, [pc, #136]	; (800aa24 <DMA2D_BGConfig+0xd4>)
 800a99a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a99c:	4b22      	ldr	r3, [pc, #136]	; (800aa28 <DMA2D_BGConfig+0xd8>)
 800a99e:	400b      	ands	r3, r1
 800a9a0:	6253      	str	r3, [r2, #36]	; 0x24
  bg_clutcolormode = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_CM << 4;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	68db      	ldr	r3, [r3, #12]
 800a9a6:	011b      	lsls	r3, r3, #4
 800a9a8:	61fb      	str	r3, [r7, #28]
  bg_clutsize = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_SIZE << 8;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	691b      	ldr	r3, [r3, #16]
 800a9ae:	021b      	lsls	r3, r3, #8
 800a9b0:	61bb      	str	r3, [r7, #24]
  bg_alpha_mode = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_MODE << 16;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	695b      	ldr	r3, [r3, #20]
 800a9b6:	041b      	lsls	r3, r3, #16
 800a9b8:	617b      	str	r3, [r7, #20]
  bg_alphavalue = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_VALUE << 24;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	699b      	ldr	r3, [r3, #24]
 800a9be:	061b      	lsls	r3, r3, #24
 800a9c0:	613b      	str	r3, [r7, #16]
  DMA2D->BGPFCCR |= (DMA2D_BG_InitStruct->DMA2D_BGCM | bg_clutcolormode | bg_clutsize | \
 800a9c2:	4b18      	ldr	r3, [pc, #96]	; (800aa24 <DMA2D_BGConfig+0xd4>)
 800a9c4:	4a17      	ldr	r2, [pc, #92]	; (800aa24 <DMA2D_BGConfig+0xd4>)
 800a9c6:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	6890      	ldr	r0, [r2, #8]
 800a9cc:	69fa      	ldr	r2, [r7, #28]
 800a9ce:	4310      	orrs	r0, r2
 800a9d0:	69ba      	ldr	r2, [r7, #24]
 800a9d2:	4310      	orrs	r0, r2
 800a9d4:	697a      	ldr	r2, [r7, #20]
 800a9d6:	4310      	orrs	r0, r2
                    bg_alpha_mode | bg_alphavalue);
 800a9d8:	693a      	ldr	r2, [r7, #16]
 800a9da:	4302      	orrs	r2, r0
  DMA2D->BGPFCCR &= (uint32_t)PFCCR_MASK;
  bg_clutcolormode = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_CM << 4;
  bg_clutsize = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_SIZE << 8;
  bg_alpha_mode = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_MODE << 16;
  bg_alphavalue = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_VALUE << 24;
  DMA2D->BGPFCCR |= (DMA2D_BG_InitStruct->DMA2D_BGCM | bg_clutcolormode | bg_clutsize | \
 800a9dc:	430a      	orrs	r2, r1
 800a9de:	625a      	str	r2, [r3, #36]	; 0x24
                    bg_alpha_mode | bg_alphavalue);

  /* Configures background color */
  DMA2D->BGCOLR &= ~(DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | DMA2D_BGCOLR_RED);
 800a9e0:	4b10      	ldr	r3, [pc, #64]	; (800aa24 <DMA2D_BGConfig+0xd4>)
 800a9e2:	4a10      	ldr	r2, [pc, #64]	; (800aa24 <DMA2D_BGConfig+0xd4>)
 800a9e4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a9e6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800a9ea:	629a      	str	r2, [r3, #40]	; 0x28
  bg_colorgreen = DMA2D_BG_InitStruct->DMA2D_BGC_GREEN << 8;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6a1b      	ldr	r3, [r3, #32]
 800a9f0:	021b      	lsls	r3, r3, #8
 800a9f2:	60fb      	str	r3, [r7, #12]
  bg_colorred = DMA2D_BG_InitStruct->DMA2D_BGC_RED << 16;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f8:	041b      	lsls	r3, r3, #16
 800a9fa:	60bb      	str	r3, [r7, #8]
  DMA2D->BGCOLR |= (DMA2D_BG_InitStruct->DMA2D_BGC_BLUE | bg_colorgreen | bg_colorred);
 800a9fc:	4b09      	ldr	r3, [pc, #36]	; (800aa24 <DMA2D_BGConfig+0xd4>)
 800a9fe:	4a09      	ldr	r2, [pc, #36]	; (800aa24 <DMA2D_BGConfig+0xd4>)
 800aa00:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800aa02:	687a      	ldr	r2, [r7, #4]
 800aa04:	69d0      	ldr	r0, [r2, #28]
 800aa06:	68fa      	ldr	r2, [r7, #12]
 800aa08:	4310      	orrs	r0, r2
 800aa0a:	68ba      	ldr	r2, [r7, #8]
 800aa0c:	4302      	orrs	r2, r0
 800aa0e:	430a      	orrs	r2, r1
 800aa10:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Configures background CLUT memory address */
  DMA2D->BGCMAR = DMA2D_BG_InitStruct->DMA2D_BGCMAR;
 800aa12:	4b04      	ldr	r3, [pc, #16]	; (800aa24 <DMA2D_BGConfig+0xd4>)
 800aa14:	687a      	ldr	r2, [r7, #4]
 800aa16:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800aa18:	631a      	str	r2, [r3, #48]	; 0x30

}
 800aa1a:	3724      	adds	r7, #36	; 0x24
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr
 800aa24:	4002b000 	.word	0x4002b000
 800aa28:	00fc00c0 	.word	0x00fc00c0

0800aa2c <DMA2D_BG_StructInit>:
  * @param  DMA2D_BGStruct: pointer to a DMA2D_BGTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DMA2D_BG_StructInit(DMA2D_BG_InitTypeDef* DMA2D_BG_InitStruct)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  /*!< Initialize the DMA2D background memory address */
  DMA2D_BG_InitStruct->DMA2D_BGMA = 0x00;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2200      	movs	r2, #0
 800aa38:	601a      	str	r2, [r3, #0]

  /*!< Initialize the DMA2D background offset */
  DMA2D_BG_InitStruct->DMA2D_BGO = 0x00;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	605a      	str	r2, [r3, #4]

  /*!< Initialize the DMA2D background color mode */
  DMA2D_BG_InitStruct->DMA2D_BGCM = CM_ARGB8888;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2200      	movs	r2, #0
 800aa44:	609a      	str	r2, [r3, #8]

  /*!< Initialize the DMA2D background CLUT color mode */
  DMA2D_BG_InitStruct->DMA2D_BG_CLUT_CM = CLUT_CM_ARGB8888;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	60da      	str	r2, [r3, #12]

  /*!< Initialize the DMA2D background CLUT size */
  DMA2D_BG_InitStruct->DMA2D_BG_CLUT_SIZE = 0x00;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	611a      	str	r2, [r3, #16]

  /*!< Initialize the DMA2D background alpha mode */
  DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_MODE = NO_MODIF_ALPHA_VALUE;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2200      	movs	r2, #0
 800aa56:	615a      	str	r2, [r3, #20]

  /*!< Initialize the DMA2D background alpha value */
  DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_VALUE = 0x00;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	619a      	str	r2, [r3, #24]

  /*!< Initialize the DMA2D background blue value */
  DMA2D_BG_InitStruct->DMA2D_BGC_BLUE = 0x00;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2200      	movs	r2, #0
 800aa62:	61da      	str	r2, [r3, #28]

  /*!< Initialize the DMA2D background green value */
  DMA2D_BG_InitStruct->DMA2D_BGC_GREEN = 0x00;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2200      	movs	r2, #0
 800aa68:	621a      	str	r2, [r3, #32]

  /*!< Initialize the DMA2D background red value */
  DMA2D_BG_InitStruct->DMA2D_BGC_RED = 0x00;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	625a      	str	r2, [r3, #36]	; 0x24

  /*!< Initialize the DMA2D background CLUT memory address */
  DMA2D_BG_InitStruct->DMA2D_BGCMAR = 0x00;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2200      	movs	r2, #0
 800aa74:	629a      	str	r2, [r3, #40]	; 0x28
}
 800aa76:	370c      	adds	r7, #12
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr

0800aa80 <DMA2D_FGStart>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void DMA2D_FGStart(FunctionalState NewState) 
{
 800aa80:	b480      	push	{r7}
 800aa82:	b083      	sub	sp, #12
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	4603      	mov	r3, r0
 800aa88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800aa8a:	79fb      	ldrb	r3, [r7, #7]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d006      	beq.n	800aa9e <DMA2D_FGStart+0x1e>
  {
    /* Start the automatic loading of the CLUT */
    DMA2D->FGPFCCR |= DMA2D_FGPFCCR_START;
 800aa90:	4b08      	ldr	r3, [pc, #32]	; (800aab4 <DMA2D_FGStart+0x34>)
 800aa92:	4a08      	ldr	r2, [pc, #32]	; (800aab4 <DMA2D_FGStart+0x34>)
 800aa94:	69d2      	ldr	r2, [r2, #28]
 800aa96:	f042 0220 	orr.w	r2, r2, #32
 800aa9a:	61da      	str	r2, [r3, #28]
 800aa9c:	e005      	b.n	800aaaa <DMA2D_FGStart+0x2a>
  }
  else
  {
    /* abort the transfer */
    DMA2D->FGPFCCR &= (uint32_t)~DMA2D_FGPFCCR_START;
 800aa9e:	4b05      	ldr	r3, [pc, #20]	; (800aab4 <DMA2D_FGStart+0x34>)
 800aaa0:	4a04      	ldr	r2, [pc, #16]	; (800aab4 <DMA2D_FGStart+0x34>)
 800aaa2:	69d2      	ldr	r2, [r2, #28]
 800aaa4:	f022 0220 	bic.w	r2, r2, #32
 800aaa8:	61da      	str	r2, [r3, #28]
  }
}
 800aaaa:	370c      	adds	r7, #12
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr
 800aab4:	4002b000 	.word	0x4002b000

0800aab8 <DMA2D_BGStart>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
  
void DMA2D_BGStart(FunctionalState NewState) 
{
 800aab8:	b480      	push	{r7}
 800aaba:	b083      	sub	sp, #12
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	4603      	mov	r3, r0
 800aac0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800aac2:	79fb      	ldrb	r3, [r7, #7]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d006      	beq.n	800aad6 <DMA2D_BGStart+0x1e>
  {
    /* Start the automatic loading of the CLUT */
    DMA2D->BGPFCCR |= DMA2D_BGPFCCR_START;
 800aac8:	4b08      	ldr	r3, [pc, #32]	; (800aaec <DMA2D_BGStart+0x34>)
 800aaca:	4a08      	ldr	r2, [pc, #32]	; (800aaec <DMA2D_BGStart+0x34>)
 800aacc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800aace:	f042 0220 	orr.w	r2, r2, #32
 800aad2:	625a      	str	r2, [r3, #36]	; 0x24
 800aad4:	e005      	b.n	800aae2 <DMA2D_BGStart+0x2a>
  }
  else
  {
    /* abort the transfer */
    DMA2D->BGPFCCR &= (uint32_t)~DMA2D_BGPFCCR_START;
 800aad6:	4b05      	ldr	r3, [pc, #20]	; (800aaec <DMA2D_BGStart+0x34>)
 800aad8:	4a04      	ldr	r2, [pc, #16]	; (800aaec <DMA2D_BGStart+0x34>)
 800aada:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800aadc:	f022 0220 	bic.w	r2, r2, #32
 800aae0:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800aae2:	370c      	adds	r7, #12
 800aae4:	46bd      	mov	sp, r7
 800aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaea:	4770      	bx	lr
 800aaec:	4002b000 	.word	0x4002b000

0800aaf0 <DMA2D_DeadTimeConfig>:
  * @param  DMA2D_DeadTime: specifies the DMA2D dead time.
  *   This parameter can be one of the following values:
  * @retval None
  */
void DMA2D_DeadTimeConfig(uint32_t DMA2D_DeadTime, FunctionalState NewState)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b085      	sub	sp, #20
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	460b      	mov	r3, r1
 800aafa:	70fb      	strb	r3, [r7, #3]

  /* Check the parameters */
  assert_param(IS_DMA2D_DEAD_TIME(DMA2D_DeadTime));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800aafc:	78fb      	ldrb	r3, [r7, #3]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d013      	beq.n	800ab2a <DMA2D_DeadTimeConfig+0x3a>
  {
    /* Enable and Configures the dead time */
    DMA2D->AMTCR &= (uint32_t)DEAD_MASK;
 800ab02:	4a0f      	ldr	r2, [pc, #60]	; (800ab40 <DMA2D_DeadTimeConfig+0x50>)
 800ab04:	4b0e      	ldr	r3, [pc, #56]	; (800ab40 <DMA2D_DeadTimeConfig+0x50>)
 800ab06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ab0c:	f023 0301 	bic.w	r3, r3, #1
 800ab10:	64d3      	str	r3, [r2, #76]	; 0x4c
    DeadTime = DMA2D_DeadTime << 8;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	021b      	lsls	r3, r3, #8
 800ab16:	60fb      	str	r3, [r7, #12]
    DMA2D->AMTCR |= (DeadTime | DMA2D_AMTCR_EN);
 800ab18:	4b09      	ldr	r3, [pc, #36]	; (800ab40 <DMA2D_DeadTimeConfig+0x50>)
 800ab1a:	4a09      	ldr	r2, [pc, #36]	; (800ab40 <DMA2D_DeadTimeConfig+0x50>)
 800ab1c:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 800ab1e:	68fa      	ldr	r2, [r7, #12]
 800ab20:	430a      	orrs	r2, r1
 800ab22:	f042 0201 	orr.w	r2, r2, #1
 800ab26:	64da      	str	r2, [r3, #76]	; 0x4c
 800ab28:	e005      	b.n	800ab36 <DMA2D_DeadTimeConfig+0x46>
  }
  else
  {
     DMA2D->AMTCR &= ~(uint32_t)DMA2D_AMTCR_EN;
 800ab2a:	4b05      	ldr	r3, [pc, #20]	; (800ab40 <DMA2D_DeadTimeConfig+0x50>)
 800ab2c:	4a04      	ldr	r2, [pc, #16]	; (800ab40 <DMA2D_DeadTimeConfig+0x50>)
 800ab2e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800ab30:	f022 0201 	bic.w	r2, r2, #1
 800ab34:	64da      	str	r2, [r3, #76]	; 0x4c
  }
}
 800ab36:	3714      	adds	r7, #20
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr
 800ab40:	4002b000 	.word	0x4002b000

0800ab44 <DMA2D_LineWatermarkConfig>:
  * @param  DMA2D_LWatermarkConfig: Line Watermark configuration.
  * @retval None
  */

void DMA2D_LineWatermarkConfig(uint32_t DMA2D_LWatermarkConfig)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b083      	sub	sp, #12
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA2D_LineWatermark(DMA2D_LWatermarkConfig));

  /* Sets the Line watermark configuration */
  DMA2D->LWR = (uint32_t)DMA2D_LWatermarkConfig;
 800ab4c:	4b03      	ldr	r3, [pc, #12]	; (800ab5c <DMA2D_LineWatermarkConfig+0x18>)
 800ab4e:	687a      	ldr	r2, [r7, #4]
 800ab50:	649a      	str	r2, [r3, #72]	; 0x48
}
 800ab52:	370c      	adds	r7, #12
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr
 800ab5c:	4002b000 	.word	0x4002b000

0800ab60 <DMA2D_ITConfig>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void DMA2D_ITConfig(uint32_t DMA2D_IT, FunctionalState NewState)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b083      	sub	sp, #12
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	460b      	mov	r3, r1
 800ab6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA2D_IT(DMA2D_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800ab6c:	78fb      	ldrb	r3, [r7, #3]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d006      	beq.n	800ab80 <DMA2D_ITConfig+0x20>
  {
    /* Enable the selected DMA2D interrupts */
    DMA2D->CR |= DMA2D_IT;
 800ab72:	4b09      	ldr	r3, [pc, #36]	; (800ab98 <DMA2D_ITConfig+0x38>)
 800ab74:	4a08      	ldr	r2, [pc, #32]	; (800ab98 <DMA2D_ITConfig+0x38>)
 800ab76:	6811      	ldr	r1, [r2, #0]
 800ab78:	687a      	ldr	r2, [r7, #4]
 800ab7a:	430a      	orrs	r2, r1
 800ab7c:	601a      	str	r2, [r3, #0]
 800ab7e:	e006      	b.n	800ab8e <DMA2D_ITConfig+0x2e>
  }
  else
  {
    /* Disable the selected DMA2D interrupts */
    DMA2D->CR &= (uint32_t)~DMA2D_IT;
 800ab80:	4b05      	ldr	r3, [pc, #20]	; (800ab98 <DMA2D_ITConfig+0x38>)
 800ab82:	4a05      	ldr	r2, [pc, #20]	; (800ab98 <DMA2D_ITConfig+0x38>)
 800ab84:	6811      	ldr	r1, [r2, #0]
 800ab86:	687a      	ldr	r2, [r7, #4]
 800ab88:	43d2      	mvns	r2, r2
 800ab8a:	400a      	ands	r2, r1
 800ab8c:	601a      	str	r2, [r3, #0]
  }
}
 800ab8e:	370c      	adds	r7, #12
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr
 800ab98:	4002b000 	.word	0x4002b000

0800ab9c <DMA2D_GetFlagStatus>:
  *     @arg DMA2D_FLAG_TE:   Transfer Error interrupt flag.
  * @retval The new state of DMA2D_FLAG (SET or RESET).
  */

FlagStatus DMA2D_GetFlagStatus(uint32_t DMA2D_FLAG)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b085      	sub	sp, #20
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800aba4:	2300      	movs	r3, #0
 800aba6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_DMA2D_GET_FLAG(DMA2D_FLAG));
  
  /* Check the status of the specified DMA2D flag */
  if (((DMA2D->ISR) & DMA2D_FLAG) != (uint32_t)RESET)
 800aba8:	4b08      	ldr	r3, [pc, #32]	; (800abcc <DMA2D_GetFlagStatus+0x30>)
 800abaa:	685a      	ldr	r2, [r3, #4]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	4013      	ands	r3, r2
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d002      	beq.n	800abba <DMA2D_GetFlagStatus+0x1e>
  {
    /* DMA2D_FLAG is set */
    bitstatus = SET;
 800abb4:	2301      	movs	r3, #1
 800abb6:	73fb      	strb	r3, [r7, #15]
 800abb8:	e001      	b.n	800abbe <DMA2D_GetFlagStatus+0x22>
  }
  else
  {
    /* DMA2D_FLAG is reset */
    bitstatus = RESET;
 800abba:	2300      	movs	r3, #0
 800abbc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DMA2D_FLAG status */
  return bitstatus;
 800abbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3714      	adds	r7, #20
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr
 800abcc:	4002b000 	.word	0x4002b000

0800abd0 <DMA2D_ClearFlag>:
  *     @arg DMA2D_FLAG_TC:   Transfer Complete interrupt flag.
  *     @arg DMA2D_FLAG_TE:   Transfer Error interrupt flag.
  * @retval None
  */
void DMA2D_ClearFlag(uint32_t DMA2D_FLAG)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b083      	sub	sp, #12
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA2D_GET_FLAG(DMA2D_FLAG));
    
  /* Clear the corresponding DMA2D flag */
  DMA2D->IFCR = (uint32_t)DMA2D_FLAG;
 800abd8:	4b03      	ldr	r3, [pc, #12]	; (800abe8 <DMA2D_ClearFlag+0x18>)
 800abda:	687a      	ldr	r2, [r7, #4]
 800abdc:	609a      	str	r2, [r3, #8]
}
 800abde:	370c      	adds	r7, #12
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr
 800abe8:	4002b000 	.word	0x4002b000

0800abec <DMA2D_GetITStatus>:
  *     @arg DMA2D_IT_TC:   Transfer Complete interrupt enable.
  *     @arg DMA2D_IT_TE:   Transfer Error interrupt enable.
  * @retval The new state of the DMA2D_IT (SET or RESET).
  */
ITStatus DMA2D_GetITStatus(uint32_t DMA2D_IT)
{
 800abec:	b480      	push	{r7}
 800abee:	b085      	sub	sp, #20
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800abf4:	2300      	movs	r3, #0
 800abf6:	73fb      	strb	r3, [r7, #15]
  uint32_t DMA2D_IT_FLAG = DMA2D_IT >> 8;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	0a1b      	lsrs	r3, r3, #8
 800abfc:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DMA2D_IT(DMA2D_IT));

  if ((DMA2D->ISR & DMA2D_IT_FLAG) != (uint32_t)RESET)
 800abfe:	4b10      	ldr	r3, [pc, #64]	; (800ac40 <DMA2D_GetITStatus+0x54>)
 800ac00:	685a      	ldr	r2, [r3, #4]
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	4013      	ands	r3, r2
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d002      	beq.n	800ac10 <DMA2D_GetITStatus+0x24>
  {
    bitstatus = SET;
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	73fb      	strb	r3, [r7, #15]
 800ac0e:	e001      	b.n	800ac14 <DMA2D_GetITStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
 800ac10:	2300      	movs	r3, #0
 800ac12:	73fb      	strb	r3, [r7, #15]
  }
  
  if (((DMA2D->CR & DMA2D_IT) != (uint32_t)RESET) && (bitstatus != (uint32_t)RESET))
 800ac14:	4b0a      	ldr	r3, [pc, #40]	; (800ac40 <DMA2D_GetITStatus+0x54>)
 800ac16:	681a      	ldr	r2, [r3, #0]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	4013      	ands	r3, r2
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d005      	beq.n	800ac2c <DMA2D_GetITStatus+0x40>
 800ac20:	7bfb      	ldrb	r3, [r7, #15]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d002      	beq.n	800ac2c <DMA2D_GetITStatus+0x40>
  {
    bitstatus = SET;
 800ac26:	2301      	movs	r3, #1
 800ac28:	73fb      	strb	r3, [r7, #15]
 800ac2a:	e001      	b.n	800ac30 <DMA2D_GetITStatus+0x44>
  }
  else
  {
    bitstatus = RESET;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ac30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3714      	adds	r7, #20
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr
 800ac3e:	bf00      	nop
 800ac40:	4002b000 	.word	0x4002b000

0800ac44 <DMA2D_ClearITPendingBit>:
  *     @arg DMA2D_IT_TC:   Transfer Complete interrupt.
  *     @arg DMA2D_IT_TE:   Transfer Error interrupt.
  * @retval None
  */
void DMA2D_ClearITPendingBit(uint32_t DMA2D_IT)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA2D_IT(DMA2D_IT));
  DMA2D_IT = DMA2D_IT >> 8;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	0a1b      	lsrs	r3, r3, #8
 800ac50:	607b      	str	r3, [r7, #4]
    
  /* Clear the corresponding DMA2D Interrupt */
  DMA2D->IFCR = (uint32_t)DMA2D_IT;
 800ac52:	4b04      	ldr	r3, [pc, #16]	; (800ac64 <DMA2D_ClearITPendingBit+0x20>)
 800ac54:	687a      	ldr	r2, [r7, #4]
 800ac56:	609a      	str	r2, [r3, #8]
}
 800ac58:	370c      	adds	r7, #12
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr
 800ac62:	bf00      	nop
 800ac64:	4002b000 	.word	0x4002b000

0800ac68 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b083      	sub	sp, #12
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f023 0201 	bic.w	r2, r3, #1
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2200      	movs	r2, #0
 800ac86:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2200      	movs	r2, #0
 800ac92:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2200      	movs	r2, #0
 800ac98:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2221      	movs	r2, #33	; 0x21
 800ac9e:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	4b45      	ldr	r3, [pc, #276]	; (800adb8 <DMA_DeInit+0x150>)
 800aca4:	429a      	cmp	r2, r3
 800aca6:	d103      	bne.n	800acb0 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 800aca8:	4b44      	ldr	r3, [pc, #272]	; (800adbc <DMA_DeInit+0x154>)
 800acaa:	223d      	movs	r2, #61	; 0x3d
 800acac:	609a      	str	r2, [r3, #8]
 800acae:	e07e      	b.n	800adae <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 800acb0:	687a      	ldr	r2, [r7, #4]
 800acb2:	4b43      	ldr	r3, [pc, #268]	; (800adc0 <DMA_DeInit+0x158>)
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d104      	bne.n	800acc2 <DMA_DeInit+0x5a>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 800acb8:	4b40      	ldr	r3, [pc, #256]	; (800adbc <DMA_DeInit+0x154>)
 800acba:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800acbe:	609a      	str	r2, [r3, #8]
 800acc0:	e075      	b.n	800adae <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 800acc2:	687a      	ldr	r2, [r7, #4]
 800acc4:	4b3f      	ldr	r3, [pc, #252]	; (800adc4 <DMA_DeInit+0x15c>)
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d104      	bne.n	800acd4 <DMA_DeInit+0x6c>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 800acca:	4b3c      	ldr	r3, [pc, #240]	; (800adbc <DMA_DeInit+0x154>)
 800accc:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 800acd0:	609a      	str	r2, [r3, #8]
 800acd2:	e06c      	b.n	800adae <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 800acd4:	687a      	ldr	r2, [r7, #4]
 800acd6:	4b3c      	ldr	r3, [pc, #240]	; (800adc8 <DMA_DeInit+0x160>)
 800acd8:	429a      	cmp	r2, r3
 800acda:	d104      	bne.n	800ace6 <DMA_DeInit+0x7e>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 800acdc:	4b37      	ldr	r3, [pc, #220]	; (800adbc <DMA_DeInit+0x154>)
 800acde:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800ace2:	609a      	str	r2, [r3, #8]
 800ace4:	e063      	b.n	800adae <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 800ace6:	687a      	ldr	r2, [r7, #4]
 800ace8:	4b38      	ldr	r3, [pc, #224]	; (800adcc <DMA_DeInit+0x164>)
 800acea:	429a      	cmp	r2, r3
 800acec:	d103      	bne.n	800acf6 <DMA_DeInit+0x8e>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 800acee:	4b33      	ldr	r3, [pc, #204]	; (800adbc <DMA_DeInit+0x154>)
 800acf0:	4a37      	ldr	r2, [pc, #220]	; (800add0 <DMA_DeInit+0x168>)
 800acf2:	60da      	str	r2, [r3, #12]
 800acf4:	e05b      	b.n	800adae <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 800acf6:	687a      	ldr	r2, [r7, #4]
 800acf8:	4b36      	ldr	r3, [pc, #216]	; (800add4 <DMA_DeInit+0x16c>)
 800acfa:	429a      	cmp	r2, r3
 800acfc:	d103      	bne.n	800ad06 <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 800acfe:	4b2f      	ldr	r3, [pc, #188]	; (800adbc <DMA_DeInit+0x154>)
 800ad00:	4a35      	ldr	r2, [pc, #212]	; (800add8 <DMA_DeInit+0x170>)
 800ad02:	60da      	str	r2, [r3, #12]
 800ad04:	e053      	b.n	800adae <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 800ad06:	687a      	ldr	r2, [r7, #4]
 800ad08:	4b34      	ldr	r3, [pc, #208]	; (800addc <DMA_DeInit+0x174>)
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	d103      	bne.n	800ad16 <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 800ad0e:	4b2b      	ldr	r3, [pc, #172]	; (800adbc <DMA_DeInit+0x154>)
 800ad10:	4a33      	ldr	r2, [pc, #204]	; (800ade0 <DMA_DeInit+0x178>)
 800ad12:	60da      	str	r2, [r3, #12]
 800ad14:	e04b      	b.n	800adae <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	4b32      	ldr	r3, [pc, #200]	; (800ade4 <DMA_DeInit+0x17c>)
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	d104      	bne.n	800ad28 <DMA_DeInit+0xc0>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 800ad1e:	4b27      	ldr	r3, [pc, #156]	; (800adbc <DMA_DeInit+0x154>)
 800ad20:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 800ad24:	60da      	str	r2, [r3, #12]
 800ad26:	e042      	b.n	800adae <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 800ad28:	687a      	ldr	r2, [r7, #4]
 800ad2a:	4b2f      	ldr	r3, [pc, #188]	; (800ade8 <DMA_DeInit+0x180>)
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d103      	bne.n	800ad38 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 800ad30:	4b2e      	ldr	r3, [pc, #184]	; (800adec <DMA_DeInit+0x184>)
 800ad32:	223d      	movs	r2, #61	; 0x3d
 800ad34:	609a      	str	r2, [r3, #8]
 800ad36:	e03a      	b.n	800adae <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 800ad38:	687a      	ldr	r2, [r7, #4]
 800ad3a:	4b2d      	ldr	r3, [pc, #180]	; (800adf0 <DMA_DeInit+0x188>)
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d104      	bne.n	800ad4a <DMA_DeInit+0xe2>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 800ad40:	4b2a      	ldr	r3, [pc, #168]	; (800adec <DMA_DeInit+0x184>)
 800ad42:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800ad46:	609a      	str	r2, [r3, #8]
 800ad48:	e031      	b.n	800adae <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 800ad4a:	687a      	ldr	r2, [r7, #4]
 800ad4c:	4b29      	ldr	r3, [pc, #164]	; (800adf4 <DMA_DeInit+0x18c>)
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d104      	bne.n	800ad5c <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 800ad52:	4b26      	ldr	r3, [pc, #152]	; (800adec <DMA_DeInit+0x184>)
 800ad54:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 800ad58:	609a      	str	r2, [r3, #8]
 800ad5a:	e028      	b.n	800adae <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 800ad5c:	687a      	ldr	r2, [r7, #4]
 800ad5e:	4b26      	ldr	r3, [pc, #152]	; (800adf8 <DMA_DeInit+0x190>)
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d104      	bne.n	800ad6e <DMA_DeInit+0x106>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 800ad64:	4b21      	ldr	r3, [pc, #132]	; (800adec <DMA_DeInit+0x184>)
 800ad66:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800ad6a:	609a      	str	r2, [r3, #8]
 800ad6c:	e01f      	b.n	800adae <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 800ad6e:	687a      	ldr	r2, [r7, #4]
 800ad70:	4b22      	ldr	r3, [pc, #136]	; (800adfc <DMA_DeInit+0x194>)
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d103      	bne.n	800ad7e <DMA_DeInit+0x116>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 800ad76:	4b1d      	ldr	r3, [pc, #116]	; (800adec <DMA_DeInit+0x184>)
 800ad78:	4a15      	ldr	r2, [pc, #84]	; (800add0 <DMA_DeInit+0x168>)
 800ad7a:	60da      	str	r2, [r3, #12]
 800ad7c:	e017      	b.n	800adae <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 800ad7e:	687a      	ldr	r2, [r7, #4]
 800ad80:	4b1f      	ldr	r3, [pc, #124]	; (800ae00 <DMA_DeInit+0x198>)
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d103      	bne.n	800ad8e <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 800ad86:	4b19      	ldr	r3, [pc, #100]	; (800adec <DMA_DeInit+0x184>)
 800ad88:	4a13      	ldr	r2, [pc, #76]	; (800add8 <DMA_DeInit+0x170>)
 800ad8a:	60da      	str	r2, [r3, #12]
 800ad8c:	e00f      	b.n	800adae <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 800ad8e:	687a      	ldr	r2, [r7, #4]
 800ad90:	4b1c      	ldr	r3, [pc, #112]	; (800ae04 <DMA_DeInit+0x19c>)
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d103      	bne.n	800ad9e <DMA_DeInit+0x136>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 800ad96:	4b15      	ldr	r3, [pc, #84]	; (800adec <DMA_DeInit+0x184>)
 800ad98:	4a11      	ldr	r2, [pc, #68]	; (800ade0 <DMA_DeInit+0x178>)
 800ad9a:	60da      	str	r2, [r3, #12]
 800ad9c:	e007      	b.n	800adae <DMA_DeInit+0x146>
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	4b19      	ldr	r3, [pc, #100]	; (800ae08 <DMA_DeInit+0x1a0>)
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d103      	bne.n	800adae <DMA_DeInit+0x146>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 800ada6:	4b11      	ldr	r3, [pc, #68]	; (800adec <DMA_DeInit+0x184>)
 800ada8:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 800adac:	60da      	str	r2, [r3, #12]
    }
  }
}
 800adae:	370c      	adds	r7, #12
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr
 800adb8:	40026010 	.word	0x40026010
 800adbc:	40026000 	.word	0x40026000
 800adc0:	40026028 	.word	0x40026028
 800adc4:	40026040 	.word	0x40026040
 800adc8:	40026058 	.word	0x40026058
 800adcc:	40026070 	.word	0x40026070
 800add0:	2000003d 	.word	0x2000003d
 800add4:	40026088 	.word	0x40026088
 800add8:	20000f40 	.word	0x20000f40
 800addc:	400260a0 	.word	0x400260a0
 800ade0:	203d0000 	.word	0x203d0000
 800ade4:	400260b8 	.word	0x400260b8
 800ade8:	40026410 	.word	0x40026410
 800adec:	40026400 	.word	0x40026400
 800adf0:	40026428 	.word	0x40026428
 800adf4:	40026440 	.word	0x40026440
 800adf8:	40026458 	.word	0x40026458
 800adfc:	40026470 	.word	0x40026470
 800ae00:	40026488 	.word	0x40026488
 800ae04:	400264a0 	.word	0x400264a0
 800ae08:	400264b8 	.word	0x400264b8

0800ae0c <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b085      	sub	sp, #20
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ae16:	2300      	movs	r3, #0
 800ae18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800ae20:	68fa      	ldr	r2, [r7, #12]
 800ae22:	4b24      	ldr	r3, [pc, #144]	; (800aeb4 <DMA_Init+0xa8>)
 800ae24:	4013      	ands	r3, r2
 800ae26:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	681a      	ldr	r2, [r3, #0]
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	68db      	ldr	r3, [r3, #12]
 800ae30:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800ae36:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	699b      	ldr	r3, [r3, #24]
 800ae3c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800ae42:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	6a1b      	ldr	r3, [r3, #32]
 800ae48:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800ae4e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae54:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800ae5a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae60:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800ae62:	68fa      	ldr	r2, [r7, #12]
 800ae64:	4313      	orrs	r3, r2
 800ae66:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	68fa      	ldr	r2, [r7, #12]
 800ae6c:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	695b      	ldr	r3, [r3, #20]
 800ae72:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f023 0307 	bic.w	r3, r3, #7
 800ae7a:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae84:	4313      	orrs	r3, r2
 800ae86:	68fa      	ldr	r2, [r7, #12]
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	68fa      	ldr	r2, [r7, #12]
 800ae90:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	691a      	ldr	r2, [r3, #16]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	685a      	ldr	r2, [r3, #4]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	689a      	ldr	r2, [r3, #8]
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	60da      	str	r2, [r3, #12]
}
 800aeaa:	3714      	adds	r7, #20
 800aeac:	46bd      	mov	sp, r7
 800aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb2:	4770      	bx	lr
 800aeb4:	f01c803f 	.word	0xf01c803f

0800aeb8 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b083      	sub	sp, #12
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2200      	movs	r2, #0
 800aec4:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2200      	movs	r2, #0
 800aeca:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2200      	movs	r2, #0
 800aed0:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2200      	movs	r2, #0
 800aed6:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2200      	movs	r2, #0
 800aedc:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2200      	movs	r2, #0
 800aee2:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2200      	movs	r2, #0
 800aee8:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2200      	movs	r2, #0
 800aeee:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2200      	movs	r2, #0
 800aef4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2200      	movs	r2, #0
 800aefa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2200      	movs	r2, #0
 800af00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2200      	movs	r2, #0
 800af06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2200      	movs	r2, #0
 800af0c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2200      	movs	r2, #0
 800af12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2200      	movs	r2, #0
 800af18:	639a      	str	r2, [r3, #56]	; 0x38
}
 800af1a:	370c      	adds	r7, #12
 800af1c:	46bd      	mov	sp, r7
 800af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af22:	4770      	bx	lr

0800af24 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 800af24:	b480      	push	{r7}
 800af26:	b083      	sub	sp, #12
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	460b      	mov	r3, r1
 800af2e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800af30:	78fb      	ldrb	r3, [r7, #3]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d006      	beq.n	800af44 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f043 0201 	orr.w	r2, r3, #1
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	601a      	str	r2, [r3, #0]
 800af42:	e005      	b.n	800af50 <DMA_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f023 0201 	bic.w	r2, r3, #1
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	601a      	str	r2, [r3, #0]
  }
}
 800af50:	370c      	adds	r7, #12
 800af52:	46bd      	mov	sp, r7
 800af54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af58:	4770      	bx	lr
 800af5a:	bf00      	nop

0800af5c <DMA_PeriphIncOffsetSizeConfig>:
  *            @arg DMA_PINCOS_WordAligned: Peripheral address increment offset is 
  *                                         fixed to 4 (32-bit aligned addresses). 
  * @retval None
  */
void DMA_PeriphIncOffsetSizeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_Pincos)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b083      	sub	sp, #12
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
 800af64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d006      	beq.n	800af7a <DMA_PeriphIncOffsetSizeConfig+0x1e>
  {
    /* Configure DMA_SxCR_PINCOS bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	601a      	str	r2, [r3, #0]
 800af78:	e005      	b.n	800af86 <DMA_PeriphIncOffsetSizeConfig+0x2a>
  }
  else
  {
    /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	601a      	str	r2, [r3, #0]
  }
}
 800af86:	370c      	adds	r7, #12
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr

0800af90 <DMA_FlowControllerConfig>:
  *            @arg DMA_FlowCtrl_Peripheral: DMAy_Streamx transactions flow controller 
  *                                          is the peripheral.    
  * @retval None
  */
void DMA_FlowControllerConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FlowCtrl)
{
 800af90:	b480      	push	{r7}
 800af92:	b083      	sub	sp, #12
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d006      	beq.n	800afae <DMA_FlowControllerConfig+0x1e>
  {
    /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f043 0220 	orr.w	r2, r3, #32
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	601a      	str	r2, [r3, #0]
 800afac:	e005      	b.n	800afba <DMA_FlowControllerConfig+0x2a>
  }
  else
  {
    /* Clear the PFCTRL bit: Memory is the flow controller */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f023 0220 	bic.w	r2, r3, #32
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	601a      	str	r2, [r3, #0]
  }
}
 800afba:	370c      	adds	r7, #12
 800afbc:	46bd      	mov	sp, r7
 800afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc2:	4770      	bx	lr

0800afc4 <DMA_SetCurrDataCounter>:
  *         DMAy_SxPAR register is considered as Peripheral.
  *      
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b083      	sub	sp, #12
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	460b      	mov	r3, r1
 800afce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Write the number of data units to be transferred */
  DMAy_Streamx->NDTR = (uint16_t)Counter;
 800afd0:	887a      	ldrh	r2, [r7, #2]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	605a      	str	r2, [r3, #4]
}
 800afd6:	370c      	adds	r7, #12
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr

0800afe0 <DMA_GetCurrDataCounter>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b083      	sub	sp, #12
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	b29b      	uxth	r3, r3
}
 800afee:	4618      	mov	r0, r3
 800aff0:	370c      	adds	r7, #12
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr
 800affa:	bf00      	nop

0800affc <DMA_DoubleBufferModeConfig>:
  *   
  * @retval None
  */
void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
                                uint32_t DMA_CurrentMemory)
{  
 800affc:	b480      	push	{r7}
 800affe:	b085      	sub	sp, #20
 800b000:	af00      	add	r7, sp, #0
 800b002:	60f8      	str	r0, [r7, #12]
 800b004:	60b9      	str	r1, [r7, #8]
 800b006:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d006      	beq.n	800b01c <DMA_DoubleBufferModeConfig+0x20>
  {
    /* Set Memory 1 as current memory address */
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	601a      	str	r2, [r3, #0]
 800b01a:	e005      	b.n	800b028 <DMA_DoubleBufferModeConfig+0x2c>
  }
  else
  {
    /* Set Memory 0 as current memory address */
    DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	601a      	str	r2, [r3, #0]
  }

  /* Write to DMAy Streamx M1AR */
  DMAy_Streamx->M1AR = Memory1BaseAddr;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	68ba      	ldr	r2, [r7, #8]
 800b02c:	611a      	str	r2, [r3, #16]
}
 800b02e:	3714      	adds	r7, #20
 800b030:	46bd      	mov	sp, r7
 800b032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b036:	4770      	bx	lr

0800b038 <DMA_DoubleBufferModeCmd>:
  * @param  NewState: new state of the DMAy Streamx double buffer mode. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{  
 800b038:	b480      	push	{r7}
 800b03a:	b083      	sub	sp, #12
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	460b      	mov	r3, r1
 800b042:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
 800b044:	78fb      	ldrb	r3, [r7, #3]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d006      	beq.n	800b058 <DMA_DoubleBufferModeCmd+0x20>
  {
    /* Enable the Double buffer mode */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	601a      	str	r2, [r3, #0]
 800b056:	e005      	b.n	800b064 <DMA_DoubleBufferModeCmd+0x2c>
  }
  else
  {
    /* Disable the Double buffer mode */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	601a      	str	r2, [r3, #0]
  }
}
 800b064:	370c      	adds	r7, #12
 800b066:	46bd      	mov	sp, r7
 800b068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06c:	4770      	bx	lr
 800b06e:	bf00      	nop

0800b070 <DMA_MemoryTargetConfig>:
  *  
  * @retval None
  */
void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
                           uint32_t DMA_MemoryTarget)
{
 800b070:	b480      	push	{r7}
 800b072:	b085      	sub	sp, #20
 800b074:	af00      	add	r7, sp, #0
 800b076:	60f8      	str	r0, [r7, #12]
 800b078:	60b9      	str	r1, [r7, #8]
 800b07a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
    
  /* Check the Memory target to be configured */
  if (DMA_MemoryTarget != DMA_Memory_0)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d003      	beq.n	800b08a <DMA_MemoryTargetConfig+0x1a>
  {
    /* Write to DMAy Streamx M1AR */
    DMAy_Streamx->M1AR = MemoryBaseAddr;    
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	68ba      	ldr	r2, [r7, #8]
 800b086:	611a      	str	r2, [r3, #16]
 800b088:	e002      	b.n	800b090 <DMA_MemoryTargetConfig+0x20>
  }  
  else
  {
    /* Write to DMAy Streamx M0AR */
    DMAy_Streamx->M0AR = MemoryBaseAddr;  
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	68ba      	ldr	r2, [r7, #8]
 800b08e:	60da      	str	r2, [r3, #12]
  }
}
 800b090:	3714      	adds	r7, #20
 800b092:	46bd      	mov	sp, r7
 800b094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b098:	4770      	bx	lr
 800b09a:	bf00      	nop

0800b09c <DMA_GetCurrentMemoryTarget>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The memory target number: 0 for Memory0 or 1 for Memory1. 
  */
uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800b09c:	b480      	push	{r7}
 800b09e:	b085      	sub	sp, #20
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Get the current memory target */
  if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d002      	beq.n	800b0ba <DMA_GetCurrentMemoryTarget+0x1e>
  {
    /* Current memory buffer used is Memory 1 */
    tmp = 1;
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	60fb      	str	r3, [r7, #12]
 800b0b8:	e001      	b.n	800b0be <DMA_GetCurrentMemoryTarget+0x22>
  }  
  else
  {
    /* Current memory buffer used is Memory 0 */
    tmp = 0;    
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	60fb      	str	r3, [r7, #12]
  }
  return tmp;
 800b0be:	68fb      	ldr	r3, [r7, #12]
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3714      	adds	r7, #20
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ca:	4770      	bx	lr

0800b0cc <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b085      	sub	sp, #20
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f003 0301 	and.w	r3, r3, #1
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d002      	beq.n	800b0ea <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	73fb      	strb	r3, [r7, #15]
 800b0e8:	e001      	b.n	800b0ee <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800b0ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3714      	adds	r7, #20
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr

0800b0fc <DMA_GetFIFOStatus>:
  *           - DMA_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
  *           - DMA_FIFOStatus_Empty: when FIFO is empty
  *           - DMA_FIFOStatus_Full: when FIFO is full
  */
uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b085      	sub	sp, #20
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800b104:	2300      	movs	r3, #0
 800b106:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  
  /* Get the FIFO level bits */
  tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	695b      	ldr	r3, [r3, #20]
 800b10c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b110:	60fb      	str	r3, [r7, #12]
  
  return tmpreg;
 800b112:	68fb      	ldr	r3, [r7, #12]
}
 800b114:	4618      	mov	r0, r3
 800b116:	3714      	adds	r7, #20
 800b118:	46bd      	mov	sp, r7
 800b11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11e:	4770      	bx	lr

0800b120 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 800b120:	b480      	push	{r7}
 800b122:	b087      	sub	sp, #28
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800b12a:	2300      	movs	r3, #0
 800b12c:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 800b12e:	2300      	movs	r3, #0
 800b130:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	4b15      	ldr	r3, [pc, #84]	; (800b18c <DMA_GetFlagStatus+0x6c>)
 800b136:	429a      	cmp	r2, r3
 800b138:	d802      	bhi.n	800b140 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800b13a:	4b15      	ldr	r3, [pc, #84]	; (800b190 <DMA_GetFlagStatus+0x70>)
 800b13c:	613b      	str	r3, [r7, #16]
 800b13e:	e001      	b.n	800b144 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800b140:	4b14      	ldr	r3, [pc, #80]	; (800b194 <DMA_GetFlagStatus+0x74>)
 800b142:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d003      	beq.n	800b156 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	60fb      	str	r3, [r7, #12]
 800b154:	e002      	b.n	800b15c <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800b162:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800b166:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 800b168:	68fa      	ldr	r2, [r7, #12]
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	4013      	ands	r3, r2
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d002      	beq.n	800b178 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800b172:	2301      	movs	r3, #1
 800b174:	75fb      	strb	r3, [r7, #23]
 800b176:	e001      	b.n	800b17c <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 800b178:	2300      	movs	r3, #0
 800b17a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 800b17c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b17e:	4618      	mov	r0, r3
 800b180:	371c      	adds	r7, #28
 800b182:	46bd      	mov	sp, r7
 800b184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b188:	4770      	bx	lr
 800b18a:	bf00      	nop
 800b18c:	4002640f 	.word	0x4002640f
 800b190:	40026000 	.word	0x40026000
 800b194:	40026400 	.word	0x40026400

0800b198 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 800b198:	b480      	push	{r7}
 800b19a:	b085      	sub	sp, #20
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800b1a2:	687a      	ldr	r2, [r7, #4]
 800b1a4:	4b10      	ldr	r3, [pc, #64]	; (800b1e8 <DMA_ClearFlag+0x50>)
 800b1a6:	429a      	cmp	r2, r3
 800b1a8:	d802      	bhi.n	800b1b0 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800b1aa:	4b10      	ldr	r3, [pc, #64]	; (800b1ec <DMA_ClearFlag+0x54>)
 800b1ac:	60fb      	str	r3, [r7, #12]
 800b1ae:	e001      	b.n	800b1b4 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800b1b0:	4b0f      	ldr	r3, [pc, #60]	; (800b1f0 <DMA_ClearFlag+0x58>)
 800b1b2:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d007      	beq.n	800b1ce <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800b1c4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800b1c8:	68fa      	ldr	r2, [r7, #12]
 800b1ca:	60d3      	str	r3, [r2, #12]
 800b1cc:	e006      	b.n	800b1dc <DMA_ClearFlag+0x44>
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800b1d4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800b1d8:	68fa      	ldr	r2, [r7, #12]
 800b1da:	6093      	str	r3, [r2, #8]
  }    
}
 800b1dc:	3714      	adds	r7, #20
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e4:	4770      	bx	lr
 800b1e6:	bf00      	nop
 800b1e8:	4002640f 	.word	0x4002640f
 800b1ec:	40026000 	.word	0x40026000
 800b1f0:	40026400 	.word	0x40026400

0800b1f4 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b085      	sub	sp, #20
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	60f8      	str	r0, [r7, #12]
 800b1fc:	60b9      	str	r1, [r7, #8]
 800b1fe:	4613      	mov	r3, r2
 800b200:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d00f      	beq.n	800b22c <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 800b20c:	79fb      	ldrb	r3, [r7, #7]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d006      	beq.n	800b220 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	695b      	ldr	r3, [r3, #20]
 800b216:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	615a      	str	r2, [r3, #20]
 800b21e:	e005      	b.n	800b22c <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	695b      	ldr	r3, [r3, #20]
 800b224:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	2b80      	cmp	r3, #128	; 0x80
 800b230:	d014      	beq.n	800b25c <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 800b232:	79fb      	ldrb	r3, [r7, #7]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d008      	beq.n	800b24a <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681a      	ldr	r2, [r3, #0]
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	f003 031e 	and.w	r3, r3, #30
 800b242:	431a      	orrs	r2, r3
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	601a      	str	r2, [r3, #0]
 800b248:	e008      	b.n	800b25c <DMA_ITConfig+0x68>
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681a      	ldr	r2, [r3, #0]
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	f003 031e 	and.w	r3, r3, #30
 800b254:	43db      	mvns	r3, r3
 800b256:	401a      	ands	r2, r3
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	601a      	str	r2, [r3, #0]
    }    
  }
}
 800b25c:	3714      	adds	r7, #20
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr
 800b266:	bf00      	nop

0800b268 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 800b268:	b480      	push	{r7}
 800b26a:	b087      	sub	sp, #28
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800b272:	2300      	movs	r3, #0
 800b274:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 800b276:	2300      	movs	r3, #0
 800b278:	60fb      	str	r3, [r7, #12]
 800b27a:	2300      	movs	r3, #0
 800b27c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800b27e:	687a      	ldr	r2, [r7, #4]
 800b280:	4b22      	ldr	r3, [pc, #136]	; (800b30c <DMA_GetITStatus+0xa4>)
 800b282:	429a      	cmp	r2, r3
 800b284:	d802      	bhi.n	800b28c <DMA_GetITStatus+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800b286:	4b22      	ldr	r3, [pc, #136]	; (800b310 <DMA_GetITStatus+0xa8>)
 800b288:	613b      	str	r3, [r7, #16]
 800b28a:	e001      	b.n	800b290 <DMA_GetITStatus+0x28>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800b28c:	4b21      	ldr	r3, [pc, #132]	; (800b314 <DMA_GetITStatus+0xac>)
 800b28e:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800b296:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d00a      	beq.n	800b2b4 <DMA_GetITStatus+0x4c>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	0adb      	lsrs	r3, r3, #11
 800b2a2:	f003 031e 	and.w	r3, r3, #30
 800b2a6:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681a      	ldr	r2, [r3, #0]
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	4013      	ands	r3, r2
 800b2b0:	60bb      	str	r3, [r7, #8]
 800b2b2:	e004      	b.n	800b2be <DMA_GetITStatus+0x56>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	695b      	ldr	r3, [r3, #20]
 800b2b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2bc:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d003      	beq.n	800b2d0 <DMA_GetITStatus+0x68>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	685b      	ldr	r3, [r3, #4]
 800b2cc:	60fb      	str	r3, [r7, #12]
 800b2ce:	e002      	b.n	800b2d6 <DMA_GetITStatus+0x6e>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800b2dc:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800b2e0:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800b2e2:	68fa      	ldr	r2, [r7, #12]
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	4013      	ands	r3, r2
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d005      	beq.n	800b2f8 <DMA_GetITStatus+0x90>
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d002      	beq.n	800b2f8 <DMA_GetITStatus+0x90>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	75fb      	strb	r3, [r7, #23]
 800b2f6:	e001      	b.n	800b2fc <DMA_GetITStatus+0x94>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 800b2fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	371c      	adds	r7, #28
 800b302:	46bd      	mov	sp, r7
 800b304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b308:	4770      	bx	lr
 800b30a:	bf00      	nop
 800b30c:	4002640f 	.word	0x4002640f
 800b310:	40026000 	.word	0x40026000
 800b314:	40026400 	.word	0x40026400

0800b318 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 800b318:	b480      	push	{r7}
 800b31a:	b085      	sub	sp, #20
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800b322:	687a      	ldr	r2, [r7, #4]
 800b324:	4b10      	ldr	r3, [pc, #64]	; (800b368 <DMA_ClearITPendingBit+0x50>)
 800b326:	429a      	cmp	r2, r3
 800b328:	d802      	bhi.n	800b330 <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800b32a:	4b10      	ldr	r3, [pc, #64]	; (800b36c <DMA_ClearITPendingBit+0x54>)
 800b32c:	60fb      	str	r3, [r7, #12]
 800b32e:	e001      	b.n	800b334 <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800b330:	4b0f      	ldr	r3, [pc, #60]	; (800b370 <DMA_ClearITPendingBit+0x58>)
 800b332:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d007      	beq.n	800b34e <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800b344:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800b348:	68fa      	ldr	r2, [r7, #12]
 800b34a:	60d3      	str	r3, [r2, #12]
 800b34c:	e006      	b.n	800b35c <DMA_ClearITPendingBit+0x44>
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800b354:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800b358:	68fa      	ldr	r2, [r7, #12]
 800b35a:	6093      	str	r3, [r2, #8]
  }   
}
 800b35c:	3714      	adds	r7, #20
 800b35e:	46bd      	mov	sp, r7
 800b360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b364:	4770      	bx	lr
 800b366:	bf00      	nop
 800b368:	4002640f 	.word	0x4002640f
 800b36c:	40026000 	.word	0x40026000
 800b370:	40026400 	.word	0x40026400

0800b374 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
 800b374:	b480      	push	{r7}
 800b376:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
 800b378:	4b09      	ldr	r3, [pc, #36]	; (800b3a0 <EXTI_DeInit+0x2c>)
 800b37a:	2200      	movs	r2, #0
 800b37c:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 800b37e:	4b08      	ldr	r3, [pc, #32]	; (800b3a0 <EXTI_DeInit+0x2c>)
 800b380:	2200      	movs	r2, #0
 800b382:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 800b384:	4b06      	ldr	r3, [pc, #24]	; (800b3a0 <EXTI_DeInit+0x2c>)
 800b386:	2200      	movs	r2, #0
 800b388:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 800b38a:	4b05      	ldr	r3, [pc, #20]	; (800b3a0 <EXTI_DeInit+0x2c>)
 800b38c:	2200      	movs	r2, #0
 800b38e:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 800b390:	4b03      	ldr	r3, [pc, #12]	; (800b3a0 <EXTI_DeInit+0x2c>)
 800b392:	4a04      	ldr	r2, [pc, #16]	; (800b3a4 <EXTI_DeInit+0x30>)
 800b394:	615a      	str	r2, [r3, #20]
}
 800b396:	46bd      	mov	sp, r7
 800b398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39c:	4770      	bx	lr
 800b39e:	bf00      	nop
 800b3a0:	40013c00 	.word	0x40013c00
 800b3a4:	007fffff 	.word	0x007fffff

0800b3a8 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b085      	sub	sp, #20
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 800b3b4:	4b32      	ldr	r3, [pc, #200]	; (800b480 <EXTI_Init+0xd8>)
 800b3b6:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	799b      	ldrb	r3, [r3, #6]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d04d      	beq.n	800b45c <EXTI_Init+0xb4>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 800b3c0:	4b2f      	ldr	r3, [pc, #188]	; (800b480 <EXTI_Init+0xd8>)
 800b3c2:	4a2f      	ldr	r2, [pc, #188]	; (800b480 <EXTI_Init+0xd8>)
 800b3c4:	6811      	ldr	r1, [r2, #0]
 800b3c6:	687a      	ldr	r2, [r7, #4]
 800b3c8:	6812      	ldr	r2, [r2, #0]
 800b3ca:	43d2      	mvns	r2, r2
 800b3cc:	400a      	ands	r2, r1
 800b3ce:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 800b3d0:	4b2b      	ldr	r3, [pc, #172]	; (800b480 <EXTI_Init+0xd8>)
 800b3d2:	4a2b      	ldr	r2, [pc, #172]	; (800b480 <EXTI_Init+0xd8>)
 800b3d4:	6851      	ldr	r1, [r2, #4]
 800b3d6:	687a      	ldr	r2, [r7, #4]
 800b3d8:	6812      	ldr	r2, [r2, #0]
 800b3da:	43d2      	mvns	r2, r2
 800b3dc:	400a      	ands	r2, r1
 800b3de:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	791b      	ldrb	r3, [r3, #4]
 800b3e4:	68fa      	ldr	r2, [r7, #12]
 800b3e6:	4413      	add	r3, r2
 800b3e8:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	68fa      	ldr	r2, [r7, #12]
 800b3ee:	6811      	ldr	r1, [r2, #0]
 800b3f0:	687a      	ldr	r2, [r7, #4]
 800b3f2:	6812      	ldr	r2, [r2, #0]
 800b3f4:	430a      	orrs	r2, r1
 800b3f6:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800b3f8:	4b21      	ldr	r3, [pc, #132]	; (800b480 <EXTI_Init+0xd8>)
 800b3fa:	4a21      	ldr	r2, [pc, #132]	; (800b480 <EXTI_Init+0xd8>)
 800b3fc:	6891      	ldr	r1, [r2, #8]
 800b3fe:	687a      	ldr	r2, [r7, #4]
 800b400:	6812      	ldr	r2, [r2, #0]
 800b402:	43d2      	mvns	r2, r2
 800b404:	400a      	ands	r2, r1
 800b406:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800b408:	4b1d      	ldr	r3, [pc, #116]	; (800b480 <EXTI_Init+0xd8>)
 800b40a:	4a1d      	ldr	r2, [pc, #116]	; (800b480 <EXTI_Init+0xd8>)
 800b40c:	68d1      	ldr	r1, [r2, #12]
 800b40e:	687a      	ldr	r2, [r7, #4]
 800b410:	6812      	ldr	r2, [r2, #0]
 800b412:	43d2      	mvns	r2, r2
 800b414:	400a      	ands	r2, r1
 800b416:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	795b      	ldrb	r3, [r3, #5]
 800b41c:	2b10      	cmp	r3, #16
 800b41e:	d10e      	bne.n	800b43e <EXTI_Init+0x96>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 800b420:	4b17      	ldr	r3, [pc, #92]	; (800b480 <EXTI_Init+0xd8>)
 800b422:	4a17      	ldr	r2, [pc, #92]	; (800b480 <EXTI_Init+0xd8>)
 800b424:	6891      	ldr	r1, [r2, #8]
 800b426:	687a      	ldr	r2, [r7, #4]
 800b428:	6812      	ldr	r2, [r2, #0]
 800b42a:	430a      	orrs	r2, r1
 800b42c:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 800b42e:	4b14      	ldr	r3, [pc, #80]	; (800b480 <EXTI_Init+0xd8>)
 800b430:	4a13      	ldr	r2, [pc, #76]	; (800b480 <EXTI_Init+0xd8>)
 800b432:	68d1      	ldr	r1, [r2, #12]
 800b434:	687a      	ldr	r2, [r7, #4]
 800b436:	6812      	ldr	r2, [r2, #0]
 800b438:	430a      	orrs	r2, r1
 800b43a:	60da      	str	r2, [r3, #12]
 800b43c:	e01b      	b.n	800b476 <EXTI_Init+0xce>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 800b43e:	4b10      	ldr	r3, [pc, #64]	; (800b480 <EXTI_Init+0xd8>)
 800b440:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	795b      	ldrb	r3, [r3, #5]
 800b446:	68fa      	ldr	r2, [r7, #12]
 800b448:	4413      	add	r3, r2
 800b44a:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	68fa      	ldr	r2, [r7, #12]
 800b450:	6811      	ldr	r1, [r2, #0]
 800b452:	687a      	ldr	r2, [r7, #4]
 800b454:	6812      	ldr	r2, [r2, #0]
 800b456:	430a      	orrs	r2, r1
 800b458:	601a      	str	r2, [r3, #0]
 800b45a:	e00c      	b.n	800b476 <EXTI_Init+0xce>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	791b      	ldrb	r3, [r3, #4]
 800b460:	68fa      	ldr	r2, [r7, #12]
 800b462:	4413      	add	r3, r2
 800b464:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	68fa      	ldr	r2, [r7, #12]
 800b46a:	6811      	ldr	r1, [r2, #0]
 800b46c:	687a      	ldr	r2, [r7, #4]
 800b46e:	6812      	ldr	r2, [r2, #0]
 800b470:	43d2      	mvns	r2, r2
 800b472:	400a      	ands	r2, r1
 800b474:	601a      	str	r2, [r3, #0]
  }
}
 800b476:	3714      	adds	r7, #20
 800b478:	46bd      	mov	sp, r7
 800b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47e:	4770      	bx	lr
 800b480:	40013c00 	.word	0x40013c00

0800b484 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800b484:	b480      	push	{r7}
 800b486:	b083      	sub	sp, #12
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2200      	movs	r2, #0
 800b490:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2200      	movs	r2, #0
 800b496:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	220c      	movs	r2, #12
 800b49c:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	719a      	strb	r2, [r3, #6]
}
 800b4a4:	370c      	adds	r7, #12
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ac:	4770      	bx	lr
 800b4ae:	bf00      	nop

0800b4b0 <EXTI_GenerateSWInterrupt>:
  *         will be generated.
  *         This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b083      	sub	sp, #12
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 800b4b8:	4b05      	ldr	r3, [pc, #20]	; (800b4d0 <EXTI_GenerateSWInterrupt+0x20>)
 800b4ba:	4a05      	ldr	r2, [pc, #20]	; (800b4d0 <EXTI_GenerateSWInterrupt+0x20>)
 800b4bc:	6911      	ldr	r1, [r2, #16]
 800b4be:	687a      	ldr	r2, [r7, #4]
 800b4c0:	430a      	orrs	r2, r1
 800b4c2:	611a      	str	r2, [r3, #16]
}
 800b4c4:	370c      	adds	r7, #12
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4cc:	4770      	bx	lr
 800b4ce:	bf00      	nop
 800b4d0:	40013c00 	.word	0x40013c00

0800b4d4 <EXTI_GetFlagStatus>:
  * @param  EXTI_Line: specifies the EXTI line flag to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b085      	sub	sp, #20
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 800b4e0:	4b08      	ldr	r3, [pc, #32]	; (800b504 <EXTI_GetFlagStatus+0x30>)
 800b4e2:	695a      	ldr	r2, [r3, #20]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	4013      	ands	r3, r2
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d002      	beq.n	800b4f2 <EXTI_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	73fb      	strb	r3, [r7, #15]
 800b4f0:	e001      	b.n	800b4f6 <EXTI_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b4f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3714      	adds	r7, #20
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b502:	4770      	bx	lr
 800b504:	40013c00 	.word	0x40013c00

0800b508 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 800b508:	b480      	push	{r7}
 800b50a:	b083      	sub	sp, #12
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 800b510:	4b03      	ldr	r3, [pc, #12]	; (800b520 <EXTI_ClearFlag+0x18>)
 800b512:	687a      	ldr	r2, [r7, #4]
 800b514:	615a      	str	r2, [r3, #20]
}
 800b516:	370c      	adds	r7, #12
 800b518:	46bd      	mov	sp, r7
 800b51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51e:	4770      	bx	lr
 800b520:	40013c00 	.word	0x40013c00

0800b524 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 800b524:	b480      	push	{r7}
 800b526:	b085      	sub	sp, #20
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800b52c:	2300      	movs	r3, #0
 800b52e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 800b530:	4b08      	ldr	r3, [pc, #32]	; (800b554 <EXTI_GetITStatus+0x30>)
 800b532:	695a      	ldr	r2, [r3, #20]
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	4013      	ands	r3, r2
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d002      	beq.n	800b542 <EXTI_GetITStatus+0x1e>
  {
    bitstatus = SET;
 800b53c:	2301      	movs	r3, #1
 800b53e:	73fb      	strb	r3, [r7, #15]
 800b540:	e001      	b.n	800b546 <EXTI_GetITStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800b542:	2300      	movs	r3, #0
 800b544:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b546:	7bfb      	ldrb	r3, [r7, #15]
  
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3714      	adds	r7, #20
 800b54c:	46bd      	mov	sp, r7
 800b54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b552:	4770      	bx	lr
 800b554:	40013c00 	.word	0x40013c00

0800b558 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 800b558:	b480      	push	{r7}
 800b55a:	b083      	sub	sp, #12
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 800b560:	4b03      	ldr	r3, [pc, #12]	; (800b570 <EXTI_ClearITPendingBit+0x18>)
 800b562:	687a      	ldr	r2, [r7, #4]
 800b564:	615a      	str	r2, [r3, #20]
}
 800b566:	370c      	adds	r7, #12
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr
 800b570:	40013c00 	.word	0x40013c00

0800b574 <FLASH_SetLatency>:
  *       FLASH_Latency_0 and FLASH_Latency_15. 
  *         
  * @retval None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
 800b574:	b480      	push	{r7}
 800b576:	b083      	sub	sp, #12
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
  *(__IO uint8_t *)ACR_BYTE0_ADDRESS = (uint8_t)FLASH_Latency;
 800b57c:	4b04      	ldr	r3, [pc, #16]	; (800b590 <FLASH_SetLatency+0x1c>)
 800b57e:	687a      	ldr	r2, [r7, #4]
 800b580:	b2d2      	uxtb	r2, r2
 800b582:	701a      	strb	r2, [r3, #0]
}
 800b584:	370c      	adds	r7, #12
 800b586:	46bd      	mov	sp, r7
 800b588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58c:	4770      	bx	lr
 800b58e:	bf00      	nop
 800b590:	40023c00 	.word	0x40023c00

0800b594 <FLASH_PrefetchBufferCmd>:
  * @param  NewState: new state of the Prefetch Buffer.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_PrefetchBufferCmd(FunctionalState NewState)
{
 800b594:	b480      	push	{r7}
 800b596:	b083      	sub	sp, #12
 800b598:	af00      	add	r7, sp, #0
 800b59a:	4603      	mov	r3, r0
 800b59c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Enable or disable the Prefetch Buffer */
  if(NewState != DISABLE)
 800b59e:	79fb      	ldrb	r3, [r7, #7]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d006      	beq.n	800b5b2 <FLASH_PrefetchBufferCmd+0x1e>
  {
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 800b5a4:	4b08      	ldr	r3, [pc, #32]	; (800b5c8 <FLASH_PrefetchBufferCmd+0x34>)
 800b5a6:	4a08      	ldr	r2, [pc, #32]	; (800b5c8 <FLASH_PrefetchBufferCmd+0x34>)
 800b5a8:	6812      	ldr	r2, [r2, #0]
 800b5aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b5ae:	601a      	str	r2, [r3, #0]
 800b5b0:	e005      	b.n	800b5be <FLASH_PrefetchBufferCmd+0x2a>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_PRFTEN);
 800b5b2:	4b05      	ldr	r3, [pc, #20]	; (800b5c8 <FLASH_PrefetchBufferCmd+0x34>)
 800b5b4:	4a04      	ldr	r2, [pc, #16]	; (800b5c8 <FLASH_PrefetchBufferCmd+0x34>)
 800b5b6:	6812      	ldr	r2, [r2, #0]
 800b5b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b5bc:	601a      	str	r2, [r3, #0]
  }
}
 800b5be:	370c      	adds	r7, #12
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr
 800b5c8:	40023c00 	.word	0x40023c00

0800b5cc <FLASH_InstructionCacheCmd>:
  * @param  NewState: new state of the Instruction Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_InstructionCacheCmd(FunctionalState NewState)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b083      	sub	sp, #12
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 800b5d6:	79fb      	ldrb	r3, [r7, #7]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d006      	beq.n	800b5ea <FLASH_InstructionCacheCmd+0x1e>
  {
    FLASH->ACR |= FLASH_ACR_ICEN;
 800b5dc:	4b08      	ldr	r3, [pc, #32]	; (800b600 <FLASH_InstructionCacheCmd+0x34>)
 800b5de:	4a08      	ldr	r2, [pc, #32]	; (800b600 <FLASH_InstructionCacheCmd+0x34>)
 800b5e0:	6812      	ldr	r2, [r2, #0]
 800b5e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b5e6:	601a      	str	r2, [r3, #0]
 800b5e8:	e005      	b.n	800b5f6 <FLASH_InstructionCacheCmd+0x2a>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_ICEN);
 800b5ea:	4b05      	ldr	r3, [pc, #20]	; (800b600 <FLASH_InstructionCacheCmd+0x34>)
 800b5ec:	4a04      	ldr	r2, [pc, #16]	; (800b600 <FLASH_InstructionCacheCmd+0x34>)
 800b5ee:	6812      	ldr	r2, [r2, #0]
 800b5f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b5f4:	601a      	str	r2, [r3, #0]
  }
}
 800b5f6:	370c      	adds	r7, #12
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr
 800b600:	40023c00 	.word	0x40023c00

0800b604 <FLASH_DataCacheCmd>:
  * @param  NewState: new state of the Data Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_DataCacheCmd(FunctionalState NewState)
{
 800b604:	b480      	push	{r7}
 800b606:	b083      	sub	sp, #12
 800b608:	af00      	add	r7, sp, #0
 800b60a:	4603      	mov	r3, r0
 800b60c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 800b60e:	79fb      	ldrb	r3, [r7, #7]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d006      	beq.n	800b622 <FLASH_DataCacheCmd+0x1e>
  {
    FLASH->ACR |= FLASH_ACR_DCEN;
 800b614:	4b08      	ldr	r3, [pc, #32]	; (800b638 <FLASH_DataCacheCmd+0x34>)
 800b616:	4a08      	ldr	r2, [pc, #32]	; (800b638 <FLASH_DataCacheCmd+0x34>)
 800b618:	6812      	ldr	r2, [r2, #0]
 800b61a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b61e:	601a      	str	r2, [r3, #0]
 800b620:	e005      	b.n	800b62e <FLASH_DataCacheCmd+0x2a>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_DCEN);
 800b622:	4b05      	ldr	r3, [pc, #20]	; (800b638 <FLASH_DataCacheCmd+0x34>)
 800b624:	4a04      	ldr	r2, [pc, #16]	; (800b638 <FLASH_DataCacheCmd+0x34>)
 800b626:	6812      	ldr	r2, [r2, #0]
 800b628:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b62c:	601a      	str	r2, [r3, #0]
  }
}
 800b62e:	370c      	adds	r7, #12
 800b630:	46bd      	mov	sp, r7
 800b632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b636:	4770      	bx	lr
 800b638:	40023c00 	.word	0x40023c00

0800b63c <FLASH_InstructionCacheReset>:
  * @note   This function must be used only when the Instruction Cache is disabled.  
  * @param  None
  * @retval None
  */
void FLASH_InstructionCacheReset(void)
{
 800b63c:	b480      	push	{r7}
 800b63e:	af00      	add	r7, sp, #0
  FLASH->ACR |= FLASH_ACR_ICRST;
 800b640:	4b04      	ldr	r3, [pc, #16]	; (800b654 <FLASH_InstructionCacheReset+0x18>)
 800b642:	4a04      	ldr	r2, [pc, #16]	; (800b654 <FLASH_InstructionCacheReset+0x18>)
 800b644:	6812      	ldr	r2, [r2, #0]
 800b646:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b64a:	601a      	str	r2, [r3, #0]
}
 800b64c:	46bd      	mov	sp, r7
 800b64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b652:	4770      	bx	lr
 800b654:	40023c00 	.word	0x40023c00

0800b658 <FLASH_DataCacheReset>:
  * @note   This function must be used only when the Data Cache is disabled.  
  * @param  None
  * @retval None
  */
void FLASH_DataCacheReset(void)
{
 800b658:	b480      	push	{r7}
 800b65a:	af00      	add	r7, sp, #0
  FLASH->ACR |= FLASH_ACR_DCRST;
 800b65c:	4b04      	ldr	r3, [pc, #16]	; (800b670 <FLASH_DataCacheReset+0x18>)
 800b65e:	4a04      	ldr	r2, [pc, #16]	; (800b670 <FLASH_DataCacheReset+0x18>)
 800b660:	6812      	ldr	r2, [r2, #0]
 800b662:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b666:	601a      	str	r2, [r3, #0]
}
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr
 800b670:	40023c00 	.word	0x40023c00

0800b674 <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 800b674:	b480      	push	{r7}
 800b676:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 800b678:	4b06      	ldr	r3, [pc, #24]	; (800b694 <FLASH_Unlock+0x20>)
 800b67a:	691b      	ldr	r3, [r3, #16]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	da05      	bge.n	800b68c <FLASH_Unlock+0x18>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 800b680:	4b04      	ldr	r3, [pc, #16]	; (800b694 <FLASH_Unlock+0x20>)
 800b682:	4a05      	ldr	r2, [pc, #20]	; (800b698 <FLASH_Unlock+0x24>)
 800b684:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 800b686:	4b03      	ldr	r3, [pc, #12]	; (800b694 <FLASH_Unlock+0x20>)
 800b688:	4a04      	ldr	r2, [pc, #16]	; (800b69c <FLASH_Unlock+0x28>)
 800b68a:	605a      	str	r2, [r3, #4]
  }  
}
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr
 800b694:	40023c00 	.word	0x40023c00
 800b698:	45670123 	.word	0x45670123
 800b69c:	cdef89ab 	.word	0xcdef89ab

0800b6a0 <FLASH_Lock>:
  * @brief  Locks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800b6a4:	4b04      	ldr	r3, [pc, #16]	; (800b6b8 <FLASH_Lock+0x18>)
 800b6a6:	4a04      	ldr	r2, [pc, #16]	; (800b6b8 <FLASH_Lock+0x18>)
 800b6a8:	6912      	ldr	r2, [r2, #16]
 800b6aa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800b6ae:	611a      	str	r2, [r3, #16]
}
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b6:	4770      	bx	lr
 800b6b8:	40023c00 	.word	0x40023c00

0800b6bc <FLASH_EraseSector>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b084      	sub	sp, #16
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0x0;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 800b6cc:	2309      	movs	r3, #9
 800b6ce:	72fb      	strb	r3, [r7, #11]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 800b6d0:	78fb      	ldrb	r3, [r7, #3]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d102      	bne.n	800b6dc <FLASH_EraseSector+0x20>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	60fb      	str	r3, [r7, #12]
 800b6da:	e010      	b.n	800b6fe <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_2)
 800b6dc:	78fb      	ldrb	r3, [r7, #3]
 800b6de:	2b01      	cmp	r3, #1
 800b6e0:	d103      	bne.n	800b6ea <FLASH_EraseSector+0x2e>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800b6e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6e6:	60fb      	str	r3, [r7, #12]
 800b6e8:	e009      	b.n	800b6fe <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_3)
 800b6ea:	78fb      	ldrb	r3, [r7, #3]
 800b6ec:	2b02      	cmp	r3, #2
 800b6ee:	d103      	bne.n	800b6f8 <FLASH_EraseSector+0x3c>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800b6f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6f4:	60fb      	str	r3, [r7, #12]
 800b6f6:	e002      	b.n	800b6fe <FLASH_EraseSector+0x42>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800b6f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b6fc:	60fb      	str	r3, [r7, #12]
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800b6fe:	f000 fc73 	bl	800bfe8 <FLASH_WaitForLastOperation>
 800b702:	4603      	mov	r3, r0
 800b704:	72fb      	strb	r3, [r7, #11]
  
  if(status == FLASH_COMPLETE)
 800b706:	7afb      	ldrb	r3, [r7, #11]
 800b708:	2b09      	cmp	r3, #9
 800b70a:	d12f      	bne.n	800b76c <FLASH_EraseSector+0xb0>
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 800b70c:	4b1a      	ldr	r3, [pc, #104]	; (800b778 <FLASH_EraseSector+0xbc>)
 800b70e:	4a1a      	ldr	r2, [pc, #104]	; (800b778 <FLASH_EraseSector+0xbc>)
 800b710:	6912      	ldr	r2, [r2, #16]
 800b712:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b716:	611a      	str	r2, [r3, #16]
    FLASH->CR |= tmp_psize;
 800b718:	4b17      	ldr	r3, [pc, #92]	; (800b778 <FLASH_EraseSector+0xbc>)
 800b71a:	4a17      	ldr	r2, [pc, #92]	; (800b778 <FLASH_EraseSector+0xbc>)
 800b71c:	6911      	ldr	r1, [r2, #16]
 800b71e:	68fa      	ldr	r2, [r7, #12]
 800b720:	430a      	orrs	r2, r1
 800b722:	611a      	str	r2, [r3, #16]
    FLASH->CR &= SECTOR_MASK;
 800b724:	4b14      	ldr	r3, [pc, #80]	; (800b778 <FLASH_EraseSector+0xbc>)
 800b726:	4a14      	ldr	r2, [pc, #80]	; (800b778 <FLASH_EraseSector+0xbc>)
 800b728:	6912      	ldr	r2, [r2, #16]
 800b72a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800b72e:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 800b730:	4b11      	ldr	r3, [pc, #68]	; (800b778 <FLASH_EraseSector+0xbc>)
 800b732:	4a11      	ldr	r2, [pc, #68]	; (800b778 <FLASH_EraseSector+0xbc>)
 800b734:	6911      	ldr	r1, [r2, #16]
 800b736:	687a      	ldr	r2, [r7, #4]
 800b738:	430a      	orrs	r2, r1
 800b73a:	f042 0202 	orr.w	r2, r2, #2
 800b73e:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_STRT;
 800b740:	4b0d      	ldr	r3, [pc, #52]	; (800b778 <FLASH_EraseSector+0xbc>)
 800b742:	4a0d      	ldr	r2, [pc, #52]	; (800b778 <FLASH_EraseSector+0xbc>)
 800b744:	6912      	ldr	r2, [r2, #16]
 800b746:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b74a:	611a      	str	r2, [r3, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800b74c:	f000 fc4c 	bl	800bfe8 <FLASH_WaitForLastOperation>
 800b750:	4603      	mov	r3, r0
 800b752:	72fb      	strb	r3, [r7, #11]
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 800b754:	4b08      	ldr	r3, [pc, #32]	; (800b778 <FLASH_EraseSector+0xbc>)
 800b756:	4a08      	ldr	r2, [pc, #32]	; (800b778 <FLASH_EraseSector+0xbc>)
 800b758:	6912      	ldr	r2, [r2, #16]
 800b75a:	f022 0202 	bic.w	r2, r2, #2
 800b75e:	611a      	str	r2, [r3, #16]
    FLASH->CR &= SECTOR_MASK; 
 800b760:	4b05      	ldr	r3, [pc, #20]	; (800b778 <FLASH_EraseSector+0xbc>)
 800b762:	4a05      	ldr	r2, [pc, #20]	; (800b778 <FLASH_EraseSector+0xbc>)
 800b764:	6912      	ldr	r2, [r2, #16]
 800b766:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800b76a:	611a      	str	r2, [r3, #16]
  }
  /* Return the Erase Status */
  return status;
 800b76c:	7afb      	ldrb	r3, [r7, #11]
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3710      	adds	r7, #16
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}
 800b776:	bf00      	nop
 800b778:	40023c00 	.word	0x40023c00

0800b77c <FLASH_EraseAllSectors>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseAllSectors(uint8_t VoltageRange)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b084      	sub	sp, #16
 800b780:	af00      	add	r7, sp, #0
 800b782:	4603      	mov	r3, r0
 800b784:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp_psize = 0x0;
 800b786:	2300      	movs	r3, #0
 800b788:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 800b78a:	2309      	movs	r3, #9
 800b78c:	72fb      	strb	r3, [r7, #11]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800b78e:	f000 fc2b 	bl	800bfe8 <FLASH_WaitForLastOperation>
 800b792:	4603      	mov	r3, r0
 800b794:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 800b796:	79fb      	ldrb	r3, [r7, #7]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d102      	bne.n	800b7a2 <FLASH_EraseAllSectors+0x26>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800b79c:	2300      	movs	r3, #0
 800b79e:	60fb      	str	r3, [r7, #12]
 800b7a0:	e010      	b.n	800b7c4 <FLASH_EraseAllSectors+0x48>
  }
  else if(VoltageRange == VoltageRange_2)
 800b7a2:	79fb      	ldrb	r3, [r7, #7]
 800b7a4:	2b01      	cmp	r3, #1
 800b7a6:	d103      	bne.n	800b7b0 <FLASH_EraseAllSectors+0x34>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800b7a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7ac:	60fb      	str	r3, [r7, #12]
 800b7ae:	e009      	b.n	800b7c4 <FLASH_EraseAllSectors+0x48>
  }
  else if(VoltageRange == VoltageRange_3)
 800b7b0:	79fb      	ldrb	r3, [r7, #7]
 800b7b2:	2b02      	cmp	r3, #2
 800b7b4:	d103      	bne.n	800b7be <FLASH_EraseAllSectors+0x42>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800b7b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b7ba:	60fb      	str	r3, [r7, #12]
 800b7bc:	e002      	b.n	800b7c4 <FLASH_EraseAllSectors+0x48>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800b7be:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b7c2:	60fb      	str	r3, [r7, #12]
  }  
  if(status == FLASH_COMPLETE)
 800b7c4:	7afb      	ldrb	r3, [r7, #11]
 800b7c6:	2b09      	cmp	r3, #9
 800b7c8:	d125      	bne.n	800b816 <FLASH_EraseAllSectors+0x9a>
  {
    /* if the previous operation is completed, proceed to erase all sectors */
#if defined (STM32F427_437xx) || defined (STM32F429_439xx)    
    FLASH->CR &= CR_PSIZE_MASK;
 800b7ca:	4b15      	ldr	r3, [pc, #84]	; (800b820 <FLASH_EraseAllSectors+0xa4>)
 800b7cc:	4a14      	ldr	r2, [pc, #80]	; (800b820 <FLASH_EraseAllSectors+0xa4>)
 800b7ce:	6912      	ldr	r2, [r2, #16]
 800b7d0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b7d4:	611a      	str	r2, [r3, #16]
    FLASH->CR |= tmp_psize;
 800b7d6:	4b12      	ldr	r3, [pc, #72]	; (800b820 <FLASH_EraseAllSectors+0xa4>)
 800b7d8:	4a11      	ldr	r2, [pc, #68]	; (800b820 <FLASH_EraseAllSectors+0xa4>)
 800b7da:	6911      	ldr	r1, [r2, #16]
 800b7dc:	68fa      	ldr	r2, [r7, #12]
 800b7de:	430a      	orrs	r2, r1
 800b7e0:	611a      	str	r2, [r3, #16]
    FLASH->CR |= (FLASH_CR_MER1 | FLASH_CR_MER2);
 800b7e2:	4a0f      	ldr	r2, [pc, #60]	; (800b820 <FLASH_EraseAllSectors+0xa4>)
 800b7e4:	4b0e      	ldr	r3, [pc, #56]	; (800b820 <FLASH_EraseAllSectors+0xa4>)
 800b7e6:	691b      	ldr	r3, [r3, #16]
 800b7e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7ec:	f043 0304 	orr.w	r3, r3, #4
 800b7f0:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_STRT;
 800b7f2:	4b0b      	ldr	r3, [pc, #44]	; (800b820 <FLASH_EraseAllSectors+0xa4>)
 800b7f4:	4a0a      	ldr	r2, [pc, #40]	; (800b820 <FLASH_EraseAllSectors+0xa4>)
 800b7f6:	6912      	ldr	r2, [r2, #16]
 800b7f8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b7fc:	611a      	str	r2, [r3, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800b7fe:	f000 fbf3 	bl	800bfe8 <FLASH_WaitForLastOperation>
 800b802:	4603      	mov	r3, r0
 800b804:	72fb      	strb	r3, [r7, #11]

    /* if the erase operation is completed, disable the MER Bit */
    FLASH->CR &= ~(FLASH_CR_MER1 | FLASH_CR_MER2);
 800b806:	4a06      	ldr	r2, [pc, #24]	; (800b820 <FLASH_EraseAllSectors+0xa4>)
 800b808:	4b05      	ldr	r3, [pc, #20]	; (800b820 <FLASH_EraseAllSectors+0xa4>)
 800b80a:	691b      	ldr	r3, [r3, #16]
 800b80c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b810:	f023 0304 	bic.w	r3, r3, #4
 800b814:	6113      	str	r3, [r2, #16]
    FLASH->CR &= (~FLASH_CR_MER);
#endif /* STM32F40_41xxx || STM32F401xx */

  }   
  /* Return the Erase Status */
  return status;
 800b816:	7afb      	ldrb	r3, [r7, #11]
}
 800b818:	4618      	mov	r0, r3
 800b81a:	3710      	adds	r7, #16
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}
 800b820:	40023c00 	.word	0x40023c00

0800b824 <FLASH_EraseAllBank1Sectors>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseAllBank1Sectors(uint8_t VoltageRange)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b084      	sub	sp, #16
 800b828:	af00      	add	r7, sp, #0
 800b82a:	4603      	mov	r3, r0
 800b82c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp_psize = 0x0;
 800b82e:	2300      	movs	r3, #0
 800b830:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 800b832:	2309      	movs	r3, #9
 800b834:	72fb      	strb	r3, [r7, #11]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800b836:	f000 fbd7 	bl	800bfe8 <FLASH_WaitForLastOperation>
 800b83a:	4603      	mov	r3, r0
 800b83c:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 800b83e:	79fb      	ldrb	r3, [r7, #7]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d102      	bne.n	800b84a <FLASH_EraseAllBank1Sectors+0x26>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800b844:	2300      	movs	r3, #0
 800b846:	60fb      	str	r3, [r7, #12]
 800b848:	e010      	b.n	800b86c <FLASH_EraseAllBank1Sectors+0x48>
  }
  else if(VoltageRange == VoltageRange_2)
 800b84a:	79fb      	ldrb	r3, [r7, #7]
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	d103      	bne.n	800b858 <FLASH_EraseAllBank1Sectors+0x34>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800b850:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b854:	60fb      	str	r3, [r7, #12]
 800b856:	e009      	b.n	800b86c <FLASH_EraseAllBank1Sectors+0x48>
  }
  else if(VoltageRange == VoltageRange_3)
 800b858:	79fb      	ldrb	r3, [r7, #7]
 800b85a:	2b02      	cmp	r3, #2
 800b85c:	d103      	bne.n	800b866 <FLASH_EraseAllBank1Sectors+0x42>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800b85e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b862:	60fb      	str	r3, [r7, #12]
 800b864:	e002      	b.n	800b86c <FLASH_EraseAllBank1Sectors+0x48>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800b866:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b86a:	60fb      	str	r3, [r7, #12]
  }  
  if(status == FLASH_COMPLETE)
 800b86c:	7afb      	ldrb	r3, [r7, #11]
 800b86e:	2b09      	cmp	r3, #9
 800b870:	d121      	bne.n	800b8b6 <FLASH_EraseAllBank1Sectors+0x92>
  {
    /* if the previous operation is completed, proceed to erase all sectors */
     FLASH->CR &= CR_PSIZE_MASK;
 800b872:	4b13      	ldr	r3, [pc, #76]	; (800b8c0 <FLASH_EraseAllBank1Sectors+0x9c>)
 800b874:	4a12      	ldr	r2, [pc, #72]	; (800b8c0 <FLASH_EraseAllBank1Sectors+0x9c>)
 800b876:	6912      	ldr	r2, [r2, #16]
 800b878:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b87c:	611a      	str	r2, [r3, #16]
     FLASH->CR |= tmp_psize;
 800b87e:	4b10      	ldr	r3, [pc, #64]	; (800b8c0 <FLASH_EraseAllBank1Sectors+0x9c>)
 800b880:	4a0f      	ldr	r2, [pc, #60]	; (800b8c0 <FLASH_EraseAllBank1Sectors+0x9c>)
 800b882:	6911      	ldr	r1, [r2, #16]
 800b884:	68fa      	ldr	r2, [r7, #12]
 800b886:	430a      	orrs	r2, r1
 800b888:	611a      	str	r2, [r3, #16]
     FLASH->CR |= FLASH_CR_MER1;
 800b88a:	4b0d      	ldr	r3, [pc, #52]	; (800b8c0 <FLASH_EraseAllBank1Sectors+0x9c>)
 800b88c:	4a0c      	ldr	r2, [pc, #48]	; (800b8c0 <FLASH_EraseAllBank1Sectors+0x9c>)
 800b88e:	6912      	ldr	r2, [r2, #16]
 800b890:	f042 0204 	orr.w	r2, r2, #4
 800b894:	611a      	str	r2, [r3, #16]
     FLASH->CR |= FLASH_CR_STRT;
 800b896:	4b0a      	ldr	r3, [pc, #40]	; (800b8c0 <FLASH_EraseAllBank1Sectors+0x9c>)
 800b898:	4a09      	ldr	r2, [pc, #36]	; (800b8c0 <FLASH_EraseAllBank1Sectors+0x9c>)
 800b89a:	6912      	ldr	r2, [r2, #16]
 800b89c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b8a0:	611a      	str	r2, [r3, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800b8a2:	f000 fba1 	bl	800bfe8 <FLASH_WaitForLastOperation>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	72fb      	strb	r3, [r7, #11]

    /* if the erase operation is completed, disable the MER Bit */
    FLASH->CR &= (~FLASH_CR_MER1);
 800b8aa:	4b05      	ldr	r3, [pc, #20]	; (800b8c0 <FLASH_EraseAllBank1Sectors+0x9c>)
 800b8ac:	4a04      	ldr	r2, [pc, #16]	; (800b8c0 <FLASH_EraseAllBank1Sectors+0x9c>)
 800b8ae:	6912      	ldr	r2, [r2, #16]
 800b8b0:	f022 0204 	bic.w	r2, r2, #4
 800b8b4:	611a      	str	r2, [r3, #16]

  }   
  /* Return the Erase Status */
  return status;
 800b8b6:	7afb      	ldrb	r3, [r7, #11]
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3710      	adds	r7, #16
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}
 800b8c0:	40023c00 	.word	0x40023c00

0800b8c4 <FLASH_EraseAllBank2Sectors>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseAllBank2Sectors(uint8_t VoltageRange)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b084      	sub	sp, #16
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp_psize = 0x0;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 800b8d2:	2309      	movs	r3, #9
 800b8d4:	72fb      	strb	r3, [r7, #11]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800b8d6:	f000 fb87 	bl	800bfe8 <FLASH_WaitForLastOperation>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 800b8de:	79fb      	ldrb	r3, [r7, #7]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d102      	bne.n	800b8ea <FLASH_EraseAllBank2Sectors+0x26>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	60fb      	str	r3, [r7, #12]
 800b8e8:	e010      	b.n	800b90c <FLASH_EraseAllBank2Sectors+0x48>
  }
  else if(VoltageRange == VoltageRange_2)
 800b8ea:	79fb      	ldrb	r3, [r7, #7]
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	d103      	bne.n	800b8f8 <FLASH_EraseAllBank2Sectors+0x34>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800b8f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8f4:	60fb      	str	r3, [r7, #12]
 800b8f6:	e009      	b.n	800b90c <FLASH_EraseAllBank2Sectors+0x48>
  }
  else if(VoltageRange == VoltageRange_3)
 800b8f8:	79fb      	ldrb	r3, [r7, #7]
 800b8fa:	2b02      	cmp	r3, #2
 800b8fc:	d103      	bne.n	800b906 <FLASH_EraseAllBank2Sectors+0x42>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800b8fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b902:	60fb      	str	r3, [r7, #12]
 800b904:	e002      	b.n	800b90c <FLASH_EraseAllBank2Sectors+0x48>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800b906:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b90a:	60fb      	str	r3, [r7, #12]
  }  
  if(status == FLASH_COMPLETE)
 800b90c:	7afb      	ldrb	r3, [r7, #11]
 800b90e:	2b09      	cmp	r3, #9
 800b910:	d121      	bne.n	800b956 <FLASH_EraseAllBank2Sectors+0x92>
  {
    /* if the previous operation is completed, proceed to erase all sectors */
     FLASH->CR &= CR_PSIZE_MASK;
 800b912:	4b13      	ldr	r3, [pc, #76]	; (800b960 <FLASH_EraseAllBank2Sectors+0x9c>)
 800b914:	4a12      	ldr	r2, [pc, #72]	; (800b960 <FLASH_EraseAllBank2Sectors+0x9c>)
 800b916:	6912      	ldr	r2, [r2, #16]
 800b918:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b91c:	611a      	str	r2, [r3, #16]
     FLASH->CR |= tmp_psize;
 800b91e:	4b10      	ldr	r3, [pc, #64]	; (800b960 <FLASH_EraseAllBank2Sectors+0x9c>)
 800b920:	4a0f      	ldr	r2, [pc, #60]	; (800b960 <FLASH_EraseAllBank2Sectors+0x9c>)
 800b922:	6911      	ldr	r1, [r2, #16]
 800b924:	68fa      	ldr	r2, [r7, #12]
 800b926:	430a      	orrs	r2, r1
 800b928:	611a      	str	r2, [r3, #16]
     FLASH->CR |= FLASH_CR_MER2;
 800b92a:	4b0d      	ldr	r3, [pc, #52]	; (800b960 <FLASH_EraseAllBank2Sectors+0x9c>)
 800b92c:	4a0c      	ldr	r2, [pc, #48]	; (800b960 <FLASH_EraseAllBank2Sectors+0x9c>)
 800b92e:	6912      	ldr	r2, [r2, #16]
 800b930:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b934:	611a      	str	r2, [r3, #16]
     FLASH->CR |= FLASH_CR_STRT;
 800b936:	4b0a      	ldr	r3, [pc, #40]	; (800b960 <FLASH_EraseAllBank2Sectors+0x9c>)
 800b938:	4a09      	ldr	r2, [pc, #36]	; (800b960 <FLASH_EraseAllBank2Sectors+0x9c>)
 800b93a:	6912      	ldr	r2, [r2, #16]
 800b93c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b940:	611a      	str	r2, [r3, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800b942:	f000 fb51 	bl	800bfe8 <FLASH_WaitForLastOperation>
 800b946:	4603      	mov	r3, r0
 800b948:	72fb      	strb	r3, [r7, #11]

    /* if the erase operation is completed, disable the MER Bit */
    FLASH->CR &= (~FLASH_CR_MER2);
 800b94a:	4b05      	ldr	r3, [pc, #20]	; (800b960 <FLASH_EraseAllBank2Sectors+0x9c>)
 800b94c:	4a04      	ldr	r2, [pc, #16]	; (800b960 <FLASH_EraseAllBank2Sectors+0x9c>)
 800b94e:	6912      	ldr	r2, [r2, #16]
 800b950:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b954:	611a      	str	r2, [r3, #16]

  }   
  /* Return the Erase Status */
  return status;
 800b956:	7afb      	ldrb	r3, [r7, #11]
}
 800b958:	4618      	mov	r0, r3
 800b95a:	3710      	adds	r7, #16
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}
 800b960:	40023c00 	.word	0x40023c00

0800b964 <FLASH_ProgramDoubleWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b086      	sub	sp, #24
 800b968:	af00      	add	r7, sp, #0
 800b96a:	60f8      	str	r0, [r7, #12]
 800b96c:	e9c7 2300 	strd	r2, r3, [r7]
  FLASH_Status status = FLASH_COMPLETE;
 800b970:	2309      	movs	r3, #9
 800b972:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800b974:	f000 fb38 	bl	800bfe8 <FLASH_WaitForLastOperation>
 800b978:	4603      	mov	r3, r0
 800b97a:	75fb      	strb	r3, [r7, #23]
  
  if(status == FLASH_COMPLETE)
 800b97c:	7dfb      	ldrb	r3, [r7, #23]
 800b97e:	2b09      	cmp	r3, #9
 800b980:	d120      	bne.n	800b9c4 <FLASH_ProgramDoubleWord+0x60>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 800b982:	4b13      	ldr	r3, [pc, #76]	; (800b9d0 <FLASH_ProgramDoubleWord+0x6c>)
 800b984:	4a12      	ldr	r2, [pc, #72]	; (800b9d0 <FLASH_ProgramDoubleWord+0x6c>)
 800b986:	6912      	ldr	r2, [r2, #16]
 800b988:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b98c:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800b98e:	4b10      	ldr	r3, [pc, #64]	; (800b9d0 <FLASH_ProgramDoubleWord+0x6c>)
 800b990:	4a0f      	ldr	r2, [pc, #60]	; (800b9d0 <FLASH_ProgramDoubleWord+0x6c>)
 800b992:	6912      	ldr	r2, [r2, #16]
 800b994:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800b998:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 800b99a:	4b0d      	ldr	r3, [pc, #52]	; (800b9d0 <FLASH_ProgramDoubleWord+0x6c>)
 800b99c:	4a0c      	ldr	r2, [pc, #48]	; (800b9d0 <FLASH_ProgramDoubleWord+0x6c>)
 800b99e:	6912      	ldr	r2, [r2, #16]
 800b9a0:	f042 0201 	orr.w	r2, r2, #1
 800b9a4:	611a      	str	r2, [r3, #16]
  
    *(__IO uint64_t*)Address = Data;
 800b9a6:	68f9      	ldr	r1, [r7, #12]
 800b9a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9ac:	e9c1 2300 	strd	r2, r3, [r1]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800b9b0:	f000 fb1a 	bl	800bfe8 <FLASH_WaitForLastOperation>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	75fb      	strb	r3, [r7, #23]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800b9b8:	4b05      	ldr	r3, [pc, #20]	; (800b9d0 <FLASH_ProgramDoubleWord+0x6c>)
 800b9ba:	4a05      	ldr	r2, [pc, #20]	; (800b9d0 <FLASH_ProgramDoubleWord+0x6c>)
 800b9bc:	6912      	ldr	r2, [r2, #16]
 800b9be:	f022 0201 	bic.w	r2, r2, #1
 800b9c2:	611a      	str	r2, [r3, #16]
  } 
  /* Return the Program Status */
  return status;
 800b9c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	3718      	adds	r7, #24
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}
 800b9ce:	bf00      	nop
 800b9d0:	40023c00 	.word	0x40023c00

0800b9d4 <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b084      	sub	sp, #16
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
 800b9dc:	6039      	str	r1, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE;
 800b9de:	2309      	movs	r3, #9
 800b9e0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800b9e2:	f000 fb01 	bl	800bfe8 <FLASH_WaitForLastOperation>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 800b9ea:	7bfb      	ldrb	r3, [r7, #15]
 800b9ec:	2b09      	cmp	r3, #9
 800b9ee:	d11e      	bne.n	800ba2e <FLASH_ProgramWord+0x5a>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 800b9f0:	4b11      	ldr	r3, [pc, #68]	; (800ba38 <FLASH_ProgramWord+0x64>)
 800b9f2:	4a11      	ldr	r2, [pc, #68]	; (800ba38 <FLASH_ProgramWord+0x64>)
 800b9f4:	6912      	ldr	r2, [r2, #16]
 800b9f6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b9fa:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_WORD;
 800b9fc:	4b0e      	ldr	r3, [pc, #56]	; (800ba38 <FLASH_ProgramWord+0x64>)
 800b9fe:	4a0e      	ldr	r2, [pc, #56]	; (800ba38 <FLASH_ProgramWord+0x64>)
 800ba00:	6912      	ldr	r2, [r2, #16]
 800ba02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba06:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 800ba08:	4b0b      	ldr	r3, [pc, #44]	; (800ba38 <FLASH_ProgramWord+0x64>)
 800ba0a:	4a0b      	ldr	r2, [pc, #44]	; (800ba38 <FLASH_ProgramWord+0x64>)
 800ba0c:	6912      	ldr	r2, [r2, #16]
 800ba0e:	f042 0201 	orr.w	r2, r2, #1
 800ba12:	611a      	str	r2, [r3, #16]
  
    *(__IO uint32_t*)Address = Data;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	683a      	ldr	r2, [r7, #0]
 800ba18:	601a      	str	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800ba1a:	f000 fae5 	bl	800bfe8 <FLASH_WaitForLastOperation>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800ba22:	4b05      	ldr	r3, [pc, #20]	; (800ba38 <FLASH_ProgramWord+0x64>)
 800ba24:	4a04      	ldr	r2, [pc, #16]	; (800ba38 <FLASH_ProgramWord+0x64>)
 800ba26:	6912      	ldr	r2, [r2, #16]
 800ba28:	f022 0201 	bic.w	r2, r2, #1
 800ba2c:	611a      	str	r2, [r3, #16]
  } 
  /* Return the Program Status */
  return status;
 800ba2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	3710      	adds	r7, #16
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}
 800ba38:	40023c00 	.word	0x40023c00

0800ba3c <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b084      	sub	sp, #16
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	460b      	mov	r3, r1
 800ba46:	807b      	strh	r3, [r7, #2]
  FLASH_Status status = FLASH_COMPLETE;
 800ba48:	2309      	movs	r3, #9
 800ba4a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800ba4c:	f000 facc 	bl	800bfe8 <FLASH_WaitForLastOperation>
 800ba50:	4603      	mov	r3, r0
 800ba52:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 800ba54:	7bfb      	ldrb	r3, [r7, #15]
 800ba56:	2b09      	cmp	r3, #9
 800ba58:	d11e      	bne.n	800ba98 <FLASH_ProgramHalfWord+0x5c>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 800ba5a:	4b12      	ldr	r3, [pc, #72]	; (800baa4 <FLASH_ProgramHalfWord+0x68>)
 800ba5c:	4a11      	ldr	r2, [pc, #68]	; (800baa4 <FLASH_ProgramHalfWord+0x68>)
 800ba5e:	6912      	ldr	r2, [r2, #16]
 800ba60:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ba64:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800ba66:	4b0f      	ldr	r3, [pc, #60]	; (800baa4 <FLASH_ProgramHalfWord+0x68>)
 800ba68:	4a0e      	ldr	r2, [pc, #56]	; (800baa4 <FLASH_ProgramHalfWord+0x68>)
 800ba6a:	6912      	ldr	r2, [r2, #16]
 800ba6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ba70:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 800ba72:	4b0c      	ldr	r3, [pc, #48]	; (800baa4 <FLASH_ProgramHalfWord+0x68>)
 800ba74:	4a0b      	ldr	r2, [pc, #44]	; (800baa4 <FLASH_ProgramHalfWord+0x68>)
 800ba76:	6912      	ldr	r2, [r2, #16]
 800ba78:	f042 0201 	orr.w	r2, r2, #1
 800ba7c:	611a      	str	r2, [r3, #16]
  
    *(__IO uint16_t*)Address = Data;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	887a      	ldrh	r2, [r7, #2]
 800ba82:	801a      	strh	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800ba84:	f000 fab0 	bl	800bfe8 <FLASH_WaitForLastOperation>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800ba8c:	4b05      	ldr	r3, [pc, #20]	; (800baa4 <FLASH_ProgramHalfWord+0x68>)
 800ba8e:	4a05      	ldr	r2, [pc, #20]	; (800baa4 <FLASH_ProgramHalfWord+0x68>)
 800ba90:	6912      	ldr	r2, [r2, #16]
 800ba92:	f022 0201 	bic.w	r2, r2, #1
 800ba96:	611a      	str	r2, [r3, #16]
  } 
  /* Return the Program Status */
  return status;
 800ba98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3710      	adds	r7, #16
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}
 800baa2:	bf00      	nop
 800baa4:	40023c00 	.word	0x40023c00

0800baa8 <FLASH_ProgramByte>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
 800bab0:	460b      	mov	r3, r1
 800bab2:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 800bab4:	2309      	movs	r3, #9
 800bab6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800bab8:	f000 fa96 	bl	800bfe8 <FLASH_WaitForLastOperation>
 800babc:	4603      	mov	r3, r0
 800babe:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 800bac0:	7bfb      	ldrb	r3, [r7, #15]
 800bac2:	2b09      	cmp	r3, #9
 800bac4:	d11c      	bne.n	800bb00 <FLASH_ProgramByte+0x58>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 800bac6:	4b11      	ldr	r3, [pc, #68]	; (800bb0c <FLASH_ProgramByte+0x64>)
 800bac8:	4a10      	ldr	r2, [pc, #64]	; (800bb0c <FLASH_ProgramByte+0x64>)
 800baca:	6912      	ldr	r2, [r2, #16]
 800bacc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800bad0:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_BYTE;
 800bad2:	4b0e      	ldr	r3, [pc, #56]	; (800bb0c <FLASH_ProgramByte+0x64>)
 800bad4:	4a0d      	ldr	r2, [pc, #52]	; (800bb0c <FLASH_ProgramByte+0x64>)
 800bad6:	6912      	ldr	r2, [r2, #16]
 800bad8:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 800bada:	4b0c      	ldr	r3, [pc, #48]	; (800bb0c <FLASH_ProgramByte+0x64>)
 800badc:	4a0b      	ldr	r2, [pc, #44]	; (800bb0c <FLASH_ProgramByte+0x64>)
 800bade:	6912      	ldr	r2, [r2, #16]
 800bae0:	f042 0201 	orr.w	r2, r2, #1
 800bae4:	611a      	str	r2, [r3, #16]
  
    *(__IO uint8_t*)Address = Data;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	78fa      	ldrb	r2, [r7, #3]
 800baea:	701a      	strb	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800baec:	f000 fa7c 	bl	800bfe8 <FLASH_WaitForLastOperation>
 800baf0:	4603      	mov	r3, r0
 800baf2:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800baf4:	4b05      	ldr	r3, [pc, #20]	; (800bb0c <FLASH_ProgramByte+0x64>)
 800baf6:	4a05      	ldr	r2, [pc, #20]	; (800bb0c <FLASH_ProgramByte+0x64>)
 800baf8:	6912      	ldr	r2, [r2, #16]
 800bafa:	f022 0201 	bic.w	r2, r2, #1
 800bafe:	611a      	str	r2, [r3, #16]
  } 

  /* Return the Program Status */
  return status;
 800bb00:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3710      	adds	r7, #16
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}
 800bb0a:	bf00      	nop
 800bb0c:	40023c00 	.word	0x40023c00

0800bb10 <FLASH_OB_Unlock>:
  * @brief  Unlocks the FLASH Option Control Registers access.
  * @param  None
  * @retval None
  */
void FLASH_OB_Unlock(void)
{
 800bb10:	b480      	push	{r7}
 800bb12:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 800bb14:	4b07      	ldr	r3, [pc, #28]	; (800bb34 <FLASH_OB_Unlock+0x24>)
 800bb16:	695b      	ldr	r3, [r3, #20]
 800bb18:	f003 0301 	and.w	r3, r3, #1
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d005      	beq.n	800bb2c <FLASH_OB_Unlock+0x1c>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800bb20:	4b04      	ldr	r3, [pc, #16]	; (800bb34 <FLASH_OB_Unlock+0x24>)
 800bb22:	4a05      	ldr	r2, [pc, #20]	; (800bb38 <FLASH_OB_Unlock+0x28>)
 800bb24:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800bb26:	4b03      	ldr	r3, [pc, #12]	; (800bb34 <FLASH_OB_Unlock+0x24>)
 800bb28:	4a04      	ldr	r2, [pc, #16]	; (800bb3c <FLASH_OB_Unlock+0x2c>)
 800bb2a:	609a      	str	r2, [r3, #8]
  }  
}
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr
 800bb34:	40023c00 	.word	0x40023c00
 800bb38:	08192a3b 	.word	0x08192a3b
 800bb3c:	4c5d6e7f 	.word	0x4c5d6e7f

0800bb40 <FLASH_OB_Lock>:
  * @brief  Locks the FLASH Option Control Registers access.
  * @param  None
  * @retval None
  */
void FLASH_OB_Lock(void)
{
 800bb40:	b480      	push	{r7}
 800bb42:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800bb44:	4b04      	ldr	r3, [pc, #16]	; (800bb58 <FLASH_OB_Lock+0x18>)
 800bb46:	4a04      	ldr	r2, [pc, #16]	; (800bb58 <FLASH_OB_Lock+0x18>)
 800bb48:	6952      	ldr	r2, [r2, #20]
 800bb4a:	f042 0201 	orr.w	r2, r2, #1
 800bb4e:	615a      	str	r2, [r3, #20]
}
 800bb50:	46bd      	mov	sp, r7
 800bb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb56:	4770      	bx	lr
 800bb58:	40023c00 	.word	0x40023c00

0800bb5c <FLASH_OB_WRPConfig>:
  * @param  Newstate: new state of the Write Protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None  
  */
void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState)
{ 
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b084      	sub	sp, #16
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	460b      	mov	r3, r1
 800bb66:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 800bb68:	2309      	movs	r3, #9
 800bb6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(OB_WRP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  status = FLASH_WaitForLastOperation();
 800bb6c:	f000 fa3c 	bl	800bfe8 <FLASH_WaitForLastOperation>
 800bb70:	4603      	mov	r3, r0
 800bb72:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 800bb74:	7bfb      	ldrb	r3, [r7, #15]
 800bb76:	2b09      	cmp	r3, #9
 800bb78:	d117      	bne.n	800bbaa <FLASH_OB_WRPConfig+0x4e>
  { 
    if(NewState != DISABLE)
 800bb7a:	78fb      	ldrb	r3, [r7, #3]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d00b      	beq.n	800bb98 <FLASH_OB_WRPConfig+0x3c>
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_WRP);
 800bb80:	4b0b      	ldr	r3, [pc, #44]	; (800bbb0 <FLASH_OB_WRPConfig+0x54>)
 800bb82:	4a0b      	ldr	r2, [pc, #44]	; (800bbb0 <FLASH_OB_WRPConfig+0x54>)
 800bb84:	8812      	ldrh	r2, [r2, #0]
 800bb86:	b291      	uxth	r1, r2
 800bb88:	687a      	ldr	r2, [r7, #4]
 800bb8a:	b292      	uxth	r2, r2
 800bb8c:	43d2      	mvns	r2, r2
 800bb8e:	b292      	uxth	r2, r2
 800bb90:	400a      	ands	r2, r1
 800bb92:	b292      	uxth	r2, r2
 800bb94:	801a      	strh	r2, [r3, #0]
 800bb96:	e008      	b.n	800bbaa <FLASH_OB_WRPConfig+0x4e>
    }
    else
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
 800bb98:	4b05      	ldr	r3, [pc, #20]	; (800bbb0 <FLASH_OB_WRPConfig+0x54>)
 800bb9a:	4a05      	ldr	r2, [pc, #20]	; (800bbb0 <FLASH_OB_WRPConfig+0x54>)
 800bb9c:	8812      	ldrh	r2, [r2, #0]
 800bb9e:	b291      	uxth	r1, r2
 800bba0:	687a      	ldr	r2, [r7, #4]
 800bba2:	b292      	uxth	r2, r2
 800bba4:	430a      	orrs	r2, r1
 800bba6:	b292      	uxth	r2, r2
 800bba8:	801a      	strh	r2, [r3, #0]
    }
  }
}
 800bbaa:	3710      	adds	r7, #16
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}
 800bbb0:	40023c16 	.word	0x40023c16

0800bbb4 <FLASH_OB_WRP1Config>:
  * @param  Newstate: new state of the Write Protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None  
  */
void FLASH_OB_WRP1Config(uint32_t OB_WRP, FunctionalState NewState)
{ 
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b084      	sub	sp, #16
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
 800bbbc:	460b      	mov	r3, r1
 800bbbe:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 800bbc0:	2309      	movs	r3, #9
 800bbc2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(OB_WRP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  status = FLASH_WaitForLastOperation();
 800bbc4:	f000 fa10 	bl	800bfe8 <FLASH_WaitForLastOperation>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 800bbcc:	7bfb      	ldrb	r3, [r7, #15]
 800bbce:	2b09      	cmp	r3, #9
 800bbd0:	d117      	bne.n	800bc02 <FLASH_OB_WRP1Config+0x4e>
  { 
    if(NewState != DISABLE)
 800bbd2:	78fb      	ldrb	r3, [r7, #3]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d00b      	beq.n	800bbf0 <FLASH_OB_WRP1Config+0x3c>
    {
      *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~OB_WRP);
 800bbd8:	4b0b      	ldr	r3, [pc, #44]	; (800bc08 <FLASH_OB_WRP1Config+0x54>)
 800bbda:	4a0b      	ldr	r2, [pc, #44]	; (800bc08 <FLASH_OB_WRP1Config+0x54>)
 800bbdc:	8812      	ldrh	r2, [r2, #0]
 800bbde:	b291      	uxth	r1, r2
 800bbe0:	687a      	ldr	r2, [r7, #4]
 800bbe2:	b292      	uxth	r2, r2
 800bbe4:	43d2      	mvns	r2, r2
 800bbe6:	b292      	uxth	r2, r2
 800bbe8:	400a      	ands	r2, r1
 800bbea:	b292      	uxth	r2, r2
 800bbec:	801a      	strh	r2, [r3, #0]
 800bbee:	e008      	b.n	800bc02 <FLASH_OB_WRP1Config+0x4e>
    }
    else
    {
      *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
 800bbf0:	4b05      	ldr	r3, [pc, #20]	; (800bc08 <FLASH_OB_WRP1Config+0x54>)
 800bbf2:	4a05      	ldr	r2, [pc, #20]	; (800bc08 <FLASH_OB_WRP1Config+0x54>)
 800bbf4:	8812      	ldrh	r2, [r2, #0]
 800bbf6:	b291      	uxth	r1, r2
 800bbf8:	687a      	ldr	r2, [r7, #4]
 800bbfa:	b292      	uxth	r2, r2
 800bbfc:	430a      	orrs	r2, r1
 800bbfe:	b292      	uxth	r2, r2
 800bc00:	801a      	strh	r2, [r3, #0]
    }
  }
}
 800bc02:	3710      	adds	r7, #16
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}
 800bc08:	40023c1a 	.word	0x40023c1a

0800bc0c <FLASH_OB_PCROPSelectionConfig>:
  *            @arg OB_PcROP_Disable: nWRPi control the write protection of respective user sectors.
  *            @arg OB_PcROP_Enable: nWRPi control the  read&write protection (PCROP) of respective user sectors.
  * @retval None
  */
void FLASH_OB_PCROPSelectionConfig(uint8_t OB_PcROP)
{  
 800bc0c:	b480      	push	{r7}
 800bc0e:	b085      	sub	sp, #20
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	4603      	mov	r3, r0
 800bc14:	71fb      	strb	r3, [r7, #7]
  uint8_t optiontmp = 0xFF;
 800bc16:	23ff      	movs	r3, #255	; 0xff
 800bc18:	73fb      	strb	r3, [r7, #15]
      
  /* Check the parameters */
  assert_param(IS_OB_PCROP_SELECT(OB_PcROP));
  
  /* Mask SPRMOD bit */
  optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE3_ADDRESS) & (uint8_t)0x7F); 
 800bc1a:	4b08      	ldr	r3, [pc, #32]	; (800bc3c <FLASH_OB_PCROPSelectionConfig+0x30>)
 800bc1c:	781b      	ldrb	r3, [r3, #0]
 800bc1e:	b2db      	uxtb	r3, r3
 800bc20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc24:	73fb      	strb	r3, [r7, #15]
  /* Update Option Byte */
  *(__IO uint8_t *)OPTCR_BYTE3_ADDRESS = (uint8_t)(OB_PcROP | optiontmp); 
 800bc26:	4b05      	ldr	r3, [pc, #20]	; (800bc3c <FLASH_OB_PCROPSelectionConfig+0x30>)
 800bc28:	79f9      	ldrb	r1, [r7, #7]
 800bc2a:	7bfa      	ldrb	r2, [r7, #15]
 800bc2c:	430a      	orrs	r2, r1
 800bc2e:	b2d2      	uxtb	r2, r2
 800bc30:	701a      	strb	r2, [r3, #0]
    
}
 800bc32:	3714      	adds	r7, #20
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr
 800bc3c:	40023c17 	.word	0x40023c17

0800bc40 <FLASH_OB_PCROPConfig>:
  * @param  Newstate: new state of the Write Protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None  
  */
void FLASH_OB_PCROPConfig(uint32_t OB_PCROP, FunctionalState NewState)
{ 
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b084      	sub	sp, #16
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	460b      	mov	r3, r1
 800bc4a:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 800bc4c:	2309      	movs	r3, #9
 800bc4e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_PCROP(OB_PCROP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  status = FLASH_WaitForLastOperation();
 800bc50:	f000 f9ca 	bl	800bfe8 <FLASH_WaitForLastOperation>
 800bc54:	4603      	mov	r3, r0
 800bc56:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 800bc58:	7bfb      	ldrb	r3, [r7, #15]
 800bc5a:	2b09      	cmp	r3, #9
 800bc5c:	d117      	bne.n	800bc8e <FLASH_OB_PCROPConfig+0x4e>
  { 
    if(NewState != DISABLE)
 800bc5e:	78fb      	ldrb	r3, [r7, #3]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d009      	beq.n	800bc78 <FLASH_OB_PCROPConfig+0x38>
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_PCROP;    
 800bc64:	4b0b      	ldr	r3, [pc, #44]	; (800bc94 <FLASH_OB_PCROPConfig+0x54>)
 800bc66:	4a0b      	ldr	r2, [pc, #44]	; (800bc94 <FLASH_OB_PCROPConfig+0x54>)
 800bc68:	8812      	ldrh	r2, [r2, #0]
 800bc6a:	b291      	uxth	r1, r2
 800bc6c:	687a      	ldr	r2, [r7, #4]
 800bc6e:	b292      	uxth	r2, r2
 800bc70:	430a      	orrs	r2, r1
 800bc72:	b292      	uxth	r2, r2
 800bc74:	801a      	strh	r2, [r3, #0]
 800bc76:	e00a      	b.n	800bc8e <FLASH_OB_PCROPConfig+0x4e>
    }
    else
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_PCROP);
 800bc78:	4b06      	ldr	r3, [pc, #24]	; (800bc94 <FLASH_OB_PCROPConfig+0x54>)
 800bc7a:	4a06      	ldr	r2, [pc, #24]	; (800bc94 <FLASH_OB_PCROPConfig+0x54>)
 800bc7c:	8812      	ldrh	r2, [r2, #0]
 800bc7e:	b291      	uxth	r1, r2
 800bc80:	687a      	ldr	r2, [r7, #4]
 800bc82:	b292      	uxth	r2, r2
 800bc84:	43d2      	mvns	r2, r2
 800bc86:	b292      	uxth	r2, r2
 800bc88:	400a      	ands	r2, r1
 800bc8a:	b292      	uxth	r2, r2
 800bc8c:	801a      	strh	r2, [r3, #0]
    }
  }
}
 800bc8e:	3710      	adds	r7, #16
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}
 800bc94:	40023c16 	.word	0x40023c16

0800bc98 <FLASH_OB_PCROP1Config>:
  * @param  Newstate: new state of the Write Protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None  
  */
void FLASH_OB_PCROP1Config(uint32_t OB_PCROP, FunctionalState NewState)
{ 
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b084      	sub	sp, #16
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
 800bca0:	460b      	mov	r3, r1
 800bca2:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 800bca4:	2309      	movs	r3, #9
 800bca6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_PCROP(OB_PCROP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  status = FLASH_WaitForLastOperation();
 800bca8:	f000 f99e 	bl	800bfe8 <FLASH_WaitForLastOperation>
 800bcac:	4603      	mov	r3, r0
 800bcae:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 800bcb0:	7bfb      	ldrb	r3, [r7, #15]
 800bcb2:	2b09      	cmp	r3, #9
 800bcb4:	d117      	bne.n	800bce6 <FLASH_OB_PCROP1Config+0x4e>
  { 
    if(NewState != DISABLE)
 800bcb6:	78fb      	ldrb	r3, [r7, #3]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d009      	beq.n	800bcd0 <FLASH_OB_PCROP1Config+0x38>
    {
      *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)OB_PCROP;
 800bcbc:	4b0b      	ldr	r3, [pc, #44]	; (800bcec <FLASH_OB_PCROP1Config+0x54>)
 800bcbe:	4a0b      	ldr	r2, [pc, #44]	; (800bcec <FLASH_OB_PCROP1Config+0x54>)
 800bcc0:	8812      	ldrh	r2, [r2, #0]
 800bcc2:	b291      	uxth	r1, r2
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	b292      	uxth	r2, r2
 800bcc8:	430a      	orrs	r2, r1
 800bcca:	b292      	uxth	r2, r2
 800bccc:	801a      	strh	r2, [r3, #0]
 800bcce:	e00a      	b.n	800bce6 <FLASH_OB_PCROP1Config+0x4e>
    }
    else
    {
      *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~OB_PCROP);
 800bcd0:	4b06      	ldr	r3, [pc, #24]	; (800bcec <FLASH_OB_PCROP1Config+0x54>)
 800bcd2:	4a06      	ldr	r2, [pc, #24]	; (800bcec <FLASH_OB_PCROP1Config+0x54>)
 800bcd4:	8812      	ldrh	r2, [r2, #0]
 800bcd6:	b291      	uxth	r1, r2
 800bcd8:	687a      	ldr	r2, [r7, #4]
 800bcda:	b292      	uxth	r2, r2
 800bcdc:	43d2      	mvns	r2, r2
 800bcde:	b292      	uxth	r2, r2
 800bce0:	400a      	ands	r2, r1
 800bce2:	b292      	uxth	r2, r2
 800bce4:	801a      	strh	r2, [r3, #0]
    }
  }
}
 800bce6:	3710      	adds	r7, #16
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}
 800bcec:	40023c1a 	.word	0x40023c1a

0800bcf0 <FLASH_OB_RDPConfig>:
  * /!\ Warning /!\ When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *    
  * @retval None
  */
void FLASH_OB_RDPConfig(uint8_t OB_RDP)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b084      	sub	sp, #16
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	71fb      	strb	r3, [r7, #7]
  FLASH_Status status = FLASH_COMPLETE;
 800bcfa:	2309      	movs	r3, #9
 800bcfc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP(OB_RDP));

  status = FLASH_WaitForLastOperation();
 800bcfe:	f000 f973 	bl	800bfe8 <FLASH_WaitForLastOperation>
 800bd02:	4603      	mov	r3, r0
 800bd04:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 800bd06:	7bfb      	ldrb	r3, [r7, #15]
 800bd08:	2b09      	cmp	r3, #9
 800bd0a:	d102      	bne.n	800bd12 <FLASH_OB_RDPConfig+0x22>
  {
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = OB_RDP;
 800bd0c:	4b02      	ldr	r3, [pc, #8]	; (800bd18 <FLASH_OB_RDPConfig+0x28>)
 800bd0e:	79fa      	ldrb	r2, [r7, #7]
 800bd10:	701a      	strb	r2, [r3, #0]

  }
}
 800bd12:	3710      	adds	r7, #16
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}
 800bd18:	40023c15 	.word	0x40023c15

0800bd1c <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NoRST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval None
  */
void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b084      	sub	sp, #16
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	4613      	mov	r3, r2
 800bd24:	4602      	mov	r2, r0
 800bd26:	71fa      	strb	r2, [r7, #7]
 800bd28:	460a      	mov	r2, r1
 800bd2a:	71ba      	strb	r2, [r7, #6]
 800bd2c:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 800bd2e:	23ff      	movs	r3, #255	; 0xff
 800bd30:	73fb      	strb	r3, [r7, #15]
  FLASH_Status status = FLASH_COMPLETE; 
 800bd32:	2309      	movs	r3, #9
 800bd34:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800bd36:	f000 f957 	bl	800bfe8 <FLASH_WaitForLastOperation>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	73bb      	strb	r3, [r7, #14]
  
  if(status == FLASH_COMPLETE)
 800bd3e:	7bbb      	ldrb	r3, [r7, #14]
 800bd40:	2b09      	cmp	r3, #9
 800bd42:	d111      	bne.n	800bd68 <FLASH_OB_UserConfig+0x4c>
  { 
#if defined (STM32F427_437xx) || defined (STM32F429_439xx)     
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 800bd44:	4b0a      	ldr	r3, [pc, #40]	; (800bd70 <FLASH_OB_UserConfig+0x54>)
 800bd46:	781b      	ldrb	r3, [r3, #0]
 800bd48:	b2db      	uxtb	r3, r3
 800bd4a:	f003 031f 	and.w	r3, r3, #31
 800bd4e:	73fb      	strb	r3, [r7, #15]
    /* Mask OPTLOCK, OPTSTRT and BOR_LEV bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0F); 
#endif /* STM32F40_41xxx || STM32F401xx */ 

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = OB_IWDG | (uint8_t)(OB_STDBY | (uint8_t)(OB_STOP | ((uint8_t)optiontmp))); 
 800bd50:	4b07      	ldr	r3, [pc, #28]	; (800bd70 <FLASH_OB_UserConfig+0x54>)
 800bd52:	79b9      	ldrb	r1, [r7, #6]
 800bd54:	7bfa      	ldrb	r2, [r7, #15]
 800bd56:	430a      	orrs	r2, r1
 800bd58:	b2d1      	uxtb	r1, r2
 800bd5a:	797a      	ldrb	r2, [r7, #5]
 800bd5c:	430a      	orrs	r2, r1
 800bd5e:	b2d1      	uxtb	r1, r2
 800bd60:	79fa      	ldrb	r2, [r7, #7]
 800bd62:	430a      	orrs	r2, r1
 800bd64:	b2d2      	uxtb	r2, r2
 800bd66:	701a      	strb	r2, [r3, #0]
  }  
}
 800bd68:	3710      	adds	r7, #16
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
 800bd6e:	bf00      	nop
 800bd70:	40023c14 	.word	0x40023c14

0800bd74 <FLASH_OB_BootConfig>:
  *            @arg OB_Dual_BootEnabled: Dual Bank Boot Enable
  *            @arg OB_Dual_BootDisabled: Dual Bank Boot Disabled
  * @retval None
  */
void FLASH_OB_BootConfig(uint8_t OB_BOOT)
{
 800bd74:	b480      	push	{r7}
 800bd76:	b083      	sub	sp, #12
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOOT(OB_BOOT));

  /* Set Dual Bank Boot */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BFB2);
 800bd7e:	4b0a      	ldr	r3, [pc, #40]	; (800bda8 <FLASH_OB_BootConfig+0x34>)
 800bd80:	4a09      	ldr	r2, [pc, #36]	; (800bda8 <FLASH_OB_BootConfig+0x34>)
 800bd82:	7812      	ldrb	r2, [r2, #0]
 800bd84:	b2d2      	uxtb	r2, r2
 800bd86:	f022 0210 	bic.w	r2, r2, #16
 800bd8a:	b2d2      	uxtb	r2, r2
 800bd8c:	701a      	strb	r2, [r3, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOOT;
 800bd8e:	4b06      	ldr	r3, [pc, #24]	; (800bda8 <FLASH_OB_BootConfig+0x34>)
 800bd90:	4a05      	ldr	r2, [pc, #20]	; (800bda8 <FLASH_OB_BootConfig+0x34>)
 800bd92:	7812      	ldrb	r2, [r2, #0]
 800bd94:	b2d1      	uxtb	r1, r2
 800bd96:	79fa      	ldrb	r2, [r7, #7]
 800bd98:	430a      	orrs	r2, r1
 800bd9a:	b2d2      	uxtb	r2, r2
 800bd9c:	701a      	strb	r2, [r3, #0]

}
 800bd9e:	370c      	adds	r7, #12
 800bda0:	46bd      	mov	sp, r7
 800bda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda6:	4770      	bx	lr
 800bda8:	40023c14 	.word	0x40023c14

0800bdac <FLASH_OB_BORConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval None
  */
void FLASH_OB_BORConfig(uint8_t OB_BOR)
{
 800bdac:	b480      	push	{r7}
 800bdae:	b083      	sub	sp, #12
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR(OB_BOR));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 800bdb6:	4b0a      	ldr	r3, [pc, #40]	; (800bde0 <FLASH_OB_BORConfig+0x34>)
 800bdb8:	4a09      	ldr	r2, [pc, #36]	; (800bde0 <FLASH_OB_BORConfig+0x34>)
 800bdba:	7812      	ldrb	r2, [r2, #0]
 800bdbc:	b2d2      	uxtb	r2, r2
 800bdbe:	f022 020c 	bic.w	r2, r2, #12
 800bdc2:	b2d2      	uxtb	r2, r2
 800bdc4:	701a      	strb	r2, [r3, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOR;
 800bdc6:	4b06      	ldr	r3, [pc, #24]	; (800bde0 <FLASH_OB_BORConfig+0x34>)
 800bdc8:	4a05      	ldr	r2, [pc, #20]	; (800bde0 <FLASH_OB_BORConfig+0x34>)
 800bdca:	7812      	ldrb	r2, [r2, #0]
 800bdcc:	b2d1      	uxtb	r1, r2
 800bdce:	79fa      	ldrb	r2, [r7, #7]
 800bdd0:	430a      	orrs	r2, r1
 800bdd2:	b2d2      	uxtb	r2, r2
 800bdd4:	701a      	strb	r2, [r3, #0]

}
 800bdd6:	370c      	adds	r7, #12
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdde:	4770      	bx	lr
 800bde0:	40023c14 	.word	0x40023c14

0800bde4 <FLASH_OB_Launch>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_OB_Launch(void)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b082      	sub	sp, #8
 800bde8:	af00      	add	r7, sp, #0
  FLASH_Status status = FLASH_COMPLETE;
 800bdea:	2309      	movs	r3, #9
 800bdec:	71fb      	strb	r3, [r7, #7]

  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 800bdee:	4b08      	ldr	r3, [pc, #32]	; (800be10 <FLASH_OB_Launch+0x2c>)
 800bdf0:	4a07      	ldr	r2, [pc, #28]	; (800be10 <FLASH_OB_Launch+0x2c>)
 800bdf2:	7812      	ldrb	r2, [r2, #0]
 800bdf4:	b2d2      	uxtb	r2, r2
 800bdf6:	f042 0202 	orr.w	r2, r2, #2
 800bdfa:	b2d2      	uxtb	r2, r2
 800bdfc:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800bdfe:	f000 f8f3 	bl	800bfe8 <FLASH_WaitForLastOperation>
 800be02:	4603      	mov	r3, r0
 800be04:	71fb      	strb	r3, [r7, #7]

  return status;
 800be06:	79fb      	ldrb	r3, [r7, #7]
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3708      	adds	r7, #8
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}
 800be10:	40023c14 	.word	0x40023c14

0800be14 <FLASH_OB_GetUser>:
  * @param  None
  * @retval The FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
uint8_t FLASH_OB_GetUser(void)
{
 800be14:	b480      	push	{r7}
 800be16:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return (uint8_t)(FLASH->OPTCR >> 5);
 800be18:	4b04      	ldr	r3, [pc, #16]	; (800be2c <FLASH_OB_GetUser+0x18>)
 800be1a:	695b      	ldr	r3, [r3, #20]
 800be1c:	095b      	lsrs	r3, r3, #5
 800be1e:	b2db      	uxtb	r3, r3
}
 800be20:	4618      	mov	r0, r3
 800be22:	46bd      	mov	sp, r7
 800be24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be28:	4770      	bx	lr
 800be2a:	bf00      	nop
 800be2c:	40023c00 	.word	0x40023c00

0800be30 <FLASH_OB_GetWRP>:
  * @brief  Returns the FLASH Write Protection Option Bytes value.
  * @param  None
  * @retval The FLASH Write Protection  Option Bytes value
  */
uint16_t FLASH_OB_GetWRP(void)
{
 800be30:	b480      	push	{r7}
 800be32:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 800be34:	4b03      	ldr	r3, [pc, #12]	; (800be44 <FLASH_OB_GetWRP+0x14>)
 800be36:	881b      	ldrh	r3, [r3, #0]
 800be38:	b29b      	uxth	r3, r3
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	46bd      	mov	sp, r7
 800be3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be42:	4770      	bx	lr
 800be44:	40023c16 	.word	0x40023c16

0800be48 <FLASH_OB_GetWRP1>:
  *   
  * @param  None
  * @retval The FLASH Write Protection  Option Bytes value
  */
uint16_t FLASH_OB_GetWRP1(void)
{
 800be48:	b480      	push	{r7}
 800be4a:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
 800be4c:	4b03      	ldr	r3, [pc, #12]	; (800be5c <FLASH_OB_GetWRP1+0x14>)
 800be4e:	881b      	ldrh	r3, [r3, #0]
 800be50:	b29b      	uxth	r3, r3
}
 800be52:	4618      	mov	r0, r3
 800be54:	46bd      	mov	sp, r7
 800be56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5a:	4770      	bx	lr
 800be5c:	40023c1a 	.word	0x40023c1a

0800be60 <FLASH_OB_GetPCROP>:
  *   
  * @param  None
  * @retval The FLASH PC Read/Write Protection Option Bytes value
  */
uint16_t FLASH_OB_GetPCROP(void)
{
 800be60:	b480      	push	{r7}
 800be62:	af00      	add	r7, sp, #0
  /* Return the FLASH PC Read/write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 800be64:	4b03      	ldr	r3, [pc, #12]	; (800be74 <FLASH_OB_GetPCROP+0x14>)
 800be66:	881b      	ldrh	r3, [r3, #0]
 800be68:	b29b      	uxth	r3, r3
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	46bd      	mov	sp, r7
 800be6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be72:	4770      	bx	lr
 800be74:	40023c16 	.word	0x40023c16

0800be78 <FLASH_OB_GetPCROP1>:
  *     
  * @param  None
  * @retval The FLASH PC Read/Write Protection Option Bytes value
  */
uint16_t FLASH_OB_GetPCROP1(void)
{
 800be78:	b480      	push	{r7}
 800be7a:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
 800be7c:	4b03      	ldr	r3, [pc, #12]	; (800be8c <FLASH_OB_GetPCROP1+0x14>)
 800be7e:	881b      	ldrh	r3, [r3, #0]
 800be80:	b29b      	uxth	r3, r3
}
 800be82:	4618      	mov	r0, r3
 800be84:	46bd      	mov	sp, r7
 800be86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8a:	4770      	bx	lr
 800be8c:	40023c1a 	.word	0x40023c1a

0800be90 <FLASH_OB_GetRDP>:
  * @retval FLASH ReadOut Protection Status:
  *           - SET, when OB_RDP_Level_1 or OB_RDP_Level_2 is set
  *           - RESET, when OB_RDP_Level_0 is set
  */
FlagStatus FLASH_OB_GetRDP(void)
{
 800be90:	b480      	push	{r7}
 800be92:	b083      	sub	sp, #12
 800be94:	af00      	add	r7, sp, #0
  FlagStatus readstatus = RESET;
 800be96:	2300      	movs	r3, #0
 800be98:	71fb      	strb	r3, [r7, #7]

  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) != (uint8_t)OB_RDP_Level_0))
 800be9a:	4b08      	ldr	r3, [pc, #32]	; (800bebc <FLASH_OB_GetRDP+0x2c>)
 800be9c:	781b      	ldrb	r3, [r3, #0]
 800be9e:	b2db      	uxtb	r3, r3
 800bea0:	2baa      	cmp	r3, #170	; 0xaa
 800bea2:	d002      	beq.n	800beaa <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = SET;
 800bea4:	2301      	movs	r3, #1
 800bea6:	71fb      	strb	r3, [r7, #7]
 800bea8:	e001      	b.n	800beae <FLASH_OB_GetRDP+0x1e>
  }
  else
  {
    readstatus = RESET;
 800beaa:	2300      	movs	r3, #0
 800beac:	71fb      	strb	r3, [r7, #7]
  }
  return readstatus;
 800beae:	79fb      	ldrb	r3, [r7, #7]
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	370c      	adds	r7, #12
 800beb4:	46bd      	mov	sp, r7
 800beb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beba:	4770      	bx	lr
 800bebc:	40023c15 	.word	0x40023c15

0800bec0 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
uint8_t FLASH_OB_GetBOR(void)
{
 800bec0:	b480      	push	{r7}
 800bec2:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 800bec4:	4b05      	ldr	r3, [pc, #20]	; (800bedc <FLASH_OB_GetBOR+0x1c>)
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	b2db      	uxtb	r3, r3
 800beca:	f003 030c 	and.w	r3, r3, #12
 800bece:	b2db      	uxtb	r3, r3
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	46bd      	mov	sp, r7
 800bed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed8:	4770      	bx	lr
 800beda:	bf00      	nop
 800bedc:	40023c14 	.word	0x40023c14

0800bee0 <FLASH_ITConfig>:
  *            @arg FLASH_IT_ERR: FLASH Error Interrupt
  *            @arg FLASH_IT_EOP: FLASH end of operation Interrupt
  * @retval None 
  */
void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
{
 800bee0:	b480      	push	{r7}
 800bee2:	b083      	sub	sp, #12
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
 800bee8:	460b      	mov	r3, r1
 800beea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
 800beec:	78fb      	ldrb	r3, [r7, #3]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d006      	beq.n	800bf00 <FLASH_ITConfig+0x20>
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 800bef2:	4b09      	ldr	r3, [pc, #36]	; (800bf18 <FLASH_ITConfig+0x38>)
 800bef4:	4a08      	ldr	r2, [pc, #32]	; (800bf18 <FLASH_ITConfig+0x38>)
 800bef6:	6911      	ldr	r1, [r2, #16]
 800bef8:	687a      	ldr	r2, [r7, #4]
 800befa:	430a      	orrs	r2, r1
 800befc:	611a      	str	r2, [r3, #16]
 800befe:	e006      	b.n	800bf0e <FLASH_ITConfig+0x2e>
  }
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(uint32_t)FLASH_IT;
 800bf00:	4b05      	ldr	r3, [pc, #20]	; (800bf18 <FLASH_ITConfig+0x38>)
 800bf02:	4a05      	ldr	r2, [pc, #20]	; (800bf18 <FLASH_ITConfig+0x38>)
 800bf04:	6911      	ldr	r1, [r2, #16]
 800bf06:	687a      	ldr	r2, [r7, #4]
 800bf08:	43d2      	mvns	r2, r2
 800bf0a:	400a      	ands	r2, r1
 800bf0c:	611a      	str	r2, [r3, #16]
  }
}
 800bf0e:	370c      	adds	r7, #12
 800bf10:	46bd      	mov	sp, r7
 800bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf16:	4770      	bx	lr
 800bf18:	40023c00 	.word	0x40023c00

0800bf1c <FLASH_GetFlagStatus>:
  *            @arg FLASH_FLAG_RDERR: FLASH (PCROP) Read Protection error flag (STM32F42/43xxx and STM32F401xx devices) 
  *            @arg FLASH_FLAG_BSY: FLASH Busy flag
  * @retval The new state of FLASH_FLAG (SET or RESET).
  */
FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b085      	sub	sp, #20
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800bf24:	2300      	movs	r3, #0
 800bf26:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));

  if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 800bf28:	4b08      	ldr	r3, [pc, #32]	; (800bf4c <FLASH_GetFlagStatus+0x30>)
 800bf2a:	68da      	ldr	r2, [r3, #12]
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	4013      	ands	r3, r2
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d002      	beq.n	800bf3a <FLASH_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 800bf34:	2301      	movs	r3, #1
 800bf36:	73fb      	strb	r3, [r7, #15]
 800bf38:	e001      	b.n	800bf3e <FLASH_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus; 
 800bf3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3714      	adds	r7, #20
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr
 800bf4c:	40023c00 	.word	0x40023c00

0800bf50 <FLASH_ClearFlag>:
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
  *            @arg FLASH_FLAG_RDERR: FLASH Read Protection error flag (STM32F42/43xxx and STM32F401xx devices)   
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 800bf50:	b480      	push	{r7}
 800bf52:	b083      	sub	sp, #12
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 800bf58:	4b03      	ldr	r3, [pc, #12]	; (800bf68 <FLASH_ClearFlag+0x18>)
 800bf5a:	687a      	ldr	r2, [r7, #4]
 800bf5c:	60da      	str	r2, [r3, #12]
}
 800bf5e:	370c      	adds	r7, #12
 800bf60:	46bd      	mov	sp, r7
 800bf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf66:	4770      	bx	lr
 800bf68:	40023c00 	.word	0x40023c00

0800bf6c <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_RD, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_GetStatus(void)
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	b083      	sub	sp, #12
 800bf70:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE;
 800bf72:	2309      	movs	r3, #9
 800bf74:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 800bf76:	4b1b      	ldr	r3, [pc, #108]	; (800bfe4 <FLASH_GetStatus+0x78>)
 800bf78:	68db      	ldr	r3, [r3, #12]
 800bf7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d002      	beq.n	800bf88 <FLASH_GetStatus+0x1c>
  {
    flashstatus = FLASH_BUSY;
 800bf82:	2301      	movs	r3, #1
 800bf84:	71fb      	strb	r3, [r7, #7]
 800bf86:	e025      	b.n	800bfd4 <FLASH_GetStatus+0x68>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 800bf88:	4b16      	ldr	r3, [pc, #88]	; (800bfe4 <FLASH_GetStatus+0x78>)
 800bf8a:	68db      	ldr	r3, [r3, #12]
 800bf8c:	f003 0310 	and.w	r3, r3, #16
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d002      	beq.n	800bf9a <FLASH_GetStatus+0x2e>
    { 
      flashstatus = FLASH_ERROR_WRP;
 800bf94:	2306      	movs	r3, #6
 800bf96:	71fb      	strb	r3, [r7, #7]
 800bf98:	e01c      	b.n	800bfd4 <FLASH_GetStatus+0x68>
    }
    else
    {
      if((FLASH->SR & FLASH_FLAG_RDERR) != (uint32_t)0x00)
 800bf9a:	4b12      	ldr	r3, [pc, #72]	; (800bfe4 <FLASH_GetStatus+0x78>)
 800bf9c:	68db      	ldr	r3, [r3, #12]
 800bf9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d002      	beq.n	800bfac <FLASH_GetStatus+0x40>
      { 
        flashstatus = FLASH_ERROR_RD;
 800bfa6:	2302      	movs	r3, #2
 800bfa8:	71fb      	strb	r3, [r7, #7]
 800bfaa:	e013      	b.n	800bfd4 <FLASH_GetStatus+0x68>
      } 
      else 
      {
        if((FLASH->SR & (uint32_t)0xEF) != (uint32_t)0x00)
 800bfac:	4b0d      	ldr	r3, [pc, #52]	; (800bfe4 <FLASH_GetStatus+0x78>)
 800bfae:	68db      	ldr	r3, [r3, #12]
 800bfb0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d002      	beq.n	800bfbe <FLASH_GetStatus+0x52>
        {
          flashstatus = FLASH_ERROR_PROGRAM; 
 800bfb8:	2307      	movs	r3, #7
 800bfba:	71fb      	strb	r3, [r7, #7]
 800bfbc:	e00a      	b.n	800bfd4 <FLASH_GetStatus+0x68>
        }
        else
        {
          if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 800bfbe:	4b09      	ldr	r3, [pc, #36]	; (800bfe4 <FLASH_GetStatus+0x78>)
 800bfc0:	68db      	ldr	r3, [r3, #12]
 800bfc2:	f003 0302 	and.w	r3, r3, #2
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d002      	beq.n	800bfd0 <FLASH_GetStatus+0x64>
          {
            flashstatus = FLASH_ERROR_OPERATION;
 800bfca:	2308      	movs	r3, #8
 800bfcc:	71fb      	strb	r3, [r7, #7]
 800bfce:	e001      	b.n	800bfd4 <FLASH_GetStatus+0x68>
          }
          else
          {
            flashstatus = FLASH_COMPLETE;
 800bfd0:	2309      	movs	r3, #9
 800bfd2:	71fb      	strb	r3, [r7, #7]
        }
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
 800bfd4:	79fb      	ldrb	r3, [r7, #7]
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	370c      	adds	r7, #12
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe0:	4770      	bx	lr
 800bfe2:	bf00      	nop
 800bfe4:	40023c00 	.word	0x40023c00

0800bfe8 <FLASH_WaitForLastOperation>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_WaitForLastOperation(void)
{ 
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b082      	sub	sp, #8
 800bfec:	af00      	add	r7, sp, #0
  __IO FLASH_Status status = FLASH_COMPLETE;
 800bfee:	2309      	movs	r3, #9
 800bff0:	71fb      	strb	r3, [r7, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 800bff2:	f7ff ffbb 	bl	800bf6c <FLASH_GetStatus>
 800bff6:	4603      	mov	r3, r0
 800bff8:	71fb      	strb	r3, [r7, #7]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 800bffa:	e003      	b.n	800c004 <FLASH_WaitForLastOperation+0x1c>
  {
    status = FLASH_GetStatus();
 800bffc:	f7ff ffb6 	bl	800bf6c <FLASH_GetStatus>
 800c000:	4603      	mov	r3, r0
 800c002:	71fb      	strb	r3, [r7, #7]
  status = FLASH_GetStatus();

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 800c004:	79fb      	ldrb	r3, [r7, #7]
 800c006:	b2db      	uxtb	r3, r3
 800c008:	2b01      	cmp	r3, #1
 800c00a:	d0f7      	beq.n	800bffc <FLASH_WaitForLastOperation+0x14>
  {
    status = FLASH_GetStatus();
  }
  /* Return the operation status */
  return status;
 800c00c:	79fb      	ldrb	r3, [r7, #7]
 800c00e:	b2db      	uxtb	r3, r3
}
 800c010:	4618      	mov	r0, r3
 800c012:	3708      	adds	r7, #8
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}

0800c018 <FMC_NORSRAMDeInit>:
  *            @arg FMC_Bank1_NORSRAM3: FMC Bank1 NOR/SRAM3 
  *            @arg FMC_Bank1_NORSRAM4: FMC Bank1 NOR/SRAM4 
  * @retval None
  */
void FMC_NORSRAMDeInit(uint32_t FMC_Bank)
{
 800c018:	b480      	push	{r7}
 800c01a:	b083      	sub	sp, #12
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_NORSRAM_BANK(FMC_Bank));
  
  /* FMC_Bank1_NORSRAM1 */
  if(FMC_Bank == FMC_Bank1_NORSRAM1)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d107      	bne.n	800c036 <FMC_NORSRAMDeInit+0x1e>
  {
    FMC_Bank1->BTCR[FMC_Bank] = 0x000030DB;    
 800c026:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800c02a:	687a      	ldr	r2, [r7, #4]
 800c02c:	f243 01db 	movw	r1, #12507	; 0x30db
 800c030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c034:	e006      	b.n	800c044 <FMC_NORSRAMDeInit+0x2c>
  }
  /* FMC_Bank1_NORSRAM2,  FMC_Bank1_NORSRAM3 or FMC_Bank1_NORSRAM4 */
  else
  {   
    FMC_Bank1->BTCR[FMC_Bank] = 0x000030D2; 
 800c036:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800c03a:	687a      	ldr	r2, [r7, #4]
 800c03c:	f243 01d2 	movw	r1, #12498	; 0x30d2
 800c040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  FMC_Bank1->BTCR[FMC_Bank + 1] = 0x0FFFFFFF;
 800c044:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800c048:	687a      	ldr	r2, [r7, #4]
 800c04a:	3201      	adds	r2, #1
 800c04c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800c050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  FMC_Bank1E->BWTR[FMC_Bank] = 0x0FFFFFFF;  
 800c054:	4b05      	ldr	r3, [pc, #20]	; (800c06c <FMC_NORSRAMDeInit+0x54>)
 800c056:	687a      	ldr	r2, [r7, #4]
 800c058:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800c05c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800c060:	370c      	adds	r7, #12
 800c062:	46bd      	mov	sp, r7
 800c064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c068:	4770      	bx	lr
 800c06a:	bf00      	nop
 800c06c:	a0000104 	.word	0xa0000104

0800c070 <FMC_NORSRAMInit>:
  *         that contains the configuration information for the FMC NOR/SRAM 
  *         specified Banks.                       
  * @retval None
  */
void FMC_NORSRAMInit(FMC_NORSRAMInitTypeDef* FMC_NORSRAMInitStruct)
{
 800c070:	b480      	push	{r7}
 800c072:	b085      	sub	sp, #20
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
  uint32_t tmpr = 0;
 800c078:	2300      	movs	r3, #0
 800c07a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision));
  assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode)); 
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 800c07c:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800c080:	687a      	ldr	r2, [r7, #4]
 800c082:	6812      	ldr	r2, [r2, #0]
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
 800c084:	6879      	ldr	r1, [r7, #4]
 800c086:	6848      	ldr	r0, [r1, #4]
            FMC_NORSRAMInitStruct->FMC_MemoryType |
 800c088:	6879      	ldr	r1, [r7, #4]
 800c08a:	6889      	ldr	r1, [r1, #8]
  assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode)); 
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
 800c08c:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_MemoryType |
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
 800c08e:	6879      	ldr	r1, [r7, #4]
 800c090:	68c9      	ldr	r1, [r1, #12]
  assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode)); 
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
            FMC_NORSRAMInitStruct->FMC_MemoryType |
 800c092:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
 800c094:	6879      	ldr	r1, [r7, #4]
 800c096:	6909      	ldr	r1, [r1, #16]
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
            FMC_NORSRAMInitStruct->FMC_MemoryType |
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
 800c098:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
 800c09a:	6879      	ldr	r1, [r7, #4]
 800c09c:	6949      	ldr	r1, [r1, #20]
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
            FMC_NORSRAMInitStruct->FMC_MemoryType |
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
 800c09e:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
 800c0a0:	6879      	ldr	r1, [r7, #4]
 800c0a2:	6989      	ldr	r1, [r1, #24]
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
            FMC_NORSRAMInitStruct->FMC_MemoryType |
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
 800c0a4:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
 800c0a6:	6879      	ldr	r1, [r7, #4]
 800c0a8:	69c9      	ldr	r1, [r1, #28]
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
            FMC_NORSRAMInitStruct->FMC_MemoryType |
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
 800c0aa:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
 800c0ac:	6879      	ldr	r1, [r7, #4]
 800c0ae:	6a09      	ldr	r1, [r1, #32]
            FMC_NORSRAMInitStruct->FMC_MemoryType |
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
 800c0b0:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
 800c0b2:	6879      	ldr	r1, [r7, #4]
 800c0b4:	6a49      	ldr	r1, [r1, #36]	; 0x24
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
 800c0b6:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
 800c0b8:	6879      	ldr	r1, [r7, #4]
 800c0ba:	6a89      	ldr	r1, [r1, #40]	; 0x28
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
 800c0bc:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
 800c0be:	6879      	ldr	r1, [r7, #4]
 800c0c0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
 800c0c2:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
            FMC_NORSRAMInitStruct->FMC_WriteBurst |
 800c0c4:	6879      	ldr	r1, [r7, #4]
 800c0c6:	6b09      	ldr	r1, [r1, #48]	; 0x30
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
 800c0c8:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_WriteBurst |
            FMC_NORSRAMInitStruct->FMC_ContinousClock;
 800c0ca:	6879      	ldr	r1, [r7, #4]
 800c0cc:	6b49      	ldr	r1, [r1, #52]	; 0x34
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
            FMC_NORSRAMInitStruct->FMC_WriteBurst |
 800c0ce:	4301      	orrs	r1, r0
  assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision));
  assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode)); 
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 800c0d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
            FMC_NORSRAMInitStruct->FMC_WriteBurst |
            FMC_NORSRAMInitStruct->FMC_ContinousClock;

            
  if(FMC_NORSRAMInitStruct->FMC_MemoryType == FMC_MemoryType_NOR)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	689b      	ldr	r3, [r3, #8]
 800c0d8:	2b08      	cmp	r3, #8
 800c0da:	d10d      	bne.n	800c0f8 <FMC_NORSRAMInit+0x88>
  {
    FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
 800c0dc:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800c0e0:	687a      	ldr	r2, [r7, #4]
 800c0e2:	6812      	ldr	r2, [r2, #0]
 800c0e4:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	6800      	ldr	r0, [r0, #0]
 800c0ec:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800c0f0:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800c0f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Configure Continuous clock feature when bank2..4 is used */
  if((FMC_NORSRAMInitStruct->FMC_ContinousClock == FMC_CClock_SyncAsync) && (FMC_NORSRAMInitStruct->FMC_Bank != FMC_Bank1_NORSRAM1))
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c100:	d124      	bne.n	800c14c <FMC_NORSRAMInit+0xdc>
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d020      	beq.n	800c14c <FMC_NORSRAMInit+0xdc>
  {
    tmpr = (uint32_t)((FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1]) & ~(((uint32_t)0x0F) << 20));    
 800c10a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800c10e:	685b      	ldr	r3, [r3, #4]
 800c110:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c114:	60fb      	str	r3, [r7, #12]
    
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_NORSRAMInitStruct->FMC_ContinousClock;
 800c116:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800c11a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800c11e:	6811      	ldr	r1, [r2, #0]
 800c120:	687a      	ldr	r2, [r7, #4]
 800c122:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c124:	430a      	orrs	r2, r1
 800c126:	601a      	str	r2, [r3, #0]
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_BurstAccessMode_Enable;
 800c128:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800c12c:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800c130:	6812      	ldr	r2, [r2, #0]
 800c132:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c136:	601a      	str	r2, [r3, #0]
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1] = (uint32_t)(tmpr | (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision)-1) << 20));
 800c138:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800c13c:	687a      	ldr	r2, [r7, #4]
 800c13e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c140:	6912      	ldr	r2, [r2, #16]
 800c142:	3a01      	subs	r2, #1
 800c144:	0511      	lsls	r1, r2, #20
 800c146:	68fa      	ldr	r2, [r7, #12]
 800c148:	430a      	orrs	r2, r1
 800c14a:	605a      	str	r2, [r3, #4]
  }
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
 800c14c:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800c150:	687a      	ldr	r2, [r7, #4]
 800c152:	6812      	ldr	r2, [r2, #0]
 800c154:	3201      	adds	r2, #1
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
 800c156:	6879      	ldr	r1, [r7, #4]
 800c158:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800c15a:	6808      	ldr	r0, [r1, #0]
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
 800c15c:	6879      	ldr	r1, [r7, #4]
 800c15e:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800c160:	6849      	ldr	r1, [r1, #4]
 800c162:	0109      	lsls	r1, r1, #4
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1] = (uint32_t)(tmpr | (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision)-1) << 20));
  }
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
 800c164:	4308      	orrs	r0, r1
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
 800c166:	6879      	ldr	r1, [r7, #4]
 800c168:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800c16a:	6889      	ldr	r1, [r1, #8]
 800c16c:	0209      	lsls	r1, r1, #8
  }
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
 800c16e:	4308      	orrs	r0, r1
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
 800c170:	6879      	ldr	r1, [r7, #4]
 800c172:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800c174:	68c9      	ldr	r1, [r1, #12]
 800c176:	0409      	lsls	r1, r1, #16
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
 800c178:	4308      	orrs	r0, r1
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
 800c17a:	6879      	ldr	r1, [r7, #4]
 800c17c:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800c17e:	6909      	ldr	r1, [r1, #16]
 800c180:	0509      	lsls	r1, r1, #20
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
 800c182:	4308      	orrs	r0, r1
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency) << 24) |
 800c184:	6879      	ldr	r1, [r7, #4]
 800c186:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800c188:	6949      	ldr	r1, [r1, #20]
 800c18a:	0609      	lsls	r1, r1, #24
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
 800c18c:	4308      	orrs	r0, r1
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency) << 24) |
             FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode;
 800c18e:	6879      	ldr	r1, [r7, #4]
 800c190:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800c192:	6989      	ldr	r1, [r1, #24]
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency) << 24) |
 800c194:	4301      	orrs	r1, r0
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_BurstAccessMode_Enable;
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1] = (uint32_t)(tmpr | (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision)-1) << 20));
  }
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
 800c196:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency) << 24) |
             FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode;
     
  /* NOR/SRAM Bank timing register for write configuration, if extended mode is used */
  if(FMC_NORSRAMInitStruct->FMC_ExtendedMode == FMC_ExtendedMode_Enable)
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c19e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c1a2:	d120      	bne.n	800c1e6 <FMC_NORSRAMInit+0x176>
    assert_param(IS_FMC_DATASETUP_TIME(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime));
    assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision));
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 800c1a4:	4b16      	ldr	r3, [pc, #88]	; (800c200 <FMC_NORSRAMInit+0x190>)
 800c1a6:	687a      	ldr	r2, [r7, #4]
 800c1a8:	6812      	ldr	r2, [r2, #0]
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
 800c1aa:	6879      	ldr	r1, [r7, #4]
 800c1ac:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800c1ae:	6808      	ldr	r0, [r1, #0]
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
 800c1b0:	6879      	ldr	r1, [r7, #4]
 800c1b2:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800c1b4:	6849      	ldr	r1, [r1, #4]
 800c1b6:	0109      	lsls	r1, r1, #4
    assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision));
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
 800c1b8:	4308      	orrs	r0, r1
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
 800c1ba:	6879      	ldr	r1, [r7, #4]
 800c1bc:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800c1be:	6889      	ldr	r1, [r1, #8]
 800c1c0:	0209      	lsls	r1, r1, #8
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
 800c1c2:	4308      	orrs	r0, r1
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision) << 20) |
 800c1c4:	6879      	ldr	r1, [r7, #4]
 800c1c6:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800c1c8:	6909      	ldr	r1, [r1, #16]
 800c1ca:	0509      	lsls	r1, r1, #20
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
 800c1cc:	4308      	orrs	r0, r1
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision) << 20) |
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency) << 24) |
 800c1ce:	6879      	ldr	r1, [r7, #4]
 800c1d0:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800c1d2:	6949      	ldr	r1, [r1, #20]
 800c1d4:	0609      	lsls	r1, r1, #24
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision) << 20) |
 800c1d6:	4308      	orrs	r0, r1
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency) << 24) |
               FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode;
 800c1d8:	6879      	ldr	r1, [r7, #4]
 800c1da:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800c1dc:	6989      	ldr	r1, [r1, #24]
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision) << 20) |
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency) << 24) |
 800c1de:	4301      	orrs	r1, r0
    assert_param(IS_FMC_DATASETUP_TIME(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime));
    assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision));
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 800c1e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c1e4:	e006      	b.n	800c1f4 <FMC_NORSRAMInit+0x184>
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency) << 24) |
               FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode;
  }
  else
  {
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] = 0x0FFFFFFF;
 800c1e6:	4b06      	ldr	r3, [pc, #24]	; (800c200 <FMC_NORSRAMInit+0x190>)
 800c1e8:	687a      	ldr	r2, [r7, #4]
 800c1ea:	6812      	ldr	r2, [r2, #0]
 800c1ec:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800c1f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  
}
 800c1f4:	3714      	adds	r7, #20
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fc:	4770      	bx	lr
 800c1fe:	bf00      	nop
 800c200:	a0000104 	.word	0xa0000104

0800c204 <FMC_NORSRAMStructInit>:
  * @param  FMC_NORSRAMInitStruct: pointer to a FMC_NORSRAMInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void FMC_NORSRAMStructInit(FMC_NORSRAMInitTypeDef* FMC_NORSRAMInitStruct)
{  
 800c204:	b480      	push	{r7}
 800c206:	b083      	sub	sp, #12
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
  /* Reset NOR/SRAM Init structure parameters values */
  FMC_NORSRAMInitStruct->FMC_Bank = FMC_Bank1_NORSRAM1;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2200      	movs	r2, #0
 800c210:	601a      	str	r2, [r3, #0]
  FMC_NORSRAMInitStruct->FMC_DataAddressMux = FMC_DataAddressMux_Enable;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2202      	movs	r2, #2
 800c216:	605a      	str	r2, [r3, #4]
  FMC_NORSRAMInitStruct->FMC_MemoryType = FMC_MemoryType_SRAM;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2200      	movs	r2, #0
 800c21c:	609a      	str	r2, [r3, #8]
  FMC_NORSRAMInitStruct->FMC_MemoryDataWidth = FMC_NORSRAM_MemoryDataWidth_16b;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2210      	movs	r2, #16
 800c222:	60da      	str	r2, [r3, #12]
  FMC_NORSRAMInitStruct->FMC_BurstAccessMode = FMC_BurstAccessMode_Disable;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2200      	movs	r2, #0
 800c228:	611a      	str	r2, [r3, #16]
  FMC_NORSRAMInitStruct->FMC_AsynchronousWait = FMC_AsynchronousWait_Disable;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2200      	movs	r2, #0
 800c22e:	62da      	str	r2, [r3, #44]	; 0x2c
  FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity = FMC_WaitSignalPolarity_Low;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2200      	movs	r2, #0
 800c234:	615a      	str	r2, [r3, #20]
  FMC_NORSRAMInitStruct->FMC_WrapMode = FMC_WrapMode_Disable;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2200      	movs	r2, #0
 800c23a:	619a      	str	r2, [r3, #24]
  FMC_NORSRAMInitStruct->FMC_WaitSignalActive = FMC_WaitSignalActive_BeforeWaitState;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2200      	movs	r2, #0
 800c240:	61da      	str	r2, [r3, #28]
  FMC_NORSRAMInitStruct->FMC_WriteOperation = FMC_WriteOperation_Enable;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c248:	621a      	str	r2, [r3, #32]
  FMC_NORSRAMInitStruct->FMC_WaitSignal = FMC_WaitSignal_Enable;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c250:	625a      	str	r2, [r3, #36]	; 0x24
  FMC_NORSRAMInitStruct->FMC_ExtendedMode = FMC_ExtendedMode_Disable;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2200      	movs	r2, #0
 800c256:	629a      	str	r2, [r3, #40]	; 0x28
  FMC_NORSRAMInitStruct->FMC_WriteBurst = FMC_WriteBurst_Disable;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2200      	movs	r2, #0
 800c25c:	631a      	str	r2, [r3, #48]	; 0x30
  FMC_NORSRAMInitStruct->FMC_ContinousClock = FMC_CClock_SyncOnly;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2200      	movs	r2, #0
 800c262:	635a      	str	r2, [r3, #52]	; 0x34
  
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime = 15;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c268:	220f      	movs	r2, #15
 800c26a:	601a      	str	r2, [r3, #0]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime = 15;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c270:	220f      	movs	r2, #15
 800c272:	605a      	str	r2, [r3, #4]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime = 255;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c278:	22ff      	movs	r2, #255	; 0xff
 800c27a:	609a      	str	r2, [r3, #8]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration = 15;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c280:	220f      	movs	r2, #15
 800c282:	60da      	str	r2, [r3, #12]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision = 15;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c288:	220f      	movs	r2, #15
 800c28a:	611a      	str	r2, [r3, #16]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency = 15;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c290:	220f      	movs	r2, #15
 800c292:	615a      	str	r2, [r3, #20]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode = FMC_AccessMode_A; 
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c298:	2200      	movs	r2, #0
 800c29a:	619a      	str	r2, [r3, #24]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime = 15;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2a0:	220f      	movs	r2, #15
 800c2a2:	601a      	str	r2, [r3, #0]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime = 15;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2a8:	220f      	movs	r2, #15
 800c2aa:	605a      	str	r2, [r3, #4]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime = 255;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2b0:	22ff      	movs	r2, #255	; 0xff
 800c2b2:	609a      	str	r2, [r3, #8]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_BusTurnAroundDuration = 15;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2b8:	220f      	movs	r2, #15
 800c2ba:	60da      	str	r2, [r3, #12]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision = 15;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2c0:	220f      	movs	r2, #15
 800c2c2:	611a      	str	r2, [r3, #16]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency = 15;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2c8:	220f      	movs	r2, #15
 800c2ca:	615a      	str	r2, [r3, #20]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode = FMC_AccessMode_A;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	619a      	str	r2, [r3, #24]
}
 800c2d4:	370c      	adds	r7, #12
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2dc:	4770      	bx	lr
 800c2de:	bf00      	nop

0800c2e0 <FMC_NORSRAMCmd>:
  *            @arg FMC_Bank1_NORSRAM4: FMC Bank1 NOR/SRAM4 
  * @param  NewState: new state of the FMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_NORSRAMCmd(uint32_t FMC_Bank, FunctionalState NewState)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b083      	sub	sp, #12
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
 800c2e8:	460b      	mov	r3, r1
 800c2ea:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FMC_NORSRAM_BANK(FMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800c2ec:	78fb      	ldrb	r3, [r7, #3]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d00c      	beq.n	800c30c <FMC_NORSRAMCmd+0x2c>
  {
    /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
    FMC_Bank1->BTCR[FMC_Bank] |= BCR_MBKEN_SET;
 800c2f2:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800c2f6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800c2fa:	6879      	ldr	r1, [r7, #4]
 800c2fc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c300:	f042 0101 	orr.w	r1, r2, #1
 800c304:	687a      	ldr	r2, [r7, #4]
 800c306:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c30a:	e00b      	b.n	800c324 <FMC_NORSRAMCmd+0x44>
  }
  else
  {
    /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
    FMC_Bank1->BTCR[FMC_Bank] &= BCR_MBKEN_RESET;
 800c30c:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800c310:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800c314:	6879      	ldr	r1, [r7, #4]
 800c316:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800c31a:	4b05      	ldr	r3, [pc, #20]	; (800c330 <FMC_NORSRAMCmd+0x50>)
 800c31c:	400b      	ands	r3, r1
 800c31e:	6879      	ldr	r1, [r7, #4]
 800c320:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  }
}
 800c324:	370c      	adds	r7, #12
 800c326:	46bd      	mov	sp, r7
 800c328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32c:	4770      	bx	lr
 800c32e:	bf00      	nop
 800c330:	000ffffe 	.word	0x000ffffe

0800c334 <FMC_NANDDeInit>:
  *            @arg FMC_Bank2_NAND: FMC Bank2 NAND 
  *            @arg FMC_Bank3_NAND: FMC Bank3 NAND 
  * @retval None
  */
void FMC_NANDDeInit(uint32_t FMC_Bank)
{
 800c334:	b480      	push	{r7}
 800c336:	b083      	sub	sp, #12
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_NAND_BANK(FMC_Bank));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2b10      	cmp	r3, #16
 800c340:	d10e      	bne.n	800c360 <FMC_NANDDeInit+0x2c>
  {
    /* Set the FMC_Bank2 registers to their reset values */
    FMC_Bank2->PCR2 = 0x00000018;
 800c342:	4b11      	ldr	r3, [pc, #68]	; (800c388 <FMC_NANDDeInit+0x54>)
 800c344:	2218      	movs	r2, #24
 800c346:	601a      	str	r2, [r3, #0]
    FMC_Bank2->SR2 = 0x00000040;
 800c348:	4b0f      	ldr	r3, [pc, #60]	; (800c388 <FMC_NANDDeInit+0x54>)
 800c34a:	2240      	movs	r2, #64	; 0x40
 800c34c:	605a      	str	r2, [r3, #4]
    FMC_Bank2->PMEM2 = 0xFCFCFCFC;
 800c34e:	4b0e      	ldr	r3, [pc, #56]	; (800c388 <FMC_NANDDeInit+0x54>)
 800c350:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800c354:	609a      	str	r2, [r3, #8]
    FMC_Bank2->PATT2 = 0xFCFCFCFC;  
 800c356:	4b0c      	ldr	r3, [pc, #48]	; (800c388 <FMC_NANDDeInit+0x54>)
 800c358:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800c35c:	60da      	str	r2, [r3, #12]
 800c35e:	e00d      	b.n	800c37c <FMC_NANDDeInit+0x48>
  }
  /* FMC_Bank3_NAND */  
  else
  {
    /* Set the FMC_Bank3 registers to their reset values */
    FMC_Bank3->PCR3 = 0x00000018;
 800c360:	4b0a      	ldr	r3, [pc, #40]	; (800c38c <FMC_NANDDeInit+0x58>)
 800c362:	2218      	movs	r2, #24
 800c364:	601a      	str	r2, [r3, #0]
    FMC_Bank3->SR3 = 0x00000040;
 800c366:	4b09      	ldr	r3, [pc, #36]	; (800c38c <FMC_NANDDeInit+0x58>)
 800c368:	2240      	movs	r2, #64	; 0x40
 800c36a:	605a      	str	r2, [r3, #4]
    FMC_Bank3->PMEM3 = 0xFCFCFCFC;
 800c36c:	4b07      	ldr	r3, [pc, #28]	; (800c38c <FMC_NANDDeInit+0x58>)
 800c36e:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800c372:	609a      	str	r2, [r3, #8]
    FMC_Bank3->PATT3 = 0xFCFCFCFC; 
 800c374:	4b05      	ldr	r3, [pc, #20]	; (800c38c <FMC_NANDDeInit+0x58>)
 800c376:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800c37a:	60da      	str	r2, [r3, #12]
  }  
}
 800c37c:	370c      	adds	r7, #12
 800c37e:	46bd      	mov	sp, r7
 800c380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c384:	4770      	bx	lr
 800c386:	bf00      	nop
 800c388:	a0000060 	.word	0xa0000060
 800c38c:	a0000080 	.word	0xa0000080

0800c390 <FMC_NANDInit>:
  * @param  FMC_NANDInitStruct : pointer to a FMC_NANDInitTypeDef structure that
  *         contains the configuration information for the FMC NAND specified Banks.                       
  * @retval None
  */
void FMC_NANDInit(FMC_NANDInitTypeDef* FMC_NANDInitStruct)
{
 800c390:	b480      	push	{r7}
 800c392:	b087      	sub	sp, #28
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  uint32_t tmppcr = 0x00000000, tmppmem = 0x00000000, tmppatt = 0x00000000; 
 800c398:	2300      	movs	r3, #0
 800c39a:	617b      	str	r3, [r7, #20]
 800c39c:	2300      	movs	r3, #0
 800c39e:	613b      	str	r3, [r7, #16]
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FMC_WAIT_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	685a      	ldr	r2, [r3, #4]
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	689b      	ldr	r3, [r3, #8]
  assert_param(IS_FMC_HOLD_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
 800c3ac:	431a      	orrs	r2, r3
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
            FMC_NANDInitStruct->FMC_ECC |
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	68db      	ldr	r3, [r3, #12]
  assert_param(IS_FMC_HIZ_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
 800c3b2:	431a      	orrs	r2, r3
            FMC_NANDInitStruct->FMC_ECC |
            FMC_NANDInitStruct->FMC_ECCPageSize |
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	691b      	ldr	r3, [r3, #16]
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
            FMC_NANDInitStruct->FMC_ECC |
 800c3b8:	431a      	orrs	r2, r3
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	695b      	ldr	r3, [r3, #20]
 800c3be:	025b      	lsls	r3, r3, #9
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
            FMC_NANDInitStruct->FMC_ECC |
            FMC_NANDInitStruct->FMC_ECCPageSize |
 800c3c0:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	699b      	ldr	r3, [r3, #24]
 800c3c6:	035b      	lsls	r3, r3, #13
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
            FMC_NANDInitStruct->FMC_ECC |
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
 800c3c8:	4313      	orrs	r3, r2
  assert_param(IS_FMC_WAIT_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
 800c3ca:	f043 0308 	orr.w	r3, r3, #8
 800c3ce:	617b      	str	r3, [r7, #20]
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	69db      	ldr	r3, [r3, #28]
 800c3d4:	681a      	ldr	r2, [r3, #0]
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	69db      	ldr	r3, [r3, #28]
 800c3da:	685b      	ldr	r3, [r3, #4]
 800c3dc:	021b      	lsls	r3, r3, #8
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 800c3de:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	69db      	ldr	r3, [r3, #28]
 800c3e4:	689b      	ldr	r3, [r3, #8]
 800c3e6:	041b      	lsls	r3, r3, #16
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800c3e8:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	69db      	ldr	r3, [r3, #28]
 800c3ee:	68db      	ldr	r3, [r3, #12]
 800c3f0:	061b      	lsls	r3, r3, #24
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 800c3f2:	4313      	orrs	r3, r2
 800c3f4:	613b      	str	r3, [r7, #16]
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6a1b      	ldr	r3, [r3, #32]
 800c3fa:	681a      	ldr	r2, [r3, #0]
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6a1b      	ldr	r3, [r3, #32]
 800c400:	685b      	ldr	r3, [r3, #4]
 800c402:	021b      	lsls	r3, r3, #8
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 800c404:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6a1b      	ldr	r3, [r3, #32]
 800c40a:	689b      	ldr	r3, [r3, #8]
 800c40c:	041b      	lsls	r3, r3, #16
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800c40e:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6a1b      	ldr	r3, [r3, #32]
 800c414:	68db      	ldr	r3, [r3, #12]
 800c416:	061b      	lsls	r3, r3, #24
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 800c418:	4313      	orrs	r3, r2
 800c41a:	60fb      	str	r3, [r7, #12]
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);
  
  if(FMC_NANDInitStruct->FMC_Bank == FMC_Bank2_NAND)
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	2b10      	cmp	r3, #16
 800c422:	d109      	bne.n	800c438 <FMC_NANDInit+0xa8>
  {
    /* FMC_Bank2_NAND registers configuration */
    FMC_Bank2->PCR2 = tmppcr;
 800c424:	4b0b      	ldr	r3, [pc, #44]	; (800c454 <FMC_NANDInit+0xc4>)
 800c426:	697a      	ldr	r2, [r7, #20]
 800c428:	601a      	str	r2, [r3, #0]
    FMC_Bank2->PMEM2 = tmppmem;
 800c42a:	4b0a      	ldr	r3, [pc, #40]	; (800c454 <FMC_NANDInit+0xc4>)
 800c42c:	693a      	ldr	r2, [r7, #16]
 800c42e:	609a      	str	r2, [r3, #8]
    FMC_Bank2->PATT2 = tmppatt;
 800c430:	4b08      	ldr	r3, [pc, #32]	; (800c454 <FMC_NANDInit+0xc4>)
 800c432:	68fa      	ldr	r2, [r7, #12]
 800c434:	60da      	str	r2, [r3, #12]
 800c436:	e008      	b.n	800c44a <FMC_NANDInit+0xba>
  }
  else
  {
    /* FMC_Bank3_NAND registers configuration */
    FMC_Bank3->PCR3 = tmppcr;
 800c438:	4b07      	ldr	r3, [pc, #28]	; (800c458 <FMC_NANDInit+0xc8>)
 800c43a:	697a      	ldr	r2, [r7, #20]
 800c43c:	601a      	str	r2, [r3, #0]
    FMC_Bank3->PMEM3 = tmppmem;
 800c43e:	4b06      	ldr	r3, [pc, #24]	; (800c458 <FMC_NANDInit+0xc8>)
 800c440:	693a      	ldr	r2, [r7, #16]
 800c442:	609a      	str	r2, [r3, #8]
    FMC_Bank3->PATT3 = tmppatt;
 800c444:	4b04      	ldr	r3, [pc, #16]	; (800c458 <FMC_NANDInit+0xc8>)
 800c446:	68fa      	ldr	r2, [r7, #12]
 800c448:	60da      	str	r2, [r3, #12]
  }
}
 800c44a:	371c      	adds	r7, #28
 800c44c:	46bd      	mov	sp, r7
 800c44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c452:	4770      	bx	lr
 800c454:	a0000060 	.word	0xa0000060
 800c458:	a0000080 	.word	0xa0000080

0800c45c <FMC_NANDStructInit>:
  * @param  FMC_NANDInitStruct: pointer to a FMC_NANDInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void FMC_NANDStructInit(FMC_NANDInitTypeDef* FMC_NANDInitStruct)
{ 
 800c45c:	b480      	push	{r7}
 800c45e:	b083      	sub	sp, #12
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
  /* Reset NAND Init structure parameters values */
  FMC_NANDInitStruct->FMC_Bank = FMC_Bank2_NAND;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2210      	movs	r2, #16
 800c468:	601a      	str	r2, [r3, #0]
  FMC_NANDInitStruct->FMC_Waitfeature = FMC_Waitfeature_Disable;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2200      	movs	r2, #0
 800c46e:	605a      	str	r2, [r3, #4]
  FMC_NANDInitStruct->FMC_MemoryDataWidth = FMC_NAND_MemoryDataWidth_16b;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2210      	movs	r2, #16
 800c474:	609a      	str	r2, [r3, #8]
  FMC_NANDInitStruct->FMC_ECC = FMC_ECC_Disable;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2200      	movs	r2, #0
 800c47a:	60da      	str	r2, [r3, #12]
  FMC_NANDInitStruct->FMC_ECCPageSize = FMC_ECCPageSize_256Bytes;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2200      	movs	r2, #0
 800c480:	611a      	str	r2, [r3, #16]
  FMC_NANDInitStruct->FMC_TCLRSetupTime = 0x0;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2200      	movs	r2, #0
 800c486:	615a      	str	r2, [r3, #20]
  FMC_NANDInitStruct->FMC_TARSetupTime = 0x0;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2200      	movs	r2, #0
 800c48c:	619a      	str	r2, [r3, #24]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime = 252;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	69db      	ldr	r3, [r3, #28]
 800c492:	22fc      	movs	r2, #252	; 0xfc
 800c494:	601a      	str	r2, [r3, #0]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime = 252;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	69db      	ldr	r3, [r3, #28]
 800c49a:	22fc      	movs	r2, #252	; 0xfc
 800c49c:	605a      	str	r2, [r3, #4]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime = 252;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	69db      	ldr	r3, [r3, #28]
 800c4a2:	22fc      	movs	r2, #252	; 0xfc
 800c4a4:	609a      	str	r2, [r3, #8]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime = 252;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	69db      	ldr	r3, [r3, #28]
 800c4aa:	22fc      	movs	r2, #252	; 0xfc
 800c4ac:	60da      	str	r2, [r3, #12]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime = 252;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6a1b      	ldr	r3, [r3, #32]
 800c4b2:	22fc      	movs	r2, #252	; 0xfc
 800c4b4:	601a      	str	r2, [r3, #0]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime = 252;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6a1b      	ldr	r3, [r3, #32]
 800c4ba:	22fc      	movs	r2, #252	; 0xfc
 800c4bc:	605a      	str	r2, [r3, #4]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime = 252;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6a1b      	ldr	r3, [r3, #32]
 800c4c2:	22fc      	movs	r2, #252	; 0xfc
 800c4c4:	609a      	str	r2, [r3, #8]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime = 252;	  
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6a1b      	ldr	r3, [r3, #32]
 800c4ca:	22fc      	movs	r2, #252	; 0xfc
 800c4cc:	60da      	str	r2, [r3, #12]
}
 800c4ce:	370c      	adds	r7, #12
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d6:	4770      	bx	lr

0800c4d8 <FMC_NANDCmd>:
  *            @arg FMC_Bank3_NAND: FMC Bank3 NAND
  * @param  NewState: new state of the FMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_NANDCmd(uint32_t FMC_Bank, FunctionalState NewState)
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b083      	sub	sp, #12
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
 800c4e0:	460b      	mov	r3, r1
 800c4e2:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FMC_NAND_BANK(FMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800c4e4:	78fb      	ldrb	r3, [r7, #3]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d010      	beq.n	800c50c <FMC_NANDCmd+0x34>
  {
    /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
    if(FMC_Bank == FMC_Bank2_NAND)
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2b10      	cmp	r3, #16
 800c4ee:	d106      	bne.n	800c4fe <FMC_NANDCmd+0x26>
    {
      FMC_Bank2->PCR2 |= PCR_PBKEN_SET;
 800c4f0:	4b11      	ldr	r3, [pc, #68]	; (800c538 <FMC_NANDCmd+0x60>)
 800c4f2:	4a11      	ldr	r2, [pc, #68]	; (800c538 <FMC_NANDCmd+0x60>)
 800c4f4:	6812      	ldr	r2, [r2, #0]
 800c4f6:	f042 0204 	orr.w	r2, r2, #4
 800c4fa:	601a      	str	r2, [r3, #0]
 800c4fc:	e016      	b.n	800c52c <FMC_NANDCmd+0x54>
    }
    else
    {
      FMC_Bank3->PCR3 |= PCR_PBKEN_SET;
 800c4fe:	4b0f      	ldr	r3, [pc, #60]	; (800c53c <FMC_NANDCmd+0x64>)
 800c500:	4a0e      	ldr	r2, [pc, #56]	; (800c53c <FMC_NANDCmd+0x64>)
 800c502:	6812      	ldr	r2, [r2, #0]
 800c504:	f042 0204 	orr.w	r2, r2, #4
 800c508:	601a      	str	r2, [r3, #0]
 800c50a:	e00f      	b.n	800c52c <FMC_NANDCmd+0x54>
    }
  }
  else
  {
    /* Disable the selected NAND Bank by clearing the PBKEN bit in the PCRx register */
    if(FMC_Bank == FMC_Bank2_NAND)
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2b10      	cmp	r3, #16
 800c510:	d106      	bne.n	800c520 <FMC_NANDCmd+0x48>
    {
      FMC_Bank2->PCR2 &= PCR_PBKEN_RESET;
 800c512:	4a09      	ldr	r2, [pc, #36]	; (800c538 <FMC_NANDCmd+0x60>)
 800c514:	4b08      	ldr	r3, [pc, #32]	; (800c538 <FMC_NANDCmd+0x60>)
 800c516:	6819      	ldr	r1, [r3, #0]
 800c518:	4b09      	ldr	r3, [pc, #36]	; (800c540 <FMC_NANDCmd+0x68>)
 800c51a:	400b      	ands	r3, r1
 800c51c:	6013      	str	r3, [r2, #0]
 800c51e:	e005      	b.n	800c52c <FMC_NANDCmd+0x54>
    }
    else
    {
      FMC_Bank3->PCR3 &= PCR_PBKEN_RESET;
 800c520:	4a06      	ldr	r2, [pc, #24]	; (800c53c <FMC_NANDCmd+0x64>)
 800c522:	4b06      	ldr	r3, [pc, #24]	; (800c53c <FMC_NANDCmd+0x64>)
 800c524:	6819      	ldr	r1, [r3, #0]
 800c526:	4b06      	ldr	r3, [pc, #24]	; (800c540 <FMC_NANDCmd+0x68>)
 800c528:	400b      	ands	r3, r1
 800c52a:	6013      	str	r3, [r2, #0]
    }
  }
}
 800c52c:	370c      	adds	r7, #12
 800c52e:	46bd      	mov	sp, r7
 800c530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c534:	4770      	bx	lr
 800c536:	bf00      	nop
 800c538:	a0000060 	.word	0xa0000060
 800c53c:	a0000080 	.word	0xa0000080
 800c540:	000ffffb 	.word	0x000ffffb

0800c544 <FMC_NANDECCCmd>:
  * @param  NewState: new state of the FMC NAND ECC feature.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_NANDECCCmd(uint32_t FMC_Bank, FunctionalState NewState)
{
 800c544:	b480      	push	{r7}
 800c546:	b083      	sub	sp, #12
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	460b      	mov	r3, r1
 800c54e:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FMC_NAND_BANK(FMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800c550:	78fb      	ldrb	r3, [r7, #3]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d010      	beq.n	800c578 <FMC_NANDECCCmd+0x34>
  {
    /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
    if(FMC_Bank == FMC_Bank2_NAND)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2b10      	cmp	r3, #16
 800c55a:	d106      	bne.n	800c56a <FMC_NANDECCCmd+0x26>
    {
      FMC_Bank2->PCR2 |= PCR_ECCEN_SET;
 800c55c:	4b11      	ldr	r3, [pc, #68]	; (800c5a4 <FMC_NANDECCCmd+0x60>)
 800c55e:	4a11      	ldr	r2, [pc, #68]	; (800c5a4 <FMC_NANDECCCmd+0x60>)
 800c560:	6812      	ldr	r2, [r2, #0]
 800c562:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c566:	601a      	str	r2, [r3, #0]
 800c568:	e016      	b.n	800c598 <FMC_NANDECCCmd+0x54>
    }
    else
    {
      FMC_Bank3->PCR3 |= PCR_ECCEN_SET;
 800c56a:	4b0f      	ldr	r3, [pc, #60]	; (800c5a8 <FMC_NANDECCCmd+0x64>)
 800c56c:	4a0e      	ldr	r2, [pc, #56]	; (800c5a8 <FMC_NANDECCCmd+0x64>)
 800c56e:	6812      	ldr	r2, [r2, #0]
 800c570:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c574:	601a      	str	r2, [r3, #0]
 800c576:	e00f      	b.n	800c598 <FMC_NANDECCCmd+0x54>
    }
  }
  else
  {
    /* Disable the selected NAND Bank ECC function by clearing the ECCEN bit in the PCRx register */
    if(FMC_Bank == FMC_Bank2_NAND)
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2b10      	cmp	r3, #16
 800c57c:	d106      	bne.n	800c58c <FMC_NANDECCCmd+0x48>
    {
      FMC_Bank2->PCR2 &= PCR_ECCEN_RESET;
 800c57e:	4a09      	ldr	r2, [pc, #36]	; (800c5a4 <FMC_NANDECCCmd+0x60>)
 800c580:	4b08      	ldr	r3, [pc, #32]	; (800c5a4 <FMC_NANDECCCmd+0x60>)
 800c582:	6819      	ldr	r1, [r3, #0]
 800c584:	4b09      	ldr	r3, [pc, #36]	; (800c5ac <FMC_NANDECCCmd+0x68>)
 800c586:	400b      	ands	r3, r1
 800c588:	6013      	str	r3, [r2, #0]
 800c58a:	e005      	b.n	800c598 <FMC_NANDECCCmd+0x54>
    }
    else
    {
      FMC_Bank3->PCR3 &= PCR_ECCEN_RESET;
 800c58c:	4a06      	ldr	r2, [pc, #24]	; (800c5a8 <FMC_NANDECCCmd+0x64>)
 800c58e:	4b06      	ldr	r3, [pc, #24]	; (800c5a8 <FMC_NANDECCCmd+0x64>)
 800c590:	6819      	ldr	r1, [r3, #0]
 800c592:	4b06      	ldr	r3, [pc, #24]	; (800c5ac <FMC_NANDECCCmd+0x68>)
 800c594:	400b      	ands	r3, r1
 800c596:	6013      	str	r3, [r2, #0]
    }
  }
}
 800c598:	370c      	adds	r7, #12
 800c59a:	46bd      	mov	sp, r7
 800c59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a0:	4770      	bx	lr
 800c5a2:	bf00      	nop
 800c5a4:	a0000060 	.word	0xa0000060
 800c5a8:	a0000080 	.word	0xa0000080
 800c5ac:	000fffbf 	.word	0x000fffbf

0800c5b0 <FMC_GetECC>:
  *            @arg FMC_Bank2_NAND: FMC Bank2 NAND 
  *            @arg FMC_Bank3_NAND: FMC Bank3 NAND
  * @retval The Error Correction Code (ECC) value.
  */
uint32_t FMC_GetECC(uint32_t FMC_Bank)
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	b085      	sub	sp, #20
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
  uint32_t eccval = 0x00000000;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	60fb      	str	r3, [r7, #12]
  
  if(FMC_Bank == FMC_Bank2_NAND)
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2b10      	cmp	r3, #16
 800c5c0:	d103      	bne.n	800c5ca <FMC_GetECC+0x1a>
  {
    /* Get the ECCR2 register value */
    eccval = FMC_Bank2->ECCR2;
 800c5c2:	4b07      	ldr	r3, [pc, #28]	; (800c5e0 <FMC_GetECC+0x30>)
 800c5c4:	695b      	ldr	r3, [r3, #20]
 800c5c6:	60fb      	str	r3, [r7, #12]
 800c5c8:	e002      	b.n	800c5d0 <FMC_GetECC+0x20>
  }
  else
  {
    /* Get the ECCR3 register value */
    eccval = FMC_Bank3->ECCR3;
 800c5ca:	4b06      	ldr	r3, [pc, #24]	; (800c5e4 <FMC_GetECC+0x34>)
 800c5cc:	695b      	ldr	r3, [r3, #20]
 800c5ce:	60fb      	str	r3, [r7, #12]
  }
  /* Return the error correction code value */
  return(eccval);
 800c5d0:	68fb      	ldr	r3, [r7, #12]
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3714      	adds	r7, #20
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5dc:	4770      	bx	lr
 800c5de:	bf00      	nop
 800c5e0:	a0000060 	.word	0xa0000060
 800c5e4:	a0000080 	.word	0xa0000080

0800c5e8 <FMC_PCCARDDeInit>:
  * @brief  De-initializes the FMC PCCARD Bank registers to their default reset values.
  * @param  None                       
  * @retval None
  */
void FMC_PCCARDDeInit(void)
{
 800c5e8:	b480      	push	{r7}
 800c5ea:	af00      	add	r7, sp, #0
  /* Set the FMC_Bank4 registers to their reset values */
  FMC_Bank4->PCR4 = 0x00000018; 
 800c5ec:	4b0a      	ldr	r3, [pc, #40]	; (800c618 <FMC_PCCARDDeInit+0x30>)
 800c5ee:	2218      	movs	r2, #24
 800c5f0:	601a      	str	r2, [r3, #0]
  FMC_Bank4->SR4 = 0x00000000;	
 800c5f2:	4b09      	ldr	r3, [pc, #36]	; (800c618 <FMC_PCCARDDeInit+0x30>)
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	605a      	str	r2, [r3, #4]
  FMC_Bank4->PMEM4 = 0xFCFCFCFC;
 800c5f8:	4b07      	ldr	r3, [pc, #28]	; (800c618 <FMC_PCCARDDeInit+0x30>)
 800c5fa:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800c5fe:	609a      	str	r2, [r3, #8]
  FMC_Bank4->PATT4 = 0xFCFCFCFC;
 800c600:	4b05      	ldr	r3, [pc, #20]	; (800c618 <FMC_PCCARDDeInit+0x30>)
 800c602:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800c606:	60da      	str	r2, [r3, #12]
  FMC_Bank4->PIO4 = 0xFCFCFCFC;
 800c608:	4b03      	ldr	r3, [pc, #12]	; (800c618 <FMC_PCCARDDeInit+0x30>)
 800c60a:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800c60e:	611a      	str	r2, [r3, #16]
}
 800c610:	46bd      	mov	sp, r7
 800c612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c616:	4770      	bx	lr
 800c618:	a00000a0 	.word	0xa00000a0

0800c61c <FMC_PCCARDInit>:
  * @param  FMC_PCCARDInitStruct : pointer to a FMC_PCCARDInitTypeDef structure
  *         that contains the configuration information for the FMC PCCARD Bank.                       
  * @retval None
  */
void FMC_PCCARDInit(FMC_PCCARDInitTypeDef* FMC_PCCARDInitStruct)
{
 800c61c:	b480      	push	{r7}
 800c61e:	b083      	sub	sp, #12
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
  assert_param(IS_FMC_WAIT_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FMC_PCCARDInitStruct parameters */
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
 800c624:	4b27      	ldr	r3, [pc, #156]	; (800c6c4 <FMC_PCCARDInit+0xa8>)
 800c626:	687a      	ldr	r2, [r7, #4]
 800c628:	6811      	ldr	r1, [r2, #0]
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
 800c62a:	687a      	ldr	r2, [r7, #4]
 800c62c:	6852      	ldr	r2, [r2, #4]
 800c62e:	0252      	lsls	r2, r2, #9
  assert_param(IS_FMC_HOLD_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FMC_PCCARDInitStruct parameters */
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
                     FMC_NAND_MemoryDataWidth_16b |  
 800c630:	4311      	orrs	r1, r2
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
 800c632:	687a      	ldr	r2, [r7, #4]
 800c634:	6892      	ldr	r2, [r2, #8]
 800c636:	0352      	lsls	r2, r2, #13
  assert_param(IS_FMC_HIZ_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FMC_PCCARDInitStruct parameters */
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
 800c638:	430a      	orrs	r2, r1
 800c63a:	f042 0210 	orr.w	r2, r2, #16
  assert_param(IS_FMC_WAIT_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FMC_PCCARDInitStruct parameters */
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
 800c63e:	601a      	str	r2, [r3, #0]
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 800c640:	4b20      	ldr	r3, [pc, #128]	; (800c6c4 <FMC_PCCARDInit+0xa8>)
 800c642:	687a      	ldr	r2, [r7, #4]
 800c644:	68d2      	ldr	r2, [r2, #12]
 800c646:	6811      	ldr	r1, [r2, #0]
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800c648:	687a      	ldr	r2, [r7, #4]
 800c64a:	68d2      	ldr	r2, [r2, #12]
 800c64c:	6852      	ldr	r2, [r2, #4]
 800c64e:	0212      	lsls	r2, r2, #8
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 800c650:	4311      	orrs	r1, r2
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 800c652:	687a      	ldr	r2, [r7, #4]
 800c654:	68d2      	ldr	r2, [r2, #12]
 800c656:	6892      	ldr	r2, [r2, #8]
 800c658:	0412      	lsls	r2, r2, #16
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800c65a:	4311      	orrs	r1, r2
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
 800c65c:	687a      	ldr	r2, [r7, #4]
 800c65e:	68d2      	ldr	r2, [r2, #12]
 800c660:	68d2      	ldr	r2, [r2, #12]
 800c662:	0612      	lsls	r2, r2, #24
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 800c664:	430a      	orrs	r2, r1
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 800c666:	609a      	str	r2, [r3, #8]
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 800c668:	4b16      	ldr	r3, [pc, #88]	; (800c6c4 <FMC_PCCARDInit+0xa8>)
 800c66a:	687a      	ldr	r2, [r7, #4]
 800c66c:	6912      	ldr	r2, [r2, #16]
 800c66e:	6811      	ldr	r1, [r2, #0]
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800c670:	687a      	ldr	r2, [r7, #4]
 800c672:	6912      	ldr	r2, [r2, #16]
 800c674:	6852      	ldr	r2, [r2, #4]
 800c676:	0212      	lsls	r2, r2, #8
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 800c678:	4311      	orrs	r1, r2
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 800c67a:	687a      	ldr	r2, [r7, #4]
 800c67c:	6912      	ldr	r2, [r2, #16]
 800c67e:	6892      	ldr	r2, [r2, #8]
 800c680:	0412      	lsls	r2, r2, #16
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800c682:	4311      	orrs	r1, r2
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
 800c684:	687a      	ldr	r2, [r7, #4]
 800c686:	6912      	ldr	r2, [r2, #16]
 800c688:	68d2      	ldr	r2, [r2, #12]
 800c68a:	0612      	lsls	r2, r2, #24
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 800c68c:	430a      	orrs	r2, r1
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 800c68e:	60da      	str	r2, [r3, #12]
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
 800c690:	4b0c      	ldr	r3, [pc, #48]	; (800c6c4 <FMC_PCCARDInit+0xa8>)
 800c692:	687a      	ldr	r2, [r7, #4]
 800c694:	6952      	ldr	r2, [r2, #20]
 800c696:	6811      	ldr	r1, [r2, #0]
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800c698:	687a      	ldr	r2, [r7, #4]
 800c69a:	6952      	ldr	r2, [r2, #20]
 800c69c:	6852      	ldr	r2, [r2, #4]
 800c69e:	0212      	lsls	r2, r2, #8
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
 800c6a0:	4311      	orrs	r1, r2
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 800c6a2:	687a      	ldr	r2, [r7, #4]
 800c6a4:	6952      	ldr	r2, [r2, #20]
 800c6a6:	6892      	ldr	r2, [r2, #8]
 800c6a8:	0412      	lsls	r2, r2, #16
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800c6aa:	4311      	orrs	r1, r2
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime << 24);             
 800c6ac:	687a      	ldr	r2, [r7, #4]
 800c6ae:	6952      	ldr	r2, [r2, #20]
 800c6b0:	68d2      	ldr	r2, [r2, #12]
 800c6b2:	0612      	lsls	r2, r2, #24
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 800c6b4:	430a      	orrs	r2, r1
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
 800c6b6:	611a      	str	r2, [r3, #16]
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime << 24);             
}
 800c6b8:	370c      	adds	r7, #12
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c0:	4770      	bx	lr
 800c6c2:	bf00      	nop
 800c6c4:	a00000a0 	.word	0xa00000a0

0800c6c8 <FMC_PCCARDStructInit>:
  * @param  FMC_PCCARDInitStruct: pointer to a FMC_PCCARDInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void FMC_PCCARDStructInit(FMC_PCCARDInitTypeDef* FMC_PCCARDInitStruct)
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	b083      	sub	sp, #12
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
  /* Reset PCCARD Init structure parameters values */
  FMC_PCCARDInitStruct->FMC_Waitfeature = FMC_Waitfeature_Disable;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	601a      	str	r2, [r3, #0]
  FMC_PCCARDInitStruct->FMC_TCLRSetupTime = 0;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2200      	movs	r2, #0
 800c6da:	605a      	str	r2, [r3, #4]
  FMC_PCCARDInitStruct->FMC_TARSetupTime = 0;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2200      	movs	r2, #0
 800c6e0:	609a      	str	r2, [r3, #8]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime = 252;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	68db      	ldr	r3, [r3, #12]
 800c6e6:	22fc      	movs	r2, #252	; 0xfc
 800c6e8:	601a      	str	r2, [r3, #0]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime = 252;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	68db      	ldr	r3, [r3, #12]
 800c6ee:	22fc      	movs	r2, #252	; 0xfc
 800c6f0:	605a      	str	r2, [r3, #4]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime = 252;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	68db      	ldr	r3, [r3, #12]
 800c6f6:	22fc      	movs	r2, #252	; 0xfc
 800c6f8:	609a      	str	r2, [r3, #8]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime = 252;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	68db      	ldr	r3, [r3, #12]
 800c6fe:	22fc      	movs	r2, #252	; 0xfc
 800c700:	60da      	str	r2, [r3, #12]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime = 252;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	691b      	ldr	r3, [r3, #16]
 800c706:	22fc      	movs	r2, #252	; 0xfc
 800c708:	601a      	str	r2, [r3, #0]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime = 252;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	691b      	ldr	r3, [r3, #16]
 800c70e:	22fc      	movs	r2, #252	; 0xfc
 800c710:	605a      	str	r2, [r3, #4]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime = 252;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	691b      	ldr	r3, [r3, #16]
 800c716:	22fc      	movs	r2, #252	; 0xfc
 800c718:	609a      	str	r2, [r3, #8]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime = 252;	
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	691b      	ldr	r3, [r3, #16]
 800c71e:	22fc      	movs	r2, #252	; 0xfc
 800c720:	60da      	str	r2, [r3, #12]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime = 252;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	695b      	ldr	r3, [r3, #20]
 800c726:	22fc      	movs	r2, #252	; 0xfc
 800c728:	601a      	str	r2, [r3, #0]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime = 252;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	695b      	ldr	r3, [r3, #20]
 800c72e:	22fc      	movs	r2, #252	; 0xfc
 800c730:	605a      	str	r2, [r3, #4]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime = 252;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	695b      	ldr	r3, [r3, #20]
 800c736:	22fc      	movs	r2, #252	; 0xfc
 800c738:	609a      	str	r2, [r3, #8]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime = 252;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	695b      	ldr	r3, [r3, #20]
 800c73e:	22fc      	movs	r2, #252	; 0xfc
 800c740:	60da      	str	r2, [r3, #12]
}
 800c742:	370c      	adds	r7, #12
 800c744:	46bd      	mov	sp, r7
 800c746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74a:	4770      	bx	lr

0800c74c <FMC_PCCARDCmd>:
  * @param  NewState: new state of the PCCARD Memory Bank.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_PCCARDCmd(FunctionalState NewState)
{
 800c74c:	b480      	push	{r7}
 800c74e:	b083      	sub	sp, #12
 800c750:	af00      	add	r7, sp, #0
 800c752:	4603      	mov	r3, r0
 800c754:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800c756:	79fb      	ldrb	r3, [r7, #7]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d006      	beq.n	800c76a <FMC_PCCARDCmd+0x1e>
  {
    /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
    FMC_Bank4->PCR4 |= PCR_PBKEN_SET;
 800c75c:	4b08      	ldr	r3, [pc, #32]	; (800c780 <FMC_PCCARDCmd+0x34>)
 800c75e:	4a08      	ldr	r2, [pc, #32]	; (800c780 <FMC_PCCARDCmd+0x34>)
 800c760:	6812      	ldr	r2, [r2, #0]
 800c762:	f042 0204 	orr.w	r2, r2, #4
 800c766:	601a      	str	r2, [r3, #0]
 800c768:	e005      	b.n	800c776 <FMC_PCCARDCmd+0x2a>
  }
  else
  {
    /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
    FMC_Bank4->PCR4 &= PCR_PBKEN_RESET;
 800c76a:	4a05      	ldr	r2, [pc, #20]	; (800c780 <FMC_PCCARDCmd+0x34>)
 800c76c:	4b04      	ldr	r3, [pc, #16]	; (800c780 <FMC_PCCARDCmd+0x34>)
 800c76e:	6819      	ldr	r1, [r3, #0]
 800c770:	4b04      	ldr	r3, [pc, #16]	; (800c784 <FMC_PCCARDCmd+0x38>)
 800c772:	400b      	ands	r3, r1
 800c774:	6013      	str	r3, [r2, #0]
  }
}
 800c776:	370c      	adds	r7, #12
 800c778:	46bd      	mov	sp, r7
 800c77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77e:	4770      	bx	lr
 800c780:	a00000a0 	.word	0xa00000a0
 800c784:	000ffffb 	.word	0x000ffffb

0800c788 <FMC_SDRAMDeInit>:
  *            @arg FMC_Bank1_SDRAM: FMC Bank1 SDRAM 
  *            @arg FMC_Bank2_SDRAM: FMC Bank2 SDRAM 
  * @retval None
  */
void FMC_SDRAMDeInit(uint32_t FMC_Bank)
{
 800c788:	b480      	push	{r7}
 800c78a:	b083      	sub	sp, #12
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_SDRAM_BANK(FMC_Bank));
  
  FMC_Bank5_6->SDCR[FMC_Bank] = 0x000002D0;
 800c790:	4b0d      	ldr	r3, [pc, #52]	; (800c7c8 <FMC_SDRAMDeInit+0x40>)
 800c792:	687a      	ldr	r2, [r7, #4]
 800c794:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 800c798:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  FMC_Bank5_6->SDTR[FMC_Bank] = 0x0FFFFFFF;    
 800c79c:	4b0a      	ldr	r3, [pc, #40]	; (800c7c8 <FMC_SDRAMDeInit+0x40>)
 800c79e:	687a      	ldr	r2, [r7, #4]
 800c7a0:	3202      	adds	r2, #2
 800c7a2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800c7a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  FMC_Bank5_6->SDCMR = 0x00000000;
 800c7aa:	4b07      	ldr	r3, [pc, #28]	; (800c7c8 <FMC_SDRAMDeInit+0x40>)
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	611a      	str	r2, [r3, #16]
  FMC_Bank5_6->SDRTR = 0x00000000;
 800c7b0:	4b05      	ldr	r3, [pc, #20]	; (800c7c8 <FMC_SDRAMDeInit+0x40>)
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	615a      	str	r2, [r3, #20]
  FMC_Bank5_6->SDSR = 0x00000000; 
 800c7b6:	4b04      	ldr	r3, [pc, #16]	; (800c7c8 <FMC_SDRAMDeInit+0x40>)
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	619a      	str	r2, [r3, #24]
}  
 800c7bc:	370c      	adds	r7, #12
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c4:	4770      	bx	lr
 800c7c6:	bf00      	nop
 800c7c8:	a0000140 	.word	0xa0000140

0800c7cc <FMC_SDRAMInit>:
  *         that contains the configuration information for the FMC SDRAM 
  *         specified Banks.                       
  * @retval None
  */
void FMC_SDRAMInit(FMC_SDRAMInitTypeDef* FMC_SDRAMInitStruct)
{ 
 800c7cc:	b480      	push	{r7}
 800c7ce:	b087      	sub	sp, #28
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
  /* temporary registers */
  uint32_t tmpr1 = 0;
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	613b      	str	r3, [r7, #16]
  uint32_t tmpr3 = 0;
 800c7dc:	2300      	movs	r3, #0
 800c7de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr4 = 0;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)); 
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	685a      	ldr	r2, [r3, #4]
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	689b      	ldr	r3, [r3, #8]
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)); 
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 800c7ec:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	68db      	ldr	r3, [r3, #12]
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
 800c7f2:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	691b      	ldr	r3, [r3, #16]
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
 800c7f8:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
             FMC_SDRAMInitStruct->FMC_CASLatency |
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	695b      	ldr	r3, [r3, #20]
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
 800c7fe:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_CASLatency |
             FMC_SDRAMInitStruct->FMC_WriteProtection |
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	699b      	ldr	r3, [r3, #24]
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
             FMC_SDRAMInitStruct->FMC_CASLatency |
 800c804:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_WriteProtection |
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	69db      	ldr	r3, [r3, #28]
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
             FMC_SDRAMInitStruct->FMC_CASLatency |
             FMC_SDRAMInitStruct->FMC_WriteProtection |
 800c80a:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6a1b      	ldr	r3, [r3, #32]
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
             FMC_SDRAMInitStruct->FMC_CASLatency |
             FMC_SDRAMInitStruct->FMC_WriteProtection |
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 800c810:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)); 
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 800c816:	4313      	orrs	r3, r2
 800c818:	617b      	str	r3, [r7, #20]
             FMC_SDRAMInitStruct->FMC_WriteProtection |
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
            
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d106      	bne.n	800c830 <FMC_SDRAMInit+0x64>
  {
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
 800c822:	4b40      	ldr	r3, [pc, #256]	; (800c924 <FMC_SDRAMInit+0x158>)
 800c824:	687a      	ldr	r2, [r7, #4]
 800c826:	6812      	ldr	r2, [r2, #0]
 800c828:	6979      	ldr	r1, [r7, #20]
 800c82a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c82e:	e011      	b.n	800c854 <FMC_SDRAMInit+0x88>
  }
  else   /* SDCR2 "don't care" bits configuration */
  {
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	69da      	ldr	r2, [r3, #28]
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6a1b      	ldr	r3, [r3, #32]
  {
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  else   /* SDCR2 "don't care" bits configuration */
  {
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 800c838:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  {
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  else   /* SDCR2 "don't care" bits configuration */
  {
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 800c83e:	4313      	orrs	r3, r2
 800c840:	60fb      	str	r3, [r7, #12]
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
    
    FMC_Bank5_6->SDCR[FMC_Bank1_SDRAM] = tmpr3;
 800c842:	4b38      	ldr	r3, [pc, #224]	; (800c924 <FMC_SDRAMInit+0x158>)
 800c844:	68fa      	ldr	r2, [r7, #12]
 800c846:	601a      	str	r2, [r3, #0]
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
 800c848:	4b36      	ldr	r3, [pc, #216]	; (800c924 <FMC_SDRAMInit+0x158>)
 800c84a:	687a      	ldr	r2, [r7, #4]
 800c84c:	6812      	ldr	r2, [r2, #0]
 800c84e:	6979      	ldr	r1, [r7, #20]
 800c850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d130      	bne.n	800c8be <FMC_SDRAMInit+0xf2>
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	1e5a      	subs	r2, r3, #1
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c868:	685b      	ldr	r3, [r3, #4]
 800c86a:	3b01      	subs	r3, #1
 800c86c:	011b      	lsls	r3, r3, #4
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 800c86e:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c874:	689b      	ldr	r3, [r3, #8]
 800c876:	3b01      	subs	r3, #1
 800c878:	021b      	lsls	r3, r3, #8
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 800c87a:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c880:	68db      	ldr	r3, [r3, #12]
 800c882:	3b01      	subs	r3, #1
 800c884:	031b      	lsls	r3, r3, #12
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 800c886:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c88c:	691b      	ldr	r3, [r3, #16]
 800c88e:	3b01      	subs	r3, #1
 800c890:	041b      	lsls	r3, r3, #16
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 800c892:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20) |
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c898:	695b      	ldr	r3, [r3, #20]
 800c89a:	3b01      	subs	r3, #1
 800c89c:	051b      	lsls	r3, r3, #20
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
 800c89e:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay)-1) << 24);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8a4:	699b      	ldr	r3, [r3, #24]
 800c8a6:	3b01      	subs	r3, #1
 800c8a8:	061b      	lsls	r3, r3, #24
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 800c8aa:	4313      	orrs	r3, r2
 800c8ac:	613b      	str	r3, [r7, #16]
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay)-1) << 24);
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
 800c8ae:	4b1d      	ldr	r3, [pc, #116]	; (800c924 <FMC_SDRAMInit+0x158>)
 800c8b0:	687a      	ldr	r2, [r7, #4]
 800c8b2:	6812      	ldr	r2, [r2, #0]
 800c8b4:	3202      	adds	r2, #2
 800c8b6:	6939      	ldr	r1, [r7, #16]
 800c8b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c8bc:	e02c      	b.n	800c918 <FMC_SDRAMInit+0x14c>
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	1e5a      	subs	r2, r3, #1
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8ca:	685b      	ldr	r3, [r3, #4]
 800c8cc:	3b01      	subs	r3, #1
 800c8ce:	011b      	lsls	r3, r3, #4
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 800c8d0:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8d6:	689b      	ldr	r3, [r3, #8]
 800c8d8:	3b01      	subs	r3, #1
 800c8da:	021b      	lsls	r3, r3, #8
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 800c8dc:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8e2:	691b      	ldr	r3, [r3, #16]
 800c8e4:	3b01      	subs	r3, #1
 800c8e6:	041b      	lsls	r3, r3, #16
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 800c8e8:	4313      	orrs	r3, r2
 800c8ea:	613b      	str	r3, [r7, #16]
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
            
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8f0:	68db      	ldr	r3, [r3, #12]
 800c8f2:	3b01      	subs	r3, #1
 800c8f4:	031a      	lsls	r2, r3, #12
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8fa:	695b      	ldr	r3, [r3, #20]
 800c8fc:	3b01      	subs	r3, #1
 800c8fe:	051b      	lsls	r3, r3, #20
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
            
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 800c900:	4313      	orrs	r3, r2
 800c902:	60bb      	str	r3, [r7, #8]
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20);
            
            FMC_Bank5_6->SDTR[FMC_Bank1_SDRAM] = tmpr4;
 800c904:	4b07      	ldr	r3, [pc, #28]	; (800c924 <FMC_SDRAMInit+0x158>)
 800c906:	68ba      	ldr	r2, [r7, #8]
 800c908:	609a      	str	r2, [r3, #8]
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
 800c90a:	4b06      	ldr	r3, [pc, #24]	; (800c924 <FMC_SDRAMInit+0x158>)
 800c90c:	687a      	ldr	r2, [r7, #4]
 800c90e:	6812      	ldr	r2, [r2, #0]
 800c910:	3202      	adds	r2, #2
 800c912:	6939      	ldr	r1, [r7, #16]
 800c914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  
}
 800c918:	371c      	adds	r7, #28
 800c91a:	46bd      	mov	sp, r7
 800c91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c920:	4770      	bx	lr
 800c922:	bf00      	nop
 800c924:	a0000140 	.word	0xa0000140

0800c928 <FMC_SDRAMStructInit>:
  * @param  FMC_SDRAMInitStruct: pointer to a FMC_SDRAMInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void FMC_SDRAMStructInit(FMC_SDRAMInitTypeDef* FMC_SDRAMInitStruct)  
{  
 800c928:	b480      	push	{r7}
 800c92a:	b083      	sub	sp, #12
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
  /* Reset SDRAM Init structure parameters values */
  FMC_SDRAMInitStruct->FMC_Bank = FMC_Bank1_SDRAM;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2200      	movs	r2, #0
 800c934:	601a      	str	r2, [r3, #0]
  FMC_SDRAMInitStruct->FMC_ColumnBitsNumber = FMC_ColumnBits_Number_8b;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2200      	movs	r2, #0
 800c93a:	605a      	str	r2, [r3, #4]
  FMC_SDRAMInitStruct->FMC_RowBitsNumber = FMC_RowBits_Number_11b; 
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2200      	movs	r2, #0
 800c940:	609a      	str	r2, [r3, #8]
  FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth = FMC_SDMemory_Width_16b;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2210      	movs	r2, #16
 800c946:	60da      	str	r2, [r3, #12]
  FMC_SDRAMInitStruct->FMC_InternalBankNumber = FMC_InternalBank_Number_4; 
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2240      	movs	r2, #64	; 0x40
 800c94c:	611a      	str	r2, [r3, #16]
  FMC_SDRAMInitStruct->FMC_CASLatency = FMC_CAS_Latency_1;  
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2280      	movs	r2, #128	; 0x80
 800c952:	615a      	str	r2, [r3, #20]
  FMC_SDRAMInitStruct->FMC_WriteProtection = FMC_Write_Protection_Enable;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c95a:	619a      	str	r2, [r3, #24]
  FMC_SDRAMInitStruct->FMC_SDClockPeriod = FMC_SDClock_Disable;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2200      	movs	r2, #0
 800c960:	61da      	str	r2, [r3, #28]
  FMC_SDRAMInitStruct->FMC_ReadBurst = FMC_Read_Burst_Disable;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2200      	movs	r2, #0
 800c966:	621a      	str	r2, [r3, #32]
  FMC_SDRAMInitStruct->FMC_ReadPipeDelay = FMC_ReadPipe_Delay_0; 
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2200      	movs	r2, #0
 800c96c:	625a      	str	r2, [r3, #36]	; 0x24
   
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay = 16;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c972:	2210      	movs	r2, #16
 800c974:	601a      	str	r2, [r3, #0]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay = 16;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c97a:	2210      	movs	r2, #16
 800c97c:	605a      	str	r2, [r3, #4]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime = 16;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c982:	2210      	movs	r2, #16
 800c984:	609a      	str	r2, [r3, #8]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay = 16;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c98a:	2210      	movs	r2, #16
 800c98c:	60da      	str	r2, [r3, #12]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime = 16;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c992:	2210      	movs	r2, #16
 800c994:	611a      	str	r2, [r3, #16]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay = 16;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c99a:	2210      	movs	r2, #16
 800c99c:	615a      	str	r2, [r3, #20]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay = 16;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9a2:	2210      	movs	r2, #16
 800c9a4:	619a      	str	r2, [r3, #24]
  
}
 800c9a6:	370c      	adds	r7, #12
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ae:	4770      	bx	lr

0800c9b0 <FMC_SDRAMCmdConfig>:
  * @param  FMC_SDRAMCommandStruct: pointer to a FMC_SDRAMCommandTypeDef structure 
  *         which will be configured.
  * @retval None
  */
void FMC_SDRAMCmdConfig(FMC_SDRAMCommandTypeDef* FMC_SDRAMCommandStruct)
{
 800c9b0:	b480      	push	{r7}
 800c9b2:	b085      	sub	sp, #20
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpr = 0x0;
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FMC_COMMAND_MODE(FMC_SDRAMCommandStruct->FMC_CommandMode));
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681a      	ldr	r2, [r3, #0]
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	685b      	ldr	r3, [r3, #4]
  assert_param(IS_FMC_COMMAND_MODE(FMC_SDRAMCommandStruct->FMC_CommandMode));
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 800c9c4:	431a      	orrs	r2, r3
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	689b      	ldr	r3, [r3, #8]
 800c9ca:	3b01      	subs	r3, #1
 800c9cc:	015b      	lsls	r3, r3, #5
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
 800c9ce:	431a      	orrs	r2, r3
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
                     ((FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition)<<9));
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	68db      	ldr	r3, [r3, #12]
 800c9d4:	025b      	lsls	r3, r3, #9
  assert_param(IS_FMC_COMMAND_MODE(FMC_SDRAMCommandStruct->FMC_CommandMode));
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 800c9d6:	4313      	orrs	r3, r2
 800c9d8:	60fb      	str	r3, [r7, #12]
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
                     ((FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition)<<9));
  
  FMC_Bank5_6->SDCMR = tmpr;
 800c9da:	4b04      	ldr	r3, [pc, #16]	; (800c9ec <FMC_SDRAMCmdConfig+0x3c>)
 800c9dc:	68fa      	ldr	r2, [r7, #12]
 800c9de:	611a      	str	r2, [r3, #16]

}
 800c9e0:	3714      	adds	r7, #20
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e8:	4770      	bx	lr
 800c9ea:	bf00      	nop
 800c9ec:	a0000140 	.word	0xa0000140

0800c9f0 <FMC_GetModeStatus>:
  * @param  SDRAM_Bank: Defines the FMC SDRAM bank. This parameter can be 
  *                     FMC_Bank1_SDRAM or FMC_Bank2_SDRAM. 
  * @retval The FMC SDRAM bank mode status         
  */
uint32_t FMC_GetModeStatus(uint32_t SDRAM_Bank)
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b085      	sub	sp, #20
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameter */
  assert_param(IS_FMC_SDRAM_BANK(SDRAM_Bank));

  /* Get the busy flag status */
  if(SDRAM_Bank == FMC_Bank1_SDRAM)
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d105      	bne.n	800ca0e <FMC_GetModeStatus+0x1e>
  {
    tmpreg = (uint32_t)(FMC_Bank5_6->SDSR & FMC_SDSR_MODES1); 
 800ca02:	4b09      	ldr	r3, [pc, #36]	; (800ca28 <FMC_GetModeStatus+0x38>)
 800ca04:	699b      	ldr	r3, [r3, #24]
 800ca06:	f003 0306 	and.w	r3, r3, #6
 800ca0a:	60fb      	str	r3, [r7, #12]
 800ca0c:	e005      	b.n	800ca1a <FMC_GetModeStatus+0x2a>
  }
  else
  {
    tmpreg = ((uint32_t)(FMC_Bank5_6->SDSR & FMC_SDSR_MODES2) >> 2);
 800ca0e:	4b06      	ldr	r3, [pc, #24]	; (800ca28 <FMC_GetModeStatus+0x38>)
 800ca10:	699b      	ldr	r3, [r3, #24]
 800ca12:	f003 0318 	and.w	r3, r3, #24
 800ca16:	089b      	lsrs	r3, r3, #2
 800ca18:	60fb      	str	r3, [r7, #12]
  }
  
  /* Return the mode status */
  return tmpreg;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	3714      	adds	r7, #20
 800ca20:	46bd      	mov	sp, r7
 800ca22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca26:	4770      	bx	lr
 800ca28:	a0000140 	.word	0xa0000140

0800ca2c <FMC_SetRefreshCount>:
  * @brief  defines the SDRAM Memory Refresh rate.
  * @param  FMC_Count: specifies the Refresh timer count.       
  * @retval None
  */
void FMC_SetRefreshCount(uint32_t FMC_Count)
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b083      	sub	sp, #12
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
  /* check the parameters */
  assert_param(IS_FMC_REFRESH_COUNT(FMC_Count));
  
  FMC_Bank5_6->SDRTR |= (FMC_Count<<1);
 800ca34:	4b05      	ldr	r3, [pc, #20]	; (800ca4c <FMC_SetRefreshCount+0x20>)
 800ca36:	4a05      	ldr	r2, [pc, #20]	; (800ca4c <FMC_SetRefreshCount+0x20>)
 800ca38:	6951      	ldr	r1, [r2, #20]
 800ca3a:	687a      	ldr	r2, [r7, #4]
 800ca3c:	0052      	lsls	r2, r2, #1
 800ca3e:	430a      	orrs	r2, r1
 800ca40:	615a      	str	r2, [r3, #20]
   
}
 800ca42:	370c      	adds	r7, #12
 800ca44:	46bd      	mov	sp, r7
 800ca46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4a:	4770      	bx	lr
 800ca4c:	a0000140 	.word	0xa0000140

0800ca50 <FMC_SetAutoRefresh_Number>:
  * @brief  Sets the Number of consecutive SDRAM Memory auto Refresh commands.
  * @param  FMC_Number: specifies the auto Refresh number.       
  * @retval None
  */
void FMC_SetAutoRefresh_Number(uint32_t FMC_Number)
{
 800ca50:	b480      	push	{r7}
 800ca52:	b083      	sub	sp, #12
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
  /* check the parameters */
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_Number));
  
  FMC_Bank5_6->SDCMR |= (FMC_Number << 5);   
 800ca58:	4b05      	ldr	r3, [pc, #20]	; (800ca70 <FMC_SetAutoRefresh_Number+0x20>)
 800ca5a:	4a05      	ldr	r2, [pc, #20]	; (800ca70 <FMC_SetAutoRefresh_Number+0x20>)
 800ca5c:	6911      	ldr	r1, [r2, #16]
 800ca5e:	687a      	ldr	r2, [r7, #4]
 800ca60:	0152      	lsls	r2, r2, #5
 800ca62:	430a      	orrs	r2, r1
 800ca64:	611a      	str	r2, [r3, #16]
}
 800ca66:	370c      	adds	r7, #12
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6e:	4770      	bx	lr
 800ca70:	a0000140 	.word	0xa0000140

0800ca74 <FMC_SDRAMWriteProtectionConfig>:
  * @param  NewState: new state of the write protection flag.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_SDRAMWriteProtectionConfig(uint32_t SDRAM_Bank, FunctionalState NewState)
{
 800ca74:	b480      	push	{r7}
 800ca76:	b083      	sub	sp, #12
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
 800ca7c:	460b      	mov	r3, r1
 800ca7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameter */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_FMC_SDRAM_BANK(SDRAM_Bank));
  
  if (NewState != DISABLE)
 800ca80:	78fb      	ldrb	r3, [r7, #3]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d00a      	beq.n	800ca9c <FMC_SDRAMWriteProtectionConfig+0x28>
  {
    FMC_Bank5_6->SDCR[SDRAM_Bank] |= FMC_Write_Protection_Enable;    
 800ca86:	4b0d      	ldr	r3, [pc, #52]	; (800cabc <FMC_SDRAMWriteProtectionConfig+0x48>)
 800ca88:	4a0c      	ldr	r2, [pc, #48]	; (800cabc <FMC_SDRAMWriteProtectionConfig+0x48>)
 800ca8a:	6879      	ldr	r1, [r7, #4]
 800ca8c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ca90:	f442 7100 	orr.w	r1, r2, #512	; 0x200
 800ca94:	687a      	ldr	r2, [r7, #4]
 800ca96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ca9a:	e00a      	b.n	800cab2 <FMC_SDRAMWriteProtectionConfig+0x3e>
  }
  else
  {
    FMC_Bank5_6->SDCR[SDRAM_Bank] &= SDCR_WriteProtection_RESET;
 800ca9c:	4a07      	ldr	r2, [pc, #28]	; (800cabc <FMC_SDRAMWriteProtectionConfig+0x48>)
 800ca9e:	4b07      	ldr	r3, [pc, #28]	; (800cabc <FMC_SDRAMWriteProtectionConfig+0x48>)
 800caa0:	6879      	ldr	r1, [r7, #4]
 800caa2:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800caa6:	f647 53ff 	movw	r3, #32255	; 0x7dff
 800caaa:	400b      	ands	r3, r1
 800caac:	6879      	ldr	r1, [r7, #4]
 800caae:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  } 
  
}
 800cab2:	370c      	adds	r7, #12
 800cab4:	46bd      	mov	sp, r7
 800cab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caba:	4770      	bx	lr
 800cabc:	a0000140 	.word	0xa0000140

0800cac0 <FMC_ITConfig>:
  * @param  NewState: new state of the specified FMC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_ITConfig(uint32_t FMC_Bank, uint32_t FMC_IT, FunctionalState NewState)
{
 800cac0:	b480      	push	{r7}
 800cac2:	b085      	sub	sp, #20
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	60f8      	str	r0, [r7, #12]
 800cac8:	60b9      	str	r1, [r7, #8]
 800caca:	4613      	mov	r3, r2
 800cacc:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FMC_IT_BANK(FMC_Bank));
  assert_param(IS_FMC_IT(FMC_IT));	
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800cace:	79fb      	ldrb	r3, [r7, #7]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d026      	beq.n	800cb22 <FMC_ITConfig+0x62>
  {
    /* Enable the selected FMC_Bank2 interrupts */
    if(FMC_Bank == FMC_Bank2_NAND)
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	2b10      	cmp	r3, #16
 800cad8:	d106      	bne.n	800cae8 <FMC_ITConfig+0x28>
    {
      FMC_Bank2->SR2 |= FMC_IT;
 800cada:	4b29      	ldr	r3, [pc, #164]	; (800cb80 <FMC_ITConfig+0xc0>)
 800cadc:	4a28      	ldr	r2, [pc, #160]	; (800cb80 <FMC_ITConfig+0xc0>)
 800cade:	6851      	ldr	r1, [r2, #4]
 800cae0:	68ba      	ldr	r2, [r7, #8]
 800cae2:	430a      	orrs	r2, r1
 800cae4:	605a      	str	r2, [r3, #4]
 800cae6:	e046      	b.n	800cb76 <FMC_ITConfig+0xb6>
    }
    /* Enable the selected FMC_Bank3 interrupts */
    else if (FMC_Bank == FMC_Bank3_NAND)
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800caee:	d106      	bne.n	800cafe <FMC_ITConfig+0x3e>
    {
      FMC_Bank3->SR3 |= FMC_IT;
 800caf0:	4b24      	ldr	r3, [pc, #144]	; (800cb84 <FMC_ITConfig+0xc4>)
 800caf2:	4a24      	ldr	r2, [pc, #144]	; (800cb84 <FMC_ITConfig+0xc4>)
 800caf4:	6851      	ldr	r1, [r2, #4]
 800caf6:	68ba      	ldr	r2, [r7, #8]
 800caf8:	430a      	orrs	r2, r1
 800cafa:	605a      	str	r2, [r3, #4]
 800cafc:	e03b      	b.n	800cb76 <FMC_ITConfig+0xb6>
    }
    /* Enable the selected FMC_Bank4 interrupts */
    else if (FMC_Bank == FMC_Bank4_PCCARD)
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb04:	d106      	bne.n	800cb14 <FMC_ITConfig+0x54>
    {
      FMC_Bank4->SR4 |= FMC_IT;    
 800cb06:	4b20      	ldr	r3, [pc, #128]	; (800cb88 <FMC_ITConfig+0xc8>)
 800cb08:	4a1f      	ldr	r2, [pc, #124]	; (800cb88 <FMC_ITConfig+0xc8>)
 800cb0a:	6851      	ldr	r1, [r2, #4]
 800cb0c:	68ba      	ldr	r2, [r7, #8]
 800cb0e:	430a      	orrs	r2, r1
 800cb10:	605a      	str	r2, [r3, #4]
 800cb12:	e030      	b.n	800cb76 <FMC_ITConfig+0xb6>
    }
    /* Enable the selected FMC_Bank5_6 interrupt */
    else
    {
      /* Enables the interrupt if the refresh error flag is set */
      FMC_Bank5_6->SDRTR |= FMC_IT; 
 800cb14:	4b1d      	ldr	r3, [pc, #116]	; (800cb8c <FMC_ITConfig+0xcc>)
 800cb16:	4a1d      	ldr	r2, [pc, #116]	; (800cb8c <FMC_ITConfig+0xcc>)
 800cb18:	6951      	ldr	r1, [r2, #20]
 800cb1a:	68ba      	ldr	r2, [r7, #8]
 800cb1c:	430a      	orrs	r2, r1
 800cb1e:	615a      	str	r2, [r3, #20]
 800cb20:	e029      	b.n	800cb76 <FMC_ITConfig+0xb6>
    }
  }
  else
  {
    /* Disable the selected FMC_Bank2 interrupts */
    if(FMC_Bank == FMC_Bank2_NAND)
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	2b10      	cmp	r3, #16
 800cb26:	d107      	bne.n	800cb38 <FMC_ITConfig+0x78>
    {
      
      FMC_Bank2->SR2 &= (uint32_t)~FMC_IT;
 800cb28:	4b15      	ldr	r3, [pc, #84]	; (800cb80 <FMC_ITConfig+0xc0>)
 800cb2a:	4a15      	ldr	r2, [pc, #84]	; (800cb80 <FMC_ITConfig+0xc0>)
 800cb2c:	6851      	ldr	r1, [r2, #4]
 800cb2e:	68ba      	ldr	r2, [r7, #8]
 800cb30:	43d2      	mvns	r2, r2
 800cb32:	400a      	ands	r2, r1
 800cb34:	605a      	str	r2, [r3, #4]
 800cb36:	e01e      	b.n	800cb76 <FMC_ITConfig+0xb6>
    }
    /* Disable the selected FMC_Bank3 interrupts */
    else if (FMC_Bank == FMC_Bank3_NAND)
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb3e:	d107      	bne.n	800cb50 <FMC_ITConfig+0x90>
    {
      FMC_Bank3->SR3 &= (uint32_t)~FMC_IT;
 800cb40:	4b10      	ldr	r3, [pc, #64]	; (800cb84 <FMC_ITConfig+0xc4>)
 800cb42:	4a10      	ldr	r2, [pc, #64]	; (800cb84 <FMC_ITConfig+0xc4>)
 800cb44:	6851      	ldr	r1, [r2, #4]
 800cb46:	68ba      	ldr	r2, [r7, #8]
 800cb48:	43d2      	mvns	r2, r2
 800cb4a:	400a      	ands	r2, r1
 800cb4c:	605a      	str	r2, [r3, #4]
 800cb4e:	e012      	b.n	800cb76 <FMC_ITConfig+0xb6>
    }
    /* Disable the selected FMC_Bank4 interrupts */
    else if(FMC_Bank == FMC_Bank4_PCCARD)
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb56:	d107      	bne.n	800cb68 <FMC_ITConfig+0xa8>
    {
      FMC_Bank4->SR4 &= (uint32_t)~FMC_IT;    
 800cb58:	4b0b      	ldr	r3, [pc, #44]	; (800cb88 <FMC_ITConfig+0xc8>)
 800cb5a:	4a0b      	ldr	r2, [pc, #44]	; (800cb88 <FMC_ITConfig+0xc8>)
 800cb5c:	6851      	ldr	r1, [r2, #4]
 800cb5e:	68ba      	ldr	r2, [r7, #8]
 800cb60:	43d2      	mvns	r2, r2
 800cb62:	400a      	ands	r2, r1
 800cb64:	605a      	str	r2, [r3, #4]
 800cb66:	e006      	b.n	800cb76 <FMC_ITConfig+0xb6>
    }
    /* Disable the selected FMC_Bank5_6 interrupt */
    else
    {
      /* Disables the interrupt if the refresh error flag is not set */
      FMC_Bank5_6->SDRTR &= (uint32_t)~FMC_IT; 
 800cb68:	4b08      	ldr	r3, [pc, #32]	; (800cb8c <FMC_ITConfig+0xcc>)
 800cb6a:	4a08      	ldr	r2, [pc, #32]	; (800cb8c <FMC_ITConfig+0xcc>)
 800cb6c:	6951      	ldr	r1, [r2, #20]
 800cb6e:	68ba      	ldr	r2, [r7, #8]
 800cb70:	43d2      	mvns	r2, r2
 800cb72:	400a      	ands	r2, r1
 800cb74:	615a      	str	r2, [r3, #20]
    }
  }
}
 800cb76:	3714      	adds	r7, #20
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7e:	4770      	bx	lr
 800cb80:	a0000060 	.word	0xa0000060
 800cb84:	a0000080 	.word	0xa0000080
 800cb88:	a00000a0 	.word	0xa00000a0
 800cb8c:	a0000140 	.word	0xa0000140

0800cb90 <FMC_GetFlagStatus>:
  *            @arg FMC_FLAG_Refresh: Refresh error Flag.
  *            @arg FMC_FLAG_Busy: Busy status Flag.     
  * @retval The new state of FMC_FLAG (SET or RESET).
  */
FlagStatus FMC_GetFlagStatus(uint32_t FMC_Bank, uint32_t FMC_FLAG)
{
 800cb90:	b480      	push	{r7}
 800cb92:	b085      	sub	sp, #20
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
 800cb98:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsr = 0x00000000;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FMC_GETFLAG_BANK(FMC_Bank));
  assert_param(IS_FMC_GET_FLAG(FMC_FLAG));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2b10      	cmp	r3, #16
 800cba6:	d103      	bne.n	800cbb0 <FMC_GetFlagStatus+0x20>
  {
    tmpsr = FMC_Bank2->SR2;
 800cba8:	4b14      	ldr	r3, [pc, #80]	; (800cbfc <FMC_GetFlagStatus+0x6c>)
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	60bb      	str	r3, [r7, #8]
 800cbae:	e012      	b.n	800cbd6 <FMC_GetFlagStatus+0x46>
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbb6:	d103      	bne.n	800cbc0 <FMC_GetFlagStatus+0x30>
  {
    tmpsr = FMC_Bank3->SR3;
 800cbb8:	4b11      	ldr	r3, [pc, #68]	; (800cc00 <FMC_GetFlagStatus+0x70>)
 800cbba:	685b      	ldr	r3, [r3, #4]
 800cbbc:	60bb      	str	r3, [r7, #8]
 800cbbe:	e00a      	b.n	800cbd6 <FMC_GetFlagStatus+0x46>
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cbc6:	d103      	bne.n	800cbd0 <FMC_GetFlagStatus+0x40>
  {
    tmpsr = FMC_Bank4->SR4;
 800cbc8:	4b0e      	ldr	r3, [pc, #56]	; (800cc04 <FMC_GetFlagStatus+0x74>)
 800cbca:	685b      	ldr	r3, [r3, #4]
 800cbcc:	60bb      	str	r3, [r7, #8]
 800cbce:	e002      	b.n	800cbd6 <FMC_GetFlagStatus+0x46>
  }
  else 
  {
    tmpsr = FMC_Bank5_6->SDSR;
 800cbd0:	4b0d      	ldr	r3, [pc, #52]	; (800cc08 <FMC_GetFlagStatus+0x78>)
 800cbd2:	699b      	ldr	r3, [r3, #24]
 800cbd4:	60bb      	str	r3, [r7, #8]
  }
  
  /* Get the flag status */
  if ((tmpsr & FMC_FLAG) != FMC_FLAG )
 800cbd6:	68ba      	ldr	r2, [r7, #8]
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	401a      	ands	r2, r3
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d002      	beq.n	800cbe8 <FMC_GetFlagStatus+0x58>
  {
    bitstatus = RESET;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	73fb      	strb	r3, [r7, #15]
 800cbe6:	e001      	b.n	800cbec <FMC_GetFlagStatus+0x5c>
  }
  else
  {
    bitstatus = SET;
 800cbe8:	2301      	movs	r3, #1
 800cbea:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 800cbec:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3714      	adds	r7, #20
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf8:	4770      	bx	lr
 800cbfa:	bf00      	nop
 800cbfc:	a0000060 	.word	0xa0000060
 800cc00:	a0000080 	.word	0xa0000080
 800cc04:	a00000a0 	.word	0xa00000a0
 800cc08:	a0000140 	.word	0xa0000140

0800cc0c <FMC_ClearFlag>:
  *            @arg FMC_FLAG_FallingEdge: Falling edge detection Flag.
  *            @arg FMC_FLAG_Refresh: Refresh error Flag.  
  * @retval None
  */
void FMC_ClearFlag(uint32_t FMC_Bank, uint32_t FMC_FLAG)
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b083      	sub	sp, #12
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
 800cc14:	6039      	str	r1, [r7, #0]
 /* Check the parameters */
  assert_param(IS_FMC_GETFLAG_BANK(FMC_Bank));
  assert_param(IS_FMC_CLEAR_FLAG(FMC_FLAG)) ;
    
  if(FMC_Bank == FMC_Bank2_NAND)
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2b10      	cmp	r3, #16
 800cc1a:	d107      	bne.n	800cc2c <FMC_ClearFlag+0x20>
  {
    FMC_Bank2->SR2 &= (~FMC_FLAG); 
 800cc1c:	4b15      	ldr	r3, [pc, #84]	; (800cc74 <FMC_ClearFlag+0x68>)
 800cc1e:	4a15      	ldr	r2, [pc, #84]	; (800cc74 <FMC_ClearFlag+0x68>)
 800cc20:	6851      	ldr	r1, [r2, #4]
 800cc22:	683a      	ldr	r2, [r7, #0]
 800cc24:	43d2      	mvns	r2, r2
 800cc26:	400a      	ands	r2, r1
 800cc28:	605a      	str	r2, [r3, #4]
 800cc2a:	e01e      	b.n	800cc6a <FMC_ClearFlag+0x5e>
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc32:	d107      	bne.n	800cc44 <FMC_ClearFlag+0x38>
  {
    FMC_Bank3->SR3 &= (~FMC_FLAG);
 800cc34:	4b10      	ldr	r3, [pc, #64]	; (800cc78 <FMC_ClearFlag+0x6c>)
 800cc36:	4a10      	ldr	r2, [pc, #64]	; (800cc78 <FMC_ClearFlag+0x6c>)
 800cc38:	6851      	ldr	r1, [r2, #4]
 800cc3a:	683a      	ldr	r2, [r7, #0]
 800cc3c:	43d2      	mvns	r2, r2
 800cc3e:	400a      	ands	r2, r1
 800cc40:	605a      	str	r2, [r3, #4]
 800cc42:	e012      	b.n	800cc6a <FMC_ClearFlag+0x5e>
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc4a:	d107      	bne.n	800cc5c <FMC_ClearFlag+0x50>
  {
    FMC_Bank4->SR4 &= (~FMC_FLAG);
 800cc4c:	4b0b      	ldr	r3, [pc, #44]	; (800cc7c <FMC_ClearFlag+0x70>)
 800cc4e:	4a0b      	ldr	r2, [pc, #44]	; (800cc7c <FMC_ClearFlag+0x70>)
 800cc50:	6851      	ldr	r1, [r2, #4]
 800cc52:	683a      	ldr	r2, [r7, #0]
 800cc54:	43d2      	mvns	r2, r2
 800cc56:	400a      	ands	r2, r1
 800cc58:	605a      	str	r2, [r3, #4]
 800cc5a:	e006      	b.n	800cc6a <FMC_ClearFlag+0x5e>
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    FMC_Bank5_6->SDRTR &= (~FMC_FLAG);
 800cc5c:	4b08      	ldr	r3, [pc, #32]	; (800cc80 <FMC_ClearFlag+0x74>)
 800cc5e:	4a08      	ldr	r2, [pc, #32]	; (800cc80 <FMC_ClearFlag+0x74>)
 800cc60:	6951      	ldr	r1, [r2, #20]
 800cc62:	683a      	ldr	r2, [r7, #0]
 800cc64:	43d2      	mvns	r2, r2
 800cc66:	400a      	ands	r2, r1
 800cc68:	615a      	str	r2, [r3, #20]
  }
  
}
 800cc6a:	370c      	adds	r7, #12
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc72:	4770      	bx	lr
 800cc74:	a0000060 	.word	0xa0000060
 800cc78:	a0000080 	.word	0xa0000080
 800cc7c:	a00000a0 	.word	0xa00000a0
 800cc80:	a0000140 	.word	0xa0000140

0800cc84 <FMC_GetITStatus>:
  *            @arg FMC_IT_FallingEdge: Falling edge detection interrupt.
  *            @arg FMC_IT_Refresh: Refresh error detection interrupt.    
  * @retval The new state of FMC_IT (SET or RESET).
  */
ITStatus FMC_GetITStatus(uint32_t FMC_Bank, uint32_t FMC_IT)
{
 800cc84:	b480      	push	{r7}
 800cc86:	b089      	sub	sp, #36	; 0x24
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
 800cc8c:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpsr = 0x0;
 800cc92:	2300      	movs	r3, #0
 800cc94:	61bb      	str	r3, [r7, #24]
  uint32_t tmpsr2 = 0x0;
 800cc96:	2300      	movs	r3, #0
 800cc98:	617b      	str	r3, [r7, #20]
  uint32_t itstatus = 0x0;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	613b      	str	r3, [r7, #16]
  uint32_t itenable = 0x0; 
 800cc9e:	2300      	movs	r3, #0
 800cca0:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_FMC_IT_BANK(FMC_Bank));
  assert_param(IS_FMC_GET_IT(FMC_IT));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2b10      	cmp	r3, #16
 800cca6:	d103      	bne.n	800ccb0 <FMC_GetITStatus+0x2c>
  {
    tmpsr = FMC_Bank2->SR2;
 800cca8:	4b1f      	ldr	r3, [pc, #124]	; (800cd28 <FMC_GetITStatus+0xa4>)
 800ccaa:	685b      	ldr	r3, [r3, #4]
 800ccac:	61bb      	str	r3, [r7, #24]
 800ccae:	e015      	b.n	800ccdc <FMC_GetITStatus+0x58>
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ccb6:	d103      	bne.n	800ccc0 <FMC_GetITStatus+0x3c>
  {
    tmpsr = FMC_Bank3->SR3;
 800ccb8:	4b1c      	ldr	r3, [pc, #112]	; (800cd2c <FMC_GetITStatus+0xa8>)
 800ccba:	685b      	ldr	r3, [r3, #4]
 800ccbc:	61bb      	str	r3, [r7, #24]
 800ccbe:	e00d      	b.n	800ccdc <FMC_GetITStatus+0x58>
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ccc6:	d103      	bne.n	800ccd0 <FMC_GetITStatus+0x4c>
  {
    tmpsr = FMC_Bank4->SR4;
 800ccc8:	4b19      	ldr	r3, [pc, #100]	; (800cd30 <FMC_GetITStatus+0xac>)
 800ccca:	685b      	ldr	r3, [r3, #4]
 800cccc:	61bb      	str	r3, [r7, #24]
 800ccce:	e005      	b.n	800ccdc <FMC_GetITStatus+0x58>
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    tmpsr = FMC_Bank5_6->SDRTR;
 800ccd0:	4b18      	ldr	r3, [pc, #96]	; (800cd34 <FMC_GetITStatus+0xb0>)
 800ccd2:	695b      	ldr	r3, [r3, #20]
 800ccd4:	61bb      	str	r3, [r7, #24]
    tmpsr2 = FMC_Bank5_6->SDSR;
 800ccd6:	4b17      	ldr	r3, [pc, #92]	; (800cd34 <FMC_GetITStatus+0xb0>)
 800ccd8:	699b      	ldr	r3, [r3, #24]
 800ccda:	617b      	str	r3, [r7, #20]
  } 
  
  /* get the IT enable bit status*/
  itenable = tmpsr & FMC_IT;
 800ccdc:	69ba      	ldr	r2, [r7, #24]
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	4013      	ands	r3, r2
 800cce2:	60fb      	str	r3, [r7, #12]
  
  /* get the corresponding IT Flag status*/
  if((FMC_Bank == FMC_Bank1_SDRAM) || (FMC_Bank == FMC_Bank2_SDRAM))
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d002      	beq.n	800ccf0 <FMC_GetITStatus+0x6c>
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2b01      	cmp	r3, #1
 800ccee:	d104      	bne.n	800ccfa <FMC_GetITStatus+0x76>
  {
    itstatus = tmpsr2 & FMC_SDSR_RE;  
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	f003 0301 	and.w	r3, r3, #1
 800ccf6:	613b      	str	r3, [r7, #16]
 800ccf8:	e004      	b.n	800cd04 <FMC_GetITStatus+0x80>
  }           
  else
  {
    itstatus = tmpsr & (FMC_IT >> 3);  
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	08da      	lsrs	r2, r3, #3
 800ccfe:	69bb      	ldr	r3, [r7, #24]
 800cd00:	4013      	ands	r3, r2
 800cd02:	613b      	str	r3, [r7, #16]
  }  
  
  if ((itstatus != (uint32_t)RESET)  && (itenable != (uint32_t)RESET))
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d005      	beq.n	800cd16 <FMC_GetITStatus+0x92>
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d002      	beq.n	800cd16 <FMC_GetITStatus+0x92>
  {
    bitstatus = SET;
 800cd10:	2301      	movs	r3, #1
 800cd12:	77fb      	strb	r3, [r7, #31]
 800cd14:	e001      	b.n	800cd1a <FMC_GetITStatus+0x96>
  }
  else
  {
    bitstatus = RESET;
 800cd16:	2300      	movs	r3, #0
 800cd18:	77fb      	strb	r3, [r7, #31]
  }
  return bitstatus; 
 800cd1a:	7ffb      	ldrb	r3, [r7, #31]
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3724      	adds	r7, #36	; 0x24
 800cd20:	46bd      	mov	sp, r7
 800cd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd26:	4770      	bx	lr
 800cd28:	a0000060 	.word	0xa0000060
 800cd2c:	a0000080 	.word	0xa0000080
 800cd30:	a00000a0 	.word	0xa00000a0
 800cd34:	a0000140 	.word	0xa0000140

0800cd38 <FMC_ClearITPendingBit>:
  *            @arg FMC_IT_FallingEdge: Falling edge detection interrupt.
  *            @arg FMC_IT_Refresh: Refresh error detection interrupt.  
  * @retval None
  */
void FMC_ClearITPendingBit(uint32_t FMC_Bank, uint32_t FMC_IT)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b083      	sub	sp, #12
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
 800cd40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_IT_BANK(FMC_Bank));
  assert_param(IS_FMC_IT(FMC_IT));
    
  if(FMC_Bank == FMC_Bank2_NAND)
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	2b10      	cmp	r3, #16
 800cd46:	d108      	bne.n	800cd5a <FMC_ClearITPendingBit+0x22>
  {
    FMC_Bank2->SR2 &= ~(FMC_IT >> 3); 
 800cd48:	4b16      	ldr	r3, [pc, #88]	; (800cda4 <FMC_ClearITPendingBit+0x6c>)
 800cd4a:	4a16      	ldr	r2, [pc, #88]	; (800cda4 <FMC_ClearITPendingBit+0x6c>)
 800cd4c:	6851      	ldr	r1, [r2, #4]
 800cd4e:	683a      	ldr	r2, [r7, #0]
 800cd50:	08d2      	lsrs	r2, r2, #3
 800cd52:	43d2      	mvns	r2, r2
 800cd54:	400a      	ands	r2, r1
 800cd56:	605a      	str	r2, [r3, #4]
 800cd58:	e01f      	b.n	800cd9a <FMC_ClearITPendingBit+0x62>
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd60:	d108      	bne.n	800cd74 <FMC_ClearITPendingBit+0x3c>
  {
    FMC_Bank3->SR3 &= ~(FMC_IT >> 3);
 800cd62:	4b11      	ldr	r3, [pc, #68]	; (800cda8 <FMC_ClearITPendingBit+0x70>)
 800cd64:	4a10      	ldr	r2, [pc, #64]	; (800cda8 <FMC_ClearITPendingBit+0x70>)
 800cd66:	6851      	ldr	r1, [r2, #4]
 800cd68:	683a      	ldr	r2, [r7, #0]
 800cd6a:	08d2      	lsrs	r2, r2, #3
 800cd6c:	43d2      	mvns	r2, r2
 800cd6e:	400a      	ands	r2, r1
 800cd70:	605a      	str	r2, [r3, #4]
 800cd72:	e012      	b.n	800cd9a <FMC_ClearITPendingBit+0x62>
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd7a:	d108      	bne.n	800cd8e <FMC_ClearITPendingBit+0x56>
  {
    FMC_Bank4->SR4 &= ~(FMC_IT >> 3);
 800cd7c:	4b0b      	ldr	r3, [pc, #44]	; (800cdac <FMC_ClearITPendingBit+0x74>)
 800cd7e:	4a0b      	ldr	r2, [pc, #44]	; (800cdac <FMC_ClearITPendingBit+0x74>)
 800cd80:	6851      	ldr	r1, [r2, #4]
 800cd82:	683a      	ldr	r2, [r7, #0]
 800cd84:	08d2      	lsrs	r2, r2, #3
 800cd86:	43d2      	mvns	r2, r2
 800cd88:	400a      	ands	r2, r1
 800cd8a:	605a      	str	r2, [r3, #4]
 800cd8c:	e005      	b.n	800cd9a <FMC_ClearITPendingBit+0x62>
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    FMC_Bank5_6->SDRTR |= FMC_SDRTR_CRE;
 800cd8e:	4b08      	ldr	r3, [pc, #32]	; (800cdb0 <FMC_ClearITPendingBit+0x78>)
 800cd90:	4a07      	ldr	r2, [pc, #28]	; (800cdb0 <FMC_ClearITPendingBit+0x78>)
 800cd92:	6952      	ldr	r2, [r2, #20]
 800cd94:	f042 0201 	orr.w	r2, r2, #1
 800cd98:	615a      	str	r2, [r3, #20]
  }
}
 800cd9a:	370c      	adds	r7, #12
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda2:	4770      	bx	lr
 800cda4:	a0000060 	.word	0xa0000060
 800cda8:	a0000080 	.word	0xa0000080
 800cdac:	a00000a0 	.word	0xa00000a0
 800cdb0:	a0000140 	.word	0xa0000140

0800cdb4 <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b082      	sub	sp, #8
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 800cdbc:	687a      	ldr	r2, [r7, #4]
 800cdbe:	4b4b      	ldr	r3, [pc, #300]	; (800ceec <GPIO_DeInit+0x138>)
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	d108      	bne.n	800cdd6 <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800cdc4:	2001      	movs	r0, #1
 800cdc6:	2101      	movs	r1, #1
 800cdc8:	f002 ffe4 	bl	800fd94 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 800cdcc:	2001      	movs	r0, #1
 800cdce:	2100      	movs	r1, #0
 800cdd0:	f002 ffe0 	bl	800fd94 <RCC_AHB1PeriphResetCmd>
 800cdd4:	e086      	b.n	800cee4 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOB)
 800cdd6:	687a      	ldr	r2, [r7, #4]
 800cdd8:	4b45      	ldr	r3, [pc, #276]	; (800cef0 <GPIO_DeInit+0x13c>)
 800cdda:	429a      	cmp	r2, r3
 800cddc:	d108      	bne.n	800cdf0 <GPIO_DeInit+0x3c>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800cdde:	2002      	movs	r0, #2
 800cde0:	2101      	movs	r1, #1
 800cde2:	f002 ffd7 	bl	800fd94 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 800cde6:	2002      	movs	r0, #2
 800cde8:	2100      	movs	r1, #0
 800cdea:	f002 ffd3 	bl	800fd94 <RCC_AHB1PeriphResetCmd>
 800cdee:	e079      	b.n	800cee4 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOC)
 800cdf0:	687a      	ldr	r2, [r7, #4]
 800cdf2:	4b40      	ldr	r3, [pc, #256]	; (800cef4 <GPIO_DeInit+0x140>)
 800cdf4:	429a      	cmp	r2, r3
 800cdf6:	d108      	bne.n	800ce0a <GPIO_DeInit+0x56>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 800cdf8:	2004      	movs	r0, #4
 800cdfa:	2101      	movs	r1, #1
 800cdfc:	f002 ffca 	bl	800fd94 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 800ce00:	2004      	movs	r0, #4
 800ce02:	2100      	movs	r1, #0
 800ce04:	f002 ffc6 	bl	800fd94 <RCC_AHB1PeriphResetCmd>
 800ce08:	e06c      	b.n	800cee4 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOD)
 800ce0a:	687a      	ldr	r2, [r7, #4]
 800ce0c:	4b3a      	ldr	r3, [pc, #232]	; (800cef8 <GPIO_DeInit+0x144>)
 800ce0e:	429a      	cmp	r2, r3
 800ce10:	d108      	bne.n	800ce24 <GPIO_DeInit+0x70>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 800ce12:	2008      	movs	r0, #8
 800ce14:	2101      	movs	r1, #1
 800ce16:	f002 ffbd 	bl	800fd94 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 800ce1a:	2008      	movs	r0, #8
 800ce1c:	2100      	movs	r1, #0
 800ce1e:	f002 ffb9 	bl	800fd94 <RCC_AHB1PeriphResetCmd>
 800ce22:	e05f      	b.n	800cee4 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOE)
 800ce24:	687a      	ldr	r2, [r7, #4]
 800ce26:	4b35      	ldr	r3, [pc, #212]	; (800cefc <GPIO_DeInit+0x148>)
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	d108      	bne.n	800ce3e <GPIO_DeInit+0x8a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 800ce2c:	2010      	movs	r0, #16
 800ce2e:	2101      	movs	r1, #1
 800ce30:	f002 ffb0 	bl	800fd94 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 800ce34:	2010      	movs	r0, #16
 800ce36:	2100      	movs	r1, #0
 800ce38:	f002 ffac 	bl	800fd94 <RCC_AHB1PeriphResetCmd>
 800ce3c:	e052      	b.n	800cee4 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOF)
 800ce3e:	687a      	ldr	r2, [r7, #4]
 800ce40:	4b2f      	ldr	r3, [pc, #188]	; (800cf00 <GPIO_DeInit+0x14c>)
 800ce42:	429a      	cmp	r2, r3
 800ce44:	d108      	bne.n	800ce58 <GPIO_DeInit+0xa4>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 800ce46:	2020      	movs	r0, #32
 800ce48:	2101      	movs	r1, #1
 800ce4a:	f002 ffa3 	bl	800fd94 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 800ce4e:	2020      	movs	r0, #32
 800ce50:	2100      	movs	r1, #0
 800ce52:	f002 ff9f 	bl	800fd94 <RCC_AHB1PeriphResetCmd>
 800ce56:	e045      	b.n	800cee4 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOG)
 800ce58:	687a      	ldr	r2, [r7, #4]
 800ce5a:	4b2a      	ldr	r3, [pc, #168]	; (800cf04 <GPIO_DeInit+0x150>)
 800ce5c:	429a      	cmp	r2, r3
 800ce5e:	d108      	bne.n	800ce72 <GPIO_DeInit+0xbe>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 800ce60:	2040      	movs	r0, #64	; 0x40
 800ce62:	2101      	movs	r1, #1
 800ce64:	f002 ff96 	bl	800fd94 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 800ce68:	2040      	movs	r0, #64	; 0x40
 800ce6a:	2100      	movs	r1, #0
 800ce6c:	f002 ff92 	bl	800fd94 <RCC_AHB1PeriphResetCmd>
 800ce70:	e038      	b.n	800cee4 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOH)
 800ce72:	687a      	ldr	r2, [r7, #4]
 800ce74:	4b24      	ldr	r3, [pc, #144]	; (800cf08 <GPIO_DeInit+0x154>)
 800ce76:	429a      	cmp	r2, r3
 800ce78:	d108      	bne.n	800ce8c <GPIO_DeInit+0xd8>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 800ce7a:	2080      	movs	r0, #128	; 0x80
 800ce7c:	2101      	movs	r1, #1
 800ce7e:	f002 ff89 	bl	800fd94 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 800ce82:	2080      	movs	r0, #128	; 0x80
 800ce84:	2100      	movs	r1, #0
 800ce86:	f002 ff85 	bl	800fd94 <RCC_AHB1PeriphResetCmd>
 800ce8a:	e02b      	b.n	800cee4 <GPIO_DeInit+0x130>
  }

  else if (GPIOx == GPIOI)
 800ce8c:	687a      	ldr	r2, [r7, #4]
 800ce8e:	4b1f      	ldr	r3, [pc, #124]	; (800cf0c <GPIO_DeInit+0x158>)
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d10a      	bne.n	800ceaa <GPIO_DeInit+0xf6>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 800ce94:	f44f 7080 	mov.w	r0, #256	; 0x100
 800ce98:	2101      	movs	r1, #1
 800ce9a:	f002 ff7b 	bl	800fd94 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 800ce9e:	f44f 7080 	mov.w	r0, #256	; 0x100
 800cea2:	2100      	movs	r1, #0
 800cea4:	f002 ff76 	bl	800fd94 <RCC_AHB1PeriphResetCmd>
 800cea8:	e01c      	b.n	800cee4 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOJ)
 800ceaa:	687a      	ldr	r2, [r7, #4]
 800ceac:	4b18      	ldr	r3, [pc, #96]	; (800cf10 <GPIO_DeInit+0x15c>)
 800ceae:	429a      	cmp	r2, r3
 800ceb0:	d10a      	bne.n	800cec8 <GPIO_DeInit+0x114>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
 800ceb2:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ceb6:	2101      	movs	r1, #1
 800ceb8:	f002 ff6c 	bl	800fd94 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
 800cebc:	f44f 7000 	mov.w	r0, #512	; 0x200
 800cec0:	2100      	movs	r1, #0
 800cec2:	f002 ff67 	bl	800fd94 <RCC_AHB1PeriphResetCmd>
 800cec6:	e00d      	b.n	800cee4 <GPIO_DeInit+0x130>
  }
  else
  {
    if (GPIOx == GPIOK)
 800cec8:	687a      	ldr	r2, [r7, #4]
 800ceca:	4b12      	ldr	r3, [pc, #72]	; (800cf14 <GPIO_DeInit+0x160>)
 800cecc:	429a      	cmp	r2, r3
 800cece:	d109      	bne.n	800cee4 <GPIO_DeInit+0x130>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
 800ced0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800ced4:	2101      	movs	r1, #1
 800ced6:	f002 ff5d 	bl	800fd94 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
 800ceda:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800cede:	2100      	movs	r1, #0
 800cee0:	f002 ff58 	bl	800fd94 <RCC_AHB1PeriphResetCmd>
    }
  }
}
 800cee4:	3708      	adds	r7, #8
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}
 800ceea:	bf00      	nop
 800ceec:	40020000 	.word	0x40020000
 800cef0:	40020400 	.word	0x40020400
 800cef4:	40020800 	.word	0x40020800
 800cef8:	40020c00 	.word	0x40020c00
 800cefc:	40021000 	.word	0x40021000
 800cf00:	40021400 	.word	0x40021400
 800cf04:	40021800 	.word	0x40021800
 800cf08:	40021c00 	.word	0x40021c00
 800cf0c:	40022000 	.word	0x40022000
 800cf10:	40022400 	.word	0x40022400
 800cf14:	40022800 	.word	0x40022800

0800cf18 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800cf18:	b480      	push	{r7}
 800cf1a:	b087      	sub	sp, #28
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
 800cf20:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800cf22:	2300      	movs	r3, #0
 800cf24:	617b      	str	r3, [r7, #20]
 800cf26:	2300      	movs	r3, #0
 800cf28:	613b      	str	r3, [r7, #16]
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800cf2e:	2300      	movs	r3, #0
 800cf30:	617b      	str	r3, [r7, #20]
 800cf32:	e076      	b.n	800d022 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	2201      	movs	r2, #1
 800cf38:	fa02 f303 	lsl.w	r3, r2, r3
 800cf3c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	681a      	ldr	r2, [r3, #0]
 800cf42:	693b      	ldr	r3, [r7, #16]
 800cf44:	4013      	ands	r3, r2
 800cf46:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800cf48:	68fa      	ldr	r2, [r7, #12]
 800cf4a:	693b      	ldr	r3, [r7, #16]
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	d165      	bne.n	800d01c <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681a      	ldr	r2, [r3, #0]
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	005b      	lsls	r3, r3, #1
 800cf58:	2103      	movs	r1, #3
 800cf5a:	fa01 f303 	lsl.w	r3, r1, r3
 800cf5e:	43db      	mvns	r3, r3
 800cf60:	401a      	ands	r2, r3
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681a      	ldr	r2, [r3, #0]
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	791b      	ldrb	r3, [r3, #4]
 800cf6e:	4619      	mov	r1, r3
 800cf70:	697b      	ldr	r3, [r7, #20]
 800cf72:	005b      	lsls	r3, r3, #1
 800cf74:	fa01 f303 	lsl.w	r3, r1, r3
 800cf78:	431a      	orrs	r2, r3
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	791b      	ldrb	r3, [r3, #4]
 800cf82:	2b01      	cmp	r3, #1
 800cf84:	d003      	beq.n	800cf8e <GPIO_Init+0x76>
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	791b      	ldrb	r3, [r3, #4]
 800cf8a:	2b02      	cmp	r3, #2
 800cf8c:	d12e      	bne.n	800cfec <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	689a      	ldr	r2, [r3, #8]
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	005b      	lsls	r3, r3, #1
 800cf96:	2103      	movs	r1, #3
 800cf98:	fa01 f303 	lsl.w	r3, r1, r3
 800cf9c:	43db      	mvns	r3, r3
 800cf9e:	401a      	ands	r2, r3
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	689a      	ldr	r2, [r3, #8]
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	795b      	ldrb	r3, [r3, #5]
 800cfac:	4619      	mov	r1, r3
 800cfae:	697b      	ldr	r3, [r7, #20]
 800cfb0:	005b      	lsls	r3, r3, #1
 800cfb2:	fa01 f303 	lsl.w	r3, r1, r3
 800cfb6:	431a      	orrs	r2, r3
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	685a      	ldr	r2, [r3, #4]
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	b29b      	uxth	r3, r3
 800cfc4:	2101      	movs	r1, #1
 800cfc6:	fa01 f303 	lsl.w	r3, r1, r3
 800cfca:	43db      	mvns	r3, r3
 800cfcc:	401a      	ands	r2, r3
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	685a      	ldr	r2, [r3, #4]
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	799b      	ldrb	r3, [r3, #6]
 800cfda:	4619      	mov	r1, r3
 800cfdc:	697b      	ldr	r3, [r7, #20]
 800cfde:	b29b      	uxth	r3, r3
 800cfe0:	fa01 f303 	lsl.w	r3, r1, r3
 800cfe4:	b29b      	uxth	r3, r3
 800cfe6:	431a      	orrs	r2, r3
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	68da      	ldr	r2, [r3, #12]
 800cff0:	697b      	ldr	r3, [r7, #20]
 800cff2:	b29b      	uxth	r3, r3
 800cff4:	005b      	lsls	r3, r3, #1
 800cff6:	2103      	movs	r1, #3
 800cff8:	fa01 f303 	lsl.w	r3, r1, r3
 800cffc:	43db      	mvns	r3, r3
 800cffe:	401a      	ands	r2, r3
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	68da      	ldr	r2, [r3, #12]
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	79db      	ldrb	r3, [r3, #7]
 800d00c:	4619      	mov	r1, r3
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	005b      	lsls	r3, r3, #1
 800d012:	fa01 f303 	lsl.w	r3, r1, r3
 800d016:	431a      	orrs	r2, r3
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	3301      	adds	r3, #1
 800d020:	617b      	str	r3, [r7, #20]
 800d022:	697b      	ldr	r3, [r7, #20]
 800d024:	2b0f      	cmp	r3, #15
 800d026:	d985      	bls.n	800cf34 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800d028:	371c      	adds	r7, #28
 800d02a:	46bd      	mov	sp, r7
 800d02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d030:	4770      	bx	lr
 800d032:	bf00      	nop

0800d034 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 800d034:	b480      	push	{r7}
 800d036:	b083      	sub	sp, #12
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d042:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2200      	movs	r2, #0
 800d048:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2200      	movs	r2, #0
 800d04e:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2200      	movs	r2, #0
 800d054:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2200      	movs	r2, #0
 800d05a:	71da      	strb	r2, [r3, #7]
}
 800d05c:	370c      	adds	r7, #12
 800d05e:	46bd      	mov	sp, r7
 800d060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d064:	4770      	bx	lr
 800d066:	bf00      	nop

0800d068 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d068:	b480      	push	{r7}
 800d06a:	b085      	sub	sp, #20
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
 800d070:	460b      	mov	r3, r1
 800d072:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0x00010000;
 800d074:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d078:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 800d07a:	887a      	ldrh	r2, [r7, #2]
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	4313      	orrs	r3, r2
 800d080:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800d082:	68fa      	ldr	r2, [r7, #12]
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 800d088:	887a      	ldrh	r2, [r7, #2]
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800d08e:	68fa      	ldr	r2, [r7, #12]
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	69db      	ldr	r3, [r3, #28]
 800d098:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	69db      	ldr	r3, [r3, #28]
 800d09e:	60fb      	str	r3, [r7, #12]
}
 800d0a0:	3714      	adds	r7, #20
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a8:	4770      	bx	lr
 800d0aa:	bf00      	nop

0800d0ac <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b085      	sub	sp, #20
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
 800d0b4:	460b      	mov	r3, r1
 800d0b6:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	691a      	ldr	r2, [r3, #16]
 800d0c0:	887b      	ldrh	r3, [r7, #2]
 800d0c2:	4013      	ands	r3, r2
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d002      	beq.n	800d0ce <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	73fb      	strb	r3, [r7, #15]
 800d0cc:	e001      	b.n	800d0d2 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d0d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	3714      	adds	r7, #20
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0de:	4770      	bx	lr

0800d0e0 <GPIO_ReadInputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 800d0e0:	b480      	push	{r7}
 800d0e2:	b083      	sub	sp, #12
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	691b      	ldr	r3, [r3, #16]
 800d0ec:	b29b      	uxth	r3, r3
}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	370c      	adds	r7, #12
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f8:	4770      	bx	lr
 800d0fa:	bf00      	nop

0800d0fc <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d0fc:	b480      	push	{r7}
 800d0fe:	b085      	sub	sp, #20
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
 800d104:	460b      	mov	r3, r1
 800d106:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800d108:	2300      	movs	r3, #0
 800d10a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	695a      	ldr	r2, [r3, #20]
 800d110:	887b      	ldrh	r3, [r7, #2]
 800d112:	4013      	ands	r3, r2
 800d114:	2b00      	cmp	r3, #0
 800d116:	d002      	beq.n	800d11e <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 800d118:	2301      	movs	r3, #1
 800d11a:	73fb      	strb	r3, [r7, #15]
 800d11c:	e001      	b.n	800d122 <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800d11e:	2300      	movs	r3, #0
 800d120:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d122:	7bfb      	ldrb	r3, [r7, #15]
}
 800d124:	4618      	mov	r0, r3
 800d126:	3714      	adds	r7, #20
 800d128:	46bd      	mov	sp, r7
 800d12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12e:	4770      	bx	lr

0800d130 <GPIO_ReadOutputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 800d130:	b480      	push	{r7}
 800d132:	b083      	sub	sp, #12
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	695b      	ldr	r3, [r3, #20]
 800d13c:	b29b      	uxth	r3, r3
}
 800d13e:	4618      	mov	r0, r3
 800d140:	370c      	adds	r7, #12
 800d142:	46bd      	mov	sp, r7
 800d144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d148:	4770      	bx	lr
 800d14a:	bf00      	nop

0800d14c <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d14c:	b480      	push	{r7}
 800d14e:	b083      	sub	sp, #12
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
 800d154:	460b      	mov	r3, r1
 800d156:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	887a      	ldrh	r2, [r7, #2]
 800d15c:	831a      	strh	r2, [r3, #24]
}
 800d15e:	370c      	adds	r7, #12
 800d160:	46bd      	mov	sp, r7
 800d162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d166:	4770      	bx	lr

0800d168 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d168:	b480      	push	{r7}
 800d16a:	b083      	sub	sp, #12
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
 800d170:	460b      	mov	r3, r1
 800d172:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	887a      	ldrh	r2, [r7, #2]
 800d178:	835a      	strh	r2, [r3, #26]
}
 800d17a:	370c      	adds	r7, #12
 800d17c:	46bd      	mov	sp, r7
 800d17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d182:	4770      	bx	lr

0800d184 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 800d184:	b480      	push	{r7}
 800d186:	b083      	sub	sp, #12
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
 800d18c:	4613      	mov	r3, r2
 800d18e:	460a      	mov	r2, r1
 800d190:	807a      	strh	r2, [r7, #2]
 800d192:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 800d194:	787b      	ldrb	r3, [r7, #1]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d003      	beq.n	800d1a2 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	887a      	ldrh	r2, [r7, #2]
 800d19e:	831a      	strh	r2, [r3, #24]
 800d1a0:	e002      	b.n	800d1a8 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	887a      	ldrh	r2, [r7, #2]
 800d1a6:	835a      	strh	r2, [r3, #26]
  }
}
 800d1a8:	370c      	adds	r7, #12
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b0:	4770      	bx	lr
 800d1b2:	bf00      	nop

0800d1b4 <GPIO_Write>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 800d1b4:	b480      	push	{r7}
 800d1b6:	b083      	sub	sp, #12
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
 800d1bc:	460b      	mov	r3, r1
 800d1be:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 800d1c0:	887a      	ldrh	r2, [r7, #2]
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	615a      	str	r2, [r3, #20]
}
 800d1c6:	370c      	adds	r7, #12
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ce:	4770      	bx	lr

0800d1d0 <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d1d0:	b480      	push	{r7}
 800d1d2:	b083      	sub	sp, #12
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
 800d1d8:	460b      	mov	r3, r1
 800d1da:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	695a      	ldr	r2, [r3, #20]
 800d1e0:	887b      	ldrh	r3, [r7, #2]
 800d1e2:	405a      	eors	r2, r3
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	615a      	str	r2, [r3, #20]
}
 800d1e8:	370c      	adds	r7, #12
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f0:	4770      	bx	lr
 800d1f2:	bf00      	nop

0800d1f4 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800d1f4:	b480      	push	{r7}
 800d1f6:	b085      	sub	sp, #20
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
 800d1fc:	4613      	mov	r3, r2
 800d1fe:	460a      	mov	r2, r1
 800d200:	807a      	strh	r2, [r7, #2]
 800d202:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800d204:	2300      	movs	r3, #0
 800d206:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800d208:	2300      	movs	r3, #0
 800d20a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800d20c:	787a      	ldrb	r2, [r7, #1]
 800d20e:	887b      	ldrh	r3, [r7, #2]
 800d210:	f003 0307 	and.w	r3, r3, #7
 800d214:	009b      	lsls	r3, r3, #2
 800d216:	fa02 f303 	lsl.w	r3, r2, r3
 800d21a:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800d21c:	887b      	ldrh	r3, [r7, #2]
 800d21e:	08db      	lsrs	r3, r3, #3
 800d220:	b29b      	uxth	r3, r3
 800d222:	461a      	mov	r2, r3
 800d224:	887b      	ldrh	r3, [r7, #2]
 800d226:	08db      	lsrs	r3, r3, #3
 800d228:	b29b      	uxth	r3, r3
 800d22a:	4619      	mov	r1, r3
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	3108      	adds	r1, #8
 800d230:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800d234:	887b      	ldrh	r3, [r7, #2]
 800d236:	f003 0307 	and.w	r3, r3, #7
 800d23a:	009b      	lsls	r3, r3, #2
 800d23c:	200f      	movs	r0, #15
 800d23e:	fa00 f303 	lsl.w	r3, r0, r3
 800d242:	43db      	mvns	r3, r3
 800d244:	4019      	ands	r1, r3
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	3208      	adds	r2, #8
 800d24a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800d24e:	887b      	ldrh	r3, [r7, #2]
 800d250:	08db      	lsrs	r3, r3, #3
 800d252:	b29b      	uxth	r3, r3
 800d254:	461a      	mov	r2, r3
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	3208      	adds	r2, #8
 800d25a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	4313      	orrs	r3, r2
 800d262:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800d264:	887b      	ldrh	r3, [r7, #2]
 800d266:	08db      	lsrs	r3, r3, #3
 800d268:	b29b      	uxth	r3, r3
 800d26a:	461a      	mov	r2, r3
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	3208      	adds	r2, #8
 800d270:	68b9      	ldr	r1, [r7, #8]
 800d272:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800d276:	3714      	adds	r7, #20
 800d278:	46bd      	mov	sp, r7
 800d27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27e:	4770      	bx	lr

0800d280 <HASH_DeInit>:
  * @brief  De-initializes the HASH peripheral registers to their default reset values
  * @param  None
  * @retval None
  */
void HASH_DeInit(void)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	af00      	add	r7, sp, #0
  /* Enable HASH reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, ENABLE);
 800d284:	2020      	movs	r0, #32
 800d286:	2101      	movs	r1, #1
 800d288:	f002 fda2 	bl	800fdd0 <RCC_AHB2PeriphResetCmd>
  /* Release HASH from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, DISABLE);
 800d28c:	2020      	movs	r0, #32
 800d28e:	2100      	movs	r1, #0
 800d290:	f002 fd9e 	bl	800fdd0 <RCC_AHB2PeriphResetCmd>
}
 800d294:	bd80      	pop	{r7, pc}
 800d296:	bf00      	nop

0800d298 <HASH_Init>:
  * @note   The field HASH_HMACKeyType in HASH_InitTypeDef must be filled only 
  *          if the algorithm mode is HMAC.       
  * @retval None
  */
void HASH_Init(HASH_InitTypeDef* HASH_InitStruct)
{
 800d298:	b480      	push	{r7}
 800d29a:	b083      	sub	sp, #12
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
  assert_param(IS_HASH_ALGOSELECTION(HASH_InitStruct->HASH_AlgoSelection));
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
 800d2a0:	4a18      	ldr	r2, [pc, #96]	; (800d304 <HASH_Init+0x6c>)
 800d2a2:	4b18      	ldr	r3, [pc, #96]	; (800d304 <HASH_Init+0x6c>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d2aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d2ae:	6013      	str	r3, [r2, #0]
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 800d2b0:	4b14      	ldr	r3, [pc, #80]	; (800d304 <HASH_Init+0x6c>)
 800d2b2:	4a14      	ldr	r2, [pc, #80]	; (800d304 <HASH_Init+0x6c>)
 800d2b4:	6811      	ldr	r1, [r2, #0]
 800d2b6:	687a      	ldr	r2, [r7, #4]
 800d2b8:	6810      	ldr	r0, [r2, #0]
               HASH_InitStruct->HASH_DataType | \
 800d2ba:	687a      	ldr	r2, [r7, #4]
 800d2bc:	6892      	ldr	r2, [r2, #8]
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 800d2be:	4310      	orrs	r0, r2
               HASH_InitStruct->HASH_DataType | \
               HASH_InitStruct->HASH_AlgoMode);
 800d2c0:	687a      	ldr	r2, [r7, #4]
 800d2c2:	6852      	ldr	r2, [r2, #4]
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
               HASH_InitStruct->HASH_DataType | \
 800d2c4:	4302      	orrs	r2, r0
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 800d2c6:	430a      	orrs	r2, r1
 800d2c8:	601a      	str	r2, [r3, #0]
               HASH_InitStruct->HASH_DataType | \
               HASH_InitStruct->HASH_AlgoMode);
  
  /* if algorithm mode is HMAC, set the Key */  
  if(HASH_InitStruct->HASH_AlgoMode == HASH_AlgoMode_HMAC) 
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	2b40      	cmp	r3, #64	; 0x40
 800d2d0:	d10c      	bne.n	800d2ec <HASH_Init+0x54>
  {
    assert_param(IS_HASH_HMAC_KEYTYPE(HASH_InitStruct->HASH_HMACKeyType));
    HASH->CR &= ~HASH_CR_LKEY;
 800d2d2:	4b0c      	ldr	r3, [pc, #48]	; (800d304 <HASH_Init+0x6c>)
 800d2d4:	4a0b      	ldr	r2, [pc, #44]	; (800d304 <HASH_Init+0x6c>)
 800d2d6:	6812      	ldr	r2, [r2, #0]
 800d2d8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d2dc:	601a      	str	r2, [r3, #0]
    HASH->CR |= HASH_InitStruct->HASH_HMACKeyType;
 800d2de:	4b09      	ldr	r3, [pc, #36]	; (800d304 <HASH_Init+0x6c>)
 800d2e0:	4a08      	ldr	r2, [pc, #32]	; (800d304 <HASH_Init+0x6c>)
 800d2e2:	6811      	ldr	r1, [r2, #0]
 800d2e4:	687a      	ldr	r2, [r7, #4]
 800d2e6:	68d2      	ldr	r2, [r2, #12]
 800d2e8:	430a      	orrs	r2, r1
 800d2ea:	601a      	str	r2, [r3, #0]
  }

  /* Reset the HASH processor core, so that the HASH will be ready to compute 
     the message digest of a new message */
  HASH->CR |= HASH_CR_INIT;  
 800d2ec:	4b05      	ldr	r3, [pc, #20]	; (800d304 <HASH_Init+0x6c>)
 800d2ee:	4a05      	ldr	r2, [pc, #20]	; (800d304 <HASH_Init+0x6c>)
 800d2f0:	6812      	ldr	r2, [r2, #0]
 800d2f2:	f042 0204 	orr.w	r2, r2, #4
 800d2f6:	601a      	str	r2, [r3, #0]
}
 800d2f8:	370c      	adds	r7, #12
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d300:	4770      	bx	lr
 800d302:	bf00      	nop
 800d304:	50060400 	.word	0x50060400

0800d308 <HASH_StructInit>:
  *  @note  The default values set are : Processor mode is HASH, Algorithm selected is SHA1,
  *          Data type selected is 32b and HMAC Key Type is short key.  
  * @retval None
  */
void HASH_StructInit(HASH_InitTypeDef* HASH_InitStruct)
{
 800d308:	b480      	push	{r7}
 800d30a:	b083      	sub	sp, #12
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
  /* Initialize the HASH_AlgoSelection member */
  HASH_InitStruct->HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2200      	movs	r2, #0
 800d314:	601a      	str	r2, [r3, #0]

  /* Initialize the HASH_AlgoMode member */
  HASH_InitStruct->HASH_AlgoMode = HASH_AlgoMode_HASH;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2200      	movs	r2, #0
 800d31a:	605a      	str	r2, [r3, #4]

  /* Initialize the HASH_DataType member */
  HASH_InitStruct->HASH_DataType = HASH_DataType_32b;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2200      	movs	r2, #0
 800d320:	609a      	str	r2, [r3, #8]

  /* Initialize the HASH_HMACKeyType member */
  HASH_InitStruct->HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	2200      	movs	r2, #0
 800d326:	60da      	str	r2, [r3, #12]
}
 800d328:	370c      	adds	r7, #12
 800d32a:	46bd      	mov	sp, r7
 800d32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d330:	4770      	bx	lr
 800d332:	bf00      	nop

0800d334 <HASH_Reset>:
  *         interrupt and HASH_FLAG_DCIS flag. 
  * @param  None
  * @retval None
  */
void HASH_Reset(void)
{
 800d334:	b480      	push	{r7}
 800d336:	af00      	add	r7, sp, #0
  /* Reset the HASH processor core */
  HASH->CR |= HASH_CR_INIT;
 800d338:	4b04      	ldr	r3, [pc, #16]	; (800d34c <HASH_Reset+0x18>)
 800d33a:	4a04      	ldr	r2, [pc, #16]	; (800d34c <HASH_Reset+0x18>)
 800d33c:	6812      	ldr	r2, [r2, #0]
 800d33e:	f042 0204 	orr.w	r2, r2, #4
 800d342:	601a      	str	r2, [r3, #0]
}
 800d344:	46bd      	mov	sp, r7
 800d346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34a:	4770      	bx	lr
 800d34c:	50060400 	.word	0x50060400

0800d350 <HASH_SetLastWordValidBitsNbr>:
  * @note   The Number of valid bits must be set before to start the message 
  *         digest competition (in Hash and HMAC) and key treatment(in HMAC).    
  * @retval None
  */
void HASH_SetLastWordValidBitsNbr(uint16_t ValidNumber)
{
 800d350:	b480      	push	{r7}
 800d352:	b083      	sub	sp, #12
 800d354:	af00      	add	r7, sp, #0
 800d356:	4603      	mov	r3, r0
 800d358:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_HASH_VALIDBITSNUMBER(ValidNumber));
  
  /* Configure the Number of valid bits in last word of the message */
  HASH->STR &= ~(HASH_STR_NBW);
 800d35a:	4b08      	ldr	r3, [pc, #32]	; (800d37c <HASH_SetLastWordValidBitsNbr+0x2c>)
 800d35c:	4a07      	ldr	r2, [pc, #28]	; (800d37c <HASH_SetLastWordValidBitsNbr+0x2c>)
 800d35e:	6892      	ldr	r2, [r2, #8]
 800d360:	f022 021f 	bic.w	r2, r2, #31
 800d364:	609a      	str	r2, [r3, #8]
  HASH->STR |= ValidNumber;
 800d366:	4b05      	ldr	r3, [pc, #20]	; (800d37c <HASH_SetLastWordValidBitsNbr+0x2c>)
 800d368:	4a04      	ldr	r2, [pc, #16]	; (800d37c <HASH_SetLastWordValidBitsNbr+0x2c>)
 800d36a:	6891      	ldr	r1, [r2, #8]
 800d36c:	88fa      	ldrh	r2, [r7, #6]
 800d36e:	430a      	orrs	r2, r1
 800d370:	609a      	str	r2, [r3, #8]
}
 800d372:	370c      	adds	r7, #12
 800d374:	46bd      	mov	sp, r7
 800d376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37a:	4770      	bx	lr
 800d37c:	50060400 	.word	0x50060400

0800d380 <HASH_DataIn>:
  * @brief  Writes data in the Data Input FIFO
  * @param  Data: new data of the message to be processed.
  * @retval None
  */
void HASH_DataIn(uint32_t Data)
{
 800d380:	b480      	push	{r7}
 800d382:	b083      	sub	sp, #12
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
  /* Write in the DIN register a new data */
  HASH->DIN = Data;
 800d388:	4b03      	ldr	r3, [pc, #12]	; (800d398 <HASH_DataIn+0x18>)
 800d38a:	687a      	ldr	r2, [r7, #4]
 800d38c:	605a      	str	r2, [r3, #4]
}
 800d38e:	370c      	adds	r7, #12
 800d390:	46bd      	mov	sp, r7
 800d392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d396:	4770      	bx	lr
 800d398:	50060400 	.word	0x50060400

0800d39c <HASH_GetInFIFOWordsNbr>:
  * @brief  Returns the number of words already pushed into the IN FIFO.
  * @param  None
  * @retval The value of words already pushed into the IN FIFO.
  */
uint8_t HASH_GetInFIFOWordsNbr(void)
{
 800d39c:	b480      	push	{r7}
 800d39e:	af00      	add	r7, sp, #0
  /* Return the value of NBW bits */
  return ((HASH->CR & HASH_CR_NBW) >> 8);
 800d3a0:	4b05      	ldr	r3, [pc, #20]	; (800d3b8 <HASH_GetInFIFOWordsNbr+0x1c>)
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800d3a8:	0a1b      	lsrs	r3, r3, #8
 800d3aa:	b2db      	uxtb	r3, r3
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b4:	4770      	bx	lr
 800d3b6:	bf00      	nop
 800d3b8:	50060400 	.word	0x50060400

0800d3bc <HASH_GetDigest>:
  * @param  HASH_MessageDigest: pointer to a HASH_MsgDigest structure which will 
  *         hold the message digest result 
  * @retval None
  */
void HASH_GetDigest(HASH_MsgDigest* HASH_MessageDigest)
{
 800d3bc:	b480      	push	{r7}
 800d3be:	b083      	sub	sp, #12
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
  /* Get the data field */
  HASH_MessageDigest->Data[0] = HASH->HR[0];
 800d3c4:	4b12      	ldr	r3, [pc, #72]	; (800d410 <HASH_GetDigest+0x54>)
 800d3c6:	68da      	ldr	r2, [r3, #12]
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	601a      	str	r2, [r3, #0]
  HASH_MessageDigest->Data[1] = HASH->HR[1];
 800d3cc:	4b10      	ldr	r3, [pc, #64]	; (800d410 <HASH_GetDigest+0x54>)
 800d3ce:	691a      	ldr	r2, [r3, #16]
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	605a      	str	r2, [r3, #4]
  HASH_MessageDigest->Data[2] = HASH->HR[2];
 800d3d4:	4b0e      	ldr	r3, [pc, #56]	; (800d410 <HASH_GetDigest+0x54>)
 800d3d6:	695a      	ldr	r2, [r3, #20]
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	609a      	str	r2, [r3, #8]
  HASH_MessageDigest->Data[3] = HASH->HR[3];
 800d3dc:	4b0c      	ldr	r3, [pc, #48]	; (800d410 <HASH_GetDigest+0x54>)
 800d3de:	699a      	ldr	r2, [r3, #24]
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	60da      	str	r2, [r3, #12]
  HASH_MessageDigest->Data[4] = HASH->HR[4];
 800d3e4:	4b0a      	ldr	r3, [pc, #40]	; (800d410 <HASH_GetDigest+0x54>)
 800d3e6:	69da      	ldr	r2, [r3, #28]
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	611a      	str	r2, [r3, #16]
  HASH_MessageDigest->Data[5] = HASH_DIGEST->HR[5];
 800d3ec:	4b09      	ldr	r3, [pc, #36]	; (800d414 <HASH_GetDigest+0x58>)
 800d3ee:	695a      	ldr	r2, [r3, #20]
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	615a      	str	r2, [r3, #20]
  HASH_MessageDigest->Data[6] = HASH_DIGEST->HR[6];
 800d3f4:	4b07      	ldr	r3, [pc, #28]	; (800d414 <HASH_GetDigest+0x58>)
 800d3f6:	699a      	ldr	r2, [r3, #24]
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	619a      	str	r2, [r3, #24]
  HASH_MessageDigest->Data[7] = HASH_DIGEST->HR[7];
 800d3fc:	4b05      	ldr	r3, [pc, #20]	; (800d414 <HASH_GetDigest+0x58>)
 800d3fe:	69da      	ldr	r2, [r3, #28]
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	61da      	str	r2, [r3, #28]
}
 800d404:	370c      	adds	r7, #12
 800d406:	46bd      	mov	sp, r7
 800d408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40c:	4770      	bx	lr
 800d40e:	bf00      	nop
 800d410:	50060400 	.word	0x50060400
 800d414:	50060710 	.word	0x50060710

0800d418 <HASH_StartDigest>:
  * @brief  Starts the message padding and calculation of the final message     
  * @param  None
  * @retval None
  */
void HASH_StartDigest(void)
{
 800d418:	b480      	push	{r7}
 800d41a:	af00      	add	r7, sp, #0
  /* Start the Digest calculation */
  HASH->STR |= HASH_STR_DCAL;
 800d41c:	4b04      	ldr	r3, [pc, #16]	; (800d430 <HASH_StartDigest+0x18>)
 800d41e:	4a04      	ldr	r2, [pc, #16]	; (800d430 <HASH_StartDigest+0x18>)
 800d420:	6892      	ldr	r2, [r2, #8]
 800d422:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d426:	609a      	str	r2, [r3, #8]
}
 800d428:	46bd      	mov	sp, r7
 800d42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42e:	4770      	bx	lr
 800d430:	50060400 	.word	0x50060400

0800d434 <HASH_SaveContext>:
  * @param  HASH_ContextSave: pointer to a HASH_Context structure that contains
  *         the repository for current context.
  * @retval None
  */
void HASH_SaveContext(HASH_Context* HASH_ContextSave)
{
 800d434:	b480      	push	{r7}
 800d436:	b085      	sub	sp, #20
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 800d43c:	2300      	movs	r3, #0
 800d43e:	73fb      	strb	r3, [r7, #15]
  
  /* save context registers */
  HASH_ContextSave->HASH_IMR = HASH->IMR;  
 800d440:	4b12      	ldr	r3, [pc, #72]	; (800d48c <HASH_SaveContext+0x58>)
 800d442:	6a1a      	ldr	r2, [r3, #32]
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	601a      	str	r2, [r3, #0]
  HASH_ContextSave->HASH_STR = HASH->STR;      
 800d448:	4b10      	ldr	r3, [pc, #64]	; (800d48c <HASH_SaveContext+0x58>)
 800d44a:	689a      	ldr	r2, [r3, #8]
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	605a      	str	r2, [r3, #4]
  HASH_ContextSave->HASH_CR  = HASH->CR;     
 800d450:	4b0e      	ldr	r3, [pc, #56]	; (800d48c <HASH_SaveContext+0x58>)
 800d452:	681a      	ldr	r2, [r3, #0]
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	609a      	str	r2, [r3, #8]
  for(i=0; i<=53;i++)
 800d458:	2300      	movs	r3, #0
 800d45a:	73fb      	strb	r3, [r7, #15]
 800d45c:	e00d      	b.n	800d47a <HASH_SaveContext+0x46>
  {
     HASH_ContextSave->HASH_CSR[i] = HASH->CSR[i];
 800d45e:	7bfb      	ldrb	r3, [r7, #15]
 800d460:	4a0a      	ldr	r2, [pc, #40]	; (800d48c <HASH_SaveContext+0x58>)
 800d462:	7bf9      	ldrb	r1, [r7, #15]
 800d464:	313e      	adds	r1, #62	; 0x3e
 800d466:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800d46a:	6879      	ldr	r1, [r7, #4]
 800d46c:	3302      	adds	r3, #2
 800d46e:	009b      	lsls	r3, r3, #2
 800d470:	440b      	add	r3, r1
 800d472:	605a      	str	r2, [r3, #4]
  
  /* save context registers */
  HASH_ContextSave->HASH_IMR = HASH->IMR;  
  HASH_ContextSave->HASH_STR = HASH->STR;      
  HASH_ContextSave->HASH_CR  = HASH->CR;     
  for(i=0; i<=53;i++)
 800d474:	7bfb      	ldrb	r3, [r7, #15]
 800d476:	3301      	adds	r3, #1
 800d478:	73fb      	strb	r3, [r7, #15]
 800d47a:	7bfb      	ldrb	r3, [r7, #15]
 800d47c:	2b35      	cmp	r3, #53	; 0x35
 800d47e:	d9ee      	bls.n	800d45e <HASH_SaveContext+0x2a>
  {
     HASH_ContextSave->HASH_CSR[i] = HASH->CSR[i];
  }   
}
 800d480:	3714      	adds	r7, #20
 800d482:	46bd      	mov	sp, r7
 800d484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d488:	4770      	bx	lr
 800d48a:	bf00      	nop
 800d48c:	50060400 	.word	0x50060400

0800d490 <HASH_RestoreContext>:
  * @param  HASH_ContextRestore: pointer to a HASH_Context structure that contains
  *         the repository for saved context.
  * @retval None
  */
void HASH_RestoreContext(HASH_Context* HASH_ContextRestore)  
{
 800d490:	b480      	push	{r7}
 800d492:	b085      	sub	sp, #20
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 800d498:	2300      	movs	r3, #0
 800d49a:	73fb      	strb	r3, [r7, #15]
  
  /* restore context registers */
  HASH->IMR = HASH_ContextRestore->HASH_IMR;   
 800d49c:	4b15      	ldr	r3, [pc, #84]	; (800d4f4 <HASH_RestoreContext+0x64>)
 800d49e:	687a      	ldr	r2, [r7, #4]
 800d4a0:	6812      	ldr	r2, [r2, #0]
 800d4a2:	621a      	str	r2, [r3, #32]
  HASH->STR = HASH_ContextRestore->HASH_STR;     
 800d4a4:	4b13      	ldr	r3, [pc, #76]	; (800d4f4 <HASH_RestoreContext+0x64>)
 800d4a6:	687a      	ldr	r2, [r7, #4]
 800d4a8:	6852      	ldr	r2, [r2, #4]
 800d4aa:	609a      	str	r2, [r3, #8]
  HASH->CR = HASH_ContextRestore->HASH_CR;
 800d4ac:	4b11      	ldr	r3, [pc, #68]	; (800d4f4 <HASH_RestoreContext+0x64>)
 800d4ae:	687a      	ldr	r2, [r7, #4]
 800d4b0:	6892      	ldr	r2, [r2, #8]
 800d4b2:	601a      	str	r2, [r3, #0]
  
  /* Initialize the hash processor */
  HASH->CR |= HASH_CR_INIT; 
 800d4b4:	4b0f      	ldr	r3, [pc, #60]	; (800d4f4 <HASH_RestoreContext+0x64>)
 800d4b6:	4a0f      	ldr	r2, [pc, #60]	; (800d4f4 <HASH_RestoreContext+0x64>)
 800d4b8:	6812      	ldr	r2, [r2, #0]
 800d4ba:	f042 0204 	orr.w	r2, r2, #4
 800d4be:	601a      	str	r2, [r3, #0]
  
   /* continue restoring context registers */     
  for(i=0; i<=53;i++)
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	73fb      	strb	r3, [r7, #15]
 800d4c4:	e00e      	b.n	800d4e4 <HASH_RestoreContext+0x54>
  {
     HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
 800d4c6:	4a0b      	ldr	r2, [pc, #44]	; (800d4f4 <HASH_RestoreContext+0x64>)
 800d4c8:	7bf8      	ldrb	r0, [r7, #15]
 800d4ca:	7bfb      	ldrb	r3, [r7, #15]
 800d4cc:	6879      	ldr	r1, [r7, #4]
 800d4ce:	3302      	adds	r3, #2
 800d4d0:	009b      	lsls	r3, r3, #2
 800d4d2:	440b      	add	r3, r1
 800d4d4:	6859      	ldr	r1, [r3, #4]
 800d4d6:	f100 033e 	add.w	r3, r0, #62	; 0x3e
 800d4da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  
  /* Initialize the hash processor */
  HASH->CR |= HASH_CR_INIT; 
  
   /* continue restoring context registers */     
  for(i=0; i<=53;i++)
 800d4de:	7bfb      	ldrb	r3, [r7, #15]
 800d4e0:	3301      	adds	r3, #1
 800d4e2:	73fb      	strb	r3, [r7, #15]
 800d4e4:	7bfb      	ldrb	r3, [r7, #15]
 800d4e6:	2b35      	cmp	r3, #53	; 0x35
 800d4e8:	d9ed      	bls.n	800d4c6 <HASH_RestoreContext+0x36>
  {
     HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
  }   
}
 800d4ea:	3714      	adds	r7, #20
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f2:	4770      	bx	lr
 800d4f4:	50060400 	.word	0x50060400

0800d4f8 <HASH_AutoStartDigest>:
  * @param  NewState: new state of the selected HASH DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HASH_AutoStartDigest(FunctionalState NewState)
{
 800d4f8:	b480      	push	{r7}
 800d4fa:	b083      	sub	sp, #12
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	4603      	mov	r3, r0
 800d500:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800d502:	79fb      	ldrb	r3, [r7, #7]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d006      	beq.n	800d516 <HASH_AutoStartDigest+0x1e>
  {
    /* Enable the auto start of the final message digest at the end of DMA transfer */
    HASH->CR &= ~HASH_CR_MDMAT;
 800d508:	4b08      	ldr	r3, [pc, #32]	; (800d52c <HASH_AutoStartDigest+0x34>)
 800d50a:	4a08      	ldr	r2, [pc, #32]	; (800d52c <HASH_AutoStartDigest+0x34>)
 800d50c:	6812      	ldr	r2, [r2, #0]
 800d50e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d512:	601a      	str	r2, [r3, #0]
 800d514:	e005      	b.n	800d522 <HASH_AutoStartDigest+0x2a>
  }
  else
  {
    /* Disable the auto start of the final message digest at the end of DMA transfer */
    HASH->CR |= HASH_CR_MDMAT;
 800d516:	4b05      	ldr	r3, [pc, #20]	; (800d52c <HASH_AutoStartDigest+0x34>)
 800d518:	4a04      	ldr	r2, [pc, #16]	; (800d52c <HASH_AutoStartDigest+0x34>)
 800d51a:	6812      	ldr	r2, [r2, #0]
 800d51c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d520:	601a      	str	r2, [r3, #0]
  }
}
 800d522:	370c      	adds	r7, #12
 800d524:	46bd      	mov	sp, r7
 800d526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52a:	4770      	bx	lr
 800d52c:	50060400 	.word	0x50060400

0800d530 <HASH_DMACmd>:
  * @param  NewState: new state of the selected HASH DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HASH_DMACmd(FunctionalState NewState)
{
 800d530:	b480      	push	{r7}
 800d532:	b083      	sub	sp, #12
 800d534:	af00      	add	r7, sp, #0
 800d536:	4603      	mov	r3, r0
 800d538:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800d53a:	79fb      	ldrb	r3, [r7, #7]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d006      	beq.n	800d54e <HASH_DMACmd+0x1e>
  {
    /* Enable the HASH DMA request */
    HASH->CR |= HASH_CR_DMAE;
 800d540:	4b08      	ldr	r3, [pc, #32]	; (800d564 <HASH_DMACmd+0x34>)
 800d542:	4a08      	ldr	r2, [pc, #32]	; (800d564 <HASH_DMACmd+0x34>)
 800d544:	6812      	ldr	r2, [r2, #0]
 800d546:	f042 0208 	orr.w	r2, r2, #8
 800d54a:	601a      	str	r2, [r3, #0]
 800d54c:	e005      	b.n	800d55a <HASH_DMACmd+0x2a>
  }
  else
  {
    /* Disable the HASH DMA request */
    HASH->CR &= ~HASH_CR_DMAE;
 800d54e:	4b05      	ldr	r3, [pc, #20]	; (800d564 <HASH_DMACmd+0x34>)
 800d550:	4a04      	ldr	r2, [pc, #16]	; (800d564 <HASH_DMACmd+0x34>)
 800d552:	6812      	ldr	r2, [r2, #0]
 800d554:	f022 0208 	bic.w	r2, r2, #8
 800d558:	601a      	str	r2, [r3, #0]
  }
}
 800d55a:	370c      	adds	r7, #12
 800d55c:	46bd      	mov	sp, r7
 800d55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d562:	4770      	bx	lr
 800d564:	50060400 	.word	0x50060400

0800d568 <HASH_ITConfig>:
  * @param  NewState: new state of the specified HASH interrupt.
  *           This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HASH_ITConfig(uint32_t HASH_IT, FunctionalState NewState)
{
 800d568:	b480      	push	{r7}
 800d56a:	b083      	sub	sp, #12
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
 800d570:	460b      	mov	r3, r1
 800d572:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_HASH_IT(HASH_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800d574:	78fb      	ldrb	r3, [r7, #3]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d006      	beq.n	800d588 <HASH_ITConfig+0x20>
  {
    /* Enable the selected HASH interrupt */
    HASH->IMR |= HASH_IT;
 800d57a:	4b09      	ldr	r3, [pc, #36]	; (800d5a0 <HASH_ITConfig+0x38>)
 800d57c:	4a08      	ldr	r2, [pc, #32]	; (800d5a0 <HASH_ITConfig+0x38>)
 800d57e:	6a11      	ldr	r1, [r2, #32]
 800d580:	687a      	ldr	r2, [r7, #4]
 800d582:	430a      	orrs	r2, r1
 800d584:	621a      	str	r2, [r3, #32]
 800d586:	e006      	b.n	800d596 <HASH_ITConfig+0x2e>
  }
  else
  {
    /* Disable the selected HASH interrupt */
    HASH->IMR &= (uint32_t)(~HASH_IT);
 800d588:	4b05      	ldr	r3, [pc, #20]	; (800d5a0 <HASH_ITConfig+0x38>)
 800d58a:	4a05      	ldr	r2, [pc, #20]	; (800d5a0 <HASH_ITConfig+0x38>)
 800d58c:	6a11      	ldr	r1, [r2, #32]
 800d58e:	687a      	ldr	r2, [r7, #4]
 800d590:	43d2      	mvns	r2, r2
 800d592:	400a      	ands	r2, r1
 800d594:	621a      	str	r2, [r3, #32]
  }
}
 800d596:	370c      	adds	r7, #12
 800d598:	46bd      	mov	sp, r7
 800d59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59e:	4770      	bx	lr
 800d5a0:	50060400 	.word	0x50060400

0800d5a4 <HASH_GetFlagStatus>:
  *            @arg HASH_FLAG_DMAS: DMAS Status flag
  *            @arg HASH_FLAG_DINNE: Data Input register (DIN) not empty status flag
  * @retval The new state of HASH_FLAG (SET or RESET)
  */
FlagStatus HASH_GetFlagStatus(uint32_t HASH_FLAG)
{
 800d5a4:	b480      	push	{r7}
 800d5a6:	b085      	sub	sp, #20
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tempreg = 0;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HASH_GET_FLAG(HASH_FLAG));

  /* check if the FLAG is in CR register */
  if ((HASH_FLAG & HASH_FLAG_DINNE) != (uint32_t)RESET ) 
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d003      	beq.n	800d5c6 <HASH_GetFlagStatus+0x22>
  {
    tempreg = HASH->CR;
 800d5be:	4b0c      	ldr	r3, [pc, #48]	; (800d5f0 <HASH_GetFlagStatus+0x4c>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	60bb      	str	r3, [r7, #8]
 800d5c4:	e002      	b.n	800d5cc <HASH_GetFlagStatus+0x28>
  }
  else /* The FLAG is in SR register */
  {
    tempreg = HASH->SR;
 800d5c6:	4b0a      	ldr	r3, [pc, #40]	; (800d5f0 <HASH_GetFlagStatus+0x4c>)
 800d5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ca:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified HASH flag */
  if ((tempreg & HASH_FLAG) != (uint32_t)RESET)
 800d5cc:	68ba      	ldr	r2, [r7, #8]
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	4013      	ands	r3, r2
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d002      	beq.n	800d5dc <HASH_GetFlagStatus+0x38>
  {
    /* HASH is set */
    bitstatus = SET;
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	73fb      	strb	r3, [r7, #15]
 800d5da:	e001      	b.n	800d5e0 <HASH_GetFlagStatus+0x3c>
  }
  else
  {
    /* HASH_FLAG is reset */
    bitstatus = RESET;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the HASH_FLAG status */
  return  bitstatus;
 800d5e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3714      	adds	r7, #20
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ec:	4770      	bx	lr
 800d5ee:	bf00      	nop
 800d5f0:	50060400 	.word	0x50060400

0800d5f4 <HASH_ClearFlag>:
  *            @arg HASH_FLAG_DINIS: Data Input Flag
  *            @arg HASH_FLAG_DCIS: Digest Calculation Completion Flag                       
  * @retval None
  */
void HASH_ClearFlag(uint32_t HASH_FLAG)
{
 800d5f4:	b480      	push	{r7}
 800d5f6:	b083      	sub	sp, #12
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HASH_CLEAR_FLAG(HASH_FLAG));
  
  /* Clear the selected HASH flags */
  HASH->SR = ~(uint32_t)HASH_FLAG;
 800d5fc:	4b04      	ldr	r3, [pc, #16]	; (800d610 <HASH_ClearFlag+0x1c>)
 800d5fe:	687a      	ldr	r2, [r7, #4]
 800d600:	43d2      	mvns	r2, r2
 800d602:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d604:	370c      	adds	r7, #12
 800d606:	46bd      	mov	sp, r7
 800d608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60c:	4770      	bx	lr
 800d60e:	bf00      	nop
 800d610:	50060400 	.word	0x50060400

0800d614 <HASH_GetITStatus>:
  *            @arg HASH_IT_DINI: Data Input interrupt
  *            @arg HASH_IT_DCI: Digest Calculation Completion Interrupt
  * @retval The new state of HASH_IT (SET or RESET).
  */
ITStatus HASH_GetITStatus(uint32_t HASH_IT)
{
 800d614:	b480      	push	{r7}
 800d616:	b085      	sub	sp, #20
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800d61c:	2300      	movs	r3, #0
 800d61e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 800d620:	2300      	movs	r3, #0
 800d622:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_HASH_GET_IT(HASH_IT));  


  /* Check the status of the specified HASH interrupt */
  tmpreg =  HASH->SR;
 800d624:	4b0b      	ldr	r3, [pc, #44]	; (800d654 <HASH_GetITStatus+0x40>)
 800d626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d628:	60bb      	str	r3, [r7, #8]

  if (((HASH->IMR & tmpreg) & HASH_IT) != RESET)
 800d62a:	4b0a      	ldr	r3, [pc, #40]	; (800d654 <HASH_GetITStatus+0x40>)
 800d62c:	6a1a      	ldr	r2, [r3, #32]
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	401a      	ands	r2, r3
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	4013      	ands	r3, r2
 800d636:	2b00      	cmp	r3, #0
 800d638:	d002      	beq.n	800d640 <HASH_GetITStatus+0x2c>
  {
    /* HASH_IT is set */
    bitstatus = SET;
 800d63a:	2301      	movs	r3, #1
 800d63c:	73fb      	strb	r3, [r7, #15]
 800d63e:	e001      	b.n	800d644 <HASH_GetITStatus+0x30>
  }
  else
  {
    /* HASH_IT is reset */
    bitstatus = RESET;
 800d640:	2300      	movs	r3, #0
 800d642:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the HASH_IT status */
  return bitstatus;
 800d644:	7bfb      	ldrb	r3, [r7, #15]
}
 800d646:	4618      	mov	r0, r3
 800d648:	3714      	adds	r7, #20
 800d64a:	46bd      	mov	sp, r7
 800d64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d650:	4770      	bx	lr
 800d652:	bf00      	nop
 800d654:	50060400 	.word	0x50060400

0800d658 <HASH_ClearITPendingBit>:
  *            @arg HASH_IT_DINI: Data Input interrupt
  *            @arg HASH_IT_DCI: Digest Calculation Completion Interrupt
  * @retval None
  */
void HASH_ClearITPendingBit(uint32_t HASH_IT)
{
 800d658:	b480      	push	{r7}
 800d65a:	b083      	sub	sp, #12
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HASH_IT(HASH_IT));

  /* Clear the selected HASH interrupt pending bit */
  HASH->SR = (uint32_t)(~HASH_IT);
 800d660:	4b04      	ldr	r3, [pc, #16]	; (800d674 <HASH_ClearITPendingBit+0x1c>)
 800d662:	687a      	ldr	r2, [r7, #4]
 800d664:	43d2      	mvns	r2, r2
 800d666:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d668:	370c      	adds	r7, #12
 800d66a:	46bd      	mov	sp, r7
 800d66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d670:	4770      	bx	lr
 800d672:	bf00      	nop
 800d674:	50060400 	.word	0x50060400

0800d678 <HASH_MD5>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b09c      	sub	sp, #112	; 0x70
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	60f8      	str	r0, [r7, #12]
 800d680:	60b9      	str	r1, [r7, #8]
 800d682:	607a      	str	r2, [r7, #4]
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 800d684:	2300      	movs	r3, #0
 800d686:	837b      	strh	r3, [r7, #26]
  uint32_t i = 0;
 800d688:	2300      	movs	r3, #0
 800d68a:	66fb      	str	r3, [r7, #108]	; 0x6c
  __IO uint32_t counter = 0;
 800d68c:	2300      	movs	r3, #0
 800d68e:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 800d690:	2300      	movs	r3, #0
 800d692:	663b      	str	r3, [r7, #96]	; 0x60
  ErrorStatus status = SUCCESS;
 800d694:	2301      	movs	r3, #1
 800d696:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  uint32_t inputaddr  = (uint32_t)Input;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t outputaddr = (uint32_t)Output;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	65fb      	str	r3, [r7, #92]	; 0x5c


  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	b29b      	uxth	r3, r3
 800d6a6:	f003 0303 	and.w	r3, r3, #3
 800d6aa:	b29b      	uxth	r3, r3
 800d6ac:	00db      	lsls	r3, r3, #3
 800d6ae:	b29b      	uxth	r3, r3
 800d6b0:	837b      	strh	r3, [r7, #26]

  /* HASH peripheral initialization */
  HASH_DeInit();
 800d6b2:	f7ff fde5 	bl	800d280 <HASH_DeInit>

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 800d6b6:	2380      	movs	r3, #128	; 0x80
 800d6b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	643b      	str	r3, [r7, #64]	; 0x40
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 800d6be:	2320      	movs	r3, #32
 800d6c0:	647b      	str	r3, [r7, #68]	; 0x44
  HASH_Init(&MD5_HASH_InitStructure);
 800d6c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f7ff fde6 	bl	800d298 <HASH_Init>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 800d6cc:	8b7b      	ldrh	r3, [r7, #26]
 800d6ce:	b29b      	uxth	r3, r3
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	f7ff fe3d 	bl	800d350 <HASH_SetLastWordValidBitsNbr>

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d6da:	e00a      	b.n	800d6f2 <HASH_MD5+0x7a>
  {
    HASH_DataIn(*(uint32_t*)inputaddr);
 800d6dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f7ff fe4d 	bl	800d380 <HASH_DataIn>
    inputaddr+=4;
 800d6e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d6e8:	3304      	adds	r3, #4
 800d6ea:	667b      	str	r3, [r7, #100]	; 0x64

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 800d6ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6ee:	3304      	adds	r3, #4
 800d6f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d6f2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d6f4:	68bb      	ldr	r3, [r7, #8]
 800d6f6:	429a      	cmp	r2, r3
 800d6f8:	d3f0      	bcc.n	800d6dc <HASH_MD5+0x64>
    HASH_DataIn(*(uint32_t*)inputaddr);
    inputaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 800d6fa:	f7ff fe8d 	bl	800d418 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800d6fe:	2008      	movs	r0, #8
 800d700:	f7ff ff50 	bl	800d5a4 <HASH_GetFlagStatus>
 800d704:	4603      	mov	r3, r0
 800d706:	663b      	str	r3, [r7, #96]	; 0x60
    counter++;
 800d708:	697b      	ldr	r3, [r7, #20]
 800d70a:	3301      	adds	r3, #1
 800d70c:	617b      	str	r3, [r7, #20]
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 800d70e:	697b      	ldr	r3, [r7, #20]
 800d710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d714:	d002      	beq.n	800d71c <HASH_MD5+0xa4>
 800d716:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d1f0      	bne.n	800d6fe <HASH_MD5+0x86>

  if (busystatus != RESET)
 800d71c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d003      	beq.n	800d72a <HASH_MD5+0xb2>
  {
     status = ERROR;
 800d722:	2300      	movs	r3, #0
 800d724:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800d728:	e025      	b.n	800d776 <HASH_MD5+0xfe>
  }
  else
  {
    /* Read the message digest */
    HASH_GetDigest(&MD5_MessageDigest);
 800d72a:	f107 031c 	add.w	r3, r7, #28
 800d72e:	4618      	mov	r0, r3
 800d730:	f7ff fe44 	bl	800d3bc <HASH_GetDigest>
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 800d734:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d736:	69fa      	ldr	r2, [r7, #28]
 800d738:	65ba      	str	r2, [r7, #88]	; 0x58
 800d73a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d73c:	ba12      	rev	r2, r2
 800d73e:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800d740:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d742:	3304      	adds	r3, #4
 800d744:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 800d746:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d748:	6a3a      	ldr	r2, [r7, #32]
 800d74a:	657a      	str	r2, [r7, #84]	; 0x54
 800d74c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d74e:	ba12      	rev	r2, r2
 800d750:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800d752:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d754:	3304      	adds	r3, #4
 800d756:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 800d758:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d75a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d75c:	653a      	str	r2, [r7, #80]	; 0x50
 800d75e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d760:	ba12      	rev	r2, r2
 800d762:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800d764:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d766:	3304      	adds	r3, #4
 800d768:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 800d76a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d76c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d76e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d770:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d772:	ba12      	rev	r2, r2
 800d774:	601a      	str	r2, [r3, #0]
  }
  return status; 
 800d776:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
}
 800d77a:	4618      	mov	r0, r3
 800d77c:	3770      	adds	r7, #112	; 0x70
 800d77e:	46bd      	mov	sp, r7
 800d780:	bd80      	pop	{r7, pc}
 800d782:	bf00      	nop

0800d784 <HMAC_MD5>:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
                     uint32_t Ilen, uint8_t Output[16])
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b09c      	sub	sp, #112	; 0x70
 800d788:	af00      	add	r7, sp, #0
 800d78a:	60f8      	str	r0, [r7, #12]
 800d78c:	60b9      	str	r1, [r7, #8]
 800d78e:	607a      	str	r2, [r7, #4]
 800d790:	603b      	str	r3, [r7, #0]
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 800d792:	2300      	movs	r3, #0
 800d794:	82fb      	strh	r3, [r7, #22]
  __IO uint16_t nbvalidbitskey = 0;
 800d796:	2300      	movs	r3, #0
 800d798:	82bb      	strh	r3, [r7, #20]
  uint32_t i = 0;
 800d79a:	2300      	movs	r3, #0
 800d79c:	66fb      	str	r3, [r7, #108]	; 0x6c
  __IO uint32_t counter = 0;
 800d79e:	2300      	movs	r3, #0
 800d7a0:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  ErrorStatus status = SUCCESS;
 800d7a6:	2301      	movs	r3, #1
 800d7a8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  uint32_t keyaddr    = (uint32_t)Key;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t inputaddr  = (uint32_t)Input;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t outputaddr = (uint32_t)Output;
 800d7b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d7b6:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	b29b      	uxth	r3, r3
 800d7bc:	f003 0303 	and.w	r3, r3, #3
 800d7c0:	b29b      	uxth	r3, r3
 800d7c2:	00db      	lsls	r3, r3, #3
 800d7c4:	b29b      	uxth	r3, r3
 800d7c6:	82fb      	strh	r3, [r7, #22]

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 800d7c8:	68bb      	ldr	r3, [r7, #8]
 800d7ca:	b29b      	uxth	r3, r3
 800d7cc:	f003 0303 	and.w	r3, r3, #3
 800d7d0:	b29b      	uxth	r3, r3
 800d7d2:	00db      	lsls	r3, r3, #3
 800d7d4:	b29b      	uxth	r3, r3
 800d7d6:	82bb      	strh	r3, [r7, #20]
   
  /* HASH peripheral initialization */
  HASH_DeInit();
 800d7d8:	f7ff fd52 	bl	800d280 <HASH_DeInit>

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 800d7dc:	2380      	movs	r3, #128	; 0x80
 800d7de:	63bb      	str	r3, [r7, #56]	; 0x38
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 800d7e0:	2340      	movs	r3, #64	; 0x40
 800d7e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 800d7e4:	2320      	movs	r3, #32
 800d7e6:	643b      	str	r3, [r7, #64]	; 0x40
  if(Keylen > 64)
 800d7e8:	68bb      	ldr	r3, [r7, #8]
 800d7ea:	2b40      	cmp	r3, #64	; 0x40
 800d7ec:	d903      	bls.n	800d7f6 <HMAC_MD5+0x72>
  {
    /* HMAC long Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 800d7ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d7f2:	647b      	str	r3, [r7, #68]	; 0x44
 800d7f4:	e001      	b.n	800d7fa <HMAC_MD5+0x76>
  }
  else
  {
    /* HMAC short Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	647b      	str	r3, [r7, #68]	; 0x44
  }
  HASH_Init(&MD5_HASH_InitStructure);
 800d7fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d7fe:	4618      	mov	r0, r3
 800d800:	f7ff fd4a 	bl	800d298 <HASH_Init>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 800d804:	8abb      	ldrh	r3, [r7, #20]
 800d806:	b29b      	uxth	r3, r3
 800d808:	4618      	mov	r0, r3
 800d80a:	f7ff fda1 	bl	800d350 <HASH_SetLastWordValidBitsNbr>

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 800d80e:	2300      	movs	r3, #0
 800d810:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d812:	e00a      	b.n	800d82a <HMAC_MD5+0xa6>
  {
    HASH_DataIn(*(uint32_t*)keyaddr);
 800d814:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	4618      	mov	r0, r3
 800d81a:	f7ff fdb1 	bl	800d380 <HASH_DataIn>
    keyaddr+=4;
 800d81e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d820:	3304      	adds	r3, #4
 800d822:	667b      	str	r3, [r7, #100]	; 0x64

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 800d824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d826:	3304      	adds	r3, #4
 800d828:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d82a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d82c:	68bb      	ldr	r3, [r7, #8]
 800d82e:	429a      	cmp	r2, r3
 800d830:	d3f0      	bcc.n	800d814 <HMAC_MD5+0x90>
    HASH_DataIn(*(uint32_t*)keyaddr);
    keyaddr+=4;
  }
  
  /* Start the HASH processor */
  HASH_StartDigest();
 800d832:	f7ff fdf1 	bl	800d418 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800d836:	2008      	movs	r0, #8
 800d838:	f7ff feb4 	bl	800d5a4 <HASH_GetFlagStatus>
 800d83c:	4603      	mov	r3, r0
 800d83e:	65fb      	str	r3, [r7, #92]	; 0x5c
    counter++;
 800d840:	693b      	ldr	r3, [r7, #16]
 800d842:	3301      	adds	r3, #1
 800d844:	613b      	str	r3, [r7, #16]
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 800d846:	693b      	ldr	r3, [r7, #16]
 800d848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d84c:	d002      	beq.n	800d854 <HMAC_MD5+0xd0>
 800d84e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d850:	2b00      	cmp	r3, #0
 800d852:	d1f0      	bne.n	800d836 <HMAC_MD5+0xb2>

  if (busystatus != RESET)
 800d854:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d856:	2b00      	cmp	r3, #0
 800d858:	d003      	beq.n	800d862 <HMAC_MD5+0xde>
  {
     status = ERROR;
 800d85a:	2300      	movs	r3, #0
 800d85c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800d860:	e089      	b.n	800d976 <HMAC_MD5+0x1f2>
  }
  else
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 800d862:	8afb      	ldrh	r3, [r7, #22]
 800d864:	b29b      	uxth	r3, r3
 800d866:	4618      	mov	r0, r3
 800d868:	f7ff fd72 	bl	800d350 <HASH_SetLastWordValidBitsNbr>

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 800d86c:	2300      	movs	r3, #0
 800d86e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d870:	e00a      	b.n	800d888 <HMAC_MD5+0x104>
    {
      HASH_DataIn(*(uint32_t*)inputaddr);
 800d872:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	4618      	mov	r0, r3
 800d878:	f7ff fd82 	bl	800d380 <HASH_DataIn>
      inputaddr+=4;
 800d87c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d87e:	3304      	adds	r3, #4
 800d880:	663b      	str	r3, [r7, #96]	; 0x60
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 800d882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d884:	3304      	adds	r3, #4
 800d886:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d888:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	429a      	cmp	r2, r3
 800d88e:	d3f0      	bcc.n	800d872 <HMAC_MD5+0xee>
      HASH_DataIn(*(uint32_t*)inputaddr);
      inputaddr+=4;
    }

    /* Start the HASH processor */
    HASH_StartDigest();
 800d890:	f7ff fdc2 	bl	800d418 <HASH_StartDigest>

    /* wait until the Busy flag is RESET */
    counter =0;
 800d894:	2300      	movs	r3, #0
 800d896:	613b      	str	r3, [r7, #16]
    do
    {
       busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800d898:	2008      	movs	r0, #8
 800d89a:	f7ff fe83 	bl	800d5a4 <HASH_GetFlagStatus>
 800d89e:	4603      	mov	r3, r0
 800d8a0:	65fb      	str	r3, [r7, #92]	; 0x5c
       counter++;
 800d8a2:	693b      	ldr	r3, [r7, #16]
 800d8a4:	3301      	adds	r3, #1
 800d8a6:	613b      	str	r3, [r7, #16]
    }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 800d8a8:	693b      	ldr	r3, [r7, #16]
 800d8aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d8ae:	d002      	beq.n	800d8b6 <HMAC_MD5+0x132>
 800d8b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d1f0      	bne.n	800d898 <HMAC_MD5+0x114>

    if (busystatus != RESET)
 800d8b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d003      	beq.n	800d8c4 <HMAC_MD5+0x140>
    {
      status = ERROR;
 800d8bc:	2300      	movs	r3, #0
 800d8be:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800d8c2:	e058      	b.n	800d976 <HMAC_MD5+0x1f2>
    }
    else
    {  
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 800d8c4:	8abb      	ldrh	r3, [r7, #20]
 800d8c6:	b29b      	uxth	r3, r3
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	f7ff fd41 	bl	800d350 <HASH_SetLastWordValidBitsNbr>

      /* Write the Key */
      keyaddr = (uint32_t)Key;
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	667b      	str	r3, [r7, #100]	; 0x64
      for(i=0; i<Keylen; i+=4)
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d8d6:	e00a      	b.n	800d8ee <HMAC_MD5+0x16a>
      {
        HASH_DataIn(*(uint32_t*)keyaddr);
 800d8d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f7ff fd4f 	bl	800d380 <HASH_DataIn>
        keyaddr+=4;
 800d8e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d8e4:	3304      	adds	r3, #4
 800d8e6:	667b      	str	r3, [r7, #100]	; 0x64
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 800d8e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8ea:	3304      	adds	r3, #4
 800d8ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d8ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	429a      	cmp	r2, r3
 800d8f4:	d3f0      	bcc.n	800d8d8 <HMAC_MD5+0x154>
        HASH_DataIn(*(uint32_t*)keyaddr);
        keyaddr+=4;
      }
  
       /* Start the HASH processor */
       HASH_StartDigest();
 800d8f6:	f7ff fd8f 	bl	800d418 <HASH_StartDigest>

       /* wait until the Busy flag is RESET */
       counter =0;
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	613b      	str	r3, [r7, #16]
       do
       {
          busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800d8fe:	2008      	movs	r0, #8
 800d900:	f7ff fe50 	bl	800d5a4 <HASH_GetFlagStatus>
 800d904:	4603      	mov	r3, r0
 800d906:	65fb      	str	r3, [r7, #92]	; 0x5c
          counter++;
 800d908:	693b      	ldr	r3, [r7, #16]
 800d90a:	3301      	adds	r3, #1
 800d90c:	613b      	str	r3, [r7, #16]
      }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d914:	d002      	beq.n	800d91c <HMAC_MD5+0x198>
 800d916:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d1f0      	bne.n	800d8fe <HMAC_MD5+0x17a>

      if (busystatus != RESET)
 800d91c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d003      	beq.n	800d92a <HMAC_MD5+0x1a6>
      {
         status = ERROR;
 800d922:	2300      	movs	r3, #0
 800d924:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800d928:	e025      	b.n	800d976 <HMAC_MD5+0x1f2>
      }
      else
      {
         /* Read the message digest */
         HASH_GetDigest(&MD5_MessageDigest);
 800d92a:	f107 0318 	add.w	r3, r7, #24
 800d92e:	4618      	mov	r0, r3
 800d930:	f7ff fd44 	bl	800d3bc <HASH_GetDigest>
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 800d934:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d936:	69ba      	ldr	r2, [r7, #24]
 800d938:	657a      	str	r2, [r7, #84]	; 0x54
 800d93a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d93c:	ba12      	rev	r2, r2
 800d93e:	601a      	str	r2, [r3, #0]
         outputaddr+=4;
 800d940:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d942:	3304      	adds	r3, #4
 800d944:	65bb      	str	r3, [r7, #88]	; 0x58
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 800d946:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d948:	69fa      	ldr	r2, [r7, #28]
 800d94a:	653a      	str	r2, [r7, #80]	; 0x50
 800d94c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d94e:	ba12      	rev	r2, r2
 800d950:	601a      	str	r2, [r3, #0]
         outputaddr+=4;
 800d952:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d954:	3304      	adds	r3, #4
 800d956:	65bb      	str	r3, [r7, #88]	; 0x58
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 800d958:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d95a:	6a3a      	ldr	r2, [r7, #32]
 800d95c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d95e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d960:	ba12      	rev	r2, r2
 800d962:	601a      	str	r2, [r3, #0]
         outputaddr+=4;
 800d964:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d966:	3304      	adds	r3, #4
 800d968:	65bb      	str	r3, [r7, #88]	; 0x58
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 800d96a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d96c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d96e:	64ba      	str	r2, [r7, #72]	; 0x48
 800d970:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d972:	ba12      	rev	r2, r2
 800d974:	601a      	str	r2, [r3, #0]
      }
    }
  }
  return status;  
 800d976:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
}
 800d97a:	4618      	mov	r0, r3
 800d97c:	3770      	adds	r7, #112	; 0x70
 800d97e:	46bd      	mov	sp, r7
 800d980:	bd80      	pop	{r7, pc}
 800d982:	bf00      	nop

0800d984 <HASH_SHA1>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_SHA1(uint8_t *Input, uint32_t Ilen, uint8_t Output[20])
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b09c      	sub	sp, #112	; 0x70
 800d988:	af00      	add	r7, sp, #0
 800d98a:	60f8      	str	r0, [r7, #12]
 800d98c:	60b9      	str	r1, [r7, #8]
 800d98e:	607a      	str	r2, [r7, #4]
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 800d990:	2300      	movs	r3, #0
 800d992:	82fb      	strh	r3, [r7, #22]
  uint32_t i = 0;
 800d994:	2300      	movs	r3, #0
 800d996:	66fb      	str	r3, [r7, #108]	; 0x6c
  __IO uint32_t counter = 0;
 800d998:	2300      	movs	r3, #0
 800d99a:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 800d99c:	2300      	movs	r3, #0
 800d99e:	663b      	str	r3, [r7, #96]	; 0x60
  ErrorStatus status = SUCCESS;
 800d9a0:	2301      	movs	r3, #1
 800d9a2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  uint32_t inputaddr  = (uint32_t)Input;
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t outputaddr = (uint32_t)Output;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	b29b      	uxth	r3, r3
 800d9b2:	f003 0303 	and.w	r3, r3, #3
 800d9b6:	b29b      	uxth	r3, r3
 800d9b8:	00db      	lsls	r3, r3, #3
 800d9ba:	b29b      	uxth	r3, r3
 800d9bc:	82fb      	strh	r3, [r7, #22]

  /* HASH peripheral initialization */
  HASH_DeInit();
 800d9be:	f7ff fc5f 	bl	800d280 <HASH_DeInit>

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	63bb      	str	r3, [r7, #56]	; 0x38
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 800d9ca:	2320      	movs	r3, #32
 800d9cc:	643b      	str	r3, [r7, #64]	; 0x40
  HASH_Init(&SHA1_HASH_InitStructure);
 800d9ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f7ff fc60 	bl	800d298 <HASH_Init>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 800d9d8:	8afb      	ldrh	r3, [r7, #22]
 800d9da:	b29b      	uxth	r3, r3
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f7ff fcb7 	bl	800d350 <HASH_SetLastWordValidBitsNbr>

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d9e6:	e00a      	b.n	800d9fe <HASH_SHA1+0x7a>
  {
    HASH_DataIn(*(uint32_t*)inputaddr);
 800d9e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f7ff fcc7 	bl	800d380 <HASH_DataIn>
    inputaddr+=4;
 800d9f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d9f4:	3304      	adds	r3, #4
 800d9f6:	667b      	str	r3, [r7, #100]	; 0x64

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 800d9f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9fa:	3304      	adds	r3, #4
 800d9fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d9fe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	429a      	cmp	r2, r3
 800da04:	d3f0      	bcc.n	800d9e8 <HASH_SHA1+0x64>
    HASH_DataIn(*(uint32_t*)inputaddr);
    inputaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 800da06:	f7ff fd07 	bl	800d418 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800da0a:	2008      	movs	r0, #8
 800da0c:	f7ff fdca 	bl	800d5a4 <HASH_GetFlagStatus>
 800da10:	4603      	mov	r3, r0
 800da12:	663b      	str	r3, [r7, #96]	; 0x60
    counter++;
 800da14:	693b      	ldr	r3, [r7, #16]
 800da16:	3301      	adds	r3, #1
 800da18:	613b      	str	r3, [r7, #16]
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 800da1a:	693b      	ldr	r3, [r7, #16]
 800da1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da20:	d002      	beq.n	800da28 <HASH_SHA1+0xa4>
 800da22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da24:	2b00      	cmp	r3, #0
 800da26:	d1f0      	bne.n	800da0a <HASH_SHA1+0x86>

  if (busystatus != RESET)
 800da28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d003      	beq.n	800da36 <HASH_SHA1+0xb2>
  {
     status = ERROR;
 800da2e:	2300      	movs	r3, #0
 800da30:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800da34:	e02e      	b.n	800da94 <HASH_SHA1+0x110>
  }
  else
  {
    /* Read the message digest */
    HASH_GetDigest(&SHA1_MessageDigest);
 800da36:	f107 0318 	add.w	r3, r7, #24
 800da3a:	4618      	mov	r0, r3
 800da3c:	f7ff fcbe 	bl	800d3bc <HASH_GetDigest>
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 800da40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da42:	69ba      	ldr	r2, [r7, #24]
 800da44:	65ba      	str	r2, [r7, #88]	; 0x58
 800da46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800da48:	ba12      	rev	r2, r2
 800da4a:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800da4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da4e:	3304      	adds	r3, #4
 800da50:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 800da52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da54:	69fa      	ldr	r2, [r7, #28]
 800da56:	657a      	str	r2, [r7, #84]	; 0x54
 800da58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800da5a:	ba12      	rev	r2, r2
 800da5c:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800da5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da60:	3304      	adds	r3, #4
 800da62:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 800da64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da66:	6a3a      	ldr	r2, [r7, #32]
 800da68:	653a      	str	r2, [r7, #80]	; 0x50
 800da6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800da6c:	ba12      	rev	r2, r2
 800da6e:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800da70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da72:	3304      	adds	r3, #4
 800da74:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 800da76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da7a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800da7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800da7e:	ba12      	rev	r2, r2
 800da80:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800da82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da84:	3304      	adds	r3, #4
 800da86:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 800da88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da8c:	64ba      	str	r2, [r7, #72]	; 0x48
 800da8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800da90:	ba12      	rev	r2, r2
 800da92:	601a      	str	r2, [r3, #0]
  }
  return status;
 800da94:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
}
 800da98:	4618      	mov	r0, r3
 800da9a:	3770      	adds	r7, #112	; 0x70
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd80      	pop	{r7, pc}

0800daa0 <HMAC_SHA1>:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
                      uint32_t Ilen, uint8_t Output[20])
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b09e      	sub	sp, #120	; 0x78
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	60f8      	str	r0, [r7, #12]
 800daa8:	60b9      	str	r1, [r7, #8]
 800daaa:	607a      	str	r2, [r7, #4]
 800daac:	603b      	str	r3, [r7, #0]
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 800daae:	2300      	movs	r3, #0
 800dab0:	837b      	strh	r3, [r7, #26]
  __IO uint16_t nbvalidbitskey = 0;
 800dab2:	2300      	movs	r3, #0
 800dab4:	833b      	strh	r3, [r7, #24]
  uint32_t i = 0;
 800dab6:	2300      	movs	r3, #0
 800dab8:	677b      	str	r3, [r7, #116]	; 0x74
  __IO uint32_t counter = 0;
 800daba:	2300      	movs	r3, #0
 800dabc:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 800dabe:	2300      	movs	r3, #0
 800dac0:	667b      	str	r3, [r7, #100]	; 0x64
  ErrorStatus status = SUCCESS;
 800dac2:	2301      	movs	r3, #1
 800dac4:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  uint32_t keyaddr    = (uint32_t)Key;
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t inputaddr  = (uint32_t)Input;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	66bb      	str	r3, [r7, #104]	; 0x68
  uint32_t outputaddr = (uint32_t)Output;
 800dad0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dad4:	663b      	str	r3, [r7, #96]	; 0x60

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	b29b      	uxth	r3, r3
 800dada:	f003 0303 	and.w	r3, r3, #3
 800dade:	b29b      	uxth	r3, r3
 800dae0:	00db      	lsls	r3, r3, #3
 800dae2:	b29b      	uxth	r3, r3
 800dae4:	837b      	strh	r3, [r7, #26]

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	b29b      	uxth	r3, r3
 800daea:	f003 0303 	and.w	r3, r3, #3
 800daee:	b29b      	uxth	r3, r3
 800daf0:	00db      	lsls	r3, r3, #3
 800daf2:	b29b      	uxth	r3, r3
 800daf4:	833b      	strh	r3, [r7, #24]

  /* HASH peripheral initialization */
  HASH_DeInit();
 800daf6:	f7ff fbc3 	bl	800d280 <HASH_DeInit>

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 800dafa:	2300      	movs	r3, #0
 800dafc:	63fb      	str	r3, [r7, #60]	; 0x3c
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 800dafe:	2340      	movs	r3, #64	; 0x40
 800db00:	643b      	str	r3, [r7, #64]	; 0x40
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 800db02:	2320      	movs	r3, #32
 800db04:	647b      	str	r3, [r7, #68]	; 0x44
  if(Keylen > 64)
 800db06:	68bb      	ldr	r3, [r7, #8]
 800db08:	2b40      	cmp	r3, #64	; 0x40
 800db0a:	d903      	bls.n	800db14 <HMAC_SHA1+0x74>
  {
    /* HMAC long Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 800db0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800db10:	64bb      	str	r3, [r7, #72]	; 0x48
 800db12:	e001      	b.n	800db18 <HMAC_SHA1+0x78>
  }
  else
  {
    /* HMAC short Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 800db14:	2300      	movs	r3, #0
 800db16:	64bb      	str	r3, [r7, #72]	; 0x48
  }
  HASH_Init(&SHA1_HASH_InitStructure);
 800db18:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800db1c:	4618      	mov	r0, r3
 800db1e:	f7ff fbbb 	bl	800d298 <HASH_Init>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 800db22:	8b3b      	ldrh	r3, [r7, #24]
 800db24:	b29b      	uxth	r3, r3
 800db26:	4618      	mov	r0, r3
 800db28:	f7ff fc12 	bl	800d350 <HASH_SetLastWordValidBitsNbr>

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 800db2c:	2300      	movs	r3, #0
 800db2e:	677b      	str	r3, [r7, #116]	; 0x74
 800db30:	e00a      	b.n	800db48 <HMAC_SHA1+0xa8>
  {
    HASH_DataIn(*(uint32_t*)keyaddr);
 800db32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	4618      	mov	r0, r3
 800db38:	f7ff fc22 	bl	800d380 <HASH_DataIn>
    keyaddr+=4;
 800db3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db3e:	3304      	adds	r3, #4
 800db40:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 800db42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800db44:	3304      	adds	r3, #4
 800db46:	677b      	str	r3, [r7, #116]	; 0x74
 800db48:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800db4a:	68bb      	ldr	r3, [r7, #8]
 800db4c:	429a      	cmp	r2, r3
 800db4e:	d3f0      	bcc.n	800db32 <HMAC_SHA1+0x92>
    HASH_DataIn(*(uint32_t*)keyaddr);
    keyaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 800db50:	f7ff fc62 	bl	800d418 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800db54:	2008      	movs	r0, #8
 800db56:	f7ff fd25 	bl	800d5a4 <HASH_GetFlagStatus>
 800db5a:	4603      	mov	r3, r0
 800db5c:	667b      	str	r3, [r7, #100]	; 0x64
    counter++;
 800db5e:	697b      	ldr	r3, [r7, #20]
 800db60:	3301      	adds	r3, #1
 800db62:	617b      	str	r3, [r7, #20]
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 800db64:	697b      	ldr	r3, [r7, #20]
 800db66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db6a:	d002      	beq.n	800db72 <HMAC_SHA1+0xd2>
 800db6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d1f0      	bne.n	800db54 <HMAC_SHA1+0xb4>

  if (busystatus != RESET)
 800db72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800db74:	2b00      	cmp	r3, #0
 800db76:	d003      	beq.n	800db80 <HMAC_SHA1+0xe0>
  {
     status = ERROR;
 800db78:	2300      	movs	r3, #0
 800db7a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800db7e:	e092      	b.n	800dca6 <HMAC_SHA1+0x206>
  }
  else
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 800db80:	8b7b      	ldrh	r3, [r7, #26]
 800db82:	b29b      	uxth	r3, r3
 800db84:	4618      	mov	r0, r3
 800db86:	f7ff fbe3 	bl	800d350 <HASH_SetLastWordValidBitsNbr>

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 800db8a:	2300      	movs	r3, #0
 800db8c:	677b      	str	r3, [r7, #116]	; 0x74
 800db8e:	e00a      	b.n	800dba6 <HMAC_SHA1+0x106>
    {
      HASH_DataIn(*(uint32_t*)inputaddr);
 800db90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	4618      	mov	r0, r3
 800db96:	f7ff fbf3 	bl	800d380 <HASH_DataIn>
      inputaddr+=4;
 800db9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800db9c:	3304      	adds	r3, #4
 800db9e:	66bb      	str	r3, [r7, #104]	; 0x68
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 800dba0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dba2:	3304      	adds	r3, #4
 800dba4:	677b      	str	r3, [r7, #116]	; 0x74
 800dba6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	429a      	cmp	r2, r3
 800dbac:	d3f0      	bcc.n	800db90 <HMAC_SHA1+0xf0>
      HASH_DataIn(*(uint32_t*)inputaddr);
      inputaddr+=4;
    }

    /* Start the HASH processor */
    HASH_StartDigest();
 800dbae:	f7ff fc33 	bl	800d418 <HASH_StartDigest>


    /* wait until the Busy flag is RESET */
    counter =0;
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800dbb6:	2008      	movs	r0, #8
 800dbb8:	f7ff fcf4 	bl	800d5a4 <HASH_GetFlagStatus>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	667b      	str	r3, [r7, #100]	; 0x64
      counter++;
 800dbc0:	697b      	ldr	r3, [r7, #20]
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	617b      	str	r3, [r7, #20]
    }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dbcc:	d002      	beq.n	800dbd4 <HMAC_SHA1+0x134>
 800dbce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d1f0      	bne.n	800dbb6 <HMAC_SHA1+0x116>

    if (busystatus != RESET)
 800dbd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d003      	beq.n	800dbe2 <HMAC_SHA1+0x142>
    {
      status = ERROR;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800dbe0:	e061      	b.n	800dca6 <HMAC_SHA1+0x206>
    }
    else
    {  
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 800dbe2:	8b3b      	ldrh	r3, [r7, #24]
 800dbe4:	b29b      	uxth	r3, r3
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f7ff fbb2 	bl	800d350 <HASH_SetLastWordValidBitsNbr>

      /* Write the Key */
      keyaddr = (uint32_t)Key;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	66fb      	str	r3, [r7, #108]	; 0x6c
      for(i=0; i<Keylen; i+=4)
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	677b      	str	r3, [r7, #116]	; 0x74
 800dbf4:	e00a      	b.n	800dc0c <HMAC_SHA1+0x16c>
      {
        HASH_DataIn(*(uint32_t*)keyaddr);
 800dbf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	f7ff fbc0 	bl	800d380 <HASH_DataIn>
        keyaddr+=4;
 800dc00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc02:	3304      	adds	r3, #4
 800dc04:	66fb      	str	r3, [r7, #108]	; 0x6c
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 800dc06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dc08:	3304      	adds	r3, #4
 800dc0a:	677b      	str	r3, [r7, #116]	; 0x74
 800dc0c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	429a      	cmp	r2, r3
 800dc12:	d3f0      	bcc.n	800dbf6 <HMAC_SHA1+0x156>
        HASH_DataIn(*(uint32_t*)keyaddr);
        keyaddr+=4;
      }

      /* Start the HASH processor */
      HASH_StartDigest();
 800dc14:	f7ff fc00 	bl	800d418 <HASH_StartDigest>

      /* wait until the Busy flag is RESET */
      counter =0;
 800dc18:	2300      	movs	r3, #0
 800dc1a:	617b      	str	r3, [r7, #20]
      do
      {
        busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800dc1c:	2008      	movs	r0, #8
 800dc1e:	f7ff fcc1 	bl	800d5a4 <HASH_GetFlagStatus>
 800dc22:	4603      	mov	r3, r0
 800dc24:	667b      	str	r3, [r7, #100]	; 0x64
        counter++;
 800dc26:	697b      	ldr	r3, [r7, #20]
 800dc28:	3301      	adds	r3, #1
 800dc2a:	617b      	str	r3, [r7, #20]
      }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 800dc2c:	697b      	ldr	r3, [r7, #20]
 800dc2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc32:	d002      	beq.n	800dc3a <HMAC_SHA1+0x19a>
 800dc34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d1f0      	bne.n	800dc1c <HMAC_SHA1+0x17c>

      if (busystatus != RESET)
 800dc3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d003      	beq.n	800dc48 <HMAC_SHA1+0x1a8>
      {
        status = ERROR;
 800dc40:	2300      	movs	r3, #0
 800dc42:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800dc46:	e02e      	b.n	800dca6 <HMAC_SHA1+0x206>
      }
      else
      {
        /* Read the message digest */
        HASH_GetDigest(&SHA1_MessageDigest);
 800dc48:	f107 031c 	add.w	r3, r7, #28
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	f7ff fbb5 	bl	800d3bc <HASH_GetDigest>
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 800dc52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc54:	69fa      	ldr	r2, [r7, #28]
 800dc56:	65fa      	str	r2, [r7, #92]	; 0x5c
 800dc58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dc5a:	ba12      	rev	r2, r2
 800dc5c:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 800dc5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc60:	3304      	adds	r3, #4
 800dc62:	663b      	str	r3, [r7, #96]	; 0x60
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 800dc64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc66:	6a3a      	ldr	r2, [r7, #32]
 800dc68:	65ba      	str	r2, [r7, #88]	; 0x58
 800dc6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dc6c:	ba12      	rev	r2, r2
 800dc6e:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 800dc70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc72:	3304      	adds	r3, #4
 800dc74:	663b      	str	r3, [r7, #96]	; 0x60
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 800dc76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc7a:	657a      	str	r2, [r7, #84]	; 0x54
 800dc7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dc7e:	ba12      	rev	r2, r2
 800dc80:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 800dc82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc84:	3304      	adds	r3, #4
 800dc86:	663b      	str	r3, [r7, #96]	; 0x60
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 800dc88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc8c:	653a      	str	r2, [r7, #80]	; 0x50
 800dc8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dc90:	ba12      	rev	r2, r2
 800dc92:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 800dc94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc96:	3304      	adds	r3, #4
 800dc98:	663b      	str	r3, [r7, #96]	; 0x60
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 800dc9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc9e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800dca0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dca2:	ba12      	rev	r2, r2
 800dca4:	601a      	str	r2, [r3, #0]
      }
    }  
  }
  return status;  
 800dca6:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	3778      	adds	r7, #120	; 0x78
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}
 800dcb2:	bf00      	nop

0800dcb4 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b082      	sub	sp, #8
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 800dcbc:	687a      	ldr	r2, [r7, #4]
 800dcbe:	4b17      	ldr	r3, [pc, #92]	; (800dd1c <I2C_DeInit+0x68>)
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	d10a      	bne.n	800dcda <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 800dcc4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800dcc8:	2101      	movs	r1, #1
 800dcca:	f002 f8bd 	bl	800fe48 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 800dcce:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800dcd2:	2100      	movs	r1, #0
 800dcd4:	f002 f8b8 	bl	800fe48 <RCC_APB1PeriphResetCmd>
 800dcd8:	e01c      	b.n	800dd14 <I2C_DeInit+0x60>
  }
  else if (I2Cx == I2C2)
 800dcda:	687a      	ldr	r2, [r7, #4]
 800dcdc:	4b10      	ldr	r3, [pc, #64]	; (800dd20 <I2C_DeInit+0x6c>)
 800dcde:	429a      	cmp	r2, r3
 800dce0:	d10a      	bne.n	800dcf8 <I2C_DeInit+0x44>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 800dce2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800dce6:	2101      	movs	r1, #1
 800dce8:	f002 f8ae 	bl	800fe48 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 800dcec:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800dcf0:	2100      	movs	r1, #0
 800dcf2:	f002 f8a9 	bl	800fe48 <RCC_APB1PeriphResetCmd>
 800dcf6:	e00d      	b.n	800dd14 <I2C_DeInit+0x60>
  }
  else 
  {
    if (I2Cx == I2C3)
 800dcf8:	687a      	ldr	r2, [r7, #4]
 800dcfa:	4b0a      	ldr	r3, [pc, #40]	; (800dd24 <I2C_DeInit+0x70>)
 800dcfc:	429a      	cmp	r2, r3
 800dcfe:	d109      	bne.n	800dd14 <I2C_DeInit+0x60>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 800dd00:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800dd04:	2101      	movs	r1, #1
 800dd06:	f002 f89f 	bl	800fe48 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 800dd0a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800dd0e:	2100      	movs	r1, #0
 800dd10:	f002 f89a 	bl	800fe48 <RCC_APB1PeriphResetCmd>
    }
  }
}
 800dd14:	3708      	adds	r7, #8
 800dd16:	46bd      	mov	sp, r7
 800dd18:	bd80      	pop	{r7, pc}
 800dd1a:	bf00      	nop
 800dd1c:	40005400 	.word	0x40005400
 800dd20:	40005800 	.word	0x40005800
 800dd24:	40005c00 	.word	0x40005c00

0800dd28 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b08a      	sub	sp, #40	; 0x28
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
 800dd30:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 800dd32:	2300      	movs	r3, #0
 800dd34:	84fb      	strh	r3, [r7, #38]	; 0x26
 800dd36:	2300      	movs	r3, #0
 800dd38:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 800dd3a:	2304      	movs	r3, #4
 800dd3c:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 800dd3e:	4b57      	ldr	r3, [pc, #348]	; (800de9c <I2C_Init+0x174>)
 800dd40:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	889b      	ldrh	r3, [r3, #4]
 800dd46:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 800dd48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dd4a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800dd4e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 800dd50:	f107 030c 	add.w	r3, r7, #12
 800dd54:	4618      	mov	r0, r3
 800dd56:	f001 fddb 	bl	800f910 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 800dd5a:	697b      	ldr	r3, [r7, #20]
 800dd5c:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800dd5e:	69fa      	ldr	r2, [r7, #28]
 800dd60:	4b4f      	ldr	r3, [pc, #316]	; (800dea0 <I2C_Init+0x178>)
 800dd62:	fba3 1302 	umull	r1, r3, r3, r2
 800dd66:	0c9b      	lsrs	r3, r3, #18
 800dd68:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 800dd6a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dd6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dd6e:	4313      	orrs	r3, r2
 800dd70:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dd76:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	881b      	ldrh	r3, [r3, #0]
 800dd7c:	b29b      	uxth	r3, r3
 800dd7e:	f023 0301 	bic.w	r3, r3, #1
 800dd82:	b29a      	uxth	r2, r3
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	681a      	ldr	r2, [r3, #0]
 800dd90:	4b44      	ldr	r3, [pc, #272]	; (800dea4 <I2C_Init+0x17c>)
 800dd92:	429a      	cmp	r2, r3
 800dd94:	d815      	bhi.n	800ddc2 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	005b      	lsls	r3, r3, #1
 800dd9c:	69fa      	ldr	r2, [r7, #28]
 800dd9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800dda2:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 800dda4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dda6:	2b03      	cmp	r3, #3
 800dda8:	d801      	bhi.n	800ddae <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 800ddaa:	2304      	movs	r3, #4
 800ddac:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 800ddae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ddb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ddb2:	4313      	orrs	r3, r2
 800ddb4:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 800ddb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ddb8:	3301      	adds	r3, #1
 800ddba:	b29a      	uxth	r2, r3
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	841a      	strh	r2, [r3, #32]
 800ddc0:	e040      	b.n	800de44 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	88da      	ldrh	r2, [r3, #6]
 800ddc6:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 800ddca:	429a      	cmp	r2, r3
 800ddcc:	d109      	bne.n	800dde2 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	681a      	ldr	r2, [r3, #0]
 800ddd2:	4613      	mov	r3, r2
 800ddd4:	005b      	lsls	r3, r3, #1
 800ddd6:	4413      	add	r3, r2
 800ddd8:	69fa      	ldr	r2, [r7, #28]
 800ddda:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddde:	84bb      	strh	r3, [r7, #36]	; 0x24
 800dde0:	e00e      	b.n	800de00 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	681a      	ldr	r2, [r3, #0]
 800dde6:	4613      	mov	r3, r2
 800dde8:	009b      	lsls	r3, r3, #2
 800ddea:	4413      	add	r3, r2
 800ddec:	009a      	lsls	r2, r3, #2
 800ddee:	4413      	add	r3, r2
 800ddf0:	69fa      	ldr	r2, [r7, #28]
 800ddf2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddf6:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 800ddf8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ddfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ddfe:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 800de00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800de06:	2b00      	cmp	r3, #0
 800de08:	d103      	bne.n	800de12 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 800de0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de0c:	f043 0301 	orr.w	r3, r3, #1
 800de10:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 800de12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800de14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800de16:	4313      	orrs	r3, r2
 800de18:	b29b      	uxth	r3, r3
 800de1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800de1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800de22:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 800de24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800de26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800de2a:	fb02 f303 	mul.w	r3, r2, r3
 800de2e:	4a1e      	ldr	r2, [pc, #120]	; (800dea8 <I2C_Init+0x180>)
 800de30:	fb82 1203 	smull	r1, r2, r2, r3
 800de34:	1192      	asrs	r2, r2, #6
 800de36:	17db      	asrs	r3, r3, #31
 800de38:	1ad3      	subs	r3, r2, r3
 800de3a:	b29b      	uxth	r3, r3
 800de3c:	3301      	adds	r3, #1
 800de3e:	b29a      	uxth	r2, r3
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800de48:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	881b      	ldrh	r3, [r3, #0]
 800de4e:	b29b      	uxth	r3, r3
 800de50:	f043 0301 	orr.w	r3, r3, #1
 800de54:	b29a      	uxth	r2, r3
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	881b      	ldrh	r3, [r3, #0]
 800de5e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 800de60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800de62:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 800de66:	f023 0302 	bic.w	r3, r3, #2
 800de6a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	889a      	ldrh	r2, [r3, #4]
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	895b      	ldrh	r3, [r3, #10]
 800de74:	4313      	orrs	r3, r2
 800de76:	b29a      	uxth	r2, r3
 800de78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800de7a:	4313      	orrs	r3, r2
 800de7c:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800de82:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	899a      	ldrh	r2, [r3, #12]
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	891b      	ldrh	r3, [r3, #8]
 800de8c:	4313      	orrs	r3, r2
 800de8e:	b29a      	uxth	r2, r3
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	811a      	strh	r2, [r3, #8]
}
 800de94:	3728      	adds	r7, #40	; 0x28
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}
 800de9a:	bf00      	nop
 800de9c:	007a1200 	.word	0x007a1200
 800dea0:	431bde83 	.word	0x431bde83
 800dea4:	000186a0 	.word	0x000186a0
 800dea8:	10624dd3 	.word	0x10624dd3

0800deac <I2C_StructInit>:
  * @brief  Fills each I2C_InitStruct member with its default value.
  * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
 800deac:	b480      	push	{r7}
 800deae:	b083      	sub	sp, #12
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	f241 3288 	movw	r2, #5000	; 0x1388
 800deba:	601a      	str	r2, [r3, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2200      	movs	r2, #0
 800dec0:	809a      	strh	r2, [r3, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 800dec8:	80da      	strh	r2, [r3, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	2200      	movs	r2, #0
 800dece:	811a      	strh	r2, [r3, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	2200      	movs	r2, #0
 800ded4:	815a      	strh	r2, [r3, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800dedc:	819a      	strh	r2, [r3, #12]
}
 800dede:	370c      	adds	r7, #12
 800dee0:	46bd      	mov	sp, r7
 800dee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee6:	4770      	bx	lr

0800dee8 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800dee8:	b480      	push	{r7}
 800deea:	b083      	sub	sp, #12
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
 800def0:	460b      	mov	r3, r1
 800def2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800def4:	78fb      	ldrb	r3, [r7, #3]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d008      	beq.n	800df0c <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	881b      	ldrh	r3, [r3, #0]
 800defe:	b29b      	uxth	r3, r3
 800df00:	f043 0301 	orr.w	r3, r3, #1
 800df04:	b29a      	uxth	r2, r3
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	801a      	strh	r2, [r3, #0]
 800df0a:	e007      	b.n	800df1c <I2C_Cmd+0x34>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	881b      	ldrh	r3, [r3, #0]
 800df10:	b29b      	uxth	r3, r3
 800df12:	f023 0301 	bic.w	r3, r3, #1
 800df16:	b29a      	uxth	r2, r3
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	801a      	strh	r2, [r3, #0]
  }
}
 800df1c:	370c      	adds	r7, #12
 800df1e:	46bd      	mov	sp, r7
 800df20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df24:	4770      	bx	lr
 800df26:	bf00      	nop

0800df28 <I2C_AnalogFilterCmd>:
  * @note   This function should be called before initializing and enabling
            the I2C Peripheral.
  * @retval None
  */
void I2C_AnalogFilterCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800df28:	b480      	push	{r7}
 800df2a:	b083      	sub	sp, #12
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
 800df30:	460b      	mov	r3, r1
 800df32:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800df34:	78fb      	ldrb	r3, [r7, #3]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d008      	beq.n	800df4c <I2C_AnalogFilterCmd+0x24>
  {
    /* Enable the analog filter */
    I2Cx->FLTR &= (uint16_t)~((uint16_t)I2C_FLTR_ANOFF);    
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800df3e:	b29b      	uxth	r3, r3
 800df40:	f023 0310 	bic.w	r3, r3, #16
 800df44:	b29a      	uxth	r2, r3
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	849a      	strh	r2, [r3, #36]	; 0x24
 800df4a:	e007      	b.n	800df5c <I2C_AnalogFilterCmd+0x34>
  }
  else
  {
    /* Disable the analog filter */
    I2Cx->FLTR |= I2C_FLTR_ANOFF;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800df50:	b29b      	uxth	r3, r3
 800df52:	f043 0310 	orr.w	r3, r3, #16
 800df56:	b29a      	uxth	r2, r3
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	849a      	strh	r2, [r3, #36]	; 0x24
  }
}
 800df5c:	370c      	adds	r7, #12
 800df5e:	46bd      	mov	sp, r7
 800df60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df64:	4770      	bx	lr
 800df66:	bf00      	nop

0800df68 <I2C_DigitalFilterConfig>:
  * @note   This function should be called before initializing and enabling
            the I2C Peripheral.
  * @retval None
  */
void I2C_DigitalFilterConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DigitalFilter)
{
 800df68:	b480      	push	{r7}
 800df6a:	b085      	sub	sp, #20
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	460b      	mov	r3, r1
 800df72:	807b      	strh	r3, [r7, #2]
  uint16_t tmpreg = 0;
 800df74:	2300      	movs	r3, #0
 800df76:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIGITAL_FILTER(I2C_DigitalFilter));
  
  /* Get the old register value */
  tmpreg = I2Cx->FLTR;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800df7c:	81fb      	strh	r3, [r7, #14]
  
  /* Reset I2Cx DNF bit [3:0] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_FLTR_DNF);
 800df7e:	89fb      	ldrh	r3, [r7, #14]
 800df80:	f023 030f 	bic.w	r3, r3, #15
 800df84:	81fb      	strh	r3, [r7, #14]
  
  /* Set I2Cx DNF coefficient */
  tmpreg |= (uint16_t)((uint16_t)I2C_DigitalFilter & I2C_FLTR_DNF);
 800df86:	887b      	ldrh	r3, [r7, #2]
 800df88:	f003 030f 	and.w	r3, r3, #15
 800df8c:	b29a      	uxth	r2, r3
 800df8e:	89fb      	ldrh	r3, [r7, #14]
 800df90:	4313      	orrs	r3, r2
 800df92:	b29b      	uxth	r3, r3
 800df94:	81fb      	strh	r3, [r7, #14]
  
  /* Store the new register value */
  I2Cx->FLTR = tmpreg;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	89fa      	ldrh	r2, [r7, #14]
 800df9a:	849a      	strh	r2, [r3, #36]	; 0x24
}
 800df9c:	3714      	adds	r7, #20
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa4:	4770      	bx	lr
 800dfa6:	bf00      	nop

0800dfa8 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800dfa8:	b480      	push	{r7}
 800dfaa:	b083      	sub	sp, #12
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
 800dfb0:	460b      	mov	r3, r1
 800dfb2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800dfb4:	78fb      	ldrb	r3, [r7, #3]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d008      	beq.n	800dfcc <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	881b      	ldrh	r3, [r3, #0]
 800dfbe:	b29b      	uxth	r3, r3
 800dfc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dfc4:	b29a      	uxth	r2, r3
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	801a      	strh	r2, [r3, #0]
 800dfca:	e007      	b.n	800dfdc <I2C_GenerateSTART+0x34>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	881b      	ldrh	r3, [r3, #0]
 800dfd0:	b29b      	uxth	r3, r3
 800dfd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dfd6:	b29a      	uxth	r2, r3
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	801a      	strh	r2, [r3, #0]
  }
}
 800dfdc:	370c      	adds	r7, #12
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe4:	4770      	bx	lr
 800dfe6:	bf00      	nop

0800dfe8 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800dfe8:	b480      	push	{r7}
 800dfea:	b083      	sub	sp, #12
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
 800dff0:	460b      	mov	r3, r1
 800dff2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800dff4:	78fb      	ldrb	r3, [r7, #3]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d008      	beq.n	800e00c <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	881b      	ldrh	r3, [r3, #0]
 800dffe:	b29b      	uxth	r3, r3
 800e000:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e004:	b29a      	uxth	r2, r3
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	801a      	strh	r2, [r3, #0]
 800e00a:	e007      	b.n	800e01c <I2C_GenerateSTOP+0x34>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	881b      	ldrh	r3, [r3, #0]
 800e010:	b29b      	uxth	r3, r3
 800e012:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e016:	b29a      	uxth	r2, r3
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	801a      	strh	r2, [r3, #0]
  }
}
 800e01c:	370c      	adds	r7, #12
 800e01e:	46bd      	mov	sp, r7
 800e020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e024:	4770      	bx	lr
 800e026:	bf00      	nop

0800e028 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 800e028:	b480      	push	{r7}
 800e02a:	b083      	sub	sp, #12
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
 800e030:	4613      	mov	r3, r2
 800e032:	460a      	mov	r2, r1
 800e034:	70fa      	strb	r2, [r7, #3]
 800e036:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 800e038:	78bb      	ldrb	r3, [r7, #2]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d004      	beq.n	800e048 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 800e03e:	78fb      	ldrb	r3, [r7, #3]
 800e040:	f043 0301 	orr.w	r3, r3, #1
 800e044:	70fb      	strb	r3, [r7, #3]
 800e046:	e003      	b.n	800e050 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 800e048:	78fb      	ldrb	r3, [r7, #3]
 800e04a:	f023 0301 	bic.w	r3, r3, #1
 800e04e:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 800e050:	78fb      	ldrb	r3, [r7, #3]
 800e052:	b29a      	uxth	r2, r3
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	821a      	strh	r2, [r3, #16]
}
 800e058:	370c      	adds	r7, #12
 800e05a:	46bd      	mov	sp, r7
 800e05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e060:	4770      	bx	lr
 800e062:	bf00      	nop

0800e064 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e064:	b480      	push	{r7}
 800e066:	b083      	sub	sp, #12
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
 800e06c:	460b      	mov	r3, r1
 800e06e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e070:	78fb      	ldrb	r3, [r7, #3]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d008      	beq.n	800e088 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	881b      	ldrh	r3, [r3, #0]
 800e07a:	b29b      	uxth	r3, r3
 800e07c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e080:	b29a      	uxth	r2, r3
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	801a      	strh	r2, [r3, #0]
 800e086:	e007      	b.n	800e098 <I2C_AcknowledgeConfig+0x34>
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	881b      	ldrh	r3, [r3, #0]
 800e08c:	b29b      	uxth	r3, r3
 800e08e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e092:	b29a      	uxth	r2, r3
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	801a      	strh	r2, [r3, #0]
  }
}
 800e098:	370c      	adds	r7, #12
 800e09a:	46bd      	mov	sp, r7
 800e09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a0:	4770      	bx	lr
 800e0a2:	bf00      	nop

0800e0a4 <I2C_OwnAddress2Config>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Address: specifies the 7bit I2C own address2.
  * @retval None.
  */
void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address)
{
 800e0a4:	b480      	push	{r7}
 800e0a6:	b085      	sub	sp, #20
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
 800e0ac:	460b      	mov	r3, r1
 800e0ae:	70fb      	strb	r3, [r7, #3]
  uint16_t tmpreg = 0;
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	899b      	ldrh	r3, [r3, #12]
 800e0b8:	81fb      	strh	r3, [r7, #14]

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 800e0ba:	89fb      	ldrh	r3, [r7, #14]
 800e0bc:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800e0c0:	81fb      	strh	r3, [r7, #14]

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 800e0c2:	78fb      	ldrb	r3, [r7, #3]
 800e0c4:	b29b      	uxth	r3, r3
 800e0c6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800e0ca:	b29a      	uxth	r2, r3
 800e0cc:	89fb      	ldrh	r3, [r7, #14]
 800e0ce:	4313      	orrs	r3, r2
 800e0d0:	b29b      	uxth	r3, r3
 800e0d2:	81fb      	strh	r3, [r7, #14]

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	89fa      	ldrh	r2, [r7, #14]
 800e0d8:	819a      	strh	r2, [r3, #12]
}
 800e0da:	3714      	adds	r7, #20
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e2:	4770      	bx	lr

0800e0e4 <I2C_DualAddressCmd>:
  * @param  NewState: new state of the I2C dual addressing mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e0e4:	b480      	push	{r7}
 800e0e6:	b083      	sub	sp, #12
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
 800e0ec:	460b      	mov	r3, r1
 800e0ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e0f0:	78fb      	ldrb	r3, [r7, #3]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d008      	beq.n	800e108 <I2C_DualAddressCmd+0x24>
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	899b      	ldrh	r3, [r3, #12]
 800e0fa:	b29b      	uxth	r3, r3
 800e0fc:	f043 0301 	orr.w	r3, r3, #1
 800e100:	b29a      	uxth	r2, r3
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	819a      	strh	r2, [r3, #12]
 800e106:	e007      	b.n	800e118 <I2C_DualAddressCmd+0x34>
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	899b      	ldrh	r3, [r3, #12]
 800e10c:	b29b      	uxth	r3, r3
 800e10e:	f023 0301 	bic.w	r3, r3, #1
 800e112:	b29a      	uxth	r2, r3
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	819a      	strh	r2, [r3, #12]
  }
}
 800e118:	370c      	adds	r7, #12
 800e11a:	46bd      	mov	sp, r7
 800e11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e120:	4770      	bx	lr
 800e122:	bf00      	nop

0800e124 <I2C_GeneralCallCmd>:
  * @param  NewState: new state of the I2C General call.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e124:	b480      	push	{r7}
 800e126:	b083      	sub	sp, #12
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
 800e12c:	460b      	mov	r3, r1
 800e12e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e130:	78fb      	ldrb	r3, [r7, #3]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d008      	beq.n	800e148 <I2C_GeneralCallCmd+0x24>
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	881b      	ldrh	r3, [r3, #0]
 800e13a:	b29b      	uxth	r3, r3
 800e13c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e140:	b29a      	uxth	r2, r3
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	801a      	strh	r2, [r3, #0]
 800e146:	e007      	b.n	800e158 <I2C_GeneralCallCmd+0x34>
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	881b      	ldrh	r3, [r3, #0]
 800e14c:	b29b      	uxth	r3, r3
 800e14e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e152:	b29a      	uxth	r2, r3
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	801a      	strh	r2, [r3, #0]
  }
}
 800e158:	370c      	adds	r7, #12
 800e15a:	46bd      	mov	sp, r7
 800e15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e160:	4770      	bx	lr
 800e162:	bf00      	nop

0800e164 <I2C_SoftwareResetCmd>:
  * @param  NewState: new state of the I2C software reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e164:	b480      	push	{r7}
 800e166:	b083      	sub	sp, #12
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
 800e16c:	460b      	mov	r3, r1
 800e16e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e170:	78fb      	ldrb	r3, [r7, #3]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d00a      	beq.n	800e18c <I2C_SoftwareResetCmd+0x28>
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	881b      	ldrh	r3, [r3, #0]
 800e17a:	b29b      	uxth	r3, r3
 800e17c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e180:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e184:	b29a      	uxth	r2, r3
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	801a      	strh	r2, [r3, #0]
 800e18a:	e007      	b.n	800e19c <I2C_SoftwareResetCmd+0x38>
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	881b      	ldrh	r3, [r3, #0]
 800e190:	b29b      	uxth	r3, r3
 800e192:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800e196:	b29a      	uxth	r2, r3
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	801a      	strh	r2, [r3, #0]
  }
}
 800e19c:	370c      	adds	r7, #12
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a4:	4770      	bx	lr
 800e1a6:	bf00      	nop

0800e1a8 <I2C_StretchClockCmd>:
  * @param  NewState: new state of the I2Cx Clock stretching.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b083      	sub	sp, #12
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	460b      	mov	r3, r1
 800e1b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 800e1b4:	78fb      	ldrb	r3, [r7, #3]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d108      	bne.n	800e1cc <I2C_StretchClockCmd+0x24>
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	881b      	ldrh	r3, [r3, #0]
 800e1be:	b29b      	uxth	r3, r3
 800e1c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1c4:	b29a      	uxth	r2, r3
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	801a      	strh	r2, [r3, #0]
 800e1ca:	e007      	b.n	800e1dc <I2C_StretchClockCmd+0x34>
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	881b      	ldrh	r3, [r3, #0]
 800e1d0:	b29b      	uxth	r3, r3
 800e1d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e1d6:	b29a      	uxth	r2, r3
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	801a      	strh	r2, [r3, #0]
  }
}
 800e1dc:	370c      	adds	r7, #12
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e4:	4770      	bx	lr
 800e1e6:	bf00      	nop

0800e1e8 <I2C_FastModeDutyCycleConfig>:
  *            @arg I2C_DutyCycle_2: I2C fast mode Tlow/Thigh = 2
  *            @arg I2C_DutyCycle_16_9: I2C fast mode Tlow/Thigh = 16/9
  * @retval None
  */
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
 800e1e8:	b480      	push	{r7}
 800e1ea:	b083      	sub	sp, #12
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
 800e1f0:	460b      	mov	r3, r1
 800e1f2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 800e1f4:	887b      	ldrh	r3, [r7, #2]
 800e1f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e1fa:	d008      	beq.n	800e20e <I2C_FastModeDutyCycleConfig+0x26>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	8b9b      	ldrh	r3, [r3, #28]
 800e200:	b29b      	uxth	r3, r3
 800e202:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e206:	b29a      	uxth	r2, r3
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	839a      	strh	r2, [r3, #28]
 800e20c:	e007      	b.n	800e21e <I2C_FastModeDutyCycleConfig+0x36>
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	8b9b      	ldrh	r3, [r3, #28]
 800e212:	b29b      	uxth	r3, r3
 800e214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e218:	b29a      	uxth	r2, r3
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	839a      	strh	r2, [r3, #28]
  }
}
 800e21e:	370c      	adds	r7, #12
 800e220:	46bd      	mov	sp, r7
 800e222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e226:	4770      	bx	lr

0800e228 <I2C_NACKPositionConfig>:
  *          is intended to used in SMBUS mode. 
  *            
  * @retval None
  */
void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
{
 800e228:	b480      	push	{r7}
 800e22a:	b083      	sub	sp, #12
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
 800e230:	460b      	mov	r3, r1
 800e232:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 800e234:	887b      	ldrh	r3, [r7, #2]
 800e236:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e23a:	d108      	bne.n	800e24e <I2C_NACKPositionConfig+0x26>
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	881b      	ldrh	r3, [r3, #0]
 800e240:	b29b      	uxth	r3, r3
 800e242:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e246:	b29a      	uxth	r2, r3
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	801a      	strh	r2, [r3, #0]
 800e24c:	e007      	b.n	800e25e <I2C_NACKPositionConfig+0x36>
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	881b      	ldrh	r3, [r3, #0]
 800e252:	b29b      	uxth	r3, r3
 800e254:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e258:	b29a      	uxth	r2, r3
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	801a      	strh	r2, [r3, #0]
  }
}
 800e25e:	370c      	adds	r7, #12
 800e260:	46bd      	mov	sp, r7
 800e262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e266:	4770      	bx	lr

0800e268 <I2C_SMBusAlertConfig>:
  *            @arg I2C_SMBusAlert_Low: SMBAlert pin driven low
  *            @arg I2C_SMBusAlert_High: SMBAlert pin driven high
  * @retval None
  */
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
 800e268:	b480      	push	{r7}
 800e26a:	b083      	sub	sp, #12
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
 800e270:	460b      	mov	r3, r1
 800e272:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 800e274:	887b      	ldrh	r3, [r7, #2]
 800e276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e27a:	d108      	bne.n	800e28e <I2C_SMBusAlertConfig+0x26>
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	881b      	ldrh	r3, [r3, #0]
 800e280:	b29b      	uxth	r3, r3
 800e282:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e286:	b29a      	uxth	r2, r3
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	801a      	strh	r2, [r3, #0]
 800e28c:	e007      	b.n	800e29e <I2C_SMBusAlertConfig+0x36>
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	881b      	ldrh	r3, [r3, #0]
 800e292:	b29b      	uxth	r3, r3
 800e294:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e298:	b29a      	uxth	r2, r3
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	801a      	strh	r2, [r3, #0]
  }
}
 800e29e:	370c      	adds	r7, #12
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a6:	4770      	bx	lr

0800e2a8 <I2C_ARPCmd>:
  * @param  NewState: new state of the I2Cx ARP. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	b083      	sub	sp, #12
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
 800e2b0:	460b      	mov	r3, r1
 800e2b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e2b4:	78fb      	ldrb	r3, [r7, #3]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d008      	beq.n	800e2cc <I2C_ARPCmd+0x24>
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	881b      	ldrh	r3, [r3, #0]
 800e2be:	b29b      	uxth	r3, r3
 800e2c0:	f043 0310 	orr.w	r3, r3, #16
 800e2c4:	b29a      	uxth	r2, r3
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	801a      	strh	r2, [r3, #0]
 800e2ca:	e007      	b.n	800e2dc <I2C_ARPCmd+0x34>
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	881b      	ldrh	r3, [r3, #0]
 800e2d0:	b29b      	uxth	r3, r3
 800e2d2:	f023 0310 	bic.w	r3, r3, #16
 800e2d6:	b29a      	uxth	r2, r3
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	801a      	strh	r2, [r3, #0]
  }
}
 800e2dc:	370c      	adds	r7, #12
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e4:	4770      	bx	lr
 800e2e6:	bf00      	nop

0800e2e8 <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b083      	sub	sp, #12
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
 800e2f0:	460b      	mov	r3, r1
 800e2f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 800e2f4:	78fb      	ldrb	r3, [r7, #3]
 800e2f6:	b29a      	uxth	r2, r3
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	821a      	strh	r2, [r3, #16]
}
 800e2fc:	370c      	adds	r7, #12
 800e2fe:	46bd      	mov	sp, r7
 800e300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e304:	4770      	bx	lr
 800e306:	bf00      	nop

0800e308 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 800e308:	b480      	push	{r7}
 800e30a:	b083      	sub	sp, #12
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	8a1b      	ldrh	r3, [r3, #16]
 800e314:	b29b      	uxth	r3, r3
 800e316:	b2db      	uxtb	r3, r3
}
 800e318:	4618      	mov	r0, r3
 800e31a:	370c      	adds	r7, #12
 800e31c:	46bd      	mov	sp, r7
 800e31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e322:	4770      	bx	lr

0800e324 <I2C_TransmitPEC>:
  * @param  NewState: new state of the I2C PEC transmission.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e324:	b480      	push	{r7}
 800e326:	b083      	sub	sp, #12
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
 800e32c:	460b      	mov	r3, r1
 800e32e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e330:	78fb      	ldrb	r3, [r7, #3]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d008      	beq.n	800e348 <I2C_TransmitPEC+0x24>
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	881b      	ldrh	r3, [r3, #0]
 800e33a:	b29b      	uxth	r3, r3
 800e33c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e340:	b29a      	uxth	r2, r3
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	801a      	strh	r2, [r3, #0]
 800e346:	e007      	b.n	800e358 <I2C_TransmitPEC+0x34>
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	881b      	ldrh	r3, [r3, #0]
 800e34c:	b29b      	uxth	r3, r3
 800e34e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e352:	b29a      	uxth	r2, r3
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	801a      	strh	r2, [r3, #0]
  }
}
 800e358:	370c      	adds	r7, #12
 800e35a:	46bd      	mov	sp, r7
 800e35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e360:	4770      	bx	lr
 800e362:	bf00      	nop

0800e364 <I2C_PECPositionConfig>:
  *          is intended to used in I2C mode.
  *                
  * @retval None
  */
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
 800e364:	b480      	push	{r7}
 800e366:	b083      	sub	sp, #12
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
 800e36c:	460b      	mov	r3, r1
 800e36e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 800e370:	887b      	ldrh	r3, [r7, #2]
 800e372:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e376:	d108      	bne.n	800e38a <I2C_PECPositionConfig+0x26>
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	881b      	ldrh	r3, [r3, #0]
 800e37c:	b29b      	uxth	r3, r3
 800e37e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e382:	b29a      	uxth	r2, r3
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	801a      	strh	r2, [r3, #0]
 800e388:	e007      	b.n	800e39a <I2C_PECPositionConfig+0x36>
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	881b      	ldrh	r3, [r3, #0]
 800e38e:	b29b      	uxth	r3, r3
 800e390:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e394:	b29a      	uxth	r2, r3
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	801a      	strh	r2, [r3, #0]
  }
}
 800e39a:	370c      	adds	r7, #12
 800e39c:	46bd      	mov	sp, r7
 800e39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a2:	4770      	bx	lr

0800e3a4 <I2C_CalculatePEC>:
  * @param  NewState: new state of the I2Cx PEC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e3a4:	b480      	push	{r7}
 800e3a6:	b083      	sub	sp, #12
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
 800e3ac:	460b      	mov	r3, r1
 800e3ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e3b0:	78fb      	ldrb	r3, [r7, #3]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d008      	beq.n	800e3c8 <I2C_CalculatePEC+0x24>
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	881b      	ldrh	r3, [r3, #0]
 800e3ba:	b29b      	uxth	r3, r3
 800e3bc:	f043 0320 	orr.w	r3, r3, #32
 800e3c0:	b29a      	uxth	r2, r3
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	801a      	strh	r2, [r3, #0]
 800e3c6:	e007      	b.n	800e3d8 <I2C_CalculatePEC+0x34>
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	881b      	ldrh	r3, [r3, #0]
 800e3cc:	b29b      	uxth	r3, r3
 800e3ce:	f023 0320 	bic.w	r3, r3, #32
 800e3d2:	b29a      	uxth	r2, r3
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	801a      	strh	r2, [r3, #0]
  }
}
 800e3d8:	370c      	adds	r7, #12
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e0:	4770      	bx	lr
 800e3e2:	bf00      	nop

0800e3e4 <I2C_GetPEC>:
  * @brief  Returns the PEC value for the specified I2C.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The PEC value.
  */
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
 800e3e4:	b480      	push	{r7}
 800e3e6:	b083      	sub	sp, #12
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	8b1b      	ldrh	r3, [r3, #24]
 800e3f0:	b29b      	uxth	r3, r3
 800e3f2:	0a1b      	lsrs	r3, r3, #8
 800e3f4:	b29b      	uxth	r3, r3
 800e3f6:	b2db      	uxtb	r3, r3
}
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	370c      	adds	r7, #12
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e402:	4770      	bx	lr

0800e404 <I2C_DMACmd>:
  * @param  NewState: new state of the I2C DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e404:	b480      	push	{r7}
 800e406:	b083      	sub	sp, #12
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
 800e40c:	460b      	mov	r3, r1
 800e40e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e410:	78fb      	ldrb	r3, [r7, #3]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d008      	beq.n	800e428 <I2C_DMACmd+0x24>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	889b      	ldrh	r3, [r3, #4]
 800e41a:	b29b      	uxth	r3, r3
 800e41c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e420:	b29a      	uxth	r2, r3
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	809a      	strh	r2, [r3, #4]
 800e426:	e007      	b.n	800e438 <I2C_DMACmd+0x34>
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	889b      	ldrh	r3, [r3, #4]
 800e42c:	b29b      	uxth	r3, r3
 800e42e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e432:	b29a      	uxth	r2, r3
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	809a      	strh	r2, [r3, #4]
  }
}
 800e438:	370c      	adds	r7, #12
 800e43a:	46bd      	mov	sp, r7
 800e43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e440:	4770      	bx	lr
 800e442:	bf00      	nop

0800e444 <I2C_DMALastTransferCmd>:
  * @param  NewState: new state of the I2C DMA last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e444:	b480      	push	{r7}
 800e446:	b083      	sub	sp, #12
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
 800e44c:	460b      	mov	r3, r1
 800e44e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e450:	78fb      	ldrb	r3, [r7, #3]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d008      	beq.n	800e468 <I2C_DMALastTransferCmd+0x24>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	889b      	ldrh	r3, [r3, #4]
 800e45a:	b29b      	uxth	r3, r3
 800e45c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e460:	b29a      	uxth	r2, r3
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	809a      	strh	r2, [r3, #4]
 800e466:	e007      	b.n	800e478 <I2C_DMALastTransferCmd+0x34>
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	889b      	ldrh	r3, [r3, #4]
 800e46c:	b29b      	uxth	r3, r3
 800e46e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e472:	b29a      	uxth	r2, r3
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	809a      	strh	r2, [r3, #4]
  }
}
 800e478:	370c      	adds	r7, #12
 800e47a:	46bd      	mov	sp, r7
 800e47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e480:	4770      	bx	lr
 800e482:	bf00      	nop

0800e484 <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 800e484:	b480      	push	{r7}
 800e486:	b085      	sub	sp, #20
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
 800e48c:	460b      	mov	r3, r1
 800e48e:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 800e490:	2300      	movs	r3, #0
 800e492:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	60fb      	str	r3, [r7, #12]
  tmp += I2C_Register;
 800e498:	78fa      	ldrb	r2, [r7, #3]
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	4413      	add	r3, r2
 800e49e:	60fb      	str	r3, [r7, #12]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	881b      	ldrh	r3, [r3, #0]
 800e4a4:	b29b      	uxth	r3, r3
}
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	3714      	adds	r7, #20
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b0:	4770      	bx	lr
 800e4b2:	bf00      	nop

0800e4b4 <I2C_ITConfig>:
  * @param  NewState: new state of the specified I2C interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
{
 800e4b4:	b480      	push	{r7}
 800e4b6:	b083      	sub	sp, #12
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
 800e4bc:	4613      	mov	r3, r2
 800e4be:	460a      	mov	r2, r1
 800e4c0:	807a      	strh	r2, [r7, #2]
 800e4c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 800e4c4:	787b      	ldrb	r3, [r7, #1]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d008      	beq.n	800e4dc <I2C_ITConfig+0x28>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	889b      	ldrh	r3, [r3, #4]
 800e4ce:	b29a      	uxth	r2, r3
 800e4d0:	887b      	ldrh	r3, [r7, #2]
 800e4d2:	4313      	orrs	r3, r2
 800e4d4:	b29a      	uxth	r2, r3
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	809a      	strh	r2, [r3, #4]
 800e4da:	e009      	b.n	800e4f0 <I2C_ITConfig+0x3c>
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	889b      	ldrh	r3, [r3, #4]
 800e4e0:	b29a      	uxth	r2, r3
 800e4e2:	887b      	ldrh	r3, [r7, #2]
 800e4e4:	43db      	mvns	r3, r3
 800e4e6:	b29b      	uxth	r3, r3
 800e4e8:	4013      	ands	r3, r2
 800e4ea:	b29a      	uxth	r2, r3
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	809a      	strh	r2, [r3, #4]
  }
}
 800e4f0:	370c      	adds	r7, #12
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f8:	4770      	bx	lr
 800e4fa:	bf00      	nop

0800e4fc <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	b087      	sub	sp, #28
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
 800e504:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 800e506:	2300      	movs	r3, #0
 800e508:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 800e50a:	2300      	movs	r3, #0
 800e50c:	60fb      	str	r3, [r7, #12]
 800e50e:	2300      	movs	r3, #0
 800e510:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 800e512:	2300      	movs	r3, #0
 800e514:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	8a9b      	ldrh	r3, [r3, #20]
 800e51a:	b29b      	uxth	r3, r3
 800e51c:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	8b1b      	ldrh	r3, [r3, #24]
 800e522:	b29b      	uxth	r3, r3
 800e524:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 800e526:	68bb      	ldr	r3, [r7, #8]
 800e528:	041b      	lsls	r3, r3, #16
 800e52a:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 800e52c:	68fa      	ldr	r2, [r7, #12]
 800e52e:	68bb      	ldr	r3, [r7, #8]
 800e530:	4313      	orrs	r3, r2
 800e532:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e536:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 800e538:	693a      	ldr	r2, [r7, #16]
 800e53a:	683b      	ldr	r3, [r7, #0]
 800e53c:	401a      	ands	r2, r3
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	429a      	cmp	r2, r3
 800e542:	d102      	bne.n	800e54a <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 800e544:	2301      	movs	r3, #1
 800e546:	75fb      	strb	r3, [r7, #23]
 800e548:	e001      	b.n	800e54e <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 800e54a:	2300      	movs	r3, #0
 800e54c:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 800e54e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e550:	4618      	mov	r0, r3
 800e552:	371c      	adds	r7, #28
 800e554:	46bd      	mov	sp, r7
 800e556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55a:	4770      	bx	lr

0800e55c <I2C_GetLastEvent>:
  *         in stm32f4xx_i2c.h file.
  *    
  * @retval The last event
  */
uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
{
 800e55c:	b480      	push	{r7}
 800e55e:	b087      	sub	sp, #28
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
  uint32_t lastevent = 0;
 800e564:	2300      	movs	r3, #0
 800e566:	617b      	str	r3, [r7, #20]
  uint32_t flag1 = 0, flag2 = 0;
 800e568:	2300      	movs	r3, #0
 800e56a:	613b      	str	r3, [r7, #16]
 800e56c:	2300      	movs	r3, #0
 800e56e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	8a9b      	ldrh	r3, [r3, #20]
 800e574:	b29b      	uxth	r3, r3
 800e576:	613b      	str	r3, [r7, #16]
  flag2 = I2Cx->SR2;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	8b1b      	ldrh	r3, [r3, #24]
 800e57c:	b29b      	uxth	r3, r3
 800e57e:	60fb      	str	r3, [r7, #12]
  flag2 = flag2 << 16;
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	041b      	lsls	r3, r3, #16
 800e584:	60fb      	str	r3, [r7, #12]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 800e586:	693a      	ldr	r2, [r7, #16]
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	4313      	orrs	r3, r2
 800e58c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e590:	617b      	str	r3, [r7, #20]

  /* Return status */
  return lastevent;
 800e592:	697b      	ldr	r3, [r7, #20]
}
 800e594:	4618      	mov	r0, r3
 800e596:	371c      	adds	r7, #28
 800e598:	46bd      	mov	sp, r7
 800e59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59e:	4770      	bx	lr

0800e5a0 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 800e5a0:	b480      	push	{r7}
 800e5a2:	b087      	sub	sp, #28
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
 800e5a8:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	613b      	str	r3, [r7, #16]
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 800e5ba:	683b      	ldr	r3, [r7, #0]
 800e5bc:	0f1b      	lsrs	r3, r3, #28
 800e5be:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e5c6:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 800e5c8:	693b      	ldr	r3, [r7, #16]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d003      	beq.n	800e5d6 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	3314      	adds	r3, #20
 800e5d2:	60fb      	str	r3, [r7, #12]
 800e5d4:	e005      	b.n	800e5e2 <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 800e5d6:	683b      	ldr	r3, [r7, #0]
 800e5d8:	0c1b      	lsrs	r3, r3, #16
 800e5da:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	3318      	adds	r3, #24
 800e5e0:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	681a      	ldr	r2, [r3, #0]
 800e5e6:	683b      	ldr	r3, [r7, #0]
 800e5e8:	4013      	ands	r3, r2
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d002      	beq.n	800e5f4 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 800e5ee:	2301      	movs	r3, #1
 800e5f0:	75fb      	strb	r3, [r7, #23]
 800e5f2:	e001      	b.n	800e5f8 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 800e5f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	371c      	adds	r7, #28
 800e5fe:	46bd      	mov	sp, r7
 800e600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e604:	4770      	bx	lr
 800e606:	bf00      	nop

0800e608 <I2C_ClearFlag>:
  *          register (I2C_SendData()).
  *  
  * @retval None
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 800e608:	b480      	push	{r7}
 800e60a:	b085      	sub	sp, #20
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
 800e610:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 800e612:	2300      	movs	r3, #0
 800e614:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e61c:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	b29b      	uxth	r3, r3
 800e622:	43db      	mvns	r3, r3
 800e624:	b29a      	uxth	r2, r3
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	829a      	strh	r2, [r3, #20]
}
 800e62a:	3714      	adds	r7, #20
 800e62c:	46bd      	mov	sp, r7
 800e62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e632:	4770      	bx	lr

0800e634 <I2C_GetITStatus>:
  *                              Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 800e634:	b480      	push	{r7}
 800e636:	b085      	sub	sp, #20
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
 800e63c:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800e63e:	2300      	movs	r3, #0
 800e640:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 800e642:	2300      	movs	r3, #0
 800e644:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800e64c:	0c1a      	lsrs	r2, r3, #16
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	889b      	ldrh	r3, [r3, #4]
 800e652:	b29b      	uxth	r3, r3
 800e654:	4013      	ands	r3, r2
 800e656:	60bb      	str	r3, [r7, #8]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e65e:	603b      	str	r3, [r7, #0]

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	8a9b      	ldrh	r3, [r3, #20]
 800e664:	b29b      	uxth	r3, r3
 800e666:	461a      	mov	r2, r3
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	4013      	ands	r3, r2
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d005      	beq.n	800e67c <I2C_GetITStatus+0x48>
 800e670:	68bb      	ldr	r3, [r7, #8]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d002      	beq.n	800e67c <I2C_GetITStatus+0x48>
  {
    /* I2C_IT is set */
    bitstatus = SET;
 800e676:	2301      	movs	r3, #1
 800e678:	73fb      	strb	r3, [r7, #15]
 800e67a:	e001      	b.n	800e680 <I2C_GetITStatus+0x4c>
  }
  else
  {
    /* I2C_IT is reset */
    bitstatus = RESET;
 800e67c:	2300      	movs	r3, #0
 800e67e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the I2C_IT status */
  return  bitstatus;
 800e680:	7bfb      	ldrb	r3, [r7, #15]
}
 800e682:	4618      	mov	r0, r3
 800e684:	3714      	adds	r7, #20
 800e686:	46bd      	mov	sp, r7
 800e688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68c:	4770      	bx	lr
 800e68e:	bf00      	nop

0800e690 <I2C_ClearITPendingBit>:
  *          I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
  *          I2C_DR register (I2C_SendData()).
  * @retval None
  */
void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 800e690:	b480      	push	{r7}
 800e692:	b085      	sub	sp, #20
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
 800e698:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 800e69a:	2300      	movs	r3, #0
 800e69c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e6a4:	60fb      	str	r3, [r7, #12]

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	b29b      	uxth	r3, r3
 800e6aa:	43db      	mvns	r3, r3
 800e6ac:	b29a      	uxth	r2, r3
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	829a      	strh	r2, [r3, #20]
}
 800e6b2:	3714      	adds	r7, #20
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ba:	4770      	bx	lr

0800e6bc <IWDG_WriteAccessCmd>:
  *            @arg IWDG_WriteAccess_Enable: Enable write access to IWDG_PR and IWDG_RLR registers
  *            @arg IWDG_WriteAccess_Disable: Disable write access to IWDG_PR and IWDG_RLR registers
  * @retval None
  */
void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
{
 800e6bc:	b480      	push	{r7}
 800e6be:	b083      	sub	sp, #12
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	4603      	mov	r3, r0
 800e6c4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
  IWDG->KR = IWDG_WriteAccess;
 800e6c6:	4b04      	ldr	r3, [pc, #16]	; (800e6d8 <IWDG_WriteAccessCmd+0x1c>)
 800e6c8:	88fa      	ldrh	r2, [r7, #6]
 800e6ca:	601a      	str	r2, [r3, #0]
}
 800e6cc:	370c      	adds	r7, #12
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d4:	4770      	bx	lr
 800e6d6:	bf00      	nop
 800e6d8:	40003000 	.word	0x40003000

0800e6dc <IWDG_SetPrescaler>:
  *            @arg IWDG_Prescaler_128: IWDG prescaler set to 128
  *            @arg IWDG_Prescaler_256: IWDG prescaler set to 256
  * @retval None
  */
void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
{
 800e6dc:	b480      	push	{r7}
 800e6de:	b083      	sub	sp, #12
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
  IWDG->PR = IWDG_Prescaler;
 800e6e6:	4b04      	ldr	r3, [pc, #16]	; (800e6f8 <IWDG_SetPrescaler+0x1c>)
 800e6e8:	79fa      	ldrb	r2, [r7, #7]
 800e6ea:	605a      	str	r2, [r3, #4]
}
 800e6ec:	370c      	adds	r7, #12
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f4:	4770      	bx	lr
 800e6f6:	bf00      	nop
 800e6f8:	40003000 	.word	0x40003000

0800e6fc <IWDG_SetReload>:
  * @param  Reload: specifies the IWDG Reload value.
  *          This parameter must be a number between 0 and 0x0FFF.
  * @retval None
  */
void IWDG_SetReload(uint16_t Reload)
{
 800e6fc:	b480      	push	{r7}
 800e6fe:	b083      	sub	sp, #12
 800e700:	af00      	add	r7, sp, #0
 800e702:	4603      	mov	r3, r0
 800e704:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_RELOAD(Reload));
  IWDG->RLR = Reload;
 800e706:	4b04      	ldr	r3, [pc, #16]	; (800e718 <IWDG_SetReload+0x1c>)
 800e708:	88fa      	ldrh	r2, [r7, #6]
 800e70a:	609a      	str	r2, [r3, #8]
}
 800e70c:	370c      	adds	r7, #12
 800e70e:	46bd      	mov	sp, r7
 800e710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e714:	4770      	bx	lr
 800e716:	bf00      	nop
 800e718:	40003000 	.word	0x40003000

0800e71c <IWDG_ReloadCounter>:
  *         (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_ReloadCounter(void)
{
 800e71c:	b480      	push	{r7}
 800e71e:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_RELOAD;
 800e720:	4b03      	ldr	r3, [pc, #12]	; (800e730 <IWDG_ReloadCounter+0x14>)
 800e722:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800e726:	601a      	str	r2, [r3, #0]
}
 800e728:	46bd      	mov	sp, r7
 800e72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72e:	4770      	bx	lr
 800e730:	40003000 	.word	0x40003000

0800e734 <IWDG_Enable>:
  * @brief  Enables IWDG (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_Enable(void)
{
 800e734:	b480      	push	{r7}
 800e736:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_ENABLE;
 800e738:	4b03      	ldr	r3, [pc, #12]	; (800e748 <IWDG_Enable+0x14>)
 800e73a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800e73e:	601a      	str	r2, [r3, #0]
}
 800e740:	46bd      	mov	sp, r7
 800e742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e746:	4770      	bx	lr
 800e748:	40003000 	.word	0x40003000

0800e74c <IWDG_GetFlagStatus>:
  *            @arg IWDG_FLAG_PVU: Prescaler Value Update on going
  *            @arg IWDG_FLAG_RVU: Reload Value Update on going
  * @retval The new state of IWDG_FLAG (SET or RESET).
  */
FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
{
 800e74c:	b480      	push	{r7}
 800e74e:	b085      	sub	sp, #20
 800e750:	af00      	add	r7, sp, #0
 800e752:	4603      	mov	r3, r0
 800e754:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 800e756:	2300      	movs	r3, #0
 800e758:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_IWDG_FLAG(IWDG_FLAG));
  if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
 800e75a:	4b09      	ldr	r3, [pc, #36]	; (800e780 <IWDG_GetFlagStatus+0x34>)
 800e75c:	68da      	ldr	r2, [r3, #12]
 800e75e:	88fb      	ldrh	r3, [r7, #6]
 800e760:	4013      	ands	r3, r2
 800e762:	2b00      	cmp	r3, #0
 800e764:	d002      	beq.n	800e76c <IWDG_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 800e766:	2301      	movs	r3, #1
 800e768:	73fb      	strb	r3, [r7, #15]
 800e76a:	e001      	b.n	800e770 <IWDG_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 800e76c:	2300      	movs	r3, #0
 800e76e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 800e770:	7bfb      	ldrb	r3, [r7, #15]
}
 800e772:	4618      	mov	r0, r3
 800e774:	3714      	adds	r7, #20
 800e776:	46bd      	mov	sp, r7
 800e778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77c:	4770      	bx	lr
 800e77e:	bf00      	nop
 800e780:	40003000 	.word	0x40003000

0800e784 <LTDC_DeInit>:
  * @param  None
  * @retval None
  */

void LTDC_DeInit(void)
{
 800e784:	b580      	push	{r7, lr}
 800e786:	af00      	add	r7, sp, #0
  /* Enable LTDC reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_LTDC, ENABLE);
 800e788:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800e78c:	2101      	movs	r1, #1
 800e78e:	f001 fb79 	bl	800fe84 <RCC_APB2PeriphResetCmd>
  /* Release LTDC from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_LTDC, DISABLE);
 800e792:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800e796:	2100      	movs	r1, #0
 800e798:	f001 fb74 	bl	800fe84 <RCC_APB2PeriphResetCmd>
}
 800e79c:	bd80      	pop	{r7, pc}
 800e79e:	bf00      	nop

0800e7a0 <LTDC_Init>:
  *         the configuration information for the specified LTDC peripheral.
  * @retval None
  */

void LTDC_Init(LTDC_InitTypeDef* LTDC_InitStruct)
{
 800e7a0:	b480      	push	{r7}
 800e7a2:	b089      	sub	sp, #36	; 0x24
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
  uint32_t horizontalsync = 0;
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	61fb      	str	r3, [r7, #28]
  uint32_t accumulatedHBP = 0;
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	61bb      	str	r3, [r7, #24]
  uint32_t accumulatedactiveW = 0;
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	617b      	str	r3, [r7, #20]
  uint32_t totalwidth = 0;
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	613b      	str	r3, [r7, #16]
  uint32_t backgreen = 0;
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	60fb      	str	r3, [r7, #12]
  uint32_t backred = 0;
 800e7bc:	2300      	movs	r3, #0
 800e7be:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LTDC_BackBlueValue(LTDC_InitStruct->LTDC_BackgroundBlueValue));
  assert_param(IS_LTDC_BackGreenValue(LTDC_InitStruct->LTDC_BackgroundGreenValue));
  assert_param(IS_LTDC_BackRedValue(LTDC_InitStruct->LTDC_BackgroundRedValue));

  /* Sets Synchronization size */
  LTDC->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800e7c0:	4a3f      	ldr	r2, [pc, #252]	; (800e8c0 <LTDC_Init+0x120>)
 800e7c2:	4b3f      	ldr	r3, [pc, #252]	; (800e8c0 <LTDC_Init+0x120>)
 800e7c4:	6899      	ldr	r1, [r3, #8]
 800e7c6:	4b3f      	ldr	r3, [pc, #252]	; (800e8c4 <LTDC_Init+0x124>)
 800e7c8:	400b      	ands	r3, r1
 800e7ca:	6093      	str	r3, [r2, #8]
  horizontalsync = (LTDC_InitStruct->LTDC_HorizontalSync << 16);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	691b      	ldr	r3, [r3, #16]
 800e7d0:	041b      	lsls	r3, r3, #16
 800e7d2:	61fb      	str	r3, [r7, #28]
  LTDC->SSCR |= (horizontalsync | LTDC_InitStruct->LTDC_VerticalSync);
 800e7d4:	4b3a      	ldr	r3, [pc, #232]	; (800e8c0 <LTDC_Init+0x120>)
 800e7d6:	4a3a      	ldr	r2, [pc, #232]	; (800e8c0 <LTDC_Init+0x120>)
 800e7d8:	6891      	ldr	r1, [r2, #8]
 800e7da:	687a      	ldr	r2, [r7, #4]
 800e7dc:	6950      	ldr	r0, [r2, #20]
 800e7de:	69fa      	ldr	r2, [r7, #28]
 800e7e0:	4302      	orrs	r2, r0
 800e7e2:	430a      	orrs	r2, r1
 800e7e4:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  LTDC->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800e7e6:	4a36      	ldr	r2, [pc, #216]	; (800e8c0 <LTDC_Init+0x120>)
 800e7e8:	4b35      	ldr	r3, [pc, #212]	; (800e8c0 <LTDC_Init+0x120>)
 800e7ea:	68d9      	ldr	r1, [r3, #12]
 800e7ec:	4b35      	ldr	r3, [pc, #212]	; (800e8c4 <LTDC_Init+0x124>)
 800e7ee:	400b      	ands	r3, r1
 800e7f0:	60d3      	str	r3, [r2, #12]
  accumulatedHBP = (LTDC_InitStruct->LTDC_AccumulatedHBP << 16);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	699b      	ldr	r3, [r3, #24]
 800e7f6:	041b      	lsls	r3, r3, #16
 800e7f8:	61bb      	str	r3, [r7, #24]
  LTDC->BPCR |= (accumulatedHBP | LTDC_InitStruct->LTDC_AccumulatedVBP);
 800e7fa:	4b31      	ldr	r3, [pc, #196]	; (800e8c0 <LTDC_Init+0x120>)
 800e7fc:	4a30      	ldr	r2, [pc, #192]	; (800e8c0 <LTDC_Init+0x120>)
 800e7fe:	68d1      	ldr	r1, [r2, #12]
 800e800:	687a      	ldr	r2, [r7, #4]
 800e802:	69d0      	ldr	r0, [r2, #28]
 800e804:	69ba      	ldr	r2, [r7, #24]
 800e806:	4302      	orrs	r2, r0
 800e808:	430a      	orrs	r2, r1
 800e80a:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  LTDC->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800e80c:	4a2c      	ldr	r2, [pc, #176]	; (800e8c0 <LTDC_Init+0x120>)
 800e80e:	4b2c      	ldr	r3, [pc, #176]	; (800e8c0 <LTDC_Init+0x120>)
 800e810:	6919      	ldr	r1, [r3, #16]
 800e812:	4b2c      	ldr	r3, [pc, #176]	; (800e8c4 <LTDC_Init+0x124>)
 800e814:	400b      	ands	r3, r1
 800e816:	6113      	str	r3, [r2, #16]
  accumulatedactiveW = (LTDC_InitStruct->LTDC_AccumulatedActiveW << 16);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	6a1b      	ldr	r3, [r3, #32]
 800e81c:	041b      	lsls	r3, r3, #16
 800e81e:	617b      	str	r3, [r7, #20]
  LTDC->AWCR |= (accumulatedactiveW | LTDC_InitStruct->LTDC_AccumulatedActiveH);
 800e820:	4b27      	ldr	r3, [pc, #156]	; (800e8c0 <LTDC_Init+0x120>)
 800e822:	4a27      	ldr	r2, [pc, #156]	; (800e8c0 <LTDC_Init+0x120>)
 800e824:	6911      	ldr	r1, [r2, #16]
 800e826:	687a      	ldr	r2, [r7, #4]
 800e828:	6a50      	ldr	r0, [r2, #36]	; 0x24
 800e82a:	697a      	ldr	r2, [r7, #20]
 800e82c:	4302      	orrs	r2, r0
 800e82e:	430a      	orrs	r2, r1
 800e830:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  LTDC->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800e832:	4a23      	ldr	r2, [pc, #140]	; (800e8c0 <LTDC_Init+0x120>)
 800e834:	4b22      	ldr	r3, [pc, #136]	; (800e8c0 <LTDC_Init+0x120>)
 800e836:	6959      	ldr	r1, [r3, #20]
 800e838:	4b22      	ldr	r3, [pc, #136]	; (800e8c4 <LTDC_Init+0x124>)
 800e83a:	400b      	ands	r3, r1
 800e83c:	6153      	str	r3, [r2, #20]
  totalwidth = (LTDC_InitStruct->LTDC_TotalWidth << 16);
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e842:	041b      	lsls	r3, r3, #16
 800e844:	613b      	str	r3, [r7, #16]
  LTDC->TWCR |= (totalwidth | LTDC_InitStruct->LTDC_TotalHeigh);
 800e846:	4b1e      	ldr	r3, [pc, #120]	; (800e8c0 <LTDC_Init+0x120>)
 800e848:	4a1d      	ldr	r2, [pc, #116]	; (800e8c0 <LTDC_Init+0x120>)
 800e84a:	6951      	ldr	r1, [r2, #20]
 800e84c:	687a      	ldr	r2, [r7, #4]
 800e84e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800e850:	693a      	ldr	r2, [r7, #16]
 800e852:	4302      	orrs	r2, r0
 800e854:	430a      	orrs	r2, r1
 800e856:	615a      	str	r2, [r3, #20]

  LTDC->GCR &= (uint32_t)GCR_MASK;
 800e858:	4a19      	ldr	r2, [pc, #100]	; (800e8c0 <LTDC_Init+0x120>)
 800e85a:	4b19      	ldr	r3, [pc, #100]	; (800e8c0 <LTDC_Init+0x120>)
 800e85c:	6999      	ldr	r1, [r3, #24]
 800e85e:	4b1a      	ldr	r3, [pc, #104]	; (800e8c8 <LTDC_Init+0x128>)
 800e860:	400b      	ands	r3, r1
 800e862:	6193      	str	r3, [r2, #24]
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 800e864:	4b16      	ldr	r3, [pc, #88]	; (800e8c0 <LTDC_Init+0x120>)
 800e866:	4a16      	ldr	r2, [pc, #88]	; (800e8c0 <LTDC_Init+0x120>)
 800e868:	6991      	ldr	r1, [r2, #24]
 800e86a:	687a      	ldr	r2, [r7, #4]
 800e86c:	6810      	ldr	r0, [r2, #0]
 800e86e:	687a      	ldr	r2, [r7, #4]
 800e870:	6852      	ldr	r2, [r2, #4]
 800e872:	4310      	orrs	r0, r2
                           LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);
 800e874:	687a      	ldr	r2, [r7, #4]
 800e876:	6892      	ldr	r2, [r2, #8]
  LTDC->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
  totalwidth = (LTDC_InitStruct->LTDC_TotalWidth << 16);
  LTDC->TWCR |= (totalwidth | LTDC_InitStruct->LTDC_TotalHeigh);

  LTDC->GCR &= (uint32_t)GCR_MASK;
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 800e878:	4310      	orrs	r0, r2
                           LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);
 800e87a:	687a      	ldr	r2, [r7, #4]
 800e87c:	68d2      	ldr	r2, [r2, #12]
  LTDC->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
  totalwidth = (LTDC_InitStruct->LTDC_TotalWidth << 16);
  LTDC->TWCR |= (totalwidth | LTDC_InitStruct->LTDC_TotalHeigh);

  LTDC->GCR &= (uint32_t)GCR_MASK;
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 800e87e:	4302      	orrs	r2, r0
 800e880:	430a      	orrs	r2, r1
 800e882:	619a      	str	r2, [r3, #24]
                           LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);

  /* sets the background color value */
  backgreen = (LTDC_InitStruct->LTDC_BackgroundGreenValue << 8);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e888:	021b      	lsls	r3, r3, #8
 800e88a:	60fb      	str	r3, [r7, #12]
  backred = (LTDC_InitStruct->LTDC_BackgroundRedValue << 16);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e890:	041b      	lsls	r3, r3, #16
 800e892:	60bb      	str	r3, [r7, #8]

  LTDC->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800e894:	4b0a      	ldr	r3, [pc, #40]	; (800e8c0 <LTDC_Init+0x120>)
 800e896:	4a0a      	ldr	r2, [pc, #40]	; (800e8c0 <LTDC_Init+0x120>)
 800e898:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e89a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800e89e:	62da      	str	r2, [r3, #44]	; 0x2c
  LTDC->BCCR |= (backred | backgreen | LTDC_InitStruct->LTDC_BackgroundBlueValue);
 800e8a0:	4b07      	ldr	r3, [pc, #28]	; (800e8c0 <LTDC_Init+0x120>)
 800e8a2:	4a07      	ldr	r2, [pc, #28]	; (800e8c0 <LTDC_Init+0x120>)
 800e8a4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800e8a6:	68b8      	ldr	r0, [r7, #8]
 800e8a8:	68fa      	ldr	r2, [r7, #12]
 800e8aa:	4310      	orrs	r0, r2
 800e8ac:	687a      	ldr	r2, [r7, #4]
 800e8ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e8b0:	4302      	orrs	r2, r0
 800e8b2:	430a      	orrs	r2, r1
 800e8b4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800e8b6:	3724      	adds	r7, #36	; 0x24
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8be:	4770      	bx	lr
 800e8c0:	40016800 	.word	0x40016800
 800e8c4:	f000f800 	.word	0xf000f800
 800e8c8:	0ffe888f 	.word	0x0ffe888f

0800e8cc <LTDC_StructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_StructInit(LTDC_InitTypeDef* LTDC_InitStruct)
{
 800e8cc:	b480      	push	{r7}
 800e8ce:	b083      	sub	sp, #12
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
  /*--------------- Reset LTDC init structure parameters values ----------------*/
  LTDC_InitStruct->LTDC_HSPolarity = LTDC_HSPolarity_AL;      /*!< Initialize the LTDC_HSPolarity member */ 
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	601a      	str	r2, [r3, #0]
  LTDC_InitStruct->LTDC_VSPolarity = LTDC_VSPolarity_AL;      /*!< Initialize the LTDC_VSPolarity member */
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	2200      	movs	r2, #0
 800e8de:	605a      	str	r2, [r3, #4]
  LTDC_InitStruct->LTDC_DEPolarity = LTDC_DEPolarity_AL;      /*!< Initialize the LTDC_DEPolarity member */
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	609a      	str	r2, [r3, #8]
  LTDC_InitStruct->LTDC_PCPolarity = LTDC_PCPolarity_IPC;     /*!< Initialize the LTDC_PCPolarity member */
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	60da      	str	r2, [r3, #12]
  LTDC_InitStruct->LTDC_HorizontalSync = 0x00;                /*!< Initialize the LTDC_HorizontalSync member */
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	611a      	str	r2, [r3, #16]
  LTDC_InitStruct->LTDC_VerticalSync = 0x00;                  /*!< Initialize the LTDC_VerticalSync member */
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	615a      	str	r2, [r3, #20]
  LTDC_InitStruct->LTDC_AccumulatedHBP = 0x00;                /*!< Initialize the LTDC_AccumulatedHBP member */
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	619a      	str	r2, [r3, #24]
  LTDC_InitStruct->LTDC_AccumulatedVBP = 0x00;                /*!< Initialize the LTDC_AccumulatedVBP member */
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	2200      	movs	r2, #0
 800e902:	61da      	str	r2, [r3, #28]
  LTDC_InitStruct->LTDC_AccumulatedActiveW = 0x00;            /*!< Initialize the LTDC_AccumulatedActiveW member */
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	2200      	movs	r2, #0
 800e908:	621a      	str	r2, [r3, #32]
  LTDC_InitStruct->LTDC_AccumulatedActiveH = 0x00;            /*!< Initialize the LTDC_AccumulatedActiveH member */
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	2200      	movs	r2, #0
 800e90e:	625a      	str	r2, [r3, #36]	; 0x24
  LTDC_InitStruct->LTDC_TotalWidth = 0x00;                    /*!< Initialize the LTDC_TotalWidth member */
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	2200      	movs	r2, #0
 800e914:	629a      	str	r2, [r3, #40]	; 0x28
  LTDC_InitStruct->LTDC_TotalHeigh = 0x00;                    /*!< Initialize the LTDC_TotalHeigh member */
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	2200      	movs	r2, #0
 800e91a:	62da      	str	r2, [r3, #44]	; 0x2c
  LTDC_InitStruct->LTDC_BackgroundRedValue = 0x00;            /*!< Initialize the LTDC_BackgroundRedValue member */
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2200      	movs	r2, #0
 800e920:	631a      	str	r2, [r3, #48]	; 0x30
  LTDC_InitStruct->LTDC_BackgroundGreenValue = 0x00;          /*!< Initialize the LTDC_BackgroundGreenValue member */
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	2200      	movs	r2, #0
 800e926:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC_InitStruct->LTDC_BackgroundBlueValue = 0x00;           /*!< Initialize the LTDC_BackgroundBlueValue member */
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	2200      	movs	r2, #0
 800e92c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800e92e:	370c      	adds	r7, #12
 800e930:	46bd      	mov	sp, r7
 800e932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e936:	4770      	bx	lr

0800e938 <LTDC_Cmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_Cmd(FunctionalState NewState)
{
 800e938:	b480      	push	{r7}
 800e93a:	b083      	sub	sp, #12
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	4603      	mov	r3, r0
 800e940:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800e942:	79fb      	ldrb	r3, [r7, #7]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d006      	beq.n	800e956 <LTDC_Cmd+0x1e>
  {
    /* Enable LTDC by setting LTDCEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_LTDCEN;
 800e948:	4b08      	ldr	r3, [pc, #32]	; (800e96c <LTDC_Cmd+0x34>)
 800e94a:	4a08      	ldr	r2, [pc, #32]	; (800e96c <LTDC_Cmd+0x34>)
 800e94c:	6992      	ldr	r2, [r2, #24]
 800e94e:	f042 0201 	orr.w	r2, r2, #1
 800e952:	619a      	str	r2, [r3, #24]
 800e954:	e005      	b.n	800e962 <LTDC_Cmd+0x2a>
  }
  else
  {
    /* Disable LTDC by clearing LTDCEN bit */
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_LTDCEN;
 800e956:	4b05      	ldr	r3, [pc, #20]	; (800e96c <LTDC_Cmd+0x34>)
 800e958:	4a04      	ldr	r2, [pc, #16]	; (800e96c <LTDC_Cmd+0x34>)
 800e95a:	6992      	ldr	r2, [r2, #24]
 800e95c:	f022 0201 	bic.w	r2, r2, #1
 800e960:	619a      	str	r2, [r3, #24]
  }
}
 800e962:	370c      	adds	r7, #12
 800e964:	46bd      	mov	sp, r7
 800e966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96a:	4770      	bx	lr
 800e96c:	40016800 	.word	0x40016800

0800e970 <LTDC_DitherCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_DitherCmd(FunctionalState NewState)
{
 800e970:	b480      	push	{r7}
 800e972:	b083      	sub	sp, #12
 800e974:	af00      	add	r7, sp, #0
 800e976:	4603      	mov	r3, r0
 800e978:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800e97a:	79fb      	ldrb	r3, [r7, #7]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d006      	beq.n	800e98e <LTDC_DitherCmd+0x1e>
  {
    /* Enable Dither by setting DTEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_DTEN;
 800e980:	4b08      	ldr	r3, [pc, #32]	; (800e9a4 <LTDC_DitherCmd+0x34>)
 800e982:	4a08      	ldr	r2, [pc, #32]	; (800e9a4 <LTDC_DitherCmd+0x34>)
 800e984:	6992      	ldr	r2, [r2, #24]
 800e986:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800e98a:	619a      	str	r2, [r3, #24]
 800e98c:	e005      	b.n	800e99a <LTDC_DitherCmd+0x2a>
  }
  else
  {
    /* Disable Dither by clearing DTEN bit */
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_DTEN;
 800e98e:	4b05      	ldr	r3, [pc, #20]	; (800e9a4 <LTDC_DitherCmd+0x34>)
 800e990:	4a04      	ldr	r2, [pc, #16]	; (800e9a4 <LTDC_DitherCmd+0x34>)
 800e992:	6992      	ldr	r2, [r2, #24]
 800e994:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800e998:	619a      	str	r2, [r3, #24]
  }
}
 800e99a:	370c      	adds	r7, #12
 800e99c:	46bd      	mov	sp, r7
 800e99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a2:	4770      	bx	lr
 800e9a4:	40016800 	.word	0x40016800

0800e9a8 <LTDC_GetRGBWidth>:
  *         the Dither RGB width.
  * @retval None
  */

LTDC_RGBTypeDef LTDC_GetRGBWidth(void)
{
 800e9a8:	b480      	push	{r7}
 800e9aa:	b087      	sub	sp, #28
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
  LTDC_RGBTypeDef LTDC_RGB_InitStruct;

  LTDC->GCR &= (uint32_t)GCR_MASK;
 800e9b0:	4a11      	ldr	r2, [pc, #68]	; (800e9f8 <LTDC_GetRGBWidth+0x50>)
 800e9b2:	4b11      	ldr	r3, [pc, #68]	; (800e9f8 <LTDC_GetRGBWidth+0x50>)
 800e9b4:	6999      	ldr	r1, [r3, #24]
 800e9b6:	4b11      	ldr	r3, [pc, #68]	; (800e9fc <LTDC_GetRGBWidth+0x54>)
 800e9b8:	400b      	ands	r3, r1
 800e9ba:	6193      	str	r3, [r2, #24]

  LTDC_RGB_InitStruct.LTDC_BlueWidth = (uint32_t)((LTDC->GCR >> 4) & 0x7);
 800e9bc:	4b0e      	ldr	r3, [pc, #56]	; (800e9f8 <LTDC_GetRGBWidth+0x50>)
 800e9be:	699b      	ldr	r3, [r3, #24]
 800e9c0:	091b      	lsrs	r3, r3, #4
 800e9c2:	f003 0307 	and.w	r3, r3, #7
 800e9c6:	60fb      	str	r3, [r7, #12]
  LTDC_RGB_InitStruct.LTDC_GreenWidth = (uint32_t)((LTDC->GCR >> 8) & 0x7);
 800e9c8:	4b0b      	ldr	r3, [pc, #44]	; (800e9f8 <LTDC_GetRGBWidth+0x50>)
 800e9ca:	699b      	ldr	r3, [r3, #24]
 800e9cc:	0a1b      	lsrs	r3, r3, #8
 800e9ce:	f003 0307 	and.w	r3, r3, #7
 800e9d2:	613b      	str	r3, [r7, #16]
  LTDC_RGB_InitStruct.LTDC_RedWidth = (uint32_t)((LTDC->GCR >> 12) & 0x7);
 800e9d4:	4b08      	ldr	r3, [pc, #32]	; (800e9f8 <LTDC_GetRGBWidth+0x50>)
 800e9d6:	699b      	ldr	r3, [r3, #24]
 800e9d8:	0b1b      	lsrs	r3, r3, #12
 800e9da:	f003 0307 	and.w	r3, r3, #7
 800e9de:	617b      	str	r3, [r7, #20]

  return LTDC_RGB_InitStruct;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f107 020c 	add.w	r2, r7, #12
 800e9e6:	ca07      	ldmia	r2, {r0, r1, r2}
 800e9e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800e9ec:	6878      	ldr	r0, [r7, #4]
 800e9ee:	371c      	adds	r7, #28
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f6:	4770      	bx	lr
 800e9f8:	40016800 	.word	0x40016800
 800e9fc:	0ffe888f 	.word	0x0ffe888f

0800ea00 <LTDC_RGBStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_RGBStructInit(LTDC_RGBTypeDef* LTDC_RGB_InitStruct)
{
 800ea00:	b480      	push	{r7}
 800ea02:	b083      	sub	sp, #12
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
  LTDC_RGB_InitStruct->LTDC_BlueWidth = 0x02;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2202      	movs	r2, #2
 800ea0c:	601a      	str	r2, [r3, #0]
  LTDC_RGB_InitStruct->LTDC_GreenWidth = 0x02;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	2202      	movs	r2, #2
 800ea12:	605a      	str	r2, [r3, #4]
  LTDC_RGB_InitStruct->LTDC_RedWidth = 0x02;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	2202      	movs	r2, #2
 800ea18:	609a      	str	r2, [r3, #8]
}
 800ea1a:	370c      	adds	r7, #12
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea22:	4770      	bx	lr

0800ea24 <LTDC_LIPConfig>:
  * @param  LTDC_LIPositionConfig: Line Interrupt Position.
  * @retval None
  */

void LTDC_LIPConfig(uint32_t LTDC_LIPositionConfig)
{
 800ea24:	b480      	push	{r7}
 800ea26:	b083      	sub	sp, #12
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(LTDC_LIPositionConfig));

  /* Sets the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)LTDC_LIPositionConfig;
 800ea2c:	4b03      	ldr	r3, [pc, #12]	; (800ea3c <LTDC_LIPConfig+0x18>)
 800ea2e:	687a      	ldr	r2, [r7, #4]
 800ea30:	641a      	str	r2, [r3, #64]	; 0x40
}
 800ea32:	370c      	adds	r7, #12
 800ea34:	46bd      	mov	sp, r7
 800ea36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3a:	4770      	bx	lr
 800ea3c:	40016800 	.word	0x40016800

0800ea40 <LTDC_ReloadConfig>:
  *     @arg LTDC_VBReload: Immediate reload.  
  * @retval None
  */

void LTDC_ReloadConfig(uint32_t LTDC_Reload)
{
 800ea40:	b480      	push	{r7}
 800ea42:	b083      	sub	sp, #12
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(LTDC_Reload));

  /* Sets the Reload type */
  LTDC->SRCR = (uint32_t)LTDC_Reload;
 800ea48:	4b03      	ldr	r3, [pc, #12]	; (800ea58 <LTDC_ReloadConfig+0x18>)
 800ea4a:	687a      	ldr	r2, [r7, #4]
 800ea4c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ea4e:	370c      	adds	r7, #12
 800ea50:	46bd      	mov	sp, r7
 800ea52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea56:	4770      	bx	lr
 800ea58:	40016800 	.word	0x40016800

0800ea5c <LTDC_LayerInit>:
  *         the configuration information for the specified LTDC peripheral.
  * @retval None
  */

void LTDC_LayerInit(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_Layer_InitTypeDef* LTDC_Layer_InitStruct)
{
 800ea5c:	b480      	push	{r7}
 800ea5e:	b089      	sub	sp, #36	; 0x24
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
 800ea64:	6039      	str	r1, [r7, #0]

  uint32_t whsppos = 0;
 800ea66:	2300      	movs	r3, #0
 800ea68:	61fb      	str	r3, [r7, #28]
  uint32_t wvsppos = 0;
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	61bb      	str	r3, [r7, #24]
  uint32_t dcgreen = 0;
 800ea6e:	2300      	movs	r3, #0
 800ea70:	617b      	str	r3, [r7, #20]
  uint32_t dcred = 0;
 800ea72:	2300      	movs	r3, #0
 800ea74:	613b      	str	r3, [r7, #16]
  uint32_t dcalpha = 0;
 800ea76:	2300      	movs	r3, #0
 800ea78:	60fb      	str	r3, [r7, #12]
  uint32_t cfbp = 0;
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LTDC_CFBP(LTDC_Layer_InitStruct->LTDC_CFBPitch));
  assert_param(IS_LTDC_CFBLL(LTDC_Layer_InitStruct->LTDC_CFBLineLength));
  assert_param(IS_LTDC_CFBLNBR(LTDC_Layer_InitStruct->LTDC_CFBLineNumber));

  /* Configures the horizontal start and stop position */
  whsppos = LTDC_Layer_InitStruct->LTDC_HorizontalStop << 16;
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	685b      	ldr	r3, [r3, #4]
 800ea82:	041b      	lsls	r3, r3, #16
 800ea84:	61fb      	str	r3, [r7, #28]
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	685b      	ldr	r3, [r3, #4]
 800ea8a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WHPCR = (LTDC_Layer_InitStruct->LTDC_HorizontalStart | whsppos);
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	681a      	ldr	r2, [r3, #0]
 800ea96:	69fb      	ldr	r3, [r7, #28]
 800ea98:	431a      	orrs	r2, r3
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	605a      	str	r2, [r3, #4]

  /* Configures the vertical start and stop position */
  wvsppos = LTDC_Layer_InitStruct->LTDC_VerticalStop << 16;
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	68db      	ldr	r3, [r3, #12]
 800eaa2:	041b      	lsls	r3, r3, #16
 800eaa4:	61bb      	str	r3, [r7, #24]
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	689b      	ldr	r3, [r3, #8]
 800eaaa:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	609a      	str	r2, [r3, #8]
  LTDC_Layerx->WVPCR  = (LTDC_Layer_InitStruct->LTDC_VerticalStart | wvsppos);
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	689a      	ldr	r2, [r3, #8]
 800eab6:	69bb      	ldr	r3, [r7, #24]
 800eab8:	431a      	orrs	r2, r3
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	609a      	str	r2, [r3, #8]

  /* Specifies the pixel format */
  LTDC_Layerx->PFCR &= ~(LTDC_LxPFCR_PF);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	691b      	ldr	r3, [r3, #16]
 800eac2:	f023 0207 	bic.w	r2, r3, #7
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	611a      	str	r2, [r3, #16]
  LTDC_Layerx->PFCR = (LTDC_Layer_InitStruct->LTDC_PixelFormat);
 800eaca:	683b      	ldr	r3, [r7, #0]
 800eacc:	691a      	ldr	r2, [r3, #16]
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	611a      	str	r2, [r3, #16]

  /* Configures the default color values */
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
 800ead2:	683b      	ldr	r3, [r7, #0]
 800ead4:	69db      	ldr	r3, [r3, #28]
 800ead6:	021b      	lsls	r3, r3, #8
 800ead8:	617b      	str	r3, [r7, #20]
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	6a1b      	ldr	r3, [r3, #32]
 800eade:	041b      	lsls	r3, r3, #16
 800eae0:	613b      	str	r3, [r7, #16]
  dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eae6:	061b      	lsls	r3, r3, #24
 800eae8:	60fb      	str	r3, [r7, #12]
  LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	699b      	ldr	r3, [r3, #24]
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	619a      	str	r2, [r3, #24]
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	699a      	ldr	r2, [r3, #24]
 800eaf8:	697b      	ldr	r3, [r7, #20]
 800eafa:	431a      	orrs	r2, r3
 800eafc:	693b      	ldr	r3, [r7, #16]
 800eafe:	431a      	orrs	r2, r3
                        dcred | dcalpha);
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	431a      	orrs	r2, r3
  /* Configures the default color values */
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
  dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
  LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	619a      	str	r2, [r3, #24]
                        dcred | dcalpha);

  /* Specifies the constant alpha value */      
  LTDC_Layerx->CACR &= ~(LTDC_LxCACR_CONSTA);
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	695b      	ldr	r3, [r3, #20]
 800eb0c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	615a      	str	r2, [r3, #20]
  LTDC_Layerx->CACR = (LTDC_Layer_InitStruct->LTDC_ConstantAlpha);
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	695a      	ldr	r2, [r3, #20]
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	615a      	str	r2, [r3, #20]

  /* Specifies the blending factors */
  LTDC_Layerx->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	69db      	ldr	r3, [r3, #28]
 800eb20:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800eb24:	f023 0307 	bic.w	r3, r3, #7
 800eb28:	687a      	ldr	r2, [r7, #4]
 800eb2a:	61d3      	str	r3, [r2, #28]
  LTDC_Layerx->BFCR = (LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 | LTDC_Layer_InitStruct->LTDC_BlendingFactor_2);
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb34:	431a      	orrs	r2, r3
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	61da      	str	r2, [r3, #28]

  /* Configures the color frame buffer start address */
  LTDC_Layerx->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2200      	movs	r2, #0
 800eb42:	629a      	str	r2, [r3, #40]	; 0x28
  LTDC_Layerx->CFBAR = (LTDC_Layer_InitStruct->LTDC_CFBStartAdress);
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Configures the color frame buffer pitch in byte */
  cfbp = (LTDC_Layer_InitStruct->LTDC_CFBPitch << 16);
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb50:	041b      	lsls	r3, r3, #16
 800eb52:	60bb      	str	r3, [r7, #8]
  LTDC_Layerx->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb58:	f003 22e0 	and.w	r2, r3, #3758153728	; 0xe000e000
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	62da      	str	r2, [r3, #44]	; 0x2c
  LTDC_Layerx->CFBLR  = (LTDC_Layer_InitStruct->LTDC_CFBLineLength | cfbp);
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb64:	68bb      	ldr	r3, [r7, #8]
 800eb66:	431a      	orrs	r2, r3
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_Layerx->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb70:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800eb74:	f023 0307 	bic.w	r3, r3, #7
 800eb78:	687a      	ldr	r2, [r7, #4]
 800eb7a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_Layerx->CFBLNR  = (LTDC_Layer_InitStruct->LTDC_CFBLineNumber);
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	631a      	str	r2, [r3, #48]	; 0x30

}
 800eb84:	3724      	adds	r7, #36	; 0x24
 800eb86:	46bd      	mov	sp, r7
 800eb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8c:	4770      	bx	lr
 800eb8e:	bf00      	nop

0800eb90 <LTDC_LayerStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_LayerStructInit(LTDC_Layer_InitTypeDef * LTDC_Layer_InitStruct)
{
 800eb90:	b480      	push	{r7}
 800eb92:	b083      	sub	sp, #12
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
  /*--------------- Reset Layer structure parameters values -------------------*/

  /*!< Initialize the horizontal limit member */
  LTDC_Layer_InitStruct->LTDC_HorizontalStart = 0x00;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	601a      	str	r2, [r3, #0]
  LTDC_Layer_InitStruct->LTDC_HorizontalStop = 0x00;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	2200      	movs	r2, #0
 800eba2:	605a      	str	r2, [r3, #4]

  /*!< Initialize the vertical limit member */
  LTDC_Layer_InitStruct->LTDC_VerticalStart = 0x00;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	2200      	movs	r2, #0
 800eba8:	609a      	str	r2, [r3, #8]
  LTDC_Layer_InitStruct->LTDC_VerticalStop = 0x00;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2200      	movs	r2, #0
 800ebae:	60da      	str	r2, [r3, #12]

  /*!< Initialize the pixel format member */
  LTDC_Layer_InitStruct->LTDC_PixelFormat = LTDC_Pixelformat_ARGB8888;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	611a      	str	r2, [r3, #16]

  /*!< Initialize the constant alpha value */
  LTDC_Layer_InitStruct->LTDC_ConstantAlpha = 0xFF;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	22ff      	movs	r2, #255	; 0xff
 800ebba:	615a      	str	r2, [r3, #20]

  /*!< Initialize the default color values */
  LTDC_Layer_InitStruct->LTDC_DefaultColorBlue = 0x00;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	619a      	str	r2, [r3, #24]
  LTDC_Layer_InitStruct->LTDC_DefaultColorGreen = 0x00;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	61da      	str	r2, [r3, #28]
  LTDC_Layer_InitStruct->LTDC_DefaultColorRed = 0x00;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2200      	movs	r2, #0
 800ebcc:	621a      	str	r2, [r3, #32]
  LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha = 0x00;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	625a      	str	r2, [r3, #36]	; 0x24

  /*!< Initialize the blending factors */
  LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_PAxCA;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800ebda:	629a      	str	r2, [r3, #40]	; 0x28
  LTDC_Layer_InitStruct->LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_PAxCA;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	2207      	movs	r2, #7
 800ebe0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*!< Initialize the frame buffer start address */
  LTDC_Layer_InitStruct->LTDC_CFBStartAdress = 0x00;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	631a      	str	r2, [r3, #48]	; 0x30

  /*!< Initialize the frame buffer pitch and line length */
  LTDC_Layer_InitStruct->LTDC_CFBLineLength = 0x00;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2200      	movs	r2, #0
 800ebec:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC_Layer_InitStruct->LTDC_CFBPitch = 0x00;
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	639a      	str	r2, [r3, #56]	; 0x38

  /*!< Initialize the frame buffer line number */
  LTDC_Layer_InitStruct->LTDC_CFBLineNumber = 0x00;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800ebfa:	370c      	adds	r7, #12
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec02:	4770      	bx	lr

0800ec04 <LTDC_LayerCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_LayerCmd(LTDC_Layer_TypeDef* LTDC_Layerx, FunctionalState NewState)
{
 800ec04:	b480      	push	{r7}
 800ec06:	b083      	sub	sp, #12
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
 800ec0c:	460b      	mov	r3, r1
 800ec0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800ec10:	78fb      	ldrb	r3, [r7, #3]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d006      	beq.n	800ec24 <LTDC_LayerCmd+0x20>
  {
    /* Enable LTDC_Layer by setting LEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_LEN;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	f043 0201 	orr.w	r2, r3, #1
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	601a      	str	r2, [r3, #0]
 800ec22:	e005      	b.n	800ec30 <LTDC_LayerCmd+0x2c>
  }
  else
  {
    /* Disable LTDC_Layer by clearing LEN bit */
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_LEN;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	f023 0201 	bic.w	r2, r3, #1
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	601a      	str	r2, [r3, #0]
  }
}
 800ec30:	370c      	adds	r7, #12
 800ec32:	46bd      	mov	sp, r7
 800ec34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec38:	4770      	bx	lr
 800ec3a:	bf00      	nop

0800ec3c <LTDC_GetPosStatus>:
  *         the current position.
  * @retval None
  */

LTDC_PosTypeDef LTDC_GetPosStatus(void)
{
 800ec3c:	b480      	push	{r7}
 800ec3e:	b085      	sub	sp, #20
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
  LTDC_PosTypeDef LTDC_Pos_InitStruct;

  LTDC->CPSR &= ~(LTDC_CPSR_CYPOS | LTDC_CPSR_CXPOS);
 800ec44:	4b0c      	ldr	r3, [pc, #48]	; (800ec78 <LTDC_GetPosStatus+0x3c>)
 800ec46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec48:	4b0b      	ldr	r3, [pc, #44]	; (800ec78 <LTDC_GetPosStatus+0x3c>)
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	645a      	str	r2, [r3, #68]	; 0x44

  LTDC_Pos_InitStruct.LTDC_POSX = (uint32_t)(LTDC->CPSR >> 16);
 800ec4e:	4b0a      	ldr	r3, [pc, #40]	; (800ec78 <LTDC_GetPosStatus+0x3c>)
 800ec50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec52:	0c1b      	lsrs	r3, r3, #16
 800ec54:	60bb      	str	r3, [r7, #8]
  LTDC_Pos_InitStruct.LTDC_POSY = (uint32_t)(LTDC->CPSR & 0xFFFF);
 800ec56:	4b08      	ldr	r3, [pc, #32]	; (800ec78 <LTDC_GetPosStatus+0x3c>)
 800ec58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec5a:	b29b      	uxth	r3, r3
 800ec5c:	60fb      	str	r3, [r7, #12]

  return LTDC_Pos_InitStruct;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	f107 0208 	add.w	r2, r7, #8
 800ec64:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ec68:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	3714      	adds	r7, #20
 800ec70:	46bd      	mov	sp, r7
 800ec72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec76:	4770      	bx	lr
 800ec78:	40016800 	.word	0x40016800

0800ec7c <LTDC_PosStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_PosStructInit(LTDC_PosTypeDef* LTDC_Pos_InitStruct)
{
 800ec7c:	b480      	push	{r7}
 800ec7e:	b083      	sub	sp, #12
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
  LTDC_Pos_InitStruct->LTDC_POSX = 0x00;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2200      	movs	r2, #0
 800ec88:	601a      	str	r2, [r3, #0]
  LTDC_Pos_InitStruct->LTDC_POSY = 0x00;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	605a      	str	r2, [r3, #4]
}
 800ec90:	370c      	adds	r7, #12
 800ec92:	46bd      	mov	sp, r7
 800ec94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec98:	4770      	bx	lr
 800ec9a:	bf00      	nop

0800ec9c <LTDC_GetCDStatus>:
  *     @arg LTDC_CD_HSYNC:  Horizontal Synchronization current status.
  * @retval The new state of LTDC_CD (SET or RESET).
  */

FlagStatus LTDC_GetCDStatus(uint32_t LTDC_CD)
{
 800ec9c:	b480      	push	{r7}
 800ec9e:	b085      	sub	sp, #20
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus;

  /* Check the parameters */
  assert_param(IS_LTDC_GET_CD(LTDC_CD));

  if ((LTDC->CDSR & LTDC_CD) != (uint32_t)RESET)
 800eca4:	4b08      	ldr	r3, [pc, #32]	; (800ecc8 <LTDC_GetCDStatus+0x2c>)
 800eca6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	4013      	ands	r3, r2
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d002      	beq.n	800ecb6 <LTDC_GetCDStatus+0x1a>
  {
    bitstatus = SET;
 800ecb0:	2301      	movs	r3, #1
 800ecb2:	73fb      	strb	r3, [r7, #15]
 800ecb4:	e001      	b.n	800ecba <LTDC_GetCDStatus+0x1e>
  }
  else
  {
    bitstatus = RESET;
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ecba:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	3714      	adds	r7, #20
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc6:	4770      	bx	lr
 800ecc8:	40016800 	.word	0x40016800

0800eccc <LTDC_ColorKeyingConfig>:
  *         one of the following values: LTDC_Layer1, LTDC_Layer2   
  * @retval None
  */

void LTDC_ColorKeyingConfig(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_ColorKeying_InitTypeDef* LTDC_colorkeying_InitStruct, FunctionalState NewState)
{ 
 800eccc:	b480      	push	{r7}
 800ecce:	b087      	sub	sp, #28
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	60f8      	str	r0, [r7, #12]
 800ecd4:	60b9      	str	r1, [r7, #8]
 800ecd6:	4613      	mov	r3, r2
 800ecd8:	71fb      	strb	r3, [r7, #7]
  uint32_t ckgreen = 0;
 800ecda:	2300      	movs	r3, #0
 800ecdc:	617b      	str	r3, [r7, #20]
  uint32_t ckred = 0;
 800ecde:	2300      	movs	r3, #0
 800ece0:	613b      	str	r3, [r7, #16]
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue));
  assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyGreen));
  assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed));
  
  if (NewState != DISABLE)
 800ece2:	79fb      	ldrb	r3, [r7, #7]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d01f      	beq.n	800ed28 <LTDC_ColorKeyingConfig+0x5c>
  {
    /* Enable LTDC color keying by setting COLKEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	f043 0202 	orr.w	r2, r3, #2
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	601a      	str	r2, [r3, #0]
    
    /* Sets the color keying values */
    ckgreen = (LTDC_colorkeying_InitStruct->LTDC_ColorKeyGreen << 8);
 800ecf4:	68bb      	ldr	r3, [r7, #8]
 800ecf6:	685b      	ldr	r3, [r3, #4]
 800ecf8:	021b      	lsls	r3, r3, #8
 800ecfa:	617b      	str	r3, [r7, #20]
    ckred = (LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed << 16);
 800ecfc:	68bb      	ldr	r3, [r7, #8]
 800ecfe:	689b      	ldr	r3, [r3, #8]
 800ed00:	041b      	lsls	r3, r3, #16
 800ed02:	613b      	str	r3, [r7, #16]
    LTDC_Layerx->CKCR  &= ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	68db      	ldr	r3, [r3, #12]
 800ed08:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	60da      	str	r2, [r3, #12]
    LTDC_Layerx->CKCR |= (LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue | ckgreen | ckred);
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	68da      	ldr	r2, [r3, #12]
 800ed14:	68bb      	ldr	r3, [r7, #8]
 800ed16:	6819      	ldr	r1, [r3, #0]
 800ed18:	697b      	ldr	r3, [r7, #20]
 800ed1a:	4319      	orrs	r1, r3
 800ed1c:	693b      	ldr	r3, [r7, #16]
 800ed1e:	430b      	orrs	r3, r1
 800ed20:	431a      	orrs	r2, r3
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	60da      	str	r2, [r3, #12]
 800ed26:	e005      	b.n	800ed34 <LTDC_ColorKeyingConfig+0x68>
  }
  else
  {
    /* Disable LTDC color keying by clearing COLKEN bit */
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	f023 0202 	bic.w	r2, r3, #2
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	601a      	str	r2, [r3, #0]
  }
  
  /* Reload shadow register */
  LTDC->SRCR = LTDC_IMReload;
 800ed34:	4b03      	ldr	r3, [pc, #12]	; (800ed44 <LTDC_ColorKeyingConfig+0x78>)
 800ed36:	2201      	movs	r2, #1
 800ed38:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ed3a:	371c      	adds	r7, #28
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed42:	4770      	bx	lr
 800ed44:	40016800 	.word	0x40016800

0800ed48 <LTDC_ColorKeyingStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_ColorKeyingStructInit(LTDC_ColorKeying_InitTypeDef* LTDC_colorkeying_InitStruct)
{
 800ed48:	b480      	push	{r7}
 800ed4a:	b083      	sub	sp, #12
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
  /*!< Initialize the color keying values */
  LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue = 0x00;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	2200      	movs	r2, #0
 800ed54:	601a      	str	r2, [r3, #0]
  LTDC_colorkeying_InitStruct->LTDC_ColorKeyGreen = 0x00;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	2200      	movs	r2, #0
 800ed5a:	605a      	str	r2, [r3, #4]
  LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed = 0x00;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	2200      	movs	r2, #0
 800ed60:	609a      	str	r2, [r3, #8]
}
 800ed62:	370c      	adds	r7, #12
 800ed64:	46bd      	mov	sp, r7
 800ed66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6a:	4770      	bx	lr

0800ed6c <LTDC_CLUTCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_CLUTCmd(LTDC_Layer_TypeDef* LTDC_Layerx, FunctionalState NewState)
{
 800ed6c:	b480      	push	{r7}
 800ed6e:	b083      	sub	sp, #12
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
 800ed74:	460b      	mov	r3, r1
 800ed76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800ed78:	78fb      	ldrb	r3, [r7, #3]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d006      	beq.n	800ed8c <LTDC_CLUTCmd+0x20>
  {
    /* Enable CLUT by setting CLUTEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	f043 0210 	orr.w	r2, r3, #16
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	601a      	str	r2, [r3, #0]
 800ed8a:	e005      	b.n	800ed98 <LTDC_CLUTCmd+0x2c>
  }
  else
  {
    /* Disable CLUT by clearing CLUTEN bit */
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_CLUTEN;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	f023 0210 	bic.w	r2, r3, #16
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	601a      	str	r2, [r3, #0]
  }
  
  /* Reload shadow register */
  LTDC->SRCR = LTDC_IMReload;
 800ed98:	4b03      	ldr	r3, [pc, #12]	; (800eda8 <LTDC_CLUTCmd+0x3c>)
 800ed9a:	2201      	movs	r2, #1
 800ed9c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ed9e:	370c      	adds	r7, #12
 800eda0:	46bd      	mov	sp, r7
 800eda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda6:	4770      	bx	lr
 800eda8:	40016800 	.word	0x40016800

0800edac <LTDC_CLUTInit>:
  *         one of the following values: LTDC_Layer1, LTDC_Layer2   
  * @retval None
  */

void LTDC_CLUTInit(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_CLUT_InitTypeDef* LTDC_CLUT_InitStruct)
{  
 800edac:	b480      	push	{r7}
 800edae:	b087      	sub	sp, #28
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
 800edb4:	6039      	str	r1, [r7, #0]
  uint32_t green = 0;
 800edb6:	2300      	movs	r3, #0
 800edb8:	617b      	str	r3, [r7, #20]
  uint32_t red = 0;
 800edba:	2300      	movs	r3, #0
 800edbc:	613b      	str	r3, [r7, #16]
  uint32_t clutadd = 0;
 800edbe:	2300      	movs	r3, #0
 800edc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LTDC_CLUTWR(LTDC_CLUT_InitStruct->LTDC_RedValue));
  assert_param(IS_LTDC_CLUTWR(LTDC_CLUT_InitStruct->LTDC_GreenValue));
  assert_param(IS_LTDC_CLUTWR(LTDC_CLUT_InitStruct->LTDC_BlueValue));
    
  /* Specifies the CLUT address and RGB value */
  green = (LTDC_CLUT_InitStruct->LTDC_GreenValue << 8);
 800edc2:	683b      	ldr	r3, [r7, #0]
 800edc4:	689b      	ldr	r3, [r3, #8]
 800edc6:	021b      	lsls	r3, r3, #8
 800edc8:	617b      	str	r3, [r7, #20]
  red = (LTDC_CLUT_InitStruct->LTDC_RedValue << 16);
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	68db      	ldr	r3, [r3, #12]
 800edce:	041b      	lsls	r3, r3, #16
 800edd0:	613b      	str	r3, [r7, #16]
  clutadd = (LTDC_CLUT_InitStruct->LTDC_CLUTAdress << 24);
 800edd2:	683b      	ldr	r3, [r7, #0]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	061b      	lsls	r3, r3, #24
 800edd8:	60fb      	str	r3, [r7, #12]
  LTDC_Layerx->CLUTWR  = (clutadd | LTDC_CLUT_InitStruct->LTDC_BlueValue | \
 800edda:	683b      	ldr	r3, [r7, #0]
 800eddc:	685a      	ldr	r2, [r3, #4]
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	431a      	orrs	r2, r3
 800ede2:	697b      	ldr	r3, [r7, #20]
 800ede4:	431a      	orrs	r2, r3
                              green | red);
 800ede6:	693b      	ldr	r3, [r7, #16]
 800ede8:	431a      	orrs	r2, r3
    
  /* Specifies the CLUT address and RGB value */
  green = (LTDC_CLUT_InitStruct->LTDC_GreenValue << 8);
  red = (LTDC_CLUT_InitStruct->LTDC_RedValue << 16);
  clutadd = (LTDC_CLUT_InitStruct->LTDC_CLUTAdress << 24);
  LTDC_Layerx->CLUTWR  = (clutadd | LTDC_CLUT_InitStruct->LTDC_BlueValue | \
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	641a      	str	r2, [r3, #64]	; 0x40
                              green | red);
}
 800edee:	371c      	adds	r7, #28
 800edf0:	46bd      	mov	sp, r7
 800edf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf6:	4770      	bx	lr

0800edf8 <LTDC_CLUTStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_CLUTStructInit(LTDC_CLUT_InitTypeDef* LTDC_CLUT_InitStruct)
{
 800edf8:	b480      	push	{r7}
 800edfa:	b083      	sub	sp, #12
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
  /*!< Initialize the CLUT adress and RGB values */
  LTDC_CLUT_InitStruct->LTDC_CLUTAdress = 0x00;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	2200      	movs	r2, #0
 800ee04:	601a      	str	r2, [r3, #0]
  LTDC_CLUT_InitStruct->LTDC_BlueValue = 0x00;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	2200      	movs	r2, #0
 800ee0a:	605a      	str	r2, [r3, #4]
  LTDC_CLUT_InitStruct->LTDC_GreenValue = 0x00;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	2200      	movs	r2, #0
 800ee10:	609a      	str	r2, [r3, #8]
  LTDC_CLUT_InitStruct->LTDC_RedValue = 0x00;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	2200      	movs	r2, #0
 800ee16:	60da      	str	r2, [r3, #12]
}
 800ee18:	370c      	adds	r7, #12
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee20:	4770      	bx	lr
 800ee22:	bf00      	nop

0800ee24 <LTDC_LayerPosition>:
  * @retval Reload of the shadow registers values must be applied after layer 
  *         position reconfiguration.
  */

void LTDC_LayerPosition(LTDC_Layer_TypeDef* LTDC_Layerx, uint16_t OffsetX, uint16_t OffsetY)
{
 800ee24:	b480      	push	{r7}
 800ee26:	b089      	sub	sp, #36	; 0x24
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
 800ee2c:	4613      	mov	r3, r2
 800ee2e:	460a      	mov	r2, r1
 800ee30:	807a      	strh	r2, [r7, #2]
 800ee32:	803b      	strh	r3, [r7, #0]
  uint32_t horizontal_start;
  uint32_t horizontal_stop;
  uint32_t vertical_start;
  uint32_t vertical_stop;
  
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	685b      	ldr	r3, [r3, #4]
 800ee38:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	689b      	ldr	r3, [r3, #8]
 800ee44:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	609a      	str	r2, [r3, #8]
  
  /* Reconfigures the horizontal and vertical start position */
  tempreg = LTDC->BPCR;
 800ee4c:	4b2b      	ldr	r3, [pc, #172]	; (800eefc <LTDC_LayerPosition+0xd8>)
 800ee4e:	68db      	ldr	r3, [r3, #12]
 800ee50:	61bb      	str	r3, [r7, #24]
  horizontal_start = (tempreg >> 16) + 1 + OffsetX;
 800ee52:	69bb      	ldr	r3, [r7, #24]
 800ee54:	0c1a      	lsrs	r2, r3, #16
 800ee56:	887b      	ldrh	r3, [r7, #2]
 800ee58:	4413      	add	r3, r2
 800ee5a:	3301      	adds	r3, #1
 800ee5c:	617b      	str	r3, [r7, #20]
  vertical_start = (tempreg & 0xFFFF) + 1 + OffsetY;
 800ee5e:	69bb      	ldr	r3, [r7, #24]
 800ee60:	b29a      	uxth	r2, r3
 800ee62:	883b      	ldrh	r3, [r7, #0]
 800ee64:	4413      	add	r3, r2
 800ee66:	3301      	adds	r3, #1
 800ee68:	613b      	str	r3, [r7, #16]
  
  /* Reconfigures the horizontal and vertical stop position */
  /* Get the number of byte per pixel */
  
  tempreg = LTDC_Layerx->PFCR;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	691b      	ldr	r3, [r3, #16]
 800ee6e:	61bb      	str	r3, [r7, #24]
  
  if (tempreg == LTDC_Pixelformat_ARGB8888)
 800ee70:	69bb      	ldr	r3, [r7, #24]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d102      	bne.n	800ee7c <LTDC_LayerPosition+0x58>
  {
    temp = 4;
 800ee76:	2304      	movs	r3, #4
 800ee78:	61fb      	str	r3, [r7, #28]
 800ee7a:	e016      	b.n	800eeaa <LTDC_LayerPosition+0x86>
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
 800ee7c:	69bb      	ldr	r3, [r7, #24]
 800ee7e:	2b01      	cmp	r3, #1
 800ee80:	d102      	bne.n	800ee88 <LTDC_LayerPosition+0x64>
  {
    temp = 3;
 800ee82:	2303      	movs	r3, #3
 800ee84:	61fb      	str	r3, [r7, #28]
 800ee86:	e010      	b.n	800eeaa <LTDC_LayerPosition+0x86>
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || 
 800ee88:	69bb      	ldr	r3, [r7, #24]
 800ee8a:	2b04      	cmp	r3, #4
 800ee8c:	d008      	beq.n	800eea0 <LTDC_LayerPosition+0x7c>
 800ee8e:	69bb      	ldr	r3, [r7, #24]
 800ee90:	2b02      	cmp	r3, #2
 800ee92:	d005      	beq.n	800eea0 <LTDC_LayerPosition+0x7c>
          (tempreg == LTDC_Pixelformat_RGB565)    ||  
 800ee94:	69bb      	ldr	r3, [r7, #24]
 800ee96:	2b03      	cmp	r3, #3
 800ee98:	d002      	beq.n	800eea0 <LTDC_LayerPosition+0x7c>
          (tempreg == LTDC_Pixelformat_ARGB1555)  ||
 800ee9a:	69bb      	ldr	r3, [r7, #24]
 800ee9c:	2b07      	cmp	r3, #7
 800ee9e:	d102      	bne.n	800eea6 <LTDC_LayerPosition+0x82>
          (tempreg == LTDC_Pixelformat_AL88))
  {
    temp = 2;  
 800eea0:	2302      	movs	r3, #2
 800eea2:	61fb      	str	r3, [r7, #28]
 800eea4:	e001      	b.n	800eeaa <LTDC_LayerPosition+0x86>
  }
  else
  {
    temp = 1;
 800eea6:	2301      	movs	r3, #1
 800eea8:	61fb      	str	r3, [r7, #28]
  }  
    
  tempreg = LTDC_Layerx->CFBLR;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eeae:	61bb      	str	r3, [r7, #24]
  horizontal_stop = (((tempreg & 0x1FFF) - 3)/temp) + horizontal_start - 1;
 800eeb0:	69bb      	ldr	r3, [r7, #24]
 800eeb2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eeb6:	1eda      	subs	r2, r3, #3
 800eeb8:	69fb      	ldr	r3, [r7, #28]
 800eeba:	fbb2 f2f3 	udiv	r2, r2, r3
 800eebe:	697b      	ldr	r3, [r7, #20]
 800eec0:	4413      	add	r3, r2
 800eec2:	3b01      	subs	r3, #1
 800eec4:	60fb      	str	r3, [r7, #12]
  
  tempreg = LTDC_Layerx->CFBLNR;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eeca:	61bb      	str	r3, [r7, #24]
  vertical_stop = (tempreg & 0x7FF) + vertical_start - 1;  
 800eecc:	69bb      	ldr	r3, [r7, #24]
 800eece:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800eed2:	693b      	ldr	r3, [r7, #16]
 800eed4:	4413      	add	r3, r2
 800eed6:	3b01      	subs	r3, #1
 800eed8:	60bb      	str	r3, [r7, #8]
  
  LTDC_Layerx->WHPCR = horizontal_start | (horizontal_stop << 16);
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	041a      	lsls	r2, r3, #16
 800eede:	697b      	ldr	r3, [r7, #20]
 800eee0:	431a      	orrs	r2, r3
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WVPCR = vertical_start | (vertical_stop << 16);  
 800eee6:	68bb      	ldr	r3, [r7, #8]
 800eee8:	041a      	lsls	r2, r3, #16
 800eeea:	693b      	ldr	r3, [r7, #16]
 800eeec:	431a      	orrs	r2, r3
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	609a      	str	r2, [r3, #8]
}
 800eef2:	3724      	adds	r7, #36	; 0x24
 800eef4:	46bd      	mov	sp, r7
 800eef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefa:	4770      	bx	lr
 800eefc:	40016800 	.word	0x40016800

0800ef00 <LTDC_LayerAlpha>:
  * @retval Reload of the shadow registers values must be applied after constant 
  *         alpha reconfiguration.         
  */

void LTDC_LayerAlpha(LTDC_Layer_TypeDef* LTDC_Layerx, uint8_t ConstantAlpha)
{  
 800ef00:	b480      	push	{r7}
 800ef02:	b083      	sub	sp, #12
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
 800ef08:	460b      	mov	r3, r1
 800ef0a:	70fb      	strb	r3, [r7, #3]
  /* reconfigure the constant alpha value */      
  LTDC_Layerx->CACR = ConstantAlpha;
 800ef0c:	78fa      	ldrb	r2, [r7, #3]
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	615a      	str	r2, [r3, #20]
}
 800ef12:	370c      	adds	r7, #12
 800ef14:	46bd      	mov	sp, r7
 800ef16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1a:	4770      	bx	lr

0800ef1c <LTDC_LayerAddress>:
  * @retval Reload of the shadow registers values must be applied after layer 
  *         address reconfiguration.
  */

void LTDC_LayerAddress(LTDC_Layer_TypeDef* LTDC_Layerx, uint32_t Address)
{
 800ef1c:	b480      	push	{r7}
 800ef1e:	b083      	sub	sp, #12
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
 800ef24:	6039      	str	r1, [r7, #0]
  /* Reconfigures the color frame buffer start address */
  LTDC_Layerx->CFBAR = Address;
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	683a      	ldr	r2, [r7, #0]
 800ef2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800ef2c:	370c      	adds	r7, #12
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef34:	4770      	bx	lr
 800ef36:	bf00      	nop

0800ef38 <LTDC_LayerSize>:
  * @retval Reload of the shadow registers values must be applied after layer 
  *         size reconfiguration.
  */

void LTDC_LayerSize(LTDC_Layer_TypeDef* LTDC_Layerx, uint32_t Width, uint32_t Height)
{
 800ef38:	b480      	push	{r7}
 800ef3a:	b08b      	sub	sp, #44	; 0x2c
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	60f8      	str	r0, [r7, #12]
 800ef40:	60b9      	str	r1, [r7, #8]
 800ef42:	607a      	str	r2, [r7, #4]
  uint32_t horizontal_start;
  uint32_t horizontal_stop;
  uint32_t vertical_start;
  uint32_t vertical_stop;  
  
  tempreg = LTDC_Layerx->PFCR;
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	691b      	ldr	r3, [r3, #16]
 800ef48:	623b      	str	r3, [r7, #32]
  
  if (tempreg == LTDC_Pixelformat_ARGB8888)
 800ef4a:	6a3b      	ldr	r3, [r7, #32]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d103      	bne.n	800ef58 <LTDC_LayerSize+0x20>
  {
    temp = 4;
 800ef50:	2304      	movs	r3, #4
 800ef52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ef56:	e019      	b.n	800ef8c <LTDC_LayerSize+0x54>
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
 800ef58:	6a3b      	ldr	r3, [r7, #32]
 800ef5a:	2b01      	cmp	r3, #1
 800ef5c:	d103      	bne.n	800ef66 <LTDC_LayerSize+0x2e>
  {
    temp = 3;
 800ef5e:	2303      	movs	r3, #3
 800ef60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ef64:	e012      	b.n	800ef8c <LTDC_LayerSize+0x54>
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || \
 800ef66:	6a3b      	ldr	r3, [r7, #32]
 800ef68:	2b04      	cmp	r3, #4
 800ef6a:	d008      	beq.n	800ef7e <LTDC_LayerSize+0x46>
 800ef6c:	6a3b      	ldr	r3, [r7, #32]
 800ef6e:	2b02      	cmp	r3, #2
 800ef70:	d005      	beq.n	800ef7e <LTDC_LayerSize+0x46>
          (tempreg == LTDC_Pixelformat_RGB565)    || \
 800ef72:	6a3b      	ldr	r3, [r7, #32]
 800ef74:	2b03      	cmp	r3, #3
 800ef76:	d002      	beq.n	800ef7e <LTDC_LayerSize+0x46>
          (tempreg == LTDC_Pixelformat_ARGB1555)  || \
 800ef78:	6a3b      	ldr	r3, [r7, #32]
 800ef7a:	2b07      	cmp	r3, #7
 800ef7c:	d103      	bne.n	800ef86 <LTDC_LayerSize+0x4e>
          (tempreg == LTDC_Pixelformat_AL88))
  {
    temp = 2;  
 800ef7e:	2302      	movs	r3, #2
 800ef80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ef84:	e002      	b.n	800ef8c <LTDC_LayerSize+0x54>
  }
  else
  {
    temp = 1;
 800ef86:	2301      	movs	r3, #1
 800ef88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* update horizontal and vertical stop */
  tempreg = LTDC_Layerx->WHPCR;
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	685b      	ldr	r3, [r3, #4]
 800ef90:	623b      	str	r3, [r7, #32]
  horizontal_start = (tempreg & 0x1FFF);
 800ef92:	6a3b      	ldr	r3, [r7, #32]
 800ef94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ef98:	61fb      	str	r3, [r7, #28]
  horizontal_stop = Width + horizontal_start - 1;  
 800ef9a:	68ba      	ldr	r2, [r7, #8]
 800ef9c:	69fb      	ldr	r3, [r7, #28]
 800ef9e:	4413      	add	r3, r2
 800efa0:	3b01      	subs	r3, #1
 800efa2:	61bb      	str	r3, [r7, #24]

  tempreg = LTDC_Layerx->WVPCR;
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	689b      	ldr	r3, [r3, #8]
 800efa8:	623b      	str	r3, [r7, #32]
  vertical_start = (tempreg & 0x1FFF);
 800efaa:	6a3b      	ldr	r3, [r7, #32]
 800efac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800efb0:	617b      	str	r3, [r7, #20]
  vertical_stop = Height + vertical_start - 1;  
 800efb2:	687a      	ldr	r2, [r7, #4]
 800efb4:	697b      	ldr	r3, [r7, #20]
 800efb6:	4413      	add	r3, r2
 800efb8:	3b01      	subs	r3, #1
 800efba:	613b      	str	r3, [r7, #16]
  
  LTDC_Layerx->WHPCR = horizontal_start | (horizontal_stop << 16);
 800efbc:	69bb      	ldr	r3, [r7, #24]
 800efbe:	041a      	lsls	r2, r3, #16
 800efc0:	69fb      	ldr	r3, [r7, #28]
 800efc2:	431a      	orrs	r2, r3
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WVPCR = vertical_start | (vertical_stop << 16);  
 800efc8:	693b      	ldr	r3, [r7, #16]
 800efca:	041a      	lsls	r2, r3, #16
 800efcc:	697b      	ldr	r3, [r7, #20]
 800efce:	431a      	orrs	r2, r3
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	609a      	str	r2, [r3, #8]

  /* Reconfigures the color frame buffer pitch in byte */
  LTDC_Layerx->CFBLR  = ((Width * temp) << 16) | ((Width * temp) + 3);  
 800efd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efd8:	68ba      	ldr	r2, [r7, #8]
 800efda:	fb02 f303 	mul.w	r3, r2, r3
 800efde:	041a      	lsls	r2, r3, #16
 800efe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efe4:	68b9      	ldr	r1, [r7, #8]
 800efe6:	fb01 f303 	mul.w	r3, r1, r3
 800efea:	3303      	adds	r3, #3
 800efec:	431a      	orrs	r2, r3
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reconfigures the frame buffer line number */
  LTDC_Layerx->CFBLNR  = Height;  
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	687a      	ldr	r2, [r7, #4]
 800eff6:	631a      	str	r2, [r3, #48]	; 0x30
  
}
 800eff8:	372c      	adds	r7, #44	; 0x2c
 800effa:	46bd      	mov	sp, r7
 800effc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f000:	4770      	bx	lr
 800f002:	bf00      	nop

0800f004 <LTDC_LayerPixelFormat>:
  * @retval Reload of the shadow registers values must be applied after layer 
  *         pixel format reconfiguration.
  */

void LTDC_LayerPixelFormat(LTDC_Layer_TypeDef* LTDC_Layerx, uint32_t PixelFormat)
{
 800f004:	b480      	push	{r7}
 800f006:	b085      	sub	sp, #20
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
 800f00c:	6039      	str	r1, [r7, #0]

  uint8_t temp;
  uint32_t tempreg;
  
  tempreg = LTDC_Layerx->PFCR;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	691b      	ldr	r3, [r3, #16]
 800f012:	60bb      	str	r3, [r7, #8]
  
  if (tempreg == LTDC_Pixelformat_ARGB8888)
 800f014:	68bb      	ldr	r3, [r7, #8]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d102      	bne.n	800f020 <LTDC_LayerPixelFormat+0x1c>
  {
    temp = 4;
 800f01a:	2304      	movs	r3, #4
 800f01c:	73fb      	strb	r3, [r7, #15]
 800f01e:	e016      	b.n	800f04e <LTDC_LayerPixelFormat+0x4a>
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
 800f020:	68bb      	ldr	r3, [r7, #8]
 800f022:	2b01      	cmp	r3, #1
 800f024:	d102      	bne.n	800f02c <LTDC_LayerPixelFormat+0x28>
  {
    temp = 3;
 800f026:	2303      	movs	r3, #3
 800f028:	73fb      	strb	r3, [r7, #15]
 800f02a:	e010      	b.n	800f04e <LTDC_LayerPixelFormat+0x4a>
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || \
 800f02c:	68bb      	ldr	r3, [r7, #8]
 800f02e:	2b04      	cmp	r3, #4
 800f030:	d008      	beq.n	800f044 <LTDC_LayerPixelFormat+0x40>
 800f032:	68bb      	ldr	r3, [r7, #8]
 800f034:	2b02      	cmp	r3, #2
 800f036:	d005      	beq.n	800f044 <LTDC_LayerPixelFormat+0x40>
          (tempreg == LTDC_Pixelformat_RGB565)    || \
 800f038:	68bb      	ldr	r3, [r7, #8]
 800f03a:	2b03      	cmp	r3, #3
 800f03c:	d002      	beq.n	800f044 <LTDC_LayerPixelFormat+0x40>
          (tempreg == LTDC_Pixelformat_ARGB1555)  || \
 800f03e:	68bb      	ldr	r3, [r7, #8]
 800f040:	2b07      	cmp	r3, #7
 800f042:	d102      	bne.n	800f04a <LTDC_LayerPixelFormat+0x46>
          (tempreg == LTDC_Pixelformat_AL88))  
  {
    temp = 2;  
 800f044:	2302      	movs	r3, #2
 800f046:	73fb      	strb	r3, [r7, #15]
 800f048:	e001      	b.n	800f04e <LTDC_LayerPixelFormat+0x4a>
  }
  else
  {
    temp = 1;
 800f04a:	2301      	movs	r3, #1
 800f04c:	73fb      	strb	r3, [r7, #15]
  }
  
  tempreg = (LTDC_Layerx->CFBLR >> 16);
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f052:	0c1b      	lsrs	r3, r3, #16
 800f054:	60bb      	str	r3, [r7, #8]
  tempreg = (tempreg / temp); 
 800f056:	7bfb      	ldrb	r3, [r7, #15]
 800f058:	68ba      	ldr	r2, [r7, #8]
 800f05a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f05e:	60bb      	str	r3, [r7, #8]
  
  if (PixelFormat == LTDC_Pixelformat_ARGB8888)
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d102      	bne.n	800f06c <LTDC_LayerPixelFormat+0x68>
  {
    temp = 4;
 800f066:	2304      	movs	r3, #4
 800f068:	73fb      	strb	r3, [r7, #15]
 800f06a:	e016      	b.n	800f09a <LTDC_LayerPixelFormat+0x96>
  }
  else if (PixelFormat == LTDC_Pixelformat_RGB888)
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	2b01      	cmp	r3, #1
 800f070:	d102      	bne.n	800f078 <LTDC_LayerPixelFormat+0x74>
  {
    temp = 3;
 800f072:	2303      	movs	r3, #3
 800f074:	73fb      	strb	r3, [r7, #15]
 800f076:	e010      	b.n	800f09a <LTDC_LayerPixelFormat+0x96>
  }
  else if ((PixelFormat == LTDC_Pixelformat_ARGB4444) || \
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	2b04      	cmp	r3, #4
 800f07c:	d008      	beq.n	800f090 <LTDC_LayerPixelFormat+0x8c>
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	2b02      	cmp	r3, #2
 800f082:	d005      	beq.n	800f090 <LTDC_LayerPixelFormat+0x8c>
          (PixelFormat == LTDC_Pixelformat_RGB565)    || \
 800f084:	683b      	ldr	r3, [r7, #0]
 800f086:	2b03      	cmp	r3, #3
 800f088:	d002      	beq.n	800f090 <LTDC_LayerPixelFormat+0x8c>
          (PixelFormat == LTDC_Pixelformat_ARGB1555)  || \
 800f08a:	683b      	ldr	r3, [r7, #0]
 800f08c:	2b07      	cmp	r3, #7
 800f08e:	d102      	bne.n	800f096 <LTDC_LayerPixelFormat+0x92>
          (PixelFormat == LTDC_Pixelformat_AL88))
  {
    temp = 2;  
 800f090:	2302      	movs	r3, #2
 800f092:	73fb      	strb	r3, [r7, #15]
 800f094:	e001      	b.n	800f09a <LTDC_LayerPixelFormat+0x96>
  }
  else
  {
    temp = 1;
 800f096:	2301      	movs	r3, #1
 800f098:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Reconfigures the color frame buffer pitch in byte */
  LTDC_Layerx->CFBLR  = ((tempreg * temp) << 16) | ((tempreg * temp) + 3);  
 800f09a:	7bfb      	ldrb	r3, [r7, #15]
 800f09c:	68ba      	ldr	r2, [r7, #8]
 800f09e:	fb02 f303 	mul.w	r3, r2, r3
 800f0a2:	041a      	lsls	r2, r3, #16
 800f0a4:	7bfb      	ldrb	r3, [r7, #15]
 800f0a6:	68b9      	ldr	r1, [r7, #8]
 800f0a8:	fb01 f303 	mul.w	r3, r1, r3
 800f0ac:	3303      	adds	r3, #3
 800f0ae:	431a      	orrs	r2, r3
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reconfigures the color frame buffer start address */
  LTDC_Layerx->PFCR = PixelFormat;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	683a      	ldr	r2, [r7, #0]
 800f0b8:	611a      	str	r2, [r3, #16]
    
}
 800f0ba:	3714      	adds	r7, #20
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c2:	4770      	bx	lr

0800f0c4 <LTDC_ITConfig>:
  * @param NewState: new state of the specified LTDC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void LTDC_ITConfig(uint32_t LTDC_IT, FunctionalState NewState)
{
 800f0c4:	b480      	push	{r7}
 800f0c6:	b083      	sub	sp, #12
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
 800f0cc:	460b      	mov	r3, r1
 800f0ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_LTDC_IT(LTDC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800f0d0:	78fb      	ldrb	r3, [r7, #3]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d006      	beq.n	800f0e4 <LTDC_ITConfig+0x20>
  {
    LTDC->IER |= LTDC_IT;
 800f0d6:	4b09      	ldr	r3, [pc, #36]	; (800f0fc <LTDC_ITConfig+0x38>)
 800f0d8:	4a08      	ldr	r2, [pc, #32]	; (800f0fc <LTDC_ITConfig+0x38>)
 800f0da:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800f0dc:	687a      	ldr	r2, [r7, #4]
 800f0de:	430a      	orrs	r2, r1
 800f0e0:	635a      	str	r2, [r3, #52]	; 0x34
 800f0e2:	e006      	b.n	800f0f2 <LTDC_ITConfig+0x2e>
  }
  else
  {
    LTDC->IER &= (uint32_t)~LTDC_IT;
 800f0e4:	4b05      	ldr	r3, [pc, #20]	; (800f0fc <LTDC_ITConfig+0x38>)
 800f0e6:	4a05      	ldr	r2, [pc, #20]	; (800f0fc <LTDC_ITConfig+0x38>)
 800f0e8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800f0ea:	687a      	ldr	r2, [r7, #4]
 800f0ec:	43d2      	mvns	r2, r2
 800f0ee:	400a      	ands	r2, r1
 800f0f0:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 800f0f2:	370c      	adds	r7, #12
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fa:	4770      	bx	lr
 800f0fc:	40016800 	.word	0x40016800

0800f100 <LTDC_GetFlagStatus>:
  *     @arg LTDC_FLAG_TERR: Transfer Error Interrupt flag.
  *     @arg LTDC_FLAG_RR:   Register Reload interrupt flag.
  * @retval The new state of LTDC_FLAG (SET or RESET).
  */
FlagStatus LTDC_GetFlagStatus(uint32_t LTDC_FLAG)
{
 800f100:	b480      	push	{r7}
 800f102:	b085      	sub	sp, #20
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800f108:	2300      	movs	r3, #0
 800f10a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_LTDC_FLAG(LTDC_FLAG));

  if ((LTDC->ISR & LTDC_FLAG) != (uint32_t)RESET)
 800f10c:	4b08      	ldr	r3, [pc, #32]	; (800f130 <LTDC_GetFlagStatus+0x30>)
 800f10e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	4013      	ands	r3, r2
 800f114:	2b00      	cmp	r3, #0
 800f116:	d002      	beq.n	800f11e <LTDC_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 800f118:	2301      	movs	r3, #1
 800f11a:	73fb      	strb	r3, [r7, #15]
 800f11c:	e001      	b.n	800f122 <LTDC_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800f11e:	2300      	movs	r3, #0
 800f120:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800f122:	7bfb      	ldrb	r3, [r7, #15]
}
 800f124:	4618      	mov	r0, r3
 800f126:	3714      	adds	r7, #20
 800f128:	46bd      	mov	sp, r7
 800f12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12e:	4770      	bx	lr
 800f130:	40016800 	.word	0x40016800

0800f134 <LTDC_ClearFlag>:
  *     @arg LTDC_FLAG_TERR: Transfer Error Interrupt flag.
  *     @arg LTDC_FLAG_RR:   Register Reload interrupt flag.  
  * @retval None
  */
void LTDC_ClearFlag(uint32_t LTDC_FLAG)
{
 800f134:	b480      	push	{r7}
 800f136:	b083      	sub	sp, #12
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_FLAG(LTDC_FLAG));

  /* Clear the corresponding LTDC flag */
  LTDC->ICR = (uint32_t)LTDC_FLAG;
 800f13c:	4b03      	ldr	r3, [pc, #12]	; (800f14c <LTDC_ClearFlag+0x18>)
 800f13e:	687a      	ldr	r2, [r7, #4]
 800f140:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800f142:	370c      	adds	r7, #12
 800f144:	46bd      	mov	sp, r7
 800f146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14a:	4770      	bx	lr
 800f14c:	40016800 	.word	0x40016800

0800f150 <LTDC_GetITStatus>:
  *     @arg LTDC_IT_TERR: Transfer Error Interrupt Enable.
  *     @arg LTDC_IT_RR:   Register Reload interrupt Enable.
  * @retval The new state of the LTDC_IT (SET or RESET).
  */
ITStatus LTDC_GetITStatus(uint32_t LTDC_IT)
{
 800f150:	b480      	push	{r7}
 800f152:	b085      	sub	sp, #20
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800f158:	2300      	movs	r3, #0
 800f15a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_LTDC_IT(LTDC_IT));

  if ((LTDC->ISR & LTDC_IT) != (uint32_t)RESET)
 800f15c:	4b0f      	ldr	r3, [pc, #60]	; (800f19c <LTDC_GetITStatus+0x4c>)
 800f15e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	4013      	ands	r3, r2
 800f164:	2b00      	cmp	r3, #0
 800f166:	d002      	beq.n	800f16e <LTDC_GetITStatus+0x1e>
  {
    bitstatus = SET;
 800f168:	2301      	movs	r3, #1
 800f16a:	73fb      	strb	r3, [r7, #15]
 800f16c:	e001      	b.n	800f172 <LTDC_GetITStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800f16e:	2300      	movs	r3, #0
 800f170:	73fb      	strb	r3, [r7, #15]
  }

  if (((LTDC->IER & LTDC_IT) != (uint32_t)RESET) && (bitstatus != (uint32_t)RESET))
 800f172:	4b0a      	ldr	r3, [pc, #40]	; (800f19c <LTDC_GetITStatus+0x4c>)
 800f174:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	4013      	ands	r3, r2
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d005      	beq.n	800f18a <LTDC_GetITStatus+0x3a>
 800f17e:	7bfb      	ldrb	r3, [r7, #15]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d002      	beq.n	800f18a <LTDC_GetITStatus+0x3a>
  {
    bitstatus = SET;
 800f184:	2301      	movs	r3, #1
 800f186:	73fb      	strb	r3, [r7, #15]
 800f188:	e001      	b.n	800f18e <LTDC_GetITStatus+0x3e>
  }
  else
  {
    bitstatus = RESET;
 800f18a:	2300      	movs	r3, #0
 800f18c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800f18e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f190:	4618      	mov	r0, r3
 800f192:	3714      	adds	r7, #20
 800f194:	46bd      	mov	sp, r7
 800f196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19a:	4770      	bx	lr
 800f19c:	40016800 	.word	0x40016800

0800f1a0 <LTDC_ClearITPendingBit>:
  *     @arg LTDC_IT_TERRIE: Transfer Error Interrupt.
  *     @arg LTDC_IT_RRIE:   Register Reload interrupt.
  * @retval None
  */
void LTDC_ClearITPendingBit(uint32_t LTDC_IT)
{
 800f1a0:	b480      	push	{r7}
 800f1a2:	b083      	sub	sp, #12
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_IT(LTDC_IT));

  /* Clear the corresponding LTDC Interrupt */
  LTDC->ICR = (uint32_t)LTDC_IT;
 800f1a8:	4b03      	ldr	r3, [pc, #12]	; (800f1b8 <LTDC_ClearITPendingBit+0x18>)
 800f1aa:	687a      	ldr	r2, [r7, #4]
 800f1ac:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800f1ae:	370c      	adds	r7, #12
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b6:	4770      	bx	lr
 800f1b8:	40016800 	.word	0x40016800

0800f1bc <PWR_DeInit>:
  * @brief  Deinitializes the PWR peripheral registers to their default reset values.     
  * @param  None
  * @retval None
  */
void PWR_DeInit(void)
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	af00      	add	r7, sp, #0
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 800f1c0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800f1c4:	2101      	movs	r1, #1
 800f1c6:	f000 fe3f 	bl	800fe48 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 800f1ca:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800f1ce:	2100      	movs	r1, #0
 800f1d0:	f000 fe3a 	bl	800fe48 <RCC_APB1PeriphResetCmd>
}
 800f1d4:	bd80      	pop	{r7, pc}
 800f1d6:	bf00      	nop

0800f1d8 <PWR_BackupAccessCmd>:
  * @param  NewState: new state of the access to the backup domain.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupAccessCmd(FunctionalState NewState)
{
 800f1d8:	b480      	push	{r7}
 800f1da:	b083      	sub	sp, #12
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	4603      	mov	r3, r0
 800f1e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 800f1e2:	4b04      	ldr	r3, [pc, #16]	; (800f1f4 <PWR_BackupAccessCmd+0x1c>)
 800f1e4:	79fa      	ldrb	r2, [r7, #7]
 800f1e6:	601a      	str	r2, [r3, #0]
}
 800f1e8:	370c      	adds	r7, #12
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f0:	4770      	bx	lr
 800f1f2:	bf00      	nop
 800f1f4:	420e0020 	.word	0x420e0020

0800f1f8 <PWR_PVDLevelConfig>:
  *         more details about the voltage threshold corresponding to each 
  *         detection level.
  * @retval None
  */
void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
{
 800f1f8:	b480      	push	{r7}
 800f1fa:	b085      	sub	sp, #20
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800f200:	2300      	movs	r3, #0
 800f202:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
  
  tmpreg = PWR->CR;
 800f204:	4b09      	ldr	r3, [pc, #36]	; (800f22c <PWR_PVDLevelConfig+0x34>)
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	60fb      	str	r3, [r7, #12]
  
  /* Clear PLS[7:5] bits */
  tmpreg &= CR_PLS_MASK;
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800f210:	60fb      	str	r3, [r7, #12]
  
  /* Set PLS[7:5] bits according to PWR_PVDLevel value */
  tmpreg |= PWR_PVDLevel;
 800f212:	68fa      	ldr	r2, [r7, #12]
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	4313      	orrs	r3, r2
 800f218:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 800f21a:	4b04      	ldr	r3, [pc, #16]	; (800f22c <PWR_PVDLevelConfig+0x34>)
 800f21c:	68fa      	ldr	r2, [r7, #12]
 800f21e:	601a      	str	r2, [r3, #0]
}
 800f220:	3714      	adds	r7, #20
 800f222:	46bd      	mov	sp, r7
 800f224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f228:	4770      	bx	lr
 800f22a:	bf00      	nop
 800f22c:	40007000 	.word	0x40007000

0800f230 <PWR_PVDCmd>:
  * @param  NewState: new state of the PVD.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_PVDCmd(FunctionalState NewState)
{
 800f230:	b480      	push	{r7}
 800f232:	b083      	sub	sp, #12
 800f234:	af00      	add	r7, sp, #0
 800f236:	4603      	mov	r3, r0
 800f238:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 800f23a:	4b04      	ldr	r3, [pc, #16]	; (800f24c <PWR_PVDCmd+0x1c>)
 800f23c:	79fa      	ldrb	r2, [r7, #7]
 800f23e:	601a      	str	r2, [r3, #0]
}
 800f240:	370c      	adds	r7, #12
 800f242:	46bd      	mov	sp, r7
 800f244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f248:	4770      	bx	lr
 800f24a:	bf00      	nop
 800f24c:	420e0010 	.word	0x420e0010

0800f250 <PWR_WakeUpPinCmd>:
  * @param  NewState: new state of the WakeUp Pin functionality.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_WakeUpPinCmd(FunctionalState NewState)
{
 800f250:	b480      	push	{r7}
 800f252:	b083      	sub	sp, #12
 800f254:	af00      	add	r7, sp, #0
 800f256:	4603      	mov	r3, r0
 800f258:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 800f25a:	4b04      	ldr	r3, [pc, #16]	; (800f26c <PWR_WakeUpPinCmd+0x1c>)
 800f25c:	79fa      	ldrb	r2, [r7, #7]
 800f25e:	601a      	str	r2, [r3, #0]
}
 800f260:	370c      	adds	r7, #12
 800f262:	46bd      	mov	sp, r7
 800f264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f268:	4770      	bx	lr
 800f26a:	bf00      	nop
 800f26c:	420e00a0 	.word	0x420e00a0

0800f270 <PWR_BackupRegulatorCmd>:
  * @param  NewState: new state of the Backup Regulator.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupRegulatorCmd(FunctionalState NewState)
{
 800f270:	b480      	push	{r7}
 800f272:	b083      	sub	sp, #12
 800f274:	af00      	add	r7, sp, #0
 800f276:	4603      	mov	r3, r0
 800f278:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)NewState;
 800f27a:	4b04      	ldr	r3, [pc, #16]	; (800f28c <PWR_BackupRegulatorCmd+0x1c>)
 800f27c:	79fa      	ldrb	r2, [r7, #7]
 800f27e:	601a      	str	r2, [r3, #0]
}
 800f280:	370c      	adds	r7, #12
 800f282:	46bd      	mov	sp, r7
 800f284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f288:	4770      	bx	lr
 800f28a:	bf00      	nop
 800f28c:	420e00a4 	.word	0x420e00a4

0800f290 <PWR_MainRegulatorModeConfig>:
  *            @arg PWR_Regulator_Voltage_Scale3: Regulator voltage output Scale 3 mode, 
  *                                                System frequency up to 120 MHz (only for STM32F42xxx/43xxx devices)
  * @retval None
  */
void PWR_MainRegulatorModeConfig(uint32_t PWR_Regulator_Voltage)
{
 800f290:	b480      	push	{r7}
 800f292:	b085      	sub	sp, #20
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800f298:	2300      	movs	r3, #0
 800f29a:	60fb      	str	r3, [r7, #12]
	
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_VOLTAGE(PWR_Regulator_Voltage));

  tmpreg = PWR->CR;
 800f29c:	4b09      	ldr	r3, [pc, #36]	; (800f2c4 <PWR_MainRegulatorModeConfig+0x34>)
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	60fb      	str	r3, [r7, #12]
  
  /* Clear VOS[15:14] bits */
  tmpreg &= CR_VOS_MASK;
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800f2a8:	60fb      	str	r3, [r7, #12]
  
  /* Set VOS[15:14] bits according to PWR_Regulator_Voltage value */
  tmpreg |= PWR_Regulator_Voltage;
 800f2aa:	68fa      	ldr	r2, [r7, #12]
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	4313      	orrs	r3, r2
 800f2b0:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 800f2b2:	4b04      	ldr	r3, [pc, #16]	; (800f2c4 <PWR_MainRegulatorModeConfig+0x34>)
 800f2b4:	68fa      	ldr	r2, [r7, #12]
 800f2b6:	601a      	str	r2, [r3, #0]
}
 800f2b8:	3714      	adds	r7, #20
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c0:	4770      	bx	lr
 800f2c2:	bf00      	nop
 800f2c4:	40007000 	.word	0x40007000

0800f2c8 <PWR_OverDriveCmd>:
  * @param  NewState: new state of the Over Drive mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_OverDriveCmd(FunctionalState NewState)
{
 800f2c8:	b480      	push	{r7}
 800f2ca:	b083      	sub	sp, #12
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Set/Reset the ODEN bit to enable/disable the Over Drive mode */
  *(__IO uint32_t *) CR_ODEN_BB = (uint32_t)NewState;
 800f2d2:	4b04      	ldr	r3, [pc, #16]	; (800f2e4 <PWR_OverDriveCmd+0x1c>)
 800f2d4:	79fa      	ldrb	r2, [r7, #7]
 800f2d6:	601a      	str	r2, [r3, #0]
}
 800f2d8:	370c      	adds	r7, #12
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e0:	4770      	bx	lr
 800f2e2:	bf00      	nop
 800f2e4:	420e0040 	.word	0x420e0040

0800f2e8 <PWR_OverDriveSWCmd>:
  * @param  NewState: new state of the Over Drive switching mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_OverDriveSWCmd(FunctionalState NewState)
{
 800f2e8:	b480      	push	{r7}
 800f2ea:	b083      	sub	sp, #12
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Set/Reset the ODSWEN bit to enable/disable the Over Drive switching mode */
  *(__IO uint32_t *) CR_ODSWEN_BB = (uint32_t)NewState;
 800f2f2:	4b04      	ldr	r3, [pc, #16]	; (800f304 <PWR_OverDriveSWCmd+0x1c>)
 800f2f4:	79fa      	ldrb	r2, [r7, #7]
 800f2f6:	601a      	str	r2, [r3, #0]
}
 800f2f8:	370c      	adds	r7, #12
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f300:	4770      	bx	lr
 800f302:	bf00      	nop
 800f304:	420e0044 	.word	0x420e0044

0800f308 <PWR_UnderDriveCmd>:
  * @param  NewState: new state of the Under Drive mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_UnderDriveCmd(FunctionalState NewState)
{
 800f308:	b480      	push	{r7}
 800f30a:	b083      	sub	sp, #12
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	4603      	mov	r3, r0
 800f310:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800f312:	79fb      	ldrb	r3, [r7, #7]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d006      	beq.n	800f326 <PWR_UnderDriveCmd+0x1e>
  {
    /* Set the UDEN[1:0] bits to enable the Under Drive mode */
    PWR->CR |= (uint32_t)PWR_CR_UDEN;
 800f318:	4b08      	ldr	r3, [pc, #32]	; (800f33c <PWR_UnderDriveCmd+0x34>)
 800f31a:	4a08      	ldr	r2, [pc, #32]	; (800f33c <PWR_UnderDriveCmd+0x34>)
 800f31c:	6812      	ldr	r2, [r2, #0]
 800f31e:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 800f322:	601a      	str	r2, [r3, #0]
 800f324:	e005      	b.n	800f332 <PWR_UnderDriveCmd+0x2a>
  }
  else
  {
    /* Reset the UDEN[1:0] bits to disable the Under Drive mode */
    PWR->CR &= (uint32_t)(~PWR_CR_UDEN);
 800f326:	4b05      	ldr	r3, [pc, #20]	; (800f33c <PWR_UnderDriveCmd+0x34>)
 800f328:	4a04      	ldr	r2, [pc, #16]	; (800f33c <PWR_UnderDriveCmd+0x34>)
 800f32a:	6812      	ldr	r2, [r2, #0]
 800f32c:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800f330:	601a      	str	r2, [r3, #0]
  }
}
 800f332:	370c      	adds	r7, #12
 800f334:	46bd      	mov	sp, r7
 800f336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33a:	4770      	bx	lr
 800f33c:	40007000 	.word	0x40007000

0800f340 <PWR_FlashPowerDownCmd>:
  * @param  NewState: new state of the Flash power mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_FlashPowerDownCmd(FunctionalState NewState)
{
 800f340:	b480      	push	{r7}
 800f342:	b083      	sub	sp, #12
 800f344:	af00      	add	r7, sp, #0
 800f346:	4603      	mov	r3, r0
 800f348:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)NewState;
 800f34a:	4b04      	ldr	r3, [pc, #16]	; (800f35c <PWR_FlashPowerDownCmd+0x1c>)
 800f34c:	79fa      	ldrb	r2, [r7, #7]
 800f34e:	601a      	str	r2, [r3, #0]
}
 800f350:	370c      	adds	r7, #12
 800f352:	46bd      	mov	sp, r7
 800f354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f358:	4770      	bx	lr
 800f35a:	bf00      	nop
 800f35c:	420e0024 	.word	0x420e0024

0800f360 <PWR_EnterSTOPMode>:
  *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
  *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
  * @retval None
  */
void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
{
 800f360:	b480      	push	{r7}
 800f362:	b085      	sub	sp, #20
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
 800f368:	460b      	mov	r3, r1
 800f36a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 800f36c:	2300      	movs	r3, #0
 800f36e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 800f370:	4b13      	ldr	r3, [pc, #76]	; (800f3c0 <PWR_EnterSTOPMode+0x60>)
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	60fb      	str	r3, [r7, #12]
  /* Clear PDDS and LPDS bits */
  tmpreg &= CR_DS_MASK;
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f37c:	f023 0303 	bic.w	r3, r3, #3
 800f380:	60fb      	str	r3, [r7, #12]
  
  /* Set LPDS, MRLVDS and LPLVDS bits according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 800f382:	68fa      	ldr	r2, [r7, #12]
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	4313      	orrs	r3, r2
 800f388:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 800f38a:	4b0d      	ldr	r3, [pc, #52]	; (800f3c0 <PWR_EnterSTOPMode+0x60>)
 800f38c:	68fa      	ldr	r2, [r7, #12]
 800f38e:	601a      	str	r2, [r3, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 800f390:	4b0c      	ldr	r3, [pc, #48]	; (800f3c4 <PWR_EnterSTOPMode+0x64>)
 800f392:	4a0c      	ldr	r2, [pc, #48]	; (800f3c4 <PWR_EnterSTOPMode+0x64>)
 800f394:	6912      	ldr	r2, [r2, #16]
 800f396:	f042 0204 	orr.w	r2, r2, #4
 800f39a:	611a      	str	r2, [r3, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 800f39c:	78fb      	ldrb	r3, [r7, #3]
 800f39e:	2b01      	cmp	r3, #1
 800f3a0:	d101      	bne.n	800f3a6 <PWR_EnterSTOPMode+0x46>
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 800f3a2:	bf30      	wfi
 800f3a4:	e000      	b.n	800f3a8 <PWR_EnterSTOPMode+0x48>
    Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
 800f3a6:	bf20      	wfe
  {
    /* Request Wait For Event */
    __WFE();
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 800f3a8:	4b06      	ldr	r3, [pc, #24]	; (800f3c4 <PWR_EnterSTOPMode+0x64>)
 800f3aa:	4a06      	ldr	r2, [pc, #24]	; (800f3c4 <PWR_EnterSTOPMode+0x64>)
 800f3ac:	6912      	ldr	r2, [r2, #16]
 800f3ae:	f022 0204 	bic.w	r2, r2, #4
 800f3b2:	611a      	str	r2, [r3, #16]
}
 800f3b4:	3714      	adds	r7, #20
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3bc:	4770      	bx	lr
 800f3be:	bf00      	nop
 800f3c0:	40007000 	.word	0x40007000
 800f3c4:	e000ed00 	.word	0xe000ed00

0800f3c8 <PWR_EnterUnderDriveSTOPMode>:
  *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
  *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
  * @retval None
  */
void PWR_EnterUnderDriveSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
{
 800f3c8:	b480      	push	{r7}
 800f3ca:	b085      	sub	sp, #20
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
 800f3d0:	460b      	mov	r3, r1
 800f3d2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_UNDERDRIVE(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 800f3d8:	4b13      	ldr	r3, [pc, #76]	; (800f428 <PWR_EnterUnderDriveSTOPMode+0x60>)
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	60fb      	str	r3, [r7, #12]
  /* Clear PDDS and LPDS bits */
  tmpreg &= CR_DS_MASK;
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f3e4:	f023 0303 	bic.w	r3, r3, #3
 800f3e8:	60fb      	str	r3, [r7, #12]
  
  /* Set LPDS, MRLUDS and LPLUDS bits according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 800f3ea:	68fa      	ldr	r2, [r7, #12]
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	4313      	orrs	r3, r2
 800f3f0:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 800f3f2:	4b0d      	ldr	r3, [pc, #52]	; (800f428 <PWR_EnterUnderDriveSTOPMode+0x60>)
 800f3f4:	68fa      	ldr	r2, [r7, #12]
 800f3f6:	601a      	str	r2, [r3, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 800f3f8:	4b0c      	ldr	r3, [pc, #48]	; (800f42c <PWR_EnterUnderDriveSTOPMode+0x64>)
 800f3fa:	4a0c      	ldr	r2, [pc, #48]	; (800f42c <PWR_EnterUnderDriveSTOPMode+0x64>)
 800f3fc:	6912      	ldr	r2, [r2, #16]
 800f3fe:	f042 0204 	orr.w	r2, r2, #4
 800f402:	611a      	str	r2, [r3, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 800f404:	78fb      	ldrb	r3, [r7, #3]
 800f406:	2b01      	cmp	r3, #1
 800f408:	d101      	bne.n	800f40e <PWR_EnterUnderDriveSTOPMode+0x46>
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 800f40a:	bf30      	wfi
 800f40c:	e000      	b.n	800f410 <PWR_EnterUnderDriveSTOPMode+0x48>
    Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
 800f40e:	bf20      	wfe
  {
    /* Request Wait For Event */
    __WFE();
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 800f410:	4b06      	ldr	r3, [pc, #24]	; (800f42c <PWR_EnterUnderDriveSTOPMode+0x64>)
 800f412:	4a06      	ldr	r2, [pc, #24]	; (800f42c <PWR_EnterUnderDriveSTOPMode+0x64>)
 800f414:	6912      	ldr	r2, [r2, #16]
 800f416:	f022 0204 	bic.w	r2, r2, #4
 800f41a:	611a      	str	r2, [r3, #16]
}
 800f41c:	3714      	adds	r7, #20
 800f41e:	46bd      	mov	sp, r7
 800f420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f424:	4770      	bx	lr
 800f426:	bf00      	nop
 800f428:	40007000 	.word	0x40007000
 800f42c:	e000ed00 	.word	0xe000ed00

0800f430 <PWR_EnterSTANDBYMode>:
  *          - WKUP pin 1 (PA0) if enabled.       
  * @param  None
  * @retval None
  */
void PWR_EnterSTANDBYMode(void)
{
 800f430:	b480      	push	{r7}
 800f432:	af00      	add	r7, sp, #0
  /* Clear Wakeup flag */
  PWR->CR |= PWR_CR_CWUF;
 800f434:	4b0b      	ldr	r3, [pc, #44]	; (800f464 <PWR_EnterSTANDBYMode+0x34>)
 800f436:	4a0b      	ldr	r2, [pc, #44]	; (800f464 <PWR_EnterSTANDBYMode+0x34>)
 800f438:	6812      	ldr	r2, [r2, #0]
 800f43a:	f042 0204 	orr.w	r2, r2, #4
 800f43e:	601a      	str	r2, [r3, #0]
  
  /* Select STANDBY mode */
  PWR->CR |= PWR_CR_PDDS;
 800f440:	4b08      	ldr	r3, [pc, #32]	; (800f464 <PWR_EnterSTANDBYMode+0x34>)
 800f442:	4a08      	ldr	r2, [pc, #32]	; (800f464 <PWR_EnterSTANDBYMode+0x34>)
 800f444:	6812      	ldr	r2, [r2, #0]
 800f446:	f042 0202 	orr.w	r2, r2, #2
 800f44a:	601a      	str	r2, [r3, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 800f44c:	4b06      	ldr	r3, [pc, #24]	; (800f468 <PWR_EnterSTANDBYMode+0x38>)
 800f44e:	4a06      	ldr	r2, [pc, #24]	; (800f468 <PWR_EnterSTANDBYMode+0x38>)
 800f450:	6912      	ldr	r2, [r2, #16]
 800f452:	f042 0204 	orr.w	r2, r2, #4
 800f456:	611a      	str	r2, [r3, #16]
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 800f458:	bf30      	wfi
#if defined ( __CC_ARM   )
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
}
 800f45a:	46bd      	mov	sp, r7
 800f45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f460:	4770      	bx	lr
 800f462:	bf00      	nop
 800f464:	40007000 	.word	0x40007000
 800f468:	e000ed00 	.word	0xe000ed00

0800f46c <PWR_GetFlagStatus>:
  *            @arg PWR_FLAG_UDRDY: This flag indicates that the Under-drive mode
  *                 is enabled in Stop mode (STM32F42xxx/43xxx devices)
  * @retval The new state of PWR_FLAG (SET or RESET).
  */
FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
{
 800f46c:	b480      	push	{r7}
 800f46e:	b085      	sub	sp, #20
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800f474:	2300      	movs	r3, #0
 800f476:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 800f478:	4b08      	ldr	r3, [pc, #32]	; (800f49c <PWR_GetFlagStatus+0x30>)
 800f47a:	685a      	ldr	r2, [r3, #4]
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	4013      	ands	r3, r2
 800f480:	2b00      	cmp	r3, #0
 800f482:	d002      	beq.n	800f48a <PWR_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 800f484:	2301      	movs	r3, #1
 800f486:	73fb      	strb	r3, [r7, #15]
 800f488:	e001      	b.n	800f48e <PWR_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800f48a:	2300      	movs	r3, #0
 800f48c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 800f48e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f490:	4618      	mov	r0, r3
 800f492:	3714      	adds	r7, #20
 800f494:	46bd      	mov	sp, r7
 800f496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49a:	4770      	bx	lr
 800f49c:	40007000 	.word	0x40007000

0800f4a0 <PWR_ClearFlag>:
  *            @arg PWR_FLAG_SB: StandBy flag
  *            @arg PWR_FLAG_UDRDY: Under-drive ready flag (STM32F42xxx/43xxx devices)
  * @retval None
  */
void PWR_ClearFlag(uint32_t PWR_FLAG)
{
 800f4a0:	b480      	push	{r7}
 800f4a2:	b083      	sub	sp, #12
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
  
#if defined (STM32F427_437xx) || defined (STM32F429_439xx)
  if (PWR_FLAG != PWR_FLAG_UDRDY)
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800f4ae:	d007      	beq.n	800f4c0 <PWR_ClearFlag+0x20>
  {
    PWR->CR |=  PWR_FLAG << 2;
 800f4b0:	4b09      	ldr	r3, [pc, #36]	; (800f4d8 <PWR_ClearFlag+0x38>)
 800f4b2:	4a09      	ldr	r2, [pc, #36]	; (800f4d8 <PWR_ClearFlag+0x38>)
 800f4b4:	6811      	ldr	r1, [r2, #0]
 800f4b6:	687a      	ldr	r2, [r7, #4]
 800f4b8:	0092      	lsls	r2, r2, #2
 800f4ba:	430a      	orrs	r2, r1
 800f4bc:	601a      	str	r2, [r3, #0]
 800f4be:	e005      	b.n	800f4cc <PWR_ClearFlag+0x2c>
  }
  else
  {
    PWR->CSR |= PWR_FLAG_UDRDY;
 800f4c0:	4b05      	ldr	r3, [pc, #20]	; (800f4d8 <PWR_ClearFlag+0x38>)
 800f4c2:	4a05      	ldr	r2, [pc, #20]	; (800f4d8 <PWR_ClearFlag+0x38>)
 800f4c4:	6852      	ldr	r2, [r2, #4]
 800f4c6:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 800f4ca:	605a      	str	r2, [r3, #4]
#endif /* STM32F427_437xx ||  STM32F429_439xx */

#if defined (STM32F40_41xxx) || defined (STM32F401xx) 
  PWR->CR |=  PWR_FLAG << 2;
#endif /* STM32F40_41xxx */
}
 800f4cc:	370c      	adds	r7, #12
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d4:	4770      	bx	lr
 800f4d6:	bf00      	nop
 800f4d8:	40007000 	.word	0x40007000

0800f4dc <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 800f4dc:	b480      	push	{r7}
 800f4de:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800f4e0:	4b16      	ldr	r3, [pc, #88]	; (800f53c <RCC_DeInit+0x60>)
 800f4e2:	4a16      	ldr	r2, [pc, #88]	; (800f53c <RCC_DeInit+0x60>)
 800f4e4:	6812      	ldr	r2, [r2, #0]
 800f4e6:	f042 0201 	orr.w	r2, r2, #1
 800f4ea:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800f4ec:	4b13      	ldr	r3, [pc, #76]	; (800f53c <RCC_DeInit+0x60>)
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 800f4f2:	4a12      	ldr	r2, [pc, #72]	; (800f53c <RCC_DeInit+0x60>)
 800f4f4:	4b11      	ldr	r3, [pc, #68]	; (800f53c <RCC_DeInit+0x60>)
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800f4fc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800f500:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800f502:	4b0e      	ldr	r3, [pc, #56]	; (800f53c <RCC_DeInit+0x60>)
 800f504:	4a0e      	ldr	r2, [pc, #56]	; (800f540 <RCC_DeInit+0x64>)
 800f506:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 800f508:	4b0c      	ldr	r3, [pc, #48]	; (800f53c <RCC_DeInit+0x60>)
 800f50a:	4a0e      	ldr	r2, [pc, #56]	; (800f544 <RCC_DeInit+0x68>)
 800f50c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register, only available for STM32F42/43xxx devices */
  RCC->PLLSAICFGR = 0x24003000;
 800f510:	4b0a      	ldr	r3, [pc, #40]	; (800f53c <RCC_DeInit+0x60>)
 800f512:	4a0d      	ldr	r2, [pc, #52]	; (800f548 <RCC_DeInit+0x6c>)
 800f514:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800f518:	4b08      	ldr	r3, [pc, #32]	; (800f53c <RCC_DeInit+0x60>)
 800f51a:	4a08      	ldr	r2, [pc, #32]	; (800f53c <RCC_DeInit+0x60>)
 800f51c:	6812      	ldr	r2, [r2, #0]
 800f51e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f522:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800f524:	4b05      	ldr	r3, [pc, #20]	; (800f53c <RCC_DeInit+0x60>)
 800f526:	2200      	movs	r2, #0
 800f528:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx devices */
  RCC->DCKCFGR = 0x00000000; 
 800f52a:	4b04      	ldr	r3, [pc, #16]	; (800f53c <RCC_DeInit+0x60>)
 800f52c:	2200      	movs	r2, #0
 800f52e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

}
 800f532:	46bd      	mov	sp, r7
 800f534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f538:	4770      	bx	lr
 800f53a:	bf00      	nop
 800f53c:	40023800 	.word	0x40023800
 800f540:	24003010 	.word	0x24003010
 800f544:	20003000 	.word	0x20003000
 800f548:	24003000 	.word	0x24003000

0800f54c <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 800f54c:	b480      	push	{r7}
 800f54e:	b083      	sub	sp, #12
 800f550:	af00      	add	r7, sp, #0
 800f552:	4603      	mov	r3, r0
 800f554:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 800f556:	4b05      	ldr	r3, [pc, #20]	; (800f56c <RCC_HSEConfig+0x20>)
 800f558:	2200      	movs	r2, #0
 800f55a:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 800f55c:	4b03      	ldr	r3, [pc, #12]	; (800f56c <RCC_HSEConfig+0x20>)
 800f55e:	79fa      	ldrb	r2, [r7, #7]
 800f560:	701a      	strb	r2, [r3, #0]
}
 800f562:	370c      	adds	r7, #12
 800f564:	46bd      	mov	sp, r7
 800f566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56a:	4770      	bx	lr
 800f56c:	40023802 	.word	0x40023802

0800f570 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b082      	sub	sp, #8
 800f574:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 800f576:	2300      	movs	r3, #0
 800f578:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 800f57a:	2300      	movs	r3, #0
 800f57c:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 800f57e:	2300      	movs	r3, #0
 800f580:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 800f582:	2031      	movs	r0, #49	; 0x31
 800f584:	f000 fd56 	bl	8010034 <RCC_GetFlagStatus>
 800f588:	4603      	mov	r3, r0
 800f58a:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 800f58c:	683b      	ldr	r3, [r7, #0]
 800f58e:	3301      	adds	r3, #1
 800f590:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 800f592:	683b      	ldr	r3, [r7, #0]
 800f594:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800f598:	d002      	beq.n	800f5a0 <RCC_WaitForHSEStartUp+0x30>
 800f59a:	79bb      	ldrb	r3, [r7, #6]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d0f0      	beq.n	800f582 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 800f5a0:	2031      	movs	r0, #49	; 0x31
 800f5a2:	f000 fd47 	bl	8010034 <RCC_GetFlagStatus>
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d002      	beq.n	800f5b2 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 800f5ac:	2301      	movs	r3, #1
 800f5ae:	71fb      	strb	r3, [r7, #7]
 800f5b0:	e001      	b.n	800f5b6 <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 800f5b6:	79fb      	ldrb	r3, [r7, #7]
}
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	3708      	adds	r7, #8
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	bd80      	pop	{r7, pc}

0800f5c0 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 800f5c0:	b480      	push	{r7}
 800f5c2:	b085      	sub	sp, #20
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 800f5ce:	4b0a      	ldr	r3, [pc, #40]	; (800f5f8 <RCC_AdjustHSICalibrationValue+0x38>)
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800f5da:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 800f5dc:	79fb      	ldrb	r3, [r7, #7]
 800f5de:	00db      	lsls	r3, r3, #3
 800f5e0:	68fa      	ldr	r2, [r7, #12]
 800f5e2:	4313      	orrs	r3, r2
 800f5e4:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
 800f5e6:	4b04      	ldr	r3, [pc, #16]	; (800f5f8 <RCC_AdjustHSICalibrationValue+0x38>)
 800f5e8:	68fa      	ldr	r2, [r7, #12]
 800f5ea:	601a      	str	r2, [r3, #0]
}
 800f5ec:	3714      	adds	r7, #20
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f4:	4770      	bx	lr
 800f5f6:	bf00      	nop
 800f5f8:	40023800 	.word	0x40023800

0800f5fc <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 800f5fc:	b480      	push	{r7}
 800f5fe:	b083      	sub	sp, #12
 800f600:	af00      	add	r7, sp, #0
 800f602:	4603      	mov	r3, r0
 800f604:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 800f606:	4b04      	ldr	r3, [pc, #16]	; (800f618 <RCC_HSICmd+0x1c>)
 800f608:	79fa      	ldrb	r2, [r7, #7]
 800f60a:	601a      	str	r2, [r3, #0]
}
 800f60c:	370c      	adds	r7, #12
 800f60e:	46bd      	mov	sp, r7
 800f610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f614:	4770      	bx	lr
 800f616:	bf00      	nop
 800f618:	42470000 	.word	0x42470000

0800f61c <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 800f61c:	b480      	push	{r7}
 800f61e:	b083      	sub	sp, #12
 800f620:	af00      	add	r7, sp, #0
 800f622:	4603      	mov	r3, r0
 800f624:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800f626:	4b0c      	ldr	r3, [pc, #48]	; (800f658 <RCC_LSEConfig+0x3c>)
 800f628:	2200      	movs	r2, #0
 800f62a:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800f62c:	4b0a      	ldr	r3, [pc, #40]	; (800f658 <RCC_LSEConfig+0x3c>)
 800f62e:	2200      	movs	r2, #0
 800f630:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 800f632:	79fb      	ldrb	r3, [r7, #7]
 800f634:	2b01      	cmp	r3, #1
 800f636:	d002      	beq.n	800f63e <RCC_LSEConfig+0x22>
 800f638:	2b04      	cmp	r3, #4
 800f63a:	d004      	beq.n	800f646 <RCC_LSEConfig+0x2a>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
 800f63c:	e007      	b.n	800f64e <RCC_LSEConfig+0x32>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 800f63e:	4b06      	ldr	r3, [pc, #24]	; (800f658 <RCC_LSEConfig+0x3c>)
 800f640:	2201      	movs	r2, #1
 800f642:	701a      	strb	r2, [r3, #0]
      break;
 800f644:	e003      	b.n	800f64e <RCC_LSEConfig+0x32>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 800f646:	4b04      	ldr	r3, [pc, #16]	; (800f658 <RCC_LSEConfig+0x3c>)
 800f648:	2205      	movs	r2, #5
 800f64a:	701a      	strb	r2, [r3, #0]
      break;
 800f64c:	bf00      	nop
    default:
      break;
  }
}
 800f64e:	370c      	adds	r7, #12
 800f650:	46bd      	mov	sp, r7
 800f652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f656:	4770      	bx	lr
 800f658:	40023870 	.word	0x40023870

0800f65c <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 800f65c:	b480      	push	{r7}
 800f65e:	b083      	sub	sp, #12
 800f660:	af00      	add	r7, sp, #0
 800f662:	4603      	mov	r3, r0
 800f664:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 800f666:	4b04      	ldr	r3, [pc, #16]	; (800f678 <RCC_LSICmd+0x1c>)
 800f668:	79fa      	ldrb	r2, [r7, #7]
 800f66a:	601a      	str	r2, [r3, #0]
}
 800f66c:	370c      	adds	r7, #12
 800f66e:	46bd      	mov	sp, r7
 800f670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f674:	4770      	bx	lr
 800f676:	bf00      	nop
 800f678:	42470e80 	.word	0x42470e80

0800f67c <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 800f67c:	b480      	push	{r7}
 800f67e:	b085      	sub	sp, #20
 800f680:	af00      	add	r7, sp, #0
 800f682:	60f8      	str	r0, [r7, #12]
 800f684:	60b9      	str	r1, [r7, #8]
 800f686:	607a      	str	r2, [r7, #4]
 800f688:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 800f68a:	4b0a      	ldr	r3, [pc, #40]	; (800f6b4 <RCC_PLLConfig+0x38>)
 800f68c:	687a      	ldr	r2, [r7, #4]
 800f68e:	0191      	lsls	r1, r2, #6
 800f690:	68ba      	ldr	r2, [r7, #8]
 800f692:	4311      	orrs	r1, r2
 800f694:	683a      	ldr	r2, [r7, #0]
 800f696:	0852      	lsrs	r2, r2, #1
 800f698:	3a01      	subs	r2, #1
 800f69a:	0412      	lsls	r2, r2, #16
 800f69c:	4311      	orrs	r1, r2
 800f69e:	68fa      	ldr	r2, [r7, #12]
 800f6a0:	4311      	orrs	r1, r2
                 (PLLQ << 24);
 800f6a2:	69ba      	ldr	r2, [r7, #24]
 800f6a4:	0612      	lsls	r2, r2, #24
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 800f6a6:	430a      	orrs	r2, r1
 800f6a8:	605a      	str	r2, [r3, #4]
                 (PLLQ << 24);
}
 800f6aa:	3714      	adds	r7, #20
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b2:	4770      	bx	lr
 800f6b4:	40023800 	.word	0x40023800

0800f6b8 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 800f6b8:	b480      	push	{r7}
 800f6ba:	b083      	sub	sp, #12
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	4603      	mov	r3, r0
 800f6c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 800f6c2:	4b04      	ldr	r3, [pc, #16]	; (800f6d4 <RCC_PLLCmd+0x1c>)
 800f6c4:	79fa      	ldrb	r2, [r7, #7]
 800f6c6:	601a      	str	r2, [r3, #0]
}
 800f6c8:	370c      	adds	r7, #12
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d0:	4770      	bx	lr
 800f6d2:	bf00      	nop
 800f6d4:	42470060 	.word	0x42470060

0800f6d8 <RCC_PLLI2SConfig>:
  * @note   the PLLI2SR parameter is only available with STM32F42xxx/43xxx devices.  
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SQ, uint32_t PLLI2SR)
{
 800f6d8:	b480      	push	{r7}
 800f6da:	b085      	sub	sp, #20
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	60f8      	str	r0, [r7, #12]
 800f6e0:	60b9      	str	r1, [r7, #8]
 800f6e2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SQ));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SQ << 24) | (PLLI2SR << 28);
 800f6e4:	4b07      	ldr	r3, [pc, #28]	; (800f704 <RCC_PLLI2SConfig+0x2c>)
 800f6e6:	68fa      	ldr	r2, [r7, #12]
 800f6e8:	0191      	lsls	r1, r2, #6
 800f6ea:	68ba      	ldr	r2, [r7, #8]
 800f6ec:	0612      	lsls	r2, r2, #24
 800f6ee:	4311      	orrs	r1, r2
 800f6f0:	687a      	ldr	r2, [r7, #4]
 800f6f2:	0712      	lsls	r2, r2, #28
 800f6f4:	430a      	orrs	r2, r1
 800f6f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800f6fa:	3714      	adds	r7, #20
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f702:	4770      	bx	lr
 800f704:	40023800 	.word	0x40023800

0800f708 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
 800f708:	b480      	push	{r7}
 800f70a:	b083      	sub	sp, #12
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	4603      	mov	r3, r0
 800f710:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 800f712:	4b04      	ldr	r3, [pc, #16]	; (800f724 <RCC_PLLI2SCmd+0x1c>)
 800f714:	79fa      	ldrb	r2, [r7, #7]
 800f716:	601a      	str	r2, [r3, #0]
}
 800f718:	370c      	adds	r7, #12
 800f71a:	46bd      	mov	sp, r7
 800f71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f720:	4770      	bx	lr
 800f722:	bf00      	nop
 800f724:	42470068 	.word	0x42470068

0800f728 <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
 800f728:	b480      	push	{r7}
 800f72a:	b085      	sub	sp, #20
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	60f8      	str	r0, [r7, #12]
 800f730:	60b9      	str	r1, [r7, #8]
 800f732:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));

  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
 800f734:	4b07      	ldr	r3, [pc, #28]	; (800f754 <RCC_PLLSAIConfig+0x2c>)
 800f736:	68fa      	ldr	r2, [r7, #12]
 800f738:	0191      	lsls	r1, r2, #6
 800f73a:	68ba      	ldr	r2, [r7, #8]
 800f73c:	0612      	lsls	r2, r2, #24
 800f73e:	4311      	orrs	r1, r2
 800f740:	687a      	ldr	r2, [r7, #4]
 800f742:	0712      	lsls	r2, r2, #28
 800f744:	430a      	orrs	r2, r1
 800f746:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800f74a:	3714      	adds	r7, #20
 800f74c:	46bd      	mov	sp, r7
 800f74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f752:	4770      	bx	lr
 800f754:	40023800 	.word	0x40023800

0800f758 <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
 800f758:	b480      	push	{r7}
 800f75a:	b083      	sub	sp, #12
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	4603      	mov	r3, r0
 800f760:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 800f762:	4b04      	ldr	r3, [pc, #16]	; (800f774 <RCC_PLLSAICmd+0x1c>)
 800f764:	79fa      	ldrb	r2, [r7, #7]
 800f766:	601a      	str	r2, [r3, #0]
}
 800f768:	370c      	adds	r7, #12
 800f76a:	46bd      	mov	sp, r7
 800f76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f770:	4770      	bx	lr
 800f772:	bf00      	nop
 800f774:	42470070 	.word	0x42470070

0800f778 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 800f778:	b480      	push	{r7}
 800f77a:	b083      	sub	sp, #12
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	4603      	mov	r3, r0
 800f780:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 800f782:	4b04      	ldr	r3, [pc, #16]	; (800f794 <RCC_ClockSecuritySystemCmd+0x1c>)
 800f784:	79fa      	ldrb	r2, [r7, #7]
 800f786:	601a      	str	r2, [r3, #0]
}
 800f788:	370c      	adds	r7, #12
 800f78a:	46bd      	mov	sp, r7
 800f78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f790:	4770      	bx	lr
 800f792:	bf00      	nop
 800f794:	4247004c 	.word	0x4247004c

0800f798 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
 800f798:	b480      	push	{r7}
 800f79a:	b085      	sub	sp, #20
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
 800f7a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 800f7a6:	4b0a      	ldr	r3, [pc, #40]	; (800f7d0 <RCC_MCO1Config+0x38>)
 800f7a8:	689b      	ldr	r3, [r3, #8]
 800f7aa:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 800f7b2:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 800f7b4:	687a      	ldr	r2, [r7, #4]
 800f7b6:	683b      	ldr	r3, [r7, #0]
 800f7b8:	4313      	orrs	r3, r2
 800f7ba:	68fa      	ldr	r2, [r7, #12]
 800f7bc:	4313      	orrs	r3, r2
 800f7be:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 800f7c0:	4b03      	ldr	r3, [pc, #12]	; (800f7d0 <RCC_MCO1Config+0x38>)
 800f7c2:	68fa      	ldr	r2, [r7, #12]
 800f7c4:	609a      	str	r2, [r3, #8]
}
 800f7c6:	3714      	adds	r7, #20
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ce:	4770      	bx	lr
 800f7d0:	40023800 	.word	0x40023800

0800f7d4 <RCC_MCO2Config>:
  *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
  *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
 800f7d4:	b480      	push	{r7}
 800f7d6:	b085      	sub	sp, #20
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	6078      	str	r0, [r7, #4]
 800f7dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f7de:	2300      	movs	r3, #0
 800f7e0:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 800f7e2:	4b0a      	ldr	r3, [pc, #40]	; (800f80c <RCC_MCO2Config+0x38>)
 800f7e4:	689b      	ldr	r3, [r3, #8]
 800f7e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800f7ee:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 800f7f0:	687a      	ldr	r2, [r7, #4]
 800f7f2:	683b      	ldr	r3, [r7, #0]
 800f7f4:	4313      	orrs	r3, r2
 800f7f6:	68fa      	ldr	r2, [r7, #12]
 800f7f8:	4313      	orrs	r3, r2
 800f7fa:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 800f7fc:	4b03      	ldr	r3, [pc, #12]	; (800f80c <RCC_MCO2Config+0x38>)
 800f7fe:	68fa      	ldr	r2, [r7, #12]
 800f800:	609a      	str	r2, [r3, #8]
}
 800f802:	3714      	adds	r7, #20
 800f804:	46bd      	mov	sp, r7
 800f806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80a:	4770      	bx	lr
 800f80c:	40023800 	.word	0x40023800

0800f810 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 800f810:	b480      	push	{r7}
 800f812:	b085      	sub	sp, #20
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800f818:	2300      	movs	r3, #0
 800f81a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 800f81c:	4b09      	ldr	r3, [pc, #36]	; (800f844 <RCC_SYSCLKConfig+0x34>)
 800f81e:	689b      	ldr	r3, [r3, #8]
 800f820:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	f023 0303 	bic.w	r3, r3, #3
 800f828:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 800f82a:	68fa      	ldr	r2, [r7, #12]
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	4313      	orrs	r3, r2
 800f830:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800f832:	4b04      	ldr	r3, [pc, #16]	; (800f844 <RCC_SYSCLKConfig+0x34>)
 800f834:	68fa      	ldr	r2, [r7, #12]
 800f836:	609a      	str	r2, [r3, #8]
}
 800f838:	3714      	adds	r7, #20
 800f83a:	46bd      	mov	sp, r7
 800f83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f840:	4770      	bx	lr
 800f842:	bf00      	nop
 800f844:	40023800 	.word	0x40023800

0800f848 <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 800f848:	b480      	push	{r7}
 800f84a:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 800f84c:	4b05      	ldr	r3, [pc, #20]	; (800f864 <RCC_GetSYSCLKSource+0x1c>)
 800f84e:	689b      	ldr	r3, [r3, #8]
 800f850:	b2db      	uxtb	r3, r3
 800f852:	f003 030c 	and.w	r3, r3, #12
 800f856:	b2db      	uxtb	r3, r3
}
 800f858:	4618      	mov	r0, r3
 800f85a:	46bd      	mov	sp, r7
 800f85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f860:	4770      	bx	lr
 800f862:	bf00      	nop
 800f864:	40023800 	.word	0x40023800

0800f868 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 800f868:	b480      	push	{r7}
 800f86a:	b085      	sub	sp, #20
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800f870:	2300      	movs	r3, #0
 800f872:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 800f874:	4b09      	ldr	r3, [pc, #36]	; (800f89c <RCC_HCLKConfig+0x34>)
 800f876:	689b      	ldr	r3, [r3, #8]
 800f878:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f880:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 800f882:	68fa      	ldr	r2, [r7, #12]
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	4313      	orrs	r3, r2
 800f888:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800f88a:	4b04      	ldr	r3, [pc, #16]	; (800f89c <RCC_HCLKConfig+0x34>)
 800f88c:	68fa      	ldr	r2, [r7, #12]
 800f88e:	609a      	str	r2, [r3, #8]
}
 800f890:	3714      	adds	r7, #20
 800f892:	46bd      	mov	sp, r7
 800f894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f898:	4770      	bx	lr
 800f89a:	bf00      	nop
 800f89c:	40023800 	.word	0x40023800

0800f8a0 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 800f8a0:	b480      	push	{r7}
 800f8a2:	b085      	sub	sp, #20
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 800f8ac:	4b09      	ldr	r3, [pc, #36]	; (800f8d4 <RCC_PCLK1Config+0x34>)
 800f8ae:	689b      	ldr	r3, [r3, #8]
 800f8b0:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800f8b8:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 800f8ba:	68fa      	ldr	r2, [r7, #12]
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	4313      	orrs	r3, r2
 800f8c0:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800f8c2:	4b04      	ldr	r3, [pc, #16]	; (800f8d4 <RCC_PCLK1Config+0x34>)
 800f8c4:	68fa      	ldr	r2, [r7, #12]
 800f8c6:	609a      	str	r2, [r3, #8]
}
 800f8c8:	3714      	adds	r7, #20
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d0:	4770      	bx	lr
 800f8d2:	bf00      	nop
 800f8d4:	40023800 	.word	0x40023800

0800f8d8 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 800f8d8:	b480      	push	{r7}
 800f8da:	b085      	sub	sp, #20
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 800f8e4:	4b09      	ldr	r3, [pc, #36]	; (800f90c <RCC_PCLK2Config+0x34>)
 800f8e6:	689b      	ldr	r3, [r3, #8]
 800f8e8:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800f8f0:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	00db      	lsls	r3, r3, #3
 800f8f6:	68fa      	ldr	r2, [r7, #12]
 800f8f8:	4313      	orrs	r3, r2
 800f8fa:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800f8fc:	4b03      	ldr	r3, [pc, #12]	; (800f90c <RCC_PCLK2Config+0x34>)
 800f8fe:	68fa      	ldr	r2, [r7, #12]
 800f900:	609a      	str	r2, [r3, #8]
}
 800f902:	3714      	adds	r7, #20
 800f904:	46bd      	mov	sp, r7
 800f906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90a:	4770      	bx	lr
 800f90c:	40023800 	.word	0x40023800

0800f910 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800f910:	b480      	push	{r7}
 800f912:	b089      	sub	sp, #36	; 0x24
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800f918:	2300      	movs	r3, #0
 800f91a:	61bb      	str	r3, [r7, #24]
 800f91c:	2300      	movs	r3, #0
 800f91e:	617b      	str	r3, [r7, #20]
 800f920:	2300      	movs	r3, #0
 800f922:	61fb      	str	r3, [r7, #28]
 800f924:	2302      	movs	r3, #2
 800f926:	613b      	str	r3, [r7, #16]
 800f928:	2300      	movs	r3, #0
 800f92a:	60fb      	str	r3, [r7, #12]
 800f92c:	2302      	movs	r3, #2
 800f92e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800f930:	4b48      	ldr	r3, [pc, #288]	; (800fa54 <RCC_GetClocksFreq+0x144>)
 800f932:	689b      	ldr	r3, [r3, #8]
 800f934:	f003 030c 	and.w	r3, r3, #12
 800f938:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 800f93a:	69bb      	ldr	r3, [r7, #24]
 800f93c:	2b04      	cmp	r3, #4
 800f93e:	d007      	beq.n	800f950 <RCC_GetClocksFreq+0x40>
 800f940:	2b08      	cmp	r3, #8
 800f942:	d009      	beq.n	800f958 <RCC_GetClocksFreq+0x48>
 800f944:	2b00      	cmp	r3, #0
 800f946:	d13f      	bne.n	800f9c8 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	4a43      	ldr	r2, [pc, #268]	; (800fa58 <RCC_GetClocksFreq+0x148>)
 800f94c:	601a      	str	r2, [r3, #0]
      break;
 800f94e:	e03f      	b.n	800f9d0 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	4a42      	ldr	r2, [pc, #264]	; (800fa5c <RCC_GetClocksFreq+0x14c>)
 800f954:	601a      	str	r2, [r3, #0]
      break;
 800f956:	e03b      	b.n	800f9d0 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800f958:	4b3e      	ldr	r3, [pc, #248]	; (800fa54 <RCC_GetClocksFreq+0x144>)
 800f95a:	685b      	ldr	r3, [r3, #4]
 800f95c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f960:	0d9b      	lsrs	r3, r3, #22
 800f962:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f964:	4b3b      	ldr	r3, [pc, #236]	; (800fa54 <RCC_GetClocksFreq+0x144>)
 800f966:	685b      	ldr	r3, [r3, #4]
 800f968:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f96c:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d00d      	beq.n	800f990 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800f974:	4a39      	ldr	r2, [pc, #228]	; (800fa5c <RCC_GetClocksFreq+0x14c>)
 800f976:	68bb      	ldr	r3, [r7, #8]
 800f978:	fbb2 f2f3 	udiv	r2, r2, r3
 800f97c:	4b35      	ldr	r3, [pc, #212]	; (800fa54 <RCC_GetClocksFreq+0x144>)
 800f97e:	6859      	ldr	r1, [r3, #4]
 800f980:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800f984:	400b      	ands	r3, r1
 800f986:	099b      	lsrs	r3, r3, #6
 800f988:	fb03 f302 	mul.w	r3, r3, r2
 800f98c:	61fb      	str	r3, [r7, #28]
 800f98e:	e00c      	b.n	800f9aa <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800f990:	4a31      	ldr	r2, [pc, #196]	; (800fa58 <RCC_GetClocksFreq+0x148>)
 800f992:	68bb      	ldr	r3, [r7, #8]
 800f994:	fbb2 f2f3 	udiv	r2, r2, r3
 800f998:	4b2e      	ldr	r3, [pc, #184]	; (800fa54 <RCC_GetClocksFreq+0x144>)
 800f99a:	6859      	ldr	r1, [r3, #4]
 800f99c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800f9a0:	400b      	ands	r3, r1
 800f9a2:	099b      	lsrs	r3, r3, #6
 800f9a4:	fb03 f302 	mul.w	r3, r3, r2
 800f9a8:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800f9aa:	4b2a      	ldr	r3, [pc, #168]	; (800fa54 <RCC_GetClocksFreq+0x144>)
 800f9ac:	685b      	ldr	r3, [r3, #4]
 800f9ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f9b2:	0c1b      	lsrs	r3, r3, #16
 800f9b4:	3301      	adds	r3, #1
 800f9b6:	005b      	lsls	r3, r3, #1
 800f9b8:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800f9ba:	69fa      	ldr	r2, [r7, #28]
 800f9bc:	693b      	ldr	r3, [r7, #16]
 800f9be:	fbb2 f2f3 	udiv	r2, r2, r3
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	601a      	str	r2, [r3, #0]
      break;
 800f9c6:	e003      	b.n	800f9d0 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	4a23      	ldr	r2, [pc, #140]	; (800fa58 <RCC_GetClocksFreq+0x148>)
 800f9cc:	601a      	str	r2, [r3, #0]
      break;
 800f9ce:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800f9d0:	4b20      	ldr	r3, [pc, #128]	; (800fa54 <RCC_GetClocksFreq+0x144>)
 800f9d2:	689b      	ldr	r3, [r3, #8]
 800f9d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f9d8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800f9da:	69bb      	ldr	r3, [r7, #24]
 800f9dc:	091b      	lsrs	r3, r3, #4
 800f9de:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800f9e0:	4a1f      	ldr	r2, [pc, #124]	; (800fa60 <RCC_GetClocksFreq+0x150>)
 800f9e2:	69bb      	ldr	r3, [r7, #24]
 800f9e4:	4413      	add	r3, r2
 800f9e6:	781b      	ldrb	r3, [r3, #0]
 800f9e8:	b2db      	uxtb	r3, r3
 800f9ea:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681a      	ldr	r2, [r3, #0]
 800f9f0:	697b      	ldr	r3, [r7, #20]
 800f9f2:	40da      	lsrs	r2, r3
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800f9f8:	4b16      	ldr	r3, [pc, #88]	; (800fa54 <RCC_GetClocksFreq+0x144>)
 800f9fa:	689b      	ldr	r3, [r3, #8]
 800f9fc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800fa00:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800fa02:	69bb      	ldr	r3, [r7, #24]
 800fa04:	0a9b      	lsrs	r3, r3, #10
 800fa06:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800fa08:	4a15      	ldr	r2, [pc, #84]	; (800fa60 <RCC_GetClocksFreq+0x150>)
 800fa0a:	69bb      	ldr	r3, [r7, #24]
 800fa0c:	4413      	add	r3, r2
 800fa0e:	781b      	ldrb	r3, [r3, #0]
 800fa10:	b2db      	uxtb	r3, r3
 800fa12:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	685a      	ldr	r2, [r3, #4]
 800fa18:	697b      	ldr	r3, [r7, #20]
 800fa1a:	40da      	lsrs	r2, r3
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800fa20:	4b0c      	ldr	r3, [pc, #48]	; (800fa54 <RCC_GetClocksFreq+0x144>)
 800fa22:	689b      	ldr	r3, [r3, #8]
 800fa24:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800fa28:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800fa2a:	69bb      	ldr	r3, [r7, #24]
 800fa2c:	0b5b      	lsrs	r3, r3, #13
 800fa2e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800fa30:	4a0b      	ldr	r2, [pc, #44]	; (800fa60 <RCC_GetClocksFreq+0x150>)
 800fa32:	69bb      	ldr	r3, [r7, #24]
 800fa34:	4413      	add	r3, r2
 800fa36:	781b      	ldrb	r3, [r3, #0]
 800fa38:	b2db      	uxtb	r3, r3
 800fa3a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	685a      	ldr	r2, [r3, #4]
 800fa40:	697b      	ldr	r3, [r7, #20]
 800fa42:	40da      	lsrs	r2, r3
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	60da      	str	r2, [r3, #12]
}
 800fa48:	3724      	adds	r7, #36	; 0x24
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa50:	4770      	bx	lr
 800fa52:	bf00      	nop
 800fa54:	40023800 	.word	0x40023800
 800fa58:	00f42400 	.word	0x00f42400
 800fa5c:	007a1200 	.word	0x007a1200
 800fa60:	20000080 	.word	0x20000080

0800fa64 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 800fa64:	b480      	push	{r7}
 800fa66:	b085      	sub	sp, #20
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fa76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fa7a:	d111      	bne.n	800faa0 <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 800fa7c:	4b0f      	ldr	r3, [pc, #60]	; (800fabc <RCC_RTCCLKConfig+0x58>)
 800fa7e:	689b      	ldr	r3, [r3, #8]
 800fa80:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800fa88:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800fa90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fa94:	68fa      	ldr	r2, [r7, #12]
 800fa96:	4313      	orrs	r3, r2
 800fa98:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
 800fa9a:	4b08      	ldr	r3, [pc, #32]	; (800fabc <RCC_RTCCLKConfig+0x58>)
 800fa9c:	68fa      	ldr	r2, [r7, #12]
 800fa9e:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 800faa0:	4b06      	ldr	r3, [pc, #24]	; (800fabc <RCC_RTCCLKConfig+0x58>)
 800faa2:	4a06      	ldr	r2, [pc, #24]	; (800fabc <RCC_RTCCLKConfig+0x58>)
 800faa4:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800faa6:	687a      	ldr	r2, [r7, #4]
 800faa8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800faac:	430a      	orrs	r2, r1
 800faae:	671a      	str	r2, [r3, #112]	; 0x70
}
 800fab0:	3714      	adds	r7, #20
 800fab2:	46bd      	mov	sp, r7
 800fab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab8:	4770      	bx	lr
 800faba:	bf00      	nop
 800fabc:	40023800 	.word	0x40023800

0800fac0 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 800fac0:	b480      	push	{r7}
 800fac2:	b083      	sub	sp, #12
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	4603      	mov	r3, r0
 800fac8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 800faca:	4b04      	ldr	r3, [pc, #16]	; (800fadc <RCC_RTCCLKCmd+0x1c>)
 800facc:	79fa      	ldrb	r2, [r7, #7]
 800face:	601a      	str	r2, [r3, #0]
}
 800fad0:	370c      	adds	r7, #12
 800fad2:	46bd      	mov	sp, r7
 800fad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad8:	4770      	bx	lr
 800fada:	bf00      	nop
 800fadc:	42470e3c 	.word	0x42470e3c

0800fae0 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 800fae0:	b480      	push	{r7}
 800fae2:	b083      	sub	sp, #12
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	4603      	mov	r3, r0
 800fae8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 800faea:	4b04      	ldr	r3, [pc, #16]	; (800fafc <RCC_BackupResetCmd+0x1c>)
 800faec:	79fa      	ldrb	r2, [r7, #7]
 800faee:	601a      	str	r2, [r3, #0]
}
 800faf0:	370c      	adds	r7, #12
 800faf2:	46bd      	mov	sp, r7
 800faf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf8:	4770      	bx	lr
 800fafa:	bf00      	nop
 800fafc:	42470e40 	.word	0x42470e40

0800fb00 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
 800fb00:	b480      	push	{r7}
 800fb02:	b083      	sub	sp, #12
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 800fb08:	4b03      	ldr	r3, [pc, #12]	; (800fb18 <RCC_I2SCLKConfig+0x18>)
 800fb0a:	687a      	ldr	r2, [r7, #4]
 800fb0c:	601a      	str	r2, [r3, #0]
}
 800fb0e:	370c      	adds	r7, #12
 800fb10:	46bd      	mov	sp, r7
 800fb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb16:	4770      	bx	lr
 800fb18:	4247015c 	.word	0x4247015c

0800fb1c <RCC_SAIPLLI2SClkDivConfig>:
  *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
  *              
  * @retval None
  */
void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
{
 800fb1c:	b480      	push	{r7}
 800fb1e:	b085      	sub	sp, #20
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800fb24:	2300      	movs	r3, #0
 800fb26:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
 800fb28:	4b0a      	ldr	r3, [pc, #40]	; (800fb54 <RCC_SAIPLLI2SClkDivConfig+0x38>)
 800fb2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb2e:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	f023 031f 	bic.w	r3, r3, #31
 800fb36:	60fb      	str	r3, [r7, #12]

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	3b01      	subs	r3, #1
 800fb3c:	68fa      	ldr	r2, [r7, #12]
 800fb3e:	4313      	orrs	r3, r2
 800fb40:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 800fb42:	4b04      	ldr	r3, [pc, #16]	; (800fb54 <RCC_SAIPLLI2SClkDivConfig+0x38>)
 800fb44:	68fa      	ldr	r2, [r7, #12]
 800fb46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 800fb4a:	3714      	adds	r7, #20
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb52:	4770      	bx	lr
 800fb54:	40023800 	.word	0x40023800

0800fb58 <RCC_SAIPLLSAIClkDivConfig>:
  *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
  *              
  * @retval None
  */
void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
{
 800fb58:	b480      	push	{r7}
 800fb5a:	b085      	sub	sp, #20
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800fb60:	2300      	movs	r3, #0
 800fb62:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
 800fb64:	4b0b      	ldr	r3, [pc, #44]	; (800fb94 <RCC_SAIPLLSAIClkDivConfig+0x3c>)
 800fb66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb6a:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800fb72:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	3b01      	subs	r3, #1
 800fb78:	021b      	lsls	r3, r3, #8
 800fb7a:	68fa      	ldr	r2, [r7, #12]
 800fb7c:	4313      	orrs	r3, r2
 800fb7e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 800fb80:	4b04      	ldr	r3, [pc, #16]	; (800fb94 <RCC_SAIPLLSAIClkDivConfig+0x3c>)
 800fb82:	68fa      	ldr	r2, [r7, #12]
 800fb84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 800fb88:	3714      	adds	r7, #20
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb90:	4770      	bx	lr
 800fb92:	bf00      	nop
 800fb94:	40023800 	.word	0x40023800

0800fb98 <RCC_SAIBlockACLKConfig>:
  *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block A clock
  * @retval None
  */
void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
{
 800fb98:	b480      	push	{r7}
 800fb9a:	b085      	sub	sp, #20
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800fba0:	2300      	movs	r3, #0
 800fba2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
 800fba4:	4b0a      	ldr	r3, [pc, #40]	; (800fbd0 <RCC_SAIBlockACLKConfig+0x38>)
 800fba6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fbaa:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800fbb2:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
 800fbb4:	68fa      	ldr	r2, [r7, #12]
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	4313      	orrs	r3, r2
 800fbba:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 800fbbc:	4b04      	ldr	r3, [pc, #16]	; (800fbd0 <RCC_SAIBlockACLKConfig+0x38>)
 800fbbe:	68fa      	ldr	r2, [r7, #12]
 800fbc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 800fbc4:	3714      	adds	r7, #20
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbcc:	4770      	bx	lr
 800fbce:	bf00      	nop
 800fbd0:	40023800 	.word	0x40023800

0800fbd4 <RCC_SAIBlockBCLKConfig>:
  *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block B clock
  * @retval None
  */
void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
{
 800fbd4:	b480      	push	{r7}
 800fbd6:	b085      	sub	sp, #20
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800fbdc:	2300      	movs	r3, #0
 800fbde:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
 800fbe0:	4b0a      	ldr	r3, [pc, #40]	; (800fc0c <RCC_SAIBlockBCLKConfig+0x38>)
 800fbe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fbe6:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800fbee:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
 800fbf0:	68fa      	ldr	r2, [r7, #12]
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	4313      	orrs	r3, r2
 800fbf6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 800fbf8:	4b04      	ldr	r3, [pc, #16]	; (800fc0c <RCC_SAIBlockBCLKConfig+0x38>)
 800fbfa:	68fa      	ldr	r2, [r7, #12]
 800fbfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 800fc00:	3714      	adds	r7, #20
 800fc02:	46bd      	mov	sp, r7
 800fc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc08:	4770      	bx	lr
 800fc0a:	bf00      	nop
 800fc0c:	40023800 	.word	0x40023800

0800fc10 <RCC_LTDCCLKDivConfig>:
  *          LTDC clock frequency = f(PLLSAI_R) / RCC_PLLSAIDivR  
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
 800fc10:	b480      	push	{r7}
 800fc12:	b085      	sub	sp, #20
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800fc18:	2300      	movs	r3, #0
 800fc1a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
 800fc1c:	4b0a      	ldr	r3, [pc, #40]	; (800fc48 <RCC_LTDCCLKDivConfig+0x38>)
 800fc1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fc22:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800fc2a:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
 800fc2c:	68fa      	ldr	r2, [r7, #12]
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	4313      	orrs	r3, r2
 800fc32:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 800fc34:	4b04      	ldr	r3, [pc, #16]	; (800fc48 <RCC_LTDCCLKDivConfig+0x38>)
 800fc36:	68fa      	ldr	r2, [r7, #12]
 800fc38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 800fc3c:	3714      	adds	r7, #20
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc44:	4770      	bx	lr
 800fc46:	bf00      	nop
 800fc48:	40023800 	.word	0x40023800

0800fc4c <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
 800fc4c:	b480      	push	{r7}
 800fc4e:	b083      	sub	sp, #12
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
 800fc54:	4b03      	ldr	r3, [pc, #12]	; (800fc64 <RCC_TIMCLKPresConfig+0x18>)
 800fc56:	687a      	ldr	r2, [r7, #4]
 800fc58:	601a      	str	r2, [r3, #0]
  
}
 800fc5a:	370c      	adds	r7, #12
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc62:	4770      	bx	lr
 800fc64:	424711e0 	.word	0x424711e0

0800fc68 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800fc68:	b480      	push	{r7}
 800fc6a:	b083      	sub	sp, #12
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
 800fc70:	460b      	mov	r3, r1
 800fc72:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800fc74:	78fb      	ldrb	r3, [r7, #3]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d006      	beq.n	800fc88 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800fc7a:	4b09      	ldr	r3, [pc, #36]	; (800fca0 <RCC_AHB1PeriphClockCmd+0x38>)
 800fc7c:	4a08      	ldr	r2, [pc, #32]	; (800fca0 <RCC_AHB1PeriphClockCmd+0x38>)
 800fc7e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800fc80:	687a      	ldr	r2, [r7, #4]
 800fc82:	430a      	orrs	r2, r1
 800fc84:	631a      	str	r2, [r3, #48]	; 0x30
 800fc86:	e006      	b.n	800fc96 <RCC_AHB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800fc88:	4b05      	ldr	r3, [pc, #20]	; (800fca0 <RCC_AHB1PeriphClockCmd+0x38>)
 800fc8a:	4a05      	ldr	r2, [pc, #20]	; (800fca0 <RCC_AHB1PeriphClockCmd+0x38>)
 800fc8c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800fc8e:	687a      	ldr	r2, [r7, #4]
 800fc90:	43d2      	mvns	r2, r2
 800fc92:	400a      	ands	r2, r1
 800fc94:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 800fc96:	370c      	adds	r7, #12
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9e:	4770      	bx	lr
 800fca0:	40023800 	.word	0x40023800

0800fca4 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 800fca4:	b480      	push	{r7}
 800fca6:	b083      	sub	sp, #12
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
 800fcac:	460b      	mov	r3, r1
 800fcae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800fcb0:	78fb      	ldrb	r3, [r7, #3]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d006      	beq.n	800fcc4 <RCC_AHB2PeriphClockCmd+0x20>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 800fcb6:	4b09      	ldr	r3, [pc, #36]	; (800fcdc <RCC_AHB2PeriphClockCmd+0x38>)
 800fcb8:	4a08      	ldr	r2, [pc, #32]	; (800fcdc <RCC_AHB2PeriphClockCmd+0x38>)
 800fcba:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800fcbc:	687a      	ldr	r2, [r7, #4]
 800fcbe:	430a      	orrs	r2, r1
 800fcc0:	635a      	str	r2, [r3, #52]	; 0x34
 800fcc2:	e006      	b.n	800fcd2 <RCC_AHB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 800fcc4:	4b05      	ldr	r3, [pc, #20]	; (800fcdc <RCC_AHB2PeriphClockCmd+0x38>)
 800fcc6:	4a05      	ldr	r2, [pc, #20]	; (800fcdc <RCC_AHB2PeriphClockCmd+0x38>)
 800fcc8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800fcca:	687a      	ldr	r2, [r7, #4]
 800fccc:	43d2      	mvns	r2, r2
 800fcce:	400a      	ands	r2, r1
 800fcd0:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 800fcd2:	370c      	adds	r7, #12
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcda:	4770      	bx	lr
 800fcdc:	40023800 	.word	0x40023800

0800fce0 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 800fce0:	b480      	push	{r7}
 800fce2:	b083      	sub	sp, #12
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
 800fce8:	460b      	mov	r3, r1
 800fcea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800fcec:	78fb      	ldrb	r3, [r7, #3]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d006      	beq.n	800fd00 <RCC_AHB3PeriphClockCmd+0x20>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 800fcf2:	4b09      	ldr	r3, [pc, #36]	; (800fd18 <RCC_AHB3PeriphClockCmd+0x38>)
 800fcf4:	4a08      	ldr	r2, [pc, #32]	; (800fd18 <RCC_AHB3PeriphClockCmd+0x38>)
 800fcf6:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800fcf8:	687a      	ldr	r2, [r7, #4]
 800fcfa:	430a      	orrs	r2, r1
 800fcfc:	639a      	str	r2, [r3, #56]	; 0x38
 800fcfe:	e006      	b.n	800fd0e <RCC_AHB3PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 800fd00:	4b05      	ldr	r3, [pc, #20]	; (800fd18 <RCC_AHB3PeriphClockCmd+0x38>)
 800fd02:	4a05      	ldr	r2, [pc, #20]	; (800fd18 <RCC_AHB3PeriphClockCmd+0x38>)
 800fd04:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800fd06:	687a      	ldr	r2, [r7, #4]
 800fd08:	43d2      	mvns	r2, r2
 800fd0a:	400a      	ands	r2, r1
 800fd0c:	639a      	str	r2, [r3, #56]	; 0x38
  }
}
 800fd0e:	370c      	adds	r7, #12
 800fd10:	46bd      	mov	sp, r7
 800fd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd16:	4770      	bx	lr
 800fd18:	40023800 	.word	0x40023800

0800fd1c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800fd1c:	b480      	push	{r7}
 800fd1e:	b083      	sub	sp, #12
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
 800fd24:	460b      	mov	r3, r1
 800fd26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800fd28:	78fb      	ldrb	r3, [r7, #3]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d006      	beq.n	800fd3c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800fd2e:	4b09      	ldr	r3, [pc, #36]	; (800fd54 <RCC_APB1PeriphClockCmd+0x38>)
 800fd30:	4a08      	ldr	r2, [pc, #32]	; (800fd54 <RCC_APB1PeriphClockCmd+0x38>)
 800fd32:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800fd34:	687a      	ldr	r2, [r7, #4]
 800fd36:	430a      	orrs	r2, r1
 800fd38:	641a      	str	r2, [r3, #64]	; 0x40
 800fd3a:	e006      	b.n	800fd4a <RCC_APB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800fd3c:	4b05      	ldr	r3, [pc, #20]	; (800fd54 <RCC_APB1PeriphClockCmd+0x38>)
 800fd3e:	4a05      	ldr	r2, [pc, #20]	; (800fd54 <RCC_APB1PeriphClockCmd+0x38>)
 800fd40:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800fd42:	687a      	ldr	r2, [r7, #4]
 800fd44:	43d2      	mvns	r2, r2
 800fd46:	400a      	ands	r2, r1
 800fd48:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 800fd4a:	370c      	adds	r7, #12
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd52:	4770      	bx	lr
 800fd54:	40023800 	.word	0x40023800

0800fd58 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800fd58:	b480      	push	{r7}
 800fd5a:	b083      	sub	sp, #12
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	6078      	str	r0, [r7, #4]
 800fd60:	460b      	mov	r3, r1
 800fd62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800fd64:	78fb      	ldrb	r3, [r7, #3]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d006      	beq.n	800fd78 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800fd6a:	4b09      	ldr	r3, [pc, #36]	; (800fd90 <RCC_APB2PeriphClockCmd+0x38>)
 800fd6c:	4a08      	ldr	r2, [pc, #32]	; (800fd90 <RCC_APB2PeriphClockCmd+0x38>)
 800fd6e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800fd70:	687a      	ldr	r2, [r7, #4]
 800fd72:	430a      	orrs	r2, r1
 800fd74:	645a      	str	r2, [r3, #68]	; 0x44
 800fd76:	e006      	b.n	800fd86 <RCC_APB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800fd78:	4b05      	ldr	r3, [pc, #20]	; (800fd90 <RCC_APB2PeriphClockCmd+0x38>)
 800fd7a:	4a05      	ldr	r2, [pc, #20]	; (800fd90 <RCC_APB2PeriphClockCmd+0x38>)
 800fd7c:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800fd7e:	687a      	ldr	r2, [r7, #4]
 800fd80:	43d2      	mvns	r2, r2
 800fd82:	400a      	ands	r2, r1
 800fd84:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 800fd86:	370c      	adds	r7, #12
 800fd88:	46bd      	mov	sp, r7
 800fd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd8e:	4770      	bx	lr
 800fd90:	40023800 	.word	0x40023800

0800fd94 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800fd94:	b480      	push	{r7}
 800fd96:	b083      	sub	sp, #12
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
 800fd9c:	460b      	mov	r3, r1
 800fd9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800fda0:	78fb      	ldrb	r3, [r7, #3]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d006      	beq.n	800fdb4 <RCC_AHB1PeriphResetCmd+0x20>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 800fda6:	4b09      	ldr	r3, [pc, #36]	; (800fdcc <RCC_AHB1PeriphResetCmd+0x38>)
 800fda8:	4a08      	ldr	r2, [pc, #32]	; (800fdcc <RCC_AHB1PeriphResetCmd+0x38>)
 800fdaa:	6911      	ldr	r1, [r2, #16]
 800fdac:	687a      	ldr	r2, [r7, #4]
 800fdae:	430a      	orrs	r2, r1
 800fdb0:	611a      	str	r2, [r3, #16]
 800fdb2:	e006      	b.n	800fdc2 <RCC_AHB1PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 800fdb4:	4b05      	ldr	r3, [pc, #20]	; (800fdcc <RCC_AHB1PeriphResetCmd+0x38>)
 800fdb6:	4a05      	ldr	r2, [pc, #20]	; (800fdcc <RCC_AHB1PeriphResetCmd+0x38>)
 800fdb8:	6911      	ldr	r1, [r2, #16]
 800fdba:	687a      	ldr	r2, [r7, #4]
 800fdbc:	43d2      	mvns	r2, r2
 800fdbe:	400a      	ands	r2, r1
 800fdc0:	611a      	str	r2, [r3, #16]
  }
}
 800fdc2:	370c      	adds	r7, #12
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdca:	4770      	bx	lr
 800fdcc:	40023800 	.word	0x40023800

0800fdd0 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 800fdd0:	b480      	push	{r7}
 800fdd2:	b083      	sub	sp, #12
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
 800fdd8:	460b      	mov	r3, r1
 800fdda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800fddc:	78fb      	ldrb	r3, [r7, #3]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d006      	beq.n	800fdf0 <RCC_AHB2PeriphResetCmd+0x20>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 800fde2:	4b09      	ldr	r3, [pc, #36]	; (800fe08 <RCC_AHB2PeriphResetCmd+0x38>)
 800fde4:	4a08      	ldr	r2, [pc, #32]	; (800fe08 <RCC_AHB2PeriphResetCmd+0x38>)
 800fde6:	6951      	ldr	r1, [r2, #20]
 800fde8:	687a      	ldr	r2, [r7, #4]
 800fdea:	430a      	orrs	r2, r1
 800fdec:	615a      	str	r2, [r3, #20]
 800fdee:	e006      	b.n	800fdfe <RCC_AHB2PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 800fdf0:	4b05      	ldr	r3, [pc, #20]	; (800fe08 <RCC_AHB2PeriphResetCmd+0x38>)
 800fdf2:	4a05      	ldr	r2, [pc, #20]	; (800fe08 <RCC_AHB2PeriphResetCmd+0x38>)
 800fdf4:	6951      	ldr	r1, [r2, #20]
 800fdf6:	687a      	ldr	r2, [r7, #4]
 800fdf8:	43d2      	mvns	r2, r2
 800fdfa:	400a      	ands	r2, r1
 800fdfc:	615a      	str	r2, [r3, #20]
  }
}
 800fdfe:	370c      	adds	r7, #12
 800fe00:	46bd      	mov	sp, r7
 800fe02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe06:	4770      	bx	lr
 800fe08:	40023800 	.word	0x40023800

0800fe0c <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 800fe0c:	b480      	push	{r7}
 800fe0e:	b083      	sub	sp, #12
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
 800fe14:	460b      	mov	r3, r1
 800fe16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800fe18:	78fb      	ldrb	r3, [r7, #3]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d006      	beq.n	800fe2c <RCC_AHB3PeriphResetCmd+0x20>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 800fe1e:	4b09      	ldr	r3, [pc, #36]	; (800fe44 <RCC_AHB3PeriphResetCmd+0x38>)
 800fe20:	4a08      	ldr	r2, [pc, #32]	; (800fe44 <RCC_AHB3PeriphResetCmd+0x38>)
 800fe22:	6991      	ldr	r1, [r2, #24]
 800fe24:	687a      	ldr	r2, [r7, #4]
 800fe26:	430a      	orrs	r2, r1
 800fe28:	619a      	str	r2, [r3, #24]
 800fe2a:	e006      	b.n	800fe3a <RCC_AHB3PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 800fe2c:	4b05      	ldr	r3, [pc, #20]	; (800fe44 <RCC_AHB3PeriphResetCmd+0x38>)
 800fe2e:	4a05      	ldr	r2, [pc, #20]	; (800fe44 <RCC_AHB3PeriphResetCmd+0x38>)
 800fe30:	6991      	ldr	r1, [r2, #24]
 800fe32:	687a      	ldr	r2, [r7, #4]
 800fe34:	43d2      	mvns	r2, r2
 800fe36:	400a      	ands	r2, r1
 800fe38:	619a      	str	r2, [r3, #24]
  }
}
 800fe3a:	370c      	adds	r7, #12
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe42:	4770      	bx	lr
 800fe44:	40023800 	.word	0x40023800

0800fe48 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800fe48:	b480      	push	{r7}
 800fe4a:	b083      	sub	sp, #12
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
 800fe50:	460b      	mov	r3, r1
 800fe52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800fe54:	78fb      	ldrb	r3, [r7, #3]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d006      	beq.n	800fe68 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800fe5a:	4b09      	ldr	r3, [pc, #36]	; (800fe80 <RCC_APB1PeriphResetCmd+0x38>)
 800fe5c:	4a08      	ldr	r2, [pc, #32]	; (800fe80 <RCC_APB1PeriphResetCmd+0x38>)
 800fe5e:	6a11      	ldr	r1, [r2, #32]
 800fe60:	687a      	ldr	r2, [r7, #4]
 800fe62:	430a      	orrs	r2, r1
 800fe64:	621a      	str	r2, [r3, #32]
 800fe66:	e006      	b.n	800fe76 <RCC_APB1PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 800fe68:	4b05      	ldr	r3, [pc, #20]	; (800fe80 <RCC_APB1PeriphResetCmd+0x38>)
 800fe6a:	4a05      	ldr	r2, [pc, #20]	; (800fe80 <RCC_APB1PeriphResetCmd+0x38>)
 800fe6c:	6a11      	ldr	r1, [r2, #32]
 800fe6e:	687a      	ldr	r2, [r7, #4]
 800fe70:	43d2      	mvns	r2, r2
 800fe72:	400a      	ands	r2, r1
 800fe74:	621a      	str	r2, [r3, #32]
  }
}
 800fe76:	370c      	adds	r7, #12
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7e:	4770      	bx	lr
 800fe80:	40023800 	.word	0x40023800

0800fe84 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800fe84:	b480      	push	{r7}
 800fe86:	b083      	sub	sp, #12
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
 800fe8c:	460b      	mov	r3, r1
 800fe8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800fe90:	78fb      	ldrb	r3, [r7, #3]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d006      	beq.n	800fea4 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800fe96:	4b09      	ldr	r3, [pc, #36]	; (800febc <RCC_APB2PeriphResetCmd+0x38>)
 800fe98:	4a08      	ldr	r2, [pc, #32]	; (800febc <RCC_APB2PeriphResetCmd+0x38>)
 800fe9a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800fe9c:	687a      	ldr	r2, [r7, #4]
 800fe9e:	430a      	orrs	r2, r1
 800fea0:	625a      	str	r2, [r3, #36]	; 0x24
 800fea2:	e006      	b.n	800feb2 <RCC_APB2PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800fea4:	4b05      	ldr	r3, [pc, #20]	; (800febc <RCC_APB2PeriphResetCmd+0x38>)
 800fea6:	4a05      	ldr	r2, [pc, #20]	; (800febc <RCC_APB2PeriphResetCmd+0x38>)
 800fea8:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800feaa:	687a      	ldr	r2, [r7, #4]
 800feac:	43d2      	mvns	r2, r2
 800feae:	400a      	ands	r2, r1
 800feb0:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800feb2:	370c      	adds	r7, #12
 800feb4:	46bd      	mov	sp, r7
 800feb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feba:	4770      	bx	lr
 800febc:	40023800 	.word	0x40023800

0800fec0 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800fec0:	b480      	push	{r7}
 800fec2:	b083      	sub	sp, #12
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
 800fec8:	460b      	mov	r3, r1
 800feca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800fecc:	78fb      	ldrb	r3, [r7, #3]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d006      	beq.n	800fee0 <RCC_AHB1PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 800fed2:	4b09      	ldr	r3, [pc, #36]	; (800fef8 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 800fed4:	4a08      	ldr	r2, [pc, #32]	; (800fef8 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 800fed6:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800fed8:	687a      	ldr	r2, [r7, #4]
 800feda:	430a      	orrs	r2, r1
 800fedc:	651a      	str	r2, [r3, #80]	; 0x50
 800fede:	e006      	b.n	800feee <RCC_AHB1PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 800fee0:	4b05      	ldr	r3, [pc, #20]	; (800fef8 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 800fee2:	4a05      	ldr	r2, [pc, #20]	; (800fef8 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 800fee4:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800fee6:	687a      	ldr	r2, [r7, #4]
 800fee8:	43d2      	mvns	r2, r2
 800feea:	400a      	ands	r2, r1
 800feec:	651a      	str	r2, [r3, #80]	; 0x50
  }
}
 800feee:	370c      	adds	r7, #12
 800fef0:	46bd      	mov	sp, r7
 800fef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef6:	4770      	bx	lr
 800fef8:	40023800 	.word	0x40023800

0800fefc <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 800fefc:	b480      	push	{r7}
 800fefe:	b083      	sub	sp, #12
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
 800ff04:	460b      	mov	r3, r1
 800ff06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800ff08:	78fb      	ldrb	r3, [r7, #3]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d006      	beq.n	800ff1c <RCC_AHB2PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 800ff0e:	4b09      	ldr	r3, [pc, #36]	; (800ff34 <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 800ff10:	4a08      	ldr	r2, [pc, #32]	; (800ff34 <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 800ff12:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800ff14:	687a      	ldr	r2, [r7, #4]
 800ff16:	430a      	orrs	r2, r1
 800ff18:	655a      	str	r2, [r3, #84]	; 0x54
 800ff1a:	e006      	b.n	800ff2a <RCC_AHB2PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 800ff1c:	4b05      	ldr	r3, [pc, #20]	; (800ff34 <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 800ff1e:	4a05      	ldr	r2, [pc, #20]	; (800ff34 <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 800ff20:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800ff22:	687a      	ldr	r2, [r7, #4]
 800ff24:	43d2      	mvns	r2, r2
 800ff26:	400a      	ands	r2, r1
 800ff28:	655a      	str	r2, [r3, #84]	; 0x54
  }
}
 800ff2a:	370c      	adds	r7, #12
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff32:	4770      	bx	lr
 800ff34:	40023800 	.word	0x40023800

0800ff38 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 800ff38:	b480      	push	{r7}
 800ff3a:	b083      	sub	sp, #12
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
 800ff40:	460b      	mov	r3, r1
 800ff42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800ff44:	78fb      	ldrb	r3, [r7, #3]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d006      	beq.n	800ff58 <RCC_AHB3PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 800ff4a:	4b09      	ldr	r3, [pc, #36]	; (800ff70 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 800ff4c:	4a08      	ldr	r2, [pc, #32]	; (800ff70 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 800ff4e:	6d91      	ldr	r1, [r2, #88]	; 0x58
 800ff50:	687a      	ldr	r2, [r7, #4]
 800ff52:	430a      	orrs	r2, r1
 800ff54:	659a      	str	r2, [r3, #88]	; 0x58
 800ff56:	e006      	b.n	800ff66 <RCC_AHB3PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 800ff58:	4b05      	ldr	r3, [pc, #20]	; (800ff70 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 800ff5a:	4a05      	ldr	r2, [pc, #20]	; (800ff70 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 800ff5c:	6d91      	ldr	r1, [r2, #88]	; 0x58
 800ff5e:	687a      	ldr	r2, [r7, #4]
 800ff60:	43d2      	mvns	r2, r2
 800ff62:	400a      	ands	r2, r1
 800ff64:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 800ff66:	370c      	adds	r7, #12
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6e:	4770      	bx	lr
 800ff70:	40023800 	.word	0x40023800

0800ff74 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800ff74:	b480      	push	{r7}
 800ff76:	b083      	sub	sp, #12
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	6078      	str	r0, [r7, #4]
 800ff7c:	460b      	mov	r3, r1
 800ff7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800ff80:	78fb      	ldrb	r3, [r7, #3]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d006      	beq.n	800ff94 <RCC_APB1PeriphClockLPModeCmd+0x20>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 800ff86:	4b09      	ldr	r3, [pc, #36]	; (800ffac <RCC_APB1PeriphClockLPModeCmd+0x38>)
 800ff88:	4a08      	ldr	r2, [pc, #32]	; (800ffac <RCC_APB1PeriphClockLPModeCmd+0x38>)
 800ff8a:	6e11      	ldr	r1, [r2, #96]	; 0x60
 800ff8c:	687a      	ldr	r2, [r7, #4]
 800ff8e:	430a      	orrs	r2, r1
 800ff90:	661a      	str	r2, [r3, #96]	; 0x60
 800ff92:	e006      	b.n	800ffa2 <RCC_APB1PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 800ff94:	4b05      	ldr	r3, [pc, #20]	; (800ffac <RCC_APB1PeriphClockLPModeCmd+0x38>)
 800ff96:	4a05      	ldr	r2, [pc, #20]	; (800ffac <RCC_APB1PeriphClockLPModeCmd+0x38>)
 800ff98:	6e11      	ldr	r1, [r2, #96]	; 0x60
 800ff9a:	687a      	ldr	r2, [r7, #4]
 800ff9c:	43d2      	mvns	r2, r2
 800ff9e:	400a      	ands	r2, r1
 800ffa0:	661a      	str	r2, [r3, #96]	; 0x60
  }
}
 800ffa2:	370c      	adds	r7, #12
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffaa:	4770      	bx	lr
 800ffac:	40023800 	.word	0x40023800

0800ffb0 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800ffb0:	b480      	push	{r7}
 800ffb2:	b083      	sub	sp, #12
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
 800ffb8:	460b      	mov	r3, r1
 800ffba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800ffbc:	78fb      	ldrb	r3, [r7, #3]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d006      	beq.n	800ffd0 <RCC_APB2PeriphClockLPModeCmd+0x20>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 800ffc2:	4b09      	ldr	r3, [pc, #36]	; (800ffe8 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 800ffc4:	4a08      	ldr	r2, [pc, #32]	; (800ffe8 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 800ffc6:	6e51      	ldr	r1, [r2, #100]	; 0x64
 800ffc8:	687a      	ldr	r2, [r7, #4]
 800ffca:	430a      	orrs	r2, r1
 800ffcc:	665a      	str	r2, [r3, #100]	; 0x64
 800ffce:	e006      	b.n	800ffde <RCC_APB2PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 800ffd0:	4b05      	ldr	r3, [pc, #20]	; (800ffe8 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 800ffd2:	4a05      	ldr	r2, [pc, #20]	; (800ffe8 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 800ffd4:	6e51      	ldr	r1, [r2, #100]	; 0x64
 800ffd6:	687a      	ldr	r2, [r7, #4]
 800ffd8:	43d2      	mvns	r2, r2
 800ffda:	400a      	ands	r2, r1
 800ffdc:	665a      	str	r2, [r3, #100]	; 0x64
  }
}
 800ffde:	370c      	adds	r7, #12
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe6:	4770      	bx	lr
 800ffe8:	40023800 	.word	0x40023800

0800ffec <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 800ffec:	b480      	push	{r7}
 800ffee:	b083      	sub	sp, #12
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	4602      	mov	r2, r0
 800fff4:	460b      	mov	r3, r1
 800fff6:	71fa      	strb	r2, [r7, #7]
 800fff8:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800fffa:	79bb      	ldrb	r3, [r7, #6]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d008      	beq.n	8010012 <RCC_ITConfig+0x26>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8010000:	4b0b      	ldr	r3, [pc, #44]	; (8010030 <RCC_ITConfig+0x44>)
 8010002:	4a0b      	ldr	r2, [pc, #44]	; (8010030 <RCC_ITConfig+0x44>)
 8010004:	7812      	ldrb	r2, [r2, #0]
 8010006:	b2d1      	uxtb	r1, r2
 8010008:	79fa      	ldrb	r2, [r7, #7]
 801000a:	430a      	orrs	r2, r1
 801000c:	b2d2      	uxtb	r2, r2
 801000e:	701a      	strb	r2, [r3, #0]
 8010010:	e009      	b.n	8010026 <RCC_ITConfig+0x3a>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8010012:	4b07      	ldr	r3, [pc, #28]	; (8010030 <RCC_ITConfig+0x44>)
 8010014:	4a06      	ldr	r2, [pc, #24]	; (8010030 <RCC_ITConfig+0x44>)
 8010016:	7812      	ldrb	r2, [r2, #0]
 8010018:	b2d1      	uxtb	r1, r2
 801001a:	79fa      	ldrb	r2, [r7, #7]
 801001c:	43d2      	mvns	r2, r2
 801001e:	b2d2      	uxtb	r2, r2
 8010020:	400a      	ands	r2, r1
 8010022:	b2d2      	uxtb	r2, r2
 8010024:	701a      	strb	r2, [r3, #0]
  }
}
 8010026:	370c      	adds	r7, #12
 8010028:	46bd      	mov	sp, r7
 801002a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002e:	4770      	bx	lr
 8010030:	4002380d 	.word	0x4002380d

08010034 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8010034:	b480      	push	{r7}
 8010036:	b087      	sub	sp, #28
 8010038:	af00      	add	r7, sp, #0
 801003a:	4603      	mov	r3, r0
 801003c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 801003e:	2300      	movs	r3, #0
 8010040:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8010042:	2300      	movs	r3, #0
 8010044:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8010046:	2300      	movs	r3, #0
 8010048:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 801004a:	79fb      	ldrb	r3, [r7, #7]
 801004c:	095b      	lsrs	r3, r3, #5
 801004e:	b2db      	uxtb	r3, r3
 8010050:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	2b01      	cmp	r3, #1
 8010056:	d103      	bne.n	8010060 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8010058:	4b12      	ldr	r3, [pc, #72]	; (80100a4 <RCC_GetFlagStatus+0x70>)
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	617b      	str	r3, [r7, #20]
 801005e:	e009      	b.n	8010074 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	2b02      	cmp	r3, #2
 8010064:	d103      	bne.n	801006e <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 8010066:	4b0f      	ldr	r3, [pc, #60]	; (80100a4 <RCC_GetFlagStatus+0x70>)
 8010068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801006a:	617b      	str	r3, [r7, #20]
 801006c:	e002      	b.n	8010074 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 801006e:	4b0d      	ldr	r3, [pc, #52]	; (80100a4 <RCC_GetFlagStatus+0x70>)
 8010070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010072:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8010074:	79fb      	ldrb	r3, [r7, #7]
 8010076:	f003 031f 	and.w	r3, r3, #31
 801007a:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	697a      	ldr	r2, [r7, #20]
 8010080:	fa22 f303 	lsr.w	r3, r2, r3
 8010084:	f003 0301 	and.w	r3, r3, #1
 8010088:	2b00      	cmp	r3, #0
 801008a:	d002      	beq.n	8010092 <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 801008c:	2301      	movs	r3, #1
 801008e:	74fb      	strb	r3, [r7, #19]
 8010090:	e001      	b.n	8010096 <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 8010092:	2300      	movs	r3, #0
 8010094:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8010096:	7cfb      	ldrb	r3, [r7, #19]
}
 8010098:	4618      	mov	r0, r3
 801009a:	371c      	adds	r7, #28
 801009c:	46bd      	mov	sp, r7
 801009e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a2:	4770      	bx	lr
 80100a4:	40023800 	.word	0x40023800

080100a8 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 80100a8:	b480      	push	{r7}
 80100aa:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 80100ac:	4b04      	ldr	r3, [pc, #16]	; (80100c0 <RCC_ClearFlag+0x18>)
 80100ae:	4a04      	ldr	r2, [pc, #16]	; (80100c0 <RCC_ClearFlag+0x18>)
 80100b0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80100b2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80100b6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80100b8:	46bd      	mov	sp, r7
 80100ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100be:	4770      	bx	lr
 80100c0:	40023800 	.word	0x40023800

080100c4 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx devices)    
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 80100c4:	b480      	push	{r7}
 80100c6:	b085      	sub	sp, #20
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	4603      	mov	r3, r0
 80100cc:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 80100ce:	2300      	movs	r3, #0
 80100d0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 80100d2:	4b09      	ldr	r3, [pc, #36]	; (80100f8 <RCC_GetITStatus+0x34>)
 80100d4:	68da      	ldr	r2, [r3, #12]
 80100d6:	79fb      	ldrb	r3, [r7, #7]
 80100d8:	4013      	ands	r3, r2
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d002      	beq.n	80100e4 <RCC_GetITStatus+0x20>
  {
    bitstatus = SET;
 80100de:	2301      	movs	r3, #1
 80100e0:	73fb      	strb	r3, [r7, #15]
 80100e2:	e001      	b.n	80100e8 <RCC_GetITStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 80100e4:	2300      	movs	r3, #0
 80100e6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 80100e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80100ea:	4618      	mov	r0, r3
 80100ec:	3714      	adds	r7, #20
 80100ee:	46bd      	mov	sp, r7
 80100f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f4:	4770      	bx	lr
 80100f6:	bf00      	nop
 80100f8:	40023800 	.word	0x40023800

080100fc <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx devices)   
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 80100fc:	b480      	push	{r7}
 80100fe:	b083      	sub	sp, #12
 8010100:	af00      	add	r7, sp, #0
 8010102:	4603      	mov	r3, r0
 8010104:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8010106:	4b04      	ldr	r3, [pc, #16]	; (8010118 <RCC_ClearITPendingBit+0x1c>)
 8010108:	79fa      	ldrb	r2, [r7, #7]
 801010a:	701a      	strb	r2, [r3, #0]
}
 801010c:	370c      	adds	r7, #12
 801010e:	46bd      	mov	sp, r7
 8010110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010114:	4770      	bx	lr
 8010116:	bf00      	nop
 8010118:	4002380e 	.word	0x4002380e

0801011c <RNG_DeInit>:
  * @brief  De-initializes the RNG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void RNG_DeInit(void)
{
 801011c:	b580      	push	{r7, lr}
 801011e:	af00      	add	r7, sp, #0
  /* Enable RNG reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
 8010120:	2040      	movs	r0, #64	; 0x40
 8010122:	2101      	movs	r1, #1
 8010124:	f7ff fe54 	bl	800fdd0 <RCC_AHB2PeriphResetCmd>

  /* Release RNG from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
 8010128:	2040      	movs	r0, #64	; 0x40
 801012a:	2100      	movs	r1, #0
 801012c:	f7ff fe50 	bl	800fdd0 <RCC_AHB2PeriphResetCmd>
}
 8010130:	bd80      	pop	{r7, pc}
 8010132:	bf00      	nop

08010134 <RNG_Cmd>:
  * @param  NewState: new state of the RNG peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_Cmd(FunctionalState NewState)
{
 8010134:	b480      	push	{r7}
 8010136:	b083      	sub	sp, #12
 8010138:	af00      	add	r7, sp, #0
 801013a:	4603      	mov	r3, r0
 801013c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801013e:	79fb      	ldrb	r3, [r7, #7]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d006      	beq.n	8010152 <RNG_Cmd+0x1e>
  {
    /* Enable the RNG */
    RNG->CR |= RNG_CR_RNGEN;
 8010144:	4b08      	ldr	r3, [pc, #32]	; (8010168 <RNG_Cmd+0x34>)
 8010146:	4a08      	ldr	r2, [pc, #32]	; (8010168 <RNG_Cmd+0x34>)
 8010148:	6812      	ldr	r2, [r2, #0]
 801014a:	f042 0204 	orr.w	r2, r2, #4
 801014e:	601a      	str	r2, [r3, #0]
 8010150:	e005      	b.n	801015e <RNG_Cmd+0x2a>
  }
  else
  {
    /* Disable the RNG */
    RNG->CR &= ~RNG_CR_RNGEN;
 8010152:	4b05      	ldr	r3, [pc, #20]	; (8010168 <RNG_Cmd+0x34>)
 8010154:	4a04      	ldr	r2, [pc, #16]	; (8010168 <RNG_Cmd+0x34>)
 8010156:	6812      	ldr	r2, [r2, #0]
 8010158:	f022 0204 	bic.w	r2, r2, #4
 801015c:	601a      	str	r2, [r3, #0]
  }
}
 801015e:	370c      	adds	r7, #12
 8010160:	46bd      	mov	sp, r7
 8010162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010166:	4770      	bx	lr
 8010168:	50060800 	.word	0x50060800

0801016c <RNG_GetRandomNumber>:
  *         
  * @param  None
  * @retval 32-bit random number.
  */
uint32_t RNG_GetRandomNumber(void)
{
 801016c:	b480      	push	{r7}
 801016e:	af00      	add	r7, sp, #0
  /* Return the 32 bit random number from the DR register */
  return RNG->DR;
 8010170:	4b03      	ldr	r3, [pc, #12]	; (8010180 <RNG_GetRandomNumber+0x14>)
 8010172:	689b      	ldr	r3, [r3, #8]
}
 8010174:	4618      	mov	r0, r3
 8010176:	46bd      	mov	sp, r7
 8010178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801017c:	4770      	bx	lr
 801017e:	bf00      	nop
 8010180:	50060800 	.word	0x50060800

08010184 <RNG_ITConfig>:
  * @param  NewState: new state of the RNG interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_ITConfig(FunctionalState NewState)
{
 8010184:	b480      	push	{r7}
 8010186:	b083      	sub	sp, #12
 8010188:	af00      	add	r7, sp, #0
 801018a:	4603      	mov	r3, r0
 801018c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801018e:	79fb      	ldrb	r3, [r7, #7]
 8010190:	2b00      	cmp	r3, #0
 8010192:	d006      	beq.n	80101a2 <RNG_ITConfig+0x1e>
  {
    /* Enable the RNG interrupt */
    RNG->CR |= RNG_CR_IE;
 8010194:	4b08      	ldr	r3, [pc, #32]	; (80101b8 <RNG_ITConfig+0x34>)
 8010196:	4a08      	ldr	r2, [pc, #32]	; (80101b8 <RNG_ITConfig+0x34>)
 8010198:	6812      	ldr	r2, [r2, #0]
 801019a:	f042 0208 	orr.w	r2, r2, #8
 801019e:	601a      	str	r2, [r3, #0]
 80101a0:	e005      	b.n	80101ae <RNG_ITConfig+0x2a>
  }
  else
  {
    /* Disable the RNG interrupt */
    RNG->CR &= ~RNG_CR_IE;
 80101a2:	4b05      	ldr	r3, [pc, #20]	; (80101b8 <RNG_ITConfig+0x34>)
 80101a4:	4a04      	ldr	r2, [pc, #16]	; (80101b8 <RNG_ITConfig+0x34>)
 80101a6:	6812      	ldr	r2, [r2, #0]
 80101a8:	f022 0208 	bic.w	r2, r2, #8
 80101ac:	601a      	str	r2, [r3, #0]
  }
}
 80101ae:	370c      	adds	r7, #12
 80101b0:	46bd      	mov	sp, r7
 80101b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b6:	4770      	bx	lr
 80101b8:	50060800 	.word	0x50060800

080101bc <RNG_GetFlagStatus>:
  *            @arg RNG_FLAG_CECS: Clock Error Current flag.
  *            @arg RNG_FLAG_SECS: Seed Error Current flag.
  * @retval The new state of RNG_FLAG (SET or RESET).
  */
FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
{
 80101bc:	b480      	push	{r7}
 80101be:	b085      	sub	sp, #20
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	4603      	mov	r3, r0
 80101c4:	71fb      	strb	r3, [r7, #7]
  FlagStatus bitstatus = RESET;
 80101c6:	2300      	movs	r3, #0
 80101c8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RNG_GET_FLAG(RNG_FLAG));

  /* Check the status of the specified RNG flag */
  if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
 80101ca:	4b09      	ldr	r3, [pc, #36]	; (80101f0 <RNG_GetFlagStatus+0x34>)
 80101cc:	685a      	ldr	r2, [r3, #4]
 80101ce:	79fb      	ldrb	r3, [r7, #7]
 80101d0:	4013      	ands	r3, r2
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d002      	beq.n	80101dc <RNG_GetFlagStatus+0x20>
  {
    /* RNG_FLAG is set */
    bitstatus = SET;
 80101d6:	2301      	movs	r3, #1
 80101d8:	73fb      	strb	r3, [r7, #15]
 80101da:	e001      	b.n	80101e0 <RNG_GetFlagStatus+0x24>
  }
  else
  {
    /* RNG_FLAG is reset */
    bitstatus = RESET;
 80101dc:	2300      	movs	r3, #0
 80101de:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RNG_FLAG status */
  return  bitstatus;
 80101e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80101e2:	4618      	mov	r0, r3
 80101e4:	3714      	adds	r7, #20
 80101e6:	46bd      	mov	sp, r7
 80101e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ec:	4770      	bx	lr
 80101ee:	bf00      	nop
 80101f0:	50060800 	.word	0x50060800

080101f4 <RNG_ClearFlag>:
  *         This flag is cleared only by reading the Random number data (using 
  *         RNG_GetRandomNumber() function).                           
  * @retval None
  */
void RNG_ClearFlag(uint8_t RNG_FLAG)
{
 80101f4:	b480      	push	{r7}
 80101f6:	b083      	sub	sp, #12
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	4603      	mov	r3, r0
 80101fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
  /* Clear the selected RNG flags */
  RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
 80101fe:	4b05      	ldr	r3, [pc, #20]	; (8010214 <RNG_ClearFlag+0x20>)
 8010200:	79fa      	ldrb	r2, [r7, #7]
 8010202:	0112      	lsls	r2, r2, #4
 8010204:	43d2      	mvns	r2, r2
 8010206:	605a      	str	r2, [r3, #4]
}
 8010208:	370c      	adds	r7, #12
 801020a:	46bd      	mov	sp, r7
 801020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010210:	4770      	bx	lr
 8010212:	bf00      	nop
 8010214:	50060800 	.word	0x50060800

08010218 <RNG_GetITStatus>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.                   
  * @retval The new state of RNG_IT (SET or RESET).
  */
ITStatus RNG_GetITStatus(uint8_t RNG_IT)
{
 8010218:	b480      	push	{r7}
 801021a:	b085      	sub	sp, #20
 801021c:	af00      	add	r7, sp, #0
 801021e:	4603      	mov	r3, r0
 8010220:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8010222:	2300      	movs	r3, #0
 8010224:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RNG_GET_IT(RNG_IT));

  /* Check the status of the specified RNG interrupt */
  if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
 8010226:	4b09      	ldr	r3, [pc, #36]	; (801024c <RNG_GetITStatus+0x34>)
 8010228:	685a      	ldr	r2, [r3, #4]
 801022a:	79fb      	ldrb	r3, [r7, #7]
 801022c:	4013      	ands	r3, r2
 801022e:	2b00      	cmp	r3, #0
 8010230:	d002      	beq.n	8010238 <RNG_GetITStatus+0x20>
  {
    /* RNG_IT is set */
    bitstatus = SET;
 8010232:	2301      	movs	r3, #1
 8010234:	73fb      	strb	r3, [r7, #15]
 8010236:	e001      	b.n	801023c <RNG_GetITStatus+0x24>
  }
  else
  {
    /* RNG_IT is reset */
    bitstatus = RESET;
 8010238:	2300      	movs	r3, #0
 801023a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RNG_IT status */
  return bitstatus;
 801023c:	7bfb      	ldrb	r3, [r7, #15]
}
 801023e:	4618      	mov	r0, r3
 8010240:	3714      	adds	r7, #20
 8010242:	46bd      	mov	sp, r7
 8010244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010248:	4770      	bx	lr
 801024a:	bf00      	nop
 801024c:	50060800 	.word	0x50060800

08010250 <RNG_ClearITPendingBit>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.
  * @retval None
  */
void RNG_ClearITPendingBit(uint8_t RNG_IT)
{
 8010250:	b480      	push	{r7}
 8010252:	b083      	sub	sp, #12
 8010254:	af00      	add	r7, sp, #0
 8010256:	4603      	mov	r3, r0
 8010258:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RNG_IT(RNG_IT));

  /* Clear the selected RNG interrupt pending bit */
  RNG->SR = (uint8_t)~RNG_IT;
 801025a:	4b05      	ldr	r3, [pc, #20]	; (8010270 <RNG_ClearITPendingBit+0x20>)
 801025c:	79fa      	ldrb	r2, [r7, #7]
 801025e:	43d2      	mvns	r2, r2
 8010260:	b2d2      	uxtb	r2, r2
 8010262:	605a      	str	r2, [r3, #4]
}
 8010264:	370c      	adds	r7, #12
 8010266:	46bd      	mov	sp, r7
 8010268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801026c:	4770      	bx	lr
 801026e:	bf00      	nop
 8010270:	50060800 	.word	0x50060800

08010274 <RTC_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are deinitialized
  *          - ERROR: RTC registers are not deinitialized
  */
ErrorStatus RTC_DeInit(void)
{
 8010274:	b580      	push	{r7, lr}
 8010276:	b084      	sub	sp, #16
 8010278:	af00      	add	r7, sp, #0
  __IO uint32_t wutcounter = 0x00;
 801027a:	2300      	movs	r3, #0
 801027c:	607b      	str	r3, [r7, #4]
  uint32_t wutwfstatus = 0x00;
 801027e:	2300      	movs	r3, #0
 8010280:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8010282:	2300      	movs	r3, #0
 8010284:	73fb      	strb	r3, [r7, #15]
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010286:	4b36      	ldr	r3, [pc, #216]	; (8010360 <RTC_DeInit+0xec>)
 8010288:	22ca      	movs	r2, #202	; 0xca
 801028a:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 801028c:	4b34      	ldr	r3, [pc, #208]	; (8010360 <RTC_DeInit+0xec>)
 801028e:	2253      	movs	r2, #83	; 0x53
 8010290:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8010292:	f000 f8d1 	bl	8010438 <RTC_EnterInitMode>
 8010296:	4603      	mov	r3, r0
 8010298:	2b00      	cmp	r3, #0
 801029a:	d102      	bne.n	80102a2 <RTC_DeInit+0x2e>
  {
    status = ERROR;
 801029c:	2300      	movs	r3, #0
 801029e:	73fb      	strb	r3, [r7, #15]
 80102a0:	e055      	b.n	801034e <RTC_DeInit+0xda>
  }  
  else
  {
    /* Reset TR, DR and CR registers */
    RTC->TR = (uint32_t)0x00000000;
 80102a2:	4b2f      	ldr	r3, [pc, #188]	; (8010360 <RTC_DeInit+0xec>)
 80102a4:	2200      	movs	r2, #0
 80102a6:	601a      	str	r2, [r3, #0]
    RTC->DR = (uint32_t)0x00002101;
 80102a8:	4b2d      	ldr	r3, [pc, #180]	; (8010360 <RTC_DeInit+0xec>)
 80102aa:	f242 1201 	movw	r2, #8449	; 0x2101
 80102ae:	605a      	str	r2, [r3, #4]
    /* Reset All CR bits except CR[2:0] */
    RTC->CR &= (uint32_t)0x00000007;
 80102b0:	4b2b      	ldr	r3, [pc, #172]	; (8010360 <RTC_DeInit+0xec>)
 80102b2:	4a2b      	ldr	r2, [pc, #172]	; (8010360 <RTC_DeInit+0xec>)
 80102b4:	6892      	ldr	r2, [r2, #8]
 80102b6:	f002 0207 	and.w	r2, r2, #7
 80102ba:	609a      	str	r2, [r3, #8]
  
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 80102bc:	4b28      	ldr	r3, [pc, #160]	; (8010360 <RTC_DeInit+0xec>)
 80102be:	68db      	ldr	r3, [r3, #12]
 80102c0:	f003 0304 	and.w	r3, r3, #4
 80102c4:	60bb      	str	r3, [r7, #8]
      wutcounter++;  
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	3301      	adds	r3, #1
 80102ca:	607b      	str	r3, [r7, #4]
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80102d2:	d002      	beq.n	80102da <RTC_DeInit+0x66>
 80102d4:	68bb      	ldr	r3, [r7, #8]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d0f0      	beq.n	80102bc <RTC_DeInit+0x48>
    
    if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 80102da:	4b21      	ldr	r3, [pc, #132]	; (8010360 <RTC_DeInit+0xec>)
 80102dc:	68db      	ldr	r3, [r3, #12]
 80102de:	f003 0304 	and.w	r3, r3, #4
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d102      	bne.n	80102ec <RTC_DeInit+0x78>
    {
      status = ERROR;
 80102e6:	2300      	movs	r3, #0
 80102e8:	73fb      	strb	r3, [r7, #15]
 80102ea:	e030      	b.n	801034e <RTC_DeInit+0xda>
    }
    else
    {
      /* Reset all RTC CR register bits */
      RTC->CR &= (uint32_t)0x00000000;
 80102ec:	4b1c      	ldr	r3, [pc, #112]	; (8010360 <RTC_DeInit+0xec>)
 80102ee:	689b      	ldr	r3, [r3, #8]
 80102f0:	4b1b      	ldr	r3, [pc, #108]	; (8010360 <RTC_DeInit+0xec>)
 80102f2:	2200      	movs	r2, #0
 80102f4:	609a      	str	r2, [r3, #8]
      RTC->WUTR = (uint32_t)0x0000FFFF;
 80102f6:	4b1a      	ldr	r3, [pc, #104]	; (8010360 <RTC_DeInit+0xec>)
 80102f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80102fc:	615a      	str	r2, [r3, #20]
      RTC->PRER = (uint32_t)0x007F00FF;
 80102fe:	4b18      	ldr	r3, [pc, #96]	; (8010360 <RTC_DeInit+0xec>)
 8010300:	4a18      	ldr	r2, [pc, #96]	; (8010364 <RTC_DeInit+0xf0>)
 8010302:	611a      	str	r2, [r3, #16]
      RTC->CALIBR = (uint32_t)0x00000000;
 8010304:	4b16      	ldr	r3, [pc, #88]	; (8010360 <RTC_DeInit+0xec>)
 8010306:	2200      	movs	r2, #0
 8010308:	619a      	str	r2, [r3, #24]
      RTC->ALRMAR = (uint32_t)0x00000000;        
 801030a:	4b15      	ldr	r3, [pc, #84]	; (8010360 <RTC_DeInit+0xec>)
 801030c:	2200      	movs	r2, #0
 801030e:	61da      	str	r2, [r3, #28]
      RTC->ALRMBR = (uint32_t)0x00000000;
 8010310:	4b13      	ldr	r3, [pc, #76]	; (8010360 <RTC_DeInit+0xec>)
 8010312:	2200      	movs	r2, #0
 8010314:	621a      	str	r2, [r3, #32]
      RTC->SHIFTR = (uint32_t)0x00000000;
 8010316:	4b12      	ldr	r3, [pc, #72]	; (8010360 <RTC_DeInit+0xec>)
 8010318:	2200      	movs	r2, #0
 801031a:	62da      	str	r2, [r3, #44]	; 0x2c
      RTC->CALR = (uint32_t)0x00000000;
 801031c:	4b10      	ldr	r3, [pc, #64]	; (8010360 <RTC_DeInit+0xec>)
 801031e:	2200      	movs	r2, #0
 8010320:	63da      	str	r2, [r3, #60]	; 0x3c
      RTC->ALRMASSR = (uint32_t)0x00000000;
 8010322:	4b0f      	ldr	r3, [pc, #60]	; (8010360 <RTC_DeInit+0xec>)
 8010324:	2200      	movs	r2, #0
 8010326:	645a      	str	r2, [r3, #68]	; 0x44
      RTC->ALRMBSSR = (uint32_t)0x00000000;
 8010328:	4b0d      	ldr	r3, [pc, #52]	; (8010360 <RTC_DeInit+0xec>)
 801032a:	2200      	movs	r2, #0
 801032c:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Reset ISR register and exit initialization mode */
      RTC->ISR = (uint32_t)0x00000000;
 801032e:	4b0c      	ldr	r3, [pc, #48]	; (8010360 <RTC_DeInit+0xec>)
 8010330:	2200      	movs	r2, #0
 8010332:	60da      	str	r2, [r3, #12]
      
      /* Reset Tamper and alternate functions configuration register */
      RTC->TAFCR = 0x00000000;
 8010334:	4b0a      	ldr	r3, [pc, #40]	; (8010360 <RTC_DeInit+0xec>)
 8010336:	2200      	movs	r2, #0
 8010338:	641a      	str	r2, [r3, #64]	; 0x40
  
      if(RTC_WaitForSynchro() == ERROR)
 801033a:	f000 f8c5 	bl	80104c8 <RTC_WaitForSynchro>
 801033e:	4603      	mov	r3, r0
 8010340:	2b00      	cmp	r3, #0
 8010342:	d102      	bne.n	801034a <RTC_DeInit+0xd6>
      {
        status = ERROR;
 8010344:	2300      	movs	r3, #0
 8010346:	73fb      	strb	r3, [r7, #15]
 8010348:	e001      	b.n	801034e <RTC_DeInit+0xda>
      }
      else
      {
        status = SUCCESS;      
 801034a:	2301      	movs	r3, #1
 801034c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 801034e:	4b04      	ldr	r3, [pc, #16]	; (8010360 <RTC_DeInit+0xec>)
 8010350:	22ff      	movs	r2, #255	; 0xff
 8010352:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8010354:	7bfb      	ldrb	r3, [r7, #15]
}
 8010356:	4618      	mov	r0, r3
 8010358:	3710      	adds	r7, #16
 801035a:	46bd      	mov	sp, r7
 801035c:	bd80      	pop	{r7, pc}
 801035e:	bf00      	nop
 8010360:	40002800 	.word	0x40002800
 8010364:	007f00ff 	.word	0x007f00ff

08010368 <RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized  
  */
ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
{
 8010368:	b580      	push	{r7, lr}
 801036a:	b084      	sub	sp, #16
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
  ErrorStatus status = ERROR;
 8010370:	2300      	movs	r3, #0
 8010372:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
  assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
  assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010374:	4b19      	ldr	r3, [pc, #100]	; (80103dc <RTC_Init+0x74>)
 8010376:	22ca      	movs	r2, #202	; 0xca
 8010378:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 801037a:	4b18      	ldr	r3, [pc, #96]	; (80103dc <RTC_Init+0x74>)
 801037c:	2253      	movs	r2, #83	; 0x53
 801037e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8010380:	f000 f85a 	bl	8010438 <RTC_EnterInitMode>
 8010384:	4603      	mov	r3, r0
 8010386:	2b00      	cmp	r3, #0
 8010388:	d102      	bne.n	8010390 <RTC_Init+0x28>
  {
    status = ERROR;
 801038a:	2300      	movs	r3, #0
 801038c:	73fb      	strb	r3, [r7, #15]
 801038e:	e01c      	b.n	80103ca <RTC_Init+0x62>
  } 
  else
  {
    /* Clear RTC CR FMT Bit */
    RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 8010390:	4b12      	ldr	r3, [pc, #72]	; (80103dc <RTC_Init+0x74>)
 8010392:	4a12      	ldr	r2, [pc, #72]	; (80103dc <RTC_Init+0x74>)
 8010394:	6892      	ldr	r2, [r2, #8]
 8010396:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801039a:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 801039c:	4b0f      	ldr	r3, [pc, #60]	; (80103dc <RTC_Init+0x74>)
 801039e:	4a0f      	ldr	r2, [pc, #60]	; (80103dc <RTC_Init+0x74>)
 80103a0:	6891      	ldr	r1, [r2, #8]
 80103a2:	687a      	ldr	r2, [r7, #4]
 80103a4:	6812      	ldr	r2, [r2, #0]
 80103a6:	430a      	orrs	r2, r1
 80103a8:	609a      	str	r2, [r3, #8]
  
    /* Configure the RTC PRER */
    RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 80103aa:	4b0c      	ldr	r3, [pc, #48]	; (80103dc <RTC_Init+0x74>)
 80103ac:	687a      	ldr	r2, [r7, #4]
 80103ae:	6892      	ldr	r2, [r2, #8]
 80103b0:	611a      	str	r2, [r3, #16]
    RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 80103b2:	4b0a      	ldr	r3, [pc, #40]	; (80103dc <RTC_Init+0x74>)
 80103b4:	4a09      	ldr	r2, [pc, #36]	; (80103dc <RTC_Init+0x74>)
 80103b6:	6911      	ldr	r1, [r2, #16]
 80103b8:	687a      	ldr	r2, [r7, #4]
 80103ba:	6852      	ldr	r2, [r2, #4]
 80103bc:	0412      	lsls	r2, r2, #16
 80103be:	430a      	orrs	r2, r1
 80103c0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    RTC_ExitInitMode();
 80103c2:	f000 f873 	bl	80104ac <RTC_ExitInitMode>

    status = SUCCESS;    
 80103c6:	2301      	movs	r3, #1
 80103c8:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80103ca:	4b04      	ldr	r3, [pc, #16]	; (80103dc <RTC_Init+0x74>)
 80103cc:	22ff      	movs	r2, #255	; 0xff
 80103ce:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 80103d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80103d2:	4618      	mov	r0, r3
 80103d4:	3710      	adds	r7, #16
 80103d6:	46bd      	mov	sp, r7
 80103d8:	bd80      	pop	{r7, pc}
 80103da:	bf00      	nop
 80103dc:	40002800 	.word	0x40002800

080103e0 <RTC_StructInit>:
  * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
{
 80103e0:	b480      	push	{r7}
 80103e2:	b083      	sub	sp, #12
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	6078      	str	r0, [r7, #4]
  /* Initialize the RTC_HourFormat member */
  RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	2200      	movs	r2, #0
 80103ec:	601a      	str	r2, [r3, #0]
    
  /* Initialize the RTC_AsynchPrediv member */
  RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	227f      	movs	r2, #127	; 0x7f
 80103f2:	605a      	str	r2, [r3, #4]

  /* Initialize the RTC_SynchPrediv member */
  RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	22ff      	movs	r2, #255	; 0xff
 80103f8:	609a      	str	r2, [r3, #8]
}
 80103fa:	370c      	adds	r7, #12
 80103fc:	46bd      	mov	sp, r7
 80103fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010402:	4770      	bx	lr

08010404 <RTC_WriteProtectionCmd>:
  * @param  NewState: new state of the write protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_WriteProtectionCmd(FunctionalState NewState)
{
 8010404:	b480      	push	{r7}
 8010406:	b083      	sub	sp, #12
 8010408:	af00      	add	r7, sp, #0
 801040a:	4603      	mov	r3, r0
 801040c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 801040e:	79fb      	ldrb	r3, [r7, #7]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d003      	beq.n	801041c <RTC_WriteProtectionCmd+0x18>
  {
    /* Enable the write protection for RTC registers */
    RTC->WPR = 0xFF;   
 8010414:	4b07      	ldr	r3, [pc, #28]	; (8010434 <RTC_WriteProtectionCmd+0x30>)
 8010416:	22ff      	movs	r2, #255	; 0xff
 8010418:	625a      	str	r2, [r3, #36]	; 0x24
 801041a:	e005      	b.n	8010428 <RTC_WriteProtectionCmd+0x24>
  }
  else
  {
    /* Disable the write protection for RTC registers */
    RTC->WPR = 0xCA;
 801041c:	4b05      	ldr	r3, [pc, #20]	; (8010434 <RTC_WriteProtectionCmd+0x30>)
 801041e:	22ca      	movs	r2, #202	; 0xca
 8010420:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->WPR = 0x53;    
 8010422:	4b04      	ldr	r3, [pc, #16]	; (8010434 <RTC_WriteProtectionCmd+0x30>)
 8010424:	2253      	movs	r2, #83	; 0x53
 8010426:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8010428:	370c      	adds	r7, #12
 801042a:	46bd      	mov	sp, r7
 801042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010430:	4770      	bx	lr
 8010432:	bf00      	nop
 8010434:	40002800 	.word	0x40002800

08010438 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode  
  */
ErrorStatus RTC_EnterInitMode(void)
{
 8010438:	b480      	push	{r7}
 801043a:	b085      	sub	sp, #20
 801043c:	af00      	add	r7, sp, #0
  __IO uint32_t initcounter = 0x00;
 801043e:	2300      	movs	r3, #0
 8010440:	607b      	str	r3, [r7, #4]
  ErrorStatus status = ERROR;
 8010442:	2300      	movs	r3, #0
 8010444:	73fb      	strb	r3, [r7, #15]
  uint32_t initstatus = 0x00;
 8010446:	2300      	movs	r3, #0
 8010448:	60bb      	str	r3, [r7, #8]
     
  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 801044a:	4b17      	ldr	r3, [pc, #92]	; (80104a8 <RTC_EnterInitMode+0x70>)
 801044c:	68db      	ldr	r3, [r3, #12]
 801044e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010452:	2b00      	cmp	r3, #0
 8010454:	d11e      	bne.n	8010494 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    RTC->ISR = (uint32_t)RTC_INIT_MASK;
 8010456:	4b14      	ldr	r3, [pc, #80]	; (80104a8 <RTC_EnterInitMode+0x70>)
 8010458:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801045c:	60da      	str	r2, [r3, #12]
    
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    do
    {
      initstatus = RTC->ISR & RTC_ISR_INITF;
 801045e:	4b12      	ldr	r3, [pc, #72]	; (80104a8 <RTC_EnterInitMode+0x70>)
 8010460:	68db      	ldr	r3, [r3, #12]
 8010462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010466:	60bb      	str	r3, [r7, #8]
      initcounter++;  
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	3301      	adds	r3, #1
 801046c:	607b      	str	r3, [r7, #4]
    } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010474:	d002      	beq.n	801047c <RTC_EnterInitMode+0x44>
 8010476:	68bb      	ldr	r3, [r7, #8]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d0f0      	beq.n	801045e <RTC_EnterInitMode+0x26>
    
    if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 801047c:	4b0a      	ldr	r3, [pc, #40]	; (80104a8 <RTC_EnterInitMode+0x70>)
 801047e:	68db      	ldr	r3, [r3, #12]
 8010480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010484:	2b00      	cmp	r3, #0
 8010486:	d002      	beq.n	801048e <RTC_EnterInitMode+0x56>
    {
      status = SUCCESS;
 8010488:	2301      	movs	r3, #1
 801048a:	73fb      	strb	r3, [r7, #15]
 801048c:	e004      	b.n	8010498 <RTC_EnterInitMode+0x60>
    }
    else
    {
      status = ERROR;
 801048e:	2300      	movs	r3, #0
 8010490:	73fb      	strb	r3, [r7, #15]
 8010492:	e001      	b.n	8010498 <RTC_EnterInitMode+0x60>
    }        
  }
  else
  {
    status = SUCCESS;  
 8010494:	2301      	movs	r3, #1
 8010496:	73fb      	strb	r3, [r7, #15]
  } 
    
  return (status);  
 8010498:	7bfb      	ldrb	r3, [r7, #15]
}
 801049a:	4618      	mov	r0, r3
 801049c:	3714      	adds	r7, #20
 801049e:	46bd      	mov	sp, r7
 80104a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a4:	4770      	bx	lr
 80104a6:	bf00      	nop
 80104a8:	40002800 	.word	0x40002800

080104ac <RTC_ExitInitMode>:
  *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
  * @param  None
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
 80104ac:	b480      	push	{r7}
 80104ae:	af00      	add	r7, sp, #0
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 80104b0:	4b04      	ldr	r3, [pc, #16]	; (80104c4 <RTC_ExitInitMode+0x18>)
 80104b2:	4a04      	ldr	r2, [pc, #16]	; (80104c4 <RTC_ExitInitMode+0x18>)
 80104b4:	68d2      	ldr	r2, [r2, #12]
 80104b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80104ba:	60da      	str	r2, [r3, #12]
}
 80104bc:	46bd      	mov	sp, r7
 80104be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c2:	4770      	bx	lr
 80104c4:	40002800 	.word	0x40002800

080104c8 <RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus RTC_WaitForSynchro(void)
{
 80104c8:	b480      	push	{r7}
 80104ca:	b085      	sub	sp, #20
 80104cc:	af00      	add	r7, sp, #0
  __IO uint32_t synchrocounter = 0;
 80104ce:	2300      	movs	r3, #0
 80104d0:	607b      	str	r3, [r7, #4]
  ErrorStatus status = ERROR;
 80104d2:	2300      	movs	r3, #0
 80104d4:	73fb      	strb	r3, [r7, #15]
  uint32_t synchrostatus = 0x00;
 80104d6:	2300      	movs	r3, #0
 80104d8:	60bb      	str	r3, [r7, #8]

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80104da:	4b18      	ldr	r3, [pc, #96]	; (801053c <RTC_WaitForSynchro+0x74>)
 80104dc:	22ca      	movs	r2, #202	; 0xca
 80104de:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80104e0:	4b16      	ldr	r3, [pc, #88]	; (801053c <RTC_WaitForSynchro+0x74>)
 80104e2:	2253      	movs	r2, #83	; 0x53
 80104e4:	625a      	str	r2, [r3, #36]	; 0x24
    
  /* Clear RSF flag */
  RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 80104e6:	4b15      	ldr	r3, [pc, #84]	; (801053c <RTC_WaitForSynchro+0x74>)
 80104e8:	4a14      	ldr	r2, [pc, #80]	; (801053c <RTC_WaitForSynchro+0x74>)
 80104ea:	68d2      	ldr	r2, [r2, #12]
 80104ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80104f0:	60da      	str	r2, [r3, #12]
    
  /* Wait the registers to be synchronised */
  do
  {
    synchrostatus = RTC->ISR & RTC_ISR_RSF;
 80104f2:	4b12      	ldr	r3, [pc, #72]	; (801053c <RTC_WaitForSynchro+0x74>)
 80104f4:	68db      	ldr	r3, [r3, #12]
 80104f6:	f003 0320 	and.w	r3, r3, #32
 80104fa:	60bb      	str	r3, [r7, #8]
    synchrocounter++;  
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	3301      	adds	r3, #1
 8010500:	607b      	str	r3, [r7, #4]
  } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010508:	d002      	beq.n	8010510 <RTC_WaitForSynchro+0x48>
 801050a:	68bb      	ldr	r3, [r7, #8]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d0f0      	beq.n	80104f2 <RTC_WaitForSynchro+0x2a>
    
  if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 8010510:	4b0a      	ldr	r3, [pc, #40]	; (801053c <RTC_WaitForSynchro+0x74>)
 8010512:	68db      	ldr	r3, [r3, #12]
 8010514:	f003 0320 	and.w	r3, r3, #32
 8010518:	2b00      	cmp	r3, #0
 801051a:	d002      	beq.n	8010522 <RTC_WaitForSynchro+0x5a>
  {
    status = SUCCESS;
 801051c:	2301      	movs	r3, #1
 801051e:	73fb      	strb	r3, [r7, #15]
 8010520:	e001      	b.n	8010526 <RTC_WaitForSynchro+0x5e>
  }
  else
  {
    status = ERROR;
 8010522:	2300      	movs	r3, #0
 8010524:	73fb      	strb	r3, [r7, #15]
  }        

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010526:	4b05      	ldr	r3, [pc, #20]	; (801053c <RTC_WaitForSynchro+0x74>)
 8010528:	22ff      	movs	r2, #255	; 0xff
 801052a:	625a      	str	r2, [r3, #36]	; 0x24
    
  return (status); 
 801052c:	7bfb      	ldrb	r3, [r7, #15]
}
 801052e:	4618      	mov	r0, r3
 8010530:	3714      	adds	r7, #20
 8010532:	46bd      	mov	sp, r7
 8010534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010538:	4770      	bx	lr
 801053a:	bf00      	nop
 801053c:	40002800 	.word	0x40002800

08010540 <RTC_RefClockCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC reference clock detection is enabled
  *          - ERROR: RTC reference clock detection is disabled  
  */
ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
{ 
 8010540:	b580      	push	{r7, lr}
 8010542:	b084      	sub	sp, #16
 8010544:	af00      	add	r7, sp, #0
 8010546:	4603      	mov	r3, r0
 8010548:	71fb      	strb	r3, [r7, #7]
  ErrorStatus status = ERROR;
 801054a:	2300      	movs	r3, #0
 801054c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 801054e:	4b15      	ldr	r3, [pc, #84]	; (80105a4 <RTC_RefClockCmd+0x64>)
 8010550:	22ca      	movs	r2, #202	; 0xca
 8010552:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010554:	4b13      	ldr	r3, [pc, #76]	; (80105a4 <RTC_RefClockCmd+0x64>)
 8010556:	2253      	movs	r2, #83	; 0x53
 8010558:	625a      	str	r2, [r3, #36]	; 0x24
    
  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 801055a:	f7ff ff6d 	bl	8010438 <RTC_EnterInitMode>
 801055e:	4603      	mov	r3, r0
 8010560:	2b00      	cmp	r3, #0
 8010562:	d102      	bne.n	801056a <RTC_RefClockCmd+0x2a>
  {
    status = ERROR;
 8010564:	2300      	movs	r3, #0
 8010566:	73fb      	strb	r3, [r7, #15]
 8010568:	e013      	b.n	8010592 <RTC_RefClockCmd+0x52>
  } 
  else
  {  
    if (NewState != DISABLE)
 801056a:	79fb      	ldrb	r3, [r7, #7]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d006      	beq.n	801057e <RTC_RefClockCmd+0x3e>
    {
      /* Enable the RTC reference clock detection */
      RTC->CR |= RTC_CR_REFCKON;   
 8010570:	4b0c      	ldr	r3, [pc, #48]	; (80105a4 <RTC_RefClockCmd+0x64>)
 8010572:	4a0c      	ldr	r2, [pc, #48]	; (80105a4 <RTC_RefClockCmd+0x64>)
 8010574:	6892      	ldr	r2, [r2, #8]
 8010576:	f042 0210 	orr.w	r2, r2, #16
 801057a:	609a      	str	r2, [r3, #8]
 801057c:	e005      	b.n	801058a <RTC_RefClockCmd+0x4a>
    }
    else
    {
      /* Disable the RTC reference clock detection */
      RTC->CR &= ~RTC_CR_REFCKON;    
 801057e:	4b09      	ldr	r3, [pc, #36]	; (80105a4 <RTC_RefClockCmd+0x64>)
 8010580:	4a08      	ldr	r2, [pc, #32]	; (80105a4 <RTC_RefClockCmd+0x64>)
 8010582:	6892      	ldr	r2, [r2, #8]
 8010584:	f022 0210 	bic.w	r2, r2, #16
 8010588:	609a      	str	r2, [r3, #8]
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 801058a:	f7ff ff8f 	bl	80104ac <RTC_ExitInitMode>
    
    status = SUCCESS;
 801058e:	2301      	movs	r3, #1
 8010590:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 8010592:	4b04      	ldr	r3, [pc, #16]	; (80105a4 <RTC_RefClockCmd+0x64>)
 8010594:	22ff      	movs	r2, #255	; 0xff
 8010596:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status; 
 8010598:	7bfb      	ldrb	r3, [r7, #15]
}
 801059a:	4618      	mov	r0, r3
 801059c:	3710      	adds	r7, #16
 801059e:	46bd      	mov	sp, r7
 80105a0:	bd80      	pop	{r7, pc}
 80105a2:	bf00      	nop
 80105a4:	40002800 	.word	0x40002800

080105a8 <RTC_BypassShadowCmd>:
  * @param  NewState: new state of the Bypass Shadow feature.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
*/
void RTC_BypassShadowCmd(FunctionalState NewState)
{
 80105a8:	b480      	push	{r7}
 80105aa:	b083      	sub	sp, #12
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	4603      	mov	r3, r0
 80105b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80105b2:	4b0f      	ldr	r3, [pc, #60]	; (80105f0 <RTC_BypassShadowCmd+0x48>)
 80105b4:	22ca      	movs	r2, #202	; 0xca
 80105b6:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80105b8:	4b0d      	ldr	r3, [pc, #52]	; (80105f0 <RTC_BypassShadowCmd+0x48>)
 80105ba:	2253      	movs	r2, #83	; 0x53
 80105bc:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (NewState != DISABLE)
 80105be:	79fb      	ldrb	r3, [r7, #7]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d006      	beq.n	80105d2 <RTC_BypassShadowCmd+0x2a>
  {
    /* Set the BYPSHAD bit */
    RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 80105c4:	4b0a      	ldr	r3, [pc, #40]	; (80105f0 <RTC_BypassShadowCmd+0x48>)
 80105c6:	4a0a      	ldr	r2, [pc, #40]	; (80105f0 <RTC_BypassShadowCmd+0x48>)
 80105c8:	6892      	ldr	r2, [r2, #8]
 80105ca:	f042 0220 	orr.w	r2, r2, #32
 80105ce:	609a      	str	r2, [r3, #8]
 80105d0:	e005      	b.n	80105de <RTC_BypassShadowCmd+0x36>
  }
  else
  {
    /* Reset the BYPSHAD bit */
    RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 80105d2:	4b07      	ldr	r3, [pc, #28]	; (80105f0 <RTC_BypassShadowCmd+0x48>)
 80105d4:	4a06      	ldr	r2, [pc, #24]	; (80105f0 <RTC_BypassShadowCmd+0x48>)
 80105d6:	6892      	ldr	r2, [r2, #8]
 80105d8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80105dc:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 80105de:	4b04      	ldr	r3, [pc, #16]	; (80105f0 <RTC_BypassShadowCmd+0x48>)
 80105e0:	22ff      	movs	r2, #255	; 0xff
 80105e2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80105e4:	370c      	adds	r7, #12
 80105e6:	46bd      	mov	sp, r7
 80105e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ec:	4770      	bx	lr
 80105ee:	bf00      	nop
 80105f0:	40002800 	.word	0x40002800

080105f4 <RTC_SetTime>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 80105f4:	b590      	push	{r4, r7, lr}
 80105f6:	b085      	sub	sp, #20
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
 80105fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80105fe:	2300      	movs	r3, #0
 8010600:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = ERROR;
 8010602:	2300      	movs	r3, #0
 8010604:	72fb      	strb	r3, [r7, #11]
    
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  if (RTC_Format == RTC_Format_BIN)
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d109      	bne.n	8010620 <RTC_SetTime+0x2c>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 801060c:	4b3d      	ldr	r3, [pc, #244]	; (8010704 <RTC_SetTime+0x110>)
 801060e:	689b      	ldr	r3, [r3, #8]
 8010610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010614:	2b00      	cmp	r3, #0
 8010616:	d114      	bne.n	8010642 <RTC_SetTime+0x4e>
      assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 8010618:	683b      	ldr	r3, [r7, #0]
 801061a:	2200      	movs	r2, #0
 801061c:	70da      	strb	r2, [r3, #3]
 801061e:	e010      	b.n	8010642 <RTC_SetTime+0x4e>
    assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
    assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8010620:	4b38      	ldr	r3, [pc, #224]	; (8010704 <RTC_SetTime+0x110>)
 8010622:	689b      	ldr	r3, [r3, #8]
 8010624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010628:	2b00      	cmp	r3, #0
 801062a:	d007      	beq.n	801063c <RTC_SetTime+0x48>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 801062c:	683b      	ldr	r3, [r7, #0]
 801062e:	781b      	ldrb	r3, [r3, #0]
 8010630:	4618      	mov	r0, r3
 8010632:	f001 f885 	bl	8011740 <RTC_Bcd2ToByte>
 8010636:	4603      	mov	r3, r0
 8010638:	60fb      	str	r3, [r7, #12]
 801063a:	e002      	b.n	8010642 <RTC_SetTime+0x4e>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 801063c:	683b      	ldr	r3, [r7, #0]
 801063e:	2200      	movs	r2, #0
 8010640:	70da      	strb	r2, [r3, #3]
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d00f      	beq.n	8010668 <RTC_SetTime+0x74>
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8010648:	683b      	ldr	r3, [r7, #0]
 801064a:	781b      	ldrb	r3, [r3, #0]
 801064c:	041a      	lsls	r2, r3, #16
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 801064e:	683b      	ldr	r3, [r7, #0]
 8010650:	785b      	ldrb	r3, [r3, #1]
 8010652:	021b      	lsls	r3, r3, #8
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8010654:	431a      	orrs	r2, r3
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 8010656:	683b      	ldr	r3, [r7, #0]
 8010658:	789b      	ldrb	r3, [r3, #2]
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 801065a:	431a      	orrs	r2, r3
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 801065c:	683b      	ldr	r3, [r7, #0]
 801065e:	78db      	ldrb	r3, [r3, #3]
 8010660:	041b      	lsls	r3, r3, #16
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8010662:	4313      	orrs	r3, r2
 8010664:	60fb      	str	r3, [r7, #12]
 8010666:	e01b      	b.n	80106a0 <RTC_SetTime+0xac>
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8010668:	683b      	ldr	r3, [r7, #0]
 801066a:	781b      	ldrb	r3, [r3, #0]
 801066c:	4618      	mov	r0, r3
 801066e:	f001 f849 	bl	8011704 <RTC_ByteToBcd2>
 8010672:	4603      	mov	r3, r0
 8010674:	041c      	lsls	r4, r3, #16
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8010676:	683b      	ldr	r3, [r7, #0]
 8010678:	785b      	ldrb	r3, [r3, #1]
 801067a:	4618      	mov	r0, r3
 801067c:	f001 f842 	bl	8011704 <RTC_ByteToBcd2>
 8010680:	4603      	mov	r3, r0
 8010682:	021b      	lsls	r3, r3, #8
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8010684:	431c      	orrs	r4, r3
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 8010686:	683b      	ldr	r3, [r7, #0]
 8010688:	789b      	ldrb	r3, [r3, #2]
 801068a:	4618      	mov	r0, r3
 801068c:	f001 f83a 	bl	8011704 <RTC_ByteToBcd2>
 8010690:	4603      	mov	r3, r0
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8010692:	ea44 0203 	orr.w	r2, r4, r3
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 8010696:	683b      	ldr	r3, [r7, #0]
 8010698:	78db      	ldrb	r3, [r3, #3]
 801069a:	041b      	lsls	r3, r3, #16
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 801069c:	4313      	orrs	r3, r2
 801069e:	60fb      	str	r3, [r7, #12]
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
  }  

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80106a0:	4b18      	ldr	r3, [pc, #96]	; (8010704 <RTC_SetTime+0x110>)
 80106a2:	22ca      	movs	r2, #202	; 0xca
 80106a4:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80106a6:	4b17      	ldr	r3, [pc, #92]	; (8010704 <RTC_SetTime+0x110>)
 80106a8:	2253      	movs	r2, #83	; 0x53
 80106aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 80106ac:	f7ff fec4 	bl	8010438 <RTC_EnterInitMode>
 80106b0:	4603      	mov	r3, r0
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d102      	bne.n	80106bc <RTC_SetTime+0xc8>
  {
    status = ERROR;
 80106b6:	2300      	movs	r3, #0
 80106b8:	72fb      	strb	r3, [r7, #11]
 80106ba:	e01b      	b.n	80106f4 <RTC_SetTime+0x100>
  } 
  else
  {
    /* Set the RTC_TR register */
    RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80106bc:	4a11      	ldr	r2, [pc, #68]	; (8010704 <RTC_SetTime+0x110>)
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80106c4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80106c8:	6013      	str	r3, [r2, #0]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 80106ca:	f7ff feef 	bl	80104ac <RTC_ExitInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 80106ce:	4b0d      	ldr	r3, [pc, #52]	; (8010704 <RTC_SetTime+0x110>)
 80106d0:	689b      	ldr	r3, [r3, #8]
 80106d2:	f003 0320 	and.w	r3, r3, #32
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d10a      	bne.n	80106f0 <RTC_SetTime+0xfc>
    {
    if(RTC_WaitForSynchro() == ERROR)
 80106da:	f7ff fef5 	bl	80104c8 <RTC_WaitForSynchro>
 80106de:	4603      	mov	r3, r0
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d102      	bne.n	80106ea <RTC_SetTime+0xf6>
    {
      status = ERROR;
 80106e4:	2300      	movs	r3, #0
 80106e6:	72fb      	strb	r3, [r7, #11]
 80106e8:	e004      	b.n	80106f4 <RTC_SetTime+0x100>
    }
    else
    {
      status = SUCCESS;
 80106ea:	2301      	movs	r3, #1
 80106ec:	72fb      	strb	r3, [r7, #11]
 80106ee:	e001      	b.n	80106f4 <RTC_SetTime+0x100>
    }
  }
    else
    {
      status = SUCCESS;
 80106f0:	2301      	movs	r3, #1
 80106f2:	72fb      	strb	r3, [r7, #11]
    }
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80106f4:	4b03      	ldr	r3, [pc, #12]	; (8010704 <RTC_SetTime+0x110>)
 80106f6:	22ff      	movs	r2, #255	; 0xff
 80106f8:	625a      	str	r2, [r3, #36]	; 0x24
    
  return status;
 80106fa:	7afb      	ldrb	r3, [r7, #11]
}
 80106fc:	4618      	mov	r0, r3
 80106fe:	3714      	adds	r7, #20
 8010700:	46bd      	mov	sp, r7
 8010702:	bd90      	pop	{r4, r7, pc}
 8010704:	40002800 	.word	0x40002800

08010708 <RTC_TimeStructInit>:
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
{
 8010708:	b480      	push	{r7}
 801070a:	b083      	sub	sp, #12
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
  /* Time = 00h:00min:00sec */
  RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	2200      	movs	r2, #0
 8010714:	70da      	strb	r2, [r3, #3]
  RTC_TimeStruct->RTC_Hours = 0;
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	2200      	movs	r2, #0
 801071a:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct->RTC_Minutes = 0;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	2200      	movs	r2, #0
 8010720:	705a      	strb	r2, [r3, #1]
  RTC_TimeStruct->RTC_Seconds = 0; 
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	2200      	movs	r2, #0
 8010726:	709a      	strb	r2, [r3, #2]
}
 8010728:	370c      	adds	r7, #12
 801072a:	46bd      	mov	sp, r7
 801072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010730:	4770      	bx	lr
 8010732:	bf00      	nop

08010734 <RTC_GetTime>:
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
  *                        contain the returned current time configuration.     
  * @retval None
  */
void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 8010734:	b580      	push	{r7, lr}
 8010736:	b084      	sub	sp, #16
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
 801073c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801073e:	2300      	movs	r3, #0
 8010740:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 8010742:	4b22      	ldr	r3, [pc, #136]	; (80107cc <RTC_GetTime+0x98>)
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 801074a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 801074e:	60fb      	str	r3, [r7, #12]
  
  /* Fill the structure fields with the read parameters */
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8010756:	0c1b      	lsrs	r3, r3, #16
 8010758:	b2da      	uxtb	r2, r3
 801075a:	683b      	ldr	r3, [r7, #0]
 801075c:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8010764:	0a1b      	lsrs	r3, r3, #8
 8010766:	b2da      	uxtb	r2, r3
 8010768:	683b      	ldr	r3, [r7, #0]
 801076a:	705a      	strb	r2, [r3, #1]
  RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	b2db      	uxtb	r3, r3
 8010770:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010774:	b2da      	uxtb	r2, r3
 8010776:	683b      	ldr	r3, [r7, #0]
 8010778:	709a      	strb	r2, [r3, #2]
  RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010780:	0c1b      	lsrs	r3, r3, #16
 8010782:	b2da      	uxtb	r2, r3
 8010784:	683b      	ldr	r3, [r7, #0]
 8010786:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d11a      	bne.n	80107c4 <RTC_GetTime+0x90>
  {
    /* Convert the structure parameters to Binary format */
    RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 801078e:	683b      	ldr	r3, [r7, #0]
 8010790:	781b      	ldrb	r3, [r3, #0]
 8010792:	4618      	mov	r0, r3
 8010794:	f000 ffd4 	bl	8011740 <RTC_Bcd2ToByte>
 8010798:	4603      	mov	r3, r0
 801079a:	461a      	mov	r2, r3
 801079c:	683b      	ldr	r3, [r7, #0]
 801079e:	701a      	strb	r2, [r3, #0]
    RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 80107a0:	683b      	ldr	r3, [r7, #0]
 80107a2:	785b      	ldrb	r3, [r3, #1]
 80107a4:	4618      	mov	r0, r3
 80107a6:	f000 ffcb 	bl	8011740 <RTC_Bcd2ToByte>
 80107aa:	4603      	mov	r3, r0
 80107ac:	461a      	mov	r2, r3
 80107ae:	683b      	ldr	r3, [r7, #0]
 80107b0:	705a      	strb	r2, [r3, #1]
    RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 80107b2:	683b      	ldr	r3, [r7, #0]
 80107b4:	789b      	ldrb	r3, [r3, #2]
 80107b6:	4618      	mov	r0, r3
 80107b8:	f000 ffc2 	bl	8011740 <RTC_Bcd2ToByte>
 80107bc:	4603      	mov	r3, r0
 80107be:	461a      	mov	r2, r3
 80107c0:	683b      	ldr	r3, [r7, #0]
 80107c2:	709a      	strb	r2, [r3, #2]
  }
}
 80107c4:	3710      	adds	r7, #16
 80107c6:	46bd      	mov	sp, r7
 80107c8:	bd80      	pop	{r7, pc}
 80107ca:	bf00      	nop
 80107cc:	40002800 	.word	0x40002800

080107d0 <RTC_GetSubSecond>:
  *         SSR register.
  * @param  None
  * @retval RTC current Calendar Sub seconds value.
  */
uint32_t RTC_GetSubSecond(void)
{
 80107d0:	b480      	push	{r7}
 80107d2:	b083      	sub	sp, #12
 80107d4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0;
 80107d6:	2300      	movs	r3, #0
 80107d8:	607b      	str	r3, [r7, #4]
  
  /* Get sub seconds values from the correspondent registers*/
  tmpreg = (uint32_t)(RTC->SSR);
 80107da:	4b06      	ldr	r3, [pc, #24]	; (80107f4 <RTC_GetSubSecond+0x24>)
 80107dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107de:	607b      	str	r3, [r7, #4]
  
  /* Read DR register to unfroze calendar registers */
  (void) (RTC->DR);
 80107e0:	4b04      	ldr	r3, [pc, #16]	; (80107f4 <RTC_GetSubSecond+0x24>)
 80107e2:	685b      	ldr	r3, [r3, #4]
  
  return (tmpreg);
 80107e4:	687b      	ldr	r3, [r7, #4]
}
 80107e6:	4618      	mov	r0, r3
 80107e8:	370c      	adds	r7, #12
 80107ea:	46bd      	mov	sp, r7
 80107ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f0:	4770      	bx	lr
 80107f2:	bf00      	nop
 80107f4:	40002800 	.word	0x40002800

080107f8 <RTC_SetDate>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Date register is configured
  *          - ERROR: RTC Date register is not configured
  */
ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 80107f8:	b590      	push	{r4, r7, lr}
 80107fa:	b085      	sub	sp, #20
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
 8010800:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010802:	2300      	movs	r3, #0
 8010804:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = ERROR;
 8010806:	2300      	movs	r3, #0
 8010808:	72fb      	strb	r3, [r7, #11]
  
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d10e      	bne.n	801082e <RTC_SetDate+0x36>
 8010810:	683b      	ldr	r3, [r7, #0]
 8010812:	785b      	ldrb	r3, [r3, #1]
 8010814:	f003 0310 	and.w	r3, r3, #16
 8010818:	2b00      	cmp	r3, #0
 801081a:	d008      	beq.n	801082e <RTC_SetDate+0x36>
  {
    RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 801081c:	683b      	ldr	r3, [r7, #0]
 801081e:	785b      	ldrb	r3, [r3, #1]
 8010820:	f023 0310 	bic.w	r3, r3, #16
 8010824:	b2db      	uxtb	r3, r3
 8010826:	330a      	adds	r3, #10
 8010828:	b2da      	uxtb	r2, r3
 801082a:	683b      	ldr	r3, [r7, #0]
 801082c:	705a      	strb	r2, [r3, #1]
  }  
  if (RTC_Format == RTC_Format_BIN)
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	2b00      	cmp	r3, #0
 8010832:	d00d      	beq.n	8010850 <RTC_SetDate+0x58>
    assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
    tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 8010834:	683b      	ldr	r3, [r7, #0]
 8010836:	785b      	ldrb	r3, [r3, #1]
 8010838:	4618      	mov	r0, r3
 801083a:	f000 ff81 	bl	8011740 <RTC_Bcd2ToByte>
 801083e:	4603      	mov	r3, r0
 8010840:	60fb      	str	r3, [r7, #12]
    assert_param(IS_RTC_MONTH(tmpreg));
    tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 8010842:	683b      	ldr	r3, [r7, #0]
 8010844:	789b      	ldrb	r3, [r3, #2]
 8010846:	4618      	mov	r0, r3
 8010848:	f000 ff7a 	bl	8011740 <RTC_Bcd2ToByte>
 801084c:	4603      	mov	r3, r0
 801084e:	60fb      	str	r3, [r7, #12]
    assert_param(IS_RTC_DATE(tmpreg));
  }
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d00f      	beq.n	8010876 <RTC_SetDate+0x7e>
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 8010856:	683b      	ldr	r3, [r7, #0]
 8010858:	78db      	ldrb	r3, [r3, #3]
 801085a:	041a      	lsls	r2, r3, #16
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 801085c:	683b      	ldr	r3, [r7, #0]
 801085e:	785b      	ldrb	r3, [r3, #1]
 8010860:	021b      	lsls	r3, r3, #8
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 8010862:	431a      	orrs	r2, r3
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
 8010864:	683b      	ldr	r3, [r7, #0]
 8010866:	789b      	ldrb	r3, [r3, #2]

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 8010868:	431a      	orrs	r2, r3
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 801086a:	683b      	ldr	r3, [r7, #0]
 801086c:	781b      	ldrb	r3, [r3, #0]
 801086e:	035b      	lsls	r3, r3, #13
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 8010870:	4313      	orrs	r3, r2
 8010872:	60fb      	str	r3, [r7, #12]
 8010874:	e01b      	b.n	80108ae <RTC_SetDate+0xb6>
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 8010876:	683b      	ldr	r3, [r7, #0]
 8010878:	78db      	ldrb	r3, [r3, #3]
 801087a:	4618      	mov	r0, r3
 801087c:	f000 ff42 	bl	8011704 <RTC_ByteToBcd2>
 8010880:	4603      	mov	r3, r0
 8010882:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 8010884:	683b      	ldr	r3, [r7, #0]
 8010886:	785b      	ldrb	r3, [r3, #1]
 8010888:	4618      	mov	r0, r3
 801088a:	f000 ff3b 	bl	8011704 <RTC_ByteToBcd2>
 801088e:	4603      	mov	r3, r0
 8010890:	021b      	lsls	r3, r3, #8
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 8010892:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 8010894:	683b      	ldr	r3, [r7, #0]
 8010896:	789b      	ldrb	r3, [r3, #2]
 8010898:	4618      	mov	r0, r3
 801089a:	f000 ff33 	bl	8011704 <RTC_ByteToBcd2>
 801089e:	4603      	mov	r3, r0
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 80108a0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 80108a4:	683b      	ldr	r3, [r7, #0]
 80108a6:	781b      	ldrb	r3, [r3, #0]
 80108a8:	035b      	lsls	r3, r3, #13
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 80108aa:	4313      	orrs	r3, r2
 80108ac:	60fb      	str	r3, [r7, #12]
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80108ae:	4b19      	ldr	r3, [pc, #100]	; (8010914 <RTC_SetDate+0x11c>)
 80108b0:	22ca      	movs	r2, #202	; 0xca
 80108b2:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80108b4:	4b17      	ldr	r3, [pc, #92]	; (8010914 <RTC_SetDate+0x11c>)
 80108b6:	2253      	movs	r2, #83	; 0x53
 80108b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 80108ba:	f7ff fdbd 	bl	8010438 <RTC_EnterInitMode>
 80108be:	4603      	mov	r3, r0
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d102      	bne.n	80108ca <RTC_SetDate+0xd2>
  {
    status = ERROR;
 80108c4:	2300      	movs	r3, #0
 80108c6:	72fb      	strb	r3, [r7, #11]
 80108c8:	e01b      	b.n	8010902 <RTC_SetDate+0x10a>
  } 
  else
  {
    /* Set the RTC_DR register */
    RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 80108ca:	4a12      	ldr	r2, [pc, #72]	; (8010914 <RTC_SetDate+0x11c>)
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80108d2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80108d6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 80108d8:	f7ff fde8 	bl	80104ac <RTC_ExitInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 80108dc:	4b0d      	ldr	r3, [pc, #52]	; (8010914 <RTC_SetDate+0x11c>)
 80108de:	689b      	ldr	r3, [r3, #8]
 80108e0:	f003 0320 	and.w	r3, r3, #32
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d10a      	bne.n	80108fe <RTC_SetDate+0x106>
    {
    if(RTC_WaitForSynchro() == ERROR)
 80108e8:	f7ff fdee 	bl	80104c8 <RTC_WaitForSynchro>
 80108ec:	4603      	mov	r3, r0
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d102      	bne.n	80108f8 <RTC_SetDate+0x100>
    {
      status = ERROR;
 80108f2:	2300      	movs	r3, #0
 80108f4:	72fb      	strb	r3, [r7, #11]
 80108f6:	e004      	b.n	8010902 <RTC_SetDate+0x10a>
    }
    else
    {
      status = SUCCESS;
 80108f8:	2301      	movs	r3, #1
 80108fa:	72fb      	strb	r3, [r7, #11]
 80108fc:	e001      	b.n	8010902 <RTC_SetDate+0x10a>
    }
  }
    else
    {
      status = SUCCESS;
 80108fe:	2301      	movs	r3, #1
 8010900:	72fb      	strb	r3, [r7, #11]
    }
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 8010902:	4b04      	ldr	r3, [pc, #16]	; (8010914 <RTC_SetDate+0x11c>)
 8010904:	22ff      	movs	r2, #255	; 0xff
 8010906:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8010908:	7afb      	ldrb	r3, [r7, #11]
}
 801090a:	4618      	mov	r0, r3
 801090c:	3714      	adds	r7, #20
 801090e:	46bd      	mov	sp, r7
 8010910:	bd90      	pop	{r4, r7, pc}
 8010912:	bf00      	nop
 8010914:	40002800 	.word	0x40002800

08010918 <RTC_DateStructInit>:
  * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
{
 8010918:	b480      	push	{r7}
 801091a:	b083      	sub	sp, #12
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
  /* Monday, January 01 xx00 */
  RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	2201      	movs	r2, #1
 8010924:	701a      	strb	r2, [r3, #0]
  RTC_DateStruct->RTC_Date = 1;
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	2201      	movs	r2, #1
 801092a:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct->RTC_Month = RTC_Month_January;
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	2201      	movs	r2, #1
 8010930:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct->RTC_Year = 0;
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	2200      	movs	r2, #0
 8010936:	70da      	strb	r2, [r3, #3]
}
 8010938:	370c      	adds	r7, #12
 801093a:	46bd      	mov	sp, r7
 801093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010940:	4770      	bx	lr
 8010942:	bf00      	nop

08010944 <RTC_GetDate>:
  * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
  *                        contain the returned current date configuration.     
  * @retval None
  */
void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 8010944:	b580      	push	{r7, lr}
 8010946:	b084      	sub	sp, #16
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
 801094c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801094e:	2300      	movs	r3, #0
 8010950:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 8010952:	4b22      	ldr	r3, [pc, #136]	; (80109dc <RTC_GetDate+0x98>)
 8010954:	685b      	ldr	r3, [r3, #4]
 8010956:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801095a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801095e:	60fb      	str	r3, [r7, #12]

  /* Fill the structure fields with the read parameters */
  RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010966:	0c1b      	lsrs	r3, r3, #16
 8010968:	b2da      	uxtb	r2, r3
 801096a:	683b      	ldr	r3, [r7, #0]
 801096c:	70da      	strb	r2, [r3, #3]
  RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8010974:	0a1b      	lsrs	r3, r3, #8
 8010976:	b2da      	uxtb	r2, r3
 8010978:	683b      	ldr	r3, [r7, #0]
 801097a:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	b2db      	uxtb	r3, r3
 8010980:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010984:	b2da      	uxtb	r2, r3
 8010986:	683b      	ldr	r3, [r7, #0]
 8010988:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010990:	0b5b      	lsrs	r3, r3, #13
 8010992:	b2da      	uxtb	r2, r3
 8010994:	683b      	ldr	r3, [r7, #0]
 8010996:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d11a      	bne.n	80109d4 <RTC_GetDate+0x90>
  {
    /* Convert the structure parameters to Binary format */
    RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 801099e:	683b      	ldr	r3, [r7, #0]
 80109a0:	78db      	ldrb	r3, [r3, #3]
 80109a2:	4618      	mov	r0, r3
 80109a4:	f000 fecc 	bl	8011740 <RTC_Bcd2ToByte>
 80109a8:	4603      	mov	r3, r0
 80109aa:	461a      	mov	r2, r3
 80109ac:	683b      	ldr	r3, [r7, #0]
 80109ae:	70da      	strb	r2, [r3, #3]
    RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 80109b0:	683b      	ldr	r3, [r7, #0]
 80109b2:	785b      	ldrb	r3, [r3, #1]
 80109b4:	4618      	mov	r0, r3
 80109b6:	f000 fec3 	bl	8011740 <RTC_Bcd2ToByte>
 80109ba:	4603      	mov	r3, r0
 80109bc:	461a      	mov	r2, r3
 80109be:	683b      	ldr	r3, [r7, #0]
 80109c0:	705a      	strb	r2, [r3, #1]
    RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 80109c2:	683b      	ldr	r3, [r7, #0]
 80109c4:	789b      	ldrb	r3, [r3, #2]
 80109c6:	4618      	mov	r0, r3
 80109c8:	f000 feba 	bl	8011740 <RTC_Bcd2ToByte>
 80109cc:	4603      	mov	r3, r0
 80109ce:	461a      	mov	r2, r3
 80109d0:	683b      	ldr	r3, [r7, #0]
 80109d2:	709a      	strb	r2, [r3, #2]
  }
}
 80109d4:	3710      	adds	r7, #16
 80109d6:	46bd      	mov	sp, r7
 80109d8:	bd80      	pop	{r7, pc}
 80109da:	bf00      	nop
 80109dc:	40002800 	.word	0x40002800

080109e0 <RTC_SetAlarm>:
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
  *                          contains the alarm configuration parameters.     
  * @retval None
  */
void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 80109e0:	b590      	push	{r4, r7, lr}
 80109e2:	b087      	sub	sp, #28
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	60f8      	str	r0, [r7, #12]
 80109e8:	60b9      	str	r1, [r7, #8]
 80109ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80109ec:	2300      	movs	r3, #0
 80109ee:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));

  if (RTC_Format == RTC_Format_BIN)
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d109      	bne.n	8010a0a <RTC_SetAlarm+0x2a>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80109f6:	4b47      	ldr	r3, [pc, #284]	; (8010b14 <RTC_SetAlarm+0x134>)
 80109f8:	689b      	ldr	r3, [r3, #8]
 80109fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d127      	bne.n	8010a52 <RTC_SetAlarm+0x72>
      assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	2200      	movs	r2, #0
 8010a06:	70da      	strb	r2, [r3, #3]
 8010a08:	e023      	b.n	8010a52 <RTC_SetAlarm+0x72>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
    }
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8010a0a:	4b42      	ldr	r3, [pc, #264]	; (8010b14 <RTC_SetAlarm+0x134>)
 8010a0c:	689b      	ldr	r3, [r3, #8]
 8010a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d007      	beq.n	8010a26 <RTC_SetAlarm+0x46>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	781b      	ldrb	r3, [r3, #0]
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	f000 fe90 	bl	8011740 <RTC_Bcd2ToByte>
 8010a20:	4603      	mov	r3, r0
 8010a22:	617b      	str	r3, [r7, #20]
 8010a24:	e002      	b.n	8010a2c <RTC_SetAlarm+0x4c>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	2200      	movs	r2, #0
 8010a2a:	70da      	strb	r2, [r3, #3]
    }
    
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
    
    if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	689b      	ldr	r3, [r3, #8]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d107      	bne.n	8010a44 <RTC_SetAlarm+0x64>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	7b1b      	ldrb	r3, [r3, #12]
 8010a38:	4618      	mov	r0, r3
 8010a3a:	f000 fe81 	bl	8011740 <RTC_Bcd2ToByte>
 8010a3e:	4603      	mov	r3, r0
 8010a40:	617b      	str	r3, [r7, #20]
 8010a42:	e006      	b.n	8010a52 <RTC_SetAlarm+0x72>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
    }
    else
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	7b1b      	ldrb	r3, [r3, #12]
 8010a48:	4618      	mov	r0, r3
 8010a4a:	f000 fe79 	bl	8011740 <RTC_Bcd2ToByte>
 8010a4e:	4603      	mov	r3, r0
 8010a50:	617b      	str	r3, [r7, #20]
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
    }    
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d019      	beq.n	8010a8c <RTC_SetAlarm+0xac>
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	781b      	ldrb	r3, [r3, #0]
 8010a5c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	785b      	ldrb	r3, [r3, #1]
 8010a62:	021b      	lsls	r3, r3, #8
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8010a64:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	789b      	ldrb	r3, [r3, #2]

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 8010a6a:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	78db      	ldrb	r3, [r3, #3]
 8010a70:	041b      	lsls	r3, r3, #16
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 8010a72:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	7b1b      	ldrb	r3, [r3, #12]
 8010a78:	061b      	lsls	r3, r3, #24
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 8010a7a:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	689b      	ldr	r3, [r3, #8]
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 8010a80:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	685b      	ldr	r3, [r3, #4]
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8010a86:	4313      	orrs	r3, r2
 8010a88:	617b      	str	r3, [r7, #20]
 8010a8a:	e02b      	b.n	8010ae4 <RTC_SetAlarm+0x104>
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	781b      	ldrb	r3, [r3, #0]
 8010a90:	4618      	mov	r0, r3
 8010a92:	f000 fe37 	bl	8011704 <RTC_ByteToBcd2>
 8010a96:	4603      	mov	r3, r0
 8010a98:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	785b      	ldrb	r3, [r3, #1]
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	f000 fe30 	bl	8011704 <RTC_ByteToBcd2>
 8010aa4:	4603      	mov	r3, r0
 8010aa6:	021b      	lsls	r3, r3, #8
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8010aa8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	789b      	ldrb	r3, [r3, #2]
 8010aae:	4618      	mov	r0, r3
 8010ab0:	f000 fe28 	bl	8011704 <RTC_ByteToBcd2>
 8010ab4:	4603      	mov	r3, r0
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 8010ab6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	78db      	ldrb	r3, [r3, #3]
 8010abe:	041b      	lsls	r3, r3, #16
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 8010ac0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	7b1b      	ldrb	r3, [r3, #12]
 8010ac8:	4618      	mov	r0, r3
 8010aca:	f000 fe1b 	bl	8011704 <RTC_ByteToBcd2>
 8010ace:	4603      	mov	r3, r0
 8010ad0:	061b      	lsls	r3, r3, #24
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 8010ad2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	689b      	ldr	r3, [r3, #8]
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 8010ada:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	685b      	ldr	r3, [r3, #4]
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8010ae0:	4313      	orrs	r3, r2
 8010ae2:	617b      	str	r3, [r7, #20]
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  } 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010ae4:	4b0b      	ldr	r3, [pc, #44]	; (8010b14 <RTC_SetAlarm+0x134>)
 8010ae6:	22ca      	movs	r2, #202	; 0xca
 8010ae8:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010aea:	4b0a      	ldr	r3, [pc, #40]	; (8010b14 <RTC_SetAlarm+0x134>)
 8010aec:	2253      	movs	r2, #83	; 0x53
 8010aee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (RTC_Alarm == RTC_Alarm_A)
 8010af0:	68bb      	ldr	r3, [r7, #8]
 8010af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010af6:	d103      	bne.n	8010b00 <RTC_SetAlarm+0x120>
  {
    RTC->ALRMAR = (uint32_t)tmpreg;
 8010af8:	4b06      	ldr	r3, [pc, #24]	; (8010b14 <RTC_SetAlarm+0x134>)
 8010afa:	697a      	ldr	r2, [r7, #20]
 8010afc:	61da      	str	r2, [r3, #28]
 8010afe:	e002      	b.n	8010b06 <RTC_SetAlarm+0x126>
  }
  else
  {
    RTC->ALRMBR = (uint32_t)tmpreg;
 8010b00:	4b04      	ldr	r3, [pc, #16]	; (8010b14 <RTC_SetAlarm+0x134>)
 8010b02:	697a      	ldr	r2, [r7, #20]
 8010b04:	621a      	str	r2, [r3, #32]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 8010b06:	4b03      	ldr	r3, [pc, #12]	; (8010b14 <RTC_SetAlarm+0x134>)
 8010b08:	22ff      	movs	r2, #255	; 0xff
 8010b0a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010b0c:	371c      	adds	r7, #28
 8010b0e:	46bd      	mov	sp, r7
 8010b10:	bd90      	pop	{r4, r7, pc}
 8010b12:	bf00      	nop
 8010b14:	40002800 	.word	0x40002800

08010b18 <RTC_AlarmStructInit>:
  * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 8010b18:	b480      	push	{r7}
 8010b1a:	b083      	sub	sp, #12
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
  /* Alarm Time Settings : Time = 00h:00mn:00sec */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	2200      	movs	r2, #0
 8010b24:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	2200      	movs	r2, #0
 8010b2a:	701a      	strb	r2, [r3, #0]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	2200      	movs	r2, #0
 8010b30:	705a      	strb	r2, [r3, #1]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	2200      	movs	r2, #0
 8010b36:	709a      	strb	r2, [r3, #2]

  /* Alarm Date Settings : Date = 1st day of the month */
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	2200      	movs	r2, #0
 8010b3c:	609a      	str	r2, [r3, #8]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	2201      	movs	r2, #1
 8010b42:	731a      	strb	r2, [r3, #12]

  /* Alarm Masks Settings : Mask =  all fields are not masked */
  RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	2200      	movs	r2, #0
 8010b48:	605a      	str	r2, [r3, #4]
}
 8010b4a:	370c      	adds	r7, #12
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b52:	4770      	bx	lr

08010b54 <RTC_GetAlarm>:
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
  *                          contains the output alarm configuration values.     
  * @retval None
  */
void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b086      	sub	sp, #24
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	60f8      	str	r0, [r7, #12]
 8010b5c:	60b9      	str	r1, [r7, #8]
 8010b5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8010b60:	2300      	movs	r3, #0
 8010b62:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm)); 

  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
 8010b64:	68bb      	ldr	r3, [r7, #8]
 8010b66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010b6a:	d103      	bne.n	8010b74 <RTC_GetAlarm+0x20>
  {
    tmpreg = (uint32_t)(RTC->ALRMAR);
 8010b6c:	4b2e      	ldr	r3, [pc, #184]	; (8010c28 <RTC_GetAlarm+0xd4>)
 8010b6e:	69db      	ldr	r3, [r3, #28]
 8010b70:	617b      	str	r3, [r7, #20]
 8010b72:	e002      	b.n	8010b7a <RTC_GetAlarm+0x26>
  }
  else
  {
    tmpreg = (uint32_t)(RTC->ALRMBR);
 8010b74:	4b2c      	ldr	r3, [pc, #176]	; (8010c28 <RTC_GetAlarm+0xd4>)
 8010b76:	6a1b      	ldr	r3, [r3, #32]
 8010b78:	617b      	str	r3, [r7, #20]
  }

  /* Fill the structure with the read parameters */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 8010b7a:	697b      	ldr	r3, [r7, #20]
 8010b7c:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8010b80:	0c1b      	lsrs	r3, r3, #16
 8010b82:	b2da      	uxtb	r2, r3
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	701a      	strb	r2, [r3, #0]
                                                     RTC_ALRMAR_HU)) >> 16);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 8010b88:	697b      	ldr	r3, [r7, #20]
 8010b8a:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8010b8e:	0a1b      	lsrs	r3, r3, #8
 8010b90:	b2da      	uxtb	r2, r3
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	705a      	strb	r2, [r3, #1]
                                                     RTC_ALRMAR_MNU)) >> 8);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 8010b96:	697b      	ldr	r3, [r7, #20]
 8010b98:	b2db      	uxtb	r3, r3
 8010b9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010b9e:	b2da      	uxtb	r2, r3
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	709a      	strb	r2, [r3, #2]
                                                     RTC_ALRMAR_SU));
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 8010ba4:	697b      	ldr	r3, [r7, #20]
 8010ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010baa:	0c1b      	lsrs	r3, r3, #16
 8010bac:	b2da      	uxtb	r2, r3
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
 8010bb2:	697b      	ldr	r3, [r7, #20]
 8010bb4:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8010bb8:	0e1b      	lsrs	r3, r3, #24
 8010bba:	b2da      	uxtb	r2, r3
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	731a      	strb	r2, [r3, #12]
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8010bc0:	697b      	ldr	r3, [r7, #20]
 8010bc2:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	609a      	str	r2, [r3, #8]
  RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 8010bca:	697b      	ldr	r3, [r7, #20]
 8010bcc:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	605a      	str	r2, [r3, #4]

  if (RTC_Format == RTC_Format_BIN)
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d123      	bne.n	8010c22 <RTC_GetAlarm+0xce>
  {
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	781b      	ldrb	r3, [r3, #0]
 8010bde:	4618      	mov	r0, r3
 8010be0:	f000 fdae 	bl	8011740 <RTC_Bcd2ToByte>
 8010be4:	4603      	mov	r3, r0
 8010be6:	461a      	mov	r2, r3
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	701a      	strb	r2, [r3, #0]
                                                        RTC_AlarmTime.RTC_Hours);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	785b      	ldrb	r3, [r3, #1]
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	f000 fda5 	bl	8011740 <RTC_Bcd2ToByte>
 8010bf6:	4603      	mov	r3, r0
 8010bf8:	461a      	mov	r2, r3
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	705a      	strb	r2, [r3, #1]
                                                        RTC_AlarmTime.RTC_Minutes);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	789b      	ldrb	r3, [r3, #2]
 8010c02:	4618      	mov	r0, r3
 8010c04:	f000 fd9c 	bl	8011740 <RTC_Bcd2ToByte>
 8010c08:	4603      	mov	r3, r0
 8010c0a:	461a      	mov	r2, r3
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	709a      	strb	r2, [r3, #2]
                                                        RTC_AlarmTime.RTC_Seconds);
    RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	7b1b      	ldrb	r3, [r3, #12]
 8010c14:	4618      	mov	r0, r3
 8010c16:	f000 fd93 	bl	8011740 <RTC_Bcd2ToByte>
 8010c1a:	4603      	mov	r3, r0
 8010c1c:	461a      	mov	r2, r3
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	731a      	strb	r2, [r3, #12]
  }  
}
 8010c22:	3718      	adds	r7, #24
 8010c24:	46bd      	mov	sp, r7
 8010c26:	bd80      	pop	{r7, pc}
 8010c28:	40002800 	.word	0x40002800

08010c2c <RTC_AlarmCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Alarm is enabled/disabled
  *          - ERROR: RTC Alarm is not enabled/disabled  
  */
ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
{
 8010c2c:	b480      	push	{r7}
 8010c2e:	b087      	sub	sp, #28
 8010c30:	af00      	add	r7, sp, #0
 8010c32:	6078      	str	r0, [r7, #4]
 8010c34:	460b      	mov	r3, r1
 8010c36:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t alarmcounter = 0x00;
 8010c38:	2300      	movs	r3, #0
 8010c3a:	60fb      	str	r3, [r7, #12]
  uint32_t alarmstatus = 0x00;
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	613b      	str	r3, [r7, #16]
  ErrorStatus status = ERROR;
 8010c40:	2300      	movs	r3, #0
 8010c42:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010c44:	4b1f      	ldr	r3, [pc, #124]	; (8010cc4 <RTC_AlarmCmd+0x98>)
 8010c46:	22ca      	movs	r2, #202	; 0xca
 8010c48:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010c4a:	4b1e      	ldr	r3, [pc, #120]	; (8010cc4 <RTC_AlarmCmd+0x98>)
 8010c4c:	2253      	movs	r2, #83	; 0x53
 8010c4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm state */
  if (NewState != DISABLE)
 8010c50:	78fb      	ldrb	r3, [r7, #3]
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d008      	beq.n	8010c68 <RTC_AlarmCmd+0x3c>
  {
    RTC->CR |= (uint32_t)RTC_Alarm;
 8010c56:	4b1b      	ldr	r3, [pc, #108]	; (8010cc4 <RTC_AlarmCmd+0x98>)
 8010c58:	4a1a      	ldr	r2, [pc, #104]	; (8010cc4 <RTC_AlarmCmd+0x98>)
 8010c5a:	6891      	ldr	r1, [r2, #8]
 8010c5c:	687a      	ldr	r2, [r7, #4]
 8010c5e:	430a      	orrs	r2, r1
 8010c60:	609a      	str	r2, [r3, #8]

    status = SUCCESS;    
 8010c62:	2301      	movs	r3, #1
 8010c64:	75fb      	strb	r3, [r7, #23]
 8010c66:	e022      	b.n	8010cae <RTC_AlarmCmd+0x82>
  }
  else
  { 
    /* Disable the Alarm in RTC_CR register */
    RTC->CR &= (uint32_t)~RTC_Alarm;
 8010c68:	4b16      	ldr	r3, [pc, #88]	; (8010cc4 <RTC_AlarmCmd+0x98>)
 8010c6a:	4a16      	ldr	r2, [pc, #88]	; (8010cc4 <RTC_AlarmCmd+0x98>)
 8010c6c:	6891      	ldr	r1, [r2, #8]
 8010c6e:	687a      	ldr	r2, [r7, #4]
 8010c70:	43d2      	mvns	r2, r2
 8010c72:	400a      	ands	r2, r1
 8010c74:	609a      	str	r2, [r3, #8]
   
    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    do
    {
      alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 8010c76:	4b13      	ldr	r3, [pc, #76]	; (8010cc4 <RTC_AlarmCmd+0x98>)
 8010c78:	68da      	ldr	r2, [r3, #12]
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	0a1b      	lsrs	r3, r3, #8
 8010c7e:	4013      	ands	r3, r2
 8010c80:	613b      	str	r3, [r7, #16]
      alarmcounter++;  
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	3301      	adds	r3, #1
 8010c86:	60fb      	str	r3, [r7, #12]
    } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010c8e:	d002      	beq.n	8010c96 <RTC_AlarmCmd+0x6a>
 8010c90:	693b      	ldr	r3, [r7, #16]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d0ef      	beq.n	8010c76 <RTC_AlarmCmd+0x4a>
    
    if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 8010c96:	4b0b      	ldr	r3, [pc, #44]	; (8010cc4 <RTC_AlarmCmd+0x98>)
 8010c98:	68da      	ldr	r2, [r3, #12]
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	0a1b      	lsrs	r3, r3, #8
 8010c9e:	4013      	ands	r3, r2
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d102      	bne.n	8010caa <RTC_AlarmCmd+0x7e>
    {
      status = ERROR;
 8010ca4:	2300      	movs	r3, #0
 8010ca6:	75fb      	strb	r3, [r7, #23]
 8010ca8:	e001      	b.n	8010cae <RTC_AlarmCmd+0x82>
    } 
    else
    {
      status = SUCCESS;
 8010caa:	2301      	movs	r3, #1
 8010cac:	75fb      	strb	r3, [r7, #23]
    }        
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010cae:	4b05      	ldr	r3, [pc, #20]	; (8010cc4 <RTC_AlarmCmd+0x98>)
 8010cb0:	22ff      	movs	r2, #255	; 0xff
 8010cb2:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8010cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	371c      	adds	r7, #28
 8010cba:	46bd      	mov	sp, r7
 8010cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc0:	4770      	bx	lr
 8010cc2:	bf00      	nop
 8010cc4:	40002800 	.word	0x40002800

08010cc8 <RTC_AlarmSubSecondConfig>:
  *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
  *                                          to activate alarm
  * @retval None
  */
void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_AlarmSubSecondMask)
{
 8010cc8:	b480      	push	{r7}
 8010cca:	b087      	sub	sp, #28
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	60f8      	str	r0, [r7, #12]
 8010cd0:	60b9      	str	r1, [r7, #8]
 8010cd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010cd8:	4b0e      	ldr	r3, [pc, #56]	; (8010d14 <RTC_AlarmSubSecondConfig+0x4c>)
 8010cda:	22ca      	movs	r2, #202	; 0xca
 8010cdc:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010cde:	4b0d      	ldr	r3, [pc, #52]	; (8010d14 <RTC_AlarmSubSecondConfig+0x4c>)
 8010ce0:	2253      	movs	r2, #83	; 0x53
 8010ce2:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Alarm A or Alarm B Sub Second registers */
  tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
 8010ce4:	68ba      	ldr	r2, [r7, #8]
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	4313      	orrs	r3, r2
 8010cea:	617b      	str	r3, [r7, #20]
  
  if (RTC_Alarm == RTC_Alarm_A)
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010cf2:	d103      	bne.n	8010cfc <RTC_AlarmSubSecondConfig+0x34>
  {
    /* Configure the Alarm A Sub Second register */
    RTC->ALRMASSR = tmpreg;
 8010cf4:	4b07      	ldr	r3, [pc, #28]	; (8010d14 <RTC_AlarmSubSecondConfig+0x4c>)
 8010cf6:	697a      	ldr	r2, [r7, #20]
 8010cf8:	645a      	str	r2, [r3, #68]	; 0x44
 8010cfa:	e002      	b.n	8010d02 <RTC_AlarmSubSecondConfig+0x3a>
  }
  else
  {
    /* Configure the Alarm B Sub Second register */
    RTC->ALRMBSSR = tmpreg;
 8010cfc:	4b05      	ldr	r3, [pc, #20]	; (8010d14 <RTC_AlarmSubSecondConfig+0x4c>)
 8010cfe:	697a      	ldr	r2, [r7, #20]
 8010d00:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8010d02:	4b04      	ldr	r3, [pc, #16]	; (8010d14 <RTC_AlarmSubSecondConfig+0x4c>)
 8010d04:	22ff      	movs	r2, #255	; 0xff
 8010d06:	625a      	str	r2, [r3, #36]	; 0x24

}
 8010d08:	371c      	adds	r7, #28
 8010d0a:	46bd      	mov	sp, r7
 8010d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d10:	4770      	bx	lr
 8010d12:	bf00      	nop
 8010d14:	40002800 	.word	0x40002800

08010d18 <RTC_GetAlarmSubSecond>:
  *     @arg RTC_Alarm_B: to select Alarm B
  * @param  None
  * @retval RTC Alarm Sub seconds value.
  */
uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
{
 8010d18:	b480      	push	{r7}
 8010d1a:	b085      	sub	sp, #20
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8010d20:	2300      	movs	r3, #0
 8010d22:	60fb      	str	r3, [r7, #12]
  
  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010d2a:	d105      	bne.n	8010d38 <RTC_GetAlarmSubSecond+0x20>
  {
    tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 8010d2c:	4b08      	ldr	r3, [pc, #32]	; (8010d50 <RTC_GetAlarmSubSecond+0x38>)
 8010d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d30:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8010d34:	60fb      	str	r3, [r7, #12]
 8010d36:	e004      	b.n	8010d42 <RTC_GetAlarmSubSecond+0x2a>
  }
  else
  {
    tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8010d38:	4b05      	ldr	r3, [pc, #20]	; (8010d50 <RTC_GetAlarmSubSecond+0x38>)
 8010d3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010d3c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8010d40:	60fb      	str	r3, [r7, #12]
  } 
  
  return (tmpreg);
 8010d42:	68fb      	ldr	r3, [r7, #12]
}
 8010d44:	4618      	mov	r0, r3
 8010d46:	3714      	adds	r7, #20
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4e:	4770      	bx	lr
 8010d50:	40002800 	.word	0x40002800

08010d54 <RTC_WakeUpClockConfig>:
  *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
  *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
  * @retval None
  */
void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
{
 8010d54:	b480      	push	{r7}
 8010d56:	b083      	sub	sp, #12
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010d5c:	4b0c      	ldr	r3, [pc, #48]	; (8010d90 <RTC_WakeUpClockConfig+0x3c>)
 8010d5e:	22ca      	movs	r2, #202	; 0xca
 8010d60:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010d62:	4b0b      	ldr	r3, [pc, #44]	; (8010d90 <RTC_WakeUpClockConfig+0x3c>)
 8010d64:	2253      	movs	r2, #83	; 0x53
 8010d66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the Wakeup Timer clock source bits in CR register */
  RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8010d68:	4b09      	ldr	r3, [pc, #36]	; (8010d90 <RTC_WakeUpClockConfig+0x3c>)
 8010d6a:	4a09      	ldr	r2, [pc, #36]	; (8010d90 <RTC_WakeUpClockConfig+0x3c>)
 8010d6c:	6892      	ldr	r2, [r2, #8]
 8010d6e:	f022 0207 	bic.w	r2, r2, #7
 8010d72:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  RTC->CR |= (uint32_t)RTC_WakeUpClock;
 8010d74:	4b06      	ldr	r3, [pc, #24]	; (8010d90 <RTC_WakeUpClockConfig+0x3c>)
 8010d76:	4a06      	ldr	r2, [pc, #24]	; (8010d90 <RTC_WakeUpClockConfig+0x3c>)
 8010d78:	6891      	ldr	r1, [r2, #8]
 8010d7a:	687a      	ldr	r2, [r7, #4]
 8010d7c:	430a      	orrs	r2, r1
 8010d7e:	609a      	str	r2, [r3, #8]
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010d80:	4b03      	ldr	r3, [pc, #12]	; (8010d90 <RTC_WakeUpClockConfig+0x3c>)
 8010d82:	22ff      	movs	r2, #255	; 0xff
 8010d84:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010d86:	370c      	adds	r7, #12
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8e:	4770      	bx	lr
 8010d90:	40002800 	.word	0x40002800

08010d94 <RTC_SetWakeUpCounter>:
  * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
  *          This parameter can be a value from 0x0000 to 0xFFFF. 
  * @retval None
  */
void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
{
 8010d94:	b480      	push	{r7}
 8010d96:	b083      	sub	sp, #12
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010d9c:	4b08      	ldr	r3, [pc, #32]	; (8010dc0 <RTC_SetWakeUpCounter+0x2c>)
 8010d9e:	22ca      	movs	r2, #202	; 0xca
 8010da0:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010da2:	4b07      	ldr	r3, [pc, #28]	; (8010dc0 <RTC_SetWakeUpCounter+0x2c>)
 8010da4:	2253      	movs	r2, #83	; 0x53
 8010da6:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Wakeup Timer counter */
  RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 8010da8:	4b05      	ldr	r3, [pc, #20]	; (8010dc0 <RTC_SetWakeUpCounter+0x2c>)
 8010daa:	687a      	ldr	r2, [r7, #4]
 8010dac:	615a      	str	r2, [r3, #20]
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010dae:	4b04      	ldr	r3, [pc, #16]	; (8010dc0 <RTC_SetWakeUpCounter+0x2c>)
 8010db0:	22ff      	movs	r2, #255	; 0xff
 8010db2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010db4:	370c      	adds	r7, #12
 8010db6:	46bd      	mov	sp, r7
 8010db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dbc:	4770      	bx	lr
 8010dbe:	bf00      	nop
 8010dc0:	40002800 	.word	0x40002800

08010dc4 <RTC_GetWakeUpCounter>:
  * @brief  Returns the RTC WakeUp timer counter value.
  * @param  None
  * @retval The RTC WakeUp Counter value.
  */
uint32_t RTC_GetWakeUpCounter(void)
{
 8010dc4:	b480      	push	{r7}
 8010dc6:	af00      	add	r7, sp, #0
  /* Get the counter value */
  return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 8010dc8:	4b03      	ldr	r3, [pc, #12]	; (8010dd8 <RTC_GetWakeUpCounter+0x14>)
 8010dca:	695b      	ldr	r3, [r3, #20]
 8010dcc:	b29b      	uxth	r3, r3
}
 8010dce:	4618      	mov	r0, r3
 8010dd0:	46bd      	mov	sp, r7
 8010dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd6:	4770      	bx	lr
 8010dd8:	40002800 	.word	0x40002800

08010ddc <RTC_WakeUpCmd>:
  * @param  NewState: new state of the WakeUp timer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
{
 8010ddc:	b480      	push	{r7}
 8010dde:	b087      	sub	sp, #28
 8010de0:	af00      	add	r7, sp, #0
 8010de2:	4603      	mov	r3, r0
 8010de4:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t wutcounter = 0x00;
 8010de6:	2300      	movs	r3, #0
 8010de8:	60fb      	str	r3, [r7, #12]
  uint32_t wutwfstatus = 0x00;
 8010dea:	2300      	movs	r3, #0
 8010dec:	613b      	str	r3, [r7, #16]
  ErrorStatus status = ERROR;
 8010dee:	2300      	movs	r3, #0
 8010df0:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010df2:	4b1e      	ldr	r3, [pc, #120]	; (8010e6c <RTC_WakeUpCmd+0x90>)
 8010df4:	22ca      	movs	r2, #202	; 0xca
 8010df6:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010df8:	4b1c      	ldr	r3, [pc, #112]	; (8010e6c <RTC_WakeUpCmd+0x90>)
 8010dfa:	2253      	movs	r2, #83	; 0x53
 8010dfc:	625a      	str	r2, [r3, #36]	; 0x24

  if (NewState != DISABLE)
 8010dfe:	79fb      	ldrb	r3, [r7, #7]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d008      	beq.n	8010e16 <RTC_WakeUpCmd+0x3a>
  {
    /* Enable the Wakeup Timer */
    RTC->CR |= (uint32_t)RTC_CR_WUTE;
 8010e04:	4b19      	ldr	r3, [pc, #100]	; (8010e6c <RTC_WakeUpCmd+0x90>)
 8010e06:	4a19      	ldr	r2, [pc, #100]	; (8010e6c <RTC_WakeUpCmd+0x90>)
 8010e08:	6892      	ldr	r2, [r2, #8]
 8010e0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010e0e:	609a      	str	r2, [r3, #8]
    status = SUCCESS;    
 8010e10:	2301      	movs	r3, #1
 8010e12:	75fb      	strb	r3, [r7, #23]
 8010e14:	e01f      	b.n	8010e56 <RTC_WakeUpCmd+0x7a>
  }
  else
  {
    /* Disable the Wakeup Timer */
    RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 8010e16:	4b15      	ldr	r3, [pc, #84]	; (8010e6c <RTC_WakeUpCmd+0x90>)
 8010e18:	4a14      	ldr	r2, [pc, #80]	; (8010e6c <RTC_WakeUpCmd+0x90>)
 8010e1a:	6892      	ldr	r2, [r2, #8]
 8010e1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010e20:	609a      	str	r2, [r3, #8]
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 8010e22:	4b12      	ldr	r3, [pc, #72]	; (8010e6c <RTC_WakeUpCmd+0x90>)
 8010e24:	68db      	ldr	r3, [r3, #12]
 8010e26:	f003 0304 	and.w	r3, r3, #4
 8010e2a:	613b      	str	r3, [r7, #16]
      wutcounter++;  
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	3301      	adds	r3, #1
 8010e30:	60fb      	str	r3, [r7, #12]
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010e38:	d002      	beq.n	8010e40 <RTC_WakeUpCmd+0x64>
 8010e3a:	693b      	ldr	r3, [r7, #16]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d0f0      	beq.n	8010e22 <RTC_WakeUpCmd+0x46>
    
    if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 8010e40:	4b0a      	ldr	r3, [pc, #40]	; (8010e6c <RTC_WakeUpCmd+0x90>)
 8010e42:	68db      	ldr	r3, [r3, #12]
 8010e44:	f003 0304 	and.w	r3, r3, #4
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d102      	bne.n	8010e52 <RTC_WakeUpCmd+0x76>
    {
      status = ERROR;
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	75fb      	strb	r3, [r7, #23]
 8010e50:	e001      	b.n	8010e56 <RTC_WakeUpCmd+0x7a>
    }
    else
    {
      status = SUCCESS;
 8010e52:	2301      	movs	r3, #1
 8010e54:	75fb      	strb	r3, [r7, #23]
    }    
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010e56:	4b05      	ldr	r3, [pc, #20]	; (8010e6c <RTC_WakeUpCmd+0x90>)
 8010e58:	22ff      	movs	r2, #255	; 0xff
 8010e5a:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8010e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e5e:	4618      	mov	r0, r3
 8010e60:	371c      	adds	r7, #28
 8010e62:	46bd      	mov	sp, r7
 8010e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e68:	4770      	bx	lr
 8010e6a:	bf00      	nop
 8010e6c:	40002800 	.word	0x40002800

08010e70 <RTC_DayLightSavingConfig>:
  *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
  *            @arg RTC_StoreOperation_Set: BCK Bit Set
  * @retval None
  */
void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
{
 8010e70:	b480      	push	{r7}
 8010e72:	b083      	sub	sp, #12
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
 8010e78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010e7a:	4b0e      	ldr	r3, [pc, #56]	; (8010eb4 <RTC_DayLightSavingConfig+0x44>)
 8010e7c:	22ca      	movs	r2, #202	; 0xca
 8010e7e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010e80:	4b0c      	ldr	r3, [pc, #48]	; (8010eb4 <RTC_DayLightSavingConfig+0x44>)
 8010e82:	2253      	movs	r2, #83	; 0x53
 8010e84:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 8010e86:	4b0b      	ldr	r3, [pc, #44]	; (8010eb4 <RTC_DayLightSavingConfig+0x44>)
 8010e88:	4a0a      	ldr	r2, [pc, #40]	; (8010eb4 <RTC_DayLightSavingConfig+0x44>)
 8010e8a:	6892      	ldr	r2, [r2, #8]
 8010e8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010e90:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 8010e92:	4b08      	ldr	r3, [pc, #32]	; (8010eb4 <RTC_DayLightSavingConfig+0x44>)
 8010e94:	4a07      	ldr	r2, [pc, #28]	; (8010eb4 <RTC_DayLightSavingConfig+0x44>)
 8010e96:	6891      	ldr	r1, [r2, #8]
 8010e98:	6878      	ldr	r0, [r7, #4]
 8010e9a:	683a      	ldr	r2, [r7, #0]
 8010e9c:	4302      	orrs	r2, r0
 8010e9e:	430a      	orrs	r2, r1
 8010ea0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010ea2:	4b04      	ldr	r3, [pc, #16]	; (8010eb4 <RTC_DayLightSavingConfig+0x44>)
 8010ea4:	22ff      	movs	r2, #255	; 0xff
 8010ea6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010ea8:	370c      	adds	r7, #12
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb0:	4770      	bx	lr
 8010eb2:	bf00      	nop
 8010eb4:	40002800 	.word	0x40002800

08010eb8 <RTC_GetStoreOperation>:
  * @retval RTC Day Light Saving stored operation.
  *          - RTC_StoreOperation_Reset
  *          - RTC_StoreOperation_Set       
  */
uint32_t RTC_GetStoreOperation(void)
{
 8010eb8:	b480      	push	{r7}
 8010eba:	af00      	add	r7, sp, #0
  return (RTC->CR & RTC_CR_BCK);
 8010ebc:	4b04      	ldr	r3, [pc, #16]	; (8010ed0 <RTC_GetStoreOperation+0x18>)
 8010ebe:	689b      	ldr	r3, [r3, #8]
 8010ec0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
}
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ecc:	4770      	bx	lr
 8010ece:	bf00      	nop
 8010ed0:	40002800 	.word	0x40002800

08010ed4 <RTC_OutputConfig>:
  *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
  *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
  * @retval None
  */
void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
{
 8010ed4:	b480      	push	{r7}
 8010ed6:	b083      	sub	sp, #12
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	6078      	str	r0, [r7, #4]
 8010edc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT(RTC_Output));
  assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010ede:	4b0e      	ldr	r3, [pc, #56]	; (8010f18 <RTC_OutputConfig+0x44>)
 8010ee0:	22ca      	movs	r2, #202	; 0xca
 8010ee2:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010ee4:	4b0c      	ldr	r3, [pc, #48]	; (8010f18 <RTC_OutputConfig+0x44>)
 8010ee6:	2253      	movs	r2, #83	; 0x53
 8010ee8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 8010eea:	4b0b      	ldr	r3, [pc, #44]	; (8010f18 <RTC_OutputConfig+0x44>)
 8010eec:	4a0a      	ldr	r2, [pc, #40]	; (8010f18 <RTC_OutputConfig+0x44>)
 8010eee:	6892      	ldr	r2, [r2, #8]
 8010ef0:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8010ef4:	609a      	str	r2, [r3, #8]

  /* Configure the output selection and polarity */
  RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 8010ef6:	4b08      	ldr	r3, [pc, #32]	; (8010f18 <RTC_OutputConfig+0x44>)
 8010ef8:	4a07      	ldr	r2, [pc, #28]	; (8010f18 <RTC_OutputConfig+0x44>)
 8010efa:	6891      	ldr	r1, [r2, #8]
 8010efc:	6878      	ldr	r0, [r7, #4]
 8010efe:	683a      	ldr	r2, [r7, #0]
 8010f00:	4302      	orrs	r2, r0
 8010f02:	430a      	orrs	r2, r1
 8010f04:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010f06:	4b04      	ldr	r3, [pc, #16]	; (8010f18 <RTC_OutputConfig+0x44>)
 8010f08:	22ff      	movs	r2, #255	; 0xff
 8010f0a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010f0c:	370c      	adds	r7, #12
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f14:	4770      	bx	lr
 8010f16:	bf00      	nop
 8010f18:	40002800 	.word	0x40002800

08010f1c <RTC_CoarseCalibConfig>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are initialized
  *          - ERROR: RTC Coarse calibration are not initialized     
  */
ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
{
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b084      	sub	sp, #16
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	6078      	str	r0, [r7, #4]
 8010f24:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8010f26:	2300      	movs	r3, #0
 8010f28:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
  assert_param(IS_RTC_CALIB_VALUE(Value)); 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010f2a:	4b0f      	ldr	r3, [pc, #60]	; (8010f68 <RTC_CoarseCalibConfig+0x4c>)
 8010f2c:	22ca      	movs	r2, #202	; 0xca
 8010f2e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010f30:	4b0d      	ldr	r3, [pc, #52]	; (8010f68 <RTC_CoarseCalibConfig+0x4c>)
 8010f32:	2253      	movs	r2, #83	; 0x53
 8010f34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8010f36:	f7ff fa7f 	bl	8010438 <RTC_EnterInitMode>
 8010f3a:	4603      	mov	r3, r0
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d102      	bne.n	8010f46 <RTC_CoarseCalibConfig+0x2a>
  {
    status = ERROR;
 8010f40:	2300      	movs	r3, #0
 8010f42:	73fb      	strb	r3, [r7, #15]
 8010f44:	e008      	b.n	8010f58 <RTC_CoarseCalibConfig+0x3c>
  } 
  else
  {
    /* Set the coarse calibration value */
    RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
 8010f46:	4b08      	ldr	r3, [pc, #32]	; (8010f68 <RTC_CoarseCalibConfig+0x4c>)
 8010f48:	6879      	ldr	r1, [r7, #4]
 8010f4a:	683a      	ldr	r2, [r7, #0]
 8010f4c:	430a      	orrs	r2, r1
 8010f4e:	619a      	str	r2, [r3, #24]
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 8010f50:	f7ff faac 	bl	80104ac <RTC_ExitInitMode>
    
    status = SUCCESS;
 8010f54:	2301      	movs	r3, #1
 8010f56:	73fb      	strb	r3, [r7, #15]
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010f58:	4b03      	ldr	r3, [pc, #12]	; (8010f68 <RTC_CoarseCalibConfig+0x4c>)
 8010f5a:	22ff      	movs	r2, #255	; 0xff
 8010f5c:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8010f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f60:	4618      	mov	r0, r3
 8010f62:	3710      	adds	r7, #16
 8010f64:	46bd      	mov	sp, r7
 8010f66:	bd80      	pop	{r7, pc}
 8010f68:	40002800 	.word	0x40002800

08010f6c <RTC_CoarseCalibCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are enabled/disabled
  *          - ERROR: RTC Coarse calibration are not enabled/disabled    
  */
ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
{
 8010f6c:	b580      	push	{r7, lr}
 8010f6e:	b084      	sub	sp, #16
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	4603      	mov	r3, r0
 8010f74:	71fb      	strb	r3, [r7, #7]
  ErrorStatus status = ERROR;
 8010f76:	2300      	movs	r3, #0
 8010f78:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010f7a:	4b15      	ldr	r3, [pc, #84]	; (8010fd0 <RTC_CoarseCalibCmd+0x64>)
 8010f7c:	22ca      	movs	r2, #202	; 0xca
 8010f7e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010f80:	4b13      	ldr	r3, [pc, #76]	; (8010fd0 <RTC_CoarseCalibCmd+0x64>)
 8010f82:	2253      	movs	r2, #83	; 0x53
 8010f84:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8010f86:	f7ff fa57 	bl	8010438 <RTC_EnterInitMode>
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d102      	bne.n	8010f96 <RTC_CoarseCalibCmd+0x2a>
  {
    status =  ERROR;
 8010f90:	2300      	movs	r3, #0
 8010f92:	73fb      	strb	r3, [r7, #15]
 8010f94:	e013      	b.n	8010fbe <RTC_CoarseCalibCmd+0x52>
  }
  else
  {
    if (NewState != DISABLE)
 8010f96:	79fb      	ldrb	r3, [r7, #7]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d006      	beq.n	8010faa <RTC_CoarseCalibCmd+0x3e>
    {
      /* Enable the Coarse Calibration */
      RTC->CR |= (uint32_t)RTC_CR_DCE;
 8010f9c:	4b0c      	ldr	r3, [pc, #48]	; (8010fd0 <RTC_CoarseCalibCmd+0x64>)
 8010f9e:	4a0c      	ldr	r2, [pc, #48]	; (8010fd0 <RTC_CoarseCalibCmd+0x64>)
 8010fa0:	6892      	ldr	r2, [r2, #8]
 8010fa2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8010fa6:	609a      	str	r2, [r3, #8]
 8010fa8:	e005      	b.n	8010fb6 <RTC_CoarseCalibCmd+0x4a>
    }
    else
    { 
      /* Disable the Coarse Calibration */
      RTC->CR &= (uint32_t)~RTC_CR_DCE;
 8010faa:	4b09      	ldr	r3, [pc, #36]	; (8010fd0 <RTC_CoarseCalibCmd+0x64>)
 8010fac:	4a08      	ldr	r2, [pc, #32]	; (8010fd0 <RTC_CoarseCalibCmd+0x64>)
 8010fae:	6892      	ldr	r2, [r2, #8]
 8010fb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010fb4:	609a      	str	r2, [r3, #8]
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 8010fb6:	f7ff fa79 	bl	80104ac <RTC_ExitInitMode>
    
    status = SUCCESS;
 8010fba:	2301      	movs	r3, #1
 8010fbc:	73fb      	strb	r3, [r7, #15]
  } 
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010fbe:	4b04      	ldr	r3, [pc, #16]	; (8010fd0 <RTC_CoarseCalibCmd+0x64>)
 8010fc0:	22ff      	movs	r2, #255	; 0xff
 8010fc2:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8010fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	3710      	adds	r7, #16
 8010fca:	46bd      	mov	sp, r7
 8010fcc:	bd80      	pop	{r7, pc}
 8010fce:	bf00      	nop
 8010fd0:	40002800 	.word	0x40002800

08010fd4 <RTC_CalibOutputCmd>:
  * @param  NewState: new state of the digital calibration Output.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_CalibOutputCmd(FunctionalState NewState)
{
 8010fd4:	b480      	push	{r7}
 8010fd6:	b083      	sub	sp, #12
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	4603      	mov	r3, r0
 8010fdc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010fde:	4b0f      	ldr	r3, [pc, #60]	; (801101c <RTC_CalibOutputCmd+0x48>)
 8010fe0:	22ca      	movs	r2, #202	; 0xca
 8010fe2:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010fe4:	4b0d      	ldr	r3, [pc, #52]	; (801101c <RTC_CalibOutputCmd+0x48>)
 8010fe6:	2253      	movs	r2, #83	; 0x53
 8010fe8:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (NewState != DISABLE)
 8010fea:	79fb      	ldrb	r3, [r7, #7]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d006      	beq.n	8010ffe <RTC_CalibOutputCmd+0x2a>
  {
    /* Enable the RTC clock output */
    RTC->CR |= (uint32_t)RTC_CR_COE;
 8010ff0:	4b0a      	ldr	r3, [pc, #40]	; (801101c <RTC_CalibOutputCmd+0x48>)
 8010ff2:	4a0a      	ldr	r2, [pc, #40]	; (801101c <RTC_CalibOutputCmd+0x48>)
 8010ff4:	6892      	ldr	r2, [r2, #8]
 8010ff6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8010ffa:	609a      	str	r2, [r3, #8]
 8010ffc:	e005      	b.n	801100a <RTC_CalibOutputCmd+0x36>
  }
  else
  { 
    /* Disable the RTC clock output */
    RTC->CR &= (uint32_t)~RTC_CR_COE;
 8010ffe:	4b07      	ldr	r3, [pc, #28]	; (801101c <RTC_CalibOutputCmd+0x48>)
 8011000:	4a06      	ldr	r2, [pc, #24]	; (801101c <RTC_CalibOutputCmd+0x48>)
 8011002:	6892      	ldr	r2, [r2, #8]
 8011004:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8011008:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 801100a:	4b04      	ldr	r3, [pc, #16]	; (801101c <RTC_CalibOutputCmd+0x48>)
 801100c:	22ff      	movs	r2, #255	; 0xff
 801100e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8011010:	370c      	adds	r7, #12
 8011012:	46bd      	mov	sp, r7
 8011014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011018:	4770      	bx	lr
 801101a:	bf00      	nop
 801101c:	40002800 	.word	0x40002800

08011020 <RTC_CalibOutputConfig>:
  *     @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
  *     @arg RTC_CalibOutput_1Hz  : A signal has a regular waveform at 1Hz.
  * @retval None
*/
void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
{
 8011020:	b480      	push	{r7}
 8011022:	b083      	sub	sp, #12
 8011024:	af00      	add	r7, sp, #0
 8011026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8011028:	4b0c      	ldr	r3, [pc, #48]	; (801105c <RTC_CalibOutputConfig+0x3c>)
 801102a:	22ca      	movs	r2, #202	; 0xca
 801102c:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 801102e:	4b0b      	ldr	r3, [pc, #44]	; (801105c <RTC_CalibOutputConfig+0x3c>)
 8011030:	2253      	movs	r2, #83	; 0x53
 8011032:	625a      	str	r2, [r3, #36]	; 0x24
  
  /*clear flags before configuration */
  RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
 8011034:	4b09      	ldr	r3, [pc, #36]	; (801105c <RTC_CalibOutputConfig+0x3c>)
 8011036:	4a09      	ldr	r2, [pc, #36]	; (801105c <RTC_CalibOutputConfig+0x3c>)
 8011038:	6892      	ldr	r2, [r2, #8]
 801103a:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 801103e:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  RTC->CR |= (uint32_t)RTC_CalibOutput;
 8011040:	4b06      	ldr	r3, [pc, #24]	; (801105c <RTC_CalibOutputConfig+0x3c>)
 8011042:	4a06      	ldr	r2, [pc, #24]	; (801105c <RTC_CalibOutputConfig+0x3c>)
 8011044:	6891      	ldr	r1, [r2, #8]
 8011046:	687a      	ldr	r2, [r7, #4]
 8011048:	430a      	orrs	r2, r1
 801104a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 801104c:	4b03      	ldr	r3, [pc, #12]	; (801105c <RTC_CalibOutputConfig+0x3c>)
 801104e:	22ff      	movs	r2, #255	; 0xff
 8011050:	625a      	str	r2, [r3, #36]	; 0x24
}
 8011052:	370c      	adds	r7, #12
 8011054:	46bd      	mov	sp, r7
 8011056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105a:	4770      	bx	lr
 801105c:	40002800 	.word	0x40002800

08011060 <RTC_SmoothCalibConfig>:
  *          - ERROR: RTC Calib registers are not configured
*/
ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
                                  uint32_t RTC_SmoothCalibPlusPulses,
                                  uint32_t RTC_SmouthCalibMinusPulsesValue)
{
 8011060:	b480      	push	{r7}
 8011062:	b087      	sub	sp, #28
 8011064:	af00      	add	r7, sp, #0
 8011066:	60f8      	str	r0, [r7, #12]
 8011068:	60b9      	str	r1, [r7, #8]
 801106a:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 801106c:	2300      	movs	r3, #0
 801106e:	75fb      	strb	r3, [r7, #23]
  uint32_t recalpfcount = 0;
 8011070:	2300      	movs	r3, #0
 8011072:	613b      	str	r3, [r7, #16]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8011074:	4b1a      	ldr	r3, [pc, #104]	; (80110e0 <RTC_SmoothCalibConfig+0x80>)
 8011076:	22ca      	movs	r2, #202	; 0xca
 8011078:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 801107a:	4b19      	ldr	r3, [pc, #100]	; (80110e0 <RTC_SmoothCalibConfig+0x80>)
 801107c:	2253      	movs	r2, #83	; 0x53
 801107e:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* check if a calibration is pending*/
  if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
 8011080:	4b17      	ldr	r3, [pc, #92]	; (80110e0 <RTC_SmoothCalibConfig+0x80>)
 8011082:	68db      	ldr	r3, [r3, #12]
 8011084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011088:	2b00      	cmp	r3, #0
 801108a:	d00d      	beq.n	80110a8 <RTC_SmoothCalibConfig+0x48>
  {
    /* wait until the Calibration is completed*/
    while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 801108c:	e002      	b.n	8011094 <RTC_SmoothCalibConfig+0x34>
    {
      recalpfcount++;
 801108e:	693b      	ldr	r3, [r7, #16]
 8011090:	3301      	adds	r3, #1
 8011092:	613b      	str	r3, [r7, #16]
  
  /* check if a calibration is pending*/
  if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
  {
    /* wait until the Calibration is completed*/
    while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 8011094:	4b12      	ldr	r3, [pc, #72]	; (80110e0 <RTC_SmoothCalibConfig+0x80>)
 8011096:	68db      	ldr	r3, [r3, #12]
 8011098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801109c:	2b00      	cmp	r3, #0
 801109e:	d003      	beq.n	80110a8 <RTC_SmoothCalibConfig+0x48>
 80110a0:	693b      	ldr	r3, [r7, #16]
 80110a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80110a6:	d1f2      	bne.n	801108e <RTC_SmoothCalibConfig+0x2e>
      recalpfcount++;
    }
  }

  /* check if the calibration pending is completed or if there is no calibration operation at all*/
  if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 80110a8:	4b0d      	ldr	r3, [pc, #52]	; (80110e0 <RTC_SmoothCalibConfig+0x80>)
 80110aa:	68db      	ldr	r3, [r3, #12]
 80110ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d109      	bne.n	80110c8 <RTC_SmoothCalibConfig+0x68>
  {
    /* Configure the Smooth calibration settings */
    RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | (uint32_t)RTC_SmouthCalibMinusPulsesValue);
 80110b4:	4b0a      	ldr	r3, [pc, #40]	; (80110e0 <RTC_SmoothCalibConfig+0x80>)
 80110b6:	68f9      	ldr	r1, [r7, #12]
 80110b8:	68ba      	ldr	r2, [r7, #8]
 80110ba:	4311      	orrs	r1, r2
 80110bc:	687a      	ldr	r2, [r7, #4]
 80110be:	430a      	orrs	r2, r1
 80110c0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = SUCCESS;
 80110c2:	2301      	movs	r3, #1
 80110c4:	75fb      	strb	r3, [r7, #23]
 80110c6:	e001      	b.n	80110cc <RTC_SmoothCalibConfig+0x6c>
  }
  else
  {
    status = ERROR;
 80110c8:	2300      	movs	r3, #0
 80110ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 80110cc:	4b04      	ldr	r3, [pc, #16]	; (80110e0 <RTC_SmoothCalibConfig+0x80>)
 80110ce:	22ff      	movs	r2, #255	; 0xff
 80110d0:	625a      	str	r2, [r3, #36]	; 0x24
  
  return (ErrorStatus)(status);
 80110d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80110d4:	4618      	mov	r0, r3
 80110d6:	371c      	adds	r7, #28
 80110d8:	46bd      	mov	sp, r7
 80110da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110de:	4770      	bx	lr
 80110e0:	40002800 	.word	0x40002800

080110e4 <RTC_TimeStampCmd>:
  * @param  NewState: new state of the TimeStamp.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
{
 80110e4:	b480      	push	{r7}
 80110e6:	b085      	sub	sp, #20
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
 80110ec:	460b      	mov	r3, r1
 80110ee:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 80110f0:	2300      	movs	r3, #0
 80110f2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80110f4:	4b12      	ldr	r3, [pc, #72]	; (8011140 <RTC_TimeStampCmd+0x5c>)
 80110f6:	689b      	ldr	r3, [r3, #8]
 80110f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80110fc:	f023 0308 	bic.w	r3, r3, #8
 8011100:	60fb      	str	r3, [r7, #12]

  /* Get the new configuration */
  if (NewState != DISABLE)
 8011102:	78fb      	ldrb	r3, [r7, #3]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d006      	beq.n	8011116 <RTC_TimeStampCmd+0x32>
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 8011108:	687a      	ldr	r2, [r7, #4]
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	4313      	orrs	r3, r2
 801110e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011112:	60fb      	str	r3, [r7, #12]
 8011114:	e003      	b.n	801111e <RTC_TimeStampCmd+0x3a>
  }
  else
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 8011116:	68fa      	ldr	r2, [r7, #12]
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	4313      	orrs	r3, r2
 801111c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 801111e:	4b08      	ldr	r3, [pc, #32]	; (8011140 <RTC_TimeStampCmd+0x5c>)
 8011120:	22ca      	movs	r2, #202	; 0xca
 8011122:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8011124:	4b06      	ldr	r3, [pc, #24]	; (8011140 <RTC_TimeStampCmd+0x5c>)
 8011126:	2253      	movs	r2, #83	; 0x53
 8011128:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Time Stamp TSEDGE and Enable bits */
  RTC->CR = (uint32_t)tmpreg;
 801112a:	4b05      	ldr	r3, [pc, #20]	; (8011140 <RTC_TimeStampCmd+0x5c>)
 801112c:	68fa      	ldr	r2, [r7, #12]
 801112e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8011130:	4b03      	ldr	r3, [pc, #12]	; (8011140 <RTC_TimeStampCmd+0x5c>)
 8011132:	22ff      	movs	r2, #255	; 0xff
 8011134:	625a      	str	r2, [r3, #36]	; 0x24
}
 8011136:	3714      	adds	r7, #20
 8011138:	46bd      	mov	sp, r7
 801113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801113e:	4770      	bx	lr
 8011140:	40002800 	.word	0x40002800

08011144 <RTC_GetTimeStamp>:
  *                             contains the TimeStamp date values.     
  * @retval None
  */
void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
                                      RTC_DateTypeDef* RTC_StampDateStruct)
{
 8011144:	b580      	push	{r7, lr}
 8011146:	b086      	sub	sp, #24
 8011148:	af00      	add	r7, sp, #0
 801114a:	60f8      	str	r0, [r7, #12]
 801114c:	60b9      	str	r1, [r7, #8]
 801114e:	607a      	str	r2, [r7, #4]
  uint32_t tmptime = 0, tmpdate = 0;
 8011150:	2300      	movs	r3, #0
 8011152:	617b      	str	r3, [r7, #20]
 8011154:	2300      	movs	r3, #0
 8011156:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the TimeStamp time and date registers values */
  tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 8011158:	4b3e      	ldr	r3, [pc, #248]	; (8011254 <RTC_GetTimeStamp+0x110>)
 801115a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801115c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8011160:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8011164:	617b      	str	r3, [r7, #20]
  tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 8011166:	4b3b      	ldr	r3, [pc, #236]	; (8011254 <RTC_GetTimeStamp+0x110>)
 8011168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801116a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801116e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011172:	613b      	str	r3, [r7, #16]

  /* Fill the Time structure fields with the read parameters */
  RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8011174:	697b      	ldr	r3, [r7, #20]
 8011176:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 801117a:	0c1b      	lsrs	r3, r3, #16
 801117c:	b2da      	uxtb	r2, r3
 801117e:	68bb      	ldr	r3, [r7, #8]
 8011180:	701a      	strb	r2, [r3, #0]
  RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 8011182:	697b      	ldr	r3, [r7, #20]
 8011184:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8011188:	0a1b      	lsrs	r3, r3, #8
 801118a:	b2da      	uxtb	r2, r3
 801118c:	68bb      	ldr	r3, [r7, #8]
 801118e:	705a      	strb	r2, [r3, #1]
  RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 8011190:	697b      	ldr	r3, [r7, #20]
 8011192:	b2db      	uxtb	r3, r3
 8011194:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011198:	b2da      	uxtb	r2, r3
 801119a:	68bb      	ldr	r3, [r7, #8]
 801119c:	709a      	strb	r2, [r3, #2]
  RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 801119e:	697b      	ldr	r3, [r7, #20]
 80111a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80111a4:	0c1b      	lsrs	r3, r3, #16
 80111a6:	b2da      	uxtb	r2, r3
 80111a8:	68bb      	ldr	r3, [r7, #8]
 80111aa:	70da      	strb	r2, [r3, #3]

  /* Fill the Date structure fields with the read parameters */
  RTC_StampDateStruct->RTC_Year = 0;
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	2200      	movs	r2, #0
 80111b0:	70da      	strb	r2, [r3, #3]
  RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80111b2:	693b      	ldr	r3, [r7, #16]
 80111b4:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 80111b8:	0a1b      	lsrs	r3, r3, #8
 80111ba:	b2da      	uxtb	r2, r3
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	705a      	strb	r2, [r3, #1]
  RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 80111c0:	693b      	ldr	r3, [r7, #16]
 80111c2:	b2db      	uxtb	r3, r3
 80111c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80111c8:	b2da      	uxtb	r2, r3
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	709a      	strb	r2, [r3, #2]
  RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 80111ce:	693b      	ldr	r3, [r7, #16]
 80111d0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80111d4:	0b5b      	lsrs	r3, r3, #13
 80111d6:	b2da      	uxtb	r2, r3
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d135      	bne.n	801124e <RTC_GetTimeStamp+0x10a>
  {
    /* Convert the Time structure parameters to Binary format */
    RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 80111e2:	68bb      	ldr	r3, [r7, #8]
 80111e4:	781b      	ldrb	r3, [r3, #0]
 80111e6:	4618      	mov	r0, r3
 80111e8:	f000 faaa 	bl	8011740 <RTC_Bcd2ToByte>
 80111ec:	4603      	mov	r3, r0
 80111ee:	461a      	mov	r2, r3
 80111f0:	68bb      	ldr	r3, [r7, #8]
 80111f2:	701a      	strb	r2, [r3, #0]
    RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 80111f4:	68bb      	ldr	r3, [r7, #8]
 80111f6:	785b      	ldrb	r3, [r3, #1]
 80111f8:	4618      	mov	r0, r3
 80111fa:	f000 faa1 	bl	8011740 <RTC_Bcd2ToByte>
 80111fe:	4603      	mov	r3, r0
 8011200:	461a      	mov	r2, r3
 8011202:	68bb      	ldr	r3, [r7, #8]
 8011204:	705a      	strb	r2, [r3, #1]
    RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 8011206:	68bb      	ldr	r3, [r7, #8]
 8011208:	789b      	ldrb	r3, [r3, #2]
 801120a:	4618      	mov	r0, r3
 801120c:	f000 fa98 	bl	8011740 <RTC_Bcd2ToByte>
 8011210:	4603      	mov	r3, r0
 8011212:	461a      	mov	r2, r3
 8011214:	68bb      	ldr	r3, [r7, #8]
 8011216:	709a      	strb	r2, [r3, #2]

    /* Convert the Date structure parameters to Binary format */
    RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	785b      	ldrb	r3, [r3, #1]
 801121c:	4618      	mov	r0, r3
 801121e:	f000 fa8f 	bl	8011740 <RTC_Bcd2ToByte>
 8011222:	4603      	mov	r3, r0
 8011224:	461a      	mov	r2, r3
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	705a      	strb	r2, [r3, #1]
    RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	789b      	ldrb	r3, [r3, #2]
 801122e:	4618      	mov	r0, r3
 8011230:	f000 fa86 	bl	8011740 <RTC_Bcd2ToByte>
 8011234:	4603      	mov	r3, r0
 8011236:	461a      	mov	r2, r3
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	709a      	strb	r2, [r3, #2]
    RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	781b      	ldrb	r3, [r3, #0]
 8011240:	4618      	mov	r0, r3
 8011242:	f000 fa7d 	bl	8011740 <RTC_Bcd2ToByte>
 8011246:	4603      	mov	r3, r0
 8011248:	461a      	mov	r2, r3
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	701a      	strb	r2, [r3, #0]
  }
}
 801124e:	3718      	adds	r7, #24
 8011250:	46bd      	mov	sp, r7
 8011252:	bd80      	pop	{r7, pc}
 8011254:	40002800 	.word	0x40002800

08011258 <RTC_GetTimeStampSubSecond>:
  * @brief  Get the RTC timestamp Sub seconds value.
  * @param  None
  * @retval RTC current timestamp Sub seconds value.
  */
uint32_t RTC_GetTimeStampSubSecond(void)
{
 8011258:	b480      	push	{r7}
 801125a:	af00      	add	r7, sp, #0
  /* Get timestamp sub seconds values from the correspondent registers */
  return (uint32_t)(RTC->TSSSR);
 801125c:	4b03      	ldr	r3, [pc, #12]	; (801126c <RTC_GetTimeStampSubSecond+0x14>)
 801125e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8011260:	4618      	mov	r0, r3
 8011262:	46bd      	mov	sp, r7
 8011264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011268:	4770      	bx	lr
 801126a:	bf00      	nop
 801126c:	40002800 	.word	0x40002800

08011270 <RTC_TamperTriggerConfig>:
  *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
  *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
  * @retval None
  */
void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
{
 8011270:	b480      	push	{r7}
 8011272:	b083      	sub	sp, #12
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
 8011278:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
  assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
 
  if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 801127a:	683b      	ldr	r3, [r7, #0]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d108      	bne.n	8011292 <RTC_TamperTriggerConfig+0x22>
  {  
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 8011280:	4b0a      	ldr	r3, [pc, #40]	; (80112ac <RTC_TamperTriggerConfig+0x3c>)
 8011282:	4a0a      	ldr	r2, [pc, #40]	; (80112ac <RTC_TamperTriggerConfig+0x3c>)
 8011284:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8011286:	687a      	ldr	r2, [r7, #4]
 8011288:	0052      	lsls	r2, r2, #1
 801128a:	43d2      	mvns	r2, r2
 801128c:	400a      	ands	r2, r1
 801128e:	641a      	str	r2, [r3, #64]	; 0x40
 8011290:	e006      	b.n	80112a0 <RTC_TamperTriggerConfig+0x30>
  }
  else
  { 
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 8011292:	4b06      	ldr	r3, [pc, #24]	; (80112ac <RTC_TamperTriggerConfig+0x3c>)
 8011294:	4a05      	ldr	r2, [pc, #20]	; (80112ac <RTC_TamperTriggerConfig+0x3c>)
 8011296:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8011298:	687a      	ldr	r2, [r7, #4]
 801129a:	0052      	lsls	r2, r2, #1
 801129c:	430a      	orrs	r2, r1
 801129e:	641a      	str	r2, [r3, #64]	; 0x40
  }  
}
 80112a0:	370c      	adds	r7, #12
 80112a2:	46bd      	mov	sp, r7
 80112a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a8:	4770      	bx	lr
 80112aa:	bf00      	nop
 80112ac:	40002800 	.word	0x40002800

080112b0 <RTC_TamperCmd>:
  * @param  NewState: new state of the tamper pin.
  *          This parameter can be: ENABLE or DISABLE.                   
  * @retval None
  */
void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
{
 80112b0:	b480      	push	{r7}
 80112b2:	b083      	sub	sp, #12
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	6078      	str	r0, [r7, #4]
 80112b8:	460b      	mov	r3, r1
 80112ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80112bc:	78fb      	ldrb	r3, [r7, #3]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d006      	beq.n	80112d0 <RTC_TamperCmd+0x20>
  {
    /* Enable the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_Tamper;
 80112c2:	4b09      	ldr	r3, [pc, #36]	; (80112e8 <RTC_TamperCmd+0x38>)
 80112c4:	4a08      	ldr	r2, [pc, #32]	; (80112e8 <RTC_TamperCmd+0x38>)
 80112c6:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80112c8:	687a      	ldr	r2, [r7, #4]
 80112ca:	430a      	orrs	r2, r1
 80112cc:	641a      	str	r2, [r3, #64]	; 0x40
 80112ce:	e006      	b.n	80112de <RTC_TamperCmd+0x2e>
  }
  else
  {
    /* Disable the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 80112d0:	4b05      	ldr	r3, [pc, #20]	; (80112e8 <RTC_TamperCmd+0x38>)
 80112d2:	4a05      	ldr	r2, [pc, #20]	; (80112e8 <RTC_TamperCmd+0x38>)
 80112d4:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80112d6:	687a      	ldr	r2, [r7, #4]
 80112d8:	43d2      	mvns	r2, r2
 80112da:	400a      	ands	r2, r1
 80112dc:	641a      	str	r2, [r3, #64]	; 0x40
  }  
}
 80112de:	370c      	adds	r7, #12
 80112e0:	46bd      	mov	sp, r7
 80112e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e6:	4770      	bx	lr
 80112e8:	40002800 	.word	0x40002800

080112ec <RTC_TamperFilterConfig>:
  *     @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
  *                                    samples at the active level 
  * @retval None
  */
void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
{
 80112ec:	b480      	push	{r7}
 80112ee:	b083      	sub	sp, #12
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
   
  /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 80112f4:	4b08      	ldr	r3, [pc, #32]	; (8011318 <RTC_TamperFilterConfig+0x2c>)
 80112f6:	4a08      	ldr	r2, [pc, #32]	; (8011318 <RTC_TamperFilterConfig+0x2c>)
 80112f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80112fa:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 80112fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
 8011300:	4b05      	ldr	r3, [pc, #20]	; (8011318 <RTC_TamperFilterConfig+0x2c>)
 8011302:	4a05      	ldr	r2, [pc, #20]	; (8011318 <RTC_TamperFilterConfig+0x2c>)
 8011304:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8011306:	687a      	ldr	r2, [r7, #4]
 8011308:	430a      	orrs	r2, r1
 801130a:	641a      	str	r2, [r3, #64]	; 0x40
}
 801130c:	370c      	adds	r7, #12
 801130e:	46bd      	mov	sp, r7
 8011310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011314:	4770      	bx	lr
 8011316:	bf00      	nop
 8011318:	40002800 	.word	0x40002800

0801131c <RTC_TamperSamplingFreqConfig>:
  *     @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
  *                                           with a frequency =  RTCCLK / 256  
  * @retval None
  */
void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
{
 801131c:	b480      	push	{r7}
 801131e:	b083      	sub	sp, #12
 8011320:	af00      	add	r7, sp, #0
 8011322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
 
  /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 8011324:	4b08      	ldr	r3, [pc, #32]	; (8011348 <RTC_TamperSamplingFreqConfig+0x2c>)
 8011326:	4a08      	ldr	r2, [pc, #32]	; (8011348 <RTC_TamperSamplingFreqConfig+0x2c>)
 8011328:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801132a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801132e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
 8011330:	4b05      	ldr	r3, [pc, #20]	; (8011348 <RTC_TamperSamplingFreqConfig+0x2c>)
 8011332:	4a05      	ldr	r2, [pc, #20]	; (8011348 <RTC_TamperSamplingFreqConfig+0x2c>)
 8011334:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8011336:	687a      	ldr	r2, [r7, #4]
 8011338:	430a      	orrs	r2, r1
 801133a:	641a      	str	r2, [r3, #64]	; 0x40
}
 801133c:	370c      	adds	r7, #12
 801133e:	46bd      	mov	sp, r7
 8011340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011344:	4770      	bx	lr
 8011346:	bf00      	nop
 8011348:	40002800 	.word	0x40002800

0801134c <RTC_TamperPinsPrechargeDuration>:
  *     @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are precharged before sampling during 4 RTCCLK cycle    
  *     @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are precharged before sampling during 8 RTCCLK cycle
  * @retval None
  */
void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
{
 801134c:	b480      	push	{r7}
 801134e:	b083      	sub	sp, #12
 8011350:	af00      	add	r7, sp, #0
 8011352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
   
  /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 8011354:	4b08      	ldr	r3, [pc, #32]	; (8011378 <RTC_TamperPinsPrechargeDuration+0x2c>)
 8011356:	4a08      	ldr	r2, [pc, #32]	; (8011378 <RTC_TamperPinsPrechargeDuration+0x2c>)
 8011358:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801135a:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 801135e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
 8011360:	4b05      	ldr	r3, [pc, #20]	; (8011378 <RTC_TamperPinsPrechargeDuration+0x2c>)
 8011362:	4a05      	ldr	r2, [pc, #20]	; (8011378 <RTC_TamperPinsPrechargeDuration+0x2c>)
 8011364:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8011366:	687a      	ldr	r2, [r7, #4]
 8011368:	430a      	orrs	r2, r1
 801136a:	641a      	str	r2, [r3, #64]	; 0x40
}
 801136c:	370c      	adds	r7, #12
 801136e:	46bd      	mov	sp, r7
 8011370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011374:	4770      	bx	lr
 8011376:	bf00      	nop
 8011378:	40002800 	.word	0x40002800

0801137c <RTC_TimeStampOnTamperDetectionCmd>:
  * @param  NewState: new state of the timestamp on tamper event.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
{
 801137c:	b480      	push	{r7}
 801137e:	b083      	sub	sp, #12
 8011380:	af00      	add	r7, sp, #0
 8011382:	4603      	mov	r3, r0
 8011384:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
   
  if (NewState != DISABLE)
 8011386:	79fb      	ldrb	r3, [r7, #7]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d006      	beq.n	801139a <RTC_TimeStampOnTamperDetectionCmd+0x1e>
  {
    /* Save timestamp on tamper detection event */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 801138c:	4b08      	ldr	r3, [pc, #32]	; (80113b0 <RTC_TimeStampOnTamperDetectionCmd+0x34>)
 801138e:	4a08      	ldr	r2, [pc, #32]	; (80113b0 <RTC_TimeStampOnTamperDetectionCmd+0x34>)
 8011390:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8011392:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8011396:	641a      	str	r2, [r3, #64]	; 0x40
 8011398:	e005      	b.n	80113a6 <RTC_TimeStampOnTamperDetectionCmd+0x2a>
  }
  else
  {
    /* Tamper detection does not cause a timestamp to be saved */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
 801139a:	4b05      	ldr	r3, [pc, #20]	; (80113b0 <RTC_TimeStampOnTamperDetectionCmd+0x34>)
 801139c:	4a04      	ldr	r2, [pc, #16]	; (80113b0 <RTC_TimeStampOnTamperDetectionCmd+0x34>)
 801139e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80113a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80113a4:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 80113a6:	370c      	adds	r7, #12
 80113a8:	46bd      	mov	sp, r7
 80113aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ae:	4770      	bx	lr
 80113b0:	40002800 	.word	0x40002800

080113b4 <RTC_TamperPullUpCmd>:
  * @param  NewState: new state of tamper pull up.
  *   This parameter can be: ENABLE or DISABLE.                   
  * @retval None
  */
void RTC_TamperPullUpCmd(FunctionalState NewState)
{
 80113b4:	b480      	push	{r7}
 80113b6:	b083      	sub	sp, #12
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	4603      	mov	r3, r0
 80113bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
 if (NewState != DISABLE)
 80113be:	79fb      	ldrb	r3, [r7, #7]
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d006      	beq.n	80113d2 <RTC_TamperPullUpCmd+0x1e>
  {
    /* Enable precharge of the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 80113c4:	4b08      	ldr	r3, [pc, #32]	; (80113e8 <RTC_TamperPullUpCmd+0x34>)
 80113c6:	4a08      	ldr	r2, [pc, #32]	; (80113e8 <RTC_TamperPullUpCmd+0x34>)
 80113c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80113ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80113ce:	641a      	str	r2, [r3, #64]	; 0x40
 80113d0:	e005      	b.n	80113de <RTC_TamperPullUpCmd+0x2a>
  }
  else
  {
    /* Disable precharge of the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
 80113d2:	4b05      	ldr	r3, [pc, #20]	; (80113e8 <RTC_TamperPullUpCmd+0x34>)
 80113d4:	4a04      	ldr	r2, [pc, #16]	; (80113e8 <RTC_TamperPullUpCmd+0x34>)
 80113d6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80113d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80113dc:	641a      	str	r2, [r3, #64]	; 0x40
  } 
}
 80113de:	370c      	adds	r7, #12
 80113e0:	46bd      	mov	sp, r7
 80113e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e6:	4770      	bx	lr
 80113e8:	40002800 	.word	0x40002800

080113ec <RTC_WriteBackupRegister>:
  *                          specify the register.
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
{
 80113ec:	b480      	push	{r7}
 80113ee:	b085      	sub	sp, #20
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	6078      	str	r0, [r7, #4]
 80113f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 80113f6:	2300      	movs	r3, #0
 80113f8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 80113fa:	4b07      	ldr	r3, [pc, #28]	; (8011418 <RTC_WriteBackupRegister+0x2c>)
 80113fc:	60fb      	str	r3, [r7, #12]
  tmp += (RTC_BKP_DR * 4);
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	009a      	lsls	r2, r3, #2
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	4413      	add	r3, r2
 8011406:	60fb      	str	r3, [r7, #12]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	683a      	ldr	r2, [r7, #0]
 801140c:	601a      	str	r2, [r3, #0]
}
 801140e:	3714      	adds	r7, #20
 8011410:	46bd      	mov	sp, r7
 8011412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011416:	4770      	bx	lr
 8011418:	40002850 	.word	0x40002850

0801141c <RTC_ReadBackupRegister>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
  *                          specify the register.                   
  * @retval None
  */
uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
{
 801141c:	b480      	push	{r7}
 801141e:	b085      	sub	sp, #20
 8011420:	af00      	add	r7, sp, #0
 8011422:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 8011424:	2300      	movs	r3, #0
 8011426:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 8011428:	4b07      	ldr	r3, [pc, #28]	; (8011448 <RTC_ReadBackupRegister+0x2c>)
 801142a:	60fb      	str	r3, [r7, #12]
  tmp += (RTC_BKP_DR * 4);
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	009a      	lsls	r2, r3, #2
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	4413      	add	r3, r2
 8011434:	60fb      	str	r3, [r7, #12]
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	681b      	ldr	r3, [r3, #0]
}
 801143a:	4618      	mov	r0, r3
 801143c:	3714      	adds	r7, #20
 801143e:	46bd      	mov	sp, r7
 8011440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011444:	4770      	bx	lr
 8011446:	bf00      	nop
 8011448:	40002850 	.word	0x40002850

0801144c <RTC_TamperPinSelection>:
  *            @arg RTC_TamperPin_PC13: PC13 is selected as RTC Tamper Pin.
  *            @arg RTC_TamperPin_PI8: PI8 is selected as RTC Tamper Pin.    
  * @retval None
  */
void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
{
 801144c:	b480      	push	{r7}
 801144e:	b083      	sub	sp, #12
 8011450:	af00      	add	r7, sp, #0
 8011452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
 8011454:	4b08      	ldr	r3, [pc, #32]	; (8011478 <RTC_TamperPinSelection+0x2c>)
 8011456:	4a08      	ldr	r2, [pc, #32]	; (8011478 <RTC_TamperPinSelection+0x2c>)
 8011458:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801145a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801145e:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 8011460:	4b05      	ldr	r3, [pc, #20]	; (8011478 <RTC_TamperPinSelection+0x2c>)
 8011462:	4a05      	ldr	r2, [pc, #20]	; (8011478 <RTC_TamperPinSelection+0x2c>)
 8011464:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8011466:	687a      	ldr	r2, [r7, #4]
 8011468:	430a      	orrs	r2, r1
 801146a:	641a      	str	r2, [r3, #64]	; 0x40
}
 801146c:	370c      	adds	r7, #12
 801146e:	46bd      	mov	sp, r7
 8011470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011474:	4770      	bx	lr
 8011476:	bf00      	nop
 8011478:	40002800 	.word	0x40002800

0801147c <RTC_TimeStampPinSelection>:
  *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
  *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
  * @retval None
  */
void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
{
 801147c:	b480      	push	{r7}
 801147e:	b083      	sub	sp, #12
 8011480:	af00      	add	r7, sp, #0
 8011482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
 8011484:	4b08      	ldr	r3, [pc, #32]	; (80114a8 <RTC_TimeStampPinSelection+0x2c>)
 8011486:	4a08      	ldr	r2, [pc, #32]	; (80114a8 <RTC_TimeStampPinSelection+0x2c>)
 8011488:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801148a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 801148e:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 8011490:	4b05      	ldr	r3, [pc, #20]	; (80114a8 <RTC_TimeStampPinSelection+0x2c>)
 8011492:	4a05      	ldr	r2, [pc, #20]	; (80114a8 <RTC_TimeStampPinSelection+0x2c>)
 8011494:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8011496:	687a      	ldr	r2, [r7, #4]
 8011498:	430a      	orrs	r2, r1
 801149a:	641a      	str	r2, [r3, #64]	; 0x40
}
 801149c:	370c      	adds	r7, #12
 801149e:	46bd      	mov	sp, r7
 80114a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a4:	4770      	bx	lr
 80114a6:	bf00      	nop
 80114a8:	40002800 	.word	0x40002800

080114ac <RTC_OutputTypeConfig>:
  *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
  *                                    Push Pull mode.    
  * @retval None
  */
void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
{
 80114ac:	b480      	push	{r7}
 80114ae:	b083      	sub	sp, #12
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 80114b4:	4b08      	ldr	r3, [pc, #32]	; (80114d8 <RTC_OutputTypeConfig+0x2c>)
 80114b6:	4a08      	ldr	r2, [pc, #32]	; (80114d8 <RTC_OutputTypeConfig+0x2c>)
 80114b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80114ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80114be:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 80114c0:	4b05      	ldr	r3, [pc, #20]	; (80114d8 <RTC_OutputTypeConfig+0x2c>)
 80114c2:	4a05      	ldr	r2, [pc, #20]	; (80114d8 <RTC_OutputTypeConfig+0x2c>)
 80114c4:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80114c6:	687a      	ldr	r2, [r7, #4]
 80114c8:	430a      	orrs	r2, r1
 80114ca:	641a      	str	r2, [r3, #64]	; 0x40
}
 80114cc:	370c      	adds	r7, #12
 80114ce:	46bd      	mov	sp, r7
 80114d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d4:	4770      	bx	lr
 80114d6:	bf00      	nop
 80114d8:	40002800 	.word	0x40002800

080114dc <RTC_SynchroShiftConfig>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Shift registers are configured
  *          - ERROR: RTC Shift registers are not configured
*/
ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
{
 80114dc:	b580      	push	{r7, lr}
 80114de:	b084      	sub	sp, #16
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	6078      	str	r0, [r7, #4]
 80114e4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80114e6:	2300      	movs	r3, #0
 80114e8:	73fb      	strb	r3, [r7, #15]
  uint32_t shpfcount = 0;
 80114ea:	2300      	movs	r3, #0
 80114ec:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
  assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80114ee:	4b21      	ldr	r3, [pc, #132]	; (8011574 <RTC_SynchroShiftConfig+0x98>)
 80114f0:	22ca      	movs	r2, #202	; 0xca
 80114f2:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80114f4:	4b1f      	ldr	r3, [pc, #124]	; (8011574 <RTC_SynchroShiftConfig+0x98>)
 80114f6:	2253      	movs	r2, #83	; 0x53
 80114f8:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Check if a Shift is pending*/
  if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
 80114fa:	4b1e      	ldr	r3, [pc, #120]	; (8011574 <RTC_SynchroShiftConfig+0x98>)
 80114fc:	68db      	ldr	r3, [r3, #12]
 80114fe:	f003 0308 	and.w	r3, r3, #8
 8011502:	2b00      	cmp	r3, #0
 8011504:	d00d      	beq.n	8011522 <RTC_SynchroShiftConfig+0x46>
  {
    /* Wait until the shift is completed*/
    while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 8011506:	e002      	b.n	801150e <RTC_SynchroShiftConfig+0x32>
    {
      shpfcount++;
 8011508:	68bb      	ldr	r3, [r7, #8]
 801150a:	3301      	adds	r3, #1
 801150c:	60bb      	str	r3, [r7, #8]
  
  /* Check if a Shift is pending*/
  if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
  {
    /* Wait until the shift is completed*/
    while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 801150e:	4b19      	ldr	r3, [pc, #100]	; (8011574 <RTC_SynchroShiftConfig+0x98>)
 8011510:	68db      	ldr	r3, [r3, #12]
 8011512:	f003 0308 	and.w	r3, r3, #8
 8011516:	2b00      	cmp	r3, #0
 8011518:	d003      	beq.n	8011522 <RTC_SynchroShiftConfig+0x46>
 801151a:	68bb      	ldr	r3, [r7, #8]
 801151c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011520:	d1f2      	bne.n	8011508 <RTC_SynchroShiftConfig+0x2c>
      shpfcount++;
    }
  }

  /* Check if the Shift pending is completed or if there is no Shift operation at all*/
  if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 8011522:	4b14      	ldr	r3, [pc, #80]	; (8011574 <RTC_SynchroShiftConfig+0x98>)
 8011524:	68db      	ldr	r3, [r3, #12]
 8011526:	f003 0308 	and.w	r3, r3, #8
 801152a:	2b00      	cmp	r3, #0
 801152c:	d118      	bne.n	8011560 <RTC_SynchroShiftConfig+0x84>
  {
    /* check if the reference clock detection is disabled */
    if((RTC->CR & RTC_CR_REFCKON) == RESET)
 801152e:	4b11      	ldr	r3, [pc, #68]	; (8011574 <RTC_SynchroShiftConfig+0x98>)
 8011530:	689b      	ldr	r3, [r3, #8]
 8011532:	f003 0310 	and.w	r3, r3, #16
 8011536:	2b00      	cmp	r3, #0
 8011538:	d10f      	bne.n	801155a <RTC_SynchroShiftConfig+0x7e>
    {
      /* Configure the Shift settings */
      RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
 801153a:	4b0e      	ldr	r3, [pc, #56]	; (8011574 <RTC_SynchroShiftConfig+0x98>)
 801153c:	6839      	ldr	r1, [r7, #0]
 801153e:	687a      	ldr	r2, [r7, #4]
 8011540:	430a      	orrs	r2, r1
 8011542:	62da      	str	r2, [r3, #44]	; 0x2c
    
      if(RTC_WaitForSynchro() == ERROR)
 8011544:	f7fe ffc0 	bl	80104c8 <RTC_WaitForSynchro>
 8011548:	4603      	mov	r3, r0
 801154a:	2b00      	cmp	r3, #0
 801154c:	d102      	bne.n	8011554 <RTC_SynchroShiftConfig+0x78>
      {
        status = ERROR;
 801154e:	2300      	movs	r3, #0
 8011550:	73fb      	strb	r3, [r7, #15]
 8011552:	e007      	b.n	8011564 <RTC_SynchroShiftConfig+0x88>
      }
      else
      {
        status = SUCCESS;
 8011554:	2301      	movs	r3, #1
 8011556:	73fb      	strb	r3, [r7, #15]
 8011558:	e004      	b.n	8011564 <RTC_SynchroShiftConfig+0x88>
      }
    }
    else
    {
      status = ERROR;
 801155a:	2300      	movs	r3, #0
 801155c:	73fb      	strb	r3, [r7, #15]
 801155e:	e001      	b.n	8011564 <RTC_SynchroShiftConfig+0x88>
    }
  }
  else
  {
    status = ERROR;
 8011560:	2300      	movs	r3, #0
 8011562:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8011564:	4b03      	ldr	r3, [pc, #12]	; (8011574 <RTC_SynchroShiftConfig+0x98>)
 8011566:	22ff      	movs	r2, #255	; 0xff
 8011568:	625a      	str	r2, [r3, #36]	; 0x24
  
  return (ErrorStatus)(status);
 801156a:	7bfb      	ldrb	r3, [r7, #15]
}
 801156c:	4618      	mov	r0, r3
 801156e:	3710      	adds	r7, #16
 8011570:	46bd      	mov	sp, r7
 8011572:	bd80      	pop	{r7, pc}
 8011574:	40002800 	.word	0x40002800

08011578 <RTC_ITConfig>:
  * @param  NewState: new state of the specified RTC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
{
 8011578:	b480      	push	{r7}
 801157a:	b083      	sub	sp, #12
 801157c:	af00      	add	r7, sp, #0
 801157e:	6078      	str	r0, [r7, #4]
 8011580:	460b      	mov	r3, r1
 8011582:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RTC_CONFIG_IT(RTC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8011584:	4b19      	ldr	r3, [pc, #100]	; (80115ec <RTC_ITConfig+0x74>)
 8011586:	22ca      	movs	r2, #202	; 0xca
 8011588:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 801158a:	4b18      	ldr	r3, [pc, #96]	; (80115ec <RTC_ITConfig+0x74>)
 801158c:	2253      	movs	r2, #83	; 0x53
 801158e:	625a      	str	r2, [r3, #36]	; 0x24

  if (NewState != DISABLE)
 8011590:	78fb      	ldrb	r3, [r7, #3]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d010      	beq.n	80115b8 <RTC_ITConfig+0x40>
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 8011596:	4b15      	ldr	r3, [pc, #84]	; (80115ec <RTC_ITConfig+0x74>)
 8011598:	4a14      	ldr	r2, [pc, #80]	; (80115ec <RTC_ITConfig+0x74>)
 801159a:	6891      	ldr	r1, [r2, #8]
 801159c:	687a      	ldr	r2, [r7, #4]
 801159e:	f022 0204 	bic.w	r2, r2, #4
 80115a2:	430a      	orrs	r2, r1
 80115a4:	609a      	str	r2, [r3, #8]
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 80115a6:	4b11      	ldr	r3, [pc, #68]	; (80115ec <RTC_ITConfig+0x74>)
 80115a8:	4a10      	ldr	r2, [pc, #64]	; (80115ec <RTC_ITConfig+0x74>)
 80115aa:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80115ac:	687a      	ldr	r2, [r7, #4]
 80115ae:	f002 0204 	and.w	r2, r2, #4
 80115b2:	430a      	orrs	r2, r1
 80115b4:	641a      	str	r2, [r3, #64]	; 0x40
 80115b6:	e011      	b.n	80115dc <RTC_ITConfig+0x64>
  }
  else
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 80115b8:	4b0c      	ldr	r3, [pc, #48]	; (80115ec <RTC_ITConfig+0x74>)
 80115ba:	4a0c      	ldr	r2, [pc, #48]	; (80115ec <RTC_ITConfig+0x74>)
 80115bc:	6891      	ldr	r1, [r2, #8]
 80115be:	687a      	ldr	r2, [r7, #4]
 80115c0:	f022 0204 	bic.w	r2, r2, #4
 80115c4:	43d2      	mvns	r2, r2
 80115c6:	400a      	ands	r2, r1
 80115c8:	609a      	str	r2, [r3, #8]
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 80115ca:	4b08      	ldr	r3, [pc, #32]	; (80115ec <RTC_ITConfig+0x74>)
 80115cc:	4a07      	ldr	r2, [pc, #28]	; (80115ec <RTC_ITConfig+0x74>)
 80115ce:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80115d0:	687a      	ldr	r2, [r7, #4]
 80115d2:	f002 0204 	and.w	r2, r2, #4
 80115d6:	43d2      	mvns	r2, r2
 80115d8:	400a      	ands	r2, r1
 80115da:	641a      	str	r2, [r3, #64]	; 0x40
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80115dc:	4b03      	ldr	r3, [pc, #12]	; (80115ec <RTC_ITConfig+0x74>)
 80115de:	22ff      	movs	r2, #255	; 0xff
 80115e0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80115e2:	370c      	adds	r7, #12
 80115e4:	46bd      	mov	sp, r7
 80115e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ea:	4770      	bx	lr
 80115ec:	40002800 	.word	0x40002800

080115f0 <RTC_GetFlagStatus>:
  *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
  *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
  * @retval The new state of RTC_FLAG (SET or RESET).
  */
FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
{
 80115f0:	b480      	push	{r7}
 80115f2:	b085      	sub	sp, #20
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80115f8:	2300      	movs	r3, #0
 80115fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 80115fc:	2300      	movs	r3, #0
 80115fe:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
  
  /* Get all the flags */
  tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 8011600:	4b0a      	ldr	r3, [pc, #40]	; (801162c <RTC_GetFlagStatus+0x3c>)
 8011602:	68da      	ldr	r2, [r3, #12]
 8011604:	4b0a      	ldr	r3, [pc, #40]	; (8011630 <RTC_GetFlagStatus+0x40>)
 8011606:	4013      	ands	r3, r2
 8011608:	60bb      	str	r3, [r7, #8]
  
  /* Return the status of the flag */
  if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
 801160a:	68ba      	ldr	r2, [r7, #8]
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	4013      	ands	r3, r2
 8011610:	2b00      	cmp	r3, #0
 8011612:	d002      	beq.n	801161a <RTC_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 8011614:	2301      	movs	r3, #1
 8011616:	73fb      	strb	r3, [r7, #15]
 8011618:	e001      	b.n	801161e <RTC_GetFlagStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
 801161a:	2300      	movs	r3, #0
 801161c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801161e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011620:	4618      	mov	r0, r3
 8011622:	3714      	adds	r7, #20
 8011624:	46bd      	mov	sp, r7
 8011626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162a:	4770      	bx	lr
 801162c:	40002800 	.word	0x40002800
 8011630:	00013f7f 	.word	0x00013f7f

08011634 <RTC_ClearFlag>:
  *            @arg RTC_FLAG_ALRAF: Alarm A flag
  *            @arg RTC_FLAG_RSF: Registers Synchronized flag
  * @retval None
  */
void RTC_ClearFlag(uint32_t RTC_FLAG)
{
 8011634:	b480      	push	{r7}
 8011636:	b083      	sub	sp, #12
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));

  /* Clear the Flags in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT)));  
 801163c:	4b08      	ldr	r3, [pc, #32]	; (8011660 <RTC_ClearFlag+0x2c>)
 801163e:	687a      	ldr	r2, [r7, #4]
 8011640:	b292      	uxth	r2, r2
 8011642:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8011646:	43d1      	mvns	r1, r2
 8011648:	4a05      	ldr	r2, [pc, #20]	; (8011660 <RTC_ClearFlag+0x2c>)
 801164a:	68d2      	ldr	r2, [r2, #12]
 801164c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8011650:	430a      	orrs	r2, r1
 8011652:	60da      	str	r2, [r3, #12]
}
 8011654:	370c      	adds	r7, #12
 8011656:	46bd      	mov	sp, r7
 8011658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801165c:	4770      	bx	lr
 801165e:	bf00      	nop
 8011660:	40002800 	.word	0x40002800

08011664 <RTC_GetITStatus>:
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval The new state of RTC_IT (SET or RESET).
  */
ITStatus RTC_GetITStatus(uint32_t RTC_IT)
{
 8011664:	b480      	push	{r7}
 8011666:	b087      	sub	sp, #28
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 801166c:	2300      	movs	r3, #0
 801166e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0, enablestatus = 0;
 8011670:	2300      	movs	r3, #0
 8011672:	613b      	str	r3, [r7, #16]
 8011674:	2300      	movs	r3, #0
 8011676:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_RTC_GET_IT(RTC_IT));
  
  /* Get the TAMPER Interrupt enable bit and pending bit */
  tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 8011678:	4b13      	ldr	r3, [pc, #76]	; (80116c8 <RTC_GetITStatus+0x64>)
 801167a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801167c:	f003 0304 	and.w	r3, r3, #4
 8011680:	613b      	str	r3, [r7, #16]
 
  /* Get the Interrupt enable Status */
  enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 8011682:	4b11      	ldr	r3, [pc, #68]	; (80116c8 <RTC_GetITStatus+0x64>)
 8011684:	689a      	ldr	r2, [r3, #8]
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	401a      	ands	r2, r3
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	0bd9      	lsrs	r1, r3, #15
 801168e:	693b      	ldr	r3, [r7, #16]
 8011690:	400b      	ands	r3, r1
 8011692:	4313      	orrs	r3, r2
 8011694:	60fb      	str	r3, [r7, #12]
  
  /* Get the Interrupt pending bit */
  tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 8011696:	4b0c      	ldr	r3, [pc, #48]	; (80116c8 <RTC_GetITStatus+0x64>)
 8011698:	68da      	ldr	r2, [r3, #12]
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	091b      	lsrs	r3, r3, #4
 801169e:	4013      	ands	r3, r2
 80116a0:	613b      	str	r3, [r7, #16]
  
  /* Get the status of the Interrupt */
  if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d006      	beq.n	80116b6 <RTC_GetITStatus+0x52>
 80116a8:	693b      	ldr	r3, [r7, #16]
 80116aa:	b29b      	uxth	r3, r3
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d002      	beq.n	80116b6 <RTC_GetITStatus+0x52>
  {
    bitstatus = SET;
 80116b0:	2301      	movs	r3, #1
 80116b2:	75fb      	strb	r3, [r7, #23]
 80116b4:	e001      	b.n	80116ba <RTC_GetITStatus+0x56>
  }
  else
  {
    bitstatus = RESET;
 80116b6:	2300      	movs	r3, #0
 80116b8:	75fb      	strb	r3, [r7, #23]
  }
  return bitstatus;
 80116ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80116bc:	4618      	mov	r0, r3
 80116be:	371c      	adds	r7, #28
 80116c0:	46bd      	mov	sp, r7
 80116c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c6:	4770      	bx	lr
 80116c8:	40002800 	.word	0x40002800

080116cc <RTC_ClearITPendingBit>:
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval None
  */
void RTC_ClearITPendingBit(uint32_t RTC_IT)
{
 80116cc:	b480      	push	{r7}
 80116ce:	b085      	sub	sp, #20
 80116d0:	af00      	add	r7, sp, #0
 80116d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80116d4:	2300      	movs	r3, #0
 80116d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_IT(RTC_IT));

  /* Get the RTC_ISR Interrupt pending bits mask */
  tmpreg = (uint32_t)(RTC_IT >> 4);
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	091b      	lsrs	r3, r3, #4
 80116dc:	60fb      	str	r3, [r7, #12]

  /* Clear the interrupt pending bits in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT))); 
 80116de:	4b08      	ldr	r3, [pc, #32]	; (8011700 <RTC_ClearITPendingBit+0x34>)
 80116e0:	68fa      	ldr	r2, [r7, #12]
 80116e2:	b292      	uxth	r2, r2
 80116e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80116e8:	43d1      	mvns	r1, r2
 80116ea:	4a05      	ldr	r2, [pc, #20]	; (8011700 <RTC_ClearITPendingBit+0x34>)
 80116ec:	68d2      	ldr	r2, [r2, #12]
 80116ee:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80116f2:	430a      	orrs	r2, r1
 80116f4:	60da      	str	r2, [r3, #12]
}
 80116f6:	3714      	adds	r7, #20
 80116f8:	46bd      	mov	sp, r7
 80116fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116fe:	4770      	bx	lr
 8011700:	40002800 	.word	0x40002800

08011704 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted.
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8011704:	b480      	push	{r7}
 8011706:	b085      	sub	sp, #20
 8011708:	af00      	add	r7, sp, #0
 801170a:	4603      	mov	r3, r0
 801170c:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0;
 801170e:	2300      	movs	r3, #0
 8011710:	73fb      	strb	r3, [r7, #15]
  
  while (Value >= 10)
 8011712:	e005      	b.n	8011720 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8011714:	7bfb      	ldrb	r3, [r7, #15]
 8011716:	3301      	adds	r3, #1
 8011718:	73fb      	strb	r3, [r7, #15]
    Value -= 10;
 801171a:	79fb      	ldrb	r3, [r7, #7]
 801171c:	3b0a      	subs	r3, #10
 801171e:	71fb      	strb	r3, [r7, #7]
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 8011720:	79fb      	ldrb	r3, [r7, #7]
 8011722:	2b09      	cmp	r3, #9
 8011724:	d8f6      	bhi.n	8011714 <RTC_ByteToBcd2+0x10>
  {
    bcdhigh++;
    Value -= 10;
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8011726:	7bfb      	ldrb	r3, [r7, #15]
 8011728:	011b      	lsls	r3, r3, #4
 801172a:	b2da      	uxtb	r2, r3
 801172c:	79fb      	ldrb	r3, [r7, #7]
 801172e:	4313      	orrs	r3, r2
 8011730:	b2db      	uxtb	r3, r3
}
 8011732:	4618      	mov	r0, r3
 8011734:	3714      	adds	r7, #20
 8011736:	46bd      	mov	sp, r7
 8011738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801173c:	4770      	bx	lr
 801173e:	bf00      	nop

08011740 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted.
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8011740:	b480      	push	{r7}
 8011742:	b085      	sub	sp, #20
 8011744:	af00      	add	r7, sp, #0
 8011746:	4603      	mov	r3, r0
 8011748:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0;
 801174a:	2300      	movs	r3, #0
 801174c:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 801174e:	79fb      	ldrb	r3, [r7, #7]
 8011750:	091b      	lsrs	r3, r3, #4
 8011752:	b2db      	uxtb	r3, r3
 8011754:	461a      	mov	r2, r3
 8011756:	0092      	lsls	r2, r2, #2
 8011758:	4413      	add	r3, r2
 801175a:	005b      	lsls	r3, r3, #1
 801175c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & (uint8_t)0x0F));
 801175e:	79fb      	ldrb	r3, [r7, #7]
 8011760:	f003 030f 	and.w	r3, r3, #15
 8011764:	b2da      	uxtb	r2, r3
 8011766:	7bfb      	ldrb	r3, [r7, #15]
 8011768:	4413      	add	r3, r2
 801176a:	b2db      	uxtb	r3, r3
}
 801176c:	4618      	mov	r0, r3
 801176e:	3714      	adds	r7, #20
 8011770:	46bd      	mov	sp, r7
 8011772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011776:	4770      	bx	lr

08011778 <SAI_DeInit>:
  * @param  SAIx: To select the SAIx peripheral, where x can be the different instances 
  *                     
  * @retval None
  */
void SAI_DeInit(SAI_TypeDef* SAIx)
{
 8011778:	b580      	push	{r7, lr}
 801177a:	b082      	sub	sp, #8
 801177c:	af00      	add	r7, sp, #0
 801177e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SAI_PERIPH(SAIx));

  /* Enable SAI1 reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SAI1, ENABLE);
 8011780:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8011784:	2101      	movs	r1, #1
 8011786:	f7fe fb7d 	bl	800fe84 <RCC_APB2PeriphResetCmd>
  /* Release SAI1 from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SAI1, DISABLE);  
 801178a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 801178e:	2100      	movs	r1, #0
 8011790:	f7fe fb78 	bl	800fe84 <RCC_APB2PeriphResetCmd>
}
 8011794:	3708      	adds	r7, #8
 8011796:	46bd      	mov	sp, r7
 8011798:	bd80      	pop	{r7, pc}
 801179a:	bf00      	nop

0801179c <SAI_Init>:
  * @param  SAI_InitStruct: pointer to a SAI_InitTypeDef structure that
  *         contains the configuration information for the specified SAI Block peripheral.             
  * @retval None
  */
void SAI_Init(SAI_Block_TypeDef* SAI_Block_x, SAI_InitTypeDef* SAI_InitStruct)
{
 801179c:	b480      	push	{r7}
 801179e:	b085      	sub	sp, #20
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	6078      	str	r0, [r7, #4]
 80117a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80117a6:	2300      	movs	r3, #0
 80117a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(SAI_InitStruct->SAI_MasterDivider));
  assert_param(IS_SAI_BLOCK_FIFO_THRESHOLD(SAI_InitStruct->SAI_FIFOThreshold));

  /* SAI Block_x CR1 Configuration */
  /* Get the SAI Block_x CR1 value */
  tmpreg = SAI_Block_x->CR1;
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	60fb      	str	r3, [r7, #12]
  /* Clear MODE, PRTCFG, DS, LSBFIRST, CKSTR, SYNCEN, OUTDRIV, NODIV, and MCKDIV bits */
  tmpreg &= CR1_CLEAR_MASK;
 80117b0:	68fa      	ldr	r2, [r7, #12]
 80117b2:	4b1c      	ldr	r3, [pc, #112]	; (8011824 <SAI_Init+0x88>)
 80117b4:	4013      	ands	r3, r2
 80117b6:	60fb      	str	r3, [r7, #12]
  /* Set CKSTR bit according to SAI_ClockStrobing value   */
  /* Set SYNCEN bit according to SAI_Synchro value        */
  /* Set OUTDRIV bit according to SAI_OUTDRIV value       */
  /* Set NODIV bit according to SAI_NoDivider value       */
  /* Set MCKDIV bits according to SAI_MasterDivider value */
  tmpreg |= (uint32_t)(SAI_InitStruct->SAI_AudioMode     | SAI_InitStruct->SAI_Protocol  |
 80117b8:	683b      	ldr	r3, [r7, #0]
 80117ba:	681a      	ldr	r2, [r3, #0]
 80117bc:	683b      	ldr	r3, [r7, #0]
 80117be:	685b      	ldr	r3, [r3, #4]
 80117c0:	431a      	orrs	r2, r3
                       SAI_InitStruct->SAI_DataSize      | SAI_InitStruct->SAI_FirstBit  |  
 80117c2:	683b      	ldr	r3, [r7, #0]
 80117c4:	689b      	ldr	r3, [r3, #8]
  /* Set CKSTR bit according to SAI_ClockStrobing value   */
  /* Set SYNCEN bit according to SAI_Synchro value        */
  /* Set OUTDRIV bit according to SAI_OUTDRIV value       */
  /* Set NODIV bit according to SAI_NoDivider value       */
  /* Set MCKDIV bits according to SAI_MasterDivider value */
  tmpreg |= (uint32_t)(SAI_InitStruct->SAI_AudioMode     | SAI_InitStruct->SAI_Protocol  |
 80117c6:	431a      	orrs	r2, r3
                       SAI_InitStruct->SAI_DataSize      | SAI_InitStruct->SAI_FirstBit  |  
 80117c8:	683b      	ldr	r3, [r7, #0]
 80117ca:	68db      	ldr	r3, [r3, #12]
 80117cc:	431a      	orrs	r2, r3
                       SAI_InitStruct->SAI_ClockStrobing | SAI_InitStruct->SAI_Synchro   |  
 80117ce:	683b      	ldr	r3, [r7, #0]
 80117d0:	691b      	ldr	r3, [r3, #16]
  /* Set SYNCEN bit according to SAI_Synchro value        */
  /* Set OUTDRIV bit according to SAI_OUTDRIV value       */
  /* Set NODIV bit according to SAI_NoDivider value       */
  /* Set MCKDIV bits according to SAI_MasterDivider value */
  tmpreg |= (uint32_t)(SAI_InitStruct->SAI_AudioMode     | SAI_InitStruct->SAI_Protocol  |
                       SAI_InitStruct->SAI_DataSize      | SAI_InitStruct->SAI_FirstBit  |  
 80117d2:	431a      	orrs	r2, r3
                       SAI_InitStruct->SAI_ClockStrobing | SAI_InitStruct->SAI_Synchro   |  
 80117d4:	683b      	ldr	r3, [r7, #0]
 80117d6:	695b      	ldr	r3, [r3, #20]
 80117d8:	431a      	orrs	r2, r3
                       SAI_InitStruct->SAI_OUTDRIV       | SAI_InitStruct->SAI_NoDivider | 
 80117da:	683b      	ldr	r3, [r7, #0]
 80117dc:	699b      	ldr	r3, [r3, #24]
  /* Set OUTDRIV bit according to SAI_OUTDRIV value       */
  /* Set NODIV bit according to SAI_NoDivider value       */
  /* Set MCKDIV bits according to SAI_MasterDivider value */
  tmpreg |= (uint32_t)(SAI_InitStruct->SAI_AudioMode     | SAI_InitStruct->SAI_Protocol  |
                       SAI_InitStruct->SAI_DataSize      | SAI_InitStruct->SAI_FirstBit  |  
                       SAI_InitStruct->SAI_ClockStrobing | SAI_InitStruct->SAI_Synchro   |  
 80117de:	431a      	orrs	r2, r3
                       SAI_InitStruct->SAI_OUTDRIV       | SAI_InitStruct->SAI_NoDivider | 
 80117e0:	683b      	ldr	r3, [r7, #0]
 80117e2:	69db      	ldr	r3, [r3, #28]
 80117e4:	431a      	orrs	r2, r3
                       (uint32_t)((SAI_InitStruct->SAI_MasterDivider) << 20));
 80117e6:	683b      	ldr	r3, [r7, #0]
 80117e8:	6a1b      	ldr	r3, [r3, #32]
 80117ea:	051b      	lsls	r3, r3, #20
  /* Set CKSTR bit according to SAI_ClockStrobing value   */
  /* Set SYNCEN bit according to SAI_Synchro value        */
  /* Set OUTDRIV bit according to SAI_OUTDRIV value       */
  /* Set NODIV bit according to SAI_NoDivider value       */
  /* Set MCKDIV bits according to SAI_MasterDivider value */
  tmpreg |= (uint32_t)(SAI_InitStruct->SAI_AudioMode     | SAI_InitStruct->SAI_Protocol  |
 80117ec:	4313      	orrs	r3, r2
 80117ee:	68fa      	ldr	r2, [r7, #12]
 80117f0:	4313      	orrs	r3, r2
 80117f2:	60fb      	str	r3, [r7, #12]
                       SAI_InitStruct->SAI_DataSize      | SAI_InitStruct->SAI_FirstBit  |  
                       SAI_InitStruct->SAI_ClockStrobing | SAI_InitStruct->SAI_Synchro   |  
                       SAI_InitStruct->SAI_OUTDRIV       | SAI_InitStruct->SAI_NoDivider | 
                       (uint32_t)((SAI_InitStruct->SAI_MasterDivider) << 20));
  /* Write to SAI_Block_x CR1 */
  SAI_Block_x->CR1 = tmpreg;
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	68fa      	ldr	r2, [r7, #12]
 80117f8:	601a      	str	r2, [r3, #0]
  
  /* SAI Block_x CR2 Configuration */
  /* Get the SAIBlock_x CR2 value */
  tmpreg = SAI_Block_x->CR2;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	685b      	ldr	r3, [r3, #4]
 80117fe:	60fb      	str	r3, [r7, #12]
  /* Clear FTH bits */
  tmpreg &= ~(SAI_xCR2_FTH);
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	f023 0303 	bic.w	r3, r3, #3
 8011806:	60fb      	str	r3, [r7, #12]
  /* Configure the FIFO Level */
  /* Set FTH bits according to SAI_FIFOThreshold value */ 
  tmpreg |= (uint32_t)(SAI_InitStruct->SAI_FIFOThreshold);
 8011808:	683b      	ldr	r3, [r7, #0]
 801180a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801180c:	68fa      	ldr	r2, [r7, #12]
 801180e:	4313      	orrs	r3, r2
 8011810:	60fb      	str	r3, [r7, #12]
  /* Write to SAI_Block_x CR2 */
  SAI_Block_x->CR2 = tmpreg;
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	68fa      	ldr	r2, [r7, #12]
 8011816:	605a      	str	r2, [r3, #4]
}
 8011818:	3714      	adds	r7, #20
 801181a:	46bd      	mov	sp, r7
 801181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011820:	4770      	bx	lr
 8011822:	bf00      	nop
 8011824:	ff07c010 	.word	0xff07c010

08011828 <SAI_FrameInit>:
  * @param  SAI_FrameInitStruct: pointer to an SAI_FrameInitTypeDef structure that
  *         contains the configuration of audio frame for a specified SAI Block                       
  * @retval None
  */
void SAI_FrameInit(SAI_Block_TypeDef* SAI_Block_x, SAI_FrameInitTypeDef* SAI_FrameInitStruct)
{
 8011828:	b480      	push	{r7}
 801182a:	b085      	sub	sp, #20
 801182c:	af00      	add	r7, sp, #0
 801182e:	6078      	str	r0, [r7, #4]
 8011830:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011832:	2300      	movs	r3, #0
 8011834:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SAI_BLOCK_FS_POLARITY(SAI_FrameInitStruct->SAI_FSPolarity));
  assert_param(IS_SAI_BLOCK_FS_OFFSET(SAI_FrameInitStruct->SAI_FSOffset));

  /* SAI Block_x FRCR Configuration */
  /* Get the SAI Block_x FRCR value */
  tmpreg = SAI_Block_x->FRCR;
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	689b      	ldr	r3, [r3, #8]
 801183a:	60fb      	str	r3, [r7, #12]
  /* Clear FRL, FSALL, FSDEF, FSPOL, FSOFF bits */
  tmpreg &= FRCR_CLEAR_MASK;
 801183c:	68fa      	ldr	r2, [r7, #12]
 801183e:	4b0f      	ldr	r3, [pc, #60]	; (801187c <SAI_FrameInit+0x54>)
 8011840:	4013      	ands	r3, r2
 8011842:	60fb      	str	r3, [r7, #12]
  /* Set FRL bits according to SAI_FrameLength value         */
  /* Set FSALL bits according to SAI_ActiveFrameLength value */
  /* Set FSDEF bit according to SAI_FSDefinition value       */
  /* Set FSPOL bit according to SAI_FSPolarity value         */
  /* Set FSOFF bit according to SAI_FSOffset value           */
  tmpreg |= (uint32_t)((uint32_t)(SAI_FrameInitStruct->SAI_FrameLength - 1)  | 
 8011844:	683b      	ldr	r3, [r7, #0]
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	1e5a      	subs	r2, r3, #1
                       SAI_FrameInitStruct->SAI_FSOffset     | 
 801184a:	683b      	ldr	r3, [r7, #0]
 801184c:	691b      	ldr	r3, [r3, #16]
  /* Set FRL bits according to SAI_FrameLength value         */
  /* Set FSALL bits according to SAI_ActiveFrameLength value */
  /* Set FSDEF bit according to SAI_FSDefinition value       */
  /* Set FSPOL bit according to SAI_FSPolarity value         */
  /* Set FSOFF bit according to SAI_FSOffset value           */
  tmpreg |= (uint32_t)((uint32_t)(SAI_FrameInitStruct->SAI_FrameLength - 1)  | 
 801184e:	431a      	orrs	r2, r3
                       SAI_FrameInitStruct->SAI_FSOffset     | 
                       SAI_FrameInitStruct->SAI_FSDefinition |    
 8011850:	683b      	ldr	r3, [r7, #0]
 8011852:	689b      	ldr	r3, [r3, #8]
  /* Set FSALL bits according to SAI_ActiveFrameLength value */
  /* Set FSDEF bit according to SAI_FSDefinition value       */
  /* Set FSPOL bit according to SAI_FSPolarity value         */
  /* Set FSOFF bit according to SAI_FSOffset value           */
  tmpreg |= (uint32_t)((uint32_t)(SAI_FrameInitStruct->SAI_FrameLength - 1)  | 
                       SAI_FrameInitStruct->SAI_FSOffset     | 
 8011854:	431a      	orrs	r2, r3
                       SAI_FrameInitStruct->SAI_FSDefinition |    
                       SAI_FrameInitStruct->SAI_FSPolarity   |                        
 8011856:	683b      	ldr	r3, [r7, #0]
 8011858:	68db      	ldr	r3, [r3, #12]
  /* Set FSDEF bit according to SAI_FSDefinition value       */
  /* Set FSPOL bit according to SAI_FSPolarity value         */
  /* Set FSOFF bit according to SAI_FSOffset value           */
  tmpreg |= (uint32_t)((uint32_t)(SAI_FrameInitStruct->SAI_FrameLength - 1)  | 
                       SAI_FrameInitStruct->SAI_FSOffset     | 
                       SAI_FrameInitStruct->SAI_FSDefinition |    
 801185a:	431a      	orrs	r2, r3
                       SAI_FrameInitStruct->SAI_FSPolarity   |                        
                       (uint32_t)((SAI_FrameInitStruct->SAI_ActiveFrameLength - 1) << 8));
 801185c:	683b      	ldr	r3, [r7, #0]
 801185e:	685b      	ldr	r3, [r3, #4]
 8011860:	3b01      	subs	r3, #1
 8011862:	021b      	lsls	r3, r3, #8
  /* Set FRL bits according to SAI_FrameLength value         */
  /* Set FSALL bits according to SAI_ActiveFrameLength value */
  /* Set FSDEF bit according to SAI_FSDefinition value       */
  /* Set FSPOL bit according to SAI_FSPolarity value         */
  /* Set FSOFF bit according to SAI_FSOffset value           */
  tmpreg |= (uint32_t)((uint32_t)(SAI_FrameInitStruct->SAI_FrameLength - 1)  | 
 8011864:	4313      	orrs	r3, r2
 8011866:	68fa      	ldr	r2, [r7, #12]
 8011868:	4313      	orrs	r3, r2
 801186a:	60fb      	str	r3, [r7, #12]
                       SAI_FrameInitStruct->SAI_FSDefinition |    
                       SAI_FrameInitStruct->SAI_FSPolarity   |                        
                       (uint32_t)((SAI_FrameInitStruct->SAI_ActiveFrameLength - 1) << 8));
                       
  /* Write to SAI_Block_x FRCR */
  SAI_Block_x->FRCR = tmpreg;
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	68fa      	ldr	r2, [r7, #12]
 8011870:	609a      	str	r2, [r3, #8]
}
 8011872:	3714      	adds	r7, #20
 8011874:	46bd      	mov	sp, r7
 8011876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187a:	4770      	bx	lr
 801187c:	fff88000 	.word	0xfff88000

08011880 <SAI_SlotInit>:
  * @param  SAI_SlotInitStruct: pointer to an SAI_SlotInitTypeDef structure that
  *         contains the configuration of audio slot for a specified SAI Block                      
  * @retval None
  */
void SAI_SlotInit(SAI_Block_TypeDef* SAI_Block_x, SAI_SlotInitTypeDef* SAI_SlotInitStruct)
{
 8011880:	b480      	push	{r7}
 8011882:	b085      	sub	sp, #20
 8011884:	af00      	add	r7, sp, #0
 8011886:	6078      	str	r0, [r7, #4]
 8011888:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801188a:	2300      	movs	r3, #0
 801188c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(SAI_SlotInitStruct->SAI_SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(SAI_SlotInitStruct->SAI_SlotActive));

  /* SAI Block_x SLOTR Configuration */
  /* Get the SAI Block_x SLOTR value */
  tmpreg = SAI_Block_x->SLOTR;
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	68db      	ldr	r3, [r3, #12]
 8011892:	60fb      	str	r3, [r7, #12]
  /* Clear FBOFF, SLOTSZ, NBSLOT, SLOTEN bits */
  tmpreg &= SLOTR_CLEAR_MASK;
 8011894:	68fa      	ldr	r2, [r7, #12]
 8011896:	f24f 0320 	movw	r3, #61472	; 0xf020
 801189a:	4013      	ands	r3, r2
 801189c:	60fb      	str	r3, [r7, #12]
     audio frame and slots activated in audio frame */
  /* Set FBOFF bits according to SAI_FirstBitOffset value  */
  /* Set SLOTSZ bits according to SAI_SlotSize value       */
  /* Set NBSLOT bits according to SAI_SlotNumber value     */
  /* Set SLOTEN bits according to SAI_SlotActive value     */
  tmpreg |= (uint32_t)(SAI_SlotInitStruct->SAI_FirstBitOffset | 
 801189e:	683b      	ldr	r3, [r7, #0]
 80118a0:	681a      	ldr	r2, [r3, #0]
                       SAI_SlotInitStruct->SAI_SlotSize       | 
 80118a2:	683b      	ldr	r3, [r7, #0]
 80118a4:	685b      	ldr	r3, [r3, #4]
     audio frame and slots activated in audio frame */
  /* Set FBOFF bits according to SAI_FirstBitOffset value  */
  /* Set SLOTSZ bits according to SAI_SlotSize value       */
  /* Set NBSLOT bits according to SAI_SlotNumber value     */
  /* Set SLOTEN bits according to SAI_SlotActive value     */
  tmpreg |= (uint32_t)(SAI_SlotInitStruct->SAI_FirstBitOffset | 
 80118a6:	431a      	orrs	r2, r3
                       SAI_SlotInitStruct->SAI_SlotSize       | 
                       SAI_SlotInitStruct->SAI_SlotActive     |    
 80118a8:	683b      	ldr	r3, [r7, #0]
 80118aa:	68db      	ldr	r3, [r3, #12]
  /* Set FBOFF bits according to SAI_FirstBitOffset value  */
  /* Set SLOTSZ bits according to SAI_SlotSize value       */
  /* Set NBSLOT bits according to SAI_SlotNumber value     */
  /* Set SLOTEN bits according to SAI_SlotActive value     */
  tmpreg |= (uint32_t)(SAI_SlotInitStruct->SAI_FirstBitOffset | 
                       SAI_SlotInitStruct->SAI_SlotSize       | 
 80118ac:	431a      	orrs	r2, r3
                       SAI_SlotInitStruct->SAI_SlotActive     |    
                       (uint32_t)((SAI_SlotInitStruct->SAI_SlotNumber - 1) <<  8));
 80118ae:	683b      	ldr	r3, [r7, #0]
 80118b0:	689b      	ldr	r3, [r3, #8]
 80118b2:	3b01      	subs	r3, #1
 80118b4:	021b      	lsls	r3, r3, #8
     audio frame and slots activated in audio frame */
  /* Set FBOFF bits according to SAI_FirstBitOffset value  */
  /* Set SLOTSZ bits according to SAI_SlotSize value       */
  /* Set NBSLOT bits according to SAI_SlotNumber value     */
  /* Set SLOTEN bits according to SAI_SlotActive value     */
  tmpreg |= (uint32_t)(SAI_SlotInitStruct->SAI_FirstBitOffset | 
 80118b6:	4313      	orrs	r3, r2
 80118b8:	68fa      	ldr	r2, [r7, #12]
 80118ba:	4313      	orrs	r3, r2
 80118bc:	60fb      	str	r3, [r7, #12]
                       SAI_SlotInitStruct->SAI_SlotSize       | 
                       SAI_SlotInitStruct->SAI_SlotActive     |    
                       (uint32_t)((SAI_SlotInitStruct->SAI_SlotNumber - 1) <<  8));
                       
  /* Write to SAI_Block_x SLOTR */
  SAI_Block_x->SLOTR = tmpreg;
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	68fa      	ldr	r2, [r7, #12]
 80118c2:	60da      	str	r2, [r3, #12]
}
 80118c4:	3714      	adds	r7, #20
 80118c6:	46bd      	mov	sp, r7
 80118c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118cc:	4770      	bx	lr
 80118ce:	bf00      	nop

080118d0 <SAI_StructInit>:
  * @param  SAI_InitStruct: pointer to a SAI_InitTypeDef structure which will 
  *         be initialized.  
  * @retval None
  */
void SAI_StructInit(SAI_InitTypeDef* SAI_InitStruct)
{
 80118d0:	b480      	push	{r7}
 80118d2:	b083      	sub	sp, #12
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	6078      	str	r0, [r7, #4]
  /* Reset SAI init structure parameters values */
  /* Initialize the SAI_AudioMode member */
  SAI_InitStruct->SAI_AudioMode = SAI_Mode_MasterTx;
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	2200      	movs	r2, #0
 80118dc:	601a      	str	r2, [r3, #0]
  /* Initialize the SAI_Protocol member */
  SAI_InitStruct->SAI_Protocol = SAI_Free_Protocol;
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	2200      	movs	r2, #0
 80118e2:	605a      	str	r2, [r3, #4]
  /* Initialize the SAI_DataSize member */
  SAI_InitStruct->SAI_DataSize = SAI_DataSize_8b;
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	2240      	movs	r2, #64	; 0x40
 80118e8:	609a      	str	r2, [r3, #8]
  /* Initialize the SAI_FirstBit member */
  SAI_InitStruct->SAI_FirstBit = SAI_FirstBit_MSB;
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	2200      	movs	r2, #0
 80118ee:	60da      	str	r2, [r3, #12]
  /* Initialize the SAI_ClockStrobing member */
  SAI_InitStruct->SAI_ClockStrobing = SAI_ClockStrobing_FallingEdge;
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	2200      	movs	r2, #0
 80118f4:	611a      	str	r2, [r3, #16]
  /* Initialize the SAI_Synchro member */
  SAI_InitStruct->SAI_Synchro = SAI_Asynchronous;
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	2200      	movs	r2, #0
 80118fa:	615a      	str	r2, [r3, #20]
  /* Initialize the SAI_OUTDRIV member */
  SAI_InitStruct->SAI_OUTDRIV = SAI_OutputDrive_Disabled;
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	2200      	movs	r2, #0
 8011900:	619a      	str	r2, [r3, #24]
  /* Initialize the SAI_NoDivider member */
  SAI_InitStruct->SAI_NoDivider = SAI_MasterDivider_Enabled;
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	2200      	movs	r2, #0
 8011906:	61da      	str	r2, [r3, #28]
  /* Initialize the SAI_MasterDivider member */
  SAI_InitStruct->SAI_MasterDivider = 0;
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	2200      	movs	r2, #0
 801190c:	621a      	str	r2, [r3, #32]
  /* Initialize the SAI_FIFOThreshold member */
  SAI_InitStruct->SAI_FIFOThreshold = SAI_Threshold_FIFOEmpty;
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	2200      	movs	r2, #0
 8011912:	625a      	str	r2, [r3, #36]	; 0x24
}
 8011914:	370c      	adds	r7, #12
 8011916:	46bd      	mov	sp, r7
 8011918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801191c:	4770      	bx	lr
 801191e:	bf00      	nop

08011920 <SAI_FrameStructInit>:
  * @param  SAI_FrameInitStruct: pointer to a SAI_FrameInitTypeDef structure 
  *         which will be initialized.                     
  * @retval None
  */
void SAI_FrameStructInit(SAI_FrameInitTypeDef* SAI_FrameInitStruct)
{
 8011920:	b480      	push	{r7}
 8011922:	b083      	sub	sp, #12
 8011924:	af00      	add	r7, sp, #0
 8011926:	6078      	str	r0, [r7, #4]
  /* Reset SAI Frame init structure parameters values */
  /* Initialize the SAI_FrameLength member */
  SAI_FrameInitStruct->SAI_FrameLength = 8;
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	2208      	movs	r2, #8
 801192c:	601a      	str	r2, [r3, #0]
  /* Initialize the SAI_ActiveFrameLength member */
  SAI_FrameInitStruct->SAI_ActiveFrameLength = 1;
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	2201      	movs	r2, #1
 8011932:	605a      	str	r2, [r3, #4]
  /* Initialize the SAI_FSDefinition member */
  SAI_FrameInitStruct->SAI_FSDefinition = SAI_FS_StartFrame;
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	2200      	movs	r2, #0
 8011938:	609a      	str	r2, [r3, #8]
  /* Initialize the SAI_FSPolarity member */
  SAI_FrameInitStruct->SAI_FSPolarity = SAI_FS_ActiveLow;
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	2200      	movs	r2, #0
 801193e:	60da      	str	r2, [r3, #12]
  /* Initialize the SAI_FSOffset member */
  SAI_FrameInitStruct->SAI_FSOffset = SAI_FS_FirstBit;
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	2200      	movs	r2, #0
 8011944:	611a      	str	r2, [r3, #16]
}
 8011946:	370c      	adds	r7, #12
 8011948:	46bd      	mov	sp, r7
 801194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194e:	4770      	bx	lr

08011950 <SAI_SlotStructInit>:
  * @param  SAI_SlotInitStruct: pointer to a SAI_SlotInitTypeDef structure 
  *         which will be initialized.                     
  * @retval None
  */
void SAI_SlotStructInit(SAI_SlotInitTypeDef* SAI_SlotInitStruct)
{
 8011950:	b480      	push	{r7}
 8011952:	b083      	sub	sp, #12
 8011954:	af00      	add	r7, sp, #0
 8011956:	6078      	str	r0, [r7, #4]
  /* Reset SAI Slot init structure parameters values */
  /* Initialize the SAI_FirstBitOffset member */
  SAI_SlotInitStruct->SAI_FirstBitOffset = 0;
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	2200      	movs	r2, #0
 801195c:	601a      	str	r2, [r3, #0]
  /* Initialize the SAI_SlotSize member */
  SAI_SlotInitStruct->SAI_SlotSize = SAI_SlotSize_DataSize;
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	2200      	movs	r2, #0
 8011962:	605a      	str	r2, [r3, #4]
  /* Initialize the SAI_SlotNumber member */
  SAI_SlotInitStruct->SAI_SlotNumber = 1;
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	2201      	movs	r2, #1
 8011968:	609a      	str	r2, [r3, #8]
  /* Initialize the SAI_SlotActive member */
  SAI_SlotInitStruct->SAI_SlotActive = SAI_Slot_NotActive;
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	2200      	movs	r2, #0
 801196e:	60da      	str	r2, [r3, #12]

}
 8011970:	370c      	adds	r7, #12
 8011972:	46bd      	mov	sp, r7
 8011974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011978:	4770      	bx	lr
 801197a:	bf00      	nop

0801197c <SAI_Cmd>:
  * @param  NewState: new state of the SAI_Block_x peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SAI_Cmd(SAI_Block_TypeDef* SAI_Block_x, FunctionalState NewState)
{
 801197c:	b480      	push	{r7}
 801197e:	b083      	sub	sp, #12
 8011980:	af00      	add	r7, sp, #0
 8011982:	6078      	str	r0, [r7, #4]
 8011984:	460b      	mov	r3, r1
 8011986:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8011988:	78fb      	ldrb	r3, [r7, #3]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d006      	beq.n	801199c <SAI_Cmd+0x20>
  {
    /* Enable the selected SAI peripheral */
    SAI_Block_x->CR1 |= SAI_xCR1_SAIEN;
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	601a      	str	r2, [r3, #0]
 801199a:	e005      	b.n	80119a8 <SAI_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected SAI peripheral */
    SAI_Block_x->CR1 &= ~(SAI_xCR1_SAIEN);
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	601a      	str	r2, [r3, #0]
  }
}
 80119a8:	370c      	adds	r7, #12
 80119aa:	46bd      	mov	sp, r7
 80119ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b0:	4770      	bx	lr
 80119b2:	bf00      	nop

080119b4 <SAI_MonoModeConfig>:
  *            @arg SAI_MonoMode : Set mono audio mode
  *            @arg SAI_StreoMode : Set streo audio mode                       
  * @retval None
  */
void SAI_MonoModeConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_Mono_StreoMode)
{
 80119b4:	b480      	push	{r7}
 80119b6:	b083      	sub	sp, #12
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]
 80119bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_MONO_STREO_MODE(SAI_MonoMode));
  /* Clear MONO bit */
  SAI_Block_x->CR1 &= ~(SAI_xCR1_MONO);
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	601a      	str	r2, [r3, #0]
  /* Set new Mono Mode value */
  SAI_Block_x->CR1 |= SAI_MonoMode;
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	601a      	str	r2, [r3, #0]
}
 80119d6:	370c      	adds	r7, #12
 80119d8:	46bd      	mov	sp, r7
 80119da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119de:	4770      	bx	lr

080119e0 <SAI_TRIStateConfig>:
  *            @arg SAI_Output_NotReleased : SD output line is still drived by the SAI.
  *            @arg SAI_Output_Released : SD output line is released (HI-Z)                       
  * @retval None
  */
void SAI_TRIStateConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_TRIState)
{
 80119e0:	b480      	push	{r7}
 80119e2:	b083      	sub	sp, #12
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	6078      	str	r0, [r7, #4]
 80119e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_TRISTATE_MANAGEMENT(SAI_TRIState));
  /* Clear MONO bit */
  SAI_Block_x->CR1 &= ~(SAI_xCR1_MONO);
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	601a      	str	r2, [r3, #0]
  /* Set new Mono Mode value */
  SAI_Block_x->CR1 |= SAI_MonoMode;  
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	601a      	str	r2, [r3, #0]
  
}
 8011a02:	370c      	adds	r7, #12
 8011a04:	46bd      	mov	sp, r7
 8011a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a0a:	4770      	bx	lr

08011a0c <SAI_CompandingModeConfig>:
  *            @arg SAI_ULaw_2CPL_Companding : Set U law (algorithm 2's complement representation)
  *            @arg SAI_ALaw_2CPL_Companding : Set A law (algorithm 2's complement repesentation)  
  * @retval None
  */
void SAI_CompandingModeConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_CompandingMode)
{
 8011a0c:	b480      	push	{r7}
 8011a0e:	b083      	sub	sp, #12
 8011a10:	af00      	add	r7, sp, #0
 8011a12:	6078      	str	r0, [r7, #4]
 8011a14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_COMPANDING_MODE(SAI_CompandingMode));
  /* Clear Companding Mode bits */
  SAI_Block_x->CR2 &= ~(SAI_xCR2_COMP);
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	685b      	ldr	r3, [r3, #4]
 8011a1a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	605a      	str	r2, [r3, #4]
  /* Set new Companding Mode value */
  SAI_Block_x->CR2 |= SAI_CompandingMode;
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	685a      	ldr	r2, [r3, #4]
 8011a26:	683b      	ldr	r3, [r7, #0]
 8011a28:	431a      	orrs	r2, r3
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	605a      	str	r2, [r3, #4]
}
 8011a2e:	370c      	adds	r7, #12
 8011a30:	46bd      	mov	sp, r7
 8011a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a36:	4770      	bx	lr

08011a38 <SAI_MuteModeCmd>:
  * @param  NewState: new state of the SAIx block. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SAI_MuteModeCmd(SAI_Block_TypeDef* SAI_Block_x, FunctionalState NewState)
{
 8011a38:	b480      	push	{r7}
 8011a3a:	b083      	sub	sp, #12
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	6078      	str	r0, [r7, #4]
 8011a40:	460b      	mov	r3, r1
 8011a42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8011a44:	78fb      	ldrb	r3, [r7, #3]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d006      	beq.n	8011a58 <SAI_MuteModeCmd+0x20>
  {
    /* Enable the selected SAI block mute mode */
    SAI_Block_x->CR2 |= SAI_xCR2_MUTE;
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	685b      	ldr	r3, [r3, #4]
 8011a4e:	f043 0220 	orr.w	r2, r3, #32
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	605a      	str	r2, [r3, #4]
 8011a56:	e005      	b.n	8011a64 <SAI_MuteModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected SAI SS output */
    SAI_Block_x->CR2 &= ~(SAI_xCR2_MUTE);
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	685b      	ldr	r3, [r3, #4]
 8011a5c:	f023 0220 	bic.w	r2, r3, #32
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	605a      	str	r2, [r3, #4]
  }
}
 8011a64:	370c      	adds	r7, #12
 8011a66:	46bd      	mov	sp, r7
 8011a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a6c:	4770      	bx	lr
 8011a6e:	bf00      	nop

08011a70 <SAI_MuteValueConfig>:
  *            @arg SAI_ZeroValue : bit value 0 is sent during Mute Mode
  *            @arg SAI_LastSentValue : Last value is sent during Mute Mode  
  * @retval None
  */
void SAI_MuteValueConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_MuteValue)
{
 8011a70:	b480      	push	{r7}
 8011a72:	b083      	sub	sp, #12
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	6078      	str	r0, [r7, #4]
 8011a78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_MUTE_VALUE(SAI_MuteValue));
  
  /* Clear Mute value bits */
  SAI_Block_x->CR2 &= ~(SAI_xCR2_MUTEVAL);
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	685b      	ldr	r3, [r3, #4]
 8011a7e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	605a      	str	r2, [r3, #4]
  /* Set new Mute value */
  SAI_Block_x->CR2 |= SAI_MuteValue;
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	685a      	ldr	r2, [r3, #4]
 8011a8a:	683b      	ldr	r3, [r7, #0]
 8011a8c:	431a      	orrs	r2, r3
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	605a      	str	r2, [r3, #4]
}
 8011a92:	370c      	adds	r7, #12
 8011a94:	46bd      	mov	sp, r7
 8011a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a9a:	4770      	bx	lr

08011a9c <SAI_MuteFrameCounterConfig>:
  *         This parameter can be a number between 0 and 63.  
 
  * @retval None
  */
void SAI_MuteFrameCounterConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_MuteCounter)
{
 8011a9c:	b480      	push	{r7}
 8011a9e:	b083      	sub	sp, #12
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	6078      	str	r0, [r7, #4]
 8011aa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_MUTE_COUNTER(SAI_MuteCounter));
  
  /* Clear Mute value bits */
  SAI_Block_x->CR2 &= ~(SAI_xCR2_MUTECNT);
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	685b      	ldr	r3, [r3, #4]
 8011aaa:	f423 52fc 	bic.w	r2, r3, #8064	; 0x1f80
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	605a      	str	r2, [r3, #4]
  /* Set new Mute value */
  SAI_Block_x->CR2 |= (SAI_MuteCounter << 7);
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	685a      	ldr	r2, [r3, #4]
 8011ab6:	683b      	ldr	r3, [r7, #0]
 8011ab8:	01db      	lsls	r3, r3, #7
 8011aba:	431a      	orrs	r2, r3
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	605a      	str	r2, [r3, #4]
}
 8011ac0:	370c      	adds	r7, #12
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac8:	4770      	bx	lr
 8011aca:	bf00      	nop

08011acc <SAI_FlushFIFO>:
  * @param  NewState: new state of the selected SAI TI communication mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SAI_FlushFIFO(SAI_Block_TypeDef* SAI_Block_x)
{
 8011acc:	b480      	push	{r7}
 8011ace:	b083      	sub	sp, #12
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));

  /* FIFO flush */
  SAI_Block_x->CR2 |= SAI_xCR2_FFLUSH;
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	685b      	ldr	r3, [r3, #4]
 8011ad8:	f043 0208 	orr.w	r2, r3, #8
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	605a      	str	r2, [r3, #4]
}
 8011ae0:	370c      	adds	r7, #12
 8011ae2:	46bd      	mov	sp, r7
 8011ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae8:	4770      	bx	lr
 8011aea:	bf00      	nop

08011aec <SAI_ReceiveData>:
  * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral. 
  *         
  * @retval The value of the received data.
  */
uint32_t SAI_ReceiveData(SAI_Block_TypeDef* SAI_Block_x)
{
 8011aec:	b480      	push	{r7}
 8011aee:	b083      	sub	sp, #12
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  
  /* Return the data in the DR register */
  return SAI_Block_x->DR;
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	69db      	ldr	r3, [r3, #28]
}
 8011af8:	4618      	mov	r0, r3
 8011afa:	370c      	adds	r7, #12
 8011afc:	46bd      	mov	sp, r7
 8011afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b02:	4770      	bx	lr

08011b04 <SAI_SendData>:
  *        
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SAI_SendData(SAI_Block_TypeDef* SAI_Block_x, uint32_t Data)
{
 8011b04:	b480      	push	{r7}
 8011b06:	b083      	sub	sp, #12
 8011b08:	af00      	add	r7, sp, #0
 8011b0a:	6078      	str	r0, [r7, #4]
 8011b0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  
  /* Write in the DR register the data to be sent */
  SAI_Block_x->DR = Data;
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	683a      	ldr	r2, [r7, #0]
 8011b12:	61da      	str	r2, [r3, #28]
}
 8011b14:	370c      	adds	r7, #12
 8011b16:	46bd      	mov	sp, r7
 8011b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b1c:	4770      	bx	lr
 8011b1e:	bf00      	nop

08011b20 <SAI_DMACmd>:
  * @param  NewState: new state of the selected SAI block DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SAI_DMACmd(SAI_Block_TypeDef* SAI_Block_x, FunctionalState NewState)
{
 8011b20:	b480      	push	{r7}
 8011b22:	b083      	sub	sp, #12
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	6078      	str	r0, [r7, #4]
 8011b28:	460b      	mov	r3, r1
 8011b2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8011b2c:	78fb      	ldrb	r3, [r7, #3]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d006      	beq.n	8011b40 <SAI_DMACmd+0x20>
  {
    /* Enable the selected SAI block mute mode */
    SAI_Block_x->CR1 |= SAI_xCR1_DMAEN;
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	601a      	str	r2, [r3, #0]
 8011b3e:	e005      	b.n	8011b4c <SAI_DMACmd+0x2c>
  }
  else
  {
    /* Disable the selected SAI SS output */
    SAI_Block_x->CR1 &= ~(SAI_xCR1_DMAEN);
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	601a      	str	r2, [r3, #0]
  }
}
 8011b4c:	370c      	adds	r7, #12
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b54:	4770      	bx	lr
 8011b56:	bf00      	nop

08011b58 <SAI_ITConfig>:
  * @param  NewState: new state of the specified SAI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SAI_ITConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_IT, FunctionalState NewState)
{ 
 8011b58:	b480      	push	{r7}
 8011b5a:	b085      	sub	sp, #20
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	60f8      	str	r0, [r7, #12]
 8011b60:	60b9      	str	r1, [r7, #8]
 8011b62:	4613      	mov	r3, r2
 8011b64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SAI_BLOCK_CONFIG_IT(SAI_IT));

  if (NewState != DISABLE)
 8011b66:	79fb      	ldrb	r3, [r7, #7]
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d006      	beq.n	8011b7a <SAI_ITConfig+0x22>
  {
    /* Enable the selected SAI Block interrupt */
    SAI_Block_x->IMR |= SAI_IT;
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	691a      	ldr	r2, [r3, #16]
 8011b70:	68bb      	ldr	r3, [r7, #8]
 8011b72:	431a      	orrs	r2, r3
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	611a      	str	r2, [r3, #16]
 8011b78:	e006      	b.n	8011b88 <SAI_ITConfig+0x30>
  }
  else
  {
    /* Disable the selected SAI Block interrupt */
    SAI_Block_x->IMR &= ~(SAI_IT);
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	691a      	ldr	r2, [r3, #16]
 8011b7e:	68bb      	ldr	r3, [r7, #8]
 8011b80:	43db      	mvns	r3, r3
 8011b82:	401a      	ands	r2, r3
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	611a      	str	r2, [r3, #16]
  }
}
 8011b88:	3714      	adds	r7, #20
 8011b8a:	46bd      	mov	sp, r7
 8011b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b90:	4770      	bx	lr
 8011b92:	bf00      	nop

08011b94 <SAI_GetFlagStatus>:
  *            @arg SAI_FLAG_AFSDET: anticipated frame synchronization detection flag.
  *            @arg SAI_FLAG_LFSDET: late frame synchronization detection flag.
  * @retval The new state of SAI_FLAG (SET or RESET).
  */
FlagStatus SAI_GetFlagStatus(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_FLAG)
{
 8011b94:	b480      	push	{r7}
 8011b96:	b085      	sub	sp, #20
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]
 8011b9c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8011b9e:	2300      	movs	r3, #0
 8011ba0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_GET_FLAG(SAI_FLAG));
  
  /* Check the status of the specified SAI flag */
  if ((SAI_Block_x->SR & SAI_FLAG) != (uint32_t)RESET)
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	695a      	ldr	r2, [r3, #20]
 8011ba6:	683b      	ldr	r3, [r7, #0]
 8011ba8:	4013      	ands	r3, r2
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d002      	beq.n	8011bb4 <SAI_GetFlagStatus+0x20>
  {
    /* SAI_FLAG is set */
    bitstatus = SET;
 8011bae:	2301      	movs	r3, #1
 8011bb0:	73fb      	strb	r3, [r7, #15]
 8011bb2:	e001      	b.n	8011bb8 <SAI_GetFlagStatus+0x24>
  }
  else
  {
    /* SAI_FLAG is reset */
    bitstatus = RESET;
 8011bb4:	2300      	movs	r3, #0
 8011bb6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SAI_FLAG status */
  return  bitstatus;
 8011bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bba:	4618      	mov	r0, r3
 8011bbc:	3714      	adds	r7, #20
 8011bbe:	46bd      	mov	sp, r7
 8011bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc4:	4770      	bx	lr
 8011bc6:	bf00      	nop

08011bc8 <SAI_ClearFlag>:
  *          - When the audio block is receiver and the FIFO is not empty           
  *  
  * @retval None
  */
void SAI_ClearFlag(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_FLAG)
{
 8011bc8:	b480      	push	{r7}
 8011bca:	b083      	sub	sp, #12
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	6078      	str	r0, [r7, #4]
 8011bd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_CLEAR_FLAG(SAI_FLAG));
    
  /* Clear the selected SAI Block flag */
  SAI_Block_x->CLRFR |= SAI_FLAG;
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	699a      	ldr	r2, [r3, #24]
 8011bd6:	683b      	ldr	r3, [r7, #0]
 8011bd8:	431a      	orrs	r2, r3
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	619a      	str	r2, [r3, #24]
}
 8011bde:	370c      	adds	r7, #12
 8011be0:	46bd      	mov	sp, r7
 8011be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be6:	4770      	bx	lr

08011be8 <SAI_GetITStatus>:
  *            @arg SAI_IT_WCKCFG: wrong clock configuration interrupt 
  *                
  * @retval The new state of SAI_IT (SET or RESET).
  */
ITStatus SAI_GetITStatus(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_IT)
{
 8011be8:	b480      	push	{r7}
 8011bea:	b085      	sub	sp, #20
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	6078      	str	r0, [r7, #4]
 8011bf0:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8011bf2:	2300      	movs	r3, #0
 8011bf4:	73fb      	strb	r3, [r7, #15]
  uint32_t  enablestatus = 0;
 8011bf6:	2300      	movs	r3, #0
 8011bf8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_CONFIG_IT(SAI_IT));
  
  /* Get the SAI_IT enable bit status */
  enablestatus = (SAI_Block_x->IMR & SAI_IT) ;
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	691a      	ldr	r2, [r3, #16]
 8011bfe:	683b      	ldr	r3, [r7, #0]
 8011c00:	4013      	ands	r3, r2
 8011c02:	60bb      	str	r3, [r7, #8]

  /* Check the status of the specified SAI interrupt */
  if (((SAI_Block_x->SR & SAI_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	695a      	ldr	r2, [r3, #20]
 8011c08:	683b      	ldr	r3, [r7, #0]
 8011c0a:	4013      	ands	r3, r2
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d005      	beq.n	8011c1c <SAI_GetITStatus+0x34>
 8011c10:	68bb      	ldr	r3, [r7, #8]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d002      	beq.n	8011c1c <SAI_GetITStatus+0x34>
  {
    /* SAI_IT is set */
    bitstatus = SET;
 8011c16:	2301      	movs	r3, #1
 8011c18:	73fb      	strb	r3, [r7, #15]
 8011c1a:	e001      	b.n	8011c20 <SAI_GetITStatus+0x38>
  }
  else
  {
    /* SAI_IT is reset */
    bitstatus = RESET;
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SAI_IT status */
  return bitstatus;
 8011c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c22:	4618      	mov	r0, r3
 8011c24:	3714      	adds	r7, #20
 8011c26:	46bd      	mov	sp, r7
 8011c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c2c:	4770      	bx	lr
 8011c2e:	bf00      	nop

08011c30 <SAI_ClearITPendingBit>:
  *          - When the audio block is receiver and the FIFO is not empty  
  *            
  * @retval None
  */
void SAI_ClearITPendingBit(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_IT)
{
 8011c30:	b480      	push	{r7}
 8011c32:	b083      	sub	sp, #12
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	6078      	str	r0, [r7, #4]
 8011c38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_CONFIG_IT(SAI_IT));

  /* Clear the selected SAI Block x interrupt pending bit */
  SAI_Block_x->CLRFR |= SAI_IT; 
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	699a      	ldr	r2, [r3, #24]
 8011c3e:	683b      	ldr	r3, [r7, #0]
 8011c40:	431a      	orrs	r2, r3
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	619a      	str	r2, [r3, #24]
}
 8011c46:	370c      	adds	r7, #12
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c4e:	4770      	bx	lr

08011c50 <SAI_GetCmdStatus>:
  *          the end of audio frame.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState SAI_GetCmdStatus(SAI_Block_TypeDef* SAI_Block_x)
{
 8011c50:	b480      	push	{r7}
 8011c52:	b085      	sub	sp, #20
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8011c58:	2300      	movs	r3, #0
 8011c5a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  if ((SAI_Block_x->CR1 & (uint32_t)SAI_xCR1_SAIEN) != 0)
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d002      	beq.n	8011c6e <SAI_GetCmdStatus+0x1e>
  {
    /* The selected SAI Block x EN bit is set (audio frame transfer is ongoing) */
    state = ENABLE;
 8011c68:	2301      	movs	r3, #1
 8011c6a:	73fb      	strb	r3, [r7, #15]
 8011c6c:	e001      	b.n	8011c72 <SAI_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected SAI Block x EN bit is cleared (SAI Block is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8011c6e:	2300      	movs	r3, #0
 8011c70:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8011c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c74:	4618      	mov	r0, r3
 8011c76:	3714      	adds	r7, #20
 8011c78:	46bd      	mov	sp, r7
 8011c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c7e:	4770      	bx	lr

08011c80 <SAI_GetFIFOStatus>:
  *           - SAI_FIFOStatus_HalfFull: if more than 1 half-full.
  *           - SAI_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
  *           - SAI_FIFOStatus_Full: when FIFO is full
  */
uint32_t SAI_GetFIFOStatus(SAI_Block_TypeDef* SAI_Block_x)
{
 8011c80:	b480      	push	{r7}
 8011c82:	b085      	sub	sp, #20
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8011c88:	2300      	movs	r3, #0
 8011c8a:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  
  /* Get the FIFO level bits */
  tmpreg = (uint32_t)((SAI_Block_x->SR & SAI_xSR_FLVL));
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	695b      	ldr	r3, [r3, #20]
 8011c90:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8011c94:	60fb      	str	r3, [r7, #12]
  
  return tmpreg;
 8011c96:	68fb      	ldr	r3, [r7, #12]
}
 8011c98:	4618      	mov	r0, r3
 8011c9a:	3714      	adds	r7, #20
 8011c9c:	46bd      	mov	sp, r7
 8011c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca2:	4770      	bx	lr

08011ca4 <SDIO_DeInit>:
  * @brief  Deinitializes the SDIO peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void SDIO_DeInit(void)
{
 8011ca4:	b580      	push	{r7, lr}
 8011ca6:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, ENABLE);
 8011ca8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011cac:	2101      	movs	r1, #1
 8011cae:	f7fe f8e9 	bl	800fe84 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, DISABLE);
 8011cb2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011cb6:	2100      	movs	r1, #0
 8011cb8:	f7fe f8e4 	bl	800fe84 <RCC_APB2PeriphResetCmd>
}
 8011cbc:	bd80      	pop	{r7, pc}
 8011cbe:	bf00      	nop

08011cc0 <SDIO_Init>:
  * @param  SDIO_InitStruct : pointer to a SDIO_InitTypeDef structure 
  *         that contains the configuration information for the SDIO peripheral.
  * @retval None
  */
void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct)
{
 8011cc0:	b480      	push	{r7}
 8011cc2:	b085      	sub	sp, #20
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8011cc8:	2300      	movs	r3, #0
 8011cca:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
   
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
 8011ccc:	4b12      	ldr	r3, [pc, #72]	; (8011d18 <SDIO_Init+0x58>)
 8011cce:	685b      	ldr	r3, [r3, #4]
 8011cd0:	60fb      	str	r3, [r7, #12]
  
  /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
  tmpreg &= CLKCR_CLEAR_MASK;
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8011cd8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011cdc:	60fb      	str	r3, [r7, #12]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	7d1b      	ldrb	r3, [r3, #20]
 8011ce2:	461a      	mov	r2, r3
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	689b      	ldr	r3, [r3, #8]
 8011ce8:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	685b      	ldr	r3, [r3, #4]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 8011cee:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	68db      	ldr	r3, [r3, #12]
 8011cf4:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	681b      	ldr	r3, [r3, #0]
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 8011cfa:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	691b      	ldr	r3, [r3, #16]
 8011d00:	4313      	orrs	r3, r2
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 8011d02:	68fa      	ldr	r2, [r7, #12]
 8011d04:	4313      	orrs	r3, r2
 8011d06:	60fb      	str	r3, [r7, #12]
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
  
  /* Write to SDIO CLKCR */
  SDIO->CLKCR = tmpreg;
 8011d08:	4b03      	ldr	r3, [pc, #12]	; (8011d18 <SDIO_Init+0x58>)
 8011d0a:	68fa      	ldr	r2, [r7, #12]
 8011d0c:	605a      	str	r2, [r3, #4]
}
 8011d0e:	3714      	adds	r7, #20
 8011d10:	46bd      	mov	sp, r7
 8011d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d16:	4770      	bx	lr
 8011d18:	40012c00 	.word	0x40012c00

08011d1c <SDIO_StructInit>:
  * @param  SDIO_InitStruct: pointer to an SDIO_InitTypeDef structure which 
  *         will be initialized.
  * @retval None
  */
void SDIO_StructInit(SDIO_InitTypeDef* SDIO_InitStruct)
{
 8011d1c:	b480      	push	{r7}
 8011d1e:	b083      	sub	sp, #12
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]
  /* SDIO_InitStruct members default value */
  SDIO_InitStruct->SDIO_ClockDiv = 0x00;
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	2200      	movs	r2, #0
 8011d28:	751a      	strb	r2, [r3, #20]
  SDIO_InitStruct->SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	2200      	movs	r2, #0
 8011d2e:	601a      	str	r2, [r3, #0]
  SDIO_InitStruct->SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	2200      	movs	r2, #0
 8011d34:	605a      	str	r2, [r3, #4]
  SDIO_InitStruct->SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	2200      	movs	r2, #0
 8011d3a:	609a      	str	r2, [r3, #8]
  SDIO_InitStruct->SDIO_BusWide = SDIO_BusWide_1b;
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	2200      	movs	r2, #0
 8011d40:	60da      	str	r2, [r3, #12]
  SDIO_InitStruct->SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	2200      	movs	r2, #0
 8011d46:	611a      	str	r2, [r3, #16]
}
 8011d48:	370c      	adds	r7, #12
 8011d4a:	46bd      	mov	sp, r7
 8011d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d50:	4770      	bx	lr
 8011d52:	bf00      	nop

08011d54 <SDIO_ClockCmd>:
  * @param  NewState: new state of the SDIO Clock. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_ClockCmd(FunctionalState NewState)
{
 8011d54:	b480      	push	{r7}
 8011d56:	b083      	sub	sp, #12
 8011d58:	af00      	add	r7, sp, #0
 8011d5a:	4603      	mov	r3, r0
 8011d5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CLKCR_CLKEN_BB = (uint32_t)NewState;
 8011d5e:	4b04      	ldr	r3, [pc, #16]	; (8011d70 <SDIO_ClockCmd+0x1c>)
 8011d60:	79fa      	ldrb	r2, [r7, #7]
 8011d62:	601a      	str	r2, [r3, #0]
}
 8011d64:	370c      	adds	r7, #12
 8011d66:	46bd      	mov	sp, r7
 8011d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d6c:	4770      	bx	lr
 8011d6e:	bf00      	nop
 8011d70:	422580a0 	.word	0x422580a0

08011d74 <SDIO_SetPowerState>:
  *            @arg SDIO_PowerState_OFF: SDIO Power OFF
  *            @arg SDIO_PowerState_ON: SDIO Power ON
  * @retval None
  */
void SDIO_SetPowerState(uint32_t SDIO_PowerState)
{
 8011d74:	b480      	push	{r7}
 8011d76:	b083      	sub	sp, #12
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_POWER_STATE(SDIO_PowerState));
  
  SDIO->POWER = SDIO_PowerState;
 8011d7c:	4b03      	ldr	r3, [pc, #12]	; (8011d8c <SDIO_SetPowerState+0x18>)
 8011d7e:	687a      	ldr	r2, [r7, #4]
 8011d80:	601a      	str	r2, [r3, #0]
}
 8011d82:	370c      	adds	r7, #12
 8011d84:	46bd      	mov	sp, r7
 8011d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d8a:	4770      	bx	lr
 8011d8c:	40012c00 	.word	0x40012c00

08011d90 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(void)
{
 8011d90:	b480      	push	{r7}
 8011d92:	af00      	add	r7, sp, #0
  return (SDIO->POWER & (~PWR_PWRCTRL_MASK));
 8011d94:	4b04      	ldr	r3, [pc, #16]	; (8011da8 <SDIO_GetPowerState+0x18>)
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	f003 0303 	and.w	r3, r3, #3
}
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da4:	4770      	bx	lr
 8011da6:	bf00      	nop
 8011da8:	40012c00 	.word	0x40012c00

08011dac <SDIO_SendCommand>:
  *         structure that contains the configuration information for the SDIO 
  *         command.
  * @retval None
  */
void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
{
 8011dac:	b480      	push	{r7}
 8011dae:	b085      	sub	sp, #20
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8011db4:	2300      	movs	r3, #0
 8011db6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
  
/*---------------------------- SDIO ARG Configuration ------------------------*/
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
 8011db8:	4b11      	ldr	r3, [pc, #68]	; (8011e00 <SDIO_SendCommand+0x54>)
 8011dba:	687a      	ldr	r2, [r7, #4]
 8011dbc:	6812      	ldr	r2, [r2, #0]
 8011dbe:	609a      	str	r2, [r3, #8]
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
 8011dc0:	4b0f      	ldr	r3, [pc, #60]	; (8011e00 <SDIO_SendCommand+0x54>)
 8011dc2:	68db      	ldr	r3, [r3, #12]
 8011dc4:	60fb      	str	r3, [r7, #12]
  /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
  tmpreg &= CMD_CLEAR_MASK;
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8011dcc:	f023 0307 	bic.w	r3, r3, #7
 8011dd0:	60fb      	str	r3, [r7, #12]
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	685a      	ldr	r2, [r3, #4]
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	689b      	ldr	r3, [r3, #8]
 8011dda:	431a      	orrs	r2, r3
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	68db      	ldr	r3, [r3, #12]
 8011de0:	431a      	orrs	r2, r3
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	691b      	ldr	r3, [r3, #16]
 8011de6:	4313      	orrs	r3, r2
  tmpreg &= CMD_CLEAR_MASK;
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 8011de8:	68fa      	ldr	r2, [r7, #12]
 8011dea:	4313      	orrs	r3, r2
 8011dec:	60fb      	str	r3, [r7, #12]
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
  
  /* Write to SDIO CMD */
  SDIO->CMD = tmpreg;
 8011dee:	4b04      	ldr	r3, [pc, #16]	; (8011e00 <SDIO_SendCommand+0x54>)
 8011df0:	68fa      	ldr	r2, [r7, #12]
 8011df2:	60da      	str	r2, [r3, #12]
}
 8011df4:	3714      	adds	r7, #20
 8011df6:	46bd      	mov	sp, r7
 8011df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dfc:	4770      	bx	lr
 8011dfe:	bf00      	nop
 8011e00:	40012c00 	.word	0x40012c00

08011e04 <SDIO_CmdStructInit>:
  * @param  SDIO_CmdInitStruct: pointer to an SDIO_CmdInitTypeDef 
  *         structure which will be initialized.
  * @retval None
  */
void SDIO_CmdStructInit(SDIO_CmdInitTypeDef* SDIO_CmdInitStruct)
{
 8011e04:	b480      	push	{r7}
 8011e06:	b083      	sub	sp, #12
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
  /* SDIO_CmdInitStruct members default value */
  SDIO_CmdInitStruct->SDIO_Argument = 0x00;
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	2200      	movs	r2, #0
 8011e10:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStruct->SDIO_CmdIndex = 0x00;
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	2200      	movs	r2, #0
 8011e16:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStruct->SDIO_Response = SDIO_Response_No;
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStruct->SDIO_Wait = SDIO_Wait_No;
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	2200      	movs	r2, #0
 8011e22:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStruct->SDIO_CPSM = SDIO_CPSM_Disable;
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	2200      	movs	r2, #0
 8011e28:	611a      	str	r2, [r3, #16]
}
 8011e2a:	370c      	adds	r7, #12
 8011e2c:	46bd      	mov	sp, r7
 8011e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e32:	4770      	bx	lr

08011e34 <SDIO_GetCommandResponse>:
  * @brief  Returns command index of last command for which response received.
  * @param  None
  * @retval Returns the command index of the last command response received.
  */
uint8_t SDIO_GetCommandResponse(void)
{
 8011e34:	b480      	push	{r7}
 8011e36:	af00      	add	r7, sp, #0
  return (uint8_t)(SDIO->RESPCMD);
 8011e38:	4b03      	ldr	r3, [pc, #12]	; (8011e48 <SDIO_GetCommandResponse+0x14>)
 8011e3a:	691b      	ldr	r3, [r3, #16]
 8011e3c:	b2db      	uxtb	r3, r3
}
 8011e3e:	4618      	mov	r0, r3
 8011e40:	46bd      	mov	sp, r7
 8011e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e46:	4770      	bx	lr
 8011e48:	40012c00 	.word	0x40012c00

08011e4c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4
  * @retval The Corresponding response register value.
  */
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
{
 8011e4c:	b480      	push	{r7}
 8011e4e:	b085      	sub	sp, #20
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 8011e54:	2300      	movs	r3, #0
 8011e56:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));

  tmp = SDIO_RESP_ADDR + SDIO_RESP;
 8011e58:	687a      	ldr	r2, [r7, #4]
 8011e5a:	4b05      	ldr	r3, [pc, #20]	; (8011e70 <SDIO_GetResponse+0x24>)
 8011e5c:	4413      	add	r3, r2
 8011e5e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp); 
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	681b      	ldr	r3, [r3, #0]
}
 8011e64:	4618      	mov	r0, r3
 8011e66:	3714      	adds	r7, #20
 8011e68:	46bd      	mov	sp, r7
 8011e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e6e:	4770      	bx	lr
 8011e70:	40012c14 	.word	0x40012c14

08011e74 <SDIO_DataConfig>:
  * @param  SDIO_DataInitStruct : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDIO command.
  * @retval None
  */
void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 8011e74:	b480      	push	{r7}
 8011e76:	b085      	sub	sp, #20
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8011e7c:	2300      	movs	r3, #0
 8011e7e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));

/*---------------------------- SDIO DTIMER Configuration ---------------------*/
  /* Set the SDIO Data TimeOut value */
  SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
 8011e80:	4b12      	ldr	r3, [pc, #72]	; (8011ecc <SDIO_DataConfig+0x58>)
 8011e82:	687a      	ldr	r2, [r7, #4]
 8011e84:	6812      	ldr	r2, [r2, #0]
 8011e86:	625a      	str	r2, [r3, #36]	; 0x24

/*---------------------------- SDIO DLEN Configuration -----------------------*/
  /* Set the SDIO DataLength value */
  SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;
 8011e88:	4b10      	ldr	r3, [pc, #64]	; (8011ecc <SDIO_DataConfig+0x58>)
 8011e8a:	687a      	ldr	r2, [r7, #4]
 8011e8c:	6852      	ldr	r2, [r2, #4]
 8011e8e:	629a      	str	r2, [r3, #40]	; 0x28

/*---------------------------- SDIO DCTRL Configuration ----------------------*/  
  /* Get the SDIO DCTRL value */
  tmpreg = SDIO->DCTRL;
 8011e90:	4b0e      	ldr	r3, [pc, #56]	; (8011ecc <SDIO_DataConfig+0x58>)
 8011e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e94:	60fb      	str	r3, [r7, #12]
  /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
  tmpreg &= DCTRL_CLEAR_MASK;
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	f023 03f7 	bic.w	r3, r3, #247	; 0xf7
 8011e9c:	60fb      	str	r3, [r7, #12]
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	689a      	ldr	r2, [r3, #8]
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	68db      	ldr	r3, [r3, #12]
 8011ea6:	431a      	orrs	r2, r3
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	691b      	ldr	r3, [r3, #16]
 8011eac:	431a      	orrs	r2, r3
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	695b      	ldr	r3, [r3, #20]
 8011eb2:	4313      	orrs	r3, r2
  tmpreg &= DCTRL_CLEAR_MASK;
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 8011eb4:	68fa      	ldr	r2, [r7, #12]
 8011eb6:	4313      	orrs	r3, r2
 8011eb8:	60fb      	str	r3, [r7, #12]
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;

  /* Write to SDIO DCTRL */
  SDIO->DCTRL = tmpreg;
 8011eba:	4b04      	ldr	r3, [pc, #16]	; (8011ecc <SDIO_DataConfig+0x58>)
 8011ebc:	68fa      	ldr	r2, [r7, #12]
 8011ebe:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8011ec0:	3714      	adds	r7, #20
 8011ec2:	46bd      	mov	sp, r7
 8011ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec8:	4770      	bx	lr
 8011eca:	bf00      	nop
 8011ecc:	40012c00 	.word	0x40012c00

08011ed0 <SDIO_DataStructInit>:
  * @param  SDIO_DataInitStruct: pointer to an SDIO_DataInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 8011ed0:	b480      	push	{r7}
 8011ed2:	b083      	sub	sp, #12
 8011ed4:	af00      	add	r7, sp, #0
 8011ed6:	6078      	str	r0, [r7, #4]
  /* SDIO_DataInitStruct members default value */
  SDIO_DataInitStruct->SDIO_DataTimeOut = 0xFFFFFFFF;
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011ede:	601a      	str	r2, [r3, #0]
  SDIO_DataInitStruct->SDIO_DataLength = 0x00;
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	605a      	str	r2, [r3, #4]
  SDIO_DataInitStruct->SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	2200      	movs	r2, #0
 8011eea:	609a      	str	r2, [r3, #8]
  SDIO_DataInitStruct->SDIO_TransferDir = SDIO_TransferDir_ToCard;
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	2200      	movs	r2, #0
 8011ef0:	60da      	str	r2, [r3, #12]
  SDIO_DataInitStruct->SDIO_TransferMode = SDIO_TransferMode_Block;  
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	2200      	movs	r2, #0
 8011ef6:	611a      	str	r2, [r3, #16]
  SDIO_DataInitStruct->SDIO_DPSM = SDIO_DPSM_Disable;
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	2200      	movs	r2, #0
 8011efc:	615a      	str	r2, [r3, #20]
}
 8011efe:	370c      	adds	r7, #12
 8011f00:	46bd      	mov	sp, r7
 8011f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f06:	4770      	bx	lr

08011f08 <SDIO_GetDataCounter>:
  * @brief  Returns number of remaining data bytes to be transferred.
  * @param  None
  * @retval Number of remaining data bytes to be transferred
  */
uint32_t SDIO_GetDataCounter(void)
{ 
 8011f08:	b480      	push	{r7}
 8011f0a:	af00      	add	r7, sp, #0
  return SDIO->DCOUNT;
 8011f0c:	4b03      	ldr	r3, [pc, #12]	; (8011f1c <SDIO_GetDataCounter+0x14>)
 8011f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8011f10:	4618      	mov	r0, r3
 8011f12:	46bd      	mov	sp, r7
 8011f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f18:	4770      	bx	lr
 8011f1a:	bf00      	nop
 8011f1c:	40012c00 	.word	0x40012c00

08011f20 <SDIO_ReadData>:
  * @brief  Read one data word from Rx FIFO.
  * @param  None
  * @retval Data received
  */
uint32_t SDIO_ReadData(void)
{ 
 8011f20:	b480      	push	{r7}
 8011f22:	af00      	add	r7, sp, #0
  return SDIO->FIFO;
 8011f24:	4b03      	ldr	r3, [pc, #12]	; (8011f34 <SDIO_ReadData+0x14>)
 8011f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	46bd      	mov	sp, r7
 8011f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f32:	4770      	bx	lr
 8011f34:	40012c00 	.word	0x40012c00

08011f38 <SDIO_WriteData>:
  * @brief  Write one data word to Tx FIFO.
  * @param  Data: 32-bit data word to write.
  * @retval None
  */
void SDIO_WriteData(uint32_t Data)
{ 
 8011f38:	b480      	push	{r7}
 8011f3a:	b083      	sub	sp, #12
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	6078      	str	r0, [r7, #4]
  SDIO->FIFO = Data;
 8011f40:	4b04      	ldr	r3, [pc, #16]	; (8011f54 <SDIO_WriteData+0x1c>)
 8011f42:	687a      	ldr	r2, [r7, #4]
 8011f44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8011f48:	370c      	adds	r7, #12
 8011f4a:	46bd      	mov	sp, r7
 8011f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f50:	4770      	bx	lr
 8011f52:	bf00      	nop
 8011f54:	40012c00 	.word	0x40012c00

08011f58 <SDIO_GetFIFOCount>:
  * @brief  Returns the number of words left to be written to or read from FIFO.	
  * @param  None
  * @retval Remaining number of words.
  */
uint32_t SDIO_GetFIFOCount(void)
{ 
 8011f58:	b480      	push	{r7}
 8011f5a:	af00      	add	r7, sp, #0
  return SDIO->FIFOCNT;
 8011f5c:	4b03      	ldr	r3, [pc, #12]	; (8011f6c <SDIO_GetFIFOCount+0x14>)
 8011f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 8011f60:	4618      	mov	r0, r3
 8011f62:	46bd      	mov	sp, r7
 8011f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f68:	4770      	bx	lr
 8011f6a:	bf00      	nop
 8011f6c:	40012c00 	.word	0x40012c00

08011f70 <SDIO_StartSDIOReadWait>:
  * @param  NewState: new state of the Start SDIO Read Wait operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_StartSDIOReadWait(FunctionalState NewState)
{ 
 8011f70:	b480      	push	{r7}
 8011f72:	b083      	sub	sp, #12
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	4603      	mov	r3, r0
 8011f78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTART_BB = (uint32_t) NewState;
 8011f7a:	4b04      	ldr	r3, [pc, #16]	; (8011f8c <SDIO_StartSDIOReadWait+0x1c>)
 8011f7c:	79fa      	ldrb	r2, [r7, #7]
 8011f7e:	601a      	str	r2, [r3, #0]
}
 8011f80:	370c      	adds	r7, #12
 8011f82:	46bd      	mov	sp, r7
 8011f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f88:	4770      	bx	lr
 8011f8a:	bf00      	nop
 8011f8c:	422585a0 	.word	0x422585a0

08011f90 <SDIO_StopSDIOReadWait>:
  * @param  NewState: new state of the Stop SDIO Read Wait operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_StopSDIOReadWait(FunctionalState NewState)
{ 
 8011f90:	b480      	push	{r7}
 8011f92:	b083      	sub	sp, #12
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	4603      	mov	r3, r0
 8011f98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTOP_BB = (uint32_t) NewState;
 8011f9a:	4b04      	ldr	r3, [pc, #16]	; (8011fac <SDIO_StopSDIOReadWait+0x1c>)
 8011f9c:	79fa      	ldrb	r2, [r7, #7]
 8011f9e:	601a      	str	r2, [r3, #0]
}
 8011fa0:	370c      	adds	r7, #12
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa8:	4770      	bx	lr
 8011faa:	bf00      	nop
 8011fac:	422585a4 	.word	0x422585a4

08011fb0 <SDIO_SetSDIOReadWaitMode>:
  *            @arg SDIO_ReadWaitMode_CLK: Read Wait control by stopping SDIOCLK
  *            @arg SDIO_ReadWaitMode_DATA2: Read Wait control using SDIO_DATA2
  * @retval None
  */
void SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode)
{
 8011fb0:	b480      	push	{r7}
 8011fb2:	b083      	sub	sp, #12
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_READWAIT_MODE(SDIO_ReadWaitMode));
  
  *(__IO uint32_t *) DCTRL_RWMOD_BB = SDIO_ReadWaitMode;
 8011fb8:	4b03      	ldr	r3, [pc, #12]	; (8011fc8 <SDIO_SetSDIOReadWaitMode+0x18>)
 8011fba:	687a      	ldr	r2, [r7, #4]
 8011fbc:	601a      	str	r2, [r3, #0]
}
 8011fbe:	370c      	adds	r7, #12
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc6:	4770      	bx	lr
 8011fc8:	422585a8 	.word	0x422585a8

08011fcc <SDIO_SetSDIOOperation>:
  * @param  NewState: new state of SDIO specific operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SetSDIOOperation(FunctionalState NewState)
{ 
 8011fcc:	b480      	push	{r7}
 8011fce:	b083      	sub	sp, #12
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_SDIOEN_BB = (uint32_t)NewState;
 8011fd6:	4b04      	ldr	r3, [pc, #16]	; (8011fe8 <SDIO_SetSDIOOperation+0x1c>)
 8011fd8:	79fa      	ldrb	r2, [r7, #7]
 8011fda:	601a      	str	r2, [r3, #0]
}
 8011fdc:	370c      	adds	r7, #12
 8011fde:	46bd      	mov	sp, r7
 8011fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe4:	4770      	bx	lr
 8011fe6:	bf00      	nop
 8011fe8:	422585ac 	.word	0x422585ac

08011fec <SDIO_SendSDIOSuspendCmd>:
  * @param  NewState: new state of the SD I/O Mode suspend command.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SendSDIOSuspendCmd(FunctionalState NewState)
{ 
 8011fec:	b480      	push	{r7}
 8011fee:	b083      	sub	sp, #12
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	4603      	mov	r3, r0
 8011ff4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_SDIOSUSPEND_BB = (uint32_t)NewState;
 8011ff6:	4b04      	ldr	r3, [pc, #16]	; (8012008 <SDIO_SendSDIOSuspendCmd+0x1c>)
 8011ff8:	79fa      	ldrb	r2, [r7, #7]
 8011ffa:	601a      	str	r2, [r3, #0]
}
 8011ffc:	370c      	adds	r7, #12
 8011ffe:	46bd      	mov	sp, r7
 8012000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012004:	4770      	bx	lr
 8012006:	bf00      	nop
 8012008:	422581ac 	.word	0x422581ac

0801200c <SDIO_CommandCompletionCmd>:
  * @param  NewState: new state of command completion signal. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_CommandCompletionCmd(FunctionalState NewState)
{ 
 801200c:	b480      	push	{r7}
 801200e:	b083      	sub	sp, #12
 8012010:	af00      	add	r7, sp, #0
 8012012:	4603      	mov	r3, r0
 8012014:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ENCMDCOMPL_BB = (uint32_t)NewState;
 8012016:	4b04      	ldr	r3, [pc, #16]	; (8012028 <SDIO_CommandCompletionCmd+0x1c>)
 8012018:	79fa      	ldrb	r2, [r7, #7]
 801201a:	601a      	str	r2, [r3, #0]
}
 801201c:	370c      	adds	r7, #12
 801201e:	46bd      	mov	sp, r7
 8012020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012024:	4770      	bx	lr
 8012026:	bf00      	nop
 8012028:	422581b0 	.word	0x422581b0

0801202c <SDIO_CEATAITCmd>:
  * @param  NewState: new state of CE-ATA interrupt. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_CEATAITCmd(FunctionalState NewState)
{ 
 801202c:	b480      	push	{r7}
 801202e:	b083      	sub	sp, #12
 8012030:	af00      	add	r7, sp, #0
 8012032:	4603      	mov	r3, r0
 8012034:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_NIEN_BB = (uint32_t)((~((uint32_t)NewState)) & ((uint32_t)0x1));
 8012036:	4b07      	ldr	r3, [pc, #28]	; (8012054 <SDIO_CEATAITCmd+0x28>)
 8012038:	79fa      	ldrb	r2, [r7, #7]
 801203a:	f002 0201 	and.w	r2, r2, #1
 801203e:	2a00      	cmp	r2, #0
 8012040:	bf14      	ite	ne
 8012042:	2200      	movne	r2, #0
 8012044:	2201      	moveq	r2, #1
 8012046:	b2d2      	uxtb	r2, r2
 8012048:	601a      	str	r2, [r3, #0]
}
 801204a:	370c      	adds	r7, #12
 801204c:	46bd      	mov	sp, r7
 801204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012052:	4770      	bx	lr
 8012054:	422581b4 	.word	0x422581b4

08012058 <SDIO_SendCEATACmd>:
  * @param  NewState: new state of CE-ATA command. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SendCEATACmd(FunctionalState NewState)
{ 
 8012058:	b480      	push	{r7}
 801205a:	b083      	sub	sp, #12
 801205c:	af00      	add	r7, sp, #0
 801205e:	4603      	mov	r3, r0
 8012060:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ATACMD_BB = (uint32_t)NewState;
 8012062:	4b04      	ldr	r3, [pc, #16]	; (8012074 <SDIO_SendCEATACmd+0x1c>)
 8012064:	79fa      	ldrb	r2, [r7, #7]
 8012066:	601a      	str	r2, [r3, #0]
}
 8012068:	370c      	adds	r7, #12
 801206a:	46bd      	mov	sp, r7
 801206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012070:	4770      	bx	lr
 8012072:	bf00      	nop
 8012074:	422581b8 	.word	0x422581b8

08012078 <SDIO_DMACmd>:
  * @param  NewState: new state of the selected SDIO DMA request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_DMACmd(FunctionalState NewState)
{
 8012078:	b480      	push	{r7}
 801207a:	b083      	sub	sp, #12
 801207c:	af00      	add	r7, sp, #0
 801207e:	4603      	mov	r3, r0
 8012080:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_DMAEN_BB = (uint32_t)NewState;
 8012082:	4b04      	ldr	r3, [pc, #16]	; (8012094 <SDIO_DMACmd+0x1c>)
 8012084:	79fa      	ldrb	r2, [r7, #7]
 8012086:	601a      	str	r2, [r3, #0]
}
 8012088:	370c      	adds	r7, #12
 801208a:	46bd      	mov	sp, r7
 801208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012090:	4770      	bx	lr
 8012092:	bf00      	nop
 8012094:	4225858c 	.word	0x4225858c

08012098 <SDIO_ITConfig>:
  * @param  NewState: new state of the specified SDIO interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None 
  */
void SDIO_ITConfig(uint32_t SDIO_IT, FunctionalState NewState)
{
 8012098:	b480      	push	{r7}
 801209a:	b083      	sub	sp, #12
 801209c:	af00      	add	r7, sp, #0
 801209e:	6078      	str	r0, [r7, #4]
 80120a0:	460b      	mov	r3, r1
 80120a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SDIO_IT(SDIO_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80120a4:	78fb      	ldrb	r3, [r7, #3]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d006      	beq.n	80120b8 <SDIO_ITConfig+0x20>
  {
    /* Enable the SDIO interrupts */
    SDIO->MASK |= SDIO_IT;
 80120aa:	4b09      	ldr	r3, [pc, #36]	; (80120d0 <SDIO_ITConfig+0x38>)
 80120ac:	4a08      	ldr	r2, [pc, #32]	; (80120d0 <SDIO_ITConfig+0x38>)
 80120ae:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80120b0:	687a      	ldr	r2, [r7, #4]
 80120b2:	430a      	orrs	r2, r1
 80120b4:	63da      	str	r2, [r3, #60]	; 0x3c
 80120b6:	e006      	b.n	80120c6 <SDIO_ITConfig+0x2e>
  }
  else
  {
    /* Disable the SDIO interrupts */
    SDIO->MASK &= ~SDIO_IT;
 80120b8:	4b05      	ldr	r3, [pc, #20]	; (80120d0 <SDIO_ITConfig+0x38>)
 80120ba:	4a05      	ldr	r2, [pc, #20]	; (80120d0 <SDIO_ITConfig+0x38>)
 80120bc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80120be:	687a      	ldr	r2, [r7, #4]
 80120c0:	43d2      	mvns	r2, r2
 80120c2:	400a      	ands	r2, r1
 80120c4:	63da      	str	r2, [r3, #60]	; 0x3c
  } 
}
 80120c6:	370c      	adds	r7, #12
 80120c8:	46bd      	mov	sp, r7
 80120ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ce:	4770      	bx	lr
 80120d0:	40012c00 	.word	0x40012c00

080120d4 <SDIO_GetFlagStatus>:
  *            @arg SDIO_FLAG_SDIOIT:   SD I/O interrupt received
  *            @arg SDIO_FLAG_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval The new state of SDIO_FLAG (SET or RESET).
  */
FlagStatus SDIO_GetFlagStatus(uint32_t SDIO_FLAG)
{ 
 80120d4:	b480      	push	{r7}
 80120d6:	b085      	sub	sp, #20
 80120d8:	af00      	add	r7, sp, #0
 80120da:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80120dc:	2300      	movs	r3, #0
 80120de:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_SDIO_FLAG(SDIO_FLAG));
  
  if ((SDIO->STA & SDIO_FLAG) != (uint32_t)RESET)
 80120e0:	4b08      	ldr	r3, [pc, #32]	; (8012104 <SDIO_GetFlagStatus+0x30>)
 80120e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	4013      	ands	r3, r2
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d002      	beq.n	80120f2 <SDIO_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 80120ec:	2301      	movs	r3, #1
 80120ee:	73fb      	strb	r3, [r7, #15]
 80120f0:	e001      	b.n	80120f6 <SDIO_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 80120f2:	2300      	movs	r3, #0
 80120f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80120f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80120f8:	4618      	mov	r0, r3
 80120fa:	3714      	adds	r7, #20
 80120fc:	46bd      	mov	sp, r7
 80120fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012102:	4770      	bx	lr
 8012104:	40012c00 	.word	0x40012c00

08012108 <SDIO_ClearFlag>:
  *            @arg SDIO_FLAG_SDIOIT:   SD I/O interrupt received
  *            @arg SDIO_FLAG_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval None
  */
void SDIO_ClearFlag(uint32_t SDIO_FLAG)
{ 
 8012108:	b480      	push	{r7}
 801210a:	b083      	sub	sp, #12
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_FLAG(SDIO_FLAG));
   
  SDIO->ICR = SDIO_FLAG;
 8012110:	4b03      	ldr	r3, [pc, #12]	; (8012120 <SDIO_ClearFlag+0x18>)
 8012112:	687a      	ldr	r2, [r7, #4]
 8012114:	639a      	str	r2, [r3, #56]	; 0x38
}
 8012116:	370c      	adds	r7, #12
 8012118:	46bd      	mov	sp, r7
 801211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801211e:	4770      	bx	lr
 8012120:	40012c00 	.word	0x40012c00

08012124 <SDIO_GetITStatus>:
  *            @arg SDIO_IT_SDIOIT:   SD I/O interrupt received interrupt
  *            @arg SDIO_IT_CEATAEND: CE-ATA command completion signal received for CMD61 interrupt
  * @retval The new state of SDIO_IT (SET or RESET).
  */
ITStatus SDIO_GetITStatus(uint32_t SDIO_IT)
{ 
 8012124:	b480      	push	{r7}
 8012126:	b085      	sub	sp, #20
 8012128:	af00      	add	r7, sp, #0
 801212a:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 801212c:	2300      	movs	r3, #0
 801212e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_SDIO_GET_IT(SDIO_IT));
  if ((SDIO->STA & SDIO_IT) != (uint32_t)RESET)  
 8012130:	4b08      	ldr	r3, [pc, #32]	; (8012154 <SDIO_GetITStatus+0x30>)
 8012132:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	4013      	ands	r3, r2
 8012138:	2b00      	cmp	r3, #0
 801213a:	d002      	beq.n	8012142 <SDIO_GetITStatus+0x1e>
  {
    bitstatus = SET;
 801213c:	2301      	movs	r3, #1
 801213e:	73fb      	strb	r3, [r7, #15]
 8012140:	e001      	b.n	8012146 <SDIO_GetITStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8012142:	2300      	movs	r3, #0
 8012144:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8012146:	7bfb      	ldrb	r3, [r7, #15]
}
 8012148:	4618      	mov	r0, r3
 801214a:	3714      	adds	r7, #20
 801214c:	46bd      	mov	sp, r7
 801214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012152:	4770      	bx	lr
 8012154:	40012c00 	.word	0x40012c00

08012158 <SDIO_ClearITPendingBit>:
  *            @arg SDIO_IT_SDIOIT:   SD I/O interrupt received interrupt
  *            @arg SDIO_IT_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval None
  */
void SDIO_ClearITPendingBit(uint32_t SDIO_IT)
{ 
 8012158:	b480      	push	{r7}
 801215a:	b083      	sub	sp, #12
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_IT(SDIO_IT));
   
  SDIO->ICR = SDIO_IT;
 8012160:	4b03      	ldr	r3, [pc, #12]	; (8012170 <SDIO_ClearITPendingBit+0x18>)
 8012162:	687a      	ldr	r2, [r7, #4]
 8012164:	639a      	str	r2, [r3, #56]	; 0x38
}
 8012166:	370c      	adds	r7, #12
 8012168:	46bd      	mov	sp, r7
 801216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801216e:	4770      	bx	lr
 8012170:	40012c00 	.word	0x40012c00

08012174 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8012174:	b580      	push	{r7, lr}
 8012176:	b082      	sub	sp, #8
 8012178:	af00      	add	r7, sp, #0
 801217a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 801217c:	687a      	ldr	r2, [r7, #4]
 801217e:	4b2d      	ldr	r3, [pc, #180]	; (8012234 <SPI_I2S_DeInit+0xc0>)
 8012180:	429a      	cmp	r2, r3
 8012182:	d10a      	bne.n	801219a <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8012184:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8012188:	2101      	movs	r1, #1
 801218a:	f7fd fe7b 	bl	800fe84 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 801218e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8012192:	2100      	movs	r1, #0
 8012194:	f7fd fe76 	bl	800fe84 <RCC_APB2PeriphResetCmd>
 8012198:	e049      	b.n	801222e <SPI_I2S_DeInit+0xba>
  }
  else if (SPIx == SPI2)
 801219a:	687a      	ldr	r2, [r7, #4]
 801219c:	4b26      	ldr	r3, [pc, #152]	; (8012238 <SPI_I2S_DeInit+0xc4>)
 801219e:	429a      	cmp	r2, r3
 80121a0:	d10a      	bne.n	80121b8 <SPI_I2S_DeInit+0x44>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 80121a2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80121a6:	2101      	movs	r1, #1
 80121a8:	f7fd fe4e 	bl	800fe48 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 80121ac:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80121b0:	2100      	movs	r1, #0
 80121b2:	f7fd fe49 	bl	800fe48 <RCC_APB1PeriphResetCmd>
 80121b6:	e03a      	b.n	801222e <SPI_I2S_DeInit+0xba>
  }
  else if (SPIx == SPI3)
 80121b8:	687a      	ldr	r2, [r7, #4]
 80121ba:	4b20      	ldr	r3, [pc, #128]	; (801223c <SPI_I2S_DeInit+0xc8>)
 80121bc:	429a      	cmp	r2, r3
 80121be:	d10a      	bne.n	80121d6 <SPI_I2S_DeInit+0x62>
  {
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 80121c0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80121c4:	2101      	movs	r1, #1
 80121c6:	f7fd fe3f 	bl	800fe48 <RCC_APB1PeriphResetCmd>
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 80121ca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80121ce:	2100      	movs	r1, #0
 80121d0:	f7fd fe3a 	bl	800fe48 <RCC_APB1PeriphResetCmd>
 80121d4:	e02b      	b.n	801222e <SPI_I2S_DeInit+0xba>
  }
  else if (SPIx == SPI4)
 80121d6:	687a      	ldr	r2, [r7, #4]
 80121d8:	4b19      	ldr	r3, [pc, #100]	; (8012240 <SPI_I2S_DeInit+0xcc>)
 80121da:	429a      	cmp	r2, r3
 80121dc:	d10a      	bne.n	80121f4 <SPI_I2S_DeInit+0x80>
  {
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 80121de:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80121e2:	2101      	movs	r1, #1
 80121e4:	f7fd fe4e 	bl	800fe84 <RCC_APB2PeriphResetCmd>
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 80121e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80121ec:	2100      	movs	r1, #0
 80121ee:	f7fd fe49 	bl	800fe84 <RCC_APB2PeriphResetCmd>
 80121f2:	e01c      	b.n	801222e <SPI_I2S_DeInit+0xba>
  }
  else if (SPIx == SPI5)
 80121f4:	687a      	ldr	r2, [r7, #4]
 80121f6:	4b13      	ldr	r3, [pc, #76]	; (8012244 <SPI_I2S_DeInit+0xd0>)
 80121f8:	429a      	cmp	r2, r3
 80121fa:	d10a      	bne.n	8012212 <SPI_I2S_DeInit+0x9e>
  {
    /* Enable SPI5 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 80121fc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8012200:	2101      	movs	r1, #1
 8012202:	f7fd fe3f 	bl	800fe84 <RCC_APB2PeriphResetCmd>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 8012206:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 801220a:	2100      	movs	r1, #0
 801220c:	f7fd fe3a 	bl	800fe84 <RCC_APB2PeriphResetCmd>
 8012210:	e00d      	b.n	801222e <SPI_I2S_DeInit+0xba>
  }
  else 
  {
    if (SPIx == SPI6)
 8012212:	687a      	ldr	r2, [r7, #4]
 8012214:	4b0c      	ldr	r3, [pc, #48]	; (8012248 <SPI_I2S_DeInit+0xd4>)
 8012216:	429a      	cmp	r2, r3
 8012218:	d109      	bne.n	801222e <SPI_I2S_DeInit+0xba>
    {
      /* Enable SPI6 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 801221a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 801221e:	2101      	movs	r1, #1
 8012220:	f7fd fe30 	bl	800fe84 <RCC_APB2PeriphResetCmd>
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 8012224:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8012228:	2100      	movs	r1, #0
 801222a:	f7fd fe2b 	bl	800fe84 <RCC_APB2PeriphResetCmd>
    }
  }
}
 801222e:	3708      	adds	r7, #8
 8012230:	46bd      	mov	sp, r7
 8012232:	bd80      	pop	{r7, pc}
 8012234:	40013000 	.word	0x40013000
 8012238:	40003800 	.word	0x40003800
 801223c:	40003c00 	.word	0x40003c00
 8012240:	40013400 	.word	0x40013400
 8012244:	40015000 	.word	0x40015000
 8012248:	40015400 	.word	0x40015400

0801224c <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 801224c:	b480      	push	{r7}
 801224e:	b085      	sub	sp, #20
 8012250:	af00      	add	r7, sp, #0
 8012252:	6078      	str	r0, [r7, #4]
 8012254:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8012256:	2300      	movs	r3, #0
 8012258:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	881b      	ldrh	r3, [r3, #0]
 801225e:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8012260:	89fb      	ldrh	r3, [r7, #14]
 8012262:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8012266:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8012268:	683b      	ldr	r3, [r7, #0]
 801226a:	881a      	ldrh	r2, [r3, #0]
 801226c:	683b      	ldr	r3, [r7, #0]
 801226e:	885b      	ldrh	r3, [r3, #2]
 8012270:	4313      	orrs	r3, r2
 8012272:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8012274:	683b      	ldr	r3, [r7, #0]
 8012276:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8012278:	4313      	orrs	r3, r2
 801227a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 801227c:	683b      	ldr	r3, [r7, #0]
 801227e:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8012280:	4313      	orrs	r3, r2
 8012282:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8012284:	683b      	ldr	r3, [r7, #0]
 8012286:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8012288:	4313      	orrs	r3, r2
 801228a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 801228c:	683b      	ldr	r3, [r7, #0]
 801228e:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8012290:	4313      	orrs	r3, r2
 8012292:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8012294:	683b      	ldr	r3, [r7, #0]
 8012296:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8012298:	4313      	orrs	r3, r2
 801229a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 801229c:	683b      	ldr	r3, [r7, #0]
 801229e:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80122a0:	4313      	orrs	r3, r2
 80122a2:	b29a      	uxth	r2, r3
 80122a4:	89fb      	ldrh	r3, [r7, #14]
 80122a6:	4313      	orrs	r3, r2
 80122a8:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	89fa      	ldrh	r2, [r7, #14]
 80122ae:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	8b9b      	ldrh	r3, [r3, #28]
 80122b4:	b29b      	uxth	r3, r3
 80122b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80122ba:	b29a      	uxth	r2, r3
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80122c0:	683b      	ldr	r3, [r7, #0]
 80122c2:	8a1a      	ldrh	r2, [r3, #16]
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	821a      	strh	r2, [r3, #16]
}
 80122c8:	3714      	adds	r7, #20
 80122ca:	46bd      	mov	sp, r7
 80122cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d0:	4770      	bx	lr
 80122d2:	bf00      	nop

080122d4 <I2S_Init>:
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 80122d4:	b480      	push	{r7}
 80122d6:	b08b      	sub	sp, #44	; 0x2c
 80122d8:	af00      	add	r7, sp, #0
 80122da:	6078      	str	r0, [r7, #4]
 80122dc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 80122de:	2300      	movs	r3, #0
 80122e0:	837b      	strh	r3, [r7, #26]
 80122e2:	2302      	movs	r3, #2
 80122e4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80122e6:	2300      	movs	r3, #0
 80122e8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80122ea:	2301      	movs	r3, #1
 80122ec:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t tmp = 0, i2sclk = 0;
 80122ee:	2300      	movs	r3, #0
 80122f0:	61fb      	str	r3, [r7, #28]
 80122f2:	2300      	movs	r3, #0
 80122f4:	617b      	str	r3, [r7, #20]
#ifndef I2S_EXTERNAL_CLOCK_VAL
  uint32_t pllm = 0, plln = 0, pllr = 0;
 80122f6:	2300      	movs	r3, #0
 80122f8:	613b      	str	r3, [r7, #16]
 80122fa:	2300      	movs	r3, #0
 80122fc:	60fb      	str	r3, [r7, #12]
 80122fe:	2300      	movs	r3, #0
 8012300:	60bb      	str	r3, [r7, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	8b9b      	ldrh	r3, [r3, #28]
 8012306:	b29b      	uxth	r3, r3
 8012308:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 801230c:	f023 030f 	bic.w	r3, r3, #15
 8012310:	b29a      	uxth	r2, r3
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	839a      	strh	r2, [r3, #28]
  SPIx->I2SPR = 0x0002;
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	2202      	movs	r2, #2
 801231a:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	8b9b      	ldrh	r3, [r3, #28]
 8012320:	837b      	strh	r3, [r7, #26]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8012322:	683b      	ldr	r3, [r7, #0]
 8012324:	689b      	ldr	r3, [r3, #8]
 8012326:	2b02      	cmp	r3, #2
 8012328:	d104      	bne.n	8012334 <I2S_Init+0x60>
  {
    i2sodd = (uint16_t)0;
 801232a:	2300      	movs	r3, #0
 801232c:	84bb      	strh	r3, [r7, #36]	; 0x24
    i2sdiv = (uint16_t)2;   
 801232e:	2302      	movs	r3, #2
 8012330:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012332:	e071      	b.n	8012418 <I2S_Init+0x144>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8012334:	683b      	ldr	r3, [r7, #0]
 8012336:	889b      	ldrh	r3, [r3, #4]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d102      	bne.n	8012342 <I2S_Init+0x6e>
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 801233c:	2301      	movs	r3, #1
 801233e:	847b      	strh	r3, [r7, #34]	; 0x22
 8012340:	e001      	b.n	8012346 <I2S_Init+0x72>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 8012342:	2302      	movs	r3, #2
 8012344:	847b      	strh	r3, [r7, #34]	; 0x22
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8012346:	4b4c      	ldr	r3, [pc, #304]	; (8012478 <I2S_Init+0x1a4>)
 8012348:	689b      	ldr	r3, [r3, #8]
 801234a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801234e:	2b00      	cmp	r3, #0
 8012350:	d005      	beq.n	801235e <I2S_Init+0x8a>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 8012352:	4b49      	ldr	r3, [pc, #292]	; (8012478 <I2S_Init+0x1a4>)
 8012354:	4a48      	ldr	r2, [pc, #288]	; (8012478 <I2S_Init+0x1a4>)
 8012356:	6892      	ldr	r2, [r2, #8]
 8012358:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 801235c:	609a      	str	r2, [r3, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 801235e:	4b46      	ldr	r3, [pc, #280]	; (8012478 <I2S_Init+0x1a4>)
 8012360:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8012364:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8012368:	4013      	ands	r3, r2
 801236a:	099b      	lsrs	r3, r3, #6
 801236c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012370:	60fb      	str	r3, [r7, #12]
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8012372:	4b41      	ldr	r3, [pc, #260]	; (8012478 <I2S_Init+0x1a4>)
 8012374:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012378:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 801237c:	0f1b      	lsrs	r3, r3, #28
 801237e:	f003 0307 	and.w	r3, r3, #7
 8012382:	60bb      	str	r3, [r7, #8]
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8012384:	4b3c      	ldr	r3, [pc, #240]	; (8012478 <I2S_Init+0x1a4>)
 8012386:	685b      	ldr	r3, [r3, #4]
 8012388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801238c:	613b      	str	r3, [r7, #16]

    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 801238e:	4a3b      	ldr	r2, [pc, #236]	; (801247c <I2S_Init+0x1a8>)
 8012390:	693b      	ldr	r3, [r7, #16]
 8012392:	fbb2 f3f3 	udiv	r3, r2, r3
 8012396:	68fa      	ldr	r2, [r7, #12]
 8012398:	fb02 f203 	mul.w	r2, r2, r3
 801239c:	68bb      	ldr	r3, [r7, #8]
 801239e:	fbb2 f3f3 	udiv	r3, r2, r3
 80123a2:	617b      	str	r3, [r7, #20]
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 80123a4:	683b      	ldr	r3, [r7, #0]
 80123a6:	88db      	ldrh	r3, [r3, #6]
 80123a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80123ac:	d10f      	bne.n	80123ce <I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 80123ae:	697b      	ldr	r3, [r7, #20]
 80123b0:	0a1a      	lsrs	r2, r3, #8
 80123b2:	4613      	mov	r3, r2
 80123b4:	009b      	lsls	r3, r3, #2
 80123b6:	4413      	add	r3, r2
 80123b8:	005b      	lsls	r3, r3, #1
 80123ba:	461a      	mov	r2, r3
 80123bc:	683b      	ldr	r3, [r7, #0]
 80123be:	689b      	ldr	r3, [r3, #8]
 80123c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80123c4:	b29b      	uxth	r3, r3
 80123c6:	3305      	adds	r3, #5
 80123c8:	b29b      	uxth	r3, r3
 80123ca:	61fb      	str	r3, [r7, #28]
 80123cc:	e011      	b.n	80123f2 <I2S_Init+0x11e>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 80123ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80123d0:	015b      	lsls	r3, r3, #5
 80123d2:	697a      	ldr	r2, [r7, #20]
 80123d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80123d8:	4613      	mov	r3, r2
 80123da:	009b      	lsls	r3, r3, #2
 80123dc:	4413      	add	r3, r2
 80123de:	005b      	lsls	r3, r3, #1
 80123e0:	461a      	mov	r2, r3
 80123e2:	683b      	ldr	r3, [r7, #0]
 80123e4:	689b      	ldr	r3, [r3, #8]
 80123e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80123ea:	b29b      	uxth	r3, r3
 80123ec:	3305      	adds	r3, #5
 80123ee:	b29b      	uxth	r3, r3
 80123f0:	61fb      	str	r3, [r7, #28]
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 80123f2:	69fa      	ldr	r2, [r7, #28]
 80123f4:	4b22      	ldr	r3, [pc, #136]	; (8012480 <I2S_Init+0x1ac>)
 80123f6:	fba3 1302 	umull	r1, r3, r3, r2
 80123fa:	08db      	lsrs	r3, r3, #3
 80123fc:	61fb      	str	r3, [r7, #28]
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 80123fe:	69fb      	ldr	r3, [r7, #28]
 8012400:	b29b      	uxth	r3, r3
 8012402:	f003 0301 	and.w	r3, r3, #1
 8012406:	84bb      	strh	r3, [r7, #36]	; 0x24
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8012408:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801240a:	69fa      	ldr	r2, [r7, #28]
 801240c:	1ad3      	subs	r3, r2, r3
 801240e:	085b      	lsrs	r3, r3, #1
 8012410:	84fb      	strh	r3, [r7, #38]	; 0x26
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8012412:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012414:	021b      	lsls	r3, r3, #8
 8012416:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8012418:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801241a:	2b01      	cmp	r3, #1
 801241c:	d902      	bls.n	8012424 <I2S_Init+0x150>
 801241e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012420:	2bff      	cmp	r3, #255	; 0xff
 8012422:	d903      	bls.n	801242c <I2S_Init+0x158>
  {
    /* Set the default values */
    i2sdiv = 2;
 8012424:	2302      	movs	r3, #2
 8012426:	84fb      	strh	r3, [r7, #38]	; 0x26
    i2sodd = 0;
 8012428:	2300      	movs	r3, #0
 801242a:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 801242c:	683b      	ldr	r3, [r7, #0]
 801242e:	88da      	ldrh	r2, [r3, #6]
 8012430:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012432:	4313      	orrs	r3, r2
 8012434:	b29a      	uxth	r2, r3
 8012436:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012438:	4313      	orrs	r3, r2
 801243a:	b29a      	uxth	r2, r3
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	841a      	strh	r2, [r3, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8012440:	683b      	ldr	r3, [r7, #0]
 8012442:	881a      	ldrh	r2, [r3, #0]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8012444:	683b      	ldr	r3, [r7, #0]
 8012446:	8859      	ldrh	r1, [r3, #2]
 8012448:	683b      	ldr	r3, [r7, #0]
 801244a:	8898      	ldrh	r0, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 801244c:	683b      	ldr	r3, [r7, #0]
 801244e:	899b      	ldrh	r3, [r3, #12]
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8012450:	4303      	orrs	r3, r0
 8012452:	b29b      	uxth	r3, r3
 8012454:	430b      	orrs	r3, r1
 8012456:	b29b      	uxth	r3, r3

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8012458:	4313      	orrs	r3, r2
 801245a:	b29a      	uxth	r2, r3
 801245c:	8b7b      	ldrh	r3, [r7, #26]
 801245e:	4313      	orrs	r3, r2
 8012460:	b29b      	uxth	r3, r3
 8012462:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012466:	837b      	strh	r3, [r7, #26]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	8b7a      	ldrh	r2, [r7, #26]
 801246c:	839a      	strh	r2, [r3, #28]
}
 801246e:	372c      	adds	r7, #44	; 0x2c
 8012470:	46bd      	mov	sp, r7
 8012472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012476:	4770      	bx	lr
 8012478:	40023800 	.word	0x40023800
 801247c:	007a1200 	.word	0x007a1200
 8012480:	cccccccd 	.word	0xcccccccd

08012484 <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 8012484:	b480      	push	{r7}
 8012486:	b083      	sub	sp, #12
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	2200      	movs	r2, #0
 8012490:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	2200      	movs	r2, #0
 8012496:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	2200      	movs	r2, #0
 801249c:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	2200      	movs	r2, #0
 80124a2:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	2200      	movs	r2, #0
 80124a8:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	2200      	movs	r2, #0
 80124ae:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	2200      	movs	r2, #0
 80124b4:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	2200      	movs	r2, #0
 80124ba:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	2207      	movs	r2, #7
 80124c0:	821a      	strh	r2, [r3, #16]
}
 80124c2:	370c      	adds	r7, #12
 80124c4:	46bd      	mov	sp, r7
 80124c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ca:	4770      	bx	lr

080124cc <I2S_StructInit>:
  * @brief  Fills each I2S_InitStruct member with its default value.
  * @param  I2S_InitStruct: pointer to a I2S_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
 80124cc:	b480      	push	{r7}
 80124ce:	b083      	sub	sp, #12
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	6078      	str	r0, [r7, #4]
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	2200      	movs	r2, #0
 80124d8:	801a      	strh	r2, [r3, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	2200      	movs	r2, #0
 80124de:	805a      	strh	r2, [r3, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	2200      	movs	r2, #0
 80124e4:	809a      	strh	r2, [r3, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	2200      	movs	r2, #0
 80124ea:	80da      	strh	r2, [r3, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	2202      	movs	r2, #2
 80124f0:	609a      	str	r2, [r3, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	2200      	movs	r2, #0
 80124f6:	819a      	strh	r2, [r3, #12]
}
 80124f8:	370c      	adds	r7, #12
 80124fa:	46bd      	mov	sp, r7
 80124fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012500:	4770      	bx	lr
 8012502:	bf00      	nop

08012504 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8012504:	b480      	push	{r7}
 8012506:	b083      	sub	sp, #12
 8012508:	af00      	add	r7, sp, #0
 801250a:	6078      	str	r0, [r7, #4]
 801250c:	460b      	mov	r3, r1
 801250e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8012510:	78fb      	ldrb	r3, [r7, #3]
 8012512:	2b00      	cmp	r3, #0
 8012514:	d008      	beq.n	8012528 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	881b      	ldrh	r3, [r3, #0]
 801251a:	b29b      	uxth	r3, r3
 801251c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012520:	b29a      	uxth	r2, r3
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	801a      	strh	r2, [r3, #0]
 8012526:	e007      	b.n	8012538 <SPI_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	881b      	ldrh	r3, [r3, #0]
 801252c:	b29b      	uxth	r3, r3
 801252e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012532:	b29a      	uxth	r2, r3
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	801a      	strh	r2, [r3, #0]
  }
}
 8012538:	370c      	adds	r7, #12
 801253a:	46bd      	mov	sp, r7
 801253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012540:	4770      	bx	lr
 8012542:	bf00      	nop

08012544 <I2S_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8012544:	b480      	push	{r7}
 8012546:	b083      	sub	sp, #12
 8012548:	af00      	add	r7, sp, #0
 801254a:	6078      	str	r0, [r7, #4]
 801254c:	460b      	mov	r3, r1
 801254e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8012550:	78fb      	ldrb	r3, [r7, #3]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d008      	beq.n	8012568 <I2S_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	8b9b      	ldrh	r3, [r3, #28]
 801255a:	b29b      	uxth	r3, r3
 801255c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8012560:	b29a      	uxth	r2, r3
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	839a      	strh	r2, [r3, #28]
 8012566:	e007      	b.n	8012578 <I2S_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	8b9b      	ldrh	r3, [r3, #28]
 801256c:	b29b      	uxth	r3, r3
 801256e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012572:	b29a      	uxth	r2, r3
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	839a      	strh	r2, [r3, #28]
  }
}
 8012578:	370c      	adds	r7, #12
 801257a:	46bd      	mov	sp, r7
 801257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012580:	4770      	bx	lr
 8012582:	bf00      	nop

08012584 <SPI_DataSizeConfig>:
  *            @arg SPI_DataSize_16b: Set data frame format to 16bit
  *            @arg SPI_DataSize_8b: Set data frame format to 8bit
  * @retval None
  */
void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
{
 8012584:	b480      	push	{r7}
 8012586:	b083      	sub	sp, #12
 8012588:	af00      	add	r7, sp, #0
 801258a:	6078      	str	r0, [r7, #4]
 801258c:	460b      	mov	r3, r1
 801258e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	881b      	ldrh	r3, [r3, #0]
 8012594:	b29b      	uxth	r3, r3
 8012596:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801259a:	b29a      	uxth	r2, r3
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	801a      	strh	r2, [r3, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	881b      	ldrh	r3, [r3, #0]
 80125a4:	b29a      	uxth	r2, r3
 80125a6:	887b      	ldrh	r3, [r7, #2]
 80125a8:	4313      	orrs	r3, r2
 80125aa:	b29a      	uxth	r2, r3
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	801a      	strh	r2, [r3, #0]
}
 80125b0:	370c      	adds	r7, #12
 80125b2:	46bd      	mov	sp, r7
 80125b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b8:	4770      	bx	lr
 80125ba:	bf00      	nop

080125bc <SPI_BiDirectionalLineConfig>:
  *            @arg SPI_Direction_Tx: Selects Tx transmission direction
  *            @arg SPI_Direction_Rx: Selects Rx receive direction
  * @retval None
  */
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
 80125bc:	b480      	push	{r7}
 80125be:	b083      	sub	sp, #12
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	6078      	str	r0, [r7, #4]
 80125c4:	460b      	mov	r3, r1
 80125c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 80125c8:	887b      	ldrh	r3, [r7, #2]
 80125ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80125ce:	d108      	bne.n	80125e2 <SPI_BiDirectionalLineConfig+0x26>
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	881b      	ldrh	r3, [r3, #0]
 80125d4:	b29b      	uxth	r3, r3
 80125d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80125da:	b29a      	uxth	r2, r3
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	801a      	strh	r2, [r3, #0]
 80125e0:	e007      	b.n	80125f2 <SPI_BiDirectionalLineConfig+0x36>
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	881b      	ldrh	r3, [r3, #0]
 80125e6:	b29b      	uxth	r3, r3
 80125e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80125ec:	b29a      	uxth	r2, r3
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	801a      	strh	r2, [r3, #0]
  }
}
 80125f2:	370c      	adds	r7, #12
 80125f4:	46bd      	mov	sp, r7
 80125f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125fa:	4770      	bx	lr

080125fc <SPI_NSSInternalSoftwareConfig>:
  *            @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
  *            @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
  * @retval None
  */
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
 80125fc:	b480      	push	{r7}
 80125fe:	b083      	sub	sp, #12
 8012600:	af00      	add	r7, sp, #0
 8012602:	6078      	str	r0, [r7, #4]
 8012604:	460b      	mov	r3, r1
 8012606:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8012608:	887a      	ldrh	r2, [r7, #2]
 801260a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801260e:	429a      	cmp	r2, r3
 8012610:	d008      	beq.n	8012624 <SPI_NSSInternalSoftwareConfig+0x28>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	881b      	ldrh	r3, [r3, #0]
 8012616:	b29b      	uxth	r3, r3
 8012618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801261c:	b29a      	uxth	r2, r3
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	801a      	strh	r2, [r3, #0]
 8012622:	e007      	b.n	8012634 <SPI_NSSInternalSoftwareConfig+0x38>
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	881b      	ldrh	r3, [r3, #0]
 8012628:	b29b      	uxth	r3, r3
 801262a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801262e:	b29a      	uxth	r2, r3
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	801a      	strh	r2, [r3, #0]
  }
}
 8012634:	370c      	adds	r7, #12
 8012636:	46bd      	mov	sp, r7
 8012638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801263c:	4770      	bx	lr
 801263e:	bf00      	nop

08012640 <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8012640:	b480      	push	{r7}
 8012642:	b083      	sub	sp, #12
 8012644:	af00      	add	r7, sp, #0
 8012646:	6078      	str	r0, [r7, #4]
 8012648:	460b      	mov	r3, r1
 801264a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 801264c:	78fb      	ldrb	r3, [r7, #3]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d008      	beq.n	8012664 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	889b      	ldrh	r3, [r3, #4]
 8012656:	b29b      	uxth	r3, r3
 8012658:	f043 0304 	orr.w	r3, r3, #4
 801265c:	b29a      	uxth	r2, r3
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	809a      	strh	r2, [r3, #4]
 8012662:	e007      	b.n	8012674 <SPI_SSOutputCmd+0x34>
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	889b      	ldrh	r3, [r3, #4]
 8012668:	b29b      	uxth	r3, r3
 801266a:	f023 0304 	bic.w	r3, r3, #4
 801266e:	b29a      	uxth	r2, r3
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	809a      	strh	r2, [r3, #4]
  }
}
 8012674:	370c      	adds	r7, #12
 8012676:	46bd      	mov	sp, r7
 8012678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801267c:	4770      	bx	lr
 801267e:	bf00      	nop

08012680 <SPI_TIModeCmd>:
  * @param  NewState: new state of the selected SPI TI communication mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8012680:	b480      	push	{r7}
 8012682:	b083      	sub	sp, #12
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
 8012688:	460b      	mov	r3, r1
 801268a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801268c:	78fb      	ldrb	r3, [r7, #3]
 801268e:	2b00      	cmp	r3, #0
 8012690:	d008      	beq.n	80126a4 <SPI_TIModeCmd+0x24>
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	889b      	ldrh	r3, [r3, #4]
 8012696:	b29b      	uxth	r3, r3
 8012698:	f043 0310 	orr.w	r3, r3, #16
 801269c:	b29a      	uxth	r2, r3
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	809a      	strh	r2, [r3, #4]
 80126a2:	e007      	b.n	80126b4 <SPI_TIModeCmd+0x34>
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	889b      	ldrh	r3, [r3, #4]
 80126a8:	b29b      	uxth	r3, r3
 80126aa:	f023 0310 	bic.w	r3, r3, #16
 80126ae:	b29a      	uxth	r2, r3
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	809a      	strh	r2, [r3, #4]
  }
}
 80126b4:	370c      	adds	r7, #12
 80126b6:	46bd      	mov	sp, r7
 80126b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126bc:	4770      	bx	lr
 80126be:	bf00      	nop

080126c0 <I2S_FullDuplexConfig>:
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 80126c0:	b480      	push	{r7}
 80126c2:	b085      	sub	sp, #20
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	6078      	str	r0, [r7, #4]
 80126c8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, tmp = 0;
 80126ca:	2300      	movs	r3, #0
 80126cc:	81bb      	strh	r3, [r7, #12]
 80126ce:	2300      	movs	r3, #0
 80126d0:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	8b9b      	ldrh	r3, [r3, #28]
 80126d6:	b29b      	uxth	r3, r3
 80126d8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80126dc:	f023 030f 	bic.w	r3, r3, #15
 80126e0:	b29a      	uxth	r2, r3
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	839a      	strh	r2, [r3, #28]
  I2Sxext->I2SPR = 0x0002;
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	2202      	movs	r2, #2
 80126ea:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	8b9b      	ldrh	r3, [r3, #28]
 80126f0:	81bb      	strh	r3, [r7, #12]
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 80126f2:	683b      	ldr	r3, [r7, #0]
 80126f4:	881b      	ldrh	r3, [r3, #0]
 80126f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80126fa:	d003      	beq.n	8012704 <I2S_FullDuplexConfig+0x44>
 80126fc:	683b      	ldr	r3, [r7, #0]
 80126fe:	881b      	ldrh	r3, [r3, #0]
 8012700:	2b00      	cmp	r3, #0
 8012702:	d103      	bne.n	801270c <I2S_FullDuplexConfig+0x4c>
  {
    tmp = I2S_Mode_SlaveRx;
 8012704:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012708:	81fb      	strh	r3, [r7, #14]
 801270a:	e00b      	b.n	8012724 <I2S_FullDuplexConfig+0x64>
  }
  else
  {
    if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveRx))
 801270c:	683b      	ldr	r3, [r7, #0]
 801270e:	881b      	ldrh	r3, [r3, #0]
 8012710:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012714:	d004      	beq.n	8012720 <I2S_FullDuplexConfig+0x60>
 8012716:	683b      	ldr	r3, [r7, #0]
 8012718:	881b      	ldrh	r3, [r3, #0]
 801271a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801271e:	d101      	bne.n	8012724 <I2S_FullDuplexConfig+0x64>
    {
      tmp = I2S_Mode_SlaveTx;
 8012720:	2300      	movs	r3, #0
 8012722:	81fb      	strh	r3, [r7, #14]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8012724:	683b      	ldr	r3, [r7, #0]
 8012726:	885a      	ldrh	r2, [r3, #2]
 8012728:	683b      	ldr	r3, [r7, #0]
 801272a:	8899      	ldrh	r1, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 801272c:	683b      	ldr	r3, [r7, #0]
 801272e:	899b      	ldrh	r3, [r3, #12]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8012730:	430b      	orrs	r3, r1
 8012732:	b29b      	uxth	r3, r3
 8012734:	4313      	orrs	r3, r2
 8012736:	b29a      	uxth	r2, r3
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8012738:	89fb      	ldrh	r3, [r7, #14]
 801273a:	4313      	orrs	r3, r2
 801273c:	b29a      	uxth	r2, r3
 801273e:	89bb      	ldrh	r3, [r7, #12]
 8012740:	4313      	orrs	r3, r2
 8012742:	b29b      	uxth	r3, r3
 8012744:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012748:	81bb      	strh	r3, [r7, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	89ba      	ldrh	r2, [r7, #12]
 801274e:	839a      	strh	r2, [r3, #28]
}
 8012750:	3714      	adds	r7, #20
 8012752:	46bd      	mov	sp, r7
 8012754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012758:	4770      	bx	lr
 801275a:	bf00      	nop

0801275c <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 801275c:	b480      	push	{r7}
 801275e:	b083      	sub	sp, #12
 8012760:	af00      	add	r7, sp, #0
 8012762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	899b      	ldrh	r3, [r3, #12]
 8012768:	b29b      	uxth	r3, r3
}
 801276a:	4618      	mov	r0, r3
 801276c:	370c      	adds	r7, #12
 801276e:	46bd      	mov	sp, r7
 8012770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012774:	4770      	bx	lr
 8012776:	bf00      	nop

08012778 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8012778:	b480      	push	{r7}
 801277a:	b083      	sub	sp, #12
 801277c:	af00      	add	r7, sp, #0
 801277e:	6078      	str	r0, [r7, #4]
 8012780:	460b      	mov	r3, r1
 8012782:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	887a      	ldrh	r2, [r7, #2]
 8012788:	819a      	strh	r2, [r3, #12]
}
 801278a:	370c      	adds	r7, #12
 801278c:	46bd      	mov	sp, r7
 801278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012792:	4770      	bx	lr

08012794 <SPI_CalculateCRC>:
  * @param  NewState: new state of the SPIx CRC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8012794:	b480      	push	{r7}
 8012796:	b083      	sub	sp, #12
 8012798:	af00      	add	r7, sp, #0
 801279a:	6078      	str	r0, [r7, #4]
 801279c:	460b      	mov	r3, r1
 801279e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80127a0:	78fb      	ldrb	r3, [r7, #3]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d008      	beq.n	80127b8 <SPI_CalculateCRC+0x24>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	881b      	ldrh	r3, [r3, #0]
 80127aa:	b29b      	uxth	r3, r3
 80127ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80127b0:	b29a      	uxth	r2, r3
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	801a      	strh	r2, [r3, #0]
 80127b6:	e007      	b.n	80127c8 <SPI_CalculateCRC+0x34>
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	881b      	ldrh	r3, [r3, #0]
 80127bc:	b29b      	uxth	r3, r3
 80127be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80127c2:	b29a      	uxth	r2, r3
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	801a      	strh	r2, [r3, #0]
  }
}
 80127c8:	370c      	adds	r7, #12
 80127ca:	46bd      	mov	sp, r7
 80127cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d0:	4770      	bx	lr
 80127d2:	bf00      	nop

080127d4 <SPI_TransmitCRC>:
  * @brief  Transmit the SPIx CRC value.
  * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
  * @retval None
  */
void SPI_TransmitCRC(SPI_TypeDef* SPIx)
{
 80127d4:	b480      	push	{r7}
 80127d6:	b083      	sub	sp, #12
 80127d8:	af00      	add	r7, sp, #0
 80127da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	881b      	ldrh	r3, [r3, #0]
 80127e0:	b29b      	uxth	r3, r3
 80127e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80127e6:	b29a      	uxth	r2, r3
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	801a      	strh	r2, [r3, #0]
}
 80127ec:	370c      	adds	r7, #12
 80127ee:	46bd      	mov	sp, r7
 80127f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f4:	4770      	bx	lr
 80127f6:	bf00      	nop

080127f8 <SPI_GetCRC>:
  *            @arg SPI_CRC_Tx: Selects Tx CRC register
  *            @arg SPI_CRC_Rx: Selects Rx CRC register
  * @retval The selected CRC register value..
  */
uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
{
 80127f8:	b480      	push	{r7}
 80127fa:	b085      	sub	sp, #20
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	6078      	str	r0, [r7, #4]
 8012800:	460b      	mov	r3, r1
 8012802:	70fb      	strb	r3, [r7, #3]
  uint16_t crcreg = 0;
 8012804:	2300      	movs	r3, #0
 8012806:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 8012808:	78fb      	ldrb	r3, [r7, #3]
 801280a:	2b01      	cmp	r3, #1
 801280c:	d003      	beq.n	8012816 <SPI_GetCRC+0x1e>
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	8b1b      	ldrh	r3, [r3, #24]
 8012812:	81fb      	strh	r3, [r7, #14]
 8012814:	e002      	b.n	801281c <SPI_GetCRC+0x24>
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	8a9b      	ldrh	r3, [r3, #20]
 801281a:	81fb      	strh	r3, [r7, #14]
  }
  /* Return the selected CRC register */
  return crcreg;
 801281c:	89fb      	ldrh	r3, [r7, #14]
}
 801281e:	4618      	mov	r0, r3
 8012820:	3714      	adds	r7, #20
 8012822:	46bd      	mov	sp, r7
 8012824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012828:	4770      	bx	lr
 801282a:	bf00      	nop

0801282c <SPI_GetCRCPolynomial>:
  * @brief  Returns the CRC Polynomial register value for the specified SPI.
  * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
  * @retval The CRC Polynomial register value.
  */
uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
{
 801282c:	b480      	push	{r7}
 801282e:	b083      	sub	sp, #12
 8012830:	af00      	add	r7, sp, #0
 8012832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	8a1b      	ldrh	r3, [r3, #16]
 8012838:	b29b      	uxth	r3, r3
}
 801283a:	4618      	mov	r0, r3
 801283c:	370c      	adds	r7, #12
 801283e:	46bd      	mov	sp, r7
 8012840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012844:	4770      	bx	lr
 8012846:	bf00      	nop

08012848 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 8012848:	b480      	push	{r7}
 801284a:	b083      	sub	sp, #12
 801284c:	af00      	add	r7, sp, #0
 801284e:	6078      	str	r0, [r7, #4]
 8012850:	4613      	mov	r3, r2
 8012852:	460a      	mov	r2, r1
 8012854:	807a      	strh	r2, [r7, #2]
 8012856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8012858:	787b      	ldrb	r3, [r7, #1]
 801285a:	2b00      	cmp	r3, #0
 801285c:	d008      	beq.n	8012870 <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	889b      	ldrh	r3, [r3, #4]
 8012862:	b29a      	uxth	r2, r3
 8012864:	887b      	ldrh	r3, [r7, #2]
 8012866:	4313      	orrs	r3, r2
 8012868:	b29a      	uxth	r2, r3
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	809a      	strh	r2, [r3, #4]
 801286e:	e009      	b.n	8012884 <SPI_I2S_DMACmd+0x3c>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	889b      	ldrh	r3, [r3, #4]
 8012874:	b29a      	uxth	r2, r3
 8012876:	887b      	ldrh	r3, [r7, #2]
 8012878:	43db      	mvns	r3, r3
 801287a:	b29b      	uxth	r3, r3
 801287c:	4013      	ands	r3, r2
 801287e:	b29a      	uxth	r2, r3
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	809a      	strh	r2, [r3, #4]
  }
}
 8012884:	370c      	adds	r7, #12
 8012886:	46bd      	mov	sp, r7
 8012888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801288c:	4770      	bx	lr
 801288e:	bf00      	nop

08012890 <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 8012890:	b480      	push	{r7}
 8012892:	b085      	sub	sp, #20
 8012894:	af00      	add	r7, sp, #0
 8012896:	6078      	str	r0, [r7, #4]
 8012898:	4613      	mov	r3, r2
 801289a:	460a      	mov	r2, r1
 801289c:	70fa      	strb	r2, [r7, #3]
 801289e:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 80128a0:	2300      	movs	r3, #0
 80128a2:	81fb      	strh	r3, [r7, #14]
 80128a4:	2300      	movs	r3, #0
 80128a6:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;
 80128a8:	78fb      	ldrb	r3, [r7, #3]
 80128aa:	091b      	lsrs	r3, r3, #4
 80128ac:	b2db      	uxtb	r3, r3
 80128ae:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 80128b0:	89fb      	ldrh	r3, [r7, #14]
 80128b2:	2201      	movs	r2, #1
 80128b4:	fa02 f303 	lsl.w	r3, r2, r3
 80128b8:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 80128ba:	78bb      	ldrb	r3, [r7, #2]
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d008      	beq.n	80128d2 <SPI_I2S_ITConfig+0x42>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	889b      	ldrh	r3, [r3, #4]
 80128c4:	b29a      	uxth	r2, r3
 80128c6:	89bb      	ldrh	r3, [r7, #12]
 80128c8:	4313      	orrs	r3, r2
 80128ca:	b29a      	uxth	r2, r3
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	809a      	strh	r2, [r3, #4]
 80128d0:	e009      	b.n	80128e6 <SPI_I2S_ITConfig+0x56>
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	889b      	ldrh	r3, [r3, #4]
 80128d6:	b29a      	uxth	r2, r3
 80128d8:	89bb      	ldrh	r3, [r7, #12]
 80128da:	43db      	mvns	r3, r3
 80128dc:	b29b      	uxth	r3, r3
 80128de:	4013      	ands	r3, r2
 80128e0:	b29a      	uxth	r2, r3
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	809a      	strh	r2, [r3, #4]
  }
}
 80128e6:	3714      	adds	r7, #20
 80128e8:	46bd      	mov	sp, r7
 80128ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ee:	4770      	bx	lr

080128f0 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80128f0:	b480      	push	{r7}
 80128f2:	b085      	sub	sp, #20
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	6078      	str	r0, [r7, #4]
 80128f8:	460b      	mov	r3, r1
 80128fa:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80128fc:	2300      	movs	r3, #0
 80128fe:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	891b      	ldrh	r3, [r3, #8]
 8012904:	b29a      	uxth	r2, r3
 8012906:	887b      	ldrh	r3, [r7, #2]
 8012908:	4013      	ands	r3, r2
 801290a:	b29b      	uxth	r3, r3
 801290c:	2b00      	cmp	r3, #0
 801290e:	d002      	beq.n	8012916 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8012910:	2301      	movs	r3, #1
 8012912:	73fb      	strb	r3, [r7, #15]
 8012914:	e001      	b.n	801291a <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8012916:	2300      	movs	r3, #0
 8012918:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 801291a:	7bfb      	ldrb	r3, [r7, #15]
}
 801291c:	4618      	mov	r0, r3
 801291e:	3714      	adds	r7, #20
 8012920:	46bd      	mov	sp, r7
 8012922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012926:	4770      	bx	lr

08012928 <SPI_I2S_ClearFlag>:
  *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
  *  
  * @retval None
  */
void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8012928:	b480      	push	{r7}
 801292a:	b083      	sub	sp, #12
 801292c:	af00      	add	r7, sp, #0
 801292e:	6078      	str	r0, [r7, #4]
 8012930:	460b      	mov	r3, r1
 8012932:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 8012934:	887b      	ldrh	r3, [r7, #2]
 8012936:	43db      	mvns	r3, r3
 8012938:	b29a      	uxth	r2, r3
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	811a      	strh	r2, [r3, #8]
}
 801293e:	370c      	adds	r7, #12
 8012940:	46bd      	mov	sp, r7
 8012942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012946:	4770      	bx	lr

08012948 <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8012948:	b480      	push	{r7}
 801294a:	b085      	sub	sp, #20
 801294c:	af00      	add	r7, sp, #0
 801294e:	6078      	str	r0, [r7, #4]
 8012950:	460b      	mov	r3, r1
 8012952:	70fb      	strb	r3, [r7, #3]
  ITStatus bitstatus = RESET;
 8012954:	2300      	movs	r3, #0
 8012956:	73fb      	strb	r3, [r7, #15]
  uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 8012958:	2300      	movs	r3, #0
 801295a:	81bb      	strh	r3, [r7, #12]
 801295c:	2300      	movs	r3, #0
 801295e:	817b      	strh	r3, [r7, #10]
 8012960:	2300      	movs	r3, #0
 8012962:	813b      	strh	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8012964:	78fb      	ldrb	r3, [r7, #3]
 8012966:	f003 030f 	and.w	r3, r3, #15
 801296a:	2201      	movs	r2, #1
 801296c:	fa02 f303 	lsl.w	r3, r2, r3
 8012970:	81bb      	strh	r3, [r7, #12]

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;
 8012972:	78fb      	ldrb	r3, [r7, #3]
 8012974:	091b      	lsrs	r3, r3, #4
 8012976:	b2db      	uxtb	r3, r3
 8012978:	817b      	strh	r3, [r7, #10]

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 801297a:	897b      	ldrh	r3, [r7, #10]
 801297c:	2201      	movs	r2, #1
 801297e:	fa02 f303 	lsl.w	r3, r2, r3
 8012982:	817b      	strh	r3, [r7, #10]

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	889b      	ldrh	r3, [r3, #4]
 8012988:	b29a      	uxth	r2, r3
 801298a:	897b      	ldrh	r3, [r7, #10]
 801298c:	4013      	ands	r3, r2
 801298e:	813b      	strh	r3, [r7, #8]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	891b      	ldrh	r3, [r3, #8]
 8012994:	b29a      	uxth	r2, r3
 8012996:	89bb      	ldrh	r3, [r7, #12]
 8012998:	4013      	ands	r3, r2
 801299a:	b29b      	uxth	r3, r3
 801299c:	2b00      	cmp	r3, #0
 801299e:	d005      	beq.n	80129ac <SPI_I2S_GetITStatus+0x64>
 80129a0:	893b      	ldrh	r3, [r7, #8]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d002      	beq.n	80129ac <SPI_I2S_GetITStatus+0x64>
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 80129a6:	2301      	movs	r3, #1
 80129a8:	73fb      	strb	r3, [r7, #15]
 80129aa:	e001      	b.n	80129b0 <SPI_I2S_GetITStatus+0x68>
  }
  else
  {
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
 80129ac:	2300      	movs	r3, #0
 80129ae:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
 80129b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80129b2:	4618      	mov	r0, r3
 80129b4:	3714      	adds	r7, #20
 80129b6:	46bd      	mov	sp, r7
 80129b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129bc:	4770      	bx	lr
 80129be:	bf00      	nop

080129c0 <SPI_I2S_ClearITPendingBit>:
  *          followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable 
  *          the SPI).
  * @retval None
  */
void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 80129c0:	b480      	push	{r7}
 80129c2:	b085      	sub	sp, #20
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	6078      	str	r0, [r7, #4]
 80129c8:	460b      	mov	r3, r1
 80129ca:	70fb      	strb	r3, [r7, #3]
  uint16_t itpos = 0;
 80129cc:	2300      	movs	r3, #0
 80129ce:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 80129d0:	78fb      	ldrb	r3, [r7, #3]
 80129d2:	f003 030f 	and.w	r3, r3, #15
 80129d6:	2201      	movs	r2, #1
 80129d8:	fa02 f303 	lsl.w	r3, r2, r3
 80129dc:	81fb      	strh	r3, [r7, #14]

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 80129de:	89fb      	ldrh	r3, [r7, #14]
 80129e0:	43db      	mvns	r3, r3
 80129e2:	b29a      	uxth	r2, r3
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	811a      	strh	r2, [r3, #8]
}
 80129e8:	3714      	adds	r7, #20
 80129ea:	46bd      	mov	sp, r7
 80129ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f0:	4770      	bx	lr
 80129f2:	bf00      	nop

080129f4 <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 80129f4:	b580      	push	{r7, lr}
 80129f6:	af00      	add	r7, sp, #0
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80129f8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80129fc:	2101      	movs	r1, #1
 80129fe:	f7fd fa41 	bl	800fe84 <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 8012a02:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8012a06:	2100      	movs	r1, #0
 8012a08:	f7fd fa3c 	bl	800fe84 <RCC_APB2PeriphResetCmd>
}
 8012a0c:	bd80      	pop	{r7, pc}
 8012a0e:	bf00      	nop

08012a10 <SYSCFG_MemoryRemapConfig>:
  *            @arg SYSCFG_MemoryRemap_SRAM:        Embedded SRAM (112kB) mapped at 0x00000000
  *            @arg SYSCFG_MemoryRemap_SDRAM:       FMC (External SDRAM)  mapped at 0x00000000 for STM32F42xxx/43xxx devices.            
  * @retval None
  */
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
 8012a10:	b480      	push	{r7}
 8012a12:	b083      	sub	sp, #12
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	4603      	mov	r3, r0
 8012a18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 8012a1a:	4b04      	ldr	r3, [pc, #16]	; (8012a2c <SYSCFG_MemoryRemapConfig+0x1c>)
 8012a1c:	79fa      	ldrb	r2, [r7, #7]
 8012a1e:	601a      	str	r2, [r3, #0]
}
 8012a20:	370c      	adds	r7, #12
 8012a22:	46bd      	mov	sp, r7
 8012a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a28:	4770      	bx	lr
 8012a2a:	bf00      	nop
 8012a2c:	40013800 	.word	0x40013800

08012a30 <SYSCFG_MemorySwappingBank>:
  *            @arg DISABLE:(the default state) Flash Bank1 mapped at 0x08000000 (and aliased @0x0000 0000) 
                            and Flash Bank2 mapped at 0x08100000 (and aliased at 0x00100000)  
  * @retval None
  */
void SYSCFG_MemorySwappingBank(FunctionalState NewState)
{
 8012a30:	b480      	push	{r7}
 8012a32:	b083      	sub	sp, #12
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	4603      	mov	r3, r0
 8012a38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) UFB_MODE_BB = (uint32_t)NewState;
 8012a3a:	4b04      	ldr	r3, [pc, #16]	; (8012a4c <SYSCFG_MemorySwappingBank+0x1c>)
 8012a3c:	79fa      	ldrb	r2, [r7, #7]
 8012a3e:	601a      	str	r2, [r3, #0]
}
 8012a40:	370c      	adds	r7, #12
 8012a42:	46bd      	mov	sp, r7
 8012a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a48:	4770      	bx	lr
 8012a4a:	bf00      	nop
 8012a4c:	42270020 	.word	0x42270020

08012a50 <SYSCFG_EXTILineConfig>:
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8012a50:	b490      	push	{r4, r7}
 8012a52:	b084      	sub	sp, #16
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	4602      	mov	r2, r0
 8012a58:	460b      	mov	r3, r1
 8012a5a:	71fa      	strb	r2, [r7, #7]
 8012a5c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8012a5e:	2300      	movs	r3, #0
 8012a60:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8012a62:	79bb      	ldrb	r3, [r7, #6]
 8012a64:	f003 0303 	and.w	r3, r3, #3
 8012a68:	009b      	lsls	r3, r3, #2
 8012a6a:	220f      	movs	r2, #15
 8012a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8012a70:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8012a72:	4b15      	ldr	r3, [pc, #84]	; (8012ac8 <SYSCFG_EXTILineConfig+0x78>)
 8012a74:	79ba      	ldrb	r2, [r7, #6]
 8012a76:	0892      	lsrs	r2, r2, #2
 8012a78:	b2d2      	uxtb	r2, r2
 8012a7a:	4913      	ldr	r1, [pc, #76]	; (8012ac8 <SYSCFG_EXTILineConfig+0x78>)
 8012a7c:	79b8      	ldrb	r0, [r7, #6]
 8012a7e:	0880      	lsrs	r0, r0, #2
 8012a80:	b2c0      	uxtb	r0, r0
 8012a82:	3002      	adds	r0, #2
 8012a84:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8012a88:	68f9      	ldr	r1, [r7, #12]
 8012a8a:	43c9      	mvns	r1, r1
 8012a8c:	4001      	ands	r1, r0
 8012a8e:	3202      	adds	r2, #2
 8012a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8012a94:	4b0c      	ldr	r3, [pc, #48]	; (8012ac8 <SYSCFG_EXTILineConfig+0x78>)
 8012a96:	79ba      	ldrb	r2, [r7, #6]
 8012a98:	0892      	lsrs	r2, r2, #2
 8012a9a:	b2d2      	uxtb	r2, r2
 8012a9c:	490a      	ldr	r1, [pc, #40]	; (8012ac8 <SYSCFG_EXTILineConfig+0x78>)
 8012a9e:	79b8      	ldrb	r0, [r7, #6]
 8012aa0:	0880      	lsrs	r0, r0, #2
 8012aa2:	b2c0      	uxtb	r0, r0
 8012aa4:	3002      	adds	r0, #2
 8012aa6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8012aaa:	79fc      	ldrb	r4, [r7, #7]
 8012aac:	79b9      	ldrb	r1, [r7, #6]
 8012aae:	f001 0103 	and.w	r1, r1, #3
 8012ab2:	0089      	lsls	r1, r1, #2
 8012ab4:	fa04 f101 	lsl.w	r1, r4, r1
 8012ab8:	4301      	orrs	r1, r0
 8012aba:	3202      	adds	r2, #2
 8012abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8012ac0:	3710      	adds	r7, #16
 8012ac2:	46bd      	mov	sp, r7
 8012ac4:	bc90      	pop	{r4, r7}
 8012ac6:	4770      	bx	lr
 8012ac8:	40013800 	.word	0x40013800

08012acc <SYSCFG_ETH_MediaInterfaceConfig>:
  *            @arg SYSCFG_ETH_MediaInterface_MII: MII mode selected
  *            @arg SYSCFG_ETH_MediaInterface_RMII: RMII mode selected 
  * @retval None 
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
 8012acc:	b480      	push	{r7}
 8012ace:	b083      	sub	sp, #12
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 8012ad4:	4b03      	ldr	r3, [pc, #12]	; (8012ae4 <SYSCFG_ETH_MediaInterfaceConfig+0x18>)
 8012ad6:	687a      	ldr	r2, [r7, #4]
 8012ad8:	601a      	str	r2, [r3, #0]
}
 8012ada:	370c      	adds	r7, #12
 8012adc:	46bd      	mov	sp, r7
 8012ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae2:	4770      	bx	lr
 8012ae4:	422700dc 	.word	0x422700dc

08012ae8 <SYSCFG_CompensationCellCmd>:
  *            @arg ENABLE: I/O compensation cell enabled  
  *            @arg DISABLE: I/O compensation cell power-down mode  
  * @retval None
  */
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
 8012ae8:	b480      	push	{r7}
 8012aea:	b083      	sub	sp, #12
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	4603      	mov	r3, r0
 8012af0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 8012af2:	4b04      	ldr	r3, [pc, #16]	; (8012b04 <SYSCFG_CompensationCellCmd+0x1c>)
 8012af4:	79fa      	ldrb	r2, [r7, #7]
 8012af6:	601a      	str	r2, [r3, #0]
}
 8012af8:	370c      	adds	r7, #12
 8012afa:	46bd      	mov	sp, r7
 8012afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b00:	4770      	bx	lr
 8012b02:	bf00      	nop
 8012b04:	42270400 	.word	0x42270400

08012b08 <SYSCFG_GetCompensationCellStatus>:
  * @brief  Checks whether the I/O Compensation Cell ready flag is set or not.
  * @param  None
  * @retval The new state of the I/O Compensation Cell ready flag (SET or RESET)
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
 8012b08:	b480      	push	{r7}
 8012b0a:	b083      	sub	sp, #12
 8012b0c:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 8012b0e:	2300      	movs	r3, #0
 8012b10:	71fb      	strb	r3, [r7, #7]
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 8012b12:	4b09      	ldr	r3, [pc, #36]	; (8012b38 <SYSCFG_GetCompensationCellStatus+0x30>)
 8012b14:	6a1b      	ldr	r3, [r3, #32]
 8012b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d002      	beq.n	8012b24 <SYSCFG_GetCompensationCellStatus+0x1c>
  {
    bitstatus = SET;
 8012b1e:	2301      	movs	r3, #1
 8012b20:	71fb      	strb	r3, [r7, #7]
 8012b22:	e001      	b.n	8012b28 <SYSCFG_GetCompensationCellStatus+0x20>
  }
  else
  {
    bitstatus = RESET;
 8012b24:	2300      	movs	r3, #0
 8012b26:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 8012b28:	79fb      	ldrb	r3, [r7, #7]
}
 8012b2a:	4618      	mov	r0, r3
 8012b2c:	370c      	adds	r7, #12
 8012b2e:	46bd      	mov	sp, r7
 8012b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b34:	4770      	bx	lr
 8012b36:	bf00      	nop
 8012b38:	40013800 	.word	0x40013800

08012b3c <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8012b3c:	b580      	push	{r7, lr}
 8012b3e:	b082      	sub	sp, #8
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8012b44:	687a      	ldr	r2, [r7, #4]
 8012b46:	4b5f      	ldr	r3, [pc, #380]	; (8012cc4 <TIM_DeInit+0x188>)
 8012b48:	429a      	cmp	r2, r3
 8012b4a:	d108      	bne.n	8012b5e <TIM_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8012b4c:	2001      	movs	r0, #1
 8012b4e:	2101      	movs	r1, #1
 8012b50:	f7fd f998 	bl	800fe84 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8012b54:	2001      	movs	r0, #1
 8012b56:	2100      	movs	r1, #0
 8012b58:	f7fd f994 	bl	800fe84 <RCC_APB2PeriphResetCmd>
 8012b5c:	e0af      	b.n	8012cbe <TIM_DeInit+0x182>
  } 
  else if (TIMx == TIM2) 
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012b64:	d108      	bne.n	8012b78 <TIM_DeInit+0x3c>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8012b66:	2001      	movs	r0, #1
 8012b68:	2101      	movs	r1, #1
 8012b6a:	f7fd f96d 	bl	800fe48 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8012b6e:	2001      	movs	r0, #1
 8012b70:	2100      	movs	r1, #0
 8012b72:	f7fd f969 	bl	800fe48 <RCC_APB1PeriphResetCmd>
 8012b76:	e0a2      	b.n	8012cbe <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM3)
 8012b78:	687a      	ldr	r2, [r7, #4]
 8012b7a:	4b53      	ldr	r3, [pc, #332]	; (8012cc8 <TIM_DeInit+0x18c>)
 8012b7c:	429a      	cmp	r2, r3
 8012b7e:	d108      	bne.n	8012b92 <TIM_DeInit+0x56>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8012b80:	2002      	movs	r0, #2
 8012b82:	2101      	movs	r1, #1
 8012b84:	f7fd f960 	bl	800fe48 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8012b88:	2002      	movs	r0, #2
 8012b8a:	2100      	movs	r1, #0
 8012b8c:	f7fd f95c 	bl	800fe48 <RCC_APB1PeriphResetCmd>
 8012b90:	e095      	b.n	8012cbe <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM4)
 8012b92:	687a      	ldr	r2, [r7, #4]
 8012b94:	4b4d      	ldr	r3, [pc, #308]	; (8012ccc <TIM_DeInit+0x190>)
 8012b96:	429a      	cmp	r2, r3
 8012b98:	d108      	bne.n	8012bac <TIM_DeInit+0x70>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8012b9a:	2004      	movs	r0, #4
 8012b9c:	2101      	movs	r1, #1
 8012b9e:	f7fd f953 	bl	800fe48 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8012ba2:	2004      	movs	r0, #4
 8012ba4:	2100      	movs	r1, #0
 8012ba6:	f7fd f94f 	bl	800fe48 <RCC_APB1PeriphResetCmd>
 8012baa:	e088      	b.n	8012cbe <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM5)
 8012bac:	687a      	ldr	r2, [r7, #4]
 8012bae:	4b48      	ldr	r3, [pc, #288]	; (8012cd0 <TIM_DeInit+0x194>)
 8012bb0:	429a      	cmp	r2, r3
 8012bb2:	d108      	bne.n	8012bc6 <TIM_DeInit+0x8a>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8012bb4:	2008      	movs	r0, #8
 8012bb6:	2101      	movs	r1, #1
 8012bb8:	f7fd f946 	bl	800fe48 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8012bbc:	2008      	movs	r0, #8
 8012bbe:	2100      	movs	r1, #0
 8012bc0:	f7fd f942 	bl	800fe48 <RCC_APB1PeriphResetCmd>
 8012bc4:	e07b      	b.n	8012cbe <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM6)  
 8012bc6:	687a      	ldr	r2, [r7, #4]
 8012bc8:	4b42      	ldr	r3, [pc, #264]	; (8012cd4 <TIM_DeInit+0x198>)
 8012bca:	429a      	cmp	r2, r3
 8012bcc:	d108      	bne.n	8012be0 <TIM_DeInit+0xa4>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8012bce:	2010      	movs	r0, #16
 8012bd0:	2101      	movs	r1, #1
 8012bd2:	f7fd f939 	bl	800fe48 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8012bd6:	2010      	movs	r0, #16
 8012bd8:	2100      	movs	r1, #0
 8012bda:	f7fd f935 	bl	800fe48 <RCC_APB1PeriphResetCmd>
 8012bde:	e06e      	b.n	8012cbe <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM7)
 8012be0:	687a      	ldr	r2, [r7, #4]
 8012be2:	4b3d      	ldr	r3, [pc, #244]	; (8012cd8 <TIM_DeInit+0x19c>)
 8012be4:	429a      	cmp	r2, r3
 8012be6:	d108      	bne.n	8012bfa <TIM_DeInit+0xbe>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8012be8:	2020      	movs	r0, #32
 8012bea:	2101      	movs	r1, #1
 8012bec:	f7fd f92c 	bl	800fe48 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8012bf0:	2020      	movs	r0, #32
 8012bf2:	2100      	movs	r1, #0
 8012bf4:	f7fd f928 	bl	800fe48 <RCC_APB1PeriphResetCmd>
 8012bf8:	e061      	b.n	8012cbe <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM8)
 8012bfa:	687a      	ldr	r2, [r7, #4]
 8012bfc:	4b37      	ldr	r3, [pc, #220]	; (8012cdc <TIM_DeInit+0x1a0>)
 8012bfe:	429a      	cmp	r2, r3
 8012c00:	d108      	bne.n	8012c14 <TIM_DeInit+0xd8>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8012c02:	2002      	movs	r0, #2
 8012c04:	2101      	movs	r1, #1
 8012c06:	f7fd f93d 	bl	800fe84 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8012c0a:	2002      	movs	r0, #2
 8012c0c:	2100      	movs	r1, #0
 8012c0e:	f7fd f939 	bl	800fe84 <RCC_APB2PeriphResetCmd>
 8012c12:	e054      	b.n	8012cbe <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM9)
 8012c14:	687a      	ldr	r2, [r7, #4]
 8012c16:	4b32      	ldr	r3, [pc, #200]	; (8012ce0 <TIM_DeInit+0x1a4>)
 8012c18:	429a      	cmp	r2, r3
 8012c1a:	d10a      	bne.n	8012c32 <TIM_DeInit+0xf6>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8012c1c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8012c20:	2101      	movs	r1, #1
 8012c22:	f7fd f92f 	bl	800fe84 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8012c26:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8012c2a:	2100      	movs	r1, #0
 8012c2c:	f7fd f92a 	bl	800fe84 <RCC_APB2PeriphResetCmd>
 8012c30:	e045      	b.n	8012cbe <TIM_DeInit+0x182>
   }  
  else if (TIMx == TIM10)
 8012c32:	687a      	ldr	r2, [r7, #4]
 8012c34:	4b2b      	ldr	r3, [pc, #172]	; (8012ce4 <TIM_DeInit+0x1a8>)
 8012c36:	429a      	cmp	r2, r3
 8012c38:	d10a      	bne.n	8012c50 <TIM_DeInit+0x114>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 8012c3a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8012c3e:	2101      	movs	r1, #1
 8012c40:	f7fd f920 	bl	800fe84 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8012c44:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8012c48:	2100      	movs	r1, #0
 8012c4a:	f7fd f91b 	bl	800fe84 <RCC_APB2PeriphResetCmd>
 8012c4e:	e036      	b.n	8012cbe <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM11) 
 8012c50:	687a      	ldr	r2, [r7, #4]
 8012c52:	4b25      	ldr	r3, [pc, #148]	; (8012ce8 <TIM_DeInit+0x1ac>)
 8012c54:	429a      	cmp	r2, r3
 8012c56:	d10a      	bne.n	8012c6e <TIM_DeInit+0x132>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8012c58:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8012c5c:	2101      	movs	r1, #1
 8012c5e:	f7fd f911 	bl	800fe84 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8012c62:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8012c66:	2100      	movs	r1, #0
 8012c68:	f7fd f90c 	bl	800fe84 <RCC_APB2PeriphResetCmd>
 8012c6c:	e027      	b.n	8012cbe <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM12)
 8012c6e:	687a      	ldr	r2, [r7, #4]
 8012c70:	4b1e      	ldr	r3, [pc, #120]	; (8012cec <TIM_DeInit+0x1b0>)
 8012c72:	429a      	cmp	r2, r3
 8012c74:	d108      	bne.n	8012c88 <TIM_DeInit+0x14c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8012c76:	2040      	movs	r0, #64	; 0x40
 8012c78:	2101      	movs	r1, #1
 8012c7a:	f7fd f8e5 	bl	800fe48 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8012c7e:	2040      	movs	r0, #64	; 0x40
 8012c80:	2100      	movs	r1, #0
 8012c82:	f7fd f8e1 	bl	800fe48 <RCC_APB1PeriphResetCmd>
 8012c86:	e01a      	b.n	8012cbe <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM13) 
 8012c88:	687a      	ldr	r2, [r7, #4]
 8012c8a:	4b19      	ldr	r3, [pc, #100]	; (8012cf0 <TIM_DeInit+0x1b4>)
 8012c8c:	429a      	cmp	r2, r3
 8012c8e:	d108      	bne.n	8012ca2 <TIM_DeInit+0x166>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8012c90:	2080      	movs	r0, #128	; 0x80
 8012c92:	2101      	movs	r1, #1
 8012c94:	f7fd f8d8 	bl	800fe48 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8012c98:	2080      	movs	r0, #128	; 0x80
 8012c9a:	2100      	movs	r1, #0
 8012c9c:	f7fd f8d4 	bl	800fe48 <RCC_APB1PeriphResetCmd>
 8012ca0:	e00d      	b.n	8012cbe <TIM_DeInit+0x182>
  }  
  else
  { 
    if (TIMx == TIM14) 
 8012ca2:	687a      	ldr	r2, [r7, #4]
 8012ca4:	4b13      	ldr	r3, [pc, #76]	; (8012cf4 <TIM_DeInit+0x1b8>)
 8012ca6:	429a      	cmp	r2, r3
 8012ca8:	d109      	bne.n	8012cbe <TIM_DeInit+0x182>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8012caa:	f44f 7080 	mov.w	r0, #256	; 0x100
 8012cae:	2101      	movs	r1, #1
 8012cb0:	f7fd f8ca 	bl	800fe48 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8012cb4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8012cb8:	2100      	movs	r1, #0
 8012cba:	f7fd f8c5 	bl	800fe48 <RCC_APB1PeriphResetCmd>
    }   
  }
}
 8012cbe:	3708      	adds	r7, #8
 8012cc0:	46bd      	mov	sp, r7
 8012cc2:	bd80      	pop	{r7, pc}
 8012cc4:	40010000 	.word	0x40010000
 8012cc8:	40000400 	.word	0x40000400
 8012ccc:	40000800 	.word	0x40000800
 8012cd0:	40000c00 	.word	0x40000c00
 8012cd4:	40001000 	.word	0x40001000
 8012cd8:	40001400 	.word	0x40001400
 8012cdc:	40010400 	.word	0x40010400
 8012ce0:	40014000 	.word	0x40014000
 8012ce4:	40014400 	.word	0x40014400
 8012ce8:	40014800 	.word	0x40014800
 8012cec:	40001800 	.word	0x40001800
 8012cf0:	40001c00 	.word	0x40001c00
 8012cf4:	40002000 	.word	0x40002000

08012cf8 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8012cf8:	b480      	push	{r7}
 8012cfa:	b085      	sub	sp, #20
 8012cfc:	af00      	add	r7, sp, #0
 8012cfe:	6078      	str	r0, [r7, #4]
 8012d00:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8012d02:	2300      	movs	r3, #0
 8012d04:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	881b      	ldrh	r3, [r3, #0]
 8012d0a:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8012d0c:	687a      	ldr	r2, [r7, #4]
 8012d0e:	4b28      	ldr	r3, [pc, #160]	; (8012db0 <TIM_TimeBaseInit+0xb8>)
 8012d10:	429a      	cmp	r2, r3
 8012d12:	d013      	beq.n	8012d3c <TIM_TimeBaseInit+0x44>
 8012d14:	687a      	ldr	r2, [r7, #4]
 8012d16:	4b27      	ldr	r3, [pc, #156]	; (8012db4 <TIM_TimeBaseInit+0xbc>)
 8012d18:	429a      	cmp	r2, r3
 8012d1a:	d00f      	beq.n	8012d3c <TIM_TimeBaseInit+0x44>
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012d22:	d00b      	beq.n	8012d3c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8012d24:	687a      	ldr	r2, [r7, #4]
 8012d26:	4b24      	ldr	r3, [pc, #144]	; (8012db8 <TIM_TimeBaseInit+0xc0>)
 8012d28:	429a      	cmp	r2, r3
 8012d2a:	d007      	beq.n	8012d3c <TIM_TimeBaseInit+0x44>
 8012d2c:	687a      	ldr	r2, [r7, #4]
 8012d2e:	4b23      	ldr	r3, [pc, #140]	; (8012dbc <TIM_TimeBaseInit+0xc4>)
 8012d30:	429a      	cmp	r2, r3
 8012d32:	d003      	beq.n	8012d3c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8012d34:	687a      	ldr	r2, [r7, #4]
 8012d36:	4b22      	ldr	r3, [pc, #136]	; (8012dc0 <TIM_TimeBaseInit+0xc8>)
 8012d38:	429a      	cmp	r2, r3
 8012d3a:	d108      	bne.n	8012d4e <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8012d3c:	89fb      	ldrh	r3, [r7, #14]
 8012d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012d42:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8012d44:	683b      	ldr	r3, [r7, #0]
 8012d46:	885a      	ldrh	r2, [r3, #2]
 8012d48:	89fb      	ldrh	r3, [r7, #14]
 8012d4a:	4313      	orrs	r3, r2
 8012d4c:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8012d4e:	687a      	ldr	r2, [r7, #4]
 8012d50:	4b1c      	ldr	r3, [pc, #112]	; (8012dc4 <TIM_TimeBaseInit+0xcc>)
 8012d52:	429a      	cmp	r2, r3
 8012d54:	d00c      	beq.n	8012d70 <TIM_TimeBaseInit+0x78>
 8012d56:	687a      	ldr	r2, [r7, #4]
 8012d58:	4b1b      	ldr	r3, [pc, #108]	; (8012dc8 <TIM_TimeBaseInit+0xd0>)
 8012d5a:	429a      	cmp	r2, r3
 8012d5c:	d008      	beq.n	8012d70 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8012d5e:	89fb      	ldrh	r3, [r7, #14]
 8012d60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012d64:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8012d66:	683b      	ldr	r3, [r7, #0]
 8012d68:	891a      	ldrh	r2, [r3, #8]
 8012d6a:	89fb      	ldrh	r3, [r7, #14]
 8012d6c:	4313      	orrs	r3, r2
 8012d6e:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	89fa      	ldrh	r2, [r7, #14]
 8012d74:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8012d76:	683b      	ldr	r3, [r7, #0]
 8012d78:	685a      	ldr	r2, [r3, #4]
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8012d7e:	683b      	ldr	r3, [r7, #0]
 8012d80:	881a      	ldrh	r2, [r3, #0]
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8012d86:	687a      	ldr	r2, [r7, #4]
 8012d88:	4b09      	ldr	r3, [pc, #36]	; (8012db0 <TIM_TimeBaseInit+0xb8>)
 8012d8a:	429a      	cmp	r2, r3
 8012d8c:	d003      	beq.n	8012d96 <TIM_TimeBaseInit+0x9e>
 8012d8e:	687a      	ldr	r2, [r7, #4]
 8012d90:	4b08      	ldr	r3, [pc, #32]	; (8012db4 <TIM_TimeBaseInit+0xbc>)
 8012d92:	429a      	cmp	r2, r3
 8012d94:	d104      	bne.n	8012da0 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8012d96:	683b      	ldr	r3, [r7, #0]
 8012d98:	7a9b      	ldrb	r3, [r3, #10]
 8012d9a:	461a      	mov	r2, r3
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	2201      	movs	r2, #1
 8012da4:	829a      	strh	r2, [r3, #20]
}
 8012da6:	3714      	adds	r7, #20
 8012da8:	46bd      	mov	sp, r7
 8012daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dae:	4770      	bx	lr
 8012db0:	40010000 	.word	0x40010000
 8012db4:	40010400 	.word	0x40010400
 8012db8:	40000400 	.word	0x40000400
 8012dbc:	40000800 	.word	0x40000800
 8012dc0:	40000c00 	.word	0x40000c00
 8012dc4:	40001000 	.word	0x40001000
 8012dc8:	40001400 	.word	0x40001400

08012dcc <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8012dcc:	b480      	push	{r7}
 8012dce:	b083      	sub	sp, #12
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012dda:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	2200      	movs	r2, #0
 8012de0:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	2200      	movs	r2, #0
 8012de6:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	2200      	movs	r2, #0
 8012dec:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	2200      	movs	r2, #0
 8012df2:	729a      	strb	r2, [r3, #10]
}
 8012df4:	370c      	adds	r7, #12
 8012df6:	46bd      	mov	sp, r7
 8012df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dfc:	4770      	bx	lr
 8012dfe:	bf00      	nop

08012e00 <TIM_PrescalerConfig>:
  *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 8012e00:	b480      	push	{r7}
 8012e02:	b083      	sub	sp, #12
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	6078      	str	r0, [r7, #4]
 8012e08:	4613      	mov	r3, r2
 8012e0a:	460a      	mov	r2, r1
 8012e0c:	807a      	strh	r2, [r7, #2]
 8012e0e:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	887a      	ldrh	r2, [r7, #2]
 8012e14:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	883a      	ldrh	r2, [r7, #0]
 8012e1a:	829a      	strh	r2, [r3, #20]
}
 8012e1c:	370c      	adds	r7, #12
 8012e1e:	46bd      	mov	sp, r7
 8012e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e24:	4770      	bx	lr
 8012e26:	bf00      	nop

08012e28 <TIM_CounterModeConfig>:
  *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
 8012e28:	b480      	push	{r7}
 8012e2a:	b085      	sub	sp, #20
 8012e2c:	af00      	add	r7, sp, #0
 8012e2e:	6078      	str	r0, [r7, #4]
 8012e30:	460b      	mov	r3, r1
 8012e32:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
 8012e34:	2300      	movs	r3, #0
 8012e36:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	881b      	ldrh	r3, [r3, #0]
 8012e3c:	81fb      	strh	r3, [r7, #14]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012e3e:	89fb      	ldrh	r3, [r7, #14]
 8012e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012e44:	81fb      	strh	r3, [r7, #14]

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 8012e46:	89fa      	ldrh	r2, [r7, #14]
 8012e48:	887b      	ldrh	r3, [r7, #2]
 8012e4a:	4313      	orrs	r3, r2
 8012e4c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	89fa      	ldrh	r2, [r7, #14]
 8012e52:	801a      	strh	r2, [r3, #0]
}
 8012e54:	3714      	adds	r7, #20
 8012e56:	46bd      	mov	sp, r7
 8012e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e5c:	4770      	bx	lr
 8012e5e:	bf00      	nop

08012e60 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 8012e60:	b480      	push	{r7}
 8012e62:	b083      	sub	sp, #12
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	6078      	str	r0, [r7, #4]
 8012e68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	683a      	ldr	r2, [r7, #0]
 8012e6e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8012e70:	370c      	adds	r7, #12
 8012e72:	46bd      	mov	sp, r7
 8012e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e78:	4770      	bx	lr
 8012e7a:	bf00      	nop

08012e7c <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 8012e7c:	b480      	push	{r7}
 8012e7e:	b083      	sub	sp, #12
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	6078      	str	r0, [r7, #4]
 8012e84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	683a      	ldr	r2, [r7, #0]
 8012e8a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8012e8c:	370c      	adds	r7, #12
 8012e8e:	46bd      	mov	sp, r7
 8012e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e94:	4770      	bx	lr
 8012e96:	bf00      	nop

08012e98 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 8012e98:	b480      	push	{r7}
 8012e9a:	b083      	sub	sp, #12
 8012e9c:	af00      	add	r7, sp, #0
 8012e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	370c      	adds	r7, #12
 8012ea8:	46bd      	mov	sp, r7
 8012eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eae:	4770      	bx	lr

08012eb0 <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
 8012eb0:	b480      	push	{r7}
 8012eb2:	b083      	sub	sp, #12
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012ebc:	b29b      	uxth	r3, r3
}
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	370c      	adds	r7, #12
 8012ec2:	46bd      	mov	sp, r7
 8012ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec8:	4770      	bx	lr
 8012eca:	bf00      	nop

08012ecc <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8012ecc:	b480      	push	{r7}
 8012ece:	b083      	sub	sp, #12
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	6078      	str	r0, [r7, #4]
 8012ed4:	460b      	mov	r3, r1
 8012ed6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8012ed8:	78fb      	ldrb	r3, [r7, #3]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d008      	beq.n	8012ef0 <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	881b      	ldrh	r3, [r3, #0]
 8012ee2:	b29b      	uxth	r3, r3
 8012ee4:	f043 0302 	orr.w	r3, r3, #2
 8012ee8:	b29a      	uxth	r2, r3
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	801a      	strh	r2, [r3, #0]
 8012eee:	e007      	b.n	8012f00 <TIM_UpdateDisableConfig+0x34>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	881b      	ldrh	r3, [r3, #0]
 8012ef4:	b29b      	uxth	r3, r3
 8012ef6:	f023 0302 	bic.w	r3, r3, #2
 8012efa:	b29a      	uxth	r2, r3
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	801a      	strh	r2, [r3, #0]
  }
}
 8012f00:	370c      	adds	r7, #12
 8012f02:	46bd      	mov	sp, r7
 8012f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f08:	4770      	bx	lr
 8012f0a:	bf00      	nop

08012f0c <TIM_UpdateRequestConfig>:
  *                 generation through the slave mode controller.
  *            @arg TIM_UpdateSource_Regular: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 8012f0c:	b480      	push	{r7}
 8012f0e:	b083      	sub	sp, #12
 8012f10:	af00      	add	r7, sp, #0
 8012f12:	6078      	str	r0, [r7, #4]
 8012f14:	460b      	mov	r3, r1
 8012f16:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8012f18:	887b      	ldrh	r3, [r7, #2]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d008      	beq.n	8012f30 <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	881b      	ldrh	r3, [r3, #0]
 8012f22:	b29b      	uxth	r3, r3
 8012f24:	f043 0304 	orr.w	r3, r3, #4
 8012f28:	b29a      	uxth	r2, r3
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	801a      	strh	r2, [r3, #0]
 8012f2e:	e007      	b.n	8012f40 <TIM_UpdateRequestConfig+0x34>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	881b      	ldrh	r3, [r3, #0]
 8012f34:	b29b      	uxth	r3, r3
 8012f36:	f023 0304 	bic.w	r3, r3, #4
 8012f3a:	b29a      	uxth	r2, r3
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	801a      	strh	r2, [r3, #0]
  }
}
 8012f40:	370c      	adds	r7, #12
 8012f42:	46bd      	mov	sp, r7
 8012f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f48:	4770      	bx	lr
 8012f4a:	bf00      	nop

08012f4c <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8012f4c:	b480      	push	{r7}
 8012f4e:	b083      	sub	sp, #12
 8012f50:	af00      	add	r7, sp, #0
 8012f52:	6078      	str	r0, [r7, #4]
 8012f54:	460b      	mov	r3, r1
 8012f56:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8012f58:	78fb      	ldrb	r3, [r7, #3]
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d008      	beq.n	8012f70 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	881b      	ldrh	r3, [r3, #0]
 8012f62:	b29b      	uxth	r3, r3
 8012f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012f68:	b29a      	uxth	r2, r3
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	801a      	strh	r2, [r3, #0]
 8012f6e:	e007      	b.n	8012f80 <TIM_ARRPreloadConfig+0x34>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	881b      	ldrh	r3, [r3, #0]
 8012f74:	b29b      	uxth	r3, r3
 8012f76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012f7a:	b29a      	uxth	r2, r3
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	801a      	strh	r2, [r3, #0]
  }
}
 8012f80:	370c      	adds	r7, #12
 8012f82:	46bd      	mov	sp, r7
 8012f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f88:	4770      	bx	lr
 8012f8a:	bf00      	nop

08012f8c <TIM_SelectOnePulseMode>:
  *            @arg TIM_OPMode_Single
  *            @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
 8012f8c:	b480      	push	{r7}
 8012f8e:	b083      	sub	sp, #12
 8012f90:	af00      	add	r7, sp, #0
 8012f92:	6078      	str	r0, [r7, #4]
 8012f94:	460b      	mov	r3, r1
 8012f96:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	881b      	ldrh	r3, [r3, #0]
 8012f9c:	b29b      	uxth	r3, r3
 8012f9e:	f023 0308 	bic.w	r3, r3, #8
 8012fa2:	b29a      	uxth	r2, r3
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	801a      	strh	r2, [r3, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	881b      	ldrh	r3, [r3, #0]
 8012fac:	b29a      	uxth	r2, r3
 8012fae:	887b      	ldrh	r3, [r7, #2]
 8012fb0:	4313      	orrs	r3, r2
 8012fb2:	b29a      	uxth	r2, r3
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	801a      	strh	r2, [r3, #0]
}
 8012fb8:	370c      	adds	r7, #12
 8012fba:	46bd      	mov	sp, r7
 8012fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc0:	4770      	bx	lr
 8012fc2:	bf00      	nop

08012fc4 <TIM_SetClockDivision>:
  *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
 8012fc4:	b480      	push	{r7}
 8012fc6:	b083      	sub	sp, #12
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	6078      	str	r0, [r7, #4]
 8012fcc:	460b      	mov	r3, r1
 8012fce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	881b      	ldrh	r3, [r3, #0]
 8012fd4:	b29b      	uxth	r3, r3
 8012fd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012fda:	b29a      	uxth	r2, r3
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	801a      	strh	r2, [r3, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	881b      	ldrh	r3, [r3, #0]
 8012fe4:	b29a      	uxth	r2, r3
 8012fe6:	887b      	ldrh	r3, [r7, #2]
 8012fe8:	4313      	orrs	r3, r2
 8012fea:	b29a      	uxth	r2, r3
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	801a      	strh	r2, [r3, #0]
}
 8012ff0:	370c      	adds	r7, #12
 8012ff2:	46bd      	mov	sp, r7
 8012ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff8:	4770      	bx	lr
 8012ffa:	bf00      	nop

08012ffc <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8012ffc:	b480      	push	{r7}
 8012ffe:	b083      	sub	sp, #12
 8013000:	af00      	add	r7, sp, #0
 8013002:	6078      	str	r0, [r7, #4]
 8013004:	460b      	mov	r3, r1
 8013006:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8013008:	78fb      	ldrb	r3, [r7, #3]
 801300a:	2b00      	cmp	r3, #0
 801300c:	d008      	beq.n	8013020 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	881b      	ldrh	r3, [r3, #0]
 8013012:	b29b      	uxth	r3, r3
 8013014:	f043 0301 	orr.w	r3, r3, #1
 8013018:	b29a      	uxth	r2, r3
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	801a      	strh	r2, [r3, #0]
 801301e:	e007      	b.n	8013030 <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	881b      	ldrh	r3, [r3, #0]
 8013024:	b29b      	uxth	r3, r3
 8013026:	f023 0301 	bic.w	r3, r3, #1
 801302a:	b29a      	uxth	r2, r3
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	801a      	strh	r2, [r3, #0]
  }
}
 8013030:	370c      	adds	r7, #12
 8013032:	46bd      	mov	sp, r7
 8013034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013038:	4770      	bx	lr
 801303a:	bf00      	nop

0801303c <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 801303c:	b480      	push	{r7}
 801303e:	b085      	sub	sp, #20
 8013040:	af00      	add	r7, sp, #0
 8013042:	6078      	str	r0, [r7, #4]
 8013044:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8013046:	2300      	movs	r3, #0
 8013048:	817b      	strh	r3, [r7, #10]
 801304a:	2300      	movs	r3, #0
 801304c:	81fb      	strh	r3, [r7, #14]
 801304e:	2300      	movs	r3, #0
 8013050:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	8c1b      	ldrh	r3, [r3, #32]
 8013056:	b29b      	uxth	r3, r3
 8013058:	f023 0301 	bic.w	r3, r3, #1
 801305c:	b29a      	uxth	r2, r3
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	8c1b      	ldrh	r3, [r3, #32]
 8013066:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	889b      	ldrh	r3, [r3, #4]
 801306c:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	8b1b      	ldrh	r3, [r3, #24]
 8013072:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 8013074:	897b      	ldrh	r3, [r7, #10]
 8013076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801307a:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 801307c:	897b      	ldrh	r3, [r7, #10]
 801307e:	f023 0303 	bic.w	r3, r3, #3
 8013082:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8013084:	683b      	ldr	r3, [r7, #0]
 8013086:	881a      	ldrh	r2, [r3, #0]
 8013088:	897b      	ldrh	r3, [r7, #10]
 801308a:	4313      	orrs	r3, r2
 801308c:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 801308e:	89fb      	ldrh	r3, [r7, #14]
 8013090:	f023 0302 	bic.w	r3, r3, #2
 8013094:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8013096:	683b      	ldr	r3, [r7, #0]
 8013098:	899a      	ldrh	r2, [r3, #12]
 801309a:	89fb      	ldrh	r3, [r7, #14]
 801309c:	4313      	orrs	r3, r2
 801309e:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80130a0:	683b      	ldr	r3, [r7, #0]
 80130a2:	885a      	ldrh	r2, [r3, #2]
 80130a4:	89fb      	ldrh	r3, [r7, #14]
 80130a6:	4313      	orrs	r3, r2
 80130a8:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80130aa:	687a      	ldr	r2, [r7, #4]
 80130ac:	4b1e      	ldr	r3, [pc, #120]	; (8013128 <TIM_OC1Init+0xec>)
 80130ae:	429a      	cmp	r2, r3
 80130b0:	d003      	beq.n	80130ba <TIM_OC1Init+0x7e>
 80130b2:	687a      	ldr	r2, [r7, #4]
 80130b4:	4b1d      	ldr	r3, [pc, #116]	; (801312c <TIM_OC1Init+0xf0>)
 80130b6:	429a      	cmp	r2, r3
 80130b8:	d123      	bne.n	8013102 <TIM_OC1Init+0xc6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 80130ba:	89fb      	ldrh	r3, [r7, #14]
 80130bc:	f023 0308 	bic.w	r3, r3, #8
 80130c0:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80130c2:	683b      	ldr	r3, [r7, #0]
 80130c4:	89da      	ldrh	r2, [r3, #14]
 80130c6:	89fb      	ldrh	r3, [r7, #14]
 80130c8:	4313      	orrs	r3, r2
 80130ca:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 80130cc:	89fb      	ldrh	r3, [r7, #14]
 80130ce:	f023 0304 	bic.w	r3, r3, #4
 80130d2:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80130d4:	683b      	ldr	r3, [r7, #0]
 80130d6:	889a      	ldrh	r2, [r3, #4]
 80130d8:	89fb      	ldrh	r3, [r7, #14]
 80130da:	4313      	orrs	r3, r2
 80130dc:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 80130de:	89bb      	ldrh	r3, [r7, #12]
 80130e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80130e4:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 80130e6:	89bb      	ldrh	r3, [r7, #12]
 80130e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80130ec:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80130ee:	683b      	ldr	r3, [r7, #0]
 80130f0:	8a1a      	ldrh	r2, [r3, #16]
 80130f2:	89bb      	ldrh	r3, [r7, #12]
 80130f4:	4313      	orrs	r3, r2
 80130f6:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80130f8:	683b      	ldr	r3, [r7, #0]
 80130fa:	8a5a      	ldrh	r2, [r3, #18]
 80130fc:	89bb      	ldrh	r3, [r7, #12]
 80130fe:	4313      	orrs	r3, r2
 8013100:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	89ba      	ldrh	r2, [r7, #12]
 8013106:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	897a      	ldrh	r2, [r7, #10]
 801310c:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 801310e:	683b      	ldr	r3, [r7, #0]
 8013110:	689a      	ldr	r2, [r3, #8]
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	89fa      	ldrh	r2, [r7, #14]
 801311a:	841a      	strh	r2, [r3, #32]
}
 801311c:	3714      	adds	r7, #20
 801311e:	46bd      	mov	sp, r7
 8013120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013124:	4770      	bx	lr
 8013126:	bf00      	nop
 8013128:	40010000 	.word	0x40010000
 801312c:	40010400 	.word	0x40010400

08013130 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8013130:	b480      	push	{r7}
 8013132:	b085      	sub	sp, #20
 8013134:	af00      	add	r7, sp, #0
 8013136:	6078      	str	r0, [r7, #4]
 8013138:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 801313a:	2300      	movs	r3, #0
 801313c:	817b      	strh	r3, [r7, #10]
 801313e:	2300      	movs	r3, #0
 8013140:	81fb      	strh	r3, [r7, #14]
 8013142:	2300      	movs	r3, #0
 8013144:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	8c1b      	ldrh	r3, [r3, #32]
 801314a:	b29b      	uxth	r3, r3
 801314c:	f023 0310 	bic.w	r3, r3, #16
 8013150:	b29a      	uxth	r2, r3
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	8c1b      	ldrh	r3, [r3, #32]
 801315a:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	889b      	ldrh	r3, [r3, #4]
 8013160:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	8b1b      	ldrh	r3, [r3, #24]
 8013166:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 8013168:	897b      	ldrh	r3, [r7, #10]
 801316a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801316e:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 8013170:	897b      	ldrh	r3, [r7, #10]
 8013172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013176:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8013178:	683b      	ldr	r3, [r7, #0]
 801317a:	881b      	ldrh	r3, [r3, #0]
 801317c:	021b      	lsls	r3, r3, #8
 801317e:	b29a      	uxth	r2, r3
 8013180:	897b      	ldrh	r3, [r7, #10]
 8013182:	4313      	orrs	r3, r2
 8013184:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8013186:	89fb      	ldrh	r3, [r7, #14]
 8013188:	f023 0320 	bic.w	r3, r3, #32
 801318c:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 801318e:	683b      	ldr	r3, [r7, #0]
 8013190:	899b      	ldrh	r3, [r3, #12]
 8013192:	011b      	lsls	r3, r3, #4
 8013194:	b29a      	uxth	r2, r3
 8013196:	89fb      	ldrh	r3, [r7, #14]
 8013198:	4313      	orrs	r3, r2
 801319a:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 801319c:	683b      	ldr	r3, [r7, #0]
 801319e:	885b      	ldrh	r3, [r3, #2]
 80131a0:	011b      	lsls	r3, r3, #4
 80131a2:	b29a      	uxth	r2, r3
 80131a4:	89fb      	ldrh	r3, [r7, #14]
 80131a6:	4313      	orrs	r3, r2
 80131a8:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80131aa:	687a      	ldr	r2, [r7, #4]
 80131ac:	4b22      	ldr	r3, [pc, #136]	; (8013238 <TIM_OC2Init+0x108>)
 80131ae:	429a      	cmp	r2, r3
 80131b0:	d003      	beq.n	80131ba <TIM_OC2Init+0x8a>
 80131b2:	687a      	ldr	r2, [r7, #4]
 80131b4:	4b21      	ldr	r3, [pc, #132]	; (801323c <TIM_OC2Init+0x10c>)
 80131b6:	429a      	cmp	r2, r3
 80131b8:	d12b      	bne.n	8013212 <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 80131ba:	89fb      	ldrh	r3, [r7, #14]
 80131bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80131c0:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80131c2:	683b      	ldr	r3, [r7, #0]
 80131c4:	89db      	ldrh	r3, [r3, #14]
 80131c6:	011b      	lsls	r3, r3, #4
 80131c8:	b29a      	uxth	r2, r3
 80131ca:	89fb      	ldrh	r3, [r7, #14]
 80131cc:	4313      	orrs	r3, r2
 80131ce:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 80131d0:	89fb      	ldrh	r3, [r7, #14]
 80131d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80131d6:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80131d8:	683b      	ldr	r3, [r7, #0]
 80131da:	889b      	ldrh	r3, [r3, #4]
 80131dc:	011b      	lsls	r3, r3, #4
 80131de:	b29a      	uxth	r2, r3
 80131e0:	89fb      	ldrh	r3, [r7, #14]
 80131e2:	4313      	orrs	r3, r2
 80131e4:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 80131e6:	89bb      	ldrh	r3, [r7, #12]
 80131e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80131ec:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 80131ee:	89bb      	ldrh	r3, [r7, #12]
 80131f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80131f4:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80131f6:	683b      	ldr	r3, [r7, #0]
 80131f8:	8a1b      	ldrh	r3, [r3, #16]
 80131fa:	009b      	lsls	r3, r3, #2
 80131fc:	b29a      	uxth	r2, r3
 80131fe:	89bb      	ldrh	r3, [r7, #12]
 8013200:	4313      	orrs	r3, r2
 8013202:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8013204:	683b      	ldr	r3, [r7, #0]
 8013206:	8a5b      	ldrh	r3, [r3, #18]
 8013208:	009b      	lsls	r3, r3, #2
 801320a:	b29a      	uxth	r2, r3
 801320c:	89bb      	ldrh	r3, [r7, #12]
 801320e:	4313      	orrs	r3, r2
 8013210:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	89ba      	ldrh	r2, [r7, #12]
 8013216:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	897a      	ldrh	r2, [r7, #10]
 801321c:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 801321e:	683b      	ldr	r3, [r7, #0]
 8013220:	689a      	ldr	r2, [r3, #8]
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	89fa      	ldrh	r2, [r7, #14]
 801322a:	841a      	strh	r2, [r3, #32]
}
 801322c:	3714      	adds	r7, #20
 801322e:	46bd      	mov	sp, r7
 8013230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013234:	4770      	bx	lr
 8013236:	bf00      	nop
 8013238:	40010000 	.word	0x40010000
 801323c:	40010400 	.word	0x40010400

08013240 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8013240:	b480      	push	{r7}
 8013242:	b085      	sub	sp, #20
 8013244:	af00      	add	r7, sp, #0
 8013246:	6078      	str	r0, [r7, #4]
 8013248:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 801324a:	2300      	movs	r3, #0
 801324c:	817b      	strh	r3, [r7, #10]
 801324e:	2300      	movs	r3, #0
 8013250:	81fb      	strh	r3, [r7, #14]
 8013252:	2300      	movs	r3, #0
 8013254:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	8c1b      	ldrh	r3, [r3, #32]
 801325a:	b29b      	uxth	r3, r3
 801325c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013260:	b29a      	uxth	r2, r3
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	8c1b      	ldrh	r3, [r3, #32]
 801326a:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	889b      	ldrh	r3, [r3, #4]
 8013270:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	8b9b      	ldrh	r3, [r3, #28]
 8013276:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 8013278:	897b      	ldrh	r3, [r7, #10]
 801327a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801327e:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8013280:	897b      	ldrh	r3, [r7, #10]
 8013282:	f023 0303 	bic.w	r3, r3, #3
 8013286:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8013288:	683b      	ldr	r3, [r7, #0]
 801328a:	881a      	ldrh	r2, [r3, #0]
 801328c:	897b      	ldrh	r3, [r7, #10]
 801328e:	4313      	orrs	r3, r2
 8013290:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8013292:	89fb      	ldrh	r3, [r7, #14]
 8013294:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013298:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 801329a:	683b      	ldr	r3, [r7, #0]
 801329c:	899b      	ldrh	r3, [r3, #12]
 801329e:	021b      	lsls	r3, r3, #8
 80132a0:	b29a      	uxth	r2, r3
 80132a2:	89fb      	ldrh	r3, [r7, #14]
 80132a4:	4313      	orrs	r3, r2
 80132a6:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80132a8:	683b      	ldr	r3, [r7, #0]
 80132aa:	885b      	ldrh	r3, [r3, #2]
 80132ac:	021b      	lsls	r3, r3, #8
 80132ae:	b29a      	uxth	r2, r3
 80132b0:	89fb      	ldrh	r3, [r7, #14]
 80132b2:	4313      	orrs	r3, r2
 80132b4:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80132b6:	687a      	ldr	r2, [r7, #4]
 80132b8:	4b22      	ldr	r3, [pc, #136]	; (8013344 <TIM_OC3Init+0x104>)
 80132ba:	429a      	cmp	r2, r3
 80132bc:	d003      	beq.n	80132c6 <TIM_OC3Init+0x86>
 80132be:	687a      	ldr	r2, [r7, #4]
 80132c0:	4b21      	ldr	r3, [pc, #132]	; (8013348 <TIM_OC3Init+0x108>)
 80132c2:	429a      	cmp	r2, r3
 80132c4:	d12b      	bne.n	801331e <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 80132c6:	89fb      	ldrh	r3, [r7, #14]
 80132c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80132cc:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80132ce:	683b      	ldr	r3, [r7, #0]
 80132d0:	89db      	ldrh	r3, [r3, #14]
 80132d2:	021b      	lsls	r3, r3, #8
 80132d4:	b29a      	uxth	r2, r3
 80132d6:	89fb      	ldrh	r3, [r7, #14]
 80132d8:	4313      	orrs	r3, r2
 80132da:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 80132dc:	89fb      	ldrh	r3, [r7, #14]
 80132de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80132e2:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80132e4:	683b      	ldr	r3, [r7, #0]
 80132e6:	889b      	ldrh	r3, [r3, #4]
 80132e8:	021b      	lsls	r3, r3, #8
 80132ea:	b29a      	uxth	r2, r3
 80132ec:	89fb      	ldrh	r3, [r7, #14]
 80132ee:	4313      	orrs	r3, r2
 80132f0:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 80132f2:	89bb      	ldrh	r3, [r7, #12]
 80132f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80132f8:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 80132fa:	89bb      	ldrh	r3, [r7, #12]
 80132fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013300:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8013302:	683b      	ldr	r3, [r7, #0]
 8013304:	8a1b      	ldrh	r3, [r3, #16]
 8013306:	011b      	lsls	r3, r3, #4
 8013308:	b29a      	uxth	r2, r3
 801330a:	89bb      	ldrh	r3, [r7, #12]
 801330c:	4313      	orrs	r3, r2
 801330e:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8013310:	683b      	ldr	r3, [r7, #0]
 8013312:	8a5b      	ldrh	r3, [r3, #18]
 8013314:	011b      	lsls	r3, r3, #4
 8013316:	b29a      	uxth	r2, r3
 8013318:	89bb      	ldrh	r3, [r7, #12]
 801331a:	4313      	orrs	r3, r2
 801331c:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	89ba      	ldrh	r2, [r7, #12]
 8013322:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	897a      	ldrh	r2, [r7, #10]
 8013328:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 801332a:	683b      	ldr	r3, [r7, #0]
 801332c:	689a      	ldr	r2, [r3, #8]
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	89fa      	ldrh	r2, [r7, #14]
 8013336:	841a      	strh	r2, [r3, #32]
}
 8013338:	3714      	adds	r7, #20
 801333a:	46bd      	mov	sp, r7
 801333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013340:	4770      	bx	lr
 8013342:	bf00      	nop
 8013344:	40010000 	.word	0x40010000
 8013348:	40010400 	.word	0x40010400

0801334c <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 801334c:	b480      	push	{r7}
 801334e:	b085      	sub	sp, #20
 8013350:	af00      	add	r7, sp, #0
 8013352:	6078      	str	r0, [r7, #4]
 8013354:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8013356:	2300      	movs	r3, #0
 8013358:	81bb      	strh	r3, [r7, #12]
 801335a:	2300      	movs	r3, #0
 801335c:	817b      	strh	r3, [r7, #10]
 801335e:	2300      	movs	r3, #0
 8013360:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	8c1b      	ldrh	r3, [r3, #32]
 8013366:	b29b      	uxth	r3, r3
 8013368:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801336c:	b29a      	uxth	r2, r3
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	8c1b      	ldrh	r3, [r3, #32]
 8013376:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	889b      	ldrh	r3, [r3, #4]
 801337c:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	8b9b      	ldrh	r3, [r3, #28]
 8013382:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 8013384:	89bb      	ldrh	r3, [r7, #12]
 8013386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801338a:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 801338c:	89bb      	ldrh	r3, [r7, #12]
 801338e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013392:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8013394:	683b      	ldr	r3, [r7, #0]
 8013396:	881b      	ldrh	r3, [r3, #0]
 8013398:	021b      	lsls	r3, r3, #8
 801339a:	b29a      	uxth	r2, r3
 801339c:	89bb      	ldrh	r3, [r7, #12]
 801339e:	4313      	orrs	r3, r2
 80133a0:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80133a2:	897b      	ldrh	r3, [r7, #10]
 80133a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80133a8:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 80133aa:	683b      	ldr	r3, [r7, #0]
 80133ac:	899b      	ldrh	r3, [r3, #12]
 80133ae:	031b      	lsls	r3, r3, #12
 80133b0:	b29a      	uxth	r2, r3
 80133b2:	897b      	ldrh	r3, [r7, #10]
 80133b4:	4313      	orrs	r3, r2
 80133b6:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80133b8:	683b      	ldr	r3, [r7, #0]
 80133ba:	885b      	ldrh	r3, [r3, #2]
 80133bc:	031b      	lsls	r3, r3, #12
 80133be:	b29a      	uxth	r2, r3
 80133c0:	897b      	ldrh	r3, [r7, #10]
 80133c2:	4313      	orrs	r3, r2
 80133c4:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 80133c6:	687a      	ldr	r2, [r7, #4]
 80133c8:	4b11      	ldr	r3, [pc, #68]	; (8013410 <TIM_OC4Init+0xc4>)
 80133ca:	429a      	cmp	r2, r3
 80133cc:	d003      	beq.n	80133d6 <TIM_OC4Init+0x8a>
 80133ce:	687a      	ldr	r2, [r7, #4]
 80133d0:	4b10      	ldr	r3, [pc, #64]	; (8013414 <TIM_OC4Init+0xc8>)
 80133d2:	429a      	cmp	r2, r3
 80133d4:	d10a      	bne.n	80133ec <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 80133d6:	89fb      	ldrh	r3, [r7, #14]
 80133d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80133dc:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80133de:	683b      	ldr	r3, [r7, #0]
 80133e0:	8a1b      	ldrh	r3, [r3, #16]
 80133e2:	019b      	lsls	r3, r3, #6
 80133e4:	b29a      	uxth	r2, r3
 80133e6:	89fb      	ldrh	r3, [r7, #14]
 80133e8:	4313      	orrs	r3, r2
 80133ea:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	89fa      	ldrh	r2, [r7, #14]
 80133f0:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	89ba      	ldrh	r2, [r7, #12]
 80133f6:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80133f8:	683b      	ldr	r3, [r7, #0]
 80133fa:	689a      	ldr	r2, [r3, #8]
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	897a      	ldrh	r2, [r7, #10]
 8013404:	841a      	strh	r2, [r3, #32]
}
 8013406:	3714      	adds	r7, #20
 8013408:	46bd      	mov	sp, r7
 801340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801340e:	4770      	bx	lr
 8013410:	40010000 	.word	0x40010000
 8013414:	40010400 	.word	0x40010400

08013418 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8013418:	b480      	push	{r7}
 801341a:	b083      	sub	sp, #12
 801341c:	af00      	add	r7, sp, #0
 801341e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	2200      	movs	r2, #0
 8013424:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	2200      	movs	r2, #0
 801342a:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	2200      	movs	r2, #0
 8013430:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	2200      	movs	r2, #0
 8013436:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	2200      	movs	r2, #0
 801343c:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	2200      	movs	r2, #0
 8013442:	81da      	strh	r2, [r3, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	2200      	movs	r2, #0
 8013448:	821a      	strh	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	2200      	movs	r2, #0
 801344e:	825a      	strh	r2, [r3, #18]
}
 8013450:	370c      	adds	r7, #12
 8013452:	46bd      	mov	sp, r7
 8013454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013458:	4770      	bx	lr
 801345a:	bf00      	nop

0801345c <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 801345c:	b480      	push	{r7}
 801345e:	b085      	sub	sp, #20
 8013460:	af00      	add	r7, sp, #0
 8013462:	6078      	str	r0, [r7, #4]
 8013464:	4613      	mov	r3, r2
 8013466:	460a      	mov	r2, r1
 8013468:	807a      	strh	r2, [r7, #2]
 801346a:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 801346c:	2300      	movs	r3, #0
 801346e:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
 8013470:	2300      	movs	r3, #0
 8013472:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_OFFSET;
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	3318      	adds	r3, #24
 801347c:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 801347e:	887b      	ldrh	r3, [r7, #2]
 8013480:	2201      	movs	r2, #1
 8013482:	fa02 f303 	lsl.w	r3, r2, r3
 8013486:	817b      	strh	r3, [r7, #10]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	8c1b      	ldrh	r3, [r3, #32]
 801348c:	b29a      	uxth	r2, r3
 801348e:	897b      	ldrh	r3, [r7, #10]
 8013490:	43db      	mvns	r3, r3
 8013492:	b29b      	uxth	r3, r3
 8013494:	4013      	ands	r3, r2
 8013496:	b29a      	uxth	r2, r3
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 801349c:	887b      	ldrh	r3, [r7, #2]
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d002      	beq.n	80134a8 <TIM_SelectOCxM+0x4c>
 80134a2:	887b      	ldrh	r3, [r7, #2]
 80134a4:	2b08      	cmp	r3, #8
 80134a6:	d113      	bne.n	80134d0 <TIM_SelectOCxM+0x74>
  {
    tmp += (TIM_Channel>>1);
 80134a8:	887b      	ldrh	r3, [r7, #2]
 80134aa:	085b      	lsrs	r3, r3, #1
 80134ac:	b29b      	uxth	r3, r3
 80134ae:	68fa      	ldr	r2, [r7, #12]
 80134b0:	4413      	add	r3, r2
 80134b2:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 80134b4:	68fa      	ldr	r2, [r7, #12]
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	6819      	ldr	r1, [r3, #0]
 80134ba:	f64f 738f 	movw	r3, #65423	; 0xff8f
 80134be:	400b      	ands	r3, r1
 80134c0:	6013      	str	r3, [r2, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	68fa      	ldr	r2, [r7, #12]
 80134c6:	6811      	ldr	r1, [r2, #0]
 80134c8:	883a      	ldrh	r2, [r7, #0]
 80134ca:	430a      	orrs	r2, r1
 80134cc:	601a      	str	r2, [r3, #0]
 80134ce:	e016      	b.n	80134fe <TIM_SelectOCxM+0xa2>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 80134d0:	887b      	ldrh	r3, [r7, #2]
 80134d2:	3b04      	subs	r3, #4
 80134d4:	b29b      	uxth	r3, r3
 80134d6:	085b      	lsrs	r3, r3, #1
 80134d8:	b29b      	uxth	r3, r3
 80134da:	68fa      	ldr	r2, [r7, #12]
 80134dc:	4413      	add	r3, r2
 80134de:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 80134e0:	68fa      	ldr	r2, [r7, #12]
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	6819      	ldr	r1, [r3, #0]
 80134e6:	f648 73ff 	movw	r3, #36863	; 0x8fff
 80134ea:	400b      	ands	r3, r1
 80134ec:	6013      	str	r3, [r2, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	68fa      	ldr	r2, [r7, #12]
 80134f2:	6811      	ldr	r1, [r2, #0]
 80134f4:	883a      	ldrh	r2, [r7, #0]
 80134f6:	0212      	lsls	r2, r2, #8
 80134f8:	b292      	uxth	r2, r2
 80134fa:	430a      	orrs	r2, r1
 80134fc:	601a      	str	r2, [r3, #0]
  }
}
 80134fe:	3714      	adds	r7, #20
 8013500:	46bd      	mov	sp, r7
 8013502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013506:	4770      	bx	lr

08013508 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 8013508:	b480      	push	{r7}
 801350a:	b083      	sub	sp, #12
 801350c:	af00      	add	r7, sp, #0
 801350e:	6078      	str	r0, [r7, #4]
 8013510:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	683a      	ldr	r2, [r7, #0]
 8013516:	635a      	str	r2, [r3, #52]	; 0x34
}
 8013518:	370c      	adds	r7, #12
 801351a:	46bd      	mov	sp, r7
 801351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013520:	4770      	bx	lr
 8013522:	bf00      	nop

08013524 <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 8013524:	b480      	push	{r7}
 8013526:	b083      	sub	sp, #12
 8013528:	af00      	add	r7, sp, #0
 801352a:	6078      	str	r0, [r7, #4]
 801352c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	683a      	ldr	r2, [r7, #0]
 8013532:	639a      	str	r2, [r3, #56]	; 0x38
}
 8013534:	370c      	adds	r7, #12
 8013536:	46bd      	mov	sp, r7
 8013538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801353c:	4770      	bx	lr
 801353e:	bf00      	nop

08013540 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 8013540:	b480      	push	{r7}
 8013542:	b083      	sub	sp, #12
 8013544:	af00      	add	r7, sp, #0
 8013546:	6078      	str	r0, [r7, #4]
 8013548:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	683a      	ldr	r2, [r7, #0]
 801354e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8013550:	370c      	adds	r7, #12
 8013552:	46bd      	mov	sp, r7
 8013554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013558:	4770      	bx	lr
 801355a:	bf00      	nop

0801355c <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 801355c:	b480      	push	{r7}
 801355e:	b083      	sub	sp, #12
 8013560:	af00      	add	r7, sp, #0
 8013562:	6078      	str	r0, [r7, #4]
 8013564:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	683a      	ldr	r2, [r7, #0]
 801356a:	641a      	str	r2, [r3, #64]	; 0x40
}
 801356c:	370c      	adds	r7, #12
 801356e:	46bd      	mov	sp, r7
 8013570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013574:	4770      	bx	lr
 8013576:	bf00      	nop

08013578 <TIM_ForcedOC1Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8013578:	b480      	push	{r7}
 801357a:	b085      	sub	sp, #20
 801357c:	af00      	add	r7, sp, #0
 801357e:	6078      	str	r0, [r7, #4]
 8013580:	460b      	mov	r3, r1
 8013582:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8013584:	2300      	movs	r3, #0
 8013586:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	8b1b      	ldrh	r3, [r3, #24]
 801358c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 801358e:	89fb      	ldrh	r3, [r7, #14]
 8013590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013594:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 8013596:	89fa      	ldrh	r2, [r7, #14]
 8013598:	887b      	ldrh	r3, [r7, #2]
 801359a:	4313      	orrs	r3, r2
 801359c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	89fa      	ldrh	r2, [r7, #14]
 80135a2:	831a      	strh	r2, [r3, #24]
}
 80135a4:	3714      	adds	r7, #20
 80135a6:	46bd      	mov	sp, r7
 80135a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ac:	4770      	bx	lr
 80135ae:	bf00      	nop

080135b0 <TIM_ForcedOC2Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 80135b0:	b480      	push	{r7}
 80135b2:	b085      	sub	sp, #20
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	6078      	str	r0, [r7, #4]
 80135b8:	460b      	mov	r3, r1
 80135ba:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80135bc:	2300      	movs	r3, #0
 80135be:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	8b1b      	ldrh	r3, [r3, #24]
 80135c4:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 80135c6:	89fb      	ldrh	r3, [r7, #14]
 80135c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80135cc:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 80135ce:	887b      	ldrh	r3, [r7, #2]
 80135d0:	021b      	lsls	r3, r3, #8
 80135d2:	b29a      	uxth	r2, r3
 80135d4:	89fb      	ldrh	r3, [r7, #14]
 80135d6:	4313      	orrs	r3, r2
 80135d8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	89fa      	ldrh	r2, [r7, #14]
 80135de:	831a      	strh	r2, [r3, #24]
}
 80135e0:	3714      	adds	r7, #20
 80135e2:	46bd      	mov	sp, r7
 80135e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e8:	4770      	bx	lr
 80135ea:	bf00      	nop

080135ec <TIM_ForcedOC3Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 80135ec:	b480      	push	{r7}
 80135ee:	b085      	sub	sp, #20
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	6078      	str	r0, [r7, #4]
 80135f4:	460b      	mov	r3, r1
 80135f6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80135f8:	2300      	movs	r3, #0
 80135fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	8b9b      	ldrh	r3, [r3, #28]
 8013600:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 8013602:	89fb      	ldrh	r3, [r7, #14]
 8013604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013608:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 801360a:	89fa      	ldrh	r2, [r7, #14]
 801360c:	887b      	ldrh	r3, [r7, #2]
 801360e:	4313      	orrs	r3, r2
 8013610:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	89fa      	ldrh	r2, [r7, #14]
 8013616:	839a      	strh	r2, [r3, #28]
}
 8013618:	3714      	adds	r7, #20
 801361a:	46bd      	mov	sp, r7
 801361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013620:	4770      	bx	lr
 8013622:	bf00      	nop

08013624 <TIM_ForcedOC4Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8013624:	b480      	push	{r7}
 8013626:	b085      	sub	sp, #20
 8013628:	af00      	add	r7, sp, #0
 801362a:	6078      	str	r0, [r7, #4]
 801362c:	460b      	mov	r3, r1
 801362e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8013630:	2300      	movs	r3, #0
 8013632:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	8b9b      	ldrh	r3, [r3, #28]
 8013638:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 801363a:	89fb      	ldrh	r3, [r7, #14]
 801363c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013640:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 8013642:	887b      	ldrh	r3, [r7, #2]
 8013644:	021b      	lsls	r3, r3, #8
 8013646:	b29a      	uxth	r2, r3
 8013648:	89fb      	ldrh	r3, [r7, #14]
 801364a:	4313      	orrs	r3, r2
 801364c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	89fa      	ldrh	r2, [r7, #14]
 8013652:	839a      	strh	r2, [r3, #28]
}
 8013654:	3714      	adds	r7, #20
 8013656:	46bd      	mov	sp, r7
 8013658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801365c:	4770      	bx	lr
 801365e:	bf00      	nop

08013660 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8013660:	b480      	push	{r7}
 8013662:	b085      	sub	sp, #20
 8013664:	af00      	add	r7, sp, #0
 8013666:	6078      	str	r0, [r7, #4]
 8013668:	460b      	mov	r3, r1
 801366a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 801366c:	2300      	movs	r3, #0
 801366e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	8b1b      	ldrh	r3, [r3, #24]
 8013674:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8013676:	89fb      	ldrh	r3, [r7, #14]
 8013678:	f023 0308 	bic.w	r3, r3, #8
 801367c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 801367e:	89fa      	ldrh	r2, [r7, #14]
 8013680:	887b      	ldrh	r3, [r7, #2]
 8013682:	4313      	orrs	r3, r2
 8013684:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	89fa      	ldrh	r2, [r7, #14]
 801368a:	831a      	strh	r2, [r3, #24]
}
 801368c:	3714      	adds	r7, #20
 801368e:	46bd      	mov	sp, r7
 8013690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013694:	4770      	bx	lr
 8013696:	bf00      	nop

08013698 <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8013698:	b480      	push	{r7}
 801369a:	b085      	sub	sp, #20
 801369c:	af00      	add	r7, sp, #0
 801369e:	6078      	str	r0, [r7, #4]
 80136a0:	460b      	mov	r3, r1
 80136a2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80136a4:	2300      	movs	r3, #0
 80136a6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	8b1b      	ldrh	r3, [r3, #24]
 80136ac:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 80136ae:	89fb      	ldrh	r3, [r7, #14]
 80136b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80136b4:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 80136b6:	887b      	ldrh	r3, [r7, #2]
 80136b8:	021b      	lsls	r3, r3, #8
 80136ba:	b29a      	uxth	r2, r3
 80136bc:	89fb      	ldrh	r3, [r7, #14]
 80136be:	4313      	orrs	r3, r2
 80136c0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	89fa      	ldrh	r2, [r7, #14]
 80136c6:	831a      	strh	r2, [r3, #24]
}
 80136c8:	3714      	adds	r7, #20
 80136ca:	46bd      	mov	sp, r7
 80136cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d0:	4770      	bx	lr
 80136d2:	bf00      	nop

080136d4 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80136d4:	b480      	push	{r7}
 80136d6:	b085      	sub	sp, #20
 80136d8:	af00      	add	r7, sp, #0
 80136da:	6078      	str	r0, [r7, #4]
 80136dc:	460b      	mov	r3, r1
 80136de:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80136e0:	2300      	movs	r3, #0
 80136e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	8b9b      	ldrh	r3, [r3, #28]
 80136e8:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 80136ea:	89fb      	ldrh	r3, [r7, #14]
 80136ec:	f023 0308 	bic.w	r3, r3, #8
 80136f0:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 80136f2:	89fa      	ldrh	r2, [r7, #14]
 80136f4:	887b      	ldrh	r3, [r7, #2]
 80136f6:	4313      	orrs	r3, r2
 80136f8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	89fa      	ldrh	r2, [r7, #14]
 80136fe:	839a      	strh	r2, [r3, #28]
}
 8013700:	3714      	adds	r7, #20
 8013702:	46bd      	mov	sp, r7
 8013704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013708:	4770      	bx	lr
 801370a:	bf00      	nop

0801370c <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 801370c:	b480      	push	{r7}
 801370e:	b085      	sub	sp, #20
 8013710:	af00      	add	r7, sp, #0
 8013712:	6078      	str	r0, [r7, #4]
 8013714:	460b      	mov	r3, r1
 8013716:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8013718:	2300      	movs	r3, #0
 801371a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	8b9b      	ldrh	r3, [r3, #28]
 8013720:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8013722:	89fb      	ldrh	r3, [r7, #14]
 8013724:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013728:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 801372a:	887b      	ldrh	r3, [r7, #2]
 801372c:	021b      	lsls	r3, r3, #8
 801372e:	b29a      	uxth	r2, r3
 8013730:	89fb      	ldrh	r3, [r7, #14]
 8013732:	4313      	orrs	r3, r2
 8013734:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	89fa      	ldrh	r2, [r7, #14]
 801373a:	839a      	strh	r2, [r3, #28]
}
 801373c:	3714      	adds	r7, #20
 801373e:	46bd      	mov	sp, r7
 8013740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013744:	4770      	bx	lr
 8013746:	bf00      	nop

08013748 <TIM_OC1FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8013748:	b480      	push	{r7}
 801374a:	b085      	sub	sp, #20
 801374c:	af00      	add	r7, sp, #0
 801374e:	6078      	str	r0, [r7, #4]
 8013750:	460b      	mov	r3, r1
 8013752:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8013754:	2300      	movs	r3, #0
 8013756:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	8b1b      	ldrh	r3, [r3, #24]
 801375c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 801375e:	89fb      	ldrh	r3, [r7, #14]
 8013760:	f023 0304 	bic.w	r3, r3, #4
 8013764:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8013766:	89fa      	ldrh	r2, [r7, #14]
 8013768:	887b      	ldrh	r3, [r7, #2]
 801376a:	4313      	orrs	r3, r2
 801376c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	89fa      	ldrh	r2, [r7, #14]
 8013772:	831a      	strh	r2, [r3, #24]
}
 8013774:	3714      	adds	r7, #20
 8013776:	46bd      	mov	sp, r7
 8013778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801377c:	4770      	bx	lr
 801377e:	bf00      	nop

08013780 <TIM_OC2FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8013780:	b480      	push	{r7}
 8013782:	b085      	sub	sp, #20
 8013784:	af00      	add	r7, sp, #0
 8013786:	6078      	str	r0, [r7, #4]
 8013788:	460b      	mov	r3, r1
 801378a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 801378c:	2300      	movs	r3, #0
 801378e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	8b1b      	ldrh	r3, [r3, #24]
 8013794:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 8013796:	89fb      	ldrh	r3, [r7, #14]
 8013798:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801379c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 801379e:	887b      	ldrh	r3, [r7, #2]
 80137a0:	021b      	lsls	r3, r3, #8
 80137a2:	b29a      	uxth	r2, r3
 80137a4:	89fb      	ldrh	r3, [r7, #14]
 80137a6:	4313      	orrs	r3, r2
 80137a8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	89fa      	ldrh	r2, [r7, #14]
 80137ae:	831a      	strh	r2, [r3, #24]
}
 80137b0:	3714      	adds	r7, #20
 80137b2:	46bd      	mov	sp, r7
 80137b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b8:	4770      	bx	lr
 80137ba:	bf00      	nop

080137bc <TIM_OC3FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 80137bc:	b480      	push	{r7}
 80137be:	b085      	sub	sp, #20
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	6078      	str	r0, [r7, #4]
 80137c4:	460b      	mov	r3, r1
 80137c6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80137c8:	2300      	movs	r3, #0
 80137ca:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	8b9b      	ldrh	r3, [r3, #28]
 80137d0:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 80137d2:	89fb      	ldrh	r3, [r7, #14]
 80137d4:	f023 0304 	bic.w	r3, r3, #4
 80137d8:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 80137da:	89fa      	ldrh	r2, [r7, #14]
 80137dc:	887b      	ldrh	r3, [r7, #2]
 80137de:	4313      	orrs	r3, r2
 80137e0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	89fa      	ldrh	r2, [r7, #14]
 80137e6:	839a      	strh	r2, [r3, #28]
}
 80137e8:	3714      	adds	r7, #20
 80137ea:	46bd      	mov	sp, r7
 80137ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137f0:	4770      	bx	lr
 80137f2:	bf00      	nop

080137f4 <TIM_OC4FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 80137f4:	b480      	push	{r7}
 80137f6:	b085      	sub	sp, #20
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	6078      	str	r0, [r7, #4]
 80137fc:	460b      	mov	r3, r1
 80137fe:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8013800:	2300      	movs	r3, #0
 8013802:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	8b9b      	ldrh	r3, [r3, #28]
 8013808:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 801380a:	89fb      	ldrh	r3, [r7, #14]
 801380c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013810:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 8013812:	887b      	ldrh	r3, [r7, #2]
 8013814:	021b      	lsls	r3, r3, #8
 8013816:	b29a      	uxth	r2, r3
 8013818:	89fb      	ldrh	r3, [r7, #14]
 801381a:	4313      	orrs	r3, r2
 801381c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	89fa      	ldrh	r2, [r7, #14]
 8013822:	839a      	strh	r2, [r3, #28]
}
 8013824:	3714      	adds	r7, #20
 8013826:	46bd      	mov	sp, r7
 8013828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801382c:	4770      	bx	lr
 801382e:	bf00      	nop

08013830 <TIM_ClearOC1Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8013830:	b480      	push	{r7}
 8013832:	b085      	sub	sp, #20
 8013834:	af00      	add	r7, sp, #0
 8013836:	6078      	str	r0, [r7, #4]
 8013838:	460b      	mov	r3, r1
 801383a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 801383c:	2300      	movs	r3, #0
 801383e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	8b1b      	ldrh	r3, [r3, #24]
 8013844:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 8013846:	89fb      	ldrh	r3, [r7, #14]
 8013848:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801384c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 801384e:	89fa      	ldrh	r2, [r7, #14]
 8013850:	887b      	ldrh	r3, [r7, #2]
 8013852:	4313      	orrs	r3, r2
 8013854:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	89fa      	ldrh	r2, [r7, #14]
 801385a:	831a      	strh	r2, [r3, #24]
}
 801385c:	3714      	adds	r7, #20
 801385e:	46bd      	mov	sp, r7
 8013860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013864:	4770      	bx	lr
 8013866:	bf00      	nop

08013868 <TIM_ClearOC2Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8013868:	b480      	push	{r7}
 801386a:	b085      	sub	sp, #20
 801386c:	af00      	add	r7, sp, #0
 801386e:	6078      	str	r0, [r7, #4]
 8013870:	460b      	mov	r3, r1
 8013872:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8013874:	2300      	movs	r3, #0
 8013876:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	8b1b      	ldrh	r3, [r3, #24]
 801387c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 801387e:	89fb      	ldrh	r3, [r7, #14]
 8013880:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8013884:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 8013886:	887b      	ldrh	r3, [r7, #2]
 8013888:	021b      	lsls	r3, r3, #8
 801388a:	b29a      	uxth	r2, r3
 801388c:	89fb      	ldrh	r3, [r7, #14]
 801388e:	4313      	orrs	r3, r2
 8013890:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	89fa      	ldrh	r2, [r7, #14]
 8013896:	831a      	strh	r2, [r3, #24]
}
 8013898:	3714      	adds	r7, #20
 801389a:	46bd      	mov	sp, r7
 801389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a0:	4770      	bx	lr
 80138a2:	bf00      	nop

080138a4 <TIM_ClearOC3Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 80138a4:	b480      	push	{r7}
 80138a6:	b085      	sub	sp, #20
 80138a8:	af00      	add	r7, sp, #0
 80138aa:	6078      	str	r0, [r7, #4]
 80138ac:	460b      	mov	r3, r1
 80138ae:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80138b0:	2300      	movs	r3, #0
 80138b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	8b9b      	ldrh	r3, [r3, #28]
 80138b8:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 80138ba:	89fb      	ldrh	r3, [r7, #14]
 80138bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80138c0:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 80138c2:	89fa      	ldrh	r2, [r7, #14]
 80138c4:	887b      	ldrh	r3, [r7, #2]
 80138c6:	4313      	orrs	r3, r2
 80138c8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	89fa      	ldrh	r2, [r7, #14]
 80138ce:	839a      	strh	r2, [r3, #28]
}
 80138d0:	3714      	adds	r7, #20
 80138d2:	46bd      	mov	sp, r7
 80138d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d8:	4770      	bx	lr
 80138da:	bf00      	nop

080138dc <TIM_ClearOC4Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 80138dc:	b480      	push	{r7}
 80138de:	b085      	sub	sp, #20
 80138e0:	af00      	add	r7, sp, #0
 80138e2:	6078      	str	r0, [r7, #4]
 80138e4:	460b      	mov	r3, r1
 80138e6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80138e8:	2300      	movs	r3, #0
 80138ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	8b9b      	ldrh	r3, [r3, #28]
 80138f0:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 80138f2:	89fb      	ldrh	r3, [r7, #14]
 80138f4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80138f8:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 80138fa:	887b      	ldrh	r3, [r7, #2]
 80138fc:	021b      	lsls	r3, r3, #8
 80138fe:	b29a      	uxth	r2, r3
 8013900:	89fb      	ldrh	r3, [r7, #14]
 8013902:	4313      	orrs	r3, r2
 8013904:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	89fa      	ldrh	r2, [r7, #14]
 801390a:	839a      	strh	r2, [r3, #28]
}
 801390c:	3714      	adds	r7, #20
 801390e:	46bd      	mov	sp, r7
 8013910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013914:	4770      	bx	lr
 8013916:	bf00      	nop

08013918 <TIM_OC1PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8013918:	b480      	push	{r7}
 801391a:	b085      	sub	sp, #20
 801391c:	af00      	add	r7, sp, #0
 801391e:	6078      	str	r0, [r7, #4]
 8013920:	460b      	mov	r3, r1
 8013922:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8013924:	2300      	movs	r3, #0
 8013926:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	8c1b      	ldrh	r3, [r3, #32]
 801392c:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 801392e:	89fb      	ldrh	r3, [r7, #14]
 8013930:	f023 0302 	bic.w	r3, r3, #2
 8013934:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
 8013936:	89fa      	ldrh	r2, [r7, #14]
 8013938:	887b      	ldrh	r3, [r7, #2]
 801393a:	4313      	orrs	r3, r2
 801393c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	89fa      	ldrh	r2, [r7, #14]
 8013942:	841a      	strh	r2, [r3, #32]
}
 8013944:	3714      	adds	r7, #20
 8013946:	46bd      	mov	sp, r7
 8013948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801394c:	4770      	bx	lr
 801394e:	bf00      	nop

08013950 <TIM_OC1NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8013950:	b480      	push	{r7}
 8013952:	b085      	sub	sp, #20
 8013954:	af00      	add	r7, sp, #0
 8013956:	6078      	str	r0, [r7, #4]
 8013958:	460b      	mov	r3, r1
 801395a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 801395c:	2300      	movs	r3, #0
 801395e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	8c1b      	ldrh	r3, [r3, #32]
 8013964:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8013966:	89fb      	ldrh	r3, [r7, #14]
 8013968:	f023 0308 	bic.w	r3, r3, #8
 801396c:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
 801396e:	89fa      	ldrh	r2, [r7, #14]
 8013970:	887b      	ldrh	r3, [r7, #2]
 8013972:	4313      	orrs	r3, r2
 8013974:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	89fa      	ldrh	r2, [r7, #14]
 801397a:	841a      	strh	r2, [r3, #32]
}
 801397c:	3714      	adds	r7, #20
 801397e:	46bd      	mov	sp, r7
 8013980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013984:	4770      	bx	lr
 8013986:	bf00      	nop

08013988 <TIM_OC2PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8013988:	b480      	push	{r7}
 801398a:	b085      	sub	sp, #20
 801398c:	af00      	add	r7, sp, #0
 801398e:	6078      	str	r0, [r7, #4]
 8013990:	460b      	mov	r3, r1
 8013992:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8013994:	2300      	movs	r3, #0
 8013996:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	8c1b      	ldrh	r3, [r3, #32]
 801399c:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 801399e:	89fb      	ldrh	r3, [r7, #14]
 80139a0:	f023 0320 	bic.w	r3, r3, #32
 80139a4:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 80139a6:	887b      	ldrh	r3, [r7, #2]
 80139a8:	011b      	lsls	r3, r3, #4
 80139aa:	b29a      	uxth	r2, r3
 80139ac:	89fb      	ldrh	r3, [r7, #14]
 80139ae:	4313      	orrs	r3, r2
 80139b0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	89fa      	ldrh	r2, [r7, #14]
 80139b6:	841a      	strh	r2, [r3, #32]
}
 80139b8:	3714      	adds	r7, #20
 80139ba:	46bd      	mov	sp, r7
 80139bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c0:	4770      	bx	lr
 80139c2:	bf00      	nop

080139c4 <TIM_OC2NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 80139c4:	b480      	push	{r7}
 80139c6:	b085      	sub	sp, #20
 80139c8:	af00      	add	r7, sp, #0
 80139ca:	6078      	str	r0, [r7, #4]
 80139cc:	460b      	mov	r3, r1
 80139ce:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 80139d0:	2300      	movs	r3, #0
 80139d2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	8c1b      	ldrh	r3, [r3, #32]
 80139d8:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 80139da:	89fb      	ldrh	r3, [r7, #14]
 80139dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80139e0:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 80139e2:	887b      	ldrh	r3, [r7, #2]
 80139e4:	011b      	lsls	r3, r3, #4
 80139e6:	b29a      	uxth	r2, r3
 80139e8:	89fb      	ldrh	r3, [r7, #14]
 80139ea:	4313      	orrs	r3, r2
 80139ec:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	89fa      	ldrh	r2, [r7, #14]
 80139f2:	841a      	strh	r2, [r3, #32]
}
 80139f4:	3714      	adds	r7, #20
 80139f6:	46bd      	mov	sp, r7
 80139f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139fc:	4770      	bx	lr
 80139fe:	bf00      	nop

08013a00 <TIM_OC3PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8013a00:	b480      	push	{r7}
 8013a02:	b085      	sub	sp, #20
 8013a04:	af00      	add	r7, sp, #0
 8013a06:	6078      	str	r0, [r7, #4]
 8013a08:	460b      	mov	r3, r1
 8013a0a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8013a0c:	2300      	movs	r3, #0
 8013a0e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	8c1b      	ldrh	r3, [r3, #32]
 8013a14:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8013a16:	89fb      	ldrh	r3, [r7, #14]
 8013a18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013a1c:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 8013a1e:	887b      	ldrh	r3, [r7, #2]
 8013a20:	021b      	lsls	r3, r3, #8
 8013a22:	b29a      	uxth	r2, r3
 8013a24:	89fb      	ldrh	r3, [r7, #14]
 8013a26:	4313      	orrs	r3, r2
 8013a28:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	89fa      	ldrh	r2, [r7, #14]
 8013a2e:	841a      	strh	r2, [r3, #32]
}
 8013a30:	3714      	adds	r7, #20
 8013a32:	46bd      	mov	sp, r7
 8013a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a38:	4770      	bx	lr
 8013a3a:	bf00      	nop

08013a3c <TIM_OC3NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8013a3c:	b480      	push	{r7}
 8013a3e:	b085      	sub	sp, #20
 8013a40:	af00      	add	r7, sp, #0
 8013a42:	6078      	str	r0, [r7, #4]
 8013a44:	460b      	mov	r3, r1
 8013a46:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8013a48:	2300      	movs	r3, #0
 8013a4a:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	8c1b      	ldrh	r3, [r3, #32]
 8013a50:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8013a52:	89fb      	ldrh	r3, [r7, #14]
 8013a54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013a58:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 8013a5a:	887b      	ldrh	r3, [r7, #2]
 8013a5c:	021b      	lsls	r3, r3, #8
 8013a5e:	b29a      	uxth	r2, r3
 8013a60:	89fb      	ldrh	r3, [r7, #14]
 8013a62:	4313      	orrs	r3, r2
 8013a64:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	89fa      	ldrh	r2, [r7, #14]
 8013a6a:	841a      	strh	r2, [r3, #32]
}
 8013a6c:	3714      	adds	r7, #20
 8013a6e:	46bd      	mov	sp, r7
 8013a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a74:	4770      	bx	lr
 8013a76:	bf00      	nop

08013a78 <TIM_OC4PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8013a78:	b480      	push	{r7}
 8013a7a:	b085      	sub	sp, #20
 8013a7c:	af00      	add	r7, sp, #0
 8013a7e:	6078      	str	r0, [r7, #4]
 8013a80:	460b      	mov	r3, r1
 8013a82:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8013a84:	2300      	movs	r3, #0
 8013a86:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	8c1b      	ldrh	r3, [r3, #32]
 8013a8c:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8013a8e:	89fb      	ldrh	r3, [r7, #14]
 8013a90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013a94:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 8013a96:	887b      	ldrh	r3, [r7, #2]
 8013a98:	031b      	lsls	r3, r3, #12
 8013a9a:	b29a      	uxth	r2, r3
 8013a9c:	89fb      	ldrh	r3, [r7, #14]
 8013a9e:	4313      	orrs	r3, r2
 8013aa0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	89fa      	ldrh	r2, [r7, #14]
 8013aa6:	841a      	strh	r2, [r3, #32]
}
 8013aa8:	3714      	adds	r7, #20
 8013aaa:	46bd      	mov	sp, r7
 8013aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab0:	4770      	bx	lr
 8013ab2:	bf00      	nop

08013ab4 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8013ab4:	b480      	push	{r7}
 8013ab6:	b085      	sub	sp, #20
 8013ab8:	af00      	add	r7, sp, #0
 8013aba:	6078      	str	r0, [r7, #4]
 8013abc:	4613      	mov	r3, r2
 8013abe:	460a      	mov	r2, r1
 8013ac0:	807a      	strh	r2, [r7, #2]
 8013ac2:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 8013ac8:	887b      	ldrh	r3, [r7, #2]
 8013aca:	2201      	movs	r2, #1
 8013acc:	fa02 f303 	lsl.w	r3, r2, r3
 8013ad0:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	8c1b      	ldrh	r3, [r3, #32]
 8013ad6:	b29a      	uxth	r2, r3
 8013ad8:	89fb      	ldrh	r3, [r7, #14]
 8013ada:	43db      	mvns	r3, r3
 8013adc:	b29b      	uxth	r3, r3
 8013ade:	4013      	ands	r3, r2
 8013ae0:	b29a      	uxth	r2, r3
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	8c1b      	ldrh	r3, [r3, #32]
 8013aea:	b29a      	uxth	r2, r3
 8013aec:	8839      	ldrh	r1, [r7, #0]
 8013aee:	887b      	ldrh	r3, [r7, #2]
 8013af0:	fa01 f303 	lsl.w	r3, r1, r3
 8013af4:	b29b      	uxth	r3, r3
 8013af6:	4313      	orrs	r3, r2
 8013af8:	b29a      	uxth	r2, r3
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	841a      	strh	r2, [r3, #32]
}
 8013afe:	3714      	adds	r7, #20
 8013b00:	46bd      	mov	sp, r7
 8013b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b06:	4770      	bx	lr

08013b08 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8013b08:	b480      	push	{r7}
 8013b0a:	b085      	sub	sp, #20
 8013b0c:	af00      	add	r7, sp, #0
 8013b0e:	6078      	str	r0, [r7, #4]
 8013b10:	4613      	mov	r3, r2
 8013b12:	460a      	mov	r2, r1
 8013b14:	807a      	strh	r2, [r7, #2]
 8013b16:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8013b18:	2300      	movs	r3, #0
 8013b1a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 8013b1c:	887b      	ldrh	r3, [r7, #2]
 8013b1e:	2204      	movs	r2, #4
 8013b20:	fa02 f303 	lsl.w	r3, r2, r3
 8013b24:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	8c1b      	ldrh	r3, [r3, #32]
 8013b2a:	b29a      	uxth	r2, r3
 8013b2c:	89fb      	ldrh	r3, [r7, #14]
 8013b2e:	43db      	mvns	r3, r3
 8013b30:	b29b      	uxth	r3, r3
 8013b32:	4013      	ands	r3, r2
 8013b34:	b29a      	uxth	r2, r3
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	8c1b      	ldrh	r3, [r3, #32]
 8013b3e:	b29a      	uxth	r2, r3
 8013b40:	8839      	ldrh	r1, [r7, #0]
 8013b42:	887b      	ldrh	r3, [r7, #2]
 8013b44:	fa01 f303 	lsl.w	r3, r1, r3
 8013b48:	b29b      	uxth	r3, r3
 8013b4a:	4313      	orrs	r3, r2
 8013b4c:	b29a      	uxth	r2, r3
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	841a      	strh	r2, [r3, #32]
}
 8013b52:	3714      	adds	r7, #20
 8013b54:	46bd      	mov	sp, r7
 8013b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b5a:	4770      	bx	lr

08013b5c <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8013b5c:	b580      	push	{r7, lr}
 8013b5e:	b082      	sub	sp, #8
 8013b60:	af00      	add	r7, sp, #0
 8013b62:	6078      	str	r0, [r7, #4]
 8013b64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8013b66:	683b      	ldr	r3, [r7, #0]
 8013b68:	881b      	ldrh	r3, [r3, #0]
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d10f      	bne.n	8013b8e <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8013b6e:	683b      	ldr	r3, [r7, #0]
 8013b70:	8859      	ldrh	r1, [r3, #2]
 8013b72:	683b      	ldr	r3, [r7, #0]
 8013b74:	889a      	ldrh	r2, [r3, #4]
 8013b76:	683b      	ldr	r3, [r7, #0]
 8013b78:	891b      	ldrh	r3, [r3, #8]
 8013b7a:	6878      	ldr	r0, [r7, #4]
 8013b7c:	f000 fc92 	bl	80144a4 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8013b80:	683b      	ldr	r3, [r7, #0]
 8013b82:	88db      	ldrh	r3, [r3, #6]
 8013b84:	6878      	ldr	r0, [r7, #4]
 8013b86:	4619      	mov	r1, r3
 8013b88:	f000 f8e0 	bl	8013d4c <TIM_SetIC1Prescaler>
 8013b8c:	e036      	b.n	8013bfc <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8013b8e:	683b      	ldr	r3, [r7, #0]
 8013b90:	881b      	ldrh	r3, [r3, #0]
 8013b92:	2b04      	cmp	r3, #4
 8013b94:	d10f      	bne.n	8013bb6 <TIM_ICInit+0x5a>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8013b96:	683b      	ldr	r3, [r7, #0]
 8013b98:	8859      	ldrh	r1, [r3, #2]
 8013b9a:	683b      	ldr	r3, [r7, #0]
 8013b9c:	889a      	ldrh	r2, [r3, #4]
 8013b9e:	683b      	ldr	r3, [r7, #0]
 8013ba0:	891b      	ldrh	r3, [r3, #8]
 8013ba2:	6878      	ldr	r0, [r7, #4]
 8013ba4:	f000 fcba 	bl	801451c <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8013ba8:	683b      	ldr	r3, [r7, #0]
 8013baa:	88db      	ldrh	r3, [r3, #6]
 8013bac:	6878      	ldr	r0, [r7, #4]
 8013bae:	4619      	mov	r1, r3
 8013bb0:	f000 f8e8 	bl	8013d84 <TIM_SetIC2Prescaler>
 8013bb4:	e022      	b.n	8013bfc <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8013bb6:	683b      	ldr	r3, [r7, #0]
 8013bb8:	881b      	ldrh	r3, [r3, #0]
 8013bba:	2b08      	cmp	r3, #8
 8013bbc:	d10f      	bne.n	8013bde <TIM_ICInit+0x82>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8013bbe:	683b      	ldr	r3, [r7, #0]
 8013bc0:	8859      	ldrh	r1, [r3, #2]
 8013bc2:	683b      	ldr	r3, [r7, #0]
 8013bc4:	889a      	ldrh	r2, [r3, #4]
 8013bc6:	683b      	ldr	r3, [r7, #0]
 8013bc8:	891b      	ldrh	r3, [r3, #8]
 8013bca:	6878      	ldr	r0, [r7, #4]
 8013bcc:	f000 fcec 	bl	80145a8 <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8013bd0:	683b      	ldr	r3, [r7, #0]
 8013bd2:	88db      	ldrh	r3, [r3, #6]
 8013bd4:	6878      	ldr	r0, [r7, #4]
 8013bd6:	4619      	mov	r1, r3
 8013bd8:	f000 f8f2 	bl	8013dc0 <TIM_SetIC3Prescaler>
 8013bdc:	e00e      	b.n	8013bfc <TIM_ICInit+0xa0>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8013bde:	683b      	ldr	r3, [r7, #0]
 8013be0:	8859      	ldrh	r1, [r3, #2]
 8013be2:	683b      	ldr	r3, [r7, #0]
 8013be4:	889a      	ldrh	r2, [r3, #4]
 8013be6:	683b      	ldr	r3, [r7, #0]
 8013be8:	891b      	ldrh	r3, [r3, #8]
 8013bea:	6878      	ldr	r0, [r7, #4]
 8013bec:	f000 fd1e 	bl	801462c <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8013bf0:	683b      	ldr	r3, [r7, #0]
 8013bf2:	88db      	ldrh	r3, [r3, #6]
 8013bf4:	6878      	ldr	r0, [r7, #4]
 8013bf6:	4619      	mov	r1, r3
 8013bf8:	f000 f8fe 	bl	8013df8 <TIM_SetIC4Prescaler>
  }
}
 8013bfc:	3708      	adds	r7, #8
 8013bfe:	46bd      	mov	sp, r7
 8013c00:	bd80      	pop	{r7, pc}
 8013c02:	bf00      	nop

08013c04 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8013c04:	b480      	push	{r7}
 8013c06:	b083      	sub	sp, #12
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	2200      	movs	r2, #0
 8013c10:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	2200      	movs	r2, #0
 8013c16:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	2201      	movs	r2, #1
 8013c1c:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	2200      	movs	r2, #0
 8013c22:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	2200      	movs	r2, #0
 8013c28:	811a      	strh	r2, [r3, #8]
}
 8013c2a:	370c      	adds	r7, #12
 8013c2c:	46bd      	mov	sp, r7
 8013c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c32:	4770      	bx	lr

08013c34 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8013c34:	b580      	push	{r7, lr}
 8013c36:	b084      	sub	sp, #16
 8013c38:	af00      	add	r7, sp, #0
 8013c3a:	6078      	str	r0, [r7, #4]
 8013c3c:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 8013c3e:	2300      	movs	r3, #0
 8013c40:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 8013c42:	2301      	movs	r3, #1
 8013c44:	81bb      	strh	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8013c46:	683b      	ldr	r3, [r7, #0]
 8013c48:	885b      	ldrh	r3, [r3, #2]
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d102      	bne.n	8013c54 <TIM_PWMIConfig+0x20>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 8013c4e:	2302      	movs	r3, #2
 8013c50:	81fb      	strh	r3, [r7, #14]
 8013c52:	e001      	b.n	8013c58 <TIM_PWMIConfig+0x24>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 8013c54:	2300      	movs	r3, #0
 8013c56:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8013c58:	683b      	ldr	r3, [r7, #0]
 8013c5a:	889b      	ldrh	r3, [r3, #4]
 8013c5c:	2b01      	cmp	r3, #1
 8013c5e:	d102      	bne.n	8013c66 <TIM_PWMIConfig+0x32>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 8013c60:	2302      	movs	r3, #2
 8013c62:	81bb      	strh	r3, [r7, #12]
 8013c64:	e001      	b.n	8013c6a <TIM_PWMIConfig+0x36>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 8013c66:	2301      	movs	r3, #1
 8013c68:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8013c6a:	683b      	ldr	r3, [r7, #0]
 8013c6c:	881b      	ldrh	r3, [r3, #0]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d11c      	bne.n	8013cac <TIM_PWMIConfig+0x78>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8013c72:	683b      	ldr	r3, [r7, #0]
 8013c74:	8859      	ldrh	r1, [r3, #2]
 8013c76:	683b      	ldr	r3, [r7, #0]
 8013c78:	889a      	ldrh	r2, [r3, #4]
 8013c7a:	683b      	ldr	r3, [r7, #0]
 8013c7c:	891b      	ldrh	r3, [r3, #8]
 8013c7e:	6878      	ldr	r0, [r7, #4]
 8013c80:	f000 fc10 	bl	80144a4 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8013c84:	683b      	ldr	r3, [r7, #0]
 8013c86:	88db      	ldrh	r3, [r3, #6]
 8013c88:	6878      	ldr	r0, [r7, #4]
 8013c8a:	4619      	mov	r1, r3
 8013c8c:	f000 f85e 	bl	8013d4c <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8013c90:	683b      	ldr	r3, [r7, #0]
 8013c92:	891b      	ldrh	r3, [r3, #8]
 8013c94:	89f9      	ldrh	r1, [r7, #14]
 8013c96:	89ba      	ldrh	r2, [r7, #12]
 8013c98:	6878      	ldr	r0, [r7, #4]
 8013c9a:	f000 fc3f 	bl	801451c <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8013c9e:	683b      	ldr	r3, [r7, #0]
 8013ca0:	88db      	ldrh	r3, [r3, #6]
 8013ca2:	6878      	ldr	r0, [r7, #4]
 8013ca4:	4619      	mov	r1, r3
 8013ca6:	f000 f86d 	bl	8013d84 <TIM_SetIC2Prescaler>
 8013caa:	e01b      	b.n	8013ce4 <TIM_PWMIConfig+0xb0>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8013cac:	683b      	ldr	r3, [r7, #0]
 8013cae:	8859      	ldrh	r1, [r3, #2]
 8013cb0:	683b      	ldr	r3, [r7, #0]
 8013cb2:	889a      	ldrh	r2, [r3, #4]
 8013cb4:	683b      	ldr	r3, [r7, #0]
 8013cb6:	891b      	ldrh	r3, [r3, #8]
 8013cb8:	6878      	ldr	r0, [r7, #4]
 8013cba:	f000 fc2f 	bl	801451c <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8013cbe:	683b      	ldr	r3, [r7, #0]
 8013cc0:	88db      	ldrh	r3, [r3, #6]
 8013cc2:	6878      	ldr	r0, [r7, #4]
 8013cc4:	4619      	mov	r1, r3
 8013cc6:	f000 f85d 	bl	8013d84 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8013cca:	683b      	ldr	r3, [r7, #0]
 8013ccc:	891b      	ldrh	r3, [r3, #8]
 8013cce:	89f9      	ldrh	r1, [r7, #14]
 8013cd0:	89ba      	ldrh	r2, [r7, #12]
 8013cd2:	6878      	ldr	r0, [r7, #4]
 8013cd4:	f000 fbe6 	bl	80144a4 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8013cd8:	683b      	ldr	r3, [r7, #0]
 8013cda:	88db      	ldrh	r3, [r3, #6]
 8013cdc:	6878      	ldr	r0, [r7, #4]
 8013cde:	4619      	mov	r1, r3
 8013ce0:	f000 f834 	bl	8013d4c <TIM_SetIC1Prescaler>
  }
}
 8013ce4:	3710      	adds	r7, #16
 8013ce6:	46bd      	mov	sp, r7
 8013ce8:	bd80      	pop	{r7, pc}
 8013cea:	bf00      	nop

08013cec <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 8013cec:	b480      	push	{r7}
 8013cee:	b083      	sub	sp, #12
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	370c      	adds	r7, #12
 8013cfc:	46bd      	mov	sp, r7
 8013cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d02:	4770      	bx	lr

08013d04 <TIM_GetCapture2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 8013d04:	b480      	push	{r7}
 8013d06:	b083      	sub	sp, #12
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8013d10:	4618      	mov	r0, r3
 8013d12:	370c      	adds	r7, #12
 8013d14:	46bd      	mov	sp, r7
 8013d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d1a:	4770      	bx	lr

08013d1c <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 8013d1c:	b480      	push	{r7}
 8013d1e:	b083      	sub	sp, #12
 8013d20:	af00      	add	r7, sp, #0
 8013d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8013d28:	4618      	mov	r0, r3
 8013d2a:	370c      	adds	r7, #12
 8013d2c:	46bd      	mov	sp, r7
 8013d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d32:	4770      	bx	lr

08013d34 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 8013d34:	b480      	push	{r7}
 8013d36:	b083      	sub	sp, #12
 8013d38:	af00      	add	r7, sp, #0
 8013d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8013d40:	4618      	mov	r0, r3
 8013d42:	370c      	adds	r7, #12
 8013d44:	46bd      	mov	sp, r7
 8013d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d4a:	4770      	bx	lr

08013d4c <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8013d4c:	b480      	push	{r7}
 8013d4e:	b083      	sub	sp, #12
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	6078      	str	r0, [r7, #4]
 8013d54:	460b      	mov	r3, r1
 8013d56:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	8b1b      	ldrh	r3, [r3, #24]
 8013d5c:	b29b      	uxth	r3, r3
 8013d5e:	f023 030c 	bic.w	r3, r3, #12
 8013d62:	b29a      	uxth	r2, r3
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	831a      	strh	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	8b1b      	ldrh	r3, [r3, #24]
 8013d6c:	b29a      	uxth	r2, r3
 8013d6e:	887b      	ldrh	r3, [r7, #2]
 8013d70:	4313      	orrs	r3, r2
 8013d72:	b29a      	uxth	r2, r3
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	831a      	strh	r2, [r3, #24]
}
 8013d78:	370c      	adds	r7, #12
 8013d7a:	46bd      	mov	sp, r7
 8013d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d80:	4770      	bx	lr
 8013d82:	bf00      	nop

08013d84 <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8013d84:	b480      	push	{r7}
 8013d86:	b083      	sub	sp, #12
 8013d88:	af00      	add	r7, sp, #0
 8013d8a:	6078      	str	r0, [r7, #4]
 8013d8c:	460b      	mov	r3, r1
 8013d8e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	8b1b      	ldrh	r3, [r3, #24]
 8013d94:	b29b      	uxth	r3, r3
 8013d96:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8013d9a:	b29a      	uxth	r2, r3
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	831a      	strh	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	8b1b      	ldrh	r3, [r3, #24]
 8013da4:	b29a      	uxth	r2, r3
 8013da6:	887b      	ldrh	r3, [r7, #2]
 8013da8:	021b      	lsls	r3, r3, #8
 8013daa:	b29b      	uxth	r3, r3
 8013dac:	4313      	orrs	r3, r2
 8013dae:	b29a      	uxth	r2, r3
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	831a      	strh	r2, [r3, #24]
}
 8013db4:	370c      	adds	r7, #12
 8013db6:	46bd      	mov	sp, r7
 8013db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dbc:	4770      	bx	lr
 8013dbe:	bf00      	nop

08013dc0 <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8013dc0:	b480      	push	{r7}
 8013dc2:	b083      	sub	sp, #12
 8013dc4:	af00      	add	r7, sp, #0
 8013dc6:	6078      	str	r0, [r7, #4]
 8013dc8:	460b      	mov	r3, r1
 8013dca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	8b9b      	ldrh	r3, [r3, #28]
 8013dd0:	b29b      	uxth	r3, r3
 8013dd2:	f023 030c 	bic.w	r3, r3, #12
 8013dd6:	b29a      	uxth	r2, r3
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	839a      	strh	r2, [r3, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	8b9b      	ldrh	r3, [r3, #28]
 8013de0:	b29a      	uxth	r2, r3
 8013de2:	887b      	ldrh	r3, [r7, #2]
 8013de4:	4313      	orrs	r3, r2
 8013de6:	b29a      	uxth	r2, r3
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	839a      	strh	r2, [r3, #28]
}
 8013dec:	370c      	adds	r7, #12
 8013dee:	46bd      	mov	sp, r7
 8013df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df4:	4770      	bx	lr
 8013df6:	bf00      	nop

08013df8 <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 8013df8:	b480      	push	{r7}
 8013dfa:	b083      	sub	sp, #12
 8013dfc:	af00      	add	r7, sp, #0
 8013dfe:	6078      	str	r0, [r7, #4]
 8013e00:	460b      	mov	r3, r1
 8013e02:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	8b9b      	ldrh	r3, [r3, #28]
 8013e08:	b29b      	uxth	r3, r3
 8013e0a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8013e0e:	b29a      	uxth	r2, r3
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	839a      	strh	r2, [r3, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	8b9b      	ldrh	r3, [r3, #28]
 8013e18:	b29a      	uxth	r2, r3
 8013e1a:	887b      	ldrh	r3, [r7, #2]
 8013e1c:	021b      	lsls	r3, r3, #8
 8013e1e:	b29b      	uxth	r3, r3
 8013e20:	4313      	orrs	r3, r2
 8013e22:	b29a      	uxth	r2, r3
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	839a      	strh	r2, [r3, #28]
}
 8013e28:	370c      	adds	r7, #12
 8013e2a:	46bd      	mov	sp, r7
 8013e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e30:	4770      	bx	lr
 8013e32:	bf00      	nop

08013e34 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 8013e34:	b480      	push	{r7}
 8013e36:	b083      	sub	sp, #12
 8013e38:	af00      	add	r7, sp, #0
 8013e3a:	6078      	str	r0, [r7, #4]
 8013e3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8013e3e:	683b      	ldr	r3, [r7, #0]
 8013e40:	881a      	ldrh	r2, [r3, #0]
 8013e42:	683b      	ldr	r3, [r7, #0]
 8013e44:	885b      	ldrh	r3, [r3, #2]
 8013e46:	4313      	orrs	r3, r2
 8013e48:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8013e4a:	683b      	ldr	r3, [r7, #0]
 8013e4c:	889b      	ldrh	r3, [r3, #4]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8013e4e:	4313      	orrs	r3, r2
 8013e50:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8013e52:	683b      	ldr	r3, [r7, #0]
 8013e54:	88db      	ldrh	r3, [r3, #6]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8013e56:	4313      	orrs	r3, r2
 8013e58:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8013e5a:	683b      	ldr	r3, [r7, #0]
 8013e5c:	891b      	ldrh	r3, [r3, #8]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8013e5e:	4313      	orrs	r3, r2
 8013e60:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8013e62:	683b      	ldr	r3, [r7, #0]
 8013e64:	895b      	ldrh	r3, [r3, #10]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8013e66:	4313      	orrs	r3, r2
 8013e68:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
 8013e6a:	683b      	ldr	r3, [r7, #0]
 8013e6c:	899b      	ldrh	r3, [r3, #12]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8013e6e:	4313      	orrs	r3, r2
 8013e70:	b29a      	uxth	r2, r3
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 8013e78:	370c      	adds	r7, #12
 8013e7a:	46bd      	mov	sp, r7
 8013e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e80:	4770      	bx	lr
 8013e82:	bf00      	nop

08013e84 <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
 8013e84:	b480      	push	{r7}
 8013e86:	b083      	sub	sp, #12
 8013e88:	af00      	add	r7, sp, #0
 8013e8a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	2200      	movs	r2, #0
 8013e90:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	2200      	movs	r2, #0
 8013e96:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	2200      	movs	r2, #0
 8013e9c:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	2200      	movs	r2, #0
 8013ea2:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	2200      	movs	r2, #0
 8013ea8:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	2200      	movs	r2, #0
 8013eae:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	2200      	movs	r2, #0
 8013eb4:	819a      	strh	r2, [r3, #12]
}
 8013eb6:	370c      	adds	r7, #12
 8013eb8:	46bd      	mov	sp, r7
 8013eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ebe:	4770      	bx	lr

08013ec0 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8013ec0:	b480      	push	{r7}
 8013ec2:	b083      	sub	sp, #12
 8013ec4:	af00      	add	r7, sp, #0
 8013ec6:	6078      	str	r0, [r7, #4]
 8013ec8:	460b      	mov	r3, r1
 8013eca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8013ecc:	78fb      	ldrb	r3, [r7, #3]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d00c      	beq.n	8013eec <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8013ed8:	b29b      	uxth	r3, r3
 8013eda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013ede:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013ee2:	b29a      	uxth	r2, r3
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8013eea:	e009      	b.n	8013f00 <TIM_CtrlPWMOutputs+0x40>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8013ef2:	b29b      	uxth	r3, r3
 8013ef4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8013ef8:	b29a      	uxth	r2, r3
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }  
}
 8013f00:	370c      	adds	r7, #12
 8013f02:	46bd      	mov	sp, r7
 8013f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f08:	4770      	bx	lr
 8013f0a:	bf00      	nop

08013f0c <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8013f0c:	b480      	push	{r7}
 8013f0e:	b083      	sub	sp, #12
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	6078      	str	r0, [r7, #4]
 8013f14:	460b      	mov	r3, r1
 8013f16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8013f18:	78fb      	ldrb	r3, [r7, #3]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d008      	beq.n	8013f30 <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	889b      	ldrh	r3, [r3, #4]
 8013f22:	b29b      	uxth	r3, r3
 8013f24:	f043 0304 	orr.w	r3, r3, #4
 8013f28:	b29a      	uxth	r2, r3
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	809a      	strh	r2, [r3, #4]
 8013f2e:	e007      	b.n	8013f40 <TIM_SelectCOM+0x34>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	889b      	ldrh	r3, [r3, #4]
 8013f34:	b29b      	uxth	r3, r3
 8013f36:	f023 0304 	bic.w	r3, r3, #4
 8013f3a:	b29a      	uxth	r2, r3
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	809a      	strh	r2, [r3, #4]
  }
}
 8013f40:	370c      	adds	r7, #12
 8013f42:	46bd      	mov	sp, r7
 8013f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f48:	4770      	bx	lr
 8013f4a:	bf00      	nop

08013f4c <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
 8013f4c:	b480      	push	{r7}
 8013f4e:	b083      	sub	sp, #12
 8013f50:	af00      	add	r7, sp, #0
 8013f52:	6078      	str	r0, [r7, #4]
 8013f54:	460b      	mov	r3, r1
 8013f56:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8013f58:	78fb      	ldrb	r3, [r7, #3]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d008      	beq.n	8013f70 <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	889b      	ldrh	r3, [r3, #4]
 8013f62:	b29b      	uxth	r3, r3
 8013f64:	f043 0301 	orr.w	r3, r3, #1
 8013f68:	b29a      	uxth	r2, r3
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	809a      	strh	r2, [r3, #4]
 8013f6e:	e007      	b.n	8013f80 <TIM_CCPreloadControl+0x34>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	889b      	ldrh	r3, [r3, #4]
 8013f74:	b29b      	uxth	r3, r3
 8013f76:	f023 0301 	bic.w	r3, r3, #1
 8013f7a:	b29a      	uxth	r2, r3
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	809a      	strh	r2, [r3, #4]
  }
}
 8013f80:	370c      	adds	r7, #12
 8013f82:	46bd      	mov	sp, r7
 8013f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f88:	4770      	bx	lr
 8013f8a:	bf00      	nop

08013f8c <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8013f8c:	b480      	push	{r7}
 8013f8e:	b083      	sub	sp, #12
 8013f90:	af00      	add	r7, sp, #0
 8013f92:	6078      	str	r0, [r7, #4]
 8013f94:	4613      	mov	r3, r2
 8013f96:	460a      	mov	r2, r1
 8013f98:	807a      	strh	r2, [r7, #2]
 8013f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8013f9c:	787b      	ldrb	r3, [r7, #1]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d008      	beq.n	8013fb4 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	899b      	ldrh	r3, [r3, #12]
 8013fa6:	b29a      	uxth	r2, r3
 8013fa8:	887b      	ldrh	r3, [r7, #2]
 8013faa:	4313      	orrs	r3, r2
 8013fac:	b29a      	uxth	r2, r3
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	819a      	strh	r2, [r3, #12]
 8013fb2:	e009      	b.n	8013fc8 <TIM_ITConfig+0x3c>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	899b      	ldrh	r3, [r3, #12]
 8013fb8:	b29a      	uxth	r2, r3
 8013fba:	887b      	ldrh	r3, [r7, #2]
 8013fbc:	43db      	mvns	r3, r3
 8013fbe:	b29b      	uxth	r3, r3
 8013fc0:	4013      	ands	r3, r2
 8013fc2:	b29a      	uxth	r2, r3
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	819a      	strh	r2, [r3, #12]
  }
}
 8013fc8:	370c      	adds	r7, #12
 8013fca:	46bd      	mov	sp, r7
 8013fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fd0:	4770      	bx	lr
 8013fd2:	bf00      	nop

08013fd4 <TIM_GenerateEvent>:
  * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.
  *        
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
 8013fd4:	b480      	push	{r7}
 8013fd6:	b083      	sub	sp, #12
 8013fd8:	af00      	add	r7, sp, #0
 8013fda:	6078      	str	r0, [r7, #4]
 8013fdc:	460b      	mov	r3, r1
 8013fde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	887a      	ldrh	r2, [r7, #2]
 8013fe4:	829a      	strh	r2, [r3, #20]
}
 8013fe6:	370c      	adds	r7, #12
 8013fe8:	46bd      	mov	sp, r7
 8013fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fee:	4770      	bx	lr

08013ff0 <TIM_GetFlagStatus>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
  *
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
 8013ff0:	b480      	push	{r7}
 8013ff2:	b085      	sub	sp, #20
 8013ff4:	af00      	add	r7, sp, #0
 8013ff6:	6078      	str	r0, [r7, #4]
 8013ff8:	460b      	mov	r3, r1
 8013ffa:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8013ffc:	2300      	movs	r3, #0
 8013ffe:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	8a1b      	ldrh	r3, [r3, #16]
 8014004:	b29a      	uxth	r2, r3
 8014006:	887b      	ldrh	r3, [r7, #2]
 8014008:	4013      	ands	r3, r2
 801400a:	b29b      	uxth	r3, r3
 801400c:	2b00      	cmp	r3, #0
 801400e:	d002      	beq.n	8014016 <TIM_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8014010:	2301      	movs	r3, #1
 8014012:	73fb      	strb	r3, [r7, #15]
 8014014:	e001      	b.n	801401a <TIM_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8014016:	2300      	movs	r3, #0
 8014018:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801401a:	7bfb      	ldrb	r3, [r7, #15]
}
 801401c:	4618      	mov	r0, r3
 801401e:	3714      	adds	r7, #20
 8014020:	46bd      	mov	sp, r7
 8014022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014026:	4770      	bx	lr

08014028 <TIM_ClearFlag>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.
  *    
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 8014028:	b480      	push	{r7}
 801402a:	b083      	sub	sp, #12
 801402c:	af00      	add	r7, sp, #0
 801402e:	6078      	str	r0, [r7, #4]
 8014030:	460b      	mov	r3, r1
 8014032:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8014034:	887b      	ldrh	r3, [r7, #2]
 8014036:	43db      	mvns	r3, r3
 8014038:	b29a      	uxth	r2, r3
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	821a      	strh	r2, [r3, #16]
}
 801403e:	370c      	adds	r7, #12
 8014040:	46bd      	mov	sp, r7
 8014042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014046:	4770      	bx	lr

08014048 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8014048:	b480      	push	{r7}
 801404a:	b085      	sub	sp, #20
 801404c:	af00      	add	r7, sp, #0
 801404e:	6078      	str	r0, [r7, #4]
 8014050:	460b      	mov	r3, r1
 8014052:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8014054:	2300      	movs	r3, #0
 8014056:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8014058:	2300      	movs	r3, #0
 801405a:	81bb      	strh	r3, [r7, #12]
 801405c:	2300      	movs	r3, #0
 801405e:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	8a1b      	ldrh	r3, [r3, #16]
 8014064:	b29a      	uxth	r2, r3
 8014066:	887b      	ldrh	r3, [r7, #2]
 8014068:	4013      	ands	r3, r2
 801406a:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	899b      	ldrh	r3, [r3, #12]
 8014070:	b29a      	uxth	r2, r3
 8014072:	887b      	ldrh	r3, [r7, #2]
 8014074:	4013      	ands	r3, r2
 8014076:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8014078:	89bb      	ldrh	r3, [r7, #12]
 801407a:	2b00      	cmp	r3, #0
 801407c:	d005      	beq.n	801408a <TIM_GetITStatus+0x42>
 801407e:	897b      	ldrh	r3, [r7, #10]
 8014080:	2b00      	cmp	r3, #0
 8014082:	d002      	beq.n	801408a <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8014084:	2301      	movs	r3, #1
 8014086:	73fb      	strb	r3, [r7, #15]
 8014088:	e001      	b.n	801408e <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 801408a:	2300      	movs	r3, #0
 801408c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801408e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014090:	4618      	mov	r0, r3
 8014092:	3714      	adds	r7, #20
 8014094:	46bd      	mov	sp, r7
 8014096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801409a:	4770      	bx	lr

0801409c <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 801409c:	b480      	push	{r7}
 801409e:	b083      	sub	sp, #12
 80140a0:	af00      	add	r7, sp, #0
 80140a2:	6078      	str	r0, [r7, #4]
 80140a4:	460b      	mov	r3, r1
 80140a6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80140a8:	887b      	ldrh	r3, [r7, #2]
 80140aa:	43db      	mvns	r3, r3
 80140ac:	b29a      	uxth	r2, r3
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	821a      	strh	r2, [r3, #16]
}
 80140b2:	370c      	adds	r7, #12
 80140b4:	46bd      	mov	sp, r7
 80140b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ba:	4770      	bx	lr

080140bc <TIM_DMAConfig>:
  * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
  *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
 80140bc:	b480      	push	{r7}
 80140be:	b083      	sub	sp, #12
 80140c0:	af00      	add	r7, sp, #0
 80140c2:	6078      	str	r0, [r7, #4]
 80140c4:	4613      	mov	r3, r2
 80140c6:	460a      	mov	r2, r1
 80140c8:	807a      	strh	r2, [r7, #2]
 80140ca:	803b      	strh	r3, [r7, #0]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 80140cc:	887a      	ldrh	r2, [r7, #2]
 80140ce:	883b      	ldrh	r3, [r7, #0]
 80140d0:	4313      	orrs	r3, r2
 80140d2:	b29a      	uxth	r2, r3
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 80140da:	370c      	adds	r7, #12
 80140dc:	46bd      	mov	sp, r7
 80140de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e2:	4770      	bx	lr

080140e4 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 80140e4:	b480      	push	{r7}
 80140e6:	b083      	sub	sp, #12
 80140e8:	af00      	add	r7, sp, #0
 80140ea:	6078      	str	r0, [r7, #4]
 80140ec:	4613      	mov	r3, r2
 80140ee:	460a      	mov	r2, r1
 80140f0:	807a      	strh	r2, [r7, #2]
 80140f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80140f4:	787b      	ldrb	r3, [r7, #1]
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d008      	beq.n	801410c <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	899b      	ldrh	r3, [r3, #12]
 80140fe:	b29a      	uxth	r2, r3
 8014100:	887b      	ldrh	r3, [r7, #2]
 8014102:	4313      	orrs	r3, r2
 8014104:	b29a      	uxth	r2, r3
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	819a      	strh	r2, [r3, #12]
 801410a:	e009      	b.n	8014120 <TIM_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	899b      	ldrh	r3, [r3, #12]
 8014110:	b29a      	uxth	r2, r3
 8014112:	887b      	ldrh	r3, [r7, #2]
 8014114:	43db      	mvns	r3, r3
 8014116:	b29b      	uxth	r3, r3
 8014118:	4013      	ands	r3, r2
 801411a:	b29a      	uxth	r2, r3
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	819a      	strh	r2, [r3, #12]
  }
}
 8014120:	370c      	adds	r7, #12
 8014122:	46bd      	mov	sp, r7
 8014124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014128:	4770      	bx	lr
 801412a:	bf00      	nop

0801412c <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 801412c:	b480      	push	{r7}
 801412e:	b083      	sub	sp, #12
 8014130:	af00      	add	r7, sp, #0
 8014132:	6078      	str	r0, [r7, #4]
 8014134:	460b      	mov	r3, r1
 8014136:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8014138:	78fb      	ldrb	r3, [r7, #3]
 801413a:	2b00      	cmp	r3, #0
 801413c:	d008      	beq.n	8014150 <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	889b      	ldrh	r3, [r3, #4]
 8014142:	b29b      	uxth	r3, r3
 8014144:	f043 0308 	orr.w	r3, r3, #8
 8014148:	b29a      	uxth	r2, r3
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	809a      	strh	r2, [r3, #4]
 801414e:	e007      	b.n	8014160 <TIM_SelectCCDMA+0x34>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	889b      	ldrh	r3, [r3, #4]
 8014154:	b29b      	uxth	r3, r3
 8014156:	f023 0308 	bic.w	r3, r3, #8
 801415a:	b29a      	uxth	r2, r3
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	809a      	strh	r2, [r3, #4]
  }
}
 8014160:	370c      	adds	r7, #12
 8014162:	46bd      	mov	sp, r7
 8014164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014168:	4770      	bx	lr
 801416a:	bf00      	nop

0801416c <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
 801416c:	b480      	push	{r7}
 801416e:	b083      	sub	sp, #12
 8014170:	af00      	add	r7, sp, #0
 8014172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	891b      	ldrh	r3, [r3, #8]
 8014178:	b29b      	uxth	r3, r3
 801417a:	f023 0307 	bic.w	r3, r3, #7
 801417e:	b29a      	uxth	r2, r3
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	811a      	strh	r2, [r3, #8]
}
 8014184:	370c      	adds	r7, #12
 8014186:	46bd      	mov	sp, r7
 8014188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801418c:	4770      	bx	lr
 801418e:	bf00      	nop

08014190 <TIM_ITRxExternalClockConfig>:
  *            @arg TIM_TS_ITR2: Internal Trigger 2
  *            @arg TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8014190:	b580      	push	{r7, lr}
 8014192:	b082      	sub	sp, #8
 8014194:	af00      	add	r7, sp, #0
 8014196:	6078      	str	r0, [r7, #4]
 8014198:	460b      	mov	r3, r1
 801419a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 801419c:	887b      	ldrh	r3, [r7, #2]
 801419e:	6878      	ldr	r0, [r7, #4]
 80141a0:	4619      	mov	r1, r3
 80141a2:	f000 f875 	bl	8014290 <TIM_SelectInputTrigger>

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	891b      	ldrh	r3, [r3, #8]
 80141aa:	b29b      	uxth	r3, r3
 80141ac:	f043 0307 	orr.w	r3, r3, #7
 80141b0:	b29a      	uxth	r2, r3
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	811a      	strh	r2, [r3, #8]
}
 80141b6:	3708      	adds	r7, #8
 80141b8:	46bd      	mov	sp, r7
 80141ba:	bd80      	pop	{r7, pc}

080141bc <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 80141bc:	b580      	push	{r7, lr}
 80141be:	b084      	sub	sp, #16
 80141c0:	af00      	add	r7, sp, #0
 80141c2:	60f8      	str	r0, [r7, #12]
 80141c4:	8179      	strh	r1, [r7, #10]
 80141c6:	813a      	strh	r2, [r7, #8]
 80141c8:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 80141ca:	897b      	ldrh	r3, [r7, #10]
 80141cc:	2b60      	cmp	r3, #96	; 0x60
 80141ce:	d107      	bne.n	80141e0 <TIM_TIxExternalClockConfig+0x24>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 80141d0:	893a      	ldrh	r2, [r7, #8]
 80141d2:	88fb      	ldrh	r3, [r7, #6]
 80141d4:	68f8      	ldr	r0, [r7, #12]
 80141d6:	4611      	mov	r1, r2
 80141d8:	2201      	movs	r2, #1
 80141da:	f000 f99f 	bl	801451c <TI2_Config>
 80141de:	e006      	b.n	80141ee <TIM_TIxExternalClockConfig+0x32>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 80141e0:	893a      	ldrh	r2, [r7, #8]
 80141e2:	88fb      	ldrh	r3, [r7, #6]
 80141e4:	68f8      	ldr	r0, [r7, #12]
 80141e6:	4611      	mov	r1, r2
 80141e8:	2201      	movs	r2, #1
 80141ea:	f000 f95b 	bl	80144a4 <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 80141ee:	897b      	ldrh	r3, [r7, #10]
 80141f0:	68f8      	ldr	r0, [r7, #12]
 80141f2:	4619      	mov	r1, r3
 80141f4:	f000 f84c 	bl	8014290 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	891b      	ldrh	r3, [r3, #8]
 80141fc:	b29b      	uxth	r3, r3
 80141fe:	f043 0307 	orr.w	r3, r3, #7
 8014202:	b29a      	uxth	r2, r3
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	811a      	strh	r2, [r3, #8]
}
 8014208:	3710      	adds	r7, #16
 801420a:	46bd      	mov	sp, r7
 801420c:	bd80      	pop	{r7, pc}
 801420e:	bf00      	nop

08014210 <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8014210:	b580      	push	{r7, lr}
 8014212:	b086      	sub	sp, #24
 8014214:	af00      	add	r7, sp, #0
 8014216:	60f8      	str	r0, [r7, #12]
 8014218:	8179      	strh	r1, [r7, #10]
 801421a:	813a      	strh	r2, [r7, #8]
 801421c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 801421e:	2300      	movs	r3, #0
 8014220:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8014222:	8979      	ldrh	r1, [r7, #10]
 8014224:	893a      	ldrh	r2, [r7, #8]
 8014226:	88fb      	ldrh	r3, [r7, #6]
 8014228:	68f8      	ldr	r0, [r7, #12]
 801422a:	f000 f8a1 	bl	8014370 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	891b      	ldrh	r3, [r3, #8]
 8014232:	82fb      	strh	r3, [r7, #22]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8014234:	8afb      	ldrh	r3, [r7, #22]
 8014236:	f023 0307 	bic.w	r3, r3, #7
 801423a:	82fb      	strh	r3, [r7, #22]

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 801423c:	8afb      	ldrh	r3, [r7, #22]
 801423e:	f043 0307 	orr.w	r3, r3, #7
 8014242:	82fb      	strh	r3, [r7, #22]

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8014244:	8afb      	ldrh	r3, [r7, #22]
 8014246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801424a:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
 801424c:	8afb      	ldrh	r3, [r7, #22]
 801424e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8014252:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	8afa      	ldrh	r2, [r7, #22]
 8014258:	811a      	strh	r2, [r3, #8]
}
 801425a:	3718      	adds	r7, #24
 801425c:	46bd      	mov	sp, r7
 801425e:	bd80      	pop	{r7, pc}

08014260 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8014260:	b580      	push	{r7, lr}
 8014262:	b084      	sub	sp, #16
 8014264:	af00      	add	r7, sp, #0
 8014266:	60f8      	str	r0, [r7, #12]
 8014268:	8179      	strh	r1, [r7, #10]
 801426a:	813a      	strh	r2, [r7, #8]
 801426c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 801426e:	8979      	ldrh	r1, [r7, #10]
 8014270:	893a      	ldrh	r2, [r7, #8]
 8014272:	88fb      	ldrh	r3, [r7, #6]
 8014274:	68f8      	ldr	r0, [r7, #12]
 8014276:	f000 f87b 	bl	8014370 <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	891b      	ldrh	r3, [r3, #8]
 801427e:	b29b      	uxth	r3, r3
 8014280:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014284:	b29a      	uxth	r2, r3
 8014286:	68fb      	ldr	r3, [r7, #12]
 8014288:	811a      	strh	r2, [r3, #8]
}
 801428a:	3710      	adds	r7, #16
 801428c:	46bd      	mov	sp, r7
 801428e:	bd80      	pop	{r7, pc}

08014290 <TIM_SelectInputTrigger>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8014290:	b480      	push	{r7}
 8014292:	b085      	sub	sp, #20
 8014294:	af00      	add	r7, sp, #0
 8014296:	6078      	str	r0, [r7, #4]
 8014298:	460b      	mov	r3, r1
 801429a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
 801429c:	2300      	movs	r3, #0
 801429e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	891b      	ldrh	r3, [r3, #8]
 80142a4:	81fb      	strh	r3, [r7, #14]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 80142a6:	89fb      	ldrh	r3, [r7, #14]
 80142a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80142ac:	81fb      	strh	r3, [r7, #14]

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80142ae:	89fa      	ldrh	r2, [r7, #14]
 80142b0:	887b      	ldrh	r3, [r7, #2]
 80142b2:	4313      	orrs	r3, r2
 80142b4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	89fa      	ldrh	r2, [r7, #14]
 80142ba:	811a      	strh	r2, [r3, #8]
}
 80142bc:	3714      	adds	r7, #20
 80142be:	46bd      	mov	sp, r7
 80142c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142c4:	4770      	bx	lr
 80142c6:	bf00      	nop

080142c8 <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 80142c8:	b480      	push	{r7}
 80142ca:	b083      	sub	sp, #12
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	6078      	str	r0, [r7, #4]
 80142d0:	460b      	mov	r3, r1
 80142d2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	889b      	ldrh	r3, [r3, #4]
 80142d8:	b29b      	uxth	r3, r3
 80142da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80142de:	b29a      	uxth	r2, r3
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	889b      	ldrh	r3, [r3, #4]
 80142e8:	b29a      	uxth	r2, r3
 80142ea:	887b      	ldrh	r3, [r7, #2]
 80142ec:	4313      	orrs	r3, r2
 80142ee:	b29a      	uxth	r2, r3
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	809a      	strh	r2, [r3, #4]
}
 80142f4:	370c      	adds	r7, #12
 80142f6:	46bd      	mov	sp, r7
 80142f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142fc:	4770      	bx	lr
 80142fe:	bf00      	nop

08014300 <TIM_SelectSlaveMode>:
  *            @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI
  *            @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
 8014300:	b480      	push	{r7}
 8014302:	b083      	sub	sp, #12
 8014304:	af00      	add	r7, sp, #0
 8014306:	6078      	str	r0, [r7, #4]
 8014308:	460b      	mov	r3, r1
 801430a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	891b      	ldrh	r3, [r3, #8]
 8014310:	b29b      	uxth	r3, r3
 8014312:	f023 0307 	bic.w	r3, r3, #7
 8014316:	b29a      	uxth	r2, r3
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	811a      	strh	r2, [r3, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	891b      	ldrh	r3, [r3, #8]
 8014320:	b29a      	uxth	r2, r3
 8014322:	887b      	ldrh	r3, [r7, #2]
 8014324:	4313      	orrs	r3, r2
 8014326:	b29a      	uxth	r2, r3
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	811a      	strh	r2, [r3, #8]
}
 801432c:	370c      	adds	r7, #12
 801432e:	46bd      	mov	sp, r7
 8014330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014334:	4770      	bx	lr
 8014336:	bf00      	nop

08014338 <TIM_SelectMasterSlaveMode>:
  *                                             and its slaves (through TRGO)
  *            @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
 8014338:	b480      	push	{r7}
 801433a:	b083      	sub	sp, #12
 801433c:	af00      	add	r7, sp, #0
 801433e:	6078      	str	r0, [r7, #4]
 8014340:	460b      	mov	r3, r1
 8014342:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	891b      	ldrh	r3, [r3, #8]
 8014348:	b29b      	uxth	r3, r3
 801434a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801434e:	b29a      	uxth	r2, r3
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	891b      	ldrh	r3, [r3, #8]
 8014358:	b29a      	uxth	r2, r3
 801435a:	887b      	ldrh	r3, [r7, #2]
 801435c:	4313      	orrs	r3, r2
 801435e:	b29a      	uxth	r2, r3
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	811a      	strh	r2, [r3, #8]
}
 8014364:	370c      	adds	r7, #12
 8014366:	46bd      	mov	sp, r7
 8014368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801436c:	4770      	bx	lr
 801436e:	bf00      	nop

08014370 <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8014370:	b480      	push	{r7}
 8014372:	b087      	sub	sp, #28
 8014374:	af00      	add	r7, sp, #0
 8014376:	60f8      	str	r0, [r7, #12]
 8014378:	8179      	strh	r1, [r7, #10]
 801437a:	813a      	strh	r2, [r7, #8]
 801437c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 801437e:	2300      	movs	r3, #0
 8014380:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 8014382:	68fb      	ldr	r3, [r7, #12]
 8014384:	891b      	ldrh	r3, [r3, #8]
 8014386:	82fb      	strh	r3, [r7, #22]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8014388:	8afb      	ldrh	r3, [r7, #22]
 801438a:	b2db      	uxtb	r3, r3
 801438c:	82fb      	strh	r3, [r7, #22]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 801438e:	88fb      	ldrh	r3, [r7, #6]
 8014390:	021b      	lsls	r3, r3, #8
 8014392:	b29a      	uxth	r2, r3
 8014394:	893b      	ldrh	r3, [r7, #8]
 8014396:	4313      	orrs	r3, r2
 8014398:	b29a      	uxth	r2, r3
 801439a:	897b      	ldrh	r3, [r7, #10]
 801439c:	4313      	orrs	r3, r2
 801439e:	b29a      	uxth	r2, r3
 80143a0:	8afb      	ldrh	r3, [r7, #22]
 80143a2:	4313      	orrs	r3, r2
 80143a4:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	8afa      	ldrh	r2, [r7, #22]
 80143aa:	811a      	strh	r2, [r3, #8]
}
 80143ac:	371c      	adds	r7, #28
 80143ae:	46bd      	mov	sp, r7
 80143b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143b4:	4770      	bx	lr
 80143b6:	bf00      	nop

080143b8 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 80143b8:	b480      	push	{r7}
 80143ba:	b087      	sub	sp, #28
 80143bc:	af00      	add	r7, sp, #0
 80143be:	60f8      	str	r0, [r7, #12]
 80143c0:	8179      	strh	r1, [r7, #10]
 80143c2:	813a      	strh	r2, [r7, #8]
 80143c4:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 80143c6:	2300      	movs	r3, #0
 80143c8:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 80143ca:	2300      	movs	r3, #0
 80143cc:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 80143ce:	2300      	movs	r3, #0
 80143d0:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	891b      	ldrh	r3, [r3, #8]
 80143d6:	82fb      	strh	r3, [r7, #22]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	8b1b      	ldrh	r3, [r3, #24]
 80143dc:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	8c1b      	ldrh	r3, [r3, #32]
 80143e2:	827b      	strh	r3, [r7, #18]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80143e4:	8afb      	ldrh	r3, [r7, #22]
 80143e6:	f023 0307 	bic.w	r3, r3, #7
 80143ea:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 80143ec:	8afa      	ldrh	r2, [r7, #22]
 80143ee:	897b      	ldrh	r3, [r7, #10]
 80143f0:	4313      	orrs	r3, r2
 80143f2:	82fb      	strh	r3, [r7, #22]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80143f4:	8abb      	ldrh	r3, [r7, #20]
 80143f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80143fa:	f023 0303 	bic.w	r3, r3, #3
 80143fe:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8014400:	8abb      	ldrh	r3, [r7, #20]
 8014402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014406:	f043 0301 	orr.w	r3, r3, #1
 801440a:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 801440c:	8a7b      	ldrh	r3, [r7, #18]
 801440e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8014412:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8014414:	88fb      	ldrh	r3, [r7, #6]
 8014416:	011b      	lsls	r3, r3, #4
 8014418:	b29a      	uxth	r2, r3
 801441a:	893b      	ldrh	r3, [r7, #8]
 801441c:	4313      	orrs	r3, r2
 801441e:	b29a      	uxth	r2, r3
 8014420:	8a7b      	ldrh	r3, [r7, #18]
 8014422:	4313      	orrs	r3, r2
 8014424:	827b      	strh	r3, [r7, #18]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	8afa      	ldrh	r2, [r7, #22]
 801442a:	811a      	strh	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	8aba      	ldrh	r2, [r7, #20]
 8014430:	831a      	strh	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014432:	68fb      	ldr	r3, [r7, #12]
 8014434:	8a7a      	ldrh	r2, [r7, #18]
 8014436:	841a      	strh	r2, [r3, #32]
}
 8014438:	371c      	adds	r7, #28
 801443a:	46bd      	mov	sp, r7
 801443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014440:	4770      	bx	lr
 8014442:	bf00      	nop

08014444 <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8014444:	b480      	push	{r7}
 8014446:	b083      	sub	sp, #12
 8014448:	af00      	add	r7, sp, #0
 801444a:	6078      	str	r0, [r7, #4]
 801444c:	460b      	mov	r3, r1
 801444e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8014450:	78fb      	ldrb	r3, [r7, #3]
 8014452:	2b00      	cmp	r3, #0
 8014454:	d008      	beq.n	8014468 <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	889b      	ldrh	r3, [r3, #4]
 801445a:	b29b      	uxth	r3, r3
 801445c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014460:	b29a      	uxth	r2, r3
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	809a      	strh	r2, [r3, #4]
 8014466:	e007      	b.n	8014478 <TIM_SelectHallSensor+0x34>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	889b      	ldrh	r3, [r3, #4]
 801446c:	b29b      	uxth	r3, r3
 801446e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014472:	b29a      	uxth	r2, r3
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	809a      	strh	r2, [r3, #4]
  }
}
 8014478:	370c      	adds	r7, #12
 801447a:	46bd      	mov	sp, r7
 801447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014480:	4770      	bx	lr
 8014482:	bf00      	nop

08014484 <TIM_RemapConfig>:
  *            @arg TIM11_HSE:      TIM11 CH4 input is connected to HSE_RTC clock
  *                                 (HSE divided by a programmable prescaler)  
  * @retval None
  */
void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
{
 8014484:	b480      	push	{r7}
 8014486:	b083      	sub	sp, #12
 8014488:	af00      	add	r7, sp, #0
 801448a:	6078      	str	r0, [r7, #4]
 801448c:	460b      	mov	r3, r1
 801448e:	807b      	strh	r3, [r7, #2]
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	887a      	ldrh	r2, [r7, #2]
 8014494:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 8014498:	370c      	adds	r7, #12
 801449a:	46bd      	mov	sp, r7
 801449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144a0:	4770      	bx	lr
 80144a2:	bf00      	nop

080144a4 <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80144a4:	b480      	push	{r7}
 80144a6:	b087      	sub	sp, #28
 80144a8:	af00      	add	r7, sp, #0
 80144aa:	60f8      	str	r0, [r7, #12]
 80144ac:	8179      	strh	r1, [r7, #10]
 80144ae:	813a      	strh	r2, [r7, #8]
 80144b0:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 80144b2:	2300      	movs	r3, #0
 80144b4:	82fb      	strh	r3, [r7, #22]
 80144b6:	2300      	movs	r3, #0
 80144b8:	82bb      	strh	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 80144ba:	68fb      	ldr	r3, [r7, #12]
 80144bc:	8c1b      	ldrh	r3, [r3, #32]
 80144be:	b29b      	uxth	r3, r3
 80144c0:	f023 0301 	bic.w	r3, r3, #1
 80144c4:	b29a      	uxth	r2, r3
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	8b1b      	ldrh	r3, [r3, #24]
 80144ce:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	8c1b      	ldrh	r3, [r3, #32]
 80144d4:	82bb      	strh	r3, [r7, #20]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 80144d6:	8afb      	ldrh	r3, [r7, #22]
 80144d8:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 80144dc:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80144de:	88fb      	ldrh	r3, [r7, #6]
 80144e0:	011b      	lsls	r3, r3, #4
 80144e2:	b29a      	uxth	r2, r3
 80144e4:	893b      	ldrh	r3, [r7, #8]
 80144e6:	4313      	orrs	r3, r2
 80144e8:	b29a      	uxth	r2, r3
 80144ea:	8afb      	ldrh	r3, [r7, #22]
 80144ec:	4313      	orrs	r3, r2
 80144ee:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80144f0:	8abb      	ldrh	r3, [r7, #20]
 80144f2:	f023 030a 	bic.w	r3, r3, #10
 80144f6:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 80144f8:	897a      	ldrh	r2, [r7, #10]
 80144fa:	8abb      	ldrh	r3, [r7, #20]
 80144fc:	4313      	orrs	r3, r2
 80144fe:	b29b      	uxth	r3, r3
 8014500:	f043 0301 	orr.w	r3, r3, #1
 8014504:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	8afa      	ldrh	r2, [r7, #22]
 801450a:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801450c:	68fb      	ldr	r3, [r7, #12]
 801450e:	8aba      	ldrh	r2, [r7, #20]
 8014510:	841a      	strh	r2, [r3, #32]
}
 8014512:	371c      	adds	r7, #28
 8014514:	46bd      	mov	sp, r7
 8014516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801451a:	4770      	bx	lr

0801451c <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 801451c:	b480      	push	{r7}
 801451e:	b087      	sub	sp, #28
 8014520:	af00      	add	r7, sp, #0
 8014522:	60f8      	str	r0, [r7, #12]
 8014524:	8179      	strh	r1, [r7, #10]
 8014526:	813a      	strh	r2, [r7, #8]
 8014528:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 801452a:	2300      	movs	r3, #0
 801452c:	82fb      	strh	r3, [r7, #22]
 801452e:	2300      	movs	r3, #0
 8014530:	82bb      	strh	r3, [r7, #20]
 8014532:	2300      	movs	r3, #0
 8014534:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	8c1b      	ldrh	r3, [r3, #32]
 801453a:	b29b      	uxth	r3, r3
 801453c:	f023 0310 	bic.w	r3, r3, #16
 8014540:	b29a      	uxth	r2, r3
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014546:	68fb      	ldr	r3, [r7, #12]
 8014548:	8b1b      	ldrh	r3, [r3, #24]
 801454a:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	8c1b      	ldrh	r3, [r3, #32]
 8014550:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8014552:	897b      	ldrh	r3, [r7, #10]
 8014554:	011b      	lsls	r3, r3, #4
 8014556:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8014558:	8afb      	ldrh	r3, [r7, #22]
 801455a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801455e:	051b      	lsls	r3, r3, #20
 8014560:	0d1b      	lsrs	r3, r3, #20
 8014562:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8014564:	88fb      	ldrh	r3, [r7, #6]
 8014566:	031b      	lsls	r3, r3, #12
 8014568:	b29a      	uxth	r2, r3
 801456a:	8afb      	ldrh	r3, [r7, #22]
 801456c:	4313      	orrs	r3, r2
 801456e:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8014570:	893b      	ldrh	r3, [r7, #8]
 8014572:	021b      	lsls	r3, r3, #8
 8014574:	b29a      	uxth	r2, r3
 8014576:	8afb      	ldrh	r3, [r7, #22]
 8014578:	4313      	orrs	r3, r2
 801457a:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801457c:	8abb      	ldrh	r3, [r7, #20]
 801457e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8014582:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8014584:	8a7a      	ldrh	r2, [r7, #18]
 8014586:	8abb      	ldrh	r3, [r7, #20]
 8014588:	4313      	orrs	r3, r2
 801458a:	b29b      	uxth	r3, r3
 801458c:	f043 0310 	orr.w	r3, r3, #16
 8014590:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8014592:	68fb      	ldr	r3, [r7, #12]
 8014594:	8afa      	ldrh	r2, [r7, #22]
 8014596:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014598:	68fb      	ldr	r3, [r7, #12]
 801459a:	8aba      	ldrh	r2, [r7, #20]
 801459c:	841a      	strh	r2, [r3, #32]
}
 801459e:	371c      	adds	r7, #28
 80145a0:	46bd      	mov	sp, r7
 80145a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145a6:	4770      	bx	lr

080145a8 <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80145a8:	b480      	push	{r7}
 80145aa:	b087      	sub	sp, #28
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	60f8      	str	r0, [r7, #12]
 80145b0:	8179      	strh	r1, [r7, #10]
 80145b2:	813a      	strh	r2, [r7, #8]
 80145b4:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 80145b6:	2300      	movs	r3, #0
 80145b8:	82fb      	strh	r3, [r7, #22]
 80145ba:	2300      	movs	r3, #0
 80145bc:	82bb      	strh	r3, [r7, #20]
 80145be:	2300      	movs	r3, #0
 80145c0:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 80145c2:	68fb      	ldr	r3, [r7, #12]
 80145c4:	8c1b      	ldrh	r3, [r3, #32]
 80145c6:	b29b      	uxth	r3, r3
 80145c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80145cc:	b29a      	uxth	r2, r3
 80145ce:	68fb      	ldr	r3, [r7, #12]
 80145d0:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80145d2:	68fb      	ldr	r3, [r7, #12]
 80145d4:	8b9b      	ldrh	r3, [r3, #28]
 80145d6:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	8c1b      	ldrh	r3, [r3, #32]
 80145dc:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 80145de:	897b      	ldrh	r3, [r7, #10]
 80145e0:	021b      	lsls	r3, r3, #8
 80145e2:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 80145e4:	8afb      	ldrh	r3, [r7, #22]
 80145e6:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 80145ea:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80145ec:	88fb      	ldrh	r3, [r7, #6]
 80145ee:	011b      	lsls	r3, r3, #4
 80145f0:	b29a      	uxth	r2, r3
 80145f2:	893b      	ldrh	r3, [r7, #8]
 80145f4:	4313      	orrs	r3, r2
 80145f6:	b29a      	uxth	r2, r3
 80145f8:	8afb      	ldrh	r3, [r7, #22]
 80145fa:	4313      	orrs	r3, r2
 80145fc:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80145fe:	8abb      	ldrh	r3, [r7, #20]
 8014600:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8014604:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8014606:	8a7a      	ldrh	r2, [r7, #18]
 8014608:	8abb      	ldrh	r3, [r7, #20]
 801460a:	4313      	orrs	r3, r2
 801460c:	b29b      	uxth	r3, r3
 801460e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014612:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8014614:	68fb      	ldr	r3, [r7, #12]
 8014616:	8afa      	ldrh	r2, [r7, #22]
 8014618:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 801461a:	68fb      	ldr	r3, [r7, #12]
 801461c:	8aba      	ldrh	r2, [r7, #20]
 801461e:	841a      	strh	r2, [r3, #32]
}
 8014620:	371c      	adds	r7, #28
 8014622:	46bd      	mov	sp, r7
 8014624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014628:	4770      	bx	lr
 801462a:	bf00      	nop

0801462c <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 801462c:	b480      	push	{r7}
 801462e:	b087      	sub	sp, #28
 8014630:	af00      	add	r7, sp, #0
 8014632:	60f8      	str	r0, [r7, #12]
 8014634:	8179      	strh	r1, [r7, #10]
 8014636:	813a      	strh	r2, [r7, #8]
 8014638:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 801463a:	2300      	movs	r3, #0
 801463c:	82fb      	strh	r3, [r7, #22]
 801463e:	2300      	movs	r3, #0
 8014640:	82bb      	strh	r3, [r7, #20]
 8014642:	2300      	movs	r3, #0
 8014644:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	8c1b      	ldrh	r3, [r3, #32]
 801464a:	b29b      	uxth	r3, r3
 801464c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014650:	b29a      	uxth	r2, r3
 8014652:	68fb      	ldr	r3, [r7, #12]
 8014654:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8014656:	68fb      	ldr	r3, [r7, #12]
 8014658:	8b9b      	ldrh	r3, [r3, #28]
 801465a:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	8c1b      	ldrh	r3, [r3, #32]
 8014660:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8014662:	897b      	ldrh	r3, [r7, #10]
 8014664:	031b      	lsls	r3, r3, #12
 8014666:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8014668:	8afb      	ldrh	r3, [r7, #22]
 801466a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801466e:	051b      	lsls	r3, r3, #20
 8014670:	0d1b      	lsrs	r3, r3, #20
 8014672:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8014674:	893b      	ldrh	r3, [r7, #8]
 8014676:	021b      	lsls	r3, r3, #8
 8014678:	b29a      	uxth	r2, r3
 801467a:	8afb      	ldrh	r3, [r7, #22]
 801467c:	4313      	orrs	r3, r2
 801467e:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8014680:	88fb      	ldrh	r3, [r7, #6]
 8014682:	031b      	lsls	r3, r3, #12
 8014684:	b29a      	uxth	r2, r3
 8014686:	8afb      	ldrh	r3, [r7, #22]
 8014688:	4313      	orrs	r3, r2
 801468a:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 801468c:	8abb      	ldrh	r3, [r7, #20]
 801468e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014692:	045b      	lsls	r3, r3, #17
 8014694:	0c5b      	lsrs	r3, r3, #17
 8014696:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8014698:	8a7a      	ldrh	r2, [r7, #18]
 801469a:	8abb      	ldrh	r3, [r7, #20]
 801469c:	4313      	orrs	r3, r2
 801469e:	b29b      	uxth	r3, r3
 80146a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80146a4:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80146a6:	68fb      	ldr	r3, [r7, #12]
 80146a8:	8afa      	ldrh	r2, [r7, #22]
 80146aa:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80146ac:	68fb      	ldr	r3, [r7, #12]
 80146ae:	8aba      	ldrh	r2, [r7, #20]
 80146b0:	841a      	strh	r2, [r3, #32]
}
 80146b2:	371c      	adds	r7, #28
 80146b4:	46bd      	mov	sp, r7
 80146b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ba:	4770      	bx	lr

080146bc <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 80146bc:	b580      	push	{r7, lr}
 80146be:	b082      	sub	sp, #8
 80146c0:	af00      	add	r7, sp, #0
 80146c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 80146c4:	687a      	ldr	r2, [r7, #4]
 80146c6:	4b3a      	ldr	r3, [pc, #232]	; (80147b0 <USART_DeInit+0xf4>)
 80146c8:	429a      	cmp	r2, r3
 80146ca:	d108      	bne.n	80146de <USART_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 80146cc:	2010      	movs	r0, #16
 80146ce:	2101      	movs	r1, #1
 80146d0:	f7fb fbd8 	bl	800fe84 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 80146d4:	2010      	movs	r0, #16
 80146d6:	2100      	movs	r1, #0
 80146d8:	f7fb fbd4 	bl	800fe84 <RCC_APB2PeriphResetCmd>
 80146dc:	e065      	b.n	80147aa <USART_DeInit+0xee>
  }
  else if (USARTx == USART2)
 80146de:	687a      	ldr	r2, [r7, #4]
 80146e0:	4b34      	ldr	r3, [pc, #208]	; (80147b4 <USART_DeInit+0xf8>)
 80146e2:	429a      	cmp	r2, r3
 80146e4:	d10a      	bne.n	80146fc <USART_DeInit+0x40>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 80146e6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80146ea:	2101      	movs	r1, #1
 80146ec:	f7fb fbac 	bl	800fe48 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 80146f0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80146f4:	2100      	movs	r1, #0
 80146f6:	f7fb fba7 	bl	800fe48 <RCC_APB1PeriphResetCmd>
 80146fa:	e056      	b.n	80147aa <USART_DeInit+0xee>
  }
  else if (USARTx == USART3)
 80146fc:	687a      	ldr	r2, [r7, #4]
 80146fe:	4b2e      	ldr	r3, [pc, #184]	; (80147b8 <USART_DeInit+0xfc>)
 8014700:	429a      	cmp	r2, r3
 8014702:	d10a      	bne.n	801471a <USART_DeInit+0x5e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8014704:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8014708:	2101      	movs	r1, #1
 801470a:	f7fb fb9d 	bl	800fe48 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 801470e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8014712:	2100      	movs	r1, #0
 8014714:	f7fb fb98 	bl	800fe48 <RCC_APB1PeriphResetCmd>
 8014718:	e047      	b.n	80147aa <USART_DeInit+0xee>
  }    
  else if (USARTx == UART4)
 801471a:	687a      	ldr	r2, [r7, #4]
 801471c:	4b27      	ldr	r3, [pc, #156]	; (80147bc <USART_DeInit+0x100>)
 801471e:	429a      	cmp	r2, r3
 8014720:	d10a      	bne.n	8014738 <USART_DeInit+0x7c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8014722:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8014726:	2101      	movs	r1, #1
 8014728:	f7fb fb8e 	bl	800fe48 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 801472c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8014730:	2100      	movs	r1, #0
 8014732:	f7fb fb89 	bl	800fe48 <RCC_APB1PeriphResetCmd>
 8014736:	e038      	b.n	80147aa <USART_DeInit+0xee>
  }
  else if (USARTx == UART5)
 8014738:	687a      	ldr	r2, [r7, #4]
 801473a:	4b21      	ldr	r3, [pc, #132]	; (80147c0 <USART_DeInit+0x104>)
 801473c:	429a      	cmp	r2, r3
 801473e:	d10a      	bne.n	8014756 <USART_DeInit+0x9a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8014740:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8014744:	2101      	movs	r1, #1
 8014746:	f7fb fb7f 	bl	800fe48 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 801474a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 801474e:	2100      	movs	r1, #0
 8014750:	f7fb fb7a 	bl	800fe48 <RCC_APB1PeriphResetCmd>
 8014754:	e029      	b.n	80147aa <USART_DeInit+0xee>
  }  
  else if (USARTx == USART6)
 8014756:	687a      	ldr	r2, [r7, #4]
 8014758:	4b1a      	ldr	r3, [pc, #104]	; (80147c4 <USART_DeInit+0x108>)
 801475a:	429a      	cmp	r2, r3
 801475c:	d108      	bne.n	8014770 <USART_DeInit+0xb4>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 801475e:	2020      	movs	r0, #32
 8014760:	2101      	movs	r1, #1
 8014762:	f7fb fb8f 	bl	800fe84 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8014766:	2020      	movs	r0, #32
 8014768:	2100      	movs	r1, #0
 801476a:	f7fb fb8b 	bl	800fe84 <RCC_APB2PeriphResetCmd>
 801476e:	e01c      	b.n	80147aa <USART_DeInit+0xee>
  }
  else if (USARTx == UART7)
 8014770:	687a      	ldr	r2, [r7, #4]
 8014772:	4b15      	ldr	r3, [pc, #84]	; (80147c8 <USART_DeInit+0x10c>)
 8014774:	429a      	cmp	r2, r3
 8014776:	d10a      	bne.n	801478e <USART_DeInit+0xd2>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
 8014778:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 801477c:	2101      	movs	r1, #1
 801477e:	f7fb fb63 	bl	800fe48 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 8014782:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8014786:	2100      	movs	r1, #0
 8014788:	f7fb fb5e 	bl	800fe48 <RCC_APB1PeriphResetCmd>
 801478c:	e00d      	b.n	80147aa <USART_DeInit+0xee>
  }     
  else
  {
    if (USARTx == UART8)
 801478e:	687a      	ldr	r2, [r7, #4]
 8014790:	4b0e      	ldr	r3, [pc, #56]	; (80147cc <USART_DeInit+0x110>)
 8014792:	429a      	cmp	r2, r3
 8014794:	d109      	bne.n	80147aa <USART_DeInit+0xee>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
 8014796:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 801479a:	2101      	movs	r1, #1
 801479c:	f7fb fb54 	bl	800fe48 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 80147a0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80147a4:	2100      	movs	r1, #0
 80147a6:	f7fb fb4f 	bl	800fe48 <RCC_APB1PeriphResetCmd>
    }
  }
}
 80147aa:	3708      	adds	r7, #8
 80147ac:	46bd      	mov	sp, r7
 80147ae:	bd80      	pop	{r7, pc}
 80147b0:	40011000 	.word	0x40011000
 80147b4:	40004400 	.word	0x40004400
 80147b8:	40004800 	.word	0x40004800
 80147bc:	40004c00 	.word	0x40004c00
 80147c0:	40005000 	.word	0x40005000
 80147c4:	40011400 	.word	0x40011400
 80147c8:	40007800 	.word	0x40007800
 80147cc:	40007c00 	.word	0x40007c00

080147d0 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80147d0:	b580      	push	{r7, lr}
 80147d2:	b08a      	sub	sp, #40	; 0x28
 80147d4:	af00      	add	r7, sp, #0
 80147d6:	6078      	str	r0, [r7, #4]
 80147d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80147da:	2300      	movs	r3, #0
 80147dc:	627b      	str	r3, [r7, #36]	; 0x24
 80147de:	2300      	movs	r3, #0
 80147e0:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80147e2:	2300      	movs	r3, #0
 80147e4:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80147e6:	2300      	movs	r3, #0
 80147e8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	8a1b      	ldrh	r3, [r3, #16]
 80147ee:	b29b      	uxth	r3, r3
 80147f0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80147f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80147f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80147fa:	683b      	ldr	r3, [r7, #0]
 80147fc:	88db      	ldrh	r3, [r3, #6]
 80147fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014800:	4313      	orrs	r3, r2
 8014802:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8014804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014806:	b29a      	uxth	r2, r3
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	899b      	ldrh	r3, [r3, #12]
 8014810:	b29b      	uxth	r3, r3
 8014812:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8014814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014816:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 801481a:	f023 030c 	bic.w	r3, r3, #12
 801481e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8014820:	683b      	ldr	r3, [r7, #0]
 8014822:	889a      	ldrh	r2, [r3, #4]
 8014824:	683b      	ldr	r3, [r7, #0]
 8014826:	891b      	ldrh	r3, [r3, #8]
 8014828:	4313      	orrs	r3, r2
 801482a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 801482c:	683b      	ldr	r3, [r7, #0]
 801482e:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8014830:	4313      	orrs	r3, r2
 8014832:	b29b      	uxth	r3, r3
 8014834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014836:	4313      	orrs	r3, r2
 8014838:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 801483a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801483c:	b29a      	uxth	r2, r3
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	8a9b      	ldrh	r3, [r3, #20]
 8014846:	b29b      	uxth	r3, r3
 8014848:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 801484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801484c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014850:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8014852:	683b      	ldr	r3, [r7, #0]
 8014854:	899b      	ldrh	r3, [r3, #12]
 8014856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014858:	4313      	orrs	r3, r2
 801485a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 801485c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801485e:	b29a      	uxth	r2, r3
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8014864:	f107 0308 	add.w	r3, r7, #8
 8014868:	4618      	mov	r0, r3
 801486a:	f7fb f851 	bl	800f910 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 801486e:	687a      	ldr	r2, [r7, #4]
 8014870:	4b31      	ldr	r3, [pc, #196]	; (8014938 <USART_Init+0x168>)
 8014872:	429a      	cmp	r2, r3
 8014874:	d003      	beq.n	801487e <USART_Init+0xae>
 8014876:	687a      	ldr	r2, [r7, #4]
 8014878:	4b30      	ldr	r3, [pc, #192]	; (801493c <USART_Init+0x16c>)
 801487a:	429a      	cmp	r2, r3
 801487c:	d102      	bne.n	8014884 <USART_Init+0xb4>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 801487e:	697b      	ldr	r3, [r7, #20]
 8014880:	623b      	str	r3, [r7, #32]
 8014882:	e001      	b.n	8014888 <USART_Init+0xb8>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8014884:	693b      	ldr	r3, [r7, #16]
 8014886:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	899b      	ldrh	r3, [r3, #12]
 801488c:	b29b      	uxth	r3, r3
 801488e:	b29b      	uxth	r3, r3
 8014890:	b21b      	sxth	r3, r3
 8014892:	2b00      	cmp	r3, #0
 8014894:	da0c      	bge.n	80148b0 <USART_Init+0xe0>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8014896:	6a3a      	ldr	r2, [r7, #32]
 8014898:	4613      	mov	r3, r2
 801489a:	009b      	lsls	r3, r3, #2
 801489c:	4413      	add	r3, r2
 801489e:	009a      	lsls	r2, r3, #2
 80148a0:	441a      	add	r2, r3
 80148a2:	683b      	ldr	r3, [r7, #0]
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	005b      	lsls	r3, r3, #1
 80148a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80148ac:	61fb      	str	r3, [r7, #28]
 80148ae:	e00b      	b.n	80148c8 <USART_Init+0xf8>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80148b0:	6a3a      	ldr	r2, [r7, #32]
 80148b2:	4613      	mov	r3, r2
 80148b4:	009b      	lsls	r3, r3, #2
 80148b6:	4413      	add	r3, r2
 80148b8:	009a      	lsls	r2, r3, #2
 80148ba:	441a      	add	r2, r3
 80148bc:	683b      	ldr	r3, [r7, #0]
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	009b      	lsls	r3, r3, #2
 80148c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80148c6:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80148c8:	69fa      	ldr	r2, [r7, #28]
 80148ca:	4b1d      	ldr	r3, [pc, #116]	; (8014940 <USART_Init+0x170>)
 80148cc:	fba3 1302 	umull	r1, r3, r3, r2
 80148d0:	095b      	lsrs	r3, r3, #5
 80148d2:	011b      	lsls	r3, r3, #4
 80148d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80148d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148d8:	091b      	lsrs	r3, r3, #4
 80148da:	2264      	movs	r2, #100	; 0x64
 80148dc:	fb02 f303 	mul.w	r3, r2, r3
 80148e0:	69fa      	ldr	r2, [r7, #28]
 80148e2:	1ad3      	subs	r3, r2, r3
 80148e4:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	899b      	ldrh	r3, [r3, #12]
 80148ea:	b29b      	uxth	r3, r3
 80148ec:	b29b      	uxth	r3, r3
 80148ee:	b21b      	sxth	r3, r3
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	da0d      	bge.n	8014910 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80148f4:	69bb      	ldr	r3, [r7, #24]
 80148f6:	00db      	lsls	r3, r3, #3
 80148f8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80148fc:	4b10      	ldr	r3, [pc, #64]	; (8014940 <USART_Init+0x170>)
 80148fe:	fba3 1302 	umull	r1, r3, r3, r2
 8014902:	095b      	lsrs	r3, r3, #5
 8014904:	f003 0307 	and.w	r3, r3, #7
 8014908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801490a:	4313      	orrs	r3, r2
 801490c:	627b      	str	r3, [r7, #36]	; 0x24
 801490e:	e00c      	b.n	801492a <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8014910:	69bb      	ldr	r3, [r7, #24]
 8014912:	011b      	lsls	r3, r3, #4
 8014914:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8014918:	4b09      	ldr	r3, [pc, #36]	; (8014940 <USART_Init+0x170>)
 801491a:	fba3 1302 	umull	r1, r3, r3, r2
 801491e:	095b      	lsrs	r3, r3, #5
 8014920:	f003 030f 	and.w	r3, r3, #15
 8014924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014926:	4313      	orrs	r3, r2
 8014928:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 801492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801492c:	b29a      	uxth	r2, r3
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	811a      	strh	r2, [r3, #8]
}
 8014932:	3728      	adds	r7, #40	; 0x28
 8014934:	46bd      	mov	sp, r7
 8014936:	bd80      	pop	{r7, pc}
 8014938:	40011000 	.word	0x40011000
 801493c:	40011400 	.word	0x40011400
 8014940:	51eb851f 	.word	0x51eb851f

08014944 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 8014944:	b480      	push	{r7}
 8014946:	b083      	sub	sp, #12
 8014948:	af00      	add	r7, sp, #0
 801494a:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8014952:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	2200      	movs	r2, #0
 8014958:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	2200      	movs	r2, #0
 801495e:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	2200      	movs	r2, #0
 8014964:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	220c      	movs	r2, #12
 801496a:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	2200      	movs	r2, #0
 8014970:	819a      	strh	r2, [r3, #12]
}
 8014972:	370c      	adds	r7, #12
 8014974:	46bd      	mov	sp, r7
 8014976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801497a:	4770      	bx	lr

0801497c <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 801497c:	b480      	push	{r7}
 801497e:	b085      	sub	sp, #20
 8014980:	af00      	add	r7, sp, #0
 8014982:	6078      	str	r0, [r7, #4]
 8014984:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
 8014986:	2300      	movs	r3, #0
 8014988:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	8a1b      	ldrh	r3, [r3, #16]
 801498e:	b29b      	uxth	r3, r3
 8014990:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8014998:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 801499a:	683b      	ldr	r3, [r7, #0]
 801499c:	881a      	ldrh	r2, [r3, #0]
 801499e:	683b      	ldr	r3, [r7, #0]
 80149a0:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80149a2:	4313      	orrs	r3, r2
 80149a4:	b29a      	uxth	r2, r3
 80149a6:	683b      	ldr	r3, [r7, #0]
 80149a8:	889b      	ldrh	r3, [r3, #4]
 80149aa:	4313      	orrs	r3, r2
 80149ac:	b29a      	uxth	r2, r3
 80149ae:	683b      	ldr	r3, [r7, #0]
 80149b0:	88db      	ldrh	r3, [r3, #6]
 80149b2:	4313      	orrs	r3, r2
 80149b4:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 80149b6:	68fa      	ldr	r2, [r7, #12]
 80149b8:	4313      	orrs	r3, r2
 80149ba:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	b29a      	uxth	r2, r3
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	821a      	strh	r2, [r3, #16]
}
 80149c4:	3714      	adds	r7, #20
 80149c6:	46bd      	mov	sp, r7
 80149c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149cc:	4770      	bx	lr
 80149ce:	bf00      	nop

080149d0 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 80149d0:	b480      	push	{r7}
 80149d2:	b083      	sub	sp, #12
 80149d4:	af00      	add	r7, sp, #0
 80149d6:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	2200      	movs	r2, #0
 80149dc:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	2200      	movs	r2, #0
 80149e2:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	2200      	movs	r2, #0
 80149e8:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	2200      	movs	r2, #0
 80149ee:	80da      	strh	r2, [r3, #6]
}
 80149f0:	370c      	adds	r7, #12
 80149f2:	46bd      	mov	sp, r7
 80149f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149f8:	4770      	bx	lr
 80149fa:	bf00      	nop

080149fc <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80149fc:	b480      	push	{r7}
 80149fe:	b083      	sub	sp, #12
 8014a00:	af00      	add	r7, sp, #0
 8014a02:	6078      	str	r0, [r7, #4]
 8014a04:	460b      	mov	r3, r1
 8014a06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8014a08:	78fb      	ldrb	r3, [r7, #3]
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d008      	beq.n	8014a20 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	899b      	ldrh	r3, [r3, #12]
 8014a12:	b29b      	uxth	r3, r3
 8014a14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014a18:	b29a      	uxth	r2, r3
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	819a      	strh	r2, [r3, #12]
 8014a1e:	e007      	b.n	8014a30 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	899b      	ldrh	r3, [r3, #12]
 8014a24:	b29b      	uxth	r3, r3
 8014a26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014a2a:	b29a      	uxth	r2, r3
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	819a      	strh	r2, [r3, #12]
  }
}
 8014a30:	370c      	adds	r7, #12
 8014a32:	46bd      	mov	sp, r7
 8014a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a38:	4770      	bx	lr
 8014a3a:	bf00      	nop

08014a3c <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock. 
  * @note   The function is used for IrDA mode with UART4 and UART5.   
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
 8014a3c:	b480      	push	{r7}
 8014a3e:	b083      	sub	sp, #12
 8014a40:	af00      	add	r7, sp, #0
 8014a42:	6078      	str	r0, [r7, #4]
 8014a44:	460b      	mov	r3, r1
 8014a46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	8b1b      	ldrh	r3, [r3, #24]
 8014a4c:	b29b      	uxth	r3, r3
 8014a4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8014a52:	b29a      	uxth	r2, r3
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	8b1b      	ldrh	r3, [r3, #24]
 8014a5c:	b29a      	uxth	r2, r3
 8014a5e:	78fb      	ldrb	r3, [r7, #3]
 8014a60:	b29b      	uxth	r3, r3
 8014a62:	4313      	orrs	r3, r2
 8014a64:	b29a      	uxth	r2, r3
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	831a      	strh	r2, [r3, #24]
}
 8014a6a:	370c      	adds	r7, #12
 8014a6c:	46bd      	mov	sp, r7
 8014a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a72:	4770      	bx	lr

08014a74 <USART_OverSampling8Cmd>:
  * @param  NewState: new state of the USART 8x oversampling mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8014a74:	b480      	push	{r7}
 8014a76:	b083      	sub	sp, #12
 8014a78:	af00      	add	r7, sp, #0
 8014a7a:	6078      	str	r0, [r7, #4]
 8014a7c:	460b      	mov	r3, r1
 8014a7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8014a80:	78fb      	ldrb	r3, [r7, #3]
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d00a      	beq.n	8014a9c <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	899b      	ldrh	r3, [r3, #12]
 8014a8a:	b29b      	uxth	r3, r3
 8014a8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014a90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014a94:	b29a      	uxth	r2, r3
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	819a      	strh	r2, [r3, #12]
 8014a9a:	e007      	b.n	8014aac <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	899b      	ldrh	r3, [r3, #12]
 8014aa0:	b29b      	uxth	r3, r3
 8014aa2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8014aa6:	b29a      	uxth	r2, r3
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	819a      	strh	r2, [r3, #12]
  }
}  
 8014aac:	370c      	adds	r7, #12
 8014aae:	46bd      	mov	sp, r7
 8014ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ab4:	4770      	bx	lr
 8014ab6:	bf00      	nop

08014ab8 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8014ab8:	b480      	push	{r7}
 8014aba:	b083      	sub	sp, #12
 8014abc:	af00      	add	r7, sp, #0
 8014abe:	6078      	str	r0, [r7, #4]
 8014ac0:	460b      	mov	r3, r1
 8014ac2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8014ac4:	78fb      	ldrb	r3, [r7, #3]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d008      	beq.n	8014adc <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	8a9b      	ldrh	r3, [r3, #20]
 8014ace:	b29b      	uxth	r3, r3
 8014ad0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014ad4:	b29a      	uxth	r2, r3
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	829a      	strh	r2, [r3, #20]
 8014ada:	e007      	b.n	8014aec <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	8a9b      	ldrh	r3, [r3, #20]
 8014ae0:	b29b      	uxth	r3, r3
 8014ae2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014ae6:	b29a      	uxth	r2, r3
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	829a      	strh	r2, [r3, #20]
  }
}
 8014aec:	370c      	adds	r7, #12
 8014aee:	46bd      	mov	sp, r7
 8014af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014af4:	4770      	bx	lr
 8014af6:	bf00      	nop

08014af8 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8014af8:	b480      	push	{r7}
 8014afa:	b083      	sub	sp, #12
 8014afc:	af00      	add	r7, sp, #0
 8014afe:	6078      	str	r0, [r7, #4]
 8014b00:	460b      	mov	r3, r1
 8014b02:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8014b04:	887b      	ldrh	r3, [r7, #2]
 8014b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014b0a:	b29a      	uxth	r2, r3
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	809a      	strh	r2, [r3, #4]
}
 8014b10:	370c      	adds	r7, #12
 8014b12:	46bd      	mov	sp, r7
 8014b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b18:	4770      	bx	lr
 8014b1a:	bf00      	nop

08014b1c <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8014b1c:	b480      	push	{r7}
 8014b1e:	b083      	sub	sp, #12
 8014b20:	af00      	add	r7, sp, #0
 8014b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	889b      	ldrh	r3, [r3, #4]
 8014b28:	b29b      	uxth	r3, r3
 8014b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014b2e:	b29b      	uxth	r3, r3
}
 8014b30:	4618      	mov	r0, r3
 8014b32:	370c      	adds	r7, #12
 8014b34:	46bd      	mov	sp, r7
 8014b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b3a:	4770      	bx	lr

08014b3c <USART_SetAddress>:
  *         UART peripheral.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
 8014b3c:	b480      	push	{r7}
 8014b3e:	b083      	sub	sp, #12
 8014b40:	af00      	add	r7, sp, #0
 8014b42:	6078      	str	r0, [r7, #4]
 8014b44:	460b      	mov	r3, r1
 8014b46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	8a1b      	ldrh	r3, [r3, #16]
 8014b4c:	b29b      	uxth	r3, r3
 8014b4e:	f023 030f 	bic.w	r3, r3, #15
 8014b52:	b29a      	uxth	r2, r3
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	8a1b      	ldrh	r3, [r3, #16]
 8014b5c:	b29a      	uxth	r2, r3
 8014b5e:	78fb      	ldrb	r3, [r7, #3]
 8014b60:	b29b      	uxth	r3, r3
 8014b62:	4313      	orrs	r3, r2
 8014b64:	b29a      	uxth	r2, r3
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	821a      	strh	r2, [r3, #16]
}
 8014b6a:	370c      	adds	r7, #12
 8014b6c:	46bd      	mov	sp, r7
 8014b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b72:	4770      	bx	lr

08014b74 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8014b74:	b480      	push	{r7}
 8014b76:	b083      	sub	sp, #12
 8014b78:	af00      	add	r7, sp, #0
 8014b7a:	6078      	str	r0, [r7, #4]
 8014b7c:	460b      	mov	r3, r1
 8014b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8014b80:	78fb      	ldrb	r3, [r7, #3]
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d008      	beq.n	8014b98 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	899b      	ldrh	r3, [r3, #12]
 8014b8a:	b29b      	uxth	r3, r3
 8014b8c:	f043 0302 	orr.w	r3, r3, #2
 8014b90:	b29a      	uxth	r2, r3
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	819a      	strh	r2, [r3, #12]
 8014b96:	e007      	b.n	8014ba8 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	899b      	ldrh	r3, [r3, #12]
 8014b9c:	b29b      	uxth	r3, r3
 8014b9e:	f023 0302 	bic.w	r3, r3, #2
 8014ba2:	b29a      	uxth	r2, r3
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	819a      	strh	r2, [r3, #12]
  }
}
 8014ba8:	370c      	adds	r7, #12
 8014baa:	46bd      	mov	sp, r7
 8014bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bb0:	4770      	bx	lr
 8014bb2:	bf00      	nop

08014bb4 <USART_WakeUpConfig>:
  *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
 8014bb4:	b480      	push	{r7}
 8014bb6:	b083      	sub	sp, #12
 8014bb8:	af00      	add	r7, sp, #0
 8014bba:	6078      	str	r0, [r7, #4]
 8014bbc:	460b      	mov	r3, r1
 8014bbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	899b      	ldrh	r3, [r3, #12]
 8014bc4:	b29b      	uxth	r3, r3
 8014bc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014bca:	b29a      	uxth	r2, r3
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	899b      	ldrh	r3, [r3, #12]
 8014bd4:	b29a      	uxth	r2, r3
 8014bd6:	887b      	ldrh	r3, [r7, #2]
 8014bd8:	4313      	orrs	r3, r2
 8014bda:	b29a      	uxth	r2, r3
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	819a      	strh	r2, [r3, #12]
}
 8014be0:	370c      	adds	r7, #12
 8014be2:	46bd      	mov	sp, r7
 8014be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be8:	4770      	bx	lr
 8014bea:	bf00      	nop

08014bec <USART_LINBreakDetectLengthConfig>:
  *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
 8014bec:	b480      	push	{r7}
 8014bee:	b083      	sub	sp, #12
 8014bf0:	af00      	add	r7, sp, #0
 8014bf2:	6078      	str	r0, [r7, #4]
 8014bf4:	460b      	mov	r3, r1
 8014bf6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	8a1b      	ldrh	r3, [r3, #16]
 8014bfc:	b29b      	uxth	r3, r3
 8014bfe:	f023 0320 	bic.w	r3, r3, #32
 8014c02:	b29a      	uxth	r2, r3
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	8a1b      	ldrh	r3, [r3, #16]
 8014c0c:	b29a      	uxth	r2, r3
 8014c0e:	887b      	ldrh	r3, [r7, #2]
 8014c10:	4313      	orrs	r3, r2
 8014c12:	b29a      	uxth	r2, r3
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	821a      	strh	r2, [r3, #16]
}
 8014c18:	370c      	adds	r7, #12
 8014c1a:	46bd      	mov	sp, r7
 8014c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c20:	4770      	bx	lr
 8014c22:	bf00      	nop

08014c24 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8014c24:	b480      	push	{r7}
 8014c26:	b083      	sub	sp, #12
 8014c28:	af00      	add	r7, sp, #0
 8014c2a:	6078      	str	r0, [r7, #4]
 8014c2c:	460b      	mov	r3, r1
 8014c2e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8014c30:	78fb      	ldrb	r3, [r7, #3]
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d008      	beq.n	8014c48 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	8a1b      	ldrh	r3, [r3, #16]
 8014c3a:	b29b      	uxth	r3, r3
 8014c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014c40:	b29a      	uxth	r2, r3
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	821a      	strh	r2, [r3, #16]
 8014c46:	e007      	b.n	8014c58 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	8a1b      	ldrh	r3, [r3, #16]
 8014c4c:	b29b      	uxth	r3, r3
 8014c4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014c52:	b29a      	uxth	r2, r3
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	821a      	strh	r2, [r3, #16]
  }
}
 8014c58:	370c      	adds	r7, #12
 8014c5a:	46bd      	mov	sp, r7
 8014c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c60:	4770      	bx	lr
 8014c62:	bf00      	nop

08014c64 <USART_SendBreak>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
 8014c64:	b480      	push	{r7}
 8014c66:	b083      	sub	sp, #12
 8014c68:	af00      	add	r7, sp, #0
 8014c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	899b      	ldrh	r3, [r3, #12]
 8014c70:	b29b      	uxth	r3, r3
 8014c72:	f043 0301 	orr.w	r3, r3, #1
 8014c76:	b29a      	uxth	r2, r3
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	819a      	strh	r2, [r3, #12]
}
 8014c7c:	370c      	adds	r7, #12
 8014c7e:	46bd      	mov	sp, r7
 8014c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c84:	4770      	bx	lr
 8014c86:	bf00      	nop

08014c88 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8014c88:	b480      	push	{r7}
 8014c8a:	b083      	sub	sp, #12
 8014c8c:	af00      	add	r7, sp, #0
 8014c8e:	6078      	str	r0, [r7, #4]
 8014c90:	460b      	mov	r3, r1
 8014c92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8014c94:	78fb      	ldrb	r3, [r7, #3]
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d008      	beq.n	8014cac <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	8a9b      	ldrh	r3, [r3, #20]
 8014c9e:	b29b      	uxth	r3, r3
 8014ca0:	f043 0308 	orr.w	r3, r3, #8
 8014ca4:	b29a      	uxth	r2, r3
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	829a      	strh	r2, [r3, #20]
 8014caa:	e007      	b.n	8014cbc <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	8a9b      	ldrh	r3, [r3, #20]
 8014cb0:	b29b      	uxth	r3, r3
 8014cb2:	f023 0308 	bic.w	r3, r3, #8
 8014cb6:	b29a      	uxth	r2, r3
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	829a      	strh	r2, [r3, #20]
  }
}
 8014cbc:	370c      	adds	r7, #12
 8014cbe:	46bd      	mov	sp, r7
 8014cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cc4:	4770      	bx	lr
 8014cc6:	bf00      	nop

08014cc8 <USART_SetGuardTime>:
  *         UART peripheral.
  * @param  USART_GuardTime: specifies the guard time.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
 8014cc8:	b480      	push	{r7}
 8014cca:	b083      	sub	sp, #12
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	6078      	str	r0, [r7, #4]
 8014cd0:	460b      	mov	r3, r1
 8014cd2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	8b1b      	ldrh	r3, [r3, #24]
 8014cd8:	b29b      	uxth	r3, r3
 8014cda:	b2db      	uxtb	r3, r3
 8014cdc:	b29a      	uxth	r2, r3
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	8b1b      	ldrh	r3, [r3, #24]
 8014ce6:	b29a      	uxth	r2, r3
 8014ce8:	78fb      	ldrb	r3, [r7, #3]
 8014cea:	b29b      	uxth	r3, r3
 8014cec:	021b      	lsls	r3, r3, #8
 8014cee:	b29b      	uxth	r3, r3
 8014cf0:	4313      	orrs	r3, r2
 8014cf2:	b29a      	uxth	r2, r3
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	831a      	strh	r2, [r3, #24]
}
 8014cf8:	370c      	adds	r7, #12
 8014cfa:	46bd      	mov	sp, r7
 8014cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d00:	4770      	bx	lr
 8014d02:	bf00      	nop

08014d04 <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8014d04:	b480      	push	{r7}
 8014d06:	b083      	sub	sp, #12
 8014d08:	af00      	add	r7, sp, #0
 8014d0a:	6078      	str	r0, [r7, #4]
 8014d0c:	460b      	mov	r3, r1
 8014d0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8014d10:	78fb      	ldrb	r3, [r7, #3]
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d008      	beq.n	8014d28 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	8a9b      	ldrh	r3, [r3, #20]
 8014d1a:	b29b      	uxth	r3, r3
 8014d1c:	f043 0320 	orr.w	r3, r3, #32
 8014d20:	b29a      	uxth	r2, r3
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	829a      	strh	r2, [r3, #20]
 8014d26:	e007      	b.n	8014d38 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	8a9b      	ldrh	r3, [r3, #20]
 8014d2c:	b29b      	uxth	r3, r3
 8014d2e:	f023 0320 	bic.w	r3, r3, #32
 8014d32:	b29a      	uxth	r2, r3
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	829a      	strh	r2, [r3, #20]
  }
}
 8014d38:	370c      	adds	r7, #12
 8014d3a:	46bd      	mov	sp, r7
 8014d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d40:	4770      	bx	lr
 8014d42:	bf00      	nop

08014d44 <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8014d44:	b480      	push	{r7}
 8014d46:	b083      	sub	sp, #12
 8014d48:	af00      	add	r7, sp, #0
 8014d4a:	6078      	str	r0, [r7, #4]
 8014d4c:	460b      	mov	r3, r1
 8014d4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8014d50:	78fb      	ldrb	r3, [r7, #3]
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d008      	beq.n	8014d68 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	8a9b      	ldrh	r3, [r3, #20]
 8014d5a:	b29b      	uxth	r3, r3
 8014d5c:	f043 0310 	orr.w	r3, r3, #16
 8014d60:	b29a      	uxth	r2, r3
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	829a      	strh	r2, [r3, #20]
 8014d66:	e007      	b.n	8014d78 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	8a9b      	ldrh	r3, [r3, #20]
 8014d6c:	b29b      	uxth	r3, r3
 8014d6e:	f023 0310 	bic.w	r3, r3, #16
 8014d72:	b29a      	uxth	r2, r3
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	829a      	strh	r2, [r3, #20]
  }
}
 8014d78:	370c      	adds	r7, #12
 8014d7a:	46bd      	mov	sp, r7
 8014d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d80:	4770      	bx	lr
 8014d82:	bf00      	nop

08014d84 <USART_IrDAConfig>:
  *            @arg USART_IrDAMode_LowPower
  *            @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
 8014d84:	b480      	push	{r7}
 8014d86:	b083      	sub	sp, #12
 8014d88:	af00      	add	r7, sp, #0
 8014d8a:	6078      	str	r0, [r7, #4]
 8014d8c:	460b      	mov	r3, r1
 8014d8e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	8a9b      	ldrh	r3, [r3, #20]
 8014d94:	b29b      	uxth	r3, r3
 8014d96:	f023 0304 	bic.w	r3, r3, #4
 8014d9a:	b29a      	uxth	r2, r3
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	8a9b      	ldrh	r3, [r3, #20]
 8014da4:	b29a      	uxth	r2, r3
 8014da6:	887b      	ldrh	r3, [r7, #2]
 8014da8:	4313      	orrs	r3, r2
 8014daa:	b29a      	uxth	r2, r3
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	829a      	strh	r2, [r3, #20]
}
 8014db0:	370c      	adds	r7, #12
 8014db2:	46bd      	mov	sp, r7
 8014db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014db8:	4770      	bx	lr
 8014dba:	bf00      	nop

08014dbc <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8014dbc:	b480      	push	{r7}
 8014dbe:	b083      	sub	sp, #12
 8014dc0:	af00      	add	r7, sp, #0
 8014dc2:	6078      	str	r0, [r7, #4]
 8014dc4:	460b      	mov	r3, r1
 8014dc6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8014dc8:	78fb      	ldrb	r3, [r7, #3]
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d008      	beq.n	8014de0 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	8a9b      	ldrh	r3, [r3, #20]
 8014dd2:	b29b      	uxth	r3, r3
 8014dd4:	f043 0302 	orr.w	r3, r3, #2
 8014dd8:	b29a      	uxth	r2, r3
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	829a      	strh	r2, [r3, #20]
 8014dde:	e007      	b.n	8014df0 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	8a9b      	ldrh	r3, [r3, #20]
 8014de4:	b29b      	uxth	r3, r3
 8014de6:	f023 0302 	bic.w	r3, r3, #2
 8014dea:	b29a      	uxth	r2, r3
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	829a      	strh	r2, [r3, #20]
  }
}
 8014df0:	370c      	adds	r7, #12
 8014df2:	46bd      	mov	sp, r7
 8014df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014df8:	4770      	bx	lr
 8014dfa:	bf00      	nop

08014dfc <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 8014dfc:	b480      	push	{r7}
 8014dfe:	b083      	sub	sp, #12
 8014e00:	af00      	add	r7, sp, #0
 8014e02:	6078      	str	r0, [r7, #4]
 8014e04:	4613      	mov	r3, r2
 8014e06:	460a      	mov	r2, r1
 8014e08:	807a      	strh	r2, [r7, #2]
 8014e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8014e0c:	787b      	ldrb	r3, [r7, #1]
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d008      	beq.n	8014e24 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	8a9b      	ldrh	r3, [r3, #20]
 8014e16:	b29a      	uxth	r2, r3
 8014e18:	887b      	ldrh	r3, [r7, #2]
 8014e1a:	4313      	orrs	r3, r2
 8014e1c:	b29a      	uxth	r2, r3
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	829a      	strh	r2, [r3, #20]
 8014e22:	e009      	b.n	8014e38 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	8a9b      	ldrh	r3, [r3, #20]
 8014e28:	b29a      	uxth	r2, r3
 8014e2a:	887b      	ldrh	r3, [r7, #2]
 8014e2c:	43db      	mvns	r3, r3
 8014e2e:	b29b      	uxth	r3, r3
 8014e30:	4013      	ands	r3, r2
 8014e32:	b29a      	uxth	r2, r3
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	829a      	strh	r2, [r3, #20]
  }
}
 8014e38:	370c      	adds	r7, #12
 8014e3a:	46bd      	mov	sp, r7
 8014e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e40:	4770      	bx	lr
 8014e42:	bf00      	nop

08014e44 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8014e44:	b480      	push	{r7}
 8014e46:	b087      	sub	sp, #28
 8014e48:	af00      	add	r7, sp, #0
 8014e4a:	6078      	str	r0, [r7, #4]
 8014e4c:	4613      	mov	r3, r2
 8014e4e:	460a      	mov	r2, r1
 8014e50:	807a      	strh	r2, [r7, #2]
 8014e52:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8014e54:	2300      	movs	r3, #0
 8014e56:	613b      	str	r3, [r7, #16]
 8014e58:	2300      	movs	r3, #0
 8014e5a:	60fb      	str	r3, [r7, #12]
 8014e5c:	2300      	movs	r3, #0
 8014e5e:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8014e60:	2300      	movs	r3, #0
 8014e62:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8014e68:	887b      	ldrh	r3, [r7, #2]
 8014e6a:	b2db      	uxtb	r3, r3
 8014e6c:	095b      	lsrs	r3, r3, #5
 8014e6e:	b2db      	uxtb	r3, r3
 8014e70:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8014e72:	887b      	ldrh	r3, [r7, #2]
 8014e74:	f003 031f 	and.w	r3, r3, #31
 8014e78:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8014e7a:	68fb      	ldr	r3, [r7, #12]
 8014e7c:	2201      	movs	r2, #1
 8014e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8014e82:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8014e84:	693b      	ldr	r3, [r7, #16]
 8014e86:	2b01      	cmp	r3, #1
 8014e88:	d103      	bne.n	8014e92 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8014e8a:	697b      	ldr	r3, [r7, #20]
 8014e8c:	330c      	adds	r3, #12
 8014e8e:	617b      	str	r3, [r7, #20]
 8014e90:	e009      	b.n	8014ea6 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8014e92:	693b      	ldr	r3, [r7, #16]
 8014e94:	2b02      	cmp	r3, #2
 8014e96:	d103      	bne.n	8014ea0 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8014e98:	697b      	ldr	r3, [r7, #20]
 8014e9a:	3310      	adds	r3, #16
 8014e9c:	617b      	str	r3, [r7, #20]
 8014e9e:	e002      	b.n	8014ea6 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8014ea0:	697b      	ldr	r3, [r7, #20]
 8014ea2:	3314      	adds	r3, #20
 8014ea4:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8014ea6:	787b      	ldrb	r3, [r7, #1]
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d006      	beq.n	8014eba <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8014eac:	697b      	ldr	r3, [r7, #20]
 8014eae:	697a      	ldr	r2, [r7, #20]
 8014eb0:	6811      	ldr	r1, [r2, #0]
 8014eb2:	68ba      	ldr	r2, [r7, #8]
 8014eb4:	430a      	orrs	r2, r1
 8014eb6:	601a      	str	r2, [r3, #0]
 8014eb8:	e006      	b.n	8014ec8 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8014eba:	697b      	ldr	r3, [r7, #20]
 8014ebc:	697a      	ldr	r2, [r7, #20]
 8014ebe:	6811      	ldr	r1, [r2, #0]
 8014ec0:	68ba      	ldr	r2, [r7, #8]
 8014ec2:	43d2      	mvns	r2, r2
 8014ec4:	400a      	ands	r2, r1
 8014ec6:	601a      	str	r2, [r3, #0]
  }
}
 8014ec8:	371c      	adds	r7, #28
 8014eca:	46bd      	mov	sp, r7
 8014ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ed0:	4770      	bx	lr
 8014ed2:	bf00      	nop

08014ed4 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8014ed4:	b480      	push	{r7}
 8014ed6:	b085      	sub	sp, #20
 8014ed8:	af00      	add	r7, sp, #0
 8014eda:	6078      	str	r0, [r7, #4]
 8014edc:	460b      	mov	r3, r1
 8014ede:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8014ee0:	2300      	movs	r3, #0
 8014ee2:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	881b      	ldrh	r3, [r3, #0]
 8014ee8:	b29a      	uxth	r2, r3
 8014eea:	887b      	ldrh	r3, [r7, #2]
 8014eec:	4013      	ands	r3, r2
 8014eee:	b29b      	uxth	r3, r3
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d002      	beq.n	8014efa <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8014ef4:	2301      	movs	r3, #1
 8014ef6:	73fb      	strb	r3, [r7, #15]
 8014ef8:	e001      	b.n	8014efe <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8014efa:	2300      	movs	r3, #0
 8014efc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8014efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f00:	4618      	mov	r0, r3
 8014f02:	3714      	adds	r7, #20
 8014f04:	46bd      	mov	sp, r7
 8014f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f0a:	4770      	bx	lr

08014f0c <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8014f0c:	b480      	push	{r7}
 8014f0e:	b083      	sub	sp, #12
 8014f10:	af00      	add	r7, sp, #0
 8014f12:	6078      	str	r0, [r7, #4]
 8014f14:	460b      	mov	r3, r1
 8014f16:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8014f18:	887b      	ldrh	r3, [r7, #2]
 8014f1a:	43db      	mvns	r3, r3
 8014f1c:	b29a      	uxth	r2, r3
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	801a      	strh	r2, [r3, #0]
}
 8014f22:	370c      	adds	r7, #12
 8014f24:	46bd      	mov	sp, r7
 8014f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f2a:	4770      	bx	lr

08014f2c <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8014f2c:	b480      	push	{r7}
 8014f2e:	b087      	sub	sp, #28
 8014f30:	af00      	add	r7, sp, #0
 8014f32:	6078      	str	r0, [r7, #4]
 8014f34:	460b      	mov	r3, r1
 8014f36:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8014f38:	2300      	movs	r3, #0
 8014f3a:	60fb      	str	r3, [r7, #12]
 8014f3c:	2300      	movs	r3, #0
 8014f3e:	617b      	str	r3, [r7, #20]
 8014f40:	2300      	movs	r3, #0
 8014f42:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8014f44:	2300      	movs	r3, #0
 8014f46:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8014f48:	887b      	ldrh	r3, [r7, #2]
 8014f4a:	b2db      	uxtb	r3, r3
 8014f4c:	095b      	lsrs	r3, r3, #5
 8014f4e:	b2db      	uxtb	r3, r3
 8014f50:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8014f52:	887b      	ldrh	r3, [r7, #2]
 8014f54:	f003 031f 	and.w	r3, r3, #31
 8014f58:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8014f5a:	697b      	ldr	r3, [r7, #20]
 8014f5c:	2201      	movs	r2, #1
 8014f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8014f62:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8014f64:	68bb      	ldr	r3, [r7, #8]
 8014f66:	2b01      	cmp	r3, #1
 8014f68:	d106      	bne.n	8014f78 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	899b      	ldrh	r3, [r3, #12]
 8014f6e:	b29b      	uxth	r3, r3
 8014f70:	697a      	ldr	r2, [r7, #20]
 8014f72:	4013      	ands	r3, r2
 8014f74:	617b      	str	r3, [r7, #20]
 8014f76:	e00f      	b.n	8014f98 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8014f78:	68bb      	ldr	r3, [r7, #8]
 8014f7a:	2b02      	cmp	r3, #2
 8014f7c:	d106      	bne.n	8014f8c <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	8a1b      	ldrh	r3, [r3, #16]
 8014f82:	b29b      	uxth	r3, r3
 8014f84:	697a      	ldr	r2, [r7, #20]
 8014f86:	4013      	ands	r3, r2
 8014f88:	617b      	str	r3, [r7, #20]
 8014f8a:	e005      	b.n	8014f98 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	8a9b      	ldrh	r3, [r3, #20]
 8014f90:	b29b      	uxth	r3, r3
 8014f92:	697a      	ldr	r2, [r7, #20]
 8014f94:	4013      	ands	r3, r2
 8014f96:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8014f98:	887b      	ldrh	r3, [r7, #2]
 8014f9a:	0a1b      	lsrs	r3, r3, #8
 8014f9c:	b29b      	uxth	r3, r3
 8014f9e:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	2201      	movs	r2, #1
 8014fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8014fa8:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	881b      	ldrh	r3, [r3, #0]
 8014fae:	b29b      	uxth	r3, r3
 8014fb0:	68fa      	ldr	r2, [r7, #12]
 8014fb2:	4013      	ands	r3, r2
 8014fb4:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8014fb6:	697b      	ldr	r3, [r7, #20]
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d005      	beq.n	8014fc8 <USART_GetITStatus+0x9c>
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d002      	beq.n	8014fc8 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
 8014fc2:	2301      	movs	r3, #1
 8014fc4:	74fb      	strb	r3, [r7, #19]
 8014fc6:	e001      	b.n	8014fcc <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
 8014fc8:	2300      	movs	r3, #0
 8014fca:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8014fcc:	7cfb      	ldrb	r3, [r7, #19]
}
 8014fce:	4618      	mov	r0, r3
 8014fd0:	371c      	adds	r7, #28
 8014fd2:	46bd      	mov	sp, r7
 8014fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fd8:	4770      	bx	lr
 8014fda:	bf00      	nop

08014fdc <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8014fdc:	b480      	push	{r7}
 8014fde:	b085      	sub	sp, #20
 8014fe0:	af00      	add	r7, sp, #0
 8014fe2:	6078      	str	r0, [r7, #4]
 8014fe4:	460b      	mov	r3, r1
 8014fe6:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8014fe8:	2300      	movs	r3, #0
 8014fea:	81fb      	strh	r3, [r7, #14]
 8014fec:	2300      	movs	r3, #0
 8014fee:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8014ff0:	887b      	ldrh	r3, [r7, #2]
 8014ff2:	0a1b      	lsrs	r3, r3, #8
 8014ff4:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8014ff6:	89fb      	ldrh	r3, [r7, #14]
 8014ff8:	2201      	movs	r2, #1
 8014ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8014ffe:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8015000:	89bb      	ldrh	r3, [r7, #12]
 8015002:	43db      	mvns	r3, r3
 8015004:	b29a      	uxth	r2, r3
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	801a      	strh	r2, [r3, #0]
}
 801500a:	3714      	adds	r7, #20
 801500c:	46bd      	mov	sp, r7
 801500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015012:	4770      	bx	lr

08015014 <WWDG_DeInit>:
  * @brief  Deinitializes the WWDG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void WWDG_DeInit(void)
{
 8015014:	b580      	push	{r7, lr}
 8015016:	af00      	add	r7, sp, #0
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
 8015018:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801501c:	2101      	movs	r1, #1
 801501e:	f7fa ff13 	bl	800fe48 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
 8015022:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8015026:	2100      	movs	r1, #0
 8015028:	f7fa ff0e 	bl	800fe48 <RCC_APB1PeriphResetCmd>
}
 801502c:	bd80      	pop	{r7, pc}
 801502e:	bf00      	nop

08015030 <WWDG_SetPrescaler>:
  *     @arg WWDG_Prescaler_4: WWDG counter clock = (PCLK1/4096)/4
  *     @arg WWDG_Prescaler_8: WWDG counter clock = (PCLK1/4096)/8
  * @retval None
  */
void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
{
 8015030:	b480      	push	{r7}
 8015032:	b085      	sub	sp, #20
 8015034:	af00      	add	r7, sp, #0
 8015036:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8015038:	2300      	movs	r3, #0
 801503a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
  /* Clear WDGTB[1:0] bits */
  tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
 801503c:	4b08      	ldr	r3, [pc, #32]	; (8015060 <WWDG_SetPrescaler+0x30>)
 801503e:	685b      	ldr	r3, [r3, #4]
 8015040:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8015044:	60fb      	str	r3, [r7, #12]
  /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
  tmpreg |= WWDG_Prescaler;
 8015046:	68fa      	ldr	r2, [r7, #12]
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	4313      	orrs	r3, r2
 801504c:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  WWDG->CFR = tmpreg;
 801504e:	4b04      	ldr	r3, [pc, #16]	; (8015060 <WWDG_SetPrescaler+0x30>)
 8015050:	68fa      	ldr	r2, [r7, #12]
 8015052:	605a      	str	r2, [r3, #4]
}
 8015054:	3714      	adds	r7, #20
 8015056:	46bd      	mov	sp, r7
 8015058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801505c:	4770      	bx	lr
 801505e:	bf00      	nop
 8015060:	40002c00 	.word	0x40002c00

08015064 <WWDG_SetWindowValue>:
  * @param  WindowValue: specifies the window value to be compared to the downcounter.
  *   This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
 8015064:	b480      	push	{r7}
 8015066:	b085      	sub	sp, #20
 8015068:	af00      	add	r7, sp, #0
 801506a:	4603      	mov	r3, r0
 801506c:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t tmpreg = 0;
 801506e:	2300      	movs	r3, #0
 8015070:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_MASK;
 8015072:	4b09      	ldr	r3, [pc, #36]	; (8015098 <WWDG_SetWindowValue+0x34>)
 8015074:	685b      	ldr	r3, [r3, #4]
 8015076:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801507a:	60fb      	str	r3, [r7, #12]

  /* Set W[6:0] bits according to WindowValue value */
  tmpreg |= WindowValue & (uint32_t) BIT_MASK;
 801507c:	79fb      	ldrb	r3, [r7, #7]
 801507e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	4313      	orrs	r3, r2
 8015086:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  WWDG->CFR = tmpreg;
 8015088:	4b03      	ldr	r3, [pc, #12]	; (8015098 <WWDG_SetWindowValue+0x34>)
 801508a:	68fa      	ldr	r2, [r7, #12]
 801508c:	605a      	str	r2, [r3, #4]
}
 801508e:	3714      	adds	r7, #20
 8015090:	46bd      	mov	sp, r7
 8015092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015096:	4770      	bx	lr
 8015098:	40002c00 	.word	0x40002c00

0801509c <WWDG_EnableIT>:
  * @note   Once enabled this interrupt cannot be disabled except by a system reset.
  * @param  None
  * @retval None
  */
void WWDG_EnableIT(void)
{
 801509c:	b480      	push	{r7}
 801509e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
 80150a0:	4b03      	ldr	r3, [pc, #12]	; (80150b0 <WWDG_EnableIT+0x14>)
 80150a2:	2201      	movs	r2, #1
 80150a4:	601a      	str	r2, [r3, #0]
}
 80150a6:	46bd      	mov	sp, r7
 80150a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ac:	4770      	bx	lr
 80150ae:	bf00      	nop
 80150b0:	420580a4 	.word	0x420580a4

080150b4 <WWDG_SetCounter>:
  *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
  *   an immediate reset) 
  * @retval None
  */
void WWDG_SetCounter(uint8_t Counter)
{
 80150b4:	b480      	push	{r7}
 80150b6:	b083      	sub	sp, #12
 80150b8:	af00      	add	r7, sp, #0
 80150ba:	4603      	mov	r3, r0
 80150bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  /* Write to T[6:0] bits to configure the counter value, no need to do
     a read-modify-write; writing a 0 to WDGA bit does nothing */
  WWDG->CR = Counter & BIT_MASK;
 80150be:	4b05      	ldr	r3, [pc, #20]	; (80150d4 <WWDG_SetCounter+0x20>)
 80150c0:	79fa      	ldrb	r2, [r7, #7]
 80150c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80150c6:	601a      	str	r2, [r3, #0]
}
 80150c8:	370c      	adds	r7, #12
 80150ca:	46bd      	mov	sp, r7
 80150cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d0:	4770      	bx	lr
 80150d2:	bf00      	nop
 80150d4:	40002c00 	.word	0x40002c00

080150d8 <WWDG_Enable>:
  *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
  *   an immediate reset)
  * @retval None
  */
void WWDG_Enable(uint8_t Counter)
{
 80150d8:	b480      	push	{r7}
 80150da:	b083      	sub	sp, #12
 80150dc:	af00      	add	r7, sp, #0
 80150de:	4603      	mov	r3, r0
 80150e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  WWDG->CR = WWDG_CR_WDGA | Counter;
 80150e2:	4b05      	ldr	r3, [pc, #20]	; (80150f8 <WWDG_Enable+0x20>)
 80150e4:	79fa      	ldrb	r2, [r7, #7]
 80150e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80150ea:	b2d2      	uxtb	r2, r2
 80150ec:	601a      	str	r2, [r3, #0]
}
 80150ee:	370c      	adds	r7, #12
 80150f0:	46bd      	mov	sp, r7
 80150f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150f6:	4770      	bx	lr
 80150f8:	40002c00 	.word	0x40002c00

080150fc <WWDG_GetFlagStatus>:
  * @brief  Checks whether the Early Wakeup interrupt flag is set or not.
  * @param  None
  * @retval The new state of the Early Wakeup interrupt flag (SET or RESET)
  */
FlagStatus WWDG_GetFlagStatus(void)
{
 80150fc:	b480      	push	{r7}
 80150fe:	b083      	sub	sp, #12
 8015100:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 8015102:	2300      	movs	r3, #0
 8015104:	71fb      	strb	r3, [r7, #7]
    
  if ((WWDG->SR) != (uint32_t)RESET)
 8015106:	4b08      	ldr	r3, [pc, #32]	; (8015128 <WWDG_GetFlagStatus+0x2c>)
 8015108:	689b      	ldr	r3, [r3, #8]
 801510a:	2b00      	cmp	r3, #0
 801510c:	d002      	beq.n	8015114 <WWDG_GetFlagStatus+0x18>
  {
    bitstatus = SET;
 801510e:	2301      	movs	r3, #1
 8015110:	71fb      	strb	r3, [r7, #7]
 8015112:	e001      	b.n	8015118 <WWDG_GetFlagStatus+0x1c>
  }
  else
  {
    bitstatus = RESET;
 8015114:	2300      	movs	r3, #0
 8015116:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 8015118:	79fb      	ldrb	r3, [r7, #7]
}
 801511a:	4618      	mov	r0, r3
 801511c:	370c      	adds	r7, #12
 801511e:	46bd      	mov	sp, r7
 8015120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015124:	4770      	bx	lr
 8015126:	bf00      	nop
 8015128:	40002c00 	.word	0x40002c00

0801512c <WWDG_ClearFlag>:
  * @brief  Clears Early Wakeup interrupt flag.
  * @param  None
  * @retval None
  */
void WWDG_ClearFlag(void)
{
 801512c:	b480      	push	{r7}
 801512e:	af00      	add	r7, sp, #0
  WWDG->SR = (uint32_t)RESET;
 8015130:	4b03      	ldr	r3, [pc, #12]	; (8015140 <WWDG_ClearFlag+0x14>)
 8015132:	2200      	movs	r2, #0
 8015134:	609a      	str	r2, [r3, #8]
}
 8015136:	46bd      	mov	sp, r7
 8015138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801513c:	4770      	bx	lr
 801513e:	bf00      	nop
 8015140:	40002c00 	.word	0x40002c00

08015144 <STM_EVAL_LEDInit>:
  *     @arg LED3
  *     @arg LED4
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8015144:	b580      	push	{r7, lr}
 8015146:	b084      	sub	sp, #16
 8015148:	af00      	add	r7, sp, #0
 801514a:	4603      	mov	r3, r0
 801514c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 801514e:	79fa      	ldrb	r2, [r7, #7]
 8015150:	4b10      	ldr	r3, [pc, #64]	; (8015194 <STM_EVAL_LEDInit+0x50>)
 8015152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015156:	4618      	mov	r0, r3
 8015158:	2101      	movs	r1, #1
 801515a:	f7fa fd85 	bl	800fc68 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 801515e:	79fa      	ldrb	r2, [r7, #7]
 8015160:	4b0d      	ldr	r3, [pc, #52]	; (8015198 <STM_EVAL_LEDInit+0x54>)
 8015162:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8015166:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8015168:	2301      	movs	r3, #1
 801516a:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 801516c:	2300      	movs	r3, #0
 801516e:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8015170:	2301      	movs	r3, #1
 8015172:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8015174:	2302      	movs	r3, #2
 8015176:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8015178:	79fa      	ldrb	r2, [r7, #7]
 801517a:	4b08      	ldr	r3, [pc, #32]	; (801519c <STM_EVAL_LEDInit+0x58>)
 801517c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015180:	f107 0308 	add.w	r3, r7, #8
 8015184:	4610      	mov	r0, r2
 8015186:	4619      	mov	r1, r3
 8015188:	f7f7 fec6 	bl	800cf18 <GPIO_Init>
}
 801518c:	3710      	adds	r7, #16
 801518e:	46bd      	mov	sp, r7
 8015190:	bd80      	pop	{r7, pc}
 8015192:	bf00      	nop
 8015194:	0801a5c8 	.word	0x0801a5c8
 8015198:	0801a5c4 	.word	0x0801a5c4
 801519c:	20000090 	.word	0x20000090

080151a0 <STM_EVAL_LEDOn>:
  *     @arg LED3
  *     @arg LED4 
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 80151a0:	b480      	push	{r7}
 80151a2:	b083      	sub	sp, #12
 80151a4:	af00      	add	r7, sp, #0
 80151a6:	4603      	mov	r3, r0
 80151a8:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 80151aa:	79fa      	ldrb	r2, [r7, #7]
 80151ac:	4b06      	ldr	r3, [pc, #24]	; (80151c8 <STM_EVAL_LEDOn+0x28>)
 80151ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151b2:	79f9      	ldrb	r1, [r7, #7]
 80151b4:	4a05      	ldr	r2, [pc, #20]	; (80151cc <STM_EVAL_LEDOn+0x2c>)
 80151b6:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80151ba:	831a      	strh	r2, [r3, #24]
}
 80151bc:	370c      	adds	r7, #12
 80151be:	46bd      	mov	sp, r7
 80151c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151c4:	4770      	bx	lr
 80151c6:	bf00      	nop
 80151c8:	20000090 	.word	0x20000090
 80151cc:	0801a5c4 	.word	0x0801a5c4

080151d0 <STM_EVAL_LEDOff>:
  *     @arg LED3
  *     @arg LED4
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 80151d0:	b480      	push	{r7}
 80151d2:	b083      	sub	sp, #12
 80151d4:	af00      	add	r7, sp, #0
 80151d6:	4603      	mov	r3, r0
 80151d8:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 80151da:	79fa      	ldrb	r2, [r7, #7]
 80151dc:	4b06      	ldr	r3, [pc, #24]	; (80151f8 <STM_EVAL_LEDOff+0x28>)
 80151de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151e2:	79f9      	ldrb	r1, [r7, #7]
 80151e4:	4a05      	ldr	r2, [pc, #20]	; (80151fc <STM_EVAL_LEDOff+0x2c>)
 80151e6:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80151ea:	835a      	strh	r2, [r3, #26]
}
 80151ec:	370c      	adds	r7, #12
 80151ee:	46bd      	mov	sp, r7
 80151f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151f4:	4770      	bx	lr
 80151f6:	bf00      	nop
 80151f8:	20000090 	.word	0x20000090
 80151fc:	0801a5c4 	.word	0x0801a5c4

08015200 <STM_EVAL_LEDToggle>:
  *     @arg LED3
  *     @arg LED4  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 8015200:	b480      	push	{r7}
 8015202:	b083      	sub	sp, #12
 8015204:	af00      	add	r7, sp, #0
 8015206:	4603      	mov	r3, r0
 8015208:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 801520a:	79fa      	ldrb	r2, [r7, #7]
 801520c:	4b09      	ldr	r3, [pc, #36]	; (8015234 <STM_EVAL_LEDToggle+0x34>)
 801520e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015212:	79f9      	ldrb	r1, [r7, #7]
 8015214:	4a07      	ldr	r2, [pc, #28]	; (8015234 <STM_EVAL_LEDToggle+0x34>)
 8015216:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801521a:	6951      	ldr	r1, [r2, #20]
 801521c:	79f8      	ldrb	r0, [r7, #7]
 801521e:	4a06      	ldr	r2, [pc, #24]	; (8015238 <STM_EVAL_LEDToggle+0x38>)
 8015220:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 8015224:	404a      	eors	r2, r1
 8015226:	615a      	str	r2, [r3, #20]
}
 8015228:	370c      	adds	r7, #12
 801522a:	46bd      	mov	sp, r7
 801522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015230:	4770      	bx	lr
 8015232:	bf00      	nop
 8015234:	20000090 	.word	0x20000090
 8015238:	0801a5c4 	.word	0x0801a5c4

0801523c <STM_EVAL_PBInit>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 801523c:	b580      	push	{r7, lr}
 801523e:	b088      	sub	sp, #32
 8015240:	af00      	add	r7, sp, #0
 8015242:	4602      	mov	r2, r0
 8015244:	460b      	mov	r3, r1
 8015246:	71fa      	strb	r2, [r7, #7]
 8015248:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the BUTTON Clock */
  RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 801524a:	2301      	movs	r3, #1
 801524c:	4618      	mov	r0, r3
 801524e:	2101      	movs	r1, #1
 8015250:	f7fa fd0a 	bl	800fc68 <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8015254:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8015258:	2101      	movs	r1, #1
 801525a:	f7fa fd7d 	bl	800fd58 <RCC_APB2PeriphClockCmd>

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 801525e:	2300      	movs	r3, #0
 8015260:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 8015262:	2302      	movs	r3, #2
 8015264:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 8015266:	2301      	movs	r3, #1
 8015268:	61bb      	str	r3, [r7, #24]
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 801526a:	79fa      	ldrb	r2, [r7, #7]
 801526c:	4b17      	ldr	r3, [pc, #92]	; (80152cc <STM_EVAL_PBInit+0x90>)
 801526e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015272:	f107 0318 	add.w	r3, r7, #24
 8015276:	4610      	mov	r0, r2
 8015278:	4619      	mov	r1, r3
 801527a:	f7f7 fe4d 	bl	800cf18 <GPIO_Init>

  if (Button_Mode == BUTTON_MODE_EXTI)
 801527e:	79bb      	ldrb	r3, [r7, #6]
 8015280:	2b01      	cmp	r3, #1
 8015282:	d11f      	bne.n	80152c4 <STM_EVAL_PBInit+0x88>
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 8015284:	2200      	movs	r2, #0
 8015286:	2300      	movs	r3, #0
 8015288:	4610      	mov	r0, r2
 801528a:	4619      	mov	r1, r3
 801528c:	f7fd fbe0 	bl	8012a50 <SYSCFG_EXTILineConfig>

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 8015290:	2301      	movs	r3, #1
 8015292:	613b      	str	r3, [r7, #16]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8015294:	2300      	movs	r3, #0
 8015296:	753b      	strb	r3, [r7, #20]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 8015298:	2308      	movs	r3, #8
 801529a:	757b      	strb	r3, [r7, #21]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 801529c:	2301      	movs	r3, #1
 801529e:	75bb      	strb	r3, [r7, #22]
    EXTI_Init(&EXTI_InitStructure);
 80152a0:	f107 0310 	add.w	r3, r7, #16
 80152a4:	4618      	mov	r0, r3
 80152a6:	f7f6 f87f 	bl	800b3a8 <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 80152aa:	2306      	movs	r3, #6
 80152ac:	733b      	strb	r3, [r7, #12]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 80152ae:	230f      	movs	r3, #15
 80152b0:	737b      	strb	r3, [r7, #13]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 80152b2:	230f      	movs	r3, #15
 80152b4:	73bb      	strb	r3, [r7, #14]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80152b6:	2301      	movs	r3, #1
 80152b8:	73fb      	strb	r3, [r7, #15]

    NVIC_Init(&NVIC_InitStructure); 
 80152ba:	f107 030c 	add.w	r3, r7, #12
 80152be:	4618      	mov	r0, r3
 80152c0:	f7ef ff84 	bl	80051cc <NVIC_Init>
  }
}
 80152c4:	3720      	adds	r7, #32
 80152c6:	46bd      	mov	sp, r7
 80152c8:	bd80      	pop	{r7, pc}
 80152ca:	bf00      	nop
 80152cc:	20000098 	.word	0x20000098

080152d0 <STM_EVAL_PBGetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t STM_EVAL_PBGetState(Button_TypeDef Button)
{
 80152d0:	b580      	push	{r7, lr}
 80152d2:	b082      	sub	sp, #8
 80152d4:	af00      	add	r7, sp, #0
 80152d6:	4603      	mov	r3, r0
 80152d8:	71fb      	strb	r3, [r7, #7]
  return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80152da:	79fa      	ldrb	r2, [r7, #7]
 80152dc:	4b06      	ldr	r3, [pc, #24]	; (80152f8 <STM_EVAL_PBGetState+0x28>)
 80152de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80152e2:	2301      	movs	r3, #1
 80152e4:	4610      	mov	r0, r2
 80152e6:	4619      	mov	r1, r3
 80152e8:	f7f7 fee0 	bl	800d0ac <GPIO_ReadInputDataBit>
 80152ec:	4603      	mov	r3, r0
}
 80152ee:	4618      	mov	r0, r3
 80152f0:	3708      	adds	r7, #8
 80152f2:	46bd      	mov	sp, r7
 80152f4:	bd80      	pop	{r7, pc}
 80152f6:	bf00      	nop
 80152f8:	20000098 	.word	0x20000098

080152fc <sEE_LowLevel_DeInit>:
  * @brief  DeInitializes peripherals used by the I2C EEPROM driver.
  * @param  None
  * @retval None
  */
void sEE_LowLevel_DeInit(void)
{
 80152fc:	b580      	push	{r7, lr}
 80152fe:	b082      	sub	sp, #8
 8015300:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStructure; 
   
  /* sEE_I2C Peripheral Disable */
  I2C_Cmd(sEE_I2C, DISABLE);
 8015302:	4826      	ldr	r0, [pc, #152]	; (801539c <sEE_LowLevel_DeInit+0xa0>)
 8015304:	2100      	movs	r1, #0
 8015306:	f7f8 fdef 	bl	800dee8 <I2C_Cmd>
 
  /* sEE_I2C DeInit */
  I2C_DeInit(sEE_I2C);
 801530a:	4824      	ldr	r0, [pc, #144]	; (801539c <sEE_LowLevel_DeInit+0xa0>)
 801530c:	f7f8 fcd2 	bl	800dcb4 <I2C_DeInit>

  /*!< sEE_I2C Periph clock disable */
  RCC_APB1PeriphClockCmd(sEE_I2C_CLK, DISABLE);
 8015310:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8015314:	2100      	movs	r1, #0
 8015316:	f7fa fd01 	bl	800fd1c <RCC_APB1PeriphClockCmd>
    
  /*!< GPIO configuration */  
  /*!< Configure sEE_I2C pins: SCL */
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
 801531a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801531e:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8015320:	2300      	movs	r3, #0
 8015322:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8015324:	2300      	movs	r3, #0
 8015326:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 8015328:	463b      	mov	r3, r7
 801532a:	481d      	ldr	r0, [pc, #116]	; (80153a0 <sEE_LowLevel_DeInit+0xa4>)
 801532c:	4619      	mov	r1, r3
 801532e:	f7f7 fdf3 	bl	800cf18 <GPIO_Init>

  /*!< Configure sEE_I2C pins: SDA */
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
 8015332:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015336:	603b      	str	r3, [r7, #0]
  GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 8015338:	463b      	mov	r3, r7
 801533a:	481a      	ldr	r0, [pc, #104]	; (80153a4 <sEE_LowLevel_DeInit+0xa8>)
 801533c:	4619      	mov	r1, r3
 801533e:	f7f7 fdeb 	bl	800cf18 <GPIO_Init>

  /* Configure and enable I2C DMA TX Stream interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_TX_IRQn;
 8015342:	4b19      	ldr	r3, [pc, #100]	; (80153a8 <sEE_LowLevel_DeInit+0xac>)
 8015344:	220f      	movs	r2, #15
 8015346:	701a      	strb	r2, [r3, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
 8015348:	4b17      	ldr	r3, [pc, #92]	; (80153a8 <sEE_LowLevel_DeInit+0xac>)
 801534a:	2200      	movs	r2, #0
 801534c:	705a      	strb	r2, [r3, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 801534e:	4b16      	ldr	r3, [pc, #88]	; (80153a8 <sEE_LowLevel_DeInit+0xac>)
 8015350:	2200      	movs	r2, #0
 8015352:	709a      	strb	r2, [r3, #2]
  NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
 8015354:	4b14      	ldr	r3, [pc, #80]	; (80153a8 <sEE_LowLevel_DeInit+0xac>)
 8015356:	2200      	movs	r2, #0
 8015358:	70da      	strb	r2, [r3, #3]
  NVIC_Init(&NVIC_InitStructure);
 801535a:	4813      	ldr	r0, [pc, #76]	; (80153a8 <sEE_LowLevel_DeInit+0xac>)
 801535c:	f7ef ff36 	bl	80051cc <NVIC_Init>

  /* Configure and enable I2C DMA RX Stream interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_RX_IRQn;
 8015360:	4b11      	ldr	r3, [pc, #68]	; (80153a8 <sEE_LowLevel_DeInit+0xac>)
 8015362:	220d      	movs	r2, #13
 8015364:	701a      	strb	r2, [r3, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
 8015366:	4b10      	ldr	r3, [pc, #64]	; (80153a8 <sEE_LowLevel_DeInit+0xac>)
 8015368:	2200      	movs	r2, #0
 801536a:	705a      	strb	r2, [r3, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 801536c:	4b0e      	ldr	r3, [pc, #56]	; (80153a8 <sEE_LowLevel_DeInit+0xac>)
 801536e:	2200      	movs	r2, #0
 8015370:	709a      	strb	r2, [r3, #2]
  NVIC_Init(&NVIC_InitStructure);   
 8015372:	480d      	ldr	r0, [pc, #52]	; (80153a8 <sEE_LowLevel_DeInit+0xac>)
 8015374:	f7ef ff2a 	bl	80051cc <NVIC_Init>
  
  /* Disable and Deinitialize the DMA Streams */
  DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
 8015378:	480c      	ldr	r0, [pc, #48]	; (80153ac <sEE_LowLevel_DeInit+0xb0>)
 801537a:	2100      	movs	r1, #0
 801537c:	f7f5 fdd2 	bl	800af24 <DMA_Cmd>
  DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
 8015380:	480b      	ldr	r0, [pc, #44]	; (80153b0 <sEE_LowLevel_DeInit+0xb4>)
 8015382:	2100      	movs	r1, #0
 8015384:	f7f5 fdce 	bl	800af24 <DMA_Cmd>
  DMA_DeInit(sEE_I2C_DMA_STREAM_TX);
 8015388:	4808      	ldr	r0, [pc, #32]	; (80153ac <sEE_LowLevel_DeInit+0xb0>)
 801538a:	f7f5 fc6d 	bl	800ac68 <DMA_DeInit>
  DMA_DeInit(sEE_I2C_DMA_STREAM_RX);
 801538e:	4808      	ldr	r0, [pc, #32]	; (80153b0 <sEE_LowLevel_DeInit+0xb4>)
 8015390:	f7f5 fc6a 	bl	800ac68 <DMA_DeInit>
}
 8015394:	3708      	adds	r7, #8
 8015396:	46bd      	mov	sp, r7
 8015398:	bd80      	pop	{r7, pc}
 801539a:	bf00      	nop
 801539c:	40005c00 	.word	0x40005c00
 80153a0:	40020000 	.word	0x40020000
 80153a4:	40020800 	.word	0x40020800
 80153a8:	2000534c 	.word	0x2000534c
 80153ac:	40026070 	.word	0x40026070
 80153b0:	40026040 	.word	0x40026040

080153b4 <sEE_LowLevel_Init>:
  * @brief  Initializes peripherals used by the I2C EEPROM driver.
  * @param  None
  * @retval None
  */
void sEE_LowLevel_Init(void)
{
 80153b4:	b580      	push	{r7, lr}
 80153b6:	b082      	sub	sp, #8
 80153b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStructure; 
   
  /*!< sEE_I2C Periph clock enable */
  RCC_APB1PeriphClockCmd(sEE_I2C_CLK, ENABLE);
 80153ba:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80153be:	2101      	movs	r1, #1
 80153c0:	f7fa fcac 	bl	800fd1c <RCC_APB1PeriphClockCmd>
  
  /*!< sEE_I2C_SCL_GPIO_CLK and sEE_I2C_SDA_GPIO_CLK Periph clock enable */
  RCC_AHB1PeriphClockCmd(sEE_I2C_SCL_GPIO_CLK | sEE_I2C_SDA_GPIO_CLK, ENABLE);
 80153c4:	2005      	movs	r0, #5
 80153c6:	2101      	movs	r1, #1
 80153c8:	f7fa fc4e 	bl	800fc68 <RCC_AHB1PeriphClockCmd>
  
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80153cc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80153d0:	2101      	movs	r1, #1
 80153d2:	f7fa fcc1 	bl	800fd58 <RCC_APB2PeriphClockCmd>
  
  /* Reset sEE_I2C IP */
  RCC_APB1PeriphResetCmd(sEE_I2C_CLK, ENABLE);  
 80153d6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80153da:	2101      	movs	r1, #1
 80153dc:	f7fa fd34 	bl	800fe48 <RCC_APB1PeriphResetCmd>
  /* Release reset signal of sEE_I2C IP */
  RCC_APB1PeriphResetCmd(sEE_I2C_CLK, DISABLE);
 80153e0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80153e4:	2100      	movs	r1, #0
 80153e6:	f7fa fd2f 	bl	800fe48 <RCC_APB1PeriphResetCmd>
    
  /*!< GPIO configuration */  
  /*!< Configure sEE_I2C pins: SCL */   
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
 80153ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80153ee:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80153f0:	2302      	movs	r3, #2
 80153f2:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80153f4:	2302      	movs	r3, #2
 80153f6:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 80153f8:	2301      	movs	r3, #1
 80153fa:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80153fc:	2300      	movs	r3, #0
 80153fe:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 8015400:	463b      	mov	r3, r7
 8015402:	4849      	ldr	r0, [pc, #292]	; (8015528 <sEE_LowLevel_Init+0x174>)
 8015404:	4619      	mov	r1, r3
 8015406:	f7f7 fd87 	bl	800cf18 <GPIO_Init>

  /*!< Configure sEE_I2C pins: SDA */
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
 801540a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801540e:	603b      	str	r3, [r7, #0]
  GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 8015410:	463b      	mov	r3, r7
 8015412:	4846      	ldr	r0, [pc, #280]	; (801552c <sEE_LowLevel_Init+0x178>)
 8015414:	4619      	mov	r1, r3
 8015416:	f7f7 fd7f 	bl	800cf18 <GPIO_Init>

  /* Connect PXx to I2C_SCL*/
  GPIO_PinAFConfig(sEE_I2C_SCL_GPIO_PORT, sEE_I2C_SCL_SOURCE, sEE_I2C_SCL_AF);
 801541a:	4843      	ldr	r0, [pc, #268]	; (8015528 <sEE_LowLevel_Init+0x174>)
 801541c:	2108      	movs	r1, #8
 801541e:	2204      	movs	r2, #4
 8015420:	f7f7 fee8 	bl	800d1f4 <GPIO_PinAFConfig>

  /* Connect PXx to I2C_SDA*/
  GPIO_PinAFConfig(sEE_I2C_SDA_GPIO_PORT, sEE_I2C_SDA_SOURCE, sEE_I2C_SDA_AF);  
 8015424:	4841      	ldr	r0, [pc, #260]	; (801552c <sEE_LowLevel_Init+0x178>)
 8015426:	2109      	movs	r1, #9
 8015428:	2204      	movs	r2, #4
 801542a:	f7f7 fee3 	bl	800d1f4 <GPIO_PinAFConfig>
  
  /* Configure and enable I2C DMA TX Channel interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_TX_IRQn;
 801542e:	4b40      	ldr	r3, [pc, #256]	; (8015530 <sEE_LowLevel_Init+0x17c>)
 8015430:	220f      	movs	r2, #15
 8015432:	701a      	strb	r2, [r3, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
 8015434:	4b3e      	ldr	r3, [pc, #248]	; (8015530 <sEE_LowLevel_Init+0x17c>)
 8015436:	2200      	movs	r2, #0
 8015438:	705a      	strb	r2, [r3, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 801543a:	4b3d      	ldr	r3, [pc, #244]	; (8015530 <sEE_LowLevel_Init+0x17c>)
 801543c:	2200      	movs	r2, #0
 801543e:	709a      	strb	r2, [r3, #2]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8015440:	4b3b      	ldr	r3, [pc, #236]	; (8015530 <sEE_LowLevel_Init+0x17c>)
 8015442:	2201      	movs	r2, #1
 8015444:	70da      	strb	r2, [r3, #3]
  NVIC_Init(&NVIC_InitStructure);
 8015446:	483a      	ldr	r0, [pc, #232]	; (8015530 <sEE_LowLevel_Init+0x17c>)
 8015448:	f7ef fec0 	bl	80051cc <NVIC_Init>

  /* Configure and enable I2C DMA RX Channel interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_RX_IRQn;
 801544c:	4b38      	ldr	r3, [pc, #224]	; (8015530 <sEE_LowLevel_Init+0x17c>)
 801544e:	220d      	movs	r2, #13
 8015450:	701a      	strb	r2, [r3, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
 8015452:	4b37      	ldr	r3, [pc, #220]	; (8015530 <sEE_LowLevel_Init+0x17c>)
 8015454:	2200      	movs	r2, #0
 8015456:	705a      	strb	r2, [r3, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 8015458:	4b35      	ldr	r3, [pc, #212]	; (8015530 <sEE_LowLevel_Init+0x17c>)
 801545a:	2200      	movs	r2, #0
 801545c:	709a      	strb	r2, [r3, #2]
  NVIC_Init(&NVIC_InitStructure);  
 801545e:	4834      	ldr	r0, [pc, #208]	; (8015530 <sEE_LowLevel_Init+0x17c>)
 8015460:	f7ef feb4 	bl	80051cc <NVIC_Init>
  
  /*!< I2C DMA TX and RX channels configuration */
  /* Enable the DMA clock */
  RCC_AHB1PeriphClockCmd(sEE_I2C_DMA_CLK, ENABLE);
 8015464:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8015468:	2101      	movs	r1, #1
 801546a:	f7fa fbfd 	bl	800fc68 <RCC_AHB1PeriphClockCmd>
  
  /* Clear any pending flag on Rx Stream  */
  DMA_ClearFlag(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_FEIF | sEE_TX_DMA_FLAG_DMEIF | sEE_TX_DMA_FLAG_TEIF | \
 801546e:	4831      	ldr	r0, [pc, #196]	; (8015534 <sEE_LowLevel_Init+0x180>)
 8015470:	4931      	ldr	r1, [pc, #196]	; (8015538 <sEE_LowLevel_Init+0x184>)
 8015472:	f7f5 fe91 	bl	800b198 <DMA_ClearFlag>
                                       sEE_TX_DMA_FLAG_HTIF | sEE_TX_DMA_FLAG_TCIF);
  /* Disable the EE I2C Tx DMA stream */
  DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
 8015476:	482f      	ldr	r0, [pc, #188]	; (8015534 <sEE_LowLevel_Init+0x180>)
 8015478:	2100      	movs	r1, #0
 801547a:	f7f5 fd53 	bl	800af24 <DMA_Cmd>
  /* Configure the DMA stream for the EE I2C peripheral TX direction */
  DMA_DeInit(sEE_I2C_DMA_STREAM_TX);
 801547e:	482d      	ldr	r0, [pc, #180]	; (8015534 <sEE_LowLevel_Init+0x180>)
 8015480:	f7f5 fbf2 	bl	800ac68 <DMA_DeInit>
  sEEDMA_InitStructure.DMA_Channel = sEE_I2C_DMA_CHANNEL;
 8015484:	4b2d      	ldr	r3, [pc, #180]	; (801553c <sEE_LowLevel_Init+0x188>)
 8015486:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 801548a:	601a      	str	r2, [r3, #0]
  sEEDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)sEE_I2C_DR_Address;
 801548c:	4b2b      	ldr	r3, [pc, #172]	; (801553c <sEE_LowLevel_Init+0x188>)
 801548e:	4a2c      	ldr	r2, [pc, #176]	; (8015540 <sEE_LowLevel_Init+0x18c>)
 8015490:	605a      	str	r2, [r3, #4]
  sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)0;    /* This parameter will be configured durig communication */;
 8015492:	4b2a      	ldr	r3, [pc, #168]	; (801553c <sEE_LowLevel_Init+0x188>)
 8015494:	2200      	movs	r2, #0
 8015496:	609a      	str	r2, [r3, #8]
  sEEDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral; /* This parameter will be configured durig communication */
 8015498:	4b28      	ldr	r3, [pc, #160]	; (801553c <sEE_LowLevel_Init+0x188>)
 801549a:	2240      	movs	r2, #64	; 0x40
 801549c:	60da      	str	r2, [r3, #12]
  sEEDMA_InitStructure.DMA_BufferSize = 0xFFFF;              /* This parameter will be configured durig communication */
 801549e:	4b27      	ldr	r3, [pc, #156]	; (801553c <sEE_LowLevel_Init+0x188>)
 80154a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80154a4:	611a      	str	r2, [r3, #16]
  sEEDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80154a6:	4b25      	ldr	r3, [pc, #148]	; (801553c <sEE_LowLevel_Init+0x188>)
 80154a8:	2200      	movs	r2, #0
 80154aa:	615a      	str	r2, [r3, #20]
  sEEDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80154ac:	4b23      	ldr	r3, [pc, #140]	; (801553c <sEE_LowLevel_Init+0x188>)
 80154ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80154b2:	619a      	str	r2, [r3, #24]
  sEEDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80154b4:	4b21      	ldr	r3, [pc, #132]	; (801553c <sEE_LowLevel_Init+0x188>)
 80154b6:	2200      	movs	r2, #0
 80154b8:	61da      	str	r2, [r3, #28]
  sEEDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80154ba:	4b20      	ldr	r3, [pc, #128]	; (801553c <sEE_LowLevel_Init+0x188>)
 80154bc:	2200      	movs	r2, #0
 80154be:	621a      	str	r2, [r3, #32]
  sEEDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 80154c0:	4b1e      	ldr	r3, [pc, #120]	; (801553c <sEE_LowLevel_Init+0x188>)
 80154c2:	2200      	movs	r2, #0
 80154c4:	625a      	str	r2, [r3, #36]	; 0x24
  sEEDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 80154c6:	4b1d      	ldr	r3, [pc, #116]	; (801553c <sEE_LowLevel_Init+0x188>)
 80154c8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80154cc:	629a      	str	r2, [r3, #40]	; 0x28
  sEEDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
 80154ce:	4b1b      	ldr	r3, [pc, #108]	; (801553c <sEE_LowLevel_Init+0x188>)
 80154d0:	2204      	movs	r2, #4
 80154d2:	62da      	str	r2, [r3, #44]	; 0x2c
  sEEDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 80154d4:	4b19      	ldr	r3, [pc, #100]	; (801553c <sEE_LowLevel_Init+0x188>)
 80154d6:	2203      	movs	r2, #3
 80154d8:	631a      	str	r2, [r3, #48]	; 0x30
  sEEDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 80154da:	4b18      	ldr	r3, [pc, #96]	; (801553c <sEE_LowLevel_Init+0x188>)
 80154dc:	2200      	movs	r2, #0
 80154de:	635a      	str	r2, [r3, #52]	; 0x34
  sEEDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80154e0:	4b16      	ldr	r3, [pc, #88]	; (801553c <sEE_LowLevel_Init+0x188>)
 80154e2:	2200      	movs	r2, #0
 80154e4:	639a      	str	r2, [r3, #56]	; 0x38
  DMA_Init(sEE_I2C_DMA_STREAM_TX, &sEEDMA_InitStructure);
 80154e6:	4813      	ldr	r0, [pc, #76]	; (8015534 <sEE_LowLevel_Init+0x180>)
 80154e8:	4914      	ldr	r1, [pc, #80]	; (801553c <sEE_LowLevel_Init+0x188>)
 80154ea:	f7f5 fc8f 	bl	800ae0c <DMA_Init>

  /* Clear any pending flag on Rx Stream */
  DMA_ClearFlag(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_FEIF | sEE_RX_DMA_FLAG_DMEIF | sEE_RX_DMA_FLAG_TEIF | \
 80154ee:	4815      	ldr	r0, [pc, #84]	; (8015544 <sEE_LowLevel_Init+0x190>)
 80154f0:	4915      	ldr	r1, [pc, #84]	; (8015548 <sEE_LowLevel_Init+0x194>)
 80154f2:	f7f5 fe51 	bl	800b198 <DMA_ClearFlag>
                                       sEE_RX_DMA_FLAG_HTIF | sEE_RX_DMA_FLAG_TCIF);
  /* Disable the EE I2C DMA Rx stream */
  DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
 80154f6:	4813      	ldr	r0, [pc, #76]	; (8015544 <sEE_LowLevel_Init+0x190>)
 80154f8:	2100      	movs	r1, #0
 80154fa:	f7f5 fd13 	bl	800af24 <DMA_Cmd>
  /* Configure the DMA stream for the EE I2C peripheral RX direction */
  DMA_DeInit(sEE_I2C_DMA_STREAM_RX);
 80154fe:	4811      	ldr	r0, [pc, #68]	; (8015544 <sEE_LowLevel_Init+0x190>)
 8015500:	f7f5 fbb2 	bl	800ac68 <DMA_DeInit>
  DMA_Init(sEE_I2C_DMA_STREAM_RX, &sEEDMA_InitStructure);
 8015504:	480f      	ldr	r0, [pc, #60]	; (8015544 <sEE_LowLevel_Init+0x190>)
 8015506:	490d      	ldr	r1, [pc, #52]	; (801553c <sEE_LowLevel_Init+0x188>)
 8015508:	f7f5 fc80 	bl	800ae0c <DMA_Init>
  
  /* Enable the DMA Channels Interrupts */
  DMA_ITConfig(sEE_I2C_DMA_STREAM_TX, DMA_IT_TC, ENABLE);
 801550c:	4809      	ldr	r0, [pc, #36]	; (8015534 <sEE_LowLevel_Init+0x180>)
 801550e:	2110      	movs	r1, #16
 8015510:	2201      	movs	r2, #1
 8015512:	f7f5 fe6f 	bl	800b1f4 <DMA_ITConfig>
  DMA_ITConfig(sEE_I2C_DMA_STREAM_RX, DMA_IT_TC, ENABLE);      
 8015516:	480b      	ldr	r0, [pc, #44]	; (8015544 <sEE_LowLevel_Init+0x190>)
 8015518:	2110      	movs	r1, #16
 801551a:	2201      	movs	r2, #1
 801551c:	f7f5 fe6a 	bl	800b1f4 <DMA_ITConfig>
}
 8015520:	3708      	adds	r7, #8
 8015522:	46bd      	mov	sp, r7
 8015524:	bd80      	pop	{r7, pc}
 8015526:	bf00      	nop
 8015528:	40020000 	.word	0x40020000
 801552c:	40020800 	.word	0x40020800
 8015530:	2000534c 	.word	0x2000534c
 8015534:	40026070 	.word	0x40026070
 8015538:	2000003d 	.word	0x2000003d
 801553c:	20005310 	.word	0x20005310
 8015540:	40005c10 	.word	0x40005c10
 8015544:	40026040 	.word	0x40026040
 8015548:	103d0000 	.word	0x103d0000

0801554c <sEE_LowLevel_DMAConfig>:
  * @brief  Initializes DMA channel used by the I2C EEPROM driver.
  * @param  None
  * @retval None
  */
void sEE_LowLevel_DMAConfig(uint32_t pBuffer, uint32_t BufferSize, uint32_t Direction)
{ 
 801554c:	b580      	push	{r7, lr}
 801554e:	b084      	sub	sp, #16
 8015550:	af00      	add	r7, sp, #0
 8015552:	60f8      	str	r0, [r7, #12]
 8015554:	60b9      	str	r1, [r7, #8]
 8015556:	607a      	str	r2, [r7, #4]
  /* Initialize the DMA with the new parameters */
  if (Direction == sEE_DIRECTION_TX)
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	2b00      	cmp	r3, #0
 801555c:	d10d      	bne.n	801557a <sEE_LowLevel_DMAConfig+0x2e>
  {
    /* Configure the DMA Tx Stream with the buffer address and the buffer size */
    sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)pBuffer;
 801555e:	4b0f      	ldr	r3, [pc, #60]	; (801559c <sEE_LowLevel_DMAConfig+0x50>)
 8015560:	68fa      	ldr	r2, [r7, #12]
 8015562:	609a      	str	r2, [r3, #8]
    sEEDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;    
 8015564:	4b0d      	ldr	r3, [pc, #52]	; (801559c <sEE_LowLevel_DMAConfig+0x50>)
 8015566:	2240      	movs	r2, #64	; 0x40
 8015568:	60da      	str	r2, [r3, #12]
    sEEDMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;  
 801556a:	4b0c      	ldr	r3, [pc, #48]	; (801559c <sEE_LowLevel_DMAConfig+0x50>)
 801556c:	68ba      	ldr	r2, [r7, #8]
 801556e:	611a      	str	r2, [r3, #16]
    DMA_Init(sEE_I2C_DMA_STREAM_TX, &sEEDMA_InitStructure);  
 8015570:	480b      	ldr	r0, [pc, #44]	; (80155a0 <sEE_LowLevel_DMAConfig+0x54>)
 8015572:	490a      	ldr	r1, [pc, #40]	; (801559c <sEE_LowLevel_DMAConfig+0x50>)
 8015574:	f7f5 fc4a 	bl	800ae0c <DMA_Init>
 8015578:	e00c      	b.n	8015594 <sEE_LowLevel_DMAConfig+0x48>
  }
  else
  { 
    /* Configure the DMA Rx Stream with the buffer address and the buffer size */
    sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)pBuffer;
 801557a:	4b08      	ldr	r3, [pc, #32]	; (801559c <sEE_LowLevel_DMAConfig+0x50>)
 801557c:	68fa      	ldr	r2, [r7, #12]
 801557e:	609a      	str	r2, [r3, #8]
    sEEDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8015580:	4b06      	ldr	r3, [pc, #24]	; (801559c <sEE_LowLevel_DMAConfig+0x50>)
 8015582:	2200      	movs	r2, #0
 8015584:	60da      	str	r2, [r3, #12]
    sEEDMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;      
 8015586:	4b05      	ldr	r3, [pc, #20]	; (801559c <sEE_LowLevel_DMAConfig+0x50>)
 8015588:	68ba      	ldr	r2, [r7, #8]
 801558a:	611a      	str	r2, [r3, #16]
    DMA_Init(sEE_I2C_DMA_STREAM_RX, &sEEDMA_InitStructure);    
 801558c:	4805      	ldr	r0, [pc, #20]	; (80155a4 <sEE_LowLevel_DMAConfig+0x58>)
 801558e:	4903      	ldr	r1, [pc, #12]	; (801559c <sEE_LowLevel_DMAConfig+0x50>)
 8015590:	f7f5 fc3c 	bl	800ae0c <DMA_Init>
  }
}
 8015594:	3710      	adds	r7, #16
 8015596:	46bd      	mov	sp, r7
 8015598:	bd80      	pop	{r7, pc}
 801559a:	bf00      	nop
 801559c:	20005310 	.word	0x20005310
 80155a0:	40026070 	.word	0x40026070
 80155a4:	40026040 	.word	0x40026040

080155a8 <LCD_DeInit>:
  * @brief  DeInitializes the LCD.
  * @param  None
  * @retval None
  */
void LCD_DeInit(void)
{ 
 80155a8:	b580      	push	{r7, lr}
 80155aa:	b082      	sub	sp, #8
 80155ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* LCD Display Off */
  LCD_DisplayOff();
 80155ae:	f001 ff93 	bl	80174d8 <LCD_DisplayOff>

  /* LCD_SPI disable */
  SPI_Cmd(LCD_SPI, DISABLE);
 80155b2:	487f      	ldr	r0, [pc, #508]	; (80157b0 <LCD_DeInit+0x208>)
 80155b4:	2100      	movs	r1, #0
 80155b6:	f7fc ffa5 	bl	8012504 <SPI_Cmd>
  
  /* LCD_SPI DeInit */
  SPI_I2S_DeInit(LCD_SPI);
 80155ba:	487d      	ldr	r0, [pc, #500]	; (80157b0 <LCD_DeInit+0x208>)
 80155bc:	f7fc fdda 	bl	8012174 <SPI_I2S_DeInit>
   
  /* Disable SPI clock  */
  RCC_APB2PeriphClockCmd(LCD_SPI_CLK, DISABLE);
 80155c0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80155c4:	2100      	movs	r1, #0
 80155c6:	f7fa fbc7 	bl	800fd58 <RCC_APB2PeriphClockCmd>
    
  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = LCD_NCS_PIN;
 80155ca:	2304      	movs	r3, #4
 80155cc:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80155ce:	2300      	movs	r3, #0
 80155d0:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80155d2:	2300      	movs	r3, #0
 80155d4:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80155d6:	463b      	mov	r3, r7
 80155d8:	4876      	ldr	r0, [pc, #472]	; (80157b4 <LCD_DeInit+0x20c>)
 80155da:	4619      	mov	r1, r3
 80155dc:	f7f7 fc9c 	bl	800cf18 <GPIO_Init>
   
  /* Configure SPI pins: SCK, MISO and MOSI */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_SCK_PIN;
 80155e0:	2380      	movs	r3, #128	; 0x80
 80155e2:	603b      	str	r3, [r7, #0]
  GPIO_Init(LCD_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 80155e4:	463b      	mov	r3, r7
 80155e6:	4874      	ldr	r0, [pc, #464]	; (80157b8 <LCD_DeInit+0x210>)
 80155e8:	4619      	mov	r1, r3
 80155ea:	f7f7 fc95 	bl	800cf18 <GPIO_Init>

  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MISO_PIN;
 80155ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80155f2:	603b      	str	r3, [r7, #0]
  GPIO_Init(LCD_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 80155f4:	463b      	mov	r3, r7
 80155f6:	4870      	ldr	r0, [pc, #448]	; (80157b8 <LCD_DeInit+0x210>)
 80155f8:	4619      	mov	r1, r3
 80155fa:	f7f7 fc8d 	bl	800cf18 <GPIO_Init>
  
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MOSI_PIN;
 80155fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015602:	603b      	str	r3, [r7, #0]
  GPIO_Init(LCD_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 8015604:	463b      	mov	r3, r7
 8015606:	486c      	ldr	r0, [pc, #432]	; (80157b8 <LCD_DeInit+0x210>)
 8015608:	4619      	mov	r1, r3
 801560a:	f7f7 fc85 	bl	800cf18 <GPIO_Init>

  /* GPIOA configuration */
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_MCO);
 801560e:	486b      	ldr	r0, [pc, #428]	; (80157bc <LCD_DeInit+0x214>)
 8015610:	2103      	movs	r1, #3
 8015612:	2200      	movs	r2, #0
 8015614:	f7f7 fdee 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource4, GPIO_AF_MCO);
 8015618:	4868      	ldr	r0, [pc, #416]	; (80157bc <LCD_DeInit+0x214>)
 801561a:	2104      	movs	r1, #4
 801561c:	2200      	movs	r2, #0
 801561e:	f7f7 fde9 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_MCO);
 8015622:	4866      	ldr	r0, [pc, #408]	; (80157bc <LCD_DeInit+0x214>)
 8015624:	2106      	movs	r1, #6
 8015626:	2200      	movs	r2, #0
 8015628:	f7f7 fde4 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_MCO);
 801562c:	4863      	ldr	r0, [pc, #396]	; (80157bc <LCD_DeInit+0x214>)
 801562e:	210b      	movs	r1, #11
 8015630:	2200      	movs	r2, #0
 8015632:	f7f7 fddf 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource12, GPIO_AF_MCO);
 8015636:	4861      	ldr	r0, [pc, #388]	; (80157bc <LCD_DeInit+0x214>)
 8015638:	210c      	movs	r1, #12
 801563a:	2200      	movs	r2, #0
 801563c:	f7f7 fdda 	bl	800d1f4 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_6 |
 8015640:	f641 0358 	movw	r3, #6232	; 0x1858
 8015644:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_11 | GPIO_Pin_12;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8015646:	2302      	movs	r3, #2
 8015648:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 801564a:	2302      	movs	r3, #2
 801564c:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 801564e:	2300      	movs	r3, #0
 8015650:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8015652:	2300      	movs	r3, #0
 8015654:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8015656:	463b      	mov	r3, r7
 8015658:	4858      	ldr	r0, [pc, #352]	; (80157bc <LCD_DeInit+0x214>)
 801565a:	4619      	mov	r1, r3
 801565c:	f7f7 fc5c 	bl	800cf18 <GPIO_Init>

  /* GPIOB configuration */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource0, GPIO_AF_MCO);
 8015660:	4857      	ldr	r0, [pc, #348]	; (80157c0 <LCD_DeInit+0x218>)
 8015662:	2100      	movs	r1, #0
 8015664:	2200      	movs	r2, #0
 8015666:	f7f7 fdc5 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, GPIO_AF_MCO);
 801566a:	4855      	ldr	r0, [pc, #340]	; (80157c0 <LCD_DeInit+0x218>)
 801566c:	2101      	movs	r1, #1
 801566e:	2200      	movs	r2, #0
 8015670:	f7f7 fdc0 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_MCO);
 8015674:	4852      	ldr	r0, [pc, #328]	; (80157c0 <LCD_DeInit+0x218>)
 8015676:	2108      	movs	r1, #8
 8015678:	2200      	movs	r2, #0
 801567a:	f7f7 fdbb 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_MCO);
 801567e:	4850      	ldr	r0, [pc, #320]	; (80157c0 <LCD_DeInit+0x218>)
 8015680:	2109      	movs	r1, #9
 8015682:	2200      	movs	r2, #0
 8015684:	f7f7 fdb6 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_MCO);
 8015688:	484d      	ldr	r0, [pc, #308]	; (80157c0 <LCD_DeInit+0x218>)
 801568a:	210a      	movs	r1, #10
 801568c:	2200      	movs	r2, #0
 801568e:	f7f7 fdb1 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_MCO);
 8015692:	484b      	ldr	r0, [pc, #300]	; (80157c0 <LCD_DeInit+0x218>)
 8015694:	210b      	movs	r1, #11
 8015696:	2200      	movs	r2, #0
 8015698:	f7f7 fdac 	bl	800d1f4 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  | GPIO_Pin_1  | GPIO_Pin_8    |
 801569c:	f640 7303 	movw	r3, #3843	; 0xf03
 80156a0:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_9  |  GPIO_Pin_10 | GPIO_Pin_11;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80156a2:	2302      	movs	r3, #2
 80156a4:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80156a6:	2302      	movs	r3, #2
 80156a8:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80156aa:	2300      	movs	r3, #0
 80156ac:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80156ae:	2300      	movs	r3, #0
 80156b0:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 80156b2:	463b      	mov	r3, r7
 80156b4:	4842      	ldr	r0, [pc, #264]	; (80157c0 <LCD_DeInit+0x218>)
 80156b6:	4619      	mov	r1, r3
 80156b8:	f7f7 fc2e 	bl	800cf18 <GPIO_Init>
  
  /* GPIOC configuration */
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_MCO);
 80156bc:	483d      	ldr	r0, [pc, #244]	; (80157b4 <LCD_DeInit+0x20c>)
 80156be:	2106      	movs	r1, #6
 80156c0:	2200      	movs	r2, #0
 80156c2:	f7f7 fd97 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_MCO);
 80156c6:	483b      	ldr	r0, [pc, #236]	; (80157b4 <LCD_DeInit+0x20c>)
 80156c8:	2107      	movs	r1, #7
 80156ca:	2200      	movs	r2, #0
 80156cc:	f7f7 fd92 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_MCO);
 80156d0:	4838      	ldr	r0, [pc, #224]	; (80157b4 <LCD_DeInit+0x20c>)
 80156d2:	210a      	movs	r1, #10
 80156d4:	2200      	movs	r2, #0
 80156d6:	f7f7 fd8d 	bl	800d1f4 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6  | GPIO_Pin_7  | GPIO_Pin_10;
 80156da:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80156de:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80156e0:	2302      	movs	r3, #2
 80156e2:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80156e4:	2302      	movs	r3, #2
 80156e6:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80156e8:	2300      	movs	r3, #0
 80156ea:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80156ec:	2300      	movs	r3, #0
 80156ee:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 80156f0:	463b      	mov	r3, r7
 80156f2:	4830      	ldr	r0, [pc, #192]	; (80157b4 <LCD_DeInit+0x20c>)
 80156f4:	4619      	mov	r1, r3
 80156f6:	f7f7 fc0f 	bl	800cf18 <GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource3, GPIO_AF_MCO);
 80156fa:	4832      	ldr	r0, [pc, #200]	; (80157c4 <LCD_DeInit+0x21c>)
 80156fc:	2103      	movs	r1, #3
 80156fe:	2200      	movs	r2, #0
 8015700:	f7f7 fd78 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource6, GPIO_AF_MCO);
 8015704:	482f      	ldr	r0, [pc, #188]	; (80157c4 <LCD_DeInit+0x21c>)
 8015706:	2106      	movs	r1, #6
 8015708:	2200      	movs	r2, #0
 801570a:	f7f7 fd73 	bl	800d1f4 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3  | GPIO_Pin_6; 
 801570e:	2348      	movs	r3, #72	; 0x48
 8015710:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8015712:	2302      	movs	r3, #2
 8015714:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8015716:	2302      	movs	r3, #2
 8015718:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 801571a:	2300      	movs	r3, #0
 801571c:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 801571e:	2300      	movs	r3, #0
 8015720:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOD, &GPIO_InitStructure);  
 8015722:	463b      	mov	r3, r7
 8015724:	4827      	ldr	r0, [pc, #156]	; (80157c4 <LCD_DeInit+0x21c>)
 8015726:	4619      	mov	r1, r3
 8015728:	f7f7 fbf6 	bl	800cf18 <GPIO_Init>

  /* GPIOF configuration */
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource10, GPIO_AF_MCO);
 801572c:	4822      	ldr	r0, [pc, #136]	; (80157b8 <LCD_DeInit+0x210>)
 801572e:	210a      	movs	r1, #10
 8015730:	2200      	movs	r2, #0
 8015732:	f7f7 fd5f 	bl	800d1f4 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; 
 8015736:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801573a:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 801573c:	2302      	movs	r3, #2
 801573e:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8015740:	2302      	movs	r3, #2
 8015742:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8015744:	2300      	movs	r3, #0
 8015746:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8015748:	2300      	movs	r3, #0
 801574a:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOF, &GPIO_InitStructure);  
 801574c:	463b      	mov	r3, r7
 801574e:	481a      	ldr	r0, [pc, #104]	; (80157b8 <LCD_DeInit+0x210>)
 8015750:	4619      	mov	r1, r3
 8015752:	f7f7 fbe1 	bl	800cf18 <GPIO_Init>

  /* GPIOG configuration */
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource6, GPIO_AF_MCO);
 8015756:	481c      	ldr	r0, [pc, #112]	; (80157c8 <LCD_DeInit+0x220>)
 8015758:	2106      	movs	r1, #6
 801575a:	2200      	movs	r2, #0
 801575c:	f7f7 fd4a 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource7, GPIO_AF_MCO);
 8015760:	4819      	ldr	r0, [pc, #100]	; (80157c8 <LCD_DeInit+0x220>)
 8015762:	2107      	movs	r1, #7
 8015764:	2200      	movs	r2, #0
 8015766:	f7f7 fd45 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource10, GPIO_AF_MCO);
 801576a:	4817      	ldr	r0, [pc, #92]	; (80157c8 <LCD_DeInit+0x220>)
 801576c:	210a      	movs	r1, #10
 801576e:	2200      	movs	r2, #0
 8015770:	f7f7 fd40 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource11, GPIO_AF_MCO);
 8015774:	4814      	ldr	r0, [pc, #80]	; (80157c8 <LCD_DeInit+0x220>)
 8015776:	210b      	movs	r1, #11
 8015778:	2200      	movs	r2, #0
 801577a:	f7f7 fd3b 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource12, GPIO_AF_MCO);
 801577e:	4812      	ldr	r0, [pc, #72]	; (80157c8 <LCD_DeInit+0x220>)
 8015780:	210c      	movs	r1, #12
 8015782:	2200      	movs	r2, #0
 8015784:	f7f7 fd36 	bl	800d1f4 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6  | GPIO_Pin_7  | GPIO_Pin_10    |
 8015788:	f44f 53e6 	mov.w	r3, #7360	; 0x1cc0
 801578c:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_11 | GPIO_Pin_12;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 801578e:	2302      	movs	r3, #2
 8015790:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8015792:	2302      	movs	r3, #2
 8015794:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8015796:	2300      	movs	r3, #0
 8015798:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 801579a:	2300      	movs	r3, #0
 801579c:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOG, &GPIO_InitStructure);
 801579e:	463b      	mov	r3, r7
 80157a0:	4809      	ldr	r0, [pc, #36]	; (80157c8 <LCD_DeInit+0x220>)
 80157a2:	4619      	mov	r1, r3
 80157a4:	f7f7 fbb8 	bl	800cf18 <GPIO_Init>
}
 80157a8:	3708      	adds	r7, #8
 80157aa:	46bd      	mov	sp, r7
 80157ac:	bd80      	pop	{r7, pc}
 80157ae:	bf00      	nop
 80157b0:	40015000 	.word	0x40015000
 80157b4:	40020800 	.word	0x40020800
 80157b8:	40021400 	.word	0x40021400
 80157bc:	40020000 	.word	0x40020000
 80157c0:	40020400 	.word	0x40020400
 80157c4:	40020c00 	.word	0x40020c00
 80157c8:	40021800 	.word	0x40021800

080157cc <LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval None
  */
void LCD_Init(void)
{ 
 80157cc:	b580      	push	{r7, lr}
 80157ce:	b090      	sub	sp, #64	; 0x40
 80157d0:	af00      	add	r7, sp, #0
  LTDC_InitTypeDef       LTDC_InitStruct;
  
  /* Configure the LCD Control pins ------------------------------------------*/
  LCD_CtrlLinesConfig();
 80157d2:	f001 fe87 	bl	80174e4 <LCD_CtrlLinesConfig>
  LCD_ChipSelect(DISABLE);
 80157d6:	2000      	movs	r0, #0
 80157d8:	f000 f8ac 	bl	8015934 <LCD_ChipSelect>
  LCD_ChipSelect(ENABLE);
 80157dc:	2001      	movs	r0, #1
 80157de:	f000 f8a9 	bl	8015934 <LCD_ChipSelect>
  
  /* Configure the LCD_SPI interface -----------------------------------------*/
  LCD_SPIConfig(); 
 80157e2:	f001 febb 	bl	801755c <LCD_SPIConfig>
  
  /* Power on the LCD --------------------------------------------------------*/
  LCD_PowerOn();
 80157e6:	f001 fd29 	bl	801723c <LCD_PowerOn>
  
  /* Enable the LTDC Clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_LTDC, ENABLE);
 80157ea:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80157ee:	2101      	movs	r1, #1
 80157f0:	f7fa fab2 	bl	800fd58 <RCC_APB2PeriphClockCmd>
  
  /* Enable the DMA2D Clock */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2D, ENABLE); 
 80157f4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80157f8:	2101      	movs	r1, #1
 80157fa:	f7fa fa35 	bl	800fc68 <RCC_AHB1PeriphClockCmd>
  
  /* Configure the LCD Control pins */
  LCD_AF_GPIOConfig();  
 80157fe:	f001 ff17 	bl	8017630 <LCD_AF_GPIOConfig>
  
  /* Configure the FMC Parallel interface : SDRAM is used as Frame Buffer for LCD */
  SDRAM_Init();
 8015802:	f002 f809 	bl	8017818 <SDRAM_Init>
  
  /* LTDC Configuration *********************************************************/  
  /* Polarity configuration */
  /* Initialize the horizontal synchronization polarity as active low */
  LTDC_InitStruct.LTDC_HSPolarity = LTDC_HSPolarity_AL;     
 8015806:	2300      	movs	r3, #0
 8015808:	607b      	str	r3, [r7, #4]
  /* Initialize the vertical synchronization polarity as active low */  
  LTDC_InitStruct.LTDC_VSPolarity = LTDC_VSPolarity_AL;     
 801580a:	2300      	movs	r3, #0
 801580c:	60bb      	str	r3, [r7, #8]
  /* Initialize the data enable polarity as active low */
  LTDC_InitStruct.LTDC_DEPolarity = LTDC_DEPolarity_AL;     
 801580e:	2300      	movs	r3, #0
 8015810:	60fb      	str	r3, [r7, #12]
  /* Initialize the pixel clock polarity as input pixel clock */ 
  LTDC_InitStruct.LTDC_PCPolarity = LTDC_PCPolarity_IPC;
 8015812:	2300      	movs	r3, #0
 8015814:	613b      	str	r3, [r7, #16]
  
  /* Configure R,G,B component values for LCD background color */                   
  LTDC_InitStruct.LTDC_BackgroundRedValue = 0;            
 8015816:	2300      	movs	r3, #0
 8015818:	637b      	str	r3, [r7, #52]	; 0x34
  LTDC_InitStruct.LTDC_BackgroundGreenValue = 0;          
 801581a:	2300      	movs	r3, #0
 801581c:	63bb      	str	r3, [r7, #56]	; 0x38
  LTDC_InitStruct.LTDC_BackgroundBlueValue = 0;  
 801581e:	2300      	movs	r3, #0
 8015820:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* Enable Pixel Clock */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAI_N = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAI_R = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / RCC_PLLSAIDivR = 48/8 = 6 Mhz */
  RCC_PLLSAIConfig(192, 7, 4);
 8015822:	20c0      	movs	r0, #192	; 0xc0
 8015824:	2107      	movs	r1, #7
 8015826:	2204      	movs	r2, #4
 8015828:	f7f9 ff7e 	bl	800f728 <RCC_PLLSAIConfig>
  RCC_LTDCCLKDivConfig(RCC_PLLSAIDivR_Div8);
 801582c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8015830:	f7fa f9ee 	bl	800fc10 <RCC_LTDCCLKDivConfig>
  
  /* Enable PLLSAI Clock */
  RCC_PLLSAICmd(ENABLE);
 8015834:	2001      	movs	r0, #1
 8015836:	f7f9 ff8f 	bl	800f758 <RCC_PLLSAICmd>
  /* Wait for PLLSAI activation */
  while(RCC_GetFlagStatus(RCC_FLAG_PLLSAIRDY) == RESET)
 801583a:	bf00      	nop
 801583c:	203d      	movs	r0, #61	; 0x3d
 801583e:	f7fa fbf9 	bl	8010034 <RCC_GetFlagStatus>
 8015842:	4603      	mov	r3, r0
 8015844:	2b00      	cmp	r3, #0
 8015846:	d0f9      	beq.n	801583c <LCD_Init+0x70>
  {
  }
  
  /* Timing configuration */  
  /* Configure horizontal synchronization width */     
  LTDC_InitStruct.LTDC_HorizontalSync = 9;
 8015848:	2309      	movs	r3, #9
 801584a:	617b      	str	r3, [r7, #20]
  /* Configure vertical synchronization height */
  LTDC_InitStruct.LTDC_VerticalSync = 1;
 801584c:	2301      	movs	r3, #1
 801584e:	61bb      	str	r3, [r7, #24]
  /* Configure accumulated horizontal back porch */
  LTDC_InitStruct.LTDC_AccumulatedHBP = 29; 
 8015850:	231d      	movs	r3, #29
 8015852:	61fb      	str	r3, [r7, #28]
  /* Configure accumulated vertical back porch */
  LTDC_InitStruct.LTDC_AccumulatedVBP = 3;  
 8015854:	2303      	movs	r3, #3
 8015856:	623b      	str	r3, [r7, #32]
  /* Configure accumulated active width */  
  LTDC_InitStruct.LTDC_AccumulatedActiveW = 269;
 8015858:	f240 130d 	movw	r3, #269	; 0x10d
 801585c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure accumulated active height */
  LTDC_InitStruct.LTDC_AccumulatedActiveH = 323;
 801585e:	f240 1343 	movw	r3, #323	; 0x143
 8015862:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Configure total width */
  LTDC_InitStruct.LTDC_TotalWidth = 279; 
 8015864:	f240 1317 	movw	r3, #279	; 0x117
 8015868:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure total height */
  LTDC_InitStruct.LTDC_TotalHeigh = 327;
 801586a:	f240 1347 	movw	r3, #327	; 0x147
 801586e:	633b      	str	r3, [r7, #48]	; 0x30
  
  LTDC_Init(&LTDC_InitStruct);
 8015870:	1d3b      	adds	r3, r7, #4
 8015872:	4618      	mov	r0, r3
 8015874:	f7f8 ff94 	bl	800e7a0 <LTDC_Init>
}  
 8015878:	3740      	adds	r7, #64	; 0x40
 801587a:	46bd      	mov	sp, r7
 801587c:	bd80      	pop	{r7, pc}
 801587e:	bf00      	nop

08015880 <LCD_LayerInit>:
  * @brief  Initializes the LCD Layers.
  * @param  None
  * @retval None
  */
void LCD_LayerInit(void)
{
 8015880:	b580      	push	{r7, lr}
 8015882:	b090      	sub	sp, #64	; 0x40
 8015884:	af00      	add	r7, sp, #0
  /* In this case all the active display area is used to display a picture then :
  Horizontal start = horizontal synchronization + Horizontal back porch = 30 
  Horizontal stop = Horizontal start + window width -1 = 30 + 240 -1
  Vertical start   = vertical synchronization + vertical back porch     = 4
  Vertical stop   = Vertical start + window height -1  = 4 + 320 -1      */      
  LTDC_Layer_InitStruct.LTDC_HorizontalStart = 30;
 8015886:	231e      	movs	r3, #30
 8015888:	603b      	str	r3, [r7, #0]
  LTDC_Layer_InitStruct.LTDC_HorizontalStop = (LCD_PIXEL_WIDTH + 30 - 1); 
 801588a:	f240 130d 	movw	r3, #269	; 0x10d
 801588e:	607b      	str	r3, [r7, #4]
  LTDC_Layer_InitStruct.LTDC_VerticalStart = 4;
 8015890:	2304      	movs	r3, #4
 8015892:	60bb      	str	r3, [r7, #8]
  LTDC_Layer_InitStruct.LTDC_VerticalStop = (LCD_PIXEL_HEIGHT + 4 - 1);
 8015894:	f240 1343 	movw	r3, #323	; 0x143
 8015898:	60fb      	str	r3, [r7, #12]
  
  /* Pixel Format configuration*/
  LTDC_Layer_InitStruct.LTDC_PixelFormat = LTDC_Pixelformat_RGB565;
 801589a:	2302      	movs	r3, #2
 801589c:	613b      	str	r3, [r7, #16]
  /* Alpha constant (255 totally opaque) */
  LTDC_Layer_InitStruct.LTDC_ConstantAlpha = 255; 
 801589e:	23ff      	movs	r3, #255	; 0xff
 80158a0:	617b      	str	r3, [r7, #20]
  /* Default Color configuration (configure A,R,G,B component values) */          
  LTDC_Layer_InitStruct.LTDC_DefaultColorBlue = 0;        
 80158a2:	2300      	movs	r3, #0
 80158a4:	61bb      	str	r3, [r7, #24]
  LTDC_Layer_InitStruct.LTDC_DefaultColorGreen = 0;       
 80158a6:	2300      	movs	r3, #0
 80158a8:	61fb      	str	r3, [r7, #28]
  LTDC_Layer_InitStruct.LTDC_DefaultColorRed = 0;         
 80158aa:	2300      	movs	r3, #0
 80158ac:	623b      	str	r3, [r7, #32]
  LTDC_Layer_InitStruct.LTDC_DefaultColorAlpha = 0;
 80158ae:	2300      	movs	r3, #0
 80158b0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure blending factors */       
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_CA;    
 80158b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80158b6:	62bb      	str	r3, [r7, #40]	; 0x28
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_CA;
 80158b8:	2305      	movs	r3, #5
 80158ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* the length of one line of pixels in bytes + 3 then :
  Line Lenth = Active high width x number of bytes per pixel + 3 
  Active high width         = LCD_PIXEL_WIDTH 
  number of bytes per pixel = 2    (pixel_format : RGB565) 
  */
  LTDC_Layer_InitStruct.LTDC_CFBLineLength = ((LCD_PIXEL_WIDTH * 2) + 3);
 80158bc:	f240 13e3 	movw	r3, #483	; 0x1e3
 80158c0:	637b      	str	r3, [r7, #52]	; 0x34
  /* the pitch is the increment from the start of one line of pixels to the 
  start of the next line in bytes, then :
  Pitch = Active high width x number of bytes per pixel */ 
  LTDC_Layer_InitStruct.LTDC_CFBPitch = (LCD_PIXEL_WIDTH * 2);
 80158c2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80158c6:	63bb      	str	r3, [r7, #56]	; 0x38
  
  /* Configure the number of lines */  
  LTDC_Layer_InitStruct.LTDC_CFBLineNumber = LCD_PIXEL_HEIGHT;
 80158c8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80158cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* Start Address configuration : the LCD Frame buffer is defined on SDRAM */    
  LTDC_Layer_InitStruct.LTDC_CFBStartAdress = LCD_FRAME_BUFFER;
 80158ce:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80158d2:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Initialize LTDC layer 1 */
  LTDC_LayerInit(LTDC_Layer1, &LTDC_Layer_InitStruct);
 80158d4:	463b      	mov	r3, r7
 80158d6:	4813      	ldr	r0, [pc, #76]	; (8015924 <LCD_LayerInit+0xa4>)
 80158d8:	4619      	mov	r1, r3
 80158da:	f7f9 f8bf 	bl	800ea5c <LTDC_LayerInit>
  
  /* Configure Layer2 */
  /* Start Address configuration : the LCD Frame buffer is defined on SDRAM w/ Offset */     
  LTDC_Layer_InitStruct.LTDC_CFBStartAdress = LCD_FRAME_BUFFER + BUFFER_OFFSET;
 80158de:	4b12      	ldr	r3, [pc, #72]	; (8015928 <LCD_LayerInit+0xa8>)
 80158e0:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Configure blending factors */       
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_PAxCA;    
 80158e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80158e6:	62bb      	str	r3, [r7, #40]	; 0x28
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_PAxCA;
 80158e8:	2307      	movs	r3, #7
 80158ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Initialize LTDC layer 2 */
  LTDC_LayerInit(LTDC_Layer2, &LTDC_Layer_InitStruct);
 80158ec:	463b      	mov	r3, r7
 80158ee:	480f      	ldr	r0, [pc, #60]	; (801592c <LCD_LayerInit+0xac>)
 80158f0:	4619      	mov	r1, r3
 80158f2:	f7f9 f8b3 	bl	800ea5c <LTDC_LayerInit>
  
  /* LTDC configuration reload */  
  LTDC_ReloadConfig(LTDC_IMReload);
 80158f6:	2001      	movs	r0, #1
 80158f8:	f7f9 f8a2 	bl	800ea40 <LTDC_ReloadConfig>
  
  /* Enable foreground & background Layers */
  LTDC_LayerCmd(LTDC_Layer1, ENABLE); 
 80158fc:	4809      	ldr	r0, [pc, #36]	; (8015924 <LCD_LayerInit+0xa4>)
 80158fe:	2101      	movs	r1, #1
 8015900:	f7f9 f980 	bl	800ec04 <LTDC_LayerCmd>
  LTDC_LayerCmd(LTDC_Layer2, ENABLE);
 8015904:	4809      	ldr	r0, [pc, #36]	; (801592c <LCD_LayerInit+0xac>)
 8015906:	2101      	movs	r1, #1
 8015908:	f7f9 f97c 	bl	800ec04 <LTDC_LayerCmd>
  
  /* LTDC configuration reload */  
  LTDC_ReloadConfig(LTDC_IMReload);
 801590c:	2001      	movs	r0, #1
 801590e:	f7f9 f897 	bl	800ea40 <LTDC_ReloadConfig>
  
  /* Set default font */    
  LCD_SetFont(&LCD_DEFAULT_FONT); 
 8015912:	4807      	ldr	r0, [pc, #28]	; (8015930 <LCD_LayerInit+0xb0>)
 8015914:	f000 f890 	bl	8015a38 <LCD_SetFont>
  
  /* dithering activation */
  LTDC_DitherCmd(ENABLE);
 8015918:	2001      	movs	r0, #1
 801591a:	f7f9 f829 	bl	800e970 <LTDC_DitherCmd>
}
 801591e:	3740      	adds	r7, #64	; 0x40
 8015920:	46bd      	mov	sp, r7
 8015922:	bd80      	pop	{r7, pc}
 8015924:	40016884 	.word	0x40016884
 8015928:	d0050000 	.word	0xd0050000
 801592c:	40016904 	.word	0x40016904
 8015930:	2000009c 	.word	0x2000009c

08015934 <LCD_ChipSelect>:
  * @brief  Controls LCD Chip Select (CS) pin
  * @param  NewState CS pin state
  * @retval None
  */
void LCD_ChipSelect(FunctionalState NewState)
{
 8015934:	b580      	push	{r7, lr}
 8015936:	b082      	sub	sp, #8
 8015938:	af00      	add	r7, sp, #0
 801593a:	4603      	mov	r3, r0
 801593c:	71fb      	strb	r3, [r7, #7]
  if (NewState == DISABLE)
 801593e:	79fb      	ldrb	r3, [r7, #7]
 8015940:	2b00      	cmp	r3, #0
 8015942:	d104      	bne.n	801594e <LCD_ChipSelect+0x1a>
  {
    GPIO_ResetBits(LCD_NCS_GPIO_PORT, LCD_NCS_PIN); /* CS pin low: LCD disabled */
 8015944:	4805      	ldr	r0, [pc, #20]	; (801595c <LCD_ChipSelect+0x28>)
 8015946:	2104      	movs	r1, #4
 8015948:	f7f7 fc0e 	bl	800d168 <GPIO_ResetBits>
 801594c:	e003      	b.n	8015956 <LCD_ChipSelect+0x22>
  }
  else
  {
    GPIO_SetBits(LCD_NCS_GPIO_PORT, LCD_NCS_PIN); /* CS pin high: LCD enabled */
 801594e:	4803      	ldr	r0, [pc, #12]	; (801595c <LCD_ChipSelect+0x28>)
 8015950:	2104      	movs	r1, #4
 8015952:	f7f7 fbfb 	bl	800d14c <GPIO_SetBits>
  }
}
 8015956:	3708      	adds	r7, #8
 8015958:	46bd      	mov	sp, r7
 801595a:	bd80      	pop	{r7, pc}
 801595c:	40020800 	.word	0x40020800

08015960 <LCD_SetLayer>:
  * @brief  Sets the LCD Layer.
  * @param  Layerx: specifies the Layer foreground or background.
  * @retval None
  */
void LCD_SetLayer(uint32_t Layerx)
{
 8015960:	b480      	push	{r7}
 8015962:	b083      	sub	sp, #12
 8015964:	af00      	add	r7, sp, #0
 8015966:	6078      	str	r0, [r7, #4]
  if (Layerx == LCD_BACKGROUND_LAYER)
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	2b00      	cmp	r3, #0
 801596c:	d107      	bne.n	801597e <LCD_SetLayer+0x1e>
  {
    CurrentFrameBuffer = LCD_FRAME_BUFFER; 
 801596e:	4b09      	ldr	r3, [pc, #36]	; (8015994 <LCD_SetLayer+0x34>)
 8015970:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
 8015974:	601a      	str	r2, [r3, #0]
    CurrentLayer = LCD_BACKGROUND_LAYER;
 8015976:	4b08      	ldr	r3, [pc, #32]	; (8015998 <LCD_SetLayer+0x38>)
 8015978:	2200      	movs	r2, #0
 801597a:	601a      	str	r2, [r3, #0]
 801597c:	e005      	b.n	801598a <LCD_SetLayer+0x2a>
  }
  else
  {
    CurrentFrameBuffer = LCD_FRAME_BUFFER + BUFFER_OFFSET;
 801597e:	4b05      	ldr	r3, [pc, #20]	; (8015994 <LCD_SetLayer+0x34>)
 8015980:	4a06      	ldr	r2, [pc, #24]	; (801599c <LCD_SetLayer+0x3c>)
 8015982:	601a      	str	r2, [r3, #0]
    CurrentLayer = LCD_FOREGROUND_LAYER;
 8015984:	4b04      	ldr	r3, [pc, #16]	; (8015998 <LCD_SetLayer+0x38>)
 8015986:	2201      	movs	r2, #1
 8015988:	601a      	str	r2, [r3, #0]
  }
}  
 801598a:	370c      	adds	r7, #12
 801598c:	46bd      	mov	sp, r7
 801598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015992:	4770      	bx	lr
 8015994:	200000c0 	.word	0x200000c0
 8015998:	20005358 	.word	0x20005358
 801599c:	d0050000 	.word	0xd0050000

080159a0 <LCD_SetColors>:
  * @param  TextColor: specifies the Text Color.
  * @param  BackColor: specifies the Background Color.
  * @retval None
  */
void LCD_SetColors(uint16_t TextColor, uint16_t BackColor)
{
 80159a0:	b480      	push	{r7}
 80159a2:	b083      	sub	sp, #12
 80159a4:	af00      	add	r7, sp, #0
 80159a6:	4602      	mov	r2, r0
 80159a8:	460b      	mov	r3, r1
 80159aa:	80fa      	strh	r2, [r7, #6]
 80159ac:	80bb      	strh	r3, [r7, #4]
  CurrentTextColor = TextColor; 
 80159ae:	4b05      	ldr	r3, [pc, #20]	; (80159c4 <LCD_SetColors+0x24>)
 80159b0:	88fa      	ldrh	r2, [r7, #6]
 80159b2:	801a      	strh	r2, [r3, #0]
  CurrentBackColor = BackColor;
 80159b4:	4b04      	ldr	r3, [pc, #16]	; (80159c8 <LCD_SetColors+0x28>)
 80159b6:	88ba      	ldrh	r2, [r7, #4]
 80159b8:	801a      	strh	r2, [r3, #0]
}
 80159ba:	370c      	adds	r7, #12
 80159bc:	46bd      	mov	sp, r7
 80159be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159c2:	4770      	bx	lr
 80159c4:	20005354 	.word	0x20005354
 80159c8:	200000bc 	.word	0x200000bc

080159cc <LCD_GetColors>:
  * @param  BackColor: pointer to the variable that will contain the Background 
            Color.
  * @retval None
  */
void LCD_GetColors(uint16_t *TextColor, uint16_t *BackColor)
{
 80159cc:	b480      	push	{r7}
 80159ce:	b083      	sub	sp, #12
 80159d0:	af00      	add	r7, sp, #0
 80159d2:	6078      	str	r0, [r7, #4]
 80159d4:	6039      	str	r1, [r7, #0]
  *TextColor = CurrentTextColor;
 80159d6:	4b06      	ldr	r3, [pc, #24]	; (80159f0 <LCD_GetColors+0x24>)
 80159d8:	881a      	ldrh	r2, [r3, #0]
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	801a      	strh	r2, [r3, #0]
  *BackColor = CurrentBackColor;
 80159de:	4b05      	ldr	r3, [pc, #20]	; (80159f4 <LCD_GetColors+0x28>)
 80159e0:	881a      	ldrh	r2, [r3, #0]
 80159e2:	683b      	ldr	r3, [r7, #0]
 80159e4:	801a      	strh	r2, [r3, #0]
}
 80159e6:	370c      	adds	r7, #12
 80159e8:	46bd      	mov	sp, r7
 80159ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159ee:	4770      	bx	lr
 80159f0:	20005354 	.word	0x20005354
 80159f4:	200000bc 	.word	0x200000bc

080159f8 <LCD_SetTextColor>:
  * @brief  Sets the Text color.
  * @param  Color: specifies the Text color code RGB(5-6-5).
  * @retval None
  */
void LCD_SetTextColor(uint16_t Color)
{
 80159f8:	b480      	push	{r7}
 80159fa:	b083      	sub	sp, #12
 80159fc:	af00      	add	r7, sp, #0
 80159fe:	4603      	mov	r3, r0
 8015a00:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8015a02:	4b04      	ldr	r3, [pc, #16]	; (8015a14 <LCD_SetTextColor+0x1c>)
 8015a04:	88fa      	ldrh	r2, [r7, #6]
 8015a06:	801a      	strh	r2, [r3, #0]
}
 8015a08:	370c      	adds	r7, #12
 8015a0a:	46bd      	mov	sp, r7
 8015a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a10:	4770      	bx	lr
 8015a12:	bf00      	nop
 8015a14:	20005354 	.word	0x20005354

08015a18 <LCD_SetBackColor>:
  * @brief  Sets the Background color.
  * @param  Color: specifies the Background color code RGB(5-6-5).
  * @retval None
  */
void LCD_SetBackColor(uint16_t Color)
{
 8015a18:	b480      	push	{r7}
 8015a1a:	b083      	sub	sp, #12
 8015a1c:	af00      	add	r7, sp, #0
 8015a1e:	4603      	mov	r3, r0
 8015a20:	80fb      	strh	r3, [r7, #6]
  CurrentBackColor = Color;
 8015a22:	4b04      	ldr	r3, [pc, #16]	; (8015a34 <LCD_SetBackColor+0x1c>)
 8015a24:	88fa      	ldrh	r2, [r7, #6]
 8015a26:	801a      	strh	r2, [r3, #0]
}
 8015a28:	370c      	adds	r7, #12
 8015a2a:	46bd      	mov	sp, r7
 8015a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a30:	4770      	bx	lr
 8015a32:	bf00      	nop
 8015a34:	200000bc 	.word	0x200000bc

08015a38 <LCD_SetFont>:
  * @brief  Sets the Text Font.
  * @param  fonts: specifies the font to be used.
  * @retval None
  */
void LCD_SetFont(sFONT *fonts)
{
 8015a38:	b480      	push	{r7}
 8015a3a:	b083      	sub	sp, #12
 8015a3c:	af00      	add	r7, sp, #0
 8015a3e:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8015a40:	4b03      	ldr	r3, [pc, #12]	; (8015a50 <LCD_SetFont+0x18>)
 8015a42:	687a      	ldr	r2, [r7, #4]
 8015a44:	601a      	str	r2, [r3, #0]
}
 8015a46:	370c      	adds	r7, #12
 8015a48:	46bd      	mov	sp, r7
 8015a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a4e:	4770      	bx	lr
 8015a50:	20005350 	.word	0x20005350

08015a54 <LCD_SetTransparency>:
  * @param  transparency: specifies the transparency, 
  *         This parameter must range from 0x00 to 0xFF.
  * @retval None
  */
void LCD_SetTransparency(uint8_t transparency)
{
 8015a54:	b580      	push	{r7, lr}
 8015a56:	b082      	sub	sp, #8
 8015a58:	af00      	add	r7, sp, #0
 8015a5a:	4603      	mov	r3, r0
 8015a5c:	71fb      	strb	r3, [r7, #7]
  if (CurrentLayer == LCD_BACKGROUND_LAYER)
 8015a5e:	4b0a      	ldr	r3, [pc, #40]	; (8015a88 <LCD_SetTransparency+0x34>)
 8015a60:	681b      	ldr	r3, [r3, #0]
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d105      	bne.n	8015a72 <LCD_SetTransparency+0x1e>
  {
    LTDC_LayerAlpha(LTDC_Layer1, transparency);
 8015a66:	79fb      	ldrb	r3, [r7, #7]
 8015a68:	4808      	ldr	r0, [pc, #32]	; (8015a8c <LCD_SetTransparency+0x38>)
 8015a6a:	4619      	mov	r1, r3
 8015a6c:	f7f9 fa48 	bl	800ef00 <LTDC_LayerAlpha>
 8015a70:	e004      	b.n	8015a7c <LCD_SetTransparency+0x28>
  }
  else
  {     
    LTDC_LayerAlpha(LTDC_Layer2, transparency);
 8015a72:	79fb      	ldrb	r3, [r7, #7]
 8015a74:	4806      	ldr	r0, [pc, #24]	; (8015a90 <LCD_SetTransparency+0x3c>)
 8015a76:	4619      	mov	r1, r3
 8015a78:	f7f9 fa42 	bl	800ef00 <LTDC_LayerAlpha>
  }
  LTDC_ReloadConfig(LTDC_IMReload);
 8015a7c:	2001      	movs	r0, #1
 8015a7e:	f7f8 ffdf 	bl	800ea40 <LTDC_ReloadConfig>
}
 8015a82:	3708      	adds	r7, #8
 8015a84:	46bd      	mov	sp, r7
 8015a86:	bd80      	pop	{r7, pc}
 8015a88:	20005358 	.word	0x20005358
 8015a8c:	40016884 	.word	0x40016884
 8015a90:	40016904 	.word	0x40016904

08015a94 <LCD_GetFont>:
  * @brief  Gets the Text Font.
  * @param  None.
  * @retval the used font.
  */
sFONT *LCD_GetFont(void)
{
 8015a94:	b480      	push	{r7}
 8015a96:	af00      	add	r7, sp, #0
  return LCD_Currentfonts;
 8015a98:	4b03      	ldr	r3, [pc, #12]	; (8015aa8 <LCD_GetFont+0x14>)
 8015a9a:	681b      	ldr	r3, [r3, #0]
}
 8015a9c:	4618      	mov	r0, r3
 8015a9e:	46bd      	mov	sp, r7
 8015aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aa4:	4770      	bx	lr
 8015aa6:	bf00      	nop
 8015aa8:	20005350 	.word	0x20005350

08015aac <LCD_ClearLine>:
  *                                      0..26 if LCD_Currentfonts is Font12x12 or Font8x12
  *                                      0..39 if LCD_Currentfonts is Font8x8
  * @retval None
  */
void LCD_ClearLine(uint16_t Line)
{
 8015aac:	b580      	push	{r7, lr}
 8015aae:	b084      	sub	sp, #16
 8015ab0:	af00      	add	r7, sp, #0
 8015ab2:	4603      	mov	r3, r0
 8015ab4:	80fb      	strh	r3, [r7, #6]
  uint16_t refcolumn = 0;
 8015ab6:	2300      	movs	r3, #0
 8015ab8:	81fb      	strh	r3, [r7, #14]
  /* Send the string character by character on lCD */
  while ((refcolumn < LCD_PIXEL_WIDTH) && (((refcolumn + LCD_Currentfonts->Width)& 0xFFFF) >= LCD_Currentfonts->Width))
 8015aba:	e00c      	b.n	8015ad6 <LCD_ClearLine+0x2a>
  {
    /* Display one character on LCD */
    LCD_DisplayChar(Line, refcolumn, ' ');
 8015abc:	88fa      	ldrh	r2, [r7, #6]
 8015abe:	89fb      	ldrh	r3, [r7, #14]
 8015ac0:	4610      	mov	r0, r2
 8015ac2:	4619      	mov	r1, r3
 8015ac4:	2220      	movs	r2, #32
 8015ac6:	f000 f93d 	bl	8015d44 <LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += LCD_Currentfonts->Width;
 8015aca:	4b0b      	ldr	r3, [pc, #44]	; (8015af8 <LCD_ClearLine+0x4c>)
 8015acc:	681b      	ldr	r3, [r3, #0]
 8015ace:	889a      	ldrh	r2, [r3, #4]
 8015ad0:	89fb      	ldrh	r3, [r7, #14]
 8015ad2:	4413      	add	r3, r2
 8015ad4:	81fb      	strh	r3, [r7, #14]
  */
void LCD_ClearLine(uint16_t Line)
{
  uint16_t refcolumn = 0;
  /* Send the string character by character on lCD */
  while ((refcolumn < LCD_PIXEL_WIDTH) && (((refcolumn + LCD_Currentfonts->Width)& 0xFFFF) >= LCD_Currentfonts->Width))
 8015ad6:	89fb      	ldrh	r3, [r7, #14]
 8015ad8:	2bef      	cmp	r3, #239	; 0xef
 8015ada:	d80a      	bhi.n	8015af2 <LCD_ClearLine+0x46>
 8015adc:	89fa      	ldrh	r2, [r7, #14]
 8015ade:	4b06      	ldr	r3, [pc, #24]	; (8015af8 <LCD_ClearLine+0x4c>)
 8015ae0:	681b      	ldr	r3, [r3, #0]
 8015ae2:	889b      	ldrh	r3, [r3, #4]
 8015ae4:	4413      	add	r3, r2
 8015ae6:	b29a      	uxth	r2, r3
 8015ae8:	4b03      	ldr	r3, [pc, #12]	; (8015af8 <LCD_ClearLine+0x4c>)
 8015aea:	681b      	ldr	r3, [r3, #0]
 8015aec:	889b      	ldrh	r3, [r3, #4]
 8015aee:	429a      	cmp	r2, r3
 8015af0:	dae4      	bge.n	8015abc <LCD_ClearLine+0x10>
    /* Display one character on LCD */
    LCD_DisplayChar(Line, refcolumn, ' ');
    /* Decrement the column position by 16 */
    refcolumn += LCD_Currentfonts->Width;
  }
}
 8015af2:	3710      	adds	r7, #16
 8015af4:	46bd      	mov	sp, r7
 8015af6:	bd80      	pop	{r7, pc}
 8015af8:	20005350 	.word	0x20005350

08015afc <LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background.
  * @retval None
  */
void LCD_Clear(uint16_t Color)
{
 8015afc:	b480      	push	{r7}
 8015afe:	b085      	sub	sp, #20
 8015b00:	af00      	add	r7, sp, #0
 8015b02:	4603      	mov	r3, r0
 8015b04:	80fb      	strh	r3, [r7, #6]
  uint32_t index = 0;
 8015b06:	2300      	movs	r3, #0
 8015b08:	60fb      	str	r3, [r7, #12]
  
  /* erase memory */
  for (index = 0x00; index < BUFFER_OFFSET; index++)
 8015b0a:	2300      	movs	r3, #0
 8015b0c:	60fb      	str	r3, [r7, #12]
 8015b0e:	e009      	b.n	8015b24 <LCD_Clear+0x28>
  {
    *(__IO uint16_t*)(CurrentFrameBuffer + (2*index)) = Color;
 8015b10:	68fb      	ldr	r3, [r7, #12]
 8015b12:	005a      	lsls	r2, r3, #1
 8015b14:	4b08      	ldr	r3, [pc, #32]	; (8015b38 <LCD_Clear+0x3c>)
 8015b16:	681b      	ldr	r3, [r3, #0]
 8015b18:	4413      	add	r3, r2
 8015b1a:	88fa      	ldrh	r2, [r7, #6]
 8015b1c:	801a      	strh	r2, [r3, #0]
void LCD_Clear(uint16_t Color)
{
  uint32_t index = 0;
  
  /* erase memory */
  for (index = 0x00; index < BUFFER_OFFSET; index++)
 8015b1e:	68fb      	ldr	r3, [r7, #12]
 8015b20:	3301      	adds	r3, #1
 8015b22:	60fb      	str	r3, [r7, #12]
 8015b24:	68fb      	ldr	r3, [r7, #12]
 8015b26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8015b2a:	d3f1      	bcc.n	8015b10 <LCD_Clear+0x14>
  {
    *(__IO uint16_t*)(CurrentFrameBuffer + (2*index)) = Color;
  } 
}
 8015b2c:	3714      	adds	r7, #20
 8015b2e:	46bd      	mov	sp, r7
 8015b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b34:	4770      	bx	lr
 8015b36:	bf00      	nop
 8015b38:	200000c0 	.word	0x200000c0

08015b3c <LCD_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position. 
  * @retval Display Address
  */
uint32_t LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
{  
 8015b3c:	b480      	push	{r7}
 8015b3e:	b083      	sub	sp, #12
 8015b40:	af00      	add	r7, sp, #0
 8015b42:	4602      	mov	r2, r0
 8015b44:	460b      	mov	r3, r1
 8015b46:	80fa      	strh	r2, [r7, #6]
 8015b48:	80bb      	strh	r3, [r7, #4]
  return CurrentFrameBuffer + 2*(Xpos + (LCD_PIXEL_WIDTH*Ypos));
 8015b4a:	88f9      	ldrh	r1, [r7, #6]
 8015b4c:	88ba      	ldrh	r2, [r7, #4]
 8015b4e:	4613      	mov	r3, r2
 8015b50:	011b      	lsls	r3, r3, #4
 8015b52:	1a9b      	subs	r3, r3, r2
 8015b54:	011b      	lsls	r3, r3, #4
 8015b56:	440b      	add	r3, r1
 8015b58:	005b      	lsls	r3, r3, #1
 8015b5a:	461a      	mov	r2, r3
 8015b5c:	4b04      	ldr	r3, [pc, #16]	; (8015b70 <LCD_SetCursor+0x34>)
 8015b5e:	681b      	ldr	r3, [r3, #0]
 8015b60:	4413      	add	r3, r2
}
 8015b62:	4618      	mov	r0, r3
 8015b64:	370c      	adds	r7, #12
 8015b66:	46bd      	mov	sp, r7
 8015b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b6c:	4770      	bx	lr
 8015b6e:	bf00      	nop
 8015b70:	200000c0 	.word	0x200000c0

08015b74 <LCD_SetColorKeying>:
  * @brief  Config and Sets the color Keying.
  * @param  RGBValue: Specifies the Color reference. 
  * @retval None
  */
void LCD_SetColorKeying(uint32_t RGBValue)
{  
 8015b74:	b580      	push	{r7, lr}
 8015b76:	b086      	sub	sp, #24
 8015b78:	af00      	add	r7, sp, #0
 8015b7a:	6078      	str	r0, [r7, #4]
  LTDC_ColorKeying_InitTypeDef   LTDC_colorkeying_InitStruct;
  
  /* configure the color Keying */
  LTDC_colorkeying_InitStruct.LTDC_ColorKeyBlue = 0x0000FF & RGBValue;
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	b2db      	uxtb	r3, r3
 8015b80:	60fb      	str	r3, [r7, #12]
  LTDC_colorkeying_InitStruct.LTDC_ColorKeyGreen = (0x00FF00 & RGBValue) >> 8;
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015b88:	0a1b      	lsrs	r3, r3, #8
 8015b8a:	613b      	str	r3, [r7, #16]
  LTDC_colorkeying_InitStruct.LTDC_ColorKeyRed = (0xFF0000 & RGBValue) >> 16;  
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8015b92:	0c1b      	lsrs	r3, r3, #16
 8015b94:	617b      	str	r3, [r7, #20]

  if (CurrentLayer == LCD_BACKGROUND_LAYER)
 8015b96:	4b0e      	ldr	r3, [pc, #56]	; (8015bd0 <LCD_SetColorKeying+0x5c>)
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d10a      	bne.n	8015bb4 <LCD_SetColorKeying+0x40>
  {   
    /* Enable the color Keying for Layer1 */
    LTDC_ColorKeyingConfig(LTDC_Layer1, &LTDC_colorkeying_InitStruct, ENABLE);
 8015b9e:	f107 030c 	add.w	r3, r7, #12
 8015ba2:	480c      	ldr	r0, [pc, #48]	; (8015bd4 <LCD_SetColorKeying+0x60>)
 8015ba4:	4619      	mov	r1, r3
 8015ba6:	2201      	movs	r2, #1
 8015ba8:	f7f9 f890 	bl	800eccc <LTDC_ColorKeyingConfig>
    LTDC_ReloadConfig(LTDC_IMReload);
 8015bac:	2001      	movs	r0, #1
 8015bae:	f7f8 ff47 	bl	800ea40 <LTDC_ReloadConfig>
 8015bb2:	e009      	b.n	8015bc8 <LCD_SetColorKeying+0x54>
  }
  else
  {
    /* Enable the color Keying for Layer2 */
    LTDC_ColorKeyingConfig(LTDC_Layer2, &LTDC_colorkeying_InitStruct, ENABLE);
 8015bb4:	f107 030c 	add.w	r3, r7, #12
 8015bb8:	4807      	ldr	r0, [pc, #28]	; (8015bd8 <LCD_SetColorKeying+0x64>)
 8015bba:	4619      	mov	r1, r3
 8015bbc:	2201      	movs	r2, #1
 8015bbe:	f7f9 f885 	bl	800eccc <LTDC_ColorKeyingConfig>
    LTDC_ReloadConfig(LTDC_IMReload);
 8015bc2:	2001      	movs	r0, #1
 8015bc4:	f7f8 ff3c 	bl	800ea40 <LTDC_ReloadConfig>
  }
}
 8015bc8:	3718      	adds	r7, #24
 8015bca:	46bd      	mov	sp, r7
 8015bcc:	bd80      	pop	{r7, pc}
 8015bce:	bf00      	nop
 8015bd0:	20005358 	.word	0x20005358
 8015bd4:	40016884 	.word	0x40016884
 8015bd8:	40016904 	.word	0x40016904

08015bdc <LCD_ReSetColorKeying>:
  * @brief  Disable the color Keying.
  * @param  RGBValue: Specifies the Color reference. 
  * @retval None
  */
void LCD_ReSetColorKeying(void)
{
 8015bdc:	b580      	push	{r7, lr}
 8015bde:	b084      	sub	sp, #16
 8015be0:	af00      	add	r7, sp, #0
  LTDC_ColorKeying_InitTypeDef   LTDC_colorkeying_InitStruct;
  
  if (CurrentLayer == LCD_BACKGROUND_LAYER)
 8015be2:	4b0d      	ldr	r3, [pc, #52]	; (8015c18 <LCD_ReSetColorKeying+0x3c>)
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d109      	bne.n	8015bfe <LCD_ReSetColorKeying+0x22>
  {   
    /* Disable the color Keying for Layer1 */
    LTDC_ColorKeyingConfig(LTDC_Layer1, &LTDC_colorkeying_InitStruct, DISABLE);
 8015bea:	1d3b      	adds	r3, r7, #4
 8015bec:	480b      	ldr	r0, [pc, #44]	; (8015c1c <LCD_ReSetColorKeying+0x40>)
 8015bee:	4619      	mov	r1, r3
 8015bf0:	2200      	movs	r2, #0
 8015bf2:	f7f9 f86b 	bl	800eccc <LTDC_ColorKeyingConfig>
    LTDC_ReloadConfig(LTDC_IMReload);
 8015bf6:	2001      	movs	r0, #1
 8015bf8:	f7f8 ff22 	bl	800ea40 <LTDC_ReloadConfig>
 8015bfc:	e008      	b.n	8015c10 <LCD_ReSetColorKeying+0x34>
  }
  else
  {
    /* Disable the color Keying for Layer2 */
    LTDC_ColorKeyingConfig(LTDC_Layer2, &LTDC_colorkeying_InitStruct, DISABLE);
 8015bfe:	1d3b      	adds	r3, r7, #4
 8015c00:	4807      	ldr	r0, [pc, #28]	; (8015c20 <LCD_ReSetColorKeying+0x44>)
 8015c02:	4619      	mov	r1, r3
 8015c04:	2200      	movs	r2, #0
 8015c06:	f7f9 f861 	bl	800eccc <LTDC_ColorKeyingConfig>
    LTDC_ReloadConfig(LTDC_IMReload);
 8015c0a:	2001      	movs	r0, #1
 8015c0c:	f7f8 ff18 	bl	800ea40 <LTDC_ReloadConfig>
  }
} 
 8015c10:	3710      	adds	r7, #16
 8015c12:	46bd      	mov	sp, r7
 8015c14:	bd80      	pop	{r7, pc}
 8015c16:	bf00      	nop
 8015c18:	20005358 	.word	0x20005358
 8015c1c:	40016884 	.word	0x40016884
 8015c20:	40016904 	.word	0x40016904

08015c24 <LCD_DrawChar>:
  * @param  Ypos: start column address.
  * @param  c: pointer to the character data.
  * @retval None
  */
void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8015c24:	b480      	push	{r7}
 8015c26:	b087      	sub	sp, #28
 8015c28:	af00      	add	r7, sp, #0
 8015c2a:	460b      	mov	r3, r1
 8015c2c:	603a      	str	r2, [r7, #0]
 8015c2e:	4602      	mov	r2, r0
 8015c30:	80fa      	strh	r2, [r7, #6]
 8015c32:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0, xpos =0;
 8015c34:	2300      	movs	r3, #0
 8015c36:	617b      	str	r3, [r7, #20]
 8015c38:	2300      	movs	r3, #0
 8015c3a:	613b      	str	r3, [r7, #16]
 8015c3c:	2300      	movs	r3, #0
 8015c3e:	60bb      	str	r3, [r7, #8]
  uint32_t  Xaddress = 0;
 8015c40:	2300      	movs	r3, #0
 8015c42:	60fb      	str	r3, [r7, #12]
  
  xpos = Xpos*LCD_PIXEL_WIDTH*2;
 8015c44:	88fa      	ldrh	r2, [r7, #6]
 8015c46:	4613      	mov	r3, r2
 8015c48:	011b      	lsls	r3, r3, #4
 8015c4a:	1a9b      	subs	r3, r3, r2
 8015c4c:	015b      	lsls	r3, r3, #5
 8015c4e:	60bb      	str	r3, [r7, #8]
  Xaddress += Ypos;
 8015c50:	88bb      	ldrh	r3, [r7, #4]
 8015c52:	68fa      	ldr	r2, [r7, #12]
 8015c54:	4413      	add	r3, r2
 8015c56:	60fb      	str	r3, [r7, #12]
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8015c58:	2300      	movs	r3, #0
 8015c5a:	617b      	str	r3, [r7, #20]
 8015c5c:	e05c      	b.n	8015d18 <LCD_DrawChar+0xf4>
  {
    
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8015c5e:	2300      	movs	r3, #0
 8015c60:	613b      	str	r3, [r7, #16]
 8015c62:	e048      	b.n	8015cf6 <LCD_DrawChar+0xd2>
    {
          
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
 8015c64:	697b      	ldr	r3, [r7, #20]
 8015c66:	005b      	lsls	r3, r3, #1
 8015c68:	683a      	ldr	r2, [r7, #0]
 8015c6a:	4413      	add	r3, r2
 8015c6c:	881b      	ldrh	r3, [r3, #0]
 8015c6e:	461a      	mov	r2, r3
 8015c70:	4b2f      	ldr	r3, [pc, #188]	; (8015d30 <LCD_DrawChar+0x10c>)
 8015c72:	681b      	ldr	r3, [r3, #0]
 8015c74:	8899      	ldrh	r1, [r3, #4]
 8015c76:	4b2f      	ldr	r3, [pc, #188]	; (8015d34 <LCD_DrawChar+0x110>)
 8015c78:	fba3 0301 	umull	r0, r3, r3, r1
 8015c7c:	08db      	lsrs	r3, r3, #3
 8015c7e:	b29b      	uxth	r3, r3
 8015c80:	00db      	lsls	r3, r3, #3
 8015c82:	2180      	movs	r1, #128	; 0x80
 8015c84:	4099      	lsls	r1, r3
 8015c86:	693b      	ldr	r3, [r7, #16]
 8015c88:	fa41 f303 	asr.w	r3, r1, r3
 8015c8c:	4013      	ands	r3, r2
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d104      	bne.n	8015c9c <LCD_DrawChar+0x78>
 8015c92:	4b27      	ldr	r3, [pc, #156]	; (8015d30 <LCD_DrawChar+0x10c>)
 8015c94:	681b      	ldr	r3, [r3, #0]
 8015c96:	889b      	ldrh	r3, [r3, #4]
 8015c98:	2b0c      	cmp	r3, #12
 8015c9a:	d911      	bls.n	8015cc0 <LCD_DrawChar+0x9c>
        (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8015c9c:	697b      	ldr	r3, [r7, #20]
 8015c9e:	005b      	lsls	r3, r3, #1
 8015ca0:	683a      	ldr	r2, [r7, #0]
 8015ca2:	4413      	add	r3, r2
 8015ca4:	881b      	ldrh	r3, [r3, #0]
 8015ca6:	461a      	mov	r2, r3
 8015ca8:	693b      	ldr	r3, [r7, #16]
 8015caa:	fa42 f303 	asr.w	r3, r2, r3
 8015cae:	f003 0301 	and.w	r3, r3, #1
  {
    
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
    {
          
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d10f      	bne.n	8015cd6 <LCD_DrawChar+0xb2>
        (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8015cb6:	4b1e      	ldr	r3, [pc, #120]	; (8015d30 <LCD_DrawChar+0x10c>)
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	889b      	ldrh	r3, [r3, #4]
 8015cbc:	2b0c      	cmp	r3, #12
 8015cbe:	d90a      	bls.n	8015cd6 <LCD_DrawChar+0xb2>
      {
          /* Write data value to all SDRAM memory */
         *(__IO uint16_t*) (CurrentFrameBuffer + (2*Xaddress) + xpos) = CurrentBackColor;
 8015cc0:	68fb      	ldr	r3, [r7, #12]
 8015cc2:	005a      	lsls	r2, r3, #1
 8015cc4:	4b1c      	ldr	r3, [pc, #112]	; (8015d38 <LCD_DrawChar+0x114>)
 8015cc6:	681b      	ldr	r3, [r3, #0]
 8015cc8:	441a      	add	r2, r3
 8015cca:	68bb      	ldr	r3, [r7, #8]
 8015ccc:	4413      	add	r3, r2
 8015cce:	4a1b      	ldr	r2, [pc, #108]	; (8015d3c <LCD_DrawChar+0x118>)
 8015cd0:	8812      	ldrh	r2, [r2, #0]
 8015cd2:	801a      	strh	r2, [r3, #0]
 8015cd4:	e009      	b.n	8015cea <LCD_DrawChar+0xc6>
      }
      else
      {
          /* Write data value to all SDRAM memory */
         *(__IO uint16_t*) (CurrentFrameBuffer + (2*Xaddress) + xpos) = CurrentTextColor;         
 8015cd6:	68fb      	ldr	r3, [r7, #12]
 8015cd8:	005a      	lsls	r2, r3, #1
 8015cda:	4b17      	ldr	r3, [pc, #92]	; (8015d38 <LCD_DrawChar+0x114>)
 8015cdc:	681b      	ldr	r3, [r3, #0]
 8015cde:	441a      	add	r2, r3
 8015ce0:	68bb      	ldr	r3, [r7, #8]
 8015ce2:	4413      	add	r3, r2
 8015ce4:	4a16      	ldr	r2, [pc, #88]	; (8015d40 <LCD_DrawChar+0x11c>)
 8015ce6:	8812      	ldrh	r2, [r2, #0]
 8015ce8:	801a      	strh	r2, [r3, #0]
      }
      Xaddress++;
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	3301      	adds	r3, #1
 8015cee:	60fb      	str	r3, [r7, #12]
  Xaddress += Ypos;
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
  {
    
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8015cf0:	693b      	ldr	r3, [r7, #16]
 8015cf2:	3301      	adds	r3, #1
 8015cf4:	613b      	str	r3, [r7, #16]
 8015cf6:	4b0e      	ldr	r3, [pc, #56]	; (8015d30 <LCD_DrawChar+0x10c>)
 8015cf8:	681b      	ldr	r3, [r3, #0]
 8015cfa:	889b      	ldrh	r3, [r3, #4]
 8015cfc:	461a      	mov	r2, r3
 8015cfe:	693b      	ldr	r3, [r7, #16]
 8015d00:	429a      	cmp	r2, r3
 8015d02:	d8af      	bhi.n	8015c64 <LCD_DrawChar+0x40>
          /* Write data value to all SDRAM memory */
         *(__IO uint16_t*) (CurrentFrameBuffer + (2*Xaddress) + xpos) = CurrentTextColor;         
      }
      Xaddress++;
    }
      Xaddress += (LCD_PIXEL_WIDTH - LCD_Currentfonts->Width);
 8015d04:	4b0a      	ldr	r3, [pc, #40]	; (8015d30 <LCD_DrawChar+0x10c>)
 8015d06:	681b      	ldr	r3, [r3, #0]
 8015d08:	889b      	ldrh	r3, [r3, #4]
 8015d0a:	68fa      	ldr	r2, [r7, #12]
 8015d0c:	1ad3      	subs	r3, r2, r3
 8015d0e:	33f0      	adds	r3, #240	; 0xf0
 8015d10:	60fb      	str	r3, [r7, #12]
  uint32_t  Xaddress = 0;
  
  xpos = Xpos*LCD_PIXEL_WIDTH*2;
  Xaddress += Ypos;
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8015d12:	697b      	ldr	r3, [r7, #20]
 8015d14:	3301      	adds	r3, #1
 8015d16:	617b      	str	r3, [r7, #20]
 8015d18:	4b05      	ldr	r3, [pc, #20]	; (8015d30 <LCD_DrawChar+0x10c>)
 8015d1a:	681b      	ldr	r3, [r3, #0]
 8015d1c:	88db      	ldrh	r3, [r3, #6]
 8015d1e:	461a      	mov	r2, r3
 8015d20:	697b      	ldr	r3, [r7, #20]
 8015d22:	429a      	cmp	r2, r3
 8015d24:	d89b      	bhi.n	8015c5e <LCD_DrawChar+0x3a>
      }
      Xaddress++;
    }
      Xaddress += (LCD_PIXEL_WIDTH - LCD_Currentfonts->Width);
  }
}
 8015d26:	371c      	adds	r7, #28
 8015d28:	46bd      	mov	sp, r7
 8015d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d2e:	4770      	bx	lr
 8015d30:	20005350 	.word	0x20005350
 8015d34:	aaaaaaab 	.word	0xaaaaaaab
 8015d38:	200000c0 	.word	0x200000c0
 8015d3c:	200000bc 	.word	0x200000bc
 8015d40:	20005354 	.word	0x20005354

08015d44 <LCD_DisplayChar>:
  * @param  Column: start column address.
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E.
  * @retval None
  */
void LCD_DisplayChar(uint16_t Line, uint16_t Column, uint8_t Ascii)
{
 8015d44:	b580      	push	{r7, lr}
 8015d46:	b082      	sub	sp, #8
 8015d48:	af00      	add	r7, sp, #0
 8015d4a:	4613      	mov	r3, r2
 8015d4c:	4602      	mov	r2, r0
 8015d4e:	80fa      	strh	r2, [r7, #6]
 8015d50:	460a      	mov	r2, r1
 8015d52:	80ba      	strh	r2, [r7, #4]
 8015d54:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8015d56:	78fb      	ldrb	r3, [r7, #3]
 8015d58:	3b20      	subs	r3, #32
 8015d5a:	70fb      	strb	r3, [r7, #3]

  LCD_DrawChar(Line, Column, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8015d5c:	4b0a      	ldr	r3, [pc, #40]	; (8015d88 <LCD_DisplayChar+0x44>)
 8015d5e:	681b      	ldr	r3, [r3, #0]
 8015d60:	681a      	ldr	r2, [r3, #0]
 8015d62:	78fb      	ldrb	r3, [r7, #3]
 8015d64:	4908      	ldr	r1, [pc, #32]	; (8015d88 <LCD_DisplayChar+0x44>)
 8015d66:	6809      	ldr	r1, [r1, #0]
 8015d68:	88c9      	ldrh	r1, [r1, #6]
 8015d6a:	fb01 f303 	mul.w	r3, r1, r3
 8015d6e:	005b      	lsls	r3, r3, #1
 8015d70:	4413      	add	r3, r2
 8015d72:	88f9      	ldrh	r1, [r7, #6]
 8015d74:	88ba      	ldrh	r2, [r7, #4]
 8015d76:	4608      	mov	r0, r1
 8015d78:	4611      	mov	r1, r2
 8015d7a:	461a      	mov	r2, r3
 8015d7c:	f7ff ff52 	bl	8015c24 <LCD_DrawChar>
}
 8015d80:	3708      	adds	r7, #8
 8015d82:	46bd      	mov	sp, r7
 8015d84:	bd80      	pop	{r7, pc}
 8015d86:	bf00      	nop
 8015d88:	20005350 	.word	0x20005350

08015d8c <LCD_DisplayStringLine>:
  *     @arg Linex: where x can be 0..9
  * @param  *ptr: pointer to string to display on LCD.
  * @retval None
  */
void LCD_DisplayStringLine(uint16_t Line, uint8_t *ptr)
{  
 8015d8c:	b580      	push	{r7, lr}
 8015d8e:	b084      	sub	sp, #16
 8015d90:	af00      	add	r7, sp, #0
 8015d92:	4603      	mov	r3, r0
 8015d94:	6039      	str	r1, [r7, #0]
 8015d96:	80fb      	strh	r3, [r7, #6]
  uint16_t refcolumn = 0;
 8015d98:	2300      	movs	r3, #0
 8015d9a:	81fb      	strh	r3, [r7, #14]
  /* Send the string character by character on lCD */
  while ((refcolumn < LCD_PIXEL_WIDTH) && ((*ptr != 0) & (((refcolumn + LCD_Currentfonts->Width) & 0xFFFF) >= LCD_Currentfonts->Width)))
 8015d9c:	e011      	b.n	8015dc2 <LCD_DisplayStringLine+0x36>
  {
    /* Display one character on LCD */
    LCD_DisplayChar(Line, refcolumn, *ptr);
 8015d9e:	683b      	ldr	r3, [r7, #0]
 8015da0:	781b      	ldrb	r3, [r3, #0]
 8015da2:	88f9      	ldrh	r1, [r7, #6]
 8015da4:	89fa      	ldrh	r2, [r7, #14]
 8015da6:	4608      	mov	r0, r1
 8015da8:	4611      	mov	r1, r2
 8015daa:	461a      	mov	r2, r3
 8015dac:	f7ff ffca 	bl	8015d44 <LCD_DisplayChar>
    /* Decrement the column position by width */
    refcolumn += LCD_Currentfonts->Width;
 8015db0:	4b13      	ldr	r3, [pc, #76]	; (8015e00 <LCD_DisplayStringLine+0x74>)
 8015db2:	681b      	ldr	r3, [r3, #0]
 8015db4:	889a      	ldrh	r2, [r3, #4]
 8015db6:	89fb      	ldrh	r3, [r7, #14]
 8015db8:	4413      	add	r3, r2
 8015dba:	81fb      	strh	r3, [r7, #14]
    /* Point on the next character */
    ptr++;
 8015dbc:	683b      	ldr	r3, [r7, #0]
 8015dbe:	3301      	adds	r3, #1
 8015dc0:	603b      	str	r3, [r7, #0]
  */
void LCD_DisplayStringLine(uint16_t Line, uint8_t *ptr)
{  
  uint16_t refcolumn = 0;
  /* Send the string character by character on lCD */
  while ((refcolumn < LCD_PIXEL_WIDTH) && ((*ptr != 0) & (((refcolumn + LCD_Currentfonts->Width) & 0xFFFF) >= LCD_Currentfonts->Width)))
 8015dc2:	89fb      	ldrh	r3, [r7, #14]
 8015dc4:	2bef      	cmp	r3, #239	; 0xef
 8015dc6:	d818      	bhi.n	8015dfa <LCD_DisplayStringLine+0x6e>
 8015dc8:	683b      	ldr	r3, [r7, #0]
 8015dca:	781b      	ldrb	r3, [r3, #0]
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	bf0c      	ite	eq
 8015dd0:	2300      	moveq	r3, #0
 8015dd2:	2301      	movne	r3, #1
 8015dd4:	b2da      	uxtb	r2, r3
 8015dd6:	89f9      	ldrh	r1, [r7, #14]
 8015dd8:	4b09      	ldr	r3, [pc, #36]	; (8015e00 <LCD_DisplayStringLine+0x74>)
 8015dda:	681b      	ldr	r3, [r3, #0]
 8015ddc:	889b      	ldrh	r3, [r3, #4]
 8015dde:	440b      	add	r3, r1
 8015de0:	b299      	uxth	r1, r3
 8015de2:	4b07      	ldr	r3, [pc, #28]	; (8015e00 <LCD_DisplayStringLine+0x74>)
 8015de4:	681b      	ldr	r3, [r3, #0]
 8015de6:	889b      	ldrh	r3, [r3, #4]
 8015de8:	4299      	cmp	r1, r3
 8015dea:	bfb4      	ite	lt
 8015dec:	2300      	movlt	r3, #0
 8015dee:	2301      	movge	r3, #1
 8015df0:	b2db      	uxtb	r3, r3
 8015df2:	4013      	ands	r3, r2
 8015df4:	b2db      	uxtb	r3, r3
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d1d1      	bne.n	8015d9e <LCD_DisplayStringLine+0x12>
    /* Decrement the column position by width */
    refcolumn += LCD_Currentfonts->Width;
    /* Point on the next character */
    ptr++;
  }
}
 8015dfa:	3710      	adds	r7, #16
 8015dfc:	46bd      	mov	sp, r7
 8015dfe:	bd80      	pop	{r7, pc}
 8015e00:	20005350 	.word	0x20005350

08015e04 <LCD_SetDisplayWindow>:
  * @param  Height: display window height, can be a value from 0 to 320.
  * @param  Width: display window width, can be a value from 0 to 240.
  * @retval None
  */
void LCD_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Height, uint16_t Width)
{
 8015e04:	b580      	push	{r7, lr}
 8015e06:	b082      	sub	sp, #8
 8015e08:	af00      	add	r7, sp, #0
 8015e0a:	80f8      	strh	r0, [r7, #6]
 8015e0c:	80b9      	strh	r1, [r7, #4]
 8015e0e:	807a      	strh	r2, [r7, #2]
 8015e10:	803b      	strh	r3, [r7, #0]

  if (CurrentLayer == LCD_BACKGROUND_LAYER)
 8015e12:	4b18      	ldr	r3, [pc, #96]	; (8015e74 <LCD_SetDisplayWindow+0x70>)
 8015e14:	681b      	ldr	r3, [r3, #0]
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d114      	bne.n	8015e44 <LCD_SetDisplayWindow+0x40>
  { 
    /* reconfigure the layer1 position */
    LTDC_LayerPosition(LTDC_Layer1, Xpos, Ypos);
 8015e1a:	88fa      	ldrh	r2, [r7, #6]
 8015e1c:	88bb      	ldrh	r3, [r7, #4]
 8015e1e:	4816      	ldr	r0, [pc, #88]	; (8015e78 <LCD_SetDisplayWindow+0x74>)
 8015e20:	4611      	mov	r1, r2
 8015e22:	461a      	mov	r2, r3
 8015e24:	f7f8 fffe 	bl	800ee24 <LTDC_LayerPosition>
    LTDC_ReloadConfig(LTDC_IMReload);
 8015e28:	2001      	movs	r0, #1
 8015e2a:	f7f8 fe09 	bl	800ea40 <LTDC_ReloadConfig>
    
    /* reconfigure the layer1 size */
    LTDC_LayerSize(LTDC_Layer1, Width, Height);
 8015e2e:	883a      	ldrh	r2, [r7, #0]
 8015e30:	887b      	ldrh	r3, [r7, #2]
 8015e32:	4811      	ldr	r0, [pc, #68]	; (8015e78 <LCD_SetDisplayWindow+0x74>)
 8015e34:	4611      	mov	r1, r2
 8015e36:	461a      	mov	r2, r3
 8015e38:	f7f9 f87e 	bl	800ef38 <LTDC_LayerSize>
    LTDC_ReloadConfig(LTDC_IMReload);
 8015e3c:	2001      	movs	r0, #1
 8015e3e:	f7f8 fdff 	bl	800ea40 <LTDC_ReloadConfig>
 8015e42:	e013      	b.n	8015e6c <LCD_SetDisplayWindow+0x68>
 }
 else
 {   
    /* reconfigure the layer2 position */
    LTDC_LayerPosition(LTDC_Layer2, Xpos, Ypos);
 8015e44:	88fa      	ldrh	r2, [r7, #6]
 8015e46:	88bb      	ldrh	r3, [r7, #4]
 8015e48:	480c      	ldr	r0, [pc, #48]	; (8015e7c <LCD_SetDisplayWindow+0x78>)
 8015e4a:	4611      	mov	r1, r2
 8015e4c:	461a      	mov	r2, r3
 8015e4e:	f7f8 ffe9 	bl	800ee24 <LTDC_LayerPosition>
    LTDC_ReloadConfig(LTDC_IMReload); 
 8015e52:	2001      	movs	r0, #1
 8015e54:	f7f8 fdf4 	bl	800ea40 <LTDC_ReloadConfig>
   
   /* reconfigure the layer2 size */
    LTDC_LayerSize(LTDC_Layer2, Width, Height);
 8015e58:	883a      	ldrh	r2, [r7, #0]
 8015e5a:	887b      	ldrh	r3, [r7, #2]
 8015e5c:	4807      	ldr	r0, [pc, #28]	; (8015e7c <LCD_SetDisplayWindow+0x78>)
 8015e5e:	4611      	mov	r1, r2
 8015e60:	461a      	mov	r2, r3
 8015e62:	f7f9 f869 	bl	800ef38 <LTDC_LayerSize>
    LTDC_ReloadConfig(LTDC_IMReload);
 8015e66:	2001      	movs	r0, #1
 8015e68:	f7f8 fdea 	bl	800ea40 <LTDC_ReloadConfig>
  }
}
 8015e6c:	3708      	adds	r7, #8
 8015e6e:	46bd      	mov	sp, r7
 8015e70:	bd80      	pop	{r7, pc}
 8015e72:	bf00      	nop
 8015e74:	20005358 	.word	0x20005358
 8015e78:	40016884 	.word	0x40016884
 8015e7c:	40016904 	.word	0x40016904

08015e80 <LCD_WindowModeDisable>:
  * @brief  Disables LCD Window mode.
  * @param  None
  * @retval None
  */
void LCD_WindowModeDisable(void)
{
 8015e80:	b580      	push	{r7, lr}
 8015e82:	af00      	add	r7, sp, #0
  LCD_SetDisplayWindow(0, 0, LCD_PIXEL_HEIGHT, LCD_PIXEL_WIDTH); 
 8015e84:	2000      	movs	r0, #0
 8015e86:	2100      	movs	r1, #0
 8015e88:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8015e8c:	23f0      	movs	r3, #240	; 0xf0
 8015e8e:	f7ff ffb9 	bl	8015e04 <LCD_SetDisplayWindow>
}
 8015e92:	bd80      	pop	{r7, pc}

08015e94 <LCD_DrawLine>:
  * @param Direction: line direction.
  *   This parameter can be one of the following values: LCD_DIR_HORIZONTAL or LCD_DIR_VERTICAL.
  * @retval None
  */
void LCD_DrawLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length, uint8_t Direction)
{
 8015e94:	b580      	push	{r7, lr}
 8015e96:	b090      	sub	sp, #64	; 0x40
 8015e98:	af00      	add	r7, sp, #0
 8015e9a:	80f8      	strh	r0, [r7, #6]
 8015e9c:	80b9      	strh	r1, [r7, #4]
 8015e9e:	807a      	strh	r2, [r7, #2]
 8015ea0:	707b      	strb	r3, [r7, #1]
  DMA2D_InitTypeDef      DMA2D_InitStruct;
  
  uint32_t  Xaddress = 0;
 8015ea2:	2300      	movs	r3, #0
 8015ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t Red_Value = 0, Green_Value = 0, Blue_Value = 0;
 8015ea6:	2300      	movs	r3, #0
 8015ea8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015eaa:	2300      	movs	r3, #0
 8015eac:	873b      	strh	r3, [r7, #56]	; 0x38
 8015eae:	2300      	movs	r3, #0
 8015eb0:	86fb      	strh	r3, [r7, #54]	; 0x36
  
  Xaddress = CurrentFrameBuffer + 2*(LCD_PIXEL_WIDTH*Ypos + Xpos);
 8015eb2:	88ba      	ldrh	r2, [r7, #4]
 8015eb4:	4613      	mov	r3, r2
 8015eb6:	011b      	lsls	r3, r3, #4
 8015eb8:	1a9b      	subs	r3, r3, r2
 8015eba:	011b      	lsls	r3, r3, #4
 8015ebc:	461a      	mov	r2, r3
 8015ebe:	88fb      	ldrh	r3, [r7, #6]
 8015ec0:	4413      	add	r3, r2
 8015ec2:	005b      	lsls	r3, r3, #1
 8015ec4:	461a      	mov	r2, r3
 8015ec6:	4b23      	ldr	r3, [pc, #140]	; (8015f54 <LCD_DrawLine+0xc0>)
 8015ec8:	681b      	ldr	r3, [r3, #0]
 8015eca:	4413      	add	r3, r2
 8015ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
 
  Red_Value = (0xF800 & CurrentTextColor) >> 11;
 8015ece:	4b22      	ldr	r3, [pc, #136]	; (8015f58 <LCD_DrawLine+0xc4>)
 8015ed0:	881b      	ldrh	r3, [r3, #0]
 8015ed2:	0adb      	lsrs	r3, r3, #11
 8015ed4:	877b      	strh	r3, [r7, #58]	; 0x3a
  Blue_Value = 0x001F & CurrentTextColor;
 8015ed6:	4b20      	ldr	r3, [pc, #128]	; (8015f58 <LCD_DrawLine+0xc4>)
 8015ed8:	881b      	ldrh	r3, [r3, #0]
 8015eda:	f003 031f 	and.w	r3, r3, #31
 8015ede:	86fb      	strh	r3, [r7, #54]	; 0x36
  Green_Value = (0x07E0 & CurrentTextColor) >> 5;
 8015ee0:	4b1d      	ldr	r3, [pc, #116]	; (8015f58 <LCD_DrawLine+0xc4>)
 8015ee2:	881b      	ldrh	r3, [r3, #0]
 8015ee4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8015ee8:	b29b      	uxth	r3, r3
 8015eea:	095b      	lsrs	r3, r3, #5
 8015eec:	873b      	strh	r3, [r7, #56]	; 0x38

  /* Configure DMA2D */    
  DMA2D_DeInit();  
 8015eee:	f7f4 fb7b 	bl	800a5e8 <DMA2D_DeInit>
  DMA2D_InitStruct.DMA2D_Mode = DMA2D_R2M;       
 8015ef2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8015ef6:	60fb      	str	r3, [r7, #12]
  DMA2D_InitStruct.DMA2D_CMode = DMA2D_RGB565;      
 8015ef8:	2302      	movs	r3, #2
 8015efa:	613b      	str	r3, [r7, #16]
  DMA2D_InitStruct.DMA2D_OutputGreen = Green_Value;      
 8015efc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8015efe:	61bb      	str	r3, [r7, #24]
  DMA2D_InitStruct.DMA2D_OutputBlue = Blue_Value;     
 8015f00:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015f02:	617b      	str	r3, [r7, #20]
  DMA2D_InitStruct.DMA2D_OutputRed = Red_Value;                
 8015f04:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015f06:	61fb      	str	r3, [r7, #28]
  DMA2D_InitStruct.DMA2D_OutputAlpha = 0x0F;                  
 8015f08:	230f      	movs	r3, #15
 8015f0a:	623b      	str	r3, [r7, #32]
  DMA2D_InitStruct.DMA2D_OutputMemoryAdd = Xaddress;                  
 8015f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f0e:	627b      	str	r3, [r7, #36]	; 0x24
  
  if(Direction == LCD_DIR_HORIZONTAL)
 8015f10:	787b      	ldrb	r3, [r7, #1]
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d106      	bne.n	8015f24 <LCD_DrawLine+0x90>
  {                                                      
    DMA2D_InitStruct.DMA2D_OutputOffset = 0;                
 8015f16:	2300      	movs	r3, #0
 8015f18:	62bb      	str	r3, [r7, #40]	; 0x28
    DMA2D_InitStruct.DMA2D_NumberOfLine = 1;            
 8015f1a:	2301      	movs	r3, #1
 8015f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    DMA2D_InitStruct.DMA2D_PixelPerLine = Length; 
 8015f1e:	887b      	ldrh	r3, [r7, #2]
 8015f20:	633b      	str	r3, [r7, #48]	; 0x30
 8015f22:	e005      	b.n	8015f30 <LCD_DrawLine+0x9c>
  }
  else
  {                                                            
    DMA2D_InitStruct.DMA2D_OutputOffset = LCD_PIXEL_WIDTH - 1;                
 8015f24:	23ef      	movs	r3, #239	; 0xef
 8015f26:	62bb      	str	r3, [r7, #40]	; 0x28
    DMA2D_InitStruct.DMA2D_NumberOfLine = Length;            
 8015f28:	887b      	ldrh	r3, [r7, #2]
 8015f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    DMA2D_InitStruct.DMA2D_PixelPerLine = 1;  
 8015f2c:	2301      	movs	r3, #1
 8015f2e:	633b      	str	r3, [r7, #48]	; 0x30
  }
  
  DMA2D_Init(&DMA2D_InitStruct);  
 8015f30:	f107 030c 	add.w	r3, r7, #12
 8015f34:	4618      	mov	r0, r3
 8015f36:	f7f4 fb65 	bl	800a604 <DMA2D_Init>
  /* Start Transfer */ 
  DMA2D_StartTransfer();  
 8015f3a:	f7f4 fc39 	bl	800a7b0 <DMA2D_StartTransfer>
  /* Wait for CTC Flag activation */
  while(DMA2D_GetFlagStatus(DMA2D_FLAG_TC) == RESET)
 8015f3e:	bf00      	nop
 8015f40:	2002      	movs	r0, #2
 8015f42:	f7f4 fe2b 	bl	800ab9c <DMA2D_GetFlagStatus>
 8015f46:	4603      	mov	r3, r0
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d0f9      	beq.n	8015f40 <LCD_DrawLine+0xac>
  {
  }
  
}
 8015f4c:	3740      	adds	r7, #64	; 0x40
 8015f4e:	46bd      	mov	sp, r7
 8015f50:	bd80      	pop	{r7, pc}
 8015f52:	bf00      	nop
 8015f54:	200000c0 	.word	0x200000c0
 8015f58:	20005354 	.word	0x20005354

08015f5c <LCD_DrawRect>:
  * @param  Height: display rectangle height, can be a value from 0 to 320.
  * @param  Width: display rectangle width, can be a value from 0 to 240.
  * @retval None
  */
void LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Height, uint16_t Width)
{
 8015f5c:	b580      	push	{r7, lr}
 8015f5e:	b082      	sub	sp, #8
 8015f60:	af00      	add	r7, sp, #0
 8015f62:	80f8      	strh	r0, [r7, #6]
 8015f64:	80b9      	strh	r1, [r7, #4]
 8015f66:	807a      	strh	r2, [r7, #2]
 8015f68:	803b      	strh	r3, [r7, #0]
  /* draw horizontal lines */
  LCD_DrawLine(Xpos, Ypos, Width, LCD_DIR_HORIZONTAL);
 8015f6a:	88f9      	ldrh	r1, [r7, #6]
 8015f6c:	88ba      	ldrh	r2, [r7, #4]
 8015f6e:	883b      	ldrh	r3, [r7, #0]
 8015f70:	4608      	mov	r0, r1
 8015f72:	4611      	mov	r1, r2
 8015f74:	461a      	mov	r2, r3
 8015f76:	2300      	movs	r3, #0
 8015f78:	f7ff ff8c 	bl	8015e94 <LCD_DrawLine>
  LCD_DrawLine(Xpos, (Ypos+ Height), Width, LCD_DIR_HORIZONTAL);
 8015f7c:	88ba      	ldrh	r2, [r7, #4]
 8015f7e:	887b      	ldrh	r3, [r7, #2]
 8015f80:	4413      	add	r3, r2
 8015f82:	b29a      	uxth	r2, r3
 8015f84:	88f9      	ldrh	r1, [r7, #6]
 8015f86:	883b      	ldrh	r3, [r7, #0]
 8015f88:	4608      	mov	r0, r1
 8015f8a:	4611      	mov	r1, r2
 8015f8c:	461a      	mov	r2, r3
 8015f8e:	2300      	movs	r3, #0
 8015f90:	f7ff ff80 	bl	8015e94 <LCD_DrawLine>
  
  /* draw vertical lines */
  LCD_DrawLine(Xpos, Ypos, Height, LCD_DIR_VERTICAL);
 8015f94:	88f9      	ldrh	r1, [r7, #6]
 8015f96:	88ba      	ldrh	r2, [r7, #4]
 8015f98:	887b      	ldrh	r3, [r7, #2]
 8015f9a:	4608      	mov	r0, r1
 8015f9c:	4611      	mov	r1, r2
 8015f9e:	461a      	mov	r2, r3
 8015fa0:	2301      	movs	r3, #1
 8015fa2:	f7ff ff77 	bl	8015e94 <LCD_DrawLine>
  LCD_DrawLine((Xpos + Width), Ypos, Height, LCD_DIR_VERTICAL);
 8015fa6:	88fa      	ldrh	r2, [r7, #6]
 8015fa8:	883b      	ldrh	r3, [r7, #0]
 8015faa:	4413      	add	r3, r2
 8015fac:	b299      	uxth	r1, r3
 8015fae:	88ba      	ldrh	r2, [r7, #4]
 8015fb0:	887b      	ldrh	r3, [r7, #2]
 8015fb2:	4608      	mov	r0, r1
 8015fb4:	4611      	mov	r1, r2
 8015fb6:	461a      	mov	r2, r3
 8015fb8:	2301      	movs	r3, #1
 8015fba:	f7ff ff6b 	bl	8015e94 <LCD_DrawLine>
}
 8015fbe:	3708      	adds	r7, #8
 8015fc0:	46bd      	mov	sp, r7
 8015fc2:	bd80      	pop	{r7, pc}

08015fc4 <LCD_DrawCircle>:
  * @param  Ypos: specifies the Y position, can be a value from 0 to 320.
  * @param  Radius: radius of the circle.
  * @retval None
  */
void LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8015fc4:	b480      	push	{r7}
 8015fc6:	b087      	sub	sp, #28
 8015fc8:	af00      	add	r7, sp, #0
 8015fca:	4613      	mov	r3, r2
 8015fcc:	4602      	mov	r2, r0
 8015fce:	80fa      	strh	r2, [r7, #6]
 8015fd0:	460a      	mov	r2, r1
 8015fd2:	80ba      	strh	r2, [r7, #4]
 8015fd4:	807b      	strh	r3, [r7, #2]
    int x = -Radius, y = 0, err = 2-2*Radius, e2;
 8015fd6:	887b      	ldrh	r3, [r7, #2]
 8015fd8:	425b      	negs	r3, r3
 8015fda:	617b      	str	r3, [r7, #20]
 8015fdc:	2300      	movs	r3, #0
 8015fde:	613b      	str	r3, [r7, #16]
 8015fe0:	887a      	ldrh	r2, [r7, #2]
 8015fe2:	4613      	mov	r3, r2
 8015fe4:	07db      	lsls	r3, r3, #31
 8015fe6:	1a9b      	subs	r3, r3, r2
 8015fe8:	005b      	lsls	r3, r3, #1
 8015fea:	3302      	adds	r3, #2
 8015fec:	60fb      	str	r3, [r7, #12]
    do {
        *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-x) + LCD_PIXEL_WIDTH*(Ypos+y)))) = CurrentTextColor; 
 8015fee:	88fa      	ldrh	r2, [r7, #6]
 8015ff0:	697b      	ldr	r3, [r7, #20]
 8015ff2:	1ad1      	subs	r1, r2, r3
 8015ff4:	88ba      	ldrh	r2, [r7, #4]
 8015ff6:	693b      	ldr	r3, [r7, #16]
 8015ff8:	441a      	add	r2, r3
 8015ffa:	4613      	mov	r3, r2
 8015ffc:	011b      	lsls	r3, r3, #4
 8015ffe:	1a9b      	subs	r3, r3, r2
 8016000:	011b      	lsls	r3, r3, #4
 8016002:	440b      	add	r3, r1
 8016004:	005b      	lsls	r3, r3, #1
 8016006:	461a      	mov	r2, r3
 8016008:	4b36      	ldr	r3, [pc, #216]	; (80160e4 <LCD_DrawCircle+0x120>)
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	4413      	add	r3, r2
 801600e:	4a36      	ldr	r2, [pc, #216]	; (80160e8 <LCD_DrawCircle+0x124>)
 8016010:	8812      	ldrh	r2, [r2, #0]
 8016012:	801a      	strh	r2, [r3, #0]
        *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+x) + LCD_PIXEL_WIDTH*(Ypos+y)))) = CurrentTextColor;
 8016014:	88fa      	ldrh	r2, [r7, #6]
 8016016:	697b      	ldr	r3, [r7, #20]
 8016018:	18d1      	adds	r1, r2, r3
 801601a:	88ba      	ldrh	r2, [r7, #4]
 801601c:	693b      	ldr	r3, [r7, #16]
 801601e:	441a      	add	r2, r3
 8016020:	4613      	mov	r3, r2
 8016022:	011b      	lsls	r3, r3, #4
 8016024:	1a9b      	subs	r3, r3, r2
 8016026:	011b      	lsls	r3, r3, #4
 8016028:	440b      	add	r3, r1
 801602a:	005b      	lsls	r3, r3, #1
 801602c:	461a      	mov	r2, r3
 801602e:	4b2d      	ldr	r3, [pc, #180]	; (80160e4 <LCD_DrawCircle+0x120>)
 8016030:	681b      	ldr	r3, [r3, #0]
 8016032:	4413      	add	r3, r2
 8016034:	4a2c      	ldr	r2, [pc, #176]	; (80160e8 <LCD_DrawCircle+0x124>)
 8016036:	8812      	ldrh	r2, [r2, #0]
 8016038:	801a      	strh	r2, [r3, #0]
        *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+x) + LCD_PIXEL_WIDTH*(Ypos-y)))) = CurrentTextColor;
 801603a:	88fa      	ldrh	r2, [r7, #6]
 801603c:	697b      	ldr	r3, [r7, #20]
 801603e:	18d1      	adds	r1, r2, r3
 8016040:	88ba      	ldrh	r2, [r7, #4]
 8016042:	693b      	ldr	r3, [r7, #16]
 8016044:	1ad2      	subs	r2, r2, r3
 8016046:	4613      	mov	r3, r2
 8016048:	011b      	lsls	r3, r3, #4
 801604a:	1a9b      	subs	r3, r3, r2
 801604c:	011b      	lsls	r3, r3, #4
 801604e:	440b      	add	r3, r1
 8016050:	005b      	lsls	r3, r3, #1
 8016052:	461a      	mov	r2, r3
 8016054:	4b23      	ldr	r3, [pc, #140]	; (80160e4 <LCD_DrawCircle+0x120>)
 8016056:	681b      	ldr	r3, [r3, #0]
 8016058:	4413      	add	r3, r2
 801605a:	4a23      	ldr	r2, [pc, #140]	; (80160e8 <LCD_DrawCircle+0x124>)
 801605c:	8812      	ldrh	r2, [r2, #0]
 801605e:	801a      	strh	r2, [r3, #0]
        *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-x) + LCD_PIXEL_WIDTH*(Ypos-y)))) = CurrentTextColor;
 8016060:	88fa      	ldrh	r2, [r7, #6]
 8016062:	697b      	ldr	r3, [r7, #20]
 8016064:	1ad1      	subs	r1, r2, r3
 8016066:	88ba      	ldrh	r2, [r7, #4]
 8016068:	693b      	ldr	r3, [r7, #16]
 801606a:	1ad2      	subs	r2, r2, r3
 801606c:	4613      	mov	r3, r2
 801606e:	011b      	lsls	r3, r3, #4
 8016070:	1a9b      	subs	r3, r3, r2
 8016072:	011b      	lsls	r3, r3, #4
 8016074:	440b      	add	r3, r1
 8016076:	005b      	lsls	r3, r3, #1
 8016078:	461a      	mov	r2, r3
 801607a:	4b1a      	ldr	r3, [pc, #104]	; (80160e4 <LCD_DrawCircle+0x120>)
 801607c:	681b      	ldr	r3, [r3, #0]
 801607e:	4413      	add	r3, r2
 8016080:	4a19      	ldr	r2, [pc, #100]	; (80160e8 <LCD_DrawCircle+0x124>)
 8016082:	8812      	ldrh	r2, [r2, #0]
 8016084:	801a      	strh	r2, [r3, #0]
      
        e2 = err;
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	60bb      	str	r3, [r7, #8]
        if (e2 <= y) {
 801608a:	68ba      	ldr	r2, [r7, #8]
 801608c:	693b      	ldr	r3, [r7, #16]
 801608e:	429a      	cmp	r2, r3
 8016090:	dc13      	bgt.n	80160ba <LCD_DrawCircle+0xf6>
            err += ++y*2+1;
 8016092:	693b      	ldr	r3, [r7, #16]
 8016094:	3301      	adds	r3, #1
 8016096:	613b      	str	r3, [r7, #16]
 8016098:	693b      	ldr	r3, [r7, #16]
 801609a:	005b      	lsls	r3, r3, #1
 801609c:	3301      	adds	r3, #1
 801609e:	68fa      	ldr	r2, [r7, #12]
 80160a0:	4413      	add	r3, r2
 80160a2:	60fb      	str	r3, [r7, #12]
            if (-x == y && e2 <= x) e2 = 0;
 80160a4:	697b      	ldr	r3, [r7, #20]
 80160a6:	425a      	negs	r2, r3
 80160a8:	693b      	ldr	r3, [r7, #16]
 80160aa:	429a      	cmp	r2, r3
 80160ac:	d105      	bne.n	80160ba <LCD_DrawCircle+0xf6>
 80160ae:	68ba      	ldr	r2, [r7, #8]
 80160b0:	697b      	ldr	r3, [r7, #20]
 80160b2:	429a      	cmp	r2, r3
 80160b4:	dc01      	bgt.n	80160ba <LCD_DrawCircle+0xf6>
 80160b6:	2300      	movs	r3, #0
 80160b8:	60bb      	str	r3, [r7, #8]
        }
        if (e2 > x) err += ++x*2+1;
 80160ba:	68ba      	ldr	r2, [r7, #8]
 80160bc:	697b      	ldr	r3, [r7, #20]
 80160be:	429a      	cmp	r2, r3
 80160c0:	dd08      	ble.n	80160d4 <LCD_DrawCircle+0x110>
 80160c2:	697b      	ldr	r3, [r7, #20]
 80160c4:	3301      	adds	r3, #1
 80160c6:	617b      	str	r3, [r7, #20]
 80160c8:	697b      	ldr	r3, [r7, #20]
 80160ca:	005b      	lsls	r3, r3, #1
 80160cc:	3301      	adds	r3, #1
 80160ce:	68fa      	ldr	r2, [r7, #12]
 80160d0:	4413      	add	r3, r2
 80160d2:	60fb      	str	r3, [r7, #12]
    }
    while (x <= 0);
 80160d4:	697b      	ldr	r3, [r7, #20]
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	dd89      	ble.n	8015fee <LCD_DrawCircle+0x2a>
}
 80160da:	371c      	adds	r7, #28
 80160dc:	46bd      	mov	sp, r7
 80160de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160e2:	4770      	bx	lr
 80160e4:	200000c0 	.word	0x200000c0
 80160e8:	20005354 	.word	0x20005354

080160ec <LCD_DrawFullEllipse>:
  * @param  Radius: minor radius of ellipse.
  * @param  Radius2: major radius of ellipse.  
  * @retval None
  */
void LCD_DrawFullEllipse(int Xpos, int Ypos, int Radius, int Radius2)
{
 80160ec:	b5b0      	push	{r4, r5, r7, lr}
 80160ee:	b08c      	sub	sp, #48	; 0x30
 80160f0:	af00      	add	r7, sp, #0
 80160f2:	60f8      	str	r0, [r7, #12]
 80160f4:	60b9      	str	r1, [r7, #8]
 80160f6:	607a      	str	r2, [r7, #4]
 80160f8:	603b      	str	r3, [r7, #0]
  int x = -Radius, y = 0, err = 2-2*Radius, e2;
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	425b      	negs	r3, r3
 80160fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016100:	2300      	movs	r3, #0
 8016102:	62bb      	str	r3, [r7, #40]	; 0x28
 8016104:	687a      	ldr	r2, [r7, #4]
 8016106:	4613      	mov	r3, r2
 8016108:	07db      	lsls	r3, r3, #31
 801610a:	1a9b      	subs	r3, r3, r2
 801610c:	005b      	lsls	r3, r3, #1
 801610e:	3302      	adds	r3, #2
 8016110:	627b      	str	r3, [r7, #36]	; 0x24
  float K = 0, rad1 = 0, rad2 = 0;
 8016112:	f04f 0300 	mov.w	r3, #0
 8016116:	61fb      	str	r3, [r7, #28]
 8016118:	f04f 0300 	mov.w	r3, #0
 801611c:	61bb      	str	r3, [r7, #24]
 801611e:	f04f 0300 	mov.w	r3, #0
 8016122:	617b      	str	r3, [r7, #20]
  
  rad1 = Radius;
 8016124:	6878      	ldr	r0, [r7, #4]
 8016126:	f002 f855 	bl	80181d4 <__aeabi_i2f>
 801612a:	4603      	mov	r3, r0
 801612c:	61bb      	str	r3, [r7, #24]
  rad2 = Radius2;
 801612e:	6838      	ldr	r0, [r7, #0]
 8016130:	f002 f850 	bl	80181d4 <__aeabi_i2f>
 8016134:	4603      	mov	r3, r0
 8016136:	617b      	str	r3, [r7, #20]
  
  if (Radius > Radius2)
 8016138:	687a      	ldr	r2, [r7, #4]
 801613a:	683b      	ldr	r3, [r7, #0]
 801613c:	429a      	cmp	r2, r3
 801613e:	f340 8092 	ble.w	8016266 <LCD_DrawFullEllipse+0x17a>
  { 
    do 
    {
      K = (float)(rad1/rad2);
 8016142:	69b8      	ldr	r0, [r7, #24]
 8016144:	6979      	ldr	r1, [r7, #20]
 8016146:	f002 f94d 	bl	80183e4 <__aeabi_fdiv>
 801614a:	4603      	mov	r3, r0
 801614c:	61fb      	str	r3, [r7, #28]
      LCD_DrawLine((Xpos+x), (Ypos-(uint16_t)(y/K)), (2*(uint16_t)(y/K) + 1), LCD_DIR_VERTICAL);
 801614e:	68fb      	ldr	r3, [r7, #12]
 8016150:	b29a      	uxth	r2, r3
 8016152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016154:	b29b      	uxth	r3, r3
 8016156:	4413      	add	r3, r2
 8016158:	b29d      	uxth	r5, r3
 801615a:	68bb      	ldr	r3, [r7, #8]
 801615c:	b29c      	uxth	r4, r3
 801615e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016160:	f002 f838 	bl	80181d4 <__aeabi_i2f>
 8016164:	4603      	mov	r3, r0
 8016166:	4618      	mov	r0, r3
 8016168:	69f9      	ldr	r1, [r7, #28]
 801616a:	f002 f93b 	bl	80183e4 <__aeabi_fdiv>
 801616e:	4603      	mov	r3, r0
 8016170:	4618      	mov	r0, r3
 8016172:	f002 f9d3 	bl	801851c <__aeabi_f2uiz>
 8016176:	4603      	mov	r3, r0
 8016178:	b29b      	uxth	r3, r3
 801617a:	1ae3      	subs	r3, r4, r3
 801617c:	b29c      	uxth	r4, r3
 801617e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016180:	f002 f828 	bl	80181d4 <__aeabi_i2f>
 8016184:	4603      	mov	r3, r0
 8016186:	4618      	mov	r0, r3
 8016188:	69f9      	ldr	r1, [r7, #28]
 801618a:	f002 f92b 	bl	80183e4 <__aeabi_fdiv>
 801618e:	4603      	mov	r3, r0
 8016190:	4618      	mov	r0, r3
 8016192:	f002 f9c3 	bl	801851c <__aeabi_f2uiz>
 8016196:	4603      	mov	r3, r0
 8016198:	b29b      	uxth	r3, r3
 801619a:	005b      	lsls	r3, r3, #1
 801619c:	b29b      	uxth	r3, r3
 801619e:	3301      	adds	r3, #1
 80161a0:	b29b      	uxth	r3, r3
 80161a2:	4628      	mov	r0, r5
 80161a4:	4621      	mov	r1, r4
 80161a6:	461a      	mov	r2, r3
 80161a8:	2301      	movs	r3, #1
 80161aa:	f7ff fe73 	bl	8015e94 <LCD_DrawLine>
      LCD_DrawLine((Xpos-x), (Ypos-(uint16_t)(y/K)), (2*(uint16_t)(y/K) + 1), LCD_DIR_VERTICAL);
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	b29a      	uxth	r2, r3
 80161b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161b4:	b29b      	uxth	r3, r3
 80161b6:	1ad3      	subs	r3, r2, r3
 80161b8:	b29d      	uxth	r5, r3
 80161ba:	68bb      	ldr	r3, [r7, #8]
 80161bc:	b29c      	uxth	r4, r3
 80161be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80161c0:	f002 f808 	bl	80181d4 <__aeabi_i2f>
 80161c4:	4603      	mov	r3, r0
 80161c6:	4618      	mov	r0, r3
 80161c8:	69f9      	ldr	r1, [r7, #28]
 80161ca:	f002 f90b 	bl	80183e4 <__aeabi_fdiv>
 80161ce:	4603      	mov	r3, r0
 80161d0:	4618      	mov	r0, r3
 80161d2:	f002 f9a3 	bl	801851c <__aeabi_f2uiz>
 80161d6:	4603      	mov	r3, r0
 80161d8:	b29b      	uxth	r3, r3
 80161da:	1ae3      	subs	r3, r4, r3
 80161dc:	b29c      	uxth	r4, r3
 80161de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80161e0:	f001 fff8 	bl	80181d4 <__aeabi_i2f>
 80161e4:	4603      	mov	r3, r0
 80161e6:	4618      	mov	r0, r3
 80161e8:	69f9      	ldr	r1, [r7, #28]
 80161ea:	f002 f8fb 	bl	80183e4 <__aeabi_fdiv>
 80161ee:	4603      	mov	r3, r0
 80161f0:	4618      	mov	r0, r3
 80161f2:	f002 f993 	bl	801851c <__aeabi_f2uiz>
 80161f6:	4603      	mov	r3, r0
 80161f8:	b29b      	uxth	r3, r3
 80161fa:	005b      	lsls	r3, r3, #1
 80161fc:	b29b      	uxth	r3, r3
 80161fe:	3301      	adds	r3, #1
 8016200:	b29b      	uxth	r3, r3
 8016202:	4628      	mov	r0, r5
 8016204:	4621      	mov	r1, r4
 8016206:	461a      	mov	r2, r3
 8016208:	2301      	movs	r3, #1
 801620a:	f7ff fe43 	bl	8015e94 <LCD_DrawLine>
      
      e2 = err;
 801620e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016210:	623b      	str	r3, [r7, #32]
      if (e2 <= y) 
 8016212:	6a3a      	ldr	r2, [r7, #32]
 8016214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016216:	429a      	cmp	r2, r3
 8016218:	dc13      	bgt.n	8016242 <LCD_DrawFullEllipse+0x156>
      {
        err += ++y*2+1;
 801621a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801621c:	3301      	adds	r3, #1
 801621e:	62bb      	str	r3, [r7, #40]	; 0x28
 8016220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016222:	005b      	lsls	r3, r3, #1
 8016224:	3301      	adds	r3, #1
 8016226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016228:	4413      	add	r3, r2
 801622a:	627b      	str	r3, [r7, #36]	; 0x24
        if (-x == y && e2 <= x) e2 = 0;
 801622c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801622e:	425a      	negs	r2, r3
 8016230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016232:	429a      	cmp	r2, r3
 8016234:	d105      	bne.n	8016242 <LCD_DrawFullEllipse+0x156>
 8016236:	6a3a      	ldr	r2, [r7, #32]
 8016238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801623a:	429a      	cmp	r2, r3
 801623c:	dc01      	bgt.n	8016242 <LCD_DrawFullEllipse+0x156>
 801623e:	2300      	movs	r3, #0
 8016240:	623b      	str	r3, [r7, #32]
      }
      if (e2 > x) err += ++x*2+1;
 8016242:	6a3a      	ldr	r2, [r7, #32]
 8016244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016246:	429a      	cmp	r2, r3
 8016248:	dd08      	ble.n	801625c <LCD_DrawFullEllipse+0x170>
 801624a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801624c:	3301      	adds	r3, #1
 801624e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016252:	005b      	lsls	r3, r3, #1
 8016254:	3301      	adds	r3, #1
 8016256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016258:	4413      	add	r3, r2
 801625a:	627b      	str	r3, [r7, #36]	; 0x24
      
    }
    while (x <= 0);
 801625c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801625e:	2b00      	cmp	r3, #0
 8016260:	f77f af6f 	ble.w	8016142 <LCD_DrawFullEllipse+0x56>
 8016264:	e095      	b.n	8016392 <LCD_DrawFullEllipse+0x2a6>
  }
  else
  {
    y = -Radius2; 
 8016266:	683b      	ldr	r3, [r7, #0]
 8016268:	425b      	negs	r3, r3
 801626a:	62bb      	str	r3, [r7, #40]	; 0x28
    x = 0;
 801626c:	2300      	movs	r3, #0
 801626e:	62fb      	str	r3, [r7, #44]	; 0x2c
    do 
    { 
      K = (float)(rad2/rad1);       
 8016270:	6978      	ldr	r0, [r7, #20]
 8016272:	69b9      	ldr	r1, [r7, #24]
 8016274:	f002 f8b6 	bl	80183e4 <__aeabi_fdiv>
 8016278:	4603      	mov	r3, r0
 801627a:	61fb      	str	r3, [r7, #28]
      LCD_DrawLine((Xpos-(uint16_t)(x/K)), (Ypos+y), (2*(uint16_t)(x/K) + 1), LCD_DIR_HORIZONTAL);
 801627c:	68fb      	ldr	r3, [r7, #12]
 801627e:	b29c      	uxth	r4, r3
 8016280:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016282:	f001 ffa7 	bl	80181d4 <__aeabi_i2f>
 8016286:	4603      	mov	r3, r0
 8016288:	4618      	mov	r0, r3
 801628a:	69f9      	ldr	r1, [r7, #28]
 801628c:	f002 f8aa 	bl	80183e4 <__aeabi_fdiv>
 8016290:	4603      	mov	r3, r0
 8016292:	4618      	mov	r0, r3
 8016294:	f002 f942 	bl	801851c <__aeabi_f2uiz>
 8016298:	4603      	mov	r3, r0
 801629a:	b29b      	uxth	r3, r3
 801629c:	1ae3      	subs	r3, r4, r3
 801629e:	b29d      	uxth	r5, r3
 80162a0:	68bb      	ldr	r3, [r7, #8]
 80162a2:	b29a      	uxth	r2, r3
 80162a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162a6:	b29b      	uxth	r3, r3
 80162a8:	4413      	add	r3, r2
 80162aa:	b29c      	uxth	r4, r3
 80162ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80162ae:	f001 ff91 	bl	80181d4 <__aeabi_i2f>
 80162b2:	4603      	mov	r3, r0
 80162b4:	4618      	mov	r0, r3
 80162b6:	69f9      	ldr	r1, [r7, #28]
 80162b8:	f002 f894 	bl	80183e4 <__aeabi_fdiv>
 80162bc:	4603      	mov	r3, r0
 80162be:	4618      	mov	r0, r3
 80162c0:	f002 f92c 	bl	801851c <__aeabi_f2uiz>
 80162c4:	4603      	mov	r3, r0
 80162c6:	b29b      	uxth	r3, r3
 80162c8:	005b      	lsls	r3, r3, #1
 80162ca:	b29b      	uxth	r3, r3
 80162cc:	3301      	adds	r3, #1
 80162ce:	b29b      	uxth	r3, r3
 80162d0:	4628      	mov	r0, r5
 80162d2:	4621      	mov	r1, r4
 80162d4:	461a      	mov	r2, r3
 80162d6:	2300      	movs	r3, #0
 80162d8:	f7ff fddc 	bl	8015e94 <LCD_DrawLine>
      LCD_DrawLine((Xpos-(uint16_t)(x/K)), (Ypos-y), (2*(uint16_t)(x/K) + 1), LCD_DIR_HORIZONTAL);
 80162dc:	68fb      	ldr	r3, [r7, #12]
 80162de:	b29c      	uxth	r4, r3
 80162e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80162e2:	f001 ff77 	bl	80181d4 <__aeabi_i2f>
 80162e6:	4603      	mov	r3, r0
 80162e8:	4618      	mov	r0, r3
 80162ea:	69f9      	ldr	r1, [r7, #28]
 80162ec:	f002 f87a 	bl	80183e4 <__aeabi_fdiv>
 80162f0:	4603      	mov	r3, r0
 80162f2:	4618      	mov	r0, r3
 80162f4:	f002 f912 	bl	801851c <__aeabi_f2uiz>
 80162f8:	4603      	mov	r3, r0
 80162fa:	b29b      	uxth	r3, r3
 80162fc:	1ae3      	subs	r3, r4, r3
 80162fe:	b29d      	uxth	r5, r3
 8016300:	68bb      	ldr	r3, [r7, #8]
 8016302:	b29a      	uxth	r2, r3
 8016304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016306:	b29b      	uxth	r3, r3
 8016308:	1ad3      	subs	r3, r2, r3
 801630a:	b29c      	uxth	r4, r3
 801630c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801630e:	f001 ff61 	bl	80181d4 <__aeabi_i2f>
 8016312:	4603      	mov	r3, r0
 8016314:	4618      	mov	r0, r3
 8016316:	69f9      	ldr	r1, [r7, #28]
 8016318:	f002 f864 	bl	80183e4 <__aeabi_fdiv>
 801631c:	4603      	mov	r3, r0
 801631e:	4618      	mov	r0, r3
 8016320:	f002 f8fc 	bl	801851c <__aeabi_f2uiz>
 8016324:	4603      	mov	r3, r0
 8016326:	b29b      	uxth	r3, r3
 8016328:	005b      	lsls	r3, r3, #1
 801632a:	b29b      	uxth	r3, r3
 801632c:	3301      	adds	r3, #1
 801632e:	b29b      	uxth	r3, r3
 8016330:	4628      	mov	r0, r5
 8016332:	4621      	mov	r1, r4
 8016334:	461a      	mov	r2, r3
 8016336:	2300      	movs	r3, #0
 8016338:	f7ff fdac 	bl	8015e94 <LCD_DrawLine>
      
      e2 = err;
 801633c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801633e:	623b      	str	r3, [r7, #32]
      if (e2 <= x) 
 8016340:	6a3a      	ldr	r2, [r7, #32]
 8016342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016344:	429a      	cmp	r2, r3
 8016346:	dc13      	bgt.n	8016370 <LCD_DrawFullEllipse+0x284>
      {
        err += ++x*2+1;
 8016348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801634a:	3301      	adds	r3, #1
 801634c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801634e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016350:	005b      	lsls	r3, r3, #1
 8016352:	3301      	adds	r3, #1
 8016354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016356:	4413      	add	r3, r2
 8016358:	627b      	str	r3, [r7, #36]	; 0x24
        if (-y == x && e2 <= y) e2 = 0;
 801635a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801635c:	425a      	negs	r2, r3
 801635e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016360:	429a      	cmp	r2, r3
 8016362:	d105      	bne.n	8016370 <LCD_DrawFullEllipse+0x284>
 8016364:	6a3a      	ldr	r2, [r7, #32]
 8016366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016368:	429a      	cmp	r2, r3
 801636a:	dc01      	bgt.n	8016370 <LCD_DrawFullEllipse+0x284>
 801636c:	2300      	movs	r3, #0
 801636e:	623b      	str	r3, [r7, #32]
      }
      if (e2 > y) err += ++y*2+1;
 8016370:	6a3a      	ldr	r2, [r7, #32]
 8016372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016374:	429a      	cmp	r2, r3
 8016376:	dd08      	ble.n	801638a <LCD_DrawFullEllipse+0x29e>
 8016378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801637a:	3301      	adds	r3, #1
 801637c:	62bb      	str	r3, [r7, #40]	; 0x28
 801637e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016380:	005b      	lsls	r3, r3, #1
 8016382:	3301      	adds	r3, #1
 8016384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016386:	4413      	add	r3, r2
 8016388:	627b      	str	r3, [r7, #36]	; 0x24
    }
    while (y <= 0);
 801638a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801638c:	2b00      	cmp	r3, #0
 801638e:	f77f af6f 	ble.w	8016270 <LCD_DrawFullEllipse+0x184>
  }
}
 8016392:	3730      	adds	r7, #48	; 0x30
 8016394:	46bd      	mov	sp, r7
 8016396:	bdb0      	pop	{r4, r5, r7, pc}

08016398 <LCD_DrawEllipse>:
  * @param  Radius: specifies Radius.
  * @param  Radius2: specifies Radius2.
  * @retval None
  */
void LCD_DrawEllipse(int Xpos, int Ypos, int Radius, int Radius2)
{
 8016398:	b590      	push	{r4, r7, lr}
 801639a:	b08d      	sub	sp, #52	; 0x34
 801639c:	af00      	add	r7, sp, #0
 801639e:	60f8      	str	r0, [r7, #12]
 80163a0:	60b9      	str	r1, [r7, #8]
 80163a2:	607a      	str	r2, [r7, #4]
 80163a4:	603b      	str	r3, [r7, #0]
  int x = -Radius, y = 0, err = 2-2*Radius, e2;
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	425b      	negs	r3, r3
 80163aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80163ac:	2300      	movs	r3, #0
 80163ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80163b0:	687a      	ldr	r2, [r7, #4]
 80163b2:	4613      	mov	r3, r2
 80163b4:	07db      	lsls	r3, r3, #31
 80163b6:	1a9b      	subs	r3, r3, r2
 80163b8:	005b      	lsls	r3, r3, #1
 80163ba:	3302      	adds	r3, #2
 80163bc:	627b      	str	r3, [r7, #36]	; 0x24
  float K = 0, rad1 = 0, rad2 = 0;
 80163be:	f04f 0300 	mov.w	r3, #0
 80163c2:	61fb      	str	r3, [r7, #28]
 80163c4:	f04f 0300 	mov.w	r3, #0
 80163c8:	61bb      	str	r3, [r7, #24]
 80163ca:	f04f 0300 	mov.w	r3, #0
 80163ce:	617b      	str	r3, [r7, #20]
   
  rad1 = Radius;
 80163d0:	6878      	ldr	r0, [r7, #4]
 80163d2:	f001 feff 	bl	80181d4 <__aeabi_i2f>
 80163d6:	4603      	mov	r3, r0
 80163d8:	61bb      	str	r3, [r7, #24]
  rad2 = Radius2;
 80163da:	6838      	ldr	r0, [r7, #0]
 80163dc:	f001 fefa 	bl	80181d4 <__aeabi_i2f>
 80163e0:	4603      	mov	r3, r0
 80163e2:	617b      	str	r3, [r7, #20]
  
  if (Radius > Radius2)
 80163e4:	687a      	ldr	r2, [r7, #4]
 80163e6:	683b      	ldr	r3, [r7, #0]
 80163e8:	429a      	cmp	r2, r3
 80163ea:	f340 80b9 	ble.w	8016560 <LCD_DrawEllipse+0x1c8>
  { 
    do {
      K = (float)(rad1/rad2);
 80163ee:	69b8      	ldr	r0, [r7, #24]
 80163f0:	6979      	ldr	r1, [r7, #20]
 80163f2:	f001 fff7 	bl	80183e4 <__aeabi_fdiv>
 80163f6:	4603      	mov	r3, r0
 80163f8:	61fb      	str	r3, [r7, #28]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-x) + LCD_PIXEL_WIDTH*(Ypos+(uint16_t)(y/K))))) = CurrentTextColor; 
 80163fa:	68fa      	ldr	r2, [r7, #12]
 80163fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163fe:	1ad4      	subs	r4, r2, r3
 8016400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016402:	f001 fee7 	bl	80181d4 <__aeabi_i2f>
 8016406:	4603      	mov	r3, r0
 8016408:	4618      	mov	r0, r3
 801640a:	69f9      	ldr	r1, [r7, #28]
 801640c:	f001 ffea 	bl	80183e4 <__aeabi_fdiv>
 8016410:	4603      	mov	r3, r0
 8016412:	4618      	mov	r0, r3
 8016414:	f002 f882 	bl	801851c <__aeabi_f2uiz>
 8016418:	4603      	mov	r3, r0
 801641a:	b29b      	uxth	r3, r3
 801641c:	461a      	mov	r2, r3
 801641e:	68bb      	ldr	r3, [r7, #8]
 8016420:	441a      	add	r2, r3
 8016422:	4613      	mov	r3, r2
 8016424:	011b      	lsls	r3, r3, #4
 8016426:	1a9b      	subs	r3, r3, r2
 8016428:	011b      	lsls	r3, r3, #4
 801642a:	4423      	add	r3, r4
 801642c:	005b      	lsls	r3, r3, #1
 801642e:	461a      	mov	r2, r3
 8016430:	4b49      	ldr	r3, [pc, #292]	; (8016558 <LCD_DrawEllipse+0x1c0>)
 8016432:	681b      	ldr	r3, [r3, #0]
 8016434:	4413      	add	r3, r2
 8016436:	4a49      	ldr	r2, [pc, #292]	; (801655c <LCD_DrawEllipse+0x1c4>)
 8016438:	8812      	ldrh	r2, [r2, #0]
 801643a:	801a      	strh	r2, [r3, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+x) + LCD_PIXEL_WIDTH*(Ypos+(uint16_t)(y/K))))) = CurrentTextColor;
 801643c:	68fa      	ldr	r2, [r7, #12]
 801643e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016440:	18d4      	adds	r4, r2, r3
 8016442:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016444:	f001 fec6 	bl	80181d4 <__aeabi_i2f>
 8016448:	4603      	mov	r3, r0
 801644a:	4618      	mov	r0, r3
 801644c:	69f9      	ldr	r1, [r7, #28]
 801644e:	f001 ffc9 	bl	80183e4 <__aeabi_fdiv>
 8016452:	4603      	mov	r3, r0
 8016454:	4618      	mov	r0, r3
 8016456:	f002 f861 	bl	801851c <__aeabi_f2uiz>
 801645a:	4603      	mov	r3, r0
 801645c:	b29b      	uxth	r3, r3
 801645e:	461a      	mov	r2, r3
 8016460:	68bb      	ldr	r3, [r7, #8]
 8016462:	441a      	add	r2, r3
 8016464:	4613      	mov	r3, r2
 8016466:	011b      	lsls	r3, r3, #4
 8016468:	1a9b      	subs	r3, r3, r2
 801646a:	011b      	lsls	r3, r3, #4
 801646c:	4423      	add	r3, r4
 801646e:	005b      	lsls	r3, r3, #1
 8016470:	461a      	mov	r2, r3
 8016472:	4b39      	ldr	r3, [pc, #228]	; (8016558 <LCD_DrawEllipse+0x1c0>)
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	4413      	add	r3, r2
 8016478:	4a38      	ldr	r2, [pc, #224]	; (801655c <LCD_DrawEllipse+0x1c4>)
 801647a:	8812      	ldrh	r2, [r2, #0]
 801647c:	801a      	strh	r2, [r3, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+x) + LCD_PIXEL_WIDTH*(Ypos-(uint16_t)(y/K))))) = CurrentTextColor;
 801647e:	68fa      	ldr	r2, [r7, #12]
 8016480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016482:	18d4      	adds	r4, r2, r3
 8016484:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016486:	f001 fea5 	bl	80181d4 <__aeabi_i2f>
 801648a:	4603      	mov	r3, r0
 801648c:	4618      	mov	r0, r3
 801648e:	69f9      	ldr	r1, [r7, #28]
 8016490:	f001 ffa8 	bl	80183e4 <__aeabi_fdiv>
 8016494:	4603      	mov	r3, r0
 8016496:	4618      	mov	r0, r3
 8016498:	f002 f840 	bl	801851c <__aeabi_f2uiz>
 801649c:	4603      	mov	r3, r0
 801649e:	b29b      	uxth	r3, r3
 80164a0:	68ba      	ldr	r2, [r7, #8]
 80164a2:	1ad2      	subs	r2, r2, r3
 80164a4:	4613      	mov	r3, r2
 80164a6:	011b      	lsls	r3, r3, #4
 80164a8:	1a9b      	subs	r3, r3, r2
 80164aa:	011b      	lsls	r3, r3, #4
 80164ac:	4423      	add	r3, r4
 80164ae:	005b      	lsls	r3, r3, #1
 80164b0:	461a      	mov	r2, r3
 80164b2:	4b29      	ldr	r3, [pc, #164]	; (8016558 <LCD_DrawEllipse+0x1c0>)
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	4413      	add	r3, r2
 80164b8:	4a28      	ldr	r2, [pc, #160]	; (801655c <LCD_DrawEllipse+0x1c4>)
 80164ba:	8812      	ldrh	r2, [r2, #0]
 80164bc:	801a      	strh	r2, [r3, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-x) + LCD_PIXEL_WIDTH*(Ypos-(uint16_t)(y/K))))) = CurrentTextColor;
 80164be:	68fa      	ldr	r2, [r7, #12]
 80164c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164c2:	1ad4      	subs	r4, r2, r3
 80164c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80164c6:	f001 fe85 	bl	80181d4 <__aeabi_i2f>
 80164ca:	4603      	mov	r3, r0
 80164cc:	4618      	mov	r0, r3
 80164ce:	69f9      	ldr	r1, [r7, #28]
 80164d0:	f001 ff88 	bl	80183e4 <__aeabi_fdiv>
 80164d4:	4603      	mov	r3, r0
 80164d6:	4618      	mov	r0, r3
 80164d8:	f002 f820 	bl	801851c <__aeabi_f2uiz>
 80164dc:	4603      	mov	r3, r0
 80164de:	b29b      	uxth	r3, r3
 80164e0:	68ba      	ldr	r2, [r7, #8]
 80164e2:	1ad2      	subs	r2, r2, r3
 80164e4:	4613      	mov	r3, r2
 80164e6:	011b      	lsls	r3, r3, #4
 80164e8:	1a9b      	subs	r3, r3, r2
 80164ea:	011b      	lsls	r3, r3, #4
 80164ec:	4423      	add	r3, r4
 80164ee:	005b      	lsls	r3, r3, #1
 80164f0:	461a      	mov	r2, r3
 80164f2:	4b19      	ldr	r3, [pc, #100]	; (8016558 <LCD_DrawEllipse+0x1c0>)
 80164f4:	681b      	ldr	r3, [r3, #0]
 80164f6:	4413      	add	r3, r2
 80164f8:	4a18      	ldr	r2, [pc, #96]	; (801655c <LCD_DrawEllipse+0x1c4>)
 80164fa:	8812      	ldrh	r2, [r2, #0]
 80164fc:	801a      	strh	r2, [r3, #0]
            
      e2 = err;
 80164fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016500:	623b      	str	r3, [r7, #32]
      if (e2 <= y) {
 8016502:	6a3a      	ldr	r2, [r7, #32]
 8016504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016506:	429a      	cmp	r2, r3
 8016508:	dc13      	bgt.n	8016532 <LCD_DrawEllipse+0x19a>
        err += ++y*2+1;
 801650a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801650c:	3301      	adds	r3, #1
 801650e:	62bb      	str	r3, [r7, #40]	; 0x28
 8016510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016512:	005b      	lsls	r3, r3, #1
 8016514:	3301      	adds	r3, #1
 8016516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016518:	4413      	add	r3, r2
 801651a:	627b      	str	r3, [r7, #36]	; 0x24
        if (-x == y && e2 <= x) e2 = 0;
 801651c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801651e:	425a      	negs	r2, r3
 8016520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016522:	429a      	cmp	r2, r3
 8016524:	d105      	bne.n	8016532 <LCD_DrawEllipse+0x19a>
 8016526:	6a3a      	ldr	r2, [r7, #32]
 8016528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801652a:	429a      	cmp	r2, r3
 801652c:	dc01      	bgt.n	8016532 <LCD_DrawEllipse+0x19a>
 801652e:	2300      	movs	r3, #0
 8016530:	623b      	str	r3, [r7, #32]
      }
      if (e2 > x) err += ++x*2+1;
 8016532:	6a3a      	ldr	r2, [r7, #32]
 8016534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016536:	429a      	cmp	r2, r3
 8016538:	dd08      	ble.n	801654c <LCD_DrawEllipse+0x1b4>
 801653a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801653c:	3301      	adds	r3, #1
 801653e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016542:	005b      	lsls	r3, r3, #1
 8016544:	3301      	adds	r3, #1
 8016546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016548:	4413      	add	r3, r2
 801654a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    while (x <= 0);
 801654c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801654e:	2b00      	cmp	r3, #0
 8016550:	f77f af4d 	ble.w	80163ee <LCD_DrawEllipse+0x56>
 8016554:	e0bc      	b.n	80166d0 <LCD_DrawEllipse+0x338>
 8016556:	bf00      	nop
 8016558:	200000c0 	.word	0x200000c0
 801655c:	20005354 	.word	0x20005354
  }
  else
  {
    y = -Radius2; 
 8016560:	683b      	ldr	r3, [r7, #0]
 8016562:	425b      	negs	r3, r3
 8016564:	62bb      	str	r3, [r7, #40]	; 0x28
    x = 0;
 8016566:	2300      	movs	r3, #0
 8016568:	62fb      	str	r3, [r7, #44]	; 0x2c
    do { 
      K = (float)(rad2/rad1);
 801656a:	6978      	ldr	r0, [r7, #20]
 801656c:	69b9      	ldr	r1, [r7, #24]
 801656e:	f001 ff39 	bl	80183e4 <__aeabi_fdiv>
 8016572:	4603      	mov	r3, r0
 8016574:	61fb      	str	r3, [r7, #28]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-(uint16_t)(x/K)) + LCD_PIXEL_WIDTH*(Ypos+y)))) = CurrentTextColor; 
 8016576:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016578:	f001 fe2c 	bl	80181d4 <__aeabi_i2f>
 801657c:	4603      	mov	r3, r0
 801657e:	4618      	mov	r0, r3
 8016580:	69f9      	ldr	r1, [r7, #28]
 8016582:	f001 ff2f 	bl	80183e4 <__aeabi_fdiv>
 8016586:	4603      	mov	r3, r0
 8016588:	4618      	mov	r0, r3
 801658a:	f001 ffc7 	bl	801851c <__aeabi_f2uiz>
 801658e:	4603      	mov	r3, r0
 8016590:	b29b      	uxth	r3, r3
 8016592:	68fa      	ldr	r2, [r7, #12]
 8016594:	1ad1      	subs	r1, r2, r3
 8016596:	68ba      	ldr	r2, [r7, #8]
 8016598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801659a:	441a      	add	r2, r3
 801659c:	4613      	mov	r3, r2
 801659e:	011b      	lsls	r3, r3, #4
 80165a0:	1a9b      	subs	r3, r3, r2
 80165a2:	011b      	lsls	r3, r3, #4
 80165a4:	440b      	add	r3, r1
 80165a6:	005b      	lsls	r3, r3, #1
 80165a8:	461a      	mov	r2, r3
 80165aa:	4b4b      	ldr	r3, [pc, #300]	; (80166d8 <LCD_DrawEllipse+0x340>)
 80165ac:	681b      	ldr	r3, [r3, #0]
 80165ae:	4413      	add	r3, r2
 80165b0:	4a4a      	ldr	r2, [pc, #296]	; (80166dc <LCD_DrawEllipse+0x344>)
 80165b2:	8812      	ldrh	r2, [r2, #0]
 80165b4:	801a      	strh	r2, [r3, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+(uint16_t)(x/K)) + LCD_PIXEL_WIDTH*(Ypos+y)))) = CurrentTextColor;
 80165b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80165b8:	f001 fe0c 	bl	80181d4 <__aeabi_i2f>
 80165bc:	4603      	mov	r3, r0
 80165be:	4618      	mov	r0, r3
 80165c0:	69f9      	ldr	r1, [r7, #28]
 80165c2:	f001 ff0f 	bl	80183e4 <__aeabi_fdiv>
 80165c6:	4603      	mov	r3, r0
 80165c8:	4618      	mov	r0, r3
 80165ca:	f001 ffa7 	bl	801851c <__aeabi_f2uiz>
 80165ce:	4603      	mov	r3, r0
 80165d0:	b29b      	uxth	r3, r3
 80165d2:	461a      	mov	r2, r3
 80165d4:	68fb      	ldr	r3, [r7, #12]
 80165d6:	18d1      	adds	r1, r2, r3
 80165d8:	68ba      	ldr	r2, [r7, #8]
 80165da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165dc:	441a      	add	r2, r3
 80165de:	4613      	mov	r3, r2
 80165e0:	011b      	lsls	r3, r3, #4
 80165e2:	1a9b      	subs	r3, r3, r2
 80165e4:	011b      	lsls	r3, r3, #4
 80165e6:	440b      	add	r3, r1
 80165e8:	005b      	lsls	r3, r3, #1
 80165ea:	461a      	mov	r2, r3
 80165ec:	4b3a      	ldr	r3, [pc, #232]	; (80166d8 <LCD_DrawEllipse+0x340>)
 80165ee:	681b      	ldr	r3, [r3, #0]
 80165f0:	4413      	add	r3, r2
 80165f2:	4a3a      	ldr	r2, [pc, #232]	; (80166dc <LCD_DrawEllipse+0x344>)
 80165f4:	8812      	ldrh	r2, [r2, #0]
 80165f6:	801a      	strh	r2, [r3, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+(uint16_t)(x/K)) + LCD_PIXEL_WIDTH*(Ypos-y)))) = CurrentTextColor;
 80165f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80165fa:	f001 fdeb 	bl	80181d4 <__aeabi_i2f>
 80165fe:	4603      	mov	r3, r0
 8016600:	4618      	mov	r0, r3
 8016602:	69f9      	ldr	r1, [r7, #28]
 8016604:	f001 feee 	bl	80183e4 <__aeabi_fdiv>
 8016608:	4603      	mov	r3, r0
 801660a:	4618      	mov	r0, r3
 801660c:	f001 ff86 	bl	801851c <__aeabi_f2uiz>
 8016610:	4603      	mov	r3, r0
 8016612:	b29b      	uxth	r3, r3
 8016614:	461a      	mov	r2, r3
 8016616:	68fb      	ldr	r3, [r7, #12]
 8016618:	18d1      	adds	r1, r2, r3
 801661a:	68ba      	ldr	r2, [r7, #8]
 801661c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801661e:	1ad2      	subs	r2, r2, r3
 8016620:	4613      	mov	r3, r2
 8016622:	011b      	lsls	r3, r3, #4
 8016624:	1a9b      	subs	r3, r3, r2
 8016626:	011b      	lsls	r3, r3, #4
 8016628:	440b      	add	r3, r1
 801662a:	005b      	lsls	r3, r3, #1
 801662c:	461a      	mov	r2, r3
 801662e:	4b2a      	ldr	r3, [pc, #168]	; (80166d8 <LCD_DrawEllipse+0x340>)
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	4413      	add	r3, r2
 8016634:	4a29      	ldr	r2, [pc, #164]	; (80166dc <LCD_DrawEllipse+0x344>)
 8016636:	8812      	ldrh	r2, [r2, #0]
 8016638:	801a      	strh	r2, [r3, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-(uint16_t)(x/K)) + LCD_PIXEL_WIDTH*(Ypos-y)))) = CurrentTextColor;
 801663a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801663c:	f001 fdca 	bl	80181d4 <__aeabi_i2f>
 8016640:	4603      	mov	r3, r0
 8016642:	4618      	mov	r0, r3
 8016644:	69f9      	ldr	r1, [r7, #28]
 8016646:	f001 fecd 	bl	80183e4 <__aeabi_fdiv>
 801664a:	4603      	mov	r3, r0
 801664c:	4618      	mov	r0, r3
 801664e:	f001 ff65 	bl	801851c <__aeabi_f2uiz>
 8016652:	4603      	mov	r3, r0
 8016654:	b29b      	uxth	r3, r3
 8016656:	68fa      	ldr	r2, [r7, #12]
 8016658:	1ad1      	subs	r1, r2, r3
 801665a:	68ba      	ldr	r2, [r7, #8]
 801665c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801665e:	1ad2      	subs	r2, r2, r3
 8016660:	4613      	mov	r3, r2
 8016662:	011b      	lsls	r3, r3, #4
 8016664:	1a9b      	subs	r3, r3, r2
 8016666:	011b      	lsls	r3, r3, #4
 8016668:	440b      	add	r3, r1
 801666a:	005b      	lsls	r3, r3, #1
 801666c:	461a      	mov	r2, r3
 801666e:	4b1a      	ldr	r3, [pc, #104]	; (80166d8 <LCD_DrawEllipse+0x340>)
 8016670:	681b      	ldr	r3, [r3, #0]
 8016672:	4413      	add	r3, r2
 8016674:	4a19      	ldr	r2, [pc, #100]	; (80166dc <LCD_DrawEllipse+0x344>)
 8016676:	8812      	ldrh	r2, [r2, #0]
 8016678:	801a      	strh	r2, [r3, #0]
      
      e2 = err;
 801667a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801667c:	623b      	str	r3, [r7, #32]
      if (e2 <= x) {
 801667e:	6a3a      	ldr	r2, [r7, #32]
 8016680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016682:	429a      	cmp	r2, r3
 8016684:	dc13      	bgt.n	80166ae <LCD_DrawEllipse+0x316>
        err += ++x*2+1;
 8016686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016688:	3301      	adds	r3, #1
 801668a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801668c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801668e:	005b      	lsls	r3, r3, #1
 8016690:	3301      	adds	r3, #1
 8016692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016694:	4413      	add	r3, r2
 8016696:	627b      	str	r3, [r7, #36]	; 0x24
        if (-y == x && e2 <= y) e2 = 0;
 8016698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801669a:	425a      	negs	r2, r3
 801669c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801669e:	429a      	cmp	r2, r3
 80166a0:	d105      	bne.n	80166ae <LCD_DrawEllipse+0x316>
 80166a2:	6a3a      	ldr	r2, [r7, #32]
 80166a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166a6:	429a      	cmp	r2, r3
 80166a8:	dc01      	bgt.n	80166ae <LCD_DrawEllipse+0x316>
 80166aa:	2300      	movs	r3, #0
 80166ac:	623b      	str	r3, [r7, #32]
      }
      if (e2 > y) err += ++y*2+1;     
 80166ae:	6a3a      	ldr	r2, [r7, #32]
 80166b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166b2:	429a      	cmp	r2, r3
 80166b4:	dd08      	ble.n	80166c8 <LCD_DrawEllipse+0x330>
 80166b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166b8:	3301      	adds	r3, #1
 80166ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80166bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166be:	005b      	lsls	r3, r3, #1
 80166c0:	3301      	adds	r3, #1
 80166c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80166c4:	4413      	add	r3, r2
 80166c6:	627b      	str	r3, [r7, #36]	; 0x24
    }
    while (y <= 0);
 80166c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	f77f af4d 	ble.w	801656a <LCD_DrawEllipse+0x1d2>
  }
}
 80166d0:	3734      	adds	r7, #52	; 0x34
 80166d2:	46bd      	mov	sp, r7
 80166d4:	bd90      	pop	{r4, r7, pc}
 80166d6:	bf00      	nop
 80166d8:	200000c0 	.word	0x200000c0
 80166dc:	20005354 	.word	0x20005354

080166e0 <LCD_DrawMonoPict>:
  * @brief  Displays a mono-color picture.
  * @param  Pict: pointer to the picture array.
  * @retval None
  */
void LCD_DrawMonoPict(const uint32_t *Pict)
{
 80166e0:	b480      	push	{r7}
 80166e2:	b085      	sub	sp, #20
 80166e4:	af00      	add	r7, sp, #0
 80166e6:	6078      	str	r0, [r7, #4]
  uint32_t index = 0, counter = 0;
 80166e8:	2300      	movs	r3, #0
 80166ea:	60fb      	str	r3, [r7, #12]
 80166ec:	2300      	movs	r3, #0
 80166ee:	60bb      	str	r3, [r7, #8]
  
   
  for(index = 0; index < 2400; index++)
 80166f0:	2300      	movs	r3, #0
 80166f2:	60fb      	str	r3, [r7, #12]
 80166f4:	e022      	b.n	801673c <LCD_DrawMonoPict+0x5c>
  {
    for(counter = 0; counter < 32; counter++)
 80166f6:	2300      	movs	r3, #0
 80166f8:	60bb      	str	r3, [r7, #8]
 80166fa:	e019      	b.n	8016730 <LCD_DrawMonoPict+0x50>
    {
      if((Pict[index] & (1 << counter)) == 0x00)
 80166fc:	68fb      	ldr	r3, [r7, #12]
 80166fe:	009b      	lsls	r3, r3, #2
 8016700:	687a      	ldr	r2, [r7, #4]
 8016702:	4413      	add	r3, r2
 8016704:	681a      	ldr	r2, [r3, #0]
 8016706:	68bb      	ldr	r3, [r7, #8]
 8016708:	2101      	movs	r1, #1
 801670a:	fa01 f303 	lsl.w	r3, r1, r3
 801670e:	4013      	ands	r3, r2
 8016710:	2b00      	cmp	r3, #0
 8016712:	d105      	bne.n	8016720 <LCD_DrawMonoPict+0x40>
      {
        *(__IO uint16_t*)(CurrentFrameBuffer) = CurrentBackColor;
 8016714:	4b0e      	ldr	r3, [pc, #56]	; (8016750 <LCD_DrawMonoPict+0x70>)
 8016716:	681b      	ldr	r3, [r3, #0]
 8016718:	4a0e      	ldr	r2, [pc, #56]	; (8016754 <LCD_DrawMonoPict+0x74>)
 801671a:	8812      	ldrh	r2, [r2, #0]
 801671c:	801a      	strh	r2, [r3, #0]
 801671e:	e004      	b.n	801672a <LCD_DrawMonoPict+0x4a>
      }
      else
      {
        *(__IO uint16_t*)(CurrentFrameBuffer) = CurrentTextColor;
 8016720:	4b0b      	ldr	r3, [pc, #44]	; (8016750 <LCD_DrawMonoPict+0x70>)
 8016722:	681b      	ldr	r3, [r3, #0]
 8016724:	4a0c      	ldr	r2, [pc, #48]	; (8016758 <LCD_DrawMonoPict+0x78>)
 8016726:	8812      	ldrh	r2, [r2, #0]
 8016728:	801a      	strh	r2, [r3, #0]
  uint32_t index = 0, counter = 0;
  
   
  for(index = 0; index < 2400; index++)
  {
    for(counter = 0; counter < 32; counter++)
 801672a:	68bb      	ldr	r3, [r7, #8]
 801672c:	3301      	adds	r3, #1
 801672e:	60bb      	str	r3, [r7, #8]
 8016730:	68bb      	ldr	r3, [r7, #8]
 8016732:	2b1f      	cmp	r3, #31
 8016734:	d9e2      	bls.n	80166fc <LCD_DrawMonoPict+0x1c>
void LCD_DrawMonoPict(const uint32_t *Pict)
{
  uint32_t index = 0, counter = 0;
  
   
  for(index = 0; index < 2400; index++)
 8016736:	68fb      	ldr	r3, [r7, #12]
 8016738:	3301      	adds	r3, #1
 801673a:	60fb      	str	r3, [r7, #12]
 801673c:	68fb      	ldr	r3, [r7, #12]
 801673e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8016742:	d3d8      	bcc.n	80166f6 <LCD_DrawMonoPict+0x16>
      {
        *(__IO uint16_t*)(CurrentFrameBuffer) = CurrentTextColor;
      }
    }
  }
}
 8016744:	3714      	adds	r7, #20
 8016746:	46bd      	mov	sp, r7
 8016748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801674c:	4770      	bx	lr
 801674e:	bf00      	nop
 8016750:	200000c0 	.word	0x200000c0
 8016754:	200000bc 	.word	0x200000bc
 8016758:	20005354 	.word	0x20005354

0801675c <LCD_WriteBMP>:
  * @brief  Displays a bitmap picture loaded in the internal Flash.
  * @param  BmpAddress: Bmp picture address in the internal Flash.
  * @retval None
  */
void LCD_WriteBMP(uint32_t BmpAddress)
{
 801675c:	b580      	push	{r7, lr}
 801675e:	b08a      	sub	sp, #40	; 0x28
 8016760:	af00      	add	r7, sp, #0
 8016762:	6078      	str	r0, [r7, #4]
  uint32_t index = 0, size = 0, width = 0, height = 0, bit_pixel = 0;
 8016764:	2300      	movs	r3, #0
 8016766:	627b      	str	r3, [r7, #36]	; 0x24
 8016768:	2300      	movs	r3, #0
 801676a:	617b      	str	r3, [r7, #20]
 801676c:	2300      	movs	r3, #0
 801676e:	613b      	str	r3, [r7, #16]
 8016770:	2300      	movs	r3, #0
 8016772:	60fb      	str	r3, [r7, #12]
 8016774:	2300      	movs	r3, #0
 8016776:	60bb      	str	r3, [r7, #8]
  uint32_t Address;
  uint32_t currentline = 0, linenumber = 0;
 8016778:	2300      	movs	r3, #0
 801677a:	61fb      	str	r3, [r7, #28]
 801677c:	2300      	movs	r3, #0
 801677e:	61bb      	str	r3, [r7, #24]
 
  Address = CurrentFrameBuffer;
 8016780:	4b69      	ldr	r3, [pc, #420]	; (8016928 <LCD_WriteBMP+0x1cc>)
 8016782:	681b      	ldr	r3, [r3, #0]
 8016784:	623b      	str	r3, [r7, #32]

  /* Read bitmap size */
  size = *(__IO uint16_t *) (BmpAddress + 2);
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	3302      	adds	r3, #2
 801678a:	881b      	ldrh	r3, [r3, #0]
 801678c:	b29b      	uxth	r3, r3
 801678e:	617b      	str	r3, [r7, #20]
  size |= (*(__IO uint16_t *) (BmpAddress + 4)) << 16;
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	3304      	adds	r3, #4
 8016794:	881b      	ldrh	r3, [r3, #0]
 8016796:	b29b      	uxth	r3, r3
 8016798:	041b      	lsls	r3, r3, #16
 801679a:	697a      	ldr	r2, [r7, #20]
 801679c:	4313      	orrs	r3, r2
 801679e:	617b      	str	r3, [r7, #20]
  
  /* Get bitmap data address offset */
  index = *(__IO uint16_t *) (BmpAddress + 10);
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	330a      	adds	r3, #10
 80167a4:	881b      	ldrh	r3, [r3, #0]
 80167a6:	b29b      	uxth	r3, r3
 80167a8:	627b      	str	r3, [r7, #36]	; 0x24
  index |= (*(__IO uint16_t *) (BmpAddress + 12)) << 16;
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	330c      	adds	r3, #12
 80167ae:	881b      	ldrh	r3, [r3, #0]
 80167b0:	b29b      	uxth	r3, r3
 80167b2:	041b      	lsls	r3, r3, #16
 80167b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80167b6:	4313      	orrs	r3, r2
 80167b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = *(uint16_t *) (BmpAddress + 18);
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	3312      	adds	r3, #18
 80167be:	881b      	ldrh	r3, [r3, #0]
 80167c0:	613b      	str	r3, [r7, #16]
  width |= (*(uint16_t *) (BmpAddress + 20)) << 16;
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	3314      	adds	r3, #20
 80167c6:	881b      	ldrh	r3, [r3, #0]
 80167c8:	041b      	lsls	r3, r3, #16
 80167ca:	693a      	ldr	r2, [r7, #16]
 80167cc:	4313      	orrs	r3, r2
 80167ce:	613b      	str	r3, [r7, #16]

  /* Read bitmap height */
  height = *(uint16_t *) (BmpAddress + 22);
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	3316      	adds	r3, #22
 80167d4:	881b      	ldrh	r3, [r3, #0]
 80167d6:	60fb      	str	r3, [r7, #12]
  height |= (*(uint16_t *) (BmpAddress + 24)) << 16;
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	3318      	adds	r3, #24
 80167dc:	881b      	ldrh	r3, [r3, #0]
 80167de:	041b      	lsls	r3, r3, #16
 80167e0:	68fa      	ldr	r2, [r7, #12]
 80167e2:	4313      	orrs	r3, r2
 80167e4:	60fb      	str	r3, [r7, #12]

  /* Read bit/pixel */
  bit_pixel = *(uint16_t *) (BmpAddress + 28);  
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	331c      	adds	r3, #28
 80167ea:	881b      	ldrh	r3, [r3, #0]
 80167ec:	60bb      	str	r3, [r7, #8]
 
  if (CurrentLayer == LCD_BACKGROUND_LAYER)
 80167ee:	4b4f      	ldr	r3, [pc, #316]	; (801692c <LCD_WriteBMP+0x1d0>)
 80167f0:	681b      	ldr	r3, [r3, #0]
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	d127      	bne.n	8016846 <LCD_WriteBMP+0xea>
  {
    /* reconfigure layer size in accordance with the picture */
    LTDC_LayerSize(LTDC_Layer1, width, height);
 80167f6:	484e      	ldr	r0, [pc, #312]	; (8016930 <LCD_WriteBMP+0x1d4>)
 80167f8:	6939      	ldr	r1, [r7, #16]
 80167fa:	68fa      	ldr	r2, [r7, #12]
 80167fc:	f7f8 fb9c 	bl	800ef38 <LTDC_LayerSize>
    LTDC_ReloadConfig(LTDC_VBReload);
 8016800:	2002      	movs	r0, #2
 8016802:	f7f8 f91d 	bl	800ea40 <LTDC_ReloadConfig>

    /* Reconfigure the Layer pixel format in accordance with the picture */    
    if ((bit_pixel/8) == 4)
 8016806:	68bb      	ldr	r3, [r7, #8]
 8016808:	3b20      	subs	r3, #32
 801680a:	2b07      	cmp	r3, #7
 801680c:	d807      	bhi.n	801681e <LCD_WriteBMP+0xc2>
    {
      LTDC_LayerPixelFormat(LTDC_Layer1, LTDC_Pixelformat_ARGB8888);
 801680e:	4848      	ldr	r0, [pc, #288]	; (8016930 <LCD_WriteBMP+0x1d4>)
 8016810:	2100      	movs	r1, #0
 8016812:	f7f8 fbf7 	bl	800f004 <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);
 8016816:	2002      	movs	r0, #2
 8016818:	f7f8 f912 	bl	800ea40 <LTDC_ReloadConfig>
 801681c:	e03a      	b.n	8016894 <LCD_WriteBMP+0x138>
    }
    else if ((bit_pixel/8) == 2)
 801681e:	68bb      	ldr	r3, [r7, #8]
 8016820:	3b10      	subs	r3, #16
 8016822:	2b07      	cmp	r3, #7
 8016824:	d807      	bhi.n	8016836 <LCD_WriteBMP+0xda>
    {
      LTDC_LayerPixelFormat(LTDC_Layer1, LTDC_Pixelformat_RGB565);
 8016826:	4842      	ldr	r0, [pc, #264]	; (8016930 <LCD_WriteBMP+0x1d4>)
 8016828:	2102      	movs	r1, #2
 801682a:	f7f8 fbeb 	bl	800f004 <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);
 801682e:	2002      	movs	r0, #2
 8016830:	f7f8 f906 	bl	800ea40 <LTDC_ReloadConfig>
 8016834:	e02e      	b.n	8016894 <LCD_WriteBMP+0x138>
    }
    else 
    {
      LTDC_LayerPixelFormat(LTDC_Layer1, LTDC_Pixelformat_RGB888);
 8016836:	483e      	ldr	r0, [pc, #248]	; (8016930 <LCD_WriteBMP+0x1d4>)
 8016838:	2101      	movs	r1, #1
 801683a:	f7f8 fbe3 	bl	800f004 <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);
 801683e:	2002      	movs	r0, #2
 8016840:	f7f8 f8fe 	bl	800ea40 <LTDC_ReloadConfig>
 8016844:	e026      	b.n	8016894 <LCD_WriteBMP+0x138>
    } 
  }
  else
  {
    /* reconfigure layer size in accordance with the picture */
    LTDC_LayerSize(LTDC_Layer2, width, height);
 8016846:	483b      	ldr	r0, [pc, #236]	; (8016934 <LCD_WriteBMP+0x1d8>)
 8016848:	6939      	ldr	r1, [r7, #16]
 801684a:	68fa      	ldr	r2, [r7, #12]
 801684c:	f7f8 fb74 	bl	800ef38 <LTDC_LayerSize>
    LTDC_ReloadConfig(LTDC_VBReload); 
 8016850:	2002      	movs	r0, #2
 8016852:	f7f8 f8f5 	bl	800ea40 <LTDC_ReloadConfig>
    
    /* Reconfigure the Layer pixel format in accordance with the picture */
    if ((bit_pixel/8) == 4)
 8016856:	68bb      	ldr	r3, [r7, #8]
 8016858:	3b20      	subs	r3, #32
 801685a:	2b07      	cmp	r3, #7
 801685c:	d807      	bhi.n	801686e <LCD_WriteBMP+0x112>
    {
      LTDC_LayerPixelFormat(LTDC_Layer2, LTDC_Pixelformat_ARGB8888);
 801685e:	4835      	ldr	r0, [pc, #212]	; (8016934 <LCD_WriteBMP+0x1d8>)
 8016860:	2100      	movs	r1, #0
 8016862:	f7f8 fbcf 	bl	800f004 <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);
 8016866:	2002      	movs	r0, #2
 8016868:	f7f8 f8ea 	bl	800ea40 <LTDC_ReloadConfig>
 801686c:	e012      	b.n	8016894 <LCD_WriteBMP+0x138>
    }
    else if ((bit_pixel/8) == 2)
 801686e:	68bb      	ldr	r3, [r7, #8]
 8016870:	3b10      	subs	r3, #16
 8016872:	2b07      	cmp	r3, #7
 8016874:	d807      	bhi.n	8016886 <LCD_WriteBMP+0x12a>
    {
      LTDC_LayerPixelFormat(LTDC_Layer2, LTDC_Pixelformat_RGB565);
 8016876:	482f      	ldr	r0, [pc, #188]	; (8016934 <LCD_WriteBMP+0x1d8>)
 8016878:	2102      	movs	r1, #2
 801687a:	f7f8 fbc3 	bl	800f004 <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);
 801687e:	2002      	movs	r0, #2
 8016880:	f7f8 f8de 	bl	800ea40 <LTDC_ReloadConfig>
 8016884:	e006      	b.n	8016894 <LCD_WriteBMP+0x138>
    }
    else
    {
      LTDC_LayerPixelFormat(LTDC_Layer2, LTDC_Pixelformat_RGB888);
 8016886:	482b      	ldr	r0, [pc, #172]	; (8016934 <LCD_WriteBMP+0x1d8>)
 8016888:	2101      	movs	r1, #1
 801688a:	f7f8 fbbb 	bl	800f004 <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);  
 801688e:	2002      	movs	r0, #2
 8016890:	f7f8 f8d6 	bl	800ea40 <LTDC_ReloadConfig>
    }
  }
 
  /* compute the real size of the picture (without the header)) */  
  size = (size - index); 
 8016894:	697a      	ldr	r2, [r7, #20]
 8016896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016898:	1ad3      	subs	r3, r2, r3
 801689a:	617b      	str	r3, [r7, #20]

  /* bypass the bitmap header */
  BmpAddress += index;
 801689c:	687a      	ldr	r2, [r7, #4]
 801689e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168a0:	4413      	add	r3, r2
 80168a2:	607b      	str	r3, [r7, #4]

  /* start copie image from the bottom */
  Address += width*(height-1)*(bit_pixel/8);
 80168a4:	68fb      	ldr	r3, [r7, #12]
 80168a6:	3b01      	subs	r3, #1
 80168a8:	693a      	ldr	r2, [r7, #16]
 80168aa:	fb02 f303 	mul.w	r3, r2, r3
 80168ae:	68ba      	ldr	r2, [r7, #8]
 80168b0:	08d2      	lsrs	r2, r2, #3
 80168b2:	fb02 f303 	mul.w	r3, r2, r3
 80168b6:	6a3a      	ldr	r2, [r7, #32]
 80168b8:	4413      	add	r3, r2
 80168ba:	623b      	str	r3, [r7, #32]
  
  for(index = 0; index < size; index++)
 80168bc:	2300      	movs	r3, #0
 80168be:	627b      	str	r3, [r7, #36]	; 0x24
 80168c0:	e02a      	b.n	8016918 <LCD_WriteBMP+0x1bc>
  {
    *(__IO uint8_t*) (Address) = *(__IO uint8_t *)BmpAddress;
 80168c2:	6a3b      	ldr	r3, [r7, #32]
 80168c4:	687a      	ldr	r2, [r7, #4]
 80168c6:	7812      	ldrb	r2, [r2, #0]
 80168c8:	b2d2      	uxtb	r2, r2
 80168ca:	701a      	strb	r2, [r3, #0]
    
    /*jump on next byte */   
    BmpAddress++;
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	3301      	adds	r3, #1
 80168d0:	607b      	str	r3, [r7, #4]
    Address++;
 80168d2:	6a3b      	ldr	r3, [r7, #32]
 80168d4:	3301      	adds	r3, #1
 80168d6:	623b      	str	r3, [r7, #32]
    currentline++;
 80168d8:	69fb      	ldr	r3, [r7, #28]
 80168da:	3301      	adds	r3, #1
 80168dc:	61fb      	str	r3, [r7, #28]
    
    if((currentline/(bit_pixel/8)) == width)
 80168de:	68bb      	ldr	r3, [r7, #8]
 80168e0:	08db      	lsrs	r3, r3, #3
 80168e2:	69fa      	ldr	r2, [r7, #28]
 80168e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80168e8:	693b      	ldr	r3, [r7, #16]
 80168ea:	429a      	cmp	r2, r3
 80168ec:	d111      	bne.n	8016912 <LCD_WriteBMP+0x1b6>
    {
      if(linenumber < height)
 80168ee:	69ba      	ldr	r2, [r7, #24]
 80168f0:	68fb      	ldr	r3, [r7, #12]
 80168f2:	429a      	cmp	r2, r3
 80168f4:	d20d      	bcs.n	8016912 <LCD_WriteBMP+0x1b6>
      {
        linenumber++;
 80168f6:	69bb      	ldr	r3, [r7, #24]
 80168f8:	3301      	adds	r3, #1
 80168fa:	61bb      	str	r3, [r7, #24]
        Address -=(2*width*(bit_pixel/8));
 80168fc:	68bb      	ldr	r3, [r7, #8]
 80168fe:	08db      	lsrs	r3, r3, #3
 8016900:	693a      	ldr	r2, [r7, #16]
 8016902:	fb02 f303 	mul.w	r3, r2, r3
 8016906:	005b      	lsls	r3, r3, #1
 8016908:	6a3a      	ldr	r2, [r7, #32]
 801690a:	1ad3      	subs	r3, r2, r3
 801690c:	623b      	str	r3, [r7, #32]
        currentline = 0;
 801690e:	2300      	movs	r3, #0
 8016910:	61fb      	str	r3, [r7, #28]
  BmpAddress += index;

  /* start copie image from the bottom */
  Address += width*(height-1)*(bit_pixel/8);
  
  for(index = 0; index < size; index++)
 8016912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016914:	3301      	adds	r3, #1
 8016916:	627b      	str	r3, [r7, #36]	; 0x24
 8016918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801691a:	697b      	ldr	r3, [r7, #20]
 801691c:	429a      	cmp	r2, r3
 801691e:	d3d0      	bcc.n	80168c2 <LCD_WriteBMP+0x166>
        Address -=(2*width*(bit_pixel/8));
        currentline = 0;
      }
    }
  }
}
 8016920:	3728      	adds	r7, #40	; 0x28
 8016922:	46bd      	mov	sp, r7
 8016924:	bd80      	pop	{r7, pc}
 8016926:	bf00      	nop
 8016928:	200000c0 	.word	0x200000c0
 801692c:	20005358 	.word	0x20005358
 8016930:	40016884 	.word	0x40016884
 8016934:	40016904 	.word	0x40016904

08016938 <LCD_DrawFullRect>:
  * @param  Height: rectangle height.
  * @param  Width: rectangle width.
  * @retval None
  */
void LCD_DrawFullRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8016938:	b580      	push	{r7, lr}
 801693a:	b090      	sub	sp, #64	; 0x40
 801693c:	af00      	add	r7, sp, #0
 801693e:	80f8      	strh	r0, [r7, #6]
 8016940:	80b9      	strh	r1, [r7, #4]
 8016942:	807a      	strh	r2, [r7, #2]
 8016944:	803b      	strh	r3, [r7, #0]
  DMA2D_InitTypeDef      DMA2D_InitStruct;
  
  uint32_t  Xaddress = 0; 
 8016946:	2300      	movs	r3, #0
 8016948:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t Red_Value = 0, Green_Value = 0, Blue_Value = 0;
 801694a:	2300      	movs	r3, #0
 801694c:	877b      	strh	r3, [r7, #58]	; 0x3a
 801694e:	2300      	movs	r3, #0
 8016950:	873b      	strh	r3, [r7, #56]	; 0x38
 8016952:	2300      	movs	r3, #0
 8016954:	86fb      	strh	r3, [r7, #54]	; 0x36
 
  Red_Value = (0xF800 & CurrentTextColor) >> 11;
 8016956:	4b26      	ldr	r3, [pc, #152]	; (80169f0 <LCD_DrawFullRect+0xb8>)
 8016958:	881b      	ldrh	r3, [r3, #0]
 801695a:	0adb      	lsrs	r3, r3, #11
 801695c:	877b      	strh	r3, [r7, #58]	; 0x3a
  Blue_Value = 0x001F & CurrentTextColor;
 801695e:	4b24      	ldr	r3, [pc, #144]	; (80169f0 <LCD_DrawFullRect+0xb8>)
 8016960:	881b      	ldrh	r3, [r3, #0]
 8016962:	f003 031f 	and.w	r3, r3, #31
 8016966:	86fb      	strh	r3, [r7, #54]	; 0x36
  Green_Value = (0x07E0 & CurrentTextColor) >> 5;
 8016968:	4b21      	ldr	r3, [pc, #132]	; (80169f0 <LCD_DrawFullRect+0xb8>)
 801696a:	881b      	ldrh	r3, [r3, #0]
 801696c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8016970:	b29b      	uxth	r3, r3
 8016972:	095b      	lsrs	r3, r3, #5
 8016974:	873b      	strh	r3, [r7, #56]	; 0x38
  
  Xaddress = CurrentFrameBuffer + 2*(LCD_PIXEL_WIDTH*Ypos + Xpos);
 8016976:	88ba      	ldrh	r2, [r7, #4]
 8016978:	4613      	mov	r3, r2
 801697a:	011b      	lsls	r3, r3, #4
 801697c:	1a9b      	subs	r3, r3, r2
 801697e:	011b      	lsls	r3, r3, #4
 8016980:	461a      	mov	r2, r3
 8016982:	88fb      	ldrh	r3, [r7, #6]
 8016984:	4413      	add	r3, r2
 8016986:	005b      	lsls	r3, r3, #1
 8016988:	461a      	mov	r2, r3
 801698a:	4b1a      	ldr	r3, [pc, #104]	; (80169f4 <LCD_DrawFullRect+0xbc>)
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	4413      	add	r3, r2
 8016990:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* configure DMA2D */
  DMA2D_DeInit();
 8016992:	f7f3 fe29 	bl	800a5e8 <DMA2D_DeInit>
  DMA2D_InitStruct.DMA2D_Mode = DMA2D_R2M;       
 8016996:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 801699a:	60fb      	str	r3, [r7, #12]
  DMA2D_InitStruct.DMA2D_CMode = DMA2D_RGB565;      
 801699c:	2302      	movs	r3, #2
 801699e:	613b      	str	r3, [r7, #16]
  DMA2D_InitStruct.DMA2D_OutputGreen = Green_Value;      
 80169a0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80169a2:	61bb      	str	r3, [r7, #24]
  DMA2D_InitStruct.DMA2D_OutputBlue = Blue_Value;     
 80169a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80169a6:	617b      	str	r3, [r7, #20]
  DMA2D_InitStruct.DMA2D_OutputRed = Red_Value;                
 80169a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80169aa:	61fb      	str	r3, [r7, #28]
  DMA2D_InitStruct.DMA2D_OutputAlpha = 0x0F;                  
 80169ac:	230f      	movs	r3, #15
 80169ae:	623b      	str	r3, [r7, #32]
  DMA2D_InitStruct.DMA2D_OutputMemoryAdd = Xaddress;                
 80169b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80169b2:	627b      	str	r3, [r7, #36]	; 0x24
  DMA2D_InitStruct.DMA2D_OutputOffset = (LCD_PIXEL_WIDTH - Width);                
 80169b4:	887b      	ldrh	r3, [r7, #2]
 80169b6:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80169ba:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA2D_InitStruct.DMA2D_NumberOfLine = Height;            
 80169bc:	883b      	ldrh	r3, [r7, #0]
 80169be:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA2D_InitStruct.DMA2D_PixelPerLine = Width;
 80169c0:	887b      	ldrh	r3, [r7, #2]
 80169c2:	633b      	str	r3, [r7, #48]	; 0x30
  DMA2D_Init(&DMA2D_InitStruct); 
 80169c4:	f107 030c 	add.w	r3, r7, #12
 80169c8:	4618      	mov	r0, r3
 80169ca:	f7f3 fe1b 	bl	800a604 <DMA2D_Init>
  
  /* Start Transfer */ 
  DMA2D_StartTransfer();
 80169ce:	f7f3 feef 	bl	800a7b0 <DMA2D_StartTransfer>
  
  /* Wait for CTC Flag activation */
  while(DMA2D_GetFlagStatus(DMA2D_FLAG_TC) == RESET)
 80169d2:	bf00      	nop
 80169d4:	2002      	movs	r0, #2
 80169d6:	f7f4 f8e1 	bl	800ab9c <DMA2D_GetFlagStatus>
 80169da:	4603      	mov	r3, r0
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d0f9      	beq.n	80169d4 <LCD_DrawFullRect+0x9c>
  {
  } 

  LCD_SetTextColor(CurrentTextColor);
 80169e0:	4b03      	ldr	r3, [pc, #12]	; (80169f0 <LCD_DrawFullRect+0xb8>)
 80169e2:	881b      	ldrh	r3, [r3, #0]
 80169e4:	4618      	mov	r0, r3
 80169e6:	f7ff f807 	bl	80159f8 <LCD_SetTextColor>
}
 80169ea:	3740      	adds	r7, #64	; 0x40
 80169ec:	46bd      	mov	sp, r7
 80169ee:	bd80      	pop	{r7, pc}
 80169f0:	20005354 	.word	0x20005354
 80169f4:	200000c0 	.word	0x200000c0

080169f8 <LCD_DrawFullCircle>:
  * @param  Ypos: specifies the Y position, can be a value from 0 to 320.
  * @param  Radius
  * @retval None
  */
void LCD_DrawFullCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80169f8:	b580      	push	{r7, lr}
 80169fa:	b086      	sub	sp, #24
 80169fc:	af00      	add	r7, sp, #0
 80169fe:	4613      	mov	r3, r2
 8016a00:	4602      	mov	r2, r0
 8016a02:	80fa      	strh	r2, [r7, #6]
 8016a04:	460a      	mov	r2, r1
 8016a06:	80ba      	strh	r2, [r7, #4]
 8016a08:	807b      	strh	r3, [r7, #2]
  int32_t  D;    /* Decision Variable */ 
  uint32_t  CurX;/* Current X Value */
  uint32_t  CurY;/* Current Y Value */ 
  
  D = 3 - (Radius << 1);
 8016a0a:	887b      	ldrh	r3, [r7, #2]
 8016a0c:	005b      	lsls	r3, r3, #1
 8016a0e:	f1c3 0303 	rsb	r3, r3, #3
 8016a12:	617b      	str	r3, [r7, #20]
  
  CurX = 0;
 8016a14:	2300      	movs	r3, #0
 8016a16:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8016a18:	887b      	ldrh	r3, [r7, #2]
 8016a1a:	60fb      	str	r3, [r7, #12]
  
  while (CurX <= CurY)
 8016a1c:	e06d      	b.n	8016afa <LCD_DrawFullCircle+0x102>
  {
    if(CurY > 0) 
 8016a1e:	68fb      	ldr	r3, [r7, #12]
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	d027      	beq.n	8016a74 <LCD_DrawFullCircle+0x7c>
    {
      LCD_DrawLine(Xpos - CurX, Ypos - CurY, 2*CurY, LCD_DIR_VERTICAL);
 8016a24:	693b      	ldr	r3, [r7, #16]
 8016a26:	b29b      	uxth	r3, r3
 8016a28:	88fa      	ldrh	r2, [r7, #6]
 8016a2a:	1ad3      	subs	r3, r2, r3
 8016a2c:	b299      	uxth	r1, r3
 8016a2e:	68fb      	ldr	r3, [r7, #12]
 8016a30:	b29b      	uxth	r3, r3
 8016a32:	88ba      	ldrh	r2, [r7, #4]
 8016a34:	1ad3      	subs	r3, r2, r3
 8016a36:	b29a      	uxth	r2, r3
 8016a38:	68fb      	ldr	r3, [r7, #12]
 8016a3a:	b29b      	uxth	r3, r3
 8016a3c:	005b      	lsls	r3, r3, #1
 8016a3e:	b29b      	uxth	r3, r3
 8016a40:	4608      	mov	r0, r1
 8016a42:	4611      	mov	r1, r2
 8016a44:	461a      	mov	r2, r3
 8016a46:	2301      	movs	r3, #1
 8016a48:	f7ff fa24 	bl	8015e94 <LCD_DrawLine>
      LCD_DrawLine(Xpos + CurX, Ypos - CurY, 2*CurY, LCD_DIR_VERTICAL);
 8016a4c:	693b      	ldr	r3, [r7, #16]
 8016a4e:	b29a      	uxth	r2, r3
 8016a50:	88fb      	ldrh	r3, [r7, #6]
 8016a52:	4413      	add	r3, r2
 8016a54:	b299      	uxth	r1, r3
 8016a56:	68fb      	ldr	r3, [r7, #12]
 8016a58:	b29b      	uxth	r3, r3
 8016a5a:	88ba      	ldrh	r2, [r7, #4]
 8016a5c:	1ad3      	subs	r3, r2, r3
 8016a5e:	b29a      	uxth	r2, r3
 8016a60:	68fb      	ldr	r3, [r7, #12]
 8016a62:	b29b      	uxth	r3, r3
 8016a64:	005b      	lsls	r3, r3, #1
 8016a66:	b29b      	uxth	r3, r3
 8016a68:	4608      	mov	r0, r1
 8016a6a:	4611      	mov	r1, r2
 8016a6c:	461a      	mov	r2, r3
 8016a6e:	2301      	movs	r3, #1
 8016a70:	f7ff fa10 	bl	8015e94 <LCD_DrawLine>
    }
    
    if(CurX > 0) 
 8016a74:	693b      	ldr	r3, [r7, #16]
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d027      	beq.n	8016aca <LCD_DrawFullCircle+0xd2>
    {
      LCD_DrawLine(Xpos - CurY, Ypos - CurX, 2*CurX, LCD_DIR_VERTICAL);
 8016a7a:	68fb      	ldr	r3, [r7, #12]
 8016a7c:	b29b      	uxth	r3, r3
 8016a7e:	88fa      	ldrh	r2, [r7, #6]
 8016a80:	1ad3      	subs	r3, r2, r3
 8016a82:	b299      	uxth	r1, r3
 8016a84:	693b      	ldr	r3, [r7, #16]
 8016a86:	b29b      	uxth	r3, r3
 8016a88:	88ba      	ldrh	r2, [r7, #4]
 8016a8a:	1ad3      	subs	r3, r2, r3
 8016a8c:	b29a      	uxth	r2, r3
 8016a8e:	693b      	ldr	r3, [r7, #16]
 8016a90:	b29b      	uxth	r3, r3
 8016a92:	005b      	lsls	r3, r3, #1
 8016a94:	b29b      	uxth	r3, r3
 8016a96:	4608      	mov	r0, r1
 8016a98:	4611      	mov	r1, r2
 8016a9a:	461a      	mov	r2, r3
 8016a9c:	2301      	movs	r3, #1
 8016a9e:	f7ff f9f9 	bl	8015e94 <LCD_DrawLine>
      LCD_DrawLine(Xpos + CurY, Ypos - CurX, 2*CurX, LCD_DIR_VERTICAL);
 8016aa2:	68fb      	ldr	r3, [r7, #12]
 8016aa4:	b29a      	uxth	r2, r3
 8016aa6:	88fb      	ldrh	r3, [r7, #6]
 8016aa8:	4413      	add	r3, r2
 8016aaa:	b299      	uxth	r1, r3
 8016aac:	693b      	ldr	r3, [r7, #16]
 8016aae:	b29b      	uxth	r3, r3
 8016ab0:	88ba      	ldrh	r2, [r7, #4]
 8016ab2:	1ad3      	subs	r3, r2, r3
 8016ab4:	b29a      	uxth	r2, r3
 8016ab6:	693b      	ldr	r3, [r7, #16]
 8016ab8:	b29b      	uxth	r3, r3
 8016aba:	005b      	lsls	r3, r3, #1
 8016abc:	b29b      	uxth	r3, r3
 8016abe:	4608      	mov	r0, r1
 8016ac0:	4611      	mov	r1, r2
 8016ac2:	461a      	mov	r2, r3
 8016ac4:	2301      	movs	r3, #1
 8016ac6:	f7ff f9e5 	bl	8015e94 <LCD_DrawLine>
    }
    if (D < 0)
 8016aca:	697b      	ldr	r3, [r7, #20]
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	da06      	bge.n	8016ade <LCD_DrawFullCircle+0xe6>
    { 
      D += (CurX << 2) + 6;
 8016ad0:	693b      	ldr	r3, [r7, #16]
 8016ad2:	009a      	lsls	r2, r3, #2
 8016ad4:	697b      	ldr	r3, [r7, #20]
 8016ad6:	4413      	add	r3, r2
 8016ad8:	3306      	adds	r3, #6
 8016ada:	617b      	str	r3, [r7, #20]
 8016adc:	e00a      	b.n	8016af4 <LCD_DrawFullCircle+0xfc>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8016ade:	693a      	ldr	r2, [r7, #16]
 8016ae0:	68fb      	ldr	r3, [r7, #12]
 8016ae2:	1ad3      	subs	r3, r2, r3
 8016ae4:	009a      	lsls	r2, r3, #2
 8016ae6:	697b      	ldr	r3, [r7, #20]
 8016ae8:	4413      	add	r3, r2
 8016aea:	330a      	adds	r3, #10
 8016aec:	617b      	str	r3, [r7, #20]
      CurY--;
 8016aee:	68fb      	ldr	r3, [r7, #12]
 8016af0:	3b01      	subs	r3, #1
 8016af2:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8016af4:	693b      	ldr	r3, [r7, #16]
 8016af6:	3301      	adds	r3, #1
 8016af8:	613b      	str	r3, [r7, #16]
  D = 3 - (Radius << 1);
  
  CurX = 0;
  CurY = Radius;
  
  while (CurX <= CurY)
 8016afa:	693a      	ldr	r2, [r7, #16]
 8016afc:	68fb      	ldr	r3, [r7, #12]
 8016afe:	429a      	cmp	r2, r3
 8016b00:	d98d      	bls.n	8016a1e <LCD_DrawFullCircle+0x26>
      CurY--;
    }
    CurX++;
  }
  
  LCD_DrawCircle(Xpos, Ypos, Radius);  
 8016b02:	88f9      	ldrh	r1, [r7, #6]
 8016b04:	88ba      	ldrh	r2, [r7, #4]
 8016b06:	887b      	ldrh	r3, [r7, #2]
 8016b08:	4608      	mov	r0, r1
 8016b0a:	4611      	mov	r1, r2
 8016b0c:	461a      	mov	r2, r3
 8016b0e:	f7ff fa59 	bl	8015fc4 <LCD_DrawCircle>
}
 8016b12:	3718      	adds	r7, #24
 8016b14:	46bd      	mov	sp, r7
 8016b16:	bd80      	pop	{r7, pc}

08016b18 <LCD_DrawUniLine>:
  * @param  x2: specifies the point 2 x position.
  * @param  y2: specifies the point 2 y position.
  * @retval None
  */
void LCD_DrawUniLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8016b18:	b580      	push	{r7, lr}
 8016b1a:	b08a      	sub	sp, #40	; 0x28
 8016b1c:	af00      	add	r7, sp, #0
 8016b1e:	80f8      	strh	r0, [r7, #6]
 8016b20:	80b9      	strh	r1, [r7, #4]
 8016b22:	807a      	strh	r2, [r7, #2]
 8016b24:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8016b26:	2300      	movs	r3, #0
 8016b28:	823b      	strh	r3, [r7, #16]
 8016b2a:	2300      	movs	r3, #0
 8016b2c:	81fb      	strh	r3, [r7, #14]
 8016b2e:	2300      	movs	r3, #0
 8016b30:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016b32:	2300      	movs	r3, #0
 8016b34:	84bb      	strh	r3, [r7, #36]	; 0x24
 8016b36:	2300      	movs	r3, #0
 8016b38:	847b      	strh	r3, [r7, #34]	; 0x22
 8016b3a:	2300      	movs	r3, #0
 8016b3c:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8016b3e:	2300      	movs	r3, #0
 8016b40:	83fb      	strh	r3, [r7, #30]
 8016b42:	2300      	movs	r3, #0
 8016b44:	83bb      	strh	r3, [r7, #28]
 8016b46:	2300      	movs	r3, #0
 8016b48:	837b      	strh	r3, [r7, #26]
 8016b4a:	2300      	movs	r3, #0
 8016b4c:	833b      	strh	r3, [r7, #24]
 8016b4e:	2300      	movs	r3, #0
 8016b50:	82fb      	strh	r3, [r7, #22]
 8016b52:	2300      	movs	r3, #0
 8016b54:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8016b56:	2300      	movs	r3, #0
 8016b58:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8016b5a:	887a      	ldrh	r2, [r7, #2]
 8016b5c:	88fb      	ldrh	r3, [r7, #6]
 8016b5e:	1ad3      	subs	r3, r2, r3
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	bfb8      	it	lt
 8016b64:	425b      	neglt	r3, r3
 8016b66:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8016b68:	883a      	ldrh	r2, [r7, #0]
 8016b6a:	88bb      	ldrh	r3, [r7, #4]
 8016b6c:	1ad3      	subs	r3, r2, r3
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	bfb8      	it	lt
 8016b72:	425b      	neglt	r3, r3
 8016b74:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8016b76:	88fb      	ldrh	r3, [r7, #6]
 8016b78:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8016b7a:	88bb      	ldrh	r3, [r7, #4]
 8016b7c:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8016b7e:	887a      	ldrh	r2, [r7, #2]
 8016b80:	88fb      	ldrh	r3, [r7, #6]
 8016b82:	429a      	cmp	r2, r3
 8016b84:	d304      	bcc.n	8016b90 <LCD_DrawUniLine+0x78>
  {
    xinc1 = 1;
 8016b86:	2301      	movs	r3, #1
 8016b88:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8016b8a:	2301      	movs	r3, #1
 8016b8c:	843b      	strh	r3, [r7, #32]
 8016b8e:	e005      	b.n	8016b9c <LCD_DrawUniLine+0x84>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8016b90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016b94:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8016b96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016b9a:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8016b9c:	883a      	ldrh	r2, [r7, #0]
 8016b9e:	88bb      	ldrh	r3, [r7, #4]
 8016ba0:	429a      	cmp	r2, r3
 8016ba2:	d304      	bcc.n	8016bae <LCD_DrawUniLine+0x96>
  {
    yinc1 = 1;
 8016ba4:	2301      	movs	r3, #1
 8016ba6:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8016ba8:	2301      	movs	r3, #1
 8016baa:	83bb      	strh	r3, [r7, #28]
 8016bac:	e005      	b.n	8016bba <LCD_DrawUniLine+0xa2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8016bae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016bb2:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8016bb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016bb8:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8016bba:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8016bbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016bc2:	429a      	cmp	r2, r3
 8016bc4:	db10      	blt.n	8016be8 <LCD_DrawUniLine+0xd0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8016bc6:	2300      	movs	r3, #0
 8016bc8:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8016bca:	2300      	movs	r3, #0
 8016bcc:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8016bce:	8a3b      	ldrh	r3, [r7, #16]
 8016bd0:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8016bd2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8016bd6:	0fda      	lsrs	r2, r3, #31
 8016bd8:	4413      	add	r3, r2
 8016bda:	105b      	asrs	r3, r3, #1
 8016bdc:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8016bde:	89fb      	ldrh	r3, [r7, #14]
 8016be0:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8016be2:	8a3b      	ldrh	r3, [r7, #16]
 8016be4:	82bb      	strh	r3, [r7, #20]
 8016be6:	e00f      	b.n	8016c08 <LCD_DrawUniLine+0xf0>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8016be8:	2300      	movs	r3, #0
 8016bea:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8016bec:	2300      	movs	r3, #0
 8016bee:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8016bf0:	89fb      	ldrh	r3, [r7, #14]
 8016bf2:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8016bf4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016bf8:	0fda      	lsrs	r2, r3, #31
 8016bfa:	4413      	add	r3, r2
 8016bfc:	105b      	asrs	r3, r3, #1
 8016bfe:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8016c00:	8a3b      	ldrh	r3, [r7, #16]
 8016c02:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8016c04:	89fb      	ldrh	r3, [r7, #14]
 8016c06:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8016c08:	2300      	movs	r3, #0
 8016c0a:	827b      	strh	r3, [r7, #18]
 8016c0c:	e02e      	b.n	8016c6c <LCD_DrawUniLine+0x154>
  {
    PutPixel(x, y);             /* Draw the current pixel */
 8016c0e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8016c12:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8016c16:	4610      	mov	r0, r2
 8016c18:	4619      	mov	r1, r3
 8016c1a:	f000 fdc5 	bl	80177a8 <PutPixel>
    num += numadd;              /* Increase the numerator by the top of the fraction */
 8016c1e:	8b3a      	ldrh	r2, [r7, #24]
 8016c20:	8afb      	ldrh	r3, [r7, #22]
 8016c22:	4413      	add	r3, r2
 8016c24:	b29b      	uxth	r3, r3
 8016c26:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 8016c28:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8016c2c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8016c30:	429a      	cmp	r2, r3
 8016c32:	db0e      	blt.n	8016c52 <LCD_DrawUniLine+0x13a>
    {
      num -= den;               /* Calculate the new numerator value */
 8016c34:	8b3a      	ldrh	r2, [r7, #24]
 8016c36:	8b7b      	ldrh	r3, [r7, #26]
 8016c38:	1ad3      	subs	r3, r2, r3
 8016c3a:	b29b      	uxth	r3, r3
 8016c3c:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 8016c3e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016c40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016c42:	4413      	add	r3, r2
 8016c44:	b29b      	uxth	r3, r3
 8016c46:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;               /* Change the y as appropriate */
 8016c48:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016c4a:	8bfb      	ldrh	r3, [r7, #30]
 8016c4c:	4413      	add	r3, r2
 8016c4e:	b29b      	uxth	r3, r3
 8016c50:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 8016c52:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016c54:	8c3b      	ldrh	r3, [r7, #32]
 8016c56:	4413      	add	r3, r2
 8016c58:	b29b      	uxth	r3, r3
 8016c5a:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                 /* Change the y as appropriate */
 8016c5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016c5e:	8bbb      	ldrh	r3, [r7, #28]
 8016c60:	4413      	add	r3, r2
 8016c62:	b29b      	uxth	r3, r3
 8016c64:	84bb      	strh	r3, [r7, #36]	; 0x24
    num = deltay / 2;
    numadd = deltax;
    numpixels = deltay;         /* There are more y-values than x-values */
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8016c66:	8a7b      	ldrh	r3, [r7, #18]
 8016c68:	3301      	adds	r3, #1
 8016c6a:	827b      	strh	r3, [r7, #18]
 8016c6c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8016c70:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8016c74:	429a      	cmp	r2, r3
 8016c76:	ddca      	ble.n	8016c0e <LCD_DrawUniLine+0xf6>
      y += yinc1;               /* Change the y as appropriate */
    }
    x += xinc2;                 /* Change the x as appropriate */
    y += yinc2;                 /* Change the y as appropriate */
  }
}
 8016c78:	3728      	adds	r7, #40	; 0x28
 8016c7a:	46bd      	mov	sp, r7
 8016c7c:	bd80      	pop	{r7, pc}
 8016c7e:	bf00      	nop

08016c80 <LCD_Triangle>:
  * @brief  Displays an triangle.
  * @param  Points: pointer to the points array.
  * @retval None
  */
void LCD_Triangle(pPoint Points, uint16_t PointCount)
{
 8016c80:	b580      	push	{r7, lr}
 8016c82:	b084      	sub	sp, #16
 8016c84:	af00      	add	r7, sp, #0
 8016c86:	6078      	str	r0, [r7, #4]
 8016c88:	460b      	mov	r3, r1
 8016c8a:	807b      	strh	r3, [r7, #2]
  int16_t X = 0, Y = 0;
 8016c8c:	2300      	movs	r3, #0
 8016c8e:	81fb      	strh	r3, [r7, #14]
 8016c90:	2300      	movs	r3, #0
 8016c92:	81bb      	strh	r3, [r7, #12]
  pPoint First = Points;
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	60bb      	str	r3, [r7, #8]

  if(PointCount != 3)
 8016c98:	887b      	ldrh	r3, [r7, #2]
 8016c9a:	2b03      	cmp	r3, #3
 8016c9c:	d000      	beq.n	8016ca0 <LCD_Triangle+0x20>
  {
    return;
 8016c9e:	e027      	b.n	8016cf0 <LCD_Triangle+0x70>
  }

  while(--PointCount)
 8016ca0:	e012      	b.n	8016cc8 <LCD_Triangle+0x48>
  {
    X = Points->X;
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	881b      	ldrh	r3, [r3, #0]
 8016ca6:	81fb      	strh	r3, [r7, #14]
    Y = Points->Y;
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	885b      	ldrh	r3, [r3, #2]
 8016cac:	81bb      	strh	r3, [r7, #12]
    Points++;
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	3304      	adds	r3, #4
 8016cb2:	607b      	str	r3, [r7, #4]
    LCD_DrawUniLine(X, Y, Points->X, Points->Y);
 8016cb4:	89f8      	ldrh	r0, [r7, #14]
 8016cb6:	89b9      	ldrh	r1, [r7, #12]
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	881b      	ldrh	r3, [r3, #0]
 8016cbc:	b29a      	uxth	r2, r3
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	885b      	ldrh	r3, [r3, #2]
 8016cc2:	b29b      	uxth	r3, r3
 8016cc4:	f7ff ff28 	bl	8016b18 <LCD_DrawUniLine>
  if(PointCount != 3)
  {
    return;
  }

  while(--PointCount)
 8016cc8:	887b      	ldrh	r3, [r7, #2]
 8016cca:	3b01      	subs	r3, #1
 8016ccc:	807b      	strh	r3, [r7, #2]
 8016cce:	887b      	ldrh	r3, [r7, #2]
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	d1e6      	bne.n	8016ca2 <LCD_Triangle+0x22>
    X = Points->X;
    Y = Points->Y;
    Points++;
    LCD_DrawUniLine(X, Y, Points->X, Points->Y);
  }
  LCD_DrawUniLine(First->X, First->Y, Points->X, Points->Y);
 8016cd4:	68bb      	ldr	r3, [r7, #8]
 8016cd6:	881b      	ldrh	r3, [r3, #0]
 8016cd8:	b298      	uxth	r0, r3
 8016cda:	68bb      	ldr	r3, [r7, #8]
 8016cdc:	885b      	ldrh	r3, [r3, #2]
 8016cde:	b299      	uxth	r1, r3
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	881b      	ldrh	r3, [r3, #0]
 8016ce4:	b29a      	uxth	r2, r3
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	885b      	ldrh	r3, [r3, #2]
 8016cea:	b29b      	uxth	r3, r3
 8016cec:	f7ff ff14 	bl	8016b18 <LCD_DrawUniLine>
}
 8016cf0:	3710      	adds	r7, #16
 8016cf2:	46bd      	mov	sp, r7
 8016cf4:	bd80      	pop	{r7, pc}
 8016cf6:	bf00      	nop

08016cf8 <LCD_FillTriangle>:
  * @param  x1..3: x position of triangle point 1..3.
  * @param  y1..3: y position of triangle point 1..3.
  * @retval None
  */
void LCD_FillTriangle(uint16_t x1, uint16_t x2, uint16_t x3, uint16_t y1, uint16_t y2, uint16_t y3)
{ 
 8016cf8:	b580      	push	{r7, lr}
 8016cfa:	b08a      	sub	sp, #40	; 0x28
 8016cfc:	af00      	add	r7, sp, #0
 8016cfe:	80f8      	strh	r0, [r7, #6]
 8016d00:	80b9      	strh	r1, [r7, #4]
 8016d02:	807a      	strh	r2, [r7, #2]
 8016d04:	803b      	strh	r3, [r7, #0]
  
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8016d06:	2300      	movs	r3, #0
 8016d08:	823b      	strh	r3, [r7, #16]
 8016d0a:	2300      	movs	r3, #0
 8016d0c:	81fb      	strh	r3, [r7, #14]
 8016d0e:	2300      	movs	r3, #0
 8016d10:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016d12:	2300      	movs	r3, #0
 8016d14:	84bb      	strh	r3, [r7, #36]	; 0x24
 8016d16:	2300      	movs	r3, #0
 8016d18:	847b      	strh	r3, [r7, #34]	; 0x22
 8016d1a:	2300      	movs	r3, #0
 8016d1c:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8016d1e:	2300      	movs	r3, #0
 8016d20:	83fb      	strh	r3, [r7, #30]
 8016d22:	2300      	movs	r3, #0
 8016d24:	83bb      	strh	r3, [r7, #28]
 8016d26:	2300      	movs	r3, #0
 8016d28:	837b      	strh	r3, [r7, #26]
 8016d2a:	2300      	movs	r3, #0
 8016d2c:	833b      	strh	r3, [r7, #24]
 8016d2e:	2300      	movs	r3, #0
 8016d30:	82fb      	strh	r3, [r7, #22]
 8016d32:	2300      	movs	r3, #0
 8016d34:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8016d36:	2300      	movs	r3, #0
 8016d38:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8016d3a:	88ba      	ldrh	r2, [r7, #4]
 8016d3c:	88fb      	ldrh	r3, [r7, #6]
 8016d3e:	1ad3      	subs	r3, r2, r3
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	bfb8      	it	lt
 8016d44:	425b      	neglt	r3, r3
 8016d46:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8016d48:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8016d4a:	883b      	ldrh	r3, [r7, #0]
 8016d4c:	1ad3      	subs	r3, r2, r3
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	bfb8      	it	lt
 8016d52:	425b      	neglt	r3, r3
 8016d54:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8016d56:	88fb      	ldrh	r3, [r7, #6]
 8016d58:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8016d5a:	883b      	ldrh	r3, [r7, #0]
 8016d5c:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8016d5e:	88ba      	ldrh	r2, [r7, #4]
 8016d60:	88fb      	ldrh	r3, [r7, #6]
 8016d62:	429a      	cmp	r2, r3
 8016d64:	d304      	bcc.n	8016d70 <LCD_FillTriangle+0x78>
  {
    xinc1 = 1;
 8016d66:	2301      	movs	r3, #1
 8016d68:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8016d6a:	2301      	movs	r3, #1
 8016d6c:	843b      	strh	r3, [r7, #32]
 8016d6e:	e005      	b.n	8016d7c <LCD_FillTriangle+0x84>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8016d70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016d74:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8016d76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016d7a:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8016d7c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8016d7e:	883b      	ldrh	r3, [r7, #0]
 8016d80:	429a      	cmp	r2, r3
 8016d82:	d304      	bcc.n	8016d8e <LCD_FillTriangle+0x96>
  {
    yinc1 = 1;
 8016d84:	2301      	movs	r3, #1
 8016d86:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8016d88:	2301      	movs	r3, #1
 8016d8a:	83bb      	strh	r3, [r7, #28]
 8016d8c:	e005      	b.n	8016d9a <LCD_FillTriangle+0xa2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8016d8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016d92:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8016d94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016d98:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8016d9a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8016d9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016da2:	429a      	cmp	r2, r3
 8016da4:	db10      	blt.n	8016dc8 <LCD_FillTriangle+0xd0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8016da6:	2300      	movs	r3, #0
 8016da8:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8016daa:	2300      	movs	r3, #0
 8016dac:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8016dae:	8a3b      	ldrh	r3, [r7, #16]
 8016db0:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8016db2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8016db6:	0fda      	lsrs	r2, r3, #31
 8016db8:	4413      	add	r3, r2
 8016dba:	105b      	asrs	r3, r3, #1
 8016dbc:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8016dbe:	89fb      	ldrh	r3, [r7, #14]
 8016dc0:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8016dc2:	8a3b      	ldrh	r3, [r7, #16]
 8016dc4:	82bb      	strh	r3, [r7, #20]
 8016dc6:	e00f      	b.n	8016de8 <LCD_FillTriangle+0xf0>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8016dc8:	2300      	movs	r3, #0
 8016dca:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8016dcc:	2300      	movs	r3, #0
 8016dce:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8016dd0:	89fb      	ldrh	r3, [r7, #14]
 8016dd2:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8016dd4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016dd8:	0fda      	lsrs	r2, r3, #31
 8016dda:	4413      	add	r3, r2
 8016ddc:	105b      	asrs	r3, r3, #1
 8016dde:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8016de0:	8a3b      	ldrh	r3, [r7, #16]
 8016de2:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8016de4:	89fb      	ldrh	r3, [r7, #14]
 8016de6:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8016de8:	2300      	movs	r3, #0
 8016dea:	827b      	strh	r3, [r7, #18]
 8016dec:	e02c      	b.n	8016e48 <LCD_FillTriangle+0x150>
  {
    LCD_DrawUniLine(x, y, x3, y3);
 8016dee:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8016df0:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8016df2:	887a      	ldrh	r2, [r7, #2]
 8016df4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016df6:	f7ff fe8f 	bl	8016b18 <LCD_DrawUniLine>
    
    num += numadd;              /* Increase the numerator by the top of the fraction */
 8016dfa:	8b3a      	ldrh	r2, [r7, #24]
 8016dfc:	8afb      	ldrh	r3, [r7, #22]
 8016dfe:	4413      	add	r3, r2
 8016e00:	b29b      	uxth	r3, r3
 8016e02:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 8016e04:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8016e08:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8016e0c:	429a      	cmp	r2, r3
 8016e0e:	db0e      	blt.n	8016e2e <LCD_FillTriangle+0x136>
    {
      num -= den;               /* Calculate the new numerator value */
 8016e10:	8b3a      	ldrh	r2, [r7, #24]
 8016e12:	8b7b      	ldrh	r3, [r7, #26]
 8016e14:	1ad3      	subs	r3, r2, r3
 8016e16:	b29b      	uxth	r3, r3
 8016e18:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 8016e1a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016e1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016e1e:	4413      	add	r3, r2
 8016e20:	b29b      	uxth	r3, r3
 8016e22:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;               /* Change the y as appropriate */
 8016e24:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016e26:	8bfb      	ldrh	r3, [r7, #30]
 8016e28:	4413      	add	r3, r2
 8016e2a:	b29b      	uxth	r3, r3
 8016e2c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 8016e2e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016e30:	8c3b      	ldrh	r3, [r7, #32]
 8016e32:	4413      	add	r3, r2
 8016e34:	b29b      	uxth	r3, r3
 8016e36:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                 /* Change the y as appropriate */
 8016e38:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016e3a:	8bbb      	ldrh	r3, [r7, #28]
 8016e3c:	4413      	add	r3, r2
 8016e3e:	b29b      	uxth	r3, r3
 8016e40:	84bb      	strh	r3, [r7, #36]	; 0x24
    num = deltay / 2;
    numadd = deltax;
    numpixels = deltay;         /* There are more y-values than x-values */
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8016e42:	8a7b      	ldrh	r3, [r7, #18]
 8016e44:	3301      	adds	r3, #1
 8016e46:	827b      	strh	r3, [r7, #18]
 8016e48:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8016e4c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8016e50:	429a      	cmp	r2, r3
 8016e52:	ddcc      	ble.n	8016dee <LCD_FillTriangle+0xf6>
    x += xinc2;                 /* Change the x as appropriate */
    y += yinc2;                 /* Change the y as appropriate */
  }  
  
  
}
 8016e54:	3728      	adds	r7, #40	; 0x28
 8016e56:	46bd      	mov	sp, r7
 8016e58:	bd80      	pop	{r7, pc}
 8016e5a:	bf00      	nop

08016e5c <LCD_PolyLine>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_PolyLine(pPoint Points, uint16_t PointCount)
{
 8016e5c:	b580      	push	{r7, lr}
 8016e5e:	b084      	sub	sp, #16
 8016e60:	af00      	add	r7, sp, #0
 8016e62:	6078      	str	r0, [r7, #4]
 8016e64:	460b      	mov	r3, r1
 8016e66:	807b      	strh	r3, [r7, #2]
  int16_t X = 0, Y = 0;
 8016e68:	2300      	movs	r3, #0
 8016e6a:	81fb      	strh	r3, [r7, #14]
 8016e6c:	2300      	movs	r3, #0
 8016e6e:	81bb      	strh	r3, [r7, #12]

  if(PointCount < 2)
 8016e70:	887b      	ldrh	r3, [r7, #2]
 8016e72:	2b01      	cmp	r3, #1
 8016e74:	d800      	bhi.n	8016e78 <LCD_PolyLine+0x1c>
  {
    return;
 8016e76:	e019      	b.n	8016eac <LCD_PolyLine+0x50>
  }

  while(--PointCount)
 8016e78:	e012      	b.n	8016ea0 <LCD_PolyLine+0x44>
  {
    X = Points->X;
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	881b      	ldrh	r3, [r3, #0]
 8016e7e:	81fb      	strh	r3, [r7, #14]
    Y = Points->Y;
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	885b      	ldrh	r3, [r3, #2]
 8016e84:	81bb      	strh	r3, [r7, #12]
    Points++;
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	3304      	adds	r3, #4
 8016e8a:	607b      	str	r3, [r7, #4]
    LCD_DrawUniLine(X, Y, Points->X, Points->Y);
 8016e8c:	89f8      	ldrh	r0, [r7, #14]
 8016e8e:	89b9      	ldrh	r1, [r7, #12]
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	881b      	ldrh	r3, [r3, #0]
 8016e94:	b29a      	uxth	r2, r3
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	885b      	ldrh	r3, [r3, #2]
 8016e9a:	b29b      	uxth	r3, r3
 8016e9c:	f7ff fe3c 	bl	8016b18 <LCD_DrawUniLine>
  if(PointCount < 2)
  {
    return;
  }

  while(--PointCount)
 8016ea0:	887b      	ldrh	r3, [r7, #2]
 8016ea2:	3b01      	subs	r3, #1
 8016ea4:	807b      	strh	r3, [r7, #2]
 8016ea6:	887b      	ldrh	r3, [r7, #2]
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d1e6      	bne.n	8016e7a <LCD_PolyLine+0x1e>
    X = Points->X;
    Y = Points->Y;
    Points++;
    LCD_DrawUniLine(X, Y, Points->X, Points->Y);
  }
}
 8016eac:	3710      	adds	r7, #16
 8016eae:	46bd      	mov	sp, r7
 8016eb0:	bd80      	pop	{r7, pc}
 8016eb2:	bf00      	nop

08016eb4 <LCD_PolyLineRelativeClosed>:
  * @param  Closed: specifies if the draw is closed or not.
  *           1: closed, 0 : not closed.
  * @retval None
  */
static void LCD_PolyLineRelativeClosed(pPoint Points, uint16_t PointCount, uint16_t Closed)
{
 8016eb4:	b590      	push	{r4, r7, lr}
 8016eb6:	b085      	sub	sp, #20
 8016eb8:	af00      	add	r7, sp, #0
 8016eba:	6078      	str	r0, [r7, #4]
 8016ebc:	4613      	mov	r3, r2
 8016ebe:	460a      	mov	r2, r1
 8016ec0:	807a      	strh	r2, [r7, #2]
 8016ec2:	803b      	strh	r3, [r7, #0]
  int16_t X = 0, Y = 0;
 8016ec4:	2300      	movs	r3, #0
 8016ec6:	81fb      	strh	r3, [r7, #14]
 8016ec8:	2300      	movs	r3, #0
 8016eca:	81bb      	strh	r3, [r7, #12]
  pPoint First = Points;
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	60bb      	str	r3, [r7, #8]

  if(PointCount < 2)
 8016ed0:	887b      	ldrh	r3, [r7, #2]
 8016ed2:	2b01      	cmp	r3, #1
 8016ed4:	d800      	bhi.n	8016ed8 <LCD_PolyLineRelativeClosed+0x24>
  {
    return;
 8016ed6:	e03a      	b.n	8016f4e <LCD_PolyLineRelativeClosed+0x9a>
  }  
  X = Points->X;
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	881b      	ldrh	r3, [r3, #0]
 8016edc:	81fb      	strh	r3, [r7, #14]
  Y = Points->Y;
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	885b      	ldrh	r3, [r3, #2]
 8016ee2:	81bb      	strh	r3, [r7, #12]
  while(--PointCount)
 8016ee4:	e020      	b.n	8016f28 <LCD_PolyLineRelativeClosed+0x74>
  {
    Points++;
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	3304      	adds	r3, #4
 8016eea:	607b      	str	r3, [r7, #4]
    LCD_DrawUniLine(X, Y, X + Points->X, Y + Points->Y);
 8016eec:	89f8      	ldrh	r0, [r7, #14]
 8016eee:	89b9      	ldrh	r1, [r7, #12]
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	881b      	ldrh	r3, [r3, #0]
 8016ef4:	b29a      	uxth	r2, r3
 8016ef6:	89fb      	ldrh	r3, [r7, #14]
 8016ef8:	4413      	add	r3, r2
 8016efa:	b29a      	uxth	r2, r3
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	885b      	ldrh	r3, [r3, #2]
 8016f00:	b29c      	uxth	r4, r3
 8016f02:	89bb      	ldrh	r3, [r7, #12]
 8016f04:	4423      	add	r3, r4
 8016f06:	b29b      	uxth	r3, r3
 8016f08:	f7ff fe06 	bl	8016b18 <LCD_DrawUniLine>
    X = X + Points->X;
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	881b      	ldrh	r3, [r3, #0]
 8016f10:	b29a      	uxth	r2, r3
 8016f12:	89fb      	ldrh	r3, [r7, #14]
 8016f14:	4413      	add	r3, r2
 8016f16:	b29b      	uxth	r3, r3
 8016f18:	81fb      	strh	r3, [r7, #14]
    Y = Y + Points->Y;
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	885b      	ldrh	r3, [r3, #2]
 8016f1e:	b29a      	uxth	r2, r3
 8016f20:	89bb      	ldrh	r3, [r7, #12]
 8016f22:	4413      	add	r3, r2
 8016f24:	b29b      	uxth	r3, r3
 8016f26:	81bb      	strh	r3, [r7, #12]
  {
    return;
  }  
  X = Points->X;
  Y = Points->Y;
  while(--PointCount)
 8016f28:	887b      	ldrh	r3, [r7, #2]
 8016f2a:	3b01      	subs	r3, #1
 8016f2c:	807b      	strh	r3, [r7, #2]
 8016f2e:	887b      	ldrh	r3, [r7, #2]
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d1d8      	bne.n	8016ee6 <LCD_PolyLineRelativeClosed+0x32>
    Points++;
    LCD_DrawUniLine(X, Y, X + Points->X, Y + Points->Y);
    X = X + Points->X;
    Y = Y + Points->Y;
  }
  if(Closed)
 8016f34:	883b      	ldrh	r3, [r7, #0]
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	d009      	beq.n	8016f4e <LCD_PolyLineRelativeClosed+0x9a>
  {
    LCD_DrawUniLine(First->X, First->Y, X, Y);
 8016f3a:	68bb      	ldr	r3, [r7, #8]
 8016f3c:	881b      	ldrh	r3, [r3, #0]
 8016f3e:	b298      	uxth	r0, r3
 8016f40:	68bb      	ldr	r3, [r7, #8]
 8016f42:	885b      	ldrh	r3, [r3, #2]
 8016f44:	b299      	uxth	r1, r3
 8016f46:	89fa      	ldrh	r2, [r7, #14]
 8016f48:	89bb      	ldrh	r3, [r7, #12]
 8016f4a:	f7ff fde5 	bl	8016b18 <LCD_DrawUniLine>
  }  
}
 8016f4e:	3714      	adds	r7, #20
 8016f50:	46bd      	mov	sp, r7
 8016f52:	bd90      	pop	{r4, r7, pc}

08016f54 <LCD_ClosedPolyLine>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_ClosedPolyLine(pPoint Points, uint16_t PointCount)
{
 8016f54:	b590      	push	{r4, r7, lr}
 8016f56:	b083      	sub	sp, #12
 8016f58:	af00      	add	r7, sp, #0
 8016f5a:	6078      	str	r0, [r7, #4]
 8016f5c:	460b      	mov	r3, r1
 8016f5e:	807b      	strh	r3, [r7, #2]
  LCD_PolyLine(Points, PointCount);
 8016f60:	887b      	ldrh	r3, [r7, #2]
 8016f62:	6878      	ldr	r0, [r7, #4]
 8016f64:	4619      	mov	r1, r3
 8016f66:	f7ff ff79 	bl	8016e5c <LCD_PolyLine>
  LCD_DrawUniLine(Points->X, Points->Y, (Points+PointCount-1)->X, (Points+PointCount-1)->Y);
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	881b      	ldrh	r3, [r3, #0]
 8016f6e:	b298      	uxth	r0, r3
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	885b      	ldrh	r3, [r3, #2]
 8016f74:	b299      	uxth	r1, r3
 8016f76:	887b      	ldrh	r3, [r7, #2]
 8016f78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016f7c:	3b01      	subs	r3, #1
 8016f7e:	009b      	lsls	r3, r3, #2
 8016f80:	687a      	ldr	r2, [r7, #4]
 8016f82:	4413      	add	r3, r2
 8016f84:	881b      	ldrh	r3, [r3, #0]
 8016f86:	b29a      	uxth	r2, r3
 8016f88:	887b      	ldrh	r3, [r7, #2]
 8016f8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016f8e:	3b01      	subs	r3, #1
 8016f90:	009b      	lsls	r3, r3, #2
 8016f92:	687c      	ldr	r4, [r7, #4]
 8016f94:	4423      	add	r3, r4
 8016f96:	885b      	ldrh	r3, [r3, #2]
 8016f98:	b29b      	uxth	r3, r3
 8016f9a:	f7ff fdbd 	bl	8016b18 <LCD_DrawUniLine>
}
 8016f9e:	370c      	adds	r7, #12
 8016fa0:	46bd      	mov	sp, r7
 8016fa2:	bd90      	pop	{r4, r7, pc}

08016fa4 <LCD_PolyLineRelative>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_PolyLineRelative(pPoint Points, uint16_t PointCount)
{
 8016fa4:	b580      	push	{r7, lr}
 8016fa6:	b082      	sub	sp, #8
 8016fa8:	af00      	add	r7, sp, #0
 8016faa:	6078      	str	r0, [r7, #4]
 8016fac:	460b      	mov	r3, r1
 8016fae:	807b      	strh	r3, [r7, #2]
  LCD_PolyLineRelativeClosed(Points, PointCount, 0);
 8016fb0:	887b      	ldrh	r3, [r7, #2]
 8016fb2:	6878      	ldr	r0, [r7, #4]
 8016fb4:	4619      	mov	r1, r3
 8016fb6:	2200      	movs	r2, #0
 8016fb8:	f7ff ff7c 	bl	8016eb4 <LCD_PolyLineRelativeClosed>
}
 8016fbc:	3708      	adds	r7, #8
 8016fbe:	46bd      	mov	sp, r7
 8016fc0:	bd80      	pop	{r7, pc}
 8016fc2:	bf00      	nop

08016fc4 <LCD_ClosedPolyLineRelative>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_ClosedPolyLineRelative(pPoint Points, uint16_t PointCount)
{
 8016fc4:	b580      	push	{r7, lr}
 8016fc6:	b082      	sub	sp, #8
 8016fc8:	af00      	add	r7, sp, #0
 8016fca:	6078      	str	r0, [r7, #4]
 8016fcc:	460b      	mov	r3, r1
 8016fce:	807b      	strh	r3, [r7, #2]
  LCD_PolyLineRelativeClosed(Points, PointCount, 1);
 8016fd0:	887b      	ldrh	r3, [r7, #2]
 8016fd2:	6878      	ldr	r0, [r7, #4]
 8016fd4:	4619      	mov	r1, r3
 8016fd6:	2201      	movs	r2, #1
 8016fd8:	f7ff ff6c 	bl	8016eb4 <LCD_PolyLineRelativeClosed>
}
 8016fdc:	3708      	adds	r7, #8
 8016fde:	46bd      	mov	sp, r7
 8016fe0:	bd80      	pop	{r7, pc}
 8016fe2:	bf00      	nop

08016fe4 <LCD_FillPolyLine>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_FillPolyLine(pPoint Points, uint16_t PointCount)
{
 8016fe4:	b5b0      	push	{r4, r5, r7, lr}
 8016fe6:	b08c      	sub	sp, #48	; 0x30
 8016fe8:	af02      	add	r7, sp, #8
 8016fea:	6078      	str	r0, [r7, #4]
 8016fec:	460b      	mov	r3, r1
 8016fee:	807b      	strh	r3, [r7, #2]
 
  int16_t X = 0, Y = 0, X2 = 0, Y2 = 0, X_center = 0, Y_center = 0, X_first = 0, Y_first = 0, pixelX = 0, pixelY = 0, counter = 0;
 8016ff0:	2300      	movs	r3, #0
 8016ff2:	833b      	strh	r3, [r7, #24]
 8016ff4:	2300      	movs	r3, #0
 8016ff6:	82fb      	strh	r3, [r7, #22]
 8016ff8:	2300      	movs	r3, #0
 8016ffa:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016ffc:	2300      	movs	r3, #0
 8016ffe:	84bb      	strh	r3, [r7, #36]	; 0x24
 8017000:	2300      	movs	r3, #0
 8017002:	82bb      	strh	r3, [r7, #20]
 8017004:	2300      	movs	r3, #0
 8017006:	827b      	strh	r3, [r7, #18]
 8017008:	2300      	movs	r3, #0
 801700a:	823b      	strh	r3, [r7, #16]
 801700c:	2300      	movs	r3, #0
 801700e:	81fb      	strh	r3, [r7, #14]
 8017010:	2300      	movs	r3, #0
 8017012:	81bb      	strh	r3, [r7, #12]
 8017014:	2300      	movs	r3, #0
 8017016:	817b      	strh	r3, [r7, #10]
 8017018:	2300      	movs	r3, #0
 801701a:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  IMAGE_LEFT = 0, IMAGE_RIGHT = 0, IMAGE_TOP = 0, IMAGE_BOTTOM = 0;  
 801701c:	2300      	movs	r3, #0
 801701e:	843b      	strh	r3, [r7, #32]
 8017020:	2300      	movs	r3, #0
 8017022:	83fb      	strh	r3, [r7, #30]
 8017024:	2300      	movs	r3, #0
 8017026:	83bb      	strh	r3, [r7, #28]
 8017028:	2300      	movs	r3, #0
 801702a:	837b      	strh	r3, [r7, #26]

  IMAGE_LEFT = IMAGE_RIGHT = Points->X;
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	881b      	ldrh	r3, [r3, #0]
 8017030:	83fb      	strh	r3, [r7, #30]
 8017032:	8bfb      	ldrh	r3, [r7, #30]
 8017034:	843b      	strh	r3, [r7, #32]
  IMAGE_TOP= IMAGE_BOTTOM = Points->Y;
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	885b      	ldrh	r3, [r3, #2]
 801703a:	837b      	strh	r3, [r7, #26]
 801703c:	8b7b      	ldrh	r3, [r7, #26]
 801703e:	83bb      	strh	r3, [r7, #28]

  for(counter = 1; counter < PointCount; counter++)
 8017040:	2301      	movs	r3, #1
 8017042:	847b      	strh	r3, [r7, #34]	; 0x22
 8017044:	e02c      	b.n	80170a0 <LCD_FillPolyLine+0xbc>
  {
    pixelX = POLY_X(counter);
 8017046:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801704a:	009b      	lsls	r3, r3, #2
 801704c:	687a      	ldr	r2, [r7, #4]
 801704e:	4413      	add	r3, r2
 8017050:	885b      	ldrh	r3, [r3, #2]
 8017052:	81bb      	strh	r3, [r7, #12]
    if(pixelX < IMAGE_LEFT)
 8017054:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8017058:	8c3b      	ldrh	r3, [r7, #32]
 801705a:	429a      	cmp	r2, r3
 801705c:	da01      	bge.n	8017062 <LCD_FillPolyLine+0x7e>
    {
      IMAGE_LEFT = pixelX;
 801705e:	89bb      	ldrh	r3, [r7, #12]
 8017060:	843b      	strh	r3, [r7, #32]
    }
    if(pixelX > IMAGE_RIGHT)
 8017062:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8017066:	8bfb      	ldrh	r3, [r7, #30]
 8017068:	429a      	cmp	r2, r3
 801706a:	dd01      	ble.n	8017070 <LCD_FillPolyLine+0x8c>
    {
      IMAGE_RIGHT = pixelX;
 801706c:	89bb      	ldrh	r3, [r7, #12]
 801706e:	83fb      	strh	r3, [r7, #30]
    }
    
    pixelY = POLY_Y(counter);
 8017070:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017074:	009b      	lsls	r3, r3, #2
 8017076:	687a      	ldr	r2, [r7, #4]
 8017078:	4413      	add	r3, r2
 801707a:	881b      	ldrh	r3, [r3, #0]
 801707c:	817b      	strh	r3, [r7, #10]
    if(pixelY < IMAGE_TOP)
 801707e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8017082:	8bbb      	ldrh	r3, [r7, #28]
 8017084:	429a      	cmp	r2, r3
 8017086:	da01      	bge.n	801708c <LCD_FillPolyLine+0xa8>
    { 
      IMAGE_TOP = pixelY;
 8017088:	897b      	ldrh	r3, [r7, #10]
 801708a:	83bb      	strh	r3, [r7, #28]
    }
    if(pixelY > IMAGE_BOTTOM)
 801708c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8017090:	8b7b      	ldrh	r3, [r7, #26]
 8017092:	429a      	cmp	r2, r3
 8017094:	dd01      	ble.n	801709a <LCD_FillPolyLine+0xb6>
    {
      IMAGE_BOTTOM = pixelY;
 8017096:	897b      	ldrh	r3, [r7, #10]
 8017098:	837b      	strh	r3, [r7, #26]
  uint16_t  IMAGE_LEFT = 0, IMAGE_RIGHT = 0, IMAGE_TOP = 0, IMAGE_BOTTOM = 0;  

  IMAGE_LEFT = IMAGE_RIGHT = Points->X;
  IMAGE_TOP= IMAGE_BOTTOM = Points->Y;

  for(counter = 1; counter < PointCount; counter++)
 801709a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801709c:	3301      	adds	r3, #1
 801709e:	847b      	strh	r3, [r7, #34]	; 0x22
 80170a0:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80170a4:	887b      	ldrh	r3, [r7, #2]
 80170a6:	429a      	cmp	r2, r3
 80170a8:	dbcd      	blt.n	8017046 <LCD_FillPolyLine+0x62>
    {
      IMAGE_BOTTOM = pixelY;
    }
  }  
  
  if(PointCount < 2)
 80170aa:	887b      	ldrh	r3, [r7, #2]
 80170ac:	2b01      	cmp	r3, #1
 80170ae:	d800      	bhi.n	80170b2 <LCD_FillPolyLine+0xce>
  {
    return;
 80170b0:	e065      	b.n	801717e <LCD_FillPolyLine+0x19a>
  }
  
  X_center = (IMAGE_LEFT + IMAGE_RIGHT)/2;
 80170b2:	8c3a      	ldrh	r2, [r7, #32]
 80170b4:	8bfb      	ldrh	r3, [r7, #30]
 80170b6:	4413      	add	r3, r2
 80170b8:	0fda      	lsrs	r2, r3, #31
 80170ba:	4413      	add	r3, r2
 80170bc:	105b      	asrs	r3, r3, #1
 80170be:	82bb      	strh	r3, [r7, #20]
  Y_center = (IMAGE_BOTTOM + IMAGE_TOP)/2;
 80170c0:	8b7a      	ldrh	r2, [r7, #26]
 80170c2:	8bbb      	ldrh	r3, [r7, #28]
 80170c4:	4413      	add	r3, r2
 80170c6:	0fda      	lsrs	r2, r3, #31
 80170c8:	4413      	add	r3, r2
 80170ca:	105b      	asrs	r3, r3, #1
 80170cc:	827b      	strh	r3, [r7, #18]
 
  X_first = Points->X;
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	881b      	ldrh	r3, [r3, #0]
 80170d2:	823b      	strh	r3, [r7, #16]
  Y_first = Points->Y;
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	885b      	ldrh	r3, [r3, #2]
 80170d8:	81fb      	strh	r3, [r7, #14]
  
  while(--PointCount)
 80170da:	e02c      	b.n	8017136 <LCD_FillPolyLine+0x152>
  {
    X = Points->X;
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	881b      	ldrh	r3, [r3, #0]
 80170e0:	833b      	strh	r3, [r7, #24]
    Y = Points->Y;
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	885b      	ldrh	r3, [r3, #2]
 80170e6:	82fb      	strh	r3, [r7, #22]
    Points++;
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	3304      	adds	r3, #4
 80170ec:	607b      	str	r3, [r7, #4]
    X2 = Points->X;
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	881b      	ldrh	r3, [r3, #0]
 80170f2:	84fb      	strh	r3, [r7, #38]	; 0x26
    Y2 = Points->Y;    
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	885b      	ldrh	r3, [r3, #2]
 80170f8:	84bb      	strh	r3, [r7, #36]	; 0x24
  
    LCD_FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 80170fa:	8b38      	ldrh	r0, [r7, #24]
 80170fc:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80170fe:	8aba      	ldrh	r2, [r7, #20]
 8017100:	8afb      	ldrh	r3, [r7, #22]
 8017102:	8cbd      	ldrh	r5, [r7, #36]	; 0x24
 8017104:	8a7c      	ldrh	r4, [r7, #18]
 8017106:	9500      	str	r5, [sp, #0]
 8017108:	9401      	str	r4, [sp, #4]
 801710a:	f7ff fdf5 	bl	8016cf8 <LCD_FillTriangle>
    LCD_FillTriangle(X, X_center, X2, Y, Y_center, Y2);
 801710e:	8b38      	ldrh	r0, [r7, #24]
 8017110:	8ab9      	ldrh	r1, [r7, #20]
 8017112:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017114:	8afb      	ldrh	r3, [r7, #22]
 8017116:	8a7d      	ldrh	r5, [r7, #18]
 8017118:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
 801711a:	9500      	str	r5, [sp, #0]
 801711c:	9401      	str	r4, [sp, #4]
 801711e:	f7ff fdeb 	bl	8016cf8 <LCD_FillTriangle>
    LCD_FillTriangle(X_center, X2, X, Y_center, Y2, Y);   
 8017122:	8ab8      	ldrh	r0, [r7, #20]
 8017124:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8017126:	8b3a      	ldrh	r2, [r7, #24]
 8017128:	8a7b      	ldrh	r3, [r7, #18]
 801712a:	8cbd      	ldrh	r5, [r7, #36]	; 0x24
 801712c:	8afc      	ldrh	r4, [r7, #22]
 801712e:	9500      	str	r5, [sp, #0]
 8017130:	9401      	str	r4, [sp, #4]
 8017132:	f7ff fde1 	bl	8016cf8 <LCD_FillTriangle>
  Y_center = (IMAGE_BOTTOM + IMAGE_TOP)/2;
 
  X_first = Points->X;
  Y_first = Points->Y;
  
  while(--PointCount)
 8017136:	887b      	ldrh	r3, [r7, #2]
 8017138:	3b01      	subs	r3, #1
 801713a:	807b      	strh	r3, [r7, #2]
 801713c:	887b      	ldrh	r3, [r7, #2]
 801713e:	2b00      	cmp	r3, #0
 8017140:	d1cc      	bne.n	80170dc <LCD_FillPolyLine+0xf8>
    LCD_FillTriangle(X, X2, X_center, Y, Y2, Y_center);
    LCD_FillTriangle(X, X_center, X2, Y, Y_center, Y2);
    LCD_FillTriangle(X_center, X2, X, Y_center, Y2, Y);   
  }
  
  LCD_FillTriangle(X_first, X2, X_center, Y_first, Y2, Y_center);
 8017142:	8a38      	ldrh	r0, [r7, #16]
 8017144:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8017146:	8aba      	ldrh	r2, [r7, #20]
 8017148:	89fb      	ldrh	r3, [r7, #14]
 801714a:	8cbd      	ldrh	r5, [r7, #36]	; 0x24
 801714c:	8a7c      	ldrh	r4, [r7, #18]
 801714e:	9500      	str	r5, [sp, #0]
 8017150:	9401      	str	r4, [sp, #4]
 8017152:	f7ff fdd1 	bl	8016cf8 <LCD_FillTriangle>
  LCD_FillTriangle(X_first, X_center, X2, Y_first, Y_center, Y2);
 8017156:	8a38      	ldrh	r0, [r7, #16]
 8017158:	8ab9      	ldrh	r1, [r7, #20]
 801715a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801715c:	89fb      	ldrh	r3, [r7, #14]
 801715e:	8a7d      	ldrh	r5, [r7, #18]
 8017160:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
 8017162:	9500      	str	r5, [sp, #0]
 8017164:	9401      	str	r4, [sp, #4]
 8017166:	f7ff fdc7 	bl	8016cf8 <LCD_FillTriangle>
  LCD_FillTriangle(X_center, X2, X_first, Y_center, Y2, Y_first); 
 801716a:	8ab8      	ldrh	r0, [r7, #20]
 801716c:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 801716e:	8a3a      	ldrh	r2, [r7, #16]
 8017170:	8a7b      	ldrh	r3, [r7, #18]
 8017172:	8cbd      	ldrh	r5, [r7, #36]	; 0x24
 8017174:	89fc      	ldrh	r4, [r7, #14]
 8017176:	9500      	str	r5, [sp, #0]
 8017178:	9401      	str	r4, [sp, #4]
 801717a:	f7ff fdbd 	bl	8016cf8 <LCD_FillTriangle>
}
 801717e:	3728      	adds	r7, #40	; 0x28
 8017180:	46bd      	mov	sp, r7
 8017182:	bdb0      	pop	{r4, r5, r7, pc}

08017184 <LCD_WriteCommand>:
  * @brief  Writes command to select the LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void LCD_WriteCommand(uint8_t LCD_Reg)
{
 8017184:	b580      	push	{r7, lr}
 8017186:	b082      	sub	sp, #8
 8017188:	af00      	add	r7, sp, #0
 801718a:	4603      	mov	r3, r0
 801718c:	71fb      	strb	r3, [r7, #7]
    /* Reset WRX to send command */
  LCD_CtrlLinesWrite(LCD_WRX_GPIO_PORT, LCD_WRX_PIN, Bit_RESET);
 801718e:	4812      	ldr	r0, [pc, #72]	; (80171d8 <LCD_WriteCommand+0x54>)
 8017190:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8017194:	2200      	movs	r2, #0
 8017196:	f000 f9cf 	bl	8017538 <LCD_CtrlLinesWrite>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_ChipSelect(DISABLE);
 801719a:	2000      	movs	r0, #0
 801719c:	f7fe fbca 	bl	8015934 <LCD_ChipSelect>
  SPI_I2S_SendData(LCD_SPI, LCD_Reg);
 80171a0:	79fb      	ldrb	r3, [r7, #7]
 80171a2:	b29b      	uxth	r3, r3
 80171a4:	480d      	ldr	r0, [pc, #52]	; (80171dc <LCD_WriteCommand+0x58>)
 80171a6:	4619      	mov	r1, r3
 80171a8:	f7fb fae6 	bl	8012778 <SPI_I2S_SendData>
  
  /* Wait until a data is sent(not busy), before config /CS HIGH */
  
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_TXE) == RESET) ;
 80171ac:	bf00      	nop
 80171ae:	480b      	ldr	r0, [pc, #44]	; (80171dc <LCD_WriteCommand+0x58>)
 80171b0:	2102      	movs	r1, #2
 80171b2:	f7fb fb9d 	bl	80128f0 <SPI_I2S_GetFlagStatus>
 80171b6:	4603      	mov	r3, r0
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	d0f8      	beq.n	80171ae <LCD_WriteCommand+0x2a>
  
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET);
 80171bc:	bf00      	nop
 80171be:	4807      	ldr	r0, [pc, #28]	; (80171dc <LCD_WriteCommand+0x58>)
 80171c0:	2180      	movs	r1, #128	; 0x80
 80171c2:	f7fb fb95 	bl	80128f0 <SPI_I2S_GetFlagStatus>
 80171c6:	4603      	mov	r3, r0
 80171c8:	2b00      	cmp	r3, #0
 80171ca:	d1f8      	bne.n	80171be <LCD_WriteCommand+0x3a>
  
  LCD_ChipSelect(ENABLE);
 80171cc:	2001      	movs	r0, #1
 80171ce:	f7fe fbb1 	bl	8015934 <LCD_ChipSelect>
}
 80171d2:	3708      	adds	r7, #8
 80171d4:	46bd      	mov	sp, r7
 80171d6:	bd80      	pop	{r7, pc}
 80171d8:	40020c00 	.word	0x40020c00
 80171dc:	40015000 	.word	0x40015000

080171e0 <LCD_WriteData>:
  *         This function must be used after LCD_WriteCommand() function
  * @param  value: data to write to the selected register.
  * @retval None
  */
void LCD_WriteData(uint8_t value)
{
 80171e0:	b580      	push	{r7, lr}
 80171e2:	b082      	sub	sp, #8
 80171e4:	af00      	add	r7, sp, #0
 80171e6:	4603      	mov	r3, r0
 80171e8:	71fb      	strb	r3, [r7, #7]
    /* Set WRX to send data */
  LCD_CtrlLinesWrite(LCD_WRX_GPIO_PORT, LCD_WRX_PIN, Bit_SET);
 80171ea:	4812      	ldr	r0, [pc, #72]	; (8017234 <LCD_WriteData+0x54>)
 80171ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80171f0:	2201      	movs	r2, #1
 80171f2:	f000 f9a1 	bl	8017538 <LCD_CtrlLinesWrite>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_ChipSelect(DISABLE);
 80171f6:	2000      	movs	r0, #0
 80171f8:	f7fe fb9c 	bl	8015934 <LCD_ChipSelect>
  SPI_I2S_SendData(LCD_SPI, value);
 80171fc:	79fb      	ldrb	r3, [r7, #7]
 80171fe:	b29b      	uxth	r3, r3
 8017200:	480d      	ldr	r0, [pc, #52]	; (8017238 <LCD_WriteData+0x58>)
 8017202:	4619      	mov	r1, r3
 8017204:	f7fb fab8 	bl	8012778 <SPI_I2S_SendData>
  
  /* Wait until a data is sent(not busy), before config /CS HIGH */
  
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_TXE) == RESET) ;
 8017208:	bf00      	nop
 801720a:	480b      	ldr	r0, [pc, #44]	; (8017238 <LCD_WriteData+0x58>)
 801720c:	2102      	movs	r1, #2
 801720e:	f7fb fb6f 	bl	80128f0 <SPI_I2S_GetFlagStatus>
 8017212:	4603      	mov	r3, r0
 8017214:	2b00      	cmp	r3, #0
 8017216:	d0f8      	beq.n	801720a <LCD_WriteData+0x2a>
  
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET);
 8017218:	bf00      	nop
 801721a:	4807      	ldr	r0, [pc, #28]	; (8017238 <LCD_WriteData+0x58>)
 801721c:	2180      	movs	r1, #128	; 0x80
 801721e:	f7fb fb67 	bl	80128f0 <SPI_I2S_GetFlagStatus>
 8017222:	4603      	mov	r3, r0
 8017224:	2b00      	cmp	r3, #0
 8017226:	d1f8      	bne.n	801721a <LCD_WriteData+0x3a>
  
  LCD_ChipSelect(ENABLE);
 8017228:	2001      	movs	r0, #1
 801722a:	f7fe fb83 	bl	8015934 <LCD_ChipSelect>
}
 801722e:	3708      	adds	r7, #8
 8017230:	46bd      	mov	sp, r7
 8017232:	bd80      	pop	{r7, pc}
 8017234:	40020c00 	.word	0x40020c00
 8017238:	40015000 	.word	0x40015000

0801723c <LCD_PowerOn>:
  * @brief  Configure the LCD controller (Power On sequence as described in ILI9341 Datasheet)
  * @param  None
  * @retval None
  */
void LCD_PowerOn(void)
{
 801723c:	b580      	push	{r7, lr}
 801723e:	af00      	add	r7, sp, #0
  LCD_WriteCommand(0xCA);
 8017240:	20ca      	movs	r0, #202	; 0xca
 8017242:	f7ff ff9f 	bl	8017184 <LCD_WriteCommand>
  LCD_WriteData(0xC3);
 8017246:	20c3      	movs	r0, #195	; 0xc3
 8017248:	f7ff ffca 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x08);
 801724c:	2008      	movs	r0, #8
 801724e:	f7ff ffc7 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x50);
 8017252:	2050      	movs	r0, #80	; 0x50
 8017254:	f7ff ffc4 	bl	80171e0 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWERB);
 8017258:	20cf      	movs	r0, #207	; 0xcf
 801725a:	f7ff ff93 	bl	8017184 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 801725e:	2000      	movs	r0, #0
 8017260:	f7ff ffbe 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0xC1);
 8017264:	20c1      	movs	r0, #193	; 0xc1
 8017266:	f7ff ffbb 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x30);
 801726a:	2030      	movs	r0, #48	; 0x30
 801726c:	f7ff ffb8 	bl	80171e0 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER_SEQ);
 8017270:	20ed      	movs	r0, #237	; 0xed
 8017272:	f7ff ff87 	bl	8017184 <LCD_WriteCommand>
  LCD_WriteData(0x64);
 8017276:	2064      	movs	r0, #100	; 0x64
 8017278:	f7ff ffb2 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x03);
 801727c:	2003      	movs	r0, #3
 801727e:	f7ff ffaf 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x12);
 8017282:	2012      	movs	r0, #18
 8017284:	f7ff ffac 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x81);
 8017288:	2081      	movs	r0, #129	; 0x81
 801728a:	f7ff ffa9 	bl	80171e0 <LCD_WriteData>
  LCD_WriteCommand(LCD_DTCA);
 801728e:	20e8      	movs	r0, #232	; 0xe8
 8017290:	f7ff ff78 	bl	8017184 <LCD_WriteCommand>
  LCD_WriteData(0x85);
 8017294:	2085      	movs	r0, #133	; 0x85
 8017296:	f7ff ffa3 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x00);
 801729a:	2000      	movs	r0, #0
 801729c:	f7ff ffa0 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x78);
 80172a0:	2078      	movs	r0, #120	; 0x78
 80172a2:	f7ff ff9d 	bl	80171e0 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWERA);
 80172a6:	20cb      	movs	r0, #203	; 0xcb
 80172a8:	f7ff ff6c 	bl	8017184 <LCD_WriteCommand>
  LCD_WriteData(0x39);
 80172ac:	2039      	movs	r0, #57	; 0x39
 80172ae:	f7ff ff97 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x2C);
 80172b2:	202c      	movs	r0, #44	; 0x2c
 80172b4:	f7ff ff94 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x00);
 80172b8:	2000      	movs	r0, #0
 80172ba:	f7ff ff91 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x34);
 80172be:	2034      	movs	r0, #52	; 0x34
 80172c0:	f7ff ff8e 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x02);
 80172c4:	2002      	movs	r0, #2
 80172c6:	f7ff ff8b 	bl	80171e0 <LCD_WriteData>
  LCD_WriteCommand(LCD_PRC);
 80172ca:	20f7      	movs	r0, #247	; 0xf7
 80172cc:	f7ff ff5a 	bl	8017184 <LCD_WriteCommand>
  LCD_WriteData(0x20);
 80172d0:	2020      	movs	r0, #32
 80172d2:	f7ff ff85 	bl	80171e0 <LCD_WriteData>
  LCD_WriteCommand(LCD_DTCB);
 80172d6:	20ea      	movs	r0, #234	; 0xea
 80172d8:	f7ff ff54 	bl	8017184 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 80172dc:	2000      	movs	r0, #0
 80172de:	f7ff ff7f 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x00);
 80172e2:	2000      	movs	r0, #0
 80172e4:	f7ff ff7c 	bl	80171e0 <LCD_WriteData>
  LCD_WriteCommand(LCD_FRC);
 80172e8:	20b1      	movs	r0, #177	; 0xb1
 80172ea:	f7ff ff4b 	bl	8017184 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 80172ee:	2000      	movs	r0, #0
 80172f0:	f7ff ff76 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x1B);
 80172f4:	201b      	movs	r0, #27
 80172f6:	f7ff ff73 	bl	80171e0 <LCD_WriteData>
  LCD_WriteCommand(LCD_DFC);
 80172fa:	20b6      	movs	r0, #182	; 0xb6
 80172fc:	f7ff ff42 	bl	8017184 <LCD_WriteCommand>
  LCD_WriteData(0x0A);
 8017300:	200a      	movs	r0, #10
 8017302:	f7ff ff6d 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0xA2);
 8017306:	20a2      	movs	r0, #162	; 0xa2
 8017308:	f7ff ff6a 	bl	80171e0 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER1);
 801730c:	20c0      	movs	r0, #192	; 0xc0
 801730e:	f7ff ff39 	bl	8017184 <LCD_WriteCommand>
  LCD_WriteData(0x10);
 8017312:	2010      	movs	r0, #16
 8017314:	f7ff ff64 	bl	80171e0 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER2);
 8017318:	20c1      	movs	r0, #193	; 0xc1
 801731a:	f7ff ff33 	bl	8017184 <LCD_WriteCommand>
  LCD_WriteData(0x10);
 801731e:	2010      	movs	r0, #16
 8017320:	f7ff ff5e 	bl	80171e0 <LCD_WriteData>
  LCD_WriteCommand(LCD_VCOM1);
 8017324:	20c5      	movs	r0, #197	; 0xc5
 8017326:	f7ff ff2d 	bl	8017184 <LCD_WriteCommand>
  LCD_WriteData(0x45);
 801732a:	2045      	movs	r0, #69	; 0x45
 801732c:	f7ff ff58 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x15);
 8017330:	2015      	movs	r0, #21
 8017332:	f7ff ff55 	bl	80171e0 <LCD_WriteData>
  LCD_WriteCommand(LCD_VCOM2);
 8017336:	20c7      	movs	r0, #199	; 0xc7
 8017338:	f7ff ff24 	bl	8017184 <LCD_WriteCommand>
  LCD_WriteData(0x90);
 801733c:	2090      	movs	r0, #144	; 0x90
 801733e:	f7ff ff4f 	bl	80171e0 <LCD_WriteData>
  LCD_WriteCommand(LCD_MAC);
 8017342:	2036      	movs	r0, #54	; 0x36
 8017344:	f7ff ff1e 	bl	8017184 <LCD_WriteCommand>
  LCD_WriteData(0xC8);
 8017348:	20c8      	movs	r0, #200	; 0xc8
 801734a:	f7ff ff49 	bl	80171e0 <LCD_WriteData>
  LCD_WriteCommand(LCD_3GAMMA_EN);
 801734e:	20f2      	movs	r0, #242	; 0xf2
 8017350:	f7ff ff18 	bl	8017184 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8017354:	2000      	movs	r0, #0
 8017356:	f7ff ff43 	bl	80171e0 <LCD_WriteData>
  LCD_WriteCommand(LCD_RGB_INTERFACE);
 801735a:	20b0      	movs	r0, #176	; 0xb0
 801735c:	f7ff ff12 	bl	8017184 <LCD_WriteCommand>
  LCD_WriteData(0xC2);
 8017360:	20c2      	movs	r0, #194	; 0xc2
 8017362:	f7ff ff3d 	bl	80171e0 <LCD_WriteData>
  LCD_WriteCommand(LCD_DFC);
 8017366:	20b6      	movs	r0, #182	; 0xb6
 8017368:	f7ff ff0c 	bl	8017184 <LCD_WriteCommand>
  LCD_WriteData(0x0A);
 801736c:	200a      	movs	r0, #10
 801736e:	f7ff ff37 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0xA7);
 8017372:	20a7      	movs	r0, #167	; 0xa7
 8017374:	f7ff ff34 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x27);
 8017378:	2027      	movs	r0, #39	; 0x27
 801737a:	f7ff ff31 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x04);
 801737e:	2004      	movs	r0, #4
 8017380:	f7ff ff2e 	bl	80171e0 <LCD_WriteData>

  /* colomn address set */
  LCD_WriteCommand(LCD_COLUMN_ADDR);
 8017384:	202a      	movs	r0, #42	; 0x2a
 8017386:	f7ff fefd 	bl	8017184 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 801738a:	2000      	movs	r0, #0
 801738c:	f7ff ff28 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x00);
 8017390:	2000      	movs	r0, #0
 8017392:	f7ff ff25 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x00);
 8017396:	2000      	movs	r0, #0
 8017398:	f7ff ff22 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0xEF);
 801739c:	20ef      	movs	r0, #239	; 0xef
 801739e:	f7ff ff1f 	bl	80171e0 <LCD_WriteData>
  /* Page Address Set */
  LCD_WriteCommand(LCD_PAGE_ADDR);
 80173a2:	202b      	movs	r0, #43	; 0x2b
 80173a4:	f7ff feee 	bl	8017184 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 80173a8:	2000      	movs	r0, #0
 80173aa:	f7ff ff19 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x00);
 80173ae:	2000      	movs	r0, #0
 80173b0:	f7ff ff16 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x01);
 80173b4:	2001      	movs	r0, #1
 80173b6:	f7ff ff13 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x3F);
 80173ba:	203f      	movs	r0, #63	; 0x3f
 80173bc:	f7ff ff10 	bl	80171e0 <LCD_WriteData>
  LCD_WriteCommand(LCD_INTERFACE);
 80173c0:	20f6      	movs	r0, #246	; 0xf6
 80173c2:	f7ff fedf 	bl	8017184 <LCD_WriteCommand>
  LCD_WriteData(0x01);
 80173c6:	2001      	movs	r0, #1
 80173c8:	f7ff ff0a 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x00);
 80173cc:	2000      	movs	r0, #0
 80173ce:	f7ff ff07 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x06);
 80173d2:	2006      	movs	r0, #6
 80173d4:	f7ff ff04 	bl	80171e0 <LCD_WriteData>
  
  LCD_WriteCommand(LCD_GRAM);
 80173d8:	202c      	movs	r0, #44	; 0x2c
 80173da:	f7ff fed3 	bl	8017184 <LCD_WriteCommand>
  delay(200);
 80173de:	20c8      	movs	r0, #200	; 0xc8
 80173e0:	f000 fa06 	bl	80177f0 <delay>
  
  LCD_WriteCommand(LCD_GAMMA);
 80173e4:	2026      	movs	r0, #38	; 0x26
 80173e6:	f7ff fecd 	bl	8017184 <LCD_WriteCommand>
  LCD_WriteData(0x01);
 80173ea:	2001      	movs	r0, #1
 80173ec:	f7ff fef8 	bl	80171e0 <LCD_WriteData>
  
  LCD_WriteCommand(LCD_PGAMMA);
 80173f0:	20e0      	movs	r0, #224	; 0xe0
 80173f2:	f7ff fec7 	bl	8017184 <LCD_WriteCommand>
  LCD_WriteData(0x0F);
 80173f6:	200f      	movs	r0, #15
 80173f8:	f7ff fef2 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x29);
 80173fc:	2029      	movs	r0, #41	; 0x29
 80173fe:	f7ff feef 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x24);
 8017402:	2024      	movs	r0, #36	; 0x24
 8017404:	f7ff feec 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x0C);
 8017408:	200c      	movs	r0, #12
 801740a:	f7ff fee9 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x0E);
 801740e:	200e      	movs	r0, #14
 8017410:	f7ff fee6 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x09);
 8017414:	2009      	movs	r0, #9
 8017416:	f7ff fee3 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x4E);
 801741a:	204e      	movs	r0, #78	; 0x4e
 801741c:	f7ff fee0 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x78);
 8017420:	2078      	movs	r0, #120	; 0x78
 8017422:	f7ff fedd 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x3C);
 8017426:	203c      	movs	r0, #60	; 0x3c
 8017428:	f7ff feda 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x09);
 801742c:	2009      	movs	r0, #9
 801742e:	f7ff fed7 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x13);
 8017432:	2013      	movs	r0, #19
 8017434:	f7ff fed4 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x05);
 8017438:	2005      	movs	r0, #5
 801743a:	f7ff fed1 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x17);
 801743e:	2017      	movs	r0, #23
 8017440:	f7ff fece 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x11);
 8017444:	2011      	movs	r0, #17
 8017446:	f7ff fecb 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x00);
 801744a:	2000      	movs	r0, #0
 801744c:	f7ff fec8 	bl	80171e0 <LCD_WriteData>
  LCD_WriteCommand(LCD_NGAMMA);
 8017450:	20e1      	movs	r0, #225	; 0xe1
 8017452:	f7ff fe97 	bl	8017184 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8017456:	2000      	movs	r0, #0
 8017458:	f7ff fec2 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x16);
 801745c:	2016      	movs	r0, #22
 801745e:	f7ff febf 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x1B);
 8017462:	201b      	movs	r0, #27
 8017464:	f7ff febc 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x04);
 8017468:	2004      	movs	r0, #4
 801746a:	f7ff feb9 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x11);
 801746e:	2011      	movs	r0, #17
 8017470:	f7ff feb6 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x07);
 8017474:	2007      	movs	r0, #7
 8017476:	f7ff feb3 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x31);
 801747a:	2031      	movs	r0, #49	; 0x31
 801747c:	f7ff feb0 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x33);
 8017480:	2033      	movs	r0, #51	; 0x33
 8017482:	f7ff fead 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x42);
 8017486:	2042      	movs	r0, #66	; 0x42
 8017488:	f7ff feaa 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x05);
 801748c:	2005      	movs	r0, #5
 801748e:	f7ff fea7 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x0C);
 8017492:	200c      	movs	r0, #12
 8017494:	f7ff fea4 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x0A);
 8017498:	200a      	movs	r0, #10
 801749a:	f7ff fea1 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x28);
 801749e:	2028      	movs	r0, #40	; 0x28
 80174a0:	f7ff fe9e 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x2F);
 80174a4:	202f      	movs	r0, #47	; 0x2f
 80174a6:	f7ff fe9b 	bl	80171e0 <LCD_WriteData>
  LCD_WriteData(0x0F);
 80174aa:	200f      	movs	r0, #15
 80174ac:	f7ff fe98 	bl	80171e0 <LCD_WriteData>
  
  LCD_WriteCommand(LCD_SLEEP_OUT);
 80174b0:	2011      	movs	r0, #17
 80174b2:	f7ff fe67 	bl	8017184 <LCD_WriteCommand>
  delay(200);
 80174b6:	20c8      	movs	r0, #200	; 0xc8
 80174b8:	f000 f99a 	bl	80177f0 <delay>
  LCD_WriteCommand(LCD_DISPLAY_ON);
 80174bc:	2029      	movs	r0, #41	; 0x29
 80174be:	f7ff fe61 	bl	8017184 <LCD_WriteCommand>
  /* GRAM start writing */
  LCD_WriteCommand(LCD_GRAM);
 80174c2:	202c      	movs	r0, #44	; 0x2c
 80174c4:	f7ff fe5e 	bl	8017184 <LCD_WriteCommand>
 }
 80174c8:	bd80      	pop	{r7, pc}
 80174ca:	bf00      	nop

080174cc <LCD_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void LCD_DisplayOn(void)
{
 80174cc:	b580      	push	{r7, lr}
 80174ce:	af00      	add	r7, sp, #0
  LCD_WriteCommand(LCD_DISPLAY_ON);
 80174d0:	2029      	movs	r0, #41	; 0x29
 80174d2:	f7ff fe57 	bl	8017184 <LCD_WriteCommand>
}
 80174d6:	bd80      	pop	{r7, pc}

080174d8 <LCD_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void LCD_DisplayOff(void)
{
 80174d8:	b580      	push	{r7, lr}
 80174da:	af00      	add	r7, sp, #0
    /* Display Off */
    LCD_WriteCommand(LCD_DISPLAY_OFF);
 80174dc:	2028      	movs	r0, #40	; 0x28
 80174de:	f7ff fe51 	bl	8017184 <LCD_WriteCommand>
}
 80174e2:	bd80      	pop	{r7, pc}

080174e4 <LCD_CtrlLinesConfig>:
  *         when VDDIO is lower than required LCD supply.
  * @param  None
  * @retval None
  */
void LCD_CtrlLinesConfig(void)
{
 80174e4:	b580      	push	{r7, lr}
 80174e6:	b082      	sub	sp, #8
 80174e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIOs clock*/
  RCC_AHB1PeriphClockCmd(LCD_NCS_GPIO_CLK | LCD_WRX_GPIO_CLK, ENABLE);
 80174ea:	200c      	movs	r0, #12
 80174ec:	2101      	movs	r1, #1
 80174ee:	f7f8 fbbb 	bl	800fc68 <RCC_AHB1PeriphClockCmd>

  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = LCD_NCS_PIN;
 80174f2:	2304      	movs	r3, #4
 80174f4:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80174f6:	2302      	movs	r3, #2
 80174f8:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80174fa:	2301      	movs	r3, #1
 80174fc:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80174fe:	2300      	movs	r3, #0
 8017500:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8017502:	2300      	movs	r3, #0
 8017504:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8017506:	463b      	mov	r3, r7
 8017508:	4809      	ldr	r0, [pc, #36]	; (8017530 <LCD_CtrlLinesConfig+0x4c>)
 801750a:	4619      	mov	r1, r3
 801750c:	f7f5 fd04 	bl	800cf18 <GPIO_Init>
  
  /* Configure WRX in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = LCD_WRX_PIN;
 8017510:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8017514:	603b      	str	r3, [r7, #0]
  GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8017516:	463b      	mov	r3, r7
 8017518:	4806      	ldr	r0, [pc, #24]	; (8017534 <LCD_CtrlLinesConfig+0x50>)
 801751a:	4619      	mov	r1, r3
 801751c:	f7f5 fcfc 	bl	800cf18 <GPIO_Init>

  /* Set chip select pin high */
  LCD_CtrlLinesWrite(LCD_NCS_GPIO_PORT, LCD_NCS_PIN, Bit_SET);
 8017520:	4803      	ldr	r0, [pc, #12]	; (8017530 <LCD_CtrlLinesConfig+0x4c>)
 8017522:	2104      	movs	r1, #4
 8017524:	2201      	movs	r2, #1
 8017526:	f000 f807 	bl	8017538 <LCD_CtrlLinesWrite>
}
 801752a:	3708      	adds	r7, #8
 801752c:	46bd      	mov	sp, r7
 801752e:	bd80      	pop	{r7, pc}
 8017530:	40020800 	.word	0x40020800
 8017534:	40020c00 	.word	0x40020c00

08017538 <LCD_CtrlLinesWrite>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void LCD_CtrlLinesWrite(GPIO_TypeDef* GPIOx, uint16_t CtrlPins, BitAction BitVal)
{
 8017538:	b580      	push	{r7, lr}
 801753a:	b082      	sub	sp, #8
 801753c:	af00      	add	r7, sp, #0
 801753e:	6078      	str	r0, [r7, #4]
 8017540:	4613      	mov	r3, r2
 8017542:	460a      	mov	r2, r1
 8017544:	807a      	strh	r2, [r7, #2]
 8017546:	707b      	strb	r3, [r7, #1]
  /* Set or Reset the control line */
  GPIO_WriteBit(GPIOx, (uint16_t)CtrlPins, (BitAction)BitVal);
 8017548:	887a      	ldrh	r2, [r7, #2]
 801754a:	787b      	ldrb	r3, [r7, #1]
 801754c:	6878      	ldr	r0, [r7, #4]
 801754e:	4611      	mov	r1, r2
 8017550:	461a      	mov	r2, r3
 8017552:	f7f5 fe17 	bl	800d184 <GPIO_WriteBit>
}
 8017556:	3708      	adds	r7, #8
 8017558:	46bd      	mov	sp, r7
 801755a:	bd80      	pop	{r7, pc}

0801755c <LCD_SPIConfig>:
  * @brief  Configures the LCD_SPI interface.
  * @param  None
  * @retval None
  */
void LCD_SPIConfig(void)
{
 801755c:	b580      	push	{r7, lr}
 801755e:	b088      	sub	sp, #32
 8017560:	af00      	add	r7, sp, #0
  SPI_InitTypeDef    SPI_InitStructure;
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable LCD_SPI_SCK_GPIO_CLK, LCD_SPI_MISO_GPIO_CLK and LCD_SPI_MOSI_GPIO_CLK clock */
  RCC_AHB1PeriphClockCmd(LCD_SPI_SCK_GPIO_CLK | LCD_SPI_MISO_GPIO_CLK | LCD_SPI_MOSI_GPIO_CLK, ENABLE);
 8017562:	2020      	movs	r0, #32
 8017564:	2101      	movs	r1, #1
 8017566:	f7f8 fb7f 	bl	800fc68 <RCC_AHB1PeriphClockCmd>

  /* Enable LCD_SPI and SYSCFG clock  */
  RCC_APB2PeriphClockCmd(LCD_SPI_CLK, ENABLE);
 801756a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 801756e:	2101      	movs	r1, #1
 8017570:	f7f8 fbf2 	bl	800fd58 <RCC_APB2PeriphClockCmd>
  
  /* Configure LCD_SPI SCK pin */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_SCK_PIN;
 8017574:	2380      	movs	r3, #128	; 0x80
 8017576:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 8017578:	2301      	movs	r3, #1
 801757a:	727b      	strb	r3, [r7, #9]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 801757c:	2302      	movs	r3, #2
 801757e:	723b      	strb	r3, [r7, #8]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8017580:	2300      	movs	r3, #0
 8017582:	72bb      	strb	r3, [r7, #10]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 8017584:	2302      	movs	r3, #2
 8017586:	72fb      	strb	r3, [r7, #11]
  GPIO_Init(LCD_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 8017588:	1d3b      	adds	r3, r7, #4
 801758a:	4827      	ldr	r0, [pc, #156]	; (8017628 <LCD_SPIConfig+0xcc>)
 801758c:	4619      	mov	r1, r3
 801758e:	f7f5 fcc3 	bl	800cf18 <GPIO_Init>

  /* Configure LCD_SPI MISO pin */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MISO_PIN;
 8017592:	f44f 7380 	mov.w	r3, #256	; 0x100
 8017596:	607b      	str	r3, [r7, #4]
  GPIO_Init(LCD_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 8017598:	1d3b      	adds	r3, r7, #4
 801759a:	4823      	ldr	r0, [pc, #140]	; (8017628 <LCD_SPIConfig+0xcc>)
 801759c:	4619      	mov	r1, r3
 801759e:	f7f5 fcbb 	bl	800cf18 <GPIO_Init>

  /* Configure LCD_SPI MOSI pin */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MOSI_PIN;
 80175a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80175a6:	607b      	str	r3, [r7, #4]
  GPIO_Init(LCD_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 80175a8:	1d3b      	adds	r3, r7, #4
 80175aa:	481f      	ldr	r0, [pc, #124]	; (8017628 <LCD_SPIConfig+0xcc>)
 80175ac:	4619      	mov	r1, r3
 80175ae:	f7f5 fcb3 	bl	800cf18 <GPIO_Init>

  /* Connect SPI SCK */
  GPIO_PinAFConfig(LCD_SPI_SCK_GPIO_PORT, LCD_SPI_SCK_SOURCE, LCD_SPI_SCK_AF);
 80175b2:	481d      	ldr	r0, [pc, #116]	; (8017628 <LCD_SPIConfig+0xcc>)
 80175b4:	2107      	movs	r1, #7
 80175b6:	2205      	movs	r2, #5
 80175b8:	f7f5 fe1c 	bl	800d1f4 <GPIO_PinAFConfig>

  /* Connect SPI MISO */
  GPIO_PinAFConfig(LCD_SPI_MISO_GPIO_PORT, LCD_SPI_MISO_SOURCE, LCD_SPI_MISO_AF);
 80175bc:	481a      	ldr	r0, [pc, #104]	; (8017628 <LCD_SPIConfig+0xcc>)
 80175be:	2108      	movs	r1, #8
 80175c0:	2205      	movs	r2, #5
 80175c2:	f7f5 fe17 	bl	800d1f4 <GPIO_PinAFConfig>

  /* Connect SPI MOSI */
  GPIO_PinAFConfig(LCD_SPI_MOSI_GPIO_PORT, LCD_SPI_MOSI_SOURCE, LCD_SPI_MOSI_AF);
 80175c6:	4818      	ldr	r0, [pc, #96]	; (8017628 <LCD_SPIConfig+0xcc>)
 80175c8:	2109      	movs	r1, #9
 80175ca:	2205      	movs	r2, #5
 80175cc:	f7f5 fe12 	bl	800d1f4 <GPIO_PinAFConfig>
  
  SPI_I2S_DeInit(LCD_SPI);
 80175d0:	4816      	ldr	r0, [pc, #88]	; (801762c <LCD_SPIConfig+0xd0>)
 80175d2:	f7fa fdcf 	bl	8012174 <SPI_I2S_DeInit>

  /* SPI configuration -------------------------------------------------------*/
  /* If the SPI peripheral is already enabled, don't reconfigure it */
  if ((LCD_SPI->CR1 & SPI_CR1_SPE) == 0)
 80175d6:	4b15      	ldr	r3, [pc, #84]	; (801762c <LCD_SPIConfig+0xd0>)
 80175d8:	881b      	ldrh	r3, [r3, #0]
 80175da:	b29b      	uxth	r3, r3
 80175dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d11d      	bne.n	8017620 <LCD_SPIConfig+0xc4>
  {    
    SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80175e4:	2300      	movs	r3, #0
 80175e6:	81bb      	strh	r3, [r7, #12]
    SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 80175e8:	f44f 7382 	mov.w	r3, #260	; 0x104
 80175ec:	81fb      	strh	r3, [r7, #14]
    SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 80175ee:	2300      	movs	r3, #0
 80175f0:	823b      	strh	r3, [r7, #16]
    SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 80175f2:	2300      	movs	r3, #0
 80175f4:	827b      	strh	r3, [r7, #18]
    SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 80175f6:	2300      	movs	r3, #0
 80175f8:	82bb      	strh	r3, [r7, #20]
    SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 80175fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80175fe:	82fb      	strh	r3, [r7, #22]
       to verify these constraints:
          - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
          - l3gd20 SPI interface max baudrate is 10MHz for write/read
          - PCLK2 frequency is set to 90 MHz 
       */
    SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
 8017600:	2318      	movs	r3, #24
 8017602:	833b      	strh	r3, [r7, #24]
    SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8017604:	2300      	movs	r3, #0
 8017606:	837b      	strh	r3, [r7, #26]
    SPI_InitStructure.SPI_CRCPolynomial = 7;
 8017608:	2307      	movs	r3, #7
 801760a:	83bb      	strh	r3, [r7, #28]
    SPI_Init(LCD_SPI, &SPI_InitStructure);
 801760c:	f107 030c 	add.w	r3, r7, #12
 8017610:	4806      	ldr	r0, [pc, #24]	; (801762c <LCD_SPIConfig+0xd0>)
 8017612:	4619      	mov	r1, r3
 8017614:	f7fa fe1a 	bl	801224c <SPI_Init>

    /* Enable L3GD20_SPI  */
    SPI_Cmd(LCD_SPI, ENABLE);
 8017618:	4804      	ldr	r0, [pc, #16]	; (801762c <LCD_SPIConfig+0xd0>)
 801761a:	2101      	movs	r1, #1
 801761c:	f7fa ff72 	bl	8012504 <SPI_Cmd>
  }
}
 8017620:	3720      	adds	r7, #32
 8017622:	46bd      	mov	sp, r7
 8017624:	bd80      	pop	{r7, pc}
 8017626:	bf00      	nop
 8017628:	40021400 	.word	0x40021400
 801762c:	40015000 	.word	0x40015000

08017630 <LCD_AF_GPIOConfig>:
  * @brief  GPIO config for LTDC.
  * @param  None
  * @retval None
  */
static void LCD_AF_GPIOConfig(void)
{
 8017630:	b580      	push	{r7, lr}
 8017632:	b082      	sub	sp, #8
 8017634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable GPIOA, GPIOB, GPIOC, GPIOD, GPIOF, GPIOG AHB Clocks */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | \
 8017636:	206f      	movs	r0, #111	; 0x6f
 8017638:	2101      	movs	r1, #1
 801763a:	f7f8 fb15 	bl	800fc68 <RCC_AHB1PeriphClockCmd>
           -----------------------------------------------------

*/

 /* GPIOA configuration */
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_LTDC);
 801763e:	4854      	ldr	r0, [pc, #336]	; (8017790 <LCD_AF_GPIOConfig+0x160>)
 8017640:	2103      	movs	r1, #3
 8017642:	220e      	movs	r2, #14
 8017644:	f7f5 fdd6 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource4, GPIO_AF_LTDC);
 8017648:	4851      	ldr	r0, [pc, #324]	; (8017790 <LCD_AF_GPIOConfig+0x160>)
 801764a:	2104      	movs	r1, #4
 801764c:	220e      	movs	r2, #14
 801764e:	f7f5 fdd1 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_LTDC);
 8017652:	484f      	ldr	r0, [pc, #316]	; (8017790 <LCD_AF_GPIOConfig+0x160>)
 8017654:	2106      	movs	r1, #6
 8017656:	220e      	movs	r2, #14
 8017658:	f7f5 fdcc 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_LTDC);
 801765c:	484c      	ldr	r0, [pc, #304]	; (8017790 <LCD_AF_GPIOConfig+0x160>)
 801765e:	210b      	movs	r1, #11
 8017660:	220e      	movs	r2, #14
 8017662:	f7f5 fdc7 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource12, GPIO_AF_LTDC);
 8017666:	484a      	ldr	r0, [pc, #296]	; (8017790 <LCD_AF_GPIOConfig+0x160>)
 8017668:	210c      	movs	r1, #12
 801766a:	220e      	movs	r2, #14
 801766c:	f7f5 fdc2 	bl	800d1f4 <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_6 | \
 8017670:	f641 0358 	movw	r3, #6232	; 0x1858
 8017674:	603b      	str	r3, [r7, #0]
                             GPIO_Pin_11 | GPIO_Pin_12;
                             
  GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8017676:	2302      	movs	r3, #2
 8017678:	717b      	strb	r3, [r7, #5]
  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 801767a:	2302      	movs	r3, #2
 801767c:	713b      	strb	r3, [r7, #4]
  GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 801767e:	2300      	movs	r3, #0
 8017680:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8017682:	2300      	movs	r3, #0
 8017684:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017686:	463b      	mov	r3, r7
 8017688:	4841      	ldr	r0, [pc, #260]	; (8017790 <LCD_AF_GPIOConfig+0x160>)
 801768a:	4619      	mov	r1, r3
 801768c:	f7f5 fc44 	bl	800cf18 <GPIO_Init>
  
 /* GPIOB configuration */  
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource0, 0x09);
 8017690:	4840      	ldr	r0, [pc, #256]	; (8017794 <LCD_AF_GPIOConfig+0x164>)
 8017692:	2100      	movs	r1, #0
 8017694:	2209      	movs	r2, #9
 8017696:	f7f5 fdad 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, 0x09);
 801769a:	483e      	ldr	r0, [pc, #248]	; (8017794 <LCD_AF_GPIOConfig+0x164>)
 801769c:	2101      	movs	r1, #1
 801769e:	2209      	movs	r2, #9
 80176a0:	f7f5 fda8 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_LTDC);
 80176a4:	483b      	ldr	r0, [pc, #236]	; (8017794 <LCD_AF_GPIOConfig+0x164>)
 80176a6:	2108      	movs	r1, #8
 80176a8:	220e      	movs	r2, #14
 80176aa:	f7f5 fda3 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_LTDC);
 80176ae:	4839      	ldr	r0, [pc, #228]	; (8017794 <LCD_AF_GPIOConfig+0x164>)
 80176b0:	2109      	movs	r1, #9
 80176b2:	220e      	movs	r2, #14
 80176b4:	f7f5 fd9e 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_LTDC);
 80176b8:	4836      	ldr	r0, [pc, #216]	; (8017794 <LCD_AF_GPIOConfig+0x164>)
 80176ba:	210a      	movs	r1, #10
 80176bc:	220e      	movs	r2, #14
 80176be:	f7f5 fd99 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_LTDC);
 80176c2:	4834      	ldr	r0, [pc, #208]	; (8017794 <LCD_AF_GPIOConfig+0x164>)
 80176c4:	210b      	movs	r1, #11
 80176c6:	220e      	movs	r2, #14
 80176c8:	f7f5 fd94 	bl	800d1f4 <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | \
 80176cc:	f640 7303 	movw	r3, #3843	; 0xf03
 80176d0:	603b      	str	r3, [r7, #0]
                             GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
  
  GPIO_Init(GPIOB, &GPIO_InitStruct);
 80176d2:	463b      	mov	r3, r7
 80176d4:	482f      	ldr	r0, [pc, #188]	; (8017794 <LCD_AF_GPIOConfig+0x164>)
 80176d6:	4619      	mov	r1, r3
 80176d8:	f7f5 fc1e 	bl	800cf18 <GPIO_Init>

 /* GPIOC configuration */
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_LTDC);
 80176dc:	482e      	ldr	r0, [pc, #184]	; (8017798 <LCD_AF_GPIOConfig+0x168>)
 80176de:	2106      	movs	r1, #6
 80176e0:	220e      	movs	r2, #14
 80176e2:	f7f5 fd87 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_LTDC);
 80176e6:	482c      	ldr	r0, [pc, #176]	; (8017798 <LCD_AF_GPIOConfig+0x168>)
 80176e8:	2107      	movs	r1, #7
 80176ea:	220e      	movs	r2, #14
 80176ec:	f7f5 fd82 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_LTDC);
 80176f0:	4829      	ldr	r0, [pc, #164]	; (8017798 <LCD_AF_GPIOConfig+0x168>)
 80176f2:	210a      	movs	r1, #10
 80176f4:	220e      	movs	r2, #14
 80176f6:	f7f5 fd7d 	bl	800d1f4 <GPIO_PinAFConfig>
  
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_10;
 80176fa:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80176fe:	603b      	str	r3, [r7, #0]
                             
  GPIO_Init(GPIOC, &GPIO_InitStruct);
 8017700:	463b      	mov	r3, r7
 8017702:	4825      	ldr	r0, [pc, #148]	; (8017798 <LCD_AF_GPIOConfig+0x168>)
 8017704:	4619      	mov	r1, r3
 8017706:	f7f5 fc07 	bl	800cf18 <GPIO_Init>

 /* GPIOD configuration */
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource3, GPIO_AF_LTDC);
 801770a:	4824      	ldr	r0, [pc, #144]	; (801779c <LCD_AF_GPIOConfig+0x16c>)
 801770c:	2103      	movs	r1, #3
 801770e:	220e      	movs	r2, #14
 8017710:	f7f5 fd70 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource6, GPIO_AF_LTDC);
 8017714:	4821      	ldr	r0, [pc, #132]	; (801779c <LCD_AF_GPIOConfig+0x16c>)
 8017716:	2106      	movs	r1, #6
 8017718:	220e      	movs	r2, #14
 801771a:	f7f5 fd6b 	bl	800d1f4 <GPIO_PinAFConfig>
  
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_6;
 801771e:	2348      	movs	r3, #72	; 0x48
 8017720:	603b      	str	r3, [r7, #0]
                             
  GPIO_Init(GPIOD, &GPIO_InitStruct);
 8017722:	463b      	mov	r3, r7
 8017724:	481d      	ldr	r0, [pc, #116]	; (801779c <LCD_AF_GPIOConfig+0x16c>)
 8017726:	4619      	mov	r1, r3
 8017728:	f7f5 fbf6 	bl	800cf18 <GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource10, GPIO_AF_LTDC);
 801772c:	481c      	ldr	r0, [pc, #112]	; (80177a0 <LCD_AF_GPIOConfig+0x170>)
 801772e:	210a      	movs	r1, #10
 8017730:	220e      	movs	r2, #14
 8017732:	f7f5 fd5f 	bl	800d1f4 <GPIO_PinAFConfig>
  
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_10;
 8017736:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801773a:	603b      	str	r3, [r7, #0]
                             
  GPIO_Init(GPIOF, &GPIO_InitStruct);     
 801773c:	463b      	mov	r3, r7
 801773e:	4818      	ldr	r0, [pc, #96]	; (80177a0 <LCD_AF_GPIOConfig+0x170>)
 8017740:	4619      	mov	r1, r3
 8017742:	f7f5 fbe9 	bl	800cf18 <GPIO_Init>

 /* GPIOG configuration */  
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource6, GPIO_AF_LTDC);
 8017746:	4817      	ldr	r0, [pc, #92]	; (80177a4 <LCD_AF_GPIOConfig+0x174>)
 8017748:	2106      	movs	r1, #6
 801774a:	220e      	movs	r2, #14
 801774c:	f7f5 fd52 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource7, GPIO_AF_LTDC);
 8017750:	4814      	ldr	r0, [pc, #80]	; (80177a4 <LCD_AF_GPIOConfig+0x174>)
 8017752:	2107      	movs	r1, #7
 8017754:	220e      	movs	r2, #14
 8017756:	f7f5 fd4d 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource10, 0x09);
 801775a:	4812      	ldr	r0, [pc, #72]	; (80177a4 <LCD_AF_GPIOConfig+0x174>)
 801775c:	210a      	movs	r1, #10
 801775e:	2209      	movs	r2, #9
 8017760:	f7f5 fd48 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource11, GPIO_AF_LTDC);
 8017764:	480f      	ldr	r0, [pc, #60]	; (80177a4 <LCD_AF_GPIOConfig+0x174>)
 8017766:	210b      	movs	r1, #11
 8017768:	220e      	movs	r2, #14
 801776a:	f7f5 fd43 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource12, 0x09);
 801776e:	480d      	ldr	r0, [pc, #52]	; (80177a4 <LCD_AF_GPIOConfig+0x174>)
 8017770:	210c      	movs	r1, #12
 8017772:	2209      	movs	r2, #9
 8017774:	f7f5 fd3e 	bl	800d1f4 <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_10 | \
 8017778:	f44f 53e6 	mov.w	r3, #7360	; 0x1cc0
 801777c:	603b      	str	r3, [r7, #0]
                             GPIO_Pin_11 | GPIO_Pin_12;
  
  GPIO_Init(GPIOG, &GPIO_InitStruct);
 801777e:	463b      	mov	r3, r7
 8017780:	4808      	ldr	r0, [pc, #32]	; (80177a4 <LCD_AF_GPIOConfig+0x174>)
 8017782:	4619      	mov	r1, r3
 8017784:	f7f5 fbc8 	bl	800cf18 <GPIO_Init>
 
}
 8017788:	3708      	adds	r7, #8
 801778a:	46bd      	mov	sp, r7
 801778c:	bd80      	pop	{r7, pc}
 801778e:	bf00      	nop
 8017790:	40020000 	.word	0x40020000
 8017794:	40020400 	.word	0x40020400
 8017798:	40020800 	.word	0x40020800
 801779c:	40020c00 	.word	0x40020c00
 80177a0:	40021400 	.word	0x40021400
 80177a4:	40021800 	.word	0x40021800

080177a8 <PutPixel>:
  * @param  x: pixel x.
  * @param  y: pixel y.  
  * @retval None
  */
static void PutPixel(int16_t x, int16_t y)
{ 
 80177a8:	b580      	push	{r7, lr}
 80177aa:	b082      	sub	sp, #8
 80177ac:	af00      	add	r7, sp, #0
 80177ae:	4602      	mov	r2, r0
 80177b0:	460b      	mov	r3, r1
 80177b2:	80fa      	strh	r2, [r7, #6]
 80177b4:	80bb      	strh	r3, [r7, #4]
  if(x < 0 || x > 239 || y < 0 || y > 319)
 80177b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	db0c      	blt.n	80177d8 <PutPixel+0x30>
 80177be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80177c2:	2bef      	cmp	r3, #239	; 0xef
 80177c4:	dc08      	bgt.n	80177d8 <PutPixel+0x30>
 80177c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80177ca:	2b00      	cmp	r3, #0
 80177cc:	db04      	blt.n	80177d8 <PutPixel+0x30>
 80177ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80177d2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80177d6:	db00      	blt.n	80177da <PutPixel+0x32>
  {
    return;  
 80177d8:	e007      	b.n	80177ea <PutPixel+0x42>
  }
  LCD_DrawLine(x, y, 1, LCD_DIR_HORIZONTAL);
 80177da:	88fa      	ldrh	r2, [r7, #6]
 80177dc:	88bb      	ldrh	r3, [r7, #4]
 80177de:	4610      	mov	r0, r2
 80177e0:	4619      	mov	r1, r3
 80177e2:	2201      	movs	r2, #1
 80177e4:	2300      	movs	r3, #0
 80177e6:	f7fe fb55 	bl	8015e94 <LCD_DrawLine>
}
 80177ea:	3708      	adds	r7, #8
 80177ec:	46bd      	mov	sp, r7
 80177ee:	bd80      	pop	{r7, pc}

080177f0 <delay>:
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
 80177f0:	b480      	push	{r7}
 80177f2:	b085      	sub	sp, #20
 80177f4:	af00      	add	r7, sp, #0
 80177f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 80177f8:	2300      	movs	r3, #0
 80177fa:	60fb      	str	r3, [r7, #12]
  for(index = nCount; index != 0; index--)
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	60fb      	str	r3, [r7, #12]
 8017800:	e002      	b.n	8017808 <delay+0x18>
 8017802:	68fb      	ldr	r3, [r7, #12]
 8017804:	3b01      	subs	r3, #1
 8017806:	60fb      	str	r3, [r7, #12]
 8017808:	68fb      	ldr	r3, [r7, #12]
 801780a:	2b00      	cmp	r3, #0
 801780c:	d1f9      	bne.n	8017802 <delay+0x12>
  {
  }
}
 801780e:	3714      	adds	r7, #20
 8017810:	46bd      	mov	sp, r7
 8017812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017816:	4770      	bx	lr

08017818 <SDRAM_Init>:
  *         on the SDRAM.
  * @param  None
  * @retval None
  */
void SDRAM_Init(void)
{
 8017818:	b580      	push	{r7, lr}
 801781a:	b092      	sub	sp, #72	; 0x48
 801781c:	af00      	add	r7, sp, #0
  FMC_SDRAMInitTypeDef  FMC_SDRAMInitStructure;
  FMC_SDRAMTimingInitTypeDef  FMC_SDRAMTimingInitStructure; 
  
  /* GPIO configuration for FMC SDRAM bank */
  SDRAM_GPIOConfig();
 801781e:	f000 f835 	bl	801788c <SDRAM_GPIOConfig>
  
  /* Enable FMC clock */
  RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FMC, ENABLE);
 8017822:	2001      	movs	r0, #1
 8017824:	2101      	movs	r1, #1
 8017826:	f7f8 fa5b 	bl	800fce0 <RCC_AHB3PeriphClockCmd>
 
/* FMC Configuration ---------------------------------------------------------*/
/* FMC SDRAM Bank configuration */   
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  FMC_SDRAMTimingInitStructure.FMC_LoadToActiveDelay    = 2;      
 801782a:	2302      	movs	r3, #2
 801782c:	603b      	str	r3, [r7, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  FMC_SDRAMTimingInitStructure.FMC_ExitSelfRefreshDelay = 7;
 801782e:	2307      	movs	r3, #7
 8017830:	607b      	str	r3, [r7, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  FMC_SDRAMTimingInitStructure.FMC_SelfRefreshTime      = 4;
 8017832:	2304      	movs	r3, #4
 8017834:	60bb      	str	r3, [r7, #8]
  /* TRC:  min=70 (7x11.11ns) */        
  FMC_SDRAMTimingInitStructure.FMC_RowCycleDelay        = 7;         
 8017836:	2307      	movs	r3, #7
 8017838:	60fb      	str	r3, [r7, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  FMC_SDRAMTimingInitStructure.FMC_WriteRecoveryTime    = 2;      
 801783a:	2302      	movs	r3, #2
 801783c:	613b      	str	r3, [r7, #16]
  /* TRP:  20ns => 2x11.11ns */
  FMC_SDRAMTimingInitStructure.FMC_RPDelay              = 2;                
 801783e:	2302      	movs	r3, #2
 8017840:	617b      	str	r3, [r7, #20]
  /* TRCD: 20ns => 2x11.11ns */
  FMC_SDRAMTimingInitStructure.FMC_RCDDelay             = 2;
 8017842:	2302      	movs	r3, #2
 8017844:	61bb      	str	r3, [r7, #24]

/* FMC SDRAM control configuration */
  FMC_SDRAMInitStructure.FMC_Bank = FMC_Bank2_SDRAM;
 8017846:	2301      	movs	r3, #1
 8017848:	61fb      	str	r3, [r7, #28]
  /* Row addressing: [7:0] */
  FMC_SDRAMInitStructure.FMC_ColumnBitsNumber = FMC_ColumnBits_Number_8b;
 801784a:	2300      	movs	r3, #0
 801784c:	623b      	str	r3, [r7, #32]
  /* Column addressing: [11:0] */
  FMC_SDRAMInitStructure.FMC_RowBitsNumber = FMC_RowBits_Number_12b;
 801784e:	2304      	movs	r3, #4
 8017850:	627b      	str	r3, [r7, #36]	; 0x24
  FMC_SDRAMInitStructure.FMC_SDMemoryDataWidth = SDRAM_MEMORY_WIDTH;
 8017852:	2310      	movs	r3, #16
 8017854:	62bb      	str	r3, [r7, #40]	; 0x28
  FMC_SDRAMInitStructure.FMC_InternalBankNumber = FMC_InternalBank_Number_4;
 8017856:	2340      	movs	r3, #64	; 0x40
 8017858:	62fb      	str	r3, [r7, #44]	; 0x2c
  FMC_SDRAMInitStructure.FMC_CASLatency = SDRAM_CAS_LATENCY; 
 801785a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 801785e:	633b      	str	r3, [r7, #48]	; 0x30
  FMC_SDRAMInitStructure.FMC_WriteProtection = FMC_Write_Protection_Disable;
 8017860:	2300      	movs	r3, #0
 8017862:	637b      	str	r3, [r7, #52]	; 0x34
  FMC_SDRAMInitStructure.FMC_SDClockPeriod = SDCLOCK_PERIOD;  
 8017864:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017868:	63bb      	str	r3, [r7, #56]	; 0x38
  FMC_SDRAMInitStructure.FMC_ReadBurst = SDRAM_READBURST;
 801786a:	2300      	movs	r3, #0
 801786c:	63fb      	str	r3, [r7, #60]	; 0x3c
  FMC_SDRAMInitStructure.FMC_ReadPipeDelay = FMC_ReadPipe_Delay_1;
 801786e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8017872:	643b      	str	r3, [r7, #64]	; 0x40
  FMC_SDRAMInitStructure.FMC_SDRAMTimingStruct = &FMC_SDRAMTimingInitStructure;
 8017874:	463b      	mov	r3, r7
 8017876:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* FMC SDRAM bank initialization */
  FMC_SDRAMInit(&FMC_SDRAMInitStructure); 
 8017878:	f107 031c 	add.w	r3, r7, #28
 801787c:	4618      	mov	r0, r3
 801787e:	f7f4 ffa5 	bl	800c7cc <FMC_SDRAMInit>
  
  /* FMC SDRAM device initialization sequence */
  SDRAM_InitSequence(); 
 8017882:	f000 f90d 	bl	8017aa0 <SDRAM_InitSequence>
  
}
 8017886:	3748      	adds	r7, #72	; 0x48
 8017888:	46bd      	mov	sp, r7
 801788a:	bd80      	pop	{r7, pc}

0801788c <SDRAM_GPIOConfig>:
  * @brief  Configures all SDRAM memory I/Os pins. 
  * @param  None. 
  * @retval None.
  */
void SDRAM_GPIOConfig(void)
{
 801788c:	b580      	push	{r7, lr}
 801788e:	b082      	sub	sp, #8
 8017890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable GPIOs clock */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD |
 8017892:	207e      	movs	r0, #126	; 0x7e
 8017894:	2101      	movs	r1, #1
 8017896:	f7f8 f9e7 	bl	800fc68 <RCC_AHB1PeriphClockCmd>
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 801789a:	2302      	movs	r3, #2
 801789c:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 801789e:	2302      	movs	r3, #2
 80178a0:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80178a2:	2300      	movs	r3, #0
 80178a4:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80178a6:	2300      	movs	r3, #0
 80178a8:	71fb      	strb	r3, [r7, #7]

  /* GPIOB configuration */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource5 , GPIO_AF_FMC);
 80178aa:	4877      	ldr	r0, [pc, #476]	; (8017a88 <SDRAM_GPIOConfig+0x1fc>)
 80178ac:	2105      	movs	r1, #5
 80178ae:	220c      	movs	r2, #12
 80178b0:	f7f5 fca0 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6 , GPIO_AF_FMC);
 80178b4:	4874      	ldr	r0, [pc, #464]	; (8017a88 <SDRAM_GPIOConfig+0x1fc>)
 80178b6:	2106      	movs	r1, #6
 80178b8:	220c      	movs	r2, #12
 80178ba:	f7f5 fc9b 	bl	800d1f4 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5  | GPIO_Pin_6;      
 80178be:	2360      	movs	r3, #96	; 0x60
 80178c0:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80178c2:	463b      	mov	r3, r7
 80178c4:	4870      	ldr	r0, [pc, #448]	; (8017a88 <SDRAM_GPIOConfig+0x1fc>)
 80178c6:	4619      	mov	r1, r3
 80178c8:	f7f5 fb26 	bl	800cf18 <GPIO_Init>

  /* GPIOC configuration */
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource0 , GPIO_AF_FMC);
 80178cc:	486f      	ldr	r0, [pc, #444]	; (8017a8c <SDRAM_GPIOConfig+0x200>)
 80178ce:	2100      	movs	r1, #0
 80178d0:	220c      	movs	r2, #12
 80178d2:	f7f5 fc8f 	bl	800d1f4 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;      
 80178d6:	2301      	movs	r3, #1
 80178d8:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80178da:	463b      	mov	r3, r7
 80178dc:	486b      	ldr	r0, [pc, #428]	; (8017a8c <SDRAM_GPIOConfig+0x200>)
 80178de:	4619      	mov	r1, r3
 80178e0:	f7f5 fb1a 	bl	800cf18 <GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_FMC);
 80178e4:	486a      	ldr	r0, [pc, #424]	; (8017a90 <SDRAM_GPIOConfig+0x204>)
 80178e6:	2100      	movs	r1, #0
 80178e8:	220c      	movs	r2, #12
 80178ea:	f7f5 fc83 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_FMC);
 80178ee:	4868      	ldr	r0, [pc, #416]	; (8017a90 <SDRAM_GPIOConfig+0x204>)
 80178f0:	2101      	movs	r1, #1
 80178f2:	220c      	movs	r2, #12
 80178f4:	f7f5 fc7e 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_FMC);
 80178f8:	4865      	ldr	r0, [pc, #404]	; (8017a90 <SDRAM_GPIOConfig+0x204>)
 80178fa:	2108      	movs	r1, #8
 80178fc:	220c      	movs	r2, #12
 80178fe:	f7f5 fc79 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_FMC);
 8017902:	4863      	ldr	r0, [pc, #396]	; (8017a90 <SDRAM_GPIOConfig+0x204>)
 8017904:	2109      	movs	r1, #9
 8017906:	220c      	movs	r2, #12
 8017908:	f7f5 fc74 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_FMC);
 801790c:	4860      	ldr	r0, [pc, #384]	; (8017a90 <SDRAM_GPIOConfig+0x204>)
 801790e:	210a      	movs	r1, #10
 8017910:	220c      	movs	r2, #12
 8017912:	f7f5 fc6f 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_FMC);
 8017916:	485e      	ldr	r0, [pc, #376]	; (8017a90 <SDRAM_GPIOConfig+0x204>)
 8017918:	210e      	movs	r1, #14
 801791a:	220c      	movs	r2, #12
 801791c:	f7f5 fc6a 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_FMC);
 8017920:	485b      	ldr	r0, [pc, #364]	; (8017a90 <SDRAM_GPIOConfig+0x204>)
 8017922:	210f      	movs	r1, #15
 8017924:	220c      	movs	r2, #12
 8017926:	f7f5 fc65 	bl	800d1f4 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1  | GPIO_Pin_8 |
 801792a:	f24c 7303 	movw	r3, #50947	; 0xc703
 801792e:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_14 |
                                GPIO_Pin_15;

  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8017930:	463b      	mov	r3, r7
 8017932:	4857      	ldr	r0, [pc, #348]	; (8017a90 <SDRAM_GPIOConfig+0x204>)
 8017934:	4619      	mov	r1, r3
 8017936:	f7f5 faef 	bl	800cf18 <GPIO_Init>

  /* GPIOE configuration */
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource0 , GPIO_AF_FMC);
 801793a:	4856      	ldr	r0, [pc, #344]	; (8017a94 <SDRAM_GPIOConfig+0x208>)
 801793c:	2100      	movs	r1, #0
 801793e:	220c      	movs	r2, #12
 8017940:	f7f5 fc58 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource1 , GPIO_AF_FMC);
 8017944:	4853      	ldr	r0, [pc, #332]	; (8017a94 <SDRAM_GPIOConfig+0x208>)
 8017946:	2101      	movs	r1, #1
 8017948:	220c      	movs	r2, #12
 801794a:	f7f5 fc53 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource7 , GPIO_AF_FMC);
 801794e:	4851      	ldr	r0, [pc, #324]	; (8017a94 <SDRAM_GPIOConfig+0x208>)
 8017950:	2107      	movs	r1, #7
 8017952:	220c      	movs	r2, #12
 8017954:	f7f5 fc4e 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource8 , GPIO_AF_FMC);
 8017958:	484e      	ldr	r0, [pc, #312]	; (8017a94 <SDRAM_GPIOConfig+0x208>)
 801795a:	2108      	movs	r1, #8
 801795c:	220c      	movs	r2, #12
 801795e:	f7f5 fc49 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource9 , GPIO_AF_FMC);
 8017962:	484c      	ldr	r0, [pc, #304]	; (8017a94 <SDRAM_GPIOConfig+0x208>)
 8017964:	2109      	movs	r1, #9
 8017966:	220c      	movs	r2, #12
 8017968:	f7f5 fc44 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource10 , GPIO_AF_FMC);
 801796c:	4849      	ldr	r0, [pc, #292]	; (8017a94 <SDRAM_GPIOConfig+0x208>)
 801796e:	210a      	movs	r1, #10
 8017970:	220c      	movs	r2, #12
 8017972:	f7f5 fc3f 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource11 , GPIO_AF_FMC);
 8017976:	4847      	ldr	r0, [pc, #284]	; (8017a94 <SDRAM_GPIOConfig+0x208>)
 8017978:	210b      	movs	r1, #11
 801797a:	220c      	movs	r2, #12
 801797c:	f7f5 fc3a 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource12 , GPIO_AF_FMC);
 8017980:	4844      	ldr	r0, [pc, #272]	; (8017a94 <SDRAM_GPIOConfig+0x208>)
 8017982:	210c      	movs	r1, #12
 8017984:	220c      	movs	r2, #12
 8017986:	f7f5 fc35 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource13 , GPIO_AF_FMC);
 801798a:	4842      	ldr	r0, [pc, #264]	; (8017a94 <SDRAM_GPIOConfig+0x208>)
 801798c:	210d      	movs	r1, #13
 801798e:	220c      	movs	r2, #12
 8017990:	f7f5 fc30 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource14 , GPIO_AF_FMC);
 8017994:	483f      	ldr	r0, [pc, #252]	; (8017a94 <SDRAM_GPIOConfig+0x208>)
 8017996:	210e      	movs	r1, #14
 8017998:	220c      	movs	r2, #12
 801799a:	f7f5 fc2b 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource15 , GPIO_AF_FMC);
 801799e:	483d      	ldr	r0, [pc, #244]	; (8017a94 <SDRAM_GPIOConfig+0x208>)
 80179a0:	210f      	movs	r1, #15
 80179a2:	220c      	movs	r2, #12
 80179a4:	f7f5 fc26 	bl	800d1f4 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  | GPIO_Pin_1  | GPIO_Pin_7 |
 80179a8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80179ac:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_8  | GPIO_Pin_9  | GPIO_Pin_10 |
                                GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 |
                                GPIO_Pin_14 | GPIO_Pin_15;

  GPIO_Init(GPIOE, &GPIO_InitStructure);
 80179ae:	463b      	mov	r3, r7
 80179b0:	4838      	ldr	r0, [pc, #224]	; (8017a94 <SDRAM_GPIOConfig+0x208>)
 80179b2:	4619      	mov	r1, r3
 80179b4:	f7f5 fab0 	bl	800cf18 <GPIO_Init>

  /* GPIOF configuration */
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource0 , GPIO_AF_FMC);
 80179b8:	4837      	ldr	r0, [pc, #220]	; (8017a98 <SDRAM_GPIOConfig+0x20c>)
 80179ba:	2100      	movs	r1, #0
 80179bc:	220c      	movs	r2, #12
 80179be:	f7f5 fc19 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource1 , GPIO_AF_FMC);
 80179c2:	4835      	ldr	r0, [pc, #212]	; (8017a98 <SDRAM_GPIOConfig+0x20c>)
 80179c4:	2101      	movs	r1, #1
 80179c6:	220c      	movs	r2, #12
 80179c8:	f7f5 fc14 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource2 , GPIO_AF_FMC);
 80179cc:	4832      	ldr	r0, [pc, #200]	; (8017a98 <SDRAM_GPIOConfig+0x20c>)
 80179ce:	2102      	movs	r1, #2
 80179d0:	220c      	movs	r2, #12
 80179d2:	f7f5 fc0f 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource3 , GPIO_AF_FMC);
 80179d6:	4830      	ldr	r0, [pc, #192]	; (8017a98 <SDRAM_GPIOConfig+0x20c>)
 80179d8:	2103      	movs	r1, #3
 80179da:	220c      	movs	r2, #12
 80179dc:	f7f5 fc0a 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource4 , GPIO_AF_FMC);
 80179e0:	482d      	ldr	r0, [pc, #180]	; (8017a98 <SDRAM_GPIOConfig+0x20c>)
 80179e2:	2104      	movs	r1, #4
 80179e4:	220c      	movs	r2, #12
 80179e6:	f7f5 fc05 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource5 , GPIO_AF_FMC);
 80179ea:	482b      	ldr	r0, [pc, #172]	; (8017a98 <SDRAM_GPIOConfig+0x20c>)
 80179ec:	2105      	movs	r1, #5
 80179ee:	220c      	movs	r2, #12
 80179f0:	f7f5 fc00 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource11 , GPIO_AF_FMC);
 80179f4:	4828      	ldr	r0, [pc, #160]	; (8017a98 <SDRAM_GPIOConfig+0x20c>)
 80179f6:	210b      	movs	r1, #11
 80179f8:	220c      	movs	r2, #12
 80179fa:	f7f5 fbfb 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource12 , GPIO_AF_FMC);
 80179fe:	4826      	ldr	r0, [pc, #152]	; (8017a98 <SDRAM_GPIOConfig+0x20c>)
 8017a00:	210c      	movs	r1, #12
 8017a02:	220c      	movs	r2, #12
 8017a04:	f7f5 fbf6 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource13 , GPIO_AF_FMC);
 8017a08:	4823      	ldr	r0, [pc, #140]	; (8017a98 <SDRAM_GPIOConfig+0x20c>)
 8017a0a:	210d      	movs	r1, #13
 8017a0c:	220c      	movs	r2, #12
 8017a0e:	f7f5 fbf1 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource14 , GPIO_AF_FMC);
 8017a12:	4821      	ldr	r0, [pc, #132]	; (8017a98 <SDRAM_GPIOConfig+0x20c>)
 8017a14:	210e      	movs	r1, #14
 8017a16:	220c      	movs	r2, #12
 8017a18:	f7f5 fbec 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource15 , GPIO_AF_FMC);
 8017a1c:	481e      	ldr	r0, [pc, #120]	; (8017a98 <SDRAM_GPIOConfig+0x20c>)
 8017a1e:	210f      	movs	r1, #15
 8017a20:	220c      	movs	r2, #12
 8017a22:	f7f5 fbe7 	bl	800d1f4 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  | GPIO_Pin_1 | GPIO_Pin_2 | 
 8017a26:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8017a2a:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_3  | GPIO_Pin_4 | GPIO_Pin_5 |
                                GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 |
                                GPIO_Pin_14 | GPIO_Pin_15;      

  GPIO_Init(GPIOF, &GPIO_InitStructure);
 8017a2c:	463b      	mov	r3, r7
 8017a2e:	481a      	ldr	r0, [pc, #104]	; (8017a98 <SDRAM_GPIOConfig+0x20c>)
 8017a30:	4619      	mov	r1, r3
 8017a32:	f7f5 fa71 	bl	800cf18 <GPIO_Init>

  /* GPIOG configuration */
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource0 , GPIO_AF_FMC);
 8017a36:	4819      	ldr	r0, [pc, #100]	; (8017a9c <SDRAM_GPIOConfig+0x210>)
 8017a38:	2100      	movs	r1, #0
 8017a3a:	220c      	movs	r2, #12
 8017a3c:	f7f5 fbda 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource1 , GPIO_AF_FMC);
 8017a40:	4816      	ldr	r0, [pc, #88]	; (8017a9c <SDRAM_GPIOConfig+0x210>)
 8017a42:	2101      	movs	r1, #1
 8017a44:	220c      	movs	r2, #12
 8017a46:	f7f5 fbd5 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource4 , GPIO_AF_FMC);
 8017a4a:	4814      	ldr	r0, [pc, #80]	; (8017a9c <SDRAM_GPIOConfig+0x210>)
 8017a4c:	2104      	movs	r1, #4
 8017a4e:	220c      	movs	r2, #12
 8017a50:	f7f5 fbd0 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource5 , GPIO_AF_FMC);
 8017a54:	4811      	ldr	r0, [pc, #68]	; (8017a9c <SDRAM_GPIOConfig+0x210>)
 8017a56:	2105      	movs	r1, #5
 8017a58:	220c      	movs	r2, #12
 8017a5a:	f7f5 fbcb 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource8 , GPIO_AF_FMC);
 8017a5e:	480f      	ldr	r0, [pc, #60]	; (8017a9c <SDRAM_GPIOConfig+0x210>)
 8017a60:	2108      	movs	r1, #8
 8017a62:	220c      	movs	r2, #12
 8017a64:	f7f5 fbc6 	bl	800d1f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource15 , GPIO_AF_FMC);
 8017a68:	480c      	ldr	r0, [pc, #48]	; (8017a9c <SDRAM_GPIOConfig+0x210>)
 8017a6a:	210f      	movs	r1, #15
 8017a6c:	220c      	movs	r2, #12
 8017a6e:	f7f5 fbc1 	bl	800d1f4 <GPIO_PinAFConfig>
  

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_4 |
 8017a72:	f248 1333 	movw	r3, #33075	; 0x8133
 8017a76:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_5 | GPIO_Pin_8 | GPIO_Pin_15;

  GPIO_Init(GPIOG, &GPIO_InitStructure);    
 8017a78:	463b      	mov	r3, r7
 8017a7a:	4808      	ldr	r0, [pc, #32]	; (8017a9c <SDRAM_GPIOConfig+0x210>)
 8017a7c:	4619      	mov	r1, r3
 8017a7e:	f7f5 fa4b 	bl	800cf18 <GPIO_Init>
}
 8017a82:	3708      	adds	r7, #8
 8017a84:	46bd      	mov	sp, r7
 8017a86:	bd80      	pop	{r7, pc}
 8017a88:	40020400 	.word	0x40020400
 8017a8c:	40020800 	.word	0x40020800
 8017a90:	40020c00 	.word	0x40020c00
 8017a94:	40021000 	.word	0x40021000
 8017a98:	40021400 	.word	0x40021400
 8017a9c:	40021800 	.word	0x40021800

08017aa0 <SDRAM_InitSequence>:
  * @brief  Executes the SDRAM memory initialization sequence. 
  * @param  None. 
  * @retval None.
  */
void SDRAM_InitSequence(void)
{
 8017aa0:	b580      	push	{r7, lr}
 8017aa2:	b086      	sub	sp, #24
 8017aa4:	af00      	add	r7, sp, #0
  FMC_SDRAMCommandTypeDef FMC_SDRAMCommandStructure;
  uint32_t tmpr = 0;
 8017aa6:	2300      	movs	r3, #0
 8017aa8:	617b      	str	r3, [r7, #20]
  
/* Step 3 --------------------------------------------------------------------*/
  /* Configure a clock configuration enable command */
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_CLK_Enabled;
 8017aaa:	2301      	movs	r3, #1
 8017aac:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 8017aae:	2308      	movs	r3, #8
 8017ab0:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 1;
 8017ab2:	2301      	movs	r3, #1
 8017ab4:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 8017ab6:	2300      	movs	r3, #0
 8017ab8:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8017aba:	bf00      	nop
 8017abc:	2001      	movs	r0, #1
 8017abe:	2120      	movs	r1, #32
 8017ac0:	f7f5 f866 	bl	800cb90 <FMC_GetFlagStatus>
 8017ac4:	4603      	mov	r3, r0
 8017ac6:	2b00      	cmp	r3, #0
 8017ac8:	d1f8      	bne.n	8017abc <SDRAM_InitSequence+0x1c>
  {
  }
  /* Send the command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);  
 8017aca:	1d3b      	adds	r3, r7, #4
 8017acc:	4618      	mov	r0, r3
 8017ace:	f7f4 ff6f 	bl	800c9b0 <FMC_SDRAMCmdConfig>
  
/* Step 4 --------------------------------------------------------------------*/
  /* Insert 100 ms delay */
  __Delay(10);
 8017ad2:	200a      	movs	r0, #10
 8017ad4:	f000 f8aa 	bl	8017c2c <delay>
    
/* Step 5 --------------------------------------------------------------------*/
  /* Configure a PALL (precharge all) command */ 
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_PALL;
 8017ad8:	2302      	movs	r3, #2
 8017ada:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 8017adc:	2308      	movs	r3, #8
 8017ade:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 1;
 8017ae0:	2301      	movs	r3, #1
 8017ae2:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 8017ae4:	2300      	movs	r3, #0
 8017ae6:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8017ae8:	bf00      	nop
 8017aea:	2001      	movs	r0, #1
 8017aec:	2120      	movs	r1, #32
 8017aee:	f7f5 f84f 	bl	800cb90 <FMC_GetFlagStatus>
 8017af2:	4603      	mov	r3, r0
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	d1f8      	bne.n	8017aea <SDRAM_InitSequence+0x4a>
  {
  }
  /* Send the command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8017af8:	1d3b      	adds	r3, r7, #4
 8017afa:	4618      	mov	r0, r3
 8017afc:	f7f4 ff58 	bl	800c9b0 <FMC_SDRAMCmdConfig>
  
/* Step 6 --------------------------------------------------------------------*/
  /* Configure a Auto-Refresh command */ 
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_AutoRefresh;
 8017b00:	2303      	movs	r3, #3
 8017b02:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 8017b04:	2308      	movs	r3, #8
 8017b06:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 4;
 8017b08:	2304      	movs	r3, #4
 8017b0a:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 8017b0c:	2300      	movs	r3, #0
 8017b0e:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8017b10:	bf00      	nop
 8017b12:	2001      	movs	r0, #1
 8017b14:	2120      	movs	r1, #32
 8017b16:	f7f5 f83b 	bl	800cb90 <FMC_GetFlagStatus>
 8017b1a:	4603      	mov	r3, r0
 8017b1c:	2b00      	cmp	r3, #0
 8017b1e:	d1f8      	bne.n	8017b12 <SDRAM_InitSequence+0x72>
  {
  }
  /* Send the  first command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8017b20:	1d3b      	adds	r3, r7, #4
 8017b22:	4618      	mov	r0, r3
 8017b24:	f7f4 ff44 	bl	800c9b0 <FMC_SDRAMCmdConfig>
  
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8017b28:	bf00      	nop
 8017b2a:	2001      	movs	r0, #1
 8017b2c:	2120      	movs	r1, #32
 8017b2e:	f7f5 f82f 	bl	800cb90 <FMC_GetFlagStatus>
 8017b32:	4603      	mov	r3, r0
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	d1f8      	bne.n	8017b2a <SDRAM_InitSequence+0x8a>
  {
  }
  /* Send the second command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8017b38:	1d3b      	adds	r3, r7, #4
 8017b3a:	4618      	mov	r0, r3
 8017b3c:	f7f4 ff38 	bl	800c9b0 <FMC_SDRAMCmdConfig>
  
/* Step 7 --------------------------------------------------------------------*/
  /* Program the external memory mode register */
  tmpr = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_2          |
 8017b40:	f240 2331 	movw	r3, #561	; 0x231
 8017b44:	617b      	str	r3, [r7, #20]
                   SDRAM_MODEREG_CAS_LATENCY_3           |
                   SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                   SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  /* Configure a load Mode register command*/ 
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_LoadMode;
 8017b46:	2304      	movs	r3, #4
 8017b48:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 8017b4a:	2308      	movs	r3, #8
 8017b4c:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 1;
 8017b4e:	2301      	movs	r3, #1
 8017b50:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = tmpr;
 8017b52:	697b      	ldr	r3, [r7, #20]
 8017b54:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8017b56:	bf00      	nop
 8017b58:	2001      	movs	r0, #1
 8017b5a:	2120      	movs	r1, #32
 8017b5c:	f7f5 f818 	bl	800cb90 <FMC_GetFlagStatus>
 8017b60:	4603      	mov	r3, r0
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	d1f8      	bne.n	8017b58 <SDRAM_InitSequence+0xb8>
  {
  }
  /* Send the command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8017b66:	1d3b      	adds	r3, r7, #4
 8017b68:	4618      	mov	r0, r3
 8017b6a:	f7f4 ff21 	bl	800c9b0 <FMC_SDRAMCmdConfig>
/* Step 8 --------------------------------------------------------------------*/

  /* Set the refresh rate counter */
  /* (15.62 us x Freq) - 20 */
  /* Set the device refresh counter */
  FMC_SetRefreshCount(1386);
 8017b6e:	f240 506a 	movw	r0, #1386	; 0x56a
 8017b72:	f7f4 ff5b 	bl	800ca2c <FMC_SetRefreshCount>
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8017b76:	bf00      	nop
 8017b78:	2001      	movs	r0, #1
 8017b7a:	2120      	movs	r1, #32
 8017b7c:	f7f5 f808 	bl	800cb90 <FMC_GetFlagStatus>
 8017b80:	4603      	mov	r3, r0
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	d1f8      	bne.n	8017b78 <SDRAM_InitSequence+0xd8>
  {
  }
}
 8017b86:	3718      	adds	r7, #24
 8017b88:	46bd      	mov	sp, r7
 8017b8a:	bd80      	pop	{r7, pc}

08017b8c <SDRAM_WriteBuffer>:
  *         written.
  * @param  uwBufferSize: number of words to write. 
  * @retval None.
  */
void SDRAM_WriteBuffer(uint32_t* pBuffer, uint32_t uwWriteAddress, uint32_t uwBufferSize)
{
 8017b8c:	b580      	push	{r7, lr}
 8017b8e:	b086      	sub	sp, #24
 8017b90:	af00      	add	r7, sp, #0
 8017b92:	60f8      	str	r0, [r7, #12]
 8017b94:	60b9      	str	r1, [r7, #8]
 8017b96:	607a      	str	r2, [r7, #4]
  __IO uint32_t write_pointer = (uint32_t)uwWriteAddress;
 8017b98:	68bb      	ldr	r3, [r7, #8]
 8017b9a:	617b      	str	r3, [r7, #20]

  /* Disable write protection */
  FMC_SDRAMWriteProtectionConfig(FMC_Bank2_SDRAM, DISABLE);
 8017b9c:	2001      	movs	r0, #1
 8017b9e:	2100      	movs	r1, #0
 8017ba0:	f7f4 ff68 	bl	800ca74 <FMC_SDRAMWriteProtectionConfig>
  
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8017ba4:	bf00      	nop
 8017ba6:	2001      	movs	r0, #1
 8017ba8:	2120      	movs	r1, #32
 8017baa:	f7f4 fff1 	bl	800cb90 <FMC_GetFlagStatus>
 8017bae:	4603      	mov	r3, r0
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	d1f8      	bne.n	8017ba6 <SDRAM_WriteBuffer+0x1a>
  {
  }

  /* While there is data to write */
  for (; uwBufferSize != 0; uwBufferSize--) 
 8017bb4:	e00e      	b.n	8017bd4 <SDRAM_WriteBuffer+0x48>
  {
    /* Transfer data to the memory */
    *(uint32_t *) (SDRAM_BANK_ADDR + write_pointer) = *pBuffer++;
 8017bb6:	697b      	ldr	r3, [r7, #20]
 8017bb8:	f103 4350 	add.w	r3, r3, #3489660928	; 0xd0000000
 8017bbc:	461a      	mov	r2, r3
 8017bbe:	68fb      	ldr	r3, [r7, #12]
 8017bc0:	1d19      	adds	r1, r3, #4
 8017bc2:	60f9      	str	r1, [r7, #12]
 8017bc4:	681b      	ldr	r3, [r3, #0]
 8017bc6:	6013      	str	r3, [r2, #0]

    /* Increment the address*/
    write_pointer += 4;
 8017bc8:	697b      	ldr	r3, [r7, #20]
 8017bca:	3304      	adds	r3, #4
 8017bcc:	617b      	str	r3, [r7, #20]
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
  {
  }

  /* While there is data to write */
  for (; uwBufferSize != 0; uwBufferSize--) 
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	3b01      	subs	r3, #1
 8017bd2:	607b      	str	r3, [r7, #4]
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d1ed      	bne.n	8017bb6 <SDRAM_WriteBuffer+0x2a>

    /* Increment the address*/
    write_pointer += 4;
  }
    
}
 8017bda:	3718      	adds	r7, #24
 8017bdc:	46bd      	mov	sp, r7
 8017bde:	bd80      	pop	{r7, pc}

08017be0 <SDRAM_ReadBuffer>:
  *         read.
  * @param  uwBufferSize: number of words to write. 
  * @retval None.
  */
void SDRAM_ReadBuffer(uint32_t* pBuffer, uint32_t uwReadAddress, uint32_t uwBufferSize)
{
 8017be0:	b580      	push	{r7, lr}
 8017be2:	b086      	sub	sp, #24
 8017be4:	af00      	add	r7, sp, #0
 8017be6:	60f8      	str	r0, [r7, #12]
 8017be8:	60b9      	str	r1, [r7, #8]
 8017bea:	607a      	str	r2, [r7, #4]
  __IO uint32_t write_pointer = (uint32_t)uwReadAddress;
 8017bec:	68bb      	ldr	r3, [r7, #8]
 8017bee:	617b      	str	r3, [r7, #20]
  
   
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8017bf0:	bf00      	nop
 8017bf2:	2001      	movs	r0, #1
 8017bf4:	2120      	movs	r1, #32
 8017bf6:	f7f4 ffcb 	bl	800cb90 <FMC_GetFlagStatus>
 8017bfa:	4603      	mov	r3, r0
 8017bfc:	2b00      	cmp	r3, #0
 8017bfe:	d1f8      	bne.n	8017bf2 <SDRAM_ReadBuffer+0x12>
  {
  }
  
  /* Read data */
  for(; uwBufferSize != 0x00; uwBufferSize--)
 8017c00:	e00d      	b.n	8017c1e <SDRAM_ReadBuffer+0x3e>
  {
   *pBuffer++ = *(__IO uint32_t *)(SDRAM_BANK_ADDR + write_pointer );
 8017c02:	68fb      	ldr	r3, [r7, #12]
 8017c04:	1d1a      	adds	r2, r3, #4
 8017c06:	60fa      	str	r2, [r7, #12]
 8017c08:	697a      	ldr	r2, [r7, #20]
 8017c0a:	f102 4250 	add.w	r2, r2, #3489660928	; 0xd0000000
 8017c0e:	6812      	ldr	r2, [r2, #0]
 8017c10:	601a      	str	r2, [r3, #0]
    
   /* Increment the address*/
    write_pointer += 4;
 8017c12:	697b      	ldr	r3, [r7, #20]
 8017c14:	3304      	adds	r3, #4
 8017c16:	617b      	str	r3, [r7, #20]
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
  {
  }
  
  /* Read data */
  for(; uwBufferSize != 0x00; uwBufferSize--)
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	3b01      	subs	r3, #1
 8017c1c:	607b      	str	r3, [r7, #4]
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	d1ee      	bne.n	8017c02 <SDRAM_ReadBuffer+0x22>
   *pBuffer++ = *(__IO uint32_t *)(SDRAM_BANK_ADDR + write_pointer );
    
   /* Increment the address*/
    write_pointer += 4;
  } 
}
 8017c24:	3718      	adds	r7, #24
 8017c26:	46bd      	mov	sp, r7
 8017c28:	bd80      	pop	{r7, pc}
 8017c2a:	bf00      	nop

08017c2c <delay>:
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
 8017c2c:	b480      	push	{r7}
 8017c2e:	b085      	sub	sp, #20
 8017c30:	af00      	add	r7, sp, #0
 8017c32:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 8017c34:	2300      	movs	r3, #0
 8017c36:	60fb      	str	r3, [r7, #12]
  for(index = (100000 * nCount); index != 0; index--)
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	4a08      	ldr	r2, [pc, #32]	; (8017c5c <delay+0x30>)
 8017c3c:	fb02 f303 	mul.w	r3, r2, r3
 8017c40:	60fb      	str	r3, [r7, #12]
 8017c42:	e002      	b.n	8017c4a <delay+0x1e>
 8017c44:	68fb      	ldr	r3, [r7, #12]
 8017c46:	3b01      	subs	r3, #1
 8017c48:	60fb      	str	r3, [r7, #12]
 8017c4a:	68fb      	ldr	r3, [r7, #12]
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	d1f9      	bne.n	8017c44 <delay+0x18>
  {
  }
}
 8017c50:	3714      	adds	r7, #20
 8017c52:	46bd      	mov	sp, r7
 8017c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c58:	4770      	bx	lr
 8017c5a:	bf00      	nop
 8017c5c:	000186a0 	.word	0x000186a0

08017c60 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8017c60:	b580      	push	{r7, lr}
 8017c62:	af00      	add	r7, sp, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8017c64:	4b11      	ldr	r3, [pc, #68]	; (8017cac <SystemInit+0x4c>)
 8017c66:	4a11      	ldr	r2, [pc, #68]	; (8017cac <SystemInit+0x4c>)
 8017c68:	6812      	ldr	r2, [r2, #0]
 8017c6a:	f042 0201 	orr.w	r2, r2, #1
 8017c6e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8017c70:	4b0e      	ldr	r3, [pc, #56]	; (8017cac <SystemInit+0x4c>)
 8017c72:	2200      	movs	r2, #0
 8017c74:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8017c76:	4a0d      	ldr	r2, [pc, #52]	; (8017cac <SystemInit+0x4c>)
 8017c78:	4b0c      	ldr	r3, [pc, #48]	; (8017cac <SystemInit+0x4c>)
 8017c7a:	681b      	ldr	r3, [r3, #0]
 8017c7c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8017c80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8017c84:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8017c86:	4b09      	ldr	r3, [pc, #36]	; (8017cac <SystemInit+0x4c>)
 8017c88:	4a09      	ldr	r2, [pc, #36]	; (8017cb0 <SystemInit+0x50>)
 8017c8a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8017c8c:	4b07      	ldr	r3, [pc, #28]	; (8017cac <SystemInit+0x4c>)
 8017c8e:	4a07      	ldr	r2, [pc, #28]	; (8017cac <SystemInit+0x4c>)
 8017c90:	6812      	ldr	r2, [r2, #0]
 8017c92:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8017c96:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8017c98:	4b04      	ldr	r3, [pc, #16]	; (8017cac <SystemInit+0x4c>)
 8017c9a:	2200      	movs	r2, #0
 8017c9c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8017c9e:	f000 f887 	bl	8017db0 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8017ca2:	4b04      	ldr	r3, [pc, #16]	; (8017cb4 <SystemInit+0x54>)
 8017ca4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8017ca8:	609a      	str	r2, [r3, #8]
#endif
}
 8017caa:	bd80      	pop	{r7, pc}
 8017cac:	40023800 	.word	0x40023800
 8017cb0:	24003010 	.word	0x24003010
 8017cb4:	e000ed00 	.word	0xe000ed00

08017cb8 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8017cb8:	b480      	push	{r7}
 8017cba:	b087      	sub	sp, #28
 8017cbc:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8017cbe:	2300      	movs	r3, #0
 8017cc0:	613b      	str	r3, [r7, #16]
 8017cc2:	2300      	movs	r3, #0
 8017cc4:	617b      	str	r3, [r7, #20]
 8017cc6:	2302      	movs	r3, #2
 8017cc8:	60fb      	str	r3, [r7, #12]
 8017cca:	2300      	movs	r3, #0
 8017ccc:	60bb      	str	r3, [r7, #8]
 8017cce:	2302      	movs	r3, #2
 8017cd0:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8017cd2:	4b32      	ldr	r3, [pc, #200]	; (8017d9c <SystemCoreClockUpdate+0xe4>)
 8017cd4:	689b      	ldr	r3, [r3, #8]
 8017cd6:	f003 030c 	and.w	r3, r3, #12
 8017cda:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8017cdc:	693b      	ldr	r3, [r7, #16]
 8017cde:	2b04      	cmp	r3, #4
 8017ce0:	d007      	beq.n	8017cf2 <SystemCoreClockUpdate+0x3a>
 8017ce2:	2b08      	cmp	r3, #8
 8017ce4:	d009      	beq.n	8017cfa <SystemCoreClockUpdate+0x42>
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	d13f      	bne.n	8017d6a <SystemCoreClockUpdate+0xb2>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8017cea:	4b2d      	ldr	r3, [pc, #180]	; (8017da0 <SystemCoreClockUpdate+0xe8>)
 8017cec:	4a2d      	ldr	r2, [pc, #180]	; (8017da4 <SystemCoreClockUpdate+0xec>)
 8017cee:	601a      	str	r2, [r3, #0]
      break;
 8017cf0:	e03f      	b.n	8017d72 <SystemCoreClockUpdate+0xba>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8017cf2:	4b2b      	ldr	r3, [pc, #172]	; (8017da0 <SystemCoreClockUpdate+0xe8>)
 8017cf4:	4a2c      	ldr	r2, [pc, #176]	; (8017da8 <SystemCoreClockUpdate+0xf0>)
 8017cf6:	601a      	str	r2, [r3, #0]
      break;
 8017cf8:	e03b      	b.n	8017d72 <SystemCoreClockUpdate+0xba>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8017cfa:	4b28      	ldr	r3, [pc, #160]	; (8017d9c <SystemCoreClockUpdate+0xe4>)
 8017cfc:	685b      	ldr	r3, [r3, #4]
 8017cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8017d02:	0d9b      	lsrs	r3, r3, #22
 8017d04:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8017d06:	4b25      	ldr	r3, [pc, #148]	; (8017d9c <SystemCoreClockUpdate+0xe4>)
 8017d08:	685b      	ldr	r3, [r3, #4]
 8017d0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017d0e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8017d10:	68bb      	ldr	r3, [r7, #8]
 8017d12:	2b00      	cmp	r3, #0
 8017d14:	d00d      	beq.n	8017d32 <SystemCoreClockUpdate+0x7a>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8017d16:	4a24      	ldr	r2, [pc, #144]	; (8017da8 <SystemCoreClockUpdate+0xf0>)
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8017d1e:	4b1f      	ldr	r3, [pc, #124]	; (8017d9c <SystemCoreClockUpdate+0xe4>)
 8017d20:	6859      	ldr	r1, [r3, #4]
 8017d22:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8017d26:	400b      	ands	r3, r1
 8017d28:	099b      	lsrs	r3, r3, #6
 8017d2a:	fb03 f302 	mul.w	r3, r3, r2
 8017d2e:	617b      	str	r3, [r7, #20]
 8017d30:	e00c      	b.n	8017d4c <SystemCoreClockUpdate+0x94>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8017d32:	4a1c      	ldr	r2, [pc, #112]	; (8017da4 <SystemCoreClockUpdate+0xec>)
 8017d34:	687b      	ldr	r3, [r7, #4]
 8017d36:	fbb2 f2f3 	udiv	r2, r2, r3
 8017d3a:	4b18      	ldr	r3, [pc, #96]	; (8017d9c <SystemCoreClockUpdate+0xe4>)
 8017d3c:	6859      	ldr	r1, [r3, #4]
 8017d3e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8017d42:	400b      	ands	r3, r1
 8017d44:	099b      	lsrs	r3, r3, #6
 8017d46:	fb03 f302 	mul.w	r3, r3, r2
 8017d4a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8017d4c:	4b13      	ldr	r3, [pc, #76]	; (8017d9c <SystemCoreClockUpdate+0xe4>)
 8017d4e:	685b      	ldr	r3, [r3, #4]
 8017d50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8017d54:	0c1b      	lsrs	r3, r3, #16
 8017d56:	3301      	adds	r3, #1
 8017d58:	005b      	lsls	r3, r3, #1
 8017d5a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8017d5c:	697a      	ldr	r2, [r7, #20]
 8017d5e:	68fb      	ldr	r3, [r7, #12]
 8017d60:	fbb2 f2f3 	udiv	r2, r2, r3
 8017d64:	4b0e      	ldr	r3, [pc, #56]	; (8017da0 <SystemCoreClockUpdate+0xe8>)
 8017d66:	601a      	str	r2, [r3, #0]
      break;
 8017d68:	e003      	b.n	8017d72 <SystemCoreClockUpdate+0xba>
    default:
      SystemCoreClock = HSI_VALUE;
 8017d6a:	4b0d      	ldr	r3, [pc, #52]	; (8017da0 <SystemCoreClockUpdate+0xe8>)
 8017d6c:	4a0d      	ldr	r2, [pc, #52]	; (8017da4 <SystemCoreClockUpdate+0xec>)
 8017d6e:	601a      	str	r2, [r3, #0]
      break;
 8017d70:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8017d72:	4b0a      	ldr	r3, [pc, #40]	; (8017d9c <SystemCoreClockUpdate+0xe4>)
 8017d74:	689b      	ldr	r3, [r3, #8]
 8017d76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017d7a:	091b      	lsrs	r3, r3, #4
 8017d7c:	4a0b      	ldr	r2, [pc, #44]	; (8017dac <SystemCoreClockUpdate+0xf4>)
 8017d7e:	5cd3      	ldrb	r3, [r2, r3]
 8017d80:	b2db      	uxtb	r3, r3
 8017d82:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8017d84:	4b06      	ldr	r3, [pc, #24]	; (8017da0 <SystemCoreClockUpdate+0xe8>)
 8017d86:	681a      	ldr	r2, [r3, #0]
 8017d88:	693b      	ldr	r3, [r7, #16]
 8017d8a:	40da      	lsrs	r2, r3
 8017d8c:	4b04      	ldr	r3, [pc, #16]	; (8017da0 <SystemCoreClockUpdate+0xe8>)
 8017d8e:	601a      	str	r2, [r3, #0]
}
 8017d90:	371c      	adds	r7, #28
 8017d92:	46bd      	mov	sp, r7
 8017d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d98:	4770      	bx	lr
 8017d9a:	bf00      	nop
 8017d9c:	40023800 	.word	0x40023800
 8017da0:	200000c4 	.word	0x200000c4
 8017da4:	00f42400 	.word	0x00f42400
 8017da8:	007a1200 	.word	0x007a1200
 8017dac:	200000c8 	.word	0x200000c8

08017db0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8017db0:	b480      	push	{r7}
 8017db2:	b083      	sub	sp, #12
 8017db4:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8017db6:	2300      	movs	r3, #0
 8017db8:	607b      	str	r3, [r7, #4]
 8017dba:	2300      	movs	r3, #0
 8017dbc:	603b      	str	r3, [r7, #0]
                   (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

#else /* PLL_SOURCE_HSE_BYPASS or PLL_SOURCE_HSE */

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8017dbe:	4b42      	ldr	r3, [pc, #264]	; (8017ec8 <SetSysClock+0x118>)
 8017dc0:	4a41      	ldr	r2, [pc, #260]	; (8017ec8 <SetSysClock+0x118>)
 8017dc2:	6812      	ldr	r2, [r2, #0]
 8017dc4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8017dc8:	601a      	str	r2, [r3, #0]
  RCC->CR |= ((uint32_t)RCC_CR_HSEBYP);
#endif   /* PLL_SOURCE_HSE_BYPASS */
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8017dca:	4b3f      	ldr	r3, [pc, #252]	; (8017ec8 <SetSysClock+0x118>)
 8017dcc:	681b      	ldr	r3, [r3, #0]
 8017dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017dd2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	3301      	adds	r3, #1
 8017dd8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8017dda:	683b      	ldr	r3, [r7, #0]
 8017ddc:	2b00      	cmp	r3, #0
 8017dde:	d103      	bne.n	8017de8 <SetSysClock+0x38>
 8017de0:	687b      	ldr	r3, [r7, #4]
 8017de2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8017de6:	d1f0      	bne.n	8017dca <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8017de8:	4b37      	ldr	r3, [pc, #220]	; (8017ec8 <SetSysClock+0x118>)
 8017dea:	681b      	ldr	r3, [r3, #0]
 8017dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	d002      	beq.n	8017dfa <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8017df4:	2301      	movs	r3, #1
 8017df6:	603b      	str	r3, [r7, #0]
 8017df8:	e001      	b.n	8017dfe <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8017dfa:	2300      	movs	r3, #0
 8017dfc:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8017dfe:	683b      	ldr	r3, [r7, #0]
 8017e00:	2b01      	cmp	r3, #1
 8017e02:	d102      	bne.n	8017e0a <SetSysClock+0x5a>
  {
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8017e04:	4b30      	ldr	r3, [pc, #192]	; (8017ec8 <SetSysClock+0x118>)
 8017e06:	4a31      	ldr	r2, [pc, #196]	; (8017ecc <SetSysClock+0x11c>)
 8017e08:	605a      	str	r2, [r3, #4]
         configuration. User can add here some code to deal with this error */
  }
#endif /*PLL_SOURCE_HSI*/
  
      /* Select regulator voltage output Scale 1 mode, System frequency up to 180 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8017e0a:	4b2f      	ldr	r3, [pc, #188]	; (8017ec8 <SetSysClock+0x118>)
 8017e0c:	4a2e      	ldr	r2, [pc, #184]	; (8017ec8 <SetSysClock+0x118>)
 8017e0e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8017e10:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8017e14:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8017e16:	4b2e      	ldr	r3, [pc, #184]	; (8017ed0 <SetSysClock+0x120>)
 8017e18:	4a2d      	ldr	r2, [pc, #180]	; (8017ed0 <SetSysClock+0x120>)
 8017e1a:	6812      	ldr	r2, [r2, #0]
 8017e1c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8017e20:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8017e22:	4b29      	ldr	r3, [pc, #164]	; (8017ec8 <SetSysClock+0x118>)
 8017e24:	4a28      	ldr	r2, [pc, #160]	; (8017ec8 <SetSysClock+0x118>)
 8017e26:	6892      	ldr	r2, [r2, #8]
 8017e28:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8017e2a:	4b27      	ldr	r3, [pc, #156]	; (8017ec8 <SetSysClock+0x118>)
 8017e2c:	4a26      	ldr	r2, [pc, #152]	; (8017ec8 <SetSysClock+0x118>)
 8017e2e:	6892      	ldr	r2, [r2, #8]
 8017e30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8017e34:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8017e36:	4b24      	ldr	r3, [pc, #144]	; (8017ec8 <SetSysClock+0x118>)
 8017e38:	4a23      	ldr	r2, [pc, #140]	; (8017ec8 <SetSysClock+0x118>)
 8017e3a:	6892      	ldr	r2, [r2, #8]
 8017e3c:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8017e40:	609a      	str	r2, [r3, #8]

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8017e42:	4b21      	ldr	r3, [pc, #132]	; (8017ec8 <SetSysClock+0x118>)
 8017e44:	4a20      	ldr	r2, [pc, #128]	; (8017ec8 <SetSysClock+0x118>)
 8017e46:	6812      	ldr	r2, [r2, #0]
 8017e48:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8017e4c:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8017e4e:	bf00      	nop
 8017e50:	4b1d      	ldr	r3, [pc, #116]	; (8017ec8 <SetSysClock+0x118>)
 8017e52:	681b      	ldr	r3, [r3, #0]
 8017e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017e58:	2b00      	cmp	r3, #0
 8017e5a:	d0f9      	beq.n	8017e50 <SetSysClock+0xa0>
    {
    }

    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 8017e5c:	4b1c      	ldr	r3, [pc, #112]	; (8017ed0 <SetSysClock+0x120>)
 8017e5e:	4a1c      	ldr	r2, [pc, #112]	; (8017ed0 <SetSysClock+0x120>)
 8017e60:	6812      	ldr	r2, [r2, #0]
 8017e62:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8017e66:	601a      	str	r2, [r3, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 8017e68:	bf00      	nop
 8017e6a:	4b19      	ldr	r3, [pc, #100]	; (8017ed0 <SetSysClock+0x120>)
 8017e6c:	685b      	ldr	r3, [r3, #4]
 8017e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017e72:	2b00      	cmp	r3, #0
 8017e74:	d0f9      	beq.n	8017e6a <SetSysClock+0xba>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 8017e76:	4b16      	ldr	r3, [pc, #88]	; (8017ed0 <SetSysClock+0x120>)
 8017e78:	4a15      	ldr	r2, [pc, #84]	; (8017ed0 <SetSysClock+0x120>)
 8017e7a:	6812      	ldr	r2, [r2, #0]
 8017e7c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8017e80:	601a      	str	r2, [r3, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 8017e82:	bf00      	nop
 8017e84:	4b12      	ldr	r3, [pc, #72]	; (8017ed0 <SetSysClock+0x120>)
 8017e86:	685b      	ldr	r3, [r3, #4]
 8017e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	d0f9      	beq.n	8017e84 <SetSysClock+0xd4>
    {
    } 
     
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8017e90:	4b10      	ldr	r3, [pc, #64]	; (8017ed4 <SetSysClock+0x124>)
 8017e92:	f240 7205 	movw	r2, #1797	; 0x705
 8017e96:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8017e98:	4b0b      	ldr	r3, [pc, #44]	; (8017ec8 <SetSysClock+0x118>)
 8017e9a:	4a0b      	ldr	r2, [pc, #44]	; (8017ec8 <SetSysClock+0x118>)
 8017e9c:	6892      	ldr	r2, [r2, #8]
 8017e9e:	f022 0203 	bic.w	r2, r2, #3
 8017ea2:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8017ea4:	4b08      	ldr	r3, [pc, #32]	; (8017ec8 <SetSysClock+0x118>)
 8017ea6:	4a08      	ldr	r2, [pc, #32]	; (8017ec8 <SetSysClock+0x118>)
 8017ea8:	6892      	ldr	r2, [r2, #8]
 8017eaa:	f042 0202 	orr.w	r2, r2, #2
 8017eae:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8017eb0:	bf00      	nop
 8017eb2:	4b05      	ldr	r3, [pc, #20]	; (8017ec8 <SetSysClock+0x118>)
 8017eb4:	689b      	ldr	r3, [r3, #8]
 8017eb6:	f003 030c 	and.w	r3, r3, #12
 8017eba:	2b08      	cmp	r3, #8
 8017ebc:	d1f9      	bne.n	8017eb2 <SetSysClock+0x102>
    {
    }
}
 8017ebe:	370c      	adds	r7, #12
 8017ec0:	46bd      	mov	sp, r7
 8017ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ec6:	4770      	bx	lr
 8017ec8:	40023800 	.word	0x40023800
 8017ecc:	07405a08 	.word	0x07405a08
 8017ed0:	40007000 	.word	0x40007000
 8017ed4:	40023c00 	.word	0x40023c00

08017ed8 <SysTick_Handler>:
	.type	USART2_IRQHandler, %function
	.global USART2_IRQHandler
SysTick_Handler:
USART2_IRQHandler:
	/* disable global interupt */
	cpsid i
 8017ed8:	b672      	cpsid	i

	mrs r0, psp
 8017eda:	f3ef 8009 	mrs	r0, PSP
	stmdb r0!, {r7}
 8017ede:	f840 7d04 	str.w	r7, [r0, #-4]!

	/* Get ISR number */
	mrs r7, ipsr
 8017ee2:	f3ef 8705 	mrs	r7, IPSR
	neg r7, r7
 8017ee6:	f1c7 0700 	rsb	r7, r7, #0

	/* save user state */
	stmdb r0!, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8017eea:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* load kernel state */
	pop {r4, r5, r6, r7, r8, r9, r10, r11, ip, lr}
 8017eee:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
	msr psr_nzcvq, ip
 8017ef2:	f38c 8803 	msr	PSR, ip

	bx lr
 8017ef6:	4770      	bx	lr

08017ef8 <SVC_Handler>:

	.type	SVC_Handler, %function
	.global SVC_Handler
SVC_Handler:
	/* save user state */
	mrs r0, psp
 8017ef8:	f3ef 8009 	mrs	r0, PSP
	stmdb r0!, {r7}
 8017efc:	f840 7d04 	str.w	r7, [r0, #-4]!
	stmdb r0!, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8017f00:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* load kernel state */
	pop {r4, r5, r6, r7, r8, r9, r10, r11, ip, lr}
 8017f04:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
	msr psr_nzcvq, ip
 8017f08:	f38c 8803 	msr	PSR, ip
	
	bx lr
 8017f0c:	4770      	bx	lr

08017f0e <activate>:

	.global activate
activate:
	/* save kernel state */
	mrs ip, psr
 8017f0e:	f3ef 8c03 	mrs	ip, PSR
	push {r4, r5, r6, r7, r8, r9, r10, r11, ip, lr}
 8017f12:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
	
	/* load user state */
	ldmia r0!, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8017f16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ldmia r0!, {r7}
 8017f1a:	c880      	ldmia	r0!, {r7}
	
	/* switch to process stack pointer */
	msr psp, r0
 8017f1c:	f380 8809 	msr	PSP, r0
	mov r0, #3
 8017f20:	f04f 0003 	mov.w	r0, #3
	msr control, r0
 8017f24:	f380 8814 	msr	CONTROL, r0

	/* enable global interupt */
	cpsie i
 8017f28:	b662      	cpsie	i
	bx lr
 8017f2a:	4770      	bx	lr
 8017f2c:	0000      	movs	r0, r0
	...

08017f30 <memcpy>:
    .syntax unified
    .align 4

.global memcpy
memcpy:
	push    {r0}
 8017f30:	b401      	push	{r0}
	cmp     r2, #4
 8017f32:	2a04      	cmp	r2, #4
	it      lo
 8017f34:	bf38      	it	cc
	lslslo  r2, r2, #30         /* Adjust r2 for less_than_4_bytes */
 8017f36:	ea5f 7282 	movscc.w	r2, r2, lsl #30
	blo     less_than_4_bytes
 8017f3a:	f0c0 8031 	bcc.w	8017fa0 <less_than_4_bytes>
	
	ands    r3, r1, #3
 8017f3e:	f011 0303 	ands.w	r3, r1, #3
	beq     aligned
 8017f42:	f000 800e 	beq.w	8017f62 <aligned>
	
	negs    r3, r3              /* Next aligned offset = (4 - src & 3) & 3 */
 8017f46:	425b      	negs	r3, r3
	lsls    r3, r3, #31
 8017f48:	07db      	lsls	r3, r3, #31
	ittt    cs
 8017f4a:	bf22      	ittt	cs
	ldrhcs  r3, [r1], #2		/* Load if 2 bytes unaligned */
 8017f4c:	f831 3b02 	ldrhcs.w	r3, [r1], #2
	subcs   r2, r2, #2
 8017f50:	3a02      	subcs	r2, #2
	strhcs  r3, [r0], #2		/* Save if 2 bytes unaligned */
 8017f52:	f820 3b02 	strhcs.w	r3, [r0], #2
	ittt    mi
 8017f56:	bf42      	ittt	mi
	ldrbmi  r3, [r1] ,#1		/* Load if 1 byte unaligned */
 8017f58:	f811 3b01 	ldrbmi.w	r3, [r1], #1
	submi   r2, r2, #1
 8017f5c:	3a01      	submi	r2, #1
	strbmi  r3, [r0] ,#1		/* Save if 1 byte unaligned */
 8017f5e:	f800 3b01 	strbmi.w	r3, [r0], #1

08017f62 <aligned>:

aligned:
	push    {r4 - r10}
 8017f62:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
	subs 	r2, #32		 
 8017f66:	3a20      	subs	r2, #32
	blo     less_than_32_bytes
 8017f68:	f0c0 8007 	bcc.w	8017f7a <less_than_32_bytes>

08017f6c <L>:
L:
	ldmia 	r1!, {r3 - r10}
 8017f6c:	e8b1 07f8 	ldmia.w	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
	subs 	r2, #32		 
 8017f70:	3a20      	subs	r2, #32
	stmia	r0!, {r3 - r10}
 8017f72:	e8a0 07f8 	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
	bhs 	L
 8017f76:	f4bf aff9 	bcs.w	8017f6c <L>

08017f7a <less_than_32_bytes>:
					
less_than_32_bytes:
	lsls    r2, r2, #28
 8017f7a:	0712      	lsls	r2, r2, #28
	it      cs
 8017f7c:	bf28      	it	cs
	ldmiacs	r1!, {r3 - r6}		/* Load if 16 bytes remained */
 8017f7e:	c978      	ldmiacs	r1!, {r3, r4, r5, r6}
	it      mi
 8017f80:	bf48      	it	mi
	ldmiami r1!, {r7 - r8}		/* Load if 8 bytes remained */
 8017f82:	e8b1 0180 	ldmiami.w	r1!, {r7, r8}
	it      cs
 8017f86:	bf28      	it	cs
	stmiacs	r0!, {r3 - r6}
 8017f88:	c078      	stmiacs	r0!, {r3, r4, r5, r6}
	it      mi
 8017f8a:	bf48      	it	mi
	stmiami r0!, {r7 - r8}
 8017f8c:	e8a0 0180 	stmiami.w	r0!, {r7, r8}
	
	lsls    r2, r2, #2
 8017f90:	0092      	lsls	r2, r2, #2
	itt     cs
 8017f92:	bf24      	itt	cs
	ldrcs   r3, [r1], #4		/* Load if 4 bytes remained */
 8017f94:	f851 3b04 	ldrcs.w	r3, [r1], #4
	strcs   r3, [r0], #4
 8017f98:	f840 3b04 	strcs.w	r3, [r0], #4
	
	pop     {r4 - r10}
 8017f9c:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}

08017fa0 <less_than_4_bytes>:
	
less_than_4_bytes:
	it      ne
 8017fa0:	bf18      	it	ne
	ldrne   r3, [r1]    		/* Load if ether 2 bytes or 1 byte remained */
 8017fa2:	680b      	ldrne	r3, [r1, #0]
	lsls    r2, r2, #1
 8017fa4:	0052      	lsls	r2, r2, #1
	itt     cs
 8017fa6:	bf24      	itt	cs
	strhcs  r3, [r0],#2			/* Save if 2 bytes remained */
 8017fa8:	f820 3b02 	strhcs.w	r3, [r0], #2
	lsrcs   r3, r3, 16
 8017fac:	0c1b      	lsrcs	r3, r3, #16
	it      mi
 8017fae:	bf48      	it	mi
	strbmi  r3, [r0],#1			/* Save if 1 byte remained */
 8017fb0:	f800 3b01 	strbmi.w	r3, [r0], #1
	
	pop     {r0}				
 8017fb4:	bc01      	pop	{r0}
	bx      lr				
 8017fb6:	4770      	bx	lr
 8017fb8:	f3af 8000 	nop.w
 8017fbc:	f3af 8000 	nop.w

08017fc0 <fork>:
	.fpu softvfp
	.thumb

.global fork
fork:
	push {r7}
 8017fc0:	b480      	push	{r7}
	mov r7, #0x1
 8017fc2:	f04f 0701 	mov.w	r7, #1
	svc 0
 8017fc6:	df00      	svc	0
	nop
 8017fc8:	bf00      	nop
	pop {r7}
 8017fca:	bc80      	pop	{r7}
	bx lr
 8017fcc:	4770      	bx	lr

08017fce <getpid>:
.global getpid
getpid:
	push {r7}
 8017fce:	b480      	push	{r7}
	mov r7, #0x2
 8017fd0:	f04f 0702 	mov.w	r7, #2
	svc 0
 8017fd4:	df00      	svc	0
	nop
 8017fd6:	bf00      	nop
	pop {r7}
 8017fd8:	bc80      	pop	{r7}
	bx lr
 8017fda:	4770      	bx	lr

08017fdc <write>:
.global write
write:
	push {r7}
 8017fdc:	b480      	push	{r7}
	mov r7, #0x3
 8017fde:	f04f 0703 	mov.w	r7, #3
	svc 0
 8017fe2:	df00      	svc	0
	nop
 8017fe4:	bf00      	nop
	pop {r7}
 8017fe6:	bc80      	pop	{r7}
	bx lr
 8017fe8:	4770      	bx	lr

08017fea <read>:
.global read
read:
	push {r7}
 8017fea:	b480      	push	{r7}
	mov r7, #0x4
 8017fec:	f04f 0704 	mov.w	r7, #4
	svc 0
 8017ff0:	df00      	svc	0
	nop
 8017ff2:	bf00      	nop
	pop {r7}
 8017ff4:	bc80      	pop	{r7}
	bx lr
 8017ff6:	4770      	bx	lr

08017ff8 <interrupt_wait>:
.global interrupt_wait
interrupt_wait:
	push {r7}
 8017ff8:	b480      	push	{r7}
	mov r7, #0x5
 8017ffa:	f04f 0705 	mov.w	r7, #5
	svc 0
 8017ffe:	df00      	svc	0
	nop
 8018000:	bf00      	nop
	pop {r7}
 8018002:	bc80      	pop	{r7}
	bx lr
 8018004:	4770      	bx	lr

08018006 <getpriority>:
.global getpriority
getpriority:
	push {r7}
 8018006:	b480      	push	{r7}
	mov r7, #0x6
 8018008:	f04f 0706 	mov.w	r7, #6
	svc 0
 801800c:	df00      	svc	0
	nop
 801800e:	bf00      	nop
	pop {r7}
 8018010:	bc80      	pop	{r7}
	bx lr
 8018012:	4770      	bx	lr

08018014 <setpriority>:
.global setpriority
setpriority:
	push {r7}
 8018014:	b480      	push	{r7}
	mov r7, #0x7
 8018016:	f04f 0707 	mov.w	r7, #7
	svc 0
 801801a:	df00      	svc	0
	nop
 801801c:	bf00      	nop
	pop {r7}
 801801e:	bc80      	pop	{r7}
	bx lr
 8018020:	4770      	bx	lr

08018022 <mknod>:
.global mknod
mknod:
	push {r7}
 8018022:	b480      	push	{r7}
	mov r7, #0x8
 8018024:	f04f 0708 	mov.w	r7, #8
	svc 0
 8018028:	df00      	svc	0
	nop
 801802a:	bf00      	nop
	pop {r7}
 801802c:	bc80      	pop	{r7}
	bx lr
 801802e:	4770      	bx	lr

08018030 <sleep>:
.global sleep
sleep:
	push {r7}
 8018030:	b480      	push	{r7}
	mov r7, #0x9
 8018032:	f04f 0709 	mov.w	r7, #9
	svc 0
 8018036:	df00      	svc	0
	nop
 8018038:	bf00      	nop
	pop {r7}
 801803a:	bc80      	pop	{r7}
	bx lr
 801803c:	4770      	bx	lr

0801803e <lseek>:
.global lseek
lseek:
	push {r7}
 801803e:	b480      	push	{r7}
	mov r7, #0xa
 8018040:	f04f 070a 	mov.w	r7, #10
	svc 0
 8018044:	df00      	svc	0
	nop
 8018046:	bf00      	nop
	pop {r7}
 8018048:	bc80      	pop	{r7}
	bx lr
 801804a:	4770      	bx	lr
 801804c:	0801d0f0 	.word	0x0801d0f0
 8018050:	20000000 	.word	0x20000000
 8018054:	200000dc 	.word	0x200000dc
 8018058:	200000dc 	.word	0x200000dc
 801805c:	2000535c 	.word	0x2000535c

08018060 <__aeabi_frsub>:
 8018060:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8018064:	e002      	b.n	801806c <__addsf3>
 8018066:	bf00      	nop

08018068 <__aeabi_fsub>:
 8018068:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0801806c <__addsf3>:
 801806c:	0042      	lsls	r2, r0, #1
 801806e:	bf1f      	itttt	ne
 8018070:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8018074:	ea92 0f03 	teqne	r2, r3
 8018078:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 801807c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8018080:	d06a      	beq.n	8018158 <__addsf3+0xec>
 8018082:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8018086:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 801808a:	bfc1      	itttt	gt
 801808c:	18d2      	addgt	r2, r2, r3
 801808e:	4041      	eorgt	r1, r0
 8018090:	4048      	eorgt	r0, r1
 8018092:	4041      	eorgt	r1, r0
 8018094:	bfb8      	it	lt
 8018096:	425b      	neglt	r3, r3
 8018098:	2b19      	cmp	r3, #25
 801809a:	bf88      	it	hi
 801809c:	4770      	bxhi	lr
 801809e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80180a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80180a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80180aa:	bf18      	it	ne
 80180ac:	4240      	negne	r0, r0
 80180ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80180b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80180b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80180ba:	bf18      	it	ne
 80180bc:	4249      	negne	r1, r1
 80180be:	ea92 0f03 	teq	r2, r3
 80180c2:	d03f      	beq.n	8018144 <__addsf3+0xd8>
 80180c4:	f1a2 0201 	sub.w	r2, r2, #1
 80180c8:	fa41 fc03 	asr.w	ip, r1, r3
 80180cc:	eb10 000c 	adds.w	r0, r0, ip
 80180d0:	f1c3 0320 	rsb	r3, r3, #32
 80180d4:	fa01 f103 	lsl.w	r1, r1, r3
 80180d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80180dc:	d502      	bpl.n	80180e4 <__addsf3+0x78>
 80180de:	4249      	negs	r1, r1
 80180e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80180e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80180e8:	d313      	bcc.n	8018112 <__addsf3+0xa6>
 80180ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80180ee:	d306      	bcc.n	80180fe <__addsf3+0x92>
 80180f0:	0840      	lsrs	r0, r0, #1
 80180f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80180f6:	f102 0201 	add.w	r2, r2, #1
 80180fa:	2afe      	cmp	r2, #254	; 0xfe
 80180fc:	d251      	bcs.n	80181a2 <__addsf3+0x136>
 80180fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8018102:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8018106:	bf08      	it	eq
 8018108:	f020 0001 	biceq.w	r0, r0, #1
 801810c:	ea40 0003 	orr.w	r0, r0, r3
 8018110:	4770      	bx	lr
 8018112:	0049      	lsls	r1, r1, #1
 8018114:	eb40 0000 	adc.w	r0, r0, r0
 8018118:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 801811c:	f1a2 0201 	sub.w	r2, r2, #1
 8018120:	d1ed      	bne.n	80180fe <__addsf3+0x92>
 8018122:	fab0 fc80 	clz	ip, r0
 8018126:	f1ac 0c08 	sub.w	ip, ip, #8
 801812a:	ebb2 020c 	subs.w	r2, r2, ip
 801812e:	fa00 f00c 	lsl.w	r0, r0, ip
 8018132:	bfaa      	itet	ge
 8018134:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8018138:	4252      	neglt	r2, r2
 801813a:	4318      	orrge	r0, r3
 801813c:	bfbc      	itt	lt
 801813e:	40d0      	lsrlt	r0, r2
 8018140:	4318      	orrlt	r0, r3
 8018142:	4770      	bx	lr
 8018144:	f092 0f00 	teq	r2, #0
 8018148:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 801814c:	bf06      	itte	eq
 801814e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8018152:	3201      	addeq	r2, #1
 8018154:	3b01      	subne	r3, #1
 8018156:	e7b5      	b.n	80180c4 <__addsf3+0x58>
 8018158:	ea4f 0341 	mov.w	r3, r1, lsl #1
 801815c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8018160:	bf18      	it	ne
 8018162:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8018166:	d021      	beq.n	80181ac <__addsf3+0x140>
 8018168:	ea92 0f03 	teq	r2, r3
 801816c:	d004      	beq.n	8018178 <__addsf3+0x10c>
 801816e:	f092 0f00 	teq	r2, #0
 8018172:	bf08      	it	eq
 8018174:	4608      	moveq	r0, r1
 8018176:	4770      	bx	lr
 8018178:	ea90 0f01 	teq	r0, r1
 801817c:	bf1c      	itt	ne
 801817e:	2000      	movne	r0, #0
 8018180:	4770      	bxne	lr
 8018182:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8018186:	d104      	bne.n	8018192 <__addsf3+0x126>
 8018188:	0040      	lsls	r0, r0, #1
 801818a:	bf28      	it	cs
 801818c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8018190:	4770      	bx	lr
 8018192:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8018196:	bf3c      	itt	cc
 8018198:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 801819c:	4770      	bxcc	lr
 801819e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80181a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80181a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80181aa:	4770      	bx	lr
 80181ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80181b0:	bf16      	itet	ne
 80181b2:	4608      	movne	r0, r1
 80181b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80181b8:	4601      	movne	r1, r0
 80181ba:	0242      	lsls	r2, r0, #9
 80181bc:	bf06      	itte	eq
 80181be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80181c2:	ea90 0f01 	teqeq	r0, r1
 80181c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80181ca:	4770      	bx	lr

080181cc <__aeabi_ui2f>:
 80181cc:	f04f 0300 	mov.w	r3, #0
 80181d0:	e004      	b.n	80181dc <__aeabi_i2f+0x8>
 80181d2:	bf00      	nop

080181d4 <__aeabi_i2f>:
 80181d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80181d8:	bf48      	it	mi
 80181da:	4240      	negmi	r0, r0
 80181dc:	ea5f 0c00 	movs.w	ip, r0
 80181e0:	bf08      	it	eq
 80181e2:	4770      	bxeq	lr
 80181e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80181e8:	4601      	mov	r1, r0
 80181ea:	f04f 0000 	mov.w	r0, #0
 80181ee:	e01c      	b.n	801822a <__aeabi_l2f+0x2a>

080181f0 <__aeabi_ul2f>:
 80181f0:	ea50 0201 	orrs.w	r2, r0, r1
 80181f4:	bf08      	it	eq
 80181f6:	4770      	bxeq	lr
 80181f8:	f04f 0300 	mov.w	r3, #0
 80181fc:	e00a      	b.n	8018214 <__aeabi_l2f+0x14>
 80181fe:	bf00      	nop

08018200 <__aeabi_l2f>:
 8018200:	ea50 0201 	orrs.w	r2, r0, r1
 8018204:	bf08      	it	eq
 8018206:	4770      	bxeq	lr
 8018208:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 801820c:	d502      	bpl.n	8018214 <__aeabi_l2f+0x14>
 801820e:	4240      	negs	r0, r0
 8018210:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8018214:	ea5f 0c01 	movs.w	ip, r1
 8018218:	bf02      	ittt	eq
 801821a:	4684      	moveq	ip, r0
 801821c:	4601      	moveq	r1, r0
 801821e:	2000      	moveq	r0, #0
 8018220:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8018224:	bf08      	it	eq
 8018226:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 801822a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 801822e:	fabc f28c 	clz	r2, ip
 8018232:	3a08      	subs	r2, #8
 8018234:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8018238:	db10      	blt.n	801825c <__aeabi_l2f+0x5c>
 801823a:	fa01 fc02 	lsl.w	ip, r1, r2
 801823e:	4463      	add	r3, ip
 8018240:	fa00 fc02 	lsl.w	ip, r0, r2
 8018244:	f1c2 0220 	rsb	r2, r2, #32
 8018248:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 801824c:	fa20 f202 	lsr.w	r2, r0, r2
 8018250:	eb43 0002 	adc.w	r0, r3, r2
 8018254:	bf08      	it	eq
 8018256:	f020 0001 	biceq.w	r0, r0, #1
 801825a:	4770      	bx	lr
 801825c:	f102 0220 	add.w	r2, r2, #32
 8018260:	fa01 fc02 	lsl.w	ip, r1, r2
 8018264:	f1c2 0220 	rsb	r2, r2, #32
 8018268:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 801826c:	fa21 f202 	lsr.w	r2, r1, r2
 8018270:	eb43 0002 	adc.w	r0, r3, r2
 8018274:	bf08      	it	eq
 8018276:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 801827a:	4770      	bx	lr

0801827c <__aeabi_fmul>:
 801827c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8018280:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8018284:	bf1e      	ittt	ne
 8018286:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 801828a:	ea92 0f0c 	teqne	r2, ip
 801828e:	ea93 0f0c 	teqne	r3, ip
 8018292:	d06f      	beq.n	8018374 <__aeabi_fmul+0xf8>
 8018294:	441a      	add	r2, r3
 8018296:	ea80 0c01 	eor.w	ip, r0, r1
 801829a:	0240      	lsls	r0, r0, #9
 801829c:	bf18      	it	ne
 801829e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80182a2:	d01e      	beq.n	80182e2 <__aeabi_fmul+0x66>
 80182a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80182a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80182ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80182b0:	fba0 3101 	umull	r3, r1, r0, r1
 80182b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80182b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80182bc:	bf3e      	ittt	cc
 80182be:	0049      	lslcc	r1, r1, #1
 80182c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80182c4:	005b      	lslcc	r3, r3, #1
 80182c6:	ea40 0001 	orr.w	r0, r0, r1
 80182ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80182ce:	2afd      	cmp	r2, #253	; 0xfd
 80182d0:	d81d      	bhi.n	801830e <__aeabi_fmul+0x92>
 80182d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80182d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80182da:	bf08      	it	eq
 80182dc:	f020 0001 	biceq.w	r0, r0, #1
 80182e0:	4770      	bx	lr
 80182e2:	f090 0f00 	teq	r0, #0
 80182e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80182ea:	bf08      	it	eq
 80182ec:	0249      	lsleq	r1, r1, #9
 80182ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80182f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80182f6:	3a7f      	subs	r2, #127	; 0x7f
 80182f8:	bfc2      	ittt	gt
 80182fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80182fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8018302:	4770      	bxgt	lr
 8018304:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8018308:	f04f 0300 	mov.w	r3, #0
 801830c:	3a01      	subs	r2, #1
 801830e:	dc5d      	bgt.n	80183cc <__aeabi_fmul+0x150>
 8018310:	f112 0f19 	cmn.w	r2, #25
 8018314:	bfdc      	itt	le
 8018316:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 801831a:	4770      	bxle	lr
 801831c:	f1c2 0200 	rsb	r2, r2, #0
 8018320:	0041      	lsls	r1, r0, #1
 8018322:	fa21 f102 	lsr.w	r1, r1, r2
 8018326:	f1c2 0220 	rsb	r2, r2, #32
 801832a:	fa00 fc02 	lsl.w	ip, r0, r2
 801832e:	ea5f 0031 	movs.w	r0, r1, rrx
 8018332:	f140 0000 	adc.w	r0, r0, #0
 8018336:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 801833a:	bf08      	it	eq
 801833c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8018340:	4770      	bx	lr
 8018342:	f092 0f00 	teq	r2, #0
 8018346:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 801834a:	bf02      	ittt	eq
 801834c:	0040      	lsleq	r0, r0, #1
 801834e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8018352:	3a01      	subeq	r2, #1
 8018354:	d0f9      	beq.n	801834a <__aeabi_fmul+0xce>
 8018356:	ea40 000c 	orr.w	r0, r0, ip
 801835a:	f093 0f00 	teq	r3, #0
 801835e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8018362:	bf02      	ittt	eq
 8018364:	0049      	lsleq	r1, r1, #1
 8018366:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 801836a:	3b01      	subeq	r3, #1
 801836c:	d0f9      	beq.n	8018362 <__aeabi_fmul+0xe6>
 801836e:	ea41 010c 	orr.w	r1, r1, ip
 8018372:	e78f      	b.n	8018294 <__aeabi_fmul+0x18>
 8018374:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8018378:	ea92 0f0c 	teq	r2, ip
 801837c:	bf18      	it	ne
 801837e:	ea93 0f0c 	teqne	r3, ip
 8018382:	d00a      	beq.n	801839a <__aeabi_fmul+0x11e>
 8018384:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8018388:	bf18      	it	ne
 801838a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 801838e:	d1d8      	bne.n	8018342 <__aeabi_fmul+0xc6>
 8018390:	ea80 0001 	eor.w	r0, r0, r1
 8018394:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8018398:	4770      	bx	lr
 801839a:	f090 0f00 	teq	r0, #0
 801839e:	bf17      	itett	ne
 80183a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80183a4:	4608      	moveq	r0, r1
 80183a6:	f091 0f00 	teqne	r1, #0
 80183aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80183ae:	d014      	beq.n	80183da <__aeabi_fmul+0x15e>
 80183b0:	ea92 0f0c 	teq	r2, ip
 80183b4:	d101      	bne.n	80183ba <__aeabi_fmul+0x13e>
 80183b6:	0242      	lsls	r2, r0, #9
 80183b8:	d10f      	bne.n	80183da <__aeabi_fmul+0x15e>
 80183ba:	ea93 0f0c 	teq	r3, ip
 80183be:	d103      	bne.n	80183c8 <__aeabi_fmul+0x14c>
 80183c0:	024b      	lsls	r3, r1, #9
 80183c2:	bf18      	it	ne
 80183c4:	4608      	movne	r0, r1
 80183c6:	d108      	bne.n	80183da <__aeabi_fmul+0x15e>
 80183c8:	ea80 0001 	eor.w	r0, r0, r1
 80183cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80183d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80183d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80183d8:	4770      	bx	lr
 80183da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80183de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80183e2:	4770      	bx	lr

080183e4 <__aeabi_fdiv>:
 80183e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80183e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80183ec:	bf1e      	ittt	ne
 80183ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80183f2:	ea92 0f0c 	teqne	r2, ip
 80183f6:	ea93 0f0c 	teqne	r3, ip
 80183fa:	d069      	beq.n	80184d0 <__aeabi_fdiv+0xec>
 80183fc:	eba2 0203 	sub.w	r2, r2, r3
 8018400:	ea80 0c01 	eor.w	ip, r0, r1
 8018404:	0249      	lsls	r1, r1, #9
 8018406:	ea4f 2040 	mov.w	r0, r0, lsl #9
 801840a:	d037      	beq.n	801847c <__aeabi_fdiv+0x98>
 801840c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8018410:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8018414:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8018418:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 801841c:	428b      	cmp	r3, r1
 801841e:	bf38      	it	cc
 8018420:	005b      	lslcc	r3, r3, #1
 8018422:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8018426:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 801842a:	428b      	cmp	r3, r1
 801842c:	bf24      	itt	cs
 801842e:	1a5b      	subcs	r3, r3, r1
 8018430:	ea40 000c 	orrcs.w	r0, r0, ip
 8018434:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8018438:	bf24      	itt	cs
 801843a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 801843e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8018442:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8018446:	bf24      	itt	cs
 8018448:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 801844c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8018450:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8018454:	bf24      	itt	cs
 8018456:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 801845a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 801845e:	011b      	lsls	r3, r3, #4
 8018460:	bf18      	it	ne
 8018462:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8018466:	d1e0      	bne.n	801842a <__aeabi_fdiv+0x46>
 8018468:	2afd      	cmp	r2, #253	; 0xfd
 801846a:	f63f af50 	bhi.w	801830e <__aeabi_fmul+0x92>
 801846e:	428b      	cmp	r3, r1
 8018470:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8018474:	bf08      	it	eq
 8018476:	f020 0001 	biceq.w	r0, r0, #1
 801847a:	4770      	bx	lr
 801847c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8018480:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8018484:	327f      	adds	r2, #127	; 0x7f
 8018486:	bfc2      	ittt	gt
 8018488:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 801848c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8018490:	4770      	bxgt	lr
 8018492:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8018496:	f04f 0300 	mov.w	r3, #0
 801849a:	3a01      	subs	r2, #1
 801849c:	e737      	b.n	801830e <__aeabi_fmul+0x92>
 801849e:	f092 0f00 	teq	r2, #0
 80184a2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80184a6:	bf02      	ittt	eq
 80184a8:	0040      	lsleq	r0, r0, #1
 80184aa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80184ae:	3a01      	subeq	r2, #1
 80184b0:	d0f9      	beq.n	80184a6 <__aeabi_fdiv+0xc2>
 80184b2:	ea40 000c 	orr.w	r0, r0, ip
 80184b6:	f093 0f00 	teq	r3, #0
 80184ba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80184be:	bf02      	ittt	eq
 80184c0:	0049      	lsleq	r1, r1, #1
 80184c2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80184c6:	3b01      	subeq	r3, #1
 80184c8:	d0f9      	beq.n	80184be <__aeabi_fdiv+0xda>
 80184ca:	ea41 010c 	orr.w	r1, r1, ip
 80184ce:	e795      	b.n	80183fc <__aeabi_fdiv+0x18>
 80184d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80184d4:	ea92 0f0c 	teq	r2, ip
 80184d8:	d108      	bne.n	80184ec <__aeabi_fdiv+0x108>
 80184da:	0242      	lsls	r2, r0, #9
 80184dc:	f47f af7d 	bne.w	80183da <__aeabi_fmul+0x15e>
 80184e0:	ea93 0f0c 	teq	r3, ip
 80184e4:	f47f af70 	bne.w	80183c8 <__aeabi_fmul+0x14c>
 80184e8:	4608      	mov	r0, r1
 80184ea:	e776      	b.n	80183da <__aeabi_fmul+0x15e>
 80184ec:	ea93 0f0c 	teq	r3, ip
 80184f0:	d104      	bne.n	80184fc <__aeabi_fdiv+0x118>
 80184f2:	024b      	lsls	r3, r1, #9
 80184f4:	f43f af4c 	beq.w	8018390 <__aeabi_fmul+0x114>
 80184f8:	4608      	mov	r0, r1
 80184fa:	e76e      	b.n	80183da <__aeabi_fmul+0x15e>
 80184fc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8018500:	bf18      	it	ne
 8018502:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8018506:	d1ca      	bne.n	801849e <__aeabi_fdiv+0xba>
 8018508:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 801850c:	f47f af5c 	bne.w	80183c8 <__aeabi_fmul+0x14c>
 8018510:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8018514:	f47f af3c 	bne.w	8018390 <__aeabi_fmul+0x114>
 8018518:	e75f      	b.n	80183da <__aeabi_fmul+0x15e>
 801851a:	bf00      	nop

0801851c <__aeabi_f2uiz>:
 801851c:	0042      	lsls	r2, r0, #1
 801851e:	d20e      	bcs.n	801853e <__aeabi_f2uiz+0x22>
 8018520:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8018524:	d30b      	bcc.n	801853e <__aeabi_f2uiz+0x22>
 8018526:	f04f 039e 	mov.w	r3, #158	; 0x9e
 801852a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 801852e:	d409      	bmi.n	8018544 <__aeabi_f2uiz+0x28>
 8018530:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8018534:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8018538:	fa23 f002 	lsr.w	r0, r3, r2
 801853c:	4770      	bx	lr
 801853e:	f04f 0000 	mov.w	r0, #0
 8018542:	4770      	bx	lr
 8018544:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8018548:	d101      	bne.n	801854e <__aeabi_f2uiz+0x32>
 801854a:	0242      	lsls	r2, r0, #9
 801854c:	d102      	bne.n	8018554 <__aeabi_f2uiz+0x38>
 801854e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018552:	4770      	bx	lr
 8018554:	f04f 0000 	mov.w	r0, #0
 8018558:	4770      	bx	lr
 801855a:	bf00      	nop

0801855c <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 801855c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801855e:	f000 b804 	b.w	801856a <LoopCopyDataInit>

08018562 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8018562:	4b0c      	ldr	r3, [pc, #48]	; (8018594 <LoopFillZerobss+0x12>)
  ldr  r3, [r3, r1]
 8018564:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8018566:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8018568:	3104      	adds	r1, #4

0801856a <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 801856a:	480b      	ldr	r0, [pc, #44]	; (8018598 <LoopFillZerobss+0x16>)
  ldr  r3, =_edata
 801856c:	4b0b      	ldr	r3, [pc, #44]	; (801859c <LoopFillZerobss+0x1a>)
  adds  r2, r0, r1
 801856e:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8018570:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8018572:	f4ff aff6 	bcc.w	8018562 <CopyDataInit>
  ldr  r2, =_sbss
 8018576:	4a0a      	ldr	r2, [pc, #40]	; (80185a0 <LoopFillZerobss+0x1e>)
  b  LoopFillZerobss
 8018578:	f000 b803 	b.w	8018582 <LoopFillZerobss>

0801857c <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801857c:	2300      	movs	r3, #0
  str  r3, [r2], #4
 801857e:	f842 3b04 	str.w	r3, [r2], #4

08018582 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8018582:	4b08      	ldr	r3, [pc, #32]	; (80185a4 <LoopFillZerobss+0x22>)
  cmp  r2, r3
 8018584:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8018586:	f4ff aff9 	bcc.w	801857c <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801858a:	f7ff fb69 	bl	8017c60 <SystemInit>
/* Call the application's entry point.*/
  bl  main
 801858e:	f7e7 fe47 	bl	8000220 <main>
  bx  lr    
 8018592:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8018594:	0801d0f0 	.word	0x0801d0f0
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8018598:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 801859c:	200000dc 	.word	0x200000dc
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 80185a0:	200000dc 	.word	0x200000dc
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80185a4:	2000535c 	.word	0x2000535c

080185a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80185a8:	f7ff bffe 	b.w	80185a8 <ADC_IRQHandler>

080185ac <memset>:
 80185ac:	b4f0      	push	{r4, r5, r6, r7}
 80185ae:	0784      	lsls	r4, r0, #30
 80185b0:	d043      	beq.n	801863a <memset+0x8e>
 80185b2:	1e54      	subs	r4, r2, #1
 80185b4:	2a00      	cmp	r2, #0
 80185b6:	d03e      	beq.n	8018636 <memset+0x8a>
 80185b8:	b2cd      	uxtb	r5, r1
 80185ba:	4603      	mov	r3, r0
 80185bc:	e003      	b.n	80185c6 <memset+0x1a>
 80185be:	1e62      	subs	r2, r4, #1
 80185c0:	2c00      	cmp	r4, #0
 80185c2:	d038      	beq.n	8018636 <memset+0x8a>
 80185c4:	4614      	mov	r4, r2
 80185c6:	f803 5b01 	strb.w	r5, [r3], #1
 80185ca:	079a      	lsls	r2, r3, #30
 80185cc:	d1f7      	bne.n	80185be <memset+0x12>
 80185ce:	2c03      	cmp	r4, #3
 80185d0:	d92a      	bls.n	8018628 <memset+0x7c>
 80185d2:	b2cd      	uxtb	r5, r1
 80185d4:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80185d8:	2c0f      	cmp	r4, #15
 80185da:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80185de:	d915      	bls.n	801860c <memset+0x60>
 80185e0:	f1a4 0710 	sub.w	r7, r4, #16
 80185e4:	093f      	lsrs	r7, r7, #4
 80185e6:	f103 0610 	add.w	r6, r3, #16
 80185ea:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 80185ee:	461a      	mov	r2, r3
 80185f0:	6015      	str	r5, [r2, #0]
 80185f2:	6055      	str	r5, [r2, #4]
 80185f4:	6095      	str	r5, [r2, #8]
 80185f6:	60d5      	str	r5, [r2, #12]
 80185f8:	3210      	adds	r2, #16
 80185fa:	42b2      	cmp	r2, r6
 80185fc:	d1f8      	bne.n	80185f0 <memset+0x44>
 80185fe:	f004 040f 	and.w	r4, r4, #15
 8018602:	3701      	adds	r7, #1
 8018604:	2c03      	cmp	r4, #3
 8018606:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 801860a:	d90d      	bls.n	8018628 <memset+0x7c>
 801860c:	461e      	mov	r6, r3
 801860e:	4622      	mov	r2, r4
 8018610:	3a04      	subs	r2, #4
 8018612:	2a03      	cmp	r2, #3
 8018614:	f846 5b04 	str.w	r5, [r6], #4
 8018618:	d8fa      	bhi.n	8018610 <memset+0x64>
 801861a:	1f22      	subs	r2, r4, #4
 801861c:	f022 0203 	bic.w	r2, r2, #3
 8018620:	3204      	adds	r2, #4
 8018622:	4413      	add	r3, r2
 8018624:	f004 0403 	and.w	r4, r4, #3
 8018628:	b12c      	cbz	r4, 8018636 <memset+0x8a>
 801862a:	b2c9      	uxtb	r1, r1
 801862c:	441c      	add	r4, r3
 801862e:	f803 1b01 	strb.w	r1, [r3], #1
 8018632:	42a3      	cmp	r3, r4
 8018634:	d1fb      	bne.n	801862e <memset+0x82>
 8018636:	bcf0      	pop	{r4, r5, r6, r7}
 8018638:	4770      	bx	lr
 801863a:	4614      	mov	r4, r2
 801863c:	4603      	mov	r3, r0
 801863e:	e7c6      	b.n	80185ce <memset+0x22>

08018640 <strcat>:
 8018640:	0783      	lsls	r3, r0, #30
 8018642:	b570      	push	{r4, r5, r6, lr}
 8018644:	4606      	mov	r6, r0
 8018646:	d11f      	bne.n	8018688 <strcat+0x48>
 8018648:	6803      	ldr	r3, [r0, #0]
 801864a:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 801864e:	ea22 0303 	bic.w	r3, r2, r3
 8018652:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8018656:	bf08      	it	eq
 8018658:	1d03      	addeq	r3, r0, #4
 801865a:	d115      	bne.n	8018688 <strcat+0x48>
 801865c:	4618      	mov	r0, r3
 801865e:	f853 4b04 	ldr.w	r4, [r3], #4
 8018662:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 8018666:	ea25 0404 	bic.w	r4, r5, r4
 801866a:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 801866e:	d0f5      	beq.n	801865c <strcat+0x1c>
 8018670:	7803      	ldrb	r3, [r0, #0]
 8018672:	b12b      	cbz	r3, 8018680 <strcat+0x40>
 8018674:	1c43      	adds	r3, r0, #1
 8018676:	4618      	mov	r0, r3
 8018678:	3301      	adds	r3, #1
 801867a:	7804      	ldrb	r4, [r0, #0]
 801867c:	2c00      	cmp	r4, #0
 801867e:	d1fa      	bne.n	8018676 <strcat+0x36>
 8018680:	f000 f804 	bl	801868c <strcpy>
 8018684:	4630      	mov	r0, r6
 8018686:	bd70      	pop	{r4, r5, r6, pc}
 8018688:	4630      	mov	r0, r6
 801868a:	e7f1      	b.n	8018670 <strcat+0x30>

0801868c <strcpy>:
 801868c:	ea80 0201 	eor.w	r2, r0, r1
 8018690:	4684      	mov	ip, r0
 8018692:	f012 0f03 	tst.w	r2, #3
 8018696:	d14f      	bne.n	8018738 <strcpy+0xac>
 8018698:	f011 0f03 	tst.w	r1, #3
 801869c:	d132      	bne.n	8018704 <strcpy+0x78>
 801869e:	f84d 4d04 	str.w	r4, [sp, #-4]!
 80186a2:	f011 0f04 	tst.w	r1, #4
 80186a6:	f851 3b04 	ldr.w	r3, [r1], #4
 80186aa:	d00b      	beq.n	80186c4 <strcpy+0x38>
 80186ac:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 80186b0:	439a      	bics	r2, r3
 80186b2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80186b6:	bf04      	itt	eq
 80186b8:	f84c 3b04 	streq.w	r3, [ip], #4
 80186bc:	f851 3b04 	ldreq.w	r3, [r1], #4
 80186c0:	d116      	bne.n	80186f0 <strcpy+0x64>
 80186c2:	bf00      	nop
 80186c4:	f851 4b04 	ldr.w	r4, [r1], #4
 80186c8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 80186cc:	439a      	bics	r2, r3
 80186ce:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80186d2:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 80186d6:	d10b      	bne.n	80186f0 <strcpy+0x64>
 80186d8:	f84c 3b04 	str.w	r3, [ip], #4
 80186dc:	43a2      	bics	r2, r4
 80186de:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80186e2:	bf04      	itt	eq
 80186e4:	f851 3b04 	ldreq.w	r3, [r1], #4
 80186e8:	f84c 4b04 	streq.w	r4, [ip], #4
 80186ec:	d0ea      	beq.n	80186c4 <strcpy+0x38>
 80186ee:	4623      	mov	r3, r4
 80186f0:	f80c 3b01 	strb.w	r3, [ip], #1
 80186f4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80186f8:	ea4f 2333 	mov.w	r3, r3, ror #8
 80186fc:	d1f8      	bne.n	80186f0 <strcpy+0x64>
 80186fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018702:	4770      	bx	lr
 8018704:	f011 0f01 	tst.w	r1, #1
 8018708:	d006      	beq.n	8018718 <strcpy+0x8c>
 801870a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801870e:	f80c 2b01 	strb.w	r2, [ip], #1
 8018712:	2a00      	cmp	r2, #0
 8018714:	bf08      	it	eq
 8018716:	4770      	bxeq	lr
 8018718:	f011 0f02 	tst.w	r1, #2
 801871c:	d0bf      	beq.n	801869e <strcpy+0x12>
 801871e:	f831 2b02 	ldrh.w	r2, [r1], #2
 8018722:	f012 0fff 	tst.w	r2, #255	; 0xff
 8018726:	bf16      	itet	ne
 8018728:	f82c 2b02 	strhne.w	r2, [ip], #2
 801872c:	f88c 2000 	strbeq.w	r2, [ip]
 8018730:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 8018734:	d1b3      	bne.n	801869e <strcpy+0x12>
 8018736:	4770      	bx	lr
 8018738:	f811 2b01 	ldrb.w	r2, [r1], #1
 801873c:	f80c 2b01 	strb.w	r2, [ip], #1
 8018740:	2a00      	cmp	r2, #0
 8018742:	d1f9      	bne.n	8018738 <strcpy+0xac>
 8018744:	4770      	bx	lr
 8018746:	bf00      	nop
 8018748:	7665642f 	.word	0x7665642f
 801874c:	6d6f722f 	.word	0x6d6f722f
 8018750:	00000030 	.word	0x00000030
 8018754:	0000002f 	.word	0x0000002f
 8018758:	666d6f72 	.word	0x666d6f72
 801875c:	00000073 	.word	0x00000073

08018760 <cmd_data>:
 8018760:	6f686365 00000000 00000000 00000000     echo............
 8018770:	00000000 08001ff1 776f6853 726f7720     ........Show wor
 8018780:	79207364 6920756f 7475706e 0000002e     ds you input....
	...
 8018b78:	6f707865 00007472 00000000 00000000     export..........
 8018b88:	00000000 08001c51 6f707845 65207472     ....Q...Export e
 8018b98:	7269766e 656d6e6f 7620746e 61697261     nvironment varia
 8018ba8:	73656c62 0000002e 00000000 00000000     bles............
	...
 8018f90:	706c6568 00000000 00000000 00000000     help............
 8018fa0:	00000000 08001f01 7473694c 6c6c6120     ........List all
 8018fb0:	6d6f6320 646e616d 6f792073 61632075      commands you ca
 8018fc0:	7375206e 00002e65 00000000 00000000     n use...........
	...
 80193a8:	74736968 0079726f 00000000 00000000     history.........
 80193b8:	00000000 080021d1 776f6853 74616c20     .....!..Show lat
 80193c8:	20747365 6d6d6f63 73646e61 746e6520     est commands ent
 80193d8:	64657265 0000002e 00000000 00000000     ered............
	...
 80197c0:	006e616d 00000000 00000000 00000000     man.............
 80197d0:	00000000 080020c1 756e614d 70206c61     ..... ..Manual p
 80197e0:	72656761 0000002e 00000000 00000000     ager............
	...
 8019bd8:	00007370 00000000 00000000 00000000     ps..............
 8019be8:	00000000 08001d25 7473694c 6c6c6120     ....%...List all
 8019bf8:	65687420 6f727020 73736563 002e7365      the processes..
	...
 8019ff0:	00647878 00000000 00000000 00000000     xxd.............
 801a000:	00000000 08002331 656b614d 68206120     ....1#..Make a h
 801a010:	75647865 002e706d 00000000 00000000     exdump..........
	...
 801a408:	7665642f 7974742f 756f2f30 00000074     /dev/tty0/out...
 801a418:	7665642f 7974742f 6e692f30 00000000     /dev/tty0/in....
 801a428:	6c6c6548 57202c6f 646c726f 00000a21     Hello, World!...
 801a438:	706d742f 75716d2f 2f657565 0074756f     /tmp/mqueue/out.
 801a448:	6c6c6548 0a31206f 00000000 6c6c6548     Hello 1.....Hell
 801a458:	0a32206f 00000000 3a746f47 00000000     o 2.....Got:....
 801a468:	00082008 6e656873 6e657767 65687340     . ..shengwen@she
 801a478:	6577676e 54532d6e 3a32334d 0020247e     ngwen-STM32:~$ .
 801a488:	6f63203a 6e616d6d 6f6e2064 6f662074     : command not fo
 801a498:	00646e75 20444950 54415453 50205355     und.PID STATUS P
 801a4a8:	524f4952 00595449 33323130 37363534     RIORITY.01234567
 801a4b8:	42413938 46454443 00000000 0000203a     89ABCDEF....: ..
 801a4c8:	73696854 73797320 206d6574 20736168     This system has 
 801a4d8:	6d6d6f63 73646e61 20736120 6c6c6f66     commands as foll
 801a4e8:	0d0a776f 00000000 00006e2d 00000020     ow......-n.. ...
 801a4f8:	454d414e 0000203a 43534544 54504952     NAME: ..DESCRIPT
 801a508:	3a4e4f49 00000020 33323130 37363534     ION: ...01234567
 801a518:	62613938 66656463 00000000 3a647878     89abcdef....xxd:
 801a528:	00000020 6f4e203a 63757320 69662068      ...: No such fi
 801a538:	6f20656c 69642072 74636572 0d79726f     le or directory.
 801a548:	0000000a 0000003a 00002020 00000a0d     ....:...  ......
 801a558:	7379732f 7461702f 72657368 00726576     /sys/pathserver.
 801a568:	7665642f 6d6f722f 00000030 666d6f72     /dev/rom0...romf
 801a578:	00000073 7778797a 73747576 6f707172     s...zyxwvutsrqpo
 801a588:	6b6c6d6e 6768696a 63646566 38396162     nmlkjihgfedcba98
 801a598:	34353637 30313233 34333231 38373635     7654321012345678
 801a5a8:	63626139 67666564 6b6a6968 6f6e6d6c     9abcdefghijklmno
 801a5b8:	73727170 77767574 007a7978              pqrstuvwxyz.

0801a5c4 <GPIO_PIN>:
 801a5c4:	40002000                                . .@

0801a5c8 <GPIO_CLK>:
 801a5c8:	00000040 00000040                       @...@...

0801a5d0 <BUTTON_PIN>:
 801a5d0:	00000001                                ....

0801a5d4 <BUTTON_CLK>:
 801a5d4:	00000001                                ....

0801a5d8 <BUTTON_EXTI_LINE>:
 801a5d8:	00000001                                ....

0801a5dc <BUTTON_PORT_SOURCE>:
 801a5dc:	00000000                                ....

0801a5e0 <BUTTON_PIN_SOURCE>:
 801a5e0:	00000000                                ....

0801a5e4 <BUTTON_IRQn>:
 801a5e4:	00000006                                ....

0801a5e8 <ASCII16x24_Table>:
	...
 801a618:	01800000 01800180 01800180 01800180     ................
 801a628:	01800180 01800180 01800180 00000000     ................
 801a638:	01800180 00000000 00000000 00000000     ................
 801a648:	00000000 00cc00cc 00cc00cc 00cc00cc     ................
	...
 801a684:	0c600c60 06300c60 1ffe0630 06301ffe     `.`.`.0.0.....0.
 801a694:	03180738 1ffe1ffe 03180318 018c018c     8...............
 801a6a4:	0000018c 00800000 0ff803e0 1c8c0e9c     ................
 801a6b4:	008c188c 01f80098 0e8007e0 188c1c80     ................
 801a6c4:	189c188c 0ff00cb8 008003e0 00000080     ................
	...
 801a6dc:	180e0000 0c110c1b 06110611 03110311     ................
 801a6ec:	018e019b 6cc038c0 44604460 44304430     .....8.l`D`D0D0D
 801a6fc:	6c184418 0000380c 00000000 01e00000     .D.l.8..........
 801a70c:	073803f0 06180618 01f00330 00f800f0     ..8.....0.......
 801a71c:	330e319c 1c061e06 3f061c06 21f073fc     .1.3.......?.s.!
	...
 801a73c:	000c000c 000c000c 000c000c 00000000     ................
	...
 801a768:	02000000 01800300 00c000c0 00600060     ............`.`.
 801a778:	00300030 00300030 00300030 00300030     0.0.0.0.0.0.0.0.
 801a788:	00600060 00c000c0 03000180 00000200     `.`.............
 801a798:	00200000 00c00060 01800180 03000300     .. .`...........
 801a7a8:	06000600 06000600 06000600 06000600     ................
 801a7b8:	03000300 01800180 006000c0 00000020     ..........`. ...
	...
 801a7d4:	00c000c0 07f806d8 033001e0 00000738     ..........0.8...
	...
 801a804:	01800180 01800180 3ffc0180 01803ffc     ...........?.?..
 801a814:	01800180 01800180 00000000 00000000     ................
	...
 801a848:	01800000 01000180 00800100 00000000     ................
	...
 801a870:	07e007e0 00000000 00000000 00000000     ................
	...
 801a8a8:	00c00000 000000c0 00000000 00000000     ................
 801a8b8:	0c000000 06000c00 06000600 03000300     ................
 801a8c8:	03800300 01800180 00c00180 00c000c0     ................
 801a8d8:	00600060 00000000 00000000 00000000     `.`.............
 801a8e8:	03e00000 0e3807f0 180c0c18 180c180c     ......8.........
 801a8f8:	180c180c 180c180c 180c180c 0e380c18     ..............8.
 801a908:	03e007f0 00000000 00000000 00000000     ................
 801a918:	01000000 01c00180 019801f0 01800188     ................
 801a928:	01800180 01800180 01800180 01800180     ................
 801a938:	01800180 00000000 00000000 00000000     ................
 801a948:	03e00000 0c180ff8 180c180c 18001800     ................
 801a958:	06000c00 01800300 006000c0 00180030     ..........`.0...
 801a968:	1ffc1ffc 00000000 00000000 00000000     ................
 801a978:	01e00000 0e1807f8 0c0c0c0c 06000c00     ................
 801a988:	07c003c0 18000c00 180c1800 0c18180c     ................
 801a998:	03e007f8 00000000 00000000 00000000     ................
 801a9a8:	0c000000 0f000e00 0d800f00 0c600cc0     ..............`.
 801a9b8:	0c300c60 0c0c0c18 3ffc3ffc 0c000c00     `.0......?.?....
 801a9c8:	0c000c00 00000000 00000000 00000000     ................
 801a9d8:	0ff80000 00180ff8 000c0018 07fc03ec     ................
 801a9e8:	1c000e1c 18001800 180c1800 0e180c1c     ................
 801a9f8:	03e007f8 00000000 00000000 00000000     ................
 801aa08:	07c00000 1c380ff0 00181818 03cc000c     ......8.........
 801aa18:	0e3c0fec 180c1c1c 180c180c 0e381c18     ..<...........8.
 801aa28:	03e007f0 00000000 00000000 00000000     ................
 801aa38:	1ffc0000 0c001ffc 06000600 03800300     ................
 801aa48:	01c00180 00e000c0 00600060 00300070     ........`.`.p.0.
 801aa58:	00300030 00000000 00000000 00000000     0.0.............
 801aa68:	03e00000 0e3807f0 0c180c18 06380c18     ......8.......8.
 801aa78:	07f007f0 180c0c18 180c180c 0c38180c     ..............8.
 801aa88:	03e00ff8 00000000 00000000 00000000     ................
 801aa98:	03e00000 0e3807f0 180c0c1c 180c180c     ......8.........
 801aaa8:	1e381c1c 19e01bf8 0c001800 0e1c0c00     ..8.............
 801aab8:	01f007f8 00000000 00000000 00000000     ................
	...
 801aad4:	01800180 00000000 00000000 00000000     ................
 801aae4:	00000000 01800180 00000000 00000000     ................
	...
 801ab04:	01800180 00000000 00000000 00000000     ................
 801ab14:	00000000 01800180 01000100 00000080     ................
	...
 801ab38:	1c001000 03e00f80 001800f8 03e000f8     ................
 801ab48:	1c000f80 00001000 00000000 00000000     ................
	...
 801ab68:	00001ff8 00000000 00001ff8 00000000     ................
	...
 801ab98:	00380008 07c001f0 18001f00 07c01f00     ..8.............
 801aba8:	003801f0 00000008 00000000 00000000     ..8.............
 801abb8:	03e00000 0c180ff8 180c180c 0c001800     ................
 801abc8:	03000600 00c00180 00c000c0 00000000     ................
 801abd8:	00c000c0 00000000 00000000 00000000     ................
 801abe8:	00000000 181807e0 29c22004 44114a22     ......... .)"J.D
 801abf8:	44094409 22094409 0ce21311 20044002     .D.D.D.".....@. 
 801ac08:	07e01818 00000000 00000000 00000000     ................
 801ac18:	03800000 06c00380 06c006c0 0c600c60     ............`.`.
 801ac28:	18301830 3ff81830 701c3ff8 600c600c     0.0.0..?.?.p.`.`
 801ac38:	c006c006 00000000 00000000 00000000     ................
 801ac48:	03fc0000 0c0c0ffc 180c180c 0c0c180c     ................
 801ac58:	0ffc07fc 300c180c 300c300c 180c300c     .......0.0.0.0..
 801ac68:	07fc1ffc 00000000 00000000 00000000     ................
 801ac78:	07c00000 38381ff0 700c301c 00066006     ......88.0.p.`..
 801ac88:	00060006 00060006 60060006 301c700c     ...........`.p.0
 801ac98:	07e01ff0 00000000 00000000 00000000     ................
 801aca8:	03fe0000 0e060ffe 18061806 30063006     .............0.0
 801acb8:	30063006 30063006 18063006 0e061806     .0.0.0.0.0......
 801acc8:	03fe0ffe 00000000 00000000 00000000     ................
 801acd8:	3ffc0000 000c3ffc 000c000c 000c000c     ...?.?..........
 801ace8:	1ffc1ffc 000c000c 000c000c 000c000c     ................
 801acf8:	3ffc3ffc 00000000 00000000 00000000     .?.?............
 801ad08:	3ff80000 00183ff8 00180018 00180018     ...?.?..........
 801ad18:	1ff81ff8 00180018 00180018 00180018     ................
 801ad28:	00180018 00000000 00000000 00000000     ................
 801ad38:	0fe00000 783c3ff8 e006600e 0003c007     .....?<x.`......
 801ad48:	fe030003 c003fe03 c006c007 f03cc00e     ..............<.
 801ad58:	0fe03ff8 00000000 00000000 00000000     .?..............
 801ad68:	300c0000 300c300c 300c300c 300c300c     ...0.0.0.0.0.0.0
 801ad78:	3ffc3ffc 300c300c 300c300c 300c300c     .?.?.0.0.0.0.0.0
 801ad88:	300c300c 00000000 00000000 00000000     .0.0............
 801ad98:	01800000 01800180 01800180 01800180     ................
 801ada8:	01800180 01800180 01800180 01800180     ................
 801adb8:	01800180 00000000 00000000 00000000     ................
 801adc8:	06000000 06000600 06000600 06000600     ................
 801add8:	06000600 06000600 06180600 07380618     ..............8.
 801ade8:	01e003f0 00000000 00000000 00000000     ................
 801adf8:	30060000 0c061806 03060606 00c60186     ...0............
 801ae08:	00760066 018e00de 06060306 18060c06     f.v.............
 801ae18:	60063006 00000000 00000000 00000000     .0.`............
 801ae28:	00180000 00180018 00180018 00180018     ................
 801ae38:	00180018 00180018 00180018 00180018     ................
 801ae48:	1ff81ff8 00000000 00000000 00000000     ................
 801ae58:	e00e0000 f01ef01e d836f01e d836d836     ..........6.6.6.
 801ae68:	cc66d836 cc66cc66 c6c6c6c6 c6c6c6c6     6.f.f.f.........
 801ae78:	c386c386 00000000 00000000 00000000     ................
 801ae88:	300c0000 303c301c 306c303c 30cc306c     ...0.0<0<0l0l0.0
 801ae98:	318c30cc 330c330c 360c360c 3c0c3c0c     .0.1.3.3.6.6.<.<
 801aea8:	300c380c 00000000 00000000 00000000     .8.0............
 801aeb8:	07e00000 381c1ff8 6006700e c003c003     .......8.p.`....
 801aec8:	c003c003 c003c003 6006c003 381c700e     ...........`.p.8
 801aed8:	07e01ff8 00000000 00000000 00000000     ................
 801aee8:	0ffc0000 380c1ffc 300c300c 300c300c     .......8.0.0.0.0
 801aef8:	1ffc180c 000c07fc 000c000c 000c000c     ................
 801af08:	000c000c 00000000 00000000 00000000     ................
 801af18:	07e00000 381c1ff8 6006700e c003e003     .......8.p.`....
 801af28:	c003c003 c003c003 6306e007 3c1c3f0e     ...........c.?.<
 801af38:	f7e03ff8 0000c000 00000000 00000000     .?..............
 801af48:	0ffe0000 38061ffe 30063006 38063006     .......8.0.0.0.8
 801af58:	07fe1ffe 06060306 18060c06 30061806     ...............0
 801af68:	60063006 00000000 00000000 00000000     .0.`............
 801af78:	03e00000 0c1c0ff8 180c180c 001c000c     ................
 801af88:	0fe003f8 38001e00 30063006 1c1c300e     .......8.0.0.0..
 801af98:	07e00ff8 00000000 00000000 00000000     ................
 801afa8:	7ffe0000 01807ffe 01800180 01800180     ................
 801afb8:	01800180 01800180 01800180 01800180     ................
 801afc8:	01800180 00000000 00000000 00000000     ................
 801afd8:	300c0000 300c300c 300c300c 300c300c     ...0.0.0.0.0.0.0
 801afe8:	300c300c 300c300c 300c300c 1818300c     .0.0.0.0.0.0.0..
 801aff8:	07e01ff8 00000000 00000000 00000000     ................
 801b008:	60030000 30063006 180c3006 180c180c     ...`.0.0.0......
 801b018:	0c180c18 06300e38 07700630 03600360     ....8.0.0.p.`.`.
 801b028:	01c001c0 00000000 00000000 00000000     ................
 801b038:	60030000 61c361c3 336661c3 33663366     ...`.a.a.af3f3f3
 801b048:	33663366 1b6c3366 1b6c1b6c 1e3c1a2c     f3f3f3l.l.l.,.<.
 801b058:	0e380e38 00000000 00000000 00000000     8.8.............
 801b068:	e00f0000 3018700c 0c701830 07c00e60     .....p.00.p.`...
 801b078:	03800380 06e003c0 1c300c70 300c1818     ........p.0....0
 801b088:	e007600e 00000000 00000000 00000000     .`..............
 801b098:	c0030000 300c6006 1838381c 06600c30     .....`.0.88.0.`.
 801b0a8:	03c007e0 01800180 01800180 01800180     ................
 801b0b8:	01800180 00000000 00000000 00000000     ................
 801b0c8:	7ffc0000 60007ffc 18003000 06000c00     .......`.0......
 801b0d8:	01800300 006000c0 00180030 0006000c     ......`.0.......
 801b0e8:	7ffe7ffe 00000000 00000000 00000000     ................
 801b0f8:	03e00000 006003e0 00600060 00600060     ......`.`.`.`.`.
 801b108:	00600060 00600060 00600060 00600060     `.`.`.`.`.`.`.`.
 801b118:	00600060 00600060 03e00060 000003e0     `.`.`.`.`.......
 801b128:	00300000 00600030 00600060 00c000c0     ..0.0.`.`.`.....
 801b138:	01c000c0 01800180 03000180 03000300     ................
 801b148:	06000600 00000000 00000000 00000000     ................
 801b158:	03e00000 030003e0 03000300 03000300     ................
 801b168:	03000300 03000300 03000300 03000300     ................
 801b178:	03000300 03000300 03e00300 000003e0     ................
 801b188:	00000000 01c001c0 03600360 06300360     ........`.`.`.0.
 801b198:	0c180630 00000c18 00000000 00000000     0...............
	...
 801b1d8:	ffff0000 0000ffff 00000000 00000000     ................
 801b1e8:	000c0000 000c000c 000c000c 0000000c     ................
	...
 801b224:	07f803f0 0c0c0c1c 0ff00f00 0c0c0cf8     ................
 801b234:	0f1c0c0c 18f00ff8 00000000 00000000     ................
 801b244:	00000000 00180000 00180018 00180018     ................
 801b254:	0ff803d8 18180c38 18181818 18181818     ....8...........
 801b264:	0c381818 03d80ff8 00000000 00000000     ..8.............
	...
 801b284:	07f003c0 0c180e30 00180018 00180018     ....0...........
 801b294:	0e300c18 03c007f0 00000000 00000000     ..0.............
 801b2a4:	00000000 18000000 18001800 18001800     ................
 801b2b4:	1ff01bc0 18181c30 18181818 18181818     ....0...........
 801b2c4:	1c301818 1bc01ff0 00000000 00000000     ..0.............
	...
 801b2e4:	0ff003c0 18180c30 1ff81ff8 00180018     ....0...........
 801b2f4:	1c301838 07c00ff0 00000000 00000000     8.0.............
 801b304:	00000000 0f800000 00c00fc0 00c000c0     ................
 801b314:	07f007f0 00c000c0 00c000c0 00c000c0     ................
 801b324:	00c000c0 00c000c0 00000000 00000000     ................
	...
 801b344:	0ff80de0 0c0c0e18 0c0c0c0c 0c0c0c0c     ................
 801b354:	0e180c0c 0de00ff8 0c0c0c00 07f8061c     ................
 801b364:	000001f0 00180000 00180018 00180018     ................
 801b374:	0ff807d8 18181c38 18181818 18181818     ....8...........
 801b384:	18181818 18181818 00000000 00000000     ................
 801b394:	00000000 00c00000 000000c0 00000000     ................
 801b3a4:	00c000c0 00c000c0 00c000c0 00c000c0     ................
 801b3b4:	00c000c0 00c000c0 00000000 00000000     ................
 801b3c4:	00000000 00c00000 000000c0 00000000     ................
 801b3d4:	00c000c0 00c000c0 00c000c0 00c000c0     ................
 801b3e4:	00c000c0 00c000c0 00c000c0 00f800c0     ................
 801b3f4:	00000078 000c0000 000c000c 000c000c     x...............
 801b404:	060c0c0c 018c030c 006c00cc 019c00fc     ..........l.....
 801b414:	030c038c 0c0c060c 00000000 00000000     ................
 801b424:	00000000 00c00000 00c000c0 00c000c0     ................
 801b434:	00c000c0 00c000c0 00c000c0 00c000c0     ................
 801b444:	00c000c0 00c000c0 00000000 00000000     ................
	...
 801b464:	7eff3c7c c183e3c7 c183c183 c183c183     |<.~............
 801b474:	c183c183 c183c183 00000000 00000000     ................
	...
 801b494:	0ff80798 18181c38 18181818 18181818     ....8...........
 801b4a4:	18181818 18181818 00000000 00000000     ................
	...
 801b4c4:	0ff003c0 18180c30 18181818 18181818     ....0...........
 801b4d4:	0c301818 03c00ff0 00000000 00000000     ..0.............
	...
 801b4f4:	0ff803d8 18180c38 18181818 18181818     ....8...........
 801b504:	0c381818 03d80ff8 00180018 00180018     ..8.............
 801b514:	00000018 00000000 00000000 00000000     ................
 801b524:	1ff01bc0 18181c30 18181818 18181818     ....0...........
 801b534:	1c301818 1bc01ff0 18001800 18001800     ..0.............
 801b544:	00001800 00000000 00000000 00000000     ................
 801b554:	03f007b0 00300070 00300030 00300030     ....p.0.0.0.0.0.
 801b564:	00300030 00300030 00000000 00000000     0.0.0.0.........
	...
 801b584:	03f003e0 0c180e38 03f00038 0c0007c0     ....8...8.......
 801b594:	0e380c18 03e007f0 00000000 00000000     ..8.............
	...
 801b5ac:	00c00080 00c000c0 07f007f0 00c000c0     ................
 801b5bc:	00c000c0 00c000c0 00c000c0 078007c0     ................
	...
 801b5e4:	18181818 18181818 18181818 18181818     ................
 801b5f4:	1c381818 19e01ff0 00000000 00000000     ..8.............
	...
 801b614:	0c18180c 0c180c18 06300630 03600630     ........0.0.0.`.
 801b624:	03600360 01c001c0 00000000 00000000     `.`.............
	...
 801b644:	41c141c1 636361c3 63636363 36363636     .A.A.acccccc6666
 801b654:	1c1c3636 1c1c1c1c 00000000 00000000     66..............
	...
 801b674:	1c38381c 06600c30 03600360 03600360     .88.0.`.`.`.`.`.
 801b684:	0c300660 381c1c38 00000000 00000000     `.0.8..8........
	...
 801b6a4:	18303018 18701830 0c600c60 06c00ce0     .00.0.p.`.`.....
 801b6b4:	038006c0 03800380 01800180 00f001c0     ................
 801b6c4:	00000070 00000000 00000000 00000000     p...............
 801b6d4:	1ffc1ffc 06000c00 01800300 006000c0     ..............`.
 801b6e4:	00180030 1ffc1ffc 00000000 00000000     0...............
 801b6f4:	00000000 03000000 00c00180 00c000c0     ................
 801b704:	00c000c0 006000c0 00300060 00400060     ......`.`.0.`.@.
 801b714:	00c000c0 00c000c0 00c000c0 03000180     ................
 801b724:	00000000 01800000 01800180 01800180     ................
 801b734:	01800180 01800180 01800180 01800180     ................
 801b744:	01800180 01800180 01800180 01800180     ................
 801b754:	00000180 00600000 01c000c0 01800180     ......`.........
 801b764:	01800180 03000180 06000300 01000300     ................
 801b774:	01800180 01800180 01800180 006000c0     ..............`.
	...
 801b798:	1ff810f0 00000f08 00000000 00000000     ................
	...

0801b7b8 <ASCII12x12_Table>:
	...
 801b7d0:	20000000 20002000 20002000 20002000     ... . . . . . . 
 801b7e0:	20000000 00000000 50000000 50005000     ... .......P.P.P
	...
 801b800:	09000000 12000900 12007f00 12007f00     ................
 801b810:	24002400 00000000 38001000 50005400     .$.$.......8.T.P
 801b820:	38005000 54001400 38005400 00001000     .P.8...T.T.8....
 801b830:	30800000 49004900 32c04a00 09200520     ...0.I.I.J.2 . .
 801b840:	10c00920 00000000 0c000000 12001200      ...............
 801b850:	18001400 23002500 1d802300 00000000     .....%.#.#......
 801b860:	40000000 40004000 00000000 00000000     ...@.@.@........
	...
 801b878:	08000000 10001000 20002000 20002000     ......... . . . 
 801b888:	20002000 10001000 40000000 20002000     . . .......@. . 
 801b898:	10001000 10001000 10001000 20002000     ............. . 
 801b8a8:	20000000 20007000 00005000 00000000     ... .p. .P......
	...
 801b8c4:	08000000 7f000800 08000800 00000000     ................
	...
 801b8e8:	20000000 40002000 00000000 00000000     ... . .@........
 801b8f8:	00000000 00007000 00000000 00000000     .....p..........
	...
 801b918:	20000000 00000000 10000000 10001000     ... ............
 801b928:	20002000 20002000 40004000 00000000     . . . . .@.@....
 801b938:	10000000 44002800 44004400 44004400     .....(.D.D.D.D.D
 801b948:	10002800 00000000 10000000 50003000     .(...........0.P
 801b958:	10001000 10001000 10001000 00000000     ................
 801b968:	30000000 44004800 08000400 20001000     ...0.H.D....... 
 801b978:	7c004000 00000000 30000000 04004800     .@.|.......0.H..
 801b988:	10000800 44000800 30004800 00000000     .......D.H.0....
 801b998:	08000000 18001800 28002800 7c004800     .........(.(.H.|
 801b9a8:	08000800 00000000 3c000000 40002000     ...........<. .@
 801b9b8:	48007000 44000400 30004800 00000000     .p.H...D.H.0....
 801b9c8:	18000000 40002400 68005000 44004400     .....$.@.P.h.D.D
 801b9d8:	10002800 00000000 7c000000 08000400     .(.........|....
 801b9e8:	10001000 20001000 20002000 00000000     ....... . . ....
 801b9f8:	10000000 44002800 10002800 44002800     .....(.D.(...(.D
 801ba08:	10002800 00000000 10000000 44002800     .(...........(.D
 801ba18:	2c004400 04001400 30004800 00000000     .D.,.....H.0....
 801ba28:	00000000 20000000 00000000 00000000     ....... ........
 801ba38:	20000000 00000000 00000000 20000000     ... ........... 
	...
 801ba50:	20000000 40002000 00000000 08000400     ... . .@........
 801ba60:	40003000 08003000 00000400 00000000     .0.@.0..........
 801ba70:	00000000 7c000000 00000000 00007c00     .......|.....|..
	...
 801ba8c:	20004000 04001800 20001800 00004000     .@. ....... .@..
 801ba9c:	00000000 38000000 44006400 08000400     .......8.d.D....
 801baac:	10001000 10000000 00000000 0f800000     ................
 801babc:	2ea01040 512051a0 51205120 4dc05320     @....Q Q Q Q S.M
 801bacc:	10402020 08000000 14001400 22001400       @............"
 801badc:	22003e00 41004100 00000000 3c000000     .>.".A.A.......<
 801baec:	22002200 3c002200 22002200 3c002200     .".".".<.".".".<
 801bafc:	00000000 0e000000 21001100 20002000     ...........!. . 
 801bb0c:	21002000 0e001100 00000000 3c000000     . .!...........<
 801bb1c:	21002200 21002100 21002100 3c002200     .".!.!.!.!.!.".<
 801bb2c:	00000000 3e000000 20002000 3e002000     .......>. . . .>
 801bb3c:	20002000 3e002000 00000000 3e000000     . . . .>.......>
 801bb4c:	20002000 3c002000 20002000 20002000     . . . .<. . . . 
 801bb5c:	00000000 0e000000 21001100 27002000     ...........!. .'
 801bb6c:	21002100 0e001100 00000000 21000000     .!.!...........!
 801bb7c:	21002100 3f002100 21002100 21002100     .!.!.!.?.!.!.!.!
 801bb8c:	00000000 20000000 20002000 20002000     ....... . . . . 
 801bb9c:	20002000 20002000 00000000 08000000     . . . . ........
 801bbac:	08000800 08000800 48000800 30004800     ...........H.H.0
 801bbbc:	00000000 22000000 28002400 38002800     .......".$.(.(.8
 801bbcc:	24002800 22002400 00000000 20000000     .(.$.$."....... 
 801bbdc:	20002000 20002000 20002000 3e002000     . . . . . . . .>
 801bbec:	00000000 20800000 31803180 2a803180     ....... .1.1.1.*
 801bbfc:	2a802a80 24802a80 00000000 21000000     .*.*.*.$.......!
 801bc0c:	31003100 29002900 23002500 21002300     .1.1.).).%.#.#.!
 801bc1c:	00000000 0c000000 21001200 21002100     ...........!.!.!
 801bc2c:	21002100 0c001200 00000000 3c000000     .!.!...........<
 801bc3c:	22002200 3c002200 20002000 20002000     .".".".<. . . . 
 801bc4c:	00000000 0c000000 21001200 21002100     ...........!.!.!
 801bc5c:	21002100 0d001600 00000100 3e000000     .!.!...........>
 801bc6c:	21002100 3e002100 22002400 20802100     .!.!.!.>.$.".!. 
 801bc7c:	00000000 1c000000 22002200 1c002000     .........".". ..
 801bc8c:	22000200 1c002200 00000000 3e000000     ...".".........>
 801bc9c:	08000800 08000800 08000800 08000800     ................
 801bcac:	00000000 21000000 21002100 21002100     .......!.!.!.!.!
 801bcbc:	21002100 0c001200 00000000 41000000     .!.!...........A
 801bccc:	22004100 22002200 14001400 08001400     .A."."."........
 801bcdc:	00000000 44400000 2a404a40 2a802a80     ......@D@J@*.*.*
 801bcec:	2a802a80 11002a80 00000000 41000000     .*.*.*.........A
 801bcfc:	14002200 08001400 14001400 41002200     ."...........".A
 801bd0c:	00000000 41000000 22002200 08001400     .......A."."....
 801bd1c:	08000800 08000800 00000000 7e000000     ...............~
 801bd2c:	04000200 10000800 20001000 7e004000     ........... .@.~
 801bd3c:	00000000 30000000 20002000 20002000     .......0. . . . 
 801bd4c:	20002000 20002000 20002000 40000000     . . . . . . ...@
 801bd5c:	20004000 20002000 20002000 10001000     .@. . . . . ....
 801bd6c:	00000000 60000000 20002000 20002000     .......`. . . . 
 801bd7c:	20002000 20002000 20002000 10000000     . . . . . . ....
 801bd8c:	28002800 44002800 00000000 00000000     .(.(.(.D........
	...
 801bdb4:	7e000000 20004000 00000000 00000000     ...~.@. ........
	...
 801bdd4:	38000000 04004400 44003c00 3c004400     ...8.D...<.D.D.<
 801bde4:	00000000 40000000 58004000 44006400     .......@.@.X.d.D
 801bdf4:	44004400 58006400 00000000 00000000     .D.D.d.X........
 801be04:	30000000 40004800 40004000 30004800     ...0.H.@.@.@.H.0
 801be14:	00000000 04000000 34000400 44004c00     ...........4.L.D
 801be24:	44004400 34004c00 00000000 00000000     .D.D.L.4........
 801be34:	38000000 44004400 40007c00 38004400     ...8.D.D.|.@.D.8
 801be44:	00000000 60000000 e0004000 40004000     .......`.@...@.@
 801be54:	40004000 40004000 00000000 00000000     .@.@.@.@........
 801be64:	34000000 44004c00 44004400 34004c00     ...4.L.D.D.D.L.4
 801be74:	44000400 40000000 58004000 44006400     ...D...@.@.X.d.D
 801be84:	44004400 44004400 00000000 40000000     .D.D.D.D.......@
 801be94:	40000000 40004000 40004000 40004000     ...@.@.@.@.@.@.@
 801bea4:	00000000 40000000 40000000 40004000     .......@...@.@.@
 801beb4:	40004000 40004000 40004000 40000000     .@.@.@.@.@.@...@
 801bec4:	48004000 60005000 50005000 48004800     .@.H.P.`.P.P.H.H
 801bed4:	00000000 40000000 40004000 40004000     .......@.@.@.@.@
 801bee4:	40004000 40004000 00000000 00000000     .@.@.@.@........
 801bef4:	52000000 49006d00 49004900 49004900     ...R.m.I.I.I.I.I
	...
 801bf0c:	58000000 44006400 44004400 44004400     ...X.d.D.D.D.D.D
	...
 801bf24:	38000000 44004400 44004400 38004400     ...8.D.D.D.D.D.8
	...
 801bf3c:	58000000 44006400 44004400 58006400     ...X.d.D.D.D.d.X
 801bf4c:	40004000 00000000 34000000 44004c00     .@.@.......4.L.D
 801bf5c:	44004400 34004c00 04000400 00000000     .D.D.L.4........
 801bf6c:	50000000 40006000 40004000 40004000     ...P.`.@.@.@.@.@
	...
 801bf84:	30000000 40004800 08003000 30004800     ...0.H.@.0...H.0
 801bf94:	00000000 40000000 e0004000 40004000     .......@.@...@.@
 801bfa4:	40004000 60004000 00000000 00000000     .@.@.@.`........
 801bfb4:	44000000 44004400 44004400 34004c00     ...D.D.D.D.D.L.4
	...
 801bfcc:	44000000 28004400 28002800 10002800     ...D.D.(.(.(.(..
	...
 801bfe4:	49000000 55004900 55005500 22005500     ...I.I.U.U.U.U."
	...
 801bffc:	44000000 28002800 28001000 44002800     ...D.(.(...(.(.D
	...
 801c014:	44000000 28004400 28002800 10001000     ...D.D.(.(.(....
 801c024:	10001000 00000000 78000000 10000800     ...........x....
 801c034:	20002000 78004000 00000000 10000000     . . .@.x........
 801c044:	20002000 20002000 20004000 20002000     . . . . .@. . . 
 801c054:	20002000 20000000 20002000 20002000     . . ... . . . . 
 801c064:	20002000 20002000 20002000 40000000     . . . . . . ...@
 801c074:	20002000 20002000 20001000 20002000     . . . . ... . . 
 801c084:	20002000 00000000 00000000 58007400     . . .........t.X
	...
 801c0a4:	50007000 50005000 50005000 70005000     .p.P.P.P.P.P.P.p
 801c0b4:	00000000                                ....

0801c0b8 <ASCII8x12_Table>:
	...
 801c0d4:	00100000 00100010 00100010 00000010     ................
 801c0e4:	00000010 00000000 00280000 00280028     ..........(.(.(.
	...
 801c104:	00140000 003e0014 00280014 0028007c     ......>...(.|.(.
 801c114:	00000028 00000000 00380010 00500054     (.........8.T.P.
 801c124:	00140038 00540014 00100038 00000000     8.....T.8.......
 801c134:	00440000 00a800a8 00140050 002a001a     ..D.....P.....*.
 801c144:	00000024 00000000 00200000 00500050     $......... .P.P.
 801c154:	00e80020 00980098 00000060 00000000      .......`.......
 801c164:	00800000 00800080 00000000 00000000     ................
	...
 801c17c:	00400000 00800080 00800080 00800080     ..@.............
 801c18c:	00800080 00000000 00800000 00400040     ............@.@.
 801c19c:	00400040 00400040 00400040 00000000     @.@.@.@.@.@.....
 801c1ac:	00400000 004000e0 000000a0 00000000     ..@...@.........
	...
 801c1c8:	00200000 00f80020 00200020 00000000     .. . ... . .....
	...
 801c1ec:	00400040 00000000 00000000 00000000     @.@.............
 801c1fc:	00000000 000000c0 00000000 00000000     ................
	...
 801c21c:	00000040 00000000 00200000 00200020     @......... . . .
 801c22c:	00400040 00800080 00000080 00000000     @.@.............
 801c23c:	00600000 00900090 00900090 00900090     ..`.............
 801c24c:	00000060 00000000 00200000 00a00060     `......... .`...
 801c25c:	00200020 00200020 00000020 00000000      . . . . .......
 801c26c:	00600000 00100090 00200010 00800040     ..`....... .@...
 801c27c:	000000f0 00000000 00600000 00100090     ..........`.....
 801c28c:	00100060 00900010 00000060 00000000     `.......`.......
 801c29c:	00100000 00500030 00900050 001000f8     ....0.P.P.......
 801c2ac:	00000010 00000000 00700000 00800040     ..........p.@...
 801c2bc:	001000e0 00900010 00000060 00000000     ........`.......
 801c2cc:	00600000 00800090 00d000a0 00900090     ..`.............
 801c2dc:	00000060 00000000 00f00000 00200010     `............. .
 801c2ec:	00200020 00400040 00000040 00000000      . .@.@.@.......
 801c2fc:	00600000 00900090 00900060 00900090     ..`.....`.......
 801c30c:	00000060 00000000 00600000 00900090     `.........`.....
 801c31c:	005000b0 00900010 00000060 00000000     ..P.....`.......
 801c32c:	00000000 00400000 00000000 00000000     ......@.........
 801c33c:	00000040 00000000 00000000 00400000     @.............@.
	...
 801c354:	00400040 00000000 00000000 00100000     @.@.............
 801c364:	00800060 00100060 00000000 00000000     `...`...........
	...
 801c37c:	000000f0 000000f0 00000000 00000000     ................
 801c38c:	00000000 00800000 00100060 00800060     ........`...`...
	...
 801c3a4:	00600000 00100090 00400020 00000040     ..`..... .@.@...
 801c3b4:	00000040 00000000 001c0000 005b0022     @...........".[.
 801c3c4:	00a500a5 00a500a5 0041009e 00000000     ..........A.....
 801c3d4:	00200000 00500050 00500050 00880070     .. .P.P.P.P.p...
 801c3e4:	00000088 00000000 00f00000 00880088     ................
 801c3f4:	008800f0 00880088 000000f0 00000000     ................
 801c404:	00380000 00840044 00800080 00440084     ..8.D.........D.
 801c414:	00000038 00000000 00e00000 00880090     8...............
 801c424:	00880088 00900088 000000e0 00000000     ................
 801c434:	00f80000 00800080 008000f8 00800080     ................
 801c444:	000000f8 00000000 00780000 00400040     ..........x.@.@.
 801c454:	00400070 00400040 00000040 00000000     p.@.@.@.@.......
 801c464:	00380000 00840044 009c0080 00440084     ..8.D.........D.
 801c474:	00000038 00000000 00880000 00880088     8...............
 801c484:	008800f8 00880088 00000088 00000000     ................
 801c494:	00800000 00800080 00800080 00800080     ................
 801c4a4:	00000080 00000000 00100000 00100010     ................
 801c4b4:	00100010 00900090 00000060 00000000     ........`.......
 801c4c4:	00880000 00a00090 00a000e0 00900090     ................
 801c4d4:	00000088 00000000 00800000 00800080     ................
 801c4e4:	00800080 00800080 000000f0 00000000     ................
 801c4f4:	00820000 00c600c6 00aa00aa 00aa00aa     ................
 801c504:	00000092 00000000 00840000 00a400c4     ................
 801c514:	009400a4 008c0094 00000084 00000000     ................
 801c524:	00300000 00840048 00840084 00480084     ..0.H.........H.
 801c534:	00000030 00000000 00f00000 00880088     0...............
 801c544:	00f00088 00800080 00000080 00000000     ................
 801c554:	00300000 00840048 00840084 00580084     ..0.H.........X.
 801c564:	00040034 00000000 00780000 00440044     4.........x.D.D.
 801c574:	00500078 00440048 00000042 00000000     x.P.H.D.B.......
 801c584:	00700000 00800088 00080070 00880088     ..p.....p.......
 801c594:	00000070 00000000 00f80000 00200020     p........... . .
 801c5a4:	00200020 00200020 00000020 00000000      . . . . .......
 801c5b4:	00840000 00840084 00840084 00480084     ..............H.
 801c5c4:	00000030 00000000 00880000 00500088     0.............P.
 801c5d4:	00500050 00500050 00000020 00000000     P.P.P.P. .......
 801c5e4:	00920000 00aa00aa 00aa00aa 00aa00aa     ................
 801c5f4:	00000044 00000000 00840000 00480048     D...........H.H.
 801c604:	00300030 00480048 00000084 00000000     0.0.H.H.........
 801c614:	00880000 00500050 00200020 00200020     ....P.P. . . . .
 801c624:	00000020 00000000 00f80000 00100008      ...............
 801c634:	00200020 00800040 000000f8 00000000      . .@...........
 801c644:	00c00000 00800080 00800080 00800080     ................
 801c654:	00800080 00000000 00800000 00400080     ..............@.
 801c664:	00400040 00200040 00000020 00000000     @.@.@. . .......
 801c674:	00c00000 00400040 00400040 00400040     ....@.@.@.@.@.@.
 801c684:	00400040 00000000 00400000 00a000a0     @.@.......@.....
 801c694:	000000a0 00000000 00000000 00000000     ................
	...
 801c6b4:	00f80000 00000000 00800000 00000040     ............@...
	...
 801c6d8:	00e00000 00700010 00900090 00000070     ......p.....p...
 801c6e8:	00000000 00800000 00a00080 009000d0     ................
 801c6f8:	00d00090 000000a0 00000000 00000000     ................
 801c708:	00600000 00800090 00900080 00000060     ..`.........`...
 801c718:	00000000 00100000 00500010 009000b0     ..........P.....
 801c728:	00b00090 00000050 00000000 00000000     ....P...........
 801c738:	00600000 00f00090 00900080 00000060     ..`.........`...
 801c748:	00000000 00c00000 00c00080 00800080     ................
 801c758:	00800080 00000080 00000000 00000000     ................
 801c768:	00500000 009000b0 00b00090 00100050     ..P.........P...
 801c778:	00000000 00800000 00a00080 009000d0     ................
 801c788:	00900090 00000090 00000000 00800000     ................
 801c798:	00800000 00800080 00800080 00000080     ................
 801c7a8:	00000000 00800000 00800000 00800080     ................
 801c7b8:	00800080 00800080 00000000 00800000     ................
 801c7c8:	00900080 00c000a0 009000a0 00000090     ................
 801c7d8:	00000000 00800000 00800080 00800080     ................
 801c7e8:	00800080 00000080 00000000 00000000     ................
 801c7f8:	00a60000 009200da 00920092 00000092     ................
	...
 801c810:	00a00000 009000d0 00900090 00000090     ................
	...
 801c828:	00600000 00900090 00900090 00000060     ..`.........`...
	...
 801c840:	00a00000 009000d0 00d00090 008000a0     ................
	...
 801c858:	00500000 009000b0 00b00090 00100050     ..P.........P...
	...
 801c870:	00a00000 008000c0 00800080 00000080     ................
	...
 801c888:	00e00000 00400090 00900020 00000060     ......@. ...`...
 801c898:	00000000 00800000 00c00080 00800080     ................
 801c8a8:	00800080 000000c0 00000000 00000000     ................
 801c8b8:	00900000 00900090 00b00090 00000050     ............P...
	...
 801c8d0:	00880000 00500088 00500050 00000020     ......P.P.P. ...
	...
 801c8e8:	00920000 00aa00aa 00aa00aa 00000044     ............D...
	...
 801c900:	00880000 00200050 00500020 00000088     ....P. . .P.....
	...
 801c918:	00880000 00500050 00200050 00200020     ....P.P.P. . . .
	...
 801c930:	00f00000 00200010 00800040 000000f0     ...... .@.......
 801c940:	00000000 00c00000 00800080 00000080     ................
 801c950:	00800080 00800080 00000000 00800000     ................
 801c960:	00800080 00800080 00800080 00800080     ................
 801c970:	00000000 00c00000 00400040 00200040     ........@.@.@. .
 801c980:	00400040 00400040 00000000 00000000     @.@.@.@.........
 801c990:	00000000 00b000e8 00000000 00000000     ................
	...
 801c9a8:	00a000e0 00a000a0 00a000a0 000000e0     ................

0801c9b8 <ASCII8x8_Table>:
	...
 801c9c8:	00400040 00400040 00400040 00400000     @.@.@.@.@.@...@.
 801c9d8:	00a000a0 000000a0 00000000 00000000     ................
 801c9e8:	00240000 00fe0024 00fc0048 00480048     ..$.$...H...H.H.
 801c9f8:	00540038 00380050 00140014 00380054     8.T.P.8.....T.8.
 801ca08:	00a80044 005000a8 001a0014 0024002a     D.....P.....*.$.
 801ca18:	00280010 00100028 004c0074 0030004c     ..(.(...t.L.L.0.
 801ca28:	00100010 00000010 00000000 00000000     ................
 801ca38:	00100008 00100010 00100010 00080010     ................
 801ca48:	00080010 00080008 00080008 00100008     ................
 801ca58:	00000000 00180024 0018003c 00000024     ....$...<...$...
 801ca68:	00000000 00100010 0010007c 00000010     ........|.......
	...
 801ca80:	00080000 00100008 00000000 00000000     ................
 801ca90:	0000003c 00000000 00000000 00000000     <...............
 801caa0:	00000000 00180018 00080008 00100008     ................
 801cab0:	00200010 00200020 00240018 00240024     .. . . ...$.$.$.
 801cac0:	00240024 00180024 00180008 00080028     $.$.$.......(...
 801cad0:	00080008 00080008 00440038 00040000     ........8.D.....
 801cae0:	00100008 007c0020 00240018 00180004     .... .|...$.....
 801caf0:	00040004 00180024 000c0004 00240014     ....$.........$.
 801cb00:	007e0044 00040004 0020003c 00380020     D.~.....<. . .8.
 801cb10:	00040004 00180024 00240018 00380020     ....$.....$. .8.
 801cb20:	00240024 00180024 0004003c 00080008     $.$.$...<.......
 801cb30:	00100008 00100010 00240018 00180024     ..........$.$...
 801cb40:	00240024 00180024 00240018 00240024     $.$.$.....$.$.$.
 801cb50:	0004001c 00180024 00000000 00000010     ....$...........
 801cb60:	00100000 00000000 00000000 00000008     ................
 801cb70:	00080000 00000010 00000000 00180004     ................
 801cb80:	00180020 00000004 00000000 003c0000      .............<.
 801cb90:	003c0000 00000000 00000000 00180020     ..<......... ...
 801cba0:	00180004 00000020 00240018 00080004     .... .....$.....
 801cbb0:	00100010 00100000 0042003c 00a50099     ........<.B.....
 801cbc0:	009d00a5 00380042 00440038 00440044     ....B.8.8.D.D.D.
 801cbd0:	0044007c 00440044 00440078 00780044     |.D.D.D.x.D.D.x.
 801cbe0:	00440044 00780044 0022001c 00400042     D.D.D.x...".B.@.
 801cbf0:	00420040 001c0022 00480070 00440044     @.B."...p.H.D.D.
 801cc00:	00440044 00700048 0040007c 007c0040     D.D.H.p.|.@.@.|.
 801cc10:	00400040 007c0040 0020003c 00380020     @.@.@.|.<. . .8.
 801cc20:	00200020 00200020 0022001c 00400042      . . . ...".B.@.
 801cc30:	0042004e 001c0022 00440044 007c0044     N.B."...D.D.D.|.
 801cc40:	00440044 00440044 00100010 00100010     D.D.D.D.........
 801cc50:	00100010 00100010 00040004 00040004     ................
 801cc60:	00240004 00180024 00480044 00700050     ..$.$...D.H.P.p.
 801cc70:	00480050 00440048 00200020 00200020     P.H.H.D. . . . .
 801cc80:	00200020 003c0020 00c60082 00aa00c6      . . .<.........
 801cc90:	00aa00aa 009200aa 00620042 00520052     ........B.b.R.R.
 801cca0:	004a004a 00420046 00240018 00420042     J.J.F.B...$.B.B.
 801ccb0:	00420042 00180024 00440078 00440044     B.B.$...x.D.D.D.
 801ccc0:	00400078 00400040 00240018 00420042     x.@.@.@...$.B.B.
 801ccd0:	00420042 001a002c 00440078 00780044     B.B.,...x.D.D.x.
 801cce0:	00480050 00420044 00440038 00380040     P.H.D.B.8.D.@.8.
 801ccf0:	00440004 00380044 0010007c 00100010     ..D.D.8.|.......
 801cd00:	00100010 00100010 00420042 00420042     ........B.B.B.B.
 801cd10:	00420042 00180024 00440044 00280028     B.B.$...D.D.(.(.
 801cd20:	00280028 00100028 00aa0092 00aa00aa     (.(.(...........
 801cd30:	00aa00aa 004400aa 00240042 00180024     ......D.B.$.$...
 801cd40:	00240018 00420024 00280044 00100028     ..$.$.B.D.(.(...
 801cd50:	00100010 00100010 0004007c 00100008     ........|.......
 801cd60:	00200010 007c0040 0010001c 00100010     .. .@.|.........
 801cd70:	00100010 001c0010 00100010 00080008     ................
 801cd80:	00080008 00040004 0004001c 00040004     ................
 801cd90:	00040004 001c0004 00280010 00000044     ..........(.D...
	...
 801cdb8:	00100020 00000010 00000000 00000000      ...............
 801cdc8:	00000000 00040018 0024001c 001c0024     ..........$.$...
 801cdd8:	00200020 00340028 00240024 00280034      . .(.4.$.$.4.(.
 801cde8:	00000000 00240018 00200020 00180024     ......$. . .$...
 801cdf8:	00040004 002c0014 00240024 0014002c     ......,.$.$.,...
 801ce08:	00000000 00240018 0020003c 00180024     ......$.<. .$...
 801ce18:	00180000 00100010 00100018 00100010     ................
 801ce28:	00180000 00240024 00040018 00180024     ....$.$.....$...
 801ce38:	00200020 00340028 00240024 00240024      . .(.4.$.$.$.$.
 801ce48:	00000010 00100010 00100010 00100010     ................
 801ce58:	00000008 00080008 00080008 00100028     ............(...
 801ce68:	00200020 00280024 00280030 00240024      . .$.(.0.(.$.$.
 801ce78:	00100010 00100010 00100010 00100010     ................
 801ce88:	00000000 00da00a6 00920092 00920092     ................
 801ce98:	00000000 00340028 00240024 00240024     ....(.4.$.$.$.$.
 801cea8:	00000000 00240018 00240024 00180024     ......$.$.$.$...
 801ceb8:	00280000 00240034 00200038 00200020     ..(.4.$.8. . . .
 801cec8:	00140000 0024002c 0004001c 00040004     ....,.$.........
 801ced8:	00000000 0030002c 00200020 00200020     ....,.0. . . . .
 801cee8:	00000000 00240018 00080010 00180024     ......$.....$...
 801cef8:	00100000 00100038 00100010 00180010     ....8...........
 801cf08:	00000000 00240024 00240024 0014002c     ....$.$.$.$.,...
 801cf18:	00000000 00440044 00280028 00100028     ....D.D.(.(.(...
 801cf28:	00000000 00aa0092 00aa00aa 004400aa     ..............D.
 801cf38:	00000000 00280044 00100010 00440028     ....D.(.....(.D.
 801cf48:	00280000 00280028 00100010 00100010     ..(.(.(.........
 801cf58:	00000000 0004003c 00100008 003c0020     ....<....... .<.
 801cf68:	00080000 00100010 00100020 00080010     ........ .......
 801cf78:	00100010 00100010 00100010 00100010     ................
 801cf88:	00100000 00080008 00080004 00100008     ................
 801cf98:	00000000 00600000 000c0092 00000000     ......`.........
 801cfa8:	00ff00ff 00ff00ff 00ff00ff 00ff00ff     ................

0801cfb8 <_ctype_>:
 801cfb8:	20202000 20202020 28282020 20282828     .         ((((( 
 801cfc8:	20202020 20202020 20202020 20202020                     
 801cfd8:	10108820 10101010 10101010 10101010      ...............
 801cfe8:	04040410 04040404 10040404 10101010     ................
 801cff8:	41411010 41414141 01010101 01010101     ..AAAAAA........
 801d008:	01010101 01010101 01010101 10101010     ................
 801d018:	42421010 42424242 02020202 02020202     ..BBBBBB........
 801d028:	02020202 02020202 02020202 10101010     ................
 801d038:	00000020 00000000 00000000 00000000      ...............
	...

0801d0bc <_sromdev>:
	...
 801d0c8:	00000001 	.word	0x00000001
	...
